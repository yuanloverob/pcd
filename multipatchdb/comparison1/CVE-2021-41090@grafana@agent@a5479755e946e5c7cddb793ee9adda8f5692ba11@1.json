{
  "cve_id": "CVE-2021-41090",
  "cve_desc": "Grafana Agent is a telemetry collector for sending metrics, logs, and trace data to the opinionated Grafana observability stack. Prior to versions 0.20.1 and 0.21.2, inline secrets defined within a metrics instance config are exposed in plaintext over two endpoints: metrics instance configs defined in the base YAML file are exposed at `/-/config` and metrics instance configs defined for the scraping service are exposed at `/agent/api/v1/configs/:key`. Inline secrets will be exposed to anyone being able to reach these endpoints. If HTTPS with client authentication is not configured, these endpoints are accessible to unauthenticated users. Secrets found in these sections are used for delivering metrics to a Prometheus Remote Write system, authenticating against a system for discovering Prometheus targets, and authenticating against a system for collecting metrics. This does not apply for non-inlined secrets, such as `*_file` based secrets. This issue is patched in Grafana Agent versions 0.20.1 and 0.21.2. A few workarounds are available. Users who cannot upgrade should use non-inline secrets where possible. Users may also desire to restrict API access to Grafana Agent with some combination of restricting the network interfaces Grafana Agent listens on through `http_listen_address` in the `server` block, configuring Grafana Agent to use HTTPS with client authentication, and/or using firewall rules to restrict external access to Grafana Agent's API.",
  "repo": "grafana/agent",
  "patch_hash": "a5479755e946e5c7cddb793ee9adda8f5692ba11",
  "patch_info": {
    "commit_hash": "a5479755e946e5c7cddb793ee9adda8f5692ba11",
    "repo": "grafana/agent",
    "commit_url": "https://github.com/grafana/agent/commit/a5479755e946e5c7cddb793ee9adda8f5692ba11",
    "files": [
      "pkg/metrics/instance/configstore/api.go",
      "pkg/metrics/instance/configstore/api_test.go",
      "pkg/metrics/instance/instance.go",
      "pkg/metrics/instance/marshal_test.go"
    ],
    "message": "Merge pull request #17 from grafana/marshal-instance-config-secrets-0.21.2\n\n[v0.21.2] Scrub secrets when marshaling instance configs",
    "before_after_code_files": [
      "pkg/metrics/instance/configstore/api.go||pkg/metrics/instance/configstore/api.go",
      "pkg/metrics/instance/configstore/api_test.go||pkg/metrics/instance/configstore/api_test.go",
      "pkg/metrics/instance/instance.go||pkg/metrics/instance/instance.go",
      "pkg/metrics/instance/marshal_test.go||pkg/metrics/instance/marshal_test.go"
    ]
  },
  "patch_diff": {
    "pkg/metrics/instance/configstore/api.go||pkg/metrics/instance/configstore/api.go": [
      "File: pkg/metrics/instance/configstore/api.go -> pkg/metrics/instance/configstore/api.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "126:  case err != nil:",
      "127:   api.writeError(rw, http.StatusInternalServerError, err)",
      "128:  case err == nil:",
      "130:   if err != nil {",
      "131:    api.writeError(rw, http.StatusInternalServerError, fmt.Errorf(\"could not marshal config for response: %w\", err))",
      "132:    return",
      "",
      "[Removed Lines]",
      "129:   bb, err := instance.MarshalConfig(&cfg, false)",
      "",
      "[Added Lines]",
      "129:   bb, err := instance.MarshalConfig(&cfg, true)",
      "",
      "---------------"
    ],
    "pkg/metrics/instance/configstore/api_test.go||pkg/metrics/instance/configstore/api_test.go": [
      "File: pkg/metrics/instance/configstore/api_test.go -> pkg/metrics/instance/configstore/api_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import (",
      "4:  \"bytes\"",
      "5:  \"context\"",
      "6:  \"fmt\"",
      "7:  \"io/ioutil\"",
      "8:  \"net/http\"",
      "9:  \"net/http/httptest\"",
      "10:  \"testing\"",
      "11:  \"time\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6:  \"encoding/json\"",
      "8:  \"io\"",
      "12:  \"strings\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "128:  })",
      "129: }",
      "131: func TestServer_PutConfiguration(t *testing.T) {",
      "132:  var s Mock",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "134: func TestAPI_GetConfiguration_ScrubSecrets(t *testing.T) {",
      "135:  rawConfig := `name: exists",
      "136: scrape_configs:",
      "137: - job_name: local_scrape",
      "138:   follow_redirects: true",
      "139:   honor_timestamps: true",
      "140:   metrics_path: /metrics",
      "141:   scheme: http",
      "142:   static_configs:",
      "143:   - targets:",
      "144:     - 127.0.0.1:12345",
      "145:     labels:",
      "146:       cluster: localhost",
      "147:   basic_auth:",
      "148:     username: admin",
      "149:     password: SCRUBME",
      "150: remote_write:",
      "151: - url: http://localhost:9009/api/prom/push",
      "152:   remote_timeout: 30s",
      "153:   name: test-d0f32c",
      "154:   basic_auth:",
      "155:     username: admin",
      "156:     password: SCRUBME",
      "157:   queue_config:",
      "158:     capacity: 500",
      "159:     max_shards: 1000",
      "160:     min_shards: 1",
      "161:     max_samples_per_send: 100",
      "162:     batch_send_deadline: 5s",
      "163:     min_backoff: 30ms",
      "164:     max_backoff: 100ms",
      "165:   follow_redirects: true",
      "166:   metadata_config:",
      "167:     send: true",
      "168:     send_interval: 1m",
      "169:     max_samples_per_send: 500",
      "170: wal_truncate_frequency: 1m0s",
      "171: min_wal_time: 5m0s",
      "172: max_wal_time: 4h0m0s",
      "173: remote_flush_deadline: 1m0s",
      "174: `",
      "175:  scrubbedConfig := strings.ReplaceAll(rawConfig, \"SCRUBME\", \"<secret>\")",
      "177:  s := &Mock{",
      "178:   GetFunc: func(ctx context.Context, key string) (instance.Config, error) {",
      "179:    c, err := instance.UnmarshalConfig(strings.NewReader(rawConfig))",
      "180:    if err != nil {",
      "181:     return instance.Config{}, err",
      "182:    }",
      "183:    return *c, nil",
      "184:   },",
      "185:  }",
      "187:  api := NewAPI(log.NewNopLogger(), s, nil)",
      "188:  env := newAPITestEnvironment(t, api)",
      "190:  resp, err := http.Get(env.srv.URL + \"/agent/api/v1/configs/exists\")",
      "191:  require.NoError(t, err)",
      "192:  require.Equal(t, http.StatusOK, resp.StatusCode)",
      "193:  respBytes, err := io.ReadAll(resp.Body)",
      "194:  require.NoError(t, err)",
      "196:  var apiResp struct {",
      "197:   Status string `json:\"status\"`",
      "198:   Data   struct {",
      "199:    Value string `json:\"value\"`",
      "200:   } `json:\"data\"`",
      "201:  }",
      "202:  err = json.Unmarshal(respBytes, &apiResp)",
      "203:  require.NoError(t, err)",
      "204:  require.Equal(t, \"success\", apiResp.Status)",
      "205:  require.YAMLEq(t, scrubbedConfig, apiResp.Data.Value)",
      "207:  t.Run(\"With Client\", func(t *testing.T) {",
      "208:   cli := client.New(env.srv.URL)",
      "209:   actual, err := cli.GetConfiguration(context.Background(), \"exists\")",
      "210:   require.NoError(t, err)",
      "215:   actualBytes, err := instance.MarshalConfig(actual, false)",
      "216:   require.NoError(t, err)",
      "217:   require.YAMLEq(t, scrubbedConfig, string(actualBytes))",
      "218:  })",
      "219: }",
      "",
      "---------------"
    ],
    "pkg/metrics/instance/instance.go||pkg/metrics/instance/instance.go": [
      "File: pkg/metrics/instance/instance.go -> pkg/metrics/instance/instance.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "94:  if err != nil {",
      "95:   return nil, err",
      "96:  }",
      "",
      "[Removed Lines]",
      "93:  bb, err := MarshalConfig(&c, false)",
      "",
      "[Added Lines]",
      "93:  bb, err := MarshalConfig(&c, true)",
      "",
      "---------------"
    ],
    "pkg/metrics/instance/marshal_test.go||pkg/metrics/instance/marshal_test.go": [
      "File: pkg/metrics/instance/marshal_test.go -> pkg/metrics/instance/marshal_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "25:  require.Error(t, err)",
      "26: }",
      "31:  cfg := `name: test",
      "32: scrape_configs:",
      "33: - job_name: local_scrape",
      "",
      "[Removed Lines]",
      "30: func TestMarshal_UnmarshalConfig(t *testing.T) {",
      "",
      "[Added Lines]",
      "30: func TestMarshal_UnmarshalConfig_RetainSecrets(t *testing.T) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "69: remote_flush_deadline: 1m0s",
      "70: `",
      "100: }",
      "105:  cfg := `name: test",
      "106: scrape_configs:",
      "107: - job_name: local_scrape",
      "",
      "[Removed Lines]",
      "72:  t.Run(\"direct marshal\", func(t *testing.T) {",
      "73:   var c Config",
      "74:   err := yaml.Unmarshal([]byte(cfg), &c)",
      "75:   require.NoError(t, err)",
      "77:   out, err := yaml.Marshal(c)",
      "78:   require.NoError(t, err)",
      "79:   require.YAMLEq(t, cfg, string(out))",
      "80:  })",
      "82:  t.Run(\"direct mashal pointer\", func(t *testing.T) {",
      "83:   c := &Config{}",
      "84:   err := yaml.Unmarshal([]byte(cfg), c)",
      "85:   require.NoError(t, err)",
      "87:   out, err := yaml.Marshal(c)",
      "88:   require.NoError(t, err)",
      "89:   require.YAMLEq(t, cfg, string(out))",
      "90:  })",
      "92:  t.Run(\"custom marshal methods\", func(t *testing.T) {",
      "93:   c, err := UnmarshalConfig(strings.NewReader(cfg))",
      "94:   require.NoError(t, err)",
      "96:   out, err := MarshalConfig(c, false)",
      "97:   require.NoError(t, err)",
      "98:   require.YAMLEq(t, cfg, string(out))",
      "99:  })",
      "104: func TestMarshal_UnmarshalConfig_Sigv4(t *testing.T) {",
      "",
      "[Added Lines]",
      "72:  c, err := UnmarshalConfig(strings.NewReader(cfg))",
      "73:  require.NoError(t, err)",
      "75:  out, err := MarshalConfig(c, false)",
      "76:  require.NoError(t, err)",
      "77:  require.YAMLEq(t, cfg, string(out))",
      "82: func TestMarshal_UnmarshalConfig_ScrubSecrets(t *testing.T) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "116:       cluster: localhost",
      "117:   basic_auth:",
      "118:     username: admin",
      "120: remote_write:",
      "121: - url: http://localhost:9009/api/prom/push",
      "122:   remote_timeout: 30s",
      "123:   name: test-d0f32c",
      "125:   queue_config:",
      "126:     capacity: 500",
      "127:     max_shards: 1000",
      "",
      "[Removed Lines]",
      "119:     password: foobar",
      "124:   sigv4: {}",
      "",
      "[Added Lines]",
      "97:     password: SCRUBME",
      "102:   basic_auth:",
      "103:     username: admin",
      "104:     password: SCRUBME",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "141: remote_flush_deadline: 1m0s",
      "142: `",
      "144:  t.Run(\"direct marshal\", func(t *testing.T) {",
      "145:   var c Config",
      "146:   err := yaml.Unmarshal([]byte(cfg), &c)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "124:  scrub := func(in string) string {",
      "125:   return strings.ReplaceAll(in, \"SCRUBME\", \"<secret>\")",
      "126:  }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "149:   out, err := yaml.Marshal(c)",
      "150:   require.NoError(t, err)",
      "152:  })",
      "157:   require.NoError(t, err)",
      "160:   require.NoError(t, err)",
      "162:  })",
      "164:  t.Run(\"custom marshal methods\", func(t *testing.T) {",
      "165:   c, err := UnmarshalConfig(strings.NewReader(cfg))",
      "166:   require.NoError(t, err)",
      "169:   require.NoError(t, err)",
      "171:  })",
      "172: }",
      "",
      "[Removed Lines]",
      "151:   require.YAMLEq(t, cfg, string(out))",
      "154:  t.Run(\"direct mashal pointer\", func(t *testing.T) {",
      "155:   c := &Config{}",
      "156:   err := yaml.Unmarshal([]byte(cfg), c)",
      "159:   out, err := yaml.Marshal(c)",
      "161:   require.YAMLEq(t, cfg, string(out))",
      "168:   out, err := MarshalConfig(c, false)",
      "170:   require.YAMLEq(t, cfg, string(out))",
      "",
      "[Added Lines]",
      "135:   require.YAMLEq(t, scrub(cfg), string(out))",
      "138:  t.Run(\"direct marshal pointer\", func(t *testing.T) {",
      "139:   var c Config",
      "140:   err := yaml.Unmarshal([]byte(cfg), &c)",
      "143:   out, err := yaml.Marshal(&c)",
      "145:   require.YAMLEq(t, scrub(cfg), string(out))",
      "152:   out, err := MarshalConfig(c, true)",
      "154:   require.YAMLEq(t, scrub(cfg), string(out))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4c14aa2b0d9f0ef9b718d96dc45341e420a668e8",
      "candidate_info": {
        "commit_hash": "4c14aa2b0d9f0ef9b718d96dc45341e420a668e8",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/4c14aa2b0d9f0ef9b718d96dc45341e420a668e8",
        "files": [
          "pkg/config/config.go"
        ],
        "message": "go fmt",
        "before_after_code_files": [
          "pkg/config/config.go||pkg/config/config.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/grafana/agent/pull/1153"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pkg/config/config.go||pkg/config/config.go": [
          "File: pkg/config/config.go -> pkg/config/config.go"
        ]
      }
    },
    {
      "candidate_hash": "7f868feb0bab5269f10a9e1478e7ad5d2fdee42e",
      "candidate_info": {
        "commit_hash": "7f868feb0bab5269f10a9e1478e7ad5d2fdee42e",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/7f868feb0bab5269f10a9e1478e7ad5d2fdee42e",
        "files": [
          "pkg/integrations/kafka_exporter/kafka_test.go"
        ],
        "message": "Fix failing test",
        "before_after_code_files": [
          "pkg/integrations/kafka_exporter/kafka_test.go||pkg/integrations/kafka_exporter/kafka_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/grafana/agent/pull/1153"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pkg/integrations/kafka_exporter/kafka_test.go||pkg/integrations/kafka_exporter/kafka_test.go": [
          "File: pkg/integrations/kafka_exporter/kafka_test.go -> pkg/integrations/kafka_exporter/kafka_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  \"github.com/grafana/agent/pkg/config\"",
          "7: )",
          "10:  stringCfg := `",
          "11: prometheus:",
          "12:   wal_directory: /tmp/agent",
          "",
          "[Removed Lines]",
          "9: func TestConfig_SecretKafkaUserName(t *testing.T) {",
          "",
          "[Added Lines]",
          "9: func TestConfig_SecretKafkaPassword(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: `",
          "18:  config.CheckSecret(t, stringCfg, \"secret_password\")",
          "19: }",
          "",
          "[Removed Lines]",
          "21: func TestConfig_SecretKafkaPassword(t *testing.T) {",
          "22:  stringCfg := `",
          "23: prometheus:",
          "24:   wal_directory: /tmp/agent",
          "25: integrations:",
          "26:   kafka_exporter:",
          "27:     enabled: true",
          "28:     sasl_username: secret_username",
          "29: `",
          "30:  config.CheckSecret(t, stringCfg, \"secret_username\")",
          "31: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2460feb9c271779a8a2db5f1ba5d78698d5b4402",
      "candidate_info": {
        "commit_hash": "2460feb9c271779a8a2db5f1ba5d78698d5b4402",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/2460feb9c271779a8a2db5f1ba5d78698d5b4402",
        "files": [
          "docs/configuration/integrations/node-exporter-config.md",
          "docs/configuration/integrations/process-exporter-config.md",
          "docs/getting-started/_index.md",
          "docs/operator/custom-resource-quickstart.md",
          "docs/operator/getting-started.md",
          "pkg/operator/defaults.go",
          "production/README.md",
          "production/kubernetes/agent-bare.yaml",
          "production/kubernetes/agent-loki.yaml",
          "production/kubernetes/agent-traces.yaml",
          "production/kubernetes/build/lib/version.libsonnet",
          "production/kubernetes/install-bare.sh",
          "production/tanka/grafana-agent/v1/main.libsonnet",
          "production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
        ],
        "message": "Update version to v0.21.2",
        "before_after_code_files": [
          "pkg/operator/defaults.go||pkg/operator/defaults.go",
          "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
          "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
          "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
          "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/grafana/agent/pull/1153"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pkg/operator/defaults.go||pkg/operator/defaults.go": [
          "File: pkg/operator/defaults.go -> pkg/operator/defaults.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:   \"v0.20.0\",",
          "18:   \"v0.21.0\",",
          "19:   \"v0.21.1\",",
          "22:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:   \"v0.21.2\",",
          "",
          "---------------"
        ],
        "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet": [
          "File: production/kubernetes/build/lib/version.libsonnet -> production/kubernetes/build/lib/version.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 'grafana/agent:v0.21.1'",
          "",
          "[Added Lines]",
          "1: 'grafana/agent:v0.21.2'",
          "",
          "---------------"
        ],
        "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh": [
          "File: production/kubernetes/install-bare.sh -> production/kubernetes/install-bare.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: check_installed curl",
          "26: check_installed envsubst",
          "29: MANIFEST_URL=${MANIFEST_URL:-https://raw.githubusercontent.com/grafana/agent/${MANIFEST_BRANCH}/production/kubernetes/agent-bare.yaml}",
          "30: NAMESPACE=${NAMESPACE:-default}",
          "",
          "[Removed Lines]",
          "28: MANIFEST_BRANCH=v0.21.1",
          "",
          "[Added Lines]",
          "28: MANIFEST_BRANCH=v0.21.2",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet": [
          "File: production/tanka/grafana-agent/v1/main.libsonnet -> production/tanka/grafana-agent/v1/main.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: (import './lib/traces.libsonnet') +",
          "16: {",
          "17:   _images:: {",
          "20:   },",
          "",
          "[Removed Lines]",
          "18:     agent: 'grafana/agent:v0.21.1',",
          "19:     agentctl: 'grafana/agentctl:v0.21.1',",
          "",
          "[Added Lines]",
          "18:     agent: 'grafana/agent:v0.21.2',",
          "19:     agentctl: 'grafana/agentctl:v0.21.2',",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/base.libsonnet -> production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:   local this = self,",
          "12:   _images:: {",
          "15:   },",
          "16:   _config:: {",
          "17:     name: name,",
          "",
          "[Removed Lines]",
          "13:     agent: 'grafana/agent:v0.21.1',",
          "14:     agentctl: 'grafana/agentctl:v0.21.1',",
          "",
          "[Added Lines]",
          "13:     agent: 'grafana/agent:v0.21.2',",
          "14:     agentctl: 'grafana/agentctl:v0.21.2',",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/syncer.libsonnet -> production/tanka/grafana-agent/v2/internal/syncer.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: ) {",
          "15:   local _config = {",
          "16:     api: error 'api must be set',",
          "18:     schedule: '*/5 * * * *',",
          "19:     configs: [],",
          "20:   } + config,",
          "",
          "[Removed Lines]",
          "17:     image: 'grafana/agentctl:v0.21.1',",
          "",
          "[Added Lines]",
          "17:     image: 'grafana/agentctl:v0.21.2',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d3ba88c9c6a1ce3a81032dffac07d49e98796e76",
      "candidate_info": {
        "commit_hash": "d3ba88c9c6a1ce3a81032dffac07d49e98796e76",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/d3ba88c9c6a1ce3a81032dffac07d49e98796e76",
        "files": [
          "pkg/config/config.go",
          "pkg/integrations/mongodb_exporter/mongodb_exporter.go",
          "pkg/integrations/mysqld_exporter/mysqld-exporter.go",
          "pkg/integrations/postgres_exporter/postgres_exporter.go"
        ],
        "message": "Updated changes from the merge.",
        "before_after_code_files": [
          "pkg/config/config.go||pkg/config/config.go",
          "pkg/integrations/mongodb_exporter/mongodb_exporter.go||pkg/integrations/mongodb_exporter/mongodb_exporter.go",
          "pkg/integrations/mysqld_exporter/mysqld-exporter.go||pkg/integrations/mysqld_exporter/mysqld-exporter.go",
          "pkg/integrations/postgres_exporter/postgres_exporter.go||pkg/integrations/postgres_exporter/postgres_exporter.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/grafana/agent/pull/1153"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pkg/config/config.go||pkg/config/config.go": [
          "File: pkg/config/config.go -> pkg/config/config.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"flag\"",
          "5:  \"fmt\"",
          "6:  \"io/ioutil\"",
          "7:  \"os\"",
          "8:  \"strings\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:  \"github.com/stretchr/testify/require\"",
          "",
          "---------------"
        ],
        "pkg/integrations/mongodb_exporter/mongodb_exporter.go||pkg/integrations/mongodb_exporter/mongodb_exporter.go": [
          "File: pkg/integrations/mongodb_exporter/mongodb_exporter.go -> pkg/integrations/mongodb_exporter/mongodb_exporter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: }",
          "44:  if err != nil {",
          "45:   return \"\", fmt.Errorf(\"could not parse url: %w\", err)",
          "46:  }",
          "",
          "[Removed Lines]",
          "42: func (c *Config) InstanceKey(agentKey string) (string, error) {",
          "43:  u, err := url.Parse(c.URI)",
          "",
          "[Added Lines]",
          "41: func (c *Config) InstanceKey(_ string) (string, error) {",
          "42:  u, err := url.Parse(string(c.URI))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:  logrusLogger := NewLogger(logger)",
          "63:  exp, err := exporter.New(&exporter.Opts{",
          "65:   Logger:                 logrusLogger,",
          "66:   DisableDefaultRegistry: true,",
          "",
          "[Removed Lines]",
          "64:   URI:                    c.URI,",
          "",
          "[Added Lines]",
          "63:   URI:                    string(c.URI),",
          "",
          "---------------"
        ],
        "pkg/integrations/mysqld_exporter/mysqld-exporter.go||pkg/integrations/mysqld_exporter/mysqld-exporter.go": [
          "File: pkg/integrations/mysqld_exporter/mysqld-exporter.go -> pkg/integrations/mysqld_exporter/mysqld-exporter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import (",
          "5:  \"context\"",
          "6:  \"fmt\"",
          "8:  config_util \"github.com/prometheus/common/config\"",
          "10:  \"github.com/go-kit/log\"",
          "11:  \"github.com/go-kit/log/level\"",
          "",
          "[Removed Lines]",
          "7:  \"os\"",
          "",
          "[Added Lines]",
          "8:  \"os\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87: }",
          "92:  if err != nil {",
          "93:   return \"\", fmt.Errorf(\"failed to parse DSN: %w\", err)",
          "94:  }",
          "",
          "[Removed Lines]",
          "90: func (c *Config) InstanceKey(agentKey string) (string, error) {",
          "91:  m, err := mysql.ParseDSN(c.DataSourceName.(string))",
          "",
          "[Added Lines]",
          "90: func (c *Config) InstanceKey(_ string) (string, error) {",
          "91:  m, err := mysql.ParseDSN(string(c.DataSourceName))",
          "",
          "---------------"
        ],
        "pkg/integrations/postgres_exporter/postgres_exporter.go||pkg/integrations/postgres_exporter/postgres_exporter.go": [
          "File: pkg/integrations/postgres_exporter/postgres_exporter.go -> pkg/integrations/postgres_exporter/postgres_exporter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import (",
          "5:  \"fmt\"",
          "6:  \"os\"",
          "7:  \"strings\"",
          "10:  \"github.com/go-kit/log\"",
          "11:  \"github.com/grafana/agent/pkg/integrations\"",
          "",
          "[Removed Lines]",
          "8:  config_util \"github.com/prometheus/common/config\"",
          "",
          "[Added Lines]",
          "6:  config_util \"github.com/prometheus/common/config\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:  dsn, err := c.getDataSourceNames()",
          "52:  if err != nil {",
          "53:   return \"\", err",
          "",
          "[Removed Lines]",
          "50: func (c *Config) InstanceKey(agentKey string) (string, error) {",
          "",
          "[Added Lines]",
          "50: func (c *Config) InstanceKey(_ string) (string, error) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113: func (c *Config) getDataSourceNames() ([]string, error) {",
          "114:  dsn := c.DataSourceNames",
          "115:  if len(dsn) == 0 {",
          "117:  }",
          "118:  if len(dsn) == 0 {",
          "119:   return nil, fmt.Errorf(\"cannot create postgres_exporter; neither postgres_exporter.data_source_name or $POSTGRES_EXPORTER_DATA_SOURCE_NAME is set\")",
          "120:  }",
          "122: }",
          "124: func init() {",
          "",
          "[Removed Lines]",
          "116:   dsn = strings.Split(os.Getenv(\"POSTGRES_EXPORTER_DATA_SOURCE_NAME\"), \",\")",
          "121:  return dsn, nil",
          "",
          "[Added Lines]",
          "115:  var stringDsn []string",
          "117:   stringDsn = append(stringDsn, strings.Split(os.Getenv(\"POSTGRES_EXPORTER_DATA_SOURCE_NAME\"), \",\")...)",
          "118:  } else {",
          "119:   for _, d := range dsn {",
          "120:    stringDsn = append(stringDsn, string(d))",
          "121:   }",
          "126:  return stringDsn, nil",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5b9eed50f475b5bcf5b0a64d685c35c9a41dc2be",
      "candidate_info": {
        "commit_hash": "5b9eed50f475b5bcf5b0a64d685c35c9a41dc2be",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/5b9eed50f475b5bcf5b0a64d685c35c9a41dc2be",
        "files": [
          "pkg/config/config.go",
          "pkg/config/config_test.go",
          "pkg/integrations/github_exporter/github_test.go",
          "pkg/integrations/kafka_exporter/kafka_exporter.go",
          "pkg/integrations/kafka_exporter/kafka_test.go",
          "pkg/integrations/mongodb_exporter/mongodb_test.go",
          "pkg/integrations/mysqld_exporter/mysqld_test.go",
          "pkg/integrations/postgres_exporter/postgres_test.go",
          "pkg/integrations/redis_exporter/redis_exporter.go",
          "pkg/integrations/redis_exporter/redis_exporter_test.go"
        ],
        "message": "Break out config tests to their own implementation. Also remove username has a sensitive value.",
        "before_after_code_files": [
          "pkg/config/config.go||pkg/config/config.go",
          "pkg/config/config_test.go||pkg/config/config_test.go",
          "pkg/integrations/github_exporter/github_test.go||pkg/integrations/github_exporter/github_test.go",
          "pkg/integrations/kafka_exporter/kafka_exporter.go||pkg/integrations/kafka_exporter/kafka_exporter.go",
          "pkg/integrations/kafka_exporter/kafka_test.go||pkg/integrations/kafka_exporter/kafka_test.go",
          "pkg/integrations/mongodb_exporter/mongodb_test.go||pkg/integrations/mongodb_exporter/mongodb_test.go",
          "pkg/integrations/mysqld_exporter/mysqld_test.go||pkg/integrations/mysqld_exporter/mysqld_test.go",
          "pkg/integrations/postgres_exporter/postgres_test.go||pkg/integrations/postgres_exporter/postgres_test.go",
          "pkg/integrations/redis_exporter/redis_exporter.go||pkg/integrations/redis_exporter/redis_exporter.go",
          "pkg/integrations/redis_exporter/redis_exporter_test.go||pkg/integrations/redis_exporter/redis_exporter_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/grafana/agent/pull/1153"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pkg/config/config.go||pkg/config/config.go": [
          "File: pkg/config/config.go -> pkg/config/config.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:  \"fmt\"",
          "6:  \"io/ioutil\"",
          "7:  \"os\"",
          "8:  \"unicode\"",
          "10:  \"github.com/go-kit/kit/log\"",
          "11:  \"github.com/go-kit/kit/log/level\"",
          "12:  \"github.com/weaveworks/common/server\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:  \"strings\"",
          "9:  \"testing\"",
          "12:  \"github.com/stretchr/testify/require\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247:  return &cfg, nil",
          "248: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255: func CheckSecret(t *testing.T, rawCfg string, originalValue string) {",
          "256:  var cfg = &Config{}",
          "257:  err := LoadBytes([]byte(rawCfg), false, cfg)",
          "258:  require.NoError(t, err)",
          "259:  bb, err := yaml.Marshal(cfg)",
          "260:  require.NoError(t, err)",
          "261:  scrubbedCfg := string(bb)",
          "262:  require.True(t, strings.Contains(scrubbedCfg, \"<secret>\"))",
          "263:  require.False(t, strings.Contains(scrubbedCfg, originalValue))",
          "264: }",
          "",
          "---------------"
        ],
        "pkg/config/config_test.go||pkg/config/config_test.go": [
          "File: pkg/config/config_test.go -> pkg/config/config_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"flag\"",
          "5:  \"os\"",
          "7:  \"testing\"",
          "8:  \"time\"",
          "12:  \"github.com/grafana/agent/pkg/integrations\"",
          "13:  \"github.com/grafana/agent/pkg/metrics\"",
          "14:  \"github.com/grafana/agent/pkg/metrics/instance\"",
          "",
          "[Removed Lines]",
          "6:  \"strings\"",
          "10:  \"gopkg.in/yaml.v2\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:  promCfg \"github.com/prometheus/prometheus/config\"",
          "18:  \"github.com/prometheus/prometheus/pkg/labels\"",
          "19:  \"github.com/stretchr/testify/require\"",
          "27: )",
          "139: func TestConfig_FlagDefaults(t *testing.T) {",
          "",
          "[Removed Lines]",
          "21:  _ \"github.com/grafana/agent/pkg/integrations/github_exporter\"   // register github_exporter",
          "22:  _ \"github.com/grafana/agent/pkg/integrations/kafka_exporter\"    // register kafka_exporter",
          "23:  _ \"github.com/grafana/agent/pkg/integrations/mongodb_exporter\"  // register mongodb_exporter",
          "24:  _ \"github.com/grafana/agent/pkg/integrations/mysqld_exporter\"   // register mysqld_exporter",
          "25:  _ \"github.com/grafana/agent/pkg/integrations/postgres_exporter\" // register postgres_exporter",
          "26:  _ \"github.com/grafana/agent/pkg/integrations/redis_exporter\"    // register redis_exporter",
          "29: func TestConfig_SecretMysqlD(t *testing.T) {",
          "30:  stringCfg := `",
          "31: prometheus:",
          "32:   wal_directory: /tmp/agent",
          "33: integrations:",
          "34:   mysqld_exporter:",
          "35:     enabled: true",
          "36:     data_source_name: root:secret_password@myserver:3306`",
          "37:  checkSecret(t, stringCfg, \"secret_password\")",
          "39: }",
          "41: func TestConfig_SecretGithub(t *testing.T) {",
          "42:  stringCfg := `",
          "43: prometheus:",
          "44:   wal_directory: /tmp/agent",
          "45: integrations:",
          "46:   github_exporter:",
          "47:     enabled: true",
          "48:     api_token: secret_api`",
          "49:  checkSecret(t, stringCfg, \"secret_api\")",
          "50: }",
          "52: func TestConfig_SecretKafkaUserName(t *testing.T) {",
          "53:  stringCfg := `",
          "54: prometheus:",
          "55:   wal_directory: /tmp/agent",
          "56: integrations:",
          "57:   kafka_exporter:",
          "58:     enabled: true",
          "59:     sasl_password: secret_password",
          "60: `",
          "61:  checkSecret(t, stringCfg, \"secret_password\")",
          "62: }",
          "64: func TestConfig_SecretKafkaPassword(t *testing.T) {",
          "65:  stringCfg := `",
          "66: prometheus:",
          "67:   wal_directory: /tmp/agent",
          "68: integrations:",
          "69:   kafka_exporter:",
          "70:     enabled: true",
          "71:     sasl_username: secret_username",
          "72: `",
          "73:  checkSecret(t, stringCfg, \"secret_username\")",
          "74: }",
          "76: func TestConfig_SecretMongoDB(t *testing.T) {",
          "77:  stringCfg := `",
          "78: prometheus:",
          "79:   wal_directory: /tmp/agent",
          "80: integrations:",
          "81:   mongodb_exporter:",
          "82:     enabled: true",
          "83:     mongodb_uri: secret_password_in_uri",
          "84: `",
          "85:  checkSecret(t, stringCfg, \"secret_password_in_uri\")",
          "86: }",
          "88: func TestConfig_SecretPostgres(t *testing.T) {",
          "89:  stringCfg := `",
          "90: prometheus:",
          "91:   wal_directory: /tmp/agent",
          "92: integrations:",
          "93:   postgres_exporter:",
          "94:     enabled: true",
          "95:     data_source_names: [\"secret_password_in_uri\",\"secret_password_in_uri_2\"]",
          "96: `",
          "97:  checkSecret(t, stringCfg, \"secret_password_in_uri\")",
          "98:  checkSecret(t, stringCfg, \"secret_password_in_uri_2\")",
          "100: }",
          "102: func TestConfig_SecretRedisPassword(t *testing.T) {",
          "103:  stringCfg := `",
          "104: prometheus:",
          "105:   wal_directory: /tmp/agent",
          "106: integrations:",
          "107:   redis_exporter:",
          "108:     enabled: true",
          "109:     redis_password: secret_password",
          "110: `",
          "111:  checkSecret(t, stringCfg, \"secret_password\")",
          "112: }",
          "114: func TestConfig_SecretRedisUsername(t *testing.T) {",
          "115:  stringCfg := `",
          "116: prometheus:",
          "117:   wal_directory: /tmp/agent",
          "118: integrations:",
          "119:   redis_exporter:",
          "120:     enabled: true",
          "121:     redis_user: secret_user",
          "122: `",
          "123:  checkSecret(t, stringCfg, \"secret_user\")",
          "124: }",
          "126: func checkSecret(t *testing.T, rawCfg string, originalValue string) {",
          "127:  var cfg = &Config{}",
          "128:  err := LoadBytes([]byte(rawCfg), false, cfg)",
          "129:  require.NoError(t, err)",
          "130:  bb, err := yaml.Marshal(cfg)",
          "131:  require.NoError(t, err)",
          "132:  scrubbedCfg := string(bb)",
          "133:  require.True(t, strings.Contains(scrubbedCfg, \"<secret>\"))",
          "134:  require.False(t, strings.Contains(scrubbedCfg, originalValue))",
          "135: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pkg/integrations/github_exporter/github_test.go||pkg/integrations/github_exporter/github_test.go": [
          "File: pkg/integrations/github_exporter/github_test.go -> pkg/integrations/github_exporter/github_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package github_exporter //nolint:golint",
          "3: import (",
          "4:  \"testing\"",
          "6:  \"github.com/grafana/agent/pkg/config\"",
          "8: )",
          "10: func TestConfig_SecretGithub(t *testing.T) {",
          "11:  stringCfg := `",
          "12: prometheus:",
          "13:   wal_directory: /tmp/agent",
          "14: integrations:",
          "15:   github_exporter:",
          "16:     enabled: true",
          "17:     api_token: secret_api`",
          "18:  config.CheckSecret(t, stringCfg, \"secret_api\")",
          "19: }",
          "",
          "---------------"
        ],
        "pkg/integrations/kafka_exporter/kafka_exporter.go||pkg/integrations/kafka_exporter/kafka_exporter.go": [
          "File: pkg/integrations/kafka_exporter/kafka_exporter.go -> pkg/integrations/kafka_exporter/kafka_exporter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:  UseSASLHandshake bool `yaml:\"use_sasl_handshake,omitempty\"`",
          "45:  SASLPassword config_util.Secret `yaml:\"sasl_password,omitempty\"`",
          "",
          "[Removed Lines]",
          "42:  SASLUsername config_util.Secret `yaml:\"sasl_username,omitempty\"`",
          "",
          "[Added Lines]",
          "42:  SASLUsername string `yaml:\"sasl_username,omitempty\"`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:   Uri:                      c.KafkaURIs,",
          "141:   UseSASL:                  c.UseSASL,",
          "142:   UseSASLHandshake:         c.UseSASLHandshake,",
          "144:   SaslPassword:             string(c.SASLPassword),",
          "145:   SaslMechanism:            c.SASLMechanism,",
          "146:   UseTLS:                   c.UseTLS,",
          "",
          "[Removed Lines]",
          "143:   SaslUsername:             string(c.SASLUsername),",
          "",
          "[Added Lines]",
          "143:   SaslUsername:             c.SASLUsername,",
          "",
          "---------------"
        ],
        "pkg/integrations/kafka_exporter/kafka_test.go||pkg/integrations/kafka_exporter/kafka_test.go": [
          "File: pkg/integrations/kafka_exporter/kafka_test.go -> pkg/integrations/kafka_exporter/kafka_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package kafka_exporter //nolint:golint",
          "3: import (",
          "4:  \"testing\"",
          "6:  \"github.com/grafana/agent/pkg/config\"",
          "7: )",
          "9: func TestConfig_SecretKafkaUserName(t *testing.T) {",
          "10:  stringCfg := `",
          "11: prometheus:",
          "12:   wal_directory: /tmp/agent",
          "13: integrations:",
          "14:   kafka_exporter:",
          "15:     enabled: true",
          "16:     sasl_password: secret_password",
          "17: `",
          "18:  config.CheckSecret(t, stringCfg, \"secret_password\")",
          "19: }",
          "21: func TestConfig_SecretKafkaPassword(t *testing.T) {",
          "22:  stringCfg := `",
          "23: prometheus:",
          "24:   wal_directory: /tmp/agent",
          "25: integrations:",
          "26:   kafka_exporter:",
          "27:     enabled: true",
          "28:     sasl_username: secret_username",
          "29: `",
          "30:  config.CheckSecret(t, stringCfg, \"secret_username\")",
          "31: }",
          "",
          "---------------"
        ],
        "pkg/integrations/mongodb_exporter/mongodb_test.go||pkg/integrations/mongodb_exporter/mongodb_test.go": [
          "File: pkg/integrations/mongodb_exporter/mongodb_test.go -> pkg/integrations/mongodb_exporter/mongodb_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package mongodb_exporter //nolint:golint",
          "3: import (",
          "4:  \"testing\"",
          "6:  \"github.com/grafana/agent/pkg/config\"",
          "7: )",
          "9: func TestConfig_SecretMongoDB(t *testing.T) {",
          "10:  stringCfg := `",
          "11: prometheus:",
          "12:   wal_directory: /tmp/agent",
          "13: integrations:",
          "14:   mongodb_exporter:",
          "15:     enabled: true",
          "16:     mongodb_uri: secret_password_in_uri",
          "17: `",
          "18:  config.CheckSecret(t, stringCfg, \"secret_password_in_uri\")",
          "19: }",
          "",
          "---------------"
        ],
        "pkg/integrations/mysqld_exporter/mysqld_test.go||pkg/integrations/mysqld_exporter/mysqld_test.go": [
          "File: pkg/integrations/mysqld_exporter/mysqld_test.go -> pkg/integrations/mysqld_exporter/mysqld_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package mysqld_exporter",
          "3: import (",
          "4:  \"testing\"",
          "6:  \"github.com/grafana/agent/pkg/config\"",
          "7: )",
          "9: func TestConfig_SecretMysqlD(t *testing.T) {",
          "10:  stringCfg := `",
          "11: prometheus:",
          "12:   wal_directory: /tmp/agent",
          "13: integrations:",
          "14:   mysqld_exporter:",
          "15:     enabled: true",
          "16:     data_source_name: root:secret_password@myserver:3306`",
          "17:  config.CheckSecret(t, stringCfg, \"secret_password\")",
          "18: }",
          "",
          "---------------"
        ],
        "pkg/integrations/postgres_exporter/postgres_test.go||pkg/integrations/postgres_exporter/postgres_test.go": [
          "File: pkg/integrations/postgres_exporter/postgres_test.go -> pkg/integrations/postgres_exporter/postgres_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package postgres_exporter //nolint:golint",
          "3: import (",
          "4:  \"testing\"",
          "6:  \"github.com/grafana/agent/pkg/config\"",
          "7: )",
          "9: func TestConfig_SecretPostgres(t *testing.T) {",
          "10:  stringCfg := `",
          "11: prometheus:",
          "12:   wal_directory: /tmp/agent",
          "13: integrations:",
          "14:   postgres_exporter:",
          "15:     enabled: true",
          "16:     data_source_names: [\"secret_password_in_uri\",\"secret_password_in_uri_2\"]",
          "17: `",
          "18:  config.CheckSecret(t, stringCfg, \"secret_password_in_uri\")",
          "19:  config.CheckSecret(t, stringCfg, \"secret_password_in_uri_2\")",
          "21: }",
          "",
          "---------------"
        ],
        "pkg/integrations/redis_exporter/redis_exporter.go||pkg/integrations/redis_exporter/redis_exporter.go": [
          "File: pkg/integrations/redis_exporter/redis_exporter.go -> pkg/integrations/redis_exporter/redis_exporter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:  RedisAddr               string             `yaml:\"redis_addr,omitempty\"`",
          "46:  RedisPassword           config_util.Secret `yaml:\"redis_password,omitempty\"`",
          "47:  RedisPasswordFile       string             `yaml:\"redis_password_file,omitempty\"`",
          "48:  Namespace               string             `yaml:\"namespace,omitempty\"`",
          "",
          "[Removed Lines]",
          "45:  RedisUser               config_util.Secret `yaml:\"redis_user,omitempty\"`",
          "",
          "[Added Lines]",
          "45:  RedisUser               string             `yaml:\"redis_user,omitempty\"`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76: func (c Config) GetExporterOptions() re.Options {",
          "77:  return re.Options{",
          "79:   Password:                string(c.RedisPassword),",
          "80:   Namespace:               c.Namespace,",
          "81:   ConfigCommandName:       c.ConfigCommand,",
          "",
          "[Removed Lines]",
          "78:   User:                    string(c.RedisUser),",
          "",
          "[Added Lines]",
          "78:   User:                    c.RedisUser,",
          "",
          "---------------"
        ],
        "pkg/integrations/redis_exporter/redis_exporter_test.go||pkg/integrations/redis_exporter/redis_exporter_test.go": [
          "File: pkg/integrations/redis_exporter/redis_exporter_test.go -> pkg/integrations/redis_exporter/redis_exporter_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"net/http/httptest\"",
          "9:  \"testing\"",
          "11:  \"github.com/go-kit/kit/log\"",
          "12:  \"github.com/gorilla/mux\"",
          "13:  \"github.com/prometheus/prometheus/pkg/textparse\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  \"github.com/grafana/agent/pkg/config\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:  }",
          "154: }",
          "156: func matchMetricNames(names map[string]bool, p textparse.Parser) {",
          "157:  for name := range names {",
          "158:   metricName, _ := p.Help()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158: func TestConfig_SecretRedisPassword(t *testing.T) {",
          "159:  stringCfg := `",
          "160: prometheus:",
          "161:   wal_directory: /tmp/agent",
          "162: integrations:",
          "163:   redis_exporter:",
          "164:     enabled: true",
          "165:     redis_password: secret_password",
          "166: `",
          "167:  config.CheckSecret(t, stringCfg, \"secret_password\")",
          "168: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}