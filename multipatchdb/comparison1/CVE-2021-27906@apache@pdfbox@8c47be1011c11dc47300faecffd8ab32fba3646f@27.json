{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "972ee6982eb6c84bf1217106a42e82436ff1b398",
      "candidate_info": {
        "commit_hash": "972ee6982eb6c84bf1217106a42e82436ff1b398",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/972ee6982eb6c84bf1217106a42e82436ff1b398",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java"
        ],
        "message": "PDFBOX-4892: fix message, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890910 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java -> pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:     {",
          "335:         if (isWriting)",
          "336:         {",
          "339:                                             \"length of this COSStream.\");",
          "340:         }",
          "341:         return getInt(COSName.LENGTH, 0);",
          "",
          "[Removed Lines]",
          "337:             throw new IllegalStateException(\"There is an open OutputStream associated with \" +",
          "338:                                             \"this COSStream. It must be closed before querying\" +",
          "",
          "[Added Lines]",
          "337:             throw new IllegalStateException(\"There is an open OutputStream associated with this \" +",
          "338:                                             \"COSStream. It must be closed before querying the \" +",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e0e0268a0be3074bcbc4886fe873d077c5244d0",
      "candidate_info": {
        "commit_hash": "1e0e0268a0be3074bcbc4886fe873d077c5244d0",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/1e0e0268a0be3074bcbc4886fe873d077c5244d0",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java"
        ],
        "message": "PDFBOX-5190: revert changes as those were too strict\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889715 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java -> pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "628:     public static COSName getPDFName(String aName)",
          "629:     {",
          "630:         COSName name = null;",
          "632:         {",
          "634:             name = commonNameMap.get(aName);",
          "",
          "[Removed Lines]",
          "631:         if (aName != null && !aName.isEmpty())",
          "",
          "[Added Lines]",
          "631:         if (aName != null)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95bcf98404035c53e366d0a32da1055a0e0e83e4",
      "candidate_info": {
        "commit_hash": "95bcf98404035c53e366d0a32da1055a0e0e83e4",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/95bcf98404035c53e366d0a32da1055a0e0e83e4",
        "files": [
          "pdfbox/src/test/java/org/apache/pdfbox/multipdf/PDFMergerUtilityTest.java"
        ],
        "message": "PDFBOX-5198: add test\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890301 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/test/java/org/apache/pdfbox/multipdf/PDFMergerUtilityTest.java||pdfbox/src/test/java/org/apache/pdfbox/multipdf/PDFMergerUtilityTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/test/java/org/apache/pdfbox/multipdf/PDFMergerUtilityTest.java||pdfbox/src/test/java/org/apache/pdfbox/multipdf/PDFMergerUtilityTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/multipdf/PDFMergerUtilityTest.java -> pdfbox/src/test/java/org/apache/pdfbox/multipdf/PDFMergerUtilityTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "684:         assertTrue(outFile.delete());",
          "685:     }",
          "687:     private void checkForPageOrphans(PDDocument doc) throws IOException",
          "688:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "694:     public void testPDFBox5198_2() throws IOException",
          "695:     {",
          "696:         PDFMergerUtility pdfMergerUtility = new PDFMergerUtility();",
          "697:         pdfMergerUtility.addSource(new File(SRCDIR, \"PDFA3A.pdf\"));",
          "698:         pdfMergerUtility.addSource(new File(SRCDIR, \"PDFA3A.pdf\"));",
          "699:         pdfMergerUtility.setDestinationFileName(TARGETTESTDIR + \"PDFA3A-merged2.pdf\");",
          "700:         pdfMergerUtility.mergeDocuments(MemoryUsageSetting.setupMainMemoryOnly());",
          "702:         checkParts(new File(TARGETTESTDIR + \"PDFA3A-merged2.pdf\"));",
          "703:     }",
          "711:     public void testPDFBox5198_3() throws IOException",
          "712:     {",
          "713:         PDFMergerUtility pdfMergerUtility = new PDFMergerUtility();",
          "714:         pdfMergerUtility.addSource(new File(SRCDIR, \"PDFA3A.pdf\"));",
          "715:         pdfMergerUtility.addSource(new File(SRCDIR, \"PDFA3A.pdf\"));",
          "716:         pdfMergerUtility.addSource(new File(SRCDIR, \"PDFA3A.pdf\"));",
          "717:         pdfMergerUtility.setDestinationFileName(TARGETTESTDIR + \"PDFA3A-merged3.pdf\");",
          "718:         pdfMergerUtility.mergeDocuments(MemoryUsageSetting.setupMainMemoryOnly());",
          "720:         checkParts(new File(TARGETTESTDIR + \"PDFA3A-merged3.pdf\"));",
          "721:     }",
          "728:     private void checkParts(File file) throws IOException",
          "729:     {",
          "730:         PDDocument doc = PDDocument.load(file);",
          "731:         PDStructureTreeRoot structureTreeRoot = doc.getDocumentCatalog().getStructureTreeRoot();",
          "732:         COSDictionary topDict = (COSDictionary) structureTreeRoot.getK();",
          "733:         assertEquals(COSName.DOCUMENT, topDict.getItem(COSName.S));",
          "734:         assertEquals(structureTreeRoot.getCOSObject(), topDict.getCOSDictionary(COSName.P));",
          "735:         COSArray kArray = topDict.getCOSArray(COSName.K);",
          "736:         assertEquals(doc.getNumberOfPages(), kArray.size());",
          "737:         for (int i = 0; i < kArray.size(); ++i)",
          "738:         {",
          "739:             COSDictionary dict = (COSDictionary) kArray.getObject(i);",
          "740:             assertEquals(COSName.PART, dict.getItem(COSName.S));",
          "741:             assertEquals(topDict, dict.getCOSDictionary(COSName.P));",
          "742:         }",
          "743:         doc.close();",
          "744:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ef6d2e77e546ce6b27e18493be4fee219bebcf8",
      "candidate_info": {
        "commit_hash": "7ef6d2e77e546ce6b27e18493be4fee219bebcf8",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/7ef6d2e77e546ce6b27e18493be4fee219bebcf8",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java"
        ],
        "message": "PDFBOX-4948: add \"ZapfDingbatsITCbyBT-Regular\" font as wished by Lonzak\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881358 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:                         \"TimesNewRoman-BoldItalic\", \"LiberationSerif-BoldItalic\",",
          "96:                         \"NimbusRomNo9L-MediItal\"));",
          "97:         substitutes.put(\"Symbol\", Arrays.asList(\"Symbol\", \"SymbolMT\", \"StandardSymL\"));",
          "",
          "[Removed Lines]",
          "98:         substitutes.put(\"ZapfDingbats\", Arrays.asList(\"ZapfDingbatsITC\", \"Dingbats\", \"MS-Gothic\"));",
          "",
          "[Added Lines]",
          "98:         substitutes.put(\"ZapfDingbats\", Arrays.asList(\"ZapfDingbatsITCbyBT-Regular\",",
          "99:                         \"ZapfDingbatsITC\", \"Dingbats\", \"MS-Gothic\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3376dad75701cecab249f9812b9397a1f8df6a62",
      "candidate_info": {
        "commit_hash": "3376dad75701cecab249f9812b9397a1f8df6a62",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/3376dad75701cecab249f9812b9397a1f8df6a62",
        "files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java"
        ],
        "message": "PDFBOX-4971: format XML\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882094 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java||debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java||debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java": [
          "File: debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java -> debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import java.io.ByteArrayOutputStream;",
          "27: import java.io.IOException;",
          "28: import java.io.InputStream;",
          "29: import java.util.List;",
          "30: import java.util.Map;",
          "31: import java.util.Vector;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import java.io.InputStreamReader;",
          "30: import java.io.UnsupportedEncodingException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: import javax.swing.text.StyleConstants;",
          "44: import javax.swing.text.StyleContext;",
          "45: import javax.swing.text.StyledDocument;",
          "46: import org.apache.commons.logging.Log;",
          "47: import org.apache.commons.logging.LogFactory;",
          "48: import org.apache.pdfbox.contentstream.operator.Operator;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: import javax.xml.parsers.DocumentBuilder;",
          "49: import javax.xml.parsers.DocumentBuilderFactory;",
          "50: import javax.xml.parsers.ParserConfigurationException;",
          "51: import javax.xml.transform.OutputKeys;",
          "52: import javax.xml.transform.Transformer;",
          "53: import javax.xml.transform.TransformerConfigurationException;",
          "54: import javax.xml.transform.TransformerException;",
          "55: import javax.xml.transform.TransformerFactory;",
          "56: import javax.xml.transform.dom.DOMSource;",
          "57: import javax.xml.transform.stream.StreamResult;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63: import org.apache.pdfbox.pdfparser.PDFStreamParser;",
          "64: import org.apache.pdfbox.pdmodel.PDResources;",
          "65: import org.apache.pdfbox.util.Charsets;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: import org.w3c.dom.Document;",
          "79: import org.xml.sax.InputSource;",
          "80: import org.xml.sax.SAXException;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150:         rawView = new StreamPaneView();",
          "151:         hexView = new HexView();",
          "153:         {",
          "154:             niceView = new StreamPaneView();",
          "155:         }",
          "",
          "[Removed Lines]",
          "152:         if (isContentStream)",
          "",
          "[Added Lines]",
          "167:         if (isContentStream || stream.isXmlMetadata())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "174:         {",
          "175:             tabbedPane.add(\"Image view\", rawView.getStreamPanel());",
          "176:         }",
          "178:         {",
          "179:             tabbedPane.add(\"Nice view\", niceView.getStreamPanel());",
          "180:             tabbedPane.add(\"Raw view\", rawView.getStreamPanel());",
          "",
          "[Removed Lines]",
          "177:         else if (isContentStream)",
          "",
          "[Added Lines]",
          "192:         else if (isContentStream || stream.isXmlMetadata())",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "224:                     return;",
          "225:                 }",
          "226:                 tabbedPane.removeAll();",
          "228:                 {",
          "229:                     tabbedPane.add(\"Nice view\", niceView.getStreamPanel());",
          "230:                     tabbedPane.add(\"Raw view\", rawView.getStreamPanel());",
          "",
          "[Removed Lines]",
          "227:                 if (Stream.UNFILTERED.equals(currentFilter) && isContentStream)",
          "",
          "[Added Lines]",
          "242:                 if (Stream.UNFILTERED.equals(currentFilter) && (isContentStream || stream.isXmlMetadata()))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "313:                 InputStream inputStream = stream.getStream(filterKey);",
          "314:                 if (nice && Stream.UNFILTERED.equals(filterKey))",
          "315:                 {",
          "316:                     StyledDocument document = getContentStreamDocument(inputStream);",
          "317:                     if (document != null)",
          "318:                     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "331:                     if (stream.isXmlMetadata())",
          "332:                     {",
          "333:                         return getXMLDocument(inputStream, encoding);",
          "334:                     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "383:             return docu;",
          "384:         }",
          "386:         private StyledDocument getContentStreamDocument(InputStream inputStream)",
          "387:         {",
          "388:             StyledDocument docu = new DefaultStyledDocument();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "405:         private StyledDocument getXMLDocument(InputStream inputStream, String encoding)",
          "406:         {",
          "407:             StyledDocument docu = new DefaultStyledDocument();",
          "408:             if (inputStream != null)",
          "409:             {",
          "410:                 ByteArrayOutputStream baos = new ByteArrayOutputStream();",
          "412:                 try",
          "413:                 {",
          "414:                     InputStreamReader inputStreamReader = new InputStreamReader(inputStream, encoding);",
          "415:                     DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();",
          "416:                     builderFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\",",
          "417:                             true);",
          "418:                     builderFactory.setFeature(\"http://xml.org/sax/features/external-general-entities\",",
          "419:                             false);",
          "420:                     builderFactory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\",",
          "421:                             false);",
          "422:                     builderFactory.setFeature(",
          "423:                             \"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);",
          "424:                     builderFactory.setXIncludeAware(false);",
          "425:                     builderFactory.setExpandEntityReferences(false);",
          "426:                     DocumentBuilder builder = builderFactory.newDocumentBuilder();",
          "427:                     Document doc = builder.parse(new InputSource(inputStreamReader));",
          "428:                     Transformer transformer = TransformerFactory.newInstance().newTransformer();",
          "429:                     transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");",
          "430:                     transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", Integer.toString(1));",
          "431:                     StreamResult result = new StreamResult(baos);",
          "432:                     DOMSource source = new DOMSource(doc);",
          "433:                     transformer.transform(source, result);",
          "434:                     docu.insertString(0, new String(baos.toByteArray(), Charsets.UTF_8), null);",
          "435:                 }",
          "436:                 catch (ParserConfigurationException ex)",
          "437:                 {",
          "438:                     LOG.error(ex.getMessage(), ex);",
          "439:                 }",
          "440:                 catch (UnsupportedEncodingException ex)",
          "441:                 {",
          "442:                     LOG.error(ex.getMessage(), ex);",
          "443:                 }",
          "444:                 catch (SAXException ex)",
          "445:                 {",
          "446:                     LOG.error(ex.getMessage(), ex);",
          "447:                 }",
          "448:                 catch (TransformerConfigurationException ex)",
          "449:                 {",
          "450:                     LOG.error(ex.getMessage(), ex);",
          "451:                 }",
          "452:                 catch (TransformerException ex)",
          "453:                 {",
          "454:                     LOG.error(ex.getMessage(), ex);",
          "455:                 }",
          "456:                 catch (BadLocationException ex)",
          "457:                 {",
          "458:                     LOG.error(ex.getMessage(), ex);",
          "459:                 }",
          "460:                 catch (IOException ex)",
          "461:                 {",
          "462:                     LOG.error(ex.getMessage(), ex);",
          "463:                 }",
          "464:             }",
          "465:             return docu;",
          "466:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "569:             }",
          "570:         }",
          "571:     }",
          "",
          "[Removed Lines]",
          "572: }",
          "",
          "[Added Lines]",
          "654: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}