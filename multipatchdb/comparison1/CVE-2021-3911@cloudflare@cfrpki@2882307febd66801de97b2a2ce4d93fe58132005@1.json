{
  "cve_id": "CVE-2021-3911",
  "cve_desc": "If the ROA that a repository returns contains too many bits for the IP address then OctoRPKI will crash.",
  "repo": "cloudflare/cfrpki",
  "patch_hash": "2882307febd66801de97b2a2ce4d93fe58132005",
  "patch_info": {
    "commit_hash": "2882307febd66801de97b2a2ce4d93fe58132005",
    "repo": "cloudflare/cfrpki",
    "commit_url": "https://github.com/cloudflare/cfrpki/commit/2882307febd66801de97b2a2ce4d93fe58132005",
    "files": [
      "validator/lib/cert.go",
      "validator/lib/roa.go"
    ],
    "message": "VULN-8286: Prevent oob read when validating IP ranges",
    "before_after_code_files": [
      "validator/lib/cert.go||validator/lib/cert.go",
      "validator/lib/roa.go||validator/lib/roa.go"
    ]
  },
  "patch_diff": {
    "validator/lib/cert.go||validator/lib/cert.go": [
      "File: validator/lib/cert.go -> validator/lib/cert.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "62: }",
      "64: func (ipn *IPNet) GetRange() (net.IP, net.IP, bool) {",
      "66:  return min, max, false",
      "67: }",
      "",
      "[Removed Lines]",
      "65:  min, max := GetRangeIP(ipn.IPNet)",
      "",
      "[Added Lines]",
      "65:  err, min, max := GetRangeIP(ipn.IPNet)",
      "66:  if err != nil {",
      "67:   return nil, nil, false",
      "68:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "474:    valids = append(valids, ip)",
      "475:    continue",
      "476:   }",
      "477:   valid, checkParent := parent.IsIPRangeInCertificate(min, max)",
      "478:   if valid {",
      "479:    valids = append(valids, ip)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "480:   if min == nil && max == nil {",
      "481:    invalids = append(invalids, ip)",
      "482:   }",
      "",
      "---------------"
    ],
    "validator/lib/roa.go||validator/lib/roa.go": [
      "File: validator/lib/roa.go -> validator/lib/roa.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "133:  return roa, nil",
      "134: }",
      "137:  ip := ipnet.IP",
      "138:  mask := ipnet.Mask",
      "140:  beginIP := make([]byte, len(ip))",
      "141:  endIP := make([]byte, len(ip))",
      "142:  for i := range []byte(ip) {",
      "143:   beginIP[i] = ip[i] & mask[i]",
      "144:   endIP[i] = ip[i] | ^mask[i]",
      "145:  }",
      "147: }",
      "",
      "[Removed Lines]",
      "136: func GetRangeIP(ipnet *net.IPNet) (net.IP, net.IP) {",
      "146:  return net.IP(beginIP), net.IP(endIP)",
      "",
      "[Added Lines]",
      "136: func GetRangeIP(ipnet *net.IPNet) (error, net.IP, net.IP) {",
      "144:   if i >= len(mask) {",
      "145:    return errors.New(\"Invalid IP address mask\"), nil, nil",
      "146:   }",
      "150:  return nil, net.IP(beginIP), net.IP(endIP)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "191:  invalids := make([]*ROAEntry, 0)",
      "192:  checkParents := make([]*ROAEntry, 0)",
      "193:  for _, entry := range entries {",
      "195:   valid, checkParent := cert.IsIPRangeInCertificate(min, max)",
      "196:   if valid {",
      "197:    valids = append(valids, entry)",
      "",
      "[Removed Lines]",
      "194:   min, max := GetRangeIP(entry.IPNet)",
      "",
      "[Added Lines]",
      "198:   err, min, max := GetRangeIP(entry.IPNet)",
      "199:   if err != nil {",
      "200:    invalids = append(invalids, entry)",
      "201:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "648658b1b176a747b52645989cfddc73a81eacad",
      "candidate_info": {
        "commit_hash": "648658b1b176a747b52645989cfddc73a81eacad",
        "repo": "cloudflare/cfrpki",
        "commit_url": "https://github.com/cloudflare/cfrpki/commit/648658b1b176a747b52645989cfddc73a81eacad",
        "files": [
          "cmd/octorpki/octorpki.go",
          "sync/lib/rrdp.go"
        ],
        "message": "VULN-8282: Prevent resource exhaustion by enforcing a 100mg limit on downloaded files",
        "before_after_code_files": [
          "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go",
          "sync/lib/rrdp.go||sync/lib/rrdp.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cloudflare/cfrpki/pull/100"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go": [
          "File: cmd/octorpki/octorpki.go -> cmd/octorpki/octorpki.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "442:     sentry.CaptureException(err)",
          "443:    })",
          "446:     log.Errorf(\"Error when processing %v (for %v): %v. Will add to rsync.\", path, rsync, err)",
          "447:     rSpan.LogKV(\"event\", \"rrdp failure\", \"type\", \"failover to rsync\", \"message\", err)",
          "448:    } else {",
          "",
          "[Removed Lines]",
          "445:    if s.RRDPFailover {",
          "",
          "[Added Lines]",
          "446:    if s.RRDPFailover && err.Error() != \"http: request body too large\" {",
          "",
          "---------------"
        ],
        "sync/lib/rrdp.go||sync/lib/rrdp.go": [
          "File: sync/lib/rrdp.go -> sync/lib/rrdp.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  \"encoding/xml\"",
          "7:  \"errors\"",
          "8:  \"fmt\"",
          "10:  \"io/ioutil\"",
          "11:  \"net/http\"",
          "12:  \"strings\"",
          "13: )",
          "15: type RRDPFetcher interface {",
          "16:  GetXML(string) (string, error)",
          "17: }",
          "",
          "[Removed Lines]",
          "9:  \"github.com/getsentry/sentry-go\"",
          "",
          "[Added Lines]",
          "13:  \"github.com/getsentry/sentry-go\"",
          "16: const ResponseLimit int64 = 100000000 // (100mb)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:   return \"\", NewRRDPErrorFetch(req, errors.New(fmt.Sprintf(\"status is %d\", res.StatusCode)))",
          "41:  }",
          "44:  if err != nil {",
          "45:   return \"\", err",
          "46:  }",
          "",
          "[Removed Lines]",
          "43:  data, err := ioutil.ReadAll(res.Body)",
          "",
          "[Added Lines]",
          "47:  r := http.MaxBytesReader(nil, res.Body, ResponseLimit)",
          "48:  data, err := ioutil.ReadAll(r)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "71ac74e691dc791731f90b72710975414ecec1eb",
      "candidate_info": {
        "commit_hash": "71ac74e691dc791731f90b72710975414ecec1eb",
        "repo": "cloudflare/cfrpki",
        "commit_url": "https://github.com/cloudflare/cfrpki/commit/71ac74e691dc791731f90b72710975414ecec1eb",
        "files": [
          "cmd/octorpki/octorpki.go"
        ],
        "message": "VULN-8283: Add Timeout to http.Client preventing infinite open connections",
        "before_after_code_files": [
          "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cloudflare/cfrpki/pull/100"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go": [
          "File: cmd/octorpki/octorpki.go -> cmd/octorpki/octorpki.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  AppVersion = \"OctoRPKI \" + version + \" \" + buildinfos",
          "54:  UseManifest = flag.Bool(\"manifest.use\", true, \"Use manifests file to explore instead of going into the repository\")",
          "55:  Basepath    = flag.String(\"cache\", \"cache/\", \"Base directory to store certificates\")",
          "56:  LogLevel    = flag.String(\"loglevel\", \"info\", \"Log level\")",
          "",
          "[Removed Lines]",
          "52:  RootTAL     = flag.String(\"tal.root\", \"tals/afrinic.tal,tals/apnic.tal,tals/arin.tal,tals/lacnic.tal,tals/ripe.tal\", \"List of TAL separated by comma\")",
          "53:  TALNames    = flag.String(\"tal.name\", \"AFRINIC,APNIC,ARIN,LACNIC,RIPE\", \"Name of the TALs\")",
          "",
          "[Added Lines]",
          "52:  RootTAL  = flag.String(\"tal.root\", \"tals/afrinic.tal,tals/apnic.tal,tals/arin.tal,tals/lacnic.tal,tals/ripe.tal\", \"List of TAL separated by comma\")",
          "53:  TALNames = flag.String(\"tal.name\", \"AFRINIC,APNIC,ARIN,LACNIC,RIPE\", \"Name of the TALs\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1236:    log.StandardLogger()),",
          "1237:   HTTPFetcher: &syncpki.HTTPFetcher{",
          "1238:    UserAgent: *UserAgent,",
          "1240:   },",
          "1241:   ROAList: &prefixfile.ROAList{",
          "1242:    Data: make([]prefixfile.ROAJson, 0),",
          "",
          "[Removed Lines]",
          "1239:    Client:    &http.Client{},",
          "",
          "[Added Lines]",
          "1241:    Client: &http.Client{",
          "1243:     Timeout: time.Second * 60,",
          "1244:    },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb2ab377b9b7aeda966c6478a60f99b12ee8d759",
      "candidate_info": {
        "commit_hash": "cb2ab377b9b7aeda966c6478a60f99b12ee8d759",
        "repo": "cloudflare/cfrpki",
        "commit_url": "https://github.com/cloudflare/cfrpki/commit/cb2ab377b9b7aeda966c6478a60f99b12ee8d759",
        "files": [
          "cmd/octorpki/octorpki.go"
        ],
        "message": "VULN-8281: Prevent infinite repository traversal in octorpki",
        "before_after_code_files": [
          "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cloudflare/cfrpki/pull/100"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go": [
          "File: cmd/octorpki/octorpki.go -> cmd/octorpki/octorpki.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  AppVersion = \"OctoRPKI \" + version + \" \" + buildinfos",
          "59:  StrictManifests = flag.Bool(\"strict.manifests\", true, \"Manifests must be complete or invalidate CA\")",
          "60:  StrictHash      = flag.Bool(\"strict.hash\", true, \"Check the hash of files\")",
          "",
          "[Removed Lines]",
          "52:  RootTAL     = flag.String(\"tal.root\", \"tals/afrinic.tal,tals/apnic.tal,tals/arin.tal,tals/lacnic.tal,tals/ripe.tal\", \"List of TAL separated by comma\")",
          "53:  TALNames    = flag.String(\"tal.name\", \"AFRINIC,APNIC,ARIN,LACNIC,RIPE\", \"Name of the TALs\")",
          "54:  UseManifest = flag.Bool(\"manifest.use\", true, \"Use manifests file to explore instead of going into the repository\")",
          "55:  Basepath    = flag.String(\"cache\", \"cache/\", \"Base directory to store certificates\")",
          "56:  LogLevel    = flag.String(\"loglevel\", \"info\", \"Log level\")",
          "57:  Refresh     = flag.String(\"refresh\", \"20m\", \"Revalidation interval\")",
          "",
          "[Added Lines]",
          "52:  RootTAL       = flag.String(\"tal.root\", \"tals/afrinic.tal,tals/apnic.tal,tals/arin.tal,tals/lacnic.tal,tals/ripe.tal\", \"List of TAL separated by comma\")",
          "53:  TALNames      = flag.String(\"tal.name\", \"AFRINIC,APNIC,ARIN,LACNIC,RIPE\", \"Name of the TALs\")",
          "54:  UseManifest   = flag.Bool(\"manifest.use\", true, \"Use manifests file to explore instead of going into the repository\")",
          "55:  Basepath      = flag.String(\"cache\", \"cache/\", \"Base directory to store certificates\")",
          "56:  LogLevel      = flag.String(\"loglevel\", \"info\", \"Log level\")",
          "57:  Refresh       = flag.String(\"refresh\", \"20m\", \"Revalidation interval\")",
          "58:  MaxIterations = flag.Int(\"max.iterations\", 32, \"Specify the max number of iterations octorpki will make before failing to generate output.json\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1296:   s.Iteration++",
          "1297:   iterationsUntilStable++",
          "1298:   span.SetTag(\"iteration\", s.Iteration)",
          "1300:   if *RRDP {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1300:   if iterationsUntilStable > *MaxIterations {",
          "1301:    log.Fatal(\"Max iterations has been reached. This number can be adjusted with -max.iterations\")",
          "1302:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}