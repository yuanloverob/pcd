{
  "cve_id": "CVE-2023-23947",
  "cve_desc": "Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. All Argo CD versions starting with 2.3.0-rc1 and prior to 2.3.17, 2.4.23  2.5.11, and 2.6.2 are vulnerable to an improper authorization bug which allows users who have the ability to update at least one cluster secret to update any cluster secret. The attacker could use this access to escalate privileges (potentially controlling Kubernetes resources) or to break Argo CD functionality (by preventing connections to external clusters). A patch for this vulnerability has been released in Argo CD versions 2.6.2, 2.5.11, 2.4.23, and 2.3.17. Two workarounds are available. Either modify the RBAC configuration to completely revoke all `clusters, update` access, or use the `destinations` and `clusterResourceWhitelist` fields to apply similar restrictions as the `namespaces` and `clusterResources` fields.",
  "repo": "argoproj/argo-cd",
  "patch_hash": "fbb0b99b1ac3361b253052bd30259fa43a520945",
  "patch_info": {
    "commit_hash": "fbb0b99b1ac3361b253052bd30259fa43a520945",
    "repo": "argoproj/argo-cd",
    "commit_url": "https://github.com/argoproj/argo-cd/commit/fbb0b99b1ac3361b253052bd30259fa43a520945",
    "files": [
      "common/common.go",
      "server/cluster/cluster.go",
      "server/cluster/cluster_test.go"
    ],
    "message": "Merge pull request from GHSA-3jfq-742w-xg8j\n\nfix test name\n\nSigned-off-by: Michael Crenshaw <350466+crenshaw-dev@users.noreply.github.com>",
    "before_after_code_files": [
      "common/common.go||common/common.go",
      "server/cluster/cluster.go||server/cluster/cluster.go",
      "server/cluster/cluster_test.go||server/cluster/cluster_test.go"
    ]
  },
  "patch_diff": {
    "common/common.go||common/common.go": [
      "File: common/common.go -> common/common.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "8:  \"time\"",
      "10:  \"github.com/sirupsen/logrus\"",
      "11: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11:  \"google.golang.org/grpc/codes\"",
      "12:  \"google.golang.org/grpc/status\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "316: const TokenVerificationError = \"failed to verify the token\"",
      "318: var TokenVerificationErr = errors.New(TokenVerificationError)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "322: var PermissionDeniedAPIError = status.Error(codes.PermissionDenied, \"permission denied\")",
      "",
      "---------------"
    ],
    "server/cluster/cluster.go||server/cluster/cluster.go": [
      "File: server/cluster/cluster.go -> server/cluster/cluster.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package cluster",
      "3: import (",
      "4:  \"net/url\"",
      "5:  \"time\"",
      "9:  \"github.com/argoproj/gitops-engine/pkg/utils/kube\"",
      "10:  log \"github.com/sirupsen/logrus\"",
      "11:  \"google.golang.org/grpc/codes\"",
      "",
      "[Removed Lines]",
      "7:  \"context\"",
      "",
      "[Added Lines]",
      "4:  \"context\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "14:  \"k8s.io/apimachinery/pkg/util/sets\"",
      "15:  \"k8s.io/client-go/kubernetes\"",
      "17:  \"github.com/argoproj/argo-cd/v2/pkg/apiclient/cluster\"",
      "18:  appv1 \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"",
      "19:  servercache \"github.com/argoproj/argo-cd/v2/server/cache\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16:  \"github.com/argoproj/argo-cd/v2/common\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "135: func (s *Server) getClusterWith403IfNotExist(ctx context.Context, q *cluster.ClusterQuery) (*appv1.Cluster, error) {",
      "136:  repo, err := s.getCluster(ctx, q)",
      "137:  if err != nil || repo == nil {",
      "139:  }",
      "140:  return repo, nil",
      "141: }",
      "",
      "[Removed Lines]",
      "138:   return nil, status.Error(codes.PermissionDenied, \"permission denied\")",
      "",
      "[Added Lines]",
      "138:   return nil, common.PermissionDeniedAPIError",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "221:  }",
      "226:  }",
      "228:  if len(q.UpdatedFields) == 0 || sets.NewString(q.UpdatedFields...).Has(\"project\") {",
      "232:   }",
      "233:  }",
      "",
      "[Removed Lines]",
      "224:  if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(c.Project, q.Cluster.Server)); err != nil {",
      "225:   return nil, err",
      "230:   if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(q.Cluster.Project, q.Cluster.Server)); err != nil {",
      "231:    return nil, err",
      "",
      "[Added Lines]",
      "224:  if !s.enf.Enforce(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(c.Project, c.Server)) {",
      "225:   return nil, common.PermissionDeniedAPIError",
      "230:   if !s.enf.Enforce(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(q.Cluster.Project, c.Server)) {",
      "231:    return nil, common.PermissionDeniedAPIError",
      "",
      "---------------"
    ],
    "server/cluster/cluster_test.go||server/cluster/cluster_test.go": [
      "File: server/cluster/cluster_test.go -> server/cluster/cluster_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import (",
      "4:  \"context\"",
      "5:  \"encoding/json\"",
      "6:  \"testing\"",
      "7:  \"time\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6:  \"fmt\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "49:  return enf",
      "50: }",
      "52: func TestGetCluster_UrlEncodedName(t *testing.T) {",
      "53:  db := &dbmocks.ArgoDB{}",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "53: func TestUpdateCluster_RejectInvalidParams(t *testing.T) {",
      "54:  testCases := []struct {",
      "55:   name    string",
      "56:   request clusterapi.ClusterUpdateRequest",
      "57:  }{",
      "58:   {",
      "59:    name:    \"allowed cluster URL in body, disallowed cluster URL in query\",",
      "60:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"\", Value: \"https://127.0.0.2\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
      "61:   },",
      "62:   {",
      "63:    name:    \"allowed cluster URL in body, disallowed cluster name in query\",",
      "64:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"name\", Value: \"disallowed-unscoped\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
      "65:   },",
      "66:   {",
      "67:    name:    \"allowed cluster URL in body, disallowed cluster name in query, changing unscoped to scoped\",",
      "68:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"allowed-project\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"\", Value: \"https://127.0.0.2\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
      "69:   },",
      "70:   {",
      "71:    name:    \"allowed cluster URL in body, disallowed cluster URL in query, changing unscoped to scoped\",",
      "72:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"allowed-project\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"name\", Value: \"disallowed-unscoped\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
      "73:   },",
      "74:  }",
      "76:  db := &dbmocks.ArgoDB{}",
      "78:  clusters := []v1alpha1.Cluster{",
      "79:   {",
      "80:    Name:   \"allowed-unscoped\",",
      "81:    Server: \"https://127.0.0.1\",",
      "82:   },",
      "83:   {",
      "84:    Name:   \"disallowed-unscoped\",",
      "85:    Server: \"https://127.0.0.2\",",
      "86:   },",
      "87:   {",
      "88:    Name:    \"allowed-scoped\",",
      "89:    Server:  \"https://127.0.0.3\",",
      "90:    Project: \"allowed-project\",",
      "91:   },",
      "92:   {",
      "93:    Name:    \"disallowed-scoped\",",
      "94:    Server:  \"https://127.0.0.4\",",
      "95:    Project: \"disallowed-project\",",
      "96:   },",
      "97:  }",
      "99:  db.On(\"ListClusters\", mock.Anything).Return(",
      "100:   func(ctx context.Context) *v1alpha1.ClusterList {",
      "101:    return &v1alpha1.ClusterList{",
      "102:     ListMeta: v1.ListMeta{},",
      "103:     Items:    clusters,",
      "104:    }",
      "105:   },",
      "106:   func(ctx context.Context) error {",
      "107:    return nil",
      "108:   },",
      "109:  )",
      "110:  db.On(\"UpdateCluster\", mock.Anything, mock.Anything).Return(",
      "111:   func(ctx context.Context, c *v1alpha1.Cluster) *v1alpha1.Cluster {",
      "112:    for _, cluster := range clusters {",
      "113:     if c.Server == cluster.Server {",
      "114:      return c",
      "115:     }",
      "116:    }",
      "117:    return nil",
      "118:   },",
      "119:   func(ctx context.Context, c *v1alpha1.Cluster) error {",
      "120:    for _, cluster := range clusters {",
      "121:     if c.Server == cluster.Server {",
      "122:      return nil",
      "123:     }",
      "124:    }",
      "125:    return fmt.Errorf(\"cluster '%s' not found\", c.Server)",
      "126:   },",
      "127:  )",
      "128:  db.On(\"GetCluster\", mock.Anything, mock.Anything).Return(",
      "129:   func(ctx context.Context, server string) *v1alpha1.Cluster {",
      "130:    for _, cluster := range clusters {",
      "131:     if server == cluster.Server {",
      "132:      return &cluster",
      "133:     }",
      "134:    }",
      "135:    return nil",
      "136:   },",
      "137:   func(ctx context.Context, server string) error {",
      "138:    for _, cluster := range clusters {",
      "139:     if server == cluster.Server {",
      "140:      return nil",
      "141:     }",
      "142:    }",
      "143:    return fmt.Errorf(\"cluster '%s' not found\", server)",
      "144:   },",
      "145:  )",
      "147:  enf := rbac.NewEnforcer(fake.NewSimpleClientset(test.NewFakeConfigMap()), test.FakeArgoCDNamespace, common.ArgoCDConfigMapName, nil)",
      "148:  _ = enf.SetBuiltinPolicy(`p, role:test, clusters, *, https://127.0.0.1, allow",
      "149: p, role:test, clusters, *, allowed-project/*, allow`)",
      "150:  enf.SetDefaultRole(\"role:test\")",
      "151:  server := NewServer(db, enf, newServerInMemoryCache(), &kubetest.MockKubectlCmd{})",
      "153:  for _, c := range testCases {",
      "154:   cc := c",
      "155:   t.Run(cc.name, func(t *testing.T) {",
      "156:    t.Parallel()",
      "157:    out, err := server.Update(context.Background(), &cc.request)",
      "158:    require.Nil(t, out)",
      "159:    assert.ErrorIs(t, err, common.PermissionDeniedAPIError)",
      "160:   })",
      "161:  }",
      "162: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a610fc159af8638e65347e08e9503a0c933f0391",
      "candidate_info": {
        "commit_hash": "a610fc159af8638e65347e08e9503a0c933f0391",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/a610fc159af8638e65347e08e9503a0c933f0391",
        "files": [
          "docs/operator-manual/deep_links.md",
          "docs/operator-manual/upgrading/2.6-2.7.md",
          "server/application/application.go",
          "server/cluster/cluster.go",
          "server/deeplinks/deeplinks.go",
          "server/deeplinks/deeplinks_test.go",
          "server/project/project.go"
        ],
        "message": "feat: allow access to cluster and project resources in app/resource deep links (#12931)\n\n* feat: allow access to cluster and project resources too in deep links\n\nSigned-off-by: Soumya Ghosh Dastidar <gdsoumya@gmail.com>\n\n* feat: improve cluster data sanitization\n\nSigned-off-by: Soumya Ghosh Dastidar <gdsoumya@gmail.com>\n\n* docs: updated docs for deeplinks improvements\n\nSigned-off-by: Soumya Ghosh Dastidar <gdsoumya@gmail.com>\n\n* feat: resolved review comments\n\nSigned-off-by: Soumya Ghosh Dastidar <gdsoumya@gmail.com>\n\n* feat: add rbac enforcement for cluster and project\n\nSigned-off-by: Soumya Ghosh Dastidar <gdsoumya@gmail.com>\n\n---------\n\nSigned-off-by: Soumya Ghosh Dastidar <gdsoumya@gmail.com>",
        "before_after_code_files": [
          "server/application/application.go||server/application/application.go",
          "server/cluster/cluster.go||server/cluster/cluster.go",
          "server/deeplinks/deeplinks.go||server/deeplinks/deeplinks.go",
          "server/deeplinks/deeplinks_test.go||server/deeplinks/deeplinks_test.go",
          "server/project/project.go||server/project/project.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "server/cluster/cluster.go||server/cluster/cluster.go"
          ],
          "candidate": [
            "server/cluster/cluster.go||server/cluster/cluster.go"
          ]
        }
      },
      "candidate_diff": {
        "server/application/application.go||server/application/application.go": [
          "File: server/application/application.go -> server/application/application.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1826:   return nil, fmt.Errorf(\"failed to read application deep links from configmap: %w\", err)",
          "1827:  }",
          "1830:  if len(errorList) > 0 {",
          "1831:   log.Errorf(\"errorList while evaluating application deep links, %v\", strings.Join(errorList, \", \"))",
          "1832:  }",
          "",
          "[Removed Lines]",
          "1829:  finalList, errorList := deeplinks.EvaluateDeepLinksResponse(*obj, deepLinks)",
          "",
          "[Added Lines]",
          "1829:  clstObj, _, err := s.getObjectsForDeepLinks(ctx, a)",
          "1830:  if err != nil {",
          "1831:   return nil, err",
          "1832:  }",
          "1834:  deepLinksObject := deeplinks.CreateDeepLinksObject(nil, obj, clstObj, nil)",
          "1836:  finalList, errorList := deeplinks.EvaluateDeepLinksResponse(deepLinksObject, obj.GetName(), deepLinks)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1834:  return finalList, nil",
          "1835: }",
          "1837: func (s *Server) ListResourceLinks(ctx context.Context, req *application.ApplicationResourceRequest) (*application.LinksResponse, error) {",
          "1839:  if err != nil {",
          "1840:   return nil, err",
          "1841:  }",
          "1843:  deepLinks, err := s.settingsMgr.GetDeepLinks(settings.ResourceDeepLinks)",
          "1844:  if err != nil {",
          "1845:   return nil, fmt.Errorf(\"failed to read application deep links from configmap: %w\", err)",
          "",
          "[Removed Lines]",
          "1838:  obj, _, _, _, err := s.getUnstructuredLiveResourceOrApp(ctx, rbacpolicy.ActionGet, req)",
          "",
          "[Added Lines]",
          "1844: func (s *Server) getObjectsForDeepLinks(ctx context.Context, app *appv1.Application) (cluster *unstructured.Unstructured, project *unstructured.Unstructured, err error) {",
          "1845:  proj, err := argo.GetAppProject(app, applisters.NewAppProjectLister(s.projInformer.GetIndexer()), s.ns, s.settingsMgr, s.db, ctx)",
          "1846:  if err != nil {",
          "1847:   return nil, nil, fmt.Errorf(\"error getting app project: %w\", err)",
          "1848:  }",
          "1851:  proj.Status = appv1.AppProjectStatus{}",
          "1853:  project, err = kube.ToUnstructured(proj)",
          "1854:  if err != nil {",
          "1855:   return nil, nil, err",
          "1856:  }",
          "1858:  getProjectClusters := func(project string) ([]*appv1.Cluster, error) {",
          "1859:   return s.db.GetProjectClusters(ctx, project)",
          "1860:  }",
          "1862:  permitted, err := proj.IsDestinationPermitted(app.Spec.Destination, getProjectClusters)",
          "1863:  if err != nil {",
          "1864:   return nil, nil, err",
          "1865:  }",
          "1866:  if !permitted {",
          "1867:   return nil, nil, fmt.Errorf(\"error getting destination cluster\")",
          "1868:  }",
          "1870:  if err := argo.ValidateDestination(ctx, &app.Spec.Destination, s.db); err != nil {",
          "1871:   log.WithFields(map[string]interface{}{",
          "1872:    \"application\": app.GetName(),",
          "1873:    \"ns\":          app.GetNamespace(),",
          "1874:    \"destination\": app.Spec.Destination,",
          "1875:   }).Warnf(\"cannot validate cluster, error=%v\", err.Error())",
          "1876:   return nil, nil, nil",
          "1877:  }",
          "1878:  clst, err := s.db.GetCluster(ctx, app.Spec.Destination.Server)",
          "1879:  if err != nil {",
          "1880:   log.WithFields(map[string]interface{}{",
          "1881:    \"application\": app.GetName(),",
          "1882:    \"ns\":          app.GetNamespace(),",
          "1883:    \"destination\": app.Spec.Destination,",
          "1884:   }).Warnf(\"cannot get cluster from db, error=%v\", err.Error())",
          "1885:   return nil, nil, nil",
          "1886:  }",
          "1888:  cluster, err = deeplinks.SanitizeCluster(clst)",
          "1889:  return cluster, project, err",
          "1890: }",
          "1893:  obj, _, app, _, err := s.getUnstructuredLiveResourceOrApp(ctx, rbacpolicy.ActionGet, req)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1850:   return nil, fmt.Errorf(\"error replacing secret values: %w\", err)",
          "1851:  }",
          "1854:  if len(errorList) > 0 {",
          "1855:   log.Errorf(\"errors while evaluating resource deep links, %v\", strings.Join(errorList, \", \"))",
          "1856:  }",
          "",
          "[Removed Lines]",
          "1853:  finalList, errorList := deeplinks.EvaluateDeepLinksResponse(*obj, deepLinks)",
          "",
          "[Added Lines]",
          "1907:  appObj, err := kube.ToUnstructured(app)",
          "1908:  if err != nil {",
          "1909:   return nil, err",
          "1910:  }",
          "1912:  clstObj, projObj, err := s.getObjectsForDeepLinks(ctx, app)",
          "1913:  if err != nil {",
          "1914:   return nil, err",
          "1915:  }",
          "1917:  deepLinksObject := deeplinks.CreateDeepLinksObject(obj, appObj, clstObj, projObj)",
          "1918:  finalList, errorList := deeplinks.EvaluateDeepLinksResponse(deepLinksObject, obj.GetName(), deepLinks)",
          "",
          "---------------"
        ],
        "server/cluster/cluster.go||server/cluster/cluster.go": [
          "File: server/cluster/cluster.go -> server/cluster/cluster.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:  }",
          "43: }",
          "46:  if project != \"\" {",
          "47:   return project + \"/\" + server",
          "48:  }",
          "",
          "[Removed Lines]",
          "45: func createRBACObject(project string, server string) string {",
          "",
          "[Added Lines]",
          "45: func CreateClusterRBACObject(project string, server string) string {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:  items := make([]appv1.Cluster, 0)",
          "60:  for _, clust := range clusterList.Items {",
          "62:    items = append(items, clust)",
          "63:   }",
          "64:  }",
          "",
          "[Removed Lines]",
          "61:   if s.enf.Enforce(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionGet, createRBACObject(clust.Project, clust.Server)) {",
          "",
          "[Added Lines]",
          "61:   if s.enf.Enforce(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionGet, CreateClusterRBACObject(clust.Project, clust.Server)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77: func (s *Server) Create(ctx context.Context, q *cluster.ClusterCreateRequest) (*appv1.Cluster, error) {",
          "79:   return nil, err",
          "80:  }",
          "81:  c := q.Cluster",
          "",
          "[Removed Lines]",
          "78:  if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionCreate, createRBACObject(q.Cluster.Project, q.Cluster.Server)); err != nil {",
          "",
          "[Added Lines]",
          "78:  if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionCreate, CreateClusterRBACObject(q.Cluster.Project, q.Cluster.Server)); err != nil {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:   return nil, err",
          "126:  }",
          "129:   return nil, err",
          "130:  }",
          "",
          "[Removed Lines]",
          "128:  if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionGet, createRBACObject(c.Project, q.Server)); err != nil {",
          "",
          "[Added Lines]",
          "128:  if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionGet, CreateClusterRBACObject(c.Project, q.Server)); err != nil {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "221:  }",
          "225:   return nil, common.PermissionDeniedAPIError",
          "226:  }",
          "228:  if len(q.UpdatedFields) == 0 || sets.NewString(q.UpdatedFields...).Has(\"project\") {",
          "231:    return nil, common.PermissionDeniedAPIError",
          "232:   }",
          "233:  }",
          "",
          "[Removed Lines]",
          "224:  if !s.enf.Enforce(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(c.Project, c.Server)) {",
          "230:   if !s.enf.Enforce(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(q.Cluster.Project, c.Server)) {",
          "",
          "[Added Lines]",
          "224:  if !s.enf.Enforce(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, CreateClusterRBACObject(c.Project, c.Server)) {",
          "230:   if !s.enf.Enforce(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, CreateClusterRBACObject(q.Cluster.Project, c.Server)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "291: }",
          "293: func enforceAndDelete(s *Server, ctx context.Context, server, project string) error {",
          "295:   return err",
          "296:  }",
          "297:  if err := s.db.DeleteCluster(ctx, server); err != nil {",
          "",
          "[Removed Lines]",
          "294:  if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionDelete, createRBACObject(project, server)); err != nil {",
          "",
          "[Added Lines]",
          "294:  if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionDelete, CreateClusterRBACObject(project, server)); err != nil {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "314:    return nil, status.Errorf(codes.NotFound, \"failed to get cluster servers by name: %v\", err)",
          "315:   }",
          "316:   for _, server := range servers {",
          "318:     return nil, status.Errorf(codes.PermissionDenied, \"encountered permissions issue while processing request: %v\", err)",
          "319:    }",
          "320:   }",
          "321:  } else {",
          "323:    return nil, status.Errorf(codes.PermissionDenied, \"encountered permissions issue while processing request: %v\", err)",
          "324:   }",
          "325:   servers = append(servers, q.Server)",
          "",
          "[Removed Lines]",
          "317:    if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(clust.Project, server)); err != nil {",
          "322:   if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(clust.Project, q.Server)); err != nil {",
          "",
          "[Added Lines]",
          "317:    if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, CreateClusterRBACObject(clust.Project, server)); err != nil {",
          "322:   if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, CreateClusterRBACObject(clust.Project, q.Server)); err != nil {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "404:  if err != nil {",
          "405:   return nil, err",
          "406:  }",
          "408:   return nil, err",
          "409:  }",
          "410:  now := v1.Now()",
          "",
          "[Removed Lines]",
          "407:  if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(cls.Project, q.Server)); err != nil {",
          "",
          "[Added Lines]",
          "407:  if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, CreateClusterRBACObject(cls.Project, q.Server)); err != nil {",
          "",
          "---------------"
        ],
        "server/deeplinks/deeplinks.go||server/deeplinks/deeplinks.go": [
          "File: server/deeplinks/deeplinks.go -> server/deeplinks/deeplinks.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  \"text/template\"",
          "8:  \"github.com/antonmedv/expr\"",
          "9:  \"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured\"",
          "10:  \"k8s.io/utils/pointer\"",
          "14: )",
          "17:  finalLinks := []*application.LinkInfo{}",
          "18:  errors := []string{}",
          "19:  for _, link := range links {",
          "",
          "[Removed Lines]",
          "12:  \"github.com/argoproj/argo-cd/v2/pkg/apiclient/application\"",
          "13:  \"github.com/argoproj/argo-cd/v2/util/settings\"",
          "16: func EvaluateDeepLinksResponse(obj unstructured.Unstructured, links []settings.DeepLink) (*application.LinksResponse, []string) {",
          "",
          "[Added Lines]",
          "9:  \"github.com/argoproj/argo-cd/v2/pkg/apiclient/application\"",
          "10:  \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"",
          "11:  \"github.com/argoproj/argo-cd/v2/util/settings\"",
          "12:  \"github.com/argoproj/gitops-engine/pkg/utils/kube\"",
          "15: )",
          "17: const (",
          "18:  ResourceDeepLinkKey = \"resource\"",
          "19:  AppDeepLinkKey      = \"application\"",
          "20:  ClusterDeepLinkKey  = \"cluster\"",
          "21:  ProjectDeepLinkKey  = \"project\"",
          "24: type ClusterLinksData struct {",
          "26:  Server string `json:\"server\" protobuf:\"bytes,1,opt,name=server\"`",
          "28:  Name string `json:\"name\" protobuf:\"bytes,2,opt,name=name\"`",
          "30:  Namespaces []string `json:\"namespaces,omitempty\" protobuf:\"bytes,6,opt,name=namespaces\"`",
          "32:  Shard *int64 `json:\"shard,omitempty\" protobuf:\"bytes,9,opt,name=shard\"`",
          "34:  Project string `json:\"project,omitempty\" protobuf:\"bytes,11,opt,name=project\"`",
          "36:  Labels map[string]string `json:\"labels,omitempty\" protobuf:\"bytes,12,opt,name=labels\"`",
          "38:  Annotations map[string]string `json:\"annotations,omitempty\" protobuf:\"bytes,13,opt,name=annotations\"`",
          "39: }",
          "41: func SanitizeCluster(cluster *v1alpha1.Cluster) (*unstructured.Unstructured, error) {",
          "42:  return kube.ToUnstructured(&ClusterLinksData{",
          "43:   Server:      cluster.Server,",
          "44:   Name:        cluster.Name,",
          "45:   Namespaces:  cluster.Namespaces,",
          "46:   Shard:       cluster.Shard,",
          "47:   Project:     cluster.Project,",
          "48:   Labels:      cluster.Labels,",
          "49:   Annotations: cluster.Annotations,",
          "50:  })",
          "51: }",
          "53: func CreateDeepLinksObject(resourceObj *unstructured.Unstructured, app *unstructured.Unstructured, cluster *unstructured.Unstructured, project *unstructured.Unstructured) map[string]interface{} {",
          "54:  deeplinkObj := map[string]interface{}{}",
          "55:  if resourceObj != nil {",
          "56:   deeplinkObj[ResourceDeepLinkKey] = resourceObj.Object",
          "57:  }",
          "58:  if app != nil {",
          "59:   deeplinkObj[AppDeepLinkKey] = app.Object",
          "60:  }",
          "61:  if cluster != nil {",
          "62:   deeplinkObj[ClusterDeepLinkKey] = cluster.Object",
          "63:  }",
          "64:  if project != nil {",
          "65:   deeplinkObj[ProjectDeepLinkKey] = project.Object",
          "66:  }",
          "67:  return deeplinkObj",
          "68: }",
          "70: func EvaluateDeepLinksResponse(obj map[string]interface{}, name string, links []settings.DeepLink) (*application.LinksResponse, []string) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:    continue",
          "24:   }",
          "25:   finalURL := bytes.Buffer{}",
          "27:   if err != nil {",
          "29:    continue",
          "30:   }",
          "31:   if link.Condition != nil {",
          "33:    if err != nil {",
          "35:     continue",
          "36:    }",
          "37:    switch resOut := out.(type) {",
          "",
          "[Removed Lines]",
          "26:   err = t.Execute(&finalURL, obj.Object)",
          "28:    errors = append(errors, fmt.Sprintf(\"failed to evaluate link template '%v' with resource %v, error=%v\", link.URL, obj.GetName(), err.Error()))",
          "32:    out, err := expr.Eval(*link.Condition, obj.Object)",
          "34:     errors = append(errors, fmt.Sprintf(\"failed to evaluate link condition '%v' with resource %v, error=%v\", *link.Condition, obj.GetName(), err.Error()))",
          "",
          "[Added Lines]",
          "80:   err = t.Execute(&finalURL, obj)",
          "82:    errors = append(errors, fmt.Sprintf(\"failed to evaluate link template '%v' with resource %v, error=%v\", link.URL, name, err.Error()))",
          "86:    out, err := expr.Eval(*link.Condition, obj)",
          "88:     errors = append(errors, fmt.Sprintf(\"failed to evaluate link condition '%v' with resource %v, error=%v\", *link.Condition, name, err.Error()))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:      })",
          "46:     }",
          "47:    default:",
          "49:     continue",
          "50:    }",
          "51:   } else {",
          "",
          "[Removed Lines]",
          "48:     errors = append(errors, fmt.Sprintf(\"link condition '%v' evaluated to non-boolean value for resource %v\", *link.Condition, obj.GetName()))",
          "",
          "[Added Lines]",
          "102:     errors = append(errors, fmt.Sprintf(\"link condition '%v' evaluated to non-boolean value for resource %v\", *link.Condition, name))",
          "",
          "---------------"
        ],
        "server/deeplinks/deeplinks_test.go||server/deeplinks/deeplinks_test.go": [
          "File: server/deeplinks/deeplinks_test.go -> server/deeplinks/deeplinks_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package deeplinks",
          "3: import (",
          "4:  \"github.com/argoproj/argo-cd/v2/pkg/apiclient/application\"",
          "5:  \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"",
          "6:  \"github.com/argoproj/argo-cd/v2/util/settings\"",
          "7:  \"github.com/argoproj/gitops-engine/pkg/utils/kube\"",
          "8:  \"github.com/stretchr/testify/assert\"",
          "9:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "10:  \"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured\"",
          "11:  \"k8s.io/utils/pointer\"",
          "15: )",
          "17: type deepLinkTC struct {",
          "19:  inputLinks  []settings.DeepLink",
          "20:  outputLinks []*application.LinkInfo",
          "21:  error       []string",
          "",
          "[Removed Lines]",
          "12:  \"reflect\"",
          "13:  \"strings\"",
          "14:  \"testing\"",
          "18:  obj         *unstructured.Unstructured",
          "",
          "[Added Lines]",
          "4:  \"reflect\"",
          "5:  \"strings\"",
          "6:  \"testing\"",
          "13:  v1 \"k8s.io/api/core/v1\"",
          "20:  appObj      *unstructured.Unstructured",
          "21:  clusterObj  *unstructured.Unstructured",
          "22:  resourceObj *unstructured.Unstructured",
          "23:  projectObj  *unstructured.Unstructured",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:   },",
          "36:  })",
          "37:  assert.NoError(t, err)",
          "38:  testTable := []deepLinkTC{",
          "39:   {",
          "41:    inputLinks: []settings.DeepLink{{",
          "44:    }},",
          "45:    outputLinks: []*application.LinkInfo{{",
          "46:     Title: pointer.String(\"link\"),",
          "48:    }},",
          "49:    error: []string{},",
          "50:   },",
          "51:   {",
          "53:    inputLinks: []settings.DeepLink{",
          "54:     {",
          "55:      Title:     \"link\",",
          "58:     },",
          "59:     {",
          "60:      Title:     \"link1\",",
          "63:     },",
          "64:     {",
          "65:      Title:     \"link2\",",
          "68:     }},",
          "69:    outputLinks: []*application.LinkInfo{{",
          "70:     Title: pointer.String(\"link\"),",
          "71:     Url:   pointer.String(\"http://example.com/test&testns\"),",
          "72:    }},",
          "74:   },",
          "75:   {",
          "77:    inputLinks: []settings.DeepLink{",
          "78:     {",
          "79:      Title:     \"link\",",
          "82:     },",
          "83:     {",
          "84:      Title:     \"link1\",",
          "86:      Condition: pointer.String(`1 + 1`),",
          "87:     }},",
          "88:    outputLinks: []*application.LinkInfo{{",
          "",
          "[Removed Lines]",
          "40:    obj: appObj,",
          "42:     Title: \"link\",",
          "43:     URL:   \"http://example.com/{{ .metadata.name }}&{{ .spec.destination.namespace }}\",",
          "47:     Url:   pointer.String(\"http://example.com/test&testns\"),",
          "52:    obj: appObj,",
          "56:      URL:       \"http://example.com/{{ .metadata.name }}&{{ .spec.destination.namespace }}\",",
          "57:      Condition: pointer.String(`metadata.name matches \"test\"`),",
          "61:      URL:       \"http://example.com/{{ .metadata.name }}&{{ .spec.destination.namespace }}\",",
          "62:      Condition: pointer.String(`metadata.name matches \"test1\"`),",
          "66:      URL:       \"http://example.com/{{ .metadata.name }}&{{ .spec.destination.namespace }}\",",
          "67:      Condition: pointer.String(`metadata.test matches \"test\"`),",
          "73:    error: []string{\"failed to evaluate link condition 'metadata.test matches \\\"test\\\"' with resource test, error=interface conversion: interface {} is nil, not string (1:15)\\n | metadata.test matches \\\"test\\\"\\n | ..............^\"},",
          "76:    obj: appObj,",
          "80:      URL:       \"http://example.com/{{ .metadata.name }}&{{ .spec.destination.namespace }}\",",
          "81:      Condition: pointer.String(`metadata.name matches \"test\"`),",
          "85:      URL:       \"http://example.com/{{ .metadata.name }}&{{ .spec.destination.namespace }}\",",
          "",
          "[Added Lines]",
          "43:  resourceObj, err := kube.ToUnstructured(&v1.ConfigMap{",
          "44:   ObjectMeta: metav1.ObjectMeta{",
          "45:    Name:      \"test-cm\",",
          "46:    Namespace: \"test-cm\",",
          "47:    Labels:    map[string]string{\"test-label\": \"cm-value\"},",
          "48:   },",
          "49:   Data: map[string]string{",
          "50:    \"key\": \"value1\",",
          "51:   },",
          "52:  })",
          "53:  assert.NoError(t, err)",
          "54:  clusterObj, err := kube.ToUnstructured(&ClusterLinksData{",
          "55:   Server: \"test-svc.com\",",
          "56:   Name:   \"test-cluster\",",
          "57:  })",
          "58:  assert.NoError(t, err)",
          "59:  projectObj, err := kube.ToUnstructured(&v1alpha1.AppProject{",
          "60:   ObjectMeta: metav1.ObjectMeta{",
          "61:    Name:      \"test-project\",",
          "62:    Namespace: \"test-project\",",
          "63:   },",
          "64:   Spec: v1alpha1.AppProjectSpec{",
          "65:    SourceRepos: []string{\"test-repo.git\"},",
          "66:   },",
          "67:  })",
          "68:  assert.NoError(t, err)",
          "71:    appObj:      appObj,",
          "72:    resourceObj: resourceObj,",
          "73:    projectObj:  projectObj,",
          "74:    clusterObj:  clusterObj,",
          "76:     Title:     \"link\",",
          "77:     URL:       \"http://example.com/{{ .application.metadata.name }}&{{ .resource.data.key }}&{{ index .project.spec.sourceRepos 0}}&{{ .cluster.name }}\",",
          "78:     Condition: pointer.String(`application.metadata.name == \"test\" && project.metadata.name == \"test-project\"`),",
          "82:     Url:   pointer.String(\"http://example.com/test&value1&test-repo.git&test-cluster\"),",
          "87:    appObj:      appObj,",
          "88:    resourceObj: resourceObj,",
          "89:    projectObj:  projectObj,",
          "93:      URL:       \"http://example.com/{{ .application.metadata.name }}&{{ .application.spec.destination.namespace }}\",",
          "94:      Condition: pointer.String(`application.metadata.name matches \"test\"`),",
          "98:      URL:       \"http://example.com/{{ .application.metadata.name }}&{{ .application.spec.destination.namespace }}\",",
          "99:      Condition: pointer.String(`application.metadata.name matches \"test1\"`),",
          "103:      URL:       \"http://example.com/{{ .application.metadata.name }}&{{ .application.spec.destination.namespace }}\",",
          "104:      Condition: pointer.String(`application.metadata.test matches \"test\"`),",
          "110:    error: []string{\"failed to evaluate link condition 'application.metadata.test matches \\\"test\\\"' with resource test, error=interface conversion: interface {} is nil, not string (1:27)\\n | application.metadata.test matches \\\"test\\\"\\n | ..........................^\"},",
          "113:    appObj:      appObj,",
          "114:    resourceObj: resourceObj,",
          "115:    projectObj:  projectObj,",
          "119:      URL:       \"http://example.com/{{ .application.metadata.name }}&{{ .application.spec.destination.namespace }}\",",
          "120:      Condition: pointer.String(`application.metadata.name matches \"test\"`),",
          "124:      URL:       \"http://example.com/{{ .application.metadata.name }}&{{ .application.spec.destination.namespace }}\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:  }",
          "96:  for _, tc := range testTable {",
          "98:   assert.Equal(t, tc.error, err, strings.Join(err, \",\"))",
          "99:   assert.Equal(t, reflect.DeepEqual(output.Items, tc.outputLinks), true)",
          "100:  }",
          "",
          "[Removed Lines]",
          "97:   output, err := EvaluateDeepLinksResponse(*tc.obj, tc.inputLinks)",
          "",
          "[Added Lines]",
          "136:   objs := CreateDeepLinksObject(tc.resourceObj, tc.appObj, tc.clusterObj, tc.projectObj)",
          "137:   output, err := EvaluateDeepLinksResponse(objs, tc.appObj.GetName(), tc.inputLinks)",
          "",
          "---------------"
        ],
        "server/project/project.go||server/project/project.go": [
          "File: server/project/project.go -> server/project/project.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:   return nil, err",
          "173:  }",
          "175:  obj, err := kube.ToUnstructured(proj)",
          "176:  if err != nil {",
          "177:   return nil, fmt.Errorf(\"error getting application: %w\", err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "176:  proj.Status = v1alpha1.AppProjectStatus{}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:   return nil, fmt.Errorf(\"failed to read application deep links from configmap: %w\", err)",
          "183:  }",
          "186:  if len(errorList) > 0 {",
          "187:   log.Errorf(\"errorList while evaluating project deep links, %v\", strings.Join(errorList, \", \"))",
          "188:  }",
          "",
          "[Removed Lines]",
          "185:  finalList, errorList := deeplinks.EvaluateDeepLinksResponse(*obj, deepLinks)",
          "",
          "[Added Lines]",
          "188:  deeplinksObj := deeplinks.CreateDeepLinksObject(nil, nil, nil, obj)",
          "189:  finalList, errorList := deeplinks.EvaluateDeepLinksResponse(deeplinksObj, obj.GetName(), deepLinks)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "335ffa8dfc6555204df484d5777931485a04c59d",
      "candidate_info": {
        "commit_hash": "335ffa8dfc6555204df484d5777931485a04c59d",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/335ffa8dfc6555204df484d5777931485a04c59d",
        "files": [
          "cmd/argocd/commands/cluster.go",
          "docs/user-guide/commands/argocd_cluster.md",
          "docs/user-guide/commands/argocd_cluster_rotate-auth.md",
          "server/cluster/cluster.go",
          "server/cluster/cluster_test.go"
        ],
        "message": "feat: allow argocd cluster rotate-auth to accept cluster name (#9838)\n\n* feat: allow argocd cluster rotate-auth to accept cluster name\n\nSigned-off-by: Daniel Helfand <helfand.4@gmail.com>\n\n* fix: test assertions\n\nSigned-off-by: Daniel Helfand <helfand.4@gmail.com>\n\n* chore: address pr feedback\n\nSigned-off-by: Daniel Helfand <helfand.4@gmail.com>",
        "before_after_code_files": [
          "cmd/argocd/commands/cluster.go||cmd/argocd/commands/cluster.go",
          "server/cluster/cluster.go||server/cluster/cluster.go",
          "server/cluster/cluster_test.go||server/cluster/cluster_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "server/cluster/cluster.go||server/cluster/cluster.go",
            "server/cluster/cluster_test.go||server/cluster/cluster_test.go"
          ],
          "candidate": [
            "server/cluster/cluster.go||server/cluster/cluster.go",
            "server/cluster/cluster_test.go||server/cluster/cluster_test.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/argocd/commands/cluster.go||cmd/argocd/commands/cluster.go": [
          "File: cmd/argocd/commands/cluster.go -> cmd/argocd/commands/cluster.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "373: func NewClusterRotateAuthCommand(clientOpts *argocdclient.ClientOptions) *cobra.Command {",
          "374:  var command = &cobra.Command{",
          "378:   Run: func(c *cobra.Command, args []string) {",
          "379:    ctx := c.Context()",
          "",
          "[Removed Lines]",
          "375:   Use:     \"rotate-auth SERVER\",",
          "376:   Short:   fmt.Sprintf(\"%s cluster rotate-auth SERVER\", cliName),",
          "377:   Example: fmt.Sprintf(\"%s cluster rotate-auth https://12.34.567.89\", cliName),",
          "",
          "[Added Lines]",
          "375:   Use:   \"rotate-auth SERVER/NAME\",",
          "376:   Short: fmt.Sprintf(\"%s cluster rotate-auth SERVER/NAME\", cliName),",
          "377:   Example: `argocd cluster rotate-auth https://12.34.567.89",
          "378: argocd cluster rotate-auth cluster-name`,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "384:    }",
          "385:    conn, clusterIf := headless.NewClientOrDie(clientOpts, c).NewClusterClientOrDie()",
          "386:    defer io.Close(conn)",
          "391:    errors.CheckError(err)",
          "393:   },",
          "394:  }",
          "395:  return command",
          "",
          "[Removed Lines]",
          "387:    clusterQuery := clusterpkg.ClusterQuery{",
          "388:     Server: args[0],",
          "389:    }",
          "390:    _, err := clusterIf.RotateAuth(ctx, &clusterQuery)",
          "392:    fmt.Printf(\"Cluster '%s' rotated auth\\n\", clusterQuery.Server)",
          "",
          "[Added Lines]",
          "389:    cluster := args[0]",
          "390:    clusterQuery := getQueryBySelector(cluster)",
          "391:    _, err := clusterIf.RotateAuth(ctx, clusterQuery)",
          "394:    fmt.Printf(\"Cluster '%s' rotated auth\\n\", cluster)",
          "",
          "---------------"
        ],
        "server/cluster/cluster.go||server/cluster/cluster.go": [
          "File: server/cluster/cluster.go -> server/cluster/cluster.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:  if err != nil {",
          "299:   return nil, err",
          "300:  }",
          "345:  }",
          "349:  }",
          "351:  return &cluster.ClusterResponse{}, nil",
          "352: }",
          "",
          "[Removed Lines]",
          "301:  if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(clust.Project, q.Server)); err != nil {",
          "302:   return nil, err",
          "303:  }",
          "304:  logCtx := log.WithField(\"cluster\", q.Server)",
          "305:  logCtx.Info(\"Rotating auth\")",
          "306:  restCfg := clust.RESTConfig()",
          "307:  if restCfg.BearerToken == \"\" {",
          "308:   return nil, status.Errorf(codes.InvalidArgument, \"Cluster '%s' does not use bearer token authentication\", q.Server)",
          "309:  }",
          "310:  claims, err := clusterauth.ParseServiceAccountToken(restCfg.BearerToken)",
          "311:  if err != nil {",
          "312:   return nil, err",
          "313:  }",
          "314:  kubeclientset, err := kubernetes.NewForConfig(restCfg)",
          "315:  if err != nil {",
          "316:   return nil, err",
          "317:  }",
          "318:  newSecret, err := clusterauth.GenerateNewClusterManagerSecret(kubeclientset, claims)",
          "319:  if err != nil {",
          "320:   return nil, err",
          "321:  }",
          "323:  clust.Config.KeyData = nil",
          "324:  clust.Config.CertData = nil",
          "325:  clust.Config.BearerToken = string(newSecret.Data[\"token\"])",
          "328:  serverVersion, err := s.kubectl.GetServerVersion(clust.RESTConfig())",
          "329:  if err != nil {",
          "330:   return nil, err",
          "331:  }",
          "332:  _, err = s.db.UpdateCluster(ctx, clust)",
          "333:  if err != nil {",
          "334:   return nil, err",
          "335:  }",
          "336:  err = s.cache.SetClusterInfo(clust.Server, &appv1.ClusterInfo{",
          "337:   ServerVersion: serverVersion,",
          "338:   ConnectionState: appv1.ConnectionState{",
          "339:    Status:     appv1.ConnectionStatusSuccessful,",
          "340:    ModifiedAt: &v1.Time{Time: time.Now()},",
          "341:   },",
          "342:  })",
          "343:  if err != nil {",
          "344:   return nil, err",
          "346:  err = clusterauth.RotateServiceAccountSecrets(kubeclientset, claims, newSecret)",
          "347:  if err != nil {",
          "348:   return nil, err",
          "350:  logCtx.Infof(\"Rotated auth (old: %s, new: %s)\", claims.SecretName, newSecret.Name)",
          "",
          "[Added Lines]",
          "303:  var servers []string",
          "304:  if q.Name != \"\" {",
          "305:   servers, err = s.db.GetClusterServersByName(ctx, q.Name)",
          "306:   if err != nil {",
          "307:    return nil, status.Errorf(codes.NotFound, \"failed to get cluster servers by name: %v\", err)",
          "308:   }",
          "309:   for _, server := range servers {",
          "310:    if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(clust.Project, server)); err != nil {",
          "311:     return nil, status.Errorf(codes.PermissionDenied, \"encountered permissions issue while processing request: %v\", err)",
          "312:    }",
          "313:   }",
          "314:  } else {",
          "315:   if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(clust.Project, q.Server)); err != nil {",
          "316:    return nil, status.Errorf(codes.PermissionDenied, \"encountered permissions issue while processing request: %v\", err)",
          "317:   }",
          "318:   servers = append(servers, q.Server)",
          "321:  for _, server := range servers {",
          "322:   logCtx := log.WithField(\"cluster\", server)",
          "323:   logCtx.Info(\"Rotating auth\")",
          "324:   restCfg := clust.RESTConfig()",
          "325:   if restCfg.BearerToken == \"\" {",
          "326:    return nil, status.Errorf(codes.InvalidArgument, \"Cluster '%s' does not use bearer token authentication\", server)",
          "327:   }",
          "329:   claims, err := clusterauth.ParseServiceAccountToken(restCfg.BearerToken)",
          "330:   if err != nil {",
          "331:    return nil, err",
          "332:   }",
          "333:   kubeclientset, err := kubernetes.NewForConfig(restCfg)",
          "334:   if err != nil {",
          "335:    return nil, err",
          "336:   }",
          "337:   newSecret, err := clusterauth.GenerateNewClusterManagerSecret(kubeclientset, claims)",
          "338:   if err != nil {",
          "339:    return nil, err",
          "340:   }",
          "342:   clust.Config.KeyData = nil",
          "343:   clust.Config.CertData = nil",
          "344:   clust.Config.BearerToken = string(newSecret.Data[\"token\"])",
          "347:   serverVersion, err := s.kubectl.GetServerVersion(clust.RESTConfig())",
          "348:   if err != nil {",
          "349:    return nil, err",
          "350:   }",
          "351:   _, err = s.db.UpdateCluster(ctx, clust)",
          "352:   if err != nil {",
          "353:    return nil, err",
          "354:   }",
          "355:   err = s.cache.SetClusterInfo(clust.Server, &appv1.ClusterInfo{",
          "356:    ServerVersion: serverVersion,",
          "357:    ConnectionState: appv1.ConnectionState{",
          "358:     Status:     appv1.ConnectionStatusSuccessful,",
          "359:     ModifiedAt: &v1.Time{Time: time.Now()},",
          "360:    },",
          "361:   })",
          "362:   if err != nil {",
          "363:    return nil, err",
          "364:   }",
          "365:   err = clusterauth.RotateServiceAccountSecrets(kubeclientset, claims, newSecret)",
          "366:   if err != nil {",
          "367:    return nil, err",
          "368:   }",
          "369:   logCtx.Infof(\"Rotated auth (old: %s, new: %s)\", claims.SecretName, newSecret.Name)",
          "",
          "---------------"
        ],
        "server/cluster/cluster_test.go||server/cluster/cluster_test.go": [
          "File: server/cluster/cluster_test.go -> server/cluster/cluster_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"context\"",
          "5:  \"testing\"",
          "6:  \"time\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5:  \"encoding/json\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:  })",
          "206: }",
          "208: func getClientset(config map[string]string, ns string, objects ...runtime.Object) *fake.Clientset {",
          "209:  secret := corev1.Secret{",
          "210:   ObjectMeta: metav1.ObjectMeta{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209: func TestRotateAuth(t *testing.T) {",
          "210:  testNamespace := \"kube-system\"",
          "211:  token := \"eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhcmdvY2QtbWFuYWdlci10b2tlbi10ajc5ciIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJhcmdvY2QtbWFuYWdlciIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjkxZGQzN2NmLThkOTItMTFlOS1hMDkxLWQ2NWYyYWU3ZmE4ZCIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlLXN5c3RlbTphcmdvY2QtbWFuYWdlciJ9.ytZjt2pDV8-A7DBMR06zQ3wt9cuVEfq262TQw7sdra-KRpDpMPnziMhc8bkwvgW-LGhTWUh5iu1y-1QhEx6mtbCt7vQArlBRxfvM5ys6ClFkplzq5c2TtZ7EzGSD0Up7tdxuG9dvR6TGXYdfFcG779yCdZo2H48sz5OSJfdEriduMEY1iL5suZd3ebOoVi1fGflmqFEkZX6SvxkoArl5mtNP6TvZ1eTcn64xh4ws152hxio42E-eSnl_CET4tpB5vgP5BVlSKW2xB7w2GJxqdETA5LJRI_OilY77dTOp8cMr_Ck3EOeda3zHfh4Okflg8rZFEeAuJYahQNeAILLkcA\"",
          "212:  config := v1alpha1.ClusterConfig{",
          "213:   BearerToken: token,",
          "214:  }",
          "216:  configMarshal, err := json.Marshal(config)",
          "217:  if err != nil {",
          "218:   t.Errorf(\"failed to marshal config for test: %v\", err)",
          "219:  }",
          "221:  clientset := getClientset(nil, testNamespace,",
          "222:   &corev1.Secret{",
          "223:    ObjectMeta: metav1.ObjectMeta{",
          "224:     Name:      \"my-cluster-secret\",",
          "225:     Namespace: testNamespace,",
          "226:     Labels: map[string]string{",
          "227:      common.LabelKeySecretType: common.LabelValueSecretTypeCluster,",
          "228:     },",
          "229:     Annotations: map[string]string{",
          "230:      common.AnnotationKeyManagedBy: common.AnnotationValueManagedByArgoCD,",
          "231:     },",
          "232:    },",
          "233:    Data: map[string][]byte{",
          "234:     \"name\":   []byte(\"my-cluster-name\"),",
          "235:     \"server\": []byte(\"https://my-cluster-name\"),",
          "236:     \"config\": configMarshal,",
          "237:    },",
          "238:   },",
          "239:   &corev1.Namespace{",
          "240:    ObjectMeta: metav1.ObjectMeta{",
          "241:     Name: \"kube-system\",",
          "242:    },",
          "243:   },",
          "244:   &corev1.Secret{",
          "245:    ObjectMeta: metav1.ObjectMeta{",
          "246:     Name:      \"argocd-manager-token-tj79r\",",
          "247:     Namespace: \"kube-system\",",
          "248:    },",
          "249:    Data: map[string][]byte{",
          "250:     \"token\": []byte(token),",
          "251:    },",
          "252:   },",
          "253:   &corev1.ServiceAccount{",
          "254:    ObjectMeta: metav1.ObjectMeta{",
          "255:     Name:      \"argocd-manager\",",
          "256:     Namespace: \"kube-system\",",
          "257:    },",
          "258:    Secrets: []corev1.ObjectReference{",
          "259:     {",
          "260:      Kind: \"Secret\",",
          "261:      Name: \"argocd-manager-token-tj79r\",",
          "262:     },",
          "263:    },",
          "264:   })",
          "266:  db := db.NewDB(testNamespace, settings.NewSettingsManager(context.Background(), clientset, testNamespace), clientset)",
          "267:  server := NewServer(db, newNoopEnforcer(), newServerInMemoryCache(), &kubetest.MockKubectlCmd{})",
          "269:  t.Run(\"RotateAuth by Unknown Name\", func(t *testing.T) {",
          "270:   _, err := server.RotateAuth(context.Background(), &clusterapi.ClusterQuery{",
          "271:    Name: \"foo\",",
          "272:   })",
          "274:   assert.EqualError(t, err, `rpc error: code = PermissionDenied desc = permission denied`)",
          "275:  })",
          "280:  t.Run(\"RotateAuth by Name - Error from no such host\", func(t *testing.T) {",
          "281:   _, err := server.RotateAuth(context.Background(), &clusterapi.ClusterQuery{",
          "282:    Name: \"my-cluster-name\",",
          "283:   })",
          "285:   require.NotNil(t, err)",
          "286:   assert.Contains(t, err.Error(), \"Get \\\"https://my-cluster-name/\")",
          "287:  })",
          "289:  t.Run(\"RotateAuth by Server - Error from no such host\", func(t *testing.T) {",
          "290:   _, err := server.RotateAuth(context.Background(), &clusterapi.ClusterQuery{",
          "291:    Server: \"https://my-cluster-name\",",
          "292:   })",
          "294:   require.NotNil(t, err)",
          "295:   assert.Contains(t, err.Error(), \"Get \\\"https://my-cluster-name/\")",
          "296:  })",
          "297: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1d81738d3089958832908e9a2460e28387cc46a",
      "candidate_info": {
        "commit_hash": "c1d81738d3089958832908e9a2460e28387cc46a",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/c1d81738d3089958832908e9a2460e28387cc46a",
        "files": [
          "go.mod",
          "server/account/account.go",
          "server/application/application.go",
          "server/certificate/certificate.go",
          "server/cluster/cluster.go",
          "server/gpgkey/gpgkey.go",
          "server/repocreds/repocreds.go",
          "server/repository/repository.go",
          "server/server.go",
          "server/settings/settings.go",
          "server/version/version.go",
          "util/db/certificate.go",
          "util/db/cluster.go",
          "util/db/repository.go",
          "util/db/repository_legacy.go",
          "util/db/repository_secrets.go",
          "util/db/repository_secrets_test.go",
          "util/db/repository_test.go",
          "util/db/secrets.go",
          "util/grpc/errors.go",
          "util/grpc/grpc.go",
          "util/grpc/logging.go",
          "util/grpc/sanitizer.go",
          "util/grpc/useragent.go"
        ],
        "message": "chore: Fix import of context package across codebase (#9852)\n\n* chore: fix context imports\n\nSigned-off-by: jannfis <jann@mistrust.net>\n\n* x/net is now imported indirectly\n\nSigned-off-by: jannfis <jann@mistrust.net>\n\n* Make sanitizerKey a unique type\n\nSigned-off-by: jannfis <jann@mistrust.net>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "server/account/account.go||server/account/account.go",
          "server/application/application.go||server/application/application.go",
          "server/certificate/certificate.go||server/certificate/certificate.go",
          "server/cluster/cluster.go||server/cluster/cluster.go",
          "server/gpgkey/gpgkey.go||server/gpgkey/gpgkey.go",
          "server/repocreds/repocreds.go||server/repocreds/repocreds.go",
          "server/repository/repository.go||server/repository/repository.go",
          "server/server.go||server/server.go",
          "server/settings/settings.go||server/settings/settings.go",
          "server/version/version.go||server/version/version.go",
          "util/db/certificate.go||util/db/certificate.go",
          "util/db/cluster.go||util/db/cluster.go",
          "util/db/repository.go||util/db/repository.go",
          "util/db/repository_legacy.go||util/db/repository_legacy.go",
          "util/db/repository_secrets.go||util/db/repository_secrets.go",
          "util/db/repository_secrets_test.go||util/db/repository_secrets_test.go",
          "util/db/repository_test.go||util/db/repository_test.go",
          "util/db/secrets.go||util/db/secrets.go",
          "util/grpc/errors.go||util/grpc/errors.go",
          "util/grpc/grpc.go||util/grpc/grpc.go",
          "util/grpc/logging.go||util/grpc/logging.go",
          "util/grpc/sanitizer.go||util/grpc/sanitizer.go",
          "util/grpc/useragent.go||util/grpc/useragent.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "server/cluster/cluster.go||server/cluster/cluster.go"
          ],
          "candidate": [
            "server/cluster/cluster.go||server/cluster/cluster.go"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:  github.com/xanzy/go-gitlab v0.60.0",
          "77:  github.com/yuin/gopher-lua v0.0.0-20200816102855-ee81675732da",
          "78:  golang.org/x/crypto v0.0.0-20220525230936-793ad666bf5e",
          "80:  golang.org/x/oauth2 v0.0.0-20220608161450-d0670ef3b1eb",
          "81:  golang.org/x/sync v0.0.0-20210220032951-036812b2e83c",
          "82:  golang.org/x/term v0.0.0-20210927222741-03fcf44c2211",
          "",
          "[Removed Lines]",
          "79:  golang.org/x/net v0.0.0-20220621193019-9d032be2e588",
          "",
          "[Added Lines]",
          "79:  golang.org/x/net v0.0.0-20220621193019-9d032be2e588 // indirect",
          "",
          "---------------"
        ],
        "server/account/account.go||server/account/account.go": [
          "File: server/account/account.go -> server/account/account.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  \"sort\"",
          "8:  \"time\"",
          "10:  \"github.com/google/uuid\"",
          "11:  log \"github.com/sirupsen/logrus\"",
          "13:  \"google.golang.org/grpc/codes\"",
          "14:  \"google.golang.org/grpc/status\"",
          "15:  \"k8s.io/kubectl/pkg/util/slice\"",
          "",
          "[Removed Lines]",
          "12:  \"golang.org/x/net/context\"",
          "",
          "[Added Lines]",
          "10:  \"context\"",
          "",
          "---------------"
        ],
        "server/application/application.go||server/application/application.go": [
          "File: server/application/application.go -> server/application/application.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:  \"strings\"",
          "12:  \"time\"",
          "14:  kubecache \"github.com/argoproj/gitops-engine/pkg/cache\"",
          "15:  \"github.com/argoproj/gitops-engine/pkg/diff\"",
          "16:  \"github.com/argoproj/gitops-engine/pkg/sync/common\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:  \"context\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:  \"github.com/argoproj/pkg/sync\"",
          "20:  jsonpatch \"github.com/evanphx/json-patch\"",
          "21:  log \"github.com/sirupsen/logrus\"",
          "23:  \"google.golang.org/grpc/codes\"",
          "24:  \"google.golang.org/grpc/status\"",
          "25:  v1 \"k8s.io/api/core/v1\"",
          "",
          "[Removed Lines]",
          "22:  \"golang.org/x/net/context\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "server/certificate/certificate.go||server/certificate/certificate.go": [
          "File: server/certificate/certificate.go -> server/certificate/certificate.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package certificate",
          "3: import (",
          "6:  certificatepkg \"github.com/argoproj/argo-cd/v2/pkg/apiclient/certificate\"",
          "7:  appsv1 \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"",
          "",
          "[Removed Lines]",
          "4:  \"golang.org/x/net/context\"",
          "",
          "[Added Lines]",
          "4:  \"context\"",
          "",
          "---------------"
        ],
        "server/cluster/cluster.go||server/cluster/cluster.go": [
          "File: server/cluster/cluster.go -> server/cluster/cluster.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"time\"",
          "6:  \"github.com/argoproj/gitops-engine/pkg/utils/kube\"",
          "7:  log \"github.com/sirupsen/logrus\"",
          "9:  \"google.golang.org/grpc/codes\"",
          "10:  \"google.golang.org/grpc/status\"",
          "11:  v1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "",
          "[Removed Lines]",
          "8:  \"golang.org/x/net/context\"",
          "",
          "[Added Lines]",
          "6:  \"context\"",
          "",
          "---------------"
        ],
        "server/gpgkey/gpgkey.go||server/gpgkey/gpgkey.go": [
          "File: server/gpgkey/gpgkey.go -> server/gpgkey/gpgkey.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"fmt\"",
          "5:  \"strings\"",
          "9:  gpgkeypkg \"github.com/argoproj/argo-cd/v2/pkg/apiclient/gpgkey\"",
          "10:  appsv1 \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"",
          "",
          "[Removed Lines]",
          "7:  \"golang.org/x/net/context\"",
          "",
          "[Added Lines]",
          "7:  \"context\"",
          "",
          "---------------"
        ],
        "server/repocreds/repocreds.go||server/repocreds/repocreds.go": [
          "File: server/repocreds/repocreds.go -> server/repocreds/repocreds.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  \"github.com/argoproj/argo-cd/v2/util/argo\"",
          "9:  \"google.golang.org/grpc/codes\"",
          "10:  \"google.golang.org/grpc/status\"",
          "",
          "[Removed Lines]",
          "8:  \"golang.org/x/net/context\"",
          "",
          "[Added Lines]",
          "8:  \"context\"",
          "",
          "---------------"
        ],
        "server/repository/repository.go||server/repository/repository.go": [
          "File: server/repository/repository.go -> server/repository/repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"fmt\"",
          "5:  \"reflect\"",
          "7:  \"github.com/argoproj/gitops-engine/pkg/utils/kube\"",
          "8:  \"github.com/argoproj/gitops-engine/pkg/utils/text\"",
          "9:  log \"github.com/sirupsen/logrus\"",
          "11:  \"google.golang.org/grpc/codes\"",
          "12:  \"google.golang.org/grpc/status\"",
          "13:  apierr \"k8s.io/apimachinery/pkg/api/errors\"",
          "",
          "[Removed Lines]",
          "10:  \"golang.org/x/net/context\"",
          "",
          "[Added Lines]",
          "7:  \"context\"",
          "",
          "---------------"
        ],
        "server/server.go||server/server.go": [
          "File: server/server.go -> server/server.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  golang_proto \"github.com/golang/protobuf/proto\"",
          "25:  \"github.com/argoproj/pkg/sync\"",
          "26:  \"github.com/go-redis/redis/v8\"",
          "27:  \"github.com/golang-jwt/jwt/v4\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:  netCtx \"context\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:  log \"github.com/sirupsen/logrus\"",
          "36:  \"github.com/soheilhy/cmux\"",
          "37:  \"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc\"",
          "39:  \"google.golang.org/grpc\"",
          "40:  \"google.golang.org/grpc/codes\"",
          "41:  \"google.golang.org/grpc/credentials\"",
          "",
          "[Removed Lines]",
          "38:  netCtx \"golang.org/x/net/context\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "server/settings/settings.go||server/settings/settings.go": [
          "File: server/settings/settings.go -> server/settings/settings.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package settings",
          "3: import (",
          "4:  \"github.com/ghodss/yaml\"",
          "7:  sessionmgr \"github.com/argoproj/argo-cd/v2/util/session\"",
          "",
          "[Removed Lines]",
          "5:  \"golang.org/x/net/context\"",
          "",
          "[Added Lines]",
          "4:  \"context\"",
          "",
          "---------------"
        ],
        "server/version/version.go||server/version/version.go": [
          "File: server/version/version.go -> server/version/version.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package version",
          "3: import (",
          "4:  \"github.com/golang/protobuf/ptypes/empty\"",
          "5:  \"github.com/google/go-jsonnet\"",
          "8:  \"github.com/argoproj/argo-cd/v2/common\"",
          "9:  \"github.com/argoproj/argo-cd/v2/pkg/apiclient/version\"",
          "",
          "[Removed Lines]",
          "6:  \"golang.org/x/net/context\"",
          "",
          "[Added Lines]",
          "4:  \"context\"",
          "",
          "---------------"
        ],
        "util/db/certificate.go||util/db/certificate.go": [
          "File: util/db/certificate.go -> util/db/certificate.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:  \"regexp\"",
          "6:  \"strings\"",
          "8:  \"golang.org/x/crypto/ssh\"",
          "11:  log \"github.com/sirupsen/logrus\"",
          "",
          "[Removed Lines]",
          "9:  \"golang.org/x/net/context\"",
          "",
          "[Added Lines]",
          "8:  \"context\"",
          "",
          "---------------"
        ],
        "util/db/cluster.go||util/db/cluster.go": [
          "File: util/db/cluster.go -> util/db/cluster.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"sync\"",
          "9:  \"time\"",
          "11:  log \"github.com/sirupsen/logrus\"",
          "13:  \"google.golang.org/grpc/codes\"",
          "14:  \"google.golang.org/grpc/status\"",
          "15:  apiv1 \"k8s.io/api/core/v1\"",
          "",
          "[Removed Lines]",
          "12:  \"golang.org/x/net/context\"",
          "",
          "[Added Lines]",
          "11:  \"context\"",
          "",
          "---------------"
        ],
        "util/db/repository.go||util/db/repository.go": [
          "File: util/db/repository.go -> util/db/repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"fmt\"",
          "5:  \"hash/fnv\"",
          "7:  log \"github.com/sirupsen/logrus\"",
          "9:  \"google.golang.org/grpc/codes\"",
          "10:  \"google.golang.org/grpc/status\"",
          "11:  apiv1 \"k8s.io/api/core/v1\"",
          "",
          "[Removed Lines]",
          "8:  \"golang.org/x/net/context\"",
          "",
          "[Added Lines]",
          "7:  \"context\"",
          "",
          "---------------"
        ],
        "util/db/repository_legacy.go||util/db/repository_legacy.go": [
          "File: util/db/repository_legacy.go -> util/db/repository_legacy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"strings\"",
          "6:  log \"github.com/sirupsen/logrus\"",
          "8:  \"google.golang.org/grpc/codes\"",
          "9:  \"google.golang.org/grpc/status\"",
          "10:  apiv1 \"k8s.io/api/core/v1\"",
          "",
          "[Removed Lines]",
          "7:  \"golang.org/x/net/context\"",
          "",
          "[Added Lines]",
          "6:  \"context\"",
          "",
          "---------------"
        ],
        "util/db/repository_secrets.go||util/db/repository_secrets.go": [
          "File: util/db/repository_secrets.go -> util/db/repository_secrets.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"fmt\"",
          "5:  \"strings\"",
          "7:  log \"github.com/sirupsen/logrus\"",
          "9:  \"google.golang.org/grpc/codes\"",
          "10:  \"google.golang.org/grpc/status\"",
          "11:  corev1 \"k8s.io/api/core/v1\"",
          "",
          "[Removed Lines]",
          "8:  \"golang.org/x/net/context\"",
          "",
          "[Added Lines]",
          "7:  \"context\"",
          "",
          "---------------"
        ],
        "util/db/repository_secrets_test.go||util/db/repository_secrets_test.go": [
          "File: util/db/repository_secrets_test.go -> util/db/repository_secrets_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"strconv\"",
          "5:  \"testing\"",
          "7:  \"github.com/stretchr/testify/assert\"",
          "9:  \"google.golang.org/grpc/codes\"",
          "10:  \"google.golang.org/grpc/status\"",
          "11:  corev1 \"k8s.io/api/core/v1\"",
          "",
          "[Removed Lines]",
          "8:  \"golang.org/x/net/context\"",
          "",
          "[Added Lines]",
          "7:  \"context\"",
          "",
          "---------------"
        ],
        "util/db/repository_test.go||util/db/repository_test.go": [
          "File: util/db/repository_test.go -> util/db/repository_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"testing\"",
          "6:  \"github.com/stretchr/testify/assert\"",
          "8:  corev1 \"k8s.io/api/core/v1\"",
          "9:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "",
          "[Removed Lines]",
          "7:  \"golang.org/x/net/context\"",
          "",
          "[Added Lines]",
          "6:  \"context\"",
          "",
          "---------------"
        ],
        "util/db/secrets.go||util/db/secrets.go": [
          "File: util/db/secrets.go -> util/db/secrets.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"strings\"",
          "9:  \"time\"",
          "11:  log \"github.com/sirupsen/logrus\"",
          "13:  apiv1 \"k8s.io/api/core/v1\"",
          "14:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "15:  \"k8s.io/apimachinery/pkg/fields\"",
          "",
          "[Removed Lines]",
          "12:  \"golang.org/x/net/context\"",
          "",
          "[Added Lines]",
          "11:  \"context\"",
          "",
          "---------------"
        ],
        "util/grpc/errors.go||util/grpc/errors.go": [
          "File: util/grpc/errors.go -> util/grpc/errors.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"errors\"",
          "6:  giterr \"github.com/go-git/go-git/v5/plumbing/transport\"",
          "8:  \"google.golang.org/grpc\"",
          "9:  \"google.golang.org/grpc/codes\"",
          "10:  \"google.golang.org/grpc/status\"",
          "",
          "[Removed Lines]",
          "7:  \"golang.org/x/net/context\"",
          "",
          "[Added Lines]",
          "6:  \"context\"",
          "",
          "---------------"
        ],
        "util/grpc/grpc.go||util/grpc/grpc.go": [
          "File: util/grpc/grpc.go -> util/grpc/grpc.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  \"strings\"",
          "8:  \"time\"",
          "10:  \"github.com/sirupsen/logrus\"",
          "12:  \"google.golang.org/grpc\"",
          "13:  \"google.golang.org/grpc/codes\"",
          "14:  \"google.golang.org/grpc/credentials\"",
          "",
          "[Removed Lines]",
          "11:  \"golang.org/x/net/context\"",
          "",
          "[Added Lines]",
          "10:  \"context\"",
          "",
          "---------------"
        ],
        "util/grpc/logging.go||util/grpc/logging.go": [
          "File: util/grpc/logging.go -> util/grpc/logging.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:  \"encoding/json\"",
          "6:  \"fmt\"",
          "8:  \"github.com/gogo/protobuf/jsonpb\"",
          "9:  \"github.com/gogo/protobuf/proto\"",
          "10:  grpc_logging \"github.com/grpc-ecosystem/go-grpc-middleware/logging\"",
          "11:  ctx_logrus \"github.com/grpc-ecosystem/go-grpc-middleware/tags/logrus\"",
          "12:  \"github.com/sirupsen/logrus\"",
          "14:  \"google.golang.org/grpc\"",
          "15: )",
          "",
          "[Removed Lines]",
          "13:  \"golang.org/x/net/context\"",
          "",
          "[Added Lines]",
          "8:  \"context\"",
          "",
          "---------------"
        ],
        "util/grpc/sanitizer.go||util/grpc/sanitizer.go": [
          "File: util/grpc/sanitizer.go -> util/grpc/sanitizer.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:  \"regexp\"",
          "6:  \"strings\"",
          "9:  \"google.golang.org/grpc\"",
          "10:  \"google.golang.org/grpc/status\"",
          "11: )",
          "13: const (",
          "15: )",
          "",
          "[Removed Lines]",
          "8:  \"golang.org/x/net/context\"",
          "14:  contextKey = \"sanitizer\"",
          "",
          "[Added Lines]",
          "8:  \"context\"",
          "14: type sanitizerKey string",
          "17:  contextKey sanitizerKey = \"sanitizer\"",
          "",
          "---------------"
        ],
        "util/grpc/useragent.go||util/grpc/useragent.go": [
          "File: util/grpc/useragent.go -> util/grpc/useragent.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"strings\"",
          "6:  \"github.com/Masterminds/semver/v3\"",
          "8:  \"google.golang.org/grpc\"",
          "9:  \"google.golang.org/grpc/codes\"",
          "10:  \"google.golang.org/grpc/metadata\"",
          "",
          "[Removed Lines]",
          "7:  \"golang.org/x/net/context\"",
          "",
          "[Added Lines]",
          "6:  \"context\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d092ddff8343e87f09dd90b5bee67f84efaec07",
      "candidate_info": {
        "commit_hash": "9d092ddff8343e87f09dd90b5bee67f84efaec07",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/9d092ddff8343e87f09dd90b5bee67f84efaec07",
        "files": [
          "common/common.go",
          "server/cluster/cluster.go",
          "server/cluster/cluster_test.go"
        ],
        "message": "Merge pull request from GHSA-3jfq-742w-xg8j\n\nfix test name\n\nSigned-off-by: Michael Crenshaw <350466+crenshaw-dev@users.noreply.github.com>",
        "before_after_code_files": [
          "common/common.go||common/common.go",
          "server/cluster/cluster.go||server/cluster/cluster.go",
          "server/cluster/cluster_test.go||server/cluster/cluster_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "common/common.go||common/common.go",
            "server/cluster/cluster.go||server/cluster/cluster.go",
            "server/cluster/cluster_test.go||server/cluster/cluster_test.go"
          ],
          "candidate": [
            "common/common.go||common/common.go",
            "server/cluster/cluster.go||server/cluster/cluster.go",
            "server/cluster/cluster_test.go||server/cluster/cluster_test.go"
          ]
        }
      },
      "candidate_diff": {
        "common/common.go||common/common.go": [
          "File: common/common.go -> common/common.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"errors\"",
          "5:  \"os\"",
          "6:  \"time\"",
          "7: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:  \"google.golang.org/grpc/codes\"",
          "9:  \"google.golang.org/grpc/status\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247: const TokenVerificationError = \"failed to verify the token\"",
          "249: var TokenVerificationErr = errors.New(TokenVerificationError)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254: var PermissionDeniedAPIError = status.Error(codes.PermissionDenied, \"permission denied\")",
          "",
          "---------------"
        ],
        "server/cluster/cluster.go||server/cluster/cluster.go": [
          "File: server/cluster/cluster.go -> server/cluster/cluster.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:  \"k8s.io/apimachinery/pkg/util/sets\"",
          "14:  \"k8s.io/client-go/kubernetes\"",
          "16:  \"github.com/argoproj/argo-cd/v2/pkg/apiclient/cluster\"",
          "17:  appv1 \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"",
          "18:  servercache \"github.com/argoproj/argo-cd/v2/server/cache\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:  \"github.com/argoproj/argo-cd/v2/common\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134: func (s *Server) getClusterWith403IfNotExist(ctx context.Context, q *cluster.ClusterQuery) (*appv1.Cluster, error) {",
          "135:  repo, err := s.getCluster(ctx, q)",
          "136:  if err != nil || repo == nil {",
          "138:  }",
          "139:  return repo, nil",
          "140: }",
          "",
          "[Removed Lines]",
          "137:   return nil, status.Error(codes.PermissionDenied, \"permission denied\")",
          "",
          "[Added Lines]",
          "138:   return nil, common.PermissionDeniedAPIError",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:  }",
          "225:  }",
          "227:  if len(q.UpdatedFields) == 0 || sets.NewString(q.UpdatedFields...).Has(\"project\") {",
          "231:   }",
          "232:  }",
          "",
          "[Removed Lines]",
          "223:  if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(c.Project, q.Cluster.Server)); err != nil {",
          "224:   return nil, err",
          "229:   if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(q.Cluster.Project, q.Cluster.Server)); err != nil {",
          "230:    return nil, err",
          "",
          "[Added Lines]",
          "224:  if !s.enf.Enforce(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(c.Project, c.Server)) {",
          "225:   return nil, common.PermissionDeniedAPIError",
          "230:   if !s.enf.Enforce(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(q.Cluster.Project, c.Server)) {",
          "231:    return nil, common.PermissionDeniedAPIError",
          "",
          "---------------"
        ],
        "server/cluster/cluster_test.go||server/cluster/cluster_test.go": [
          "File: server/cluster/cluster_test.go -> server/cluster/cluster_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"context\"",
          "5:  \"testing\"",
          "6:  \"time\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5:  \"fmt\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:  return enf",
          "44: }",
          "46: func TestGetCluster_UrlEncodedName(t *testing.T) {",
          "47:  db := &dbmocks.ArgoDB{}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: func TestUpdateCluster_RejectInvalidParams(t *testing.T) {",
          "48:  testCases := []struct {",
          "49:   name    string",
          "50:   request clusterapi.ClusterUpdateRequest",
          "51:  }{",
          "52:   {",
          "53:    name:    \"allowed cluster URL in body, disallowed cluster URL in query\",",
          "54:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"\", Value: \"https://127.0.0.2\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
          "55:   },",
          "56:   {",
          "57:    name:    \"allowed cluster URL in body, disallowed cluster name in query\",",
          "58:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"name\", Value: \"disallowed-unscoped\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
          "59:   },",
          "60:   {",
          "61:    name:    \"allowed cluster URL in body, disallowed cluster name in query, changing unscoped to scoped\",",
          "62:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"allowed-project\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"\", Value: \"https://127.0.0.2\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
          "63:   },",
          "64:   {",
          "65:    name:    \"allowed cluster URL in body, disallowed cluster URL in query, changing unscoped to scoped\",",
          "66:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"allowed-project\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"name\", Value: \"disallowed-unscoped\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
          "67:   },",
          "68:  }",
          "70:  db := &dbmocks.ArgoDB{}",
          "72:  clusters := []v1alpha1.Cluster{",
          "73:   {",
          "74:    Name:   \"allowed-unscoped\",",
          "75:    Server: \"https://127.0.0.1\",",
          "76:   },",
          "77:   {",
          "78:    Name:   \"disallowed-unscoped\",",
          "79:    Server: \"https://127.0.0.2\",",
          "80:   },",
          "81:   {",
          "82:    Name:    \"allowed-scoped\",",
          "83:    Server:  \"https://127.0.0.3\",",
          "84:    Project: \"allowed-project\",",
          "85:   },",
          "86:   {",
          "87:    Name:    \"disallowed-scoped\",",
          "88:    Server:  \"https://127.0.0.4\",",
          "89:    Project: \"disallowed-project\",",
          "90:   },",
          "91:  }",
          "93:  db.On(\"ListClusters\", mock.Anything).Return(",
          "94:   func(ctx context.Context) *v1alpha1.ClusterList {",
          "95:    return &v1alpha1.ClusterList{",
          "96:     ListMeta: v1.ListMeta{},",
          "97:     Items:    clusters,",
          "98:    }",
          "99:   },",
          "100:   func(ctx context.Context) error {",
          "101:    return nil",
          "102:   },",
          "103:  )",
          "104:  db.On(\"UpdateCluster\", mock.Anything, mock.Anything).Return(",
          "105:   func(ctx context.Context, c *v1alpha1.Cluster) *v1alpha1.Cluster {",
          "106:    for _, cluster := range clusters {",
          "107:     if c.Server == cluster.Server {",
          "108:      return c",
          "109:     }",
          "110:    }",
          "111:    return nil",
          "112:   },",
          "113:   func(ctx context.Context, c *v1alpha1.Cluster) error {",
          "114:    for _, cluster := range clusters {",
          "115:     if c.Server == cluster.Server {",
          "116:      return nil",
          "117:     }",
          "118:    }",
          "119:    return fmt.Errorf(\"cluster '%s' not found\", c.Server)",
          "120:   },",
          "121:  )",
          "122:  db.On(\"GetCluster\", mock.Anything, mock.Anything).Return(",
          "123:   func(ctx context.Context, server string) *v1alpha1.Cluster {",
          "124:    for _, cluster := range clusters {",
          "125:     if server == cluster.Server {",
          "126:      return &cluster",
          "127:     }",
          "128:    }",
          "129:    return nil",
          "130:   },",
          "131:   func(ctx context.Context, server string) error {",
          "132:    for _, cluster := range clusters {",
          "133:     if server == cluster.Server {",
          "134:      return nil",
          "135:     }",
          "136:    }",
          "137:    return fmt.Errorf(\"cluster '%s' not found\", server)",
          "138:   },",
          "139:  )",
          "141:  enf := rbac.NewEnforcer(fake.NewSimpleClientset(test.NewFakeConfigMap()), test.FakeArgoCDNamespace, common.ArgoCDConfigMapName, nil)",
          "142:  _ = enf.SetBuiltinPolicy(`p, role:test, clusters, *, https://127.0.0.1, allow",
          "143: p, role:test, clusters, *, allowed-project/*, allow`)",
          "144:  enf.SetDefaultRole(\"role:test\")",
          "145:  server := NewServer(db, enf, newServerInMemoryCache(), &kubetest.MockKubectlCmd{})",
          "147:  for _, c := range testCases {",
          "148:   cc := c",
          "149:   t.Run(cc.name, func(t *testing.T) {",
          "150:    t.Parallel()",
          "151:    out, err := server.Update(context.Background(), &cc.request)",
          "152:    require.Nil(t, out)",
          "153:    assert.ErrorIs(t, err, common.PermissionDeniedAPIError)",
          "154:   })",
          "155:  }",
          "156: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5831a573aa6ae1ee83dbfea85e52f6359375dc4a",
      "candidate_info": {
        "commit_hash": "5831a573aa6ae1ee83dbfea85e52f6359375dc4a",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/5831a573aa6ae1ee83dbfea85e52f6359375dc4a",
        "files": [
          "common/common.go",
          "server/cluster/cluster.go",
          "server/cluster/cluster_test.go"
        ],
        "message": "Merge pull request from GHSA-3jfq-742w-xg8j\n\nfix test name\n\nSigned-off-by: Michael Crenshaw <350466+crenshaw-dev@users.noreply.github.com>",
        "before_after_code_files": [
          "common/common.go||common/common.go",
          "server/cluster/cluster.go||server/cluster/cluster.go",
          "server/cluster/cluster_test.go||server/cluster/cluster_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "common/common.go||common/common.go",
            "server/cluster/cluster.go||server/cluster/cluster.go",
            "server/cluster/cluster_test.go||server/cluster/cluster_test.go"
          ],
          "candidate": [
            "common/common.go||common/common.go",
            "server/cluster/cluster.go||server/cluster/cluster.go",
            "server/cluster/cluster_test.go||server/cluster/cluster_test.go"
          ]
        }
      },
      "candidate_diff": {
        "common/common.go||common/common.go": [
          "File: common/common.go -> common/common.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"time\"",
          "10:  \"github.com/sirupsen/logrus\"",
          "11: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  \"google.golang.org/grpc/codes\"",
          "12:  \"google.golang.org/grpc/status\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "299: const TokenVerificationError = \"failed to verify the token\"",
          "301: var TokenVerificationErr = errors.New(TokenVerificationError)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "305: var PermissionDeniedAPIError = status.Error(codes.PermissionDenied, \"permission denied\")",
          "",
          "---------------"
        ],
        "server/cluster/cluster.go||server/cluster/cluster.go": [
          "File: server/cluster/cluster.go -> server/cluster/cluster.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:  \"k8s.io/apimachinery/pkg/util/sets\"",
          "14:  \"k8s.io/client-go/kubernetes\"",
          "16:  \"github.com/argoproj/argo-cd/v2/pkg/apiclient/cluster\"",
          "17:  appv1 \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"",
          "18:  servercache \"github.com/argoproj/argo-cd/v2/server/cache\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:  \"github.com/argoproj/argo-cd/v2/common\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134: func (s *Server) getClusterWith403IfNotExist(ctx context.Context, q *cluster.ClusterQuery) (*appv1.Cluster, error) {",
          "135:  repo, err := s.getCluster(ctx, q)",
          "136:  if err != nil || repo == nil {",
          "138:  }",
          "139:  return repo, nil",
          "140: }",
          "",
          "[Removed Lines]",
          "137:   return nil, status.Error(codes.PermissionDenied, \"permission denied\")",
          "",
          "[Added Lines]",
          "138:   return nil, common.PermissionDeniedAPIError",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:  }",
          "225:  }",
          "227:  if len(q.UpdatedFields) == 0 || sets.NewString(q.UpdatedFields...).Has(\"project\") {",
          "231:   }",
          "232:  }",
          "",
          "[Removed Lines]",
          "223:  if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(c.Project, q.Cluster.Server)); err != nil {",
          "224:   return nil, err",
          "229:   if err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(q.Cluster.Project, q.Cluster.Server)); err != nil {",
          "230:    return nil, err",
          "",
          "[Added Lines]",
          "224:  if !s.enf.Enforce(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(c.Project, c.Server)) {",
          "225:   return nil, common.PermissionDeniedAPIError",
          "230:   if !s.enf.Enforce(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(q.Cluster.Project, c.Server)) {",
          "231:    return nil, common.PermissionDeniedAPIError",
          "",
          "---------------"
        ],
        "server/cluster/cluster_test.go||server/cluster/cluster_test.go": [
          "File: server/cluster/cluster_test.go -> server/cluster/cluster_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"context\"",
          "5:  \"testing\"",
          "6:  \"time\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5:  \"fmt\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:  return enf",
          "49: }",
          "51: func TestGetCluster_UrlEncodedName(t *testing.T) {",
          "52:  db := &dbmocks.ArgoDB{}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: func TestUpdateCluster_RejectInvalidParams(t *testing.T) {",
          "53:  testCases := []struct {",
          "54:   name    string",
          "55:   request clusterapi.ClusterUpdateRequest",
          "56:  }{",
          "57:   {",
          "58:    name:    \"allowed cluster URL in body, disallowed cluster URL in query\",",
          "59:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"\", Value: \"https://127.0.0.2\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
          "60:   },",
          "61:   {",
          "62:    name:    \"allowed cluster URL in body, disallowed cluster name in query\",",
          "63:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"name\", Value: \"disallowed-unscoped\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
          "64:   },",
          "65:   {",
          "66:    name:    \"allowed cluster URL in body, disallowed cluster name in query, changing unscoped to scoped\",",
          "67:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"allowed-project\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"\", Value: \"https://127.0.0.2\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
          "68:   },",
          "69:   {",
          "70:    name:    \"allowed cluster URL in body, disallowed cluster URL in query, changing unscoped to scoped\",",
          "71:    request: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"allowed-project\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"name\", Value: \"disallowed-unscoped\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},",
          "72:   },",
          "73:  }",
          "75:  db := &dbmocks.ArgoDB{}",
          "77:  clusters := []v1alpha1.Cluster{",
          "78:   {",
          "79:    Name:   \"allowed-unscoped\",",
          "80:    Server: \"https://127.0.0.1\",",
          "81:   },",
          "82:   {",
          "83:    Name:   \"disallowed-unscoped\",",
          "84:    Server: \"https://127.0.0.2\",",
          "85:   },",
          "86:   {",
          "87:    Name:    \"allowed-scoped\",",
          "88:    Server:  \"https://127.0.0.3\",",
          "89:    Project: \"allowed-project\",",
          "90:   },",
          "91:   {",
          "92:    Name:    \"disallowed-scoped\",",
          "93:    Server:  \"https://127.0.0.4\",",
          "94:    Project: \"disallowed-project\",",
          "95:   },",
          "96:  }",
          "98:  db.On(\"ListClusters\", mock.Anything).Return(",
          "99:   func(ctx context.Context) *v1alpha1.ClusterList {",
          "100:    return &v1alpha1.ClusterList{",
          "101:     ListMeta: v1.ListMeta{},",
          "102:     Items:    clusters,",
          "103:    }",
          "104:   },",
          "105:   func(ctx context.Context) error {",
          "106:    return nil",
          "107:   },",
          "108:  )",
          "109:  db.On(\"UpdateCluster\", mock.Anything, mock.Anything).Return(",
          "110:   func(ctx context.Context, c *v1alpha1.Cluster) *v1alpha1.Cluster {",
          "111:    for _, cluster := range clusters {",
          "112:     if c.Server == cluster.Server {",
          "113:      return c",
          "114:     }",
          "115:    }",
          "116:    return nil",
          "117:   },",
          "118:   func(ctx context.Context, c *v1alpha1.Cluster) error {",
          "119:    for _, cluster := range clusters {",
          "120:     if c.Server == cluster.Server {",
          "121:      return nil",
          "122:     }",
          "123:    }",
          "124:    return fmt.Errorf(\"cluster '%s' not found\", c.Server)",
          "125:   },",
          "126:  )",
          "127:  db.On(\"GetCluster\", mock.Anything, mock.Anything).Return(",
          "128:   func(ctx context.Context, server string) *v1alpha1.Cluster {",
          "129:    for _, cluster := range clusters {",
          "130:     if server == cluster.Server {",
          "131:      return &cluster",
          "132:     }",
          "133:    }",
          "134:    return nil",
          "135:   },",
          "136:   func(ctx context.Context, server string) error {",
          "137:    for _, cluster := range clusters {",
          "138:     if server == cluster.Server {",
          "139:      return nil",
          "140:     }",
          "141:    }",
          "142:    return fmt.Errorf(\"cluster '%s' not found\", server)",
          "143:   },",
          "144:  )",
          "146:  enf := rbac.NewEnforcer(fake.NewSimpleClientset(test.NewFakeConfigMap()), test.FakeArgoCDNamespace, common.ArgoCDConfigMapName, nil)",
          "147:  _ = enf.SetBuiltinPolicy(`p, role:test, clusters, *, https://127.0.0.1, allow",
          "148: p, role:test, clusters, *, allowed-project/*, allow`)",
          "149:  enf.SetDefaultRole(\"role:test\")",
          "150:  server := NewServer(db, enf, newServerInMemoryCache(), &kubetest.MockKubectlCmd{})",
          "152:  for _, c := range testCases {",
          "153:   cc := c",
          "154:   t.Run(cc.name, func(t *testing.T) {",
          "155:    t.Parallel()",
          "156:    out, err := server.Update(context.Background(), &cc.request)",
          "157:    require.Nil(t, out)",
          "158:    assert.ErrorIs(t, err, common.PermissionDeniedAPIError)",
          "159:   })",
          "160:  }",
          "161: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}