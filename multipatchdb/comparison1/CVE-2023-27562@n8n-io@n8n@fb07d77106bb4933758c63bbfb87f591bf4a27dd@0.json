{
  "cve_id": "CVE-2023-27562",
  "cve_desc": "The n8n package 0.218.0 for Node.js allows Directory Traversal.",
  "repo": "n8n-io/n8n",
  "patch_hash": "fb07d77106bb4933758c63bbfb87f591bf4a27dd",
  "patch_info": {
    "commit_hash": "fb07d77106bb4933758c63bbfb87f591bf4a27dd",
    "repo": "n8n-io/n8n",
    "commit_url": "https://github.com/n8n-io/n8n/commit/fb07d77106bb4933758c63bbfb87f591bf4a27dd",
    "files": [
      "packages/cli/src/Server.ts",
      "packages/cli/src/TranslationHelpers.ts",
      "packages/cli/src/controllers/index.ts",
      "packages/cli/src/controllers/translation.controller.ts",
      "packages/cli/test/setup-mocks.ts",
      "packages/cli/test/unit/controllers/translation.controller.test.ts"
    ],
    "message": "fix(core): Do not allow arbitrary path traversal in the credential-translation endpoint (#5522)",
    "before_after_code_files": [
      "packages/cli/src/Server.ts||packages/cli/src/Server.ts",
      "packages/cli/src/TranslationHelpers.ts||packages/cli/src/TranslationHelpers.ts",
      "packages/cli/src/controllers/index.ts||packages/cli/src/controllers/index.ts",
      "packages/cli/src/controllers/translation.controller.ts||packages/cli/src/controllers/translation.controller.ts",
      "packages/cli/test/setup-mocks.ts||packages/cli/test/setup-mocks.ts",
      "packages/cli/test/unit/controllers/translation.controller.test.ts||packages/cli/test/unit/controllers/translation.controller.test.ts"
    ]
  },
  "patch_diff": {
    "packages/cli/src/Server.ts||packages/cli/src/Server.ts": [
      "File: packages/cli/src/Server.ts -> packages/cli/src/Server.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "55: import config from '@/config';",
      "56: import * as Queue from '@/Queue';",
      "57: import { InternalHooksManager } from '@/InternalHooksManager';",
      "59: import { getSharedWorkflowIds } from '@/WorkflowHelpers';",
      "61: import { nodesController } from '@/api/nodes.api';",
      "",
      "[Removed Lines]",
      "58: import { getCredentialTranslationPath } from '@/TranslationHelpers';",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "86:  MeController,",
      "87:  OwnerController,",
      "88:  PasswordResetController,",
      "89:  UsersController,",
      "90: } from '@/controllers';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "88:  TranslationController,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "347:    new OwnerController({ config, internalHooks, repositories, logger }),",
      "348:    new MeController({ externalHooks, internalHooks, repositories, logger }),",
      "349:    new PasswordResetController({ config, externalHooks, internalHooks, repositories, logger }),",
      "350:    new UsersController({",
      "351:     config,",
      "352:     mailer,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "350:    new TranslationController(config, this.credentialTypes),",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "585:    ),",
      "586:   );",
      "",
      "[Removed Lines]",
      "588:   this.app.get(",
      "589:    `/${this.restEndpoint}/credential-translation`,",
      "590:    ResponseHelper.send(",
      "591:     async (",
      "592:      req: express.Request & { query: { credentialType: string } },",
      "593:      res: express.Response,",
      "594:     ): Promise<object | null> => {",
      "595:      const translationPath = getCredentialTranslationPath({",
      "596:       locale: this.frontendSettings.defaultLocale,",
      "597:       credentialType: req.query.credentialType,",
      "598:      });",
      "600:      try {",
      "601:       return require(translationPath);",
      "602:      } catch (error) {",
      "603:       return null;",
      "604:      }",
      "605:     },",
      "606:    ),",
      "607:   );",
      "610:   const headersPath = pathJoin(NODES_BASE_DIR, 'dist', 'nodes', 'headers');",
      "611:   this.app.get(",
      "612:    `/${this.restEndpoint}/node-translation-headers`,",
      "613:    ResponseHelper.send(",
      "614:     async (req: express.Request, res: express.Response): Promise<object | void> => {",
      "615:      try {",
      "616:       await fsAccess(`${headersPath}.js`);",
      "617:      } catch (_) {",
      "618:       return; // no headers available",
      "619:      }",
      "621:      try {",
      "622:       return require(headersPath);",
      "623:      } catch (error) {",
      "624:       res.status(500).send('Failed to load headers file');",
      "625:      }",
      "626:     },",
      "627:    ),",
      "628:   );",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "packages/cli/src/TranslationHelpers.ts||packages/cli/src/TranslationHelpers.ts": [
      "File: packages/cli/src/TranslationHelpers.ts -> packages/cli/src/TranslationHelpers.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import { join, dirname } from 'path';",
      "2: import { readdir } from 'fs/promises';",
      "3: import type { Dirent } from 'fs';",
      "6: const ALLOWED_VERSIONED_DIRNAME_LENGTH = [2, 3]; // e.g. v1, v10",
      "",
      "[Removed Lines]",
      "4: import { NODES_BASE_DIR } from '@/constants';",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:   ? join(nodeDir, `v${maxVersion}`, 'translations', locale, `${nodeType}.json`)",
      "48:   : join(nodeDir, 'translations', locale, `${nodeType}.json`);",
      "49: }",
      "",
      "[Removed Lines]",
      "54: export function getCredentialTranslationPath({",
      "55:  locale,",
      "56:  credentialType,",
      "57: }: {",
      "58:  locale: string;",
      "59:  credentialType: string;",
      "60: }): string {",
      "61:  const credsPath = join(NODES_BASE_DIR, 'dist', 'credentials');",
      "63:  return join(credsPath, 'translations', locale, `${credentialType}.json`);",
      "64: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "packages/cli/src/controllers/index.ts||packages/cli/src/controllers/index.ts": [
      "File: packages/cli/src/controllers/index.ts -> packages/cli/src/controllers/index.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: export { MeController } from './me.controller';",
      "3: export { OwnerController } from './owner.controller';",
      "4: export { PasswordResetController } from './passwordReset.controller';",
      "5: export { UsersController } from './users.controller';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: export { TranslationController } from './translation.controller';",
      "",
      "---------------"
    ],
    "packages/cli/src/controllers/translation.controller.ts||packages/cli/src/controllers/translation.controller.ts": [
      "File: packages/cli/src/controllers/translation.controller.ts -> packages/cli/src/controllers/translation.controller.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import type { Request } from 'express';",
      "2: import { ICredentialTypes } from 'n8n-workflow';",
      "3: import { join } from 'path';",
      "4: import { access } from 'fs/promises';",
      "5: import { Get, RestController } from '@/decorators';",
      "6: import { BadRequestError, InternalServerError } from '@/ResponseHelper';",
      "7: import { Config } from '@/config';",
      "8: import { NODES_BASE_DIR } from '@/constants';",
      "10: export const CREDENTIAL_TRANSLATIONS_DIR = 'n8n-nodes-base/dist/credentials/translations';",
      "11: export const NODE_HEADERS_PATH = join(NODES_BASE_DIR, 'dist/nodes/headers');",
      "13: export declare namespace TranslationRequest {",
      "14:  export type Credential = Request<{}, {}, {}, { credentialType: string }>;",
      "15: }",
      "17: @RestController('/')",
      "18: export class TranslationController {",
      "19:  constructor(private config: Config, private credentialTypes: ICredentialTypes) {}",
      "21:  @Get('/credential-translation')",
      "22:  async getCredentialTranslation(req: TranslationRequest.Credential) {",
      "23:   const { credentialType } = req.query;",
      "25:   if (!this.credentialTypes.recognizes(credentialType))",
      "26:    throw new BadRequestError(`Invalid Credential type: \"${credentialType}\"`);",
      "28:   const defaultLocale = this.config.getEnv('defaultLocale');",
      "29:   const translationPath = join(",
      "30:    CREDENTIAL_TRANSLATIONS_DIR,",
      "31:    defaultLocale,",
      "32:    `${credentialType}.json`,",
      "33:   );",
      "35:   try {",
      "37:    return require(translationPath);",
      "38:   } catch (error) {",
      "39:    return null;",
      "40:   }",
      "41:  }",
      "43:  @Get('/node-translation-headers')",
      "44:  async getNodeTranslationHeaders() {",
      "45:   try {",
      "46:    await access(`${NODE_HEADERS_PATH}.js`);",
      "47:   } catch (_) {",
      "48:    return; // no headers available",
      "49:   }",
      "51:   try {",
      "53:    return require(NODE_HEADERS_PATH);",
      "54:   } catch (error) {",
      "55:    throw new InternalServerError('Failed to load headers file');",
      "56:   }",
      "57:  }",
      "58: }",
      "",
      "---------------"
    ],
    "packages/cli/test/setup-mocks.ts||packages/cli/test/setup-mocks.ts": [
      "File: packages/cli/test/setup-mocks.ts -> packages/cli/test/setup-mocks.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: jest.mock('@sentry/node');",
      "2: jest.mock('@n8n_io/license-sdk');",
      "3: jest.mock('@/telemetry');",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import 'reflect-metadata';",
      "",
      "---------------"
    ],
    "packages/cli/test/unit/controllers/translation.controller.test.ts||packages/cli/test/unit/controllers/translation.controller.test.ts": [
      "File: packages/cli/test/unit/controllers/translation.controller.test.ts -> packages/cli/test/unit/controllers/translation.controller.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import { mock } from 'jest-mock-extended';",
      "2: import type { ICredentialTypes } from 'n8n-workflow';",
      "3: import type { Config } from '@/config';",
      "4: import {",
      "5:  TranslationController,",
      "6:  TranslationRequest,",
      "7:  CREDENTIAL_TRANSLATIONS_DIR,",
      "8: } from '@/controllers/translation.controller';",
      "9: import { BadRequestError } from '@/ResponseHelper';",
      "11: describe('TranslationController', () => {",
      "12:  const config = mock<Config>();",
      "13:  const credentialTypes = mock<ICredentialTypes>();",
      "14:  const controller = new TranslationController(config, credentialTypes);",
      "16:  describe('getCredentialTranslation', () => {",
      "17:   it('should throw 400 on invalid credential types', async () => {",
      "18:    const credentialType = 'not-a-valid-credential-type';",
      "19:    const req = mock<TranslationRequest.Credential>({ query: { credentialType } });",
      "20:    credentialTypes.recognizes.calledWith(credentialType).mockReturnValue(false);",
      "22:    expect(controller.getCredentialTranslation(req)).rejects.toThrowError(",
      "23:     new BadRequestError(`Invalid Credential type: \"${credentialType}\"`),",
      "24:    );",
      "25:   });",
      "27:   it('should return translation json on valid credential types', async () => {",
      "28:    const credentialType = 'credential-type';",
      "29:    const req = mock<TranslationRequest.Credential>({ query: { credentialType } });",
      "30:    config.getEnv.calledWith('defaultLocale').mockReturnValue('de');",
      "31:    credentialTypes.recognizes.calledWith(credentialType).mockReturnValue(true);",
      "32:    const response = { translation: 'string' };",
      "33:    jest.mock(`${CREDENTIAL_TRANSLATIONS_DIR}/de/credential-type.json`, () => response, {",
      "34:     virtual: true,",
      "35:    });",
      "37:    expect(await controller.getCredentialTranslation(req)).toEqual(response);",
      "38:   });",
      "39:  });",
      "40: });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7400c35a48e60c784c36e4946ef6a7d91d73321e",
      "candidate_info": {
        "commit_hash": "7400c35a48e60c784c36e4946ef6a7d91d73321e",
        "repo": "n8n-io/n8n",
        "commit_url": "https://github.com/n8n-io/n8n/commit/7400c35a48e60c784c36e4946ef6a7d91d73321e",
        "files": [
          "CHANGELOG.md",
          "package.json",
          "packages/cli/package.json",
          "packages/cli/src/GenericHelpers.ts",
          "packages/cli/src/Server.ts",
          "packages/cli/src/TranslationHelpers.ts",
          "packages/cli/src/controllers/index.ts",
          "packages/cli/src/controllers/me.controller.ts",
          "packages/cli/src/controllers/translation.controller.ts",
          "packages/cli/src/databases/entities/User.ts",
          "packages/cli/src/middlewares/auth.ts",
          "packages/cli/src/requests.ts",
          "packages/cli/test/setup-mocks.ts",
          "packages/cli/test/unit/controllers/me.controller.test.ts",
          "packages/cli/test/unit/controllers/translation.controller.test.ts",
          "packages/core/package.json",
          "packages/core/src/BinaryDataManager/FileSystem.ts",
          "packages/core/src/errors.ts",
          "packages/core/src/index.ts",
          "packages/editor-ui/package.json",
          "packages/node-dev/package.json",
          "packages/nodes-base/package.json",
          "packages/workflow/package.json",
          "pnpm-lock.yaml"
        ],
        "message": ":rocket: Release 0.216.1 (#5531)\n\n* :rocket: Release 0.216.1\n\n* fix(core): Do not allow arbitrary path traversal in the credential-translation endpoint (#5522)\n\n* fix(core): Do not allow arbitrary path traversal in BinaryDataManager (#5523)\n\n* fix(core): User update endpoint should only allow updating email, firstName, and lastName (#5526)\n\n* fix(core): Do not explicitly bypass auth on urls containing `.svg` (#5525)\n\n* :books: Update CHANGELOG.md\n\n---------\n\nCo-authored-by: janober <janober@users.noreply.github.com>\nCo-authored-by: \u0915\u093e\u0930\u0924\u094b\u092b\u094d\u092b\u0947\u0932\u0938\u094d\u0915\u094d\u0930\u093f\u092a\u094d\u091f\u2122 <netroy@users.noreply.github.com>\nCo-authored-by: Jan Oberhauser <jan.oberhauser@gmail.com>",
        "before_after_code_files": [
          "packages/cli/src/GenericHelpers.ts||packages/cli/src/GenericHelpers.ts",
          "packages/cli/src/Server.ts||packages/cli/src/Server.ts",
          "packages/cli/src/TranslationHelpers.ts||packages/cli/src/TranslationHelpers.ts",
          "packages/cli/src/controllers/index.ts||packages/cli/src/controllers/index.ts",
          "packages/cli/src/controllers/me.controller.ts||packages/cli/src/controllers/me.controller.ts",
          "packages/cli/src/controllers/translation.controller.ts||packages/cli/src/controllers/translation.controller.ts",
          "packages/cli/src/databases/entities/User.ts||packages/cli/src/databases/entities/User.ts",
          "packages/cli/src/middlewares/auth.ts||packages/cli/src/middlewares/auth.ts",
          "packages/cli/src/requests.ts||packages/cli/src/requests.ts",
          "packages/cli/test/setup-mocks.ts||packages/cli/test/setup-mocks.ts",
          "packages/cli/test/unit/controllers/me.controller.test.ts||packages/cli/test/unit/controllers/me.controller.test.ts",
          "packages/cli/test/unit/controllers/translation.controller.test.ts||packages/cli/test/unit/controllers/translation.controller.test.ts",
          "packages/core/src/BinaryDataManager/FileSystem.ts||packages/core/src/BinaryDataManager/FileSystem.ts",
          "packages/core/src/errors.ts||packages/core/src/errors.ts",
          "packages/core/src/index.ts||packages/core/src/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/n8n-io/n8n/pull/5531"
        ],
        "olp_code_files": {
          "patch": [
            "packages/cli/src/Server.ts||packages/cli/src/Server.ts",
            "packages/cli/src/TranslationHelpers.ts||packages/cli/src/TranslationHelpers.ts",
            "packages/cli/src/controllers/index.ts||packages/cli/src/controllers/index.ts",
            "packages/cli/src/controllers/translation.controller.ts||packages/cli/src/controllers/translation.controller.ts",
            "packages/cli/test/setup-mocks.ts||packages/cli/test/setup-mocks.ts",
            "packages/cli/test/unit/controllers/translation.controller.test.ts||packages/cli/test/unit/controllers/translation.controller.test.ts"
          ],
          "candidate": [
            "packages/cli/src/Server.ts||packages/cli/src/Server.ts",
            "packages/cli/src/TranslationHelpers.ts||packages/cli/src/TranslationHelpers.ts",
            "packages/cli/src/controllers/index.ts||packages/cli/src/controllers/index.ts",
            "packages/cli/src/controllers/translation.controller.ts||packages/cli/src/controllers/translation.controller.ts",
            "packages/cli/test/setup-mocks.ts||packages/cli/test/setup-mocks.ts",
            "packages/cli/test/unit/controllers/translation.controller.test.ts||packages/cli/test/unit/controllers/translation.controller.test.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/cli/src/GenericHelpers.ts||packages/cli/src/GenericHelpers.ts": [
          "File: packages/cli/src/GenericHelpers.ts -> packages/cli/src/GenericHelpers.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import type { CredentialsEntity } from '@db/entities/CredentialsEntity';",
          "23: import type { TagEntity } from '@db/entities/TagEntity';",
          "24: import type { User } from '@db/entities/User';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import type { UserUpdatePayload } from '@/requests';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99: }",
          "101: export async function validateEntity(",
          "103: ): Promise<void> {",
          "104:  const errors = await validate(entity);",
          "",
          "[Removed Lines]",
          "102:  entity: WorkflowEntity | CredentialsEntity | TagEntity | User,",
          "",
          "[Added Lines]",
          "103:  entity: WorkflowEntity | CredentialsEntity | TagEntity | User | UserUpdatePayload,",
          "",
          "---------------"
        ],
        "packages/cli/src/Server.ts||packages/cli/src/Server.ts": [
          "File: packages/cli/src/Server.ts -> packages/cli/src/Server.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:  LoadNodeParameterOptions,",
          "34:  LoadNodeListSearch,",
          "35:  UserSettings,",
          "36: } from 'n8n-core';",
          "38: import type {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:  FileNotFoundError,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: import config from '@/config';",
          "56: import * as Queue from '@/Queue';",
          "57: import { InternalHooksManager } from '@/InternalHooksManager';",
          "59: import { getSharedWorkflowIds } from '@/WorkflowHelpers';",
          "61: import { nodesController } from '@/api/nodes.api';",
          "",
          "[Removed Lines]",
          "58: import { getCredentialTranslationPath } from '@/TranslationHelpers';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:  MeController,",
          "87:  OwnerController,",
          "88:  PasswordResetController,",
          "89:  UsersController,",
          "90: } from '@/controllers';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:  TranslationController,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "347:    new OwnerController({ config, internalHooks, repositories, logger }),",
          "348:    new MeController({ externalHooks, internalHooks, repositories, logger }),",
          "349:    new PasswordResetController({ config, externalHooks, internalHooks, repositories, logger }),",
          "350:    new UsersController({",
          "351:     config,",
          "352:     mailer,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:    new TranslationController(config, this.credentialTypes),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "585:    ),",
          "586:   );",
          "",
          "[Removed Lines]",
          "588:   this.app.get(",
          "589:    `/${this.restEndpoint}/credential-translation`,",
          "590:    ResponseHelper.send(",
          "591:     async (",
          "592:      req: express.Request & { query: { credentialType: string } },",
          "593:      res: express.Response,",
          "594:     ): Promise<object | null> => {",
          "595:      const translationPath = getCredentialTranslationPath({",
          "596:       locale: this.frontendSettings.defaultLocale,",
          "597:       credentialType: req.query.credentialType,",
          "598:      });",
          "600:      try {",
          "601:       return require(translationPath);",
          "602:      } catch (error) {",
          "603:       return null;",
          "604:      }",
          "605:     },",
          "606:    ),",
          "607:   );",
          "610:   const headersPath = pathJoin(NODES_BASE_DIR, 'dist', 'nodes', 'headers');",
          "611:   this.app.get(",
          "612:    `/${this.restEndpoint}/node-translation-headers`,",
          "613:    ResponseHelper.send(",
          "614:     async (req: express.Request, res: express.Response): Promise<object | void> => {",
          "615:      try {",
          "616:       await fsAccess(`${headersPath}.js`);",
          "617:      } catch (_) {",
          "618:       return; // no headers available",
          "619:      }",
          "621:      try {",
          "622:       return require(headersPath);",
          "623:      } catch (error) {",
          "624:       res.status(500).send('Failed to load headers file');",
          "625:      }",
          "626:     },",
          "627:    ),",
          "628:   );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1161:     const identifier = req.params.path;",
          "1162:     const binaryDataManager = BinaryDataManager.getInstance();",
          "1176:     }",
          "1178:    },",
          "1179:   );",
          "",
          "[Removed Lines]",
          "1163:     const binaryPath = binaryDataManager.getBinaryPath(identifier);",
          "1164:     let { mode, fileName, mimeType } = req.query;",
          "1165:     if (!fileName || !mimeType) {",
          "1166:      try {",
          "1167:       const metadata = await binaryDataManager.getBinaryMetadata(identifier);",
          "1168:       fileName = metadata.fileName;",
          "1169:       mimeType = metadata.mimeType;",
          "1170:       res.setHeader('Content-Length', metadata.fileSize);",
          "1171:      } catch {}",
          "1172:     }",
          "1173:     if (mimeType) res.setHeader('Content-Type', mimeType);",
          "1174:     if (mode === 'download') {",
          "1175:      res.setHeader('Content-Disposition', `attachment; filename=\"${fileName}\"`);",
          "1177:     res.sendFile(binaryPath);",
          "",
          "[Added Lines]",
          "1123:     try {",
          "1124:      const binaryPath = binaryDataManager.getBinaryPath(identifier);",
          "1125:      let { mode, fileName, mimeType } = req.query;",
          "1126:      if (!fileName || !mimeType) {",
          "1127:       try {",
          "1128:        const metadata = await binaryDataManager.getBinaryMetadata(identifier);",
          "1129:        fileName = metadata.fileName;",
          "1130:        mimeType = metadata.mimeType;",
          "1131:        res.setHeader('Content-Length', metadata.fileSize);",
          "1132:       } catch {}",
          "1133:      }",
          "1134:      if (mimeType) res.setHeader('Content-Type', mimeType);",
          "1135:      if (mode === 'download') {",
          "1136:       res.setHeader('Content-Disposition', `attachment; filename=\"${fileName}\"`);",
          "1137:      }",
          "1138:      res.sendFile(binaryPath);",
          "1139:     } catch (error) {",
          "1140:      if (error instanceof FileNotFoundError) res.writeHead(404).end();",
          "1141:      else throw error;",
          "",
          "---------------"
        ],
        "packages/cli/src/TranslationHelpers.ts||packages/cli/src/TranslationHelpers.ts": [
          "File: packages/cli/src/TranslationHelpers.ts -> packages/cli/src/TranslationHelpers.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { join, dirname } from 'path';",
          "2: import { readdir } from 'fs/promises';",
          "3: import type { Dirent } from 'fs';",
          "6: const ALLOWED_VERSIONED_DIRNAME_LENGTH = [2, 3]; // e.g. v1, v10",
          "",
          "[Removed Lines]",
          "4: import { NODES_BASE_DIR } from '@/constants';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:   ? join(nodeDir, `v${maxVersion}`, 'translations', locale, `${nodeType}.json`)",
          "48:   : join(nodeDir, 'translations', locale, `${nodeType}.json`);",
          "49: }",
          "",
          "[Removed Lines]",
          "54: export function getCredentialTranslationPath({",
          "55:  locale,",
          "56:  credentialType,",
          "57: }: {",
          "58:  locale: string;",
          "59:  credentialType: string;",
          "60: }): string {",
          "61:  const credsPath = join(NODES_BASE_DIR, 'dist', 'credentials');",
          "63:  return join(credsPath, 'translations', locale, `${credentialType}.json`);",
          "64: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/cli/src/controllers/index.ts||packages/cli/src/controllers/index.ts": [
          "File: packages/cli/src/controllers/index.ts -> packages/cli/src/controllers/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: export { MeController } from './me.controller';",
          "3: export { OwnerController } from './owner.controller';",
          "4: export { PasswordResetController } from './passwordReset.controller';",
          "5: export { UsersController } from './users.controller';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: export { TranslationController } from './translation.controller';",
          "",
          "---------------"
        ],
        "packages/cli/src/controllers/me.controller.ts||packages/cli/src/controllers/me.controller.ts": [
          "File: packages/cli/src/controllers/me.controller.ts -> packages/cli/src/controllers/me.controller.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import validator from 'validator';",
          "2: import { Delete, Get, Patch, Post, RestController } from '@/decorators';",
          "3: import {",
          "4:  compareHash,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: import { plainToInstance } from 'class-transformer';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7:  validatePassword,",
          "8: } from '@/UserManagement/UserManagementHelper';",
          "9: import { BadRequestError } from '@/ResponseHelper';",
          "11: import { validateEntity } from '@/GenericHelpers';",
          "12: import { issueCookie } from '@/auth/jwt';",
          "13: import { Response } from 'express';",
          "14: import type { Repository } from 'typeorm';",
          "15: import type { ILogger } from 'n8n-workflow';",
          "17: import type {",
          "18:  PublicUser,",
          "19:  IDatabaseCollections,",
          "",
          "[Removed Lines]",
          "10: import { User } from '@db/entities/User';",
          "16: import { AuthenticatedRequest, MeRequest } from '@/requests';",
          "",
          "[Added Lines]",
          "11: import type { User } from '@db/entities/User';",
          "17: import { AuthenticatedRequest, MeRequest, UserUpdatePayload } from '@/requests';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:  @Patch('/')",
          "66:   if (!email) {",
          "67:    this.logger.debug('Request to update user email failed because of missing email in payload', {",
          "70:    });",
          "71:    throw new BadRequestError('Email is mandatory');",
          "72:   }",
          "74:   if (!validator.isEmail(email)) {",
          "75:    this.logger.debug('Request to update user email failed because of invalid email in payload', {",
          "77:     invalidEmail: email,",
          "78:    });",
          "79:    throw new BadRequestError('Invalid email address');",
          "80:   }",
          "93:   await issueCookie(res, user);",
          "96:   void this.internalHooks.onUserUpdate({",
          "97:    user,",
          "98:    fields_changed: updatedKeys,",
          "",
          "[Removed Lines]",
          "64:  async updateCurrentUser(req: MeRequest.Settings, res: Response): Promise<PublicUser> {",
          "65:   const { email } = req.body;",
          "68:     userId: req.user.id,",
          "69:     payload: req.body,",
          "76:     userId: req.user.id,",
          "82:   const { email: currentEmail } = req.user;",
          "83:   const newUser = new User();",
          "85:   Object.assign(newUser, req.user, req.body);",
          "87:   await validateEntity(newUser);",
          "89:   const user = await this.userRepository.save(newUser);",
          "91:   this.logger.info('User updated successfully', { userId: user.id });",
          "95:   const updatedKeys = Object.keys(req.body);",
          "",
          "[Added Lines]",
          "65:  async updateCurrentUser(req: MeRequest.UserUpdate, res: Response): Promise<PublicUser> {",
          "66:   const { id: userId, email: currentEmail } = req.user;",
          "67:   const payload = plainToInstance(UserUpdatePayload, req.body);",
          "69:   const { email } = payload;",
          "72:     userId,",
          "73:     payload,",
          "80:     userId,",
          "86:   await validateEntity(payload);",
          "88:   await this.userRepository.update(userId, payload);",
          "89:   const user = await this.userRepository.findOneOrFail({",
          "90:    where: { id: userId },",
          "91:    relations: { globalRole: true },",
          "92:   });",
          "94:   this.logger.info('User updated successfully', { userId });",
          "98:   const updatedKeys = Object.keys(payload);",
          "",
          "---------------"
        ],
        "packages/cli/src/controllers/translation.controller.ts||packages/cli/src/controllers/translation.controller.ts": [
          "File: packages/cli/src/controllers/translation.controller.ts -> packages/cli/src/controllers/translation.controller.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import type { Request } from 'express';",
          "2: import { ICredentialTypes } from 'n8n-workflow';",
          "3: import { join } from 'path';",
          "4: import { access } from 'fs/promises';",
          "5: import { Get, RestController } from '@/decorators';",
          "6: import { BadRequestError, InternalServerError } from '@/ResponseHelper';",
          "7: import { Config } from '@/config';",
          "8: import { NODES_BASE_DIR } from '@/constants';",
          "10: export const CREDENTIAL_TRANSLATIONS_DIR = 'n8n-nodes-base/dist/credentials/translations';",
          "11: export const NODE_HEADERS_PATH = join(NODES_BASE_DIR, 'dist/nodes/headers');",
          "13: export declare namespace TranslationRequest {",
          "14:  export type Credential = Request<{}, {}, {}, { credentialType: string }>;",
          "15: }",
          "17: @RestController('/')",
          "18: export class TranslationController {",
          "19:  constructor(private config: Config, private credentialTypes: ICredentialTypes) {}",
          "21:  @Get('/credential-translation')",
          "22:  async getCredentialTranslation(req: TranslationRequest.Credential) {",
          "23:   const { credentialType } = req.query;",
          "25:   if (!this.credentialTypes.recognizes(credentialType))",
          "26:    throw new BadRequestError(`Invalid Credential type: \"${credentialType}\"`);",
          "28:   const defaultLocale = this.config.getEnv('defaultLocale');",
          "29:   const translationPath = join(",
          "30:    CREDENTIAL_TRANSLATIONS_DIR,",
          "31:    defaultLocale,",
          "32:    `${credentialType}.json`,",
          "33:   );",
          "35:   try {",
          "37:    return require(translationPath);",
          "38:   } catch (error) {",
          "39:    return null;",
          "40:   }",
          "41:  }",
          "43:  @Get('/node-translation-headers')",
          "44:  async getNodeTranslationHeaders() {",
          "45:   try {",
          "46:    await access(`${NODE_HEADERS_PATH}.js`);",
          "47:   } catch (_) {",
          "48:    return; // no headers available",
          "49:   }",
          "51:   try {",
          "53:    return require(NODE_HEADERS_PATH);",
          "54:   } catch (error) {",
          "55:    throw new InternalServerError('Failed to load headers file');",
          "56:   }",
          "57:  }",
          "58: }",
          "",
          "---------------"
        ],
        "packages/cli/src/databases/entities/User.ts||packages/cli/src/databases/entities/User.ts": [
          "File: packages/cli/src/databases/entities/User.ts -> packages/cli/src/databases/entities/User.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:  @AfterLoad()",
          "112:  @AfterUpdate()",
          "113:  computeIsPending(): void {",
          "115:  }",
          "116: }",
          "",
          "[Removed Lines]",
          "114:   this.isPending = this.password === null;",
          "",
          "[Added Lines]",
          "114:   this.isPending =",
          "115:    this.globalRole?.name === 'owner' && this.globalRole.scope === 'global'",
          "116:     ? false",
          "117:     : this.password === null;",
          "",
          "---------------"
        ],
        "packages/cli/src/middlewares/auth.ts||packages/cli/src/middlewares/auth.ts": [
          "File: packages/cli/src/middlewares/auth.ts -> packages/cli/src/middlewares/auth.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import cookieParser from 'cookie-parser';",
          "4: import passport from 'passport';",
          "5: import { Strategy } from 'passport-jwt';",
          "6: import { LoggerProxy as Logger } from 'n8n-workflow';",
          "7: import type { JwtPayload } from '@/Interfaces';",
          "8: import type { AuthenticatedRequest } from '@/requests';",
          "9: import config from '@/config';",
          "11: import { issueCookie, resolveJwtContent } from '@/auth/jwt';",
          "12: import {",
          "13:  isAuthenticatedRequest,",
          "",
          "[Removed Lines]",
          "10: import { AUTH_COOKIE_NAME } from '@/constants';",
          "",
          "[Added Lines]",
          "6: import { sync as globSync } from 'fast-glob';",
          "11: import { AUTH_COOKIE_NAME, EDITOR_UI_DIST_DIR } from '@/constants';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: const passportMiddleware = passport.authenticate('jwt', { session: false }) as RequestHandler;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: const staticAssets = globSync(['**/*.html', '**/*.svg', '**/*.png', '**/*.ico'], {",
          "66:  cwd: EDITOR_UI_DIST_DIR,",
          "67: });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:    req.method === 'OPTIONS' ||",
          "88:    req.url.startsWith(`/${restEndpoint}/settings`) ||",
          "89:    req.url.startsWith(`/${restEndpoint}/login`) ||",
          "90:    req.url.startsWith(`/${restEndpoint}/logout`) ||",
          "",
          "[Removed Lines]",
          "82:    req.url === '/index.html' ||",
          "83:    req.url === '/favicon.ico' ||",
          "84:    req.url.startsWith('/css/') ||",
          "85:    req.url.startsWith('/js/') ||",
          "86:    req.url.startsWith('/fonts/') ||",
          "87:    req.url.includes('.svg') ||",
          "",
          "[Added Lines]",
          "87:    staticAssets.includes(req.url.slice(1)) ||",
          "",
          "---------------"
        ],
        "packages/cli/src/requests.ts||packages/cli/src/requests.ts": [
          "File: packages/cli/src/requests.ts -> packages/cli/src/requests.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:  IWorkflowSettings,",
          "11: } from 'n8n-workflow';",
          "13: import type { PublicUser, IExecutionDeleteFilter, IWorkflowDb } from '@/Interfaces';",
          "14: import type { Role } from '@db/entities/Role';",
          "15: import type { User } from '@db/entities/User';",
          "16: import type * as UserManagementMailer from '@/UserManagement/email/UserManagementMailer';",
          "18: export type AuthlessRequest<",
          "19:  RouteParams = {},",
          "20:  ResponseBody = {},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: import { IsEmail, IsString, Length } from 'class-validator';",
          "14: import { NoXss } from '@db/utils/customValidators';",
          "20: export class UserUpdatePayload implements Pick<User, 'email' | 'firstName' | 'lastName'> {",
          "21:  @IsEmail()",
          "22:  email: string;",
          "24:  @NoXss()",
          "25:  @IsString({ message: 'First name must be of type string.' })",
          "26:  @Length(1, 32, { message: 'First name must be $constraint1 to $constraint2 characters long.' })",
          "27:  firstName: string;",
          "29:  @NoXss()",
          "30:  @IsString({ message: 'Last name must be of type string.' })",
          "31:  @Length(1, 32, { message: 'Last name must be $constraint1 to $constraint2 characters long.' })",
          "32:  lastName: string;",
          "33: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146: export declare namespace MeRequest {",
          "152:  export type Password = AuthenticatedRequest<",
          "153:   {},",
          "154:   {},",
          "",
          "[Removed Lines]",
          "147:  export type Settings = AuthenticatedRequest<",
          "148:   {},",
          "149:   {},",
          "150:   Pick<PublicUser, 'email' | 'firstName' | 'lastName'>",
          "151:  >;",
          "",
          "[Added Lines]",
          "164:  export type UserUpdate = AuthenticatedRequest<{}, {}, UserUpdatePayload>;",
          "",
          "---------------"
        ],
        "packages/cli/test/setup-mocks.ts||packages/cli/test/setup-mocks.ts": [
          "File: packages/cli/test/setup-mocks.ts -> packages/cli/test/setup-mocks.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: jest.mock('@sentry/node');",
          "2: jest.mock('@n8n_io/license-sdk');",
          "3: jest.mock('@/telemetry');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import 'reflect-metadata';",
          "",
          "---------------"
        ],
        "packages/cli/test/unit/controllers/me.controller.test.ts||packages/cli/test/unit/controllers/me.controller.test.ts": [
          "File: packages/cli/test/unit/controllers/me.controller.test.ts -> packages/cli/test/unit/controllers/me.controller.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:  describe('updateCurrentUser', () => {",
          "30:   it('should throw BadRequestError if email is missing in the payload', async () => {",
          "32:    expect(controller.updateCurrentUser(req, mock())).rejects.toThrowError(",
          "33:     new BadRequestError('Email is mandatory'),",
          "34:    );",
          "35:   });",
          "37:   it('should throw BadRequestError if email is invalid', async () => {",
          "39:    expect(controller.updateCurrentUser(req, mock())).rejects.toThrowError(",
          "40:     new BadRequestError('Invalid email address'),",
          "41:    );",
          "42:   });",
          "44:   it('should update the user in the DB, and issue a new cookie', async () => {",
          "48:    });",
          "49:    const res = mock<Response>();",
          "51:    jest.spyOn(jwt, 'sign').mockImplementation(() => 'signed-token');",
          "53:    await controller.updateCurrentUser(req, res);",
          "55:    const cookieOptions = captor<CookieOptions>();",
          "56:    expect(res.cookie).toHaveBeenCalledWith(AUTH_COOKIE_NAME, 'signed-token', cookieOptions);",
          "57:    expect(cookieOptions.value.httpOnly).toBe(true);",
          "58:    expect(cookieOptions.value.sameSite).toBe('lax');",
          "60:    expect(externalHooks.run).toHaveBeenCalledWith('user.profile.update', [",
          "62:     anyObject(),",
          "63:    ]);",
          "64:   });",
          "65:  });",
          "67:  describe('updatePassword', () => {",
          "",
          "[Removed Lines]",
          "31:    const req = mock<MeRequest.Settings>({});",
          "38:    const req = mock<MeRequest.Settings>({ body: { email: 'invalid-email' } });",
          "45:    const req = mock<MeRequest.Settings>({",
          "46:     user: mock({ id: '123', password: 'password', authIdentities: [] }),",
          "47:     body: { email: 'valid@email.com', firstName: 'John', lastName: 'Potato' },",
          "50:    userRepository.save.calledWith(anyObject()).mockResolvedValue(req.user);",
          "61:     req.user.email,",
          "",
          "[Added Lines]",
          "31:    const req = mock<MeRequest.UserUpdate>({});",
          "38:    const req = mock<MeRequest.UserUpdate>({ body: { email: 'invalid-email' } });",
          "45:    const user = mock<User>({",
          "46:     id: '123',",
          "47:     password: 'password',",
          "48:     authIdentities: [],",
          "49:     globalRoleId: '1',",
          "51:    const reqBody = { email: 'valid@email.com', firstName: 'John', lastName: 'Potato' };",
          "52:    const req = mock<MeRequest.UserUpdate>({ user, body: reqBody });",
          "54:    userRepository.findOneOrFail.mockResolvedValue(user);",
          "59:    expect(userRepository.update).toHaveBeenCalled();",
          "67:     user.email,",
          "72:   it('should not allow updating any other fields on a user besides email and name', async () => {",
          "73:    const user = mock<User>({",
          "74:     id: '123',",
          "75:     password: 'password',",
          "76:     authIdentities: [],",
          "77:     globalRoleId: '1',",
          "78:    });",
          "79:    const reqBody = { email: 'valid@email.com', firstName: 'John', lastName: 'Potato' };",
          "80:    const req = mock<MeRequest.UserUpdate>({ user, body: reqBody });",
          "81:    const res = mock<Response>();",
          "82:    userRepository.findOneOrFail.mockResolvedValue(user);",
          "83:    jest.spyOn(jwt, 'sign').mockImplementation(() => 'signed-token');",
          "86:    Object.assign(reqBody, { id: '0', globalRoleId: '42' });",
          "88:    await controller.updateCurrentUser(req, res);",
          "90:    expect(userRepository.update).toHaveBeenCalled();",
          "92:    const updatedUser = userRepository.update.mock.calls[0][1];",
          "93:    expect(updatedUser.email).toBe(reqBody.email);",
          "94:    expect(updatedUser.firstName).toBe(reqBody.firstName);",
          "95:    expect(updatedUser.lastName).toBe(reqBody.lastName);",
          "96:    expect(updatedUser.id).not.toBe('0');",
          "97:    expect(updatedUser.globalRoleId).not.toBe('42');",
          "98:   });",
          "",
          "---------------"
        ],
        "packages/cli/test/unit/controllers/translation.controller.test.ts||packages/cli/test/unit/controllers/translation.controller.test.ts": [
          "File: packages/cli/test/unit/controllers/translation.controller.test.ts -> packages/cli/test/unit/controllers/translation.controller.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { mock } from 'jest-mock-extended';",
          "2: import type { ICredentialTypes } from 'n8n-workflow';",
          "3: import type { Config } from '@/config';",
          "4: import {",
          "5:  TranslationController,",
          "6:  TranslationRequest,",
          "7:  CREDENTIAL_TRANSLATIONS_DIR,",
          "8: } from '@/controllers/translation.controller';",
          "9: import { BadRequestError } from '@/ResponseHelper';",
          "11: describe('TranslationController', () => {",
          "12:  const config = mock<Config>();",
          "13:  const credentialTypes = mock<ICredentialTypes>();",
          "14:  const controller = new TranslationController(config, credentialTypes);",
          "16:  describe('getCredentialTranslation', () => {",
          "17:   it('should throw 400 on invalid credential types', async () => {",
          "18:    const credentialType = 'not-a-valid-credential-type';",
          "19:    const req = mock<TranslationRequest.Credential>({ query: { credentialType } });",
          "20:    credentialTypes.recognizes.calledWith(credentialType).mockReturnValue(false);",
          "22:    expect(controller.getCredentialTranslation(req)).rejects.toThrowError(",
          "23:     new BadRequestError(`Invalid Credential type: \"${credentialType}\"`),",
          "24:    );",
          "25:   });",
          "27:   it('should return translation json on valid credential types', async () => {",
          "28:    const credentialType = 'credential-type';",
          "29:    const req = mock<TranslationRequest.Credential>({ query: { credentialType } });",
          "30:    config.getEnv.calledWith('defaultLocale').mockReturnValue('de');",
          "31:    credentialTypes.recognizes.calledWith(credentialType).mockReturnValue(true);",
          "32:    const response = { translation: 'string' };",
          "33:    jest.mock(`${CREDENTIAL_TRANSLATIONS_DIR}/de/credential-type.json`, () => response, {",
          "34:     virtual: true,",
          "35:    });",
          "37:    expect(await controller.getCredentialTranslation(req)).toEqual(response);",
          "38:   });",
          "39:  });",
          "40: });",
          "",
          "---------------"
        ],
        "packages/core/src/BinaryDataManager/FileSystem.ts||packages/core/src/BinaryDataManager/FileSystem.ts": [
          "File: packages/core/src/BinaryDataManager/FileSystem.ts -> packages/core/src/BinaryDataManager/FileSystem.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import { jsonParse } from 'n8n-workflow';",
          "9: import type { IBinaryDataConfig, IBinaryDataManager } from '../Interfaces';",
          "11: const PREFIX_METAFILE = 'binarymeta';",
          "12: const PREFIX_PERSISTED_METAFILE = 'persistedmeta';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: import { FileNotFoundError } from '../errors';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:  }",
          "87:  getBinaryPath(identifier: string): string {",
          "89:  }",
          "91:  getMetadataPath(identifier: string): string {",
          "93:  }",
          "95:  async markDataForDeletionByExecutionId(executionId: string): Promise<void> {",
          "96:   const tt = new Date(new Date().getTime() + this.binaryDataTTL * 60000);",
          "97:   return fs.writeFile(",
          "99:    '',",
          "100:   );",
          "101:  }",
          "",
          "[Removed Lines]",
          "88:   return path.join(this.storagePath, identifier);",
          "92:   return path.join(this.storagePath, `${identifier}.metadata`);",
          "98:    path.join(this.getBinaryDataMetaPath(), `${PREFIX_METAFILE}_${executionId}_${tt.valueOf()}`),",
          "",
          "[Added Lines]",
          "89:   return this.resolveStoragePath(identifier);",
          "93:   return this.resolveStoragePath(`${identifier}.metadata`);",
          "99:    this.resolveStoragePath('meta', `${PREFIX_METAFILE}_${executionId}_${tt.valueOf()}`),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:   const timeAtNextHour = currentTime + 3600000 - (currentTime % 3600000);",
          "117:   const timeoutTime = timeAtNextHour + this.persistedBinaryDataTTL * 60000;",
          "121:    `${PREFIX_PERSISTED_METAFILE}_${executionId}_${timeoutTime}`,",
          "122:   );",
          "",
          "[Removed Lines]",
          "119:   const filePath = path.join(",
          "120:    this.getBinaryDataPersistMetaPath(),",
          "",
          "[Added Lines]",
          "120:   const filePath = this.resolveStoragePath(",
          "121:    'persistMeta',",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170:   const newBinaryDataId = this.generateFileName(prefix);",
          "172:   return fs",
          "177:    .then(() => newBinaryDataId);",
          "178:  }",
          "180:  async deleteBinaryDataByExecutionId(executionId: string): Promise<void> {",
          "181:   const regex = new RegExp(`${executionId}_*`);",
          "184:   const proms = filenames.reduce(",
          "185:    (allProms, filename) => {",
          "186:     if (regex.test(filename)) {",
          "188:     }",
          "190:     return allProms;",
          "",
          "[Removed Lines]",
          "173:    .copyFile(",
          "174:     path.join(this.storagePath, binaryDataId),",
          "175:     path.join(this.storagePath, newBinaryDataId),",
          "176:    )",
          "182:   const filenames = await fs.readdir(path.join(this.storagePath));",
          "187:      allProms.push(fs.rm(path.join(this.storagePath, filename)));",
          "",
          "[Added Lines]",
          "174:    .copyFile(this.resolveStoragePath(binaryDataId), this.resolveStoragePath(newBinaryDataId))",
          "180:   const filenames = await fs.readdir(this.storagePath);",
          "185:      allProms.push(fs.rm(this.resolveStoragePath(filename)));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "253:    throw new Error(`Error finding file: ${filePath}`);",
          "254:   }",
          "255:  }",
          "256: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255:  private resolveStoragePath(...args: string[]) {",
          "256:   const returnPath = path.join(this.storagePath, ...args);",
          "257:   if (path.relative(this.storagePath, returnPath).startsWith('..'))",
          "258:    throw new FileNotFoundError('Invalid path detected');",
          "259:   return returnPath;",
          "260:  }",
          "",
          "---------------"
        ],
        "packages/core/src/errors.ts||packages/core/src/errors.ts": [
          "File: packages/core/src/errors.ts -> packages/core/src/errors.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: export class FileNotFoundError extends Error {",
          "2:  constructor(readonly filePath: string) {",
          "3:   super(`File not found: ${filePath}`);",
          "4:  }",
          "5: }",
          "",
          "---------------"
        ],
        "packages/core/src/index.ts||packages/core/src/index.ts": [
          "File: packages/core/src/index.ts -> packages/core/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: export * from './NodeExecuteFunctions';",
          "16: export * from './WorkflowExecute';",
          "17: export { eventEmitter, NodeExecuteFunctions, UserSettings };",
          "19: declare module 'http' {",
          "20:  export interface IncomingMessage {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: export * from './errors';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "397e42d63e80577a0b897873a1d2f19533e27da7",
      "candidate_info": {
        "commit_hash": "397e42d63e80577a0b897873a1d2f19533e27da7",
        "repo": "n8n-io/n8n",
        "commit_url": "https://github.com/n8n-io/n8n/commit/397e42d63e80577a0b897873a1d2f19533e27da7",
        "files": [
          "packages/cli/src/Server.ts",
          "packages/cli/src/TranslationHelpers.ts",
          "packages/cli/src/controllers/index.ts",
          "packages/cli/src/controllers/translation.controller.ts",
          "packages/cli/test/setup-mocks.ts",
          "packages/cli/test/unit/controllers/translation.controller.test.ts"
        ],
        "message": "fix(core): Do not allow arbitrary path traversal in the credential-translation endpoint (#5522)",
        "before_after_code_files": [
          "packages/cli/src/Server.ts||packages/cli/src/Server.ts",
          "packages/cli/src/TranslationHelpers.ts||packages/cli/src/TranslationHelpers.ts",
          "packages/cli/src/controllers/index.ts||packages/cli/src/controllers/index.ts",
          "packages/cli/src/controllers/translation.controller.ts||packages/cli/src/controllers/translation.controller.ts",
          "packages/cli/test/setup-mocks.ts||packages/cli/test/setup-mocks.ts",
          "packages/cli/test/unit/controllers/translation.controller.test.ts||packages/cli/test/unit/controllers/translation.controller.test.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "packages/cli/src/Server.ts||packages/cli/src/Server.ts",
            "packages/cli/src/TranslationHelpers.ts||packages/cli/src/TranslationHelpers.ts",
            "packages/cli/src/controllers/index.ts||packages/cli/src/controllers/index.ts",
            "packages/cli/src/controllers/translation.controller.ts||packages/cli/src/controllers/translation.controller.ts",
            "packages/cli/test/setup-mocks.ts||packages/cli/test/setup-mocks.ts",
            "packages/cli/test/unit/controllers/translation.controller.test.ts||packages/cli/test/unit/controllers/translation.controller.test.ts"
          ],
          "candidate": [
            "packages/cli/src/Server.ts||packages/cli/src/Server.ts",
            "packages/cli/src/TranslationHelpers.ts||packages/cli/src/TranslationHelpers.ts",
            "packages/cli/src/controllers/index.ts||packages/cli/src/controllers/index.ts",
            "packages/cli/src/controllers/translation.controller.ts||packages/cli/src/controllers/translation.controller.ts",
            "packages/cli/test/setup-mocks.ts||packages/cli/test/setup-mocks.ts",
            "packages/cli/test/unit/controllers/translation.controller.test.ts||packages/cli/test/unit/controllers/translation.controller.test.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/cli/src/Server.ts||packages/cli/src/Server.ts": [
          "File: packages/cli/src/Server.ts -> packages/cli/src/Server.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: import config from '@/config';",
          "79: import * as Queue from '@/Queue';",
          "80: import { InternalHooksManager } from '@/InternalHooksManager';",
          "82: import { getSharedWorkflowIds } from '@/WorkflowHelpers';",
          "84: import { nodesController } from '@/api/nodes.api';",
          "",
          "[Removed Lines]",
          "81: import { getCredentialTranslationPath } from '@/TranslationHelpers';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:  MeController,",
          "110:  OwnerController,",
          "111:  PasswordResetController,",
          "112:  UsersController,",
          "113: } from '@/controllers';",
          "114: import { resolveJwt } from '@/auth/jwt';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:  TranslationController,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "359:    new OwnerController({ config, internalHooks, repositories, logger }),",
          "360:    new MeController({ externalHooks, internalHooks, repositories, logger }),",
          "361:    new PasswordResetController({ config, externalHooks, internalHooks, repositories, logger }),",
          "362:    new UsersController({",
          "363:     config,",
          "364:     mailer,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "362:    new TranslationController(config, this.credentialTypes),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "753:    ),",
          "754:   );",
          "",
          "[Removed Lines]",
          "756:   this.app.get(",
          "757:    `/${this.restEndpoint}/credential-translation`,",
          "758:    ResponseHelper.send(",
          "759:     async (",
          "760:      req: express.Request & { query: { credentialType: string } },",
          "761:      res: express.Response,",
          "762:     ): Promise<object | null> => {",
          "763:      const translationPath = getCredentialTranslationPath({",
          "764:       locale: this.frontendSettings.defaultLocale,",
          "765:       credentialType: req.query.credentialType,",
          "766:      });",
          "768:      try {",
          "769:       return require(translationPath);",
          "770:      } catch (error) {",
          "771:       return null;",
          "772:      }",
          "773:     },",
          "774:    ),",
          "775:   );",
          "778:   const headersPath = pathJoin(NODES_BASE_DIR, 'dist', 'nodes', 'headers');",
          "779:   this.app.get(",
          "780:    `/${this.restEndpoint}/node-translation-headers`,",
          "781:    ResponseHelper.send(",
          "782:     async (req: express.Request, res: express.Response): Promise<object | void> => {",
          "783:      try {",
          "784:       await fsAccess(`${headersPath}.js`);",
          "785:      } catch (_) {",
          "786:       return; // no headers available",
          "787:      }",
          "789:      try {",
          "790:       return require(headersPath);",
          "791:      } catch (error) {",
          "792:       res.status(500).send('Failed to load headers file');",
          "793:      }",
          "794:     },",
          "795:    ),",
          "796:   );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/cli/src/TranslationHelpers.ts||packages/cli/src/TranslationHelpers.ts": [
          "File: packages/cli/src/TranslationHelpers.ts -> packages/cli/src/TranslationHelpers.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { join, dirname } from 'path';",
          "2: import { readdir } from 'fs/promises';",
          "3: import type { Dirent } from 'fs';",
          "6: const ALLOWED_VERSIONED_DIRNAME_LENGTH = [2, 3]; // e.g. v1, v10",
          "",
          "[Removed Lines]",
          "4: import { NODES_BASE_DIR } from '@/constants';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:   ? join(nodeDir, `v${maxVersion}`, 'translations', locale, `${nodeType}.json`)",
          "48:   : join(nodeDir, 'translations', locale, `${nodeType}.json`);",
          "49: }",
          "",
          "[Removed Lines]",
          "54: export function getCredentialTranslationPath({",
          "55:  locale,",
          "56:  credentialType,",
          "57: }: {",
          "58:  locale: string;",
          "59:  credentialType: string;",
          "60: }): string {",
          "61:  const credsPath = join(NODES_BASE_DIR, 'dist', 'credentials');",
          "63:  return join(credsPath, 'translations', locale, `${credentialType}.json`);",
          "64: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/cli/src/controllers/index.ts||packages/cli/src/controllers/index.ts": [
          "File: packages/cli/src/controllers/index.ts -> packages/cli/src/controllers/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: export { MeController } from './me.controller';",
          "3: export { OwnerController } from './owner.controller';",
          "4: export { PasswordResetController } from './passwordReset.controller';",
          "5: export { UsersController } from './users.controller';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: export { TranslationController } from './translation.controller';",
          "",
          "---------------"
        ],
        "packages/cli/src/controllers/translation.controller.ts||packages/cli/src/controllers/translation.controller.ts": [
          "File: packages/cli/src/controllers/translation.controller.ts -> packages/cli/src/controllers/translation.controller.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import type { Request } from 'express';",
          "2: import { ICredentialTypes } from 'n8n-workflow';",
          "3: import { join } from 'path';",
          "4: import { access } from 'fs/promises';",
          "5: import { Get, RestController } from '@/decorators';",
          "6: import { BadRequestError, InternalServerError } from '@/ResponseHelper';",
          "7: import { Config } from '@/config';",
          "8: import { NODES_BASE_DIR } from '@/constants';",
          "10: export const CREDENTIAL_TRANSLATIONS_DIR = 'n8n-nodes-base/dist/credentials/translations';",
          "11: export const NODE_HEADERS_PATH = join(NODES_BASE_DIR, 'dist/nodes/headers');",
          "13: export declare namespace TranslationRequest {",
          "14:  export type Credential = Request<{}, {}, {}, { credentialType: string }>;",
          "15: }",
          "17: @RestController('/')",
          "18: export class TranslationController {",
          "19:  constructor(private config: Config, private credentialTypes: ICredentialTypes) {}",
          "21:  @Get('/credential-translation')",
          "22:  async getCredentialTranslation(req: TranslationRequest.Credential) {",
          "23:   const { credentialType } = req.query;",
          "25:   if (!this.credentialTypes.recognizes(credentialType))",
          "26:    throw new BadRequestError(`Invalid Credential type: \"${credentialType}\"`);",
          "28:   const defaultLocale = this.config.getEnv('defaultLocale');",
          "29:   const translationPath = join(",
          "30:    CREDENTIAL_TRANSLATIONS_DIR,",
          "31:    defaultLocale,",
          "32:    `${credentialType}.json`,",
          "33:   );",
          "35:   try {",
          "37:    return require(translationPath);",
          "38:   } catch (error) {",
          "39:    return null;",
          "40:   }",
          "41:  }",
          "43:  @Get('/node-translation-headers')",
          "44:  async getNodeTranslationHeaders() {",
          "45:   try {",
          "46:    await access(`${NODE_HEADERS_PATH}.js`);",
          "47:   } catch (_) {",
          "48:    return; // no headers available",
          "49:   }",
          "51:   try {",
          "53:    return require(NODE_HEADERS_PATH);",
          "54:   } catch (error) {",
          "55:    throw new InternalServerError('Failed to load headers file');",
          "56:   }",
          "57:  }",
          "58: }",
          "",
          "---------------"
        ],
        "packages/cli/test/setup-mocks.ts||packages/cli/test/setup-mocks.ts": [
          "File: packages/cli/test/setup-mocks.ts -> packages/cli/test/setup-mocks.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: jest.mock('@sentry/node');",
          "2: jest.mock('@n8n_io/license-sdk');",
          "3: jest.mock('@/telemetry');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import 'reflect-metadata';",
          "",
          "---------------"
        ],
        "packages/cli/test/unit/controllers/translation.controller.test.ts||packages/cli/test/unit/controllers/translation.controller.test.ts": [
          "File: packages/cli/test/unit/controllers/translation.controller.test.ts -> packages/cli/test/unit/controllers/translation.controller.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { mock } from 'jest-mock-extended';",
          "2: import type { ICredentialTypes } from 'n8n-workflow';",
          "3: import type { Config } from '@/config';",
          "4: import {",
          "5:  TranslationController,",
          "6:  TranslationRequest,",
          "7:  CREDENTIAL_TRANSLATIONS_DIR,",
          "8: } from '@/controllers/translation.controller';",
          "9: import { BadRequestError } from '@/ResponseHelper';",
          "11: describe('TranslationController', () => {",
          "12:  const config = mock<Config>();",
          "13:  const credentialTypes = mock<ICredentialTypes>();",
          "14:  const controller = new TranslationController(config, credentialTypes);",
          "16:  describe('getCredentialTranslation', () => {",
          "17:   it('should throw 400 on invalid credential types', async () => {",
          "18:    const credentialType = 'not-a-valid-credential-type';",
          "19:    const req = mock<TranslationRequest.Credential>({ query: { credentialType } });",
          "20:    credentialTypes.recognizes.calledWith(credentialType).mockReturnValue(false);",
          "22:    expect(controller.getCredentialTranslation(req)).rejects.toThrowError(",
          "23:     new BadRequestError(`Invalid Credential type: \"${credentialType}\"`),",
          "24:    );",
          "25:   });",
          "27:   it('should return translation json on valid credential types', async () => {",
          "28:    const credentialType = 'credential-type';",
          "29:    const req = mock<TranslationRequest.Credential>({ query: { credentialType } });",
          "30:    config.getEnv.calledWith('defaultLocale').mockReturnValue('de');",
          "31:    credentialTypes.recognizes.calledWith(credentialType).mockReturnValue(true);",
          "32:    const response = { translation: 'string' };",
          "33:    jest.mock(`${CREDENTIAL_TRANSLATIONS_DIR}/de/credential-type.json`, () => response, {",
          "34:     virtual: true,",
          "35:    });",
          "37:    expect(await controller.getCredentialTranslation(req)).toEqual(response);",
          "38:   });",
          "39:  });",
          "40: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "14d2a88120c966a6493c3a64a7a2925af0731b8f",
      "candidate_info": {
        "commit_hash": "14d2a88120c966a6493c3a64a7a2925af0731b8f",
        "repo": "n8n-io/n8n",
        "commit_url": "https://github.com/n8n-io/n8n/commit/14d2a88120c966a6493c3a64a7a2925af0731b8f",
        "files": [
          "packages/cli/src/Server.ts",
          "packages/cli/src/TranslationHelpers.ts",
          "packages/cli/src/controllers/index.ts",
          "packages/cli/src/controllers/translation.controller.ts",
          "packages/cli/test/setup-mocks.ts",
          "packages/cli/test/unit/controllers/translation.controller.test.ts"
        ],
        "message": "fix(core): Do not allow arbitrary path traversal in the credential-translation endpoint (#5522)",
        "before_after_code_files": [
          "packages/cli/src/Server.ts||packages/cli/src/Server.ts",
          "packages/cli/src/TranslationHelpers.ts||packages/cli/src/TranslationHelpers.ts",
          "packages/cli/src/controllers/index.ts||packages/cli/src/controllers/index.ts",
          "packages/cli/src/controllers/translation.controller.ts||packages/cli/src/controllers/translation.controller.ts",
          "packages/cli/test/setup-mocks.ts||packages/cli/test/setup-mocks.ts",
          "packages/cli/test/unit/controllers/translation.controller.test.ts||packages/cli/test/unit/controllers/translation.controller.test.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "packages/cli/src/Server.ts||packages/cli/src/Server.ts",
            "packages/cli/src/TranslationHelpers.ts||packages/cli/src/TranslationHelpers.ts",
            "packages/cli/src/controllers/index.ts||packages/cli/src/controllers/index.ts",
            "packages/cli/src/controllers/translation.controller.ts||packages/cli/src/controllers/translation.controller.ts",
            "packages/cli/test/setup-mocks.ts||packages/cli/test/setup-mocks.ts",
            "packages/cli/test/unit/controllers/translation.controller.test.ts||packages/cli/test/unit/controllers/translation.controller.test.ts"
          ],
          "candidate": [
            "packages/cli/src/Server.ts||packages/cli/src/Server.ts",
            "packages/cli/src/TranslationHelpers.ts||packages/cli/src/TranslationHelpers.ts",
            "packages/cli/src/controllers/index.ts||packages/cli/src/controllers/index.ts",
            "packages/cli/src/controllers/translation.controller.ts||packages/cli/src/controllers/translation.controller.ts",
            "packages/cli/test/setup-mocks.ts||packages/cli/test/setup-mocks.ts",
            "packages/cli/test/unit/controllers/translation.controller.test.ts||packages/cli/test/unit/controllers/translation.controller.test.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/cli/src/Server.ts||packages/cli/src/Server.ts": [
          "File: packages/cli/src/Server.ts -> packages/cli/src/Server.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: import config from '@/config';",
          "56: import * as Queue from '@/Queue';",
          "57: import { InternalHooksManager } from '@/InternalHooksManager';",
          "59: import { getSharedWorkflowIds } from '@/WorkflowHelpers';",
          "61: import { nodesController } from '@/api/nodes.api';",
          "",
          "[Removed Lines]",
          "58: import { getCredentialTranslationPath } from '@/TranslationHelpers';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:  MeController,",
          "87:  OwnerController,",
          "88:  PasswordResetController,",
          "89:  UsersController,",
          "90: } from '@/controllers';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:  TranslationController,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "347:    new OwnerController({ config, internalHooks, repositories, logger }),",
          "348:    new MeController({ externalHooks, internalHooks, repositories, logger }),",
          "349:    new PasswordResetController({ config, externalHooks, internalHooks, repositories, logger }),",
          "350:    new UsersController({",
          "351:     config,",
          "352:     mailer,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350:    new TranslationController(config, this.credentialTypes),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "585:    ),",
          "586:   );",
          "",
          "[Removed Lines]",
          "588:   this.app.get(",
          "589:    `/${this.restEndpoint}/credential-translation`,",
          "590:    ResponseHelper.send(",
          "591:     async (",
          "592:      req: express.Request & { query: { credentialType: string } },",
          "593:      res: express.Response,",
          "594:     ): Promise<object | null> => {",
          "595:      const translationPath = getCredentialTranslationPath({",
          "596:       locale: this.frontendSettings.defaultLocale,",
          "597:       credentialType: req.query.credentialType,",
          "598:      });",
          "600:      try {",
          "601:       return require(translationPath);",
          "602:      } catch (error) {",
          "603:       return null;",
          "604:      }",
          "605:     },",
          "606:    ),",
          "607:   );",
          "610:   const headersPath = pathJoin(NODES_BASE_DIR, 'dist', 'nodes', 'headers');",
          "611:   this.app.get(",
          "612:    `/${this.restEndpoint}/node-translation-headers`,",
          "613:    ResponseHelper.send(",
          "614:     async (req: express.Request, res: express.Response): Promise<object | void> => {",
          "615:      try {",
          "616:       await fsAccess(`${headersPath}.js`);",
          "617:      } catch (_) {",
          "618:       return; // no headers available",
          "619:      }",
          "621:      try {",
          "622:       return require(headersPath);",
          "623:      } catch (error) {",
          "624:       res.status(500).send('Failed to load headers file');",
          "625:      }",
          "626:     },",
          "627:    ),",
          "628:   );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/cli/src/TranslationHelpers.ts||packages/cli/src/TranslationHelpers.ts": [
          "File: packages/cli/src/TranslationHelpers.ts -> packages/cli/src/TranslationHelpers.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { join, dirname } from 'path';",
          "2: import { readdir } from 'fs/promises';",
          "3: import type { Dirent } from 'fs';",
          "6: const ALLOWED_VERSIONED_DIRNAME_LENGTH = [2, 3]; // e.g. v1, v10",
          "",
          "[Removed Lines]",
          "4: import { NODES_BASE_DIR } from '@/constants';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:   ? join(nodeDir, `v${maxVersion}`, 'translations', locale, `${nodeType}.json`)",
          "48:   : join(nodeDir, 'translations', locale, `${nodeType}.json`);",
          "49: }",
          "",
          "[Removed Lines]",
          "54: export function getCredentialTranslationPath({",
          "55:  locale,",
          "56:  credentialType,",
          "57: }: {",
          "58:  locale: string;",
          "59:  credentialType: string;",
          "60: }): string {",
          "61:  const credsPath = join(NODES_BASE_DIR, 'dist', 'credentials');",
          "63:  return join(credsPath, 'translations', locale, `${credentialType}.json`);",
          "64: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/cli/src/controllers/index.ts||packages/cli/src/controllers/index.ts": [
          "File: packages/cli/src/controllers/index.ts -> packages/cli/src/controllers/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: export { MeController } from './me.controller';",
          "3: export { OwnerController } from './owner.controller';",
          "4: export { PasswordResetController } from './passwordReset.controller';",
          "5: export { UsersController } from './users.controller';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: export { TranslationController } from './translation.controller';",
          "",
          "---------------"
        ],
        "packages/cli/src/controllers/translation.controller.ts||packages/cli/src/controllers/translation.controller.ts": [
          "File: packages/cli/src/controllers/translation.controller.ts -> packages/cli/src/controllers/translation.controller.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import type { Request } from 'express';",
          "2: import { ICredentialTypes } from 'n8n-workflow';",
          "3: import { join } from 'path';",
          "4: import { access } from 'fs/promises';",
          "5: import { Get, RestController } from '@/decorators';",
          "6: import { BadRequestError, InternalServerError } from '@/ResponseHelper';",
          "7: import { Config } from '@/config';",
          "8: import { NODES_BASE_DIR } from '@/constants';",
          "10: export const CREDENTIAL_TRANSLATIONS_DIR = 'n8n-nodes-base/dist/credentials/translations';",
          "11: export const NODE_HEADERS_PATH = join(NODES_BASE_DIR, 'dist/nodes/headers');",
          "13: export declare namespace TranslationRequest {",
          "14:  export type Credential = Request<{}, {}, {}, { credentialType: string }>;",
          "15: }",
          "17: @RestController('/')",
          "18: export class TranslationController {",
          "19:  constructor(private config: Config, private credentialTypes: ICredentialTypes) {}",
          "21:  @Get('/credential-translation')",
          "22:  async getCredentialTranslation(req: TranslationRequest.Credential) {",
          "23:   const { credentialType } = req.query;",
          "25:   if (!this.credentialTypes.recognizes(credentialType))",
          "26:    throw new BadRequestError(`Invalid Credential type: \"${credentialType}\"`);",
          "28:   const defaultLocale = this.config.getEnv('defaultLocale');",
          "29:   const translationPath = join(",
          "30:    CREDENTIAL_TRANSLATIONS_DIR,",
          "31:    defaultLocale,",
          "32:    `${credentialType}.json`,",
          "33:   );",
          "35:   try {",
          "37:    return require(translationPath);",
          "38:   } catch (error) {",
          "39:    return null;",
          "40:   }",
          "41:  }",
          "43:  @Get('/node-translation-headers')",
          "44:  async getNodeTranslationHeaders() {",
          "45:   try {",
          "46:    await access(`${NODE_HEADERS_PATH}.js`);",
          "47:   } catch (_) {",
          "48:    return; // no headers available",
          "49:   }",
          "51:   try {",
          "53:    return require(NODE_HEADERS_PATH);",
          "54:   } catch (error) {",
          "55:    throw new InternalServerError('Failed to load headers file');",
          "56:   }",
          "57:  }",
          "58: }",
          "",
          "---------------"
        ],
        "packages/cli/test/setup-mocks.ts||packages/cli/test/setup-mocks.ts": [
          "File: packages/cli/test/setup-mocks.ts -> packages/cli/test/setup-mocks.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: jest.mock('@sentry/node');",
          "2: jest.mock('@n8n_io/license-sdk');",
          "3: jest.mock('@/telemetry');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import 'reflect-metadata';",
          "",
          "---------------"
        ],
        "packages/cli/test/unit/controllers/translation.controller.test.ts||packages/cli/test/unit/controllers/translation.controller.test.ts": [
          "File: packages/cli/test/unit/controllers/translation.controller.test.ts -> packages/cli/test/unit/controllers/translation.controller.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { mock } from 'jest-mock-extended';",
          "2: import type { ICredentialTypes } from 'n8n-workflow';",
          "3: import type { Config } from '@/config';",
          "4: import {",
          "5:  TranslationController,",
          "6:  TranslationRequest,",
          "7:  CREDENTIAL_TRANSLATIONS_DIR,",
          "8: } from '@/controllers/translation.controller';",
          "9: import { BadRequestError } from '@/ResponseHelper';",
          "11: describe('TranslationController', () => {",
          "12:  const config = mock<Config>();",
          "13:  const credentialTypes = mock<ICredentialTypes>();",
          "14:  const controller = new TranslationController(config, credentialTypes);",
          "16:  describe('getCredentialTranslation', () => {",
          "17:   it('should throw 400 on invalid credential types', async () => {",
          "18:    const credentialType = 'not-a-valid-credential-type';",
          "19:    const req = mock<TranslationRequest.Credential>({ query: { credentialType } });",
          "20:    credentialTypes.recognizes.calledWith(credentialType).mockReturnValue(false);",
          "22:    expect(controller.getCredentialTranslation(req)).rejects.toThrowError(",
          "23:     new BadRequestError(`Invalid Credential type: \"${credentialType}\"`),",
          "24:    );",
          "25:   });",
          "27:   it('should return translation json on valid credential types', async () => {",
          "28:    const credentialType = 'credential-type';",
          "29:    const req = mock<TranslationRequest.Credential>({ query: { credentialType } });",
          "30:    config.getEnv.calledWith('defaultLocale').mockReturnValue('de');",
          "31:    credentialTypes.recognizes.calledWith(credentialType).mockReturnValue(true);",
          "32:    const response = { translation: 'string' };",
          "33:    jest.mock(`${CREDENTIAL_TRANSLATIONS_DIR}/de/credential-type.json`, () => response, {",
          "34:     virtual: true,",
          "35:    });",
          "37:    expect(await controller.getCredentialTranslation(req)).toEqual(response);",
          "38:   });",
          "39:  });",
          "40: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0f8d59fee223c6bc9f8459890ed4a31ef8cb0af",
      "candidate_info": {
        "commit_hash": "f0f8d59fee223c6bc9f8459890ed4a31ef8cb0af",
        "repo": "n8n-io/n8n",
        "commit_url": "https://github.com/n8n-io/n8n/commit/f0f8d59fee223c6bc9f8459890ed4a31ef8cb0af",
        "files": [
          "packages/cli/src/Server.ts",
          "packages/cli/src/TranslationHelpers.ts",
          "packages/cli/src/controllers/index.ts",
          "packages/cli/src/controllers/translation.controller.ts",
          "packages/cli/test/setup-mocks.ts",
          "packages/cli/test/unit/controllers/translation.controller.test.ts"
        ],
        "message": "fix(core): Do not allow arbitrary path traversal in the credential-translation endpoint (#5522)",
        "before_after_code_files": [
          "packages/cli/src/Server.ts||packages/cli/src/Server.ts",
          "packages/cli/src/TranslationHelpers.ts||packages/cli/src/TranslationHelpers.ts",
          "packages/cli/src/controllers/index.ts||packages/cli/src/controllers/index.ts",
          "packages/cli/src/controllers/translation.controller.ts||packages/cli/src/controllers/translation.controller.ts",
          "packages/cli/test/setup-mocks.ts||packages/cli/test/setup-mocks.ts",
          "packages/cli/test/unit/controllers/translation.controller.test.ts||packages/cli/test/unit/controllers/translation.controller.test.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "packages/cli/src/Server.ts||packages/cli/src/Server.ts",
            "packages/cli/src/TranslationHelpers.ts||packages/cli/src/TranslationHelpers.ts",
            "packages/cli/src/controllers/index.ts||packages/cli/src/controllers/index.ts",
            "packages/cli/src/controllers/translation.controller.ts||packages/cli/src/controllers/translation.controller.ts",
            "packages/cli/test/setup-mocks.ts||packages/cli/test/setup-mocks.ts",
            "packages/cli/test/unit/controllers/translation.controller.test.ts||packages/cli/test/unit/controllers/translation.controller.test.ts"
          ],
          "candidate": [
            "packages/cli/src/Server.ts||packages/cli/src/Server.ts",
            "packages/cli/src/TranslationHelpers.ts||packages/cli/src/TranslationHelpers.ts",
            "packages/cli/src/controllers/index.ts||packages/cli/src/controllers/index.ts",
            "packages/cli/src/controllers/translation.controller.ts||packages/cli/src/controllers/translation.controller.ts",
            "packages/cli/test/setup-mocks.ts||packages/cli/test/setup-mocks.ts",
            "packages/cli/test/unit/controllers/translation.controller.test.ts||packages/cli/test/unit/controllers/translation.controller.test.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/cli/src/Server.ts||packages/cli/src/Server.ts": [
          "File: packages/cli/src/Server.ts -> packages/cli/src/Server.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: import config from '@/config';",
          "58: import * as Queue from '@/Queue';",
          "59: import { InternalHooksManager } from '@/InternalHooksManager';",
          "61: import { getSharedWorkflowIds } from '@/WorkflowHelpers';",
          "63: import { nodesController } from '@/api/nodes.api';",
          "",
          "[Removed Lines]",
          "60: import { getCredentialTranslationPath } from '@/TranslationHelpers';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:  MeController,",
          "89:  OwnerController,",
          "90:  PasswordResetController,",
          "91:  UsersController,",
          "92: } from '@/controllers';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:  TranslationController,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "366:    new OwnerController({ config, internalHooks, repositories, logger }),",
          "367:    new MeController({ externalHooks, internalHooks, repositories, logger }),",
          "368:    new PasswordResetController({ config, externalHooks, internalHooks, repositories, logger }),",
          "369:    new UsersController({",
          "370:     config,",
          "371:     mailer,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369:    new TranslationController(config, this.credentialTypes),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "606:    ),",
          "607:   );",
          "",
          "[Removed Lines]",
          "609:   this.app.get(",
          "610:    `/${this.restEndpoint}/credential-translation`,",
          "611:    ResponseHelper.send(",
          "612:     async (",
          "613:      req: express.Request & { query: { credentialType: string } },",
          "614:      res: express.Response,",
          "615:     ): Promise<object | null> => {",
          "616:      const translationPath = getCredentialTranslationPath({",
          "617:       locale: this.frontendSettings.defaultLocale,",
          "618:       credentialType: req.query.credentialType,",
          "619:      });",
          "621:      try {",
          "622:       return require(translationPath);",
          "623:      } catch (error) {",
          "624:       return null;",
          "625:      }",
          "626:     },",
          "627:    ),",
          "628:   );",
          "631:   const headersPath = pathJoin(NODES_BASE_DIR, 'dist', 'nodes', 'headers');",
          "632:   this.app.get(",
          "633:    `/${this.restEndpoint}/node-translation-headers`,",
          "634:    ResponseHelper.send(",
          "635:     async (req: express.Request, res: express.Response): Promise<object | void> => {",
          "636:      try {",
          "637:       await fsAccess(`${headersPath}.js`);",
          "638:      } catch (_) {",
          "639:       return; // no headers available",
          "640:      }",
          "642:      try {",
          "643:       return require(headersPath);",
          "644:      } catch (error) {",
          "645:       res.status(500).send('Failed to load headers file');",
          "646:      }",
          "647:     },",
          "648:    ),",
          "649:   );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/cli/src/TranslationHelpers.ts||packages/cli/src/TranslationHelpers.ts": [
          "File: packages/cli/src/TranslationHelpers.ts -> packages/cli/src/TranslationHelpers.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { join, dirname } from 'path';",
          "2: import { readdir } from 'fs/promises';",
          "3: import type { Dirent } from 'fs';",
          "6: const ALLOWED_VERSIONED_DIRNAME_LENGTH = [2, 3]; // e.g. v1, v10",
          "",
          "[Removed Lines]",
          "4: import { NODES_BASE_DIR } from '@/constants';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:   ? join(nodeDir, `v${maxVersion}`, 'translations', locale, `${nodeType}.json`)",
          "48:   : join(nodeDir, 'translations', locale, `${nodeType}.json`);",
          "49: }",
          "",
          "[Removed Lines]",
          "54: export function getCredentialTranslationPath({",
          "55:  locale,",
          "56:  credentialType,",
          "57: }: {",
          "58:  locale: string;",
          "59:  credentialType: string;",
          "60: }): string {",
          "61:  const credsPath = join(NODES_BASE_DIR, 'dist', 'credentials');",
          "63:  return join(credsPath, 'translations', locale, `${credentialType}.json`);",
          "64: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/cli/src/controllers/index.ts||packages/cli/src/controllers/index.ts": [
          "File: packages/cli/src/controllers/index.ts -> packages/cli/src/controllers/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: export { MeController } from './me.controller';",
          "3: export { OwnerController } from './owner.controller';",
          "4: export { PasswordResetController } from './passwordReset.controller';",
          "5: export { UsersController } from './users.controller';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: export { TranslationController } from './translation.controller';",
          "",
          "---------------"
        ],
        "packages/cli/src/controllers/translation.controller.ts||packages/cli/src/controllers/translation.controller.ts": [
          "File: packages/cli/src/controllers/translation.controller.ts -> packages/cli/src/controllers/translation.controller.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import type { Request } from 'express';",
          "2: import { ICredentialTypes } from 'n8n-workflow';",
          "3: import { join } from 'path';",
          "4: import { access } from 'fs/promises';",
          "5: import { Get, RestController } from '@/decorators';",
          "6: import { BadRequestError, InternalServerError } from '@/ResponseHelper';",
          "7: import { Config } from '@/config';",
          "8: import { NODES_BASE_DIR } from '@/constants';",
          "10: export const CREDENTIAL_TRANSLATIONS_DIR = 'n8n-nodes-base/dist/credentials/translations';",
          "11: export const NODE_HEADERS_PATH = join(NODES_BASE_DIR, 'dist/nodes/headers');",
          "13: export declare namespace TranslationRequest {",
          "14:  export type Credential = Request<{}, {}, {}, { credentialType: string }>;",
          "15: }",
          "17: @RestController('/')",
          "18: export class TranslationController {",
          "19:  constructor(private config: Config, private credentialTypes: ICredentialTypes) {}",
          "21:  @Get('/credential-translation')",
          "22:  async getCredentialTranslation(req: TranslationRequest.Credential) {",
          "23:   const { credentialType } = req.query;",
          "25:   if (!this.credentialTypes.recognizes(credentialType))",
          "26:    throw new BadRequestError(`Invalid Credential type: \"${credentialType}\"`);",
          "28:   const defaultLocale = this.config.getEnv('defaultLocale');",
          "29:   const translationPath = join(",
          "30:    CREDENTIAL_TRANSLATIONS_DIR,",
          "31:    defaultLocale,",
          "32:    `${credentialType}.json`,",
          "33:   );",
          "35:   try {",
          "37:    return require(translationPath);",
          "38:   } catch (error) {",
          "39:    return null;",
          "40:   }",
          "41:  }",
          "43:  @Get('/node-translation-headers')",
          "44:  async getNodeTranslationHeaders() {",
          "45:   try {",
          "46:    await access(`${NODE_HEADERS_PATH}.js`);",
          "47:   } catch (_) {",
          "48:    return; // no headers available",
          "49:   }",
          "51:   try {",
          "53:    return require(NODE_HEADERS_PATH);",
          "54:   } catch (error) {",
          "55:    throw new InternalServerError('Failed to load headers file');",
          "56:   }",
          "57:  }",
          "58: }",
          "",
          "---------------"
        ],
        "packages/cli/test/setup-mocks.ts||packages/cli/test/setup-mocks.ts": [
          "File: packages/cli/test/setup-mocks.ts -> packages/cli/test/setup-mocks.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: jest.mock('@sentry/node');",
          "2: jest.mock('@n8n_io/license-sdk');",
          "3: jest.mock('@/telemetry');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import 'reflect-metadata';",
          "",
          "---------------"
        ],
        "packages/cli/test/unit/controllers/translation.controller.test.ts||packages/cli/test/unit/controllers/translation.controller.test.ts": [
          "File: packages/cli/test/unit/controllers/translation.controller.test.ts -> packages/cli/test/unit/controllers/translation.controller.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { mock } from 'jest-mock-extended';",
          "2: import type { ICredentialTypes } from 'n8n-workflow';",
          "3: import type { Config } from '@/config';",
          "4: import {",
          "5:  TranslationController,",
          "6:  TranslationRequest,",
          "7:  CREDENTIAL_TRANSLATIONS_DIR,",
          "8: } from '@/controllers/translation.controller';",
          "9: import { BadRequestError } from '@/ResponseHelper';",
          "11: describe('TranslationController', () => {",
          "12:  const config = mock<Config>();",
          "13:  const credentialTypes = mock<ICredentialTypes>();",
          "14:  const controller = new TranslationController(config, credentialTypes);",
          "16:  describe('getCredentialTranslation', () => {",
          "17:   it('should throw 400 on invalid credential types', async () => {",
          "18:    const credentialType = 'not-a-valid-credential-type';",
          "19:    const req = mock<TranslationRequest.Credential>({ query: { credentialType } });",
          "20:    credentialTypes.recognizes.calledWith(credentialType).mockReturnValue(false);",
          "22:    expect(controller.getCredentialTranslation(req)).rejects.toThrowError(",
          "23:     new BadRequestError(`Invalid Credential type: \"${credentialType}\"`),",
          "24:    );",
          "25:   });",
          "27:   it('should return translation json on valid credential types', async () => {",
          "28:    const credentialType = 'credential-type';",
          "29:    const req = mock<TranslationRequest.Credential>({ query: { credentialType } });",
          "30:    config.getEnv.calledWith('defaultLocale').mockReturnValue('de');",
          "31:    credentialTypes.recognizes.calledWith(credentialType).mockReturnValue(true);",
          "32:    const response = { translation: 'string' };",
          "33:    jest.mock(`${CREDENTIAL_TRANSLATIONS_DIR}/de/credential-type.json`, () => response, {",
          "34:     virtual: true,",
          "35:    });",
          "37:    expect(await controller.getCredentialTranslation(req)).toEqual(response);",
          "38:   });",
          "39:  });",
          "40: });",
          "",
          "---------------"
        ]
      }
    }
  ]
}