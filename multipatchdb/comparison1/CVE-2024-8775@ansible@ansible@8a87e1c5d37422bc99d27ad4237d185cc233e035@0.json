{
  "cve_id": "CVE-2024-8775",
  "cve_desc": "A flaw was found in Ansible, where sensitive information stored in Ansible Vault files can be exposed in plaintext during the execution of a playbook. This occurs when using tasks such as include_vars to load vaulted variables without setting the no_log: true parameter, resulting in sensitive data being printed in the playbook output or logs. This can lead to the unintentional disclosure of secrets like passwords or API keys, compromising security and potentially allowing unauthorized access or actions.",
  "repo": "ansible/ansible",
  "patch_hash": "8a87e1c5d37422bc99d27ad4237d185cc233e035",
  "patch_info": {
    "commit_hash": "8a87e1c5d37422bc99d27ad4237d185cc233e035",
    "repo": "ansible/ansible",
    "commit_url": "https://github.com/ansible/ansible/commit/8a87e1c5d37422bc99d27ad4237d185cc233e035",
    "files": [
      "changelogs/fragments/no_log_booly.yml",
      "lib/ansible/module_utils/basic.py",
      "test/integration/targets/module_no_log/library/module_that_has_secret.py",
      "test/integration/targets/module_no_log/tasks/main.yml"
    ],
    "message": "no_log avoid masking booleans (#82217) (#82235)\n\n* no_log avoid masking booleans (#82217)\n\n* no_log avoid masking booleans\n\n* clog\n\n* fix issues\n\n(cherry picked from commit 6e448edc63ecfdaf3f6ebb2e015e2d3c12dd1d95)\n\n* unused boil is hot",
    "before_after_code_files": [
      "lib/ansible/module_utils/basic.py||lib/ansible/module_utils/basic.py",
      "test/integration/targets/module_no_log/library/module_that_has_secret.py||test/integration/targets/module_no_log/library/module_that_has_secret.py"
    ]
  },
  "patch_diff": {
    "lib/ansible/module_utils/basic.py||lib/ansible/module_utils/basic.py": [
      "File: lib/ansible/module_utils/basic.py -> lib/ansible/module_utils/basic.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1489:         if deprecations:",
      "1490:             kwargs['deprecations'] = deprecations",
      "1492:         kwargs = remove_values(kwargs, self.no_log_values)",
      "1493:         print('\\n%s' % self.jsonify(kwargs))",
      "1495:     def exit_json(self, **kwargs):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1492:         # preserve bools/none from no_log",
      "1493:         # TODO: once python version on target high enough, dict comprh",
      "1494:         preserved = {}",
      "1495:         for k, v in kwargs.items():",
      "1496:             if v is None or isinstance(v, bool):",
      "1497:                 preserved[k] = v",
      "1499:         # strip no_log collisions",
      "1502:         # return preserved",
      "1503:         kwargs.update(preserved)",
      "",
      "---------------"
    ],
    "test/integration/targets/module_no_log/library/module_that_has_secret.py||test/integration/targets/module_no_log/library/module_that_has_secret.py": [
      "File: test/integration/targets/module_no_log/library/module_that_has_secret.py -> test/integration/targets/module_no_log/library/module_that_has_secret.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: #!/usr/bin/python",
      "2: from __future__ import (absolute_import, division, print_function)",
      "3: __metaclass__ = type",
      "5: from ansible.module_utils.basic import AnsibleModule",
      "8: def main():",
      "9:     module = AnsibleModule(argument_spec=dict(",
      "10:         secret=dict(no_log=True),",
      "11:         notsecret=dict(no_log=False),",
      "12:     ))",
      "14:     msg = \"My secret is: (%s), but don't tell %s\" % (module.params['secret'], module.params['notsecret'])",
      "15:     module.exit_json(msg=msg, changed=bool(module.params['secret'] == module.params['notsecret']))",
      "18: if __name__ == '__main__':",
      "19:     main()",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5b5c26c644b3762a97af7c129ce03142a7624da6",
      "candidate_info": {
        "commit_hash": "5b5c26c644b3762a97af7c129ce03142a7624da6",
        "repo": "ansible/ansible",
        "commit_url": "https://github.com/ansible/ansible/commit/5b5c26c644b3762a97af7c129ce03142a7624da6",
        "files": [
          "changelogs/fragments/no_log_booly.yml",
          "lib/ansible/module_utils/basic.py",
          "test/integration/targets/module_no_log/library/module_that_has_secret.py",
          "test/integration/targets/module_no_log/tasks/main.yml"
        ],
        "message": "no_log avoid masking booleans (#82217) (#82236)\n\n* no_log avoid masking booleans (#82217)\n\n(cherry picked from commit 6e448edc63ecfdaf3f6ebb2e015e2d3c12dd1d95)",
        "before_after_code_files": [
          "lib/ansible/module_utils/basic.py||lib/ansible/module_utils/basic.py",
          "test/integration/targets/module_no_log/library/module_that_has_secret.py||test/integration/targets/module_no_log/library/module_that_has_secret.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "lib/ansible/module_utils/basic.py||lib/ansible/module_utils/basic.py",
            "test/integration/targets/module_no_log/library/module_that_has_secret.py||test/integration/targets/module_no_log/library/module_that_has_secret.py"
          ],
          "candidate": [
            "lib/ansible/module_utils/basic.py||lib/ansible/module_utils/basic.py",
            "test/integration/targets/module_no_log/library/module_that_has_secret.py||test/integration/targets/module_no_log/library/module_that_has_secret.py"
          ]
        }
      },
      "candidate_diff": {
        "lib/ansible/module_utils/basic.py||lib/ansible/module_utils/basic.py": [
          "File: lib/ansible/module_utils/basic.py -> lib/ansible/module_utils/basic.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1511:         if deprecations:",
          "1512:             kwargs['deprecations'] = deprecations",
          "1514:         kwargs = remove_values(kwargs, self.no_log_values)",
          "1515:         print('\\n%s' % self.jsonify(kwargs))",
          "1517:     def exit_json(self, **kwargs):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1514:         # preserve bools/none from no_log",
          "1515:         # TODO: once python version on target high enough, dict comprh",
          "1516:         preserved = {}",
          "1517:         for k, v in kwargs.items():",
          "1518:             if v is None or isinstance(v, bool):",
          "1519:                 preserved[k] = v",
          "1521:         # strip no_log collisions",
          "1524:         # return preserved",
          "1525:         kwargs.update(preserved)",
          "",
          "---------------"
        ],
        "test/integration/targets/module_no_log/library/module_that_has_secret.py||test/integration/targets/module_no_log/library/module_that_has_secret.py": [
          "File: test/integration/targets/module_no_log/library/module_that_has_secret.py -> test/integration/targets/module_no_log/library/module_that_has_secret.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/python",
          "2: from __future__ import (absolute_import, division, print_function)",
          "3: __metaclass__ = type",
          "5: from ansible.module_utils.basic import AnsibleModule",
          "8: def main():",
          "9:     module = AnsibleModule(argument_spec=dict(",
          "10:         secret=dict(no_log=True),",
          "11:         notsecret=dict(no_log=False),",
          "12:     ))",
          "14:     msg = \"My secret is: (%s), but don't tell %s\" % (module.params['secret'], module.params['notsecret'])",
          "15:     module.exit_json(msg=msg, changed=bool(module.params['secret'] == module.params['notsecret']))",
          "18: if __name__ == '__main__':",
          "19:     main()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e448edc63ecfdaf3f6ebb2e015e2d3c12dd1d95",
      "candidate_info": {
        "commit_hash": "6e448edc63ecfdaf3f6ebb2e015e2d3c12dd1d95",
        "repo": "ansible/ansible",
        "commit_url": "https://github.com/ansible/ansible/commit/6e448edc63ecfdaf3f6ebb2e015e2d3c12dd1d95",
        "files": [
          "changelogs/fragments/no_log_booly.yml",
          "lib/ansible/module_utils/basic.py",
          "test/integration/targets/module_no_log/library/module_that_has_secret.py",
          "test/integration/targets/module_no_log/tasks/main.yml"
        ],
        "message": "no_log avoid masking booleans (#82217)\n\n* no_log avoid masking booleans\n\n* clog\n\n* fix issues",
        "before_after_code_files": [
          "lib/ansible/module_utils/basic.py||lib/ansible/module_utils/basic.py",
          "test/integration/targets/module_no_log/library/module_that_has_secret.py||test/integration/targets/module_no_log/library/module_that_has_secret.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "lib/ansible/module_utils/basic.py||lib/ansible/module_utils/basic.py",
            "test/integration/targets/module_no_log/library/module_that_has_secret.py||test/integration/targets/module_no_log/library/module_that_has_secret.py"
          ],
          "candidate": [
            "lib/ansible/module_utils/basic.py||lib/ansible/module_utils/basic.py",
            "test/integration/targets/module_no_log/library/module_that_has_secret.py||test/integration/targets/module_no_log/library/module_that_has_secret.py"
          ]
        }
      },
      "candidate_diff": {
        "lib/ansible/module_utils/basic.py||lib/ansible/module_utils/basic.py": [
          "File: lib/ansible/module_utils/basic.py -> lib/ansible/module_utils/basic.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1479:         if deprecations:",
          "1480:             kwargs['deprecations'] = deprecations",
          "1482:         kwargs = remove_values(kwargs, self.no_log_values)",
          "1483:         print('\\n%s' % self.jsonify(kwargs))",
          "1485:     def exit_json(self, **kwargs):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1482:         # preserve bools/none from no_log",
          "1483:         # TODO: once python version on target high enough, dict comprh",
          "1484:         preserved = {}",
          "1485:         for k, v in kwargs.items():",
          "1486:             if v is None or isinstance(v, bool):",
          "1487:                 preserved[k] = v",
          "1489:         # strip no_log collisions",
          "1492:         # return preserved",
          "1493:         kwargs.update(preserved)",
          "",
          "---------------"
        ],
        "test/integration/targets/module_no_log/library/module_that_has_secret.py||test/integration/targets/module_no_log/library/module_that_has_secret.py": [
          "File: test/integration/targets/module_no_log/library/module_that_has_secret.py -> test/integration/targets/module_no_log/library/module_that_has_secret.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/python",
          "2: from __future__ import annotations",
          "4: from ansible.module_utils.basic import AnsibleModule",
          "7: def main():",
          "8:     module = AnsibleModule(argument_spec=dict(",
          "9:         secret=dict(no_log=True),",
          "10:         notsecret=dict(no_log=False),",
          "11:     ))",
          "13:     msg = \"My secret is: (%s), but don't tell %s\" % (module.params['secret'], module.params['notsecret'])",
          "14:     module.exit_json(msg=msg, changed=bool(module.params['secret'] == module.params['notsecret']))",
          "17: if __name__ == '__main__':",
          "18:     main()",
          "",
          "---------------"
        ]
      }
    }
  ]
}