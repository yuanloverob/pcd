{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d740035e5fa892ace92abd2e171b92ca14b3ed6a",
      "candidate_info": {
        "commit_hash": "d740035e5fa892ace92abd2e171b92ca14b3ed6a",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/d740035e5fa892ace92abd2e171b92ca14b3ed6a",
        "files": [
          "ambari-web/app/mixins/common/configs/enhanced_configs.js"
        ],
        "message": "AMBARI-25421. SI Start failing when enabled from Hive>Configs tab",
        "before_after_code_files": [
          "ambari-web/app/mixins/common/configs/enhanced_configs.js||ambari-web/app/mixins/common/configs/enhanced_configs.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/mixins/common/configs/enhanced_configs.js||ambari-web/app/mixins/common/configs/enhanced_configs.js": [
          "File: ambari-web/app/mixins/common/configs/enhanced_configs.js -> ambari-web/app/mixins/common/configs/enhanced_configs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:     var updateDependencies = Em.isArray(changedConfigs) && changedConfigs.length > 0;",
          "222:     var stepConfigs = this.get('stepConfigs');",
          "223:     var requiredTags = [];",
          "226:     if (updateDependencies || Em.isNone(this.get('recommendationsConfigs'))) {",
          "227:       var recommendations = isAutoComplete ? {} : this.get('hostGroups');",
          "",
          "[Removed Lines]",
          "224:     const isAutoComplete = Boolean(this.get('isRecommendationsAutoComplete'));",
          "",
          "[Added Lines]",
          "224:     const isAutoComplete = !updateDependencies;",
          "225:     this.set('isRecommendationsAutoComplete', isAutoComplete);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e46711740859232679bd3e8a48fe6c27c31e8f19",
      "candidate_info": {
        "commit_hash": "e46711740859232679bd3e8a48fe6c27c31e8f19",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/e46711740859232679bd3e8a48fe6c27c31e8f19",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessor.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog274.java",
          "ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql",
          "ambari-server/src/test/java/org/apache/ambari/server/orm/DBAccessorImplTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog274Test.java"
        ],
        "message": "AMBARI-24992. Ambari Upgrade from 2.6.2.2 to 2.7.1.0 fails in Schema upgrade phase due to long certificate (dgrinenko) (#3019)\n\nAMBARI-24992. Ambari Upgrade from 2.6.2.2 to 2.7.1.0 fails in Schema upgrade phase due to long certificate (dgrinenko)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessor.java||ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessor.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java||ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog274.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog274.java",
          "ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql",
          "ambari-server/src/test/java/org/apache/ambari/server/orm/DBAccessorImplTest.java||ambari-server/src/test/java/org/apache/ambari/server/orm/DBAccessorImplTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog274Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog274Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessor.java||ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessor.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessor.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "664:   void changeColumnType(String tableName, String columnName, Class fromType, Class toType) throws SQLException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "674:   DBColumnInfo getColumnInfo(String tableName, String columnName) throws SQLException;",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java||ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.FileReader;",
          "23: import java.io.IOException;",
          "24: import java.io.InputStreamReader;",
          "25: import java.nio.charset.Charset;",
          "26: import java.sql.Blob;",
          "27: import java.sql.Connection;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import java.math.BigDecimal;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:     }",
          "150:   }",
          "152:   @Override",
          "153:   public Connection getConnection() {",
          "154:     return connection;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:   private static Class<?> fromSqlTypeToClass(int type) {",
          "160:     switch (type) {",
          "161:       case Types.VARCHAR:",
          "162:       case Types.CHAR:",
          "163:       case Types.LONGVARCHAR:",
          "164:         return String.class;",
          "165:       case Types.NUMERIC:",
          "166:       case Types.DECIMAL:",
          "167:         return BigDecimal.class;",
          "168:       case Types.BIT:",
          "169:         return Boolean.class;",
          "170:       case Types.TINYINT:",
          "171:         return Byte.class;",
          "172:       case Types.SMALLINT:",
          "173:         return Short.class;",
          "174:       case Types.INTEGER:",
          "175:         return Integer.class;",
          "176:       case Types.BIGINT:",
          "177:         return Long.class;",
          "178:       case Types.FLOAT:",
          "179:       case Types.REAL:",
          "180:         return Float.class;",
          "181:       case Types.DOUBLE:",
          "182:         return Double.class;",
          "183:       case Types.BINARY:",
          "184:       case Types.VARBINARY:",
          "185:       case Types.LONGVARBINARY:",
          "186:         return Byte[].class;",
          "187:       case Types.DATE:",
          "188:         return java.sql.Date.class;",
          "189:       case Types.TIME:",
          "190:         return java.sql.Timestamp.class;",
          "191:       default:",
          "192:         return null;",
          "193:     }",
          "194:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1229:     alterColumn(tableName, new DBColumnInfo(columnName, toType, null));",
          "1230:   }",
          "1232:   @Override",
          "1233:   public List<String> getIndexesList(String tableName, boolean unique)",
          "1234:     throws SQLException{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1286:   @Override",
          "1287:   public DBColumnInfo getColumnInfo(String tableName, String columnName) {",
          "1288:     try {",
          "1289:       String sqlQuery = String.format(\"SELECT %s FROM %s WHERE 1=2\", columnName, convertObjectName(tableName));",
          "1291:       try (Statement statement = getConnection().createStatement();",
          "1292:            ResultSet rs = statement.executeQuery(sqlQuery)) {",
          "1294:         ResultSetMetaData rsmd = rs.getMetaData();",
          "1296:         return new DBColumnInfo(",
          "1297:           rsmd.getColumnName(1),",
          "1298:           fromSqlTypeToClass(rsmd.getColumnType(1)),",
          "1299:           rsmd.getColumnDisplaySize(1),",
          "1300:           null,",
          "1301:           rsmd.isNullable(1) == ResultSetMetaData.columnNullable",
          "1302:         );",
          "1303:       }",
          "1304:     } catch (SQLException e) {",
          "1305:       return null;",
          "1306:     }",
          "1307:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:     protected void configure() {",
          "183:       super.configure();",
          "187:       catalogBinder.addBinding().to(UpgradeCatalog251.class);",
          "188:       catalogBinder.addBinding().to(UpgradeCatalog252.class);",
          "189:       catalogBinder.addBinding().to(UpgradeCatalog260.class);",
          "",
          "[Removed Lines]",
          "185:       Multibinder<UpgradeCatalog> catalogBinder =",
          "186:         Multibinder.newSetBinder(binder(), UpgradeCatalog.class);",
          "",
          "[Added Lines]",
          "185:       Multibinder<UpgradeCatalog> catalogBinder = Multibinder.newSetBinder(binder(), UpgradeCatalog.class);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:       catalogBinder.addBinding().to(UpgradeCatalog270.class);",
          "193:       catalogBinder.addBinding().to(UpgradeCatalog271.class);",
          "194:       catalogBinder.addBinding().to(UpgradeCatalog272.class);",
          "195:       catalogBinder.addBinding().to(UpdateAlertScriptPaths.class);",
          "196:       catalogBinder.addBinding().to(FinalUpgradeCatalog.class);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194:       catalogBinder.addBinding().to(UpgradeCatalog274.class);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog274.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog274.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog274.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog274.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.ambari.server.upgrade;",
          "20: import java.sql.SQLException;",
          "22: import javax.persistence.Table;",
          "24: import org.apache.ambari.server.AmbariException;",
          "25: import org.apache.ambari.server.orm.DBAccessor;",
          "26: import org.apache.ambari.server.orm.entities.AmbariConfigurationEntity;",
          "27: import org.slf4j.Logger;",
          "28: import org.slf4j.LoggerFactory;",
          "30: import com.google.inject.Inject;",
          "31: import com.google.inject.Injector;",
          "36: public class UpgradeCatalog274 extends AbstractUpgradeCatalog {",
          "38:   private static final Logger LOG = LoggerFactory.getLogger(UpgradeCatalog274.class);",
          "39:   static final String AMBARI_CONFIGURATION_TABLE = AmbariConfigurationEntity.class.getAnnotation(Table.class).name();",
          "40:   static final String AMBARI_CONFIGURATION_PROPERTY_VALUE_COLUMN = UpgradeCatalog270.AMBARI_CONFIGURATION_PROPERTY_VALUE_COLUMN;",
          "41:   static final Integer AMBARI_CONFIGURATION_PROPERTY_VALUE_COLUMN_LEN = 4000;",
          "44:   @Inject",
          "45:   public UpgradeCatalog274(Injector injector) {",
          "46:     super(injector);",
          "47:   }",
          "49:   @Override",
          "50:   public String getSourceVersion() {",
          "51:     return \"2.7.2\";",
          "52:   }",
          "60:   @Override",
          "61:   protected void executeDDLUpdates() throws AmbariException, SQLException {",
          "62:     upgradeConfigurationTableValueMaxSize();",
          "63:   }",
          "65:   @Override",
          "66:   public String getTargetVersion() {",
          "67:     return \"2.7.4\";",
          "68:   }",
          "76:   @Override",
          "77:   protected void executePreDMLUpdates() throws AmbariException, SQLException {",
          "79:   }",
          "87:   @Override",
          "88:   protected void executeDMLUpdates() throws AmbariException, SQLException {",
          "90:   }",
          "93:   private void upgradeConfigurationTableValueMaxSize() throws SQLException {",
          "94:     DBAccessor.DBColumnInfo propertyColumn = dbAccessor.getColumnInfo(AMBARI_CONFIGURATION_TABLE,",
          "95:       AMBARI_CONFIGURATION_PROPERTY_VALUE_COLUMN);",
          "97:     if (propertyColumn != null && propertyColumn.getType() != null &&",
          "98:       propertyColumn.getLength() < AMBARI_CONFIGURATION_PROPERTY_VALUE_COLUMN_LEN) {",
          "100:       LOG.info(\"Updating column max size to {} for {}.{}\", AMBARI_CONFIGURATION_PROPERTY_VALUE_COLUMN_LEN,",
          "101:         AMBARI_CONFIGURATION_TABLE, AMBARI_CONFIGURATION_PROPERTY_VALUE_COLUMN);",
          "103:       propertyColumn.setLength(AMBARI_CONFIGURATION_PROPERTY_VALUE_COLUMN_LEN);",
          "104:       dbAccessor.alterColumn(AMBARI_CONFIGURATION_TABLE, propertyColumn);",
          "105:     }",
          "106:   }",
          "107: }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql": [
          "File: ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql -> ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: CREATE TABLE ambari_configuration (",
          "88:   category_name VARCHAR(100) NOT NULL,",
          "89:   property_name VARCHAR(100) NOT NULL,",
          "91:   CONSTRAINT PK_ambari_configuration PRIMARY KEY (category_name, property_name));",
          "93: CREATE TABLE serviceconfig (",
          "",
          "[Removed Lines]",
          "90:   property_value VARCHAR(2048),",
          "",
          "[Added Lines]",
          "90:   property_value VARCHAR(4000),",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql": [
          "File: ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql -> ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: CREATE TABLE ambari_configuration (",
          "108:   category_name VARCHAR(100) NOT NULL,",
          "109:   property_name VARCHAR(100) NOT NULL,",
          "111:   CONSTRAINT PK_ambari_configuration PRIMARY KEY (category_name, property_name));",
          "113: CREATE TABLE serviceconfig (",
          "",
          "[Removed Lines]",
          "110:   property_value VARCHAR(2048),",
          "",
          "[Added Lines]",
          "110:   property_value VARCHAR(4000),",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql": [
          "File: ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql -> ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: CREATE TABLE ambari_configuration (",
          "88:   category_name VARCHAR2(100) NOT NULL,",
          "89:   property_name VARCHAR2(100) NOT NULL,",
          "91:   CONSTRAINT PK_ambari_configuration PRIMARY KEY (category_name, property_name));",
          "93: CREATE TABLE serviceconfig (",
          "",
          "[Removed Lines]",
          "90:   property_value VARCHAR2(2048),",
          "",
          "[Added Lines]",
          "90:   property_value VARCHAR2(4000),",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql": [
          "File: ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql -> ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: CREATE TABLE ambari_configuration (",
          "70:   category_name VARCHAR(100) NOT NULL,",
          "71:   property_name VARCHAR(100) NOT NULL,",
          "73:   CONSTRAINT PK_ambari_configuration PRIMARY KEY (category_name, property_name)",
          "74: );",
          "",
          "[Removed Lines]",
          "72:   property_value VARCHAR(2048),",
          "",
          "[Added Lines]",
          "72:   property_value VARCHAR(4000),",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql": [
          "File: ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql -> ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: CREATE TABLE ambari_configuration (",
          "87:   category_name VARCHAR(100) NOT NULL,",
          "88:   property_name VARCHAR(100) NOT NULL,",
          "90:   CONSTRAINT PK_ambari_configuration PRIMARY KEY (category_name, property_name));",
          "92: CREATE TABLE serviceconfig (",
          "",
          "[Removed Lines]",
          "89:   property_value VARCHAR(2048),",
          "",
          "[Added Lines]",
          "89:   property_value VARCHAR(4000),",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/orm/DBAccessorImplTest.java||ambari-server/src/test/java/org/apache/ambari/server/orm/DBAccessorImplTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/orm/DBAccessorImplTest.java -> ambari-server/src/test/java/org/apache/ambari/server/orm/DBAccessorImplTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "814:     assertFalse(column1.equals(notEqualsColumn1Nullable));",
          "815:   }",
          "817:   @Test",
          "818:   public void testBuildQuery() throws Exception {",
          "819:     String tableName = getFreeTableName();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "817:   @Test",
          "818:   public void testFromSqlTypeToClass() throws Exception {",
          "819:     String tableName = getFreeTableName();",
          "820:     String columnName = \"col1\";",
          "822:     createMyTable(tableName, columnName);",
          "824:     DBAccessorImpl dbAccessor = injector.getInstance(DBAccessorImpl.class);",
          "825:     DBColumnInfo columnInfo =  dbAccessor.getColumnInfo(tableName, columnName);",
          "827:     assertEquals(columnName.toUpperCase(), columnInfo.getName());",
          "828:     assertEquals(String.class, columnInfo.getType());",
          "829:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog274Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog274Test.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog274Test.java -> ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog274Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.ambari.server.upgrade;",
          "20: import static org.apache.ambari.server.upgrade.UpgradeCatalog274.AMBARI_CONFIGURATION_PROPERTY_VALUE_COLUMN;",
          "21: import static org.apache.ambari.server.upgrade.UpgradeCatalog274.AMBARI_CONFIGURATION_PROPERTY_VALUE_COLUMN_LEN;",
          "22: import static org.apache.ambari.server.upgrade.UpgradeCatalog274.AMBARI_CONFIGURATION_TABLE;",
          "23: import static org.easymock.EasyMock.capture;",
          "24: import static org.easymock.EasyMock.eq;",
          "25: import static org.easymock.EasyMock.expectLastCall;",
          "26: import static org.easymock.EasyMock.newCapture;",
          "27: import static org.easymock.EasyMock.replay;",
          "28: import static org.easymock.EasyMock.verify;",
          "30: import org.apache.ambari.server.orm.DBAccessor;",
          "31: import org.easymock.Capture;",
          "32: import org.easymock.CaptureType;",
          "33: import org.easymock.EasyMockSupport;",
          "34: import org.junit.Assert;",
          "35: import org.junit.Before;",
          "36: import org.junit.Test;",
          "38: import com.google.inject.Injector;",
          "40: public class UpgradeCatalog274Test {",
          "42:   private Injector injector;",
          "43:   private DBAccessor dbAccessor;",
          "45:   @Before",
          "46:   public void init() {",
          "47:     final EasyMockSupport easyMockSupport = new EasyMockSupport();",
          "48:     injector = easyMockSupport.createNiceMock(Injector.class);",
          "49:     dbAccessor = easyMockSupport.createNiceMock(DBAccessor.class);",
          "50:   }",
          "52:   @Test",
          "53:   public void testExecuteDDLUpdates() throws Exception {",
          "54:     DBAccessor.DBColumnInfo dbColumnInfo = new DBAccessor.DBColumnInfo(AMBARI_CONFIGURATION_PROPERTY_VALUE_COLUMN,",
          "55:       String.class, 2000);",
          "57:     final Capture<DBAccessor.DBColumnInfo> alterPropertyValueColumnCapture = newCapture(CaptureType.ALL);",
          "58:     dbAccessor.getColumnInfo(eq(AMBARI_CONFIGURATION_TABLE), eq(AMBARI_CONFIGURATION_PROPERTY_VALUE_COLUMN));",
          "59:     expectLastCall().andReturn(dbColumnInfo).once();",
          "61:     dbAccessor.alterColumn(eq(AMBARI_CONFIGURATION_TABLE), capture(alterPropertyValueColumnCapture));",
          "62:     expectLastCall().once();",
          "64:     replay(dbAccessor, injector);",
          "66:     UpgradeCatalog274 upgradeCatalog274 = new UpgradeCatalog274(injector);",
          "67:     upgradeCatalog274.dbAccessor = dbAccessor;",
          "68:     upgradeCatalog274.executeDDLUpdates();",
          "70:     final DBAccessor.DBColumnInfo alterPropertyValueColumn = alterPropertyValueColumnCapture.getValue();",
          "71:     Assert.assertEquals(AMBARI_CONFIGURATION_PROPERTY_VALUE_COLUMN, alterPropertyValueColumn.getName());",
          "72:     Assert.assertEquals(String.class, alterPropertyValueColumn.getType());",
          "73:     Assert.assertEquals(AMBARI_CONFIGURATION_PROPERTY_VALUE_COLUMN_LEN, alterPropertyValueColumn.getLength());",
          "75:     verify(dbAccessor);",
          "76:   }",
          "77: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a112364df203008048448759341e1e4ef9f97563",
      "candidate_info": {
        "commit_hash": "a112364df203008048448759341e1e4ef9f97563",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/a112364df203008048448759341e1e4ef9f97563",
        "files": [
          "ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/params.py",
          "ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/shared_initialization.py"
        ],
        "message": "AMBARI-25235. Add a sysprep configurations to run conf-selects only a single time. (#2920)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/params.py||ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/params.py",
          "ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/shared_initialization.py||ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/shared_initialization.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/params.py||ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/params.py": [
          "File: ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/params.py -> ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/params.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: from resource_management.libraries.functions import stack_select",
          "29: from resource_management.libraries.functions import format_jvm_option",
          "30: from resource_management.libraries.functions.version import format_stack_version, get_major_version",
          "31: from string import lower",
          "33: config = Script.get_config()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: from resource_management.libraries.functions.format import format",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120: stack_select_lock_file = os.path.join(tmp_dir, \"stack_select_lock_file\")",
          "122: upgrade_suspended = default(\"/roleParams/upgrade_suspended\", False)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124: sysprep_skip_conf_select = default(\"/configurations/cluster-env/sysprep_skip_conf_select\", False)",
          "125: conf_select_marker_file = format(\"{tmp_dir}/conf_select_done_marker\")",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/shared_initialization.py||ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/shared_initialization.py": [
          "File: ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/shared_initialization.py -> ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/shared_initialization.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:     Logger.info(\"Could not load 'version' from {0}\".format(struct_out_file))",
          "136:     return",
          "",
          "[Removed Lines]",
          "138:   # On parallel command execution this should be executed by a single process at a time.",
          "139:   with FcntlBasedProcessLock(params.link_configs_lock_file, enabled = params.is_parallel_execution_enabled, skip_fcntl_failures = True):",
          "140:     for package_name, directories in conf_select.get_package_dirs().iteritems():",
          "141:       conf_select.convert_conf_directories_to_symlinks(package_name, json_version, directories)",
          "",
          "[Added Lines]",
          "139:     # On parallel command execution this should be executed by a single process at a time.",
          "140:     with FcntlBasedProcessLock(params.link_configs_lock_file, enabled = params.is_parallel_execution_enabled, skip_fcntl_failures = True):",
          "141:       for package_name, directories in conf_select.get_package_dirs().iteritems():",
          "142:         conf_select.convert_conf_directories_to_symlinks(package_name, json_version, directories)",
          "144:     # create a file to mark that conf-selects were already done",
          "145:     with open(params.conf_select_marker_file, \"wb\") as fp:",
          "146:       pass",
          "147:   else:",
          "148:     Logger.info(format(\"Skipping conf-select stage, since cluster-env/sysprep_skip_conf_select is set and mark file {conf_select_marker_file} exists\"))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "54c20c3f3cea38ef601ea111c83351f02575403d",
      "candidate_info": {
        "commit_hash": "54c20c3f3cea38ef601ea111c83351f02575403d",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/54c20c3f3cea38ef601ea111c83351f02575403d",
        "files": [
          "ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/search/SearchServiceLogsTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/configsets/audit_logs/conf/managed-schema",
          "ambari-logsearch/ambari-logsearch-server/src/main/configsets/hadoop_logs/conf/managed-schema"
        ],
        "message": "AMBARI-25090 - Logsearch should index keywords without the ending periods(.) (#2791)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/search/SearchServiceLogsTest.java||ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/search/SearchServiceLogsTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/search/SearchServiceLogsTest.java||ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/search/SearchServiceLogsTest.java": [
          "File: ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/search/SearchServiceLogsTest.java -> ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/search/SearchServiceLogsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:   @Test",
          "167:   public void testIncludeMultipleTermsDelimitedByDash() throws Exception {",
          "168:     solr.addDoc(\"0\", \"Unhandled exception\");",
          "175:     BaseServiceLogRequest request = new BaseServiceLogQueryRequest();",
          "176:     request.setIncludeQuery(\"[{\\\"log_message\\\":\\\"\\\\\\\"Unhandled-exception\\\\\\\"\\\"}]\");",
          "177:     SolrDocumentList found = executeQuery(request);",
          "180:     assertThat(found, hasItem(solrDoc(\"1\")));",
          "181:   }",
          "183:   @Test",
          "",
          "[Removed Lines]",
          "169:     solr.addDoc(\"1\", \"At line 112 an unhandled-exception occurred when\");",
          "170:     solr.addDoc(\"2\", \"exception occurred\");",
          "171:     solr.addDoc(\"3\", \"exception\");",
          "172:     solr.addDoc(\"4\", \"Unhandled error\");",
          "173:     solr.addDoc(\"5\", \"Error occurred\");",
          "179:     assertThat(found, hasSize(1));",
          "",
          "[Added Lines]",
          "169:     solr.addDoc(\"1\", \"Unhandled+exception\");",
          "170:     solr.addDoc(\"2\", \"At line 112 an unhandled-exception occurred when\");",
          "171:     solr.addDoc(\"3\", \"exception occurred\");",
          "172:     solr.addDoc(\"4\", \"exception\");",
          "173:     solr.addDoc(\"5\", \"Unhandled error\");",
          "174:     solr.addDoc(\"6\", \"Error occurred\");",
          "180:     assertThat(found, hasSize(3));",
          "181:     assertThat(found, hasItem(solrDoc(\"0\")));",
          "183:     assertThat(found, hasItem(solrDoc(\"2\")));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "194:     request.setIncludeQuery(\"[{\\\"log_message\\\":\\\"\\\\\\\"Unhandled+exception\\\\\\\"\\\"}]\");",
          "195:     SolrDocumentList found = executeQuery(request);",
          "198:     assertThat(found, hasItem(solrDoc(\"1\")));",
          "199:   }",
          "201:   @Test",
          "",
          "[Removed Lines]",
          "197:     assertThat(found, hasSize(1));",
          "",
          "[Added Lines]",
          "200:     assertThat(found, hasSize(3));",
          "201:     assertThat(found, hasItem(solrDoc(\"0\")));",
          "203:     assertThat(found, hasItem(solrDoc(\"2\")));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:   @Test",
          "233:   public void testIncludeEMailAddress() throws Exception {",
          "234:     solr.addDoc(\"0\", \"Email address: john@hortonworks.com\");",
          "237:     BaseServiceLogRequest request = new BaseServiceLogQueryRequest();",
          "239:     SolrDocumentList found = executeQuery(request);",
          "242:     assertThat(found, hasItem(solrDoc(\"0\")));",
          "243:   }",
          "246:   private final ServiceLogLevelDateRangeRequestQueryConverter dateRangeRequestQueryConverter = new ServiceLogLevelDateRangeRequestQueryConverter();",
          "260:   private ServiceGraphRequest serviceGraphRequest(String includeQuery) {",
          "261:     ServiceGraphRequest request = new ServiceGraphQueryRequest();",
          "262:     request.setFrom(SOLR_DATETIME_FORMATTER.format(OffsetDateTime.now(ZoneId.of(\"UTC\")).minusDays(1)));",
          "",
          "[Removed Lines]",
          "235:     solr.addDoc(\"1\", \"Another document\");",
          "238:     request.setIncludeQuery(\"[{\\\"log_message\\\":\\\"john@hortonworks.com\\\"}]\");",
          "241:     assertThat(found, hasSize(1));",
          "248:   @Test",
          "249:   public void testDateRangeRequestIncludeEMailAddress() throws Exception {",
          "250:     solr.addDoc(\"0\", \"Email address: john@hortonworks.com\");",
          "251:     solr.addDoc(\"1\", \"Another document doe@hortonworks.com\");",
          "253:     ServiceGraphRequest request = serviceGraphRequest(\"[{\\\"log_message\\\":\\\"john@hortonworks.com\\\"}]\");",
          "254:     NamedList<List<PivotField>> found = executeQuery(request);",
          "256:     assertThat(found.size(), is(1));",
          "257:     assertThat(found.get(\"level\").get(0).getCount(), is(1));",
          "258:   }",
          "",
          "[Added Lines]",
          "240:     solr.addDoc(\"1\", \"Another document doe@hortonworks.com\");",
          "241:     solr.addDoc(\"2\", \"Another document without email address\");",
          "242:     solr.addDoc(\"3\", \"Just a name and a domain name: john hortonworks.com\");",
          "243:     solr.addDoc(\"4\", \"Hi name is John Domain name: hortonworks.com\");",
          "245:     request.setIncludeQuery(\"[{\\\"log_message\\\":\\\"\\\\\\\"john@hortonworks.com\\\\\\\"\\\"}]\");",
          "248:     assertThat(found, hasSize(2));",
          "250:     assertThat(found, hasItem(solrDoc(\"3\")));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "327:     NamedList<List<PivotField>> found = executeQuery(request);",
          "329:     assertThat(found.size(), is(1));",
          "331:   }",
          "333:   @Test",
          "",
          "[Removed Lines]",
          "330:     assertThat(found.get(\"level\").get(0).getCount(), is(1));",
          "",
          "[Added Lines]",
          "326:     assertThat(found.get(\"level\").get(0).getCount(), is(2));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "344:     NamedList<List<PivotField>> found = executeQuery(request);",
          "346:     assertThat(found.size(), is(1));",
          "348:   }",
          "350:   @Test",
          "",
          "[Removed Lines]",
          "347:     assertThat(found.get(\"level\").get(0).getCount(), is(1));",
          "",
          "[Added Lines]",
          "343:     assertThat(found.get(\"level\").get(0).getCount(), is(3));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "373:     assertThat(found.size(), is(1));",
          "374:     assertThat(found.get(\"level\").get(0).getCount(), is(3));",
          "375:   }",
          "376: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373:   @Test",
          "374:   public void testSearchTermEndsWithDot() throws Exception {",
          "375:     solr.addDoc(\"0\", \"Caught exception checkIn.\");",
          "376:     solr.addDoc(\"1\", \"Caught exception checkIn\");",
          "377:     solr.addDoc(\"2\", \"Caught exception other\");",
          "379:     BaseServiceLogRequest request = new BaseServiceLogQueryRequest();",
          "380:     request.setIncludeQuery(\"[{\\\"log_message\\\":\\\"\\\\\\\"checkIn\\\\\\\"\\\"}]\");",
          "381:     SolrDocumentList found = executeQuery(request);",
          "383:     assertThat(found, hasSize(2));",
          "384:     assertThat(found, hasItem(solrDoc(\"0\")));",
          "385:     assertThat(found, hasItem(solrDoc(\"1\")));",
          "386:   }",
          "388:   @Test",
          "389:   public void testSearchPhraseContainsStar() throws Exception {",
          "390:     solr.addDoc(\"0\", \"Caught exception- checkIn\");",
          "392:     BaseServiceLogRequest request = new BaseServiceLogQueryRequest();",
          "393:     request.setIncludeQuery(\"[{\\\"log_message\\\":\\\"\\\\\\\"Caught exception*\\\\\\\"\\\"}]\");",
          "394:     SolrDocumentList found = executeQuery(request);",
          "396:     assertThat(found, hasSize(1));",
          "397:     assertThat(found, hasItem(solrDoc(\"0\")));",
          "398:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "853fa627eb00a17dbd32ffd796edce3786d812d7",
      "candidate_info": {
        "commit_hash": "853fa627eb00a17dbd32ffd796edce3786d812d7",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/853fa627eb00a17dbd32ffd796edce3786d812d7",
        "files": [
          "ambari-common/src/main/python/ambari_commons/os_check.py"
        ],
        "message": "AMBARI-24456. Ambari server can not start on latest Amazon Linux 2 (aonishuk)",
        "before_after_code_files": [
          "ambari-common/src/main/python/ambari_commons/os_check.py||ambari-common/src/main/python/ambari_commons/os_check.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-common/src/main/python/ambari_commons/os_check.py||ambari-common/src/main/python/ambari_commons/os_check.py": [
          "File: ambari-common/src/main/python/ambari_commons/os_check.py -> ambari-common/src/main/python/ambari_commons/os_check.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: _IS_ORACLE_LINUX = os.path.exists('/etc/oracle-release')",
          "79: _IS_REDHAT_LINUX = os.path.exists('/etc/redhat-release')",
          "83: def _is_oracle_linux():",
          "84:   return _IS_ORACLE_LINUX",
          "",
          "[Removed Lines]",
          "81: SYSTEM_RELEASE_FILE = \"/etc/system-release\"",
          "",
          "[Added Lines]",
          "81: OS_RELEASE_FILE = \"/etc/os-release\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92: def advanced_check(distribution):",
          "93:   distribution = list(distribution)",
          "99:       distribution[0] = \"amazonlinux\"",
          "102:       if search_groups:",
          "103:         distribution[1] = search_groups.group(1)",
          "",
          "[Removed Lines]",
          "94:   if os.path.exists(SYSTEM_RELEASE_FILE):",
          "95:     with open(SYSTEM_RELEASE_FILE, \"rb\") as fp:",
          "96:       issue_content = fp.read()",
          "98:     if \"Amazon\" in issue_content:",
          "100:       search_groups = re.search(' release (\\d+)', issue_content)",
          "",
          "[Added Lines]",
          "94:   if os.path.exists(OS_RELEASE_FILE):",
          "95:     with open(OS_RELEASE_FILE, \"rb\") as fp:",
          "96:       file_content = fp.read()",
          "98:     search_groups = re.search('NAME=\"(.+)\"', file_content)",
          "99:     name = search_groups.group(1) if search_groups else ''",
          "101:     if \"amazon\" in name.lower():",
          "103:       search_groups = re.search('VERSION_ID=\"(\\d+)\"', file_content)",
          "",
          "---------------"
        ]
      }
    }
  ]
}