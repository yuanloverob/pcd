{
  "cve_id": "CVE-2019-1139",
  "cve_desc": "",
  "repo": "chakra-core/ChakraCore",
  "patch_hash": "ae8a8d9644e677a9878e5dd7824d4b876454e799",
  "patch_info": {
    "commit_hash": "ae8a8d9644e677a9878e5dd7824d4b876454e799",
    "repo": "chakra-core/ChakraCore",
    "commit_url": "https://github.com/chakra-core/ChakraCore/commit/ae8a8d9644e677a9878e5dd7824d4b876454e799",
    "files": [
      "lib/Backend/GlobOpt.cpp",
      "lib/Backend/GlobOptFields.cpp"
    ],
    "message": "[CVE-2019-1139] Chakra JIT Type Confusion\n\narray.slice converts the native array to var array which was not captured during the optimization.\nDue to that the native array type is forced to var array which leads to the type confusion.\nFixed this by killing the object type for the slice (as well as concat)",
    "before_after_code_files": [
      "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
      "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp"
    ]
  },
  "patch_diff": {
    "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp": [
      "File: lib/Backend/GlobOpt.cpp -> lib/Backend/GlobOpt.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "13470:                     case IR::HelperArray_Splice:",
      "13471:                     case IR::HelperArray_Unshift:",
      "13472:                     case IR::HelperArray_Concat:",
      "13473:                         kills.SetKillsArrayHeadSegments();",
      "13474:                         kills.SetKillsArrayHeadSegmentLengths();",
      "13475:                         break;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13473:                     case IR::HelperArray_Slice:",
      "",
      "---------------"
    ],
    "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp": [
      "File: lib/Backend/GlobOptFields.cpp -> lib/Backend/GlobOptFields.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "518:                 }",
      "519:                 break;",
      "521:             case IR::JnHelperMethod::HelperRegExp_Exec:",
      "522:             case IR::JnHelperMethod::HelperRegExp_ExecResultNotUsed:",
      "523:             case IR::JnHelperMethod::HelperRegExp_ExecResultUsed:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "521:             case IR::JnHelperMethod::HelperArray_Slice:",
      "522:             case IR::JnHelperMethod::HelperArray_Concat:",
      "523:                 if (inGlobOpt && this->objectTypeSyms)",
      "524:                 {",
      "525:                     if (this->currentBlock->globOptData.maybeWrittenTypeSyms == nullptr)",
      "526:                     {",
      "527:                         this->currentBlock->globOptData.maybeWrittenTypeSyms = JitAnew(this->alloc, BVSparse<JitArenaAllocator>, this->alloc);",
      "528:                     }",
      "529:                     this->currentBlock->globOptData.maybeWrittenTypeSyms->Or(this->objectTypeSyms);",
      "530:                 }",
      "531:                 break;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bf52b6cfa96d6395046d0aaf87396cd7ca13f6cb",
      "candidate_info": {
        "commit_hash": "bf52b6cfa96d6395046d0aaf87396cd7ca13f6cb",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/bf52b6cfa96d6395046d0aaf87396cd7ca13f6cb",
        "files": [
          "lib/Backend/GlobOptIntBounds.cpp"
        ],
        "message": "[CVE-2019-1197] Chakra JIT Type Confusion",
        "before_after_code_files": [
          "lib/Backend/GlobOptIntBounds.cpp||lib/Backend/GlobOptIntBounds.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Backend/GlobOptIntBounds.cpp||lib/Backend/GlobOptIntBounds.cpp": [
          "File: lib/Backend/GlobOptIntBounds.cpp -> lib/Backend/GlobOptIntBounds.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1278:     }",
          "1282:     for (Loop * loop = this->currentBlock->loop; loop; loop = loop->parent)",
          "1283:     {",
          "1286:         {",
          "1288:         }",
          "1289:     }",
          "1290: }",
          "",
          "[Removed Lines]",
          "1284:         InductionVariable *iv = nullptr;",
          "1285:         if (loop->inductionVariables && loop->inductionVariables->TryGetReference(dstSym->m_id, &iv))",
          "1287:             iv->SetChangeIsIndeterminate();",
          "",
          "[Added Lines]",
          "1288:         if (loop->inductionVariables && loop->inductionVariables->ContainsKey(dstSym->m_id))",
          "1290:             for (auto it = loop->inductionVariables->GetIterator(); it.IsValid(); it.MoveNext())",
          "1291:             {",
          "1292:                 InductionVariable& inductionVariable = it.CurrentValueReference();",
          "1293:                 inductionVariable.SetChangeIsIndeterminate();",
          "1294:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "329d9d213e7b286349c0b156be4b5a088555de90",
      "candidate_info": {
        "commit_hash": "329d9d213e7b286349c0b156be4b5a088555de90",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/329d9d213e7b286349c0b156be4b5a088555de90",
        "files": [
          "lib/Backend/GlobOpt.cpp",
          "lib/Backend/GlobOpt.h",
          "lib/Backend/GlobOptFields.cpp"
        ],
        "message": "[CVE-2019-1141] Chakra JIT Type Confusion\n\nDuring the loop prepass the index variable is not fully constructed, so we can't rely it being negative\nSo we need to kiil the object type.",
        "before_after_code_files": [
          "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
          "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h",
          "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [
            "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
            "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp"
          ],
          "candidate": [
            "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
            "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp": [
          "File: lib/Backend/GlobOpt.cpp -> lib/Backend/GlobOpt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2695: }",
          "2697: bool",
          "2699: {",
          "2700:     if (opnd == nullptr)",
          "2701:     {",
          "",
          "[Removed Lines]",
          "2698: GlobOpt::IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt) const",
          "",
          "[Added Lines]",
          "2698: GlobOpt::IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt, bool *isSafeToTransferInPrepass /*=nullptr*/) const",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2725:         {",
          "2726:             return true;",
          "2727:         }",
          "2728:         if (this->prePassLoop->preservesNumberValue->Test(opnd->m_sym->m_id))",
          "2729:         {",
          "2730:             return false;",
          "2731:         }",
          "2734:     }",
          "2736:     return true;",
          "",
          "[Removed Lines]",
          "2733:         return !this->IsSafeToTransferInPrepass(opnd->m_sym, opndValueInfo);",
          "",
          "[Added Lines]",
          "2729:         bool isSafeToTransfer = this->IsSafeToTransferInPrepass(opnd->m_sym, opndValueInfo);",
          "2730:         if (isSafeToTransferInPrepass != nullptr)",
          "2731:         {",
          "2733:         }",
          "2739:         return !isSafeToTransfer;",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h": [
          "File: lib/Backend/GlobOpt.h -> lib/Backend/GlobOpt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "773:                                                 const bool lossy = false, const bool forceInvariantHoisting = false, IR::BailOutKind bailoutKind = IR::BailOutInvalid);",
          "774:     void                    HoistInvariantValueInfo(ValueInfo *const invariantValueInfoToHoist, Value *const valueToUpdate, BasicBlock *const targetBlock);",
          "775:     void                    OptHoistUpdateValueType(Loop* loop, IR::Instr* instr, IR::Opnd** srcOpndPtr, Value *const srcVal);",
          "778: public:",
          "779:     static bool             IsTypeSpecPhaseOff(Func const * func);",
          "",
          "[Removed Lines]",
          "776:     bool                    IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt) const;",
          "",
          "[Added Lines]",
          "776:     bool                    IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt, bool *isSafeToTransferInPrepass = nullptr) const;",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp": [
          "File: lib/Backend/GlobOptFields.cpp -> lib/Backend/GlobOptFields.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:     {",
          "230:         this->KillAllFields(bv); // This also kills all property type values, as the same bit-vector tracks those stack syms",
          "231:         SetAnyPropertyMayBeWrittenTo();",
          "",
          "[Removed Lines]",
          "228:     if (func->GetThisOrParentInlinerHasArguments() || this->IsNonNumericRegOpnd(indexOpnd, inGlobOpt))",
          "",
          "[Added Lines]",
          "228:     bool isSafeToTransfer = true;",
          "229:     if (func->GetThisOrParentInlinerHasArguments() || this->IsNonNumericRegOpnd(indexOpnd, inGlobOpt, &isSafeToTransfer))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "236:         ValueInfo * indexValueInfo = indexValue ? indexValue->GetValueInfo() : nullptr;",
          "237:         int indexLowerBound = 0;",
          "240:         {",
          "242:             this->KillAllObjectTypes(bv);",
          "",
          "[Removed Lines]",
          "239:         if (indirOpnd->GetOffset() < 0 || (indexOpnd && (!indexValueInfo || !indexValueInfo->TryGetIntConstantLowerBound(&indexLowerBound, false) || indexLowerBound < 0)))",
          "",
          "[Added Lines]",
          "240:         if (!isSafeToTransfer || indirOpnd->GetOffset() < 0 || (indexOpnd && (!indexValueInfo || !indexValueInfo->TryGetIntConstantLowerBound(&indexLowerBound, false) || indexLowerBound < 0)))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "450a349fda1b153d758a9e01698b977e60870e4c",
      "candidate_info": {
        "commit_hash": "450a349fda1b153d758a9e01698b977e60870e4c",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/450a349fda1b153d758a9e01698b977e60870e4c",
        "files": [
          "Build/NuGet/.pack-version",
          "lib/Common/ChakraCoreVersion.h"
        ],
        "message": "Update version to 1.11.12",
        "before_after_code_files": [
          "lib/Common/ChakraCoreVersion.h||lib/Common/ChakraCoreVersion.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Common/ChakraCoreVersion.h||lib/Common/ChakraCoreVersion.h": [
          "File: lib/Common/ChakraCoreVersion.h -> lib/Common/ChakraCoreVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #define CHAKRA_CORE_MAJOR_VERSION 1",
          "19: #define CHAKRA_CORE_MINOR_VERSION 11",
          "21: #define CHAKRA_CORE_VERSION_RELEASE_QFE 0 // Redundant with PATCH_VERSION. Keep this value set to 0.",
          "",
          "[Removed Lines]",
          "20: #define CHAKRA_CORE_PATCH_VERSION 11",
          "",
          "[Added Lines]",
          "20: #define CHAKRA_CORE_PATCH_VERSION 12",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "242c59ea40c0428e1ced7366bf2c28bfbdda1999",
      "candidate_info": {
        "commit_hash": "242c59ea40c0428e1ced7366bf2c28bfbdda1999",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/242c59ea40c0428e1ced7366bf2c28bfbdda1999",
        "files": [
          "lib/Parser/Parse.cpp"
        ],
        "message": "[CVE-2019-1131] Chakra Type confusion",
        "before_after_code_files": [
          "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp": [
          "File: lib/Parser/Parse.cpp -> lib/Parser/Parse.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4664:                     }",
          "4665:                 }",
          "4672:                 bool couldBeObjectPattern = !isObjectPattern && m_token.tk == tkAsg;",
          "",
          "[Removed Lines]",
          "4667:                 if (buildAST)",
          "4668:                 {",
          "4669:                     CheckArgumentsUse(pidHint, GetCurrentFunctionNode());",
          "4670:                 }",
          "",
          "[Added Lines]",
          "4667:                 CheckArgumentsUse(pidHint, GetCurrentFunctionNode());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dce7443ae45f82eceec3284974610e1a1bbe6792",
      "candidate_info": {
        "commit_hash": "dce7443ae45f82eceec3284974610e1a1bbe6792",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/dce7443ae45f82eceec3284974610e1a1bbe6792",
        "files": [
          "lib/Backend/BackwardPass.cpp",
          "lib/Backend/JnHelperMethodList.h",
          "lib/Backend/Lower.cpp",
          "lib/Backend/Lower.h",
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/ByteCode/OpCodes.h",
          "lib/Runtime/Language/InterpreterHandler.inl",
          "lib/Runtime/Language/JavascriptConversion.cpp",
          "lib/Runtime/Language/JavascriptConversion.h",
          "lib/Runtime/Language/JavascriptOperators.cpp",
          "lib/Runtime/Language/JavascriptOperators.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
        ],
        "message": "[CVE-2019-1196] Chakra Builtins Function Type Confusion",
        "before_after_code_files": [
          "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp",
          "lib/Backend/JnHelperMethodList.h||lib/Backend/JnHelperMethodList.h",
          "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
          "lib/Backend/Lower.h||lib/Backend/Lower.h",
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h",
          "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl",
          "lib/Runtime/Language/JavascriptConversion.cpp||lib/Runtime/Language/JavascriptConversion.cpp",
          "lib/Runtime/Language/JavascriptConversion.h||lib/Runtime/Language/JavascriptConversion.h",
          "lib/Runtime/Language/JavascriptOperators.cpp||lib/Runtime/Language/JavascriptOperators.cpp",
          "lib/Runtime/Language/JavascriptOperators.h||lib/Runtime/Language/JavascriptOperators.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp": [
          "File: lib/Backend/BackwardPass.cpp -> lib/Backend/BackwardPass.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6555:             case Js::OpCode::Coerce_Regex:",
          "6556:             case Js::OpCode::Coerce_StrOrRegex:",
          "6557:             case Js::OpCode::Conv_PrimStr:",
          "6559:                 SetNegativeZeroDoesNotMatterIfLastUse(instr->GetSrc1());",
          "6560:                 SetNegativeZeroDoesNotMatterIfLastUse(instr->GetSrc2());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6558:             case Js::OpCode::Conv_Prop:",
          "",
          "---------------"
        ],
        "lib/Backend/JnHelperMethodList.h||lib/Backend/JnHelperMethodList.h": [
          "File: lib/Backend/JnHelperMethodList.h -> lib/Backend/JnHelperMethodList.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "134: HELPERCALL_MATH(Op_MinInAnArray, Js::JavascriptMath::MinInAnArray, AttrCanThrow)",
          "136: HELPERCALLCHK(Op_ConvString, Js::JavascriptConversion::ToString, AttrCanThrow)",
          "137: HELPERCALLCHK(Op_CoerseString, Js::JavascriptConversion::CoerseString, AttrCanThrow)",
          "138: HELPERCALLCHK(Op_CoerseRegex, (Js::JavascriptRegExp* (*) (Js::Var aValue, Js::Var options, Js::ScriptContext *scriptContext))Js::JavascriptRegExp::CreateRegEx, AttrCanThrow)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: HELPERCALLCHK(Op_ConvPropertyKey, Js::JavascriptOperators::OP_ToPropertyKey, AttrCanThrow)",
          "",
          "---------------"
        ],
        "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp": [
          "File: lib/Backend/Lower.cpp -> lib/Backend/Lower.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2826:             this->LowerConvPrimStr(instr);",
          "2827:             break;",
          "2829:         case Js::OpCode::ClearAttributes:",
          "2830:             this->LowerBinaryHelper(instr, IR::HelperOP_ClearAttributes);",
          "2831:             break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2829:         case Js::OpCode::Conv_Prop:",
          "2830:             this->LowerConvPropertyKey(instr);",
          "2831:             break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25474:     return dstOpnd;",
          "25475: }",
          "25477: void",
          "25478: Lowerer::LowerConvStrCommon(IR::JnHelperMethod helper,  IR::Instr * instr)",
          "25479: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25481: void",
          "25482: Lowerer::LowerConvPropertyKey(IR::Instr* instr)",
          "25483: {",
          "25484:     LowerConvStrCommon(IR::HelperOp_ConvPropertyKey, instr);",
          "25485: }",
          "",
          "---------------"
        ],
        "lib/Backend/Lower.h||lib/Backend/Lower.h": [
          "File: lib/Backend/Lower.h -> lib/Backend/Lower.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "670:     void            LowerConvPrimStr(IR::Instr * instr);",
          "671:     void            LowerConvStrCommon(IR::JnHelperMethod helper, IR::Instr * instr);",
          "673:     void            GenerateRecyclerAlloc(IR::JnHelperMethod allocHelper, size_t allocSize, IR::RegOpnd* newObjDst, IR::Instr* insertionPointInstr, bool inOpHelper = false);",
          "675:     template <typename ArrayType>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "673:     void            LowerConvPropertyKey(IR::Instr* instr);",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h": [
          "File: lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h -> lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: const GUID byteCodeCacheReleaseFileVersion =",
          "",
          "[Removed Lines]",
          "10: { 0x26894CEE, 0xB780, 0x4CD4, { 0xB7, 0x93, 0x7B, 0x09, 0x72, 0xAE, 0xED, 0xD9 } };",
          "",
          "[Added Lines]",
          "10: { 0x3096a219, 0x129d, 0x4a4a, { 0xa6, 0x1c, 0x18, 0x6d, 0x3, 0xbb, 0x25, 0xb7 } };",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp": [
          "File: lib/Runtime/ByteCode/ByteCodeEmitter.cpp -> lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "223: }",
          "225: bool ApplyEnclosesArgs(ParseNode* fncDecl, ByteCodeGenerator* byteCodeGenerator);",
          "228: bool IsExpressionStatement(ParseNode* stmt, const Js::ScriptContext *const scriptContext);",
          "229: void EmitInvoke(Js::RegSlot location, Js::RegSlot callObjLocation, Js::PropertyId propertyId, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo);",
          "230: void EmitInvoke(Js::RegSlot location, Js::RegSlot callObjLocation, Js::PropertyId propertyId, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, Js::RegSlot arg1Location);",
          "",
          "[Removed Lines]",
          "226: void Emit(ParseNode *pnode, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, BOOL fReturnValue, bool isConstructorCall = false, ParseNode *bindPnode = nullptr, bool isTopLevel = false);",
          "227: void EmitBinaryOpnds(ParseNode *pnode1, ParseNode *pnode2, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo);",
          "",
          "[Added Lines]",
          "226: void Emit(ParseNode* pnode, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, BOOL fReturnValue, bool isConstructorCall = false, Js::RegSlot bindingNameLocation = Js::Constants::NoRegister, bool isTopLevel = false);",
          "227: void EmitBinaryOpnds(ParseNode* pnode1, ParseNode* pnode2, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, Js::RegSlot computedPropertyLocation = Js::Constants::NoRegister);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "953:         EndStatement(stmt);",
          "954:     }",
          "957:     if (funcInfo->IsTmpReg(stmt->location))",
          "958:     {",
          "959:         if (!stmt->isUsed && !fReturnValue)",
          "",
          "[Removed Lines]",
          "956:     Emit(stmt, this, funcInfo, fReturnValue, false/*isConstructorCall*/, nullptr/*bindPnode*/, true/*isTopLevel*/);",
          "",
          "[Added Lines]",
          "956:     Emit(stmt, this, funcInfo, fReturnValue, false/*isConstructorCall*/, Js::Constants::NoRegister/*computedPropertyLocation*/, true/*isTopLevel*/);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8224:     byteCodeGenerator->Writer()->CallI(Js::OpCode::CallI, location, location, 2, callSiteId);",
          "8225: }",
          "8243: void EmitMemberNode(ParseNode *memberNode, Js::RegSlot objectLocation, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, ParseNode* parentNode, bool useStore, bool* isObjectEmpty = nullptr)",
          "8244: {",
          "8245:     ParseNode *nameNode = memberNode->AsParseNodeBin()->pnode1;",
          "",
          "[Removed Lines]",
          "8227: void EmitComputedFunctionNameVar(ParseNode *nameNode, ParseNodeFnc *exprNode, ByteCodeGenerator *byteCodeGenerator)",
          "8228: {",
          "8229:     AssertMsg(exprNode != nullptr, \"callers of this function should pass in a valid expression Node\");",
          "8230:     Assert(exprNode->HasComputedName());",
          "8232:     if (nameNode == nullptr)",
          "8233:     {",
          "8234:         return;",
          "8235:     }",
          "8237:     if (exprNode->pnodeName == nullptr)",
          "8238:     {",
          "8239:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::SetComputedNameVar, exprNode->location, nameNode->location);",
          "8240:     }",
          "8241: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8254:         exprNode->AsParseNodeFnc()->SetHomeObjLocation(objectLocation);",
          "8255:     }",
          "8259:     if (nameNode->nop == knopComputedName)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8241:     Js::RegSlot computedNamePropertyKey = Js::Constants::NoRegister;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8264:         nameNode->location = nameNode->AsParseNodeUni()->pnode1->location;",
          "8267:         {",
          "8269:         }",
          "8270:     }",
          "",
          "[Removed Lines]",
          "8265:         EmitBinaryOpnds(nameNode, exprNode, byteCodeGenerator, funcInfo);",
          "8266:         if (isFncDecl && !exprNode->AsParseNodeFnc()->IsClassConstructor())",
          "8268:             EmitComputedFunctionNameVar(nameNode, exprNode->AsParseNodeFnc(), byteCodeGenerator);",
          "",
          "[Added Lines]",
          "8251:         computedNamePropertyKey = funcInfo->AcquireTmpRegister();",
          "8253:         EmitBinaryOpnds(nameNode, exprNode, byteCodeGenerator, funcInfo, computedNamePropertyKey);",
          "8255:         if (isFncDecl && !exprNode->AsParseNodeFnc()->IsClassConstructor() && exprNode->AsParseNodeFnc()->pnodeName == nullptr)",
          "8257:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::SetComputedNameVar, exprNode->location, computedNamePropertyKey);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "8289:             (isClassMember ? Js::OpCode::InitClassMemberSetComputedName : Js::OpCode::InitSetElemI) :",
          "8290:             (isClassMember ? Js::OpCode::InitClassMemberComputedName : Js::OpCode::InitComputedProperty);",
          "8294:         funcInfo->ReleaseLoc(exprNode);",
          "8295:         funcInfo->ReleaseLoc(nameNode);",
          "8297:         return;",
          "8298:     }",
          "",
          "[Removed Lines]",
          "8292:         byteCodeGenerator->Writer()->Element(setOp, exprNode->location, objectLocation, nameNode->location, true);",
          "",
          "[Added Lines]",
          "8281:         byteCodeGenerator->Writer()->Element(setOp, exprNode->location, objectLocation, computedNamePropertyKey, true);",
          "8285:         funcInfo->ReleaseTmpRegister(computedNamePropertyKey);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "9578:     }",
          "9579: }",
          "9582: {",
          "9584:     if (MayHaveSideEffectOnNode(pnode1, pnode2))",
          "",
          "[Removed Lines]",
          "9581: void EmitBinaryOpnds(ParseNode *pnode1, ParseNode *pnode2, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo)",
          "",
          "[Added Lines]",
          "9571: void EmitBinaryOpnds(ParseNode *pnode1, ParseNode *pnode2, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, Js::RegSlot computedPropertyLocation)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "9589:     Emit(pnode1, byteCodeGenerator, funcInfo, false);",
          "9597:     {",
          "9599:     }",
          "9600: }",
          "9602: void EmitBinaryReference(ParseNode *pnode1, ParseNode *pnode2, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, BOOL fLoadLhs)",
          "",
          "[Removed Lines]",
          "9591:     if (pnode1->nop == knopComputedName && pnode2->nop == knopClassDecl &&",
          "9592:         (pnode2->AsParseNodeClass()->pnodeConstructor == nullptr || pnode2->AsParseNodeClass()->pnodeConstructor->nop != knopVarDecl))",
          "9593:     {",
          "9594:         Emit(pnode2, byteCodeGenerator, funcInfo, false, false, pnode1);",
          "9595:     }",
          "9596:     else",
          "9598:         Emit(pnode2, byteCodeGenerator, funcInfo, false);",
          "",
          "[Added Lines]",
          "9581:     if (pnode1->nop == knopComputedName && computedPropertyLocation != Js::Constants::NoRegister)",
          "9583:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::Conv_Prop, computedPropertyLocation, pnode1->location);",
          "9586:     Emit(pnode2, byteCodeGenerator, funcInfo, false, false, computedPropertyLocation);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "10142:     }",
          "10143: }",
          "10146: {",
          "10147:     if (pnode == nullptr)",
          "10148:     {",
          "",
          "[Removed Lines]",
          "10145: void Emit(ParseNode *pnode, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, BOOL fReturnValue, bool isConstructorCall, ParseNode * bindPnode, bool isTopLevel)",
          "",
          "[Added Lines]",
          "10132: void Emit(ParseNode *pnode, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, BOOL fReturnValue, bool isConstructorCall, Js::RegSlot bindingNameLocation, bool isTopLevel)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "10968:         Emit(pnodeClass->pnodeConstructor, byteCodeGenerator, funcInfo, false);",
          "10970:         if (pnodeClass->pnodeExtends)",
          "10971:         {",
          "10972:             byteCodeGenerator->StartStatement(pnodeClass->pnodeExtends);",
          "",
          "[Removed Lines]",
          "10969:         EmitComputedFunctionNameVar(bindPnode, pnodeClass->pnodeConstructor, byteCodeGenerator);",
          "",
          "[Added Lines]",
          "10957:         if (bindingNameLocation != Js::Constants::NoRegister && !pnodeClass->pnodeConstructor->pnodeName)",
          "10958:         {",
          "10959:             Assert(pnodeClass->pnodeConstructor->HasComputedName());",
          "10960:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::SetComputedNameVar, pnodeClass->pnodeConstructor->location, bindingNameLocation);",
          "10961:         }",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h": [
          "File: lib/Runtime/ByteCode/OpCodes.h -> lib/Runtime/ByteCode/OpCodes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "320: MACRO_WMS(              Conv_Num,           Reg2,           OpSideEffect|OpTempNumberProducing|OpTempNumberTransfer|OpTempObjectSources|OpOpndHasImplicitCall|OpProducesNumber) // Convert to Number. [[ToNumber()]]",
          "322: MACRO_EXTEND_WMS(       Conv_Str,           Reg2,           OpOpndHasImplicitCall|OpTempNumberSources|OpTempObjectSources|OpCanCSE|OpPostOpDbgBailOut)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324: MACRO_EXTEND_WMS(       Conv_Prop,          Reg2,           OpOpndHasImplicitCall|OpTempNumberSources|OpTempObjectSources|OpCanCSE|OpPostOpDbgBailOut)",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl": [
          "File: lib/Runtime/Language/InterpreterHandler.inl -> lib/Runtime/Language/InterpreterHandler.inl",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:   DEF3_WMS(CALL,                    ProfiledReturnTypeCallIExtendedFlags,    PROFILEDOP(OP_ProfiledReturnTypeCallIExtendedFlags, OP_CallIExtendedFlags), ProfiledCallIExtendedFlags)",
          "96: EXDEF2_WMS(A1toA1Mem,               Conv_Str,                   JavascriptConversion::ToString)",
          "97:   DEF2_WMS(A1toA1Mem,               Conv_Obj,                   JavascriptOperators::ToObject)",
          "98: EXDEF2_WMS(A1toA1Mem,               NewUnscopablesWrapperObject,JavascriptOperators::ToUnscopablesWrapperObject)",
          "99:   DEF2_WMS(A1toA1Mem,               Conv_Num,                   JavascriptOperators::ToNumber)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97: EXDEF2_WMS(A1toA1Mem,               Conv_Prop,                  JavascriptOperators::OP_ToPropertyKey)",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptConversion.cpp||lib/Runtime/Language/JavascriptConversion.cpp": [
          "File: lib/Runtime/Language/JavascriptConversion.cpp -> lib/Runtime/Language/JavascriptConversion.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:         Var argument,",
          "272:         _In_ ScriptContext* scriptContext,",
          "273:         _Out_ const PropertyRecord** propertyRecord,",
          "",
          "[Removed Lines]",
          "270:     void JavascriptConversion::ToPropertyKey(",
          "",
          "[Added Lines]",
          "270:     Var JavascriptConversion::ToPropertyKey(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "289:             {",
          "290:                 propertyString = PropertyString::UnsafeFromVar(propName);",
          "291:             }",
          "292:         }",
          "294:         if (propString)",
          "295:         {",
          "297:         }",
          "298:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "292:             key = propName;",
          "300:         return key;",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptConversion.h||lib/Runtime/Language/JavascriptConversion.h": [
          "File: lib/Runtime/Language/JavascriptConversion.h -> lib/Runtime/Language/JavascriptConversion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:         static Var ToPrimitive(_In_ Var aValue, _In_ ScriptContext * scriptContext);",
          "18:         static BOOL CanonicalNumericIndexString(JavascriptString *aValue, double *indexValue, ScriptContext * scriptContext);",
          "21:             Var argument,",
          "22:             _In_ ScriptContext* scriptContext,",
          "23:             _Out_ const PropertyRecord** propertyRecord,",
          "",
          "[Removed Lines]",
          "20:         static void ToPropertyKey(",
          "",
          "[Added Lines]",
          "20:         static Var ToPropertyKey(",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptOperators.cpp||lib/Runtime/Language/JavascriptOperators.cpp": [
          "File: lib/Runtime/Language/JavascriptOperators.cpp -> lib/Runtime/Language/JavascriptOperators.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5208:         JIT_HELPER_END(Op_DeleteElementI);",
          "5209:     }",
          "5211:     Var JavascriptOperators::OP_GetLength(Var instance, ScriptContext* scriptContext)",
          "5212:     {",
          "5213:         return JavascriptOperators::OP_GetProperty(instance, PropertyIds::length, scriptContext);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5211:     Var JavascriptOperators::OP_ToPropertyKey(Js::Var argument, ScriptContext* scriptContext)",
          "5212:     {",
          "5213:         JIT_HELPER_REENTRANT_HEADER(Op_ConvPropertyKey);",
          "5214:         PropertyRecord const* unused = nullptr;",
          "5215:         return JavascriptConversion::ToPropertyKey(argument, scriptContext, &unused, nullptr);",
          "5216:         JIT_HELPER_END(Op_ConvPropertyKey);",
          "5217:     }",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptOperators.h||lib/Runtime/Language/JavascriptOperators.h": [
          "File: lib/Runtime/Language/JavascriptOperators.h -> lib/Runtime/Language/JavascriptOperators.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "453:         static Var OP_CmGt_A(Js::Var a,Js::Var b,ScriptContext* scriptContext);",
          "454:         static Var OP_CmGe_A(Js::Var a,Js::Var b,ScriptContext* scriptContext);",
          "456:         static FunctionInfo * GetConstructorFunctionInfo(Var instance, ScriptContext * scriptContext);",
          "458:         static DetachedStateBase* DetachVarAndGetState(Var var, bool queueForDelayFree = true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "456:         static Var OP_ToPropertyKey(Js::Var argument, ScriptContext* scriptContext);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h -> lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h -> lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h -> lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h -> lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
        ]
      }
    }
  ]
}