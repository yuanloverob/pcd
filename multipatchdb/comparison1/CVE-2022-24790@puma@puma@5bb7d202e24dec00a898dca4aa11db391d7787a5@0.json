{
  "cve_id": "CVE-2022-24790",
  "cve_desc": "Puma is a simple, fast, multi-threaded, parallel HTTP 1.1 server for Ruby/Rack applications. When using Puma behind a proxy that does not properly validate that the incoming HTTP request matches the RFC7230 standard, Puma and the frontend proxy may disagree on where a request starts and ends. This would allow requests to be smuggled via the front-end proxy to Puma. The vulnerability has been fixed in 5.6.4 and 4.3.12. Users are advised to upgrade as soon as possible. Workaround: when deploying a proxy in front of Puma, turning on any and all functionality to make sure that the request matches the RFC7230 standard.",
  "repo": "puma/puma",
  "patch_hash": "5bb7d202e24dec00a898dca4aa11db391d7787a5",
  "patch_info": {
    "commit_hash": "5bb7d202e24dec00a898dca4aa11db391d7787a5",
    "repo": "puma/puma",
    "commit_url": "https://github.com/puma/puma/commit/5bb7d202e24dec00a898dca4aa11db391d7787a5",
    "files": [
      "lib/puma/client.rb",
      "lib/puma/const.rb",
      "lib/puma/server.rb",
      "test/helper.rb",
      "test/test_puma_server.rb",
      "test/test_request_invalid.rb"
    ],
    "message": "Merge pull request from GHSA-h99w-9q5r-gjq9\n\n* Fix tests when run on GH Actions and repo isn't named 'puma'\n\n* Test updates for CVE\n\n* Lib Updates for CVE\n\n* cleint.rb - make validation values constants\n\nCo-authored-by: MSP-Greg <Greg.mpls@gmail.com>",
    "before_after_code_files": [
      "lib/puma/client.rb||lib/puma/client.rb",
      "lib/puma/const.rb||lib/puma/const.rb",
      "lib/puma/server.rb||lib/puma/server.rb",
      "test/helper.rb||test/helper.rb",
      "test/test_puma_server.rb||test/test_puma_server.rb",
      "test/test_request_invalid.rb||test/test_request_invalid.rb"
    ]
  },
  "patch_diff": {
    "lib/puma/client.rb||lib/puma/client.rb": [
      "File: lib/puma/client.rb -> lib/puma/client.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "24:   class ConnectionError < RuntimeError; end",
      "26:   # An instance of this class represents a unique request from a client.",
      "27:   # For example, this could be a web request from a browser or from CURL.",
      "28:   #",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26:   class HttpParserError501 < IOError; end",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35:   # Instances of this class are responsible for knowing if",
      "36:   # the header and body are fully buffered via the `try_to_finish` method.",
      "37:   # They can be used to \"time out\" a response via the `timeout_at` reader.",
      "38:   class Client",
      "39:     # The object used for a request with no body. All requests with",
      "40:     # no body share this one object since it has no state.",
      "41:     EmptyBody = NullIO.new",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40:   #",
      "43:     # this tests all values but the last, which must be chunked",
      "44:     ALLOWED_TRANSFER_ENCODING = %w[compress deflate gzip].freeze",
      "46:     # chunked body validation",
      "47:     CHUNK_SIZE_INVALID = /[^\\h]/.freeze",
      "48:     CHUNK_VALID_ENDING = \"\\r\\n\".freeze",
      "50:     # Content-Length header value validation",
      "51:     CONTENT_LENGTH_VALUE_INVALID = /[^\\d]/.freeze",
      "53:     TE_ERR_MSG = 'Invalid Transfer-Encoding'",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "302:       body = @parser.body",
      "304:       te = @env[TRANSFER_ENCODING2]",
      "306:       if te",
      "312:           end",
      "315:         end",
      "316:       end",
      "",
      "[Removed Lines]",
      "307:         if te.include?(\",\")",
      "308:           te.split(\",\").each do |part|",
      "309:             if CHUNKED.casecmp(part.strip) == 0",
      "310:               return setup_chunked_body(body)",
      "311:             end",
      "313:         elsif CHUNKED.casecmp(te) == 0",
      "314:           return setup_chunked_body(body)",
      "",
      "[Added Lines]",
      "322:         te_lwr = te.downcase",
      "323:         if te.include? ','",
      "324:           te_ary = te_lwr.split ','",
      "325:           te_count = te_ary.count CHUNKED",
      "326:           te_valid = te_ary[0..-2].all? { |e| ALLOWED_TRANSFER_ENCODING.include? e }",
      "327:           if te_ary.last == CHUNKED && te_count == 1 && te_valid",
      "328:             @env.delete TRANSFER_ENCODING2",
      "329:             return setup_chunked_body body",
      "330:           elsif te_count >= 1",
      "331:             raise HttpParserError   , \"#{TE_ERR_MSG}, multiple chunked: '#{te}'\"",
      "332:           elsif !te_valid",
      "333:             raise HttpParserError501, \"#{TE_ERR_MSG}, unknown value: '#{te}'\"",
      "335:         elsif te_lwr == CHUNKED",
      "336:           @env.delete TRANSFER_ENCODING2",
      "337:           return setup_chunked_body body",
      "338:         elsif ALLOWED_TRANSFER_ENCODING.include? te_lwr",
      "339:           raise HttpParserError     , \"#{TE_ERR_MSG}, single value must be chunked: '#{te}'\"",
      "340:         else",
      "341:           raise HttpParserError501  , \"#{TE_ERR_MSG}, unknown value: '#{te}'\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "320:       cl = @env[CONTENT_LENGTH]",
      "323:         @buffer = body.empty? ? nil : body",
      "324:         @body = EmptyBody",
      "325:         set_ready",
      "",
      "[Removed Lines]",
      "322:       unless cl",
      "",
      "[Added Lines]",
      "349:       if cl",
      "350:         # cannot contain characters that are not \\d",
      "351:         if cl =~ CONTENT_LENGTH_VALUE_INVALID",
      "352:           raise HttpParserError, \"Invalid Content-Length: #{cl.inspect}\"",
      "353:         end",
      "354:       else",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "478:       while !io.eof?",
      "479:         line = io.gets",
      "480:         if line.end_with?(\"\\r\\n\")",
      "482:           if len == 0",
      "483:             @in_last_chunk = true",
      "484:             @body.rewind",
      "",
      "[Removed Lines]",
      "481:           len = line.strip.to_i(16)",
      "",
      "[Added Lines]",
      "513:           # Puma doesn't process chunk extensions, but should parse if they're",
      "514:           # present, which is the reason for the semicolon regex",
      "515:           chunk_hex = line.strip[/\\A[^;]+/]",
      "516:           if chunk_hex =~ CHUNK_SIZE_INVALID",
      "517:             raise HttpParserError, \"Invalid chunk size: '#{chunk_hex}'\"",
      "518:           end",
      "519:           len = chunk_hex.to_i(16)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "510:           case",
      "511:           when got == len",
      "513:           when got <= len - 2",
      "514:             write_chunk(part)",
      "515:             @partial_part_left = len - part.size",
      "",
      "[Removed Lines]",
      "512:             write_chunk(part[0..-3]) # to skip the ending \\r\\n",
      "",
      "[Added Lines]",
      "550:             # proper chunked segment must end with \"\\r\\n\"",
      "551:             if part.end_with? CHUNK_VALID_ENDING",
      "552:               write_chunk(part[0..-3]) # to skip the ending \\r\\n",
      "553:             else",
      "554:               raise HttpParserError, \"Chunk size mismatch\"",
      "555:             end",
      "",
      "---------------"
    ],
    "lib/puma/const.rb||lib/puma/const.rb": [
      "File: lib/puma/const.rb -> lib/puma/const.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "76:     508 => 'Loop Detected',",
      "77:     510 => 'Not Extended',",
      "78:     511 => 'Network Authentication Required'",
      "81:   # For some HTTP status codes the client only expects headers.",
      "82:   #",
      "",
      "[Removed Lines]",
      "79:   }",
      "",
      "[Added Lines]",
      "79:   }.freeze",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "85:     204 => true,",
      "86:     205 => true,",
      "87:     304 => true",
      "90:   # Frequently used constants when constructing requests or responses.  Many times",
      "91:   # the constant just refers to a string with the same contents.  Using these constants",
      "",
      "[Removed Lines]",
      "88:   }",
      "",
      "[Added Lines]",
      "88:   }.freeze",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "145:       408 => \"HTTP/1.1 408 Request Timeout\\r\\nConnection: close\\r\\nServer: Puma #{PUMA_VERSION}\\r\\n\\r\\n\".freeze,",
      "146:       # Indicate that there was an internal error, obviously.",
      "147:       500 => \"HTTP/1.1 500 Internal Server Error\\r\\n\\r\\n\".freeze,",
      "148:       # A common header for indicating the server is too busy.  Not used yet.",
      "149:       503 => \"HTTP/1.1 503 Service Unavailable\\r\\n\\r\\nBUSY\".freeze",
      "152:     # The basic max request size we'll try to read.",
      "153:     CHUNK_SIZE = 16 * 1024",
      "",
      "[Removed Lines]",
      "150:     }",
      "",
      "[Added Lines]",
      "148:       # Incorrect or invalid header value",
      "149:       501 => \"HTTP/1.1 501 Not Implemented\\r\\n\\r\\n\".freeze,",
      "152:     }.freeze",
      "",
      "---------------"
    ],
    "lib/puma/server.rb||lib/puma/server.rb": [
      "File: lib/puma/server.rb -> lib/puma/server.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "515:       when HttpParserError",
      "516:         client.write_error(400)",
      "517:         @events.parse_error e, client",
      "518:       else",
      "519:         client.write_error(500)",
      "520:         @events.unknown_error e, nil, \"Read\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "518:       when HttpParserError501",
      "519:         client.write_error(501)",
      "520:         @events.parse_error e, client",
      "",
      "---------------"
    ],
    "test/helper.rb||test/helper.rb": [
      "File: test/helper.rb -> test/helper.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "174: Minitest::Test.include TestSkips",
      "176: class Minitest::Test",
      "177:   def self.run(reporter, options = {}) # :nodoc:",
      "178:     prove_it!",
      "179:     super",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "178:   REPO_NAME = ENV['GITHUB_REPOSITORY'] ? ENV['GITHUB_REPOSITORY'][/[^\\/]+\\z/] : 'puma'",
      "",
      "---------------"
    ],
    "test/test_puma_server.rb||test/test_puma_server.rb": [
      "File: test/test_puma_server.rb -> test/test_puma_server.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "602:   def test_chunked_request",
      "603:     body = nil",
      "604:     content_length = nil",
      "605:     server_run { |env|",
      "606:       body = env['rack.input'].read",
      "607:       content_length = env['CONTENT_LENGTH']",
      "608:       [200, {}, [\"\"]]",
      "609:     }",
      "613:     assert_equal \"HTTP/1.1 200 OK\\r\\nConnection: close\\r\\nContent-Length: 0\\r\\n\\r\\n\", data",
      "614:     assert_equal \"hello\", body",
      "615:     assert_equal \"5\", content_length",
      "616:   end",
      "618:   def test_large_chunked_request",
      "",
      "[Removed Lines]",
      "611:     data = send_http_and_read \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nh\\r\\n4\\r\\nello\\r\\n0\\r\\n\\r\\n\"",
      "",
      "[Added Lines]",
      "605:     transfer_encoding = nil",
      "609:       transfer_encoding = env['HTTP_TRANSFER_ENCODING']",
      "613:     data = send_http_and_read \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: gzip,chunked\\r\\n\\r\\n1\\r\\nh\\r\\n4\\r\\nello\\r\\n0\\r\\n\\r\\n\"",
      "618:     assert_nil transfer_encoding",
      "",
      "---------------"
    ],
    "test/test_request_invalid.rb||test/test_request_invalid.rb": [
      "File: test/test_request_invalid.rb -> test/test_request_invalid.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: require_relative \"helper\"",
      "2: require \"puma/events\"",
      "4: # These tests check for invalid request headers and metadata.",
      "5: # Content-Length, Transfer-Encoding, and chunked body size",
      "6: # values are checked for validity",
      "7: #",
      "8: # See https://datatracker.ietf.org/doc/html/rfc7230",
      "9: #",
      "10: # https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.2 Content-Length",
      "11: # https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.1 Transfer-Encoding",
      "12: # https://datatracker.ietf.org/doc/html/rfc7230#section-4.1   chunked body size",
      "13: #",
      "14: class TestRequestInvalid < Minitest::Test",
      "15:   # running parallel seems to take longer...",
      "16:   # parallelize_me! unless JRUBY_HEAD",
      "18:   GET_PREFIX = \"GET / HTTP/1.1\\r\\nConnection: close\\r\\n\"",
      "19:   CHUNKED = \"1\\r\\nH\\r\\n4\\r\\nello\\r\\n5\\r\\nWorld\\r\\n0\\r\\n\\r\\n\"",
      "21:   def setup",
      "22:     @host = '127.0.0.1'",
      "24:     @ios = []",
      "26:     # this app should never be called, used for debugging",
      "27:     app = ->(env) {",
      "28:       body = ''.dup",
      "29:       env.each do |k,v|",
      "30:         body << \"#{k} = #{v}\\n\"",
      "31:         if k == 'rack.input'",
      "32:           body << \"#{v.read}\\n\"",
      "33:         end",
      "34:       end",
      "35:       [200, {}, [body]]",
      "36:     }",
      "38:     @log_writer = Puma::LogWriter.strings",
      "39:     events = Puma::Events.new",
      "40:     @server = Puma::Server.new app, @log_writer, events",
      "41:     @port = (@server.add_tcp_listener @host, 0).addr[1]",
      "42:     @server.run",
      "43:     sleep 0.15 if Puma.jruby?",
      "44:   end",
      "46:   def teardown",
      "47:     @server.stop(true)",
      "48:     @ios.each { |io| io.close if io && !io.closed? }",
      "49:   end",
      "51:   def send_http_and_read(req)",
      "52:     send_http(req).read",
      "53:   end",
      "55:   def send_http(req)",
      "56:     new_connection << req",
      "57:   end",
      "59:   def new_connection",
      "60:     TCPSocket.new(@host, @port).tap {|sock| @ios << sock}",
      "61:   end",
      "63:   def assert_status(str, status = 400)",
      "64:     assert str.start_with?(\"HTTP/1.1 #{status}\"), \"'#{str[/[^\\r]+/]}' should be #{status}\"",
      "65:   end",
      "67:   # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 below are invalid Content-Length",
      "69:   def test_content_length_multiple",
      "70:     te = [",
      "71:       'Content-Length: 5',",
      "72:       'Content-Length: 5'",
      "73:     ].join \"\\r\\n\"",
      "75:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\nHello\\r\\n\\r\\n\"",
      "77:     assert_status data",
      "78:   end",
      "80:   def test_content_length_bad_characters_1",
      "81:     te = 'Content-Length: 5.01'",
      "83:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\nHello\\r\\n\\r\\n\"",
      "85:     assert_status data",
      "86:   end",
      "88:   def test_content_length_bad_characters_2",
      "89:     te = 'Content-Length: +5'",
      "91:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\nHello\\r\\n\\r\\n\"",
      "93:     assert_status data",
      "94:   end",
      "96:   def test_content_length_bad_characters_3",
      "97:     te = 'Content-Length: 5 test'",
      "99:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\nHello\\r\\n\\r\\n\"",
      "101:     assert_status data",
      "102:   end",
      "104:   # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 below are invalid Transfer-Encoding",
      "106:   def test_transfer_encoding_chunked_not_last",
      "107:     te = [",
      "108:       'Transfer-Encoding: chunked',",
      "109:       'Transfer-Encoding: gzip'",
      "110:     ].join \"\\r\\n\"",
      "112:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{CHUNKED}\"",
      "114:     assert_status data",
      "115:   end",
      "117:   def test_transfer_encoding_chunked_multiple",
      "118:     te = [",
      "119:       'Transfer-Encoding: chunked',",
      "120:       'Transfer-Encoding: gzip',",
      "121:       'Transfer-Encoding: chunked'",
      "122:     ].join \"\\r\\n\"",
      "124:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{CHUNKED}\"",
      "126:     assert_status data",
      "127:   end",
      "129:   def test_transfer_encoding_invalid_single",
      "130:     te = 'Transfer-Encoding: xchunked'",
      "132:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{CHUNKED}\"",
      "134:     assert_status data, 501",
      "135:   end",
      "137:   def test_transfer_encoding_invalid_multiple",
      "138:     te = [",
      "139:       'Transfer-Encoding: x_gzip',",
      "140:       'Transfer-Encoding: gzip',",
      "141:       'Transfer-Encoding: chunked'",
      "142:     ].join \"\\r\\n\"",
      "144:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{CHUNKED}\"",
      "146:     assert_status data, 501",
      "147:   end",
      "149:   def test_transfer_encoding_single_not_chunked",
      "150:     te = 'Transfer-Encoding: gzip'",
      "152:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{CHUNKED}\"",
      "154:     assert_status data",
      "155:   end",
      "157:   # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 below are invalid chunked size",
      "159:   def test_chunked_size_bad_characters_1",
      "160:     te = 'Transfer-Encoding: chunked'",
      "161:     chunked ='5.01'",
      "163:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n1\\r\\nh\\r\\n#{chunked}\\r\\nHello\\r\\n0\\r\\n\\r\\n\"",
      "165:     assert_status data",
      "166:   end",
      "168:   def test_chunked_size_bad_characters_2",
      "169:     te = 'Transfer-Encoding: chunked'",
      "170:     chunked ='+5'",
      "172:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n1\\r\\nh\\r\\n#{chunked}\\r\\nHello\\r\\n0\\r\\n\\r\\n\"",
      "174:     assert_status data",
      "175:   end",
      "177:   def test_chunked_size_bad_characters_3",
      "178:     te = 'Transfer-Encoding: chunked'",
      "179:     chunked ='5 bad'",
      "181:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n1\\r\\nh\\r\\n#{chunked}\\r\\nHello\\r\\n0\\r\\n\\r\\n\"",
      "183:     assert_status data",
      "184:   end",
      "186:   def test_chunked_size_bad_characters_4",
      "187:     te = 'Transfer-Encoding: chunked'",
      "188:     chunked ='0xA'",
      "190:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n1\\r\\nh\\r\\n#{chunked}\\r\\nHelloHello\\r\\n0\\r\\n\\r\\n\"",
      "192:     assert_status data",
      "193:   end",
      "195:   # size is less than bytesize",
      "196:   def test_chunked_size_mismatch_1",
      "197:     te = 'Transfer-Encoding: chunked'",
      "198:     chunked =",
      "199:       \"5\\r\\nHello\\r\\n\" \\",
      "200:       \"4\\r\\nWorld\\r\\n\" \\",
      "201:       \"0\"",
      "203:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{chunked}\\r\\n\\r\\n\"",
      "205:     assert_status data",
      "206:   end",
      "208:   # size is greater than bytesize",
      "209:   def test_chunked_size_mismatch_2",
      "210:     te = 'Transfer-Encoding: chunked'",
      "211:     chunked =",
      "212:       \"5\\r\\nHello\\r\\n\" \\",
      "213:       \"6\\r\\nWorld\\r\\n\" \\",
      "214:       \"0\"",
      "216:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{chunked}\\r\\n\\r\\n\"",
      "218:     assert_status data",
      "219:   end",
      "220: end",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "316bf49d36787bec203b4f79c8df3a7aa75915a5",
      "candidate_info": {
        "commit_hash": "316bf49d36787bec203b4f79c8df3a7aa75915a5",
        "repo": "puma/puma",
        "commit_url": "https://github.com/puma/puma/commit/316bf49d36787bec203b4f79c8df3a7aa75915a5",
        "files": [
          "test/test_binder.rb",
          "test/test_request_invalid.rb"
        ],
        "message": "5-6-stable branch - fix tests (#2852)\n\n* Fix test_request_invalid.rb\n\n* backport PR #2830",
        "before_after_code_files": [
          "test/test_binder.rb||test/test_binder.rb",
          "test/test_request_invalid.rb||test/test_request_invalid.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/test_request_invalid.rb||test/test_request_invalid.rb"
          ],
          "candidate": [
            "test/test_request_invalid.rb||test/test_request_invalid.rb"
          ]
        }
      },
      "candidate_diff": {
        "test/test_binder.rb||test/test_binder.rb": [
          "File: test/test_binder.rb -> test/test_binder.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:   end",
          "32: end",
          "35:   parallelize_me!",
          "37:   def test_synthesize_binds_from_activated_fds_no_sockets",
          "",
          "[Removed Lines]",
          "34: class TestBinder < TestBinderBase",
          "",
          "[Added Lines]",
          "34: class TestBinderParallel < TestBinderBase",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "275:     assert_equal @events.stderr, env_hash[\"rack.errors\"]",
          "276:   end",
          "296:   def test_close_calls_close_on_ios",
          "297:     @mocked_ios = [Minitest::Mock.new, Minitest::Mock.new]",
          "298:     @mocked_ios.each { |m| m.expect(:close, true) }",
          "",
          "[Removed Lines]",
          "278:   def test_ssl_binder_sets_backlog",
          "279:     skip_unless :ssl",
          "281:     host = '127.0.0.1'",
          "282:     port = UniquePort.call",
          "283:     tcp_server = TCPServer.new(host, port)",
          "284:     tcp_server.define_singleton_method(:listen) do |backlog|",
          "285:       Thread.current[:backlog] = backlog",
          "286:       super(backlog)",
          "287:     end",
          "289:     TCPServer.stub(:new, tcp_server) do",
          "290:       @binder.parse [\"ssl://#{host}:#{port}?#{ssl_query}&backlog=2048\"], @events",
          "291:     end",
          "293:     assert_equal 2048, Thread.current[:backlog]",
          "294:   end",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "472:   end",
          "473: end",
          "475: class TestBinderJRuby < TestBinderBase",
          "476:   def test_binder_parses_jruby_ssl_options",
          "477:     skip_unless :ssl",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457: class TestBinderSingle < TestBinderBase",
          "458:   def test_ssl_binder_sets_backlog",
          "459:     skip_unless :ssl",
          "461:     host = '127.0.0.1'",
          "462:     port = UniquePort.call",
          "463:     tcp_server = TCPServer.new(host, port)",
          "464:     tcp_server.define_singleton_method(:listen) do |backlog|",
          "465:       Thread.current[:backlog] = backlog",
          "466:       super(backlog)",
          "467:     end",
          "469:     TCPServer.stub(:new, tcp_server) do",
          "470:       @binder.parse [\"ssl://#{host}:#{port}?#{ssl_query}&backlog=2048\"], @events",
          "471:     end",
          "473:     assert_equal 2048, Thread.current[:backlog]",
          "474:   rescue",
          "475:     STDOUT.syswrite @events.stdout",
          "476:     STDOUT.syswrite @events.stderr",
          "477:   end",
          "478: end",
          "",
          "---------------"
        ],
        "test/test_request_invalid.rb||test/test_request_invalid.rb": [
          "File: test/test_request_invalid.rb -> test/test_request_invalid.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:       [200, {}, [body]]",
          "36:     }",
          "41:     @port = (@server.add_tcp_listener @host, 0).addr[1]",
          "42:     @server.run",
          "43:     sleep 0.15 if Puma.jruby?",
          "",
          "[Removed Lines]",
          "38:     @log_writer = Puma::LogWriter.strings",
          "39:     events = Puma::Events.new",
          "40:     @server = Puma::Server.new app, @log_writer, events",
          "",
          "[Added Lines]",
          "38:     events = Puma::Events.strings",
          "39:     @server = Puma::Server.new app, events",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8439ffc9d37f69c45bdca0a74cb49ebd9d09e66",
      "candidate_info": {
        "commit_hash": "b8439ffc9d37f69c45bdca0a74cb49ebd9d09e66",
        "repo": "puma/puma",
        "commit_url": "https://github.com/puma/puma/commit/b8439ffc9d37f69c45bdca0a74cb49ebd9d09e66",
        "files": [
          "lib/puma/client.rb",
          "lib/puma/const.rb",
          "lib/puma/server.rb",
          "test/helper.rb",
          "test/test_puma_server.rb",
          "test/test_request_invalid.rb"
        ],
        "message": "Merge pull request from GHSA-h99w-9q5r-gjq9\n\n* Fix tests when run on GH Actions and repo isn't named 'puma'\n\n* Test updates for CVE\n\n* Lib Updates for CVE\n\n* cleint.rb - make validation values constants\n\nCo-authored-by: MSP-Greg <Greg.mpls@gmail.com>",
        "before_after_code_files": [
          "lib/puma/client.rb||lib/puma/client.rb",
          "lib/puma/const.rb||lib/puma/const.rb",
          "lib/puma/server.rb||lib/puma/server.rb",
          "test/helper.rb||test/helper.rb",
          "test/test_puma_server.rb||test/test_puma_server.rb",
          "test/test_request_invalid.rb||test/test_request_invalid.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/puma/client.rb||lib/puma/client.rb",
            "lib/puma/const.rb||lib/puma/const.rb",
            "lib/puma/server.rb||lib/puma/server.rb",
            "test/helper.rb||test/helper.rb",
            "test/test_puma_server.rb||test/test_puma_server.rb",
            "test/test_request_invalid.rb||test/test_request_invalid.rb"
          ],
          "candidate": [
            "lib/puma/client.rb||lib/puma/client.rb",
            "lib/puma/const.rb||lib/puma/const.rb",
            "lib/puma/server.rb||lib/puma/server.rb",
            "test/helper.rb||test/helper.rb",
            "test/test_puma_server.rb||test/test_puma_server.rb",
            "test/test_request_invalid.rb||test/test_request_invalid.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/puma/client.rb||lib/puma/client.rb": [
          "File: lib/puma/client.rb -> lib/puma/client.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:   class ConnectionError < RuntimeError; end",
          "26:   # An instance of this class represents a unique request from a client.",
          "27:   # For example, this could be a web request from a browser or from CURL.",
          "28:   #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:   class HttpParserError501 < IOError; end",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:   # Instances of this class are responsible for knowing if",
          "36:   # the header and body are fully buffered via the `try_to_finish` method.",
          "37:   # They can be used to \"time out\" a response via the `timeout_at` reader.",
          "38:   class Client",
          "39:     # The object used for a request with no body. All requests with",
          "40:     # no body share this one object since it has no state.",
          "41:     EmptyBody = NullIO.new",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:   #",
          "43:     # this tests all values but the last, which must be chunked",
          "44:     ALLOWED_TRANSFER_ENCODING = %w[compress deflate gzip].freeze",
          "46:     # chunked body validation",
          "47:     CHUNK_SIZE_INVALID = /[^\\h]/.freeze",
          "48:     CHUNK_VALID_ENDING = \"\\r\\n\".freeze",
          "50:     # Content-Length header value validation",
          "51:     CONTENT_LENGTH_VALUE_INVALID = /[^\\d]/.freeze",
          "53:     TE_ERR_MSG = 'Invalid Transfer-Encoding'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "284:       body = @parser.body",
          "286:       te = @env[TRANSFER_ENCODING2]",
          "288:       if te",
          "294:           end",
          "297:         end",
          "298:       end",
          "",
          "[Removed Lines]",
          "289:         if te.include?(\",\")",
          "290:           te.split(\",\").each do |part|",
          "291:             if CHUNKED.casecmp(part.strip) == 0",
          "292:               return setup_chunked_body(body)",
          "293:             end",
          "295:         elsif CHUNKED.casecmp(te) == 0",
          "296:           return setup_chunked_body(body)",
          "",
          "[Added Lines]",
          "304:         te_lwr = te.downcase",
          "305:         if te.include? ','",
          "306:           te_ary = te_lwr.split ','",
          "307:           te_count = te_ary.count CHUNKED",
          "308:           te_valid = te_ary[0..-2].all? { |e| ALLOWED_TRANSFER_ENCODING.include? e }",
          "309:           if te_ary.last == CHUNKED && te_count == 1 && te_valid",
          "310:             @env.delete TRANSFER_ENCODING2",
          "311:             return setup_chunked_body body",
          "312:           elsif te_count >= 1",
          "313:             raise HttpParserError   , \"#{TE_ERR_MSG}, multiple chunked: '#{te}'\"",
          "314:           elsif !te_valid",
          "315:             raise HttpParserError501, \"#{TE_ERR_MSG}, unknown value: '#{te}'\"",
          "317:         elsif te_lwr == CHUNKED",
          "318:           @env.delete TRANSFER_ENCODING2",
          "319:           return setup_chunked_body body",
          "320:         elsif ALLOWED_TRANSFER_ENCODING.include? te_lwr",
          "321:           raise HttpParserError     , \"#{TE_ERR_MSG}, single value must be chunked: '#{te}'\"",
          "322:         else",
          "323:           raise HttpParserError501  , \"#{TE_ERR_MSG}, unknown value: '#{te}'\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "302:       cl = @env[CONTENT_LENGTH]",
          "305:         @buffer = body.empty? ? nil : body",
          "306:         @body = EmptyBody",
          "307:         set_ready",
          "",
          "[Removed Lines]",
          "304:       unless cl",
          "",
          "[Added Lines]",
          "331:       if cl",
          "332:         # cannot contain characters that are not \\d",
          "333:         if cl =~ CONTENT_LENGTH_VALUE_INVALID",
          "334:           raise HttpParserError, \"Invalid Content-Length: #{cl.inspect}\"",
          "335:         end",
          "336:       else",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "450:       while !io.eof?",
          "451:         line = io.gets",
          "452:         if line.end_with?(\"\\r\\n\")",
          "454:           if len == 0",
          "455:             @in_last_chunk = true",
          "456:             @body.rewind",
          "",
          "[Removed Lines]",
          "453:           len = line.strip.to_i(16)",
          "",
          "[Added Lines]",
          "485:           # Puma doesn't process chunk extensions, but should parse if they're",
          "486:           # present, which is the reason for the semicolon regex",
          "487:           chunk_hex = line.strip[/\\A[^;]+/]",
          "488:           if chunk_hex =~ CHUNK_SIZE_INVALID",
          "489:             raise HttpParserError, \"Invalid chunk size: '#{chunk_hex}'\"",
          "490:           end",
          "491:           len = chunk_hex.to_i(16)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "482:           case",
          "483:           when got == len",
          "485:           when got <= len - 2",
          "486:             write_chunk(part)",
          "487:             @partial_part_left = len - part.size",
          "",
          "[Removed Lines]",
          "484:             write_chunk(part[0..-3]) # to skip the ending \\r\\n",
          "",
          "[Added Lines]",
          "522:             # proper chunked segment must end with \"\\r\\n\"",
          "523:             if part.end_with? CHUNK_VALID_ENDING",
          "524:               write_chunk(part[0..-3]) # to skip the ending \\r\\n",
          "525:             else",
          "526:               raise HttpParserError, \"Chunk size mismatch\"",
          "527:             end",
          "",
          "---------------"
        ],
        "lib/puma/const.rb||lib/puma/const.rb": [
          "File: lib/puma/const.rb -> lib/puma/const.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     508 => 'Loop Detected',",
          "77:     510 => 'Not Extended',",
          "78:     511 => 'Network Authentication Required'",
          "81:   # For some HTTP status codes the client only expects headers.",
          "82:   #",
          "",
          "[Removed Lines]",
          "79:   }",
          "",
          "[Added Lines]",
          "79:   }.freeze",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:     204 => true,",
          "86:     205 => true,",
          "87:     304 => true",
          "90:   # Frequently used constants when constructing requests or responses.  Many times",
          "91:   # the constant just refers to a string with the same contents.  Using these constants",
          "",
          "[Removed Lines]",
          "88:   }",
          "",
          "[Added Lines]",
          "88:   }.freeze",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:       408 => \"HTTP/1.1 408 Request Timeout\\r\\nConnection: close\\r\\nServer: Puma #{PUMA_VERSION}\\r\\n\\r\\n\".freeze,",
          "145:       # Indicate that there was an internal error, obviously.",
          "146:       500 => \"HTTP/1.1 500 Internal Server Error\\r\\n\\r\\n\".freeze,",
          "147:       # A common header for indicating the server is too busy.  Not used yet.",
          "148:       503 => \"HTTP/1.1 503 Service Unavailable\\r\\n\\r\\nBUSY\".freeze",
          "151:     # The basic max request size we'll try to read.",
          "152:     CHUNK_SIZE = 16 * 1024",
          "",
          "[Removed Lines]",
          "149:     }",
          "",
          "[Added Lines]",
          "147:       # Incorrect or invalid header value",
          "148:       501 => \"HTTP/1.1 501 Not Implemented\\r\\n\\r\\n\".freeze,",
          "151:     }.freeze",
          "",
          "---------------"
        ],
        "lib/puma/server.rb||lib/puma/server.rb": [
          "File: lib/puma/server.rb -> lib/puma/server.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "320:           client.write_error(400)",
          "321:           client.close",
          "323:           @events.parse_error self, client.env, e",
          "324:         rescue ConnectionError, EOFError",
          "325:           client.close",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323:           @events.parse_error self, client.env, e",
          "324:         rescue HttpParserError501 => e",
          "325:           client.write_error(501)",
          "326:           client.close",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "530:         client.write_error(400)",
          "532:         @events.parse_error self, client.env, e",
          "534:       # Server error",
          "535:       rescue StandardError => e",
          "536:         lowlevel_error(e, client.env)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "537:       rescue HttpParserError501 => e",
          "538:         lowlevel_error(e, client.env)",
          "540:         client.write_error(501)",
          "542:         @events.parse_error self, client.env, e",
          "",
          "---------------"
        ],
        "test/helper.rb||test/helper.rb": [
          "File: test/helper.rb -> test/helper.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "130: Minitest::Test.include TestSkips",
          "132: class Minitest::Test",
          "133:   def self.run(reporter, options = {}) # :nodoc:",
          "134:     prove_it!",
          "135:     super",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:   REPO_NAME = ENV['GITHUB_REPOSITORY'] ? ENV['GITHUB_REPOSITORY'][/[^\\/]+\\z/] : 'puma'",
          "",
          "---------------"
        ],
        "test/test_puma_server.rb||test/test_puma_server.rb": [
          "File: test/test_puma_server.rb -> test/test_puma_server.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "446:   def test_chunked_request",
          "447:     body = nil",
          "448:     content_length = nil",
          "449:     server_run app: ->(env) {",
          "450:       body = env['rack.input'].read",
          "451:       content_length = env['CONTENT_LENGTH']",
          "452:       [200, {}, [\"\"]]",
          "453:     }",
          "457:     assert_equal \"HTTP/1.1 200 OK\\r\\nConnection: close\\r\\nContent-Length: 0\\r\\n\\r\\n\", data",
          "458:     assert_equal \"hello\", body",
          "459:     assert_equal 5, content_length",
          "460:   end",
          "462:   def test_chunked_request_pause_before_value",
          "",
          "[Removed Lines]",
          "455:     data = send_http_and_read \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nh\\r\\n4\\r\\nello\\r\\n0\\r\\n\\r\\n\"",
          "",
          "[Added Lines]",
          "449:     transfer_encoding = nil",
          "453:       transfer_encoding = env['HTTP_TRANSFER_ENCODING']",
          "457:     data = send_http_and_read \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: gzip,chunked\\r\\n\\r\\n1\\r\\nh\\r\\n4\\r\\nello\\r\\n0\\r\\n\\r\\n\"",
          "462:     assert_nil transfer_encoding",
          "",
          "---------------"
        ],
        "test/test_request_invalid.rb||test/test_request_invalid.rb": [
          "File: test/test_request_invalid.rb -> test/test_request_invalid.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: require_relative \"helper\"",
          "2: require \"puma/events\"",
          "4: # These tests check for invalid request headers and metadata.",
          "5: # Content-Length, Transfer-Encoding, and chunked body size",
          "6: # values are checked for validity",
          "7: #",
          "8: # See https://datatracker.ietf.org/doc/html/rfc7230",
          "9: #",
          "10: # https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.2 Content-Length",
          "11: # https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.1 Transfer-Encoding",
          "12: # https://datatracker.ietf.org/doc/html/rfc7230#section-4.1   chunked body size",
          "13: #",
          "14: class TestRequestInvalid < Minitest::Test",
          "15:   # running parallel seems to take longer...",
          "16:   # parallelize_me! unless JRUBY_HEAD",
          "18:   GET_PREFIX = \"GET / HTTP/1.1\\r\\nConnection: close\\r\\n\"",
          "19:   CHUNKED = \"1\\r\\nH\\r\\n4\\r\\nello\\r\\n5\\r\\nWorld\\r\\n0\\r\\n\\r\\n\"",
          "21:   def setup",
          "22:     @host = '127.0.0.1'",
          "24:     @ios = []",
          "26:     # this app should never be called, used for debugging",
          "27:     app = ->(env) {",
          "28:       body = ''.dup",
          "29:       env.each do |k,v|",
          "30:         body << \"#{k} = #{v}\\n\"",
          "31:         if k == 'rack.input'",
          "32:           body << \"#{v.read}\\n\"",
          "33:         end",
          "34:       end",
          "35:       [200, {}, [body]]",
          "36:     }",
          "38:     events = Puma::Events.strings",
          "39:     @server = Puma::Server.new app, events",
          "40:     @port = (@server.add_tcp_listener @host, 0).addr[1]",
          "41:     @server.run",
          "42:     sleep 0.15 if Puma.jruby?",
          "43:   end",
          "45:   def teardown",
          "46:     @server.stop(true)",
          "47:     @ios.each { |io| io.close if io && !io.closed? }",
          "48:   end",
          "50:   def send_http_and_read(req)",
          "51:     send_http(req).read",
          "52:   end",
          "54:   def send_http(req)",
          "55:     new_connection << req",
          "56:   end",
          "58:   def new_connection",
          "59:     TCPSocket.new(@host, @port).tap {|sock| @ios << sock}",
          "60:   end",
          "62:   def assert_status(str, status = 400)",
          "63:     assert str.start_with?(\"HTTP/1.1 #{status}\"), \"'#{str[/[^\\r]+/]}' should be #{status}\"",
          "64:   end",
          "66:   # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 below are invalid Content-Length",
          "68:   def test_content_length_multiple",
          "69:     te = [",
          "70:       'Content-Length: 5',",
          "71:       'Content-Length: 5'",
          "72:     ].join \"\\r\\n\"",
          "74:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\nHello\\r\\n\\r\\n\"",
          "76:     assert_status data",
          "77:   end",
          "79:   def test_content_length_bad_characters_1",
          "80:     te = 'Content-Length: 5.01'",
          "82:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\nHello\\r\\n\\r\\n\"",
          "84:     assert_status data",
          "85:   end",
          "87:   def test_content_length_bad_characters_2",
          "88:     te = 'Content-Length: +5'",
          "90:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\nHello\\r\\n\\r\\n\"",
          "92:     assert_status data",
          "93:   end",
          "95:   def test_content_length_bad_characters_3",
          "96:     te = 'Content-Length: 5 test'",
          "98:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\nHello\\r\\n\\r\\n\"",
          "100:     assert_status data",
          "101:   end",
          "103:   # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 below are invalid Transfer-Encoding",
          "105:   def test_transfer_encoding_chunked_not_last",
          "106:     te = [",
          "107:       'Transfer-Encoding: chunked',",
          "108:       'Transfer-Encoding: gzip'",
          "109:     ].join \"\\r\\n\"",
          "111:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{CHUNKED}\"",
          "113:     assert_status data",
          "114:   end",
          "116:   def test_transfer_encoding_chunked_multiple",
          "117:     te = [",
          "118:       'Transfer-Encoding: chunked',",
          "119:       'Transfer-Encoding: gzip',",
          "120:       'Transfer-Encoding: chunked'",
          "121:     ].join \"\\r\\n\"",
          "123:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{CHUNKED}\"",
          "125:     assert_status data",
          "126:   end",
          "128:   def test_transfer_encoding_invalid_single",
          "129:     te = 'Transfer-Encoding: xchunked'",
          "131:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{CHUNKED}\"",
          "133:     assert_status data, 501",
          "134:   end",
          "136:   def test_transfer_encoding_invalid_multiple",
          "137:     te = [",
          "138:       'Transfer-Encoding: x_gzip',",
          "139:       'Transfer-Encoding: gzip',",
          "140:       'Transfer-Encoding: chunked'",
          "141:     ].join \"\\r\\n\"",
          "143:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{CHUNKED}\"",
          "144:     assert_status data, 501",
          "145:   end",
          "147:   def test_transfer_encoding_single_not_chunked",
          "148:     te = 'Transfer-Encoding: gzip'",
          "150:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{CHUNKED}\"",
          "152:     assert_status data",
          "153:   end",
          "155:   # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 below are invalid chunked size",
          "157:   def test_chunked_size_bad_characters_1",
          "158:     te = 'Transfer-Encoding: chunked'",
          "159:     chunked ='5.01'",
          "161:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n1\\r\\nh\\r\\n#{chunked}\\r\\nHello\\r\\n0\\r\\n\\r\\n\"",
          "163:     assert_status data",
          "164:   end",
          "166:   def test_chunked_size_bad_characters_2",
          "167:     te = 'Transfer-Encoding: chunked'",
          "168:     chunked ='+5'",
          "170:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n1\\r\\nh\\r\\n#{chunked}\\r\\nHello\\r\\n0\\r\\n\\r\\n\"",
          "172:     assert_status data",
          "173:   end",
          "175:   def test_chunked_size_bad_characters_3",
          "176:     te = 'Transfer-Encoding: chunked'",
          "177:     chunked ='5 bad'",
          "179:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n1\\r\\nh\\r\\n#{chunked}\\r\\nHello\\r\\n0\\r\\n\\r\\n\"",
          "181:     assert_status data",
          "182:   end",
          "184:   def test_chunked_size_bad_characters_4",
          "185:     te = 'Transfer-Encoding: chunked'",
          "186:     chunked ='0xA'",
          "188:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n1\\r\\nh\\r\\n#{chunked}\\r\\nHelloHello\\r\\n0\\r\\n\\r\\n\"",
          "190:     assert_status data",
          "191:   end",
          "193:   # size is less than bytesize",
          "194:   def test_chunked_size_mismatch_1",
          "195:     te = 'Transfer-Encoding: chunked'",
          "196:     chunked =",
          "197:       \"5\\r\\nHello\\r\\n\" \\",
          "198:       \"4\\r\\nWorld\\r\\n\" \\",
          "199:       \"0\"",
          "201:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{chunked}\\r\\n\\r\\n\"",
          "203:     assert_status data",
          "204:   end",
          "206:   # size is greater than bytesize",
          "207:   def test_chunked_size_mismatch_2",
          "208:     te = 'Transfer-Encoding: chunked'",
          "209:     chunked =",
          "210:       \"5\\r\\nHello\\r\\n\" \\",
          "211:       \"6\\r\\nWorld\\r\\n\" \\",
          "212:       \"0\"",
          "214:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{chunked}\\r\\n\\r\\n\"",
          "216:     assert_status data",
          "217:   end",
          "218: end",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c514e70f5ae0ff14c9b0091fa84bfa39b022025",
      "candidate_info": {
        "commit_hash": "6c514e70f5ae0ff14c9b0091fa84bfa39b022025",
        "repo": "puma/puma",
        "commit_url": "https://github.com/puma/puma/commit/6c514e70f5ae0ff14c9b0091fa84bfa39b022025",
        "files": [
          "lib/puma/client.rb",
          "lib/puma/const.rb",
          "lib/puma/server.rb",
          "test/helper.rb",
          "test/test_bundle_pruner.rb",
          "test/test_puma_server.rb",
          "test/test_request_invalid.rb"
        ],
        "message": "Merge pull request from GHSA-h99w-9q5r-gjq9\n\n* Fix tests when run on GH Actions and repo isn't named 'puma'\n\n* Test updates for CVE\n\n* Lib Updates for CVE\n\n* cleint.rb - make validation values constants\n\nCo-authored-by: MSP-Greg <Greg.mpls@gmail.com>",
        "before_after_code_files": [
          "lib/puma/client.rb||lib/puma/client.rb",
          "lib/puma/const.rb||lib/puma/const.rb",
          "lib/puma/server.rb||lib/puma/server.rb",
          "test/helper.rb||test/helper.rb",
          "test/test_bundle_pruner.rb||test/test_bundle_pruner.rb",
          "test/test_puma_server.rb||test/test_puma_server.rb",
          "test/test_request_invalid.rb||test/test_request_invalid.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/puma/client.rb||lib/puma/client.rb",
            "lib/puma/const.rb||lib/puma/const.rb",
            "lib/puma/server.rb||lib/puma/server.rb",
            "test/helper.rb||test/helper.rb",
            "test/test_puma_server.rb||test/test_puma_server.rb",
            "test/test_request_invalid.rb||test/test_request_invalid.rb"
          ],
          "candidate": [
            "lib/puma/client.rb||lib/puma/client.rb",
            "lib/puma/const.rb||lib/puma/const.rb",
            "lib/puma/server.rb||lib/puma/server.rb",
            "test/helper.rb||test/helper.rb",
            "test/test_puma_server.rb||test/test_puma_server.rb",
            "test/test_request_invalid.rb||test/test_request_invalid.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/puma/client.rb||lib/puma/client.rb": [
          "File: lib/puma/client.rb -> lib/puma/client.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:   class ConnectionError < RuntimeError; end",
          "26:   # An instance of this class represents a unique request from a client.",
          "27:   # For example, this could be a web request from a browser or from CURL.",
          "28:   #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:   class HttpParserError501 < IOError; end",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:   # Instances of this class are responsible for knowing if",
          "36:   # the header and body are fully buffered via the `try_to_finish` method.",
          "37:   # They can be used to \"time out\" a response via the `timeout_at` reader.",
          "38:   class Client",
          "39:     # The object used for a request with no body. All requests with",
          "40:     # no body share this one object since it has no state.",
          "41:     EmptyBody = NullIO.new",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:   #",
          "43:     # this tests all values but the last, which must be chunked",
          "44:     ALLOWED_TRANSFER_ENCODING = %w[compress deflate gzip].freeze",
          "46:     # chunked body validation",
          "47:     CHUNK_SIZE_INVALID = /[^\\h]/.freeze",
          "48:     CHUNK_VALID_ENDING = \"\\r\\n\".freeze",
          "50:     # Content-Length header value validation",
          "51:     CONTENT_LENGTH_VALUE_INVALID = /[^\\d]/.freeze",
          "53:     TE_ERR_MSG = 'Invalid Transfer-Encoding'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "313:       body = @parser.body",
          "315:       te = @env[TRANSFER_ENCODING2]",
          "317:       if te",
          "323:           end",
          "326:         end",
          "327:       end",
          "",
          "[Removed Lines]",
          "318:         if te.include?(\",\")",
          "319:           te.split(\",\").each do |part|",
          "320:             if CHUNKED.casecmp(part.strip) == 0",
          "321:               return setup_chunked_body(body)",
          "322:             end",
          "324:         elsif CHUNKED.casecmp(te) == 0",
          "325:           return setup_chunked_body(body)",
          "",
          "[Added Lines]",
          "333:         te_lwr = te.downcase",
          "334:         if te.include? ','",
          "335:           te_ary = te_lwr.split ','",
          "336:           te_count = te_ary.count CHUNKED",
          "337:           te_valid = te_ary[0..-2].all? { |e| ALLOWED_TRANSFER_ENCODING.include? e }",
          "338:           if te_ary.last == CHUNKED && te_count == 1 && te_valid",
          "339:             @env.delete TRANSFER_ENCODING2",
          "340:             return setup_chunked_body body",
          "341:           elsif te_count >= 1",
          "342:             raise HttpParserError   , \"#{TE_ERR_MSG}, multiple chunked: '#{te}'\"",
          "343:           elsif !te_valid",
          "344:             raise HttpParserError501, \"#{TE_ERR_MSG}, unknown value: '#{te}'\"",
          "346:         elsif te_lwr == CHUNKED",
          "347:           @env.delete TRANSFER_ENCODING2",
          "348:           return setup_chunked_body body",
          "349:         elsif ALLOWED_TRANSFER_ENCODING.include? te_lwr",
          "350:           raise HttpParserError     , \"#{TE_ERR_MSG}, single value must be chunked: '#{te}'\"",
          "351:         else",
          "352:           raise HttpParserError501  , \"#{TE_ERR_MSG}, unknown value: '#{te}'\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "331:       cl = @env[CONTENT_LENGTH]",
          "334:         @buffer = body.empty? ? nil : body",
          "335:         @body = EmptyBody",
          "336:         set_ready",
          "",
          "[Removed Lines]",
          "333:       unless cl",
          "",
          "[Added Lines]",
          "360:       if cl",
          "361:         # cannot contain characters that are not \\d",
          "362:         if cl =~ CONTENT_LENGTH_VALUE_INVALID",
          "363:           raise HttpParserError, \"Invalid Content-Length: #{cl.inspect}\"",
          "364:         end",
          "365:       else",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "489:       while !io.eof?",
          "490:         line = io.gets",
          "491:         if line.end_with?(\"\\r\\n\")",
          "493:           if len == 0",
          "494:             @in_last_chunk = true",
          "495:             @body.rewind",
          "",
          "[Removed Lines]",
          "492:           len = line.strip.to_i(16)",
          "",
          "[Added Lines]",
          "524:           # Puma doesn't process chunk extensions, but should parse if they're",
          "525:           # present, which is the reason for the semicolon regex",
          "526:           chunk_hex = line.strip[/\\A[^;]+/]",
          "527:           if chunk_hex =~ CHUNK_SIZE_INVALID",
          "528:             raise HttpParserError, \"Invalid chunk size: '#{chunk_hex}'\"",
          "529:           end",
          "530:           len = chunk_hex.to_i(16)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "521:           case",
          "522:           when got == len",
          "524:           when got <= len - 2",
          "525:             write_chunk(part)",
          "526:             @partial_part_left = len - part.size",
          "",
          "[Removed Lines]",
          "523:             write_chunk(part[0..-3]) # to skip the ending \\r\\n",
          "",
          "[Added Lines]",
          "561:             # proper chunked segment must end with \"\\r\\n\"",
          "562:             if part.end_with? CHUNK_VALID_ENDING",
          "563:               write_chunk(part[0..-3]) # to skip the ending \\r\\n",
          "564:             else",
          "565:               raise HttpParserError, \"Chunk size mismatch\"",
          "566:             end",
          "",
          "---------------"
        ],
        "lib/puma/const.rb||lib/puma/const.rb": [
          "File: lib/puma/const.rb -> lib/puma/const.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     508 => 'Loop Detected',",
          "77:     510 => 'Not Extended',",
          "78:     511 => 'Network Authentication Required'",
          "81:   # For some HTTP status codes the client only expects headers.",
          "82:   #",
          "",
          "[Removed Lines]",
          "79:   }",
          "",
          "[Added Lines]",
          "79:   }.freeze",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:     204 => true,",
          "86:     205 => true,",
          "87:     304 => true",
          "90:   # Frequently used constants when constructing requests or responses.  Many times",
          "91:   # the constant just refers to a string with the same contents.  Using these constants",
          "",
          "[Removed Lines]",
          "88:   }",
          "",
          "[Added Lines]",
          "88:   }.freeze",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145:       408 => \"HTTP/1.1 408 Request Timeout\\r\\nConnection: close\\r\\nServer: Puma #{PUMA_VERSION}\\r\\n\\r\\n\".freeze,",
          "146:       # Indicate that there was an internal error, obviously.",
          "147:       500 => \"HTTP/1.1 500 Internal Server Error\\r\\n\\r\\n\".freeze,",
          "148:       # A common header for indicating the server is too busy.  Not used yet.",
          "149:       503 => \"HTTP/1.1 503 Service Unavailable\\r\\n\\r\\nBUSY\".freeze",
          "152:     # The basic max request size we'll try to read.",
          "153:     CHUNK_SIZE = 16 * 1024",
          "",
          "[Removed Lines]",
          "150:     }",
          "",
          "[Added Lines]",
          "148:       # Incorrect or invalid header value",
          "149:       501 => \"HTTP/1.1 501 Not Implemented\\r\\n\\r\\n\".freeze,",
          "152:     }.freeze",
          "",
          "---------------"
        ],
        "lib/puma/server.rb||lib/puma/server.rb": [
          "File: lib/puma/server.rb -> lib/puma/server.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "519:       when HttpParserError",
          "520:         client.write_error(400)",
          "521:         @log_writer.parse_error e, client",
          "522:       else",
          "523:         client.write_error(500)",
          "524:         @log_writer.unknown_error e, nil, \"Read\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "522:       when HttpParserError501",
          "523:         client.write_error(501)",
          "524:         @log_writer.parse_error e, client",
          "",
          "---------------"
        ],
        "test/helper.rb||test/helper.rb": [
          "File: test/helper.rb -> test/helper.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "174: Minitest::Test.include TestSkips",
          "176: class Minitest::Test",
          "177:   def self.run(reporter, options = {}) # :nodoc:",
          "178:     prove_it!",
          "179:     super",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:   REPO_NAME = ENV['GITHUB_REPOSITORY'] ? ENV['GITHUB_REPOSITORY'][/[^\\/]+\\z/] : 'puma'",
          "",
          "---------------"
        ],
        "test/test_bundle_pruner.rb||test/test_bundle_pruner.rb": [
          "File: test/test_bundle_pruner.rb -> test/test_bundle_pruner.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:     dirs = bundle_pruner.send(:paths_to_require_after_prune)",
          "13:     assert_equal(2, dirs.length)",
          "15:     assert_match(%r{puma-#{Puma::Const::PUMA_VERSION}$}, dirs[1]) # native extension dir",
          "16:     refute_match(%r{gems/rdoc-[\\d.]+/lib$}, dirs[2])",
          "17:   end",
          "",
          "[Removed Lines]",
          "14:     assert_match(%r{puma/lib$}, dirs[0]) # lib dir",
          "",
          "[Added Lines]",
          "14:     assert_match(%r{#{REPO_NAME}/lib$}, dirs[0]) # lib dir",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     dirs = bundle_pruner([], ['rdoc']).send(:paths_to_require_after_prune)",
          "24:     assert_equal(3, dirs.length)",
          "26:     assert_match(%r{puma-#{Puma::Const::PUMA_VERSION}$}, dirs[1]) # native extension dir",
          "27:     assert_match(%r{gems/rdoc-[\\d.]+/lib$}, dirs[2]) # rdoc dir",
          "28:   end",
          "",
          "[Removed Lines]",
          "25:     assert_match(%r{puma/lib$}, dirs[0]) # lib dir",
          "",
          "[Added Lines]",
          "25:     assert_match(%r{#{REPO_NAME}/lib$}, dirs[0]) # lib dir",
          "",
          "---------------"
        ],
        "test/test_puma_server.rb||test/test_puma_server.rb": [
          "File: test/test_puma_server.rb -> test/test_puma_server.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:   def test_chunked_request",
          "624:     body = nil",
          "625:     content_length = nil",
          "626:     server_run { |env|",
          "627:       body = env['rack.input'].read",
          "628:       content_length = env['CONTENT_LENGTH']",
          "629:       [200, {}, [\"\"]]",
          "630:     }",
          "634:     assert_equal \"HTTP/1.1 200 OK\\r\\nConnection: close\\r\\nContent-Length: 0\\r\\n\\r\\n\", data",
          "635:     assert_equal \"hello\", body",
          "636:     assert_equal \"5\", content_length",
          "637:   end",
          "639:   def test_large_chunked_request",
          "",
          "[Removed Lines]",
          "632:     data = send_http_and_read \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nh\\r\\n4\\r\\nello\\r\\n0\\r\\n\\r\\n\"",
          "",
          "[Added Lines]",
          "626:     transfer_encoding = nil",
          "630:       transfer_encoding = env['HTTP_TRANSFER_ENCODING']",
          "634:     data = send_http_and_read \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: gzip,chunked\\r\\n\\r\\n1\\r\\nh\\r\\n4\\r\\nello\\r\\n0\\r\\n\\r\\n\"",
          "639:     assert_nil transfer_encoding",
          "",
          "---------------"
        ],
        "test/test_request_invalid.rb||test/test_request_invalid.rb": [
          "File: test/test_request_invalid.rb -> test/test_request_invalid.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: require_relative \"helper\"",
          "2: require \"puma/events\"",
          "4: # These tests check for invalid request headers and metadata.",
          "5: # Content-Length, Transfer-Encoding, and chunked body size",
          "6: # values are checked for validity",
          "7: #",
          "8: # See https://datatracker.ietf.org/doc/html/rfc7230",
          "9: #",
          "10: # https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.2 Content-Length",
          "11: # https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.1 Transfer-Encoding",
          "12: # https://datatracker.ietf.org/doc/html/rfc7230#section-4.1   chunked body size",
          "13: #",
          "14: class TestRequestInvalid < Minitest::Test",
          "15:   # running parallel seems to take longer...",
          "16:   # parallelize_me! unless JRUBY_HEAD",
          "18:   GET_PREFIX = \"GET / HTTP/1.1\\r\\nConnection: close\\r\\n\"",
          "19:   CHUNKED = \"1\\r\\nH\\r\\n4\\r\\nello\\r\\n5\\r\\nWorld\\r\\n0\\r\\n\\r\\n\"",
          "21:   def setup",
          "22:     @host = '127.0.0.1'",
          "24:     @ios = []",
          "26:     # this app should never be called, used for debugging",
          "27:     app = ->(env) {",
          "28:       body = ''.dup",
          "29:       env.each do |k,v|",
          "30:         body << \"#{k} = #{v}\\n\"",
          "31:         if k == 'rack.input'",
          "32:           body << \"#{v.read}\\n\"",
          "33:         end",
          "34:       end",
          "35:       [200, {}, [body]]",
          "36:     }",
          "38:     @log_writer = Puma::LogWriter.strings",
          "39:     events = Puma::Events.new",
          "40:     @server = Puma::Server.new app, @log_writer, events",
          "41:     @port = (@server.add_tcp_listener @host, 0).addr[1]",
          "42:     @server.run",
          "43:     sleep 0.15 if Puma.jruby?",
          "44:   end",
          "46:   def teardown",
          "47:     @server.stop(true)",
          "48:     @ios.each { |io| io.close if io && !io.closed? }",
          "49:   end",
          "51:   def send_http_and_read(req)",
          "52:     send_http(req).read",
          "53:   end",
          "55:   def send_http(req)",
          "56:     new_connection << req",
          "57:   end",
          "59:   def new_connection",
          "60:     TCPSocket.new(@host, @port).tap {|sock| @ios << sock}",
          "61:   end",
          "63:   def assert_status(str, status = 400)",
          "64:     assert str.start_with?(\"HTTP/1.1 #{status}\"), \"'#{str[/[^\\r]+/]}' should be #{status}\"",
          "65:   end",
          "67:   # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 below are invalid Content-Length",
          "69:   def test_content_length_multiple",
          "70:     te = [",
          "71:       'Content-Length: 5',",
          "72:       'Content-Length: 5'",
          "73:     ].join \"\\r\\n\"",
          "75:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\nHello\\r\\n\\r\\n\"",
          "77:     assert_status data",
          "78:   end",
          "80:   def test_content_length_bad_characters_1",
          "81:     te = 'Content-Length: 5.01'",
          "83:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\nHello\\r\\n\\r\\n\"",
          "85:     assert_status data",
          "86:   end",
          "88:   def test_content_length_bad_characters_2",
          "89:     te = 'Content-Length: +5'",
          "91:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\nHello\\r\\n\\r\\n\"",
          "93:     assert_status data",
          "94:   end",
          "96:   def test_content_length_bad_characters_3",
          "97:     te = 'Content-Length: 5 test'",
          "99:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\nHello\\r\\n\\r\\n\"",
          "101:     assert_status data",
          "102:   end",
          "104:   # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 below are invalid Transfer-Encoding",
          "106:   def test_transfer_encoding_chunked_not_last",
          "107:     te = [",
          "108:       'Transfer-Encoding: chunked',",
          "109:       'Transfer-Encoding: gzip'",
          "110:     ].join \"\\r\\n\"",
          "112:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{CHUNKED}\"",
          "114:     assert_status data",
          "115:   end",
          "117:   def test_transfer_encoding_chunked_multiple",
          "118:     te = [",
          "119:       'Transfer-Encoding: chunked',",
          "120:       'Transfer-Encoding: gzip',",
          "121:       'Transfer-Encoding: chunked'",
          "122:     ].join \"\\r\\n\"",
          "124:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{CHUNKED}\"",
          "126:     assert_status data",
          "127:   end",
          "129:   def test_transfer_encoding_invalid_single",
          "130:     te = 'Transfer-Encoding: xchunked'",
          "132:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{CHUNKED}\"",
          "134:     assert_status data, 501",
          "135:   end",
          "137:   def test_transfer_encoding_invalid_multiple",
          "138:     te = [",
          "139:       'Transfer-Encoding: x_gzip',",
          "140:       'Transfer-Encoding: gzip',",
          "141:       'Transfer-Encoding: chunked'",
          "142:     ].join \"\\r\\n\"",
          "144:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{CHUNKED}\"",
          "146:     assert_status data, 501",
          "147:   end",
          "149:   def test_transfer_encoding_single_not_chunked",
          "150:     te = 'Transfer-Encoding: gzip'",
          "152:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{CHUNKED}\"",
          "154:     assert_status data",
          "155:   end",
          "157:   # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 below are invalid chunked size",
          "159:   def test_chunked_size_bad_characters_1",
          "160:     te = 'Transfer-Encoding: chunked'",
          "161:     chunked ='5.01'",
          "163:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n1\\r\\nh\\r\\n#{chunked}\\r\\nHello\\r\\n0\\r\\n\\r\\n\"",
          "165:     assert_status data",
          "166:   end",
          "168:   def test_chunked_size_bad_characters_2",
          "169:     te = 'Transfer-Encoding: chunked'",
          "170:     chunked ='+5'",
          "172:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n1\\r\\nh\\r\\n#{chunked}\\r\\nHello\\r\\n0\\r\\n\\r\\n\"",
          "174:     assert_status data",
          "175:   end",
          "177:   def test_chunked_size_bad_characters_3",
          "178:     te = 'Transfer-Encoding: chunked'",
          "179:     chunked ='5 bad'",
          "181:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n1\\r\\nh\\r\\n#{chunked}\\r\\nHello\\r\\n0\\r\\n\\r\\n\"",
          "183:     assert_status data",
          "184:   end",
          "186:   def test_chunked_size_bad_characters_4",
          "187:     te = 'Transfer-Encoding: chunked'",
          "188:     chunked ='0xA'",
          "190:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n1\\r\\nh\\r\\n#{chunked}\\r\\nHelloHello\\r\\n0\\r\\n\\r\\n\"",
          "192:     assert_status data",
          "193:   end",
          "195:   # size is less than bytesize",
          "196:   def test_chunked_size_mismatch_1",
          "197:     te = 'Transfer-Encoding: chunked'",
          "198:     chunked =",
          "199:       \"5\\r\\nHello\\r\\n\" \\",
          "200:       \"4\\r\\nWorld\\r\\n\" \\",
          "201:       \"0\"",
          "203:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{chunked}\\r\\n\\r\\n\"",
          "205:     assert_status data",
          "206:   end",
          "208:   # size is greater than bytesize",
          "209:   def test_chunked_size_mismatch_2",
          "210:     te = 'Transfer-Encoding: chunked'",
          "211:     chunked =",
          "212:       \"5\\r\\nHello\\r\\n\" \\",
          "213:       \"6\\r\\nWorld\\r\\n\" \\",
          "214:       \"0\"",
          "216:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{chunked}\\r\\n\\r\\n\"",
          "218:     assert_status data",
          "219:   end",
          "220: end",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b5cfe73309fcb5896318feee486fdd124dbac6f",
      "candidate_info": {
        "commit_hash": "8b5cfe73309fcb5896318feee486fdd124dbac6f",
        "repo": "puma/puma",
        "commit_url": "https://github.com/puma/puma/commit/8b5cfe73309fcb5896318feee486fdd124dbac6f",
        "files": [
          "lib/puma/client.rb",
          "lib/puma/const.rb",
          "lib/puma/server.rb",
          "test/helper.rb",
          "test/test_puma_server",
          "test/test_puma_server.rb",
          "test/test_request_invalid.rb"
        ],
        "message": "Merge pull request from GHSA-h99w-9q5r-gjq9\n\n* Fix tests when run on GH Actions and repo isn't named 'puma'\n\n* Test updates for CVE\n\n* Lib Updates for CVE\n\n* cleint.rb - make validation values constants\n\nCo-authored-by: MSP-Greg <Greg.mpls@gmail.com>",
        "before_after_code_files": [
          "lib/puma/client.rb||lib/puma/client.rb",
          "lib/puma/const.rb||lib/puma/const.rb",
          "lib/puma/server.rb||lib/puma/server.rb",
          "test/helper.rb||test/helper.rb",
          "test/test_puma_server.rb||test/test_puma_server.rb",
          "test/test_request_invalid.rb||test/test_request_invalid.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/puma/client.rb||lib/puma/client.rb",
            "lib/puma/const.rb||lib/puma/const.rb",
            "lib/puma/server.rb||lib/puma/server.rb",
            "test/helper.rb||test/helper.rb",
            "test/test_puma_server.rb||test/test_puma_server.rb",
            "test/test_request_invalid.rb||test/test_request_invalid.rb"
          ],
          "candidate": [
            "lib/puma/client.rb||lib/puma/client.rb",
            "lib/puma/const.rb||lib/puma/const.rb",
            "lib/puma/server.rb||lib/puma/server.rb",
            "test/helper.rb||test/helper.rb",
            "test/test_puma_server.rb||test/test_puma_server.rb",
            "test/test_request_invalid.rb||test/test_request_invalid.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/puma/client.rb||lib/puma/client.rb": [
          "File: lib/puma/client.rb -> lib/puma/client.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:   class ConnectionError < RuntimeError; end",
          "26:   # An instance of this class represents a unique request from a client.",
          "27:   # For example, this could be a web request from a browser or from CURL.",
          "28:   #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:   class HttpParserError501 < IOError; end",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:   # Instances of this class are responsible for knowing if",
          "36:   # the header and body are fully buffered via the `try_to_finish` method.",
          "37:   # They can be used to \"time out\" a response via the `timeout_at` reader.",
          "38:   class Client",
          "39:     # The object used for a request with no body. All requests with",
          "40:     # no body share this one object since it has no state.",
          "41:     EmptyBody = NullIO.new",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:   #",
          "43:     # this tests all values but the last, which must be chunked",
          "44:     ALLOWED_TRANSFER_ENCODING = %w[compress deflate gzip].freeze",
          "46:     # chunked body validation",
          "47:     CHUNK_SIZE_INVALID = /[^\\h]/.freeze",
          "48:     CHUNK_VALID_ENDING = \"\\r\\n\".freeze",
          "50:     # Content-Length header value validation",
          "51:     CONTENT_LENGTH_VALUE_INVALID = /[^\\d]/.freeze",
          "53:     TE_ERR_MSG = 'Invalid Transfer-Encoding'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "284:       body = @parser.body",
          "286:       te = @env[TRANSFER_ENCODING2]",
          "288:       if te",
          "294:           end",
          "297:         end",
          "298:       end",
          "",
          "[Removed Lines]",
          "289:         if te.include?(\",\")",
          "290:           te.split(\",\").each do |part|",
          "291:             if CHUNKED.casecmp(part.strip) == 0",
          "292:               return setup_chunked_body(body)",
          "293:             end",
          "295:         elsif CHUNKED.casecmp(te) == 0",
          "296:           return setup_chunked_body(body)",
          "",
          "[Added Lines]",
          "304:         te_lwr = te.downcase",
          "305:         if te.include? ','",
          "306:           te_ary = te_lwr.split ','",
          "307:           te_count = te_ary.count CHUNKED",
          "308:           te_valid = te_ary[0..-2].all? { |e| ALLOWED_TRANSFER_ENCODING.include? e }",
          "309:           if te_ary.last == CHUNKED && te_count == 1 && te_valid",
          "310:             @env.delete TRANSFER_ENCODING2",
          "311:             return setup_chunked_body body",
          "312:           elsif te_count >= 1",
          "313:             raise HttpParserError   , \"#{TE_ERR_MSG}, multiple chunked: '#{te}'\"",
          "314:           elsif !te_valid",
          "315:             raise HttpParserError501, \"#{TE_ERR_MSG}, unknown value: '#{te}'\"",
          "317:         elsif te_lwr == CHUNKED",
          "318:           @env.delete TRANSFER_ENCODING2",
          "319:           return setup_chunked_body body",
          "320:         elsif ALLOWED_TRANSFER_ENCODING.include? te_lwr",
          "321:           raise HttpParserError     , \"#{TE_ERR_MSG}, single value must be chunked: '#{te}'\"",
          "322:         else",
          "323:           raise HttpParserError501  , \"#{TE_ERR_MSG}, unknown value: '#{te}'\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "302:       cl = @env[CONTENT_LENGTH]",
          "305:         @buffer = body.empty? ? nil : body",
          "306:         @body = EmptyBody",
          "307:         set_ready",
          "",
          "[Removed Lines]",
          "304:       unless cl",
          "",
          "[Added Lines]",
          "331:       if cl",
          "332:         # cannot contain characters that are not \\d",
          "333:         if cl =~ CONTENT_LENGTH_VALUE_INVALID",
          "334:           raise HttpParserError, \"Invalid Content-Length: #{cl.inspect}\"",
          "335:         end",
          "336:       else",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "450:       while !io.eof?",
          "451:         line = io.gets",
          "452:         if line.end_with?(\"\\r\\n\")",
          "454:           if len == 0",
          "455:             @in_last_chunk = true",
          "456:             @body.rewind",
          "",
          "[Removed Lines]",
          "453:           len = line.strip.to_i(16)",
          "",
          "[Added Lines]",
          "485:           # Puma doesn't process chunk extensions, but should parse if they're",
          "486:           # present, which is the reason for the semicolon regex",
          "487:           chunk_hex = line.strip[/\\A[^;]+/]",
          "488:           if chunk_hex =~ CHUNK_SIZE_INVALID",
          "489:             raise HttpParserError, \"Invalid chunk size: '#{chunk_hex}'\"",
          "490:           end",
          "491:           len = chunk_hex.to_i(16)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "482:           case",
          "483:           when got == len",
          "485:           when got <= len - 2",
          "486:             write_chunk(part)",
          "487:             @partial_part_left = len - part.size",
          "",
          "[Removed Lines]",
          "484:             write_chunk(part[0..-3]) # to skip the ending \\r\\n",
          "",
          "[Added Lines]",
          "522:             # proper chunked segment must end with \"\\r\\n\"",
          "523:             if part.end_with? CHUNK_VALID_ENDING",
          "524:               write_chunk(part[0..-3]) # to skip the ending \\r\\n",
          "525:             else",
          "526:               raise HttpParserError, \"Chunk size mismatch\"",
          "527:             end",
          "",
          "---------------"
        ],
        "lib/puma/const.rb||lib/puma/const.rb": [
          "File: lib/puma/const.rb -> lib/puma/const.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     508 => 'Loop Detected',",
          "77:     510 => 'Not Extended',",
          "78:     511 => 'Network Authentication Required'",
          "81:   # For some HTTP status codes the client only expects headers.",
          "82:   #",
          "",
          "[Removed Lines]",
          "79:   }",
          "",
          "[Added Lines]",
          "79:   }.freeze",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:     204 => true,",
          "86:     205 => true,",
          "87:     304 => true",
          "90:   # Frequently used constants when constructing requests or responses.  Many times",
          "91:   # the constant just refers to a string with the same contents.  Using these constants",
          "",
          "[Removed Lines]",
          "88:   }",
          "",
          "[Added Lines]",
          "88:   }.freeze",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:       408 => \"HTTP/1.1 408 Request Timeout\\r\\nConnection: close\\r\\nServer: Puma #{PUMA_VERSION}\\r\\n\\r\\n\".freeze,",
          "145:       # Indicate that there was an internal error, obviously.",
          "146:       500 => \"HTTP/1.1 500 Internal Server Error\\r\\n\\r\\n\".freeze,",
          "147:       # A common header for indicating the server is too busy.  Not used yet.",
          "148:       503 => \"HTTP/1.1 503 Service Unavailable\\r\\n\\r\\nBUSY\".freeze",
          "151:     # The basic max request size we'll try to read.",
          "152:     CHUNK_SIZE = 16 * 1024",
          "",
          "[Removed Lines]",
          "149:     }",
          "",
          "[Added Lines]",
          "147:       # Incorrect or invalid header value",
          "148:       501 => \"HTTP/1.1 501 Not Implemented\\r\\n\\r\\n\".freeze,",
          "151:     }.freeze",
          "",
          "---------------"
        ],
        "lib/puma/server.rb||lib/puma/server.rb": [
          "File: lib/puma/server.rb -> lib/puma/server.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "530:         client.write_error(400)",
          "532:         @events.parse_error self, client.env, e",
          "534:       # Server error",
          "535:       rescue StandardError => e",
          "536:         lowlevel_error(e, client.env)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "533:       rescue HttpParserError501 => e",
          "534:         lowlevel_error(e, client.env)",
          "536:         client.write_error(501)",
          "538:         @events.parse_error self, client.env, e",
          "",
          "---------------"
        ],
        "test/helper.rb||test/helper.rb": [
          "File: test/helper.rb -> test/helper.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "130: Minitest::Test.include TestSkips",
          "132: class Minitest::Test",
          "133:   def self.run(reporter, options = {}) # :nodoc:",
          "134:     prove_it!",
          "135:     super",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:   REPO_NAME = ENV['GITHUB_REPOSITORY'] ? ENV['GITHUB_REPOSITORY'][/[^\\/]+\\z/] : 'puma'",
          "",
          "---------------"
        ],
        "test/test_puma_server.rb||test/test_puma_server.rb": [
          "File: test/test_puma_server.rb -> test/test_puma_server.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "446:   def test_chunked_request",
          "447:     body = nil",
          "448:     content_length = nil",
          "449:     server_run app: ->(env) {",
          "450:       body = env['rack.input'].read",
          "451:       content_length = env['CONTENT_LENGTH']",
          "452:       [200, {}, [\"\"]]",
          "453:     }",
          "457:     assert_equal \"HTTP/1.1 200 OK\\r\\nConnection: close\\r\\nContent-Length: 0\\r\\n\\r\\n\", data",
          "458:     assert_equal \"hello\", body",
          "460:   end",
          "462:   def test_chunked_request_pause_before_value",
          "",
          "[Removed Lines]",
          "455:     data = send_http_and_read \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nh\\r\\n4\\r\\nello\\r\\n0\\r\\n\\r\\n\"",
          "459:     assert_equal 5, content_length",
          "",
          "[Added Lines]",
          "449:     transfer_encoding = nil",
          "453:       transfer_encoding = env['HTTP_TRANSFER_ENCODING']",
          "457:     data = send_http_and_read \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: gzip,chunked\\r\\n\\r\\n1\\r\\nh\\r\\n4\\r\\nello\\r\\n0\\r\\n\\r\\n\"",
          "461:     assert_equal \"5\", content_length",
          "462:     assert_nil transfer_encoding",
          "",
          "---------------"
        ],
        "test/test_request_invalid.rb||test/test_request_invalid.rb": [
          "File: test/test_request_invalid.rb -> test/test_request_invalid.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: require_relative \"helper\"",
          "2: require \"puma/events\"",
          "4: # These tests check for invalid request headers and metadata.",
          "5: # Content-Length, Transfer-Encoding, and chunked body size",
          "6: # values are checked for validity",
          "7: #",
          "8: # See https://datatracker.ietf.org/doc/html/rfc7230",
          "9: #",
          "10: # https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.2 Content-Length",
          "11: # https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.1 Transfer-Encoding",
          "12: # https://datatracker.ietf.org/doc/html/rfc7230#section-4.1   chunked body size",
          "13: #",
          "14: class TestRequestInvalid < Minitest::Test",
          "15:   # running parallel seems to take longer...",
          "16:   # parallelize_me! unless JRUBY_HEAD",
          "18:   GET_PREFIX = \"GET / HTTP/1.1\\r\\nConnection: close\\r\\n\"",
          "19:   CHUNKED = \"1\\r\\nH\\r\\n4\\r\\nello\\r\\n5\\r\\nWorld\\r\\n0\\r\\n\\r\\n\"",
          "21:   def setup",
          "22:     @host = '127.0.0.1'",
          "24:     @ios = []",
          "26:     # this app should never be called, used for debugging",
          "27:     app = ->(env) {",
          "28:       body = ''.dup",
          "29:       env.each do |k,v|",
          "30:         body << \"#{k} = #{v}\\n\"",
          "31:         if k == 'rack.input'",
          "32:           body << \"#{v.read}\\n\"",
          "33:         end",
          "34:       end",
          "35:       [200, {}, [body]]",
          "36:     }",
          "38:     @log_writer = Puma::LogWriter.strings",
          "39:     events = Puma::Events.new",
          "40:     @server = Puma::Server.new app, @log_writer, events",
          "41:     @port = (@server.add_tcp_listener @host, 0).addr[1]",
          "42:     @server.run",
          "43:     sleep 0.15 if Puma.jruby?",
          "44:   end",
          "46:   def teardown",
          "47:     @server.stop(true)",
          "48:     @ios.each { |io| io.close if io && !io.closed? }",
          "49:   end",
          "51:   def send_http_and_read(req)",
          "52:     send_http(req).read",
          "53:   end",
          "55:   def send_http(req)",
          "56:     new_connection << req",
          "57:   end",
          "59:   def new_connection",
          "60:     TCPSocket.new(@host, @port).tap {|sock| @ios << sock}",
          "61:   end",
          "63:   def assert_status(str, status = 400)",
          "64:     assert str.start_with?(\"HTTP/1.1 #{status}\"), \"'#{str[/[^\\r]+/]}' should be #{status}\"",
          "65:   end",
          "67:   # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 below are invalid Content-Length",
          "69:   def test_content_length_multiple",
          "70:     te = [",
          "71:       'Content-Length: 5',",
          "72:       'Content-Length: 5'",
          "73:     ].join \"\\r\\n\"",
          "75:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\nHello\\r\\n\\r\\n\"",
          "77:     assert_status data",
          "78:   end",
          "80:   def test_content_length_bad_characters_1",
          "81:     te = 'Content-Length: 5.01'",
          "83:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\nHello\\r\\n\\r\\n\"",
          "85:     assert_status data",
          "86:   end",
          "88:   def test_content_length_bad_characters_2",
          "89:     te = 'Content-Length: +5'",
          "91:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\nHello\\r\\n\\r\\n\"",
          "93:     assert_status data",
          "94:   end",
          "96:   def test_content_length_bad_characters_3",
          "97:     te = 'Content-Length: 5 test'",
          "99:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\nHello\\r\\n\\r\\n\"",
          "101:     assert_status data",
          "102:   end",
          "104:   # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 below are invalid Transfer-Encoding",
          "106:   def test_transfer_encoding_chunked_not_last",
          "107:     te = [",
          "108:       'Transfer-Encoding: chunked',",
          "109:       'Transfer-Encoding: gzip'",
          "110:     ].join \"\\r\\n\"",
          "112:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{CHUNKED}\"",
          "114:     assert_status data",
          "115:   end",
          "117:   def test_transfer_encoding_chunked_multiple",
          "118:     te = [",
          "119:       'Transfer-Encoding: chunked',",
          "120:       'Transfer-Encoding: gzip',",
          "121:       'Transfer-Encoding: chunked'",
          "122:     ].join \"\\r\\n\"",
          "124:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{CHUNKED}\"",
          "126:     assert_status data",
          "127:   end",
          "129:   def test_transfer_encoding_invalid_single",
          "130:     te = 'Transfer-Encoding: xchunked'",
          "132:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{CHUNKED}\"",
          "134:     assert_status data, 501",
          "135:   end",
          "137:   def test_transfer_encoding_invalid_multiple",
          "138:     te = [",
          "139:       'Transfer-Encoding: x_gzip',",
          "140:       'Transfer-Encoding: gzip',",
          "141:       'Transfer-Encoding: chunked'",
          "142:     ].join \"\\r\\n\"",
          "144:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{CHUNKED}\"",
          "146:     assert_status data, 501",
          "147:   end",
          "149:   def test_transfer_encoding_single_not_chunked",
          "150:     te = 'Transfer-Encoding: gzip'",
          "152:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{CHUNKED}\"",
          "154:     assert_status data",
          "155:   end",
          "157:   # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 below are invalid chunked size",
          "159:   def test_chunked_size_bad_characters_1",
          "160:     te = 'Transfer-Encoding: chunked'",
          "161:     chunked ='5.01'",
          "163:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n1\\r\\nh\\r\\n#{chunked}\\r\\nHello\\r\\n0\\r\\n\\r\\n\"",
          "165:     assert_status data",
          "166:   end",
          "168:   def test_chunked_size_bad_characters_2",
          "169:     te = 'Transfer-Encoding: chunked'",
          "170:     chunked ='+5'",
          "172:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n1\\r\\nh\\r\\n#{chunked}\\r\\nHello\\r\\n0\\r\\n\\r\\n\"",
          "174:     assert_status data",
          "175:   end",
          "177:   def test_chunked_size_bad_characters_3",
          "178:     te = 'Transfer-Encoding: chunked'",
          "179:     chunked ='5 bad'",
          "181:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n1\\r\\nh\\r\\n#{chunked}\\r\\nHello\\r\\n0\\r\\n\\r\\n\"",
          "183:     assert_status data",
          "184:   end",
          "186:   def test_chunked_size_bad_characters_4",
          "187:     te = 'Transfer-Encoding: chunked'",
          "188:     chunked ='0xA'",
          "190:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n1\\r\\nh\\r\\n#{chunked}\\r\\nHelloHello\\r\\n0\\r\\n\\r\\n\"",
          "192:     assert_status data",
          "193:   end",
          "195:   # size is less than bytesize",
          "196:   def test_chunked_size_mismatch_1",
          "197:     te = 'Transfer-Encoding: chunked'",
          "198:     chunked =",
          "199:       \"5\\r\\nHello\\r\\n\" \\",
          "200:       \"4\\r\\nWorld\\r\\n\" \\",
          "201:       \"0\"",
          "203:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{chunked}\\r\\n\\r\\n\"",
          "205:     assert_status data",
          "206:   end",
          "208:   # size is greater than bytesize",
          "209:   def test_chunked_size_mismatch_2",
          "210:     te = 'Transfer-Encoding: chunked'",
          "211:     chunked =",
          "212:       \"5\\r\\nHello\\r\\n\" \\",
          "213:       \"6\\r\\nWorld\\r\\n\" \\",
          "214:       \"0\"",
          "216:     data = send_http_and_read \"#{GET_PREFIX}#{te}\\r\\n\\r\\n#{chunked}\\r\\n\\r\\n\"",
          "218:     assert_status data",
          "219:   end",
          "220: end",
          "",
          "---------------"
        ]
      }
    }
  ]
}