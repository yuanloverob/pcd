{
  "cve_id": "CVE-2023-39441",
  "cve_desc": "Apache Airflow SMTP Provider before 1.3.0, Apache Airflow IMAP Provider before 3.3.0, and\u00a0Apache Airflow before 2.7.0 are affected by the\u00a0Validation of OpenSSL Certificate vulnerability.\n\nThe default SSL context with SSL library did not check a server's X.509\u00a0certificate.\u00a0 Instead, the code accepted any certificate, which could\u00a0result in the disclosure of mail server credentials or mail contents\u00a0when the client connects to an attacker in a MITM position.\n\nUsers are strongly advised to upgrade to Apache Airflow version 2.7.0 or newer, Apache Airflow IMAP Provider version 3.3.0 or newer, and Apache Airflow SMTP Provider version 1.3.0 or newer to mitigate the risk associated with this vulnerability",
  "repo": "apache/airflow",
  "patch_hash": "3bd8f020e8b7bdeb7f618bdbdfb3557f117b29d3",
  "patch_info": {
    "commit_hash": "3bd8f020e8b7bdeb7f618bdbdfb3557f117b29d3",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/3bd8f020e8b7bdeb7f618bdbdfb3557f117b29d3",
    "files": [
      "airflow/config_templates/config.yml",
      "airflow/utils/email.py",
      "newsfragments/33070.significant.rst",
      "tests/utils/test_email.py"
    ],
    "message": "Allows to choose SSL context for SMTP connection (#33070)\n\nThis change add two options to choose from when SSL SMTP connection\nis created:\n\n* default - for balance between compatibility and security\n* none - in case compatibility with existing infrastructure is\n  preferred\n\n(cherry picked from commit 120efc186556b1e9498f90ad436c74e5f4e138e9)",
    "before_after_code_files": [
      "airflow/utils/email.py||airflow/utils/email.py",
      "tests/utils/test_email.py||tests/utils/test_email.py"
    ]
  },
  "patch_diff": {
    "airflow/utils/email.py||airflow/utils/email.py": [
      "File: airflow/utils/email.py -> airflow/utils/email.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: import logging",
      "22: import os",
      "23: import smtplib",
      "24: import warnings",
      "25: from email.mime.application import MIMEApplication",
      "26: from email.mime.multipart import MIMEMultipart",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: import ssl",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "312:     :param with_ssl: Whether to use SSL encryption for the connection.",
      "313:     :return: An SMTP connection to the specified host and port.",
      "314:     \"\"\"",
      "322: def _get_email_list_from_str(addresses: str) -> list[str]:",
      "",
      "[Removed Lines]",
      "315:     return (",
      "316:         smtplib.SMTP_SSL(host=host, port=port, timeout=timeout)",
      "317:         if with_ssl",
      "318:         else smtplib.SMTP(host=host, port=port, timeout=timeout)",
      "319:     )",
      "",
      "[Added Lines]",
      "316:     if not with_ssl:",
      "317:         return smtplib.SMTP(host=host, port=port, timeout=timeout)",
      "318:     else:",
      "319:         ssl_context_string = conf.get(\"email\", \"SSL_CONTEXT\")",
      "320:         if ssl_context_string == \"default\":",
      "321:             ssl_context = ssl.create_default_context()",
      "322:         elif ssl_context_string == \"none\":",
      "323:             ssl_context = None",
      "324:         else:",
      "325:             raise RuntimeError(",
      "326:                 f\"The email.ssl_context configuration variable must \"",
      "327:                 f\"be set to 'default' or 'none' and is '{ssl_context_string}.\"",
      "328:             )",
      "329:         return smtplib.SMTP_SSL(host=host, port=port, timeout=timeout, context=ssl_context)",
      "",
      "---------------"
    ],
    "tests/utils/test_email.py||tests/utils/test_email.py": [
      "File: tests/utils/test_email.py -> tests/utils/test_email.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "241:     @mock.patch(\"smtplib.SMTP_SSL\")",
      "242:     @mock.patch(\"smtplib.SMTP\")",
      "244:         mock_smtp_ssl.return_value = mock.Mock()",
      "245:         with conf_vars({(\"smtp\", \"smtp_ssl\"): \"True\"}):",
      "246:             email.send_mime_email(\"from\", \"to\", MIMEMultipart(), dryrun=False)",
      "247:         assert not mock_smtp.called",
      "248:         mock_smtp_ssl.assert_called_once_with(",
      "249:             host=conf.get(\"smtp\", \"SMTP_HOST\"),",
      "250:             port=conf.getint(\"smtp\", \"SMTP_PORT\"),",
      "251:             timeout=conf.getint(\"smtp\", \"SMTP_TIMEOUT\"),",
      "252:         )",
      "254:     @mock.patch(\"smtplib.SMTP_SSL\")",
      "",
      "[Removed Lines]",
      "243:     def test_send_mime_ssl(self, mock_smtp, mock_smtp_ssl):",
      "",
      "[Added Lines]",
      "243:     def test_send_mime_ssl_none_context(self, mock_smtp, mock_smtp_ssl):",
      "244:         mock_smtp_ssl.return_value = mock.Mock()",
      "245:         with conf_vars({(\"smtp\", \"smtp_ssl\"): \"True\", (\"email\", \"ssl_context\"): \"none\"}):",
      "246:             email.send_mime_email(\"from\", \"to\", MIMEMultipart(), dryrun=False)",
      "247:         assert not mock_smtp.called",
      "248:         mock_smtp_ssl.assert_called_once_with(",
      "249:             host=conf.get(\"smtp\", \"SMTP_HOST\"),",
      "250:             port=conf.getint(\"smtp\", \"SMTP_PORT\"),",
      "251:             timeout=conf.getint(\"smtp\", \"SMTP_TIMEOUT\"),",
      "252:             context=None,",
      "253:         )",
      "255:     @mock.patch(\"smtplib.SMTP_SSL\")",
      "256:     @mock.patch(\"smtplib.SMTP\")",
      "257:     @mock.patch(\"ssl.create_default_context\")",
      "258:     def test_send_mime_ssl_default_context_if_not_set(self, create_default_context, mock_smtp, mock_smtp_ssl):",
      "263:         assert create_default_context.called",
      "268:             context=create_default_context.return_value,",
      "269:         )",
      "271:     @mock.patch(\"smtplib.SMTP_SSL\")",
      "272:     @mock.patch(\"smtplib.SMTP\")",
      "273:     @mock.patch(\"ssl.create_default_context\")",
      "274:     def test_send_mime_ssl_default_context_with_value_set_to_default(",
      "275:         self, create_default_context, mock_smtp, mock_smtp_ssl",
      "276:     ):",
      "277:         mock_smtp_ssl.return_value = mock.Mock()",
      "278:         with conf_vars({(\"smtp\", \"smtp_ssl\"): \"True\", (\"email\", \"ssl_context\"): \"default\"}):",
      "279:             email.send_mime_email(\"from\", \"to\", MIMEMultipart(), dryrun=False)",
      "280:         assert not mock_smtp.called",
      "281:         assert create_default_context.called",
      "282:         mock_smtp_ssl.assert_called_once_with(",
      "283:             host=conf.get(\"smtp\", \"SMTP_HOST\"),",
      "284:             port=conf.getint(\"smtp\", \"SMTP_PORT\"),",
      "285:             timeout=conf.getint(\"smtp\", \"SMTP_TIMEOUT\"),",
      "286:             context=create_default_context.return_value,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "300:     @mock.patch(\"smtplib.SMTP_SSL\")",
      "301:     @mock.patch(\"smtplib.SMTP\")",
      "303:         mock_smtp_ssl.side_effect = SMTPServerDisconnected()",
      "304:         msg = MIMEMultipart()",
      "305:         with conf_vars({(\"smtp\", \"smtp_ssl\"): \"True\"}):",
      "",
      "[Removed Lines]",
      "302:     def test_send_mime_ssl_complete_failure(self, mock_smtp, mock_smtp_ssl):",
      "",
      "[Added Lines]",
      "336:     @mock.patch(\"ssl.create_default_context\")",
      "337:     def test_send_mime_ssl_complete_failure(self, create_default_context, mock_smtp, mock_smtp_ssl):",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "310:             host=conf.get(\"smtp\", \"SMTP_HOST\"),",
      "311:             port=conf.getint(\"smtp\", \"SMTP_PORT\"),",
      "312:             timeout=conf.getint(\"smtp\", \"SMTP_TIMEOUT\"),",
      "313:         )",
      "314:         assert mock_smtp_ssl.call_count == conf.getint(\"smtp\", \"SMTP_RETRY_LIMIT\")",
      "315:         assert not mock_smtp.called",
      "316:         assert not mock_smtp_ssl.return_value.starttls.called",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "348:             context=create_default_context.return_value,",
      "350:         assert create_default_context.called",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "120efc186556b1e9498f90ad436c74e5f4e138e9",
      "candidate_info": {
        "commit_hash": "120efc186556b1e9498f90ad436c74e5f4e138e9",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/120efc186556b1e9498f90ad436c74e5f4e138e9",
        "files": [
          "airflow/config_templates/config.yml",
          "airflow/utils/email.py",
          "newsfragments/33070.significant.rst",
          "tests/utils/test_email.py"
        ],
        "message": "Allows to choose SSL context for SMTP connection (#33070)\n\nThis change add two options to choose from when SSL SMTP connection\nis created:\n\n* default - for balance between compatibility and security\n* none - in case compatibility with existing infrastructure is\n  preferred",
        "before_after_code_files": [
          "airflow/utils/email.py||airflow/utils/email.py",
          "tests/utils/test_email.py||tests/utils/test_email.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "airflow/utils/email.py||airflow/utils/email.py",
            "tests/utils/test_email.py||tests/utils/test_email.py"
          ],
          "candidate": [
            "airflow/utils/email.py||airflow/utils/email.py",
            "tests/utils/test_email.py||tests/utils/test_email.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/utils/email.py||airflow/utils/email.py": [
          "File: airflow/utils/email.py -> airflow/utils/email.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import logging",
          "22: import os",
          "23: import smtplib",
          "24: import warnings",
          "25: from email.mime.application import MIMEApplication",
          "26: from email.mime.multipart import MIMEMultipart",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import ssl",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "312:     :param with_ssl: Whether to use SSL encryption for the connection.",
          "313:     :return: An SMTP connection to the specified host and port.",
          "314:     \"\"\"",
          "322: def _get_email_list_from_str(addresses: str) -> list[str]:",
          "",
          "[Removed Lines]",
          "315:     return (",
          "316:         smtplib.SMTP_SSL(host=host, port=port, timeout=timeout)",
          "317:         if with_ssl",
          "318:         else smtplib.SMTP(host=host, port=port, timeout=timeout)",
          "319:     )",
          "",
          "[Added Lines]",
          "316:     if not with_ssl:",
          "317:         return smtplib.SMTP(host=host, port=port, timeout=timeout)",
          "318:     else:",
          "319:         ssl_context_string = conf.get(\"email\", \"SSL_CONTEXT\")",
          "320:         if ssl_context_string == \"default\":",
          "321:             ssl_context = ssl.create_default_context()",
          "322:         elif ssl_context_string == \"none\":",
          "323:             ssl_context = None",
          "324:         else:",
          "325:             raise RuntimeError(",
          "326:                 f\"The email.ssl_context configuration variable must \"",
          "327:                 f\"be set to 'default' or 'none' and is '{ssl_context_string}.\"",
          "328:             )",
          "329:         return smtplib.SMTP_SSL(host=host, port=port, timeout=timeout, context=ssl_context)",
          "",
          "---------------"
        ],
        "tests/utils/test_email.py||tests/utils/test_email.py": [
          "File: tests/utils/test_email.py -> tests/utils/test_email.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:     @mock.patch(\"smtplib.SMTP_SSL\")",
          "242:     @mock.patch(\"smtplib.SMTP\")",
          "244:         mock_smtp_ssl.return_value = mock.Mock()",
          "245:         with conf_vars({(\"smtp\", \"smtp_ssl\"): \"True\"}):",
          "246:             email.send_mime_email(\"from\", \"to\", MIMEMultipart(), dryrun=False)",
          "247:         assert not mock_smtp.called",
          "248:         mock_smtp_ssl.assert_called_once_with(",
          "249:             host=conf.get(\"smtp\", \"SMTP_HOST\"),",
          "250:             port=conf.getint(\"smtp\", \"SMTP_PORT\"),",
          "251:             timeout=conf.getint(\"smtp\", \"SMTP_TIMEOUT\"),",
          "252:         )",
          "254:     @mock.patch(\"smtplib.SMTP_SSL\")",
          "",
          "[Removed Lines]",
          "243:     def test_send_mime_ssl(self, mock_smtp, mock_smtp_ssl):",
          "",
          "[Added Lines]",
          "243:     def test_send_mime_ssl_none_context(self, mock_smtp, mock_smtp_ssl):",
          "244:         mock_smtp_ssl.return_value = mock.Mock()",
          "245:         with conf_vars({(\"smtp\", \"smtp_ssl\"): \"True\", (\"email\", \"ssl_context\"): \"none\"}):",
          "246:             email.send_mime_email(\"from\", \"to\", MIMEMultipart(), dryrun=False)",
          "247:         assert not mock_smtp.called",
          "248:         mock_smtp_ssl.assert_called_once_with(",
          "249:             host=conf.get(\"smtp\", \"SMTP_HOST\"),",
          "250:             port=conf.getint(\"smtp\", \"SMTP_PORT\"),",
          "251:             timeout=conf.getint(\"smtp\", \"SMTP_TIMEOUT\"),",
          "252:             context=None,",
          "253:         )",
          "255:     @mock.patch(\"smtplib.SMTP_SSL\")",
          "256:     @mock.patch(\"smtplib.SMTP\")",
          "257:     @mock.patch(\"ssl.create_default_context\")",
          "258:     def test_send_mime_ssl_default_context_if_not_set(self, create_default_context, mock_smtp, mock_smtp_ssl):",
          "263:         assert create_default_context.called",
          "268:             context=create_default_context.return_value,",
          "269:         )",
          "271:     @mock.patch(\"smtplib.SMTP_SSL\")",
          "272:     @mock.patch(\"smtplib.SMTP\")",
          "273:     @mock.patch(\"ssl.create_default_context\")",
          "274:     def test_send_mime_ssl_default_context_with_value_set_to_default(",
          "275:         self, create_default_context, mock_smtp, mock_smtp_ssl",
          "276:     ):",
          "277:         mock_smtp_ssl.return_value = mock.Mock()",
          "278:         with conf_vars({(\"smtp\", \"smtp_ssl\"): \"True\", (\"email\", \"ssl_context\"): \"default\"}):",
          "279:             email.send_mime_email(\"from\", \"to\", MIMEMultipart(), dryrun=False)",
          "280:         assert not mock_smtp.called",
          "281:         assert create_default_context.called",
          "282:         mock_smtp_ssl.assert_called_once_with(",
          "283:             host=conf.get(\"smtp\", \"SMTP_HOST\"),",
          "284:             port=conf.getint(\"smtp\", \"SMTP_PORT\"),",
          "285:             timeout=conf.getint(\"smtp\", \"SMTP_TIMEOUT\"),",
          "286:             context=create_default_context.return_value,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300:     @mock.patch(\"smtplib.SMTP_SSL\")",
          "301:     @mock.patch(\"smtplib.SMTP\")",
          "303:         mock_smtp_ssl.side_effect = SMTPServerDisconnected()",
          "304:         msg = MIMEMultipart()",
          "305:         with conf_vars({(\"smtp\", \"smtp_ssl\"): \"True\"}):",
          "",
          "[Removed Lines]",
          "302:     def test_send_mime_ssl_complete_failure(self, mock_smtp, mock_smtp_ssl):",
          "",
          "[Added Lines]",
          "336:     @mock.patch(\"ssl.create_default_context\")",
          "337:     def test_send_mime_ssl_complete_failure(self, create_default_context, mock_smtp, mock_smtp_ssl):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "310:             host=conf.get(\"smtp\", \"SMTP_HOST\"),",
          "311:             port=conf.getint(\"smtp\", \"SMTP_PORT\"),",
          "312:             timeout=conf.getint(\"smtp\", \"SMTP_TIMEOUT\"),",
          "313:         )",
          "314:         assert mock_smtp_ssl.call_count == conf.getint(\"smtp\", \"SMTP_RETRY_LIMIT\")",
          "315:         assert not mock_smtp.called",
          "316:         assert not mock_smtp_ssl.return_value.starttls.called",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:             context=create_default_context.return_value,",
          "350:         assert create_default_context.called",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b868b32bf8d78fd7994809b5e940c54a0b08305d",
      "candidate_info": {
        "commit_hash": "b868b32bf8d78fd7994809b5e940c54a0b08305d",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/b868b32bf8d78fd7994809b5e940c54a0b08305d",
        "files": [
          "airflow/api_connexion/endpoints/task_instance_endpoint.py",
          "airflow/api_connexion/openapi/v1.yaml",
          "airflow/api_connexion/schemas/task_instance_schema.py",
          "airflow/www/static/js/types/api-generated.ts"
        ],
        "message": "OpenAPI Spec fix nullable alongside $ref (#32887)\n\n* OpenAPI Spec fix nullable alongside $ref\n\n* Fix CI\n\n* Update following code review\n\n* Add deprecation warning for 'none' state.\n\n(cherry picked from commit 3141d4bff5fb80267b3f38955838eac89c9098fd)",
        "before_after_code_files": [
          "airflow/api_connexion/endpoints/task_instance_endpoint.py||airflow/api_connexion/endpoints/task_instance_endpoint.py",
          "airflow/api_connexion/schemas/task_instance_schema.py||airflow/api_connexion/schemas/task_instance_schema.py",
          "airflow/www/static/js/types/api-generated.ts||airflow/www/static/js/types/api-generated.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33038"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/api_connexion/endpoints/task_instance_endpoint.py||airflow/api_connexion/endpoints/task_instance_endpoint.py": [
          "File: airflow/api_connexion/endpoints/task_instance_endpoint.py -> airflow/api_connexion/endpoints/task_instance_endpoint.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "269: def _convert_ti_states(states: Iterable[str] | None) -> list[TaskInstanceState | None] | None:",
          "270:     if not states:",
          "271:         return None",
          "275: def _apply_array_filter(query: Select, key: ClauseElement, values: Iterable[Any] | None) -> Select:",
          "",
          "[Removed Lines]",
          "272:     return [None if s == \"none\" else TaskInstanceState(s) for s in states]",
          "",
          "[Added Lines]",
          "272:     return [None if s in (\"none\", None) else TaskInstanceState(s) for s in states]",
          "",
          "---------------"
        ],
        "airflow/api_connexion/schemas/task_instance_schema.py||airflow/api_connexion/schemas/task_instance_schema.py": [
          "File: airflow/api_connexion/schemas/task_instance_schema.py -> airflow/api_connexion/schemas/task_instance_schema.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:     end_date_lte = fields.DateTime(load_default=None, validate=validate_istimezone)",
          "109:     duration_gte = fields.Int(load_default=None)",
          "110:     duration_lte = fields.Int(load_default=None)",
          "112:     pool = fields.List(fields.Str(), load_default=None)",
          "113:     queue = fields.List(fields.Str(), load_default=None)",
          "",
          "[Removed Lines]",
          "111:     state = fields.List(fields.Str(), load_default=None)",
          "",
          "[Added Lines]",
          "111:     state = fields.List(fields.Str(allow_none=True), load_default=None)",
          "",
          "---------------"
        ],
        "airflow/www/static/js/types/api-generated.ts||airflow/www/static/js/types/api-generated.ts": [
          "File: airflow/www/static/js/types/api-generated.ts -> airflow/www/static/js/types/api-generated.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1306:       created_date?: string;",
          "1307:       triggerer_id?: number | null;",
          "1309:     Job: {",
          "1310:       id?: number;",
          "1311:       dag_id?: string | null;",
          "",
          "[Removed Lines]",
          "1308:     };",
          "",
          "[Added Lines]",
          "1308:     } | null;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1320:       executor_class?: string | null;",
          "1321:       hostname?: string | null;",
          "1322:       unixname?: string | null;",
          "1324:     TaskInstance: {",
          "1325:       task_id?: string;",
          "1326:       dag_id?: string;",
          "",
          "[Removed Lines]",
          "1323:     };",
          "",
          "[Added Lines]",
          "1323:     } | null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1338:       end_date?: string | null;",
          "1339:       duration?: number | null;",
          "1341:       try_number?: number;",
          "1342:       map_index?: number;",
          "1343:       max_tries?: number;",
          "",
          "[Removed Lines]",
          "1340:       state?: components[\"schemas\"][\"TaskState\"] | null;",
          "",
          "[Added Lines]",
          "1340:       state?: components[\"schemas\"][\"TaskState\"];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1352:       queued_when?: string | null;",
          "1353:       pid?: number | null;",
          "1354:       executor_config?: string;",
          "1361:       rendered_fields?: { [key: string]: unknown };",
          "",
          "[Removed Lines]",
          "1355:       sla_miss?: components[\"schemas\"][\"SLAMiss\"] | null;",
          "1362:       trigger?: components[\"schemas\"][\"Trigger\"] | null;",
          "1363:       triggerer_job?: components[\"schemas\"][\"Job\"] | null;",
          "",
          "[Added Lines]",
          "1355:       sla_miss?: components[\"schemas\"][\"SLAMiss\"];",
          "1362:       trigger?: components[\"schemas\"][\"Trigger\"];",
          "1363:       triggerer_job?: components[\"schemas\"][\"Job\"];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1462:       start_date?: string | null;",
          "1464:       doc_md?: string | null;",
          "1465:       default_view?: string;",
          "",
          "[Removed Lines]",
          "1463:       dag_run_timeout?: components[\"schemas\"][\"TimeDelta\"] | null;",
          "",
          "[Added Lines]",
          "1463:       dag_run_timeout?: components[\"schemas\"][\"TimeDelta\"];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1535:       queue?: string | null;",
          "1536:       pool?: string;",
          "1537:       pool_slots?: number;",
          "1540:       retry_exponential_backoff?: boolean;",
          "1541:       priority_weight?: number;",
          "1542:       weight_rule?: components[\"schemas\"][\"WeightRule\"];",
          "",
          "[Removed Lines]",
          "1538:       execution_timeout?: components[\"schemas\"][\"TimeDelta\"] | null;",
          "1539:       retry_delay?: components[\"schemas\"][\"TimeDelta\"] | null;",
          "",
          "[Added Lines]",
          "1538:       execution_timeout?: components[\"schemas\"][\"TimeDelta\"];",
          "1539:       retry_delay?: components[\"schemas\"][\"TimeDelta\"];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2059:       days: number;",
          "2060:       seconds: number;",
          "2061:       microseconds: number;",
          "2064:     RelativeDelta: {",
          "2065:       __type: string;",
          "",
          "[Removed Lines]",
          "2062:     };",
          "",
          "[Added Lines]",
          "2062:     } | null;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2139:     TaskState:",
          "",
          "[Removed Lines]",
          "2140:       | \"success\"",
          "2141:       | \"running\"",
          "2142:       | \"failed\"",
          "2143:       | \"upstream_failed\"",
          "2144:       | \"skipped\"",
          "2145:       | \"up_for_retry\"",
          "2146:       | \"up_for_reschedule\"",
          "2147:       | \"queued\"",
          "2148:       | \"none\"",
          "2149:       | \"scheduled\"",
          "2150:       | \"deferred\"",
          "2151:       | \"removed\"",
          "2152:       | \"restarting\";",
          "",
          "[Added Lines]",
          "2143:       | (",
          "2144:           | null",
          "2145:           | \"success\"",
          "2146:           | \"running\"",
          "2147:           | \"failed\"",
          "2148:           | \"upstream_failed\"",
          "2149:           | \"skipped\"",
          "2150:           | \"up_for_retry\"",
          "2151:           | \"up_for_reschedule\"",
          "2152:           | \"queued\"",
          "2153:           | \"none\"",
          "2154:           | \"scheduled\"",
          "2155:           | \"deferred\"",
          "2156:           | \"removed\"",
          "2157:           | \"restarting\"",
          "2158:         )",
          "2159:       | null;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "868d1389461822cf5d54faaff3ce19913fc7f08e",
      "candidate_info": {
        "commit_hash": "868d1389461822cf5d54faaff3ce19913fc7f08e",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/868d1389461822cf5d54faaff3ce19913fc7f08e",
        "files": [
          "airflow/models/taskinstance.py"
        ],
        "message": "Use string concatenation for prepending base URL for log_url (#33063)\n\nIt is observed that urljoin is not yielding expected results for\nthe task instance's log_url which needs to be a concatenation of the\nwebserver base_url and specified relative url. The current usage\nof urljoin does not seem to be the right way to achieve this based\non what urljoin is meant for and how it works. So, we use simple\nstring concatenation to yield the desired result.\nMore context in the comment https://github.com/apache/airflow/pull/31833#discussion_r1282696916\n\ncloses: #32996\n(cherry picked from commit baa1bc0438baa05d358b236eec3c343438d8d53c)",
        "before_after_code_files": [
          "airflow/models/taskinstance.py||airflow/models/taskinstance.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33038"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/models/taskinstance.py||airflow/models/taskinstance.py": [
          "File: airflow/models/taskinstance.py -> airflow/models/taskinstance.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: from pathlib import PurePath",
          "34: from types import TracebackType",
          "35: from typing import TYPE_CHECKING, Any, Callable, Collection, Generator, Iterable, Tuple",
          "38: import dill",
          "39: import jinja2",
          "",
          "[Removed Lines]",
          "36: from urllib.parse import quote, urljoin",
          "",
          "[Added Lines]",
          "36: from urllib.parse import quote",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "779:         \"\"\"Log URL for TaskInstance.\"\"\"",
          "780:         iso = quote(self.execution_date.isoformat())",
          "781:         base_url = conf.get_mandatory_value(\"webserver\", \"BASE_URL\")",
          "785:             f\"&task_id={self.task_id}\"",
          "786:             f\"&dag_id={self.dag_id}\"",
          "788:         )",
          "790:     @property",
          "791:     def mark_success_url(self) -> str:",
          "792:         \"\"\"URL to mark TI success.\"\"\"",
          "793:         base_url = conf.get_mandatory_value(\"webserver\", \"BASE_URL\")",
          "797:             f\"&dag_id={self.dag_id}\"",
          "798:             f\"&dag_run_id={quote(self.run_id)}\"",
          "799:             \"&upstream=false\"",
          "800:             \"&downstream=false\"",
          "802:         )",
          "804:     @provide_session",
          "",
          "[Removed Lines]",
          "782:         return urljoin(",
          "783:             base_url,",
          "784:             f\"log?execution_date={iso}\"",
          "787:             f\"&map_index={self.map_index}\",",
          "794:         return urljoin(",
          "795:             base_url,",
          "796:             f\"confirm?task_id={self.task_id}\"",
          "801:             \"&state=success\",",
          "",
          "[Added Lines]",
          "782:         return (",
          "783:             f\"{base_url}\"",
          "784:             \"/log\"",
          "785:             f\"?execution_date={iso}\"",
          "788:             f\"&map_index={self.map_index}\"",
          "795:         return (",
          "796:             f\"{base_url}\"",
          "797:             \"/confirm\"",
          "798:             f\"?task_id={self.task_id}\"",
          "803:             \"&state=success\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8fac347569d50cb607d115e3fe810da8e8f3fb36",
      "candidate_info": {
        "commit_hash": "8fac347569d50cb607d115e3fe810da8e8f3fb36",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/8fac347569d50cb607d115e3fe810da8e8f3fb36",
        "files": [
          "Dockerfile",
          "README.md",
          "airflow/__init__.py",
          "airflow/api_connexion/openapi/v1.yaml",
          "airflow/utils/db.py",
          "docs/apache-airflow/administration-and-deployment/logging-monitoring/logging-tasks.rst",
          "docs/apache-airflow/installation/supported-versions.rst",
          "docs/docker-stack/README.md",
          "docs/docker-stack/docker-examples/customizing/own-requirements.sh",
          "docs/docker-stack/docker-examples/extending/add-airflow-configuration/Dockerfile",
          "docs/docker-stack/docker-examples/extending/add-apt-packages/Dockerfile",
          "docs/docker-stack/docker-examples/extending/add-build-essential-extend/Dockerfile",
          "docs/docker-stack/docker-examples/extending/add-providers/Dockerfile",
          "docs/docker-stack/docker-examples/extending/add-pypi-packages/Dockerfile",
          "docs/docker-stack/docker-examples/extending/add-requirement-packages/Dockerfile",
          "docs/docker-stack/docker-examples/extending/custom-providers/Dockerfile",
          "docs/docker-stack/docker-examples/extending/embedding-dags/Dockerfile",
          "docs/docker-stack/docker-examples/extending/writable-directory/Dockerfile",
          "docs/docker-stack/entrypoint.rst",
          "scripts/ci/pre_commit/pre_commit_supported_versions.py"
        ],
        "message": "Update version to 2.7.0",
        "before_after_code_files": [
          "airflow/__init__.py||airflow/__init__.py",
          "airflow/utils/db.py||airflow/utils/db.py",
          "scripts/ci/pre_commit/pre_commit_supported_versions.py||scripts/ci/pre_commit/pre_commit_supported_versions.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33038"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/__init__.py||airflow/__init__.py": [
          "File: airflow/__init__.py -> airflow/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: \"\"\"",
          "27: from __future__ import annotations",
          "31: # flake8: noqa: F401",
          "",
          "[Removed Lines]",
          "29: __version__ = \"2.7.0.dev0\"",
          "",
          "[Added Lines]",
          "29: __version__ = \"2.7.0\"",
          "",
          "---------------"
        ],
        "airflow/utils/db.py||airflow/utils/db.py": [
          "File: airflow/utils/db.py -> airflow/utils/db.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:     \"2.6.1\": \"98ae134e6fff\",",
          "100:     \"2.6.2\": \"c804e5c76e3e\",",
          "101:     \"2.6.3\": \"c804e5c76e3e\",",
          "102: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:     \"2.7.0\": \"788397e78828\",",
          "",
          "---------------"
        ],
        "scripts/ci/pre_commit/pre_commit_supported_versions.py||scripts/ci/pre_commit/pre_commit_supported_versions.py": [
          "File: scripts/ci/pre_commit/pre_commit_supported_versions.py -> scripts/ci/pre_commit/pre_commit_supported_versions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: HEADERS = (\"Version\", \"Current Patch/Minor\", \"State\", \"First Release\", \"Limited Support\", \"EOL/Terminated\")",
          "29: SUPPORTED_VERSIONS = (",
          "31:     (\"1.10\", \"1.10.15\", \"EOL\", \"Aug 27, 2018\", \"Dec 17, 2020\", \"June 17, 2021\"),",
          "32:     (\"1.9\", \"1.9.0\", \"EOL\", \"Jan 03, 2018\", \"Aug 27, 2018\", \"Aug 27, 2018\"),",
          "33:     (\"1.8\", \"1.8.2\", \"EOL\", \"Mar 19, 2017\", \"Jan 03, 2018\", \"Jan 03, 2018\"),",
          "",
          "[Removed Lines]",
          "30:     (\"2\", \"2.6.3\", \"Supported\", \"Dec 17, 2020\", \"TBD\", \"TBD\"),",
          "",
          "[Added Lines]",
          "30:     (\"2\", \"2.7.0\", \"Supported\", \"Dec 17, 2020\", \"TBD\", \"TBD\"),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35b22bf5a72b1e75072152e1cd4047dfdb9f606a",
      "candidate_info": {
        "commit_hash": "35b22bf5a72b1e75072152e1cd4047dfdb9f606a",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/35b22bf5a72b1e75072152e1cd4047dfdb9f606a",
        "files": [
          ".github/actions/migration_tests/action.yml",
          ".github/actions/post_tests_failure/action.yml",
          ".github/actions/post_tests_success/action.yml",
          ".github/workflows/ci.yml",
          "dev/breeze/src/airflow_breeze/commands/testing_commands.py",
          "scripts/ci/docker-compose/_docker.env"
        ],
        "message": "Add better diagnostics when tests fail (#33023)\n\nThe \"post_test\" action had not worked as intended when there was\na test failure and did not upload dump of the container logs. It turned\nout that the \"if\" conditions in the sub-action do not propagate from the\nparent action, so \"failure()\" condition was never met.\n\nThis PR spplits post-test actions to \"success\" and \"failure\" ones, and\ntriggers each action respectively when the tests succeed or fail.\n\nIt also includes two fixes that makes CI debugging better:\n\n* only logs from failed test suite are includeded in the dump\n  (previously all currently running containers were included)\n\n* we need to give some time for logs to propagate in case of errors.\n\n(cherry picked from commit f97d1fbe1621b09bc36d2b713dde7399e2283335)",
        "before_after_code_files": [
          "dev/breeze/src/airflow_breeze/commands/testing_commands.py||dev/breeze/src/airflow_breeze/commands/testing_commands.py",
          "scripts/ci/docker-compose/_docker.env||scripts/ci/docker-compose/_docker.env"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33038"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "dev/breeze/src/airflow_breeze/commands/testing_commands.py||dev/breeze/src/airflow_breeze/commands/testing_commands.py": [
          "File: dev/breeze/src/airflow_breeze/commands/testing_commands.py -> dev/breeze/src/airflow_breeze/commands/testing_commands.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import os",
          "20: import sys",
          "21: from datetime import datetime",
          "23: import click",
          "24: from click import IntRange",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: from time import sleep",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:         )",
          "166:         sys.exit(1)",
          "167:     project_name = file_name_from_test_type(exec_shell_params.test_type)",
          "168:     down_cmd = [",
          "170:         \"--project-name\",",
          "172:         \"down\",",
          "173:         \"--remove-orphans\",",
          "174:     ]",
          "",
          "[Removed Lines]",
          "171:         f\"airflow-test-{project_name}\",",
          "",
          "[Added Lines]",
          "169:     compose_project_name = f\"airflow-test-{project_name}\"",
          "170:     # This is needed for Docker-compose 1 compatibility",
          "171:     env_variables[\"COMPOSE_PROJECT_NAME\"] = compose_project_name",
          "175:         compose_project_name,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "176:     run_cmd = [",
          "178:         \"--project-name\",",
          "180:         \"run\",",
          "181:         \"-T\",",
          "182:         \"--service-ports\",",
          "",
          "[Removed Lines]",
          "179:         f\"airflow-test-{project_name}\",",
          "",
          "[Added Lines]",
          "183:         compose_project_name,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "185:     ]",
          "186:     run_cmd.extend(list(extra_pytest_args))",
          "187:     try:",
          "189:         result = run_command(",
          "190:             run_cmd,",
          "191:             env=env_variables,",
          "",
          "[Removed Lines]",
          "188:         remove_docker_networks(networks=[f\"airflow-test-{project_name}_default\"])",
          "",
          "[Added Lines]",
          "192:         remove_docker_networks(networks=[f\"{compose_project_name}_default\"])",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "201:                 text=True,",
          "202:             )",
          "203:             container_ids = ps_result.stdout.splitlines()",
          "204:             get_console(output=output).print(",
          "206:             )",
          "207:             date_str = datetime.now().strftime(\"%Y_%d_%m_%H_%M_%S\")",
          "208:             for container_id in container_ids:",
          "209:                 dump_path = FILES_DIR / f\"container_logs_{container_id}_{date_str}.log\"",
          "211:                 with open(dump_path, \"w\") as outfile:",
          "213:     finally:",
          "214:         if not skip_docker_compose_down:",
          "215:             run_command(",
          "216:                 [",
          "218:                     \"--project-name\",",
          "220:                     \"rm\",",
          "221:                     \"--stop\",",
          "222:                     \"--force\",",
          "",
          "[Removed Lines]",
          "205:                 f\"[info]Error {ps_result.returncode}. Dumping containers: {container_ids}.\"",
          "210:                 get_console(output=output).print(f\"[info]Dumping container {container_id} to {dump_path}\")",
          "212:                     run_command([\"docker\", \"logs\", container_id], check=False, stdout=outfile)",
          "219:                     f\"airflow-test-{project_name}\",",
          "",
          "[Added Lines]",
          "208:             get_console(output=output).print(\"[info]Wait 10 seconds for logs to find their way to stderr.\\n\")",
          "209:             sleep(10)",
          "211:                 f\"[info]Error {result.returncode}. Dumping containers: {container_ids} for {project_name}.\\n\"",
          "215:                 if compose_project_name not in container_id:",
          "216:                     continue",
          "218:                 get_console(output=output).print(f\"[info]Dumping container {container_id} to {dump_path}\\n\")",
          "220:                     run_command(",
          "221:                         [\"docker\", \"logs\", \"--details\", \"--timestamps\", container_id],",
          "222:                         check=False,",
          "223:                         stdout=outfile,",
          "224:                     )",
          "231:                     compose_project_name,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "227:                 check=False,",
          "228:                 verbose_override=False,",
          "229:             )",
          "231:     return result.returncode, f\"Test: {exec_shell_params.test_type}\"",
          "",
          "[Removed Lines]",
          "230:             remove_docker_networks(networks=[f\"airflow-test-{project_name}_default\"])",
          "",
          "[Added Lines]",
          "242:             remove_docker_networks(networks=[f\"{compose_project_name}_default\"])",
          "",
          "---------------"
        ],
        "scripts/ci/docker-compose/_docker.env||scripts/ci/docker-compose/_docker.env": [
          "File: scripts/ci/docker-compose/_docker.env -> scripts/ci/docker-compose/_docker.env",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: CI_TARGET_BRANCH",
          "32: COLLECT_ONLY",
          "33: COMMIT_SHA",
          "34: DB_RESET",
          "35: DEFAULT_BRANCH",
          "36: DEFAULT_CONSTRAINTS_BRANCH",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: # Needed for docker-compose 1 compatibility",
          "35: COMPOSE_PROJECT_NAME",
          "",
          "---------------"
        ]
      }
    }
  ]
}