{
  "cve_id": "CVE-2024-29019",
  "cve_desc": "ESPHome is a system to control microcontrollers remotely through Home Automation systems. API endpoints in dashboard component of ESPHome version 2023.12.9 (command line installation) are vulnerable to Cross-Site Request Forgery (CSRF) allowing remote attackers to carry out attacks against a logged user of the dashboard to perform operations on configuration files (create, edit, delete). It is possible for a malicious actor to create a specifically crafted web page that triggers a cross site request against ESPHome, this allows bypassing the authentication for API calls on the platform. This vulnerability allows bypassing authentication on API calls accessing configuration file operations on the behalf of a logged user. In order to trigger the vulnerability, the victim must visit a weaponized page. In addition to this, it is possible to chain this vulnerability with GHSA-9p43-hj5j-96h5/ CVE-2024-27287 to obtain a complete takeover of the user account. Version 2024.3.0 contains a patch for this issue.\n\n",
  "repo": "esphome/esphome",
  "patch_hash": "c56c40cb824e34ed2b89ba1cb8a3a5eb31459c74",
  "patch_info": {
    "commit_hash": "c56c40cb824e34ed2b89ba1cb8a3a5eb31459c74",
    "repo": "esphome/esphome",
    "commit_url": "https://github.com/esphome/esphome/commit/c56c40cb824e34ed2b89ba1cb8a3a5eb31459c74",
    "files": [
      "esphome/dashboard/web_server.py",
      "requirements.txt"
    ],
    "message": "Require xsrf/csrf when using a password (#6396)",
    "before_after_code_files": [
      "esphome/dashboard/web_server.py||esphome/dashboard/web_server.py"
    ]
  },
  "patch_diff": {
    "esphome/dashboard/web_server.py||esphome/dashboard/web_server.py": [
      "File: esphome/dashboard/web_server.py -> esphome/dashboard/web_server.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "688:     @authenticated",
      "689:     def get(self) -> None:",
      "690:         begin = bool(self.get_argument(\"begin\", False))",
      "692:         self.render(",
      "693:             \"index.template.html\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "691:         if settings.using_password:",
      "692:             # Simply accessing the xsrf_token sets the cookie for us",
      "693:             self.xsrf_token  # pylint: disable=pointless-statement",
      "694:         else:",
      "695:             self.clear_cookie(\"_xsrf\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1102:         \"log_function\": log_function,",
      "1103:         \"websocket_ping_interval\": 30.0,",
      "1104:         \"template_path\": get_base_frontend_path(),",
      "1105:     }",
      "1106:     rel = settings.relative_url",
      "1107:     return tornado.web.Application(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1110:         \"xsrf_cookies\": settings.using_password,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a3bd8ad02526a831bc0ab52e76ddfcec78f39440",
      "candidate_info": {
        "commit_hash": "a3bd8ad02526a831bc0ab52e76ddfcec78f39440",
        "repo": "esphome/esphome",
        "commit_url": "https://github.com/esphome/esphome/commit/a3bd8ad02526a831bc0ab52e76ddfcec78f39440",
        "files": [
          "esphome/components/ld2420/ld2420.cpp"
        ],
        "message": "ld2420: Firmware v1.5.4+ bug workaround (#6168)",
        "before_after_code_files": [
          "esphome/components/ld2420/ld2420.cpp||esphome/components/ld2420/ld2420.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/esphome/esphome/pull/6397"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "esphome/components/ld2420/ld2420.cpp||esphome/components/ld2420/ld2420.cpp": [
          "File: esphome/components/ld2420/ld2420.cpp -> esphome/components/ld2420/ld2420.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "211: void LD2420Component::restart_module_action() {",
          "212:   ESP_LOGCONFIG(TAG, \"Restarting LD2420 module...\");",
          "213:   this->send_module_restart();",
          "218:   ESP_LOGCONFIG(TAG, \"LD2420 Restarted.\");",
          "219: }",
          "",
          "[Removed Lines]",
          "214:   delay_microseconds_safe(45000);",
          "215:   this->set_config_mode(true);",
          "216:   this->set_system_mode(system_mode_);",
          "217:   this->set_config_mode(false);",
          "",
          "[Added Lines]",
          "214:   this->set_timeout(250, [this]() {",
          "215:     this->set_config_mode(true);",
          "216:     this->set_system_mode(system_mode_);",
          "217:     this->set_config_mode(false);",
          "218:   });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "527:       this->write_byte(cmd_buffer[index]);",
          "528:     }",
          "531:     error = 0;",
          "532:     if (frame.command == CMD_RESTART) {",
          "535:     }",
          "537:     while (!this->cmd_reply_.ack) {",
          "538:       while (available()) {",
          "539:         this->readline_(read(), ack_buffer, sizeof(ack_buffer));",
          "540:       }",
          "542:       if (loop_count <= 0) {",
          "543:         error = LD2420_ERROR_TIMEOUT;",
          "544:         retry--;",
          "",
          "[Removed Lines]",
          "530:     delay_microseconds_safe(500);  // give the module a moment to process it",
          "533:       delay_microseconds_safe(25000);  // Wait for the restart",
          "534:       return 0;                        // restart does not reply exit now",
          "541:       delay_microseconds_safe(250);",
          "",
          "[Added Lines]",
          "533:       return 0;  // restart does not reply exit now",
          "540:       delay_microseconds_safe(1450);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9442f7a2713d6ed324fbdf4ef6da70a3ca563fb6",
      "candidate_info": {
        "commit_hash": "9442f7a2713d6ed324fbdf4ef6da70a3ca563fb6",
        "repo": "esphome/esphome",
        "commit_url": "https://github.com/esphome/esphome/commit/9442f7a2713d6ed324fbdf4ef6da70a3ca563fb6",
        "files": [
          "esphome/components/uponor_smatrix/uponor_smatrix.cpp"
        ],
        "message": "Fix sending packets to uponor_smatrix devices (#6392)",
        "before_after_code_files": [
          "esphome/components/uponor_smatrix/uponor_smatrix.cpp||esphome/components/uponor_smatrix/uponor_smatrix.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/esphome/esphome/pull/6397"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "esphome/components/uponor_smatrix/uponor_smatrix.cpp||esphome/components/uponor_smatrix/uponor_smatrix.cpp": [
          "File: esphome/components/uponor_smatrix/uponor_smatrix.cpp -> esphome/components/uponor_smatrix/uponor_smatrix.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:     return false;",
          "177:   packet.push_back(this->address_ >> 8);",
          "178:   packet.push_back(this->address_ >> 0);",
          "179:   packet.push_back(device_address >> 8);",
          "",
          "[Removed Lines]",
          "176:   std::vector<uint8_t> packet(6 + 3 * data_len);",
          "",
          "[Added Lines]",
          "176:   std::vector<uint8_t> packet;",
          "177:   packet.reserve(6 + 3 * data_len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b3aa950c60714a4e49028946656588611761def7",
      "candidate_info": {
        "commit_hash": "b3aa950c60714a4e49028946656588611761def7",
        "repo": "esphome/esphome",
        "commit_url": "https://github.com/esphome/esphome/commit/b3aa950c60714a4e49028946656588611761def7",
        "files": [
          "esphome/components/remote_base/remote_base.cpp"
        ],
        "message": "Fix bug in `remote_base` conditional (#6281)\n\nCo-authored-by: Jonathan Swoboda <jonathan.swoboda>",
        "before_after_code_files": [
          "esphome/components/remote_base/remote_base.cpp||esphome/components/remote_base/remote_base.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/esphome/esphome/pull/6397"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "esphome/components/remote_base/remote_base.cpp||esphome/components/remote_base/remote_base.cpp": [
          "File: esphome/components/remote_base/remote_base.cpp -> esphome/components/remote_base/remote_base.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: }",
          "18: void RemoteRMTChannel::config_rmt(rmt_config_t &rmt) {",
          "20:     this->mem_block_num_ = int(RMT_CHANNEL_MAX) - int(this->channel_);",
          "21:     ESP_LOGW(TAG, \"Not enough RMT memory blocks available, reduced to %i blocks.\", this->mem_block_num_);",
          "22:   }",
          "",
          "[Removed Lines]",
          "19:   if (rmt_channel_t(int(this->channel_) + this->mem_block_num_) >= RMT_CHANNEL_MAX) {",
          "",
          "[Added Lines]",
          "19:   if (rmt_channel_t(int(this->channel_) + this->mem_block_num_) > RMT_CHANNEL_MAX) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db1b187e80029ab9aad61fe347d24fe3fcd24dfe",
      "candidate_info": {
        "commit_hash": "db1b187e80029ab9aad61fe347d24fe3fcd24dfe",
        "repo": "esphome/esphome",
        "commit_url": "https://github.com/esphome/esphome/commit/db1b187e80029ab9aad61fe347d24fe3fcd24dfe",
        "files": [
          "esphome/components/ade7953_i2c/ade7953_i2c.cpp"
        ],
        "message": "Fix wrong initialization of vectors in ade7953_i2c (#6393)",
        "before_after_code_files": [
          "esphome/components/ade7953_i2c/ade7953_i2c.cpp||esphome/components/ade7953_i2c/ade7953_i2c.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/esphome/esphome/pull/6397"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "esphome/components/ade7953_i2c/ade7953_i2c.cpp||esphome/components/ade7953_i2c/ade7953_i2c.cpp": [
          "File: esphome/components/ade7953_i2c/ade7953_i2c.cpp -> esphome/components/ade7953_i2c/ade7953_i2c.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:   ade7953_base::ADE7953::dump_config();",
          "14: }",
          "15: bool AdE7953I2c::ade_write_8(uint16_t reg, uint8_t value) {",
          "21: }",
          "22: bool AdE7953I2c::ade_write_16(uint16_t reg, uint16_t value) {",
          "29: }",
          "30: bool AdE7953I2c::ade_write_32(uint16_t reg, uint32_t value) {",
          "39: }",
          "40: bool AdE7953I2c::ade_read_8(uint16_t reg, uint8_t *value) {",
          "41:   uint8_t reg_data[2];",
          "",
          "[Removed Lines]",
          "16:   std::vector<uint8_t> data(3);",
          "17:   data.push_back(reg >> 8);",
          "18:   data.push_back(reg >> 0);",
          "19:   data.push_back(value);",
          "20:   return this->write(data.data(), data.size()) != i2c::ERROR_OK;",
          "23:   std::vector<uint8_t> data(4);",
          "24:   data.push_back(reg >> 8);",
          "25:   data.push_back(reg >> 0);",
          "26:   data.push_back(value >> 8);",
          "27:   data.push_back(value >> 0);",
          "28:   return this->write(data.data(), data.size()) != i2c::ERROR_OK;",
          "31:   std::vector<uint8_t> data(6);",
          "32:   data.push_back(reg >> 8);",
          "33:   data.push_back(reg >> 0);",
          "34:   data.push_back(value >> 24);",
          "35:   data.push_back(value >> 16);",
          "36:   data.push_back(value >> 8);",
          "37:   data.push_back(value >> 0);",
          "38:   return this->write(data.data(), data.size()) != i2c::ERROR_OK;",
          "",
          "[Added Lines]",
          "16:   uint8_t data[3];",
          "17:   data[0] = reg >> 8;",
          "18:   data[1] = reg >> 0;",
          "19:   data[2] = value;",
          "20:   return this->write(data, 3) != i2c::ERROR_OK;",
          "23:   uint8_t data[4];",
          "24:   data[0] = reg >> 8;",
          "25:   data[1] = reg >> 0;",
          "26:   data[2] = value >> 8;",
          "27:   data[3] = value >> 0;",
          "28:   return this->write(data, 4) != i2c::ERROR_OK;",
          "31:   uint8_t data[6];",
          "32:   data[0] = reg >> 8;",
          "33:   data[1] = reg >> 0;",
          "34:   data[2] = value >> 24;",
          "35:   data[3] = value >> 16;",
          "36:   data[4] = value >> 8;",
          "37:   data[5] = value >> 0;",
          "38:   return this->write(data, 6) != i2c::ERROR_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "855b1fd7062e1fabfe60c57bad08749aa7c1f390",
      "candidate_info": {
        "commit_hash": "855b1fd7062e1fabfe60c57bad08749aa7c1f390",
        "repo": "esphome/esphome",
        "commit_url": "https://github.com/esphome/esphome/commit/855b1fd7062e1fabfe60c57bad08749aa7c1f390",
        "files": [
          "esphome/const.py"
        ],
        "message": "Bump version to 2024.3.0b4",
        "before_after_code_files": [
          "esphome/const.py||esphome/const.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/esphome/esphome/pull/6397"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "esphome/const.py||esphome/const.py": [
          "File: esphome/const.py -> esphome/const.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \"\"\"Constants used by esphome.\"\"\"",
          "5: ALLOWED_NAME_CHARS = \"abcdefghijklmnopqrstuvwxyz0123456789-_\"",
          "6: VALID_SUBSTITUTIONS_CHARACTERS = (",
          "",
          "[Removed Lines]",
          "3: __version__ = \"2024.3.0b3\"",
          "",
          "[Added Lines]",
          "3: __version__ = \"2024.3.0b4\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}