{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d7894c9056e304b85939f752cdd89bbfb2141df5",
      "candidate_info": {
        "commit_hash": "d7894c9056e304b85939f752cdd89bbfb2141df5",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/d7894c9056e304b85939f752cdd89bbfb2141df5",
        "files": [
          "ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js"
        ],
        "message": "AMBARI-25379 Fix topic selection on kafka topics dasboard\n\nChange-Id: Ib7b7cf1b070440095dad200476b401cf666eedef",
        "before_after_code_files": [
          "ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js||ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js||ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js": [
          "File: ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js -> ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "466:             }",
          "468:             if (templateSrv.variables[0].query === \"kafka-topics\") {",
          "472:               if (selectedTopics[0] === \"\") {",
          "473:                 selectedTopics = \"\";",
          "474:               }",
          "476:                 metricsPromises.push(_.map(options.targets, function(target) {",
          "477:                   target.kbTopic = processTopic;",
          "478:                   target.kbMetric = target.metric.replace('*', target.kbTopic);",
          "",
          "[Removed Lines]",
          "469:               var allTopics = templateSrv.variables.filter(function(variable) { return variable.query === \"kafka-topics\";});",
          "470:               var selectedTopics = (_.isEmpty(allTopics)) ? \"\" : allTopics[0].options.filter(function(topic)",
          "471:               { return topic.selected; }).map(function(topicName) { return topicName.value; });",
          "475:               _.forEach(selectedTopic, function(processTopic) {",
          "",
          "[Added Lines]",
          "469:               var allTopics = templateSrv.variables.filter(function(variable) {",
          "470:                 return variable.query === \"kafka-topics\";",
          "471:               });",
          "472:               var selectedTopics = (_.isEmpty(allTopics)) ? \"\" : allTopics[0].options.filter(function(topic) {",
          "473:                 return topic.selected;",
          "474:               }).map(function(topicName) {",
          "475:                 return topicName.value;",
          "476:               });",
          "480:               _.forEach(selectedTopics, function(processTopic) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c02772af0f2e8f3fbf084e3183e627d51dd220b9",
      "candidate_info": {
        "commit_hash": "c02772af0f2e8f3fbf084e3183e627d51dd220b9",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/c02772af0f2e8f3fbf084e3183e627d51dd220b9",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java",
          "ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java"
        ],
        "message": "[AMBARI-25124]  ambari-audit.log entries span multiple lines (apappu)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java",
          "ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java||ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:       if (roles != null && !roles.isEmpty()) {",
          "68:         List<String> lines = new LinkedList<>();",
          "69:         for (Map.Entry<String, List<String>> entry : roles.entrySet()) {",
          "71:         }",
          "73:       }",
          "74:       builder.append(\"), Status(\")",
          "75:         .append(reasonOfFailure == null ? \"Success\" : \"Failed\");",
          "",
          "[Removed Lines]",
          "70:           lines.add(\"(\" +entry.getKey() + \": \" + StringUtils.join(entry.getValue(), \", \") + \")\");",
          "72:         builder.append(StringUtils.join(lines, \")\"));",
          "",
          "[Added Lines]",
          "70:           lines.add(entry.getKey() + \": \" + StringUtils.join(entry.getValue(), \", \"));",
          "72:         builder.append(StringUtils.join(lines, \",\"));",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java||ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java -> ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     String actualAuditMessage = evnt.getAuditMessage();",
          "61:     String expectedAuditMessage = String.format(\"User(%s), RemoteIp(%s), Operation(User login), Roles(%s), Status(Success)\",",
          "",
          "[Removed Lines]",
          "58:     String roleMessage = \"(\" + \"a: r1, r2, r3\" + \")\";",
          "",
          "[Added Lines]",
          "58:     String roleMessage =  \"a: r1, r2, r3\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     actualAuditMessage = evnt.getAuditMessage();",
          "80:     expectedAuditMessage = String.format(\"User(%s), RemoteIp(%s), ProxyUser(%s), Operation(User login), Roles(%s), Status(Success)\",",
          "",
          "[Removed Lines]",
          "77:     roleMessage = \"(\" + \"a: r1, r2, r3\" +  \")\";",
          "",
          "[Added Lines]",
          "77:     roleMessage = \"a: r1, r2, r3\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110:     String actualAuditMessage = evnt.getAuditMessage();",
          "115:     String expectedAuditMessage = String.format(\"User(%s), RemoteIp(%s), Operation(User login), Roles(%s), Status(Failed), Reason(%s), Consecutive failures(%d)\",",
          "",
          "[Removed Lines]",
          "112:     String roleMessage = \"(\" + \"a: r1, r2, r3\" +  \")\";",
          "",
          "[Added Lines]",
          "112:     String roleMessage =  \"a: r1, r2, r3\" ;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131:     actualAuditMessage = evnt.getAuditMessage();",
          "136:     expectedAuditMessage = String.format(\"User(%s), RemoteIp(%s), ProxyUser(%s), Operation(User login), Roles(%s), Status(Failed), Reason(%s), Consecutive failures(%d)\",",
          "",
          "[Removed Lines]",
          "133:     roleMessage = \"(\" + \"a: r1, r2, r3\" +  \")\";",
          "",
          "[Added Lines]",
          "133:     roleMessage = \"a: r1, r2, r3\" ;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "165:     String actualAuditMessage = evnt.getAuditMessage();",
          "170:     String expectedAuditMessage = String.format(\"User(%s), RemoteIp(%s), Operation(User login), Roles(%s), Status(Failed), Reason(%s), Consecutive failures(UNKNOWN USER)\",",
          "",
          "[Removed Lines]",
          "167:     String roleMessage = \"(\" + \"a: r1, r2, r3\" +  \")\";",
          "",
          "[Added Lines]",
          "167:     String roleMessage = \"a: r1, r2, r3\" ;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "186:     actualAuditMessage = evnt.getAuditMessage();",
          "191:     expectedAuditMessage = String.format(\"User(%s), RemoteIp(%s), ProxyUser(%s), Operation(User login), Roles(%s), Status(Failed), Reason(%s), Consecutive failures(UNKNOWN USER)\",",
          "",
          "[Removed Lines]",
          "188:     roleMessage =  \"(\" + \"a: r1, r2, r3\" +  \")\";",
          "",
          "[Added Lines]",
          "188:     roleMessage =  \"a: r1, r2, r3\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0153c5c90f47d1df2f816b8f8e195880e931bae",
      "candidate_info": {
        "commit_hash": "f0153c5c90f47d1df2f816b8f8e195880e931bae",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/f0153c5c90f47d1df2f816b8f8e195880e931bae",
        "files": [
          "ambari-agent/conf/unix/ambari-agent.service",
          "ambari-agent/pom.xml",
          "ambari-agent/src/packages/tarball/all.xml"
        ],
        "message": "AMBARI-25151 SystemD support for ambari-agent on SLES12 (benyoka) (#2819)\n\n* AMBARI-25151 SystemD support for ambari-agent on SLES12 (benyoka)\n\n* AMBARI-25151 fix service unit file (benyoka)\n\n* AMBARI-25151 fix service unit file (benyoka)\n\n* AMBARI-25151 review comment (benyoka)\n\n* AMBARI-25151 remove runlevel 2 and 4 (benyoka)\n\n* AMBARI-25151 add pidfile, disable RemainAfterExit (benyoka)",
        "before_after_code_files": [
          "ambari-agent/conf/unix/ambari-agent.service||ambari-agent/conf/unix/ambari-agent.service"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-agent/conf/unix/ambari-agent.service||ambari-agent/conf/unix/ambari-agent.service": [
          "File: ambari-agent/conf/unix/ambari-agent.service -> ambari-agent/conf/unix/ambari-agent.service",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Licensed to the Apache Software Foundation (ASF) under one or more",
          "2: # contributor license agreements.  See the NOTICE file distributed with",
          "3: # this work for additional information regarding copyright ownership.",
          "4: # The ASF licenses this file to You under the Apache License, Version 2.0",
          "5: # (the \"License\"); you may not use this file except in compliance with",
          "6: # the License.  You may obtain a copy of the License at",
          "7: #",
          "8: #     http://www.apache.org/licenses/LICENSE-2.0",
          "9: #",
          "10: # Unless required by applicable law or agreed to in writing, software",
          "11: # distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: # See the License for the specific",
          "15: # This service unit file is tuned for SLES 12.x. It is not suitable for RHEL like distributions due to different",
          "16: # paths for ExecStart/ExecStop.",
          "18: [Unit]",
          "19: Description=Ambari Agent Service for SLES",
          "20: Before=runlevel3.target",
          "21: Before=runlevel5.target",
          "22: Before=shutdown.target",
          "23: After=remote-fs.target",
          "24: After=network-online.target",
          "25: Wants=network-online.target",
          "26: Conflicts=shutdown.target",
          "28: [Service]",
          "29: Type=forking",
          "30: PIDFile=/run/ambari-agent/ambari-agent.pid",
          "31: Restart=no",
          "32: TimeoutSec=5min",
          "33: IgnoreSIGPIPE=no",
          "34: KillMode=process",
          "35: GuessMainPID=no",
          "36: RemainAfterExit=no",
          "37: TasksMax=infinity",
          "38: ExecStart=/etc/init.d/ambari-agent start",
          "39: ExecStop=/etc/init.d/ambari-agent stop",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "284ed88f50c09dfdac073cc74f463da738d50a81",
      "candidate_info": {
        "commit_hash": "284ed88f50c09dfdac073cc74f463da738d50a81",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/284ed88f50c09dfdac073cc74f463da738d50a81",
        "files": [
          "ambari-common/src/main/python/resource_management/libraries/functions/hive_check.py"
        ],
        "message": "AMBARI-25500. Hive Service Check Fails if the trustStorePassword has Special character $ (#3193) (asnaik via dgrinenko)",
        "before_after_code_files": [
          "ambari-common/src/main/python/resource_management/libraries/functions/hive_check.py||ambari-common/src/main/python/resource_management/libraries/functions/hive_check.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-common/src/main/python/resource_management/libraries/functions/hive_check.py||ambari-common/src/main/python/resource_management/libraries/functions/hive_check.py": [
          "File: ambari-common/src/main/python/resource_management/libraries/functions/hive_check.py -> ambari-common/src/main/python/resource_management/libraries/functions/hive_check.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:   # append url according to ssl configuration",
          "70:   if ssl and ssl_keystore is not None and ssl_password is not None:",
          "73:   # append url according to principal and execute kinit",
          "74:   if kinitcmd and hive_auth != \"LDAP\":",
          "",
          "[Removed Lines]",
          "71:     beeline_url.extend(['ssl={ssl_str}', 'sslTrustStore={ssl_keystore}', 'trustStorePassword={ssl_password!p}'])",
          "",
          "[Added Lines]",
          "71:     beeline_url.extend(['ssl={ssl_str}', 'sslTrustStore={ssl_keystore}', \"trustStorePassword='{ssl_password!p}'\"])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d54e08a220ebb00c6d867c2f320d9bf5fd414b95",
      "candidate_info": {
        "commit_hash": "d54e08a220ebb00c6d867c2f320d9bf5fd414b95",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/d54e08a220ebb00c6d867c2f320d9bf5fd414b95",
        "files": [
          "ambari-server/docs/configuration/index.md",
          "ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java"
        ],
        "message": "[AMBARI-24471] URL rewrite rules in gateway cannot be applied when thee response content from ambari server is compressed. (#2049)\n\n* [AMBARI-24471] URL rewrite rules in gateway cannot be applied when the response content from ambari server is compressed.\n\n* [AMBARI-24471] URL rewrite rules in gateway cannot be applied when the response content from ambari server is compressed. (2)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java||ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java||ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java -> ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "466:   public static final ConfigurationProperty<String> API_CSRF_PREVENTION = new ConfigurationProperty<>(",
          "467:       \"api.csrfPrevention.enabled\", \"true\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "472:   @Markdown(description = \"Determines whether jetty Gzip compression is enabled or not.\")",
          "473:   public static final ConfigurationProperty<String> GZIP_HANDLER_JETTY_ENABLED = new ConfigurationProperty<>(",
          "474:     \"gzip.handler.jetty.enabled\", \"true\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3796:     return Boolean.parseBoolean(getProperty(API_GZIP_COMPRESSION_ENABLED));",
          "3797:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3811:   public boolean isGzipHandlerEnabledForJetty() {",
          "3812:     return Boolean.parseBoolean(getProperty(GZIP_HANDLER_JETTY_ENABLED));",
          "3813:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "471:       enableLog4jMonitor(configsMap);",
          "478:           \"application/x-javascript\", \"application/xml\", \"application/x-www-form-urlencoded\", \"application/json\");",
          "481:       server.setHandler(handlerList);",
          "",
          "[Removed Lines]",
          "473:       GzipHandler gzipHandler = new GzipHandler();",
          "474:       gzipHandler.setHandler(root);",
          "477:       gzipHandler.setIncludedMimeTypes(\"text/html\", \"text/plain\", \"text/xml\", \"text/css\", \"application/javascript\",",
          "479:       handlerList.addHandler(gzipHandler);",
          "",
          "[Added Lines]",
          "473:       if (configs.isGzipHandlerEnabledForJetty()) {",
          "474:         GzipHandler gzipHandler = new GzipHandler();",
          "475:         gzipHandler.setHandler(root);",
          "477:         gzipHandler.setIncludedMimeTypes(\"text/html\", \"text/plain\", \"text/xml\", \"text/css\", \"application/javascript\",",
          "479:         handlerList.addHandler(gzipHandler);",
          "480:       } else {",
          "481:         handlerList.addHandler(root);",
          "482:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}