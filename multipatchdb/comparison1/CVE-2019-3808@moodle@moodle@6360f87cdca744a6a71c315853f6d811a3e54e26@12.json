{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ab65b87f3dcb689a55548e31b6b95841ae9f54fa",
      "candidate_info": {
        "commit_hash": "ab65b87f3dcb689a55548e31b6b95841ae9f54fa",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/ab65b87f3dcb689a55548e31b6b95841ae9f54fa",
        "files": [
          "version.php"
        ],
        "message": "on-demand release 3.5beta+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '35';                       // This version's branch.",
          "39: $maturity = MATURITY_BETA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2018050900.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.5beta+ (Build: 20180508)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2018051200.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.5beta+ (Build: 20180512)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d4f4f0051290d0dc72aaa90d4b9b00f30914529",
      "candidate_info": {
        "commit_hash": "9d4f4f0051290d0dc72aaa90d4b9b00f30914529",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/9d4f4f0051290d0dc72aaa90d4b9b00f30914529",
        "files": [
          "version.php"
        ],
        "message": "on-demand release 3.7dev+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019040200.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev+ (Build: 20190402)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019040600.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev+ (Build: 20190406)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "903ec849c5ec6ab553f42f69b58bb3e74bbb59ef",
      "candidate_info": {
        "commit_hash": "903ec849c5ec6ab553f42f69b58bb3e74bbb59ef",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/903ec849c5ec6ab553f42f69b58bb3e74bbb59ef",
        "files": [
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "MDL-65313 core: upgrade code to remove stale favourites for messaging\n\nThese were left behing when deleting a group or a course.",
        "before_after_code_files": [
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3301:         upgrade_main_savepoint(true, 2019042700.01);",
          "3302:     }",
          "3304:     return true;",
          "3305: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3304:     if ($oldversion < 2019050300.01) {",
          "3306:         $select = 'id IN (",
          "3307:             SELECT fav.id as id",
          "3308:               FROM {favourite} fav",
          "3309:          LEFT JOIN {context} ctx ON (ctx.id = fav.contextid)",
          "3310:              WHERE fav.component = :component",
          "3311:                AND fav.itemtype = :itemtype",
          "3312:                AND ctx.id IS NULL",
          "3313:                )';",
          "3314:         $params = ['component' => 'core_message', 'itemtype' => 'message_conversations'];",
          "3315:         $DB->delete_records_select('favourite', $select, $params);",
          "3317:         upgrade_main_savepoint(true, 2019050300.01);",
          "3318:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019050300.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019050300.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "88cb8b781d83e6aff3ef275a719023dcd2ea8499",
      "candidate_info": {
        "commit_hash": "88cb8b781d83e6aff3ef275a719023dcd2ea8499",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/88cb8b781d83e6aff3ef275a719023dcd2ea8499",
        "files": [
          "admin/settings/appearance.php",
          "cohort/classes/external/cohort_summary_exporter.php",
          "cohort/edit_form.php",
          "cohort/externallib.php",
          "cohort/lib.php",
          "cohort/tests/behat/upload_cohorts.feature",
          "cohort/tests/cohortlib_test.php",
          "cohort/tests/externallib_test.php",
          "cohort/tests/fixtures/uploadcohorts4.csv",
          "cohort/upload_form.php",
          "config-dist.php",
          "lang/en/admin.php",
          "lang/en/cohort.php",
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "lib/moodlelib.php",
          "lib/pagelib.php",
          "version.php"
        ],
        "message": "MDL-61601 cohort: Add theme support for cohorts\n\nIf enabled $CFG->allowcohortthemes, then themes can be set at the cohort level.\nThis will affect all users with only one cohort or more than one but with the same theme.\nThe default theme order will be: course, category, session, user, cohort, site.",
        "before_after_code_files": [
          "admin/settings/appearance.php||admin/settings/appearance.php",
          "cohort/classes/external/cohort_summary_exporter.php||cohort/classes/external/cohort_summary_exporter.php",
          "cohort/edit_form.php||cohort/edit_form.php",
          "cohort/externallib.php||cohort/externallib.php",
          "cohort/lib.php||cohort/lib.php",
          "cohort/tests/behat/upload_cohorts.feature||cohort/tests/behat/upload_cohorts.feature",
          "cohort/tests/cohortlib_test.php||cohort/tests/cohortlib_test.php",
          "cohort/tests/externallib_test.php||cohort/tests/externallib_test.php",
          "cohort/upload_form.php||cohort/upload_form.php",
          "config-dist.php||config-dist.php",
          "lang/en/admin.php||lang/en/admin.php",
          "lang/en/cohort.php||lang/en/cohort.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "lib/moodlelib.php||lib/moodlelib.php",
          "lib/pagelib.php||lib/pagelib.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/settings/appearance.php||admin/settings/appearance.php": [
          "File: admin/settings/appearance.php -> admin/settings/appearance.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:     $temp->add(new admin_setting_configcheckbox('allowuserthemes', new lang_string('allowuserthemes', 'admin'), new lang_string('configallowuserthemes', 'admin'), 0));",
          "23:     $temp->add(new admin_setting_configcheckbox('allowcoursethemes', new lang_string('allowcoursethemes', 'admin'), new lang_string('configallowcoursethemes', 'admin'), 0));",
          "24:     $temp->add(new admin_setting_configcheckbox('allowcategorythemes',  new lang_string('allowcategorythemes', 'admin'), new lang_string('configallowcategorythemes', 'admin'), 0));",
          "25:     $temp->add(new admin_setting_configcheckbox('allowthemechangeonurl',  new lang_string('allowthemechangeonurl', 'admin'), new lang_string('configallowthemechangeonurl', 'admin'), 0));",
          "26:     $temp->add(new admin_setting_configcheckbox('allowuserblockhiding', new lang_string('allowuserblockhiding', 'admin'), new lang_string('configallowuserblockhiding', 'admin'), 1));",
          "27:     $temp->add(new admin_setting_configcheckbox('allowblockstodock', new lang_string('allowblockstodock', 'admin'), new lang_string('configallowblockstodock', 'admin'), 1));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:     $temp->add(new admin_setting_configcheckbox('allowcohortthemes',  new lang_string('allowcohortthemes', 'admin'), new lang_string('configallowcohortthemes', 'admin'), 0));",
          "",
          "---------------"
        ],
        "cohort/classes/external/cohort_summary_exporter.php||cohort/classes/external/cohort_summary_exporter.php": [
          "File: cohort/classes/external/cohort_summary_exporter.php -> cohort/classes/external/cohort_summary_exporter.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:             ),",
          "65:             'visible' => array(",
          "66:                 'type' => PARAM_BOOL,",
          "67:             )",
          "68:         );",
          "69:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:             ),",
          "68:             'theme' => array(",
          "69:                 'type' => PARAM_THEME,",
          "70:                 'null' => NULL_ALLOWED",
          "",
          "---------------"
        ],
        "cohort/edit_form.php||cohort/edit_form.php": [
          "File: cohort/edit_form.php -> cohort/edit_form.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:     public function definition() {",
          "36:         $mform = $this->_form;",
          "37:         $editoroptions = $this->_customdata['editoroptions'];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:         global $CFG;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:         $mform->addElement('editor', 'description_editor', get_string('description', 'cohort'), null, $editoroptions);",
          "55:         $mform->setType('description_editor', PARAM_RAW);",
          "57:         $mform->addElement('hidden', 'id');",
          "58:         $mform->setType('id', PARAM_INT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:         if (!empty($CFG->allowcohortthemes)) {",
          "59:             $themes = array_merge(array('' => get_string('forceno')), cohort_get_list_of_themes());",
          "60:             $mform->addElement('select', 'theme', get_string('forcetheme'), $themes);",
          "61:         }",
          "",
          "---------------"
        ],
        "cohort/externallib.php||cohort/externallib.php": [
          "File: cohort/externallib.php -> cohort/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:                             'description' => new external_value(PARAM_RAW, 'cohort description', VALUE_OPTIONAL),",
          "55:                             'descriptionformat' => new external_format_value('description', VALUE_DEFAULT),",
          "56:                             'visible' => new external_value(PARAM_BOOL, 'cohort visible', VALUE_OPTIONAL, true),",
          "57:                         )",
          "58:                     )",
          "59:                 )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:                             'theme' => new external_value(PARAM_THEME,",
          "58:                                 'the cohort theme. The allowcohortthemes setting must be enabled on Moodle',",
          "59:                                 VALUE_OPTIONAL",
          "60:                             ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:         $params = self::validate_parameters(self::create_cohorts_parameters(), array('cohorts' => $cohorts));",
          "77:         $transaction = $DB->start_delegated_transaction();",
          "79:         $syscontext = context_system::instance();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:         $availablethemes = cohort_get_list_of_themes();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:             self::validate_context($context);",
          "108:             require_capability('moodle/cohort:manage', $context);",
          "111:             $cohort->descriptionformat = external_validate_format($cohort->descriptionformat);",
          "112:             $cohort->id = cohort_add_cohort($cohort);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:             if (isset($cohort->theme)) {",
          "118:                 if (!empty($CFG->allowcohortthemes)) {",
          "119:                     if (empty($availablethemes[$cohort->theme])) {",
          "120:                         throw new moodle_exception('errorinvalidparam', 'webservice', '', 'theme');",
          "121:                     }",
          "122:                 }",
          "123:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "137:                     'description' => new external_value(PARAM_RAW, 'cohort description'),",
          "138:                     'descriptionformat' => new external_format_value('description'),",
          "139:                     'visible' => new external_value(PARAM_BOOL, 'cohort visible'),",
          "140:                 )",
          "141:             )",
          "142:         );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:                     'theme' => new external_value(PARAM_THEME, 'cohort theme', VALUE_OPTIONAL),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "225:     public static function get_cohorts($cohortids = array()) {",
          "228:         $params = self::validate_parameters(self::get_cohorts_parameters(), array('cohortids' => $cohortids));",
          "",
          "[Removed Lines]",
          "226:         global $DB;",
          "",
          "[Added Lines]",
          "242:         global $DB, $CFG;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "245:                 throw new required_capability_exception($context, 'moodle/cohort:view', 'nopermissions', '');",
          "246:             }",
          "248:             list($cohort->description, $cohort->descriptionformat) =",
          "249:                 external_format_text($cohort->description, $cohort->descriptionformat,",
          "250:                         $context->id, 'cohort', 'description', $cohort->id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:             if (!empty($cohort->theme) && empty($CFG->allowcohortthemes)) {",
          "266:                 $cohort->theme = null;",
          "267:             }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "271:                     'description' => new external_value(PARAM_RAW, 'cohort description'),",
          "272:                     'descriptionformat' => new external_format_value('description'),",
          "273:                     'visible' => new external_value(PARAM_BOOL, 'cohort visible'),",
          "274:                 )",
          "275:             )",
          "276:         );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "295:                     'theme' => new external_value(PARAM_THEME, 'cohort theme', VALUE_OPTIONAL),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "367:         $cohorts = array();",
          "368:         foreach ($results as $key => $cohort) {",
          "369:             $cohortcontext = context::instance_by_id($cohort->contextid);",
          "370:             if (!isset($cohort->description)) {",
          "371:                 $cohort->description = '';",
          "372:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "394:             if (!empty($cohort->theme) && empty($CFG->allowcohortthemes)) {",
          "395:                 $cohort->theme = null;",
          "396:             }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "399:                     'description' => new external_value(PARAM_RAW, 'cohort description'),",
          "400:                     'descriptionformat' => new external_format_value('description'),",
          "401:                     'visible' => new external_value(PARAM_BOOL, 'cohort visible'),",
          "402:                 ))",
          "403:             )",
          "404:         ));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430:                     'theme' => new external_value(PARAM_THEME, 'cohort theme', VALUE_OPTIONAL),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "432:                             'description' => new external_value(PARAM_RAW, 'cohort description', VALUE_OPTIONAL),",
          "433:                             'descriptionformat' => new external_format_value('description', VALUE_DEFAULT),",
          "434:                             'visible' => new external_value(PARAM_BOOL, 'cohort visible', VALUE_OPTIONAL),",
          "435:                         )",
          "436:                     )",
          "437:                 )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "464:                             'theme' => new external_value(PARAM_THEME,",
          "465:                                 'the cohort theme. The allowcohortthemes setting must be enabled on Moodle',",
          "466:                                 VALUE_OPTIONAL",
          "467:                             ),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "453:         $params = self::validate_parameters(self::update_cohorts_parameters(), array('cohorts' => $cohorts));",
          "455:         $transaction = $DB->start_delegated_transaction();",
          "456:         $syscontext = context_system::instance();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "488:         $availablethemes = cohort_get_list_of_themes();",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "490:                 require_capability('moodle/cohort:manage', $context);",
          "491:             }",
          "493:             if (!empty($cohort->description)) {",
          "494:                 $cohort->descriptionformat = external_validate_format($cohort->descriptionformat);",
          "495:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "529:             if (!empty($cohort->theme) && !empty($CFG->allowcohortthemes)) {",
          "530:                 if (empty($availablethemes[$cohort->theme])) {",
          "531:                     $debuginfo = 'The following cohort theme is not installed on this site: '.$cohort->theme;",
          "532:                     throw new moodle_exception('errorinvalidparam', 'webservice', '', 'theme', $debuginfo);",
          "533:                 }",
          "534:             }",
          "",
          "---------------"
        ],
        "cohort/lib.php||cohort/lib.php": [
          "File: cohort/lib.php -> cohort/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: function cohort_add_cohort($cohort) {",
          "43:     if (!isset($cohort->name)) {",
          "44:         throw new coding_exception('Missing cohort name in cohort_add_cohort().');",
          "",
          "[Removed Lines]",
          "41:     global $DB;",
          "",
          "[Added Lines]",
          "41:     global $DB, $CFG;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     if (empty($cohort->component)) {",
          "59:         $cohort->component = '';",
          "60:     }",
          "61:     if (!isset($cohort->timecreated)) {",
          "62:         $cohort->timecreated = time();",
          "63:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:     if (empty($CFG->allowcohortthemes) && isset($cohort->theme)) {",
          "62:         unset($cohort->theme);",
          "63:     }",
          "64:     if (empty($cohort->theme) || empty($CFG->allowcohortthemes)) {",
          "65:         $cohort->theme = '';",
          "66:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85: function cohort_update_cohort($cohort) {",
          "87:     if (property_exists($cohort, 'component') and empty($cohort->component)) {",
          "89:         $cohort->component = '';",
          "90:     }",
          "91:     $cohort->timemodified = time();",
          "92:     $DB->update_record('cohort', $cohort);",
          "",
          "[Removed Lines]",
          "86:     global $DB;",
          "",
          "[Added Lines]",
          "92:     global $DB, $CFG;",
          "98:     if (empty($CFG->allowcohortthemes) && isset($cohort->theme)) {",
          "99:         unset($cohort->theme);",
          "100:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "478:     return array('totalcohorts' => $totalcohorts, 'cohorts' => $cohorts, 'allcohorts' => $allcohorts);",
          "479: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "497: function cohort_get_user_cohorts($userid) {",
          "498:     global $DB;",
          "500:     $sql = 'SELECT c.*",
          "501:               FROM {cohort} c",
          "502:               JOIN {cohort_members} cm ON c.id = cm.cohortid",
          "503:              WHERE cm.userid = ? AND c.visible = 1';",
          "504:     return $DB->get_records_sql($sql, array($userid));",
          "505: }",
          "517: function cohort_get_user_cohort_theme($userid) {",
          "518:     $cohorts = cohort_get_user_cohorts($userid);",
          "519:     $theme = null;",
          "520:     foreach ($cohorts as $cohort) {",
          "521:         if (!empty($cohort->theme)) {",
          "522:             if (null === $theme) {",
          "523:                 $theme = $cohort->theme;",
          "524:             } else if ($theme != $cohort->theme) {",
          "525:                 return null;",
          "526:             }",
          "527:         }",
          "528:     }",
          "529:     return $theme;",
          "530: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "568:         return \\core_cohort\\output\\cohortidnumber::update($itemid, $newvalue);",
          "569:     }",
          "570: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "628: function cohort_get_list_of_themes() {",
          "629:     $themes = array();",
          "630:     $allthemes = get_list_of_themes();",
          "631:     foreach ($allthemes as $key => $theme) {",
          "632:         if (empty($theme->hidefromselector)) {",
          "633:             $themes[$key] = get_string('pluginname', 'theme_'.$theme->name);",
          "634:         }",
          "635:     }",
          "636:     return $themes;",
          "637: }",
          "",
          "---------------"
        ],
        "cohort/tests/behat/upload_cohorts.feature||cohort/tests/behat/upload_cohorts.feature": [
          "File: cohort/tests/behat/upload_cohorts.feature -> cohort/tests/behat/upload_cohorts.feature",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     And the \"class\" attribute of \"cohort name 5\" \"table_row\" should contain \"dimmed_text\"",
          "51:     And \".dimmed_text\" \"css_element\" should not exist in the \"cohort name 6\" \"table_row\"",
          "54:   Scenario: Upload cohorts with default category context as admin",
          "55:     When I log in as \"admin\"",
          "56:     And I navigate to \"Cohorts\" node in \"Site administration > Users > Accounts\"",
          "",
          "[Removed Lines]",
          "53:   @javascript",
          "",
          "[Added Lines]",
          "53:   @javascript @_file_upload",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:       | Cat 2         | cohort name 5 | cohortid5 |                   | 0           | Created manually |",
          "82:       | Cat 3         | cohort name 6 | cohortid6 |                   | 0           | Created manually |",
          "85:   Scenario: Upload cohorts with default category context as manager",
          "86:     Given the following \"users\" exist:",
          "87:       | username | firstname | lastname | email                  |",
          "",
          "[Removed Lines]",
          "84:   @javascript",
          "",
          "[Added Lines]",
          "84:   @javascript @_file_upload",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:     And I press \"Upload cohorts\"",
          "108:     And I should see \"Uploaded 6 cohorts\"",
          "111:   Scenario: Upload cohorts with conflicting id number",
          "112:     Given the following \"cohorts\" exist:",
          "113:       | name   | idnumber  |",
          "",
          "[Removed Lines]",
          "110:   @javascript",
          "",
          "[Added Lines]",
          "110:   @javascript @_file_upload",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "128:       | cohort name 6 | cohortid6 |  | Cat 3 |  |",
          "129:     And \"Upload cohorts\" \"button\" should not exist",
          "132:   Scenario: Upload cohorts with different ways of specifying context",
          "133:     When I log in as \"admin\"",
          "134:     And I navigate to \"Cohorts\" node in \"Site administration > Users > Accounts\"",
          "",
          "[Removed Lines]",
          "131:   @javascript",
          "",
          "[Added Lines]",
          "131:   @javascript @_file_upload",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "161:     And I should not see \"not found or you\"",
          "162:     And I press \"Upload cohorts\"",
          "163:     And I should see \"Uploaded 5 cohorts\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:   @javascript @_file_upload",
          "166:   Scenario: Upload cohorts with theme",
          "167:     When I log in as \"admin\"",
          "168:     And I navigate to \"Cohorts\" node in \"Site administration > Users > Accounts\"",
          "169:     And I follow \"Upload cohorts\"",
          "170:     And I upload \"cohort/tests/fixtures/uploadcohorts4.csv\" file to \"File\" filemanager",
          "171:     And I click on \"Preview\" \"button\"",
          "172:     Then the following should exist in the \"previewuploadedcohorts\" table:",
          "173:       | name          | idnumber  | description       | Context       | visible | theme  | Status |",
          "174:       | cohort name 1 | cohortid1 | first description | System        | 1       | boost  |        |",
          "175:       | cohort name 2 | cohortid2 |                   | System        | 1       |        |        |",
          "176:       | cohort name 3 | cohortid3 |                   | Miscellaneous | 0       | boost  |        |",
          "177:       | cohort name 4 | cohortid4 |                   | Cat 1         | 1       | clean  |        |",
          "178:       | cohort name 5 | cohortid5 |                   | Cat 2         | 0       |        |        |",
          "179:       | cohort name 6 | cohortid6 |                   | Cat 3         | 1       | clean  |        |",
          "180:     And I press \"Upload cohorts\"",
          "181:     And I should see \"Uploaded 6 cohorts\"",
          "182:     And I press \"Continue\"",
          "183:     And the following should exist in the \"cohorts\" table:",
          "184:       | Name          | Cohort ID | Description | Cohort size | Source           |",
          "185:       | cohort name 1 | cohortid1 | first description | 0           | Created manually |",
          "186:       | cohort name 2 | cohortid2 |             | 0           | Created manually |",
          "187:     And I follow \"All cohorts\"",
          "188:     And the following should exist in the \"cohorts\" table:",
          "189:       | Category      | Name          | Cohort ID | Description       | Cohort size | Source           |",
          "190:       | System        | cohort name 1 | cohortid1 | first description | 0           | Created manually |",
          "191:       | System        | cohort name 2 | cohortid2 |                   | 0           | Created manually |",
          "192:       | Miscellaneous | cohort name 3 | cohortid3 |                   | 0           | Created manually |",
          "193:       | Cat 1         | cohort name 4 | cohortid4 |                   | 0           | Created manually |",
          "194:       | Cat 2         | cohort name 5 | cohortid5 |                   | 0           | Created manually |",
          "195:       | Cat 3         | cohort name 6 | cohortid6 |                   | 0           | Created manually |",
          "",
          "---------------"
        ],
        "cohort/tests/cohortlib_test.php||cohort/tests/cohortlib_test.php": [
          "File: cohort/tests/cohortlib_test.php -> cohort/tests/cohortlib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:         $this->assertEquals($cohort->descriptionformat, $newcohort->descriptionformat);",
          "62:         $this->assertNotEmpty($newcohort->timecreated);",
          "63:         $this->assertSame($newcohort->component, '');",
          "64:         $this->assertSame($newcohort->timecreated, $newcohort->timemodified);",
          "65:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:         $this->assertSame($newcohort->theme, '');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:         $this->assertSame($cohort->descriptionformat, $newcohort->descriptionformat);",
          "143:         $this->assertSame($cohort->timecreated, $newcohort->timecreated);",
          "144:         $this->assertSame($cohort->component, $newcohort->component);",
          "145:         $this->assertGreaterThan($newcohort->timecreated, $newcohort->timemodified);",
          "146:         $this->assertLessThanOrEqual(time(), $newcohort->timemodified);",
          "147:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:         $this->assertSame($newcohort->theme, '');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "158:         $cohort->idnumber = 'testid';",
          "159:         $cohort->description = 'test cohort desc';",
          "160:         $cohort->descriptionformat = FORMAT_HTML;",
          "161:         $id = cohort_add_cohort($cohort);",
          "162:         $this->assertNotEmpty($id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163:         $cohort->theme = '';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170:         cohort_update_cohort($cohort);",
          "172:         $events = $sink->get_events();",
          "173:         $sink->close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:         $cohort->theme = '';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "651:         $result = cohort_get_available_cohorts($course1ctx, COHORT_ALL, 0, 0, '');",
          "652:         $this->assertEquals(array($cohort1->id, $cohort2->id, $cohort4->id), array_keys($result));",
          "653:     }",
          "654: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "663:     public function test_cohort_add_theme_cohort() {",
          "664:         global $DB;",
          "666:         $this->resetAfterTest();",
          "669:         set_config('allowcohortthemes', 1);",
          "670:         set_config('theme', 'boost');",
          "672:         $systemctx = context_system::instance();",
          "673:         $cohort1 = $this->getDataGenerator()->create_cohort(array('contextid' => $systemctx->id, 'name' => 'test cohort 1',",
          "674:             'idnumber' => 'testid1', 'description' => 'test cohort desc', 'descriptionformat' => FORMAT_HTML, 'theme' => 'clean'));",
          "676:         $id = cohort_add_cohort($cohort1);",
          "677:         $this->assertNotEmpty($id);",
          "678:         $newcohort = $DB->get_record('cohort', array('id' => $id));",
          "679:         $this->assertEquals($cohort1->contextid, $newcohort->contextid);",
          "680:         $this->assertSame($cohort1->name, $newcohort->name);",
          "681:         $this->assertSame($cohort1->description, $newcohort->description);",
          "682:         $this->assertEquals($cohort1->descriptionformat, $newcohort->descriptionformat);",
          "683:         $this->assertNotEmpty($newcohort->theme);",
          "684:         $this->assertSame($cohort1->theme, $newcohort->theme);",
          "685:         $this->assertNotEmpty($newcohort->timecreated);",
          "686:         $this->assertSame($newcohort->component, '');",
          "687:         $this->assertSame($newcohort->timecreated, $newcohort->timemodified);",
          "690:         set_config('allowcohortthemes', 0);",
          "692:         $cohort2 = $this->getDataGenerator()->create_cohort(array('contextid' => $systemctx->id, 'name' => 'test cohort 2',",
          "693:             'idnumber' => 'testid2', 'description' => 'test cohort desc', 'descriptionformat' => FORMAT_HTML, 'theme' => 'clean'));",
          "695:         $id = cohort_add_cohort($cohort2);",
          "696:         $this->assertNotEmpty($id);",
          "697:         $newcohort = $DB->get_record('cohort', array('id' => $id));",
          "698:         $this->assertSame($cohort2->name, $newcohort->name);",
          "699:         $this->assertEmpty($newcohort->theme);",
          "700:     }",
          "705:     public function test_cohort_update_theme_cohort() {",
          "706:         global $DB;",
          "708:         $this->resetAfterTest();",
          "711:         set_config('allowcohortthemes', 1);",
          "712:         set_config('theme', 'boost');",
          "714:         $systemctx = context_system::instance();",
          "715:         $cohort1 = $this->getDataGenerator()->create_cohort(array('contextid' => $systemctx->id, 'name' => 'test cohort 1',",
          "716:             'idnumber' => 'testid1', 'description' => 'test cohort desc', 'descriptionformat' => FORMAT_HTML, 'theme' => 'clean'));",
          "717:         $id = cohort_add_cohort($cohort1);",
          "718:         $this->assertNotEmpty($id);",
          "721:         $cohort1 = $DB->get_record('cohort', array('id' => $id));",
          "722:         $cohort1->name = 'test cohort 1 updated';",
          "723:         $cohort1->theme = 'more';",
          "724:         cohort_update_cohort($cohort1);",
          "725:         $updatedcohort = $DB->get_record('cohort', array('id' => $id));",
          "726:         $this->assertEquals($cohort1->contextid, $updatedcohort->contextid);",
          "727:         $this->assertSame($cohort1->name, $updatedcohort->name);",
          "728:         $this->assertSame($cohort1->description, $updatedcohort->description);",
          "729:         $this->assertNotEmpty($updatedcohort->theme);",
          "730:         $this->assertSame($cohort1->theme, $updatedcohort->theme);",
          "733:         set_config('allowcohortthemes', 0);",
          "734:         $cohort2 = $DB->get_record('cohort', array('id' => $id));",
          "735:         $cohort2->theme = 'clean';",
          "736:         cohort_update_cohort($cohort2);",
          "737:         $updatedcohort = $DB->get_record('cohort', array('id' => $id));",
          "738:         $this->assertEquals($cohort2->contextid, $updatedcohort->contextid);",
          "739:         $this->assertNotEmpty($updatedcohort->theme);",
          "740:         $this->assertSame($cohort1->theme, $updatedcohort->theme);",
          "741:     }",
          "746:     public function test_cohort_get_user_theme() {",
          "747:         global $DB, $PAGE, $USER;",
          "749:         $this->resetAfterTest();",
          "752:         set_config('allowuserthemes', 1);",
          "753:         set_config('allowcohortthemes', 1);",
          "755:         $systemctx = context_system::instance();",
          "757:         $usercases = $this->get_user_theme_cases();",
          "758:         foreach ($usercases as $casename => $casevalues) {",
          "759:             set_config('theme', $casevalues['sitetheme']);",
          "761:             $user = $this->getDataGenerator()->create_user(array('theme' => $casevalues['usertheme']));",
          "764:             $cohorts = array();",
          "765:             foreach ($casevalues['cohorts'] as $cohorttheme) {",
          "766:                 $cohort = $this->getDataGenerator()->create_cohort(array('contextid' => $systemctx->id, 'name' => 'Cohort',",
          "767:                     'idnumber' => '', 'description' => '', 'theme' => $cohorttheme));",
          "768:                 $cohorts[] = $cohort;",
          "769:                 cohort_add_member($cohort->id, $user->id);",
          "770:             }",
          "773:             $this->setUser($user);",
          "775:             $USER = get_complete_user_data('id', $user->id);",
          "777:             $PAGE->reset_theme_and_output();",
          "778:             $PAGE->initialise_theme_and_output();",
          "779:             $result = $PAGE->__get('theme')->name;",
          "780:             $this->assertEquals($casevalues['expected'], $result, $casename);",
          "781:         }",
          "782:     }",
          "797:     private function get_user_theme_cases() {",
          "798:         return [",
          "799:           'User not a member of any cohort' => [",
          "800:             'usertheme' => '',",
          "801:             'sitetheme' => 'boost',",
          "802:             'cohorts' => [],",
          "803:             'expected' => 'boost',",
          "804:           ],",
          "805:           'User member of one cohort which has a theme set' => [",
          "806:             'usertheme' => '',",
          "807:             'sitetheme' => 'boost',",
          "808:             'cohorts' => [",
          "809:               'clean',",
          "810:             ],",
          "811:             'expected' => 'clean',",
          "812:           ],",
          "813:           'User member of one cohort which has a theme set, and one without a theme' => [",
          "814:             'usertheme' => '',",
          "815:             'sitetheme' => 'boost',",
          "816:             'cohorts' => [",
          "817:               'clean',",
          "818:               '',",
          "819:             ],",
          "820:             'expected' => 'clean',",
          "821:           ],",
          "822:           'User member of one cohort which has a theme set, and one with a different theme' => [",
          "823:             'usertheme' => '',",
          "824:             'sitetheme' => 'boost',",
          "825:             'cohorts' => [",
          "826:               'clean',",
          "827:               'someother',",
          "828:             ],",
          "829:             'expected' => 'boost',",
          "830:           ],",
          "831:           'User with a theme but not a member of any cohort' => [",
          "832:             'usertheme' => 'more',",
          "833:             'sitetheme' => 'boost',",
          "834:             'cohorts' => [],",
          "835:             'expected' => 'more',",
          "836:           ],",
          "837:           'User with a theme and member of one cohort which has a theme set' => [",
          "838:             'usertheme' => 'more',",
          "839:             'sitetheme' => 'boost',",
          "840:             'cohorts' => [",
          "841:               'clean',",
          "842:             ],",
          "843:             'expected' => 'more',",
          "844:           ],",
          "845:         ];",
          "846:     }",
          "",
          "---------------"
        ],
        "cohort/tests/externallib_test.php||cohort/tests/externallib_test.php": [
          "File: cohort/tests/externallib_test.php -> cohort/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:         $this->resetAfterTest(true);",
          "45:         $contextid = context_system::instance()->id;",
          "46:         $category = $this->getDataGenerator()->create_category();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:         set_config('allowcohortthemes', 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:             'categorytype' => array('type' => 'id', 'value' => $category->id),",
          "50:             'name' => 'cohort test 1',",
          "51:             'idnumber' => 'cohorttest1',",
          "53:             );",
          "55:         $cohort2 = array(",
          "",
          "[Removed Lines]",
          "52:             'description' => 'This is a description for cohorttest1'",
          "",
          "[Added Lines]",
          "54:             'description' => 'This is a description for cohorttest1',",
          "55:             'theme' => 'clean'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:             );",
          "69:         $roleid = $this->assignUserCapability('moodle/cohort:manage', $contextid);",
          "72:         $this->setCurrentTimeStart();",
          "73:         $createdcohorts = core_cohort_external::create_cohorts(array($cohort1, $cohort2));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:         $cohort4 = array(",
          "75:             'categorytype' => array('type' => 'id', 'value' => $category->id),",
          "76:             'name' => 'cohort test 4',",
          "77:             'idnumber' => 'cohorttest4',",
          "78:             'description' => 'This is a description for cohorttest4',",
          "79:             'theme' => 'clean'",
          "80:             );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "85:                 $this->assertEquals($dbcohort->name, $cohort1['name']);",
          "86:                 $this->assertEquals($dbcohort->description, $cohort1['description']);",
          "87:                 $this->assertEquals($dbcohort->visible, 1); // Field was not specified, ensure it is visible by default.",
          "88:             } else if ($createdcohort['idnumber'] == $cohort2['idnumber']) {",
          "89:                 $this->assertEquals($dbcohort->contextid, context_system::instance()->id);",
          "90:                 $this->assertEquals($dbcohort->name, $cohort2['name']);",
          "91:                 $this->assertEquals($dbcohort->description, $cohort2['description']);",
          "92:                 $this->assertEquals($dbcohort->visible, $cohort2['visible']);",
          "93:             } else {",
          "94:                 $this->fail('Unrecognised cohort found');",
          "95:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:                 $this->assertEquals($dbcohort->theme, $cohort1['theme']);",
          "107:                 $this->assertEquals($dbcohort->theme, '');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "97:             $this->assertTimeCurrent($dbcohort->timemodified);",
          "98:         }",
          "101:         $this->unassignUserCapability('moodle/cohort:manage', $contextid, $roleid);",
          "102:         $createdcohorts = core_cohort_external::create_cohorts(array($cohort3));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:         set_config('allowcohortthemes', 0);",
          "117:         $createdcohorts = core_cohort_external::create_cohorts(array($cohort4));",
          "118:         $createdcohorts = external_api::clean_returnvalue(core_cohort_external::create_cohorts_returns(), $createdcohorts);",
          "119:         foreach ($createdcohorts as $createdcohort) {",
          "120:             $dbcohort = $DB->get_record('cohort', array('id' => $createdcohort['id']));",
          "121:             if ($createdcohort['idnumber'] == $cohort4['idnumber']) {",
          "122:                 $conid = $DB->get_field('context', 'id', array('instanceid' => $cohort4['categorytype']['value'],",
          "123:                         'contextlevel' => CONTEXT_COURSECAT));",
          "124:                 $this->assertEquals($dbcohort->contextid, $conid);",
          "125:                 $this->assertEquals($dbcohort->name, $cohort4['name']);",
          "126:                 $this->assertEquals($dbcohort->description, $cohort4['description']);",
          "127:                 $this->assertEquals($dbcohort->visible, 1); // Field was not specified, ensure it is visible by default.",
          "128:                 $this->assertEquals($dbcohort->theme, ''); // As $CFG->allowcohortthemes is disabled, theme must be empty.",
          "129:             }",
          "130:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "144:         $this->resetAfterTest(true);",
          "146:         $cohort1 = array(",
          "147:             'contextid' => 1,",
          "148:             'name' => 'cohortnametest1',",
          "149:             'idnumber' => 'idnumbertest1',",
          "151:             );",
          "152:         $cohort1 = self::getDataGenerator()->create_cohort($cohort1);",
          "153:         $cohort2 = self::getDataGenerator()->create_cohort();",
          "",
          "[Removed Lines]",
          "150:             'description' => 'This is a description for cohort 1'",
          "",
          "[Added Lines]",
          "178:         set_config('allowcohortthemes', 1);",
          "184:             'description' => 'This is a description for cohort 1',",
          "185:             'theme' => 'clean'",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "168:                 $this->assertEquals($cohort1->name, $enrolledcohort['name']);",
          "169:                 $this->assertEquals($cohort1->description, $enrolledcohort['description']);",
          "170:                 $this->assertEquals($cohort1->visible, $enrolledcohort['visible']);",
          "171:             }",
          "172:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:                 $this->assertEquals($cohort1->theme, $enrolledcohort['theme']);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "183:         $this->assertEquals(2, count($returnedcohorts));",
          "184:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222:         set_config('allowcohortthemes', 0);",
          "223:         $returnedcohorts = core_cohort_external::get_cohorts(array(",
          "224:             $cohort1->id));",
          "225:         $returnedcohorts = external_api::clean_returnvalue(core_cohort_external::get_cohorts_returns(), $returnedcohorts);",
          "226:         foreach ($returnedcohorts as $enrolledcohort) {",
          "227:             if ($enrolledcohort['idnumber'] == $cohort1->idnumber) {",
          "228:                 $this->assertNull($enrolledcohort['theme']);",
          "229:             }",
          "230:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "194:         $this->resetAfterTest(true);",
          "196:         $cohort1 = self::getDataGenerator()->create_cohort(array('visible' => 0));",
          "198:         $cohort1 = array(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243:         set_config('allowcohortthemes', 0);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "200:             'categorytype' => array('type' => 'id', 'value' => '1'),",
          "201:             'name' => 'cohortnametest1',",
          "202:             'idnumber' => 'idnumbertest1',",
          "204:             );",
          "206:         $context = context_system::instance();",
          "",
          "[Removed Lines]",
          "203:             'description' => 'This is a description for cohort 1'",
          "",
          "[Added Lines]",
          "252:             'description' => 'This is a description for cohort 1',",
          "253:             'theme' => 'clean'",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "217:         $this->assertEquals($dbcohort->idnumber, $cohort1['idnumber']);",
          "218:         $this->assertEquals($dbcohort->description, $cohort1['description']);",
          "219:         $this->assertEquals($dbcohort->visible, 0);",
          "222:         core_cohort_external::update_cohorts(array($cohort1 + array('visible' => 1)));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270:         $this->assertEmpty($dbcohort->theme);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "226:         $dbcohort = $DB->get_record('cohort', array('id' => $cohort1['id']));",
          "227:         $this->assertEquals(1, $dbcohort->visible);",
          "230:         $this->unassignUserCapability('moodle/cohort:manage', $context->id, $roleid);",
          "231:         core_cohort_external::update_cohorts(array($cohort1));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281:         set_config('allowcohortthemes', 1);",
          "282:         core_cohort_external::update_cohorts(array($cohort1 + array('theme' => 'clean')));",
          "283:         $dbcohort = $DB->get_record('cohort', array('id' => $cohort1['id']));",
          "284:         $this->assertEquals('clean', $dbcohort->theme);",
          "287:         set_config('allowcohortthemes', 0);",
          "288:         core_cohort_external::update_cohorts(array($cohort1 + array('theme' => 'more')));",
          "289:         $dbcohort = $DB->get_record('cohort', array('id' => $cohort1['id']));",
          "290:         $this->assertEquals('clean', $dbcohort->theme);",
          "",
          "---------------"
        ],
        "cohort/upload_form.php||cohort/upload_form.php": [
          "File: cohort/upload_form.php -> cohort/upload_form.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "359:         $columns = $cir->get_columns();",
          "363:         $additionalcolumns = array('context', 'category', 'category_id', 'category_idnumber', 'category_path');",
          "364:         $displaycolumns = array();",
          "365:         $extracolumns = array();",
          "",
          "[Removed Lines]",
          "362:         $allowedcolumns = array('contextid', 'name', 'idnumber', 'description', 'descriptionformat', 'visible');",
          "",
          "[Added Lines]",
          "362:         $allowedcolumns = array('contextid', 'name', 'idnumber', 'description', 'descriptionformat', 'visible', 'theme');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "424:                 $cohorts[$rownum]['errors'][] = new lang_string('namefieldempty', 'cohort');",
          "425:             }",
          "427:             $cohorts[$rownum]['data'] = array_intersect_key($hash, $cohorts[0]['data']);",
          "428:             $haserrors = $haserrors || !empty($cohorts[$rownum]['errors']);",
          "429:             $haswarnings = $haswarnings || !empty($cohorts[$rownum]['warnings']);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427:             if (!empty($hash['theme']) && !empty($CFG->allowcohortthemes)) {",
          "428:                 $availablethemes = cohort_get_list_of_themes();",
          "429:                 if (empty($availablethemes[$hash['theme']])) {",
          "430:                     $cohorts[$rownum]['errors'][] = new lang_string('invalidtheme', 'cohort');",
          "431:                 }",
          "432:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "466:                         $hash[$key] = clean_param($value, PARAM_BOOL) ? 1 : 0;",
          "467:                     }",
          "468:                     break;",
          "469:             }",
          "470:         }",
          "471:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "476:                 case 'theme':",
          "477:                     $hash[$key] = core_text::substr(clean_param($value, PARAM_TEXT), 0, 50);",
          "478:                     break;",
          "",
          "---------------"
        ],
        "config-dist.php||config-dist.php": [
          "File: config-dist.php -> config-dist.php"
        ],
        "lang/en/admin.php||lang/en/admin.php": [
          "File: lang/en/admin.php -> lang/en/admin.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: $string['allowbeforeblockdesc'] = 'By default, entries in the blocked IPs list are matched first. If this option is enabled, entries in the allowed IPs list are processed before the blocked list.';",
          "50: $string['allowblockstodock'] = 'Allow blocks to use the dock';",
          "51: $string['allowcategorythemes'] = 'Allow category themes';",
          "52: $string['allowcoursethemes'] = 'Allow course themes';",
          "53: $string['allowediplist'] = 'Allowed IP list';",
          "54: $string['allowedemaildomains'] = 'Allowed email domains';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: $string['allowcohortthemes'] = 'Allow cohort themes';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144: $string['configallowassign'] = 'You can allow people who have the roles on the left side to assign some of the column roles to other people';",
          "145: $string['configallowblockstodock'] = 'If enabled and supported by the selected theme users can choose to move blocks to a special dock.';",
          "146: $string['configallowcategorythemes'] = 'If you enable this, then themes can be set at the category level. This will affect all child categories and courses unless they have specifically set their own theme. WARNING: Enabling category themes may affect performance.';",
          "147: $string['configallowcoursethemes'] = 'If you enable this, then courses will be allowed to set their own themes.  Course themes override all other theme choices (site, user, or session themes)';",
          "148: $string['configallowedemaildomains'] = 'List email domains that are allowed to be disclosed in the \"From\" section of outgoing email. The default of \"Empty\" will use the No-reply address for all outgoing email. The use of wildcards is allowed e.g. *.example.com will allow emails sent from any subdomain of example.com, but not example.com itself. This will require separate entry.';",
          "149: $string['configallowemailaddresses'] = 'To restrict new email addresses to particular domains, list them here separated by spaces. All other domains will be rejected. To allow subdomains, add the domain with a preceding \\'.\\'. To allow a root domain together with its subdomains, add the domain twice - once with a preceding \\'.\\' and once without e.g. .ourcollege.edu.au ourcollege.edu.au.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148: $string['configallowcohortthemes'] = 'If you enable this, then themes can be set at the cohort level. This will affect all users with only one cohort or more than one but with the same theme.';",
          "",
          "---------------"
        ],
        "lang/en/cohort.php||lang/en/cohort.php": [
          "File: lang/en/cohort.php -> lang/en/cohort.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: $string['eventcohortmemberremoved'] = 'User removed from a cohort';",
          "59: $string['eventcohortupdated'] = 'Cohort updated';",
          "60: $string['external'] = 'External cohort';",
          "61: $string['idnumber'] = 'Cohort ID';",
          "62: $string['memberscount'] = 'Cohort size';",
          "63: $string['name'] = 'Name';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: $string['invalidtheme'] = 'Cohort theme does not exist';",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2200:         upgrade_main_savepoint(true, 2018032700.00);",
          "2201:     }",
          "2203:     return true;",
          "2204: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2203:     if ($oldversion < 2018040500.01) {",
          "2206:         $table = new xmldb_table('cohort');",
          "2207:         $field = new xmldb_field('theme', XMLDB_TYPE_CHAR, '50',",
          "2208:                 null, null, null, null, 'timemodified');",
          "2211:         if (!$dbman->field_exists($table, $field)) {",
          "2212:             $dbman->add_field($table, $field);",
          "2213:         }",
          "2216:         upgrade_main_savepoint(true, 2018040500.01);",
          "2217:     }",
          "",
          "---------------"
        ],
        "lib/moodlelib.php||lib/moodlelib.php": [
          "File: lib/moodlelib.php -> lib/moodlelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "4694:         }",
          "4695:     }",
          "4698:     $user->profile = array();",
          "4699:     if (!isguestuser($user)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4698:     if (!empty($CFG->allowcohortthemes)) {",
          "4699:         require_once($CFG->dirroot . '/cohort/lib.php');",
          "4700:         if ($cohorttheme = cohort_get_user_cohort_theme($user->id)) {",
          "4701:             $user->cohorttheme = $cohorttheme;",
          "4702:         }",
          "4703:     }",
          "",
          "---------------"
        ],
        "lib/pagelib.php||lib/pagelib.php": [
          "File: lib/pagelib.php -> lib/pagelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1608:         global $CFG, $USER, $SESSION;",
          "1610:         if (empty($CFG->themeorder)) {",
          "1612:         } else {",
          "1613:             $themeorder = $CFG->themeorder;",
          "",
          "[Removed Lines]",
          "1611:             $themeorder = array('course', 'category', 'session', 'user', 'site');",
          "",
          "[Added Lines]",
          "1611:             $themeorder = array('course', 'category', 'session', 'user', 'cohort', 'site');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1666:                     }",
          "1667:                 break;",
          "1669:                 case 'site':",
          "1670:                     if ($mnetpeertheme) {",
          "1671:                         return $mnetpeertheme;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1669:                 case 'cohort':",
          "1670:                     if (!empty($CFG->allowcohortthemes) && !empty($USER->cohorttheme) && !$hascustomdevicetheme) {",
          "1671:                         return $USER->cohorttheme;",
          "1672:                     }",
          "1673:                 break;",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018040500.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018040500.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6768729e086194da361b939b456e89c6a498177a",
      "candidate_info": {
        "commit_hash": "6768729e086194da361b939b456e89c6a498177a",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/6768729e086194da361b939b456e89c6a498177a",
        "files": [
          "lib/db/services.php",
          "question/classes/bank/random_question_loader.php",
          "question/classes/external.php",
          "question/tests/externallib_test.php",
          "question/tests/random_question_loader_test.php",
          "version.php"
        ],
        "message": "MDL-61138 question: external function to get random question set",
        "before_after_code_files": [
          "lib/db/services.php||lib/db/services.php",
          "question/classes/bank/random_question_loader.php||question/classes/bank/random_question_loader.php",
          "question/classes/external.php||question/classes/external.php",
          "question/tests/externallib_test.php||question/tests/externallib_test.php",
          "question/tests/random_question_loader_test.php||question/tests/random_question_loader_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1146:         'type'          => 'write',",
          "1147:         'ajax' => true,",
          "1148:     ),",
          "1149:     'core_rating_get_item_ratings' => array(",
          "1150:         'classname' => 'core_rating_external',",
          "1151:         'methodname' => 'get_item_ratings',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1149:     'core_question_get_random_question_summaries' => array(",
          "1150:         'classname' => 'core_question_external',",
          "1151:         'methodname' => 'get_random_question_summaries',",
          "1152:         'description' => 'Get the random question set for a criteria',",
          "1153:         'type' => 'read',",
          "1154:         'ajax' => true,",
          "1155:     ),",
          "",
          "---------------"
        ],
        "question/classes/bank/random_question_loader.php||question/classes/bank/random_question_loader.php": [
          "File: question/classes/bank/random_question_loader.php -> question/classes/bank/random_question_loader.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:         }",
          "211:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:     protected function get_question_ids($categoryid, $includesubcategories, $tagids = []) {",
          "224:         $this->ensure_questions_for_category_loaded($categoryid, $includesubcategories, $tagids);",
          "225:         $categorykey = $this->get_category_key($categoryid, $includesubcategories, $tagids);",
          "226:         $cachedvalues = $this->availablequestionscache[$categorykey];",
          "227:         $questionids = [];",
          "229:         foreach ($cachedvalues as $usecount => $ids) {",
          "230:             $questionids = array_merge($questionids, array_keys($ids));",
          "231:         }",
          "233:         return $questionids;",
          "234:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "236:         return false;",
          "237:     }",
          "238: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:     public function get_questions(",
          "276:         $categoryid,",
          "277:         $includesubcategories,",
          "278:         $tagids = [],",
          "279:         $limit = 100,",
          "280:         $offset = 0,",
          "281:         $fields = []",
          "282:     ) {",
          "283:         global $DB;",
          "285:         $questionids = $this->get_question_ids($categoryid, $includesubcategories, $tagids);",
          "286:         if (empty($questionids)) {",
          "287:             return [];",
          "288:         }",
          "290:         if (empty($fields)) {",
          "292:             $fieldsstring = '*';",
          "293:         } else {",
          "294:             $fieldsstring = implode(',', $fields);",
          "295:         }",
          "297:         return $DB->get_records_list(",
          "298:             'question',",
          "299:             'id',",
          "300:             $questionids,",
          "301:             'id',",
          "302:             $fieldsstring,",
          "303:             $offset,",
          "304:             $limit",
          "305:         );",
          "306:     }",
          "318:     public function count_questions($categoryid, $includesubcategories, $tagids = []) {",
          "319:         $questionids = $this->get_question_ids($categoryid, $includesubcategories, $tagids);",
          "320:         return count($questionids);",
          "321:     }",
          "",
          "---------------"
        ],
        "question/classes/external.php||question/classes/external.php": [
          "File: question/classes/external.php -> question/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: require_once(\"$CFG->libdir/externallib.php\");",
          "30: require_once($CFG->dirroot . '/question/engine/lib.php');",
          "31: require_once($CFG->libdir . '/questionlib.php');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: require_once($CFG->dirroot . '/question/engine/datalib.php');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211:                 'status' => new external_value(PARAM_BOOL, 'status: true if success')",
          "212:         ]);",
          "213:     }",
          "214: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:     public static function get_random_question_summaries_parameters() {",
          "222:         return new external_function_parameters([",
          "223:                 'categoryid' => new external_value(PARAM_INT, 'Category id to find random questions'),",
          "224:                 'includesubcategories' => new external_value(PARAM_BOOL, 'Include the subcategories in the search'),",
          "225:                 'tagids' => new external_multiple_structure(",
          "226:                     new external_value(PARAM_INT, 'Tag id')",
          "227:                 ),",
          "228:                 'contextid' => new external_value(PARAM_INT,",
          "229:                     'Context id that the questions will be rendered in (used for exporting)'),",
          "230:                 'limit' => new external_value(PARAM_INT, 'Maximum number of results to return',",
          "231:                     VALUE_DEFAULT, 0),",
          "232:                 'offset' => new external_value(PARAM_INT, 'Number of items to skip from the begging of the result set',",
          "233:                     VALUE_DEFAULT, 0)",
          "234:         ]);",
          "235:     }",
          "250:     public static function get_random_question_summaries(",
          "251:         $categoryid,",
          "252:         $includesubcategories,",
          "253:         $tagids,",
          "254:         $contextid,",
          "255:         $limit = 0,",
          "256:         $offset = 0",
          "257:     ) {",
          "258:         global $DB, $PAGE;",
          "261:         $params = self::validate_parameters(",
          "262:             self::get_random_question_summaries_parameters(),",
          "263:             [",
          "264:                 'categoryid' => $categoryid,",
          "265:                 'includesubcategories' => $includesubcategories,",
          "266:                 'tagids' => $tagids,",
          "267:                 'contextid' => $contextid,",
          "268:                 'limit' => $limit,",
          "269:                 'offset' => $offset",
          "270:             ]",
          "271:         );",
          "272:         $categoryid = $params['categoryid'];",
          "273:         $includesubcategories = $params['includesubcategories'];",
          "274:         $tagids = $params['tagids'];",
          "275:         $contextid = $params['contextid'];",
          "276:         $limit = $params['limit'];",
          "277:         $offset = $params['offset'];",
          "279:         $context = \\context::instance_by_id($contextid);",
          "280:         self::validate_context($context);",
          "282:         $categorycontextid = $DB->get_field('question_categories', 'contextid', ['id' => $categoryid], MUST_EXIST);",
          "283:         $categorycontext = \\context::instance_by_id($categorycontextid);",
          "284:         $editcontexts = new \\question_edit_contexts($categorycontext);",
          "286:         $editcontexts->require_cap('moodle/question:viewall');",
          "288:         $loader = new \\core_question\\bank\\random_question_loader(new qubaid_list([]));",
          "290:         $properties = \\core_question\\external\\question_summary_exporter::get_mandatory_properties();",
          "291:         $questions = $loader->get_questions($categoryid, $includesubcategories, $tagids, $limit, $offset, $properties);",
          "292:         $totalcount = $loader->count_questions($categoryid, $includesubcategories, $tagids);",
          "293:         $renderer = $PAGE->get_renderer('core');",
          "295:         $formattedquestions = array_map(function($question) use ($context, $renderer) {",
          "296:             $exporter = new \\core_question\\external\\question_summary_exporter($question, ['context' => $context]);",
          "297:             return $exporter->export($renderer);",
          "298:         }, $questions);",
          "300:         return [",
          "301:             'totalcount' => $totalcount,",
          "302:             'questions' => $formattedquestions",
          "303:         ];",
          "304:     }",
          "309:     public static function  get_random_question_summaries_returns() {",
          "310:         return new external_single_structure([",
          "311:             'totalcount' => new external_value(PARAM_INT, 'total number of questions in result set'),",
          "312:             'questions' => new external_multiple_structure(",
          "313:                 \\core_question\\external\\question_summary_exporter::get_read_structure()",
          "314:             )",
          "315:         ]);",
          "316:     }",
          "",
          "---------------"
        ],
        "question/tests/externallib_test.php||question/tests/externallib_test.php": [
          "File: question/tests/externallib_test.php -> question/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "473:         return $user;",
          "474:     }",
          "475: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479:     public function get_random_question_summaries_test_cases() {",
          "480:         return [",
          "481:             'empty category' => [",
          "482:                 'categoryindex' => 'emptycat',",
          "483:                 'includesubcategories' => false,",
          "484:                 'usetagnames' => [],",
          "485:                 'expectedquestionindexes' => []",
          "486:             ],",
          "487:             'single category' => [",
          "488:                 'categoryindex' => 'cat1',",
          "489:                 'includesubcategories' => false,",
          "490:                 'usetagnames' => [],",
          "491:                 'expectedquestionindexes' => ['cat1q1', 'cat1q2']",
          "492:             ],",
          "493:             'include sub category' => [",
          "494:                 'categoryindex' => 'cat1',",
          "495:                 'includesubcategories' => true,",
          "496:                 'usetagnames' => [],",
          "497:                 'expectedquestionindexes' => ['cat1q1', 'cat1q2', 'subcatq1', 'subcatq2']",
          "498:             ],",
          "499:             'single category with tags' => [",
          "500:                 'categoryindex' => 'cat1',",
          "501:                 'includesubcategories' => false,",
          "502:                 'usetagnames' => ['cat1'],",
          "503:                 'expectedquestionindexes' => ['cat1q1']",
          "504:             ],",
          "505:             'include sub category with tag on parent' => [",
          "506:                 'categoryindex' => 'cat1',",
          "507:                 'includesubcategories' => true,",
          "508:                 'usetagnames' => ['cat1'],",
          "509:                 'expectedquestionindexes' => ['cat1q1']",
          "510:             ],",
          "511:             'include sub category with tag on sub' => [",
          "512:                 'categoryindex' => 'cat1',",
          "513:                 'includesubcategories' => true,",
          "514:                 'usetagnames' => ['subcat'],",
          "515:                 'expectedquestionindexes' => ['subcatq1']",
          "516:             ],",
          "517:             'include sub category with same tag on parent and sub' => [",
          "518:                 'categoryindex' => 'cat1',",
          "519:                 'includesubcategories' => true,",
          "520:                 'usetagnames' => ['foo'],",
          "521:                 'expectedquestionindexes' => ['cat1q1', 'subcatq1']",
          "522:             ],",
          "523:             'include sub category with tag not matching' => [",
          "524:                 'categoryindex' => 'cat1',",
          "525:                 'includesubcategories' => true,",
          "526:                 'usetagnames' => ['cat1', 'cat2'],",
          "527:                 'expectedquestionindexes' => []",
          "528:             ]",
          "529:         ];",
          "530:     }",
          "557:     public function test_get_random_question_summaries_variations(",
          "558:         $categoryindex,",
          "559:         $includesubcategories,",
          "560:         $usetagnames,",
          "561:         $expectedquestionindexes",
          "562:     ) {",
          "563:         $this->resetAfterTest();",
          "565:         $context = context_system::instance();",
          "566:         $categories = [];",
          "567:         $questions = [];",
          "568:         $tagnames = [",
          "569:             'cat1',",
          "570:             'cat2',",
          "571:             'subcat',",
          "572:             'foo'",
          "573:         ];",
          "574:         $collid = core_tag_collection::get_default();",
          "575:         $tags = core_tag_tag::create_if_missing($collid, $tagnames);",
          "576:         $generator = $this->getDataGenerator()->get_plugin_generator('core_question');",
          "579:         list($category, $categoryquestions) = $this->create_category_and_questions(2, ['cat1', 'foo']);",
          "580:         $categories['cat1'] = $category;",
          "581:         $questions['cat1q1'] = $categoryquestions[0];",
          "582:         $questions['cat1q2'] = $categoryquestions[1];",
          "584:         list($category, $categoryquestions) = $this->create_category_and_questions(2, ['cat2', 'foo']);",
          "585:         $categories['cat2'] = $category;",
          "586:         $questions['cat2q1'] = $categoryquestions[0];",
          "587:         $questions['cat2q2'] = $categoryquestions[1];",
          "589:         list($category, $categoryquestions) = $this->create_category_and_questions(2, ['subcat', 'foo'], $categories['cat1']);",
          "590:         $categories['subcat'] = $category;",
          "591:         $questions['subcatq1'] = $categoryquestions[0];",
          "592:         $questions['subcatq2'] = $categoryquestions[1];",
          "594:         list($category, $categoryquestions) = $this->create_category_and_questions(0);",
          "595:         $categories['emptycat'] = $category;",
          "598:         $category = $categories[$categoryindex];",
          "599:         $tagids = array_map(function($tagname) use ($tags) {",
          "600:             return $tags[$tagname]->id;",
          "601:         }, $usetagnames);",
          "603:         $result = core_question_external::get_random_question_summaries($category->id, $includesubcategories, $tagids, $context->id);",
          "604:         $resultquestions = $result['questions'];",
          "605:         $resulttotalcount = $result['totalcount'];",
          "607:         $expectedquestions = array_map(function($index) use ($questions) {",
          "608:             return $questions[$index];",
          "609:         }, $expectedquestionindexes);",
          "612:         $this->assertCount(count($expectedquestions), $resultquestions);",
          "613:         $this->assertEquals(count($expectedquestions), $resulttotalcount);",
          "614:         foreach ($expectedquestions as $question) {",
          "615:             $this->assertEquals($resultquestions[$question->id]->id, $question->id);",
          "616:             $this->assertEquals($resultquestions[$question->id]->category, $question->category);",
          "617:         }",
          "618:     }",
          "624:     public function test_get_random_question_summaries_invalid_category_id_param() {",
          "625:         $this->resetAfterTest();",
          "627:         $context = context_system::instance();",
          "628:         $this->expectException('invalid_parameter_exception');",
          "629:         core_question_external::get_random_question_summaries('invalid value', false, [], $context->id);",
          "630:     }",
          "636:     public function test_get_random_question_summaries_invalid_includesubcategories_param() {",
          "637:         $this->resetAfterTest();",
          "639:         $context = context_system::instance();",
          "640:         $this->expectException('invalid_parameter_exception');",
          "641:         core_question_external::get_random_question_summaries(1, 'invalid value', [], $context->id);",
          "642:     }",
          "648:     public function test_get_random_question_summaries_invalid_tagids_param() {",
          "649:         $this->resetAfterTest();",
          "651:         $context = context_system::instance();",
          "652:         $this->expectException('invalid_parameter_exception');",
          "653:         core_question_external::get_random_question_summaries(1, false, ['invalid', 'values'], $context->id);",
          "654:     }",
          "660:     public function test_get_random_question_summaries_invalid_context() {",
          "661:         $this->resetAfterTest();",
          "663:         $this->expectException('invalid_parameter_exception');",
          "664:         core_question_external::get_random_question_summaries(1, false, [1, 2], 'context');",
          "665:     }",
          "672:     public function test_get_random_question_summaries_restricted_context() {",
          "673:         $this->resetAfterTest();",
          "675:         $course = $this->getDataGenerator()->create_course();",
          "676:         $coursecontext = context_course::instance($course->id);",
          "677:         $systemcontext = context_system::instance();",
          "681:         core_question_external::set_context_restriction($coursecontext);",
          "685:         try {",
          "688:             core_question_external::get_random_question_summaries(1, false, [], $systemcontext->id);",
          "689:         } catch (Exception $e) {",
          "690:             $this->assertInstanceOf('restricted_context_exception', $e);",
          "691:         }",
          "693:         core_question_external::set_context_restriction($systemcontext);",
          "694:     }",
          "699:     public function test_get_random_question_summaries_formats_returned_questions() {",
          "700:         $this->resetAfterTest();",
          "702:         list($category, $questions) = $this->create_category_and_questions(1);",
          "703:         $context = context_system::instance();",
          "704:         $question = $questions[0];",
          "705:         $expected = (object) [",
          "706:             'id' => $question->id,",
          "707:             'category' => $question->category,",
          "708:             'parent' => $question->parent,",
          "709:             'name' => $question->name,",
          "710:             'qtype' => $question->qtype",
          "711:         ];",
          "713:         $result = core_question_external::get_random_question_summaries($category->id, false, [], $context->id);",
          "714:         $actual = $result['questions'][$question->id];",
          "716:         $this->assertEquals($expected->id, $actual->id);",
          "717:         $this->assertEquals($expected->category, $actual->category);",
          "718:         $this->assertEquals($expected->parent, $actual->parent);",
          "719:         $this->assertEquals($expected->name, $actual->name);",
          "720:         $this->assertEquals($expected->qtype, $actual->qtype);",
          "723:         $this->assertObjectHasAttribute('icon', $actual);",
          "724:         $this->assertObjectHasAttribute('key', $actual->icon);",
          "725:         $this->assertObjectHasAttribute('component', $actual->icon);",
          "726:         $this->assertObjectHasAttribute('alttext', $actual->icon);",
          "727:     }",
          "732:     public function test_get_random_question_summaries_with_limit_and_offset() {",
          "733:         $this->resetAfterTest();",
          "734:         $numberofquestions = 5;",
          "735:         $includesubcategories = false;",
          "736:         $tagids = [];",
          "737:         $limit = 1;",
          "738:         $offset = 0;",
          "739:         $context = context_system::instance();",
          "740:         list($category, $questions) = $this->create_category_and_questions($numberofquestions);",
          "743:         usort($questions, function($a, $b) {",
          "744:             $aid = $a->id;",
          "745:             $bid = $b->id;",
          "747:             if ($aid == $bid) {",
          "748:                 return 0;",
          "749:             }",
          "750:             return $aid < $bid ? -1 : 1;",
          "751:         });",
          "753:         for ($i = 0; $i < $numberofquestions; $i++) {",
          "754:             $result = core_question_external::get_random_question_summaries(",
          "755:                 $category->id,",
          "756:                 $includesubcategories,",
          "757:                 $tagids,",
          "758:                 $context->id,",
          "759:                 $limit,",
          "760:                 $offset",
          "761:             );",
          "763:             $resultquestions = $result['questions'];",
          "764:             $totalcount = $result['totalcount'];",
          "766:             $this->assertCount($limit, $resultquestions);",
          "767:             $this->assertEquals($numberofquestions, $totalcount);",
          "768:             $actual = array_shift($resultquestions);",
          "769:             $expected = $questions[$i];",
          "770:             $this->assertEquals($expected->id, $actual->id);",
          "771:             $offset++;",
          "772:         }",
          "773:     }",
          "779:     public function test_get_random_question_summaries_without_capability() {",
          "780:         $this->resetAfterTest();",
          "781:         $generator = $this->getDataGenerator();",
          "782:         $user = $generator->create_user();",
          "783:         $roleid = $generator->create_role();",
          "784:         $systemcontext = context_system::instance();",
          "785:         $numberofquestions = 5;",
          "786:         $includesubcategories = false;",
          "787:         $tagids = [];",
          "788:         $context = context_system::instance();",
          "789:         list($category, $questions) = $this->create_category_and_questions($numberofquestions);",
          "790:         $categorycontext = context::instance_by_id($category->contextid);",
          "792:         $generator->role_assign($roleid, $user->id, $systemcontext->id);",
          "794:         assign_capability('moodle/question:viewall', CAP_PROHIBIT, $roleid, $categorycontext->id);",
          "796:         $this->setUser($user);",
          "797:         $this->expectException('moodle_exception');",
          "798:         core_question_external::get_random_question_summaries(",
          "799:             $category->id,",
          "800:             $includesubcategories,",
          "801:             $tagids,",
          "802:             $context->id",
          "803:         );",
          "804:     }",
          "815:     protected function create_category_and_questions($questioncount, $tagnames = [], $parentcategory = null) {",
          "816:         $generator = $this->getDataGenerator()->get_plugin_generator('core_question');",
          "818:         if ($parentcategory) {",
          "819:             $catparams = ['parent' => $parentcategory->id];",
          "820:         } else {",
          "821:             $catparams = [];",
          "822:         }",
          "824:         $category = $generator->create_question_category($catparams);",
          "825:         $questions = [];",
          "827:         for ($i = 0; $i < $questioncount; $i++) {",
          "828:             $questions[] = $generator->create_question('shortanswer', null, ['category' => $category->id]);",
          "829:         }",
          "831:         if (!empty($tagnames) && !empty($questions)) {",
          "832:             $context = context::instance_by_id($category->contextid);",
          "833:             core_tag_tag::set_item_tags('core_question', 'question', $questions[0]->id, $context, $tagnames);",
          "834:         }",
          "836:         return [$category, $questions];",
          "837:     }",
          "",
          "---------------"
        ],
        "question/tests/random_question_loader_test.php||question/tests/random_question_loader_test.php": [
          "File: question/tests/random_question_loader_test.php -> question/tests/random_question_loader_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:         $this->assertFalse($loader->is_question_available($cat->id, 0, -1));",
          "220:     }",
          "221: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:     public function get_questions_test_cases() {",
          "226:         return [",
          "227:             'empty category' => [",
          "228:                 'categoryindex' => 'emptycat',",
          "229:                 'includesubcategories' => false,",
          "230:                 'usetagnames' => [],",
          "231:                 'expectedquestionindexes' => []",
          "232:             ],",
          "233:             'single category' => [",
          "234:                 'categoryindex' => 'cat1',",
          "235:                 'includesubcategories' => false,",
          "236:                 'usetagnames' => [],",
          "237:                 'expectedquestionindexes' => ['cat1q1', 'cat1q2']",
          "238:             ],",
          "239:             'include sub category' => [",
          "240:                 'categoryindex' => 'cat1',",
          "241:                 'includesubcategories' => true,",
          "242:                 'usetagnames' => [],",
          "243:                 'expectedquestionindexes' => ['cat1q1', 'cat1q2', 'subcatq1', 'subcatq2']",
          "244:             ],",
          "245:             'single category with tags' => [",
          "246:                 'categoryindex' => 'cat1',",
          "247:                 'includesubcategories' => false,",
          "248:                 'usetagnames' => ['cat1'],",
          "249:                 'expectedquestionindexes' => ['cat1q1']",
          "250:             ],",
          "251:             'include sub category with tag on parent' => [",
          "252:                 'categoryindex' => 'cat1',",
          "253:                 'includesubcategories' => true,",
          "254:                 'usetagnames' => ['cat1'],",
          "255:                 'expectedquestionindexes' => ['cat1q1']",
          "256:             ],",
          "257:             'include sub category with tag on sub' => [",
          "258:                 'categoryindex' => 'cat1',",
          "259:                 'includesubcategories' => true,",
          "260:                 'usetagnames' => ['subcat'],",
          "261:                 'expectedquestionindexes' => ['subcatq1']",
          "262:             ],",
          "263:             'include sub category with same tag on parent and sub' => [",
          "264:                 'categoryindex' => 'cat1',",
          "265:                 'includesubcategories' => true,",
          "266:                 'usetagnames' => ['foo'],",
          "267:                 'expectedquestionindexes' => ['cat1q1', 'subcatq1']",
          "268:             ],",
          "269:             'include sub category with tag not matching' => [",
          "270:                 'categoryindex' => 'cat1',",
          "271:                 'includesubcategories' => true,",
          "272:                 'usetagnames' => ['cat1', 'cat2'],",
          "273:                 'expectedquestionindexes' => []",
          "274:             ]",
          "275:         ];",
          "276:     }",
          "303:     public function test_get_questions_variations(",
          "304:         $categoryindex,",
          "305:         $includesubcategories,",
          "306:         $usetagnames,",
          "307:         $expectedquestionindexes",
          "308:     ) {",
          "309:         $this->resetAfterTest();",
          "311:         $categories = [];",
          "312:         $questions = [];",
          "313:         $tagnames = [",
          "314:             'cat1',",
          "315:             'cat2',",
          "316:             'subcat',",
          "317:             'foo'",
          "318:         ];",
          "319:         $collid = core_tag_collection::get_default();",
          "320:         $tags = core_tag_tag::create_if_missing($collid, $tagnames);",
          "321:         $generator = $this->getDataGenerator()->get_plugin_generator('core_question');",
          "324:         list($category, $categoryquestions) = $this->create_category_and_questions(2, ['cat1', 'foo']);",
          "325:         $categories['cat1'] = $category;",
          "326:         $questions['cat1q1'] = $categoryquestions[0];",
          "327:         $questions['cat1q2'] = $categoryquestions[1];",
          "329:         list($category, $categoryquestions) = $this->create_category_and_questions(2, ['cat2', 'foo']);",
          "330:         $categories['cat2'] = $category;",
          "331:         $questions['cat2q1'] = $categoryquestions[0];",
          "332:         $questions['cat2q2'] = $categoryquestions[1];",
          "334:         list($category, $categoryquestions) = $this->create_category_and_questions(2, ['subcat', 'foo'], $categories['cat1']);",
          "335:         $categories['subcat'] = $category;",
          "336:         $questions['subcatq1'] = $categoryquestions[0];",
          "337:         $questions['subcatq2'] = $categoryquestions[1];",
          "339:         list($category, $categoryquestions) = $this->create_category_and_questions(0);",
          "340:         $categories['emptycat'] = $category;",
          "343:         $category = $categories[$categoryindex];",
          "344:         $tagids = array_map(function($tagname) use ($tags) {",
          "345:             return $tags[$tagname]->id;",
          "346:         }, $usetagnames);",
          "348:         $loader = new \\core_question\\bank\\random_question_loader(new qubaid_list([]));",
          "349:         $result = $loader->get_questions($category->id, $includesubcategories, $tagids);",
          "351:         $expectedquestions = array_map(function($index) use ($questions) {",
          "352:             return $questions[$index];",
          "353:         }, $expectedquestionindexes);",
          "356:         $this->assertCount(count($expectedquestions), $result);",
          "357:         foreach ($expectedquestions as $question) {",
          "358:             $this->assertEquals($result[$question->id]->id, $question->id);",
          "359:             $this->assertEquals($result[$question->id]->category, $question->category);",
          "360:         }",
          "361:     }",
          "366:     public function test_get_questions_with_limit_and_offset() {",
          "367:         $this->resetAfterTest();",
          "368:         $numberofquestions = 5;",
          "369:         $includesubcategories = false;",
          "370:         $tagids = [];",
          "371:         $limit = 1;",
          "372:         $offset = 0;",
          "373:         $loader = new \\core_question\\bank\\random_question_loader(new qubaid_list([]));",
          "374:         list($category, $questions) = $this->create_category_and_questions($numberofquestions);",
          "378:         usort($questions, function($a, $b) {",
          "379:             $aid = $a->id;",
          "380:             $bid = $b->id;",
          "382:             if ($aid == $bid) {",
          "383:                 return 0;",
          "384:             }",
          "385:             return $aid < $bid ? -1 : 1;",
          "386:         });",
          "388:         for ($i = 0; $i < $numberofquestions; $i++) {",
          "389:             $result = $loader->get_questions(",
          "390:                 $category->id,",
          "391:                 $includesubcategories,",
          "392:                 $tagids,",
          "393:                 $limit,",
          "394:                 $offset",
          "395:             );",
          "397:             $this->assertCount($limit, $result);",
          "398:             $actual = array_shift($result);",
          "399:             $expected = $questions[$i];",
          "400:             $this->assertEquals($expected->id, $actual->id);",
          "401:             $offset++;",
          "402:         }",
          "403:     }",
          "409:     public function test_get_questions_with_restricted_fields() {",
          "410:         $this->resetAfterTest();",
          "411:         $includesubcategories = false;",
          "412:         $tagids = [];",
          "413:         $limit = 10;",
          "414:         $offset = 0;",
          "415:         $fields = ['id', 'name'];",
          "416:         $loader = new \\core_question\\bank\\random_question_loader(new qubaid_list([]));",
          "417:         list($category, $questions) = $this->create_category_and_questions(1);",
          "419:         $result = $loader->get_questions(",
          "420:             $category->id,",
          "421:             $includesubcategories,",
          "422:             $tagids,",
          "423:             $limit,",
          "424:             $offset,",
          "425:             $fields",
          "426:         );",
          "428:         $expectedquestion = array_shift($questions);",
          "429:         $actualquestion = array_shift($result);",
          "430:         $actualfields = get_object_vars($actualquestion);",
          "431:         $actualfields = array_keys($actualfields);",
          "432:         sort($actualfields);",
          "433:         sort($fields);",
          "435:         $this->assertEquals($fields, $actualfields);",
          "436:     }",
          "441:     public function count_questions_test_cases() {",
          "442:         return [",
          "443:             'empty category' => [",
          "444:                 'categoryindex' => 'emptycat',",
          "445:                 'includesubcategories' => false,",
          "446:                 'usetagnames' => [],",
          "447:                 'expectedcount' => 0",
          "448:             ],",
          "449:             'single category' => [",
          "450:                 'categoryindex' => 'cat1',",
          "451:                 'includesubcategories' => false,",
          "452:                 'usetagnames' => [],",
          "453:                 'expectedcount' => 2",
          "454:             ],",
          "455:             'include sub category' => [",
          "456:                 'categoryindex' => 'cat1',",
          "457:                 'includesubcategories' => true,",
          "458:                 'usetagnames' => [],",
          "459:                 'expectedcount' => 4",
          "460:             ],",
          "461:             'single category with tags' => [",
          "462:                 'categoryindex' => 'cat1',",
          "463:                 'includesubcategories' => false,",
          "464:                 'usetagnames' => ['cat1'],",
          "465:                 'expectedcount' => 1",
          "466:             ],",
          "467:             'include sub category with tag on parent' => [",
          "468:                 'categoryindex' => 'cat1',",
          "469:                 'includesubcategories' => true,",
          "470:                 'usetagnames' => ['cat1'],",
          "471:                 'expectedcount' => 1",
          "472:             ],",
          "473:             'include sub category with tag on sub' => [",
          "474:                 'categoryindex' => 'cat1',",
          "475:                 'includesubcategories' => true,",
          "476:                 'usetagnames' => ['subcat'],",
          "477:                 'expectedcount' => 1",
          "478:             ],",
          "479:             'include sub category with same tag on parent and sub' => [",
          "480:                 'categoryindex' => 'cat1',",
          "481:                 'includesubcategories' => true,",
          "482:                 'usetagnames' => ['foo'],",
          "483:                 'expectedcount' => 2",
          "484:             ],",
          "485:             'include sub category with tag not matching' => [",
          "486:                 'categoryindex' => 'cat1',",
          "487:                 'includesubcategories' => true,",
          "488:                 'usetagnames' => ['cat1', 'cat2'],",
          "489:                 'expectedcount' => 0",
          "490:             ]",
          "491:         ];",
          "492:     }",
          "519:     public function test_count_questions_variations(",
          "520:         $categoryindex,",
          "521:         $includesubcategories,",
          "522:         $usetagnames,",
          "523:         $expectedcount",
          "524:     ) {",
          "525:         $this->resetAfterTest();",
          "527:         $categories = [];",
          "528:         $questions = [];",
          "529:         $tagnames = [",
          "530:             'cat1',",
          "531:             'cat2',",
          "532:             'subcat',",
          "533:             'foo'",
          "534:         ];",
          "535:         $collid = core_tag_collection::get_default();",
          "536:         $tags = core_tag_tag::create_if_missing($collid, $tagnames);",
          "537:         $generator = $this->getDataGenerator()->get_plugin_generator('core_question');",
          "540:         list($category, $categoryquestions) = $this->create_category_and_questions(2, ['cat1', 'foo']);",
          "541:         $categories['cat1'] = $category;",
          "542:         $questions['cat1q1'] = $categoryquestions[0];",
          "543:         $questions['cat1q2'] = $categoryquestions[1];",
          "545:         list($category, $categoryquestions) = $this->create_category_and_questions(2, ['cat2', 'foo']);",
          "546:         $categories['cat2'] = $category;",
          "547:         $questions['cat2q1'] = $categoryquestions[0];",
          "548:         $questions['cat2q2'] = $categoryquestions[1];",
          "550:         list($category, $categoryquestions) = $this->create_category_and_questions(2, ['subcat', 'foo'], $categories['cat1']);",
          "551:         $categories['subcat'] = $category;",
          "552:         $questions['subcatq1'] = $categoryquestions[0];",
          "553:         $questions['subcatq2'] = $categoryquestions[1];",
          "555:         list($category, $categoryquestions) = $this->create_category_and_questions(0);",
          "556:         $categories['emptycat'] = $category;",
          "559:         $category = $categories[$categoryindex];",
          "560:         $tagids = array_map(function($tagname) use ($tags) {",
          "561:             return $tags[$tagname]->id;",
          "562:         }, $usetagnames);",
          "564:         $loader = new \\core_question\\bank\\random_question_loader(new qubaid_list([]));",
          "565:         $result = $loader->count_questions($category->id, $includesubcategories, $tagids);",
          "568:         $this->assertEquals($expectedcount, $result);",
          "569:     }",
          "580:     protected function create_category_and_questions($questioncount, $tagnames = [], $parentcategory = null) {",
          "581:         $generator = $this->getDataGenerator()->get_plugin_generator('core_question');",
          "583:         if ($parentcategory) {",
          "584:             $catparams = ['parent' => $parentcategory->id];",
          "585:         } else {",
          "586:             $catparams = [];",
          "587:         }",
          "589:         $category = $generator->create_question_category($catparams);",
          "590:         $questions = [];",
          "592:         for ($i = 0; $i < $questioncount; $i++) {",
          "593:             $questions[] = $generator->create_question('shortanswer', null, ['category' => $category->id]);",
          "594:         }",
          "596:         if (!empty($tagnames) && !empty($questions)) {",
          "597:             $context = context::instance_by_id($category->contextid);",
          "598:             core_tag_tag::set_item_tags('core_question', 'question', $questions[0]->id, $context, $tagnames);",
          "599:         }",
          "601:         return [$category, $questions];",
          "602:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018041800.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018041800.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    }
  ]
}