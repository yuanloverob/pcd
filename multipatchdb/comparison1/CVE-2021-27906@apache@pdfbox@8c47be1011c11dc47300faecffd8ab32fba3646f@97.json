{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "81530cb8a8d06cd7450641a5a54c6fb215286579",
      "candidate_info": {
        "commit_hash": "81530cb8a8d06cd7450641a5a54c6fb215286579",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/81530cb8a8d06cd7450641a5a54c6fb215286579",
        "files": [
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java",
          "fontbox/src/test/java/org/apache/fontbox/ttf/TTFSubsetterTest.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/PDFontTest.java"
        ],
        "message": "PDFBOX-4892: use assumeTrue to skip tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891811 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java",
          "fontbox/src/test/java/org/apache/fontbox/ttf/TTFSubsetterTest.java||fontbox/src/test/java/org/apache/fontbox/ttf/TTFSubsetterTest.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/PDFontTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/PDFontTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java": [
          "File: examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java -> examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "103: import org.bouncycastle.util.Store;",
          "105: import org.junit.Assert;",
          "106: import org.junit.BeforeClass;",
          "107: import org.junit.Test;",
          "108: import org.junit.runner.RunWith;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106: import org.junit.Assume;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:         checkSignature(new File(inDir, \"sign_me.pdf\"), new File(outDir, fileName), false);",
          "189:         CreateEmbeddedTimeStamp tsaSigning = new CreateEmbeddedTimeStamp(tsa);",
          "190:         tsaSigning.embedTimeStamp(new File(outDir, fileName), new File(outDir, fileName2));",
          "",
          "[Removed Lines]",
          "183:         if (tsa == null || tsa.isEmpty())",
          "184:         {",
          "185:             System.err.println(\"No TSA URL defined, test skipped\");",
          "186:             return;",
          "187:         }",
          "",
          "[Added Lines]",
          "184:         Assume.assumeTrue(\"No TSA URL defined, test skipped\", tsa != null && !tsa.isEmpty());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "247:         mockServer.stopServer();",
          "255:         CreateSignature signing2 = new CreateSignature(keyStore, password.toCharArray());",
          "256:         signing2.setExternalSigning(externallySign);",
          "",
          "[Removed Lines]",
          "249:         if (tsa == null || tsa.isEmpty())",
          "250:         {",
          "251:             System.err.println(\"No TSA URL defined, test skipped\");",
          "252:             return;",
          "253:         }",
          "",
          "[Added Lines]",
          "246:         Assume.assumeTrue(\"No TSA URL defined, test skipped\", tsa != null && !tsa.isEmpty());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "274:             throws IOException, CMSException, OperatorCreationException, GeneralSecurityException,",
          "275:                    TSPException, CertificateVerificationException, OCSPException",
          "276:     {",
          "286:         final String fileName = \"timestamped.pdf\";",
          "287:         CreateSignedTimeStamp signing = new CreateSignedTimeStamp(tsa);",
          "288:         signing.signDetached(new File(inDir + \"sign_me.pdf\"), new File(outDir + fileName));",
          "",
          "[Removed Lines]",
          "277:         if (externallySign)",
          "278:         {",
          "279:             return; // runs only once, independent of externallySign",
          "280:         }",
          "281:         if (tsa == null || tsa.isEmpty())",
          "282:         {",
          "283:             System.err.println(\"No TSA URL defined, test skipped\");",
          "284:             return;",
          "285:         }",
          "",
          "[Added Lines]",
          "270:         Assume.assumeTrue(externallySign); // run only once, independent of externallySign",
          "271:         Assume.assumeTrue(\"No TSA URL defined, test skipped\", tsa != null && !tsa.isEmpty());",
          "",
          "---------------"
        ],
        "fontbox/src/test/java/org/apache/fontbox/ttf/TTFSubsetterTest.java||fontbox/src/test/java/org/apache/fontbox/ttf/TTFSubsetterTest.java": [
          "File: fontbox/src/test/java/org/apache/fontbox/ttf/TTFSubsetterTest.java -> fontbox/src/test/java/org/apache/fontbox/ttf/TTFSubsetterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import static org.junit.Assert.assertNotNull;",
          "31: import static org.junit.Assert.assertNull;",
          "32: import static org.junit.Assert.assertTrue;",
          "33: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import org.junit.Assume;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:                 simhei = new File(uri);",
          "139:             }",
          "140:         }",
          "146:         System.out.println(\"SimHei font found!\");",
          "147:         TrueTypeFont full = new TTFParser().parse(simhei);",
          "",
          "[Removed Lines]",
          "141:         if (simhei == null)",
          "142:         {",
          "143:             System.err.println(\"SimHei font not available on this machine, test skipped\");",
          "144:             return;",
          "145:         }",
          "",
          "[Added Lines]",
          "142:         Assume.assumeTrue(\"SimHei font not available on this machine, test skipped\", simhei != null);",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/PDFontTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/PDFontTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/PDFontTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/PDFontTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: import org.apache.pdfbox.rendering.PDFRenderer;",
          "43: import org.apache.pdfbox.text.PDFTextStripper;",
          "44: import org.junit.Assert;",
          "45: import org.junit.Before;",
          "46: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import org.junit.Assume;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:     public void testPDFBox3747() throws IOException",
          "98:     {",
          "99:         File file = new File(\"c:/windows/fonts\", \"calibri.ttf\");",
          "105:         PDDocument doc = new PDDocument();",
          "106:         PDPage page = new PDPage();",
          "107:         doc.addPage(page);",
          "",
          "[Removed Lines]",
          "100:         if (!file.exists())",
          "101:         {",
          "102:             System.out.println(\"testPDFBox3747 skipped\");",
          "103:             return;",
          "104:         }",
          "",
          "[Added Lines]",
          "101:         Assume.assumeTrue(\"testPDFBox3747 skipped\", file.exists());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "240:                 break;",
          "241:             }",
          "242:         }",
          "249:         final List<String> names = new ArrayList<String>();",
          "250:         ttc.processAllFonts(new TrueTypeCollection.TrueTypeFontProcessor()",
          "",
          "[Removed Lines]",
          "243:         if (ttc == null)",
          "244:         {",
          "245:             System.out.println(\"testFullEmbeddingTTC skipped, no .ttc files available\");",
          "246:             return;",
          "247:         }",
          "",
          "[Added Lines]",
          "240:         Assume.assumeTrue(\"testFullEmbeddingTTC skipped, no .ttc files available\", ttc != null);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "44b6d4f4c844d94984c902f46c79ec6ce7ee6c8c",
      "candidate_info": {
        "commit_hash": "44b6d4f4c844d94984c902f46c79ec6ce7ee6c8c",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/44b6d4f4c844d94984c902f46c79ec6ce7ee6c8c",
        "files": [
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java"
        ],
        "message": "PDFBOX-4892: simplify code\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888678 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java": [
          "File: examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java -> examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:             System.err.println(\"No TSA URL defined, test skipped\");",
          "283:             return;",
          "284:         }",
          "286:         CreateSignedTimeStamp signing = new CreateSignedTimeStamp(tsa);",
          "287:         signing.signDetached(new File(inDir + \"sign_me.pdf\"), new File(outDir + fileName));",
          "",
          "[Removed Lines]",
          "285:         final String fileName = getOutputFileName(\"timestamped{0}.pdf\");",
          "",
          "[Added Lines]",
          "285:         final String fileName = \"timestamped.pdf\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f3508d86a2a1e65c8620a1435fd80d85215289aa",
      "candidate_info": {
        "commit_hash": "f3508d86a2a1e65c8620a1435fd80d85215289aa",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/f3508d86a2a1e65c8620a1435fd80d85215289aa",
        "files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java"
        ],
        "message": "PDFBOX-4971: avoid NPE warning\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882096 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java||debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java||debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java": [
          "File: debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java -> debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:         {",
          "190:             tabbedPane.add(\"Image view\", rawView.getStreamPanel());",
          "191:         }",
          "193:         {",
          "194:             tabbedPane.add(\"Nice view\", niceView.getStreamPanel());",
          "195:             tabbedPane.add(\"Raw view\", rawView.getStreamPanel());",
          "",
          "[Removed Lines]",
          "192:         else if (isContentStream || stream.isXmlMetadata())",
          "",
          "[Added Lines]",
          "192:         else if (niceView != null)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:                     return;",
          "240:                 }",
          "241:                 tabbedPane.removeAll();",
          "243:                 {",
          "244:                     tabbedPane.add(\"Nice view\", niceView.getStreamPanel());",
          "245:                     tabbedPane.add(\"Raw view\", rawView.getStreamPanel());",
          "",
          "[Removed Lines]",
          "242:                 if (Stream.UNFILTERED.equals(currentFilter) && (isContentStream || stream.isXmlMetadata()))",
          "",
          "[Added Lines]",
          "242:                 if (Stream.UNFILTERED.equals(currentFilter) && niceView != null)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "577f6564ad4865508323ac20c45e729a697ca396",
      "candidate_info": {
        "commit_hash": "577f6564ad4865508323ac20c45e729a697ca396",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/577f6564ad4865508323ac20c45e729a697ca396",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/PDFontTest.java"
        ],
        "message": "PDFBOX-5048: avoid NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884497 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/PDFontTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/PDFontTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "299:         float height;",
          "300:         if (!glyphHeights.containsKey(name))",
          "301:         {",
          "303:             glyphHeights.put(name, height);",
          "304:         }",
          "305:         else",
          "",
          "[Removed Lines]",
          "302:             height = (float)cffFont.getType1CharString(name).getBounds().getHeight(); // todo: cffFont could be null",
          "",
          "[Added Lines]",
          "302:             if (cffFont == null)",
          "303:             {",
          "304:                 LOG.warn(\"No embedded CFF font, returning 0\");",
          "305:                 return 0;",
          "306:             }",
          "307:             height = (float) cffFont.getType1CharString(name).getBounds().getHeight();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "337:     @Override",
          "338:     public float getStringWidth(String string) throws IOException",
          "339:     {",
          "340:         float width = 0;",
          "341:         for (int i = 0; i < string.length(); i++)",
          "342:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345:         if (cffFont == null)",
          "346:         {",
          "347:             LOG.warn(\"No embedded CFF font, returning 0\");",
          "348:             return 0;",
          "349:         }",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/PDFontTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/PDFontTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/PDFontTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/PDFontTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:         Assert.fail(\"should have thrown IOException\");",
          "273:     }",
          "275:     private void testPDFBox3826checkFonts(byte[] byteArray, File fontFile) throws IOException",
          "276:     {",
          "277:         PDDocument doc = PDDocument.load(byteArray);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280:     @Test",
          "281:     void testPDFox5048() throws IOException",
          "282:     {",
          "283:         InputStream is = new URL(\"https://issues.apache.org/jira/secure/attachment/13017227/stringwidth.pdf\").openStream();",
          "284:         PDDocument doc = PDDocument.load(is);",
          "285:         PDPage page = doc.getPage(0);",
          "286:         PDFont font = page.getResources().getFont(COSName.getPDFName(\"F70\"));",
          "287:         Assert.assertTrue(font.isDamaged());",
          "288:         Assert.assertEquals(0, font.getHeight(0));",
          "289:         Assert.assertEquals(0, font.getStringWidth(\"Pa\"));",
          "290:         doc.close();",
          "291:         is.close();",
          "292:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7d911865a76176f4f2a68c7e6aa5307fe91c503",
      "candidate_info": {
        "commit_hash": "a7d911865a76176f4f2a68c7e6aa5307fe91c503",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/a7d911865a76176f4f2a68c7e6aa5307fe91c503",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java",
          "fontbox/src/test/java/org/apache/fontbox/type1/Type1LexerTest.java"
        ],
        "message": "PDFBOX-5155: support real numbers\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889314 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java||fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java",
          "fontbox/src/test/java/org/apache/fontbox/type1/Type1LexerTest.java||fontbox/src/test/java/org/apache/fontbox/type1/Type1LexerTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java||fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java -> fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "270:             buffer.reset();",
          "271:             return null;",
          "272:         }",
          "274:         {",
          "276:             buffer.position(buffer.position() -1);",
          "",
          "[Removed Lines]",
          "273:         else",
          "",
          "[Added Lines]",
          "273:         else if (c != 'e' && c != 'E')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "283:             sb.append(c);",
          "284:             c = getChar();",
          "285:         }",
          "287:         {",
          "289:             buffer.reset();",
          "",
          "[Removed Lines]",
          "286:         else",
          "",
          "[Added Lines]",
          "286:         else if (c != 'e' && c != 'E')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "298:         }",
          "302:         {",
          "303:             sb.append(c);",
          "304:             c = getChar();",
          "",
          "[Removed Lines]",
          "301:         if (c == 'E')",
          "",
          "[Added Lines]",
          "301:         if (c == 'E' || c == 'e')",
          "",
          "---------------"
        ],
        "fontbox/src/test/java/org/apache/fontbox/type1/Type1LexerTest.java||fontbox/src/test/java/org/apache/fontbox/type1/Type1LexerTest.java": [
          "File: fontbox/src/test/java/org/apache/fontbox/type1/Type1LexerTest.java -> fontbox/src/test/java/org/apache/fontbox/type1/Type1LexerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.fontbox.type1;",
          "21: import java.io.IOException;",
          "22: import java.util.ArrayList;",
          "23: import java.util.List;",
          "25: import org.apache.fontbox.util.Charsets;",
          "27: import org.junit.Assert;",
          "28: import org.junit.Test;",
          "34: public class Type1LexerTest",
          "35: {",
          "37:     public Type1LexerTest()",
          "38:     {",
          "39:     }",
          "44:     @Test",
          "45:     public void testRealNumbers() throws IOException",
          "46:     {",
          "47:         String s = \"/FontMatrix [1e-3 0e-3 0e-3 1E-3 0 0] readonly def\";",
          "48:         Type1Lexer t1l = new Type1Lexer(s.getBytes(Charsets.US_ASCII));",
          "49:         Token nextToken;",
          "50:         List<Token> tokens = new ArrayList<Token>();",
          "51:         do",
          "52:         {",
          "53:             nextToken = t1l.nextToken();",
          "54:             if (nextToken != null)",
          "55:             {",
          "56:                 tokens.add(nextToken);",
          "57:             }",
          "58:         }",
          "59:         while (nextToken != null);",
          "60:         Assert.assertEquals(Token.LITERAL, tokens.get(0).getKind());",
          "61:         Assert.assertEquals(\"FontMatrix\", tokens.get(0).getText());",
          "62:         Assert.assertEquals(Token.START_ARRAY, tokens.get(1).getKind());",
          "63:         Assert.assertEquals(Token.REAL, tokens.get(2).getKind());",
          "64:         Assert.assertEquals(Token.REAL, tokens.get(3).getKind());",
          "65:         Assert.assertEquals(Token.REAL, tokens.get(4).getKind());",
          "66:         Assert.assertEquals(Token.REAL, tokens.get(5).getKind());",
          "67:         Assert.assertEquals(Token.INTEGER, tokens.get(6).getKind());",
          "68:         Assert.assertEquals(Token.INTEGER, tokens.get(7).getKind());",
          "69:         Assert.assertEquals(\"1e-3\", tokens.get(2).getText());",
          "70:         Assert.assertEquals(\"0e-3\", tokens.get(3).getText());",
          "71:         Assert.assertEquals(\"0e-3\", tokens.get(4).getText());",
          "72:         Assert.assertEquals(\"1E-3\", tokens.get(5).getText());",
          "73:         Assert.assertEquals(\"0\", tokens.get(6).getText());",
          "74:         Assert.assertEquals(\"0\", tokens.get(7).getText());",
          "75:         Assert.assertEquals(Token.END_ARRAY, tokens.get(8).getKind());",
          "76:         Assert.assertEquals(Token.NAME, tokens.get(9).getKind());",
          "77:         Assert.assertEquals(Token.NAME, tokens.get(10).getKind());",
          "78:     }",
          "80: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}