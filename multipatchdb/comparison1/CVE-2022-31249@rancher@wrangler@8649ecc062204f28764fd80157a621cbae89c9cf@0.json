{
  "cve_id": "CVE-2022-31249",
  "cve_desc": "A Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') vulnerability in wrangler of SUSE Rancher allows remote attackers to inject commands in the underlying host via crafted commands passed to Wrangler. This issue affects: SUSE Rancher wrangler version 0.7.3 and prior versions; wrangler version 0.8.4 and prior versions; wrangler version 1.0.0 and prior versions.",
  "repo": "rancher/wrangler",
  "patch_hash": "8649ecc062204f28764fd80157a621cbae89c9cf",
  "patch_info": {
    "commit_hash": "8649ecc062204f28764fd80157a621cbae89c9cf",
    "repo": "rancher/wrangler",
    "commit_url": "https://github.com/rancher/wrangler/commit/8649ecc062204f28764fd80157a621cbae89c9cf",
    "files": [
      "pkg/git/git.go"
    ],
    "message": "Fix up git package\n\nSigned-off-by: Guilherme Macedo <guilherme.macedo@suse.com>",
    "before_after_code_files": [
      "pkg/git/git.go||pkg/git/git.go"
    ]
  },
  "patch_diff": {
    "pkg/git/git.go||pkg/git/git.go": [
      "File: pkg/git/git.go -> pkg/git/git.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "68:  }",
      "70:  output := &bytes.Buffer{}",
      "72:   return \"\", err",
      "73:  }",
      "",
      "[Removed Lines]",
      "71:  if err := g.gitCmd(output, \"ls-remote\", g.URL, formatRefForBranch(branch)); err != nil {",
      "",
      "[Added Lines]",
      "71:  if err := g.gitCmd(output, \"ls-remote\", \"--\", g.URL, formatRefForBranch(branch)); err != nil {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "98: func (g *Git) Clone(branch string) error {",
      "99:  if branch == \"\" {",
      "101:  }",
      "103: }",
      "",
      "[Removed Lines]",
      "100:   return g.git(\"clone\", \"--depth=1\", \"-n\", g.URL, g.Directory)",
      "102:  return g.git(\"clone\", \"--depth=1\", \"-n\", \"--branch\", branch, g.URL, g.Directory)",
      "",
      "[Added Lines]",
      "100:   return g.git(\"clone\", \"--depth=1\", \"-n\", \"--\", g.URL, g.Directory)",
      "102:  return g.git(\"clone\", \"--depth=1\", \"-n\", \"--branch=\"+branch, \"--\", g.URL, g.Directory)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "302: }",
      "304: func (g *Git) fetchAndReset(rev string) error {",
      "306:   return err",
      "307:  }",
      "308:  return g.reset(\"FETCH_HEAD\")",
      "309: }",
      "311: func (g *Git) reset(rev string) error {",
      "313: }",
      "315: func (g *Git) currentCommit() (string, error) {",
      "",
      "[Removed Lines]",
      "305:  if err := g.git(\"-C\", g.Directory, \"fetch\", \"origin\", rev); err != nil {",
      "312:  return g.git(\"-C\", g.Directory, \"reset\", \"--hard\", rev)",
      "",
      "[Added Lines]",
      "305:  if err := g.git(\"-C\", g.Directory, \"fetch\", \"origin\", \"--\", rev); err != nil {",
      "312:  return g.git(\"-C\", g.Directory, \"reset\", \"--hard\", \"--\", rev)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "317: }",
      "319: func (g *Git) gitCmd(output io.Writer, args ...string) error {",
      "321:  cmd := exec.Command(\"git\", append([]string{\"-c\", kv}, args...)...)",
      "322:  cmd.Env = append(os.Environ(), fmt.Sprintf(\"GIT_PASSWORD=%s\", g.password))",
      "323:  stderrBuf := &bytes.Buffer{}",
      "",
      "[Removed Lines]",
      "320:  kv := fmt.Sprintf(\"credential.helper=%s\", \"/bin/sh -c 'echo password=$GIT_PASSWORD'\")",
      "",
      "[Added Lines]",
      "320:  kv := fmt.Sprintf(\"credential.helper=%s\", `/bin/sh -c 'echo \"password=$GIT_PASSWORD\"'`)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bb6e6028fe7f92664a2c289ef8597d3b9dc26b17",
      "candidate_info": {
        "commit_hash": "bb6e6028fe7f92664a2c289ef8597d3b9dc26b17",
        "repo": "rancher/wrangler",
        "commit_url": "https://github.com/rancher/wrangler/commit/bb6e6028fe7f92664a2c289ef8597d3b9dc26b17",
        "files": [
          "pkg/git/git.go"
        ],
        "message": "Fix up git package\n\nSigned-off-by: Guilherme Macedo <guilherme.macedo@suse.com>",
        "before_after_code_files": [
          "pkg/git/git.go||pkg/git/git.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "pkg/git/git.go||pkg/git/git.go"
          ],
          "candidate": [
            "pkg/git/git.go||pkg/git/git.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/git/git.go||pkg/git/git.go": [
          "File: pkg/git/git.go -> pkg/git/git.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:  }",
          "70:  output := &bytes.Buffer{}",
          "72:   return \"\", err",
          "73:  }",
          "",
          "[Removed Lines]",
          "71:  if err := g.gitCmd(output, \"ls-remote\", g.URL, formatRefForBranch(branch)); err != nil {",
          "",
          "[Added Lines]",
          "71:  if err := g.gitCmd(output, \"ls-remote\", \"--\", g.URL, formatRefForBranch(branch)); err != nil {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98: func (g *Git) Clone(branch string) error {",
          "99:  if branch == \"\" {",
          "101:  }",
          "103: }",
          "",
          "[Removed Lines]",
          "100:   return g.git(\"clone\", \"--depth=1\", \"-n\", g.URL, g.Directory)",
          "102:  return g.git(\"clone\", \"--depth=1\", \"-n\", \"--branch\", branch, g.URL, g.Directory)",
          "",
          "[Added Lines]",
          "100:   return g.git(\"clone\", \"--depth=1\", \"-n\", \"--\", g.URL, g.Directory)",
          "102:  return g.git(\"clone\", \"--depth=1\", \"-n\", \"--branch=\"+branch, \"--\", g.URL, g.Directory)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "302: }",
          "304: func (g *Git) fetchAndReset(rev string) error {",
          "306:   return err",
          "307:  }",
          "308:  return g.reset(\"FETCH_HEAD\")",
          "309: }",
          "311: func (g *Git) reset(rev string) error {",
          "313: }",
          "315: func (g *Git) currentCommit() (string, error) {",
          "",
          "[Removed Lines]",
          "305:  if err := g.git(\"-C\", g.Directory, \"fetch\", \"origin\", rev); err != nil {",
          "312:  return g.git(\"-C\", g.Directory, \"reset\", \"--hard\", rev)",
          "",
          "[Added Lines]",
          "305:  if err := g.git(\"-C\", g.Directory, \"fetch\", \"origin\", \"--\", rev); err != nil {",
          "312:  return g.git(\"-C\", g.Directory, \"reset\", \"--hard\", \"--\", rev)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "317: }",
          "319: func (g *Git) gitCmd(output io.Writer, args ...string) error {",
          "321:  cmd := exec.Command(\"git\", append([]string{\"-c\", kv}, args...)...)",
          "322:  cmd.Env = append(os.Environ(), fmt.Sprintf(\"GIT_PASSWORD=%s\", g.password))",
          "323:  stderrBuf := &bytes.Buffer{}",
          "",
          "[Removed Lines]",
          "320:  kv := fmt.Sprintf(\"credential.helper=%s\", \"/bin/sh -c 'echo password=$GIT_PASSWORD'\")",
          "",
          "[Added Lines]",
          "320:  kv := fmt.Sprintf(\"credential.helper=%s\", `/bin/sh -c 'echo \"password=$GIT_PASSWORD\"'`)",
          "",
          "---------------"
        ]
      }
    }
  ]
}