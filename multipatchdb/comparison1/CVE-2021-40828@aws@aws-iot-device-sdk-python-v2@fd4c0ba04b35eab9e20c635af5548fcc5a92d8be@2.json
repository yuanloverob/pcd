{
  "cve_id": "CVE-2021-40828",
  "cve_desc": "Connections initialized by the AWS IoT Device SDK v2 for Java (versions prior to 1.3.3), Python (versions prior to 1.5.18), C++ (versions prior to 1.12.7) and Node.js (versions prior to 1.5.1) did not verify server certificate hostname during TLS handshake when overriding Certificate Authorities (CA) in their trust stores on Windows. This issue has been addressed in aws-c-io submodule versions 0.9.13 onward. This issue affects: Amazon Web Services AWS IoT Device SDK v2 for Java versions prior to 1.3.3 on Microsoft Windows. Amazon Web Services AWS IoT Device SDK v2 for Python versions prior to 1.5.18 on Microsoft Windows. Amazon Web Services AWS IoT Device SDK v2 for C++ versions prior to 1.12.7 on Microsoft Windows. Amazon Web Services AWS IoT Device SDK v2 for Node.js versions prior to 1.5.3 on Microsoft Windows.",
  "repo": "aws/aws-iot-device-sdk-python-v2",
  "patch_hash": "fd4c0ba04b35eab9e20c635af5548fcc5a92d8be",
  "patch_info": {
    "commit_hash": "fd4c0ba04b35eab9e20c635af5548fcc5a92d8be",
    "repo": "aws/aws-iot-device-sdk-python-v2",
    "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/fd4c0ba04b35eab9e20c635af5548fcc5a92d8be",
    "files": [
      "setup.py"
    ],
    "message": "Update to latest CRT (#208)\n\n* On Windows, always perform an SNI check even with an overridden root CA\n* On Windows, properly honor the verify_peer = false option\n* Fix instability with raspberry PI and input stream seeking by doing a better job of modeling file seek offset type and size.",
    "before_after_code_files": [
      "setup.py||setup.py"
    ]
  },
  "patch_diff": {
    "setup.py||setup.py": [
      "File: setup.py -> setup.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:         \"Operating System :: OS Independent\",",
      "41:     ],",
      "42:     install_requires=[",
      "44:     ],",
      "45:     python_requires='>=3.6',",
      "46: )",
      "",
      "[Removed Lines]",
      "43:         'awscrt==0.11.20',",
      "",
      "[Added Lines]",
      "43:         'awscrt==0.11.22',",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "805f41b5d2403688ff38ad50f8b7af1132fb5831",
      "candidate_info": {
        "commit_hash": "805f41b5d2403688ff38ad50f8b7af1132fb5831",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/805f41b5d2403688ff38ad50f8b7af1132fb5831",
        "files": [
          "setup.py"
        ],
        "message": "Updating dependency to pick up event stream RPC client fix. (#162)",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:         \"Operating System :: OS Independent\",",
          "20:     ],",
          "21:     install_requires=[",
          "23:     ],",
          "24:     python_requires='>=3.5',",
          "25: )",
          "",
          "[Removed Lines]",
          "22:         'awscrt==0.10.7',",
          "",
          "[Added Lines]",
          "22:         'awscrt==0.10.8',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03eb38ec7561976bbec96d315cf25d14317b2f86",
      "candidate_info": {
        "commit_hash": "03eb38ec7561976bbec96d315cf25d14317b2f86",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/03eb38ec7561976bbec96d315cf25d14317b2f86",
        "files": [
          "awsiot/mqtt_connection_builder.py",
          "samples/README.md",
          "samples/pkcs11_pubsub.py",
          "setup.py"
        ],
        "message": "Support PKCS#11 for mutual TLS on Unix platforms (#259)\n\n- Update to latest `aws-crt-python`, which exposes PKCS#11 functionality (see https://github.com/awslabs/aws-crt-python/pull/323)\n- Add `pkcs11_pubsub.py` sample, demonstrating an MQTT connection where the private key is stored in PKCS#11 token.\n  - Add docs for sample",
        "before_after_code_files": [
          "awsiot/mqtt_connection_builder.py||awsiot/mqtt_connection_builder.py",
          "samples/pkcs11_pubsub.py||samples/pkcs11_pubsub.py",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "awsiot/mqtt_connection_builder.py||awsiot/mqtt_connection_builder.py": [
          "File: awsiot/mqtt_connection_builder.py -> awsiot/mqtt_connection_builder.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:     return _builder(tls_ctx_options, **kwargs)",
          "252: def websockets_with_default_aws_signing(",
          "253:         region,",
          "254:         credentials_provider,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252: def mtls_with_pkcs11(*,",
          "253:                      pkcs11_lib: awscrt.io.Pkcs11Lib,",
          "254:                      user_pin: str,",
          "255:                      slot_id: int = None,",
          "256:                      token_label: str = None,",
          "257:                      private_key_label: str = None,",
          "258:                      cert_filepath: str = None,",
          "259:                      cert_bytes=None,",
          "261:     \"\"\"",
          "262:     This builder creates an :class:`awscrt.mqtt.Connection`, configured for an mTLS MQTT connection to AWS IoT,",
          "263:     using a PKCS#11 library for private key operations.",
          "265:     This function takes all :mod:`common arguments<awsiot.mqtt_connection_builder>`",
          "266:     described at the top of this doc, as well as...",
          "268:     Keyword Args:",
          "269:         pkcs11_lib (awscrt.io.Pkcs11Lib): Use this PKCS#11 library",
          "271:         user_pin (Optional[str]): User PIN, for logging into the PKCS#11 token.",
          "272:             Pass `None` to log into a token with a \"protected authentication path\".",
          "274:         slot_id (Optional[int]): ID of slot containing PKCS#11 token.",
          "275:             If not specified, the token will be chosen based on other criteria (such as token label).",
          "277:         token_label (Optional[str]): Label of the PKCS#11 token to use.",
          "278:             If not specified, the token will be chosen based on other criteria (such as slot ID).",
          "280:         private_key_label (Optional[str]): Label of private key object on PKCS#11 token.",
          "281:             If not specified, the key will be chosen based on other criteria",
          "282:             (such as being the only available private key on the token).",
          "284:         cert_filepath (Optional[str]): Use this X.509 certificate (file on disk).",
          "285:             The certificate must be PEM-formatted. The certificate may be",
          "286:             specified by other means instead (ex: `cert_file_contents`)",
          "288:         cert_bytes (Optional[bytes-like object]):",
          "289:             Use this X.509 certificate (contents in memory).",
          "290:             The certificate must be PEM-formatted. The certificate may be",
          "291:             specified by other means instead (ex: `cert_file_path`)",
          "292:     \"\"\"",
          "293:     _check_required_kwargs(**kwargs)",
          "295:     tls_ctx_options = awscrt.io.TlsContextOptions.create_client_with_mtls_pkcs11(",
          "296:         pkcs11_lib=pkcs11_lib,",
          "297:         user_pin=user_pin,",
          "298:         slot_id=slot_id,",
          "299:         token_label=token_label,",
          "300:         private_key_label=private_key_label,",
          "301:         cert_file_path=cert_filepath,",
          "302:         cert_file_contents=cert_bytes)",
          "304:     return _builder(tls_ctx_options, **kwargs)",
          "",
          "---------------"
        ],
        "samples/pkcs11_pubsub.py||samples/pkcs11_pubsub.py": [
          "File: samples/pkcs11_pubsub.py -> samples/pkcs11_pubsub.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "4: import argparse",
          "5: from awscrt import io, mqtt",
          "6: from awsiot import mqtt_connection_builder",
          "7: import sys",
          "8: import threading",
          "9: import time",
          "10: from uuid import uuid4",
          "11: import json",
          "13: # This sample is similar to `samples/pubsub.py` but the private key",
          "14: # for mutual TLS is stored on a PKCS#11 compatible smart card or",
          "15: # Hardware Security Module (HSM).",
          "16: #",
          "17: # See `samples/README.md` for instructions on setting up your PKCS#11 device",
          "18: # to run this sample.",
          "19: #",
          "20: # WARNING: Unix only. Currently, TLS integration with PKCS#11 is only available on Unix devices.",
          "22: parser = argparse.ArgumentParser(description=\"Send and receive messages through and MQTT connection.\")",
          "23: parser.add_argument('--endpoint', required=True, help=\"Your AWS IoT custom endpoint, not including a port. \" +",
          "24:                                                       \"Ex: \\\"abcd123456wxyz-ats.iot.us-east-1.amazonaws.com\\\"\")",
          "25: parser.add_argument('--port', type=int, help=\"Specify port. AWS IoT supports 443 and 8883. (default: auto)\")",
          "26: parser.add_argument('--cert', required=True, help=\"File path to your client certificate, in PEM format.\")",
          "27: parser.add_argument('--pkcs11-lib', required=True, help=\"Path to PKCS#11 library.\")",
          "28: parser.add_argument('--pin', required=True, help=\"User PIN for logging into PKCS#11 token.\")",
          "29: parser.add_argument('--token-label', help=\"Label of PKCS#11 token to use. (default: None) \")",
          "30: parser.add_argument('--slot-id', help=\"Slot ID containing PKCS#11 token to use. (default: None)\")",
          "31: parser.add_argument('--key-label', help=\"Label of private key on the PKCS#11 token. (default: None)\")",
          "32: parser.add_argument('--root-ca', help=\"File path to root certificate authority, in PEM format. (default: None)\")",
          "33: parser.add_argument('--client-id', default=\"test-\" + str(uuid4()),",
          "34:                     help=\"Client ID for MQTT connection. (default: 'test-*')\")",
          "35: parser.add_argument('--topic', default=\"test/topic\",",
          "36:                     help=\"Topic to subscribe to, and publish messages to. (default: 'test/topic')\")",
          "37: parser.add_argument('--message', default=\"Hello World!\",",
          "38:                     help=\"Message to publish. Specify empty string to publish nothing. (default: 'Hello World!')\")",
          "39: parser.add_argument('--count', default=10, type=int, help=\"Number of messages to publish/receive before exiting. \" +",
          "40:                                                           \"Specify 0 to run forever. (default: 10)\")",
          "41: parser.add_argument('--verbosity', choices=[x.name for x in io.LogLevel], default=io.LogLevel.NoLogs.name,",
          "42:                     help=\"Logging level. (default: 'NoLogs')\")",
          "44: # Using globals to simplify sample code",
          "45: args = parser.parse_args()",
          "47: io.init_logging(getattr(io.LogLevel, args.verbosity), 'stderr')",
          "49: received_count = 0",
          "50: received_all_event = threading.Event()",
          "53: def on_connection_interrupted(connection, error, **kwargs):",
          "54:     # Callback when connection is accidentally lost.",
          "55:     print(\"Connection interrupted. error: {}\".format(error))",
          "58: def on_connection_resumed(connection, return_code, session_present, **kwargs):",
          "59:     # Callback when an interrupted connection is re-established.",
          "60:     print(\"Connection resumed. return_code: {} session_present: {}\".format(return_code, session_present))",
          "63: # Callback when the subscribed topic receives a message",
          "64: def on_message_received(topic, payload, dup, qos, retain, **kwargs):",
          "65:     print(\"Received message from topic '{}': {}\".format(topic, payload))",
          "66:     global received_count",
          "67:     received_count += 1",
          "68:     if received_count == args.count:",
          "69:         received_all_event.set()",
          "72: if __name__ == '__main__':",
          "73:     # Spin up resources",
          "74:     event_loop_group = io.EventLoopGroup(1)",
          "75:     host_resolver = io.DefaultHostResolver(event_loop_group)",
          "76:     client_bootstrap = io.ClientBootstrap(event_loop_group, host_resolver)",
          "78:     print(f\"Loading PKCS#11 library '{args.pkcs11_lib}' ...\")",
          "79:     pkcs11_lib = io.Pkcs11Lib(",
          "80:         file=args.pkcs11_lib,",
          "81:         behavior=io.Pkcs11Lib.InitializeFinalizeBehavior.STRICT)",
          "82:     print(\"Loaded!\")",
          "84:     # Create MQTT connection",
          "85:     mqtt_connection = mqtt_connection_builder.mtls_with_pkcs11(",
          "86:         pkcs11_lib=pkcs11_lib,",
          "87:         user_pin=args.pin,",
          "88:         slot_id=int(args.slot_id) if args.slot_id else None,",
          "89:         token_label=args.token_label,",
          "90:         private_key_label=args.key_label,",
          "91:         cert_filepath=args.cert,",
          "92:         endpoint=args.endpoint,",
          "93:         port=args.port,",
          "94:         client_bootstrap=client_bootstrap,",
          "95:         ca_filepath=args.root_ca,",
          "96:         on_connection_interrupted=on_connection_interrupted,",
          "97:         on_connection_resumed=on_connection_resumed,",
          "98:         client_id=args.client_id,",
          "99:         clean_session=False,",
          "100:         keep_alive_secs=30)",
          "102:     print(\"Connecting to {} with client ID '{}'...\".format(",
          "103:         args.endpoint, args.client_id))",
          "105:     connect_future = mqtt_connection.connect()",
          "107:     # Future.result() waits until a result is available",
          "108:     connect_future.result()",
          "109:     print(\"Connected!\")",
          "111:     # Subscribe",
          "112:     print(\"Subscribing to topic '{}'...\".format(args.topic))",
          "113:     subscribe_future, packet_id = mqtt_connection.subscribe(",
          "114:         topic=args.topic,",
          "115:         qos=mqtt.QoS.AT_LEAST_ONCE,",
          "116:         callback=on_message_received)",
          "118:     subscribe_result = subscribe_future.result()",
          "119:     print(\"Subscribed with {}\".format(str(subscribe_result['qos'])))",
          "121:     # Publish message to server desired number of times.",
          "122:     # This step is skipped if message is blank.",
          "123:     # This step loops forever if count was set to 0.",
          "124:     if args.message:",
          "125:         if args.count == 0:",
          "126:             print(\"Sending messages until program killed\")",
          "127:         else:",
          "128:             print(\"Sending {} message(s)\".format(args.count))",
          "130:         publish_count = 1",
          "131:         while (publish_count <= args.count) or (args.count == 0):",
          "132:             message = \"{} [{}]\".format(args.message, publish_count)",
          "133:             print(\"Publishing message to topic '{}': {}\".format(args.topic, message))",
          "134:             message_json = json.dumps(message)",
          "135:             mqtt_connection.publish(",
          "136:                 topic=args.topic,",
          "137:                 payload=message_json,",
          "138:                 qos=mqtt.QoS.AT_LEAST_ONCE)",
          "139:             time.sleep(1)",
          "140:             publish_count += 1",
          "142:     # Wait for all messages to be received.",
          "143:     # This waits forever if count was set to 0.",
          "144:     if args.count != 0 and not received_all_event.is_set():",
          "145:         print(\"Waiting for all messages to be received...\")",
          "147:     received_all_event.wait()",
          "148:     print(\"{} message(s) received.\".format(received_count))",
          "150:     # Disconnect",
          "151:     print(\"Disconnecting...\")",
          "152:     disconnect_future = mqtt_connection.disconnect()",
          "153:     disconnect_future.result()",
          "154:     print(\"Disconnected!\")",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         \"Operating System :: OS Independent\",",
          "41:     ],",
          "42:     install_requires=[",
          "44:     ],",
          "45:     python_requires='>=3.6',",
          "46: )",
          "",
          "[Removed Lines]",
          "43:         'awscrt==0.12.1',",
          "",
          "[Added Lines]",
          "43:         'awscrt==0.13.0',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3139671601699c8f997b87116f28d63d75a021de",
      "candidate_info": {
        "commit_hash": "3139671601699c8f997b87116f28d63d75a021de",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/3139671601699c8f997b87116f28d63d75a021de",
        "files": [
          "awsiot/mqtt_connection_builder.py",
          "docs/awsiot/mqtt_connection_builder.html",
          "docs/searchindex.js",
          "samples/fleetprovisioning.py",
          "samples/jobs.py",
          "samples/pubsub.py",
          "samples/shadow.py",
          "setup.py"
        ],
        "message": "Update samples and builder with improved proxy support (#196)\n\n* Update samples and builder with improved proxy support\n* Deprecate and don't use old parameter in samples when using websockets\n* Doc update\n\nCo-authored-by: Michael Graeb <graebm@amazon.com>",
        "before_after_code_files": [
          "awsiot/mqtt_connection_builder.py||awsiot/mqtt_connection_builder.py",
          "samples/fleetprovisioning.py||samples/fleetprovisioning.py",
          "samples/jobs.py||samples/jobs.py",
          "samples/pubsub.py||samples/pubsub.py",
          "samples/shadow.py||samples/shadow.py",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "awsiot/mqtt_connection_builder.py||awsiot/mqtt_connection_builder.py": [
          "File: awsiot/mqtt_connection_builder.py -> awsiot/mqtt_connection_builder.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:         tls_ctx_options,",
          "144:         use_websockets=False,",
          "145:         websocket_handshake_transform=None,",
          "149:     ca_bytes = _get(kwargs, 'ca_bytes')",
          "",
          "[Removed Lines]",
          "146:         websocket_proxy_options=None,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:     tls_ctx = awscrt.io.ClientTlsContext(tls_ctx_options)",
          "189:     mqtt_client = awscrt.mqtt.Client(client_bootstrap, tls_ctx)",
          "191:     return awscrt.mqtt.Connection(",
          "192:         client=mqtt_client,",
          "193:         on_connection_interrupted=_get(kwargs, 'on_connection_interrupted'),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:     proxy_options = kwargs.get('http_proxy_options', kwargs.get('websocket_proxy_options', None))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "207:         socket_options=socket_options,",
          "208:         use_websockets=use_websockets,",
          "209:         websocket_handshake_transform=websocket_handshake_transform,",
          "211:     )",
          "",
          "[Removed Lines]",
          "210:         websocket_proxy_options=websocket_proxy_options,",
          "",
          "[Added Lines]",
          "212:         proxy_options=proxy_options,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "265:         credentials_provider (awscrt.auth.AwsCredentialsProvider): Source of AWS credentials to use when signing.",
          "268:     \"\"\"",
          "269:     _check_required_kwargs(**kwargs)",
          "",
          "[Removed Lines]",
          "267:         websocket_proxy_options (awscrt.http.HttpProxyOptions): If specified, a proxy is used when connecting.",
          "",
          "[Added Lines]",
          "269:         websocket_proxy_options (awscrt.http.HttpProxyOptions): Deprecated,",
          "270:             for proxy settings use `http_proxy_options` (described in",
          "271:             :mod:`common arguments<awsiot.mqtt_connection_builder>`)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "316:     \"\"\"",
          "317:     _check_required_kwargs(**kwargs)",
          "318:     tls_ctx_options = awscrt.io.TlsContextOptions()",
          "",
          "[Removed Lines]",
          "315:         websocket_proxy_options (awscrt.http.HttpProxyOptions): If specified, a proxy is used when connecting.",
          "",
          "[Added Lines]",
          "320:         websocket_proxy_options (awscrt.http.HttpProxyOptions):  Deprecated,",
          "321:             for proxy settings use `http_proxy_options` (described in",
          "322:             :mod:`common arguments<awsiot.mqtt_connection_builder>`)",
          "",
          "---------------"
        ],
        "samples/fleetprovisioning.py||samples/fleetprovisioning.py": [
          "File: samples/fleetprovisioning.py -> samples/fleetprovisioning.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: parser.add_argument('--client-id', default=\"test-\" + str(uuid4()), help=\"Client ID for MQTT connection.\")",
          "38: parser.add_argument('--use-websocket', default=False, action='store_true',",
          "39:                     help=\"To use a websocket instead of raw mqtt. If you \" +",
          "41: parser.add_argument('--signing-region', default='us-east-1', help=\"If you specify --use-web-socket, this \" +",
          "42:                                                                   \"is the region that will be used for computing the Sigv4 signature\")",
          "46: parser.add_argument('--verbosity', choices=[x.name for x in io.LogLevel], default=io.LogLevel.NoLogs.name,",
          "47:                     help='Logging level')",
          "48: parser.add_argument(\"--csr\", help=\"File path to your client CSR in PEM format\")",
          "",
          "[Removed Lines]",
          "40:                          \"specify this option you must specify a region for signing, you can also enable proxy mode.\")",
          "43: parser.add_argument('--proxy-host', help=\"Hostname for proxy to connect to. Note: if you use this feature, \" +",
          "44:                                          \"you will likely need to set --root-ca to the ca for your proxy.\")",
          "45: parser.add_argument('--proxy-port', type=int, default=8080, help=\"Port for proxy to connect to.\")",
          "",
          "[Added Lines]",
          "40:                          \"specify this option you must specify a region for signing.\")",
          "43: parser.add_argument('--proxy-host', help=\"Hostname of proxy to connect to.\")",
          "44: parser.add_argument('--proxy-port', type=int, default=8080, help=\"Port of proxy to connect to.\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "233:     host_resolver = io.DefaultHostResolver(event_loop_group)",
          "234:     client_bootstrap = io.ClientBootstrap(event_loop_group, host_resolver)",
          "241:         credentials_provider = auth.AwsCredentialsProvider.new_default_chain(client_bootstrap)",
          "242:         mqtt_connection = mqtt_connection_builder.websockets_with_default_aws_signing(",
          "243:             endpoint=args.endpoint,",
          "244:             client_bootstrap=client_bootstrap,",
          "245:             region=args.signing_region,",
          "246:             credentials_provider=credentials_provider,",
          "248:             on_connection_interrupted=on_connection_interrupted,",
          "249:             on_connection_resumed=on_connection_resumed,",
          "250:             ca_filepath=args.root_ca,",
          "",
          "[Removed Lines]",
          "236:     if args.use_websocket == True:",
          "237:         proxy_options = None",
          "238:         if (args.proxy_host):",
          "239:             proxy_options = http.HttpProxyOptions(host_name=args.proxy_host, port=args.proxy_port)",
          "247:             websocket_proxy_options=proxy_options,",
          "",
          "[Added Lines]",
          "235:     proxy_options = None",
          "236:     if (args.proxy_host):",
          "237:         proxy_options = http.HttpProxyOptions(host_name=args.proxy_host, port=args.proxy_port)",
          "239:     if args.use_websocket == True:",
          "246:             http_proxy_options=proxy_options,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "263:             on_connection_interrupted=on_connection_interrupted,",
          "264:             on_connection_resumed=on_connection_resumed,",
          "265:             clean_session=False,",
          "268:     print(\"Connecting to {} with client ID '{}'...\".format(",
          "269:         args.endpoint, args.client_id))",
          "",
          "[Removed Lines]",
          "266:             keep_alive_secs=6)",
          "",
          "[Added Lines]",
          "265:             keep_alive_secs=6,",
          "266:             http_proxy_options=proxy_options)",
          "",
          "---------------"
        ],
        "samples/jobs.py||samples/jobs.py": [
          "File: samples/jobs.py -> samples/jobs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: parser.add_argument('--job-time', default=5, type=float, help=\"Emulate working on job by sleeping this many seconds.\")",
          "47: parser.add_argument('--use-websocket', default=False, action='store_true',",
          "48:     help=\"To use a websocket instead of raw mqtt. If you \" +",
          "50: parser.add_argument('--signing-region', default='us-east-1', help=\"If you specify --use-web-socket, this \" +",
          "51:     \"is the region that will be used for computing the Sigv4 signature\")",
          "55: parser.add_argument('--verbosity', choices=[x.name for x in io.LogLevel], default=io.LogLevel.NoLogs.name,",
          "56:     help='Logging level')",
          "",
          "[Removed Lines]",
          "49:     \"specify this option you must specify a region for signing, you can also enable proxy mode.\")",
          "52: parser.add_argument('--proxy-host', help=\"Hostname for proxy to connect to. Note: if you use this feature, \" +",
          "53:     \"you will likely need to set --root-ca to the ca for your proxy.\")",
          "54: parser.add_argument('--proxy-port', type=int, default=8080, help=\"Port for proxy to connect to.\")",
          "",
          "[Added Lines]",
          "49:     \"specify this option you must specify a region for signing.\")",
          "52: parser.add_argument('--proxy-host', help=\"Hostname of proxy to connect to.\")",
          "53: parser.add_argument('--proxy-port', type=int, default=8080, help=\"Port of proxy to connect to.\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230:     host_resolver = io.DefaultHostResolver(event_loop_group)",
          "231:     client_bootstrap = io.ClientBootstrap(event_loop_group, host_resolver)",
          "238:         credentials_provider = auth.AwsCredentialsProvider.new_default_chain(client_bootstrap)",
          "239:         mqtt_connection = mqtt_connection_builder.websockets_with_default_aws_signing(",
          "240:             endpoint=args.endpoint,",
          "241:             client_bootstrap=client_bootstrap,",
          "242:             region=args.signing_region,",
          "243:             credentials_provider=credentials_provider,",
          "245:             ca_filepath=args.root_ca,",
          "246:             client_id=args.client_id,",
          "247:             clean_session=False,",
          "",
          "[Removed Lines]",
          "233:     if args.use_websocket == True:",
          "234:         proxy_options = None",
          "235:         if (args.proxy_host):",
          "236:             proxy_options = http.HttpProxyOptions(host_name=args.proxy_host, port=args.proxy_port)",
          "244:             websocket_proxy_options=proxy_options,",
          "",
          "[Added Lines]",
          "232:     proxy_options = None",
          "233:     if (args.proxy_host):",
          "234:         proxy_options = http.HttpProxyOptions(host_name=args.proxy_host, port=args.proxy_port)",
          "236:     if args.use_websocket == True:",
          "243:             http_proxy_options=proxy_options,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "256:             ca_filepath=args.root_ca,",
          "257:             client_id=args.client_id,",
          "258:             clean_session=False,",
          "261:     print(\"Connecting to {} with client ID '{}'...\".format(",
          "262:         args.endpoint, args.client_id))",
          "",
          "[Removed Lines]",
          "259:             keep_alive_secs=6)",
          "",
          "[Added Lines]",
          "258:             keep_alive_secs=6,",
          "259:             http_proxy_options=proxy_options)",
          "",
          "---------------"
        ],
        "samples/pubsub.py||samples/pubsub.py": [
          "File: samples/pubsub.py -> samples/pubsub.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:                                                           \"Specify 0 to run forever.\")",
          "33: parser.add_argument('--use-websocket', default=False, action='store_true',",
          "34:     help=\"To use a websocket instead of raw mqtt. If you \" +",
          "36: parser.add_argument('--signing-region', default='us-east-1', help=\"If you specify --use-web-socket, this \" +",
          "37:     \"is the region that will be used for computing the Sigv4 signature\")",
          "41: parser.add_argument('--verbosity', choices=[x.name for x in io.LogLevel], default=io.LogLevel.NoLogs.name,",
          "42:     help='Logging level')",
          "",
          "[Removed Lines]",
          "35:     \"specify this option you must specify a region for signing, you can also enable proxy mode.\")",
          "38: parser.add_argument('--proxy-host', help=\"Hostname for proxy to connect to. Note: if you use this feature, \" +",
          "39:     \"you will likely need to set --root-ca to the ca for your proxy.\")",
          "40: parser.add_argument('--proxy-port', type=int, default=8080, help=\"Port for proxy to connect to.\")",
          "",
          "[Added Lines]",
          "35:     \"specify this option you must specify a region for signing.\")",
          "38: parser.add_argument('--proxy-host', help=\"Hostname of proxy to connect to.\")",
          "39: parser.add_argument('--proxy-port', type=int, default=8080, help=\"Port of proxy to connect to.\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:     host_resolver = io.DefaultHostResolver(event_loop_group)",
          "91:     client_bootstrap = io.ClientBootstrap(event_loop_group, host_resolver)",
          "98:         credentials_provider = auth.AwsCredentialsProvider.new_default_chain(client_bootstrap)",
          "99:         mqtt_connection = mqtt_connection_builder.websockets_with_default_aws_signing(",
          "100:             endpoint=args.endpoint,",
          "101:             client_bootstrap=client_bootstrap,",
          "102:             region=args.signing_region,",
          "103:             credentials_provider=credentials_provider,",
          "105:             ca_filepath=args.root_ca,",
          "106:             on_connection_interrupted=on_connection_interrupted,",
          "107:             on_connection_resumed=on_connection_resumed,",
          "",
          "[Removed Lines]",
          "93:     if args.use_websocket == True:",
          "94:         proxy_options = None",
          "95:         if (args.proxy_host):",
          "96:             proxy_options = http.HttpProxyOptions(host_name=args.proxy_host, port=args.proxy_port)",
          "104:             websocket_proxy_options=proxy_options,",
          "",
          "[Added Lines]",
          "92:     proxy_options = None",
          "93:     if (args.proxy_host):",
          "94:         proxy_options = http.HttpProxyOptions(host_name=args.proxy_host, port=args.proxy_port)",
          "96:     if args.use_websocket == True:",
          "103:             http_proxy_options=proxy_options,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121:             on_connection_resumed=on_connection_resumed,",
          "122:             client_id=args.client_id,",
          "123:             clean_session=False,",
          "126:     print(\"Connecting to {} with client ID '{}'...\".format(",
          "127:         args.endpoint, args.client_id))",
          "",
          "[Removed Lines]",
          "124:             keep_alive_secs=6)",
          "",
          "[Added Lines]",
          "123:             keep_alive_secs=6,",
          "124:             http_proxy_options=proxy_options)",
          "",
          "---------------"
        ],
        "samples/shadow.py||samples/shadow.py": [
          "File: samples/shadow.py -> samples/shadow.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: parser.add_argument('--shadow-property', default=\"color\", help=\"Name of property in shadow to keep in sync\")",
          "44: parser.add_argument('--use-websocket', default=False, action='store_true',",
          "45:     help=\"To use a websocket instead of raw mqtt. If you \" +",
          "47: parser.add_argument('--signing-region', default='us-east-1', help=\"If you specify --use-web-socket, this \" +",
          "48:     \"is the region that will be used for computing the Sigv4 signature\")",
          "52: parser.add_argument('--verbosity', choices=[x.name for x in io.LogLevel], default=io.LogLevel.NoLogs.name,",
          "53:     help='Logging level')",
          "",
          "[Removed Lines]",
          "46:     \"specify this option you must specify a region for signing, you can also enable proxy mode.\")",
          "49: parser.add_argument('--proxy-host', help=\"Hostname for proxy to connect to. Note: if you use this feature, \" +",
          "50:     \"you will likely need to set --root-ca to the ca for your proxy.\")",
          "51: parser.add_argument('--proxy-port', type=int, default=8080, help=\"Port for proxy to connect to.\")",
          "",
          "[Added Lines]",
          "46:     \"specify this option you must specify a region for signing.\")",
          "49: parser.add_argument('--proxy-host', help=\"Hostname of proxy to connect to.\")",
          "50: parser.add_argument('--proxy-port', type=int, default=8080, help=\"Port of proxy to connect to.\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:     host_resolver = io.DefaultHostResolver(event_loop_group)",
          "233:     client_bootstrap = io.ClientBootstrap(event_loop_group, host_resolver)",
          "240:         credentials_provider = auth.AwsCredentialsProvider.new_default_chain(client_bootstrap)",
          "241:         mqtt_connection = mqtt_connection_builder.websockets_with_default_aws_signing(",
          "242:             endpoint=args.endpoint,",
          "243:             client_bootstrap=client_bootstrap,",
          "244:             region=args.signing_region,",
          "245:             credentials_provider=credentials_provider,",
          "247:             ca_filepath=args.root_ca,",
          "248:             client_id=args.client_id,",
          "249:             clean_session=False,",
          "",
          "[Removed Lines]",
          "235:     if args.use_websocket == True:",
          "236:         proxy_options = None",
          "237:         if (args.proxy_host):",
          "238:             proxy_options = http.HttpProxyOptions(host_name=args.proxy_host, port=args.proxy_port)",
          "246:             websocket_proxy_options=proxy_options,",
          "",
          "[Added Lines]",
          "234:     proxy_options = None",
          "235:     if (args.proxy_host):",
          "236:         proxy_options = http.HttpProxyOptions(host_name=args.proxy_host, port=args.proxy_port)",
          "238:     if args.use_websocket == True:",
          "245:             http_proxy_options=proxy_options,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "258:             ca_filepath=args.root_ca,",
          "259:             client_id=args.client_id,",
          "260:             clean_session=False,",
          "263:     print(\"Connecting to {} with client ID '{}'...\".format(",
          "264:         args.endpoint, args.client_id))",
          "",
          "[Removed Lines]",
          "261:             keep_alive_secs=6)",
          "",
          "[Added Lines]",
          "260:             keep_alive_secs=6,",
          "261:             http_proxy_options=proxy_options)",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         \"Operating System :: OS Independent\",",
          "41:     ],",
          "42:     install_requires=[",
          "44:     ],",
          "45:     python_requires='>=3.6',",
          "46: )",
          "",
          "[Removed Lines]",
          "43:         'awscrt==0.11.19',",
          "",
          "[Added Lines]",
          "43:         'awscrt==0.11.20',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b3b1d99094247c67c9c2c38ed1567e18e8c6693f",
      "candidate_info": {
        "commit_hash": "b3b1d99094247c67c9c2c38ed1567e18e8c6693f",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/b3b1d99094247c67c9c2c38ed1567e18e8c6693f",
        "files": [
          ".gitignore",
          "awsiot/mqtt_connection_builder.py",
          "docs/awsiot/eventstreamrpc.html",
          "docs/awsiot/greengrass_discovery.html",
          "docs/awsiot/greengrasscoreipc.html",
          "docs/awsiot/iotidentity.html",
          "docs/awsiot/iotjobs.html",
          "docs/awsiot/iotshadow.html",
          "docs/awsiot/mqtt_connection_builder.html",
          "docs/genindex.html",
          "docs/objects.inv",
          "docs/searchindex.js",
          "samples/README.md",
          "samples/windows_cert_pubsub.py",
          "setup.py"
        ],
        "message": "Support mutual TLS using a certificate from a Windows cert store (#292)\n\nAdd the ability to use a client certificate located in a Windows certificate store. Previously, the client certificate and private key had to be passed by filepath or file contents. With this change, certificates and keys stored on TPM devices can be used.\n\nAdd new `windows_cert_pubsub.py` sample to show this in action.",
        "before_after_code_files": [
          "awsiot/mqtt_connection_builder.py||awsiot/mqtt_connection_builder.py",
          "samples/windows_cert_pubsub.py||samples/windows_cert_pubsub.py",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "awsiot/mqtt_connection_builder.py||awsiot/mqtt_connection_builder.py": [
          "File: awsiot/mqtt_connection_builder.py -> awsiot/mqtt_connection_builder.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:     This builder creates an :class:`awscrt.mqtt.Connection`, configured for an mTLS MQTT connection to AWS IoT,",
          "268:     using a PKCS#11 library for private key operations.",
          "270:     This function takes all :mod:`common arguments<awsiot.mqtt_connection_builder>`",
          "271:     described at the top of this doc, as well as...",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270:     NOTE: Unix only",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "309:     return _builder(tls_ctx_options, **kwargs)",
          "312: def websockets_with_default_aws_signing(",
          "313:         region,",
          "314:         credentials_provider,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314: def mtls_with_windows_cert_store_path(*,",
          "315:                                       cert_store_path: str,",
          "317:     \"\"\"",
          "318:     This builder creates an :class:`awscrt.mqtt.Connection`, configured for an mTLS MQTT connection to AWS IoT,",
          "319:     using a client certificate in a Windows certificate store.",
          "321:     NOTE: Windows only",
          "323:     This function takes all :mod:`common arguments<awsiot.mqtt_connection_builder>`",
          "324:     described at the top of this doc, as well as...",
          "326:     Args:",
          "327:         cert_store_path: Path to certificate in a Windows certificate store.",
          "328:                 The path must use backslashes and end with the certificate's thumbprint.",
          "329:                 Example: ``CurrentUser\\\\MY\\\\A11F8A9B5DF5B98BA3508FBCA575D09570E0D2C6``",
          "330:     \"\"\"",
          "331:     _check_required_kwargs(**kwargs)",
          "333:     tls_ctx_options = awscrt.io.TlsContextOptions.create_client_with_mtls_windows_cert_store_path(cert_store_path)",
          "335:     return _builder(tls_ctx_options, **kwargs)",
          "",
          "---------------"
        ],
        "samples/windows_cert_pubsub.py||samples/windows_cert_pubsub.py": [
          "File: samples/windows_cert_pubsub.py -> samples/windows_cert_pubsub.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "4: import argparse",
          "5: from awscrt import io, mqtt",
          "6: from awsiot import mqtt_connection_builder",
          "7: import threading",
          "8: import time",
          "9: from uuid import uuid4",
          "11: # This sample is similar to `samples/pubsub.py` but the certificate",
          "12: # for mutual TLS is stored in a Windows certificate store.",
          "13: #",
          "14: # See `samples/README.md` for instructions on setting up your PC",
          "15: # to run this sample.",
          "16: #",
          "17: # WARNING: Windows only.",
          "19: parser = argparse.ArgumentParser(description=\"Send and receive messages through and MQTT connection.\")",
          "20: parser.add_argument('--endpoint', required=True, help=\"Your AWS IoT custom endpoint, not including a port. \" +",
          "21:                                                       \"e.g. \\\"abcd123456wxyz-ats.iot.us-east-1.amazonaws.com\\\"\")",
          "22: parser.add_argument('--port', type=int, help=\"Specify port. AWS IoT supports 443 and 8883. (default: auto)\")",
          "23: parser.add_argument('--cert', required=True, help=\"Path to certificate in Windows certificate store. \" +",
          "24:                                                   \"e.g. \\\"CurrentUser\\\\MY\\\\6ac133ac58f0a88b83e9c794eba156a98da39b4c\\\"\")",
          "25: parser.add_argument('--root-ca', help=\"File path to root certificate authority, in PEM format. (default: None)\")",
          "26: parser.add_argument('--client-id', default=\"test-\" + str(uuid4()),",
          "27:                     help=\"Client ID for MQTT connection. (default: 'test-*')\")",
          "28: parser.add_argument('--topic', default=\"test/topic\",",
          "29:                     help=\"Topic to subscribe to, and publish messages to. (default: 'test/topic')\")",
          "30: parser.add_argument('--message', default=\"Hello World!\",",
          "31:                     help=\"Message to publish. Specify empty string to publish nothing. (default: 'Hello World!')\")",
          "32: parser.add_argument('--count', default=10, type=int, help=\"Number of messages to publish/receive before exiting. \" +",
          "33:                                                           \"Specify 0 to run forever. (default: 10)\")",
          "34: parser.add_argument('--verbosity', choices=[x.name for x in io.LogLevel], default=io.LogLevel.Error.name,",
          "35:                     help=\"Logging level. (default: 'Error')\")",
          "37: # Using globals to simplify sample code",
          "38: args = parser.parse_args()",
          "40: io.init_logging(getattr(io.LogLevel, args.verbosity), 'stderr')",
          "42: received_count = 0",
          "43: received_all_event = threading.Event()",
          "46: def on_connection_interrupted(connection, error, **kwargs):",
          "47:     # Callback when connection is accidentally lost.",
          "48:     print(\"Connection interrupted. error: {}\".format(error))",
          "51: def on_connection_resumed(connection, return_code, session_present, **kwargs):",
          "52:     # Callback when an interrupted connection is re-established.",
          "53:     print(\"Connection resumed. return_code: {} session_present: {}\".format(return_code, session_present))",
          "56: # Callback when the subscribed topic receives a message",
          "57: def on_message_received(topic, payload, dup, qos, retain, **kwargs):",
          "58:     print(\"Received message from topic '{}': {}\".format(topic, payload))",
          "59:     global received_count",
          "60:     received_count += 1",
          "61:     if received_count == args.count:",
          "62:         received_all_event.set()",
          "65: if __name__ == '__main__':",
          "66:     # Create MQTT connection",
          "67:     mqtt_connection = mqtt_connection_builder.mtls_with_windows_cert_store_path(",
          "68:         cert_store_path=args.cert,",
          "69:         endpoint=args.endpoint,",
          "70:         port=args.port,",
          "71:         ca_filepath=args.root_ca,",
          "72:         on_connection_interrupted=on_connection_interrupted,",
          "73:         on_connection_resumed=on_connection_resumed,",
          "74:         client_id=args.client_id,",
          "75:         clean_session=False,",
          "76:         keep_alive_secs=30)",
          "78:     print(\"Connecting to {} with client ID '{}'...\".format(",
          "79:         args.endpoint, args.client_id))",
          "81:     connect_future = mqtt_connection.connect()",
          "83:     # Future.result() waits until a result is available",
          "84:     connect_future.result()",
          "85:     print(\"Connected!\")",
          "87:     # Subscribe",
          "88:     print(\"Subscribing to topic '{}'...\".format(args.topic))",
          "89:     subscribe_future, packet_id = mqtt_connection.subscribe(",
          "90:         topic=args.topic,",
          "91:         qos=mqtt.QoS.AT_LEAST_ONCE,",
          "92:         callback=on_message_received)",
          "94:     subscribe_result = subscribe_future.result()",
          "95:     print(\"Subscribed with {}\".format(str(subscribe_result['qos'])))",
          "97:     # Publish message to server desired number of times.",
          "98:     # This step is skipped if message is blank.",
          "99:     # This step loops forever if count was set to 0.",
          "100:     if args.message:",
          "101:         if args.count == 0:",
          "102:             print(\"Sending messages until program killed\")",
          "103:         else:",
          "104:             print(\"Sending {} message(s)\".format(args.count))",
          "106:         publish_count = 1",
          "107:         while (publish_count <= args.count) or (args.count == 0):",
          "108:             message = \"{} [{}]\".format(args.message, publish_count)",
          "109:             print(\"Publishing message to topic '{}': {}\".format(args.topic, message))",
          "110:             mqtt_connection.publish(",
          "111:                 topic=args.topic,",
          "112:                 payload=message,",
          "113:                 qos=mqtt.QoS.AT_LEAST_ONCE)",
          "114:             time.sleep(1)",
          "115:             publish_count += 1",
          "117:     # Wait for all messages to be received.",
          "118:     # This waits forever if count was set to 0.",
          "119:     if args.count != 0 and not received_all_event.is_set():",
          "120:         print(\"Waiting for all messages to be received...\")",
          "122:     received_all_event.wait()",
          "123:     print(\"{} message(s) received.\".format(received_count))",
          "125:     # Disconnect",
          "126:     print(\"Disconnecting...\")",
          "127:     disconnect_future = mqtt_connection.disconnect()",
          "128:     disconnect_future.result()",
          "129:     print(\"Disconnected!\")",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         \"Operating System :: OS Independent\",",
          "41:     ],",
          "42:     install_requires=[",
          "44:     ],",
          "45:     python_requires='>=3.6',",
          "46: )",
          "",
          "[Removed Lines]",
          "43:         'awscrt==0.13.5',",
          "",
          "[Added Lines]",
          "43:         'awscrt==0.13.6',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4c66229b972519ca083517afb1cfa7a6788a4019",
      "candidate_info": {
        "commit_hash": "4c66229b972519ca083517afb1cfa7a6788a4019",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/4c66229b972519ca083517afb1cfa7a6788a4019",
        "files": [
          "NOTICE",
          "README.md",
          "awsiot/__init__.py",
          "awsiot/greengrass_discovery.py",
          "builder.json",
          "docsrc/conf.py",
          "docsrc/index.rst",
          "samples/README.md",
          "samples/fleetprovisioning.py",
          "samples/jobs.py",
          "samples/pubsub.py",
          "samples/shadow.py",
          "setup.py",
          "test/test_samples.py",
          "utils/parse_cert_set_result.py"
        ],
        "message": "Remove support for python 2 (#105)\n\nPython 2's end-of-life date was Jan 1 2020.",
        "before_after_code_files": [
          "awsiot/__init__.py||awsiot/__init__.py",
          "awsiot/greengrass_discovery.py||awsiot/greengrass_discovery.py",
          "docsrc/conf.py||docsrc/conf.py",
          "samples/fleetprovisioning.py||samples/fleetprovisioning.py",
          "samples/jobs.py||samples/jobs.py",
          "samples/pubsub.py||samples/pubsub.py",
          "samples/shadow.py||samples/shadow.py",
          "setup.py||setup.py",
          "test/test_samples.py||test/test_samples.py",
          "utils/parse_cert_set_result.py||utils/parse_cert_set_result.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "awsiot/__init__.py||awsiot/__init__.py": [
          "File: awsiot/__init__.py -> awsiot/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: PayloadObj = Dict[str, Any]",
          "20: PayloadToClassFn = Callable[[PayloadObj], T]",
          "23:     \"\"\"",
          "24:     Base class for an AWS MQTT Service Client",
          "25:     \"\"\"",
          "",
          "[Removed Lines]",
          "22: class MqttServiceClient(object):",
          "",
          "[Added Lines]",
          "22: class MqttServiceClient:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:         return future, topic",
          "157:     \"\"\"",
          "158:     Base for input/output classes generated from an AWS service model.",
          "159:     \"\"\"",
          "",
          "[Removed Lines]",
          "156: class ModeledClass(object):",
          "",
          "[Added Lines]",
          "156: class ModeledClass:",
          "",
          "---------------"
        ],
        "awsiot/greengrass_discovery.py||awsiot/greengrass_discovery.py": [
          "File: awsiot/greengrass_discovery.py -> awsiot/greengrass_discovery.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: from concurrent.futures import Future",
          "8: import json",
          "11:     __slots__ = ['_bootstrap', '_tls_context', '_socket_options', '_region', '_tls_connection_options', '_gg_server_name', 'gg_url', 'port']",
          "13:     def __init__(self, bootstrap, socket_options, tls_context, region):",
          "",
          "[Removed Lines]",
          "10: class DiscoveryClient(object):",
          "",
          "[Added Lines]",
          "10: class DiscoveryClient:",
          "",
          "---------------"
        ],
        "docsrc/conf.py||docsrc/conf.py": [
          "File: docsrc/conf.py -> docsrc/conf.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: # -- Project information -----------------------------------------------------",
          "23: copyright = '%s, Amazon Web Services, Inc' % datetime.now().year",
          "24: author = 'Amazon Web Services, Inc'",
          "",
          "[Removed Lines]",
          "22: project = 'AWS IoT Device SDK Python v2'",
          "",
          "[Added Lines]",
          "22: project = 'AWS IoT Device SDK v2 for Python'",
          "",
          "---------------"
        ],
        "samples/fleetprovisioning.py||samples/fleetprovisioning.py": [
          "File: samples/fleetprovisioning.py -> samples/fleetprovisioning.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "6: import argparse",
          "7: from awscrt import auth, http, io, mqtt",
          "8: from awsiot import iotidentity",
          "",
          "[Removed Lines]",
          "4: from __future__ import absolute_import",
          "5: from __future__ import print_function",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: createCertificateFromCsrResponse = None",
          "64: registerThingResponse = None",
          "67:     def __init__(self):",
          "68:         self.lock = threading.Lock()",
          "69:         self.disconnect_called = False",
          "",
          "[Removed Lines]",
          "66: class LockedData(object):",
          "",
          "[Added Lines]",
          "64: class LockedData:",
          "",
          "---------------"
        ],
        "samples/jobs.py||samples/jobs.py": [
          "File: samples/jobs.py -> samples/jobs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "6: import argparse",
          "7: from awscrt import auth, http, io, mqtt",
          "8: from awsiot import iotjobs",
          "",
          "[Removed Lines]",
          "4: from __future__ import absolute_import",
          "5: from __future__ import print_function",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64: jobs_client = None",
          "65: thing_name = \"\"",
          "68:     def __init__(self):",
          "69:         self.lock = threading.Lock()",
          "70:         self.disconnect_called = False",
          "",
          "[Removed Lines]",
          "67: class LockedData(object):",
          "",
          "[Added Lines]",
          "65: class LockedData:",
          "",
          "---------------"
        ],
        "samples/pubsub.py||samples/pubsub.py": [
          "File: samples/pubsub.py -> samples/pubsub.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "6: import argparse",
          "7: from awscrt import io, mqtt, auth, http",
          "8: from awsiot import mqtt_connection_builder",
          "",
          "[Removed Lines]",
          "4: from __future__ import absolute_import",
          "5: from __future__ import print_function",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "samples/shadow.py||samples/shadow.py": [
          "File: samples/shadow.py -> samples/shadow.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "6: import argparse",
          "7: from awscrt import auth, io, mqtt, http",
          "8: from awsiot import iotshadow",
          "",
          "[Removed Lines]",
          "4: from __future__ import absolute_import",
          "5: from __future__ import print_function",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65: SHADOW_VALUE_DEFAULT = \"off\"",
          "68:     def __init__(self):",
          "69:         self.lock = threading.Lock()",
          "70:         self.shadow_value = None",
          "",
          "[Removed Lines]",
          "67: class LockedData(object):",
          "",
          "[Added Lines]",
          "65: class LockedData:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "207:     while True:",
          "208:         try:",
          "209:             # Read user input",
          "215:             # If user wants to quit sample, then quit.",
          "216:             # Otherwise change the shadow value.",
          "",
          "[Removed Lines]",
          "210:             try:",
          "211:                 new_value = raw_input() # python 2 only",
          "212:             except NameError:",
          "213:                 new_value = input() # python 3 only",
          "",
          "[Added Lines]",
          "208:             new_value = input()",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:     description='AWS IoT SDK based on the AWS Common Runtime',",
          "12:     author='AWS SDK Common Runtime Team',",
          "13:     url='https://github.com/aws/aws-iot-device-sdk-python-v2',",
          "15:     install_requires=[",
          "19:     ],",
          "21: )",
          "",
          "[Removed Lines]",
          "14:     packages = ['awsiot'],",
          "16:         'awscrt==0.8.0',",
          "17:         'futures;python_version<\"3.2\"',",
          "18:         'typing;python_version<\"3.5\"',",
          "20:     python_requires='>=2.7',",
          "",
          "[Added Lines]",
          "14:     packages=['awsiot'],",
          "16:         'awscrt==0.9.0',",
          "18:     python_requires='>=3.5',",
          "",
          "---------------"
        ],
        "test/test_samples.py||test/test_samples.py": [
          "File: test/test_samples.py -> test/test_samples.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "4: import awsiot",
          "5: import boto3",
          "6: import botocore.exceptions",
          "",
          "[Removed Lines]",
          "3: from __future__ import absolute_import, print_function",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:         # boto3 caches the HTTPS connection for the API calls, which appears to the unit test",
          "45:         # framework as a leak, so ignore it, that's not what we're testing here",
          "51:         try:",
          "52:             secrets = boto3.client('secretsmanager')",
          "",
          "[Removed Lines]",
          "46:         try:",
          "47:             warnings.simplefilter('ignore', ResourceWarning)",
          "48:         except NameError:  # Python 2 has no ResourceWarning",
          "49:             pass",
          "",
          "[Added Lines]",
          "45:         warnings.simplefilter('ignore', ResourceWarning)",
          "",
          "---------------"
        ],
        "utils/parse_cert_set_result.py||utils/parse_cert_set_result.py": [
          "File: utils/parse_cert_set_result.py -> utils/parse_cert_set_result.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: Example usage:",
          "15: \"\"\"",
          "",
          "[Removed Lines]",
          "13: aws iot create-provisioning-claim --template-name <TemplateName> | python parse_cert_set_result.py --path <PathToOutputtedCerts> --filename <Filename>",
          "",
          "[Added Lines]",
          "13: aws iot create-provisioning-claim --template-name <TemplateName> | python3 parse_cert_set_result.py --path <PathToOutputtedCerts> --filename <Filename>",
          "",
          "---------------"
        ]
      }
    }
  ]
}