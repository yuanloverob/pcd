{
  "cve_id": "CVE-2018-9856",
  "cve_desc": "Kotti before 1.3.2 and 2.x before 2.0.0b2 has CSRF in the local roles implementation, as demonstrated by triggering a permission change via a /admin-document/@@share request.",
  "repo": "Kotti/Kotti",
  "patch_hash": "69d3c8a5d7203ddaec5ced5901acf87baddd76be",
  "patch_info": {
    "commit_hash": "69d3c8a5d7203ddaec5ced5901acf87baddd76be",
    "repo": "Kotti/Kotti",
    "commit_url": "https://github.com/Kotti/Kotti/commit/69d3c8a5d7203ddaec5ced5901acf87baddd76be",
    "files": [
      "kotti/templates/edit/share.pt",
      "kotti/templates/login.pt",
      "kotti/tests/__init__.py",
      "kotti/tests/test_node_views.py",
      "kotti/views/users.py",
      "setup.py"
    ],
    "message": "Backport fix for #551 from master.",
    "before_after_code_files": [
      "kotti/templates/edit/share.pt||kotti/templates/edit/share.pt",
      "kotti/templates/login.pt||kotti/templates/login.pt",
      "kotti/tests/__init__.py||kotti/tests/__init__.py",
      "kotti/tests/test_node_views.py||kotti/tests/test_node_views.py",
      "kotti/views/users.py||kotti/views/users.py",
      "setup.py||setup.py"
    ]
  },
  "patch_diff": {
    "kotti/templates/edit/share.pt||kotti/templates/edit/share.pt": [
      "File: kotti/templates/edit/share.pt -> kotti/templates/edit/share.pt",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:     <form action=\"${request.url}\" method=\"post\" tal:condition=\"entries\"",
      "41:           id=\"form-share-assign\">",
      "43:       <fieldset>",
      "44:         <legend i18n:translate=\"\">Assign local roles</legend>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "42:       <input type=\"hidden\" name=\"csrf_token\" value=\"${csrf_token}\">",
      "",
      "---------------"
    ],
    "kotti/templates/login.pt||kotti/templates/login.pt": [
      "File: kotti/templates/login.pt -> kotti/templates/login.pt",
      "--- Hunk 1 ---",
      "[Context before]",
      "17:           </div>",
      "18:           <div class=\"panel-body\">",
      "19:             <div class=\"control-group\">",
      "21:                      i18n:translate=\"\">Username or email</label>",
      "23:                      class=\"form-control\" value=\"${login}\" />",
      "24:             </div>",
      "25:             <div class=\"control-group\">",
      "",
      "[Removed Lines]",
      "20:               <label class=\"control-label\" for=\"form-login\"",
      "22:               <input type=\"text\" name=\"login\" id=\"form-login\"",
      "",
      "[Added Lines]",
      "20:               <label class=\"control-label\" for=\"form-login-login\"",
      "22:               <input type=\"text\" name=\"login\" id=\"form-login-login\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "55:               below to receive an email with a link to reset your password.",
      "56:             </div>",
      "57:             <div class=\"control-group\">",
      "59:                      i18n:translate=\"\">Username or email</label>",
      "61:                      class=\"form-control\" value=\"${login}\" />",
      "62:             </div>",
      "63:           </div>",
      "",
      "[Removed Lines]",
      "58:               <label class=\"control-label\" for=\"form-login\"",
      "60:               <input type=\"text\" name=\"login\" id=\"form-login\"",
      "",
      "[Added Lines]",
      "58:               <label class=\"control-label\" for=\"form-forgot-password-login\"",
      "60:               <input type=\"text\" name=\"login\" id=\"form-forgot-password-login\"",
      "",
      "---------------"
    ],
    "kotti/tests/__init__.py||kotti/tests/__init__.py": [
      "File: kotti/tests/__init__.py -> kotti/tests/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "158:     return connection",
      "162: def content(connection, settings):",
      "163:     \"\"\" sets up some default content using Kotti's testing populator.",
      "164:     \"\"\"",
      "166:     from kotti import metadata",
      "167:     from kotti.resources import get_root",
      "168:     metadata.drop_all(connection.engine)",
      "169:     metadata.create_all(connection.engine)",
      "170:     # to create the default content with the correct workflow state",
      "171:     # the workflow must be initialized first;  please note that these",
      "172:     # settings won't persist, though;  use the `workflow` fixture if needed",
      "",
      "[Removed Lines]",
      "161: @fixture(scope='session')",
      "165:     from transaction import commit",
      "",
      "[Added Lines]",
      "161: @fixture",
      "165:     import transaction",
      "166:     from kotti import DBSession",
      "170:     if connection.in_transaction():",
      "171:         transaction.abort()",
      "172:     DBSession().close()",
      "175:     transaction.begin()",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "181:     # 'event' and therefore the event handlers aren't fired for root",
      "182:     # otherwise:",
      "183:     get_root().path = u'/'",
      "187: @fixture",
      "",
      "[Removed Lines]",
      "184:     commit()",
      "",
      "[Added Lines]",
      "192:     transaction.commit()",
      "",
      "---------------"
    ],
    "kotti/tests/test_node_views.py||kotti/tests/test_node_views.py": [
      "File: kotti/tests/test_node_views.py -> kotti/tests/test_node_views.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: from kotti.testing import DummyRequest",
      "5: from pyramid.exceptions import Forbidden",
      "6: from pytest import raises",
      "7: from webob.multidict import MultiDict",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: from pyramid.httpexceptions import HTTPBadRequest",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "431:         request = DummyRequest()",
      "433:         request.params['apply'] = u''",
      "434:         share_node(root, request)",
      "435:         assert (request.session.pop_flash('info') == [u'No changes were made.'])",
      "436:         assert list_groups('bob', root) == []",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "435:         request.params['csrf_token'] = request.session.get_csrf_token()",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "459:             set(list_groups('bob', root)) ==",
      "460:             {'role:owner', 'role:editor', 'role:special'}",
      "461:             )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "465:     def test_csrf(self, extra_principals, root, dummy_request):",
      "466:         \"\"\" Test if a CSRF token is present and checked on submission \"\"\"",
      "467:         from kotti.views.users import share_node",
      "469:         result = share_node(root, dummy_request)",
      "470:         assert 'csrf_token' in result",
      "472:         dummy_request.params['apply'] = u''",
      "474:         with raises(HTTPBadRequest):",
      "475:             share_node(root, dummy_request)",
      "477:         dummy_request.params['csrf_token'] = dummy_request.session.get_csrf_token()  # noqa",
      "478:         result = share_node(root, dummy_request)",
      "479:         assert result['csrf_token'] == dummy_request.session.get_csrf_token()",
      "",
      "---------------"
    ],
    "kotti/views/users.py||kotti/views/users.py": [
      "File: kotti/views/users.py -> kotti/views/users.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: from deform.widget import CheckedPasswordWidget",
      "15: from deform.widget import SequenceWidget",
      "16: from pyramid.exceptions import Forbidden",
      "18: from pyramid.view import view_config",
      "19: from pyramid_deform import FormView",
      "20: from six import string_types",
      "",
      "[Removed Lines]",
      "17: from pyramid.httpexceptions import HTTPFound",
      "",
      "[Added Lines]",
      "17: from pyramid.httpexceptions import HTTPFound, HTTPBadRequest",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "114:              renderer='kotti:templates/edit/share.pt')",
      "115: def share_node(context, request):",
      "116:     # Allow roles_form_handler to do processing on 'apply':",
      "117:     changed = roles_form_handler(",
      "118:         context, request, SHARING_ROLES, list_groups_raw)",
      "119:     if changed:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "117:     if 'apply' in request.POST:",
      "118:         if request.params.get('csrf_token') != request.session.get_csrf_token():",
      "119:             raise HTTPBadRequest('Invalid CSRF token')",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "137:     return {",
      "138:         'entries': entries,",
      "139:         'available_roles': available_roles,",
      "140:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "143:         'csrf_token': request.session.get_csrf_token()",
      "",
      "---------------"
    ],
    "setup.py||setup.py": [
      "File: setup.py -> setup.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: from setuptools import setup",
      "11: description = \"A high-level, Pythonic web application framework based on \" \\",
      "12:               \"Pyramid and SQLAlchemy.  It includes an extensible Content \" \\",
      "13:               \"Management System called the Kotti CMS.\"",
      "",
      "[Removed Lines]",
      "10: version = '1.3.1'",
      "",
      "[Added Lines]",
      "10: version = '1.3.2.dev0'",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31:     'filedepot',",
      "32:     'formencode',",
      "33:     'html2text',",
      "34:     'js.angular',",
      "35:     'js.bootstrap>=3.0.0',",
      "36:     'js.deform>=2.0a2-2',",
      "37:     'js.fineuploader',",
      "38:     'js.html5shiv',",
      "40:     'js.jquery_form',",
      "41:     'js.jquery_tablednd',",
      "42:     'js.jquery_timepicker_addon',",
      "",
      "[Removed Lines]",
      "39:     'js.jquery',",
      "",
      "[Added Lines]",
      "34:     'iso8601<=0.1.11',",
      "40:     'js.jquery<2.0.0',",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "00b56681fa9fb8587869a5e00dcd56503081d3b9",
      "candidate_info": {
        "commit_hash": "00b56681fa9fb8587869a5e00dcd56503081d3b9",
        "repo": "Kotti/Kotti",
        "commit_url": "https://github.com/Kotti/Kotti/commit/00b56681fa9fb8587869a5e00dcd56503081d3b9",
        "files": [
          "kotti/templates/edit/share.pt",
          "kotti/templates/login.pt",
          "kotti/tests/test_node_views.py",
          "kotti/views/users.py"
        ],
        "message": "Fix #551.",
        "before_after_code_files": [
          "kotti/templates/edit/share.pt||kotti/templates/edit/share.pt",
          "kotti/templates/login.pt||kotti/templates/login.pt",
          "kotti/tests/test_node_views.py||kotti/tests/test_node_views.py",
          "kotti/views/users.py||kotti/views/users.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "kotti/templates/edit/share.pt||kotti/templates/edit/share.pt",
            "kotti/templates/login.pt||kotti/templates/login.pt",
            "kotti/tests/test_node_views.py||kotti/tests/test_node_views.py",
            "kotti/views/users.py||kotti/views/users.py"
          ],
          "candidate": [
            "kotti/templates/edit/share.pt||kotti/templates/edit/share.pt",
            "kotti/templates/login.pt||kotti/templates/login.pt",
            "kotti/tests/test_node_views.py||kotti/tests/test_node_views.py",
            "kotti/views/users.py||kotti/views/users.py"
          ]
        }
      },
      "candidate_diff": {
        "kotti/templates/edit/share.pt||kotti/templates/edit/share.pt": [
          "File: kotti/templates/edit/share.pt -> kotti/templates/edit/share.pt",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     <form action=\"${request.url}\" method=\"post\" tal:condition=\"entries\"",
          "41:           id=\"form-share-assign\">",
          "43:       <fieldset>",
          "44:         <legend i18n:translate=\"\">Assign local roles</legend>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:       <input type=\"hidden\" name=\"csrf_token\" value=\"${csrf_token}\">",
          "",
          "---------------"
        ],
        "kotti/templates/login.pt||kotti/templates/login.pt": [
          "File: kotti/templates/login.pt -> kotti/templates/login.pt",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:           </div>",
          "18:           <div class=\"panel-body\">",
          "19:             <div class=\"control-group\">",
          "21:                      i18n:translate=\"\">Username or email</label>",
          "23:                      class=\"form-control\" value=\"${login}\" />",
          "24:             </div>",
          "25:             <div class=\"control-group\">",
          "",
          "[Removed Lines]",
          "20:               <label class=\"control-label\" for=\"form-login\"",
          "22:               <input type=\"text\" name=\"login\" id=\"form-login\"",
          "",
          "[Added Lines]",
          "20:               <label class=\"control-label\" for=\"form-login-login\"",
          "22:               <input type=\"text\" name=\"login\" id=\"form-login-login\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:               below to receive an email with a link to reset your password.",
          "56:             </div>",
          "57:             <div class=\"control-group\">",
          "59:                      i18n:translate=\"\">Username or email</label>",
          "61:                      class=\"form-control\" value=\"${login}\" />",
          "62:             </div>",
          "63:           </div>",
          "",
          "[Removed Lines]",
          "58:               <label class=\"control-label\" for=\"form-login\"",
          "60:               <input type=\"text\" name=\"login\" id=\"form-login\"",
          "",
          "[Added Lines]",
          "58:               <label class=\"control-label\" for=\"form-forgot-password-login\"",
          "60:               <input type=\"text\" name=\"login\" id=\"form-forgot-password-login\"",
          "",
          "---------------"
        ],
        "kotti/tests/test_node_views.py||kotti/tests/test_node_views.py": [
          "File: kotti/tests/test_node_views.py -> kotti/tests/test_node_views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from pyramid.exceptions import Forbidden",
          "2: from pytest import raises",
          "3: from webob.multidict import MultiDict",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: from pyramid.httpexceptions import HTTPBadRequest",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "432:         request = DummyRequest()",
          "434:         request.params['apply'] = ''",
          "435:         share_node(root, request)",
          "436:         assert (request.session.pop_flash('info') == ['No changes were made.'])",
          "437:         assert list_groups('bob', root) == []",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436:         request.params['csrf_token'] = request.session.get_csrf_token()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "460:             set(list_groups('bob', root)) ==",
          "461:             {'role:owner', 'role:editor', 'role:special'}",
          "462:             )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466:     def test_csrf(self, extra_principals, root, dummy_request):",
          "467:         \"\"\" Test if a CSRF token is present and checked on submission \"\"\"",
          "468:         from kotti.views.users import share_node",
          "470:         result = share_node(root, dummy_request)",
          "471:         assert 'csrf_token' in result",
          "473:         dummy_request.params['apply'] = ''",
          "475:         with raises(HTTPBadRequest):",
          "476:             share_node(root, dummy_request)",
          "478:         dummy_request.params['csrf_token'] = dummy_request.session.get_csrf_token()  # noqa",
          "479:         result = share_node(root, dummy_request)",
          "480:         assert result['csrf_token'] == dummy_request.session.get_csrf_token()",
          "",
          "---------------"
        ],
        "kotti/views/users.py||kotti/views/users.py": [
          "File: kotti/views/users.py -> kotti/views/users.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: from deform.widget import CheckedPasswordWidget",
          "10: from deform.widget import SequenceWidget",
          "11: from pyramid.exceptions import Forbidden",
          "13: from pyramid.view import view_config",
          "14: from pyramid_deform import FormView",
          "15: from six import string_types",
          "",
          "[Removed Lines]",
          "12: from pyramid.httpexceptions import HTTPFound",
          "",
          "[Added Lines]",
          "12: from pyramid.httpexceptions import HTTPFound, HTTPBadRequest",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:              renderer='kotti:templates/edit/share.pt')",
          "110: def share_node(context, request):",
          "111:     # Allow roles_form_handler to do processing on 'apply':",
          "112:     changed = roles_form_handler(",
          "113:         context, request, SHARING_ROLES, list_groups_raw)",
          "114:     if changed:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:     if 'apply' in request.POST:",
          "113:         if request.params.get('csrf_token') != request.session.get_csrf_token():",
          "114:             raise HTTPBadRequest('Invalid CSRF token')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:     return {",
          "133:         'entries': entries,",
          "134:         'available_roles': available_roles,",
          "135:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:         'csrf_token': request.session.get_csrf_token()",
          "",
          "---------------"
        ]
      }
    }
  ]
}