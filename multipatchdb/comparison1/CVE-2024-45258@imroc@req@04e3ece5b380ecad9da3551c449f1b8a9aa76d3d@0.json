{
  "cve_id": "CVE-2024-45258",
  "cve_desc": "The req package before 3.43.4 for Go may send an unintended request when a malformed URL is provided, because cleanHost in http.go intentionally uses a \"garbage in, garbage out\" design.",
  "repo": "imroc/req",
  "patch_hash": "04e3ece5b380ecad9da3551c449f1b8a9aa76d3d",
  "patch_info": {
    "commit_hash": "04e3ece5b380ecad9da3551c449f1b8a9aa76d3d",
    "repo": "imroc/req",
    "commit_url": "https://github.com/imroc/req/commit/04e3ece5b380ecad9da3551c449f1b8a9aa76d3d",
    "files": [
      "http.go",
      "transport.go"
    ],
    "message": "prevent successful requests from invalid host",
    "before_after_code_files": [
      "http.go||http.go",
      "transport.go||transport.go"
    ]
  },
  "patch_diff": {
    "http.go||http.go": [
      "File: http.go -> http.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import (",
      "4:  \"encoding/base64\"",
      "5:  \"fmt\"",
      "9:  \"io\"",
      "11:  \"net/http\"",
      "12:  \"net/textproto\"",
      "13:  \"strings\"",
      "14: )",
      "",
      "[Removed Lines]",
      "6:  \"github.com/imroc/req/v3/internal/ascii\"",
      "7:  \"golang.org/x/net/http/httpguts\"",
      "8:  \"golang.org/x/net/idna\"",
      "10:  \"net\"",
      "",
      "[Added Lines]",
      "11:  \"github.com/imroc/req/v3/internal/ascii\"",
      "12:  \"golang.org/x/net/http/httpguts\"",
      "13:  \"golang.org/x/net/idna\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "165:  return idna.Lookup.ToASCII(v)",
      "166: }",
      "202: func removeZone(host string) string {",
      "",
      "[Removed Lines]",
      "181: func cleanHost(in string) string {",
      "182:  if i := strings.IndexAny(in, \" /\"); i != -1 {",
      "183:   in = in[:i]",
      "184:  }",
      "185:  host, port, err := net.SplitHostPort(in)",
      "186:  if err != nil { // input was just a host",
      "187:   a, err := idnaASCII(in)",
      "188:   if err != nil {",
      "189:    return in // garbage in, garbage out",
      "190:   }",
      "191:   return a",
      "192:  }",
      "193:  a, err := idnaASCII(host)",
      "194:  if err != nil {",
      "195:   return in // garbage in, garbage out",
      "196:  }",
      "197:  return net.JoinHostPort(a, port)",
      "198: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "transport.go||transport.go": [
      "File: transport.go -> transport.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "2990:  if host == \"\" {",
      "2991:   if r.URL == nil {",
      "2992:    return errMissingHost",
      "2993:   }",
      "2995:  }",
      "",
      "[Removed Lines]",
      "2989:  host := cleanHost(r.Host)",
      "2994:   host = cleanHost(r.URL.Host)",
      "",
      "[Added Lines]",
      "2989:  host := r.Host",
      "2994:   host = r.URL.Host",
      "2995:  }",
      "2996:  host, err = httpguts.PunycodeHostPort(host)",
      "2997:  if err != nil {",
      "2998:   return err",
      "2999:  }",
      "3006:  if !httpguts.ValidHostHeader(host) {",
      "3019:   if !usingProxy {",
      "3020:    host = \"\"",
      "3021:   } else {",
      "3022:    return errors.New(\"http: invalid Host header\")",
      "3023:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2b406026f4aa980175ecb08bc540cf0e685467c1",
      "candidate_info": {
        "commit_hash": "2b406026f4aa980175ecb08bc540cf0e685467c1",
        "repo": "imroc/req",
        "commit_url": "https://github.com/imroc/req/commit/2b406026f4aa980175ecb08bc540cf0e685467c1",
        "files": [
          "http.go",
          "transport.go"
        ],
        "message": "prevent successful requests from invalid host",
        "before_after_code_files": [
          "http.go||http.go",
          "transport.go||transport.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "http.go||http.go",
            "transport.go||transport.go"
          ],
          "candidate": [
            "http.go||http.go",
            "transport.go||transport.go"
          ]
        }
      },
      "candidate_diff": {
        "http.go||http.go": [
          "File: http.go -> http.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"encoding/base64\"",
          "5:  \"fmt\"",
          "9:  \"io\"",
          "11:  \"net/http\"",
          "12:  \"net/textproto\"",
          "13:  \"strings\"",
          "14: )",
          "",
          "[Removed Lines]",
          "6:  \"github.com/imroc/req/v3/internal/ascii\"",
          "7:  \"golang.org/x/net/http/httpguts\"",
          "8:  \"golang.org/x/net/idna\"",
          "10:  \"net\"",
          "",
          "[Added Lines]",
          "11:  \"github.com/imroc/req/v3/internal/ascii\"",
          "12:  \"golang.org/x/net/http/httpguts\"",
          "13:  \"golang.org/x/net/idna\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:  return idna.Lookup.ToASCII(v)",
          "166: }",
          "202: func removeZone(host string) string {",
          "",
          "[Removed Lines]",
          "181: func cleanHost(in string) string {",
          "182:  if i := strings.IndexAny(in, \" /\"); i != -1 {",
          "183:   in = in[:i]",
          "184:  }",
          "185:  host, port, err := net.SplitHostPort(in)",
          "186:  if err != nil { // input was just a host",
          "187:   a, err := idnaASCII(in)",
          "188:   if err != nil {",
          "189:    return in // garbage in, garbage out",
          "190:   }",
          "191:   return a",
          "192:  }",
          "193:  a, err := idnaASCII(host)",
          "194:  if err != nil {",
          "195:   return in // garbage in, garbage out",
          "196:  }",
          "197:  return net.JoinHostPort(a, port)",
          "198: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "transport.go||transport.go": [
          "File: transport.go -> transport.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2990:  if host == \"\" {",
          "2991:   if r.URL == nil {",
          "2992:    return errMissingHost",
          "2993:   }",
          "2995:  }",
          "",
          "[Removed Lines]",
          "2989:  host := cleanHost(r.Host)",
          "2994:   host = cleanHost(r.URL.Host)",
          "",
          "[Added Lines]",
          "2989:  host := r.Host",
          "2994:   host = r.URL.Host",
          "2995:  }",
          "2996:  host, err = httpguts.PunycodeHostPort(host)",
          "2997:  if err != nil {",
          "2998:   return err",
          "2999:  }",
          "3006:  if !httpguts.ValidHostHeader(host) {",
          "3019:   if !usingProxy {",
          "3020:    host = \"\"",
          "3021:   } else {",
          "3022:    return errors.New(\"http: invalid Host header\")",
          "3023:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04e3ece5b380ecad9da3551c449f1b8a9aa76d3d",
      "candidate_info": {
        "commit_hash": "04e3ece5b380ecad9da3551c449f1b8a9aa76d3d",
        "repo": "imroc/req",
        "commit_url": "https://github.com/imroc/req/commit/04e3ece5b380ecad9da3551c449f1b8a9aa76d3d",
        "files": [
          "http.go",
          "transport.go"
        ],
        "message": "prevent successful requests from invalid host",
        "before_after_code_files": [
          "http.go||http.go",
          "transport.go||transport.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "http.go||http.go",
            "transport.go||transport.go"
          ],
          "candidate": [
            "http.go||http.go",
            "transport.go||transport.go"
          ]
        }
      },
      "candidate_diff": {
        "http.go||http.go": [
          "File: http.go -> http.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"encoding/base64\"",
          "5:  \"fmt\"",
          "9:  \"io\"",
          "11:  \"net/http\"",
          "12:  \"net/textproto\"",
          "13:  \"strings\"",
          "14: )",
          "",
          "[Removed Lines]",
          "6:  \"github.com/imroc/req/v3/internal/ascii\"",
          "7:  \"golang.org/x/net/http/httpguts\"",
          "8:  \"golang.org/x/net/idna\"",
          "10:  \"net\"",
          "",
          "[Added Lines]",
          "11:  \"github.com/imroc/req/v3/internal/ascii\"",
          "12:  \"golang.org/x/net/http/httpguts\"",
          "13:  \"golang.org/x/net/idna\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:  return idna.Lookup.ToASCII(v)",
          "166: }",
          "202: func removeZone(host string) string {",
          "",
          "[Removed Lines]",
          "181: func cleanHost(in string) string {",
          "182:  if i := strings.IndexAny(in, \" /\"); i != -1 {",
          "183:   in = in[:i]",
          "184:  }",
          "185:  host, port, err := net.SplitHostPort(in)",
          "186:  if err != nil { // input was just a host",
          "187:   a, err := idnaASCII(in)",
          "188:   if err != nil {",
          "189:    return in // garbage in, garbage out",
          "190:   }",
          "191:   return a",
          "192:  }",
          "193:  a, err := idnaASCII(host)",
          "194:  if err != nil {",
          "195:   return in // garbage in, garbage out",
          "196:  }",
          "197:  return net.JoinHostPort(a, port)",
          "198: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "transport.go||transport.go": [
          "File: transport.go -> transport.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2990:  if host == \"\" {",
          "2991:   if r.URL == nil {",
          "2992:    return errMissingHost",
          "2993:   }",
          "2995:  }",
          "",
          "[Removed Lines]",
          "2989:  host := cleanHost(r.Host)",
          "2994:   host = cleanHost(r.URL.Host)",
          "",
          "[Added Lines]",
          "2989:  host := r.Host",
          "2994:   host = r.URL.Host",
          "2995:  }",
          "2996:  host, err = httpguts.PunycodeHostPort(host)",
          "2997:  if err != nil {",
          "2998:   return err",
          "2999:  }",
          "3006:  if !httpguts.ValidHostHeader(host) {",
          "3019:   if !usingProxy {",
          "3020:    host = \"\"",
          "3021:   } else {",
          "3022:    return errors.New(\"http: invalid Host header\")",
          "3023:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}