{
  "cve_id": "CVE-2024-12678",
  "cve_desc": "Nomad Community and Nomad Enterprise (\"Nomad\") allocations are vulnerable to privilege escalation within a namespace through unredacted workload identity tokens. This vulnerability, identified as CVE-2024-12678, is fixed in Nomad Community Edition 1.9.4 and Nomad Enterprise 1.9.4, 1.8.8, and 1.7.16.",
  "repo": "hashicorp/nomad",
  "patch_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
  "patch_info": {
    "commit_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "files": [
      ".changelog/24683.txt",
      "command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go",
      "nomad/structs/structs.go"
    ],
    "message": "Backport of sec: fix alloc workload identity namespace permission into release/1.9.x (#24685)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
    "before_after_code_files": [
      "command/agent/node_endpoint.go||command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go",
      "nomad/structs/structs.go||nomad/structs/structs.go"
    ]
  },
  "patch_diff": {
    "command/agent/node_endpoint.go||command/agent/node_endpoint.go": [
      "File: command/agent/node_endpoint.go -> command/agent/node_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   out.Allocs = make([]*structs.Allocation, 0)",
      "106:  }",
      "107:  for _, alloc := range out.Allocs {",
      "108:   alloc.SetEventDisplayMessages()",
      "109:  }",
      "110:  return out.Allocs, nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   alloc = alloc.Sanitize()",
      "",
      "---------------"
    ],
    "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go": [
      "File: nomad/alloc_endpoint.go -> nomad/alloc_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    }",
      "176:    if out != nil {",
      "178:     if !aclObj.AllowClientOp() && !allowNsOp(aclObj, out.Namespace) {",
      "179:      return structs.NewErrUnknownAllocation(args.AllocID)",
      "",
      "[Removed Lines]",
      "175:    reply.Alloc = out",
      "",
      "[Added Lines]",
      "176:     out = out.Sanitize()",
      "177:     reply.Alloc = out",
      "",
      "---------------"
    ],
    "nomad/structs/structs.go||nomad/structs/structs.go": [
      "File: nomad/structs/structs.go -> nomad/structs/structs.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11199:  return a.ID",
      "11200: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11205: func (a *Allocation) Sanitize() *Allocation {",
      "11206:  if a == nil {",
      "11207:   return nil",
      "11208:  }",
      "11210:  if a.SignedIdentities == nil {",
      "11211:   return a",
      "11212:  }",
      "11214:  clean := a.Copy()",
      "11215:  clean.SignedIdentities = nil",
      "11216:  return clean",
      "11217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5defc85e344e7ad8c5564284f13c1db9e34027db",
      "candidate_info": {
        "commit_hash": "5defc85e344e7ad8c5564284f13c1db9e34027db",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/5defc85e344e7ad8c5564284f13c1db9e34027db",
        "files": [
          ".changelog/25310.txt",
          "command/asset/consul-wi-default-policy.hcl"
        ],
        "message": "cli: Add node_prefix read policy to Consul setup task policy (#25325)\n\nbackport of commit f94016816dfd5f37fcfef926d4a8236d0d96ba69\n\nCo-authored-by: James Rasell <jrasell@users.noreply.github.com>",
        "before_after_code_files": [
          "command/asset/consul-wi-default-policy.hcl||command/asset/consul-wi-default-policy.hcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "command/asset/consul-wi-default-policy.hcl||command/asset/consul-wi-default-policy.hcl": [
          "File: command/asset/consul-wi-default-policy.hcl -> command/asset/consul-wi-default-policy.hcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: service_prefix \"\" {",
          "2:   policy = \"read\"",
          "3: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: node_prefix \"\" {",
          "2:   policy = \"read\"",
          "3: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75276a311bca266d8b8409bc504084ae46f7fb2f",
      "candidate_info": {
        "commit_hash": "75276a311bca266d8b8409bc504084ae46f7fb2f",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/75276a311bca266d8b8409bc504084ae46f7fb2f",
        "files": [
          "client/allocrunner/checks_hook_test.go",
          "client/allocrunner/taskrunner/task_runner_test.go",
          "client/client_test.go",
          "client/consul/consul_test.go",
          "command/agent/alloc_endpoint_test.go",
          "command/agent/retry_join_test.go",
          "command/helpers_test.go",
          "go.mod",
          "nomad/leader_test.go"
        ],
        "message": "backport of commit 04db81951fd0f6b7cc543410585a4da0d70a354a (#25347)\n\nCo-authored-by: Daniel Bennett <dbennett@hashicorp.com>",
        "before_after_code_files": [
          "client/allocrunner/checks_hook_test.go||client/allocrunner/checks_hook_test.go",
          "client/allocrunner/taskrunner/task_runner_test.go||client/allocrunner/taskrunner/task_runner_test.go",
          "client/client_test.go||client/client_test.go",
          "client/consul/consul_test.go||client/consul/consul_test.go",
          "command/agent/alloc_endpoint_test.go||command/agent/alloc_endpoint_test.go",
          "command/agent/retry_join_test.go||command/agent/retry_join_test.go",
          "command/helpers_test.go||command/helpers_test.go",
          "go.mod||go.mod",
          "nomad/leader_test.go||nomad/leader_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/allocrunner/checks_hook_test.go||client/allocrunner/checks_hook_test.go": [
          "File: client/allocrunner/checks_hook_test.go -> client/allocrunner/checks_hook_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:     return true, nil",
          "207:    },",
          "208:    func(err error) {",
          "210:    },",
          "211:   )",
          "",
          "[Removed Lines]",
          "209:     t.Fatalf(err.Error())",
          "",
          "[Added Lines]",
          "209:     t.Fatal(err)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271:    return true, nil",
          "272:   },",
          "273:   func(err error) {",
          "275:   },",
          "276:  )",
          "",
          "[Removed Lines]",
          "274:    t.Fatalf(err.Error())",
          "",
          "[Added Lines]",
          "274:    t.Fatal(err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "308:    return true, nil",
          "309:   },",
          "310:   func(err error) {",
          "312:   },",
          "313:  )",
          "",
          "[Removed Lines]",
          "311:    t.Fatalf(err.Error())",
          "",
          "[Added Lines]",
          "311:    t.Fatal(err)",
          "",
          "---------------"
        ],
        "client/allocrunner/taskrunner/task_runner_test.go||client/allocrunner/taskrunner/task_runner_test.go": [
          "File: client/allocrunner/taskrunner/task_runner_test.go -> client/allocrunner/taskrunner/task_runner_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2153:  }, func(err error) {",
          "2154:   services, _ := consulAgent.ServicesWithFilterOpts(\"\", nil)",
          "2155:   for _, s := range services {",
          "2157:   }",
          "2158:   for _, c := range consulAgent.CheckRegs() {",
          "2160:   }",
          "2161:   require.NoError(t, err)",
          "2162:  })",
          "",
          "[Removed Lines]",
          "2156:    t.Logf(pretty.Sprint(\"Service: \", s))",
          "2159:    t.Logf(pretty.Sprint(\"Check:   \", c))",
          "",
          "[Added Lines]",
          "2156:    t.Log(pretty.Sprint(\"Service: \", s))",
          "2159:    t.Log(pretty.Sprint(\"Check:   \", c))",
          "",
          "---------------"
        ],
        "client/client_test.go||client/client_test.go": [
          "File: client/client_test.go -> client/client_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:    return true, nil",
          "353:   },",
          "354:   func(err error) {",
          "356:   },",
          "357:  )",
          "358: }",
          "",
          "[Removed Lines]",
          "355:    t.Fatalf(err.Error())",
          "",
          "[Added Lines]",
          "355:    t.Fatal(err)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "414:    return true, nil",
          "415:   },",
          "416:   func(err error) {",
          "418:   },",
          "419:  )",
          "420: }",
          "",
          "[Removed Lines]",
          "417:    t.Fatalf(err.Error())",
          "",
          "[Added Lines]",
          "417:    t.Fatal(err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1271:    return true, nil",
          "1272:   },",
          "1273:    func(err error) {",
          "1275:    },",
          "1276:   )",
          "1277:  }",
          "",
          "[Removed Lines]",
          "1274:     t.Fatalf(err.Error())",
          "",
          "[Added Lines]",
          "1274:     t.Fatal(err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1304:    return true, nil",
          "1305:   },",
          "1306:    func(err error) {",
          "1308:    },",
          "1309:   )",
          "1310:  }",
          "",
          "[Removed Lines]",
          "1307:     t.Fatalf(err.Error())",
          "",
          "[Added Lines]",
          "1307:     t.Fatal(err)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1357:    }",
          "1358:    return true, nil",
          "1359:   }, func(err error) {",
          "1361:   },",
          "1362:   )",
          "1363:  }",
          "",
          "[Removed Lines]",
          "1360:    t.Fatalf(err.Error())",
          "",
          "[Added Lines]",
          "1360:    t.Fatal(err)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1382:    }",
          "1383:    return true, nil",
          "1384:   }, func(err error) {",
          "1386:   },",
          "1387:   )",
          "1388:  }",
          "",
          "[Removed Lines]",
          "1385:    t.Fatalf(err.Error())",
          "",
          "[Added Lines]",
          "1385:    t.Fatal(err)",
          "",
          "---------------"
        ],
        "client/consul/consul_test.go||client/consul/consul_test.go": [
          "File: client/consul/consul_test.go -> client/consul/consul_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     SecretID: secretID,",
          "55:    }",
          "56:    buf, _ := json.Marshal(token)",
          "58:    return",
          "59:   }",
          "61:   w.WriteHeader(srv.errorCodeOnTokenSelf)",
          "63:  })",
          "65:  srv.httpSrv = httptest.NewServer(mux)",
          "",
          "[Removed Lines]",
          "57:    fmt.Fprintf(w, string(buf))",
          "62:   fmt.Fprintf(w, \"{}\")",
          "",
          "[Added Lines]",
          "57:    fmt.Fprint(w, string(buf))",
          "62:   fmt.Fprint(w, \"{}\")",
          "",
          "---------------"
        ],
        "command/agent/alloc_endpoint_test.go||command/agent/alloc_endpoint_test.go": [
          "File: command/agent/alloc_endpoint_test.go -> command/agent/alloc_endpoint_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import (",
          "7:  \"archive/tar\"",
          "8:  \"context\"",
          "9:  \"fmt\"",
          "10:  \"io\"",
          "11:  \"net/http\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:  \"errors\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "759:     return false, err",
          "760:    }",
          "763:   }, func(err error) {",
          "764:    t.Fatalf(\"client not running alloc: %v\", err)",
          "765:   })",
          "",
          "[Removed Lines]",
          "762:    return serverAlloc.ClientStatus == structs.AllocClientStatusRunning, fmt.Errorf(serverAlloc.ClientStatus)",
          "",
          "[Added Lines]",
          "763:    return serverAlloc.ClientStatus == structs.AllocClientStatusRunning, errors.New(serverAlloc.ClientStatus)",
          "",
          "---------------"
        ],
        "command/agent/retry_join_test.go||command/agent/retry_join_test.go": [
          "File: command/agent/retry_join_test.go -> command/agent/retry_join_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:   }",
          "93:   return true, nil",
          "94:  }, func(err error) {",
          "96:  })",
          "97: }",
          "",
          "[Removed Lines]",
          "95:   t.Fatalf(err.Error())",
          "",
          "[Added Lines]",
          "95:   t.Fatal(err)",
          "",
          "---------------"
        ],
        "command/helpers_test.go||command/helpers_test.go": [
          "File: command/helpers_test.go -> command/helpers_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "411:  }",
          "412:  if !reflect.DeepEqual(expectedApiJob, aj) {",
          "413:   for _, d := range pretty.Diff(expectedApiJob, aj) {",
          "415:   }",
          "417:  }",
          "418: }",
          "",
          "[Removed Lines]",
          "414:    t.Logf(d)",
          "416:   t.Fatalf(\"Unexpected file\")",
          "",
          "[Added Lines]",
          "414:    t.Log(d)",
          "416:   t.Fatal(\"Unexpected file\")",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: module github.com/hashicorp/nomad",
          "6: replace (",
          "",
          "[Removed Lines]",
          "3: go 1.23.6",
          "",
          "[Added Lines]",
          "3: go 1.24",
          "",
          "---------------"
        ],
        "nomad/leader_test.go||nomad/leader_test.go": [
          "File: nomad/leader_test.go -> nomad/leader_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:   leader.periodicDispatcher.l.Lock()",
          "370:   defer leader.periodicDispatcher.l.Unlock()",
          "371:   if _, tracked := leader.periodicDispatcher.tracked[tuplePeriodic]; !tracked {",
          "373:   }",
          "374:   if _, tracked := leader.periodicDispatcher.tracked[tupleNonPeriodic]; tracked {",
          "376:   }",
          "377:   if _, tracked := leader.periodicDispatcher.tracked[tupleParameterized]; tracked {",
          "379:   }",
          "380:   return true, nil",
          "381:  }, func(err error) {",
          "383:  })",
          "384: }",
          "",
          "[Removed Lines]",
          "372:    return false, fmt.Errorf(\"periodic job not tracked\")",
          "375:    return false, fmt.Errorf(\"non periodic job tracked\")",
          "378:    return false, fmt.Errorf(\"parameterized periodic job tracked\")",
          "382:   t.Fatalf(err.Error())",
          "",
          "[Added Lines]",
          "372:    return false, errors.New(\"periodic job not tracked\")",
          "375:    return false, errors.New(\"non periodic job tracked\")",
          "378:    return false, errors.New(\"parameterized periodic job tracked\")",
          "382:   t.Fatal(err)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a6da295c3ac5f52beba00a2d48ade5322675109b",
      "candidate_info": {
        "commit_hash": "a6da295c3ac5f52beba00a2d48ade5322675109b",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/a6da295c3ac5f52beba00a2d48ade5322675109b",
        "files": [
          ".changelog/24798.txt",
          "client/logmon/plugin.go"
        ],
        "message": "backport of commit 34a34e72334d7613b7a17e02a2f51a65a883dd02 (#24808)\n\nCo-authored-by: Michael Smithhisler <michael.smithhisler@hashicorp.com>",
        "before_after_code_files": [
          "client/logmon/plugin.go||client/logmon/plugin.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/logmon/plugin.go||client/logmon/plugin.go": [
          "File: client/logmon/plugin.go -> client/logmon/plugin.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:   return nil, nil, err",
          "60:  }",
          "62:  l := raw.(LogMon)",
          "63:  return l, client, nil",
          "64: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:  if conf.Reattach != nil {",
          "66:   if err := rpcClient.Ping(); err != nil {",
          "67:    logger.Warn(\"failed to ping plugin process during reattach\", \"error\", err)",
          "68:    return nil, nil, err",
          "69:   }",
          "70:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c419630829ac0c43053df42ba909aafeb6c73f31",
      "candidate_info": {
        "commit_hash": "c419630829ac0c43053df42ba909aafeb6c73f31",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/c419630829ac0c43053df42ba909aafeb6c73f31",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "chore(deps): bump github.com/golang-jwt/jwt/v4 from 4.5.0 to 4.5.1 (#24362)\n\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:  github.com/godbus/dbus/v5 v5.1.0 // indirect",
          "211:  github.com/gogo/protobuf v1.3.2 // indirect",
          "212:  github.com/gojuno/minimock/v3 v3.0.6 // indirect",
          "214:  github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect",
          "215:  github.com/google/btree v1.1.2 // indirect",
          "216:  github.com/google/go-querystring v0.0.0-20170111101155-53e6ce116135 // indirect",
          "",
          "[Removed Lines]",
          "213:  github.com/golang-jwt/jwt/v4 v4.5.0 // indirect",
          "",
          "[Added Lines]",
          "213:  github.com/golang-jwt/jwt/v4 v4.5.1 // indirect",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "483: github.com/gojuno/minimock/v3 v3.0.6 h1:YqHcVR10x2ZvswPK8Ix5yk+hMpspdQ3ckSpkOzyF85I=",
          "484: github.com/gojuno/minimock/v3 v3.0.6/go.mod h1:v61ZjAKHr+WnEkND63nQPCZ/DTfQgJdvbCi3IuoMblY=",
          "485: github.com/golang-jwt/jwt/v4 v4.0.0/go.mod h1:/xlHOz8bRuivTWchD4jCa+NbatV+wEUSzwAxVc6locg=",
          "487: github.com/golang-jwt/jwt/v4 v4.5.0/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=",
          "488: github.com/golang-jwt/jwt/v5 v5.2.1 h1:OuVbFODueb089Lh128TAcimifWaLhJwVflnrgM17wHk=",
          "489: github.com/golang-jwt/jwt/v5 v5.2.1/go.mod h1:pqrtFR0X4osieyHYxtmOUWsAWrfe1Q5UVIyoH402zdk=",
          "490: github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=",
          "",
          "[Removed Lines]",
          "486: github.com/golang-jwt/jwt/v4 v4.5.0 h1:7cYmW1XlMY7h7ii7UhUyChSgS5wUJEnm9uZVTGqOWzg=",
          "",
          "[Added Lines]",
          "487: github.com/golang-jwt/jwt/v4 v4.5.1 h1:JdqV9zKUdtaa9gdPlywC3aeoEsR681PlKC+4F5gQgeo=",
          "488: github.com/golang-jwt/jwt/v4 v4.5.1/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "777680beaeccb8728eb9bac3e9b0080c751dc5b1",
      "candidate_info": {
        "commit_hash": "777680beaeccb8728eb9bac3e9b0080c751dc5b1",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/777680beaeccb8728eb9bac3e9b0080c751dc5b1",
        "files": [
          ".changelog/24766.txt",
          "api/keyring.go",
          "api/keyring_test.go",
          "command/agent/keyring_endpoint.go",
          "command/agent/keyring_endpoint_test.go",
          "command/operator_root_keyring_remove.go",
          "nomad/keyring_endpoint.go",
          "nomad/keyring_endpoint_test.go",
          "nomad/structs/keyring.go",
          "website/content/api-docs/operator/keyring.mdx",
          "website/content/docs/commands/operator/root/keyring-remove.mdx"
        ],
        "message": "backport of commit 0906f788f04f7b07e3727f3506608931058c0926 (#24794)\n\nCo-authored-by: Piotr Kazmierczak <470696+pkazmierczak@users.noreply.github.com>",
        "before_after_code_files": [
          "api/keyring.go||api/keyring.go",
          "api/keyring_test.go||api/keyring_test.go",
          "command/agent/keyring_endpoint.go||command/agent/keyring_endpoint.go",
          "command/agent/keyring_endpoint_test.go||command/agent/keyring_endpoint_test.go",
          "command/operator_root_keyring_remove.go||command/operator_root_keyring_remove.go",
          "nomad/keyring_endpoint.go||nomad/keyring_endpoint.go",
          "nomad/keyring_endpoint_test.go||nomad/keyring_endpoint_test.go",
          "nomad/structs/keyring.go||nomad/structs/keyring.go",
          "website/content/api-docs/operator/keyring.mdx||website/content/api-docs/operator/keyring.mdx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "api/keyring.go||api/keyring.go": [
          "File: api/keyring.go -> api/keyring.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import (",
          "7:  \"fmt\"",
          "8:  \"net/url\"",
          "9: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:  \"strconv\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: func (k *Keyring) Delete(opts *KeyringDeleteOptions, w *WriteOptions) (*WriteMeta, error) {",
          "65:  return wm, err",
          "66: }",
          "69: type KeyringDeleteOptions struct {",
          "70:  KeyID string // UUID",
          "71: }",
          "",
          "[Removed Lines]",
          "63:  wm, err := k.client.delete(fmt.Sprintf(\"/v1/operator/keyring/key/%v\",",
          "64:   url.PathEscape(opts.KeyID)), nil, nil, w)",
          "",
          "[Added Lines]",
          "64:  wm, err := k.client.delete(fmt.Sprintf(\"/v1/operator/keyring/key/%v?force=%v\",",
          "65:   url.PathEscape(opts.KeyID), strconv.FormatBool(opts.Force)), nil, nil, w)",
          "74:  Force bool",
          "",
          "---------------"
        ],
        "api/keyring_test.go||api/keyring_test.go": [
          "File: api/keyring_test.go -> api/keyring_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:  assertQueryMeta(t, qm)",
          "38:  must.Len(t, 2, keys)",
          "42:  must.NoError(t, err)",
          "43:  assertWriteMeta(t, wm)",
          "",
          "[Removed Lines]",
          "41:  wm, err = kr.Delete(&KeyringDeleteOptions{KeyID: oldKeyID}, nil)",
          "",
          "[Added Lines]",
          "41:  wm, err = kr.Delete(&KeyringDeleteOptions{KeyID: oldKeyID, Force: true}, nil)",
          "",
          "---------------"
        ],
        "command/agent/keyring_endpoint.go||command/agent/keyring_endpoint.go": [
          "File: command/agent/keyring_endpoint.go -> command/agent/keyring_endpoint.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:   return s.keyringListRequest(resp, req)",
          "117:  case strings.HasPrefix(path, \"key\"):",
          "118:   keyID := strings.TrimPrefix(req.URL.Path, \"/v1/operator/keyring/key/\")",
          "119:   switch req.Method {",
          "120:   case http.MethodDelete:",
          "122:   default:",
          "123:    return nil, CodedError(405, ErrInvalidMethod)",
          "124:   }",
          "",
          "[Removed Lines]",
          "121:    return s.keyringDeleteRequest(resp, req, keyID)",
          "",
          "[Added Lines]",
          "120:   var forceBool bool",
          "121:   var err error",
          "122:   forceQuery, ok := req.URL.Query()[\"force\"]",
          "123:   if ok {",
          "124:    forceBool, err = strconv.ParseBool(forceQuery[0])",
          "125:   }",
          "127:   if err != nil {",
          "128:    return nil, CodedError(422, \"invalid force parameter\")",
          "129:   }",
          "132:    return s.keyringDeleteRequest(resp, req, keyID, forceBool)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "185:  return out, nil",
          "186: }",
          "191:  s.parseWriteRequest(req, &args.WriteRequest)",
          "193:  var out structs.KeyringDeleteRootKeyResponse",
          "",
          "[Removed Lines]",
          "188: func (s *HTTPServer) keyringDeleteRequest(resp http.ResponseWriter, req *http.Request, keyID string) (interface{}, error) {",
          "190:  args := structs.KeyringDeleteRootKeyRequest{KeyID: keyID}",
          "",
          "[Added Lines]",
          "199: func (s *HTTPServer) keyringDeleteRequest(resp http.ResponseWriter, req *http.Request, keyID string, force bool) (interface{}, error) {",
          "201:  args := structs.KeyringDeleteRootKeyRequest{KeyID: keyID, Force: force}",
          "",
          "---------------"
        ],
        "command/agent/keyring_endpoint_test.go||command/agent/keyring_endpoint_test.go": [
          "File: command/agent/keyring_endpoint_test.go -> command/agent/keyring_endpoint_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:  \"time\"",
          "15:  \"github.com/go-jose/go-jose/v3\"",
          "16:  \"github.com/shoenig/test/must\"",
          "18:  \"github.com/hashicorp/nomad/ci\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:  \"github.com/hashicorp/nomad/nomad/mock\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:   must.Len(t, 1, listResp)",
          "37:   key0 := listResp[0].KeyID",
          "41:   req, err = http.NewRequest(http.MethodPut, \"/v1/operator/keyring/rotate\", nil)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:   state := s.server.State()",
          "42:   encryptedVar := mock.VariableEncrypted()",
          "43:   encryptedVar.KeyID = key0",
          "44:   varSetResp := state.VarSet(0, &structs.VarApplyStateRequest{Var: encryptedVar})",
          "45:   must.NoError(t, varSetResp.Error)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:   req, err = http.NewRequest(http.MethodDelete, \"/v1/operator/keyring/key/\"+key0, nil)",
          "88:   must.NoError(t, err)",
          "89:   obj, err = s.Server.KeyringRequest(respW, req)",
          "90:   must.NoError(t, err)",
          "92:   req, err = http.NewRequest(http.MethodGet, \"/v1/operator/keyring/keys\", nil)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:   must.Error(t, err)",
          "99:   must.EqError(t, err, \"root key in use, cannot delete\")",
          "101:   req, err = http.NewRequest(http.MethodDelete, \"/v1/operator/keyring/key/\"+key0+\"?force=true\", nil)",
          "102:   must.NoError(t, err)",
          "103:   obj, err = s.Server.KeyringRequest(respW, req)",
          "",
          "---------------"
        ],
        "command/operator_root_keyring_remove.go||command/operator_root_keyring_remove.go": [
          "File: command/operator_root_keyring_remove.go -> command/operator_root_keyring_remove.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: General Options:",
          "34:  return strings.TrimSpace(helpText)",
          "35: }",
          "",
          "[Removed Lines]",
          "32:   ` + generalOptionsUsage(usageOptsDefault|usageOptsNoNamespace)",
          "",
          "[Added Lines]",
          "32:   ` + generalOptionsUsage(usageOptsDefault|usageOptsNoNamespace) + `",
          "34: Remove Options:",
          "36:   -force",
          "37:     Remove the key even if it was used to sign an existing variable",
          "38:     or workload identity.",
          "39: `",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: }",
          "53: func (c *OperatorRootKeyringRemoveCommand) Run(args []string) int {",
          "56:  flags := c.Meta.FlagSet(\"root keyring remove\", FlagSetClient)",
          "57:  flags.Usage = func() { c.Ui.Output(c.Help()) }",
          "58:  flags.BoolVar(&verbose, \"verbose\", false, \"\")",
          "60:  if err := flags.Parse(args); err != nil {",
          "61:   return 1",
          "",
          "[Removed Lines]",
          "54:  var verbose bool",
          "",
          "[Added Lines]",
          "61:  var force, verbose bool",
          "66:  flags.BoolVar(&force, \"force\", false, \"Forces deletion of the root keyring even if it's in use.\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:  }",
          "77:  _, err = client.Keyring().Delete(&api.KeyringDeleteOptions{",
          "78:   KeyID: removeKey,",
          "79:  }, nil)",
          "80:  if err != nil {",
          "81:   c.Ui.Error(fmt.Sprintf(\"error: %s\", err))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:   Force: force,",
          "",
          "---------------"
        ],
        "nomad/keyring_endpoint.go||nomad/keyring_endpoint.go": [
          "File: nomad/keyring_endpoint.go -> nomad/keyring_endpoint.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: package nomad",
          "6: import (",
          "7:  \"fmt\"",
          "8:  \"time\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:  \"errors\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "344:  if err != nil {",
          "345:   return err",
          "346:  }",
          "347:  if rootKey != nil && rootKey.IsActive() {",
          "348:   return fmt.Errorf(\"active root key cannot be deleted - call rotate first\")",
          "349:  }",
          "351:  _, index, err = k.srv.raftApply(structs.WrappedRootKeysDeleteRequestType, args)",
          "352:  if err != nil {",
          "353:   return err",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "349:  if rootKey == nil {",
          "350:   return errors.New(\"root key not found\")",
          "351:  }",
          "358:  rootKeyInUse, err := snap.IsRootKeyInUse(args.KeyID)",
          "359:  if err != nil {",
          "360:   return err",
          "361:  }",
          "362:  if rootKeyInUse && !args.Force {",
          "363:   return errors.New(\"root key in use, cannot delete\")",
          "364:  }",
          "",
          "---------------"
        ],
        "nomad/keyring_endpoint_test.go||nomad/keyring_endpoint_test.go": [
          "File: nomad/keyring_endpoint_test.go -> nomad/keyring_endpoint_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"time\"",
          "10:  msgpackrpc \"github.com/hashicorp/net-rpc-msgpackrpc/v2\"",
          "14:  \"github.com/hashicorp/nomad/ci\"",
          "15:  \"github.com/hashicorp/nomad/nomad/structs\"",
          "16:  \"github.com/hashicorp/nomad/testutil\"",
          "17: )",
          "",
          "[Removed Lines]",
          "11:  \"github.com/shoenig/test/must\"",
          "12:  \"github.com/stretchr/testify/require\"",
          "",
          "[Added Lines]",
          "12:  \"github.com/hashicorp/nomad/nomad/mock\"",
          "15:  \"github.com/shoenig/test/must\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:  defer shutdown()",
          "27:  testutil.WaitForKeyring(t, srv.RPC, \"global\")",
          "28:  codec := rpcClient(t, srv)",
          "32:  key, err := structs.NewUnwrappedRootKey(structs.EncryptionAlgorithmAES256GCM)",
          "34:  id := key.Meta.KeyID",
          "35:  key = key.MakeActive()",
          "",
          "[Removed Lines]",
          "33:  require.NoError(t, err)",
          "",
          "[Added Lines]",
          "28:  state := srv.fsm.State()",
          "32:  must.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:  var updateResp structs.KeyringUpdateRootKeyResponse",
          "43:  err = msgpackrpc.CallWithCodec(codec, \"Keyring.Update\", updateReq, &updateResp)",
          "46:  updateReq.AuthToken = rootToken.SecretID",
          "47:  err = msgpackrpc.CallWithCodec(codec, \"Keyring.Update\", updateReq, &updateResp)",
          "52:  getReq := &structs.KeyringGetRootKeyRequest{",
          "",
          "[Removed Lines]",
          "44:  require.EqualError(t, err, structs.ErrPermissionDenied.Error())",
          "48:  require.NoError(t, err)",
          "49:  require.NotEqual(t, uint64(0), updateResp.Index)",
          "",
          "[Added Lines]",
          "43:  must.EqError(t, err, structs.ErrPermissionDenied.Error())",
          "47:  must.NoError(t, err)",
          "48:  must.NotEq(t, uint64(0), updateResp.Index)",
          "52:  encryptedVar := mock.VariableEncrypted()",
          "53:  encryptedVar.KeyID = key.Meta.KeyID",
          "54:  varSetResp := state.VarSet(0, &structs.VarApplyStateRequest{Var: encryptedVar})",
          "55:  must.NoError(t, varSetResp.Error)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "56:  var getResp structs.KeyringGetRootKeyResponse",
          "58:  err = msgpackrpc.CallWithCodec(codec, \"Keyring.Get\", getReq, &getResp)",
          "",
          "[Removed Lines]",
          "59:  require.NoError(t, err)",
          "60:  require.Equal(t, updateResp.Index, getResp.Index)",
          "61:  require.Equal(t, structs.EncryptionAlgorithmAES256GCM, getResp.Key.Meta.Algorithm)",
          "",
          "[Added Lines]",
          "65:  must.NoError(t, err)",
          "66:  must.Eq(t, updateResp.Index, getResp.Index)",
          "67:  must.Eq(t, structs.EncryptionAlgorithmAES256GCM, getResp.Key.Meta.Algorithm)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "83:  updateReq.RootKey.Meta.CreateTime = time.Now().UTC().UnixNano()",
          "84:  err = msgpackrpc.CallWithCodec(codec, \"Keyring.Update\", updateReq, &updateResp)",
          "",
          "[Removed Lines]",
          "85:  require.NoError(t, err)",
          "86:  require.NotEqual(t, uint64(0), updateResp.Index)",
          "89:  require.NoError(t, <-errCh)",
          "90:  require.Equal(t, listResp.Index, updateResp.Index)",
          "91:  require.Len(t, listResp.Keys, 2) // bootstrap + new one",
          "",
          "[Added Lines]",
          "91:  must.NoError(t, err)",
          "92:  must.NotEq(t, uint64(0), updateResp.Index)",
          "95:  must.NoError(t, <-errCh)",
          "96:  must.Eq(t, listResp.Index, updateResp.Index)",
          "97:  must.SliceLen(t, 2, listResp.Keys) /// bootstrap + new one",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "99:  var delResp structs.KeyringDeleteRootKeyResponse",
          "101:  err = msgpackrpc.CallWithCodec(codec, \"Keyring.Delete\", delReq, &delResp)",
          "104:  delReq.AuthToken = rootToken.SecretID",
          "105:  err = msgpackrpc.CallWithCodec(codec, \"Keyring.Delete\", delReq, &delResp)",
          "109:  updateReq.RootKey = updateReq.RootKey.MakeInactive()",
          "110:  err = msgpackrpc.CallWithCodec(codec, \"Keyring.Update\", updateReq, &updateResp)",
          "113:  err = msgpackrpc.CallWithCodec(codec, \"Keyring.Delete\", delReq, &delResp)",
          "117:  listReq := &structs.KeyringListRootKeyMetaRequest{",
          "118:   QueryOptions: structs.QueryOptions{",
          "",
          "[Removed Lines]",
          "102:  require.EqualError(t, err, structs.ErrPermissionDenied.Error())",
          "106:  require.EqualError(t, err, \"active root key cannot be deleted - call rotate first\")",
          "111:  require.NoError(t, err)",
          "114:  require.NoError(t, err)",
          "115:  require.Greater(t, delResp.Index, getResp.Index)",
          "",
          "[Added Lines]",
          "108:  must.EqError(t, err, structs.ErrPermissionDenied.Error())",
          "112:  must.EqError(t, err, \"active root key cannot be deleted - call rotate first\")",
          "117:  must.NoError(t, err)",
          "119:  err = msgpackrpc.CallWithCodec(codec, \"Keyring.Delete\", delReq, &delResp)",
          "120:  must.EqError(t, err, \"root key in use, cannot delete\")",
          "123:  delReq.Force = true",
          "125:  must.NoError(t, err)",
          "126:  must.Greater(t, getResp.Index, delResp.Index)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "121:   },",
          "122:  }",
          "123:  err = msgpackrpc.CallWithCodec(codec, \"Keyring.List\", listReq, &listResp)",
          "127: }",
          "",
          "[Removed Lines]",
          "124:  require.NoError(t, err)",
          "125:  require.Greater(t, listResp.Index, getResp.Index)",
          "126:  require.Len(t, listResp.Keys, 1) // just the bootstrap key",
          "",
          "[Added Lines]",
          "135:  must.NoError(t, err)",
          "136:  must.Greater(t, getResp.Index, listResp.Index)",
          "137:  must.SliceLen(t, 1, listResp.Keys) // just the bootstrap key",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "142:  key, err := structs.NewUnwrappedRootKey(structs.EncryptionAlgorithmAES256GCM)",
          "144:  id := key.Meta.KeyID",
          "145:  key = key.MakeActive()",
          "",
          "[Removed Lines]",
          "143:  require.NoError(t, err)",
          "",
          "[Added Lines]",
          "154:  must.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "153:  }",
          "154:  var updateResp structs.KeyringUpdateRootKeyResponse",
          "155:  err = msgpackrpc.CallWithCodec(codec, \"Keyring.Update\", updateReq, &updateResp)",
          "158:  testCases := []struct {",
          "159:   key            *structs.UnwrappedRootKey",
          "",
          "[Removed Lines]",
          "156:  require.NoError(t, err)",
          "",
          "[Added Lines]",
          "167:  must.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "211:    }",
          "212:    var updateResp structs.KeyringUpdateRootKeyResponse",
          "213:    err := msgpackrpc.CallWithCodec(codec, \"Keyring.Update\", updateReq, &updateResp)",
          "215:   })",
          "216:  }",
          "",
          "[Removed Lines]",
          "214:    require.EqualError(t, err, tc.expectedErrMsg)",
          "",
          "[Added Lines]",
          "225:    must.EqError(t, err, tc.expectedErrMsg)",
          "",
          "---------------"
        ],
        "nomad/structs/keyring.go||nomad/structs/keyring.go": [
          "File: nomad/structs/keyring.go -> nomad/structs/keyring.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "501: type KeyringDeleteRootKeyRequest struct {",
          "502:  KeyID string",
          "503:  WriteRequest",
          "504: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "503:  Force bool",
          "",
          "---------------"
        ],
        "website/content/api-docs/operator/keyring.mdx||website/content/api-docs/operator/keyring.mdx": [
          "File: website/content/api-docs/operator/keyring.mdx -> website/content/api-docs/operator/keyring.mdx",
          "--- Hunk 1 ---",
          "[Context before]",
          "233: |------------------|--------------|",
          "234: | `NO`             | `management` |",
          "236: ### Sample Request",
          "238: ```shell-session",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236: ### Parameters",
          "238: - `force` `(bool: false)` - Remove the key even if it was used to sign an existing variable",
          "239: or workload identity.",
          "",
          "---------------"
        ]
      }
    }
  ]
}