{
  "cve_id": "CVE-2024-56410",
  "cve_desc": "PhpSpreadsheet is a PHP library for reading and writing spreadsheet files. Versions prior to 3.7.0, 2.3.5, 2.1.6, and 1.29.7 have a cross-site scripting (XSS) vulnerability in custom properties. The HTML page is generated without clearing custom properties. Versions 3.7.0, 2.3.5, 2.1.6, and 1.29.7 contain a patch for the issue.",
  "repo": "PHPOffice/PhpSpreadsheet",
  "patch_hash": "45052f88e04c735d56457a8ffcdc40b2635a028e",
  "patch_info": {
    "commit_hash": "45052f88e04c735d56457a8ffcdc40b2635a028e",
    "repo": "PHPOffice/PhpSpreadsheet",
    "commit_url": "https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e",
    "files": [
      "src/PhpSpreadsheet/Writer/Html.php",
      "tests/PhpSpreadsheetTests/Writer/Html/BadCustomPropertyTest.php",
      "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkBaseTest.php",
      "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php",
      "tests/data/Reader/XLSX/sec-j47r.dontuse",
      "tests/data/Reader/XLSX/sec-p66w.dontuse",
      "tests/data/Reader/XLSX/sec-q229.dontuse"
    ],
    "message": "Merge commit from fork",
    "before_after_code_files": [
      "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php",
      "tests/PhpSpreadsheetTests/Writer/Html/BadCustomPropertyTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadCustomPropertyTest.php",
      "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkBaseTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkBaseTest.php",
      "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php"
    ]
  },
  "patch_diff": {
    "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php": [
      "File: src/PhpSpreadsheet/Writer/Html.php -> src/PhpSpreadsheet/Writer/Html.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "403:                 } else {",
      "404:                     $propertyValue = (string) $propertyValue;",
      "405:                 }",
      "407:             }",
      "408:         }",
      "410:         if (!empty($properties->getHyperlinkBase())) {",
      "412:         }",
      "414:         $html .= $includeStyles ? $this->generateStyles(true) : $this->generatePageDeclarations(true);",
      "",
      "[Removed Lines]",
      "406:                 $html .= self::generateMeta($propertyValue, \"custom.$propertyQualifier.$customProperty\");",
      "411:             $html .= '      <base href=\"' . $properties->getHyperlinkBase() . '\" />' . PHP_EOL;",
      "",
      "[Added Lines]",
      "406:                 $html .= self::generateMeta($propertyValue, htmlspecialchars(\"custom.$propertyQualifier.$customProperty\"));",
      "411:             $html .= '      <base href=\"' . htmlspecialchars($properties->getHyperlinkBase()) . '\" />' . PHP_EOL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1587:             if ($worksheet->hyperlinkExists($coordinate) && !$worksheet->getHyperlink($coordinate)->isInternal()) {",
      "1588:                 $url = $worksheet->getHyperlink($coordinate)->getUrl();",
      "1591:                 if ($parseScheme === 1 && !in_array($matches[1], ['http', 'https', 'file', 'ftp', 's3'], true)) {",
      "1592:                     $cellData = htmlspecialchars($url, Settings::htmlEntityFlags());",
      "1593:                 } else {",
      "",
      "[Removed Lines]",
      "1589:                 $urldecode = strtolower(html_entity_decode(trim($url), encoding: 'UTF-8'));",
      "1590:                 $parseScheme = preg_match('/^(\\\\w+):/', $urldecode, $matches);",
      "",
      "[Added Lines]",
      "1589:                 $urlDecode1 = html_entity_decode($url, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8');",
      "1590:                 $urlTrim = preg_replace('/^\\\\s+/u', '', $urlDecode1) ?? $urlDecode1;",
      "1591:                 $parseScheme = preg_match('/^([\\\\w\\\\s]+):/u', strtolower($urlTrim), $matches);",
      "",
      "---------------"
    ],
    "tests/PhpSpreadsheetTests/Writer/Html/BadCustomPropertyTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadCustomPropertyTest.php": [
      "File: tests/PhpSpreadsheetTests/Writer/Html/BadCustomPropertyTest.php -> tests/PhpSpreadsheetTests/Writer/Html/BadCustomPropertyTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "3: declare(strict_types=1);",
      "5: namespace PhpOffice\\PhpSpreadsheetTests\\Writer\\Html;",
      "7: use PhpOffice\\PhpSpreadsheet\\Reader\\Xlsx as XlsxReader;",
      "8: use PhpOffice\\PhpSpreadsheet\\Writer\\Html as HtmlWriter;",
      "9: use PHPUnit\\Framework\\TestCase;",
      "11: class BadCustomPropertyTest extends TestCase",
      "12: {",
      "13:     public function testBadCustomProperty(): void",
      "14:     {",
      "15:         $reader = new XlsxReader();",
      "16:         $infile = 'tests/data/Reader/XLSX/sec-q229.dontuse';",
      "17:         $spreadsheet = $reader->load($infile);",
      "18:         $writer = new HtmlWriter($spreadsheet);",
      "19:         $html = $writer->generateHtmlAll();",
      "20:         self::assertStringContainsString('<meta name=\"custom.string.custom_property&quot;&gt;&lt;img src=1 onerror=alert()&gt;\" content=\"test\" />', $html);",
      "21:         $spreadsheet->disconnectWorksheets();",
      "22:     }",
      "23: }",
      "",
      "---------------"
    ],
    "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkBaseTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkBaseTest.php": [
      "File: tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkBaseTest.php -> tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkBaseTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "3: declare(strict_types=1);",
      "5: namespace PhpOffice\\PhpSpreadsheetTests\\Writer\\Html;",
      "7: use PhpOffice\\PhpSpreadsheet\\Reader\\Xlsx as XlsxReader;",
      "8: use PhpOffice\\PhpSpreadsheet\\Writer\\Html as HtmlWriter;",
      "9: use PHPUnit\\Framework\\TestCase;",
      "11: class BadHyperlinkBaseTest extends TestCase",
      "12: {",
      "13:     public function testBadHyperlinkBase(): void",
      "14:     {",
      "15:         $reader = new XlsxReader();",
      "16:         $infile = 'tests/data/Reader/XLSX/sec-p66w.dontuse';",
      "17:         $spreadsheet = $reader->load($infile);",
      "18:         $writer = new HtmlWriter($spreadsheet);",
      "19:         $html = $writer->generateHtmlAll();",
      "20:         self::assertStringContainsString('<base href=\"&quot;&gt;&lt;img src=1 onerror=alert()&gt;\" />', $html);",
      "21:         $spreadsheet->disconnectWorksheets();",
      "22:     }",
      "23: }",
      "",
      "---------------"
    ],
    "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php": [
      "File: tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php -> tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "3: declare(strict_types=1);",
      "5: namespace PhpOffice\\PhpSpreadsheetTests\\Writer\\Html;",
      "7: use PhpOffice\\PhpSpreadsheet\\Reader\\Xlsx as XlsxReader;",
      "8: use PhpOffice\\PhpSpreadsheet\\Writer\\Html as HtmlWriter;",
      "9: use PHPUnit\\Framework\\TestCase;",
      "11: class BadHyperlinkTest extends TestCase",
      "12: {",
      "13:     public function testBadHyperlink(): void",
      "14:     {",
      "15:         $reader = new XlsxReader();",
      "16:         $infile = 'tests/data/Reader/XLSX/sec-j47r.dontuse';",
      "17:         $spreadsheet = $reader->load($infile);",
      "18:         $writer = new HtmlWriter($spreadsheet);",
      "19:         $html = $writer->generateHtmlAll();",
      "20:         self::assertStringContainsString(\"<td class=\\\"column0 style1 f\\\">jav\\tascript:alert()</td>\", $html);",
      "21:         $spreadsheet->disconnectWorksheets();",
      "22:     }",
      "23: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "95213bf50a855af8df68fe4d40ebd8717d43685f",
      "candidate_info": {
        "commit_hash": "95213bf50a855af8df68fe4d40ebd8717d43685f",
        "repo": "PHPOffice/PhpSpreadsheet",
        "commit_url": "https://github.com/PHPOffice/PhpSpreadsheet/commit/95213bf50a855af8df68fe4d40ebd8717d43685f",
        "files": [
          "CHANGELOG.md",
          "CONTRIBUTING.md",
          "src/PhpSpreadsheet/Reader/Csv.php",
          "src/PhpSpreadsheet/Writer/Html.php",
          "src/PhpSpreadsheet/Writer/Xlsx.php",
          "tests/PhpSpreadsheetTests/Reader/Csv/CsvLineEndingTest.php",
          "tests/PhpSpreadsheetTests/Reader/Xlsx/Issue4248Test.php",
          "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php",
          "tests/PhpSpreadsheetTests/Writer/Html/BetterBooleanTest.php",
          "tests/PhpSpreadsheetTests/Writer/Html/NoJavascriptLinksTest.php",
          "tests/PhpSpreadsheetTests/Writer/PreCalcTest.php",
          "tests/PhpSpreadsheetTests/Writer/Xlsx/Issue4269Test.php"
        ],
        "message": "Breaking Change - 3 Defaults\n\nFix #4092. Change default value for Csv Reader autodetect line endings. Prior behavior can be enabled via `setTestAutodetect(true)`.\n\nChange default value for Html Writer \"better boolean\" logic. Prior behavior can be explicitly enabled via `setBetterBoolean(false)`.\n\nChange default for Xlsx Writer forceFullCalc option. Prior behavior can be explicitly enabled via `setForceFullCalc(null)`.",
        "before_after_code_files": [
          "src/PhpSpreadsheet/Reader/Csv.php||src/PhpSpreadsheet/Reader/Csv.php",
          "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php",
          "src/PhpSpreadsheet/Writer/Xlsx.php||src/PhpSpreadsheet/Writer/Xlsx.php",
          "tests/PhpSpreadsheetTests/Reader/Csv/CsvLineEndingTest.php||tests/PhpSpreadsheetTests/Reader/Csv/CsvLineEndingTest.php",
          "tests/PhpSpreadsheetTests/Reader/Xlsx/Issue4248Test.php||tests/PhpSpreadsheetTests/Reader/Xlsx/Issue4248Test.php",
          "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php",
          "tests/PhpSpreadsheetTests/Writer/Html/BetterBooleanTest.php||tests/PhpSpreadsheetTests/Writer/Html/BetterBooleanTest.php",
          "tests/PhpSpreadsheetTests/Writer/Html/NoJavascriptLinksTest.php||tests/PhpSpreadsheetTests/Writer/Html/NoJavascriptLinksTest.php",
          "tests/PhpSpreadsheetTests/Writer/PreCalcTest.php||tests/PhpSpreadsheetTests/Writer/PreCalcTest.php",
          "tests/PhpSpreadsheetTests/Writer/Xlsx/Issue4269Test.php||tests/PhpSpreadsheetTests/Writer/Xlsx/Issue4269Test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php",
            "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php"
          ],
          "candidate": [
            "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php",
            "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/PhpSpreadsheet/Reader/Csv.php||src/PhpSpreadsheet/Reader/Csv.php": [
          "File: src/PhpSpreadsheet/Reader/Csv.php -> src/PhpSpreadsheet/Reader/Csv.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:     private static $constructorCallback;",
          "",
          "[Removed Lines]",
          "88:     public const DEFAULT_TEST_AUTODETECT = true;",
          "",
          "[Added Lines]",
          "88:     public const DEFAULT_TEST_AUTODETECT = false;",
          "",
          "---------------"
        ],
        "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php": [
          "File: src/PhpSpreadsheet/Writer/Html.php -> src/PhpSpreadsheet/Writer/Html.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:     private $sheetCharts;",
          "148:     private string $getTrue = 'TRUE';",
          "",
          "[Removed Lines]",
          "146:     private bool $betterBoolean = false;",
          "",
          "[Added Lines]",
          "146:     private bool $betterBoolean = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1494:             $dataType = $worksheet->getCell($coordinate)->getDataType();",
          "1495:             if ($dataType === DataType::TYPE_BOOL) {",
          "1496:                 $html .= ' data-type=\"' . DataType::TYPE_BOOL . '\"';",
          "1498:                 $html .= ' data-type=\"' . DataType::TYPE_BOOL . '\"';",
          "1499:             } elseif (is_numeric($cellData) && $worksheet->getCell($coordinate)->getDataType() === DataType::TYPE_STRING) {",
          "1500:                 $html .= ' data-type=\"' . DataType::TYPE_STRING . '\"';",
          "",
          "[Removed Lines]",
          "1497:             } elseif ($dataType === DataType::TYPE_FORMULA && is_bool($worksheet->getCell($coordinate)->getCalculatedValue())) {",
          "",
          "[Added Lines]",
          "1497:             } elseif ($dataType === DataType::TYPE_FORMULA && $this->preCalculateFormulas && is_bool($worksheet->getCell($coordinate)->getCalculatedValue())) {",
          "",
          "---------------"
        ],
        "src/PhpSpreadsheet/Writer/Xlsx.php||src/PhpSpreadsheet/Writer/Xlsx.php": [
          "File: src/PhpSpreadsheet/Writer/Xlsx.php -> src/PhpSpreadsheet/Writer/Xlsx.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:     private bool $useDynamicArray = false;",
          "",
          "[Removed Lines]",
          "143:     private ?bool $forceFullCalc = null;",
          "",
          "[Added Lines]",
          "143:     public const DEFAULT_FORCE_FULL_CALC = false;",
          "146:     private ?bool $forceFullCalc = self::DEFAULT_FORCE_FULL_CALC;",
          "",
          "---------------"
        ],
        "tests/PhpSpreadsheetTests/Reader/Csv/CsvLineEndingTest.php||tests/PhpSpreadsheetTests/Reader/Csv/CsvLineEndingTest.php": [
          "File: tests/PhpSpreadsheetTests/Reader/Csv/CsvLineEndingTest.php -> tests/PhpSpreadsheetTests/Reader/Csv/CsvLineEndingTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: use PhpOffice\\PhpSpreadsheet\\Reader\\Csv;",
          "8: use PhpOffice\\PhpSpreadsheet\\Shared\\File;",
          "9: use PHPUnit\\Framework\\TestCase;",
          "11: class CsvLineEndingTest extends TestCase",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: use PHPUnit\\Framework\\Attributes\\DataProvider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:         }",
          "23:     }",
          "26:     public function testEndings(string $ending): void",
          "27:     {",
          "28:         if ($ending === \"\\r\" && PHP_VERSION_ID >= 90000) {",
          "",
          "[Removed Lines]",
          "25:     #[\\PHPUnit\\Framework\\Attributes\\DataProvider('providerEndings')]",
          "",
          "[Added Lines]",
          "26:     #[DataProvider('providerEndings')]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43:         $spreadsheet->disconnectWorksheets();",
          "44:     }",
          "47:     public function testEndingsNoDetect(string $ending): void",
          "48:     {",
          "49:         $this->tempFile = $filename = File::temporaryFilename();",
          "50:         $data = ['123', '456', '789'];",
          "51:         file_put_contents($filename, implode($ending, $data));",
          "52:         $reader = new Csv();",
          "54:         $spreadsheet = $reader->load($filename);",
          "55:         $sheet = $spreadsheet->getActiveSheet();",
          "56:         if ($ending === \"\\r\") {",
          "",
          "[Removed Lines]",
          "46:     #[\\PHPUnit\\Framework\\Attributes\\DataProvider('providerEndings')]",
          "53:         $reader->setTestAutoDetect(false);",
          "",
          "[Added Lines]",
          "47:     #[DataProvider('providerEndings')]",
          "54:         self::assertSame(self::$alwaysFalse, Csv::DEFAULT_TEST_AUTODETECT);",
          "",
          "---------------"
        ],
        "tests/PhpSpreadsheetTests/Reader/Xlsx/Issue4248Test.php||tests/PhpSpreadsheetTests/Reader/Xlsx/Issue4248Test.php": [
          "File: tests/PhpSpreadsheetTests/Reader/Xlsx/Issue4248Test.php -> tests/PhpSpreadsheetTests/Reader/Xlsx/Issue4248Test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:             . '            <td class=\"column0 style0\">&nbsp;</td>'",
          "95:             . '            <td class=\"column1 style28 null\"></td>'",
          "96:             . '            <td class=\"column2 style35 s\">Eligible </td>'",
          "98:         self::assertStringContainsString($expected, $data, 'Cell D18 style');",
          "99:         $expected = '      td.style70, th.style70 { vertical-align:middle; text-align:center; border-bottom:1px solid #000000 !important; border-top:2px solid #000000 !important; border-left:2px solid #000000 !important; border-right:1px solid #000000 !important; font-weight:bold; color:#000000; font-family:\\'Calibri\\'; font-size:16pt; background-color:#BDD7EE }';",
          "100:         self::assertStringContainsString($expected, $data, 'background color');",
          "",
          "[Removed Lines]",
          "97:             . '            <td class=\"column3 style70 f\">Non</td>';",
          "",
          "[Added Lines]",
          "97:             . '            <td class=\"column3 style70 s\">Non</td>';",
          "",
          "---------------"
        ],
        "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php": [
          "File: tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php -> tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:         $spreadsheet = $reader->load($infile);",
          "19:         $writer = new HtmlWriter($spreadsheet);",
          "20:         $html = $writer->generateHtmlAll();",
          "22:         $spreadsheet->disconnectWorksheets();",
          "23:     }",
          "",
          "[Removed Lines]",
          "21:         self::assertStringContainsString('<td class=\"column0 style1 f\">jav&#9;ascript:alert()</td>', $html);",
          "",
          "[Added Lines]",
          "21:         self::assertStringContainsString('<td class=\"column0 style1 s\">jav&#9;ascript:alert()</td>', $html);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:         $spreadsheet = $reader->load($infile);",
          "30:         $writer = new HtmlWriter($spreadsheet);",
          "31:         $html = $writer->generateHtmlAll();",
          "33:         $spreadsheet->disconnectWorksheets();",
          "34:     }",
          "35: }",
          "",
          "[Removed Lines]",
          "32:         self::assertStringContainsString('<td class=\"column0 style0 f\">&#20;j&#13;avascript:alert(1)</td>', $html);",
          "",
          "[Added Lines]",
          "32:         self::assertStringContainsString('<td class=\"column0 style0 s\">&#20;j&#13;avascript:alert(1)</td>', $html);",
          "",
          "---------------"
        ],
        "tests/PhpSpreadsheetTests/Writer/Html/BetterBooleanTest.php||tests/PhpSpreadsheetTests/Writer/Html/BetterBooleanTest.php": [
          "File: tests/PhpSpreadsheetTests/Writer/Html/BetterBooleanTest.php -> tests/PhpSpreadsheetTests/Writer/Html/BetterBooleanTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     {",
          "32:         $spreadsheet = new Spreadsheet();",
          "33:         $writer = new HtmlWriter($spreadsheet);",
          "36:         $spreadsheet->disconnectWorksheets();",
          "37:     }",
          "",
          "[Removed Lines]",
          "35:         self::assertFalse($writer->getBetterBoolean());",
          "",
          "[Added Lines]",
          "35:         self::assertTrue($writer->getBetterBoolean());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:         $sheet->getCell('F1')->setValue('=\"A\"&\"B\"');",
          "59:         $sheet->getCell('G1')->setValue('=1+2');",
          "64:         $spreadsheet->disconnectWorksheets();",
          "66:         $rsheet = $reloaded->getActiveSheet();",
          "",
          "[Removed Lines]",
          "62:         $callableWriter = [$this, 'setBetter'];",
          "63:         $reloaded = $this->writeAndReload($spreadsheet, 'Html', null, $callableWriter);",
          "",
          "[Added Lines]",
          "61:         $reloaded = $this->writeAndReload($spreadsheet, 'Html');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:         $sheet->getCell('F1')->setValue('=\"A\"&\"B\"');",
          "87:         $sheet->getCell('G1')->setValue('=1+2');",
          "92:         $spreadsheet->disconnectWorksheets();",
          "94:         $rsheet = $reloaded->getActiveSheet();",
          "",
          "[Removed Lines]",
          "90:         $callableWriter = [$this, 'setNotBetter'];",
          "91:         $reloaded = $this->writeAndReload($spreadsheet, 'Html', null, $callableWriter);",
          "",
          "[Added Lines]",
          "87:         $reloaded = $this->writeAndReload($spreadsheet, 'Html', null, $this->setNotBetter(...));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:         self::assertStringContainsString('<td class=\"column5 style0 s\">AB</td>', $html);",
          "126:         self::assertStringContainsString('<td class=\"column6 style0 n\">3</td>', $html);",
          "131:         $spreadsheet->disconnectWorksheets();",
          "133:         $rsheet = $reloaded->getActiveSheet();",
          "",
          "[Removed Lines]",
          "129:         $callableWriter = [$this, 'setBetter'];",
          "130:         $reloaded = $this->writeAndReload($spreadsheet, 'Html', null, $callableWriter);",
          "",
          "[Added Lines]",
          "124:         $reloaded = $this->writeAndReload($spreadsheet, 'Html', null, $this->setBetter(...));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "169:         self::assertStringContainsString('<td style=\"text-align:left;\">AB</td>', $html);",
          "170:         self::assertStringContainsString('<td style=\"text-align:right;\">3</td>', $html);",
          "175:         $spreadsheet->disconnectWorksheets();",
          "177:         $rsheet = $reloaded->getActiveSheet();",
          "",
          "[Removed Lines]",
          "173:         $callableWriter = [$this, 'setBetter'];",
          "174:         $reloaded = $this->writeAndReload($spreadsheet, 'Html', null, $callableWriter);",
          "",
          "[Added Lines]",
          "166:         $reloaded = $this->writeAndReload($spreadsheet, 'Html', null, $this->setBetter(...));",
          "",
          "---------------"
        ],
        "tests/PhpSpreadsheetTests/Writer/Html/NoJavascriptLinksTest.php||tests/PhpSpreadsheetTests/Writer/Html/NoJavascriptLinksTest.php": [
          "File: tests/PhpSpreadsheetTests/Writer/Html/NoJavascriptLinksTest.php -> tests/PhpSpreadsheetTests/Writer/Html/NoJavascriptLinksTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:         $html = $writer->generateHTMLAll();",
          "28:         self::assertStringContainsString('<td class=\"column0 style0 s\"><a href=\"http://www.example.com\">Click me</a></td>', $html, 'http hyperlink retained');",
          "29:         self::assertStringContainsString('<td class=\"column0 style0 s\">javascript:alert(\\'hello1\\')</td>', $html, 'javascript hyperlink dropped');",
          "31:         $spreadsheet->disconnectWorksheets();",
          "32:     }",
          "33: }",
          "",
          "[Removed Lines]",
          "30:         self::assertStringContainsString('<td class=\"column0 style0 f\">javascript:alert(\\'hello2\\')</td>', $html, 'javascript hyperlink function dropped');",
          "",
          "[Added Lines]",
          "30:         self::assertStringContainsString('<td class=\"column0 style0 s\">javascript:alert(\\'hello2\\')</td>', $html, 'javascript hyperlink function dropped');",
          "",
          "---------------"
        ],
        "tests/PhpSpreadsheetTests/Writer/PreCalcTest.php||tests/PhpSpreadsheetTests/Writer/PreCalcTest.php": [
          "File: tests/PhpSpreadsheetTests/Writer/PreCalcTest.php -> tests/PhpSpreadsheetTests/Writer/PreCalcTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: use PhpOffice\\PhpSpreadsheet\\Spreadsheet;",
          "11: use PhpOffice\\PhpSpreadsheet\\Worksheet\\ColumnDimension;",
          "12: use PhpOffice\\PhpSpreadsheetTests\\Functional\\AbstractFunctional;",
          "14: class PreCalcTest extends AbstractFunctional",
          "15: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: use PHPUnit\\Framework\\Attributes\\DataProvider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:             $data = self::readFile($file);",
          "119:             if ($preCalc === false) {",
          "121:             } else {",
          "122:                 self::assertStringContainsString('<calcPr calcId=\"999999\" calcMode=\"auto\" calcCompleted=\"1\" fullCalcOnLoad=\"0\" forceFullCalc=\"0\"/>', $data);",
          "123:             }",
          "",
          "[Removed Lines]",
          "120:                 self::assertStringContainsString('<calcPr calcId=\"999999\" calcMode=\"auto\" calcCompleted=\"0\" fullCalcOnLoad=\"1\" forceFullCalc=\"1\"/>', $data);",
          "",
          "[Added Lines]",
          "121:                 self::assertStringContainsString('<calcPr calcId=\"999999\" calcMode=\"auto\" calcCompleted=\"0\" fullCalcOnLoad=\"1\" forceFullCalc=\"0\"/>', $data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174:         }",
          "175:     }",
          "178:     public function testPreCalc(?bool $preCalc, string $type): void",
          "179:     {",
          "180:         $spreadsheet = new Spreadsheet();",
          "",
          "[Removed Lines]",
          "177:     #[\\PHPUnit\\Framework\\Attributes\\DataProvider('providerPreCalc')]",
          "",
          "[Added Lines]",
          "178:     #[DataProvider('providerPreCalc')]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "203:         $this->verifyOds($preCalc, $type);",
          "204:         $this->verifyHtml($preCalc, $type);",
          "205:         $this->verifyCsv($preCalc, $type);",
          "206:     }",
          "207: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:         $spreadsheet->disconnectWorksheets();",
          "",
          "---------------"
        ],
        "tests/PhpSpreadsheetTests/Writer/Xlsx/Issue4269Test.php||tests/PhpSpreadsheetTests/Writer/Xlsx/Issue4269Test.php": [
          "File: tests/PhpSpreadsheetTests/Writer/Xlsx/Issue4269Test.php -> tests/PhpSpreadsheetTests/Writer/Xlsx/Issue4269Test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: {",
          "15:     private string $outputFile = '';",
          "17:     protected function tearDown(): void",
          "18:     {",
          "19:         if ($this->outputFile !== '') {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:     private static bool $alwaysFalse = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:         $writer = new XlsxWriter($spreadsheet);",
          "37:         $writer->setPreCalculateFormulas($preCalculateFormulas);",
          "41:         $this->outputFile = File::temporaryFilename();",
          "42:         $writer->save($this->outputFile);",
          "43:         $spreadsheet->disconnectWorksheets();",
          "",
          "[Removed Lines]",
          "38:         if ($forceFullCalc !== null) {",
          "39:             $writer->setForceFullCalc($forceFullCalc);",
          "40:         }",
          "",
          "[Added Lines]",
          "40:         $writer->setForceFullCalc($forceFullCalc);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:             'unlikely use case' => [true, true, 'calcMode=\"auto\" calcCompleted=\"1\" fullCalcOnLoad=\"0\" forceFullCalc=\"1\"'],",
          "63:         ];",
          "64:     }",
          "65: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     public function testDefault(): void",
          "67:     {",
          "68:         self::assertSame(self::$alwaysFalse, XlsxWriter::DEFAULT_FORCE_FULL_CALC);",
          "69:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d493d731b2eb5e2029d8f34d5eeb7c148685a00",
      "candidate_info": {
        "commit_hash": "2d493d731b2eb5e2029d8f34d5eeb7c148685a00",
        "repo": "PHPOffice/PhpSpreadsheet",
        "commit_url": "https://github.com/PHPOffice/PhpSpreadsheet/commit/2d493d731b2eb5e2029d8f34d5eeb7c148685a00",
        "files": [
          "src/PhpSpreadsheet/Writer/Html.php",
          "tests/PhpSpreadsheetTests/Writer/Html/NoJavascriptLinksTest.php"
        ],
        "message": "Merge commit from fork",
        "before_after_code_files": [
          "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php",
          "tests/PhpSpreadsheetTests/Writer/Html/NoJavascriptLinksTest.php||tests/PhpSpreadsheetTests/Writer/Html/NoJavascriptLinksTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php"
          ],
          "candidate": [
            "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php"
          ]
        }
      },
      "candidate_diff": {
        "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php": [
          "File: src/PhpSpreadsheet/Writer/Html.php -> src/PhpSpreadsheet/Writer/Html.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1522:             if ($worksheet->hyperlinkExists($coordinate) && !$worksheet->getHyperlink($coordinate)->isInternal()) {",
          "1524:             }",
          "",
          "[Removed Lines]",
          "1523:                 $cellData = '<a href=\"' . htmlspecialchars($worksheet->getHyperlink($coordinate)->getUrl(), Settings::htmlEntityFlags()) . '\" title=\"' . htmlspecialchars($worksheet->getHyperlink($coordinate)->getTooltip(), Settings::htmlEntityFlags()) . '\">' . $cellData . '</a>';",
          "",
          "[Added Lines]",
          "1523:                 $url = $worksheet->getHyperlink($coordinate)->getUrl();",
          "1524:                 $urldecode = strtolower(html_entity_decode(trim($url), encoding: 'UTF-8'));",
          "1525:                 $parseScheme = preg_match('/^(\\\\w+):/', $urldecode, $matches);",
          "1526:                 if ($parseScheme === 1 && !in_array($matches[1], ['http', 'https', 'file', 'ftp', 's3'], true)) {",
          "1527:                     $cellData = htmlspecialchars($url, Settings::htmlEntityFlags());",
          "1528:                 } else {",
          "1529:                     $cellData = '<a href=\"' . htmlspecialchars($url, Settings::htmlEntityFlags()) . '\" title=\"' . htmlspecialchars($worksheet->getHyperlink($coordinate)->getTooltip(), Settings::htmlEntityFlags()) . '\">' . $cellData . '</a>';",
          "1530:                 }",
          "",
          "---------------"
        ],
        "tests/PhpSpreadsheetTests/Writer/Html/NoJavascriptLinksTest.php||tests/PhpSpreadsheetTests/Writer/Html/NoJavascriptLinksTest.php": [
          "File: tests/PhpSpreadsheetTests/Writer/Html/NoJavascriptLinksTest.php -> tests/PhpSpreadsheetTests/Writer/Html/NoJavascriptLinksTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: declare(strict_types=1);",
          "5: namespace PhpOffice\\PhpSpreadsheetTests\\Writer\\Html;",
          "7: use PhpOffice\\PhpSpreadsheet\\Cell\\Hyperlink;",
          "8: use PhpOffice\\PhpSpreadsheet\\Spreadsheet;",
          "9: use PhpOffice\\PhpSpreadsheet\\Writer\\Html;",
          "10: use PHPUnit\\Framework\\TestCase;",
          "12: class NoJavascriptLinksTest extends TestCase",
          "13: {",
          "14:     public function testNoJavascriptLinks(): void",
          "15:     {",
          "16:         $spreadsheet = new Spreadsheet();",
          "17:         $sheet = $spreadsheet->getActiveSheet();",
          "18:         $sheet->getCell('A1')->setValue('Click me');",
          "19:         $hyperlink = new Hyperlink('http://www.example.com');",
          "20:         $sheet->getCell('A1')->setHyperlink($hyperlink);",
          "21:         $sheet->getCell('A2')->setValue('JS link');",
          "22:         $hyperlink2 = new Hyperlink('javascript:alert(\\'hello1\\')');",
          "23:         $sheet->getCell('A2')->setHyperlink($hyperlink2);",
          "24:         $sheet->getCell('A3')->setValue('=HYPERLINK(\"javascript:alert(\\'hello2\\')\", \"jsfunc click\")');",
          "26:         $writer = new Html($spreadsheet);",
          "27:         $html = $writer->generateHTMLAll();",
          "28:         self::assertStringContainsString('<td class=\"column0 style0 s\"><a href=\"http://www.example.com\" title=\"\">Click me</a></td>', $html, 'http hyperlink retained');",
          "29:         self::assertStringContainsString('<td class=\"column0 style0 s\">javascript:alert(\\'hello1\\')</td>', $html, 'javascript hyperlink dropped');",
          "30:         self::assertStringContainsString('<td class=\"column0 style0 f\">javascript:alert(\\'hello2\\')</td>', $html, 'javascript hyperlink function dropped');",
          "31:         $spreadsheet->disconnectWorksheets();",
          "32:     }",
          "33: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cde2926a9e2baf146783f8fd1771bbed7d1dc7b3",
      "candidate_info": {
        "commit_hash": "cde2926a9e2baf146783f8fd1771bbed7d1dc7b3",
        "repo": "PHPOffice/PhpSpreadsheet",
        "commit_url": "https://github.com/PHPOffice/PhpSpreadsheet/commit/cde2926a9e2baf146783f8fd1771bbed7d1dc7b3",
        "files": [
          "src/PhpSpreadsheet/Worksheet/Drawing.php",
          "src/PhpSpreadsheet/Writer/Html.php",
          "tests/PhpSpreadsheetTests/Reader/Html/HtmlImage2Test.php",
          "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php",
          "tests/data/Reader/Xml/sec-w24f.dontuse"
        ],
        "message": "Merge commit from fork\n\n* Security Patch\n\nControl characters should not be allowed in protocol.\n\n* Tighten Up Drawing\n\n* Fix Test",
        "before_after_code_files": [
          "src/PhpSpreadsheet/Worksheet/Drawing.php||src/PhpSpreadsheet/Worksheet/Drawing.php",
          "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php",
          "tests/PhpSpreadsheetTests/Reader/Html/HtmlImage2Test.php||tests/PhpSpreadsheetTests/Reader/Html/HtmlImage2Test.php",
          "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php",
          "tests/data/Reader/Xml/sec-w24f.dontuse||tests/data/Reader/Xml/sec-w24f.dontuse"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php",
            "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php"
          ],
          "candidate": [
            "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php",
            "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/PhpSpreadsheet/Worksheet/Drawing.php||src/PhpSpreadsheet/Worksheet/Drawing.php": [
          "File: src/PhpSpreadsheet/Worksheet/Drawing.php -> src/PhpSpreadsheet/Worksheet/Drawing.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:         $this->path = '';",
          "107:             if (!preg_match('/^(http|https|file|ftp|s3):/', $path)) {",
          "108:                 throw new PhpSpreadsheetException('Invalid protocol for linked drawing');",
          "109:             }",
          "",
          "[Removed Lines]",
          "106:         if (filter_var($path, FILTER_VALIDATE_URL)) {",
          "",
          "[Added Lines]",
          "106:         if (filter_var($path, FILTER_VALIDATE_URL) || (preg_match('/^([\\\\w\\\\s\\\\x00-\\\\x1f]+):/u', $path) && !preg_match('/^([\\\\w]+):/u', $path))) {",
          "",
          "---------------"
        ],
        "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php": [
          "File: src/PhpSpreadsheet/Writer/Html.php -> src/PhpSpreadsheet/Writer/Html.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1601:                 $url = $worksheet->getHyperlink($coordinate)->getUrl();",
          "1602:                 $urlDecode1 = html_entity_decode($url, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8');",
          "1603:                 $urlTrim = Preg::replace('/^\\\\s+/u', '', $urlDecode1);",
          "1605:                 if ($parseScheme && !in_array($matches[1], ['http', 'https', 'file', 'ftp', 'mailto', 's3'], true)) {",
          "1606:                     $cellData = htmlspecialchars($url, Settings::htmlEntityFlags());",
          "1607:                 } else {",
          "1608:                     $tooltip = $worksheet->getHyperlink($coordinate)->getTooltip();",
          "1609:                     $tooltipOut = empty($tooltip) ? '' : (' title=\"' . htmlspecialchars($tooltip) . '\"');",
          "",
          "[Removed Lines]",
          "1604:                 $parseScheme = Preg::isMatch('/^([\\\\w\\\\s]+):/u', strtolower($urlTrim), $matches);",
          "",
          "[Added Lines]",
          "1604:                 $parseScheme = Preg::isMatch('/^([\\\\w\\\\s\\\\x00-\\\\x1f]+):/u', strtolower($urlTrim), $matches);",
          "1607:                     $cellData = self::replaceControlChars($cellData);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1658:         return $html;",
          "1659:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1662:     private static function replaceNonAscii(array $matches): string",
          "1663:     {",
          "1664:         return '&#' . mb_ord($matches[0], 'UTF-8') . ';';",
          "1665:     }",
          "1667:     private static function replaceControlChars(string $convert): string",
          "1668:     {",
          "1669:         return (string) preg_replace_callback(",
          "1670:             '/[\\\\x00-\\\\x1f]/',",
          "1671:             [self::class, 'replaceNonAscii'],",
          "1672:             $convert",
          "1673:         );",
          "1674:     }",
          "",
          "---------------"
        ],
        "tests/PhpSpreadsheetTests/Reader/Html/HtmlImage2Test.php||tests/PhpSpreadsheetTests/Reader/Html/HtmlImage2Test.php": [
          "File: tests/PhpSpreadsheetTests/Reader/Html/HtmlImage2Test.php -> tests/PhpSpreadsheetTests/Reader/Html/HtmlImage2Test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: use PhpOffice\\PhpSpreadsheet\\Exception as SpreadsheetException;",
          "8: use PhpOffice\\PhpSpreadsheet\\Worksheet\\Drawing;",
          "9: use PHPUnit\\Framework\\TestCase;",
          "11: class HtmlImage2Test extends TestCase",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: use PHPUnit\\Framework\\Attributes\\DataProvider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:         self::assertCount(0, $drawingCollection);",
          "50:     }",
          "53:     {",
          "54:         $this->expectException(SpreadsheetException::class);",
          "55:         $this->expectExceptionMessage('Invalid protocol for linked drawing');",
          "57:         $html = '<table>",
          "58:                     <tr>",
          "59:                         <td><img src=\"' . $imagePath . '\" alt=\"test image voil\u00e0\"></td>",
          "",
          "[Removed Lines]",
          "52:     public function testCannotInsertImageBadProtocol(): void",
          "56:         $imagePath = 'httpx://phpspreadsheet.readthedocs.io/en/latest/topics/images/01-03-filter-icon-1.png';",
          "",
          "[Added Lines]",
          "53:     #[DataProvider('providerBadProtocol')]",
          "54:     public function testCannotInsertImageBadProtocol(string $imagePath): void",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:         $filename = HtmlHelper::createHtml($html);",
          "63:         HtmlHelper::loadHtmlIntoSpreadsheet($filename, true);",
          "64:     }",
          "65: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     public static function providerBadProtocol(): array",
          "68:     {",
          "69:         return [",
          "70:             'unknown protocol' => ['httpx://example.com/image.png'],",
          "71:             'embedded whitespace' => ['ht tp://example.com/image.png'],",
          "72:             'control character' => [\"\\x14http://example.com/image.png\"],",
          "73:             'mailto' => ['mailto:xyz@example.com'],",
          "74:             'mailto whitespace' => ['mail to:xyz@example.com'],",
          "75:             'phar' => ['phar://example.com/image.phar'],",
          "76:             'phar control' => [\"\\x14phar://example.com/image.phar\"],",
          "77:         ];",
          "78:     }",
          "",
          "---------------"
        ],
        "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php": [
          "File: tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php -> tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: namespace PhpOffice\\PhpSpreadsheetTests\\Writer\\Html;",
          "7: use PhpOffice\\PhpSpreadsheet\\Reader\\Xlsx as XlsxReader;",
          "8: use PhpOffice\\PhpSpreadsheet\\Writer\\Html as HtmlWriter;",
          "9: use PHPUnit\\Framework\\TestCase;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: use PhpOffice\\PhpSpreadsheet\\Reader\\Xml as XmlReader;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:         $spreadsheet = $reader->load($infile);",
          "18:         $writer = new HtmlWriter($spreadsheet);",
          "19:         $html = $writer->generateHtmlAll();",
          "21:         $spreadsheet->disconnectWorksheets();",
          "22:     }",
          "23: }",
          "",
          "[Removed Lines]",
          "20:         self::assertStringContainsString(\"<td class=\\\"column0 style1 f\\\">jav\\tascript:alert()</td>\", $html);",
          "",
          "[Added Lines]",
          "21:         self::assertStringContainsString('<td class=\"column0 style1 f\">jav&#9;ascript:alert()</td>', $html);",
          "22:         $spreadsheet->disconnectWorksheets();",
          "23:     }",
          "25:     public function testControlCharacter(): void",
          "26:     {",
          "27:         $reader = new XmlReader();",
          "28:         $infile = 'tests/data/Reader/Xml/sec-w24f.dontuse';",
          "29:         $spreadsheet = $reader->load($infile);",
          "30:         $writer = new HtmlWriter($spreadsheet);",
          "31:         $html = $writer->generateHtmlAll();",
          "32:         self::assertStringContainsString('<td class=\"column0 style0 f\">&#20;j&#13;avascript:alert(1)</td>', $html);",
          "",
          "---------------"
        ],
        "tests/data/Reader/Xml/sec-w24f.dontuse||tests/data/Reader/Xml/sec-w24f.dontuse": [
          "File: tests/data/Reader/Xml/sec-w24f.dontuse -> tests/data/Reader/Xml/sec-w24f.dontuse",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?xml version=\"1.0\"?>",
          "2: <?mso-application progid=\"Excel.Sheet\"?>",
          "3: <Workbook xmlns=\"urn:schemas-microsoft-com:office:spreadsheet\"",
          "4:  xmlns:o=\"urn:schemas-microsoft-com:office:office\"",
          "5:  xmlns:x=\"urn:schemas-microsoft-com:office:excel\"",
          "6:  xmlns:ss=\"urn:schemas-microsoft-com:office:spreadsheet\"",
          "7:  xmlns:html=\"http://www.w3.org/TR/REC-html40\">",
          "8:  <DocumentProperties xmlns=\"urn:schemas-microsoft-com:office:office\">",
          "9:   <Author>author</Author>",
          "10:   <LastAuthor>author</LastAuthor>",
          "11:   <Created>2015-06-05T18:19:34Z</Created>",
          "12:   <LastSaved>2024-12-25T10:16:07Z</LastSaved>",
          "13:   <Version>16.00</Version>",
          "14:  </DocumentProperties>",
          "15:  <OfficeDocumentSettings xmlns=\"urn:schemas-microsoft-com:office:office\">",
          "16:   <AllowPNG/>",
          "17:  </OfficeDocumentSettings>",
          "18:  <ExcelWorkbook xmlns=\"urn:schemas-microsoft-com:office:excel\">",
          "19:   <WindowHeight>11020</WindowHeight>",
          "20:   <WindowWidth>19420</WindowWidth>",
          "21:   <WindowTopX>32767</WindowTopX>",
          "22:   <WindowTopY>32767</WindowTopY>",
          "23:   <ProtectStructure>False</ProtectStructure>",
          "24:   <ProtectWindows>False</ProtectWindows>",
          "25:  </ExcelWorkbook>",
          "26:  <Styles>",
          "27:   <Style ss:ID=\"Default\" ss:Name=\"Normal\">",
          "28:    <Alignment ss:Vertical=\"Bottom\"/>",
          "29:    <Borders/>",
          "30:    <Font ss:FontName=\"Calibri\" x:Family=\"Swiss\" ss:Size=\"11\" ss:Color=\"#000000\"/>",
          "31:    <Interior/>",
          "32:    <NumberFormat/>",
          "33:    <Protection/>",
          "34:   </Style>",
          "35:   <Style ss:ID=\"s16\">",
          "36:    <NumberFormat ss:Format=\"General Date\"/>",
          "37:   </Style>",
          "38:  </Styles>",
          "39:  <Worksheet ss:Name=\"\u041b\u0438\u0441\u04421\">",
          "40:   <Table ss:ExpandedColumnCount=\"2\" ss:ExpandedRowCount=\"6\" x:FullColumns=\"1\"",
          "41:    x:FullRows=\"1\" ss:DefaultRowHeight=\"14.5\">",
          "42:    <Column ss:AutoFitWidth=\"0\" ss:Width=\"194\"/>",
          "43:    <Row>",
          "44:      <Cell ss:Formula=\"=HYPERLINK (CHAR(20) &amp; &quot;j&quot; &amp; CHAR(13) &amp; &quot;avascript:alert(1)&quot;)\"><Data ss:Type=\"String\"></Data></Cell>",
          "45:    </Row>",
          "46:   </Table>",
          "47:   <WorksheetOptions xmlns=\"urn:schemas-microsoft-com:office:excel\">",
          "48:    <PageSetup>",
          "49:     <Header x:Margin=\"0.3\"/>",
          "50:     <Footer x:Margin=\"0.3\"/>",
          "51:     <PageMargins x:Bottom=\"0.75\" x:Left=\"0.7\" x:Right=\"0.7\" x:Top=\"0.75\"/>",
          "52:    </PageSetup>",
          "53:    <Selected/>",
          "54:    <TopRowVisible>1</TopRowVisible>",
          "55:    <Panes>",
          "56:     <Pane>",
          "57:      <Number>3</Number>",
          "58:      <ActiveRow>6</ActiveRow>",
          "59:     </Pane>",
          "60:    </Panes>",
          "61:    <ProtectObjects>False</ProtectObjects>",
          "62:    <ProtectScenarios>False</ProtectScenarios>",
          "63:   </WorksheetOptions>",
          "64:  </Worksheet>",
          "65: </Workbook>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b122cd0283943d9ff0c3819cf0884729bde2304",
      "candidate_info": {
        "commit_hash": "9b122cd0283943d9ff0c3819cf0884729bde2304",
        "repo": "PHPOffice/PhpSpreadsheet",
        "commit_url": "https://github.com/PHPOffice/PhpSpreadsheet/commit/9b122cd0283943d9ff0c3819cf0884729bde2304",
        "files": [
          "composer.json",
          "composer.lock",
          "samples/Pdf/21b_Pdf.php",
          "samples/Pdf/21c_Pdf.php",
          "src/PhpSpreadsheet/Shared/StringHelper.php",
          "src/PhpSpreadsheet/Writer/Html.php",
          "src/PhpSpreadsheet/Writer/Ods/Content.php",
          "src/PhpSpreadsheet/Writer/Ods/Formula.php",
          "src/PhpSpreadsheet/Writer/Ods/NamedExpressions.php",
          "src/PhpSpreadsheet/Writer/Ods/Settings.php",
          "src/PhpSpreadsheet/Writer/Xls/Parser.php",
          "src/PhpSpreadsheet/Writer/Xls/Workbook.php",
          "src/PhpSpreadsheet/Writer/Xls/Worksheet.php",
          "src/PhpSpreadsheet/Writer/Xlsx/DefinedNames.php",
          "src/PhpSpreadsheet/Writer/Xlsx/Drawing.php",
          "src/PhpSpreadsheet/Writer/Xlsx/FunctionPrefix.php",
          "src/PhpSpreadsheet/Writer/Xlsx/Worksheet.php",
          "tests/PhpSpreadsheetTests/Writer/Xls/ParserTest.php"
        ],
        "message": "Use Composer/Pcre Part 1 of Many\n\nThe native preg functions (preg_match, preg_replace, etc.) often require us to add a lot of useless boilerplate code to satisfy Phpstan, Scrutinizer, etc. Composer/Pcre offers us a way to remove that boilerplate, thereby giving us a cleaner codebase. I decided to try it on a few modules, and saw a result that clearly demonstrated the usefulness of doing this (aside from the cleaner codebase).\n\nSample 22_Reader_issue1767 reads an Xlsx spreadsheet with complex sheet names used in defined names, and writes it to Xlsx and Xls output files. When I changed Writer/Xls/Parser to use Composer/Pcre, this sample failed in many different places writing the Xls file. It turns out that some regexes were failing not because the string didn't match, but because the regex encountered \"catastrophic backtracing\". Composer/Pcre throws an exception when this happens; the native preg_match does return false, but we were not checking for that. The regexes in question are now changed to something which works, and formal unit tests are added for them. Finding this previously undetected error indicates that we should proceed with this change.\n\nAn alternative to using Composer/Pcre would be to test for false after all the preg calls. I have done this in the two samples changed with this PR. That seems adequate for a small number of changes, but it really just makes for more clutter considering the large number of regexps that we use in our code. I think Composer/Pcre is a better choice.\n\nIt isn't quite transparent. Composer forces all regexps to use PREG_UNMATCHED_AS_NULL, so some match fields will now be null instead of null-string (or non-existent if the unmatched field comes at the end). Our test suite doesn't report any problem (yet) due to this change, although Phpstan is sensitive to it. Several Phpstan annotations were eliminated due to this change, but some others are now needed.\n\nIt is not necessary to do this all at once. This PR addresses all the calls in Writer. I intend to address other components in several tickets.",
        "before_after_code_files": [
          "composer.lock||composer.lock",
          "samples/Pdf/21b_Pdf.php||samples/Pdf/21b_Pdf.php",
          "samples/Pdf/21c_Pdf.php||samples/Pdf/21c_Pdf.php",
          "src/PhpSpreadsheet/Shared/StringHelper.php||src/PhpSpreadsheet/Shared/StringHelper.php",
          "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php",
          "src/PhpSpreadsheet/Writer/Ods/Content.php||src/PhpSpreadsheet/Writer/Ods/Content.php",
          "src/PhpSpreadsheet/Writer/Ods/Formula.php||src/PhpSpreadsheet/Writer/Ods/Formula.php",
          "src/PhpSpreadsheet/Writer/Ods/NamedExpressions.php||src/PhpSpreadsheet/Writer/Ods/NamedExpressions.php",
          "src/PhpSpreadsheet/Writer/Ods/Settings.php||src/PhpSpreadsheet/Writer/Ods/Settings.php",
          "src/PhpSpreadsheet/Writer/Xls/Parser.php||src/PhpSpreadsheet/Writer/Xls/Parser.php",
          "src/PhpSpreadsheet/Writer/Xls/Workbook.php||src/PhpSpreadsheet/Writer/Xls/Workbook.php",
          "src/PhpSpreadsheet/Writer/Xls/Worksheet.php||src/PhpSpreadsheet/Writer/Xls/Worksheet.php",
          "src/PhpSpreadsheet/Writer/Xlsx/DefinedNames.php||src/PhpSpreadsheet/Writer/Xlsx/DefinedNames.php",
          "src/PhpSpreadsheet/Writer/Xlsx/Drawing.php||src/PhpSpreadsheet/Writer/Xlsx/Drawing.php",
          "src/PhpSpreadsheet/Writer/Xlsx/FunctionPrefix.php||src/PhpSpreadsheet/Writer/Xlsx/FunctionPrefix.php",
          "src/PhpSpreadsheet/Writer/Xlsx/Worksheet.php||src/PhpSpreadsheet/Writer/Xlsx/Worksheet.php",
          "tests/PhpSpreadsheetTests/Writer/Xls/ParserTest.php||tests/PhpSpreadsheetTests/Writer/Xls/ParserTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php"
          ],
          "candidate": [
            "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php"
          ]
        }
      },
      "candidate_diff": {
        "composer.lock||composer.lock": [
          "File: composer.lock -> composer.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:         \"Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies\",",
          "5:         \"This file is @generated automatically\"",
          "6:     ],",
          "8:     \"packages\": [",
          "9:         {",
          "10:             \"name\": \"maennchen/zipstream-php\",",
          "11:             \"version\": \"3.1.1\",",
          "",
          "[Removed Lines]",
          "7:     \"content-hash\": \"f7caa2101e268445a358275ee83b90d9\",",
          "",
          "[Added Lines]",
          "7:     \"content-hash\": \"264ef911bd6d773a3a9085bc86b0ea48\",",
          "9:         {",
          "10:             \"name\": \"composer/pcre\",",
          "11:             \"version\": \"3.3.2\",",
          "12:             \"source\": {",
          "13:                 \"type\": \"git\",",
          "14:                 \"url\": \"https://github.com/composer/pcre.git\",",
          "15:                 \"reference\": \"b2bed4734f0cc156ee1fe9c0da2550420d99a21e\"",
          "16:             },",
          "17:             \"dist\": {",
          "18:                 \"type\": \"zip\",",
          "19:                 \"url\": \"https://api.github.com/repos/composer/pcre/zipball/b2bed4734f0cc156ee1fe9c0da2550420d99a21e\",",
          "20:                 \"reference\": \"b2bed4734f0cc156ee1fe9c0da2550420d99a21e\",",
          "21:                 \"shasum\": \"\"",
          "22:             },",
          "23:             \"require\": {",
          "24:                 \"php\": \"^7.4 || ^8.0\"",
          "25:             },",
          "26:             \"conflict\": {",
          "27:                 \"phpstan/phpstan\": \"<1.11.10\"",
          "28:             },",
          "29:             \"require-dev\": {",
          "30:                 \"phpstan/phpstan\": \"^1.12 || ^2\",",
          "31:                 \"phpstan/phpstan-strict-rules\": \"^1 || ^2\",",
          "32:                 \"phpunit/phpunit\": \"^8 || ^9\"",
          "33:             },",
          "34:             \"type\": \"library\",",
          "35:             \"extra\": {",
          "36:                 \"phpstan\": {",
          "37:                     \"includes\": [",
          "38:                         \"extension.neon\"",
          "39:                     ]",
          "40:                 },",
          "41:                 \"branch-alias\": {",
          "42:                     \"dev-main\": \"3.x-dev\"",
          "43:                 }",
          "44:             },",
          "45:             \"autoload\": {",
          "46:                 \"psr-4\": {",
          "47:                     \"Composer\\\\Pcre\\\\\": \"src\"",
          "48:                 }",
          "49:             },",
          "50:             \"notification-url\": \"https://packagist.org/downloads/\",",
          "51:             \"license\": [",
          "52:                 \"MIT\"",
          "53:             ],",
          "54:             \"authors\": [",
          "55:                 {",
          "56:                     \"name\": \"Jordi Boggiano\",",
          "57:                     \"email\": \"j.boggiano@seld.be\",",
          "58:                     \"homepage\": \"http://seld.be\"",
          "59:                 }",
          "60:             ],",
          "61:             \"description\": \"PCRE wrapping library that offers type-safe preg_* replacements.\",",
          "62:             \"keywords\": [",
          "63:                 \"PCRE\",",
          "64:                 \"preg\",",
          "65:                 \"regex\",",
          "66:                 \"regular expression\"",
          "67:             ],",
          "68:             \"support\": {",
          "69:                 \"issues\": \"https://github.com/composer/pcre/issues\",",
          "70:                 \"source\": \"https://github.com/composer/pcre/tree/3.3.2\"",
          "71:             },",
          "72:             \"funding\": [",
          "73:                 {",
          "74:                     \"url\": \"https://packagist.com\",",
          "75:                     \"type\": \"custom\"",
          "76:                 },",
          "77:                 {",
          "78:                     \"url\": \"https://github.com/composer\",",
          "79:                     \"type\": \"github\"",
          "80:                 },",
          "81:                 {",
          "82:                     \"url\": \"https://tidelift.com/funding/github/packagist/composer/composer\",",
          "83:                     \"type\": \"tidelift\"",
          "84:                 }",
          "85:             ],",
          "86:             \"time\": \"2024-11-12T16:29:46+00:00\"",
          "87:         },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "467:             ],",
          "468:             \"time\": \"2022-12-23T10:58:28+00:00\"",
          "469:         },",
          "549:         {",
          "550:             \"name\": \"composer/semver\",",
          "551:             \"version\": \"3.4.2\",",
          "",
          "[Removed Lines]",
          "470:         {",
          "471:             \"name\": \"composer/pcre\",",
          "472:             \"version\": \"3.2.0\",",
          "473:             \"source\": {",
          "474:                 \"type\": \"git\",",
          "475:                 \"url\": \"https://github.com/composer/pcre.git\",",
          "476:                 \"reference\": \"ea4ab6f9580a4fd221e0418f2c357cdd39102a90\"",
          "477:             },",
          "478:             \"dist\": {",
          "479:                 \"type\": \"zip\",",
          "480:                 \"url\": \"https://api.github.com/repos/composer/pcre/zipball/ea4ab6f9580a4fd221e0418f2c357cdd39102a90\",",
          "481:                 \"reference\": \"ea4ab6f9580a4fd221e0418f2c357cdd39102a90\",",
          "482:                 \"shasum\": \"\"",
          "483:             },",
          "484:             \"require\": {",
          "485:                 \"php\": \"^7.4 || ^8.0\"",
          "486:             },",
          "487:             \"conflict\": {",
          "488:                 \"phpstan/phpstan\": \"<1.11.8\"",
          "489:             },",
          "490:             \"require-dev\": {",
          "491:                 \"phpstan/phpstan\": \"^1.11.8\",",
          "492:                 \"phpstan/phpstan-strict-rules\": \"^1.1\",",
          "493:                 \"phpunit/phpunit\": \"^8 || ^9\"",
          "494:             },",
          "495:             \"type\": \"library\",",
          "496:             \"extra\": {",
          "497:                 \"branch-alias\": {",
          "498:                     \"dev-main\": \"3.x-dev\"",
          "499:                 },",
          "500:                 \"phpstan\": {",
          "501:                     \"includes\": [",
          "502:                         \"extension.neon\"",
          "503:                     ]",
          "504:                 }",
          "505:             },",
          "506:             \"autoload\": {",
          "507:                 \"psr-4\": {",
          "508:                     \"Composer\\\\Pcre\\\\\": \"src\"",
          "509:                 }",
          "510:             },",
          "511:             \"notification-url\": \"https://packagist.org/downloads/\",",
          "512:             \"license\": [",
          "513:                 \"MIT\"",
          "514:             ],",
          "515:             \"authors\": [",
          "516:                 {",
          "517:                     \"name\": \"Jordi Boggiano\",",
          "518:                     \"email\": \"j.boggiano@seld.be\",",
          "519:                     \"homepage\": \"http://seld.be\"",
          "520:                 }",
          "521:             ],",
          "522:             \"description\": \"PCRE wrapping library that offers type-safe preg_* replacements.\",",
          "523:             \"keywords\": [",
          "524:                 \"PCRE\",",
          "525:                 \"preg\",",
          "526:                 \"regex\",",
          "527:                 \"regular expression\"",
          "528:             ],",
          "529:             \"support\": {",
          "530:                 \"issues\": \"https://github.com/composer/pcre/issues\",",
          "531:                 \"source\": \"https://github.com/composer/pcre/tree/3.2.0\"",
          "532:             },",
          "533:             \"funding\": [",
          "534:                 {",
          "535:                     \"url\": \"https://packagist.com\",",
          "536:                     \"type\": \"custom\"",
          "537:                 },",
          "538:                 {",
          "539:                     \"url\": \"https://github.com/composer\",",
          "540:                     \"type\": \"github\"",
          "541:                 },",
          "542:                 {",
          "543:                     \"url\": \"https://tidelift.com/funding/github/packagist/composer/composer\",",
          "544:                     \"type\": \"tidelift\"",
          "545:                 }",
          "546:             ],",
          "547:             \"time\": \"2024-07-25T09:36:02+00:00\"",
          "548:         },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "samples/Pdf/21b_Pdf.php||samples/Pdf/21b_Pdf.php": [
          "File: samples/Pdf/21b_Pdf.php -> samples/Pdf/21b_Pdf.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <?php",
          "3: use PhpOffice\\PhpSpreadsheet\\IOFactory;",
          "4: use PhpOffice\\PhpSpreadsheet\\Worksheet\\PageSetup;",
          "5: use PhpOffice\\PhpSpreadsheet\\Writer\\Pdf\\Dompdf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: use PhpOffice\\PhpSpreadsheet\\Exception as SpreadsheetException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:         </body>",
          "22:         EOF;",
          "25: }",
          "27: require __DIR__ . '/../Header.php';",
          "",
          "[Removed Lines]",
          "24:     return preg_replace($bodystring, $bodyrepl, $html) ?? '';",
          "",
          "[Added Lines]",
          "25:     return preg_replace($bodystring, $bodyrepl, $html) ?? throw new SpreadsheetException('preg failed');",
          "",
          "---------------"
        ],
        "samples/Pdf/21c_Pdf.php||samples/Pdf/21c_Pdf.php": [
          "File: samples/Pdf/21c_Pdf.php -> samples/Pdf/21c_Pdf.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <?php",
          "3: use PhpOffice\\PhpSpreadsheet\\IOFactory;",
          "4: use PhpOffice\\PhpSpreadsheet\\Spreadsheet;",
          "5: use PhpOffice\\PhpSpreadsheet\\Writer\\Pdf\\Mpdf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: use PhpOffice\\PhpSpreadsheet\\Exception as SpreadsheetException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:         odd-footer-name: html_myFooter2;",
          "18:         EOF;",
          "20:     $bodystring = '/<body>/';",
          "21:     $simulatedBodyStart = Mpdf::SIMULATED_BODY_START;",
          "22:     $bodyrepl = <<<EOF",
          "",
          "[Removed Lines]",
          "19:     $html = preg_replace('/@page page0 {/', $pagerepl, $html) ?? '';",
          "",
          "[Added Lines]",
          "20:     $html = preg_replace('/@page page0 {/', $pagerepl, $html) ?? throw new SpreadsheetException('preg 1 failed');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:         EOF;",
          "44: }",
          "46: $spreadsheet = new Spreadsheet();",
          "",
          "[Removed Lines]",
          "43:     return preg_replace($bodystring, $bodyrepl, $html) ?? '';",
          "",
          "[Added Lines]",
          "44:     return preg_replace($bodystring, $bodyrepl, $html) ?? throw new SpreadsheetException('preg 2 failed');",
          "",
          "---------------"
        ],
        "src/PhpSpreadsheet/Shared/StringHelper.php||src/PhpSpreadsheet/Shared/StringHelper.php": [
          "File: src/PhpSpreadsheet/Shared/StringHelper.php -> src/PhpSpreadsheet/Shared/StringHelper.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "639:         return (is_numeric(substr($textValue, 0, strlen((string) $v)))) ? $v : $textValue;",
          "640:     }",
          "641: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "642:     public static function strlenAllowNull(?string $string): int",
          "643:     {",
          "644:         return strlen(\"$string\");",
          "645:     }",
          "",
          "---------------"
        ],
        "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php": [
          "File: src/PhpSpreadsheet/Writer/Html.php -> src/PhpSpreadsheet/Writer/Html.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace PhpOffice\\PhpSpreadsheet\\Writer;",
          "5: use PhpOffice\\PhpSpreadsheet\\Calculation\\Calculation;",
          "6: use PhpOffice\\PhpSpreadsheet\\Cell\\Cell;",
          "7: use PhpOffice\\PhpSpreadsheet\\Cell\\Coordinate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: use Composer\\Pcre\\Preg;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "646:                 $filename = $drawing->getPath();",
          "652:                 $filename = $this->getImagesRoot() . $filename;",
          "658:                 $filename = htmlspecialchars($filename, Settings::htmlEntityFlags());",
          "",
          "[Removed Lines]",
          "649:                 $filename = (string) preg_replace('/^[.]/', '', $filename);",
          "655:                 $filename = (string) preg_replace('@^[.]([^/])@', '$1', $filename);",
          "",
          "[Added Lines]",
          "650:                 $filename = Preg::replace('/^[.]/', '', $filename);",
          "656:                 $filename = Preg::replace('@^[.]([^/])@', '$1', $filename);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1417:             $cellData = nl2br($cellData);",
          "",
          "[Removed Lines]",
          "1414:             $cellData = (string) preg_replace('/(?m)(?:^|\\\\G) /', '&nbsp;', $cellData);",
          "",
          "[Added Lines]",
          "1415:             $cellData = Preg::replace('/(?m)(?:^|\\\\G) /', '&nbsp;', $cellData);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1587:             if ($worksheet->hyperlinkExists($coordinate) && !$worksheet->getHyperlink($coordinate)->isInternal()) {",
          "1588:                 $url = $worksheet->getHyperlink($coordinate)->getUrl();",
          "1589:                 $urlDecode1 = html_entity_decode($url, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8');",
          "1593:                     $cellData = htmlspecialchars($url, Settings::htmlEntityFlags());",
          "1594:                 } else {",
          "1595:                     $cellData = '<a href=\"' . htmlspecialchars($url, Settings::htmlEntityFlags()) . '\" title=\"' . htmlspecialchars($worksheet->getHyperlink($coordinate)->getTooltip(), Settings::htmlEntityFlags()) . '\">' . $cellData . '</a>';",
          "",
          "[Removed Lines]",
          "1590:                 $urlTrim = preg_replace('/^\\\\s+/u', '', $urlDecode1) ?? $urlDecode1;",
          "1591:                 $parseScheme = preg_match('/^([\\\\w\\\\s]+):/u', strtolower($urlTrim), $matches);",
          "1592:                 if ($parseScheme === 1 && !in_array($matches[1], ['http', 'https', 'file', 'ftp', 's3'], true)) {",
          "",
          "[Added Lines]",
          "1591:                 $urlTrim = Preg::replace('/^\\\\s+/u', '', $urlDecode1);",
          "1592:                 $parseScheme = Preg::isMatch('/^([\\\\w\\\\s]+):/u', strtolower($urlTrim), $matches);",
          "1593:                 if ($parseScheme && !in_array($matches[1], ['http', 'https', 'file', 'ftp', 's3'], true)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1738:         $matches = [];",
          "1740:         $color_regex = '/^\\\\[[a-zA-Z]+\\\\]/';",
          "1743:             $color = strtolower($color);",
          "1744:         }",
          "",
          "[Removed Lines]",
          "1741:         if (preg_match($color_regex, $format, $matches)) {",
          "1742:             $color = str_replace(['[', ']'], '', $matches[0]);",
          "",
          "[Added Lines]",
          "1742:         if (Preg::isMatch($color_regex, $format, $matches)) {",
          "1743:             $color = str_replace(['[', ']'], '', $matches[0]); // @phpstan-ignore-line",
          "",
          "---------------"
        ],
        "src/PhpSpreadsheet/Writer/Ods/Content.php||src/PhpSpreadsheet/Writer/Ods/Content.php": [
          "File: src/PhpSpreadsheet/Writer/Ods/Content.php -> src/PhpSpreadsheet/Writer/Ods/Content.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace PhpOffice\\PhpSpreadsheet\\Writer\\Ods;",
          "5: use PhpOffice\\PhpSpreadsheet\\Calculation\\Calculation;",
          "6: use PhpOffice\\PhpSpreadsheet\\Calculation\\Exception as CalculationException;",
          "7: use PhpOffice\\PhpSpreadsheet\\Cell\\Cell;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: use Composer\\Pcre\\Preg;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:                         }",
          "228:                     }",
          "229:                     if (isset($attributes['ref'])) {",
          "231:                             $matrixRowSpan = 1;",
          "232:                             $matrixColSpan = 1;",
          "233:                             if (isset($matches[3])) {",
          "234:                                 $minRow = (int) $matches[2];",
          "237:                                 $matrixRowSpan = $maxRow - $minRow + 1;",
          "238:                                 $minCol = Coordinate::columnIndexFromString($matches[1]);",
          "240:                                 $matrixColSpan = $maxCol - $minCol + 1;",
          "241:                             }",
          "242:                             $objWriter->writeAttribute('table:number-matrix-columns-spanned', \"$matrixColSpan\");",
          "",
          "[Removed Lines]",
          "230:                         if (preg_match('/^([A-Z]{1,3})([0-9]{1,7})(:([A-Z]{1,3})([0-9]{1,7}))?$/', (string) $attributes['ref'], $matches) == 1) {",
          "236:                                 $maxRow = (int) $matches[5]; // @phpstan-ignore-line",
          "239:                                 $maxCol = Coordinate::columnIndexFromString($matches[4]); // @phpstan-ignore-line",
          "",
          "[Added Lines]",
          "231:                         if (Preg::isMatch('/^([A-Z]{1,3})([0-9]{1,7})(:([A-Z]{1,3})([0-9]{1,7}))?$/', (string) $attributes['ref'], $matches)) {",
          "237:                                 $maxRow = (int) $matches[5];",
          "240:                                 $maxCol = Coordinate::columnIndexFromString($matches[4]);",
          "",
          "---------------"
        ],
        "src/PhpSpreadsheet/Writer/Ods/Formula.php||src/PhpSpreadsheet/Writer/Ods/Formula.php": [
          "File: src/PhpSpreadsheet/Writer/Ods/Formula.php -> src/PhpSpreadsheet/Writer/Ods/Formula.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace PhpOffice\\PhpSpreadsheet\\Writer\\Ods;",
          "5: use PhpOffice\\PhpSpreadsheet\\Calculation\\Calculation;",
          "6: use PhpOffice\\PhpSpreadsheet\\DefinedName;",
          "8: class Formula",
          "9: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: use Composer\\Pcre\\Preg;",
          "8: use PhpOffice\\PhpSpreadsheet\\Shared\\StringHelper;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:     private function convertDefinedNames(string $formula): string",
          "35:     {",
          "37:             '/' . Calculation::CALCULATION_REGEXP_DEFINEDNAME . '/mui',",
          "38:             $formula,",
          "41:         );",
          "44:         $offsets = array_column($splitRanges[0], 1);",
          "45:         $values = array_column($splitRanges[0], 0);",
          "",
          "[Removed Lines]",
          "36:         $splitCount = preg_match_all(",
          "39:             $splitRanges,",
          "40:             PREG_OFFSET_CAPTURE",
          "43:         $lengths = array_map('strlen', array_column($splitRanges[0], 0));",
          "",
          "[Added Lines]",
          "38:         $splitCount = Preg::matchAllWithOffsets(",
          "41:             $splitRanges",
          "44:         $lengths = array_map([StringHelper::class, 'strlenAllowNull'], array_column($splitRanges[0], 0));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:     private function convertCellReferences(string $formula, string $worksheetName): string",
          "62:     {",
          "64:             '/' . Calculation::CALCULATION_REGEXP_CELLREF_RELATIVE . '/mui',",
          "65:             $formula,",
          "68:         );",
          "71:         $offsets = array_column($splitRanges[0], 1);",
          "73:         $worksheets = $splitRanges[2];",
          "",
          "[Removed Lines]",
          "63:         $splitCount = preg_match_all(",
          "66:             $splitRanges,",
          "67:             PREG_OFFSET_CAPTURE",
          "70:         $lengths = array_map('strlen', array_column($splitRanges[0], 0));",
          "",
          "[Added Lines]",
          "64:         $splitCount = Preg::matchAllWithOffsets(",
          "67:             $splitRanges",
          "70:         $lengths = array_map([StringHelper::class, 'strlenAllowNull'], array_column($splitRanges[0], 0));",
          "",
          "---------------"
        ],
        "src/PhpSpreadsheet/Writer/Ods/NamedExpressions.php||src/PhpSpreadsheet/Writer/Ods/NamedExpressions.php": [
          "File: src/PhpSpreadsheet/Writer/Ods/NamedExpressions.php -> src/PhpSpreadsheet/Writer/Ods/NamedExpressions.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace PhpOffice\\PhpSpreadsheet\\Writer\\Ods;",
          "5: use PhpOffice\\PhpSpreadsheet\\Calculation\\Calculation;",
          "6: use PhpOffice\\PhpSpreadsheet\\DefinedName;",
          "7: use PhpOffice\\PhpSpreadsheet\\Shared\\XMLWriter;",
          "8: use PhpOffice\\PhpSpreadsheet\\Spreadsheet;",
          "9: use PhpOffice\\PhpSpreadsheet\\Worksheet\\Worksheet;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: use Composer\\Pcre\\Preg;",
          "8: use PhpOffice\\PhpSpreadsheet\\Shared\\StringHelper;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:     private function convertAddress(DefinedName $definedName, string $address): string",
          "82:     {",
          "84:             '/' . Calculation::CALCULATION_REGEXP_CELLREF_RELATIVE . '/mui',",
          "85:             $address,",
          "88:         );",
          "91:         $offsets = array_column($splitRanges[0], 1);",
          "93:         $worksheets = $splitRanges[2];",
          "",
          "[Removed Lines]",
          "83:         $splitCount = preg_match_all(",
          "86:             $splitRanges,",
          "87:             PREG_OFFSET_CAPTURE",
          "90:         $lengths = array_map('strlen', array_column($splitRanges[0], 0));",
          "",
          "[Added Lines]",
          "85:         $splitCount = Preg::matchAllWithOffsets(",
          "88:             $splitRanges",
          "91:         $lengths = array_map([StringHelper::class, 'strlenAllowNull'], array_column($splitRanges[0], 0));",
          "",
          "---------------"
        ],
        "src/PhpSpreadsheet/Writer/Ods/Settings.php||src/PhpSpreadsheet/Writer/Ods/Settings.php": [
          "File: src/PhpSpreadsheet/Writer/Ods/Settings.php -> src/PhpSpreadsheet/Writer/Ods/Settings.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace PhpOffice\\PhpSpreadsheet\\Writer\\Ods;",
          "5: use PhpOffice\\PhpSpreadsheet\\Cell\\CellAddress;",
          "6: use PhpOffice\\PhpSpreadsheet\\Cell\\Coordinate;",
          "7: use PhpOffice\\PhpSpreadsheet\\Shared\\XMLWriter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: use Composer\\Pcre\\Preg;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:     private function writeSelectedCells(XMLWriter $objWriter, Worksheet $worksheet): void",
          "98:     {",
          "99:         $selected = $worksheet->getSelectedCells();",
          "101:             $colSel = Coordinate::columnIndexFromString($matches[1]) - 1;",
          "102:             $rowSel = (int) $matches[2] - 1;",
          "103:             $objWriter->startElement('config:config-item');",
          "",
          "[Removed Lines]",
          "100:         if (preg_match('/^([a-z]+)([0-9]+)/i', $selected, $matches) === 1) {",
          "",
          "[Added Lines]",
          "101:         if (Preg::isMatch('/^([a-z]+)([0-9]+)/i', $selected, $matches)) {",
          "",
          "---------------"
        ],
        "src/PhpSpreadsheet/Writer/Xls/Parser.php||src/PhpSpreadsheet/Writer/Xls/Parser.php": [
          "File: src/PhpSpreadsheet/Writer/Xls/Parser.php -> src/PhpSpreadsheet/Writer/Xls/Parser.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace PhpOffice\\PhpSpreadsheet\\Writer\\Xls;",
          "5: use PhpOffice\\PhpSpreadsheet\\Calculation\\Calculation;",
          "6: use PhpOffice\\PhpSpreadsheet\\Shared\\StringHelper;",
          "7: use PhpOffice\\PhpSpreadsheet\\Spreadsheet;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: use Composer\\Pcre\\Preg;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "48:     const REGEX_SHEET_TITLE_QUOTED = '(([^\\*\\:\\/\\\\\\\\\\?\\[\\]\\\\\\'])+|(\\\\\\'\\\\\\')+)+';",
          "",
          "[Added Lines]",
          "52:     const REGEX_SHEET_TITLE_QUOTED = \"([^*:/\\\\\\\\?\\[\\]']|'')+\";",
          "54:     const REGEX_CELL_TITLE_QUOTED = \"~^'\"",
          "55:         . self::REGEX_SHEET_TITLE_QUOTED",
          "56:         . '(:' . self::REGEX_SHEET_TITLE_QUOTED . ')?'",
          "57:         . \"'!(*COMMIT)\"",
          "58:         . '[$]?[A-Ia-i]?[A-Za-z][$]?(\\\\d+)'",
          "59:         . '$~u';",
          "61:     const REGEX_RANGE_TITLE_QUOTED = \"~^'\"",
          "62:         . self::REGEX_SHEET_TITLE_QUOTED",
          "63:         . '(:' . self::REGEX_SHEET_TITLE_QUOTED . ')?'",
          "64:         . \"'!(*COMMIT)\"",
          "65:         . '[$]?[A-Ia-i]?[A-Za-z][$]?(\\\\d+)'",
          "66:         . ':'",
          "67:         . '[$]?[A-Ia-i]?[A-Za-z][$]?(\\\\d+)'",
          "68:         . '$~u';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "479:     private function convert(string $token): string",
          "480:     {",
          "482:             return $this->convertString($token);",
          "483:         }",
          "484:         if (is_numeric($token)) {",
          "485:             return $this->convertNumber($token);",
          "486:         }",
          "489:             return $this->convertRef2d($token);",
          "490:         }",
          "493:             return $this->convertRef3d($token);",
          "494:         }",
          "497:             return $this->convertRef3d($token);",
          "498:         }",
          "501:             return $this->convertRange2d($token);",
          "502:         }",
          "505:             return $this->convertRange3d($token);",
          "506:         }",
          "509:             return $this->convertRange3d($token);",
          "510:         }",
          "",
          "[Removed Lines]",
          "481:         if (preg_match('/\"([^\"]|\"\"){0,255}\"/', $token)) {",
          "488:         if (preg_match('/^\\$?([A-Ia-i]?[A-Za-z])\\$?(\\d+)$/', $token)) {",
          "492:         if (preg_match('/^' . self::REGEX_SHEET_TITLE_UNQUOTED . '(\\\\:' . self::REGEX_SHEET_TITLE_UNQUOTED . ')?\\\\!\\$?[A-Ia-i]?[A-Za-z]\\$?(\\\\d+)$/u', $token)) {",
          "496:         if (preg_match(\"/^'\" . self::REGEX_SHEET_TITLE_QUOTED . '(\\\\:' . self::REGEX_SHEET_TITLE_QUOTED . \")?'\\\\!\\\\$?[A-Ia-i]?[A-Za-z]\\\\$?(\\\\d+)$/u\", $token)) {",
          "500:         if (preg_match('/^(\\$)?[A-Ia-i]?[A-Za-z](\\$)?(\\d+)\\:(\\$)?[A-Ia-i]?[A-Za-z](\\$)?(\\d+)$/', $token)) {",
          "504:         if (preg_match('/^' . self::REGEX_SHEET_TITLE_UNQUOTED . '(\\\\:' . self::REGEX_SHEET_TITLE_UNQUOTED . ')?\\\\!\\$?([A-Ia-i]?[A-Za-z])?\\$?(\\\\d+)\\\\:\\$?([A-Ia-i]?[A-Za-z])?\\$?(\\\\d+)$/u', $token)) {",
          "508:         if (preg_match(\"/^'\" . self::REGEX_SHEET_TITLE_QUOTED . '(\\\\:' . self::REGEX_SHEET_TITLE_QUOTED . \")?'\\\\!\\\\$?([A-Ia-i]?[A-Za-z])?\\\\$?(\\\\d+)\\\\:\\\\$?([A-Ia-i]?[A-Za-z])?\\\\$?(\\\\d+)$/u\", $token)) {",
          "",
          "[Added Lines]",
          "501:         if (Preg::isMatch('/\"([^\"]|\"\"){0,255}\"/', $token)) {",
          "508:         if (Preg::isMatch('/^\\$?([A-Ia-i]?[A-Za-z])\\$?(\\d+)$/', $token)) {",
          "512:         if (Preg::isMatch('/^' . self::REGEX_SHEET_TITLE_UNQUOTED . '(\\\\:' . self::REGEX_SHEET_TITLE_UNQUOTED . ')?\\\\!\\$?[A-Ia-i]?[A-Za-z]\\$?(\\\\d+)$/u', $token)) {",
          "516:         if (self::matchCellSheetnameQuoted($token)) {",
          "520:         if (Preg::isMatch('/^(\\$)?[A-Ia-i]?[A-Za-z](\\$)?(\\d+)\\:(\\$)?[A-Ia-i]?[A-Za-z](\\$)?(\\d+)$/', $token)) {",
          "524:         if (Preg::isMatch('/^' . self::REGEX_SHEET_TITLE_UNQUOTED . '(\\\\:' . self::REGEX_SHEET_TITLE_UNQUOTED . ')?\\\\!\\$?([A-Ia-i]?[A-Za-z])?\\$?(\\\\d+)\\\\:\\$?([A-Ia-i]?[A-Za-z])?\\$?(\\\\d+)$/u', $token)) {",
          "528:         if (self::matchRangeSheetnameQuoted($token)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "513:             return pack('C', $this->ptg[$token]);",
          "514:         }",
          "517:             return $this->convertError($token);",
          "518:         }",
          "520:             return $this->convertDefinedName($token);",
          "521:         }",
          "524:         {",
          "525:             return($this->convertFunction($token, $this->_func_args));",
          "",
          "[Removed Lines]",
          "516:         if (preg_match('/^#[A-Z0\\\\/]{3,5}[!?]{1}$/', $token) || $token == '#N/A') {",
          "519:         if (preg_match('/^' . Calculation::CALCULATION_REGEXP_DEFINEDNAME . '$/mui', $token) && $this->spreadsheet->getDefinedName($token) !== null) {",
          "",
          "[Added Lines]",
          "536:         if (Preg::isMatch('/^#[A-Z0\\\\/]{3,5}[!?]{1}$/', $token) || $token == '#N/A') {",
          "539:         if (Preg::isMatch('/^' . Calculation::CALCULATION_REGEXP_DEFINEDNAME . '$/mui', $token) && $this->spreadsheet->getDefinedName($token) !== null) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "528:         if ($token == 'arg') {",
          "529:             return '';",
          "530:         }",
          "532:             return $this->convertBool(1);",
          "533:         }",
          "535:             return $this->convertBool(0);",
          "536:         }",
          "",
          "[Removed Lines]",
          "531:         if (preg_match('/^true$/i', $token)) {",
          "534:         if (preg_match('/^false$/i', $token)) {",
          "",
          "[Added Lines]",
          "551:         if (Preg::isMatch('/^true$/i', $token)) {",
          "554:         if (Preg::isMatch('/^false$/i', $token)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "547:     private function convertNumber(mixed $num): string",
          "548:     {",
          "551:             return pack('Cv', $this->ptg['ptgInt'], $num);",
          "552:         }",
          "",
          "[Removed Lines]",
          "550:         if ((preg_match('/^\\\\d+$/', (string) $num)) && ($num <= 65535)) {",
          "",
          "[Added Lines]",
          "570:         if ((Preg::isMatch('/^\\\\d+$/', (string) $num)) && ($num <= 65535)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "613:     {",
          "617:             [$cell1, $cell2] = explode(':', $range);",
          "618:         } else {",
          "",
          "[Removed Lines]",
          "616:         if (preg_match('/^(\\$)?([A-Ia-i]?[A-Za-z])(\\$)?(\\d+)\\:(\\$)?([A-Ia-i]?[A-Za-z])(\\$)?(\\d+)$/', $range)) {",
          "",
          "[Added Lines]",
          "636:         if (Preg::isMatch('/^(\\$)?([A-Ia-i]?[A-Za-z])(\\$)?(\\d+)\\:(\\$)?([A-Ia-i]?[A-Za-z])(\\$)?(\\d+)$/', $range)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "658:         [$cell1, $cell2] = explode(':', $range ?? '');",
          "662:             [$row1, $col1] = $this->cellToPackedRowcol($cell1);",
          "663:             [$row2, $col2] = $this->cellToPackedRowcol($cell2);",
          "664:         } else { // It's a rows range (like 26:27)",
          "",
          "[Removed Lines]",
          "661:         if (preg_match('/^(\\$)?[A-Ia-i]?[A-Za-z](\\$)?(\\\\d+)$/', $cell1)) {",
          "",
          "[Added Lines]",
          "681:         if (Preg::isMatch('/^(\\$)?[A-Ia-i]?[A-Za-z](\\$)?(\\\\d+)$/', $cell1)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "775:     private function getRefIndex(string $ext_ref): string",
          "776:     {",
          "778:         $ext_ref = str_replace('\\'\\'', '\\'', $ext_ref); // Replace escaped '' with '",
          "782:             [$sheet_name1, $sheet_name2] = explode(':', $ext_ref);",
          "784:             $sheet1 = $this->getSheetIndex($sheet_name1);",
          "",
          "[Removed Lines]",
          "777:         $ext_ref = (string) preg_replace([\"/^'/\", \"/'$/\"], ['', ''], $ext_ref); // Remove leading and trailing ' if any.",
          "781:         if (preg_match('/:/', $ext_ref)) {",
          "",
          "[Added Lines]",
          "797:         $ext_ref = Preg::replace([\"/^'/\", \"/'$/\"], ['', ''], $ext_ref); // Remove leading and trailing ' if any.",
          "801:         if (Preg::isMatch('/:/', $ext_ref)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "895:     private function rangeToPackedRange(string $range): array",
          "896:     {",
          "899:             throw new WriterException('Regexp failure in rangeToPackedRange');",
          "",
          "[Removed Lines]",
          "897:         if (preg_match('/(\\$)?(\\d+)\\:(\\$)?(\\d+)/', $range, $match) !== 1) {",
          "",
          "[Added Lines]",
          "917:         if (!Preg::isMatch('/(\\$)?(\\d+)\\:(\\$)?(\\d+)/', $range, $match)) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "938:     private function cellToRowcol(string $cell): array",
          "939:     {",
          "942:             throw new WriterException('Regexp failure in cellToRowcol');",
          "",
          "[Removed Lines]",
          "940:         if (preg_match('/(\\$)?([A-I]?[A-Z])(\\$)?(\\d+)/', $cell, $match) !== 1) {",
          "",
          "[Added Lines]",
          "960:         if (!Preg::isMatch('/(\\$)?([A-I]?[A-Z])(\\$)?(\\d+)/', $cell, $match)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "949:         $row = $match[4];",
          "953:         $col = 0;",
          "955:         for ($i = 0; $i < $col_ref_length; ++$i) {",
          "957:             --$expn;",
          "958:         }",
          "",
          "[Removed Lines]",
          "952:         $expn = strlen($col_ref) - 1;",
          "954:         $col_ref_length = strlen($col_ref);",
          "956:             $col += (ord($col_ref[$i]) - 64) * 26 ** $expn;",
          "",
          "[Added Lines]",
          "972:         $expn = strlen($col_ref) - 1; // @phpstan-ignore-line",
          "974:         $col_ref_length = strlen($col_ref); // @phpstan-ignore-line",
          "976:             $col += (ord($col_ref[$i]) - 64) * 26 ** $expn; // @phpstan-ignore-line",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1053:         }",
          "1057:             return $token;",
          "1058:         }",
          "1061:             return $token;",
          "1062:         }",
          "1065:             return $token;",
          "1066:         }",
          "1069:             return $token;",
          "1070:         }",
          "1073:             return $token;",
          "1074:         }",
          "1077:             return $token;",
          "1078:         }",
          "1080:         if (is_numeric($token) && (!is_numeric($token . $this->lookAhead) || ($this->lookAhead == '')) && ($this->lookAhead !== '!') && ($this->lookAhead !== ':')) {",
          "1081:             return $token;",
          "1082:         }",
          "1085:             return $token;",
          "1086:         }",
          "1089:             return $token;",
          "1090:         }",
          "1093:             return $token;",
          "1094:         }",
          "1096:             return $token;",
          "1097:         }",
          "1099:             return $token;",
          "1100:         }",
          "1102:             return $token;",
          "1103:         }",
          "1104:         if (str_ends_with($token, ')')) {",
          "",
          "[Removed Lines]",
          "1056:         if (preg_match('/^\\$?[A-Ia-i]?[A-Za-z]\\$?\\d+$/', $token) && !preg_match('/\\d/', $this->lookAhead) && ($this->lookAhead !== ':') && ($this->lookAhead !== '.') && ($this->lookAhead !== '!')) {",
          "1060:         if (preg_match('/^' . self::REGEX_SHEET_TITLE_UNQUOTED . '(\\\\:' . self::REGEX_SHEET_TITLE_UNQUOTED . ')?\\\\!\\$?[A-Ia-i]?[A-Za-z]\\$?\\\\d+$/u', $token) && !preg_match('/\\d/', $this->lookAhead) && ($this->lookAhead !== ':') && ($this->lookAhead !== '.')) {",
          "1064:         if (preg_match(\"/^'\" . self::REGEX_SHEET_TITLE_QUOTED . '(\\\\:' . self::REGEX_SHEET_TITLE_QUOTED . \")?'\\\\!\\\\$?[A-Ia-i]?[A-Za-z]\\\\$?\\\\d+$/u\", $token) && !preg_match('/\\d/', $this->lookAhead) && ($this->lookAhead !== ':') && ($this->lookAhead !== '.')) {",
          "1068:         if (preg_match('/^(\\$)?[A-Ia-i]?[A-Za-z](\\$)?\\d+:(\\$)?[A-Ia-i]?[A-Za-z](\\$)?\\d+$/', $token) && !preg_match('/\\d/', $this->lookAhead)) {",
          "1072:         if (preg_match('/^' . self::REGEX_SHEET_TITLE_UNQUOTED . '(\\\\:' . self::REGEX_SHEET_TITLE_UNQUOTED . ')?\\\\!\\$?([A-Ia-i]?[A-Za-z])?\\$?\\\\d+:\\$?([A-Ia-i]?[A-Za-z])?\\$?\\\\d+$/u', $token) && !preg_match('/\\d/', $this->lookAhead)) {",
          "1076:         if (preg_match(\"/^'\" . self::REGEX_SHEET_TITLE_QUOTED . '(\\\\:' . self::REGEX_SHEET_TITLE_QUOTED . \")?'\\\\!\\\\$?([A-Ia-i]?[A-Za-z])?\\\\$?\\\\d+:\\\\$?([A-Ia-i]?[A-Za-z])?\\\\$?\\\\d+$/u\", $token) && !preg_match('/\\d/', $this->lookAhead)) {",
          "1083:         if (preg_match('/\"([^\"]|\"\"){0,255}\"/', $token) && $this->lookAhead !== '\"' && (substr_count($token, '\"') % 2 == 0)) {",
          "1088:         if (preg_match('/^#[A-Z0\\\\/]{3,5}[!?]{1}$/', $token) || $token === '#N/A') {",
          "1092:         if (preg_match(\"/^[A-Z0-9\\xc0-\\xdc\\\\.]+$/i\", $token) && ($this->lookAhead === '(')) {",
          "1095:         if (preg_match('/^' . Calculation::CALCULATION_REGEXP_DEFINEDNAME . '$/miu', $token) && $this->spreadsheet->getDefinedName($token) !== null) {",
          "1098:         if (preg_match('/^true$/i', $token) && ($this->lookAhead === ')' || $this->lookAhead === ',')) {",
          "1101:         if (preg_match('/^false$/i', $token) && ($this->lookAhead === ')' || $this->lookAhead === ',')) {",
          "",
          "[Added Lines]",
          "1076:         if (",
          "1077:             Preg::isMatch('/^\\$?[A-Ia-i]?[A-Za-z]\\$?\\d+$/', $token)",
          "1078:             && !Preg::isMatch('/\\d/', $this->lookAhead)",
          "1079:             && ($this->lookAhead !== ':')",
          "1080:             && ($this->lookAhead !== '.')",
          "1081:             && ($this->lookAhead !== '!')",
          "1082:         ) {",
          "1086:         if (",
          "1087:             Preg::isMatch('/^' . self::REGEX_SHEET_TITLE_UNQUOTED . '(\\\\:' . self::REGEX_SHEET_TITLE_UNQUOTED . ')?\\\\!\\$?[A-Ia-i]?[A-Za-z]\\$?\\\\d+$/u', $token)",
          "1088:             && !Preg::isMatch('/\\d/', $this->lookAhead)",
          "1089:             && ($this->lookAhead !== ':')",
          "1090:             && ($this->lookAhead !== '.')",
          "1091:         ) {",
          "1095:         if (",
          "1096:             self::matchCellSheetnameQuoted($token)",
          "1097:             && !Preg::isMatch('/\\\\d/', $this->lookAhead)",
          "1098:             && ($this->lookAhead !== ':') && ($this->lookAhead !== '.')",
          "1099:         ) {",
          "1103:         if (",
          "1104:             Preg::isMatch(",
          "1105:                 '/^(\\$)?[A-Ia-i]?[A-Za-z](\\$)?\\d+:(\\$)?[A-Ia-i]?[A-Za-z](\\$)?\\d+$/',",
          "1106:                 $token",
          "1107:             )",
          "1108:             && !Preg::isMatch('/\\d/', $this->lookAhead)",
          "1109:         ) {",
          "1113:         if (",
          "1114:             Preg::isMatch(",
          "1115:                 '/^'",
          "1116:                 . self::REGEX_SHEET_TITLE_UNQUOTED",
          "1117:                 . '(\\\\:' . self::REGEX_SHEET_TITLE_UNQUOTED",
          "1118:                 . ')?\\\\!\\$?([A-Ia-i]?[A-Za-z])?\\$?\\\\d+:\\$?([A-Ia-i]?[A-Za-z])?\\$?\\\\d+$/u',",
          "1119:                 $token",
          "1120:             )",
          "1121:             && !Preg::isMatch('/\\d/', $this->lookAhead)",
          "1122:         ) {",
          "1126:         if (",
          "1127:             self::matchRangeSheetnameQuoted($token)",
          "1128:             && !Preg::isMatch('/\\\\d/', $this->lookAhead)",
          "1129:         ) {",
          "1136:         if (",
          "1137:             Preg::isMatch('/\"([^\"]|\"\"){0,255}\"/', $token)",
          "1138:             && $this->lookAhead !== '\"'",
          "1139:             && (substr_count($token, '\"') % 2 == 0)",
          "1140:         ) {",
          "1145:         if (",
          "1146:             Preg::isMatch('/^#[A-Z0\\\\/]{3,5}[!?]{1}$/', $token)",
          "1147:             || $token === '#N/A'",
          "1148:         ) {",
          "1152:         if (",
          "1153:             Preg::isMatch(\"/^[A-Z0-9\\xc0-\\xdc\\\\.]+$/i\", $token)",
          "1154:             && ($this->lookAhead === '(')",
          "1155:         ) {",
          "1158:         if (",
          "1159:             Preg::isMatch(",
          "1160:                 '/^'",
          "1161:                 . Calculation::CALCULATION_REGEXP_DEFINEDNAME",
          "1162:                 . '$/miu',",
          "1163:                 $token",
          "1164:             )",
          "1165:             && $this->spreadsheet->getDefinedName($token) !== null",
          "1166:         ) {",
          "1169:         if (",
          "1170:             Preg::isMatch('/^true$/i', $token)",
          "1171:             && ($this->lookAhead === ')' || $this->lookAhead === ',')",
          "1172:         ) {",
          "1175:         if (",
          "1176:             Preg::isMatch('/^false$/i', $token)",
          "1177:             && ($this->lookAhead === ')' || $this->lookAhead === ',')",
          "1178:         ) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1180:     private function expression(): array",
          "1181:     {",
          "1184:             $tmp = str_replace('\"\"', '\"', $this->currentToken);",
          "1185:             if (($tmp == '\"') || ($tmp == '')) {",
          "",
          "[Removed Lines]",
          "1183:         if (preg_match('/\"([^\"]|\"\"){0,255}\"/', $this->currentToken)) {",
          "",
          "[Added Lines]",
          "1260:         if (Preg::isMatch('/\"([^\"]|\"\"){0,255}\"/', $this->currentToken)) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1190:             $this->advance();",
          "1192:             return $result;",
          "1194:             $result = $this->createTree($this->currentToken, 'ptgErr', '');",
          "1195:             $this->advance();",
          "1197:             return $result;",
          "1200:             $this->advance();",
          "1201:             $result2 = $this->expression();",
          "",
          "[Removed Lines]",
          "1193:         } elseif (preg_match('/^#[A-Z0\\\\/]{3,5}[!?]{1}$/', $this->currentToken) || $this->currentToken == '#N/A') { // error code",
          "1198:         } elseif ($this->currentToken == '-') { // negative value",
          "",
          "[Added Lines]",
          "1270:         }",
          "1271:         if (",
          "1272:             Preg::isMatch('/^#[A-Z0\\\\/]{3,5}[!?]{1}$/', $this->currentToken)",
          "1273:             || $this->currentToken == '#N/A'",
          "1274:         ) { // error code",
          "1279:         }",
          "1280:         if ($this->currentToken == '-') { // negative value",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1301:             return $result;",
          "1302:         }",
          "1305:             $result = $this->createTree($this->currentToken, '', '');",
          "1306:             $this->advance();",
          "1308:             return $result;",
          "1309:         }",
          "1312:             $result = $this->createTree($this->currentToken, '', '');",
          "1313:             $this->advance();",
          "1315:             return $result;",
          "1316:         }",
          "1319:             $result = $this->createTree($this->currentToken, '', '');",
          "1320:             $this->advance();",
          "",
          "[Removed Lines]",
          "1304:         if (preg_match('/^\\$?[A-Ia-i]?[A-Za-z]\\$?\\d+$/', $this->currentToken)) {",
          "1310:         if (preg_match('/^' . self::REGEX_SHEET_TITLE_UNQUOTED . '(\\\\:' . self::REGEX_SHEET_TITLE_UNQUOTED . ')?\\\\!\\$?[A-Ia-i]?[A-Za-z]\\$?\\\\d+$/u', $this->currentToken)) {",
          "1317:         if (preg_match(\"/^'\" . self::REGEX_SHEET_TITLE_QUOTED . '(\\\\:' . self::REGEX_SHEET_TITLE_QUOTED . \")?'\\\\!\\\\$?[A-Ia-i]?[A-Za-z]\\\\$?\\\\d+$/u\", $this->currentToken)) {",
          "",
          "[Added Lines]",
          "1386:         if (Preg::isMatch('/^\\$?[A-Ia-i]?[A-Za-z]\\$?\\d+$/', $this->currentToken)) {",
          "1392:         if (",
          "1393:             Preg::isMatch(",
          "1394:                 '/^'",
          "1395:                 . self::REGEX_SHEET_TITLE_UNQUOTED",
          "1396:                 . '(\\\\:' . self::REGEX_SHEET_TITLE_UNQUOTED",
          "1397:                 . ')?\\\\!\\$?[A-Ia-i]?[A-Za-z]\\$?\\\\d+$/u',",
          "1398:                 $this->currentToken",
          "1399:             )",
          "1400:         ) {",
          "1407:         if (self::matchCellSheetnameQuoted($this->currentToken)) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1322:             return $result;",
          "1323:         }",
          "1324:         if (",
          "1327:         ) {",
          "",
          "[Removed Lines]",
          "1325:             preg_match('/^(\\$)?[A-Ia-i]?[A-Za-z](\\$)?\\d+:(\\$)?[A-Ia-i]?[A-Za-z](\\$)?\\d+$/', $this->currentToken)",
          "1326:             || preg_match('/^(\\$)?[A-Ia-i]?[A-Za-z](\\$)?\\d+\\.\\.(\\$)?[A-Ia-i]?[A-Za-z](\\$)?\\d+$/', $this->currentToken)",
          "",
          "[Added Lines]",
          "1415:             Preg::isMatch(",
          "1416:                 '/^(\\$)?[A-Ia-i]?[A-Za-z](\\$)?\\d+:(\\$)?[A-Ia-i]?[A-Za-z](\\$)?\\d+$/',",
          "1417:                 $this->currentToken",
          "1418:             )",
          "1419:             || Preg::isMatch(",
          "1420:                 '/^(\\$)?[A-Ia-i]?[A-Za-z](\\$)?\\d+\\.\\.(\\$)?[A-Ia-i]?[A-Za-z](\\$)?\\d+$/',",
          "1421:                 $this->currentToken",
          "1422:             )",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1333:             return $result;",
          "1334:         }",
          "1338:             $result = $this->createTree($this->currentToken, '', '');",
          "",
          "[Removed Lines]",
          "1335:         if (preg_match('/^' . self::REGEX_SHEET_TITLE_UNQUOTED . '(\\\\:' . self::REGEX_SHEET_TITLE_UNQUOTED . ')?\\\\!\\$?([A-Ia-i]?[A-Za-z])?\\$?\\\\d+:\\$?([A-Ia-i]?[A-Za-z])?\\$?\\\\d+$/u', $this->currentToken)) {",
          "",
          "[Added Lines]",
          "1431:         if (",
          "1432:             Preg::isMatch(",
          "1433:                 '/^'",
          "1434:                 . self::REGEX_SHEET_TITLE_UNQUOTED",
          "1435:                 . '(\\\\:'",
          "1436:                 . self::REGEX_SHEET_TITLE_UNQUOTED",
          "1437:                 . ')?\\\\!\\$?([A-Ia-i]?[A-Za-z])?\\$?\\\\d+:\\$?([A-Ia-i]?[A-Za-z])?\\$?\\\\d+$/u',",
          "1438:                 $this->currentToken",
          "1439:             )",
          "1440:         ) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1341:             return $result;",
          "1342:         }",
          "1346:             $result = $this->createTree($this->currentToken, '', '');",
          "",
          "[Removed Lines]",
          "1343:         if (preg_match(\"/^'\" . self::REGEX_SHEET_TITLE_QUOTED . '(\\\\:' . self::REGEX_SHEET_TITLE_QUOTED . \")?'\\\\!\\\\$?([A-Ia-i]?[A-Za-z])?\\\\$?\\\\d+:\\\\$?([A-Ia-i]?[A-Za-z])?\\\\$?\\\\d+$/u\", $this->currentToken)) {",
          "",
          "[Added Lines]",
          "1448:         if (self::matchRangeSheetnameQuoted($this->currentToken)) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1361:             return $result;",
          "1362:         }",
          "1365:             return $this->func();",
          "1366:         }",
          "1368:             $result = $this->createTree('ptgName', $this->currentToken, '');",
          "1369:             $this->advance();",
          "1371:             return $result;",
          "1372:         }",
          "1374:             $result = $this->createTree($this->currentToken, '', '');",
          "1375:             $this->advance();",
          "",
          "[Removed Lines]",
          "1363:         if (preg_match(\"/^[A-Z0-9\\xc0-\\xdc\\\\.]+$/i\", $this->currentToken) && ($this->lookAhead === '(')) {",
          "1367:         if (preg_match('/^' . Calculation::CALCULATION_REGEXP_DEFINEDNAME . '$/miu', $this->currentToken) && $this->spreadsheet->getDefinedName($this->currentToken) !== null) {",
          "1373:         if (preg_match('/^true|false$/i', $this->currentToken)) {",
          "",
          "[Added Lines]",
          "1468:         if (",
          "1469:             Preg::isMatch(\"/^[A-Z0-9\\xc0-\\xdc\\\\.]+$/i\", $this->currentToken)",
          "1470:             && ($this->lookAhead === '(')",
          "1471:         ) {",
          "1475:         if (",
          "1476:             Preg::isMatch(",
          "1477:                 '/^'",
          "1478:                 . Calculation::CALCULATION_REGEXP_DEFINEDNAME",
          "1479:                 . '$/miu',",
          "1480:                 $this->currentToken",
          "1481:             )",
          "1482:             && $this->spreadsheet->getDefinedName($this->currentToken) !== null",
          "1483:         ) {",
          "1489:         if (Preg::isMatch('/^true|false$/i', $this->currentToken)) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1491:         }",
          "1493:         if (",
          "1497:             && !is_numeric($tree['value'])",
          "1498:             && !isset($this->ptg[$tree['value']])",
          "1499:         ) {",
          "",
          "[Removed Lines]",
          "1494:             preg_match(\"/^[A-Z0-9\\xc0-\\xdc\\\\.]+$/\", $tree['value'])",
          "1495:             && !preg_match('/^([A-Ia-i]?[A-Za-z])(\\d+)$/', $tree['value'])",
          "1496:             && !preg_match('/^[A-Ia-i]?[A-Za-z](\\\\d+)\\\\.\\\\.[A-Ia-i]?[A-Za-z](\\\\d+)$/', $tree['value'])",
          "",
          "[Added Lines]",
          "1610:             Preg::isMatch(\"/^[A-Z0-9\\xc0-\\xdc\\\\.]+$/\", $tree['value'])",
          "1611:             && !Preg::isMatch('/^([A-Ia-i]?[A-Za-z])(\\d+)$/', $tree['value'])",
          "1612:             && !Preg::isMatch(",
          "1613:                 '/^[A-Ia-i]?[A-Za-z](\\\\d+)\\\\.\\\\.[A-Ia-i]?[A-Za-z](\\\\d+)$/',",
          "1614:                 $tree['value']",
          "1615:             )",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1512:         return $polish . $converted_tree;",
          "1513:     }",
          "1514: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1634:     public static function matchCellSheetnameQuoted(string $token): bool",
          "1635:     {",
          "1636:         return Preg::isMatch(",
          "1637:             self::REGEX_CELL_TITLE_QUOTED,",
          "1638:             $token",
          "1639:         );",
          "1640:     }",
          "1642:     public static function matchRangeSheetnameQuoted(string $token): bool",
          "1643:     {",
          "1644:         return Preg::isMatch(",
          "1645:             self::REGEX_RANGE_TITLE_QUOTED,",
          "1646:             $token",
          "1647:         );",
          "1648:     }",
          "",
          "---------------"
        ],
        "src/PhpSpreadsheet/Writer/Xls/Workbook.php||src/PhpSpreadsheet/Writer/Xls/Workbook.php": [
          "File: src/PhpSpreadsheet/Writer/Xls/Workbook.php -> src/PhpSpreadsheet/Writer/Xls/Workbook.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace PhpOffice\\PhpSpreadsheet\\Writer\\Xls;",
          "5: use PhpOffice\\PhpSpreadsheet\\Calculation\\Calculation;",
          "6: use PhpOffice\\PhpSpreadsheet\\Cell\\Coordinate;",
          "7: use PhpOffice\\PhpSpreadsheet\\DefinedName;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: use Composer\\Pcre\\Preg;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "508:     private function parseDefinedNameValue(DefinedName $definedName): string",
          "509:     {",
          "510:         $definedRange = $definedName->getValue();",
          "512:             '/' . Calculation::CALCULATION_REGEXP_CELLREF . '/mui',",
          "513:             $definedRange,",
          "516:         );",
          "519:         $offsets = array_column($splitRanges[0], 1);",
          "521:         $worksheets = $splitRanges[2];",
          "",
          "[Removed Lines]",
          "511:         $splitCount = preg_match_all(",
          "514:             $splitRanges,",
          "515:             PREG_OFFSET_CAPTURE",
          "518:         $lengths = array_map('strlen', array_column($splitRanges[0], 0));",
          "",
          "[Added Lines]",
          "512:         $splitCount = Preg::matchAllWithOffsets(",
          "515:             $splitRanges",
          "518:         $lengths = array_map([StringHelper::class, 'strlenAllowNull'], array_column($splitRanges[0], 0));",
          "",
          "---------------"
        ],
        "src/PhpSpreadsheet/Writer/Xls/Worksheet.php||src/PhpSpreadsheet/Writer/Xls/Worksheet.php": [
          "File: src/PhpSpreadsheet/Writer/Xls/Worksheet.php -> src/PhpSpreadsheet/Writer/Xls/Worksheet.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace PhpOffice\\PhpSpreadsheet\\Writer\\Xls;",
          "5: use GdImage;",
          "6: use PhpOffice\\PhpSpreadsheet\\Cell\\Cell;",
          "7: use PhpOffice\\PhpSpreadsheet\\Cell\\Coordinate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: use Composer\\Pcre\\Preg;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "461:             if (str_contains($url, 'sheet://')) {",
          "463:                 $url = str_replace('sheet://', 'internal:', $url);",
          "467:                 $url = \"$hyperlinkbase$url\";",
          "469:                     $url = 'external:' . $url;",
          "470:                 }",
          "471:             } else {",
          "",
          "[Removed Lines]",
          "464:             } elseif (preg_match('/^(http:|https:|ftp:|mailto:)/', $url)) {",
          "466:             } elseif (!empty($hyperlinkbase) && preg_match('~^([A-Za-z]:)?[/\\\\\\\\]~', $url) !== 1) {",
          "468:                 if (preg_match('/^(http:|https:|ftp:|mailto:)/', $url) !== 1) {",
          "",
          "[Added Lines]",
          "465:             } elseif (Preg::isMatch('/^(http:|https:|ftp:|mailto:)/', $url)) {",
          "467:             } elseif (!empty($hyperlinkbase) && !Preg::isMatch('~^([A-Za-z]:)?[/\\\\\\\\]~', $url)) {",
          "469:                 if (!Preg::isMatch('/^(http:|https:|ftp:|mailto:)/', $url)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "933:     private function writeUrlRange(int $row1, int $col1, int $row2, int $col2, string $url): void",
          "934:     {",
          "937:             $this->writeUrlInternal($row1, $col1, $row2, $col2, $url);",
          "938:         }",
          "940:             $this->writeUrlExternal($row1, $col1, $row2, $col2, $url);",
          "941:         }",
          "",
          "[Removed Lines]",
          "936:         if (preg_match('[^internal:]', $url)) {",
          "939:         if (preg_match('[^external:]', $url)) {",
          "",
          "[Added Lines]",
          "937:         if (Preg::isMatch('[^internal:]', $url)) {",
          "940:         if (Preg::isMatch('[^external:]', $url)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "974:         $url = $url . \"\\0\\0\\0\";",
          "",
          "[Removed Lines]",
          "973:         $url = implode(\"\\0\", preg_split(\"''\", $url, -1, PREG_SPLIT_NO_EMPTY));",
          "",
          "[Added Lines]",
          "973:         $url = implode(\"\\0\", Preg::split(\"''\", $url, -1, PREG_SPLIT_NO_EMPTY));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1003:         $record = 0x01B8; // Record identifier",
          "1009:         $unknown1 = pack('H*', 'D0C9EA79F9BACE118C8200AA004BA90B02000000');",
          "",
          "[Removed Lines]",
          "1006:         $url = (string) preg_replace('/^internal:/', '', $url);",
          "",
          "[Added Lines]",
          "1006:         $url = Preg::replace('/^internal:/', '', $url);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1050:     {",
          "1054:             return;",
          "1055:         }",
          "",
          "[Removed Lines]",
          "1053:         if (preg_match('[^external:\\\\\\\\]', $url)) {",
          "",
          "[Added Lines]",
          "1053:         if (Preg::isMatch('[^external:\\\\\\\\]', $url)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1061:         $url = (string) preg_replace(['/^external:/', '/\\//'], ['', '\\\\'], $url);",
          "",
          "[Added Lines]",
          "1061:         $url = Preg::replace(['/^external:/', '/\\//'], ['', '\\\\'], $url);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1068:         $absolute = 0x00; // relative path",
          "1070:             $absolute = 0x02; // absolute path on Windows, e.g. C:\\...",
          "1071:         }",
          "1072:         $link_type = 0x01 | $absolute;",
          "",
          "[Removed Lines]",
          "1069:         if (preg_match('/^[A-Z]:/', $url)) {",
          "",
          "[Added Lines]",
          "1069:         if (Preg::isMatch('/^[A-Z]:/', $url)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1077:         $dir_long = $url;",
          "1079:             $link_type |= 0x08;",
          "1080:         }",
          "",
          "[Removed Lines]",
          "1078:         if (preg_match('/\\\\#/', $url)) {",
          "",
          "[Added Lines]",
          "1078:         if (Preg::isMatch('/\\\\#/', $url)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1083:         $link_type = pack('V', $link_type);",
          "1087:         $up_count = pack('v', $up_count);",
          "",
          "[Removed Lines]",
          "1086:         $up_count = preg_match_all('/\\\\.\\\\.\\\\\\\\/', $dir_long, $useless);",
          "1090:         $dir_short = (string) preg_replace('/\\\\.\\\\.\\\\\\\\/', '', $dir_long) . \"\\0\";",
          "",
          "[Added Lines]",
          "1086:         $up_count = Preg::isMatchAll('/\\\\.\\\\.\\\\\\\\/', $dir_long, $useless);",
          "1090:         $dir_short = Preg::replace('/\\\\.\\\\.\\\\\\\\/', '', $dir_long) . \"\\0\";",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2640:                 $options |= $errorStyle << 4;",
          "2644:                     $options |= 0x01 << 7;",
          "2645:                 }",
          "",
          "[Removed Lines]",
          "2643:                 if ($type == 0x03 && preg_match('/^\\\".*\\\"$/', $dataValidation->getFormula1())) {",
          "",
          "[Added Lines]",
          "2643:                 if ($type == 0x03 && Preg::isMatch('/^\\\".*\\\"$/', $dataValidation->getFormula1())) {",
          "",
          "---------------"
        ],
        "src/PhpSpreadsheet/Writer/Xlsx/DefinedNames.php||src/PhpSpreadsheet/Writer/Xlsx/DefinedNames.php": [
          "File: src/PhpSpreadsheet/Writer/Xlsx/DefinedNames.php -> src/PhpSpreadsheet/Writer/Xlsx/DefinedNames.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx;",
          "5: use Exception;",
          "6: use PhpOffice\\PhpSpreadsheet\\Calculation\\Calculation;",
          "7: use PhpOffice\\PhpSpreadsheet\\Cell\\Coordinate;",
          "8: use PhpOffice\\PhpSpreadsheet\\DefinedName;",
          "9: use PhpOffice\\PhpSpreadsheet\\Shared\\XMLWriter;",
          "10: use PhpOffice\\PhpSpreadsheet\\Spreadsheet;",
          "11: use PhpOffice\\PhpSpreadsheet\\Worksheet\\Worksheet as ActualWorksheet;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: use Composer\\Pcre\\Preg;",
          "10: use PhpOffice\\PhpSpreadsheet\\Shared\\StringHelper;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:     private function getDefinedRange(DefinedName $definedName): string",
          "193:     {",
          "194:         $definedRange = $definedName->getValue();",
          "196:             '/' . Calculation::CALCULATION_REGEXP_CELLREF_RELATIVE . '/mui',",
          "197:             $definedRange,",
          "200:         );",
          "203:         $offsets = array_column($splitRanges[0], 1);",
          "205:         $worksheets = $splitRanges[2];",
          "",
          "[Removed Lines]",
          "195:         $splitCount = preg_match_all(",
          "198:             $splitRanges,",
          "199:             PREG_OFFSET_CAPTURE",
          "202:         $lengths = array_map('strlen', array_column($splitRanges[0], 0));",
          "",
          "[Added Lines]",
          "197:         $splitCount = Preg::matchAllWithOffsets(",
          "200:             $splitRanges",
          "203:         $lengths = array_map([StringHelper::class, 'strlenAllowNull'], array_column($splitRanges[0], 0));",
          "",
          "---------------"
        ],
        "src/PhpSpreadsheet/Writer/Xlsx/Drawing.php||src/PhpSpreadsheet/Writer/Xlsx/Drawing.php": [
          "File: src/PhpSpreadsheet/Writer/Xlsx/Drawing.php -> src/PhpSpreadsheet/Writer/Xlsx/Drawing.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx;",
          "5: use PhpOffice\\PhpSpreadsheet\\Cell\\Coordinate;",
          "6: use PhpOffice\\PhpSpreadsheet\\Reader\\Xlsx\\Namespaces;",
          "7: use PhpOffice\\PhpSpreadsheet\\Shared\\Drawing as SharedDrawing;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: use Composer\\Pcre\\Preg;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "507:     private function writeVMLHeaderFooterImage(XMLWriter $objWriter, string $reference, HeaderFooterDrawing $image): void",
          "508:     {",
          "512:             throw new WriterException('Regexp failure in writeVMLHeaderFooterImage');",
          "514:         }",
          "518:         $width = $image->getWidth();",
          "",
          "[Removed Lines]",
          "510:         if (preg_match('{(\\d+)}', md5($reference), $m) !== 1) {",
          "515:         $id = 1500 + ((int) substr($m[1], 0, 2) * 1);",
          "",
          "[Added Lines]",
          "511:         if (!Preg::isMatch('{(\\d+)}', md5($reference), $m)) {",
          "516:         $id = 1500 + ((int) substr($m[1], 0, 2) * 1); // @phpstan-ignore-line",
          "",
          "---------------"
        ],
        "src/PhpSpreadsheet/Writer/Xlsx/FunctionPrefix.php||src/PhpSpreadsheet/Writer/Xlsx/FunctionPrefix.php": [
          "File: src/PhpSpreadsheet/Writer/Xlsx/FunctionPrefix.php -> src/PhpSpreadsheet/Writer/Xlsx/FunctionPrefix.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx;",
          "5: use PhpOffice\\PhpSpreadsheet\\Calculation\\Calculation;",
          "7: class FunctionPrefix",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: use Composer\\Pcre\\Preg;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:     protected static function addXlfnPrefix(string $functionString): string",
          "185:     {",
          "187:     }",
          "",
          "[Removed Lines]",
          "186:         return (string) preg_replace(self::XLFNREGEXP, '_xlfn.$1(', $functionString);",
          "",
          "[Added Lines]",
          "187:         return Preg::replace(self::XLFNREGEXP, '_xlfn.$1(', $functionString);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "192:     protected static function addXlwsPrefix(string $functionString): string",
          "193:     {",
          "195:     }",
          "",
          "[Removed Lines]",
          "194:         return (string) preg_replace(self::XLWSREGEXP, '_xlws.$1(', $functionString);",
          "",
          "[Added Lines]",
          "195:         return Preg::replace(self::XLWSREGEXP, '_xlws.$1(', $functionString);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "200:     public static function addFunctionPrefix(string $functionString): string",
          "201:     {",
          "203:             Calculation::CALCULATION_REGEXP_CELLREF_SPILL,",
          "205:             $functionString",
          "206:         );",
          "",
          "[Removed Lines]",
          "202:         $functionString = (string) preg_replace_callback(",
          "204:             fn (array $matches) => 'ANCHORARRAY(' . substr($matches[0], 0, -1) . ')',",
          "",
          "[Added Lines]",
          "203:         $functionString = Preg::replaceCallback(",
          "205:             fn (array $matches) => 'ANCHORARRAY(' . substr((string) $matches[0], 0, -1) . ')',",
          "",
          "---------------"
        ],
        "src/PhpSpreadsheet/Writer/Xlsx/Worksheet.php||src/PhpSpreadsheet/Writer/Xlsx/Worksheet.php": [
          "File: src/PhpSpreadsheet/Writer/Xlsx/Worksheet.php -> src/PhpSpreadsheet/Writer/Xlsx/Worksheet.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx;",
          "5: use PhpOffice\\PhpSpreadsheet\\Calculation\\Information\\ErrorValue;",
          "6: use PhpOffice\\PhpSpreadsheet\\Calculation\\Information\\ExcelError;",
          "7: use PhpOffice\\PhpSpreadsheet\\Cell\\Cell;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: use Composer\\Pcre\\Preg;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1536:     private function parseRef(string $coordinate, string $ref): string",
          "1537:     {",
          "1539:             return $ref;",
          "1540:         }",
          "1541:         if (!isset($matches[3])) { // single cell, not range",
          "",
          "[Removed Lines]",
          "1538:         if (preg_match('/^([A-Z]{1,3})([0-9]{1,7})(:([A-Z]{1,3})([0-9]{1,7}))?$/', $ref, $matches) !== 1) {",
          "",
          "[Added Lines]",
          "1539:         if (!Preg::isMatch('/^([A-Z]{1,3})([0-9]{1,7})(:([A-Z]{1,3})([0-9]{1,7}))?$/', $ref, $matches)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1543:         }",
          "1544:         $minRow = (int) $matches[2];",
          "1547:         $rows = $maxRow - $minRow + 1;",
          "1548:         $minCol = Coordinate::columnIndexFromString($matches[1]);",
          "1550:         $cols = $maxCol - $minCol + 1;",
          "1551:         $firstCellArray = Coordinate::indexesFromString($coordinate);",
          "1552:         $lastRow = $firstCellArray[1] + $rows - 1;",
          "",
          "[Removed Lines]",
          "1546:         $maxRow = (int) $matches[5]; // @phpstan-ignore-line",
          "1549:         $maxCol = Coordinate::columnIndexFromString($matches[4]); // @phpstan-ignore-line",
          "",
          "[Added Lines]",
          "1547:         $maxRow = (int) $matches[5];",
          "1550:         $maxCol = Coordinate::columnIndexFromString($matches[4]);",
          "",
          "---------------"
        ],
        "tests/PhpSpreadsheetTests/Writer/Xls/ParserTest.php||tests/PhpSpreadsheetTests/Writer/Xls/ParserTest.php": [
          "File: tests/PhpSpreadsheetTests/Writer/Xls/ParserTest.php -> tests/PhpSpreadsheetTests/Writer/Xls/ParserTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: use PhpOffice\\PhpSpreadsheet\\Spreadsheet;",
          "8: use PhpOffice\\PhpSpreadsheet\\Writer\\Exception as WriterException;",
          "9: use PhpOffice\\PhpSpreadsheet\\Writer\\Xls\\Parser;",
          "10: use PHPUnit\\Framework\\TestCase;",
          "12: class ParserTest extends TestCase",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: use PHPUnit\\Framework\\Attributes\\DataProvider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:         $parser = new Parser($this->spreadsheet);",
          "55:         self::assertSame('1e01001e02001e0300', bin2hex($parser->toReversePolish(['left' => 1, 'right' => 2, 'value' => 3])));",
          "56:     }",
          "57: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:     #[DataProvider('cellSheetnameQuotedProvider')]",
          "60:     public function testCellSheetnameQuoted(bool $expected, string $address): void",
          "61:     {",
          "62:         self::assertSame($expected, Parser::matchCellSheetnameQuoted($address));",
          "63:     }",
          "65:     public static function cellSheetnameQuotedProvider(): array",
          "66:     {",
          "67:         return [",
          "68:             [true, '\\'TS GK Mustermann Hans 2\\'!$N$1'],",
          "69:             [true, '\\'TS GK Mustermann Hans 2\\'!N15'],",
          "70:             [true, '\\'TS GK Mus\\'\\'termann Hans 2\\'!N15'],",
          "71:             [false, '\\'TS GK Mus\\'termann Hans 2\\'!N15'],",
          "72:             [false, '\\'TS GK Mustermann Hans 2\\'!N15:P16'],",
          "73:             [false, '\\'TS GK Mustermann Hans 2\\'!$N$15:$P$16'],",
          "74:             [false, 'sheet1!N15'],",
          "75:             [false, 'sheet1!N15:P16'],",
          "76:             [false, 'N15'],",
          "77:             [false, 'N15:P16'],",
          "78:         ];",
          "79:     }",
          "81:     #[DataProvider('rangeSheetnameQuotedProvider')]",
          "82:     public function testRangeSheetnameQuoted(bool $expected, string $address): void",
          "83:     {",
          "84:         self::assertSame($expected, Parser::matchRangeSheetnameQuoted($address));",
          "85:     }",
          "87:     public static function rangeSheetnameQuotedProvider(): array",
          "88:     {",
          "89:         return [",
          "90:             [false, '\\'TS GK Mustermann Hans 2\\'!$N$1'],",
          "91:             [false, '\\'TS GK Mustermann Hans 2\\'!N15'],",
          "92:             [false, '\\'TS GK Mus\\'\\'termann Hans 2\\'!N15'],",
          "93:             [false, '\\'TS GK Mus\\'termann Hans 2\\'!N15'],",
          "94:             [true, '\\'TS GK Mustermann Hans 2\\'!N15:P16'],",
          "95:             [true, '\\'TS GK Mustermann Hans 2\\'!$N$15:$P$16'],",
          "96:             [false, 'sheet1!N15'],",
          "97:             [false, 'sheet1!N15:P16'],",
          "98:             [false, 'N15'],",
          "99:             [false, 'N15:P16'],",
          "100:         ];",
          "101:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d836f2d7308a192441ccd1546545890b378af913",
      "candidate_info": {
        "commit_hash": "d836f2d7308a192441ccd1546545890b378af913",
        "repo": "PHPOffice/PhpSpreadsheet",
        "commit_url": "https://github.com/PHPOffice/PhpSpreadsheet/commit/d836f2d7308a192441ccd1546545890b378af913",
        "files": [
          "CHANGELOG.md",
          "src/PhpSpreadsheet/Writer/Html.php",
          "tests/PhpSpreadsheetTests/Writer/Html/BadCustomPropertyTest.php",
          "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkBaseTest.php",
          "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php",
          "tests/data/Reader/XLSX/sec-j47r.dontuse",
          "tests/data/Reader/XLSX/sec-p66w.dontuse",
          "tests/data/Reader/XLSX/sec-q229.dontuse"
        ],
        "message": "Backport Html Writer Security Patches",
        "before_after_code_files": [
          "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php",
          "tests/PhpSpreadsheetTests/Writer/Html/BadCustomPropertyTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadCustomPropertyTest.php",
          "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkBaseTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkBaseTest.php",
          "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php",
            "tests/PhpSpreadsheetTests/Writer/Html/BadCustomPropertyTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadCustomPropertyTest.php",
            "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkBaseTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkBaseTest.php",
            "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php"
          ],
          "candidate": [
            "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php",
            "tests/PhpSpreadsheetTests/Writer/Html/BadCustomPropertyTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadCustomPropertyTest.php",
            "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkBaseTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkBaseTest.php",
            "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php": [
          "File: src/PhpSpreadsheet/Writer/Html.php -> src/PhpSpreadsheet/Writer/Html.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "392:                 } else {",
          "393:                     $propertyValue = (string) $propertyValue;",
          "394:                 }",
          "396:             }",
          "397:         }",
          "399:         if (!empty($properties->getHyperlinkBase())) {",
          "401:         }",
          "403:         $html .= $includeStyles ? $this->generateStyles(true) : $this->generatePageDeclarations(true);",
          "",
          "[Removed Lines]",
          "395:                 $html .= self::generateMeta($propertyValue, \"custom.$propertyQualifier.$customProperty\");",
          "400:             $html .= '      <base href=\"' . $properties->getHyperlinkBase() . '\" />' . PHP_EOL;",
          "",
          "[Added Lines]",
          "395:                 $html .= self::generateMeta($propertyValue, htmlspecialchars(\"custom.$propertyQualifier.$customProperty\"));",
          "400:             $html .= '      <base href=\"' . htmlspecialchars($properties->getHyperlinkBase()) . '\" />' . PHP_EOL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1527:             if ($worksheet->hyperlinkExists($coordinate) && !$worksheet->getHyperlink($coordinate)->isInternal()) {",
          "1528:                 $url = $worksheet->getHyperlink($coordinate)->getUrl();",
          "1531:                 if ($parseScheme === 1 && !in_array($matches[1], ['http', 'https', 'file', 'ftp', 's3'], true)) {",
          "1532:                     $cellData = htmlspecialchars($url, Settings::htmlEntityFlags());",
          "1533:                 } else {",
          "",
          "[Removed Lines]",
          "1529:                 $urldecode = strtolower(html_entity_decode(trim($url), encoding: 'UTF-8'));",
          "1530:                 $parseScheme = preg_match('/^(\\\\w+):/', $urldecode, $matches);",
          "",
          "[Added Lines]",
          "1529:                 $urlDecode1 = html_entity_decode($url, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8');",
          "1530:                 $urlTrim = preg_replace('/^\\\\s+/u', '', $urlDecode1) ?? $urlDecode1;",
          "1531:                 $parseScheme = preg_match('/^([\\\\w\\\\s]+):/u', strtolower($urlTrim), $matches);",
          "",
          "---------------"
        ],
        "tests/PhpSpreadsheetTests/Writer/Html/BadCustomPropertyTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadCustomPropertyTest.php": [
          "File: tests/PhpSpreadsheetTests/Writer/Html/BadCustomPropertyTest.php -> tests/PhpSpreadsheetTests/Writer/Html/BadCustomPropertyTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: declare(strict_types=1);",
          "5: namespace PhpOffice\\PhpSpreadsheetTests\\Writer\\Html;",
          "7: use PhpOffice\\PhpSpreadsheet\\Reader\\Xlsx as XlsxReader;",
          "8: use PhpOffice\\PhpSpreadsheet\\Writer\\Html as HtmlWriter;",
          "9: use PHPUnit\\Framework\\TestCase;",
          "11: class BadCustomPropertyTest extends TestCase",
          "12: {",
          "13:     public function testBadCustomProperty(): void",
          "14:     {",
          "15:         $reader = new XlsxReader();",
          "16:         $infile = 'tests/data/Reader/XLSX/sec-q229.dontuse';",
          "17:         $spreadsheet = $reader->load($infile);",
          "18:         $writer = new HtmlWriter($spreadsheet);",
          "19:         $html = $writer->generateHtmlAll();",
          "20:         self::assertStringContainsString('<meta name=\"custom.string.custom_property&quot;&gt;&lt;img src=1 onerror=alert()&gt;\" content=\"test\" />', $html);",
          "21:         $spreadsheet->disconnectWorksheets();",
          "22:     }",
          "23: }",
          "",
          "---------------"
        ],
        "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkBaseTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkBaseTest.php": [
          "File: tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkBaseTest.php -> tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkBaseTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: declare(strict_types=1);",
          "5: namespace PhpOffice\\PhpSpreadsheetTests\\Writer\\Html;",
          "7: use PhpOffice\\PhpSpreadsheet\\Reader\\Xlsx as XlsxReader;",
          "8: use PhpOffice\\PhpSpreadsheet\\Writer\\Html as HtmlWriter;",
          "9: use PHPUnit\\Framework\\TestCase;",
          "11: class BadHyperlinkBaseTest extends TestCase",
          "12: {",
          "13:     public function testBadHyperlinkBase(): void",
          "14:     {",
          "15:         $reader = new XlsxReader();",
          "16:         $infile = 'tests/data/Reader/XLSX/sec-p66w.dontuse';",
          "17:         $spreadsheet = $reader->load($infile);",
          "18:         $writer = new HtmlWriter($spreadsheet);",
          "19:         $html = $writer->generateHtmlAll();",
          "20:         self::assertStringContainsString('<base href=\"&quot;&gt;&lt;img src=1 onerror=alert()&gt;\" />', $html);",
          "21:         $spreadsheet->disconnectWorksheets();",
          "22:     }",
          "23: }",
          "",
          "---------------"
        ],
        "tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php||tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php": [
          "File: tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php -> tests/PhpSpreadsheetTests/Writer/Html/BadHyperlinkTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: declare(strict_types=1);",
          "5: namespace PhpOffice\\PhpSpreadsheetTests\\Writer\\Html;",
          "7: use PhpOffice\\PhpSpreadsheet\\Reader\\Xlsx as XlsxReader;",
          "8: use PhpOffice\\PhpSpreadsheet\\Writer\\Html as HtmlWriter;",
          "9: use PHPUnit\\Framework\\TestCase;",
          "11: class BadHyperlinkTest extends TestCase",
          "12: {",
          "13:     public function testBadHyperlink(): void",
          "14:     {",
          "15:         $reader = new XlsxReader();",
          "16:         $infile = 'tests/data/Reader/XLSX/sec-j47r.dontuse';",
          "17:         $spreadsheet = $reader->load($infile);",
          "18:         $writer = new HtmlWriter($spreadsheet);",
          "19:         $html = $writer->generateHtmlAll();",
          "20:         self::assertStringContainsString(\"<td class=\\\"column0 style1 f\\\">jav\\tascript:alert()</td>\", $html);",
          "21:         $spreadsheet->disconnectWorksheets();",
          "22:     }",
          "23: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}