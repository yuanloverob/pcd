{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "881736325e9f2e63280070ef24698e5f896b6b80",
      "candidate_info": {
        "commit_hash": "881736325e9f2e63280070ef24698e5f896b6b80",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/881736325e9f2e63280070ef24698e5f896b6b80",
        "files": [
          "ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/clusters/ClusterInformationCtrl.js",
          "ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/remoteClusters/RemoteClustersCreateCtrl.js",
          "ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/remoteClusters/RemoteClustersEditCtrl.js",
          "ambari-admin/src/main/resources/ui/admin-web/app/scripts/i18n.config.js",
          "ambari-admin/src/main/resources/ui/admin-web/app/views/clusters/clusterInformation.html",
          "ambari-admin/src/main/resources/ui/admin-web/app/views/remoteClusters/editRemoteClusterPage.html",
          "ambari-admin/src/main/resources/ui/admin-web/app/views/remoteClusters/remoteClusterPage.html",
          "ambari-web/app/controllers/wizard/step2_controller.js"
        ],
        "message": "AMBARI-25283 Ambari UI evaluates Javascript embedded in user input when adding hosts, adding remote clusters, and renaming the cluster. (ababiichuk)",
        "before_after_code_files": [
          "ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/clusters/ClusterInformationCtrl.js||ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/clusters/ClusterInformationCtrl.js",
          "ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/remoteClusters/RemoteClustersCreateCtrl.js||ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/remoteClusters/RemoteClustersCreateCtrl.js",
          "ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/remoteClusters/RemoteClustersEditCtrl.js||ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/remoteClusters/RemoteClustersEditCtrl.js",
          "ambari-admin/src/main/resources/ui/admin-web/app/scripts/i18n.config.js||ambari-admin/src/main/resources/ui/admin-web/app/scripts/i18n.config.js",
          "ambari-admin/src/main/resources/ui/admin-web/app/views/clusters/clusterInformation.html||ambari-admin/src/main/resources/ui/admin-web/app/views/clusters/clusterInformation.html",
          "ambari-admin/src/main/resources/ui/admin-web/app/views/remoteClusters/editRemoteClusterPage.html||ambari-admin/src/main/resources/ui/admin-web/app/views/remoteClusters/editRemoteClusterPage.html",
          "ambari-admin/src/main/resources/ui/admin-web/app/views/remoteClusters/remoteClusterPage.html||ambari-admin/src/main/resources/ui/admin-web/app/views/remoteClusters/remoteClusterPage.html",
          "ambari-web/app/controllers/wizard/step2_controller.js||ambari-web/app/controllers/wizard/step2_controller.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/clusters/ClusterInformationCtrl.js||ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/clusters/ClusterInformationCtrl.js": [
          "File: ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/clusters/ClusterInformationCtrl.js -> ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/clusters/ClusterInformationCtrl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:     clusterName: null",
          "28:   };",
          "29:   $scope.isClusterNameEdited = false;",
          "31:   $scope.$watch(function() {",
          "32:     return $rootScope.cluster;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:   $scope.nameValidationPattern = /^\\s*\\w*\\s*$/;",
          "",
          "---------------"
        ],
        "ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/remoteClusters/RemoteClustersCreateCtrl.js||ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/remoteClusters/RemoteClustersCreateCtrl.js": [
          "File: ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/remoteClusters/RemoteClustersCreateCtrl.js -> ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/remoteClusters/RemoteClustersCreateCtrl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:   $scope.cluster = {};",
          "26:   $scope.nameValidationPattern = /^\\s*\\w*\\s*$/;",
          "28:   $scope.registerRemoteCluster = function () {",
          "29:     $scope.form.submitted = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:   $scope.urlValidationPattern = /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i;",
          "",
          "---------------"
        ],
        "ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/remoteClusters/RemoteClustersEditCtrl.js||ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/remoteClusters/RemoteClustersEditCtrl.js": [
          "File: ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/remoteClusters/RemoteClustersEditCtrl.js -> ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/remoteClusters/RemoteClustersEditCtrl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   $scope.instancesAffected = [];",
          "27:   $scope.nameValidationPattern = /^\\s*\\w*\\s*$/;",
          "29:   $scope.openChangePwdDialog = function() {",
          "30:     var modalInstance = $modal.open({",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28:   $scope.urlValidationPattern = /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i;",
          "",
          "---------------"
        ],
        "ambari-admin/src/main/resources/ui/admin-web/app/scripts/i18n.config.js||ambari-admin/src/main/resources/ui/admin-web/app/scripts/i18n.config.js": [
          "File: ambari-admin/src/main/resources/ui/admin-web/app/scripts/i18n.config.js -> ambari-admin/src/main/resources/ui/admin-web/app/scripts/i18n.config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:     'views.alerts.noSpecialChars': 'Must not contain any special characters.',",
          "227:     'views.alerts.noSpecialCharsOrSpaces': 'Must not contain any special characters or spaces.',",
          "228:     'views.alerts.instanceExists': 'Instance with this name already exists.',",
          "229:     'views.alerts.notDefined': 'There are no {{term}} defined for this view.',",
          "230:     'views.alerts.cannotEditInstance': 'Cannot Edit Static Instances',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:     'views.alerts.invalidUrl': 'Must be a valid URL.',",
          "",
          "---------------"
        ],
        "ambari-admin/src/main/resources/ui/admin-web/app/views/clusters/clusterInformation.html||ambari-admin/src/main/resources/ui/admin-web/app/views/clusters/clusterInformation.html": [
          "File: ambari-admin/src/main/resources/ui/admin-web/app/views/clusters/clusterInformation.html -> ambari-admin/src/main/resources/ui/admin-web/app/views/clusters/clusterInformation.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:                name=\"clusterName\"",
          "50:                ng-change=\"toggleSaveButton()\"",
          "51:                ng-model=\"edit.clusterName\"",
          "52:                required",
          "53:                autofocus",
          "54:                ng-maxlength=\"100\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:                ng-pattern=\"nameValidationPattern\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:                ng-class=\"{edited: isClusterNameEdited}\">",
          "59:         <button",
          "60:           type=\"submit\"",
          "62:           class=\"btn btn-default pull-right\"",
          "63:           ng-show=\"isClusterNameEdited\">",
          "64:           {{'common.controls.save' | translate}}",
          "",
          "[Removed Lines]",
          "61:           ng-class=\"{'disabled': editClusterNameForm.clusterName.$invalid}\"",
          "",
          "[Added Lines]",
          "62:           ng-disabled=\"editClusterNameForm.clusterName.$invalid\"",
          "",
          "---------------"
        ],
        "ambari-admin/src/main/resources/ui/admin-web/app/views/remoteClusters/editRemoteClusterPage.html||ambari-admin/src/main/resources/ui/admin-web/app/views/remoteClusters/editRemoteClusterPage.html": [
          "File: ambari-admin/src/main/resources/ui/admin-web/app/views/remoteClusters/editRemoteClusterPage.html -> ambari-admin/src/main/resources/ui/admin-web/app/views/remoteClusters/editRemoteClusterPage.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:   <div class=\"form-group\" ng-class=\"{'has-error' : form.user_name.$error.required && form.submitted}\">",
          "43:     <label for=\"clusterurl\" class=\"col-sm-2 control-label\">{{'users.ambariClusterURL' | translate}}*</label>",
          "44:     <div class=\"col-sm-10\">",
          "46:       <div class=\"alert alert-danger top-margin\" ng-show=\"form.cluster_url.$error.required && form.submitted\"> {{'common.alerts.fieldIsRequired' | translate}}</div>",
          "47:     </div>",
          "48:   </div>",
          "",
          "[Removed Lines]",
          "45:       <input type=\"text\" id=\"clusterurl\" class=\"form-control\" name=\"cluster_url\" placeholder=\"{{'users.ambariClusterURL' | translate}}\" ng-model=\"cluster.cluster_url\" required autocomplete=\"off\">",
          "",
          "[Added Lines]",
          "45:       <input type=\"text\" id=\"clusterurl\" class=\"form-control\" ng-pattern=\"urlValidationPattern\" name=\"cluster_url\" placeholder=\"{{'users.ambariClusterURL' | translate}}\" ng-model=\"cluster.cluster_url\" required autocomplete=\"off\">",
          "47:       <div class=\"alert alert-danger top-margin\" ng-show=\"form.cluster_url.$error.pattern && form.submitted\"> {{'views.alerts.invalidUrl' | translate}}</div>",
          "",
          "---------------"
        ],
        "ambari-admin/src/main/resources/ui/admin-web/app/views/remoteClusters/remoteClusterPage.html||ambari-admin/src/main/resources/ui/admin-web/app/views/remoteClusters/remoteClusterPage.html": [
          "File: ambari-admin/src/main/resources/ui/admin-web/app/views/remoteClusters/remoteClusterPage.html -> ambari-admin/src/main/resources/ui/admin-web/app/views/remoteClusters/remoteClusterPage.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:   <div class=\"form-group\" ng-class=\"{'has-error' : form.user_name.$error.required && form.submitted}\">",
          "35:     <label for=\"clusterurl\" class=\"col-sm-2 control-label\">{{'users.ambariClusterURL' | translate}}*</label>",
          "36:     <div class=\"col-sm-10\">",
          "38:       <div class=\"alert alert-danger top-margin\" ng-show=\"form.cluster_url.$error.required && form.submitted\"> {{'common.alerts.fieldIsRequired' | translate}}</div>",
          "39:     </div>",
          "40:   </div>",
          "",
          "[Removed Lines]",
          "37:       <input type=\"text\" id=\"clusterurl\" class=\"form-control\" name=\"cluster_url\" placeholder=\"{{'remoteClusters.clusterURLPlaceholder' | translate}}\" ng-model=\"cluster.cluster_url\" required autocomplete=\"off\">",
          "",
          "[Added Lines]",
          "37:       <input type=\"text\" id=\"clusterurl\" class=\"form-control\" ng-pattern=\"urlValidationPattern\" name=\"cluster_url\" placeholder=\"{{'remoteClusters.clusterURLPlaceholder' | translate}}\" ng-model=\"cluster.cluster_url\" required autocomplete=\"off\">",
          "39:       <div class=\"alert alert-danger top-margin\" ng-show=\"form.cluster_url.$error.pattern && form.submitted\"> {{'views.alerts.invalidUrl' | translate}}</div>",
          "",
          "---------------"
        ],
        "ambari-web/app/controllers/wizard/step2_controller.js||ambari-web/app/controllers/wizard/step2_controller.js": [
          "File: ambari-web/app/controllers/wizard/step2_controller.js -> ambari-web/app/controllers/wizard/step2_controller.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:     this.get('invalidHostNames').clear();",
          "214:     this.get('hostNameArr').forEach(function (hostName) {",
          "215:       if (!validator.isHostname(hostName)) {",
          "217:         result = false;",
          "218:       }",
          "219:     }, this);",
          "",
          "[Removed Lines]",
          "216:         this.get('invalidHostNames').push(hostName);",
          "",
          "[Added Lines]",
          "216:         this.get('invalidHostNames').push(encodeURIComponent(hostName));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17dc5fd5610e0037e197934ceb27b61e087c8d57",
      "candidate_info": {
        "commit_hash": "17dc5fd5610e0037e197934ceb27b61e087c8d57",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/17dc5fd5610e0037e197934ceb27b61e087c8d57",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostKerberosIdentityResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabDAO.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosPrincipalDAO.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/FinalizeKerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/HostKerberosIdentityResourceProviderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerActionTest.java"
        ],
        "message": "AMBARI-25332. Kerberos keytab regeneration working slow (dgrinenko) (#3120)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java||ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostKerberosIdentityResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostKerberosIdentityResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabDAO.java||ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabDAO.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java||ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosPrincipalDAO.java||ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosPrincipalDAO.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/FinalizeKerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/FinalizeKerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/HostKerberosIdentityResourceProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/HostKerberosIdentityResourceProviderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerActionTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerActionTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java||ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java -> ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2616:   public static final ConfigurationProperty<Integer> KERBEROS_SERVER_ACTION_FINALIZE_SECONDS = new ConfigurationProperty<>(",
          "2617:     \"server.kerberos.finalize.timeout\", 600);",
          "2619:   private static final Logger LOG = LoggerFactory.getLogger(",
          "2620:     Configuration.class);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2622:   @Markdown(description = \"The number of threads to use when executing server-side Kerberos commands, such as generate keytabs.\")",
          "2623:   public static final ConfigurationProperty<Integer> KERBEROS_SERVER_ACTION_THREADPOOL_SIZE = new ConfigurationProperty<>(",
          "2624:     \"server.kerberos.action.threadpool.size\", 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3041:     writeConfigFile(existingProperties, false);",
          "3045:   }",
          "",
          "[Removed Lines]",
          "3044:     this.properties = readConfigFile();",
          "",
          "[Added Lines]",
          "3051:     properties = readConfigFile();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5568:     return Integer.parseInt(getProperty(DEFAULT_MAX_DEGREE_OF_PARALLELISM_FOR_UPGRADES));",
          "5569:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5584:   public int getKerberosServerActionThreadpoolSize() {",
          "5585:     return Integer.parseInt(getProperty(KERBEROS_SERVER_ACTION_THREADPOOL_SIZE));",
          "5586:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "704:   Map<String, Map<String, String>> getIdentityConfigurations(List<KerberosIdentityDescriptor> identityDescriptors);",
          "728:   Map<String, Collection<KerberosIdentityDescriptor>> getActiveIdentities(String clusterName,",
          "729:                                                                           String hostName,",
          "730:                                                                           String serviceName,",
          "731:                                                                           String componentName,",
          "733:       throws AmbariException;",
          "",
          "[Removed Lines]",
          "732:                                                                           boolean replaceHostNames)",
          "",
          "[Added Lines]",
          "750:                                                                           boolean replaceHostNames,",
          "751:                                                                           Map<String, Map<String, Map<String, String>>> hostConfigurations,",
          "752:                                                                           KerberosDescriptor kerberosDescriptor)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "829:   KerberosDetails getKerberosDetails(Cluster cluster, Boolean manageIdentities)",
          "",
          "[Removed Lines]",
          "830:     throws KerberosInvalidConfigurationException, AmbariException;",
          "",
          "[Added Lines]",
          "850:     throws KerberosInvalidConfigurationException, AmbariException;",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: import java.util.Set;",
          "38: import java.util.TreeMap;",
          "39: import java.util.TreeSet;",
          "40: import java.util.regex.Matcher;",
          "42: import org.apache.ambari.annotations.Experimental;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: import java.util.concurrent.TimeUnit;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: import org.apache.ambari.server.orm.dao.HostDAO;",
          "64: import org.apache.ambari.server.orm.dao.KerberosKeytabDAO;",
          "65: import org.apache.ambari.server.orm.dao.KerberosKeytabPrincipalDAO;",
          "66: import org.apache.ambari.server.orm.dao.KerberosPrincipalDAO;",
          "67: import org.apache.ambari.server.orm.entities.ArtifactEntity;",
          "68: import org.apache.ambari.server.orm.entities.HostEntity;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: import org.apache.ambari.server.orm.dao.KerberosKeytabPrincipalDAO.KeytabPrincipalFindOrCreateResult;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137: import org.slf4j.Logger;",
          "138: import org.slf4j.LoggerFactory;",
          "140: import com.google.common.collect.ImmutableMap;",
          "141: import com.google.common.collect.ImmutableSet;",
          "142: import com.google.common.collect.Sets;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142: import com.google.common.base.Stopwatch;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1745:                                                                                  String hostName,",
          "1746:                                                                                  String serviceName,",
          "1747:                                                                                  String componentName,",
          "1749:     throws AmbariException {",
          "1751:     if ((clusterName == null) || clusterName.isEmpty()) {",
          "",
          "[Removed Lines]",
          "1748:                                                                                  boolean replaceHostNames)",
          "",
          "[Added Lines]",
          "1751:                                                                                  boolean replaceHostNames,",
          "1752:                                                                                  Map<String, Map<String, Map<String, String>>> hostConfigurations,",
          "1753:                                                                                  KerberosDescriptor kerberosDescriptor)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1790:         hosts = Collections.singleton(hostName);",
          "1791:       }",
          "1793:       if (!hosts.isEmpty()) {",
          "1796:         if (kerberosDescriptor != null) {",
          "1797:           Set<String> existingServices = cluster.getServices().keySet();",
          "",
          "[Removed Lines]",
          "1794:         KerberosDescriptor kerberosDescriptor = getKerberosDescriptor(cluster, false);",
          "",
          "[Added Lines]",
          "1798:       if (null == hostConfigurations) {",
          "1799:         hostConfigurations = new HashMap<>();",
          "1800:       }",
          "1804:         if (null == kerberosDescriptor) {",
          "1805:           kerberosDescriptor = getKerberosDescriptor(cluster, false);",
          "1806:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1799:           for (String host : hosts) {",
          "1803:                 (ambariServerHostnameIsForced && ambariServerHostname.equals(host)) ? null : host,",
          "1804:                 kerberosDescriptor,",
          "1805:                 false,",
          "1806:                 false);",
          "1809:             Map<String, Object> filterContext = new HashMap<>();",
          "1810:             filterContext.put(\"configurations\", configurations);",
          "",
          "[Removed Lines]",
          "1802:             Map<String, Map<String, String>> configurations = calculateConfigurations(cluster,",
          "",
          "[Added Lines]",
          "1814:             Map<String, Map<String, String>> configurations = hostConfigurations.get(host);",
          "1815:             if (configurations == null) {",
          "1816:               configurations = calculateConfigurations(cluster,",
          "1822:               hostConfigurations.put(host, configurations);",
          "1823:             }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1951:   }",
          "1959:   @Override",
          "1960:   public void createResolvedKeytab(ResolvedKerberosKeytab resolvedKerberosKeytab) {",
          "1963:       kke.setAmbariServerKeytab(resolvedKerberosKeytab.isAmbariServerKeytab());",
          "1964:       kke.setWriteAmbariJaasFile(resolvedKerberosKeytab.isMustWriteAmbariJaasFile());",
          "1965:       kke.setOwnerName(resolvedKerberosKeytab.getOwnerName());",
          "",
          "[Removed Lines]",
          "1961:     if (kerberosKeytabDAO.find(resolvedKerberosKeytab.getFile()) == null) {",
          "1962:       KerberosKeytabEntity kke = new KerberosKeytabEntity(resolvedKerberosKeytab.getFile());",
          "",
          "[Added Lines]",
          "1987:     Stopwatch stopwatch = Stopwatch.createStarted();",
          "1989:     KerberosKeytabEntity kke = kerberosKeytabDAO.find(resolvedKerberosKeytab.getFile());",
          "1990:     if (null == kke) {",
          "1991:       kke = new KerberosKeytabEntity(resolvedKerberosKeytab.getFile());",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1968:       kke.setGroupAccess(resolvedKerberosKeytab.getGroupAccess());",
          "1969:       kerberosKeytabDAO.create(kke);",
          "1970:     }",
          "1971:     for (ResolvedKerberosPrincipal principal : resolvedKerberosKeytab.getPrincipals()) {",
          "1974:       }",
          "1975:       for (Map.Entry<String, String> mappingEntry : principal.getServiceMapping().entries()) {",
          "1976:         String serviceName = mappingEntry.getKey();",
          "1977:         HostEntity hostEntity = principal.getHostId() != null ? hostDAO.findById(principal.getHostId()) : null;",
          "1982:         if (kkp.putServiceMapping(serviceName, mappingEntry.getValue())) {",
          "1983:           kerberosKeytabPrincipalDAO.merge(kkp);",
          "1984:         }",
          "1987:       }",
          "1988:     }",
          "1989:   }",
          "1991:   @Override",
          "",
          "[Removed Lines]",
          "1972:       if (!kerberosPrincipalDAO.exists(principal.getPrincipal())) {",
          "1973:         kerberosPrincipalDAO.create(principal.getPrincipal(), principal.isService());",
          "1978:         KerberosKeytabEntity kke = kerberosKeytabDAO.find(resolvedKerberosKeytab.getFile());",
          "1979:         KerberosPrincipalEntity kpe = kerberosPrincipalDAO.find(principal.getPrincipal());",
          "1981:         KerberosKeytabPrincipalEntity kkp = kerberosKeytabPrincipalDAO.findOrCreate(kke, hostEntity, kpe);",
          "1985:         kerberosKeytabDAO.merge(kke);",
          "1986:         kerberosPrincipalDAO.merge(kpe);",
          "",
          "[Added Lines]",
          "2002:       KerberosPrincipalEntity kpe = kerberosPrincipalDAO.find(principal.getPrincipal());",
          "2004:       if (null == kpe) {",
          "2005:         kpe = kerberosPrincipalDAO.create(principal.getPrincipal(), principal.isService());",
          "2009:       boolean mergeBidirectionalAssociatedEntities = false;",
          "2014:         KeytabPrincipalFindOrCreateResult result = kerberosKeytabPrincipalDAO.findOrCreate(kke, hostEntity, kpe);",
          "2015:         KerberosKeytabPrincipalEntity kkp = result.kkp;",
          "2016:         mergeBidirectionalAssociatedEntities = mergeBidirectionalAssociatedEntities || result.created;",
          "2022:       }",
          "2026:       if(mergeBidirectionalAssociatedEntities) {",
          "2027:         Stopwatch mergeStockwatch = Stopwatch.createStarted();",
          "2028:         kke = kerberosKeytabDAO.merge(kke);",
          "2029:         kpe = kerberosPrincipalDAO.merge(kpe);",
          "2030:         LOG.info(\"Merging bidirectional associated entities for this keytab took {}ms\"",
          "2031:             + mergeStockwatch.elapsed(TimeUnit.MILLISECONDS));",
          "2035:     LOG.info(\"Resolving this keytab and all associated principals took {}ms \",",
          "2036:         stopwatch.elapsed(TimeUnit.MILLISECONDS));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2392:                 kerberosPrincipalDAO.create(kpe);",
          "2393:               }",
          "2396:               if (kkp.putServiceMapping(sch.getServiceName(), sch.getServiceComponentName())) {",
          "2397:                 kerberosKeytabPrincipalDAO.merge(kkp);",
          "2398:               }",
          "",
          "[Removed Lines]",
          "2395:               KerberosKeytabPrincipalEntity kkp = kerberosKeytabPrincipalDAO.findOrCreate(kke, hostDAO.findById(sch.getHost().getHostId()), kpe);",
          "",
          "[Added Lines]",
          "2443:               KeytabPrincipalFindOrCreateResult result = kerberosKeytabPrincipalDAO.findOrCreate(",
          "2444:                   kke, hostDAO.findById(sch.getHost().getHostId()), kpe);",
          "2446:               KerberosKeytabPrincipalEntity kkp = result.kkp;",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostKerberosIdentityResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostKerberosIdentityResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostKerberosIdentityResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostKerberosIdentityResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: import org.apache.ambari.server.orm.dao.KerberosPrincipalDAO;",
          "41: import org.apache.ambari.server.orm.entities.HostEntity;",
          "42: import org.apache.ambari.server.orm.entities.KerberosKeytabPrincipalEntity;",
          "43: import org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor;",
          "44: import org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor;",
          "45: import org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import org.apache.ambari.server.state.Cluster;",
          "44: import org.apache.ambari.server.state.Clusters;",
          "45: import org.apache.ambari.server.state.kerberos.KerberosDescriptor;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:         String clusterName = (String) propertyMap.get(KERBEROS_IDENTITY_CLUSTER_NAME_PROPERTY_ID);",
          "159:         String hostName = (String) propertyMap.get(KERBEROS_IDENTITY_HOST_NAME_PROPERTY_ID);",
          "162:         Map<String, Collection<KerberosIdentityDescriptor>> hostDescriptors =",
          "165:         if (hostDescriptors != null) {",
          "166:           for (Map.Entry<String, Collection<KerberosIdentityDescriptor>> entry : hostDescriptors.entrySet()) {",
          "",
          "[Removed Lines]",
          "163:             kerberosHelper.getActiveIdentities(clusterName, hostName, null, null, true);",
          "",
          "[Added Lines]",
          "164:         Clusters clusters = getManagementController().getClusters();",
          "165:         Cluster cluster = clusters.getCluster(clusterName);",
          "167:         KerberosDescriptor kerberosDescriptor = kerberosHelper.getKerberosDescriptor(cluster, false);",
          "171:             kerberosHelper.getActiveIdentities(clusterName, hostName, null, null, true, null,",
          "172:                 kerberosDescriptor);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabDAO.java||ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabDAO.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabDAO.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabDAO.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.ArrayList;",
          "22: import java.util.Collections;",
          "23: import java.util.List;",
          "25: import javax.persistence.EntityManager;",
          "26: import javax.persistence.TypedQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.util.concurrent.TimeUnit;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: import org.slf4j.Logger;",
          "33: import org.slf4j.LoggerFactory;",
          "35: import com.google.inject.Inject;",
          "36: import com.google.inject.Provider;",
          "37: import com.google.inject.Singleton;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: import com.google.common.base.Stopwatch;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:   @RequiresSession",
          "90:   public List<KerberosKeytabEntity> findByPrincipalAndHost(String principalName, Long hostId) {",
          "91:     if(hostId == null) {",
          "93:     }",
          "94:     TypedQuery<KerberosKeytabEntity> query = entityManagerProvider.get().",
          "95:       createNamedQuery(\"KerberosKeytabEntity.findByPrincipalAndHost\", KerberosKeytabEntity.class);",
          "96:     query.setParameter(\"hostId\", hostId);",
          "",
          "[Removed Lines]",
          "92:       return findByPrincipalAndNullHost(principalName);",
          "",
          "[Added Lines]",
          "93:     Stopwatch stopwatch = Stopwatch.createStarted();",
          "95:       List<KerberosKeytabEntity> result = findByPrincipalAndNullHost(principalName);",
          "96:       LOG.debug(\"Loading keytabs by principal name took {}ms\",",
          "97:           stopwatch.elapsed(TimeUnit.MILLISECONDS));",
          "99:       return result;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "99:     if(result == null) {",
          "100:       return Collections.emptyList();",
          "101:     }",
          "102:     return result;",
          "103:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:     LOG.debug(\"Loading keytabs by principal name and host took {}ms\",",
          "112:         stopwatch.elapsed(TimeUnit.MILLISECONDS));",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java||ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     Long hostId = hostEntity == null ? null : hostEntity.getHostId();",
          "79:     KerberosKeytabPrincipalEntity kkp = findByNaturalKey(hostId, kerberosKeytabEntity.getKeytabPath(), kerberosPrincipalEntity.getPrincipalName());",
          "80:     if (kkp == null) {",
          "81:       kkp = new KerberosKeytabPrincipalEntity(",
          "82:           kerberosKeytabEntity,",
          "83:           hostEntity,",
          "84:           kerberosPrincipalEntity",
          "85:       );",
          "86:       create(kkp);",
          "87:       kerberosKeytabEntity.addKerberosKeytabPrincipal(kkp);",
          "88:       kerberosPrincipalEntity.addKerberosKeytabPrincipal(kkp);",
          "89:     }",
          "91:   }",
          "93:   @Transactional",
          "",
          "[Removed Lines]",
          "77:   public KerberosKeytabPrincipalEntity findOrCreate(KerberosKeytabEntity kerberosKeytabEntity, HostEntity hostEntity, KerberosPrincipalEntity kerberosPrincipalEntity) {",
          "90:     return kkp;",
          "",
          "[Added Lines]",
          "77:   public KeytabPrincipalFindOrCreateResult findOrCreate(KerberosKeytabEntity kerberosKeytabEntity, HostEntity hostEntity, KerberosPrincipalEntity kerberosPrincipalEntity) {",
          "78:     KeytabPrincipalFindOrCreateResult result = new KeytabPrincipalFindOrCreateResult();",
          "79:     result.created = false;",
          "84:       result.created = true;",
          "97:     result.kkp = kkp;",
          "98:     return result;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "345:           principalNames);",
          "346:     }",
          "347:   }",
          "348: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "362:   public static class KeytabPrincipalFindOrCreateResult {",
          "363:     public KerberosKeytabPrincipalEntity kkp;",
          "364:     public boolean created;",
          "365:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosPrincipalDAO.java||ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosPrincipalDAO.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosPrincipalDAO.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosPrincipalDAO.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:   @Transactional",
          "74:   }",
          "",
          "[Removed Lines]",
          "72:   public void create(String principalName, boolean service) {",
          "73:     create(new KerberosPrincipalEntity(principalName, service, null));",
          "",
          "[Added Lines]",
          "72:   public KerberosPrincipalEntity create(String principalName, boolean service) {",
          "73:     KerberosPrincipalEntity kpe = new KerberosPrincipalEntity(principalName, service, null);",
          "74:     create(kpe);",
          "75:     return kpe;",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabEntity.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabEntity.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabEntity.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import javax.persistence.NamedQueries;",
          "30: import javax.persistence.NamedQuery;",
          "31: import javax.persistence.OneToMany;",
          "32: import javax.persistence.Table;",
          "34: @Entity",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import javax.persistence.QueryHint;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:   @NamedQuery(name = \"KerberosKeytabEntity.findAll\", query = \"SELECT kk FROM KerberosKeytabEntity kk\"),",
          "38:   @NamedQuery(",
          "39:     name = \"KerberosKeytabEntity.findByPrincipalAndHost\",",
          "42:   @NamedQuery(",
          "43:     name = \"KerberosKeytabEntity.findByPrincipalAndNullHost\",",
          "44:     query = \"SELECT kk FROM KerberosKeytabEntity kk JOIN kk.kerberosKeytabPrincipalEntities kkp WHERE kkp.hostId IS NULL AND kkp.principalName=:principalName\"",
          "",
          "[Removed Lines]",
          "40:     query = \"SELECT kk FROM KerberosKeytabEntity kk JOIN kk.kerberosKeytabPrincipalEntities kkp WHERE kkp.hostId=:hostId AND kkp.principalName=:principalName\"",
          "41:   ),",
          "",
          "[Added Lines]",
          "41:         query = \"SELECT kk FROM KerberosKeytabEntity kk, KerberosKeytabPrincipalEntity kkp WHERE kkp.hostId=:hostId AND kkp.principalName=:principalName AND kkp.keytabPath = kk.keytabPath\",",
          "42:         hints = {",
          "43:             @QueryHint(name = \"eclipselink.query-results-cache\", value = \"true\"),",
          "44:             @QueryHint(name = \"eclipselink.query-results-cache.size\", value = \"500\") }),",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import javax.persistence.CascadeType;",
          "25: import javax.persistence.Column;",
          "26: import javax.persistence.Entity;",
          "27: import javax.persistence.GeneratedValue;",
          "28: import javax.persistence.GenerationType;",
          "29: import javax.persistence.Id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import javax.persistence.FetchType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: import javax.persistence.NamedQueries;",
          "33: import javax.persistence.NamedQuery;",
          "34: import javax.persistence.OneToMany;",
          "35: import javax.persistence.Table;",
          "36: import javax.persistence.TableGenerator;",
          "38: import com.google.common.base.Objects;",
          "39: import com.google.common.collect.ArrayListMultimap;",
          "40: import com.google.common.collect.Multimap;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: import javax.persistence.QueryHint;",
          "40: import org.apache.ambari.server.serveraction.kerberos.stageutils.ResolvedKerberosPrincipal;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:     query = \"SELECT kkpe FROM KerberosKeytabPrincipalEntity kkpe WHERE kkpe.hostId=:hostId\"",
          "73:   ),",
          "74:   @NamedQuery(",
          "75:     name = \"KerberosKeytabPrincipalEntity.findByHostKeytabAndPrincipal\",",
          "76:     query = \"SELECT kkpe FROM KerberosKeytabPrincipalEntity kkpe WHERE kkpe.hostId=:hostId AND kkpe.keytabPath=:keytabPath AND kkpe.principalName=:principalName\"",
          "77:   ),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:         name = \"KerberosKeytabPrincipalEntity.findByPrincipalAndHost\",",
          "80:         query = \"SELECT kkpe FROM KerberosKeytabPrincipalEntity kkpe WHERE kkpe.hostId=:hostId AND kkpe.principalName=:principalName\",",
          "81:         hints = {",
          "82:             @QueryHint(name = \"eclipselink.query-results-cache\", value = \"true\"),",
          "83:             @QueryHint(name = \"eclipselink.query-results-cache.size\", value = \"500\") }),",
          "84:     @NamedQuery(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "98:   @Column(name = \"is_distributed\", nullable = false)",
          "99:   private Integer isDistributed = 0;",
          "102:   @JoinColumn(name = \"keytab_path\", referencedColumnName = \"keytab_path\", updatable = false, nullable = false, insertable = false)",
          "103:   private KerberosKeytabEntity kerberosKeytabEntity;",
          "",
          "[Removed Lines]",
          "101:   @ManyToOne",
          "",
          "[Added Lines]",
          "116:   @ManyToOne(fetch = FetchType.EAGER)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "110:   @JoinColumn(name = \"principal_name\", referencedColumnName = \"principal_name\", updatable = false, nullable = false, insertable = false)",
          "111:   private KerberosPrincipalEntity kerberosPrincipalEntity;",
          "114:   private List<KerberosKeytabServiceMappingEntity> serviceMapping = new ArrayList<>();",
          "116:   public KerberosKeytabPrincipalEntity() {",
          "",
          "[Removed Lines]",
          "113:   @OneToMany(cascade = CascadeType.ALL, mappedBy = \"kerberosKeytabPrincipalEntity\", orphanRemoval = true)",
          "",
          "[Added Lines]",
          "133:   @OneToMany(",
          "134:       cascade = CascadeType.ALL,",
          "135:       mappedBy = \"kerberosKeytabPrincipalEntity\",",
          "136:       orphanRemoval = true,",
          "137:       fetch = FetchType.EAGER)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "144:   }",
          "146:   public void setKerberosKeytabEntity(KerberosKeytabEntity kke) {",
          "148:     if (kke != null) {",
          "149:       keytabPath = kke.getKeytabPath();",
          "150:     }",
          "",
          "[Removed Lines]",
          "147:     this.kerberosKeytabEntity = kke;",
          "",
          "[Added Lines]",
          "171:     kerberosKeytabEntity = kke;",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import java.nio.charset.Charset;",
          "24: import java.util.Map;",
          "25: import java.util.concurrent.ConcurrentMap;",
          "27: import org.apache.ambari.server.AmbariException;",
          "28: import org.apache.ambari.server.agent.CommandReport;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import java.util.concurrent.locks.Lock;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: import org.slf4j.Logger;",
          "47: import org.slf4j.LoggerFactory;",
          "49: import com.google.inject.Inject;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: import com.google.common.util.concurrent.Striped;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:   @Inject",
          "79:   private HostDAO hostDAO;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:   private Striped<Lock> m_locksByKeytab = Striped.lazyWeakLock(25);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136:           File hostDirectory = new File(dataDirectory, hostName);",
          "137:           File srcKeytabFile = new File(hostDirectory, DigestUtils.sha256Hex(destKeytabFilePath));",
          "150:             }",
          "151:           }",
          "152:         }",
          "153:       }",
          "",
          "[Removed Lines]",
          "139:           if (srcKeytabFile.exists()) {",
          "140:             String ownerAccess = keytab.getOwnerAccess();",
          "141:             String groupAccess = keytab.getGroupAccess();",
          "143:             installAmbariServerIdentity(resolvedPrincipal, srcKeytabFile.getAbsolutePath(), destKeytabFilePath,",
          "144:               keytab.getOwnerName(), ownerAccess,",
          "145:               keytab.getGroupName(), groupAccess, actionLog);",
          "147:             if (serviceMappingEntry.getValue().contains(\"AMBARI_SERVER_SELF\")) {",
          "149:               configureJAAS(resolvedPrincipal.getPrincipal(), destKeytabFilePath, actionLog);",
          "",
          "[Added Lines]",
          "146:           Lock lock = m_locksByKeytab.get(destKeytabFilePath);",
          "147:           lock.lock();",
          "148:           try {",
          "149:             if (srcKeytabFile.exists()) {",
          "150:               String ownerAccess = keytab.getOwnerAccess();",
          "151:               String groupAccess = keytab.getGroupAccess();",
          "153:               installAmbariServerIdentity(resolvedPrincipal, srcKeytabFile.getAbsolutePath(), destKeytabFilePath,",
          "154:                 keytab.getOwnerName(), ownerAccess,",
          "155:                 keytab.getGroupName(), groupAccess, actionLog);",
          "157:               if (serviceMappingEntry.getValue().contains(\"AMBARI_SERVER_SELF\")) {",
          "159:                 configureJAAS(resolvedPrincipal.getPrincipal(), destKeytabFilePath, actionLog);",
          "160:               }",
          "162:           } finally {",
          "163:             lock.unlock();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "215:       for(Map.Entry<String, String> mapping : principal.getServiceMapping().entries()) {",
          "216:         String serviceName = mapping.getKey();",
          "217:         String componentName = mapping.getValue();",
          "219:         entity.setDistributed(true);",
          "220:         entity.putServiceMapping(serviceName, componentName);",
          "221:         kerberosKeytabPrincipalDAO.merge(entity);",
          "",
          "[Removed Lines]",
          "218:         KerberosKeytabPrincipalEntity entity = kerberosKeytabPrincipalDAO.findOrCreate(kke, hostEntity, kpe);",
          "",
          "[Added Lines]",
          "231:         KerberosKeytabPrincipalEntity entity = kerberosKeytabPrincipalDAO.findOrCreate(kke, hostEntity, kpe).kkp;",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.io.File;",
          "22: import java.io.IOException;",
          "24: import java.util.HashSet;",
          "25: import java.util.Map;",
          "26: import java.util.Set;",
          "27: import java.util.concurrent.ConcurrentMap;",
          "29: import org.apache.ambari.server.AmbariException;",
          "30: import org.apache.ambari.server.actionmanager.HostRoleStatus;",
          "",
          "[Removed Lines]",
          "23: import java.util.HashMap;",
          "",
          "[Added Lines]",
          "26: import java.util.concurrent.ConcurrentHashMap;",
          "28: import java.util.concurrent.locks.Lock;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: import org.apache.ambari.server.audit.event.kerberos.CreateKeyTabKerberosAuditEvent;",
          "33: import org.apache.ambari.server.configuration.Configuration;",
          "34: import org.apache.ambari.server.controller.KerberosHelper;",
          "36: import org.apache.ambari.server.orm.dao.KerberosPrincipalDAO;",
          "37: import org.apache.ambari.server.orm.entities.KerberosPrincipalEntity;",
          "38: import org.apache.ambari.server.serveraction.ActionLog;",
          "",
          "[Removed Lines]",
          "35: import org.apache.ambari.server.orm.dao.HostDAO;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44: import org.slf4j.Logger;",
          "45: import org.slf4j.LoggerFactory;",
          "47: import com.google.inject.Inject;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: import com.google.common.util.concurrent.Striped;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71:   @Inject",
          "72:   private Configuration configuration;",
          "80:   @Inject",
          "81:   private KerberosKeytabController kerberosKeytabController;",
          "",
          "[Removed Lines]",
          "77:   @Inject",
          "78:   private HostDAO hostDAO;",
          "87:   Map<String, Set<String>> visitedIdentities = new HashMap<>();",
          "",
          "[Added Lines]",
          "81:   private Striped<Lock> m_locksByKeytab = Striped.lazyWeakLock(25);",
          "87:   Map<String, Set<String>> visitedIdentities = new ConcurrentHashMap<>();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "175:       } else {",
          "176:         Map<String, String> principalPasswordMap = getPrincipalPasswordMap(requestSharedDataContext);",
          "177:         Map<String, Integer> principalKeyNumberMap = getPrincipalKeyNumberMap(requestSharedDataContext);",
          "178:         for (ResolvedKerberosKeytab rkk : keytabsToCreate) {",
          "179:           String hostName = resolvedPrincipal.getHostName();",
          "180:           String keytabFilePath = rkk.getFile();",
          "182:           if ((hostName != null) && !hostName.isEmpty() && (keytabFilePath != null) && !keytabFilePath.isEmpty()) {",
          "232:                     } else {",
          "237:                         actionLog.writeStdErr(message);",
          "239:                         commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());",
          "240:                       }",
          "241:                     }",
          "256:                         actionLog.writeStdErr(message);",
          "258:                         commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());",
          "259:                       }",
          "264:                       commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());",
          "265:                     }",
          "276:                 }",
          "277:               } else {",
          "283:               }",
          "286:             }",
          "287:           }",
          "288:         }",
          "",
          "[Removed Lines]",
          "183:             Set<String> visitedPrincipalKeys = visitedIdentities.get(resolvedPrincipal.getPrincipal());",
          "184:             String visitationKey = String.format(\"%s|%s\", hostName, keytabFilePath);",
          "186:             if ((visitedPrincipalKeys == null) || !visitedPrincipalKeys.contains(visitationKey)) {",
          "189:               String password = principalPasswordMap.get(resolvedPrincipal.getPrincipal());",
          "190:               Integer keyNumber = principalKeyNumberMap.get(resolvedPrincipal.getPrincipal());",
          "192:               message = String.format(\"Creating keytab file for %s on host %s\", resolvedPrincipal.getPrincipal(), hostName);",
          "193:               LOG.info(message);",
          "194:               actionLog.writeStdOut(message);",
          "195:               auditEventBuilder.withPrincipal(resolvedPrincipal.getPrincipal()).withHostName(hostName).withKeyTabFilePath(keytabFilePath);",
          "199:               File hostDirectory = new File(dataDirectory, hostName);",
          "202:               if (!hostDirectory.exists() && hostDirectory.mkdirs()) {",
          "204:                 ensureAmbariOnlyAccess(hostDirectory);",
          "205:               }",
          "207:               if (hostDirectory.exists()) {",
          "208:                 File destinationKeytabFile = new File(hostDirectory, DigestUtils.sha256Hex(keytabFilePath));",
          "210:                 boolean regenerateKeytabs = getOperationType(getCommandParameters()) == OperationType.RECREATE_ALL;",
          "212:                 if(!includedInFilter) {",
          "214:                   regenerateKeytabs = false;",
          "215:                 }",
          "217:                 KerberosPrincipalEntity principalEntity = kerberosPrincipalDAO.find(resolvedPrincipal.getPrincipal());",
          "218:                 String cachedKeytabPath = (principalEntity == null) ? null : principalEntity.getCachedKeytabPath();",
          "220:                 if (password == null) {",
          "221:                   if (!regenerateKeytabs && hostName.equalsIgnoreCase(KerberosHelper.AMBARI_SERVER_HOST_NAME)) {",
          "224:                     message = String.format(\"Skipping keytab file for %s, missing password indicates nothing to do\", resolvedPrincipal.getPrincipal());",
          "225:                     LOG.info(message);",
          "226:                   } else {",
          "227:                     if (cachedKeytabPath == null) {",
          "228:                       message = String.format(\"Failed to create keytab for %s, missing cached file\", resolvedPrincipal.getPrincipal());",
          "229:                       actionLog.writeStdErr(message);",
          "230:                       LOG.error(message);",
          "231:                       commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());",
          "233:                       try {",
          "234:                         operationHandler.createKeytabFile(new File(cachedKeytabPath), destinationKeytabFile);",
          "235:                       } catch (KerberosOperationException e) {",
          "236:                         message = String.format(\"Failed to create keytab file for %s - %s\", resolvedPrincipal.getPrincipal(), e.getMessage());",
          "238:                         LOG.error(message, e);",
          "242:                   }",
          "243:                 } else {",
          "244:                   Keytab keytab = createKeytab(resolvedPrincipal.getPrincipal(), password, keyNumber, operationHandler, visitedPrincipalKeys != null, true, actionLog);",
          "246:                   if (keytab != null) {",
          "247:                     try {",
          "248:                       if (operationHandler.createKeytabFile(keytab, destinationKeytabFile)) {",
          "249:                         ensureAmbariOnlyAccess(destinationKeytabFile);",
          "251:                         message = String.format(\"Successfully created keytab file for %s at %s\", resolvedPrincipal.getPrincipal(), destinationKeytabFile.getAbsolutePath());",
          "252:                         LOG.info(message);",
          "253:                         auditEventBuilder.withPrincipal(resolvedPrincipal.getPrincipal()).withHostName(hostName).withKeyTabFilePath(destinationKeytabFile.getAbsolutePath());",
          "254:                       } else {",
          "255:                         message = String.format(\"Failed to create keytab file for %s at %s\", resolvedPrincipal.getPrincipal(), destinationKeytabFile.getAbsolutePath());",
          "257:                         LOG.error(message);",
          "260:                     } catch (KerberosOperationException e) {",
          "261:                       message = String.format(\"Failed to create keytab file for %s - %s\", resolvedPrincipal.getPrincipal(), e.getMessage());",
          "262:                       actionLog.writeStdErr(message);",
          "263:                       LOG.error(message, e);",
          "266:                   } else {",
          "267:                     commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());",
          "268:                   }",
          "270:                   if (visitedPrincipalKeys == null) {",
          "271:                     visitedPrincipalKeys = new HashSet<>();",
          "272:                     visitedIdentities.put(resolvedPrincipal.getPrincipal(), visitedPrincipalKeys);",
          "273:                   }",
          "275:                   visitedPrincipalKeys.add(visitationKey);",
          "278:                 message = String.format(\"Failed to create keytab file for %s, the container directory does not exist: %s\",",
          "279:                     resolvedPrincipal.getPrincipal(), hostDirectory.getAbsolutePath());",
          "280:                 actionLog.writeStdErr(message);",
          "281:                 LOG.error(message);",
          "282:                 commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());",
          "284:             } else {",
          "285:               LOG.debug(\"Skipping previously processed keytab for {} on host {}\", resolvedPrincipal.getPrincipal(), hostName);",
          "",
          "[Added Lines]",
          "184:             Lock lock = m_locksByKeytab.get(keytabFilePath);",
          "185:             lock.lock();",
          "187:             try {",
          "188:               Set<String> visitedPrincipalKeys = visitedIdentities.get(resolvedPrincipal.getPrincipal());",
          "189:               String visitationKey = String.format(\"%s|%s\", hostName, keytabFilePath);",
          "191:               if ((visitedPrincipalKeys == null) || !visitedPrincipalKeys.contains(visitationKey)) {",
          "194:                 String password = principalPasswordMap.get(resolvedPrincipal.getPrincipal());",
          "195:                 Integer keyNumber = principalKeyNumberMap.get(resolvedPrincipal.getPrincipal());",
          "197:                 message = String.format(\"Creating keytab file for %s on host %s\", resolvedPrincipal.getPrincipal(), hostName);",
          "198:                 LOG.info(message);",
          "199:                 actionLog.writeStdOut(message);",
          "200:                 auditEventBuilder.withPrincipal(resolvedPrincipal.getPrincipal()).withHostName(hostName).withKeyTabFilePath(keytabFilePath);",
          "204:                 File hostDirectory = new File(dataDirectory, hostName);",
          "207:                 if (!hostDirectory.exists() && hostDirectory.mkdirs()) {",
          "209:                   ensureAmbariOnlyAccess(hostDirectory);",
          "210:                 }",
          "212:                 if (hostDirectory.exists()) {",
          "213:                   File destinationKeytabFile = new File(hostDirectory, DigestUtils.sha256Hex(keytabFilePath));",
          "215:                   boolean regenerateKeytabs = getOperationType(getCommandParameters()) == OperationType.RECREATE_ALL;",
          "217:                   if(!includedInFilter) {",
          "219:                     regenerateKeytabs = false;",
          "220:                   }",
          "222:                   KerberosPrincipalEntity principalEntity = kerberosPrincipalDAO.find(resolvedPrincipal.getPrincipal());",
          "223:                   String cachedKeytabPath = (principalEntity == null) ? null : principalEntity.getCachedKeytabPath();",
          "225:                   if (password == null) {",
          "226:                     if (!regenerateKeytabs && hostName.equalsIgnoreCase(KerberosHelper.AMBARI_SERVER_HOST_NAME)) {",
          "229:                       message = String.format(\"Skipping keytab file for %s, missing password indicates nothing to do\", resolvedPrincipal.getPrincipal());",
          "230:                       LOG.info(message);",
          "232:                       if (cachedKeytabPath == null) {",
          "233:                         message = String.format(\"Failed to create keytab for %s, missing cached file\", resolvedPrincipal.getPrincipal());",
          "235:                         LOG.error(message);",
          "237:                       } else {",
          "238:                         try {",
          "239:                           operationHandler.createKeytabFile(new File(cachedKeytabPath), destinationKeytabFile);",
          "240:                         } catch (KerberosOperationException e) {",
          "241:                           message = String.format(\"Failed to create keytab file for %s - %s\", resolvedPrincipal.getPrincipal(), e.getMessage());",
          "242:                           actionLog.writeStdErr(message);",
          "243:                           LOG.error(message, e);",
          "244:                           commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());",
          "245:                         }",
          "248:                   } else {",
          "249:                     Keytab keytab = createKeytab(resolvedPrincipal.getPrincipal(), password, keyNumber, operationHandler, visitedPrincipalKeys != null, true, actionLog);",
          "251:                     if (keytab != null) {",
          "252:                       try {",
          "253:                         if (operationHandler.createKeytabFile(keytab, destinationKeytabFile)) {",
          "254:                           ensureAmbariOnlyAccess(destinationKeytabFile);",
          "256:                           message = String.format(\"Successfully created keytab file for %s at %s\", resolvedPrincipal.getPrincipal(), destinationKeytabFile.getAbsolutePath());",
          "257:                           LOG.info(message);",
          "258:                           auditEventBuilder.withPrincipal(resolvedPrincipal.getPrincipal()).withHostName(hostName).withKeyTabFilePath(destinationKeytabFile.getAbsolutePath());",
          "259:                         } else {",
          "260:                           message = String.format(\"Failed to create keytab file for %s at %s\", resolvedPrincipal.getPrincipal(), destinationKeytabFile.getAbsolutePath());",
          "261:                           actionLog.writeStdErr(message);",
          "262:                           LOG.error(message);",
          "263:                           commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());",
          "264:                         }",
          "265:                       } catch (KerberosOperationException e) {",
          "266:                         message = String.format(\"Failed to create keytab file for %s - %s\", resolvedPrincipal.getPrincipal(), e.getMessage());",
          "268:                         LOG.error(message, e);",
          "271:                     } else {",
          "275:                     if (visitedPrincipalKeys == null) {",
          "276:                       visitedPrincipalKeys = new HashSet<>();",
          "277:                       visitedIdentities.put(resolvedPrincipal.getPrincipal(), visitedPrincipalKeys);",
          "278:                     }",
          "280:                     visitedPrincipalKeys.add(visitationKey);",
          "281:                   }",
          "282:                 } else {",
          "283:                   message = String.format(\"Failed to create keytab file for %s, the container directory does not exist: %s\",",
          "284:                       resolvedPrincipal.getPrincipal(), hostDirectory.getAbsolutePath());",
          "285:                   actionLog.writeStdErr(message);",
          "286:                   LOG.error(message);",
          "287:                   commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());",
          "290:                 LOG.debug(\"Skipping previously processed keytab for {} on host {}\", resolvedPrincipal.getPrincipal(), hostName);",
          "292:             } finally {",
          "293:               lock.unlock();",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import java.util.Map;",
          "24: import java.util.Set;",
          "25: import java.util.concurrent.ConcurrentMap;",
          "27: import org.apache.ambari.server.AmbariException;",
          "28: import org.apache.ambari.server.actionmanager.HostRoleStatus;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import java.util.concurrent.locks.Lock;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: import org.slf4j.Logger;",
          "40: import org.slf4j.LoggerFactory;",
          "42: import com.google.inject.Inject;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import com.google.common.util.concurrent.Striped;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:   @Inject",
          "68:   private KerberosKeytabPrincipalDAO kerberosKeytabPrincipalDAO;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:   private Striped<Lock> locksByPrincipal = Striped.lazyWeakLock(25);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "161:       if (processPrincipal) {",
          "162:         Map<String, String> principalPasswordMap = getPrincipalPasswordMap(requestSharedDataContext);",
          "186:             }",
          "189:           }",
          "190:         }",
          "191:       }",
          "192:     }",
          "",
          "[Removed Lines]",
          "164:         String password = principalPasswordMap.get(resolvedPrincipal.getPrincipal());",
          "166:         if (password == null) {",
          "167:           CreatePrincipalResult result = createPrincipal(resolvedPrincipal.getPrincipal(), servicePrincipal, kerberosConfiguration, operationHandler, regenerateKeytabs, actionLog);",
          "168:           if (result == null) {",
          "169:             commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());",
          "170:           } else {",
          "171:             Map<String, Integer> principalKeyNumberMap = getPrincipalKeyNumberMap(requestSharedDataContext);",
          "173:             principalPasswordMap.put(resolvedPrincipal.getPrincipal(), result.getPassword());",
          "174:             principalKeyNumberMap.put(resolvedPrincipal.getPrincipal(), result.getKeyNumber());",
          "176:             for (KerberosKeytabPrincipalEntity kkpe: kerberosKeytabPrincipalDAO.findByPrincipal(resolvedPrincipal.getPrincipal())) {",
          "177:               kkpe.setDistributed(false);",
          "178:               kerberosKeytabPrincipalDAO.merge(kkpe);",
          "179:             }",
          "181:             KerberosPrincipalEntity principalEntity = kerberosPrincipalDAO.find(resolvedPrincipal.getPrincipal());",
          "182:             try {",
          "183:               new File(principalEntity.getCachedKeytabPath()).delete();",
          "184:             } catch (Exception e) {",
          "185:               LOG.debug(\"Failed to delete cache file '{}'\", principalEntity.getCachedKeytabPath());",
          "187:             principalEntity.setCachedKeytabPath(null);",
          "188:             kerberosPrincipalDAO.merge(principalEntity);",
          "",
          "[Added Lines]",
          "171:         String principal = resolvedPrincipal.getPrincipal();",
          "172:         Lock lock = locksByPrincipal.get(principal);",
          "173:         lock.lock();",
          "175:         String password = principalPasswordMap.get(principal);",
          "177:         try {",
          "178:           if (password == null) {",
          "179:             CreatePrincipalResult result = createPrincipal(resolvedPrincipal.getPrincipal(), servicePrincipal, kerberosConfiguration, operationHandler, regenerateKeytabs, actionLog);",
          "180:             if (result == null) {",
          "181:               commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());",
          "182:             } else {",
          "183:               Map<String, Integer> principalKeyNumberMap = getPrincipalKeyNumberMap(requestSharedDataContext);",
          "185:               principalPasswordMap.put(resolvedPrincipal.getPrincipal(), result.getPassword());",
          "186:               principalKeyNumberMap.put(resolvedPrincipal.getPrincipal(), result.getKeyNumber());",
          "188:               for (KerberosKeytabPrincipalEntity kkpe: kerberosKeytabPrincipalDAO.findByPrincipal(resolvedPrincipal.getPrincipal())) {",
          "189:                 kkpe.setDistributed(false);",
          "190:                 kerberosKeytabPrincipalDAO.merge(kkpe);",
          "191:               }",
          "193:               KerberosPrincipalEntity principalEntity = kerberosPrincipalDAO.find(resolvedPrincipal.getPrincipal());",
          "194:               try {",
          "195:                 new File(principalEntity.getCachedKeytabPath()).delete();",
          "196:               } catch (Exception e) {",
          "197:                 LOG.debug(\"Failed to delete cache file '{}'\", principalEntity.getCachedKeytabPath());",
          "198:               }",
          "199:               principalEntity.setCachedKeytabPath(null);",
          "200:               kerberosPrincipalDAO.merge(principalEntity);",
          "203:         } finally {",
          "204:           lock.unlock();",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/FinalizeKerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/FinalizeKerberosServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/FinalizeKerberosServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/FinalizeKerberosServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.Map;",
          "23: import java.util.Set;",
          "24: import java.util.concurrent.ConcurrentMap;",
          "26: import org.apache.ambari.server.AmbariException;",
          "27: import org.apache.ambari.server.actionmanager.HostRoleStatus;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import java.util.concurrent.locks.Lock;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: import org.slf4j.Logger;",
          "36: import org.slf4j.LoggerFactory;",
          "38: import com.google.inject.Inject;",
          "40: public class FinalizeKerberosServerAction extends KerberosServerAction {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import com.google.common.util.concurrent.Striped;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43:   private final TopologyHolder topologyHolder;",
          "45:   @Inject",
          "46:   public FinalizeKerberosServerAction(TopologyHolder topologyHolder) {",
          "47:     this.topologyHolder = topologyHolder;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:   private Striped<Lock> m_locksByKeytab = Striped.lazyWeakLock(25);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "92:           String keytabFilePath = resolvedPrincipal.getKeytabPath();",
          "95:             Set<String> visited = (Set<String>) requestSharedDataContext.get(this.getClass().getName() + \"_visited\");",
          "97:             if (!visited.contains(keytabFilePath)) {",
          "",
          "[Removed Lines]",
          "94:           if (!StringUtils.isEmpty(keytabFilePath)) {",
          "",
          "[Added Lines]",
          "101:           if (StringUtils.isEmpty(keytabFilePath)) {",
          "102:             return null;",
          "103:           }",
          "105:           Lock lock = m_locksByKeytab.get(keytabFilePath);",
          "106:           lock.lock();",
          "107:           try {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "155:               visited.add(keytabFilePath);",
          "156:             }",
          "157:           }",
          "158:         }",
          "159:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:           } finally {",
          "171:             lock.unlock();",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.io.File;",
          "22: import java.io.IOException;",
          "23: import java.lang.reflect.Type;",
          "24: import java.util.Collection;",
          "25: import java.util.HashMap;",
          "26: import java.util.Map;",
          "27: import java.util.Set;",
          "29: import org.apache.ambari.server.AmbariException;",
          "30: import org.apache.ambari.server.actionmanager.HostRoleStatus;",
          "31: import org.apache.ambari.server.agent.CommandReport;",
          "32: import org.apache.ambari.server.agent.ExecutionCommand;",
          "33: import org.apache.ambari.server.controller.KerberosHelper;",
          "34: import org.apache.ambari.server.controller.UpdateConfigurationPolicy;",
          "35: import org.apache.ambari.server.orm.dao.HostDAO;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.util.ArrayList;",
          "27: import java.util.HashSet;",
          "28: import java.util.List;",
          "31: import java.util.concurrent.CompletionService;",
          "32: import java.util.concurrent.ExecutorCompletionService;",
          "33: import java.util.concurrent.ExecutorService;",
          "34: import java.util.concurrent.Executors;",
          "35: import java.util.concurrent.Future;",
          "36: import java.util.concurrent.ThreadFactory;",
          "37: import java.util.concurrent.TimeUnit;",
          "43: import org.apache.ambari.server.configuration.Configuration;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: import org.apache.ambari.server.state.Cluster;",
          "43: import org.apache.ambari.server.state.Clusters;",
          "44: import org.apache.ambari.server.state.Config;",
          "45: import org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor;",
          "46: import org.apache.ambari.server.utils.StageUtils;",
          "47: import org.apache.commons.io.FileUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: import org.apache.ambari.server.state.Host;",
          "57: import org.apache.ambari.server.state.kerberos.KerberosDescriptor;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50: import org.slf4j.LoggerFactory;",
          "52: import com.google.common.reflect.TypeToken;",
          "53: import com.google.inject.Inject;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66: import com.google.common.util.concurrent.ThreadFactoryBuilder;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "189:   @Inject",
          "190:   private KerberosKeytabController kerberosKeytabController;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:   @Inject",
          "207:   private Configuration configuration;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "437:       }",
          "439:       try {",
          "440:         Map<String, Collection<String>> serviceComponentFilter = getServiceComponentFilter();",
          "441:         if (serviceComponentFilter != null && pruneServiceFilter()) {",
          "442:           kerberosKeytabController.adjustServiceComponentFilter(clusters.getCluster(getClusterName()), true, serviceComponentFilter);",
          "443:         }",
          "444:         final Collection<KerberosIdentityDescriptor> serviceIdentities = serviceComponentFilter == null ? null : kerberosKeytabController.getServiceIdentities(getClusterName(), serviceComponentFilter.keySet());",
          "445:         for (ResolvedKerberosKeytab rkk : kerberosKeytabController.getFilteredKeytabs(serviceIdentities, getHostFilter(),getIdentityFilter())) {",
          "446:           for (ResolvedKerberosPrincipal principal : rkk.getPrincipals()) {",
          "450:             if (commandReport != null) {",
          "451:               break;",
          "452:             }",
          "453:           }",
          "454:         }",
          "455:       } finally {",
          "",
          "[Removed Lines]",
          "447:             commandReport = processIdentity(principal, handler, kerberosConfiguration, isRelevantIdentity(serviceIdentities, principal), requestSharedDataContext);",
          "",
          "[Added Lines]",
          "462:         String factoryName = \"process-identity-%d\";",
          "463:         ExecutionCommand executionCommand = getExecutionCommand();",
          "464:         if( null != executionCommand ) {",
          "465:           factoryName = \"process-identity-task-\" + executionCommand.getTaskId() + \"-thread-%d\";",
          "466:         }",
          "468:         ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat(factoryName).build();",
          "470:         int threadCount = configuration.getKerberosServerActionThreadpoolSize();",
          "471:         ExecutorService executorService = Executors.newFixedThreadPool(threadCount, threadFactory);",
          "472:         CompletionService<CommandReport> completionService = new ExecutorCompletionService<>(executorService);",
          "479:         List<Future<CommandReport>> futures = new ArrayList<>();",
          "483:             Future<CommandReport> future = completionService.submit(() -> {",
          "484:               try {",
          "485:                 return processIdentity(principal, handler, kerberosConfiguration,",
          "486:                     isRelevantIdentity(serviceIdentities, principal), requestSharedDataContext);",
          "487:               } catch (AmbariException ambariException) {",
          "488:                 throw new RuntimeException(ambariException);",
          "489:               }",
          "490:             });",
          "493:             futures.add(future);",
          "494:           }",
          "495:         }",
          "497:         LOG.info(\"Processing {} identities concurrently...\", futures.size());",
          "501:         try {",
          "502:           for( int i = 0; i < futures.size(); i++ ) {",
          "503:             Future<CommandReport> future = completionService.take();",
          "504:             commandReport = future.get();",
          "512:         } catch (Exception exception) {",
          "513:           LOG.error(\"Unable to process identities asynchronously\", exception);",
          "514:           return createCommandReport(0, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(),actionLog.getStdErr());",
          "515:         } finally {",
          "516:           futures.stream()",
          "517:             .filter(x -> !x.isCancelled() && !x.isDone())",
          "518:             .forEach(x -> x.cancel(true));",
          "520:           executorService.shutdown();",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import org.apache.ambari.server.orm.entities.KerberosKeytabPrincipalEntity;",
          "36: import org.apache.ambari.server.orm.entities.KerberosPrincipalEntity;",
          "37: import org.apache.ambari.server.state.Cluster;",
          "38: import org.apache.ambari.server.state.Service;",
          "39: import org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor;",
          "40: import org.apache.commons.collections.MapUtils;",
          "42: import com.google.common.collect.ImmutableSet;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import org.apache.ambari.server.state.Clusters;",
          "39: import org.apache.ambari.server.state.Host;",
          "41: import org.apache.ambari.server.state.kerberos.KerberosDescriptor;",
          "43: import org.apache.ambari.server.utils.StageUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:   @Inject",
          "57:   private KerberosKeytabPrincipalDAO kerberosKeytabPrincipalDAO;",
          "60:   private static KerberosHelper kerberosHelper;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:   @Inject",
          "64:   private Clusters clusters;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:   public Set<ResolvedKerberosKeytab> getFromPrincipal(ResolvedKerberosPrincipal rkp) {",
          "104:   }",
          "",
          "[Removed Lines]",
          "103:     return fromKeytabEntities(kerberosKeytabDAO.findByPrincipalAndHost(rkp.getPrincipal(), rkp.getHostId()));",
          "",
          "[Added Lines]",
          "110:     List<KerberosKeytabEntity> keytabs = kerberosKeytabDAO.findByPrincipalAndHost(",
          "111:         rkp.getPrincipal(), rkp.getHostId());",
          "113:     return fromKeytabEntities(keytabs);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "282:   public Collection<KerberosIdentityDescriptor> getServiceIdentities(String clusterName, Collection<String> services) throws AmbariException {",
          "283:     final Collection<KerberosIdentityDescriptor> serviceIdentities = new ArrayList<>();",
          "284:     for (String service : services) {",
          "286:         serviceIdentities.addAll(activeIdentities);",
          "287:       }",
          "288:     }",
          "",
          "[Removed Lines]",
          "285:       for (Collection<KerberosIdentityDescriptor> activeIdentities : kerberosHelper.getActiveIdentities(clusterName, null, service, null, true).values()) {",
          "",
          "[Added Lines]",
          "295:     Cluster cluster = clusters.getCluster(clusterName);",
          "296:     KerberosDescriptor kerberosDescriptor = kerberosHelper.getKerberosDescriptor(cluster, false);",
          "297:     Map<String, Map<String, Map<String, String>>> hostConfigurations = new HashMap<>();",
          "298:     Map<String, Host> hostMap = clusters.getHostsForCluster(clusterName);",
          "299:     Set<String> hosts = new HashSet<>(hostMap.keySet());",
          "301:     String ambariServerHostname = StageUtils.getHostName();",
          "302:     if (!hosts.contains(ambariServerHostname)) {",
          "303:       hosts.add(ambariServerHostname);",
          "304:     }",
          "305:     for( String hostName : hosts ) {",
          "306:       Map<String, Map<String, String>> configurations = kerberosHelper.calculateConfigurations(",
          "307:         cluster, hostName, kerberosDescriptor, false, false);",
          "308:       hostConfigurations.put(hostName, configurations);",
          "309:     }",
          "311:       Collection<Collection<KerberosIdentityDescriptor>> identities = kerberosHelper.getActiveIdentities(",
          "312:         clusterName,",
          "313:        null,",
          "314:         service,",
          "315:        null,",
          "316:        true,",
          "317:         hostConfigurations,",
          "318:         kerberosDescriptor",
          "319:       ).values();",
          "321:       for (Collection<KerberosIdentityDescriptor> activeIdentities : identities) {",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: import org.apache.ambari.server.orm.dao.ArtifactDAO;",
          "85: import org.apache.ambari.server.orm.dao.HostRoleCommandDAO;",
          "86: import org.apache.ambari.server.orm.dao.KerberosKeytabPrincipalDAO;",
          "87: import org.apache.ambari.server.orm.dao.KerberosPrincipalDAO;",
          "88: import org.apache.ambari.server.orm.entities.KerberosKeytabPrincipalEntity;",
          "89: import org.apache.ambari.server.scheduler.ExecutionScheduler;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: import org.apache.ambari.server.orm.dao.KerberosKeytabPrincipalDAO.KeytabPrincipalFindOrCreateResult;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3429:   private void testCreateTestIdentity(final PrincipalKeyCredential PrincipalKeyCredential, Boolean manageIdentities) throws Exception {",
          "3430:     KerberosHelper kerberosHelper = injector.getInstance(KerberosHelper.class);",
          "3431:     KerberosKeytabPrincipalDAO kerberosKeytabPrincipalDAO = injector.getInstance(KerberosKeytabPrincipalDAO.class);",
          "3433:     boolean managingIdentities = !Boolean.FALSE.equals(manageIdentities);",
          "3435:     final Map<String, String> kerberosEnvProperties = new HashMap<>();",
          "",
          "[Removed Lines]",
          "3432:     expect(kerberosKeytabPrincipalDAO.findOrCreate(anyObject(), anyObject(), anyObject())).andReturn(createNiceMock(KerberosKeytabPrincipalEntity.class)).anyTimes();",
          "",
          "[Added Lines]",
          "3433:     KerberosKeytabPrincipalEntity kkp = createNiceMock(KerberosKeytabPrincipalEntity.class);",
          "3434:     KeytabPrincipalFindOrCreateResult result = new KeytabPrincipalFindOrCreateResult();",
          "3435:     result.created = true;",
          "3436:     result.kkp = kkp;",
          "3438:     expect(kerberosKeytabPrincipalDAO.findOrCreate(anyObject(), anyObject(), anyObject())).andReturn(result).anyTimes();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3620:   private void testDeleteTestIdentity(final PrincipalKeyCredential PrincipalKeyCredential) throws Exception {",
          "3621:     KerberosHelper kerberosHelper = injector.getInstance(KerberosHelper.class);",
          "3622:     KerberosKeytabPrincipalDAO kerberosKeytabPrincipalDAO = injector.getInstance(KerberosKeytabPrincipalDAO.class);",
          "3624:     Host host1 = createMock(Host.class);",
          "3625:     expect(host1.getHostId()).andReturn(1l).anyTimes();",
          "",
          "[Removed Lines]",
          "3623:     expect(kerberosKeytabPrincipalDAO.findOrCreate(anyObject(), anyObject(), anyObject())).andReturn(createNiceMock(KerberosKeytabPrincipalEntity.class)).anyTimes();",
          "",
          "[Added Lines]",
          "3629:     KerberosKeytabPrincipalEntity kkp = createNiceMock(KerberosKeytabPrincipalEntity.class);",
          "3630:     KeytabPrincipalFindOrCreateResult result = new KeytabPrincipalFindOrCreateResult();",
          "3631:     result.created = true;",
          "3632:     result.kkp = kkp;",
          "3634:     expect(kerberosKeytabPrincipalDAO.findOrCreate(anyObject(), anyObject(), anyObject())).andReturn(result).anyTimes();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4051:     injector.getInstance(AmbariMetaInfo.class).init();",
          "4053:     Map<String, Collection<KerberosIdentityDescriptor>> identities;",
          "4056:     verifyAll();",
          "",
          "[Removed Lines]",
          "4054:     identities = kerberosHelper.getActiveIdentities(clusterName, hostName, serviceName, componentName, replaceHostNames);",
          "",
          "[Added Lines]",
          "4065:     identities = kerberosHelper.getActiveIdentities(clusterName, hostName, serviceName,",
          "4066:         componentName, replaceHostNames, null, null);",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/HostKerberosIdentityResourceProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/HostKerberosIdentityResourceProviderTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/internal/HostKerberosIdentityResourceProviderTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/internal/HostKerberosIdentityResourceProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: import org.apache.ambari.server.orm.dao.KerberosPrincipalDAO;",
          "44: import org.apache.ambari.server.orm.entities.HostEntity;",
          "45: import org.apache.ambari.server.orm.entities.KerberosKeytabPrincipalEntity;",
          "46: import org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor;",
          "47: import org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor;",
          "48: import org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor;",
          "49: import org.apache.ambari.server.state.kerberos.KerberosPrincipalType;",
          "50: import org.easymock.EasyMockSupport;",
          "51: import org.junit.Assert;",
          "52: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: import org.apache.ambari.server.state.Cluster;",
          "47: import org.apache.ambari.server.state.Clusters;",
          "48: import org.apache.ambari.server.state.kerberos.KerberosDescriptor;",
          "53: import org.easymock.EasyMock;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:   @Test",
          "133:   public void testGetResources() throws Exception {",
          "135:     AmbariManagementController managementController = createMock(AmbariManagementController.class);",
          "137:     KerberosPrincipalDescriptor principalDescriptor1 = createStrictMock(KerberosPrincipalDescriptor.class);",
          "138:     expect(principalDescriptor1.getValue()).andReturn(\"principal1@EXAMPLE.COM\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:     Clusters clusters = createNiceMock(Clusters.class);",
          "139:     expect(clusters.getCluster(EasyMock.anyString())).andReturn(",
          "140:         createNiceMock(Cluster.class)).once();",
          "143:     expect(managementController.getClusters()).andReturn(clusters).atLeastOnce();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "214:     activeIdentities.put(\"Host100\", identities);",
          "216:     KerberosHelper kerberosHelper = createStrictMock(KerberosHelper.class);",
          "218:         .andReturn(activeIdentities)",
          "222:     replayAll();",
          "",
          "[Removed Lines]",
          "217:     expect(kerberosHelper.getActiveIdentities(\"Cluster100\", \"Host100\", null, null, true))",
          "219:         .times(1);",
          "",
          "[Added Lines]",
          "225:     KerberosDescriptor kerberosDescriptor = createNiceMock(KerberosDescriptor.class);",
          "226:     expect(kerberosHelper.getKerberosDescriptor(",
          "227:         EasyMock.anyObject(Cluster.class),",
          "228:         EasyMock.eq(false))).andReturn(kerberosDescriptor).atLeastOnce();",
          "230:     expect(kerberosHelper.getActiveIdentities(\"Cluster100\", \"Host100\", null, null, true, null,",
          "231:         kerberosDescriptor))",
          "233:         .once();",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerActionTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerActionTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerActionTest.java -> ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerActionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: import org.apache.ambari.server.orm.DBAccessor;",
          "37: import org.apache.ambari.server.orm.dao.HostDAO;",
          "38: import org.apache.ambari.server.orm.dao.KerberosKeytabPrincipalDAO;",
          "39: import org.apache.ambari.server.orm.entities.HostEntity;",
          "40: import org.apache.ambari.server.orm.entities.KerberosKeytabPrincipalEntity;",
          "41: import org.apache.ambari.server.serveraction.ActionLog;",
          "42: import org.apache.ambari.server.serveraction.kerberos.stageutils.ResolvedKerberosPrincipal;",
          "43: import org.apache.ambari.server.state.Clusters;",
          "44: import org.apache.ambari.server.utils.StageUtils;",
          "45: import org.apache.commons.io.FileUtils;",
          "46: import org.easymock.EasyMockSupport;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import org.apache.ambari.server.orm.dao.KerberosKeytabPrincipalDAO.KeytabPrincipalFindOrCreateResult;",
          "45: import org.apache.ambari.server.state.stack.OsFamily;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:     expect(hostDAO.findByName(StageUtils.getHostName())).andReturn(hostEntity).once();",
          "96:     KerberosKeytabPrincipalDAO kerberosKeytabPrincipalDAO = injector.getInstance(KerberosKeytabPrincipalDAO.class);",
          "",
          "[Removed Lines]",
          "97:     KerberosKeytabPrincipalEntity kke = createNiceMock(KerberosKeytabPrincipalEntity.class);",
          "98:     expect(kerberosKeytabPrincipalDAO.findOrCreate(anyObject(), eq(hostEntity), anyObject())).andReturn(kke).once();",
          "99:     expect(kerberosKeytabPrincipalDAO.merge(kke)).andReturn(createNiceMock(KerberosKeytabPrincipalEntity.class)).once();",
          "",
          "[Added Lines]",
          "99:     KerberosKeytabPrincipalEntity kkp = createNiceMock(KerberosKeytabPrincipalEntity.class);",
          "100:     KeytabPrincipalFindOrCreateResult result = new KeytabPrincipalFindOrCreateResult();",
          "101:     result.created = true;",
          "102:     result.kkp = kkp;",
          "104:     expect(kerberosKeytabPrincipalDAO.findOrCreate(anyObject(), eq(hostEntity), anyObject())).andReturn(result).once();",
          "105:     expect(kerberosKeytabPrincipalDAO.merge(kkp)).andReturn(createNiceMock(KerberosKeytabPrincipalEntity.class)).once();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "215:         bind(AuditLogger.class).toInstance(createNiceMock(AuditLogger.class));",
          "216:         bind(Clusters.class).toInstance(createNiceMock(Clusters.class));",
          "217:         bind(KerberosHelper.class).toInstance(createNiceMock(KerberosHelper.class));",
          "219:         bind(HostDAO.class).toInstance(createMock(HostDAO.class));",
          "220:         bind(KerberosKeytabPrincipalDAO.class).toInstance(createMock(KerberosKeytabPrincipalDAO.class));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224:         bind(OsFamily.class).toInstance(createNiceMock(OsFamily.class));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f86a344cc07fe426e4a72b989cd10267297acc5",
      "candidate_info": {
        "commit_hash": "9f86a344cc07fe426e4a72b989cd10267297acc5",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/9f86a344cc07fe426e4a72b989cd10267297acc5",
        "files": [
          "ambari-server/src/main/resources/common-services/ZOOKEEPER/3.4.5/configuration/zookeeper-env.xml",
          "ambari-server/src/main/resources/common-services/ZOOKEEPER/3.4.5/package/scripts/params_linux.py"
        ],
        "message": "AMBARI-24564. Zookeeper should handle a customized Zookeeper service \u2026 (#2203)\n\n* AMBARI-24564. Zookeeper should handle a customized Zookeeper service principal name (dlysnichenko)\n\n #\n\n* AMBARI-24564. Zookeeper should handle a customized Zookeeper service principal name (dlysnichenko)\n\n* AMBARI-24564. Zookeeper should handle a customized Zookeeper service principal name. Fix default value (dlysnichenko)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/ZOOKEEPER/3.4.5/package/scripts/params_linux.py||ambari-server/src/main/resources/common-services/ZOOKEEPER/3.4.5/package/scripts/params_linux.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/ZOOKEEPER/3.4.5/package/scripts/params_linux.py||ambari-server/src/main/resources/common-services/ZOOKEEPER/3.4.5/package/scripts/params_linux.py": [
          "File: ambari-server/src/main/resources/common-services/ZOOKEEPER/3.4.5/package/scripts/params_linux.py -> ambari-server/src/main/resources/common-services/ZOOKEEPER/3.4.5/package/scripts/params_linux.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:   zoo_cfg_properties_map = {}",
          "82: zoo_cfg_properties_map_length = len(zoo_cfg_properties_map)",
          "85: zk_principal = zk_principal_name.replace('_HOST',hostname.lower())",
          "87: java64_home = config['ambariLevelParams']['java_home']",
          "",
          "[Removed Lines]",
          "84: zk_principal_name = default(\"/configurations/zookeeper-env/zookeeper_principal_name\", \"zookeeper@EXAMPLE.COM\")",
          "",
          "[Added Lines]",
          "84: zk_principal_name = default(\"/configurations/zookeeper-env/zookeeper_principal_name\", \"zookeeper/_HOST@EXAMPLE.COM\")",
          "85: zk_principal_user = zk_principal_name.split('/')[0]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb4a5b3eae14d35692e5136a3af642b57e5a658d",
      "candidate_info": {
        "commit_hash": "cb4a5b3eae14d35692e5136a3af642b57e5a658d",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/cb4a5b3eae14d35692e5136a3af642b57e5a658d",
        "files": [
          "contrib/views/wfmanager/src/main/resources/ui/app/components/coord-config.js"
        ],
        "message": "[AMBARI-25426] Error while Validating Coordinator xml in Workflow Manager View (asnaik) (#3153)",
        "before_after_code_files": [
          "contrib/views/wfmanager/src/main/resources/ui/app/components/coord-config.js||contrib/views/wfmanager/src/main/resources/ui/app/components/coord-config.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "contrib/views/wfmanager/src/main/resources/ui/app/components/coord-config.js||contrib/views/wfmanager/src/main/resources/ui/app/components/coord-config.js": [
          "File: contrib/views/wfmanager/src/main/resources/ui/app/components/coord-config.js -> contrib/views/wfmanager/src/main/resources/ui/app/components/coord-config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "505:       deferred.promise.then(function(data){",
          "506:         var x2js = new X2JS();",
          "507:         var workflowJson = x2js.xml_str2json(data);",
          "509:         var workflowProps = this.get('propertyExtractor').getDynamicProperties(data);",
          "510:         var dynamicProperties = this.get('coordinatorConfigs.props');",
          "511:         workflowProps.forEach((prop)=>{",
          "",
          "[Removed Lines]",
          "508:         this.set('workflowName', workflowJson[\"workflow-app\"]._name);",
          "",
          "[Added Lines]",
          "508:         if(workflowJson[\"workflow-app\"] && workflowJson[\"workflow-app\"]._name){",
          "509:           this.set('workflowName', workflowJson[\"workflow-app\"]._name);",
          "510:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a610a154c59b4eaf46137761ae7a89ffc79ff6c6",
      "candidate_info": {
        "commit_hash": "a610a154c59b4eaf46137761ae7a89ffc79ff6c6",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/a610a154c59b4eaf46137761ae7a89ffc79ff6c6",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRunner.java",
          "ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java",
          "ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSHostStatusCollector.java",
          "ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java",
          "ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CertificateUtils.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/stack/ConfigurationDirectory.java",
          "ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommandTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/bootstrap/BootStrapTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/configuration/ConfigurationTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/resources/TestResources.java",
          "ambari-server/src/test/java/org/apache/ambari/server/security/CertGenerationTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerActionTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/state/repository/VersionDefinitionTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog260Test.java"
        ],
        "message": "[AMBARI-25310] : Replace deprecated methods of FileUtils (cherry-pick to branch-2.7) (#3017)\n\n* [AMBARI-25310] : Replace deprecated methods of FileUtils (cherry-pick to branch-2.7)\n\n* minor changes",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRunner.java||ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRunner.java",
          "ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java||ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java",
          "ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSHostStatusCollector.java||ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSHostStatusCollector.java",
          "ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java||ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java",
          "ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java||ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java||ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CertificateUtils.java||ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CertificateUtils.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/stack/ConfigurationDirectory.java||ambari-server/src/main/java/org/apache/ambari/server/stack/ConfigurationDirectory.java",
          "ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommandTest.java||ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommandTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/bootstrap/BootStrapTest.java||ambari-server/src/test/java/org/apache/ambari/server/bootstrap/BootStrapTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/configuration/ConfigurationTest.java||ambari-server/src/test/java/org/apache/ambari/server/configuration/ConfigurationTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/resources/TestResources.java||ambari-server/src/test/java/org/apache/ambari/server/resources/TestResources.java",
          "ambari-server/src/test/java/org/apache/ambari/server/security/CertGenerationTest.java||ambari-server/src/test/java/org/apache/ambari/server/security/CertGenerationTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerActionTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerActionTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/state/repository/VersionDefinitionTest.java||ambari-server/src/test/java/org/apache/ambari/server/state/repository/VersionDefinitionTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog260Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog260Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRunner.java||ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRunner.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRunner.java -> ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRunner.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.io.File;",
          "22: import java.io.IOException;",
          "23: import java.nio.file.Paths;",
          "24: import java.util.ArrayList;",
          "25: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.nio.charset.Charset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163:   private String printMessage(String type, String file) {",
          "164:     String message = null;",
          "165:     try {",
          "167:       LOG.info(\"    Advisor script {}: {}\", type, message);",
          "168:     } catch (IOException io) {",
          "169:       LOG.error(\"Error in reading script log files\", io);",
          "",
          "[Removed Lines]",
          "166:       message = FileUtils.readFileToString(new File(file)).trim();",
          "",
          "[Added Lines]",
          "167:       message = FileUtils.readFileToString(new File(file), Charset.defaultCharset()).trim();",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java||ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java -> ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.FilenameFilter;",
          "23: import java.io.IOException;",
          "24: import java.lang.reflect.ParameterizedType;",
          "25: import java.util.ArrayList;",
          "26: import java.util.Arrays;",
          "27: import java.util.Collection;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import java.nio.charset.Charset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:     try {",
          "309:       createRequestDirectory();",
          "314:       saRunner.runScript(serviceAdvisorType, getCommandType(), requestDirectory);",
          "317:       T response = this.mapper.readValue(result, this.type);",
          "318:       return updateResponse(request, setRequestId(response));",
          "",
          "[Removed Lines]",
          "311:       FileUtils.writeStringToFile(new File(requestDirectory, \"hosts.json\"), adjusted.hostsJSON);",
          "312:       FileUtils.writeStringToFile(new File(requestDirectory, \"services.json\"), adjusted.servicesJSON);",
          "315:       String result = FileUtils.readFileToString(new File(requestDirectory, getResultFileName()));",
          "",
          "[Added Lines]",
          "312:       FileUtils.writeStringToFile(new File(requestDirectory, \"hosts.json\"), adjusted.hostsJSON,",
          "313:               Charset.defaultCharset());",
          "314:       FileUtils",
          "315:               .writeStringToFile(new File(requestDirectory, \"services.json\"), adjusted.servicesJSON,",
          "316:                       Charset.defaultCharset());",
          "319:       String result = FileUtils.readFileToString(new File(requestDirectory, getResultFileName()),",
          "320:               Charset.defaultCharset());",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSHostStatusCollector.java||ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSHostStatusCollector.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSHostStatusCollector.java -> ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSHostStatusCollector.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.File;",
          "23: import java.io.FileReader;",
          "24: import java.io.IOException;",
          "25: import java.util.ArrayList;",
          "26: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import java.nio.charset.Charset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:       } else {",
          "76:         status.setStatus(\"FAILED\");",
          "77:         try {",
          "79:           if (statusCode.equals(\"0\")) {",
          "80:             status.setStatus(\"DONE\");",
          "81:           }",
          "",
          "[Removed Lines]",
          "78:           String statusCode = FileUtils.readFileToString(done).trim();",
          "",
          "[Added Lines]",
          "79:           String statusCode = FileUtils.readFileToString(done, Charset.defaultCharset()).trim();",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java||ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java -> ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.io.FileNotFoundException;",
          "22: import java.io.IOException;",
          "23: import java.io.PrintWriter;",
          "24: import java.util.Arrays;",
          "25: import java.util.HashMap;",
          "26: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.nio.charset.Charset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:   }",
          "133:   private void writeSshKeyFile(String data) throws IOException {",
          "135:   }",
          "137:   private void writePasswordFile(String data) throws IOException {",
          "139:   }",
          "",
          "[Removed Lines]",
          "134:     FileUtils.writeStringToFile(sshKeyFile, data);",
          "138:     FileUtils.writeStringToFile(passwordFile, data);",
          "",
          "[Added Lines]",
          "135:     FileUtils.writeStringToFile(sshKeyFile, data, Charset.defaultCharset());",
          "139:     FileUtils.writeStringToFile(passwordFile, data, Charset.defaultCharset());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "290:         String outMesg = \"\";",
          "291:         String errMesg = \"\";",
          "292:         try {",
          "295:         } catch(IOException io) {",
          "296:           LOG.info(\"Error in reading files \", io);",
          "297:         }",
          "",
          "[Removed Lines]",
          "293:           outMesg = FileUtils.readFileToString(new File(bootStrapOutputFilePath));",
          "294:           errMesg = FileUtils.readFileToString(new File(bootStrapErrorFilePath));",
          "",
          "[Added Lines]",
          "294:           outMesg = FileUtils",
          "295:                   .readFileToString(new File(bootStrapOutputFilePath), Charset.defaultCharset());",
          "296:           errMesg = FileUtils",
          "297:                   .readFileToString(new File(bootStrapErrorFilePath), Charset.defaultCharset());",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java||ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java -> ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: import java.lang.annotation.RetentionPolicy;",
          "34: import java.lang.annotation.Target;",
          "35: import java.lang.reflect.Field;",
          "36: import java.util.ArrayList;",
          "37: import java.util.Collection;",
          "38: import java.util.EnumSet;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: import java.nio.charset.Charset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2827:       try {",
          "2828:         password = RandomStringUtils.randomAlphanumeric(Integer",
          "2829:             .parseInt(configsMap.get(SRVR_CRT_PASS_LEN.getKey())));",
          "2831:         ShellCommandUtil.setUnixFilePermissions(",
          "2832:           ShellCommandUtil.MASK_OWNER_ONLY_RW, passFile.getAbsolutePath());",
          "2833:       } catch (IOException e) {",
          "",
          "[Removed Lines]",
          "2830:         FileUtils.writeStringToFile(passFile, password);",
          "",
          "[Added Lines]",
          "2831:         FileUtils.writeStringToFile(passFile, password, Charset.defaultCharset());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2838:     } else {",
          "2839:       LOG.info(\"Reading password from existing file\");",
          "2840:       try {",
          "2842:         password = password.replaceAll(\"\\\\p{Cntrl}\", \"\");",
          "2843:       } catch (IOException e) {",
          "2844:         e.printStackTrace();",
          "",
          "[Removed Lines]",
          "2841:         password = FileUtils.readFileToString(passFile);",
          "",
          "[Added Lines]",
          "2842:         password = FileUtils.readFileToString(passFile, Charset.defaultCharset());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2854:       if (httpsPassFile.exists()) {",
          "2855:         LOG.info(\"Reading password from existing file\");",
          "2856:         try {",
          "2858:           password = password.replaceAll(\"\\\\p{Cntrl}\", \"\");",
          "2859:         } catch (IOException e) {",
          "2860:           e.printStackTrace();",
          "",
          "[Removed Lines]",
          "2857:           password = FileUtils.readFileToString(httpsPassFile);",
          "",
          "[Added Lines]",
          "2858:           password = FileUtils.readFileToString(httpsPassFile, Charset.defaultCharset());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3537:   public String getServerVersion() {",
          "3538:     try {",
          "3540:     } catch (IOException e) {",
          "3541:       LOG.error(\"Unable to read server version file\", e);",
          "3542:     }",
          "",
          "[Removed Lines]",
          "3539:       return FileUtils.readFileToString(new File(getServerVersionFilePath())).trim();",
          "",
          "[Added Lines]",
          "3540:       return FileUtils",
          "3541:               .readFileToString(new File(getServerVersionFilePath()), Charset.defaultCharset())",
          "3542:               .trim();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5678:       markdown = markdown.replace(MARKDOWN_BASELINE_VALUES_KEY, baselineBuffer.toString());",
          "5680:       File file = new File(outputFile);",
          "5682:       System.out.println(\"Successfully created \" + outputFile);",
          "5683:       LOG.info(\"Successfully created {}\", outputFile);",
          "5684:     } finally {",
          "",
          "[Removed Lines]",
          "5681:       FileUtils.writeStringToFile(file, markdown);",
          "",
          "[Added Lines]",
          "5684:       FileUtils.writeStringToFile(file, markdown, Charset.defaultCharset());",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java||ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java -> ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "287:     File agentCrtReqFile = new File(srvrKstrDir + File.separator +",
          "288:         agentCrtReqName);",
          "289:     try {",
          "291:     } catch (IOException e1) {",
          "293:       e1.printStackTrace();",
          "",
          "[Removed Lines]",
          "290:       FileUtils.writeStringToFile(agentCrtReqFile, agentCrtReqContent);",
          "",
          "[Added Lines]",
          "290:       FileUtils.writeStringToFile(agentCrtReqFile, agentCrtReqContent, Charset.defaultCharset());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:     String agentCrtContent = \"\";",
          "309:     try {",
          "311:     } catch (IOException e) {",
          "312:       e.printStackTrace();",
          "313:       LOG.error(\"Error reading signed agent certificate\");",
          "",
          "[Removed Lines]",
          "310:       agentCrtContent = FileUtils.readFileToString(agentCrtFile);",
          "",
          "[Added Lines]",
          "310:       agentCrtContent = FileUtils.readFileToString(agentCrtFile, Charset.defaultCharset());",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CertificateUtils.java||ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CertificateUtils.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CertificateUtils.java -> ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CertificateUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.ambari.server.security.encryption;",
          "20: import java.io.ByteArrayInputStream;",
          "23: import java.io.UnsupportedEncodingException;",
          "24: import java.security.cert.CertificateException;",
          "25: import java.security.cert.CertificateFactory;",
          "26: import java.security.cert.X509Certificate;",
          "27: import java.security.interfaces.RSAPublicKey;",
          "36: public class CertificateUtils {",
          "",
          "[Removed Lines]",
          "21: import java.io.File;",
          "22: import java.io.IOException;",
          "29: import org.apache.commons.io.FileUtils;",
          "30: import org.slf4j.Logger;",
          "31: import org.slf4j.LoggerFactory;",
          "37:   private static final Logger LOG = LoggerFactory.getLogger(CertificateUtils.class);",
          "46:   public static RSAPublicKey getPublicKeyFromFile(String filePath) throws IOException, CertificateException {",
          "47:     String pemString = FileUtils.readFileToString(new File(filePath));",
          "48:     return getPublicKeyFromString(pemString);",
          "49:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.io.File;",
          "22: import java.io.IOException;",
          "23: import java.util.Map;",
          "24: import java.util.concurrent.ConcurrentMap;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.nio.charset.Charset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "249:     if (jaasConfPath != null) {",
          "250:       File jaasConfigFile = new File(jaasConfPath);",
          "251:       try {",
          "253:         File oldJaasConfigFile = new File(jaasConfPath + \".bak\");",
          "255:         jaasConfig = jaasConfig.replaceFirst(KEYTAB_PATTERN, \"keyTab=\\\"\" + keytabFilePath + \"\\\"\");",
          "256:         jaasConfig = jaasConfig.replaceFirst(PRINCIPAL_PATTERN, \"principal=\\\"\" + principal + \"\\\"\");",
          "258:         String message = String.format(\"JAAS config file %s modified successfully for principal %s.\",",
          "259:             jaasConfigFile.getName(), principal);",
          "260:         if (actionLog != null) {",
          "",
          "[Removed Lines]",
          "252:         String jaasConfig = FileUtils.readFileToString(jaasConfigFile);",
          "254:         FileUtils.writeStringToFile(oldJaasConfigFile, jaasConfig);",
          "257:         FileUtils.writeStringToFile(jaasConfigFile, jaasConfig);",
          "",
          "[Added Lines]",
          "253:         String jaasConfig = FileUtils.readFileToString(jaasConfigFile, Charset.defaultCharset());",
          "255:         FileUtils.writeStringToFile(oldJaasConfigFile, jaasConfig, Charset.defaultCharset());",
          "258:         FileUtils.writeStringToFile(jaasConfigFile, jaasConfig, Charset.defaultCharset());",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/stack/ConfigurationDirectory.java||ambari-server/src/main/java/org/apache/ambari/server/stack/ConfigurationDirectory.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/stack/ConfigurationDirectory.java -> ambari-server/src/main/java/org/apache/ambari/server/stack/ConfigurationDirectory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.io.File;",
          "22: import java.io.IOException;",
          "23: import java.util.ArrayList;",
          "24: import java.util.Collection;",
          "25: import java.util.HashMap;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.nio.charset.Charset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:         File propertyFile = new File(propertyFilePath);",
          "148:         if (propertyFile.exists() && propertyFile.isFile()) {",
          "149:           try {",
          "151:             boolean valid = true;",
          "152:             switch (propertyFileType.toLowerCase()) {",
          "153:               case \"xml\" :",
          "",
          "[Removed Lines]",
          "150:             String propertyValue = FileUtils.readFileToString(propertyFile);",
          "",
          "[Added Lines]",
          "151:             String propertyValue =",
          "152:                     FileUtils.readFileToString(propertyFile, Charset.defaultCharset());",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommandTest.java||ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommandTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommandTest.java -> ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommandTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import java.io.File;",
          "35: import java.io.IOException;",
          "36: import java.util.Arrays;",
          "37: import java.util.Collections;",
          "38: import java.util.HashMap;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: import java.nio.charset.Charset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69: import org.junit.rules.TemporaryFolder;",
          "70: import org.junit.runner.RunWith;",
          "71: import org.mockito.Mock;",
          "73: import org.mockito.runners.MockitoJUnitRunner;",
          "76: import com.google.common.collect.Lists;",
          "",
          "[Removed Lines]",
          "72: import org.mockito.invocation.InvocationOnMock;",
          "74: import org.mockito.stubbing.Answer;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "193:     doReturn(data).when(command)",
          "194:         .adjust(any(StackAdvisorData.class), any(StackAdvisorRequest.class));",
          "206:     TestResource result = command.invoke(request, ServiceInfo.ServiceAdvisorType.PYTHON);",
          "",
          "[Removed Lines]",
          "196:     doAnswer(new Answer() {",
          "197:       public Object answer(InvocationOnMock invocation) throws Throwable {",
          "198:         String resultFilePath = String.format(\"%s/%s\", requestId, command.getResultFileName());",
          "199:         File resultFile = new File(recommendationsDir, resultFilePath);",
          "200:         resultFile.getParentFile().mkdirs();",
          "201:         FileUtils.writeStringToFile(resultFile, testResourceString);",
          "202:         return null;",
          "203:       }",
          "204:     }).when(saRunner).runScript(any(ServiceInfo.ServiceAdvisorType.class), any(StackAdvisorCommandType.class), any(File.class));",
          "",
          "[Added Lines]",
          "195:     doAnswer(invocation -> {",
          "196:       String resultFilePath = String.format(\"%s/%s\", requestId, command.getResultFileName());",
          "197:       File resultFile = new File(recommendationsDir, resultFilePath);",
          "198:       resultFile.getParentFile().mkdirs();",
          "199:       FileUtils.writeStringToFile(resultFile, testResourceString, Charset.defaultCharset());",
          "200:       return null;",
          "201:     }).when(saRunner).runScript(any(ServiceInfo.ServiceAdvisorType.class),",
          "202:             any(StackAdvisorCommandType.class), any(File.class));",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/bootstrap/BootStrapTest.java||ambari-server/src/test/java/org/apache/ambari/server/bootstrap/BootStrapTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/bootstrap/BootStrapTest.java -> ambari-server/src/test/java/org/apache/ambari/server/bootstrap/BootStrapTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.io.File;",
          "22: import java.io.IOException;",
          "23: import java.util.ArrayList;",
          "24: import java.util.List;",
          "25: import java.util.Properties;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.nio.charset.Charset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:       File echo = new File(bootdir, \"echo.py\");",
          "126:       echo.delete();",
          "129:       return echo.getPath();",
          "130:     } else {",
          "",
          "[Removed Lines]",
          "127:       FileUtils.writeStringToFile(echo, pythonEcho);",
          "",
          "[Added Lines]",
          "128:       FileUtils.writeStringToFile(echo, pythonEcho, Charset.defaultCharset());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "182:     if (!requestDir.exists()) {",
          "183:       LOG.warn(\"RequestDir does not exists\");",
          "184:     }",
          "188:     BootStrapStatus status = impl.getStatus(response.getRequestId());",
          "189:     LOG.info(\"Status \" + status.getStatus());",
          "",
          "[Removed Lines]",
          "185:     FileUtils.writeStringToFile(new File(requestDir, \"host1.done\"), \"0\");",
          "186:     FileUtils.writeStringToFile(new File(requestDir, \"host2.done\"), \"1\");",
          "",
          "[Added Lines]",
          "186:     FileUtils.writeStringToFile(new File(requestDir, \"host1.done\"), \"0\", Charset.defaultCharset());",
          "187:     FileUtils.writeStringToFile(new File(requestDir, \"host2.done\"), \"1\", Charset.defaultCharset());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "207:   public void testPolling() throws Exception {",
          "208:     File tmpFolder = temp.newFolder(\"bootstrap\");",
          "215:     List<String> listHosts = new ArrayList<>();",
          "216:     listHosts.add(\"host1\");",
          "",
          "[Removed Lines]",
          "210:     FileUtils.writeStringToFile(new File(tmpFolder, \"host1.done\"), \"0\");",
          "211:     FileUtils.writeStringToFile(new File(tmpFolder, \"host1.log\"), \"err_log_1\");",
          "212:     FileUtils.writeStringToFile(new File(tmpFolder, \"host2.done\"), \"1\");",
          "213:     FileUtils.writeStringToFile(new File(tmpFolder, \"host2.log\"), \"err_log_2\");",
          "",
          "[Added Lines]",
          "211:     FileUtils.writeStringToFile(new File(tmpFolder, \"host1.done\"), \"0\", Charset.defaultCharset());",
          "212:     FileUtils.writeStringToFile(new File(tmpFolder, \"host1.log\"), \"err_log_1\",",
          "213:             Charset.defaultCharset());",
          "214:     FileUtils.writeStringToFile(new File(tmpFolder, \"host2.done\"), \"1\", Charset.defaultCharset());",
          "215:     FileUtils.writeStringToFile(new File(tmpFolder, \"host2.log\"), \"err_log_2\",",
          "216:             Charset.defaultCharset());",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/configuration/ConfigurationTest.java||ambari-server/src/test/java/org/apache/ambari/server/configuration/ConfigurationTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/configuration/ConfigurationTest.java -> ambari-server/src/test/java/org/apache/ambari/server/configuration/ConfigurationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import java.io.IOException;",
          "31: import java.lang.reflect.Field;",
          "32: import java.lang.reflect.Method;",
          "33: import java.util.Arrays;",
          "34: import java.util.Map;",
          "35: import java.util.Properties;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import java.nio.charset.Charset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:     String password = \"pass12345\";",
          "169:     Properties ambariProperties = new Properties();",
          "170:     ambariProperties.setProperty(Configuration.API_USE_SSL.getKey(), \"true\");",
          "",
          "[Removed Lines]",
          "167:     FileUtils.writeStringToFile(passFile, password);",
          "",
          "[Added Lines]",
          "168:     FileUtils.writeStringToFile(passFile, password, Charset.defaultCharset());",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/resources/TestResources.java||ambari-server/src/test/java/org/apache/ambari/server/resources/TestResources.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/resources/TestResources.java -> ambari-server/src/test/java/org/apache/ambari/server/resources/TestResources.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import java.io.File;",
          "24: import java.io.IOException;",
          "25: import java.lang.reflect.Constructor;",
          "26: import java.util.Properties;",
          "28: import org.apache.ambari.server.configuration.Configuration;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import java.nio.charset.Charset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:   protected Properties buildTestProperties() {",
          "55:     try {",
          "66:     return properties;",
          "67:   }",
          "",
          "[Removed Lines]",
          "54:  Properties properties = new Properties();",
          "56:   tempFolder.create();",
          "58:   properties.setProperty(Configuration.SRVR_KSTR_DIR.getKey(), tempFolder.getRoot().getAbsolutePath());",
          "59:   properties.setProperty(Configuration.RESOURCES_DIR.getKey(), tempFolder.getRoot().getAbsolutePath());",
          "61:      resourceFile = tempFolder.newFile(RESOURCE_FILE_NAME);",
          "62:      FileUtils.writeStringToFile(resourceFile, RESOURCE_FILE_CONTENT);",
          "63:  } catch (IOException e) {",
          "64:   e.printStackTrace();",
          "65:  }",
          "",
          "[Added Lines]",
          "55:     Properties properties = new Properties();",
          "57:       tempFolder.create();",
          "59:       properties.setProperty(Configuration.SRVR_KSTR_DIR.getKey(),",
          "60:               tempFolder.getRoot().getAbsolutePath());",
          "61:       properties.setProperty(Configuration.RESOURCES_DIR.getKey(),",
          "62:               tempFolder.getRoot().getAbsolutePath());",
          "64:       resourceFile = tempFolder.newFile(RESOURCE_FILE_NAME);",
          "65:       FileUtils.writeStringToFile(resourceFile, RESOURCE_FILE_CONTENT, Charset.defaultCharset());",
          "66:     } catch (IOException e) {",
          "67:       e.printStackTrace();",
          "68:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:   public void testGetResource() throws Exception {",
          "108:     File resFile = resMan.getResource(resourceFile.getName());",
          "109:     assertTrue(resFile.exists());",
          "111:     assertEquals(resContent, RESOURCE_FILE_CONTENT);",
          "112:   }",
          "",
          "[Removed Lines]",
          "110:     String resContent = FileUtils.readFileToString(resFile);",
          "",
          "[Added Lines]",
          "113:     String resContent = FileUtils.readFileToString(resFile, Charset.defaultCharset());",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/security/CertGenerationTest.java||ambari-server/src/test/java/org/apache/ambari/server/security/CertGenerationTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/security/CertGenerationTest.java -> ambari-server/src/test/java/org/apache/ambari/server/security/CertGenerationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import java.io.FileOutputStream;",
          "26: import java.io.IOException;",
          "27: import java.lang.reflect.Constructor;",
          "28: import java.util.Map;",
          "29: import java.util.Properties;",
          "30: import java.util.Random;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import java.nio.charset.Charset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:     Assert.assertTrue(passFile.exists());",
          "206:     Assert.assertEquals(pass.length(), passLen);",
          "",
          "[Removed Lines]",
          "204:     String pass = FileUtils.readFileToString(passFile);",
          "",
          "[Added Lines]",
          "205:     String pass = FileUtils.readFileToString(passFile, Charset.defaultCharset());",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerActionTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerActionTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerActionTest.java -> ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerActionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import java.io.File;",
          "27: import java.lang.reflect.Method;",
          "29: import javax.persistence.EntityManager;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import java.nio.charset.Charset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:             \"    useTicketCache=false;\\n\" +",
          "167:             \"};\\n\";",
          "171:     Injector injector = createInjector();",
          "",
          "[Removed Lines]",
          "169:     FileUtils.writeStringToFile(jaasConfFile, originalJAASFileContent);",
          "",
          "[Added Lines]",
          "170:     FileUtils.writeStringToFile(jaasConfFile, originalJAASFileContent, Charset.defaultCharset());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:             \"    storeKey=true\\n\" +",
          "197:             \"    useTicketCache=false;\\n\" +",
          "198:             \"};\\n\",",
          "200:     );",
          "204:   }",
          "",
          "[Removed Lines]",
          "199:         FileUtils.readFileToString(jaasConfFile)",
          "203:     Assert.assertEquals(originalJAASFileContent, FileUtils.readFileToString(jaasConfFileBak));",
          "",
          "[Added Lines]",
          "200:             FileUtils.readFileToString(jaasConfFile, Charset.defaultCharset())",
          "204:     Assert.assertEquals(originalJAASFileContent,",
          "205:             FileUtils.readFileToString(jaasConfFileBak, Charset.defaultCharset()));",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/state/repository/VersionDefinitionTest.java||ambari-server/src/test/java/org/apache/ambari/server/state/repository/VersionDefinitionTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/state/repository/VersionDefinitionTest.java -> ambari-server/src/test/java/org/apache/ambari/server/state/repository/VersionDefinitionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import java.io.File;",
          "29: import java.lang.reflect.Field;",
          "30: import java.util.Collection;",
          "31: import java.util.Collections;",
          "32: import java.util.HashMap;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import java.nio.charset.Charset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:   @Test",
          "63:   public void testLoadingString() throws Exception {",
          "65:     VersionDefinitionXml xml = VersionDefinitionXml.load(xmlString);",
          "67:     validateXml(xml);",
          "",
          "[Removed Lines]",
          "64:     String xmlString = FileUtils.readFileToString(file);",
          "",
          "[Added Lines]",
          "65:     String xmlString = FileUtils.readFileToString(file, Charset.defaultCharset());",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog260Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog260Test.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog260Test.java -> ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog260Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: import java.io.File;",
          "39: import java.net.URL;",
          "40: import java.sql.Connection;",
          "41: import java.sql.ResultSet;",
          "42: import java.sql.SQLException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: import java.nio.charset.Charset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1021:     File dataDirectory = temporaryFolder.newFolder();",
          "1022:     File file = new File(dataDirectory, \"hdfs_widget.json\");",
          "1025:     final Injector mockInjector = Guice.createInjector(new AbstractModule() {",
          "1026:       @Override",
          "",
          "[Removed Lines]",
          "1023:     FileUtils.writeStringToFile(file, widgetStr);",
          "",
          "[Added Lines]",
          "1024:     FileUtils.writeStringToFile(file, widgetStr, Charset.defaultCharset());",
          "",
          "---------------"
        ]
      }
    }
  ]
}