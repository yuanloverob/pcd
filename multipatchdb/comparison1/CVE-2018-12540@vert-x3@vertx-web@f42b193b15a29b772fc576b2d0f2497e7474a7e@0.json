{
  "cve_id": "CVE-2018-12540",
  "cve_desc": "In version from 3.0.0 to 3.5.2 of Eclipse Vert.x, the CSRFHandler do not assert that the XSRF Cookie matches the returned XSRF header/form parameter. This allows replay attacks with previously issued tokens which are not expired yet.",
  "repo": "vert-x3/vertx-web",
  "patch_hash": "f42b193b15a29b772fc576b2d0f2497e7474a7e9",
  "patch_info": {
    "commit_hash": "f42b193b15a29b772fc576b2d0f2497e7474a7e9",
    "repo": "vert-x3/vertx-web",
    "commit_url": "https://github.com/vert-x3/vertx-web/commit/f42b193b15a29b772fc576b2d0f2497e7474a7e",
    "files": [
      "vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java"
    ],
    "message": "Validate that X-XSRF-Token and X-XSRF-Token cookie are the same - fixes #970 (cherry picked from commit 482bc72)",
    "before_after_code_files": [
      "vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java||vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java"
    ]
  },
  "patch_diff": {
    "vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java||vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java": [
      "File: vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java -> vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "106:     return saltPlusToken + \".\" + signature;",
      "107:   }",
      "112:       return false;",
      "113:     }",
      "",
      "[Removed Lines]",
      "109:   private boolean validateToken(String header) {",
      "111:     if (header == null) {",
      "",
      "[Added Lines]",
      "109:   private boolean validateToken(String header, String cookie) {",
      "111:     if (header == null || cookie == null || !header.equals(cookie)) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:       case DELETE:",
      "169:       case PATCH:",
      "170:         final String header = ctx.request().getHeader(headerName);",
      "172:           ctx.next();",
      "173:         } else {",
      "174:           forbidden(ctx);",
      "",
      "[Removed Lines]",
      "171:         if (validateToken(header == null ? ctx.request().getFormAttribute(headerName) : header)) {",
      "",
      "[Added Lines]",
      "171:         final String cookie = ctx.getCookie(cookieName).getValue();",
      "172:         if (validateToken(header == null ? ctx.request().getFormAttribute(headerName) : header, cookie)) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "98891b1d9e022b467a3e4674aca4d1889849b1d5",
      "candidate_info": {
        "commit_hash": "98891b1d9e022b467a3e4674aca4d1889849b1d5",
        "repo": "vert-x3/vertx-web",
        "commit_url": "https://github.com/vert-x3/vertx-web/commit/98891b1d9e022b467a3e4674aca4d1889849b1d5",
        "files": [
          "vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java"
        ],
        "message": "Validate that X-XSRF-Token and X-XSRF-Token cookie are the same - fixes #970 (cherry picked from commit 482bc72)\n\n(cherry picked from commit f42b193)",
        "before_after_code_files": [
          "vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java||vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java||vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java"
          ],
          "candidate": [
            "vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java||vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java"
          ]
        }
      },
      "candidate_diff": {
        "vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java||vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java": [
          "File: vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java -> vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:     return saltPlusToken + \".\" + signature;",
          "107:   }",
          "112:       return false;",
          "113:     }",
          "",
          "[Removed Lines]",
          "109:   private boolean validateToken(String header) {",
          "111:     if (header == null) {",
          "",
          "[Added Lines]",
          "109:   private boolean validateToken(String header, String cookie) {",
          "111:     if (header == null || cookie == null || !header.equals(cookie)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:       case DELETE:",
          "169:       case PATCH:",
          "170:         final String header = ctx.request().getHeader(headerName);",
          "172:           ctx.next();",
          "173:         } else {",
          "174:           forbidden(ctx);",
          "",
          "[Removed Lines]",
          "171:         if (validateToken(header == null ? ctx.request().getFormAttribute(headerName) : header)) {",
          "",
          "[Added Lines]",
          "171:         final String cookie = ctx.getCookie(cookieName).getValue();",
          "172:         if (validateToken(header == null ? ctx.request().getFormAttribute(headerName) : header, cookie)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b52ceda027b3bf84b898be4771121850edc8327c",
      "candidate_info": {
        "commit_hash": "b52ceda027b3bf84b898be4771121850edc8327c",
        "repo": "vert-x3/vertx-web",
        "commit_url": "https://github.com/vert-x3/vertx-web/commit/b52ceda027b3bf84b898be4771121850edc8327c",
        "files": [
          "vertx-web/src/main/asciidoc/groovy/index.adoc",
          "vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java",
          "vertx-web/src/test/java/io/vertx/ext/web/handler/CSRFHandlerTest.java"
        ],
        "message": "Added docs and ensure that cookie is not null\n\n(cherry picked from commit 383424f)",
        "before_after_code_files": [
          "vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java||vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java",
          "vertx-web/src/test/java/io/vertx/ext/web/handler/CSRFHandlerTest.java||vertx-web/src/test/java/io/vertx/ext/web/handler/CSRFHandlerTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java||vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java"
          ],
          "candidate": [
            "vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java||vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java"
          ]
        }
      },
      "candidate_diff": {
        "vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java||vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java": [
          "File: vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java -> vertx-web/src/main/java/io/vertx/ext/web/handler/impl/CSRFHandlerImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:     return saltPlusToken + \".\" + signature;",
          "107:   }",
          "112:       return false;",
          "113:     }",
          "",
          "[Removed Lines]",
          "109:   private boolean validateToken(String header, String cookie) {",
          "111:     if (header == null || cookie == null || !header.equals(cookie)) {",
          "",
          "[Added Lines]",
          "109:   private boolean validateToken(String header, Cookie cookie) {",
          "111:     if (header == null || cookie == null || !header.equals(cookie.getValue())) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:       case DELETE:",
          "169:       case PATCH:",
          "170:         final String header = ctx.request().getHeader(headerName);",
          "172:         if (validateToken(header == null ? ctx.request().getFormAttribute(headerName) : header, cookie)) {",
          "173:           ctx.next();",
          "174:         } else {",
          "",
          "[Removed Lines]",
          "171:         final String cookie = ctx.getCookie(cookieName).getValue();",
          "",
          "[Added Lines]",
          "171:         final Cookie cookie = ctx.getCookie(cookieName);",
          "",
          "---------------"
        ],
        "vertx-web/src/test/java/io/vertx/ext/web/handler/CSRFHandlerTest.java||vertx-web/src/test/java/io/vertx/ext/web/handler/CSRFHandlerTest.java": [
          "File: vertx-web/src/test/java/io/vertx/ext/web/handler/CSRFHandlerTest.java -> vertx-web/src/test/java/io/vertx/ext/web/handler/CSRFHandlerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     testRequest(HttpMethod.POST, \"/\", null, null, 403, \"Forbidden\", null);",
          "65:   }",
          "67:   String tmpCookie;",
          "69:   @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:   String rawCookie;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:     testRequest(HttpMethod.GET, \"/\", null, resp -> {",
          "77:       List<String> cookies = resp.headers().getAll(\"set-cookie\");",
          "78:       String cookie = cookies.get(0);",
          "79:       tmpCookie = cookie.substring(cookie.indexOf('=') + 1, cookie.indexOf(';'));",
          "80:     }, 200, \"OK\", null);",
          "83:   }",
          "85:   @Test",
          "",
          "[Removed Lines]",
          "82:     testRequest(HttpMethod.POST, \"/\", req -> req.putHeader(CSRFHandler.DEFAULT_HEADER_NAME, tmpCookie), null, 200, \"OK\", null);",
          "",
          "[Added Lines]",
          "80:       rawCookie = cookie;",
          "84:     testRequest(HttpMethod.POST, \"/\", req -> {",
          "85:       req.putHeader(CSRFHandler.DEFAULT_HEADER_NAME, tmpCookie);",
          "86:       req.putHeader(\"Cookie\", rawCookie);",
          "87:     }, null, 200, \"OK\", null);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:     testRequest(HttpMethod.GET, \"/\", null, resp -> {",
          "105:       List<String> cookies = resp.headers().getAll(\"set-cookie\");",
          "106:       String cookie = cookies.get(0);",
          "107:       tmpCookie = cookie.substring(cookie.indexOf('=') + 1, cookie.indexOf(';'));",
          "108:     }, 200, \"OK\", null);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:       rawCookie = cookie;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "118:       buffer.appendString(str);",
          "119:       req.headers().set(\"content-length\", String.valueOf(buffer.length()));",
          "120:       req.headers().set(\"content-type\", \"multipart/form-data; boundary=\" + boundary);",
          "121:       req.write(buffer);",
          "122:     }, null, 200, \"OK\", null);",
          "123:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:       req.putHeader(\"Cookie\", rawCookie);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "166:       req.headers().set(\"content-length\", String.valueOf(buffer.length()));",
          "167:       req.headers().set(\"content-type\", \"multipart/form-data; boundary=\" + boundary);",
          "168:       req.write(buffer);",
          "170:   }",
          "172:   @Test",
          "",
          "[Removed Lines]",
          "169:     }, null, 200, \"OK\", null);",
          "",
          "[Added Lines]",
          "177:     }, null, 403, \"Forbidden\", null);",
          "",
          "---------------"
        ]
      }
    }
  ]
}