{
  "cve_id": "CVE-2021-26291",
  "cve_desc": "Apache Maven will follow repositories that are defined in a dependency\u2019s Project Object Model (pom) which may be surprising to some users, resulting in potential risk if a malicious actor takes over that repository or is able to insert themselves into a position to pretend to be that repository. Maven is changing the default behavior in 3.8.1+ to no longer follow http (non-SSL) repository references by default. More details available in the referenced urls. If you are currently using a repository manager to govern the repositories used by your builds, you are unaffected by the risks present in the legacy behavior, and are unaffected by this vulnerability and change to default behavior. See this link for more information about repository management: https://maven.apache.org/repository-management.html",
  "repo": "apache/maven",
  "patch_hash": "fa79cb22e456cc65522b5bab8c4240fe08c5775f",
  "patch_info": {
    "commit_hash": "fa79cb22e456cc65522b5bab8c4240fe08c5775f",
    "repo": "apache/maven",
    "commit_url": "https://github.com/apache/maven/commit/fa79cb22e456cc65522b5bab8c4240fe08c5775f",
    "files": [
      "maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java",
      "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java"
    ],
    "message": "[MNG-7116] add support for mirrorOf external:http:*",
    "before_after_code_files": [
      "maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java||maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java",
      "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java||maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java"
    ]
  },
  "patch_diff": {
    "maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java||maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java": [
      "File: maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java -> maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:     private static final String EXTERNAL_WILDCARD = \"external:*\";",
      "44:     public Mirror getMirror( ArtifactRepository repository, List<Mirror> mirrors )",
      "45:     {",
      "46:         String repoId = repository.getId();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:     private static final String EXTERNAL_HTTP_WILDCARD = \"external:http:*\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "115:                     result = true;",
      "117:                 }",
      "118:                 else if ( WILDCARD.equals( repo ) )",
      "119:                 {",
      "120:                     result = true;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "126:                 else if ( EXTERNAL_HTTP_WILDCARD.equals( repo ) && isExternalHttpRepo( originalRepository ) )",
      "127:                 {",
      "128:                     result = true;",
      "130:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "136:         try",
      "137:         {",
      "138:             URL url = new URL( originalRepository.getUrl() );",
      "141:         }",
      "142:         catch ( MalformedURLException e )",
      "143:         {",
      "",
      "[Removed Lines]",
      "139:             return !( url.getHost().equals( \"localhost\" ) || url.getHost().equals( \"127.0.0.1\" )",
      "140:                             || url.getProtocol().equals( \"file\" ) );",
      "",
      "[Added Lines]",
      "152:             return !( isLocal( url.getHost() ) || url.getProtocol().equals( \"file\" ) );",
      "153:         }",
      "154:         catch ( MalformedURLException e )",
      "155:         {",
      "157:             return false;",
      "158:         }",
      "159:     }",
      "161:     private static boolean isLocal( String host )",
      "162:     {",
      "163:         return \"localhost\".equals( host ) || \"127.0.0.1\".equals( host );",
      "164:     }",
      "172:     static boolean isExternalHttpRepo( ArtifactRepository originalRepository )",
      "173:     {",
      "174:         try",
      "175:         {",
      "176:             URL url = new URL( originalRepository.getUrl() );",
      "177:             return ( \"http\".equalsIgnoreCase( url.getProtocol() ) || \"dav\".equalsIgnoreCase( url.getProtocol() )",
      "178:                 || \"dav:http\".equalsIgnoreCase( url.getProtocol() )",
      "179:                 || \"dav+http\".equalsIgnoreCase( url.getProtocol() ) ) && !isLocal( url.getHost() );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "146:         }",
      "147:     }",
      "150:     {",
      "151:         return matchesLayout( RepositoryUtils.getLayout( repository ), mirror.getMirrorOfLayouts() );",
      "152:     }",
      "",
      "[Removed Lines]",
      "149:     static boolean matchesLayout( ArtifactRepository repository, Mirror mirror )",
      "",
      "[Added Lines]",
      "188:    static boolean matchesLayout( ArtifactRepository repository, Mirror mirror )",
      "",
      "---------------"
    ],
    "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java||maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java": [
      "File: maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java -> maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "711:     private static final String EXTERNAL_WILDCARD = \"external:*\";",
      "713:     public static Mirror getMirror( ArtifactRepository repository, List<Mirror> mirrors )",
      "714:     {",
      "715:         String repoId = repository.getId();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "713:     private static final String EXTERNAL_HTTP_WILDCARD = \"external:http:*\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "782:                     result = true;",
      "784:                 }",
      "785:                 else if ( WILDCARD.equals( repo ) )",
      "786:                 {",
      "787:                     result = true;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "794:                 else if ( EXTERNAL_HTTP_WILDCARD.equals( repo ) && isExternalHttpRepo( originalRepository ) )",
      "795:                 {",
      "796:                     result = true;",
      "798:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "803:         try",
      "804:         {",
      "805:             URL url = new URL( originalRepository.getUrl() );",
      "808:         }",
      "809:         catch ( MalformedURLException e )",
      "810:         {",
      "",
      "[Removed Lines]",
      "806:             return !( url.getHost().equals( \"localhost\" ) || url.getHost().equals( \"127.0.0.1\" )",
      "807:                             || url.getProtocol().equals( \"file\" ) );",
      "",
      "[Added Lines]",
      "820:             return !( isLocal( url.getHost() ) || url.getProtocol().equals( \"file\" ) );",
      "821:         }",
      "822:         catch ( MalformedURLException e )",
      "823:         {",
      "825:             return false;",
      "826:         }",
      "827:     }",
      "829:     private static boolean isLocal( String host )",
      "830:     {",
      "831:         return \"localhost\".equals( host ) || \"127.0.0.1\".equals( host );",
      "832:     }",
      "840:     static boolean isExternalHttpRepo( ArtifactRepository originalRepository )",
      "841:     {",
      "842:         try",
      "843:         {",
      "844:             URL url = new URL( originalRepository.getUrl() );",
      "845:             return ( \"http\".equalsIgnoreCase( url.getProtocol() ) || \"dav\".equalsIgnoreCase( url.getProtocol() )",
      "846:                 || \"dav:http\".equalsIgnoreCase( url.getProtocol() )",
      "847:                 || \"dav+http\".equalsIgnoreCase( url.getProtocol() ) ) && !isLocal( url.getHost() );",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ab54d17dc2ec355c1e002e8751739edd9a96fcc3",
      "candidate_info": {
        "commit_hash": "ab54d17dc2ec355c1e002e8751739edd9a96fcc3",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/ab54d17dc2ec355c1e002e8751739edd9a96fcc3",
        "files": [
          "maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java"
        ],
        "message": "[MNG-7253] Display relocation message defined in model\n\nMove logging to DefaultArtifactDescriptorReader\n\nThis closes #544",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java||maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java||maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java": [
          "File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java -> maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:         depRequest.setRoot( node );",
          "196:         if ( logger.isDebugEnabled() )",
          "197:         {",
          "198:             node.accept( new GraphLogger( project ) );",
          "",
          "[Removed Lines]",
          "184:         if ( logger.isWarnEnabled() )",
          "185:         {",
          "186:             for ( DependencyNode child : node.getChildren() )",
          "187:             {",
          "188:                 if ( !child.getRelocations().isEmpty() )",
          "189:                 {",
          "190:                     logger.warn( \"The artifact \" + child.getRelocations().get( 0 ) + \" has been relocated to \"",
          "191:                         + child.getDependency().getArtifact() );",
          "192:                 }",
          "193:             }",
          "194:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: import org.eclipse.aether.spi.locator.Service;",
          "69: import org.eclipse.aether.spi.locator.ServiceLocator;",
          "70: import org.eclipse.aether.transfer.ArtifactNotFoundException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: import org.slf4j.Logger;",
          "72: import org.slf4j.LoggerFactory;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77: public class DefaultArtifactDescriptorReader",
          "78:     implements ArtifactDescriptorReader, Service",
          "79: {",
          "80:     private RemoteRepositoryManager remoteRepositoryManager;",
          "82:     private VersionResolver versionResolver;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:     private static final Logger LOGGER = LoggerFactory.getLogger( DefaultArtifactDescriptorReader.class );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "316:             if ( relocation != null )",
          "317:             {",
          "318:                 result.addRelocation( a );",
          "320:                     new RelocatedArtifact( a, relocation.getGroupId(), relocation.getArtifactId(),",
          "321:                                            relocation.getVersion() );",
          "323:             }",
          "324:             else",
          "325:             {",
          "",
          "[Removed Lines]",
          "319:                 a =",
          "322:                 result.setArtifact( a );",
          "",
          "[Added Lines]",
          "323:                 Artifact relocatedArtifact =",
          "326:                 if ( LOGGER.isWarnEnabled() )",
          "327:                 {",
          "328:                     String message = \"The artifact \" + a + \" has been relocated to \" + relocatedArtifact;",
          "329:                     if ( relocation.getMessage() != null )",
          "330:                     {",
          "331:                         message += \": \" + relocation.getMessage();",
          "332:                     }",
          "333:                     LOGGER.warn( message );",
          "334:                 }",
          "335:                 result.setArtifact( relocatedArtifact );",
          "336:                 a = relocatedArtifact;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "10a72f30f7bdd19e803820a215383b975a5283ce",
      "candidate_info": {
        "commit_hash": "10a72f30f7bdd19e803820a215383b975a5283ce",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/10a72f30f7bdd19e803820a215383b975a5283ce",
        "files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java",
          "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java"
        ],
        "message": "[MNG-7156][MNG-7285] Add locking in MojoExecutor (#628)",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java",
          "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java -> maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: import org.codehaus.plexus.component.annotations.Component;",
          "40: import org.codehaus.plexus.component.annotations.Requirement;",
          "41: import org.codehaus.plexus.util.StringUtils;",
          "43: import java.util.ArrayList;",
          "44: import java.util.Arrays;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: import org.eclipse.aether.SessionData;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: import java.util.Map;",
          "49: import java.util.Set;",
          "50: import java.util.TreeSet;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: import java.util.concurrent.ConcurrentHashMap;",
          "53: import java.util.concurrent.ConcurrentMap;",
          "54: import java.util.concurrent.locks.Lock;",
          "55: import java.util.concurrent.locks.ReadWriteLock;",
          "56: import java.util.concurrent.locks.ReentrantLock;",
          "57: import java.util.concurrent.locks.ReentrantReadWriteLock;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:     @Requirement",
          "77:     private ExecutionEventCatapult eventCatapult;",
          "79:     public MojoExecutor()",
          "80:     {",
          "81:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:     private final ReadWriteLock aggregatorLock = new ReentrantReadWriteLock();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "197:             }",
          "198:         }",
          "200:         List<MavenProject> forkedProjects = executeForkedExecutions( mojoExecution, session, projectIndex );",
          "202:         ensureDependenciesAreResolved( mojoDescriptor, session, dependencyContext );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:         try ( ProjectLock lock = new ProjectLock( session, mojoDescriptor, aggregatorLock ) )",
          "210:         {",
          "211:             doExecute( session, mojoExecution, projectIndex, dependencyContext );",
          "212:         }",
          "213:     }",
          "223:     private static class ProjectLock implements AutoCloseable",
          "224:     {",
          "225:         final Lock acquiredAggregatorLock;",
          "226:         final Lock acquiredProjectLock;",
          "228:         ProjectLock( MavenSession session, MojoDescriptor mojoDescriptor, ReadWriteLock aggregatorLock )",
          "229:         {",
          "230:             if ( session.getRequest().getDegreeOfConcurrency() > 1 )",
          "231:             {",
          "232:                 boolean aggregator = mojoDescriptor.isAggregator();",
          "233:                 acquiredAggregatorLock = aggregator ? aggregatorLock.writeLock() : aggregatorLock.readLock();",
          "234:                 acquiredProjectLock = getProjectLock( session );",
          "235:                 acquiredAggregatorLock.lock();",
          "236:                 acquiredProjectLock.lock();",
          "237:             }",
          "238:             else",
          "239:             {",
          "240:                 acquiredAggregatorLock = null;",
          "241:                 acquiredProjectLock = null;",
          "242:             }",
          "243:         }",
          "245:         @Override",
          "246:         public void close()",
          "247:         {",
          "249:             if ( acquiredProjectLock != null )",
          "250:             {",
          "251:                 acquiredProjectLock.unlock();",
          "252:             }",
          "253:             if ( acquiredAggregatorLock != null )",
          "254:             {",
          "255:                 acquiredAggregatorLock.unlock();",
          "256:             }",
          "257:         }",
          "259:         @SuppressWarnings( { \"unchecked\", \"rawtypes\" } )",
          "260:         private Lock getProjectLock( MavenSession session )",
          "261:         {",
          "262:             SessionData data = session.getRepositorySession().getData();",
          "263:             ConcurrentMap<MavenProject, Lock> locks = ( ConcurrentMap ) data.get( ProjectLock.class );",
          "265:             if ( locks == null )",
          "266:             {",
          "268:                 data.set( ProjectLock.class, null, new ConcurrentHashMap<>() );",
          "269:                 locks = ( ConcurrentMap ) data.get( ProjectLock.class );",
          "270:             }",
          "271:             Lock acquiredProjectLock = locks.get( session.getCurrentProject() );",
          "272:             if ( acquiredProjectLock == null )",
          "273:             {",
          "274:                 acquiredProjectLock = new ReentrantLock();",
          "275:                 Lock prev = locks.putIfAbsent( session.getCurrentProject(), acquiredProjectLock );",
          "276:                 if ( prev != null )",
          "277:                 {",
          "278:                     acquiredProjectLock = prev;",
          "279:                 }",
          "280:             }",
          "281:             return acquiredProjectLock;",
          "282:         }",
          "283:     }",
          "285:     private void doExecute( MavenSession session, MojoExecution mojoExecution, ProjectIndex projectIndex,",
          "286:                             DependencyContext dependencyContext )",
          "287:             throws LifecycleExecutionException",
          "288:     {",
          "289:         MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java -> maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import java.util.Collections;",
          "33: import java.util.List;",
          "34: import java.util.Properties;",
          "36: import org.apache.maven.AbstractCoreMavenComponentTestCase;",
          "37: import org.apache.maven.artifact.InvalidArtifactRTException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import java.util.concurrent.atomic.AtomicInteger;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:         assertEquals( 1, results.size() );",
          "120:         MavenProject mavenProject = results.get( 0 ).getProject();",
          "121:         assertEquals( 1, mavenProject.getArtifacts().size() );",
          "122:     }",
          "124:     public void testDontResolveDependencies()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:         final MavenProject project = mavenProject;",
          "125:         final AtomicInteger artifactsResultInAnotherThead = new AtomicInteger();",
          "126:         Thread t = new Thread(new Runnable() {",
          "127:             @Override",
          "128:             public void run() {",
          "129:                 artifactsResultInAnotherThead.set(project.getArtifacts().size());",
          "130:             }",
          "131:         });",
          "132:         t.start();",
          "133:         t.join();",
          "134:         assertEquals( project.getArtifacts().size(), artifactsResultInAnotherThead.get() );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "395411fe3184b9692ed16bafa578b40cc0051784",
      "candidate_info": {
        "commit_hash": "395411fe3184b9692ed16bafa578b40cc0051784",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/395411fe3184b9692ed16bafa578b40cc0051784",
        "files": [
          "maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java",
          "maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java",
          "maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java"
        ],
        "message": "[MNG-7417] Several classes do not set properties properly for building requests\n\nThis closes #306",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java||maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java",
          "maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java||maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java",
          "maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java||maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java||maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java": [
          "File: maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java -> maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "587:                     configuration.setProcessPlugins( false );",
          "588:                     configuration.setRepositoryMerging( ProjectBuildingRequest.RepositoryMerging.REQUEST_DOMINANT );",
          "589:                     configuration.setSystemProperties( getSystemProperties() );",
          "590:                     configuration.setRepositorySession( legacySupport.getRepositorySession() );",
          "592:                     project = getProjectBuilder().build( pomArtifact, configuration ).getProject();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "590:                     configuration.setUserProperties( new Properties() );",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java||maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java": [
          "File: maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java -> maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:             .setLocalRepository( request.getLocalRepository() )",
          "144:             .setRemoteRepositories( request.getRemoteRepositories() )",
          "145:             .setPluginArtifactRepositories( request.getPluginArtifactRepositories() )",
          "148:         List<MavenProject> projects = new ArrayList<>();",
          "",
          "[Removed Lines]",
          "146:             .setSystemProperties( executionProperties );",
          "",
          "[Added Lines]",
          "146:             .setSystemProperties( executionProperties )",
          "147:             .setUserProperties( new Properties() );",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java||maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java -> maven-core/src/test/java/org/apache/maven/project/PomConstructionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "254:     public void testDuplicateDependenciesCauseLastDeclarationToBePickedInLenientMode()",
          "255:         throws Exception",
          "256:     {",
          "258:         assertEquals( 1, ( (List<?>) pom.getValue( \"dependencies\" ) ).size() );",
          "259:         assertEquals( \"0.2\", pom.getValue( \"dependencies[1]/version\" ) );",
          "260:     }",
          "",
          "[Removed Lines]",
          "257:         PomTestWrapper pom = buildPom( \"unique-dependency-key/deps\", true, null );",
          "",
          "[Added Lines]",
          "257:         PomTestWrapper pom = buildPom( \"unique-dependency-key/deps\", true, null, null );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1437:         Properties props = new Properties();",
          "1438:         props.put( \"java.version\", \"1.5.0_15\" );",
          "1441:         assertEquals( 3, pom.getMavenProject().getActiveProfiles().size() );",
          "1442:         assertEquals( \"PASSED\", pom.getValue( \"properties/jdkProperty3\" ) );",
          "1443:         assertEquals( \"PASSED\", pom.getValue( \"properties/jdkProperty2\" ) );",
          "",
          "[Removed Lines]",
          "1440:         PomTestWrapper pom = buildPom( \"jdk-activation\", props );",
          "",
          "[Added Lines]",
          "1440:         PomTestWrapper pom = buildPom( \"jdk-activation\", props, null );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1534:     {",
          "1535:         Properties sysProps = new Properties();",
          "1536:         sysProps.setProperty( \"system.property\", \"PASSED\" );",
          "1538:         assertEquals( \"PASSED\", pom.getValue( \"name\" ) );",
          "1539:     }",
          "",
          "[Removed Lines]",
          "1537:         PomTestWrapper pom = buildPom( \"system-property-interpolation\", sysProps );",
          "",
          "[Added Lines]",
          "1537:         PomTestWrapper pom = buildPom( \"system-property-interpolation\", sysProps, null );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1681:     {",
          "1682:         Properties props = new Properties();",
          "1683:         props.setProperty( \"testProperty\", \"PASSED\" );",
          "1686:         assertEquals( \"PASSED\", pom.getValue( \"properties/interpolatedProperty\" ) );",
          "1687:     }",
          "",
          "[Removed Lines]",
          "1684:         PomTestWrapper pom = buildPom( \"interpolation-cli-wins\", props );",
          "",
          "[Added Lines]",
          "1684:         PomTestWrapper pom = buildPom( \"interpolation-cli-wins\", null, props );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1838:     private PomTestWrapper buildPom( String pomPath, String... profileIds )",
          "1839:         throws Exception",
          "1840:     {",
          "1842:     }",
          "1845:         throws Exception",
          "1846:     {",
          "1848:     }",
          "1852:         throws Exception",
          "1853:     {",
          "1854:         File pomFile = new File( testDirectory, pomPath );",
          "",
          "[Removed Lines]",
          "1841:         return buildPom( pomPath, null, profileIds );",
          "1844:     private PomTestWrapper buildPom( String pomPath, Properties executionProperties, String... profileIds )",
          "1847:         return buildPom( pomPath, false, executionProperties, profileIds );",
          "1850:     private PomTestWrapper buildPom( String pomPath, boolean lenientValidation, Properties executionProperties,",
          "1851:                                      String... profileIds )",
          "",
          "[Added Lines]",
          "1841:         return buildPom( pomPath, null, null, profileIds );",
          "1844:     private PomTestWrapper buildPom( String pomPath, Properties systemProperties, Properties userProperties, String... profileIds )",
          "1847:         return buildPom( pomPath, false, systemProperties, userProperties, profileIds );",
          "1850:     private PomTestWrapper buildPom( String pomPath, boolean lenientValidation, Properties systemProperties,",
          "1851:                                      Properties userProperties, String... profileIds )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1864:         localRepoUrl = \"file://\" + localRepoUrl;",
          "1865:         config.setLocalRepository( repositorySystem.createArtifactRepository( \"local\", localRepoUrl, new DefaultRepositoryLayout(), null, null ) );",
          "1866:         config.setActiveProfileIds( Arrays.asList( profileIds ) );",
          "1869:         config.setValidationLevel( lenientValidation ? ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0",
          "1870:                         : ModelBuildingRequest.VALIDATION_LEVEL_STRICT );",
          "",
          "[Removed Lines]",
          "1867:         config.setSystemProperties( executionProperties );",
          "1868:         config.setUserProperties( executionProperties );",
          "",
          "[Added Lines]",
          "1867:         config.setSystemProperties( systemProperties );",
          "1868:         config.setUserProperties( userProperties );",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "274:                 modelRequest.setValidationLevel( ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL );",
          "275:                 modelRequest.setProcessPlugins( false );",
          "276:                 modelRequest.setTwoPhaseBuilding( false );",
          "279:                 modelRequest.setModelCache( DefaultModelCache.newInstance( session ) );",
          "280:                 modelRequest.setModelResolver( new DefaultModelResolver( session, trace.newChild( modelRequest ),",
          "281:                                                                          request.getRequestContext(), artifactResolver,",
          "",
          "[Removed Lines]",
          "277:                 modelRequest.setSystemProperties( toProperties( session.getUserProperties(),",
          "278:                                                                 session.getSystemProperties() ) );",
          "",
          "[Added Lines]",
          "277:                 modelRequest.setSystemProperties( toProperties( session.getSystemProperties() ) );",
          "278:                 modelRequest.setUserProperties( toProperties( session.getUserProperties() ) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "328:         }",
          "329:     }",
          "332:     {",
          "333:         Properties props = new Properties();",
          "342:         return props;",
          "343:     }",
          "",
          "[Removed Lines]",
          "331:     private Properties toProperties( Map<String, String> dominant, Map<String, String> recessive )",
          "334:         if ( recessive != null )",
          "335:         {",
          "336:             props.putAll( recessive );",
          "337:         }",
          "338:         if ( dominant != null )",
          "339:         {",
          "340:             props.putAll( dominant );",
          "341:         }",
          "",
          "[Added Lines]",
          "331:     private Properties toProperties( Map<String, String> map )",
          "334:         props.putAll( map );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5a8997312680a4b9c69a129801524691bc546c08",
      "candidate_info": {
        "commit_hash": "5a8997312680a4b9c69a129801524691bc546c08",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/5a8997312680a4b9c69a129801524691bc546c08",
        "files": [
          "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java",
          "maven-core/src/test/resources/projects/modelsourcebasedir/pom.xml",
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java"
        ],
        "message": "[MNG-7170] Allow to associate pomFile/${basedir} with DefaultProjectBuilder.build(ModelSource, ...)\n\nActually a subset backport of MNG-5669 (5cdb8332f99a36e5a1da202da43e3c7dfbb49322)\n\nAlso-By: rfscholte <rfscholte@apache.org>\n\nThis closes #478",
        "before_after_code_files": [
          "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java -> maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: import org.apache.maven.model.Plugin;",
          "40: import org.apache.maven.model.building.FileModelSource;",
          "41: import org.apache.maven.model.building.ModelBuildingRequest;",
          "42: import org.apache.maven.model.building.ModelSource;",
          "43: import org.apache.maven.shared.utils.io.FileUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: import org.apache.maven.model.building.ModelProblem;",
          "43: import org.apache.maven.model.building.ModelProblem.Severity;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:         assertNotNull( result.getProject().getParentFile() );",
          "84:     }",
          "86:     public void testVersionlessManagedDependency()",
          "87:         throws Exception",
          "88:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     public void testBuildFromModelSourceResolvesBasedir()",
          "89:         throws Exception",
          "90:     {",
          "91:         File pomFile = new File( \"src/test/resources/projects/modelsourcebasedir/pom.xml\" );",
          "92:         MavenSession mavenSession = createMavenSession( null );",
          "93:         ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();",
          "94:         configuration.setRepositorySession( mavenSession.getRepositorySession() );",
          "95:         ModelSource modelSource = new FileModelSource( pomFile );",
          "96:         ProjectBuildingResult result =",
          "97:             getContainer().lookup( org.apache.maven.project.ProjectBuilder.class ).build( modelSource, configuration );",
          "99:         assertEquals( pomFile.getAbsoluteFile(), result.getProject().getModel().getPomFile().getAbsoluteFile() );",
          "100:         int errors = 0;",
          "101:         for ( ModelProblem p : result.getProblems() )",
          "102:         {",
          "103:             if ( p.getSeverity() == Severity.ERROR )",
          "104:             {",
          "105:                 errors++;",
          "106:             }",
          "107:         }",
          "108:         assertEquals( 0, errors );",
          "109:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:             File parent = new File( tempDir.toFile(), \"pom.xml\" );",
          "161:             String parentContent = FileUtils.fileRead( parent );",
          "162:             parentContent = parentContent.replaceAll( \"<packaging>pom</packaging>\",",
          "164:             FileUtils.fileWrite( parent, \"UTF-8\", parentContent );",
          "166:             ProjectBuildingResult result = projectBuilder.build( child, configuration );",
          "",
          "[Removed Lines]",
          "163:               \"<packaging>pom</packaging><properties><addedProperty>addedValue</addedProperty></properties>\" );",
          "",
          "[Added Lines]",
          "189:                     \"<packaging>pom</packaging><properties><addedProperty>addedValue</addedProperty></properties>\" );",
          "",
          "---------------"
        ],
        "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java -> maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "617:             throw problems.newModelBuildingException();",
          "618:         }",
          "622:         problems.setSource( model );",
          "623:         modelValidator.validateRawModel( model, request, problems );",
          "",
          "[Removed Lines]",
          "620:         model.setPomFile( pomFile );",
          "",
          "[Added Lines]",
          "620:         if ( pomFile != null )",
          "621:         {",
          "622:             model.setPomFile( pomFile );",
          "623:         }",
          "624:         else if ( modelSource instanceof FileModelSource )",
          "625:         {",
          "626:             model.setPomFile( ( (FileModelSource) modelSource ).getFile() );",
          "627:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "99de6b49ee066c102737e4cb99af4be3edb257df",
      "candidate_info": {
        "commit_hash": "99de6b49ee066c102737e4cb99af4be3edb257df",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/99de6b49ee066c102737e4cb99af4be3edb257df",
        "files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/BuilderCommon.java"
        ],
        "message": "[MNG-7380] Don't log non-threadsafe warning if only building a single module\n\nThis closes #655",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/BuilderCommon.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/BuilderCommon.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/BuilderCommon.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/BuilderCommon.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/BuilderCommon.java -> maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/BuilderCommon.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:         lifecycleDebugLogger.debugProjectPlan( project, executionPlan );",
          "102:         {",
          "103:             final Set<Plugin> unsafePlugins = executionPlan.getNonThreadSafePlugins();",
          "104:             if ( !unsafePlugins.isEmpty() )",
          "",
          "[Removed Lines]",
          "101:         if ( session.getRequest().getDegreeOfConcurrency() > 1 )",
          "",
          "[Added Lines]",
          "101:         if ( session.getRequest().getDegreeOfConcurrency() > 1 && session.getProjects().size() > 1 )",
          "",
          "---------------"
        ]
      }
    }
  ]
}