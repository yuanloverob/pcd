{
  "cve_id": "CVE-2022-2065",
  "cve_desc": "Cross-site Scripting (XSS) - Stored in GitHub repository neorazorx/facturascripts prior to 2022.06.",
  "repo": "neorazorx/facturascripts",
  "patch_hash": "1d1edb40b40016d7fd2893b410b98569d7facca1",
  "patch_info": {
    "commit_hash": "1d1edb40b40016d7fd2893b410b98569d7facca1",
    "repo": "neorazorx/facturascripts",
    "commit_url": "https://github.com/neorazorx/facturascripts/commit/1d1edb40b40016d7fd2893b410b98569d7facca1",
    "files": [
      "Core/App/AppRouter.php"
    ],
    "message": "Force to download SVG files to prevent security problems. ------ Forzamos a descargar los archivos SVG para evitar problemas de seguridad.",
    "before_after_code_files": [
      "Core/App/AppRouter.php||Core/App/AppRouter.php"
    ]
  },
  "patch_diff": {
    "Core/App/AppRouter.php||Core/App/AppRouter.php": [
      "File: Core/App/AppRouter.php -> Core/App/AppRouter.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:         $allowedFolders = ['node_modules', 'vendor', 'Dinamic', 'Core', 'Plugins', 'MyFiles/Public'];",
      "128:         foreach ($allowedFolders as $folder) {",
      "129:             if ('/' . $folder === substr($uri, 0, 1 + strlen($folder))) {",
      "132:                 return true;",
      "133:             }",
      "134:         }",
      "",
      "[Removed Lines]",
      "130:                 header('Content-Type: ' . $this->getMime($filePath));",
      "131:                 readfile($filePath);",
      "",
      "[Added Lines]",
      "130:                 $this->download($filePath);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "137:         $token = filter_input(INPUT_GET, 'myft');",
      "138:         $fixedFilePath = substr(urldecode($uri), 1);",
      "139:         if ('/MyFiles/' === substr($uri, 0, 9) && $token && MyFilesToken::validate($fixedFilePath, $token)) {",
      "148:             return true;",
      "149:         }",
      "",
      "[Removed Lines]",
      "140:             header('Content-Type: ' . $this->getMime($filePath));",
      "143:             if (ob_get_contents()) {",
      "144:                 ob_end_flush();",
      "145:             }",
      "147:             readfile($filePath);",
      "",
      "[Added Lines]",
      "139:             $this->download($filePath);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "205:         }",
      "206:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "200:     private function download(string $filePath)",
      "201:     {",
      "202:         header('Content-Type: ' . $this->getMime($filePath));",
      "205:         if (ob_get_contents()) {",
      "206:             ob_end_flush();",
      "207:         }",
      "210:         if (strpos($filePath, '.svg') !== false) {",
      "211:             header('Content-Disposition: attachment; filename=\"' . basename($filePath) . '\"');",
      "212:         }",
      "214:         readfile($filePath);",
      "215:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7909b3fc432f3c38d62dbfeca372312149318625",
      "candidate_info": {
        "commit_hash": "7909b3fc432f3c38d62dbfeca372312149318625",
        "repo": "neorazorx/facturascripts",
        "commit_url": "https://github.com/neorazorx/facturascripts/commit/7909b3fc432f3c38d62dbfeca372312149318625",
        "files": [
          "Core/App/AppRouter.php",
          "Core/Model/Base/SalesDocument.php",
          "Core/Model/FacturaCliente.php"
        ],
        "message": "Fixed latest merges.",
        "before_after_code_files": [
          "Core/App/AppRouter.php||Core/App/AppRouter.php",
          "Core/Model/Base/SalesDocument.php||Core/Model/Base/SalesDocument.php",
          "Core/Model/FacturaCliente.php||Core/Model/FacturaCliente.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Core/App/AppRouter.php||Core/App/AppRouter.php"
          ],
          "candidate": [
            "Core/App/AppRouter.php||Core/App/AppRouter.php"
          ]
        }
      },
      "candidate_diff": {
        "Core/App/AppRouter.php||Core/App/AppRouter.php": [
          "File: Core/App/AppRouter.php -> Core/App/AppRouter.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:         $fixedFilePath = substr(urldecode($uri), 1);",
          "138:         if ('/MyFiles/' === substr($uri, 0, 9) && $token && MyFilesToken::validate($fixedFilePath, $token)) {",
          "139:             header('Content-Type: ' . $this->getMime($filePath));",
          "141:             readfile($filePath);",
          "142:             return true;",
          "143:         }",
          "",
          "[Removed Lines]",
          "140:             \\ob_end_flush();            /// Allows downloading large files using direct buffer",
          "",
          "[Added Lines]",
          "141:             ob_end_flush(); /// disables buffer storage",
          "",
          "---------------"
        ],
        "Core/Model/Base/SalesDocument.php||Core/Model/Base/SalesDocument.php": [
          "File: Core/Model/Base/SalesDocument.php -> Core/Model/Base/SalesDocument.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "450:     {",
          "451:         if (null !== $this->codagente && $this->total > 0) {",
          "452:             $lines = $this->getLines();",
          "",
          "[Removed Lines]",
          "449:     protected function onChangeAgent(): bool",
          "",
          "[Added Lines]",
          "449:     protected function onChangeAgent()",
          "",
          "---------------"
        ],
        "Core/Model/FacturaCliente.php||Core/Model/FacturaCliente.php": [
          "File: Core/Model/FacturaCliente.php -> Core/Model/FacturaCliente.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:         }",
          "137:         $whereOld = [",
          "138:             new DataBaseWhere('codejercicio', $this->codejercicio),",
          "139:             new DataBaseWhere('codserie', $this->codserie),",
          "141:         ];",
          "142:         foreach ($this->all($whereOld, ['fecha' => 'DESC'], 0, 1) as $old) {",
          "144:                 $this->toolBox()->i18nLog()->error('invalid-date-there-are-invoices-after', ['%date%' => $this->fecha]);",
          "145:                 return false;",
          "146:             }",
          "",
          "[Removed Lines]",
          "136:         $numColumn = \\strtolower(\\FS_DB_TYPE) == 'postgresql' ? 'CAST(numero as integer)' : 'CAST(numero as unsigned)';",
          "140:             new DataBaseWhere($numColumn, (int) $this->numero, '<')",
          "143:             if (\\strtotime($old->fecha) > \\strtotime($this->fecha)) {",
          "",
          "[Added Lines]",
          "135:         $numColumn = strtolower(FS_DB_TYPE) == 'postgresql' ? 'CAST(numero as integer)' : 'CAST(numero as unsigned)';",
          "139:             new DataBaseWhere($numColumn, (int)$this->numero, '<')",
          "142:             if (strtotime($old->fecha) > strtotime($this->fecha)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:         $whereNew = [",
          "151:             new DataBaseWhere('codejercicio', $this->codejercicio),",
          "152:             new DataBaseWhere('codserie', $this->codserie),",
          "154:         ];",
          "155:         foreach ($this->all($whereNew, ['fecha' => 'ASC'], 0, 1) as $old) {",
          "157:                 $this->toolBox()->i18nLog()->error('invalid-date-there-are-invoices-before', ['%date%' => $this->fecha]);",
          "158:                 return false;",
          "159:             }",
          "",
          "[Removed Lines]",
          "153:             new DataBaseWhere($numColumn, (int) $this->numero, '>')",
          "156:             if (\\strtotime($old->fecha) < \\strtotime($this->fecha)) {",
          "",
          "[Added Lines]",
          "152:             new DataBaseWhere($numColumn, (int)$this->numero, '>')",
          "155:             if (strtotime($old->fecha) < strtotime($this->fecha)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e432b9a952376e32c7d0d294605604eff77bcc8c",
      "candidate_info": {
        "commit_hash": "e432b9a952376e32c7d0d294605604eff77bcc8c",
        "repo": "neorazorx/facturascripts",
        "commit_url": "https://github.com/neorazorx/facturascripts/commit/e432b9a952376e32c7d0d294605604eff77bcc8c",
        "files": [
          "Core/App/AppRouter.php"
        ],
        "message": "Fix download large file",
        "before_after_code_files": [
          "Core/App/AppRouter.php||Core/App/AppRouter.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Core/App/AppRouter.php||Core/App/AppRouter.php"
          ],
          "candidate": [
            "Core/App/AppRouter.php||Core/App/AppRouter.php"
          ]
        }
      },
      "candidate_diff": {
        "Core/App/AppRouter.php||Core/App/AppRouter.php": [
          "File: Core/App/AppRouter.php -> Core/App/AppRouter.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:     public function getFile(): bool",
          "108:     {",
          "109:         $uri = $this->getUri();",
          "113:         if ('/favicon.ico' == $uri) {",
          "",
          "[Removed Lines]",
          "110:         $filePath = FS_FOLDER . $uri;",
          "",
          "[Added Lines]",
          "110:         $filePath = FS_FOLDER . urldecode($uri);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:         $token = filter_input(INPUT_GET, 'myft');",
          "138:             header('Content-Type: ' . $this->getMime($filePath));",
          "139:             readfile($filePath);",
          "140:             return true;",
          "141:         }",
          "",
          "[Removed Lines]",
          "137:         if ('/MyFiles/' === substr($uri, 0, 9) && $token && MyFilesToken::validate(substr($uri, 1), $token)) {",
          "",
          "[Added Lines]",
          "137:         $fixedFilePath = substr(urldecode($uri), 1);",
          "138:         if ('/MyFiles/' === substr($uri, 0, 9) && $token && MyFilesToken::validate($fixedFilePath, $token)) {",
          "140:             \\ob_end_flush();            /// Allows downloading large files using direct buffer",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0eb9a5b10a9121fca2106735da22ee4cb6a0a8f8",
      "candidate_info": {
        "commit_hash": "0eb9a5b10a9121fca2106735da22ee4cb6a0a8f8",
        "repo": "neorazorx/facturascripts",
        "commit_url": "https://github.com/neorazorx/facturascripts/commit/0eb9a5b10a9121fca2106735da22ee4cb6a0a8f8",
        "files": [
          "Core/App/AppRouter.php",
          "Core/Translation/ca_ES.json",
          "Core/Translation/de_DE.json",
          "Core/Translation/en_EN.json",
          "Core/Translation/es_AR.json",
          "Core/Translation/es_CL.json",
          "Core/Translation/es_CO.json",
          "Core/Translation/es_CR.json",
          "Core/Translation/es_DO.json",
          "Core/Translation/es_EC.json",
          "Core/Translation/es_ES.json",
          "Core/Translation/es_GT.json",
          "Core/Translation/es_MX.json",
          "Core/Translation/es_PE.json",
          "Core/Translation/es_UY.json",
          "Core/Translation/eu_ES.json",
          "Core/Translation/fr_FR.json",
          "Core/Translation/gl_ES.json",
          "Core/Translation/it_IT.json",
          "Core/Translation/pt_PT.json",
          "Core/Translation/va_ES.json",
          "composer.json",
          "index.php"
        ],
        "message": "Minor code improvements and translations updated.",
        "before_after_code_files": [
          "Core/App/AppRouter.php||Core/App/AppRouter.php",
          "index.php||index.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Core/App/AppRouter.php||Core/App/AppRouter.php"
          ],
          "candidate": [
            "Core/App/AppRouter.php||Core/App/AppRouter.php"
          ]
        }
      },
      "candidate_diff": {
        "Core/App/AppRouter.php||Core/App/AppRouter.php": [
          "File: Core/App/AppRouter.php -> Core/App/AppRouter.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: namespace FacturaScripts\\Core\\App;",
          "21: use FacturaScripts\\Core\\Base\\MyFilesToken;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: use FacturaScripts\\Core\\Base\\PluginManager;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "34:     const ROUTE_LIST_FILE = \\FS_FOLDER . DIRECTORY_SEPARATOR . 'MyFiles' . DIRECTORY_SEPARATOR . 'routes.json';",
          "",
          "[Added Lines]",
          "35:     const ROUTE_LIST_FILE = FS_FOLDER . DIRECTORY_SEPARATOR . 'MyFiles' . DIRECTORY_SEPARATOR . 'routes.json';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:     public function __construct()",
          "47:     {",
          "50:         }",
          "52:         $this->routes = $this->loadFromFile();",
          "",
          "[Removed Lines]",
          "48:         if (false === \\defined('FS_ROUTE')) {",
          "49:             \\define('FS_ROUTE', '');",
          "",
          "[Added Lines]",
          "49:         if (false === defined('FS_ROUTE')) {",
          "50:             define('FS_ROUTE', '');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:     }",
          "69:     public function getApp()",
          "70:     {",
          "71:         $uri = $this->getUri();",
          "73:             return new AppAPI($uri);",
          "74:         }",
          "",
          "[Removed Lines]",
          "72:         if ('/api' === $uri || '/api/' === \\substr($uri, 0, 5)) {",
          "",
          "[Added Lines]",
          "73:         if ('/api' === $uri || '/api/' === substr($uri, 0, 5)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "86:                 return $this->newAppController($uri, $data['controller']);",
          "87:             }",
          "90:                 continue;",
          "91:             }",
          "94:                 return $this->newAppController($uri, $data['controller']);",
          "95:             }",
          "96:         }",
          "",
          "[Removed Lines]",
          "89:             if ('*' !== \\substr($key, -1)) {",
          "93:             if (0 === \\strncmp($uri, $key, \\strlen($key) - 1)) {",
          "",
          "[Added Lines]",
          "90:             if ('*' !== substr($key, -1)) {",
          "94:             if (0 === strncmp($uri, $key, strlen($key) - 1)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "106:     public function getFile(): bool",
          "107:     {",
          "108:         $uri = $this->getUri();",
          "112:         if ('/favicon.ico' == $uri) {",
          "116:             return true;",
          "117:         }",
          "121:             return false;",
          "122:         }",
          "125:         $allowedFolders = ['node_modules', 'vendor', 'Dinamic', 'Core', 'Plugins', 'MyFiles/Public'];",
          "126:         foreach ($allowedFolders as $folder) {",
          "130:                 return true;",
          "131:             }",
          "132:         }",
          "139:             return true;",
          "140:         }",
          "",
          "[Removed Lines]",
          "109:         $filePath = \\FS_FOLDER . $uri;",
          "113:             $filePath = \\FS_FOLDER . '/Dinamic/Assets/Images/favicon.ico';",
          "114:             \\header('Content-Type: ' . $this->getMime($filePath));",
          "115:             \\readfile($filePath);",
          "120:         if (false === \\is_file($filePath) || false === $this->isFileSafe($filePath)) {",
          "127:             if ('/' . $folder === \\substr($uri, 0, 1 + \\strlen($folder))) {",
          "128:                 \\header('Content-Type: ' . $this->getMime($filePath));",
          "129:                 \\readfile($filePath);",
          "135:         $token = \\filter_input(INPUT_GET, 'myft');",
          "136:         if ('/MyFiles/' === \\substr($uri, 0, 9) && $token && MyFilesToken::validate(\\substr($uri, 1), $token)) {",
          "137:             \\header('Content-Type: ' . $this->getMime($filePath));",
          "138:             \\readfile($filePath);",
          "",
          "[Added Lines]",
          "110:         $filePath = FS_FOLDER . $uri;",
          "114:             $filePath = FS_FOLDER . '/Dinamic/Assets/Images/favicon.ico';",
          "115:             header('Content-Type: ' . $this->getMime($filePath));",
          "116:             readfile($filePath);",
          "121:         if (false === is_file($filePath) || false === $this->isFileSafe($filePath)) {",
          "128:             if ('/' . $folder === substr($uri, 0, 1 + strlen($folder))) {",
          "129:                 header('Content-Type: ' . $this->getMime($filePath));",
          "130:                 readfile($filePath);",
          "136:         $token = filter_input(INPUT_GET, 'myft');",
          "137:         if ('/MyFiles/' === substr($uri, 0, 9) && $token && MyFilesToken::validate(substr($uri, 1), $token)) {",
          "138:             header('Content-Type: ' . $this->getMime($filePath));",
          "139:             readfile($filePath);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "151:     public static function isFileSafe(string $filePath): bool",
          "152:     {",
          "154:         $safe = [",
          "155:             'avi', 'css', 'csv', 'eot', 'gif', 'gz', 'ico', 'jpeg', 'jpg', 'js',",
          "156:             'json', 'map', 'mkv', 'mp4', 'ogg', 'pdf', 'png', 'sql', 'svg',",
          "157:             'ttf', 'webm', 'woff', 'woff2', 'xls', 'xlsx', 'xml', 'xsig', 'zip'",
          "158:         ];",
          "160:     }",
          "",
          "[Removed Lines]",
          "153:         $parts = \\explode('.', $filePath);",
          "159:         return \\count($parts) > 1 ? \\in_array(\\end($parts), $safe, true) : true;",
          "",
          "[Added Lines]",
          "154:         $parts = explode('.', $filePath);",
          "160:         return empty($parts) || in_array(end($parts), $safe, true);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "186:     }",
          "191:     private function deploy()",
          "192:     {",
          "195:             $pluginManager->deploy();",
          "196:         }",
          "197:     }",
          "",
          "[Removed Lines]",
          "193:         if (false === \\file_exists(\\FS_FOLDER . \\DIRECTORY_SEPARATOR . 'Dinamic')) {",
          "194:             $pluginManager = new \\FacturaScripts\\Core\\Base\\PluginManager();",
          "",
          "[Added Lines]",
          "194:         if (false === file_exists(FS_FOLDER . DIRECTORY_SEPARATOR . 'Dinamic')) {",
          "195:             $pluginManager = new PluginManager();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "207:     {",
          "209:             return 'text/css';",
          "210:         }",
          "213:             return 'application/javascript';",
          "214:         }",
          "217:     }",
          "",
          "[Removed Lines]",
          "206:     private function getMime(string $filePath)",
          "208:         if ('.css' === \\substr($filePath, -4)) {",
          "212:         if ('.js' === \\substr($filePath, -3)) {",
          "216:         return \\mime_content_type($filePath);",
          "",
          "[Added Lines]",
          "207:     private function getMime(string $filePath): string",
          "209:         if ('.css' === substr($filePath, -4)) {",
          "213:         if ('.js' === substr($filePath, -3)) {",
          "217:         return mime_content_type($filePath);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "224:     private function getUri()",
          "225:     {",
          "231:     }",
          "",
          "[Removed Lines]",
          "226:         $uri = \\filter_input(\\INPUT_SERVER, 'REQUEST_URI');",
          "227:         $uri2 = \\is_null($uri) ? \\filter_var($_SERVER['REQUEST_URI'], \\FILTER_SANITIZE_URL) : $uri;",
          "228:         $uriArray = \\explode('?', $uri2);",
          "230:         return \\substr($uriArray[0], \\strlen(FS_ROUTE));",
          "",
          "[Added Lines]",
          "227:         $uri = filter_input(INPUT_SERVER, 'REQUEST_URI');",
          "228:         $uri2 = is_null($uri) ? filter_var($_SERVER['REQUEST_URI'], FILTER_SANITIZE_URL) : $uri;",
          "229:         $uriArray = explode('?', $uri2);",
          "231:         return substr($uriArray[0], strlen(FS_ROUTE));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "238:     private function loadFromFile(): array",
          "239:     {",
          "242:             if ($content !== false) {",
          "244:             }",
          "245:         }",
          "",
          "[Removed Lines]",
          "240:         if (\\file_exists(self::ROUTE_LIST_FILE)) {",
          "241:             $content = \\file_get_contents(self::ROUTE_LIST_FILE);",
          "243:                 return \\json_decode($content, true);",
          "",
          "[Added Lines]",
          "241:         if (file_exists(self::ROUTE_LIST_FILE)) {",
          "242:             $content = file_get_contents(self::ROUTE_LIST_FILE);",
          "244:                 return json_decode($content, true);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "257:     private function newAppController(string $uri, string $pageName = '')",
          "258:     {",
          "260:     }",
          "268:     {",
          "271:     }",
          "272: }",
          "",
          "[Removed Lines]",
          "259:         return \\FS_DEBUG ? new AppDebugController($uri, $pageName) : new AppController($uri, $pageName);",
          "267:     private function save(): bool",
          "269:         $content = \\json_encode($this->routes);",
          "270:         return \\file_put_contents(self::ROUTE_LIST_FILE, $content) !== false;",
          "",
          "[Added Lines]",
          "260:         return FS_DEBUG ? new AppDebugController($uri, $pageName) : new AppController($uri, $pageName);",
          "268:     private function save(): void",
          "270:         $content = json_encode($this->routes);",
          "271:         file_put_contents(self::ROUTE_LIST_FILE, $content);",
          "",
          "---------------"
        ],
        "index.php||index.php": [
          "File: index.php -> index.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "19: define('FS_FOLDER', __DIR__);",
          "",
          "[Added Lines]",
          "20: use FacturaScripts\\Core\\App\\AppCron;",
          "21: use FacturaScripts\\Core\\App\\AppInstaller;",
          "22: use FacturaScripts\\Core\\App\\AppRouter;",
          "23: use FacturaScripts\\Core\\Base\\Debug\\ProductionErrorHandler;",
          "24: use Whoops\\Handler\\PlainTextHandler;",
          "25: use Whoops\\Handler\\PrettyPageHandler;",
          "26: use Whoops\\Run;",
          "28: const FS_FOLDER = __DIR__;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:     require_once __DIR__ . '/vendor/autoload.php';",
          "38:     if (false === $router->getFile()) {",
          "40:     }",
          "41:     exit();",
          "42: }",
          "",
          "[Removed Lines]",
          "37:     $router = new \\FacturaScripts\\Core\\App\\AppRouter();",
          "39:         $app = new \\FacturaScripts\\Core\\App\\AppInstaller();",
          "",
          "[Added Lines]",
          "46:     $router = new AppRouter();",
          "48:         $app = new AppInstaller();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52: if (FS_DEBUG) {",
          "56:     $whoops->register();",
          "57: } else {",
          "59: }",
          "65: if (isset($argv[1]) && $argv[1] === '-cron') {",
          "66:     chdir(__DIR__);",
          "68:     $app->connect();",
          "69:     $app->run();",
          "70:     $app->render();",
          "",
          "[Removed Lines]",
          "53:     $whoops = new \\Whoops\\Run;",
          "54:     $whoops->prependHandler(new \\Whoops\\Handler\\PlainTextHandler());",
          "55:     $whoops->prependHandler(new \\Whoops\\Handler\\PrettyPageHandler());",
          "58:     $errorHandler = new \\FacturaScripts\\Core\\Base\\Debug\\ProductionErrorHandler();",
          "64: $router = new \\FacturaScripts\\Core\\App\\AppRouter();",
          "67:     $app = new \\FacturaScripts\\Core\\App\\AppCron();",
          "",
          "[Added Lines]",
          "62:     $whoops = new Run;",
          "63:     $whoops->prependHandler(new PlainTextHandler());",
          "64:     $whoops->prependHandler(new PrettyPageHandler());",
          "67:     $errorHandler = new ProductionErrorHandler();",
          "73: $router = new AppRouter();",
          "76:     $app = new AppCron();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f1ca50d021f52c4560d120bbbe7ff2a5321e38fb",
      "candidate_info": {
        "commit_hash": "f1ca50d021f52c4560d120bbbe7ff2a5321e38fb",
        "repo": "neorazorx/facturascripts",
        "commit_url": "https://github.com/neorazorx/facturascripts/commit/f1ca50d021f52c4560d120bbbe7ff2a5321e38fb",
        "files": [
          "Core/App/AppRouter.php"
        ],
        "message": "Force to download xml and xsig files to prevent XSS attacks. ------ Forzamos la descarga de archivos xml y xsig para evitar ataques XSS.",
        "before_after_code_files": [
          "Core/App/AppRouter.php||Core/App/AppRouter.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Core/App/AppRouter.php||Core/App/AppRouter.php"
          ],
          "candidate": [
            "Core/App/AppRouter.php||Core/App/AppRouter.php"
          ]
        }
      },
      "candidate_diff": {
        "Core/App/AppRouter.php||Core/App/AppRouter.php": [
          "File: Core/App/AppRouter.php -> Core/App/AppRouter.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:             ob_end_flush();",
          "207:         }",
          "211:             header('Content-Disposition: attachment; filename=\"' . basename($filePath) . '\"');",
          "212:         }",
          "",
          "[Removed Lines]",
          "210:         if (strpos($filePath, '.svg') !== false) {",
          "",
          "[Added Lines]",
          "210:         $info = pathinfo($filePath);",
          "211:         $extension = strtolower($info['extension']);",
          "212:         if (in_array($extension, ['svg', 'xml', 'xsig'])) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}