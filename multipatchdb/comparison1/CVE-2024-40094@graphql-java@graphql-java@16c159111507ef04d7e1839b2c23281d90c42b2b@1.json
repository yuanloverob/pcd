{
  "cve_id": "CVE-2024-40094",
  "cve_desc": "GraphQL Java (aka graphql-java) before 21.5 does not properly consider ExecutableNormalizedFields (ENFs) as part of preventing denial of service via introspection queries. 20.9 and 19.11 are also fixed versions.",
  "repo": "graphql-java/graphql-java",
  "patch_hash": "16c159111507ef04d7e1839b2c23281d90c42b2b",
  "patch_info": {
    "commit_hash": "16c159111507ef04d7e1839b2c23281d90c42b2b",
    "repo": "graphql-java/graphql-java",
    "commit_url": "https://github.com/graphql-java/graphql-java/commit/16c159111507ef04d7e1839b2c23281d90c42b2b",
    "files": [
      "src/main/java/graphql/Assert.java",
      "src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java",
      "src/main/java/graphql/analysis/QueryTransformer.java",
      "src/main/java/graphql/analysis/QueryTraversalContext.java",
      "src/main/java/graphql/analysis/QueryTraverser.java",
      "src/main/java/graphql/execution/ExecutionContext.java",
      "src/main/java/graphql/execution/FieldCollector.java",
      "src/main/java/graphql/execution/FieldCollectorParameters.java",
      "src/main/java/graphql/execution/conditional/ConditionalNodes.java",
      "src/main/java/graphql/introspection/GoodFaithIntrospection.java",
      "src/main/java/graphql/introspection/Introspection.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
      "src/main/java/graphql/schema/impl/SchemaUtil.java",
      "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
      "src/test/groovy/graphql/UnionTest.groovy",
      "src/test/groovy/graphql/execution/ConditionalNodesTest.groovy",
      "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
      "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
      "src/test/java/benchmark/BenchmarkUtils.java",
      "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
    ],
    "message": "Merge pull request #3543 from graphql-java/19.x-backport-enf-introspection\n\n19.x Backport PR 3539",
    "before_after_code_files": [
      "src/main/java/graphql/Assert.java||src/main/java/graphql/Assert.java",
      "src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java||src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java",
      "src/main/java/graphql/analysis/QueryTransformer.java||src/main/java/graphql/analysis/QueryTransformer.java",
      "src/main/java/graphql/analysis/QueryTraversalContext.java||src/main/java/graphql/analysis/QueryTraversalContext.java",
      "src/main/java/graphql/analysis/QueryTraverser.java||src/main/java/graphql/analysis/QueryTraverser.java",
      "src/main/java/graphql/execution/ExecutionContext.java||src/main/java/graphql/execution/ExecutionContext.java",
      "src/main/java/graphql/execution/FieldCollector.java||src/main/java/graphql/execution/FieldCollector.java",
      "src/main/java/graphql/execution/FieldCollectorParameters.java||src/main/java/graphql/execution/FieldCollectorParameters.java",
      "src/main/java/graphql/execution/ConditionalNodes.java||src/main/java/graphql/execution/conditional/ConditionalNodes.java",
      "src/main/java/graphql/introspection/GoodFaithIntrospection.java||src/main/java/graphql/introspection/GoodFaithIntrospection.java",
      "src/main/java/graphql/introspection/Introspection.java||src/main/java/graphql/introspection/Introspection.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
      "src/main/java/graphql/schema/impl/SchemaUtil.java||src/main/java/graphql/schema/impl/SchemaUtil.java",
      "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
      "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy",
      "src/test/groovy/graphql/execution/ConditionalNodesTest.groovy||src/test/groovy/graphql/execution/ConditionalNodesTest.groovy",
      "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
      "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
      "src/test/java/benchmark/BenchmarkUtils.java||src/test/java/benchmark/BenchmarkUtils.java",
      "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
    ]
  },
  "patch_diff": {
    "src/main/java/graphql/Assert.java||src/main/java/graphql/Assert.java": [
      "File: src/main/java/graphql/Assert.java -> src/main/java/graphql/Assert.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "85:         throw new AssertException(\"condition expected to be true\");",
      "86:     }",
      "88:     public static void assertFalse(boolean condition, Supplier<String> msg) {",
      "89:         if (!condition) {",
      "90:             return;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "88:     public static void assertTrue(boolean condition, String constantMsg) {",
      "89:         if (condition) {",
      "90:             return;",
      "91:         }",
      "92:         throwAssert(constantMsg);",
      "93:     }",
      "95:     public static void assertTrue(boolean condition, String msgFmt, Object arg1) {",
      "96:         if (condition) {",
      "97:             return;",
      "98:         }",
      "99:         throwAssert(msgFmt, arg1);",
      "100:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "117:         throw new AssertException(String.format(invalidNameErrorMessage, name));",
      "118:     }",
      "120: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "134:     private static <T> T throwAssert(String format, Object... args) {",
      "135:         throw new AssertException(format(format, args));",
      "136:     }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java||src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java": [
      "File: src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java -> src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package graphql.analysis;",
      "3: import graphql.Internal;",
      "4: import graphql.execution.CoercedVariables;",
      "6: import graphql.execution.ValuesResolver;",
      "7: import graphql.introspection.Introspection;",
      "8: import graphql.language.Argument;",
      "9: import graphql.language.Directive;",
      "",
      "[Removed Lines]",
      "5: import graphql.execution.ConditionalNodes;",
      "",
      "[Added Lines]",
      "3: import graphql.GraphQLContext;",
      "7: import graphql.execution.conditional.ConditionalNodes;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67:     @Override",
      "68:     public TraversalControl visitInlineFragment(InlineFragment inlineFragment, TraverserContext<Node> context) {",
      "70:             return TraversalControl.ABORT;",
      "71:         }",
      "",
      "[Removed Lines]",
      "69:         if (!conditionalNodes.shouldInclude(variables, inlineFragment.getDirectives())) {",
      "",
      "[Added Lines]",
      "70:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
      "71:         GraphQLContext graphQLContext = parentEnv.getGraphQLContext();",
      "72:         if (!conditionalNodes.shouldInclude(inlineFragment, variables, null, graphQLContext)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "80:         preOrderCallback.visitInlineFragment(inlineFragmentEnvironment);",
      "85:         GraphQLCompositeType fragmentCondition;",
      "86:         if (inlineFragment.getTypeCondition() != null) {",
      "",
      "[Removed Lines]",
      "83:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "90:             fragmentCondition = parentEnv.getUnwrappedOutputType();",
      "91:         }",
      "94:         return TraversalControl.CONTINUE;",
      "95:     }",
      "97:     @Override",
      "100:             return TraversalControl.ABORT;",
      "101:         }",
      "105:         if (context.getPhase() == LEAVE) {",
      "106:             postOrderCallback.visitFragmentDefinition(fragmentEnvironment);",
      "",
      "[Removed Lines]",
      "93:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(fragmentCondition, parentEnv.getEnvironment(), inlineFragment));",
      "98:     public TraversalControl visitFragmentDefinition(FragmentDefinition node, TraverserContext<Node> context) {",
      "99:         if (!conditionalNodes.shouldInclude(variables, node.getDirectives())) {",
      "103:         QueryVisitorFragmentDefinitionEnvironment fragmentEnvironment = new QueryVisitorFragmentDefinitionEnvironmentImpl(node, context, schema);",
      "",
      "[Added Lines]",
      "95:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(fragmentCondition, parentEnv.getEnvironment(), inlineFragment, graphQLContext));",
      "100:     public TraversalControl visitFragmentDefinition(FragmentDefinition fragmentDefinition, TraverserContext<Node> context) {",
      "101:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
      "102:         GraphQLContext graphQLContext = parentEnv.getGraphQLContext();",
      "103:         if (!conditionalNodes.shouldInclude(fragmentDefinition, variables, null, graphQLContext)) {",
      "107:         QueryVisitorFragmentDefinitionEnvironment fragmentEnvironment = new QueryVisitorFragmentDefinitionEnvironmentImpl(fragmentDefinition, context, schema);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "108:         }",
      "109:         preOrderCallback.visitFragmentDefinition(fragmentEnvironment);",
      "114:         return TraversalControl.CONTINUE;",
      "115:     }",
      "117:     @Override",
      "118:     public TraversalControl visitFragmentSpread(FragmentSpread fragmentSpread, TraverserContext<Node> context) {",
      "120:             return TraversalControl.ABORT;",
      "121:         }",
      "123:         FragmentDefinition fragmentDefinition = fragmentsByName.get(fragmentSpread.getName());",
      "125:             return TraversalControl.ABORT;",
      "126:         }",
      "",
      "[Removed Lines]",
      "111:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
      "112:         GraphQLCompositeType typeCondition = (GraphQLCompositeType) schema.getType(node.getTypeCondition().getName());",
      "113:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(typeCondition, parentEnv.getEnvironment(), node));",
      "119:         if (!conditionalNodes.shouldInclude(variables, fragmentSpread.getDirectives())) {",
      "124:         if (!conditionalNodes.shouldInclude(variables, fragmentDefinition.getDirectives())) {",
      "",
      "[Added Lines]",
      "115:         GraphQLCompositeType typeCondition = (GraphQLCompositeType) schema.getType(fragmentDefinition.getTypeCondition().getName());",
      "116:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(typeCondition, parentEnv.getEnvironment(), fragmentDefinition, graphQLContext));",
      "122:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
      "123:         GraphQLContext graphQLContext = parentEnv.getGraphQLContext();",
      "124:         if (!conditionalNodes.shouldInclude(fragmentSpread, variables, null, graphQLContext)) {",
      "129:         if (!conditionalNodes.shouldInclude(fragmentDefinition, variables, null, graphQLContext)) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "134:         preOrderCallback.visitFragmentSpread(fragmentSpreadEnvironment);",
      "138:         GraphQLCompositeType typeCondition = (GraphQLCompositeType) schema.getType(fragmentDefinition.getTypeCondition().getName());",
      "139:         assertNotNull(typeCondition,",
      "140:                 () -> format(\"Invalid type condition '%s' in fragment '%s'\", fragmentDefinition.getTypeCondition().getName(),",
      "141:                         fragmentDefinition.getName()));",
      "143:         return TraversalControl.CONTINUE;",
      "144:     }",
      "146:     @Override",
      "147:     public TraversalControl visitField(Field field, TraverserContext<Node> context) {",
      "148:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
      "150:         GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(schema, (GraphQLCompositeType) unwrapAll(parentEnv.getOutputType()), field.getName());",
      "151:         boolean isTypeNameIntrospectionField = fieldDefinition == schema.getIntrospectionTypenameFieldDefinition();",
      "",
      "[Removed Lines]",
      "136:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
      "142:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(typeCondition, parentEnv.getEnvironment(), fragmentDefinition));",
      "",
      "[Added Lines]",
      "146:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(typeCondition, parentEnv.getEnvironment(), fragmentDefinition, graphQLContext));",
      "153:         GraphQLContext graphQLContext = parentEnv.getGraphQLContext();",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "167:             return TraversalControl.CONTINUE;",
      "168:         }",
      "171:             return TraversalControl.ABORT;",
      "172:         }",
      "",
      "[Removed Lines]",
      "170:         if (!conditionalNodes.shouldInclude(variables, field.getDirectives())) {",
      "",
      "[Added Lines]",
      "175:         if (!conditionalNodes.shouldInclude(field, variables, null, graphQLContext)) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "176:         GraphQLUnmodifiedType unmodifiedType = unwrapAll(fieldDefinition.getType());",
      "177:         QueryTraversalContext fieldEnv = (unmodifiedType instanceof GraphQLCompositeType)",
      "182:         context.setVar(QueryTraversalContext.class, fieldEnv);",
      "",
      "[Removed Lines]",
      "178:                 ? new QueryTraversalContext(fieldDefinition.getType(), environment, field)",
      "179:                 : new QueryTraversalContext(null, environment, field);// Terminal (scalar) node, EMPTY FRAME",
      "",
      "[Added Lines]",
      "183:                 ? new QueryTraversalContext(fieldDefinition.getType(), environment, field, graphQLContext)",
      "184:                 : new QueryTraversalContext(null, environment, field, graphQLContext);// Terminal (scalar) node, EMPTY FRAME",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "252:         }",
      "253:         return preOrderCallback.visitArgumentValue(environment);",
      "254:     }",
      "",
      "[Removed Lines]",
      "255: }",
      "",
      "[Added Lines]",
      "260: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/analysis/QueryTransformer.java||src/main/java/graphql/analysis/QueryTransformer.java": [
      "File: src/main/java/graphql/analysis/QueryTransformer.java -> src/main/java/graphql/analysis/QueryTransformer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package graphql.analysis;",
      "3: import graphql.PublicApi;",
      "4: import graphql.language.FragmentDefinition;",
      "5: import graphql.language.Node;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: import graphql.GraphQLContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67:         NodeVisitorWithTypeTracking nodeVisitor = new NodeVisitorWithTypeTracking(queryVisitor, noOp, variables, schema, fragmentsByName);",
      "69:         Map<Class<?>, Object> rootVars = new LinkedHashMap<>();",
      "72:         TraverserVisitor<Node> nodeTraverserVisitor = new TraverserVisitor<Node>() {",
      "",
      "[Removed Lines]",
      "70:         rootVars.put(QueryTraversalContext.class, new QueryTraversalContext(rootParentType, null, null));",
      "",
      "[Added Lines]",
      "71:         rootVars.put(QueryTraversalContext.class, new QueryTraversalContext(rootParentType, null, null, GraphQLContext.getDefault()));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "163:             return new QueryTransformer(schema, root, rootParentType, fragmentsByName, variables);",
      "164:         }",
      "165:     }",
      "",
      "[Removed Lines]",
      "166: }",
      "",
      "[Added Lines]",
      "167: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/analysis/QueryTraversalContext.java||src/main/java/graphql/analysis/QueryTraversalContext.java": [
      "File: src/main/java/graphql/analysis/QueryTraversalContext.java -> src/main/java/graphql/analysis/QueryTraversalContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package graphql.analysis;",
      "3: import graphql.Internal;",
      "4: import graphql.language.SelectionSetContainer;",
      "5: import graphql.schema.GraphQLCompositeType;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: import graphql.GraphQLContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "17:     private final GraphQLOutputType outputType;",
      "18:     private final QueryVisitorFieldEnvironment environment;",
      "21:     QueryTraversalContext(GraphQLOutputType outputType,",
      "22:                           QueryVisitorFieldEnvironment environment,",
      "24:         this.outputType = outputType;",
      "25:         this.environment = environment;",
      "26:         this.selectionSetContainer = selectionSetContainer;",
      "27:     }",
      "29:     public GraphQLOutputType getOutputType() {",
      "",
      "[Removed Lines]",
      "19:     private final SelectionSetContainer selectionSetContainer;",
      "23:                           SelectionSetContainer selectionSetContainer) {",
      "",
      "[Added Lines]",
      "20:     private final SelectionSetContainer<?> selectionSetContainer;",
      "21:     private final GraphQLContext graphQLContext;",
      "25:                           SelectionSetContainer<?> selectionSetContainer,",
      "26:                           GraphQLContext graphQLContext) {",
      "30:         this.graphQLContext = graphQLContext;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "34:         return (GraphQLCompositeType) GraphQLTypeUtil.unwrapAll(outputType);",
      "35:     }",
      "38:     public QueryVisitorFieldEnvironment getEnvironment() {",
      "39:         return environment;",
      "40:     }",
      "44:         return selectionSetContainer;",
      "45:     }",
      "",
      "[Removed Lines]",
      "42:     public SelectionSetContainer getSelectionSetContainer() {",
      "46: }",
      "",
      "[Added Lines]",
      "45:     public SelectionSetContainer<?> getSelectionSetContainer() {",
      "49:     public GraphQLContext getGraphQLContext() {",
      "50:         return graphQLContext;",
      "51:     }",
      "52: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/analysis/QueryTraverser.java||src/main/java/graphql/analysis/QueryTraverser.java": [
      "File: src/main/java/graphql/analysis/QueryTraverser.java -> src/main/java/graphql/analysis/QueryTraverser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package graphql.analysis;",
      "3: import graphql.PublicApi;",
      "4: import graphql.execution.CoercedVariables;",
      "5: import graphql.execution.RawVariables;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: import graphql.GraphQLContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "176:     private Object visitImpl(QueryVisitor visitFieldCallback, Boolean preOrder) {",
      "177:         Map<Class<?>, Object> rootVars = new LinkedHashMap<>();",
      "180:         QueryVisitor preOrderCallback;",
      "181:         QueryVisitor postOrderCallback;",
      "",
      "[Removed Lines]",
      "178:         rootVars.put(QueryTraversalContext.class, new QueryTraversalContext(rootParentType, null, null));",
      "",
      "[Added Lines]",
      "179:         rootVars.put(QueryTraversalContext.class, new QueryTraversalContext(rootParentType, null, null, GraphQLContext.getDefault()));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "341:         }",
      "343:     }",
      "",
      "[Removed Lines]",
      "344: }",
      "",
      "[Added Lines]",
      "345: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/execution/ExecutionContext.java||src/main/java/graphql/execution/ExecutionContext.java": [
      "File: src/main/java/graphql/execution/ExecutionContext.java -> src/main/java/graphql/execution/ExecutionContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "80:         this.errors.set(builder.errors);",
      "81:         this.localContext = builder.localContext;",
      "82:         this.executionInput = builder.executionInput;",
      "84:     }",
      "",
      "[Removed Lines]",
      "83:         queryTree = FpKit.interThreadMemoize(() -> ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, operationDefinition, fragmentsByName, coercedVariables));",
      "",
      "[Added Lines]",
      "83:         this.queryTree = FpKit.interThreadMemoize(() -> ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, operationDefinition, fragmentsByName, coercedVariables));",
      "",
      "---------------"
    ],
    "src/main/java/graphql/execution/FieldCollector.java||src/main/java/graphql/execution/FieldCollector.java": [
      "File: src/main/java/graphql/execution/FieldCollector.java -> src/main/java/graphql/execution/FieldCollector.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: import graphql.Internal;",
      "5: import graphql.language.Field;",
      "6: import graphql.language.FragmentDefinition;",
      "7: import graphql.language.FragmentSpread;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: import graphql.execution.conditional.ConditionalNodes;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "76:         if (visitedFragments.contains(fragmentSpread.getName())) {",
      "77:             return;",
      "78:         }",
      "80:             return;",
      "81:         }",
      "82:         visitedFragments.add(fragmentSpread.getName());",
      "83:         FragmentDefinition fragmentDefinition = parameters.getFragmentsByName().get(fragmentSpread.getName());",
      "86:             return;",
      "87:         }",
      "88:         if (!doesFragmentConditionMatch(parameters, fragmentDefinition)) {",
      "",
      "[Removed Lines]",
      "79:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), fragmentSpread.getDirectives())) {",
      "85:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), fragmentDefinition.getDirectives())) {",
      "",
      "[Added Lines]",
      "80:         if (!conditionalNodes.shouldInclude(fragmentSpread,",
      "81:                 parameters.getVariables(),",
      "82:                 parameters.getGraphQLSchema(),",
      "83:                 parameters.getGraphQLContext())) {",
      "89:         if (!conditionalNodes.shouldInclude(fragmentDefinition,",
      "90:                 parameters.getVariables(),",
      "91:                 parameters.getGraphQLSchema(),",
      "92:                 parameters.getGraphQLContext())) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "92:     }",
      "94:     private void collectInlineFragment(FieldCollectorParameters parameters, Set<String> visitedFragments, Map<String, MergedField> fields, InlineFragment inlineFragment) {",
      "96:                 !doesFragmentConditionMatch(parameters, inlineFragment)) {",
      "97:             return;",
      "98:         }",
      "",
      "[Removed Lines]",
      "95:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), inlineFragment.getDirectives()) ||",
      "",
      "[Added Lines]",
      "102:         if (!conditionalNodes.shouldInclude(inlineFragment,",
      "103:                 parameters.getVariables(),",
      "104:                 parameters.getGraphQLSchema(),",
      "105:                 parameters.getGraphQLContext()) ||",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "100:     }",
      "102:     private void collectField(FieldCollectorParameters parameters, Map<String, MergedField> fields, Field field) {",
      "104:             return;",
      "105:         }",
      "106:         String name = field.getResultKey();",
      "",
      "[Removed Lines]",
      "103:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), field.getDirectives())) {",
      "",
      "[Added Lines]",
      "113:         if (!conditionalNodes.shouldInclude(field,",
      "114:                 parameters.getVariables(),",
      "115:                 parameters.getGraphQLSchema(),",
      "116:                 parameters.getGraphQLContext())) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "143:     }",
      "",
      "[Removed Lines]",
      "146: }",
      "",
      "[Added Lines]",
      "159: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/execution/FieldCollectorParameters.java||src/main/java/graphql/execution/FieldCollectorParameters.java": [
      "File: src/main/java/graphql/execution/FieldCollectorParameters.java -> src/main/java/graphql/execution/FieldCollectorParameters.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package graphql.execution;",
      "3: import graphql.Assert;",
      "4: import graphql.Internal;",
      "5: import graphql.language.FragmentDefinition;",
      "6: import graphql.schema.GraphQLObjectType;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: import graphql.GraphQLContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "17:     private final Map<String, FragmentDefinition> fragmentsByName;",
      "18:     private final Map<String, Object> variables;",
      "19:     private final GraphQLObjectType objectType;",
      "21:     public GraphQLSchema getGraphQLSchema() {",
      "22:         return graphQLSchema;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21:     private final GraphQLContext graphQLContext;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "34:         return objectType;",
      "35:     }",
      "42:     }",
      "44:     public static Builder newParameters() {",
      "",
      "[Removed Lines]",
      "37:     private FieldCollectorParameters(GraphQLSchema graphQLSchema, Map<String, Object> variables, Map<String, FragmentDefinition> fragmentsByName, GraphQLObjectType objectType) {",
      "38:         this.fragmentsByName = fragmentsByName;",
      "39:         this.graphQLSchema = graphQLSchema;",
      "40:         this.variables = variables;",
      "41:         this.objectType = objectType;",
      "",
      "[Added Lines]",
      "39:     public GraphQLContext getGraphQLContext() {",
      "40:         return graphQLContext;",
      "41:     }",
      "43:     private FieldCollectorParameters(Builder builder) {",
      "44:         this.fragmentsByName = builder.fragmentsByName;",
      "45:         this.graphQLSchema = builder.graphQLSchema;",
      "46:         this.variables = builder.variables;",
      "47:         this.objectType = builder.objectType;",
      "48:         this.graphQLContext = builder.graphQLContext;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "50:         private Map<String, FragmentDefinition> fragmentsByName;",
      "51:         private Map<String, Object> variables;",
      "52:         private GraphQLObjectType objectType;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "60:         private GraphQLContext graphQLContext = GraphQLContext.getDefault();",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "68:             return this;",
      "69:         }",
      "71:         public Builder fragments(Map<String, FragmentDefinition> fragmentsByName) {",
      "72:             this.fragmentsByName = fragmentsByName;",
      "73:             return this;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "79:         public Builder graphQLContext(GraphQLContext graphQLContext) {",
      "80:             this.graphQLContext = graphQLContext;",
      "81:             return this;",
      "82:         }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "81:         public FieldCollectorParameters build() {",
      "82:             Assert.assertNotNull(graphQLSchema, () -> \"You must provide a schema\");",
      "84:         }",
      "86:     }",
      "",
      "[Removed Lines]",
      "83:             return new FieldCollectorParameters(graphQLSchema, variables, fragmentsByName, objectType);",
      "87: }",
      "",
      "[Added Lines]",
      "96:             return new FieldCollectorParameters(this);",
      "100: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/execution/ConditionalNodes.java||src/main/java/graphql/execution/conditional/ConditionalNodes.java": [
      "File: src/main/java/graphql/execution/ConditionalNodes.java -> src/main/java/graphql/execution/conditional/ConditionalNodes.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import graphql.Assert;",
      "4: import graphql.Internal;",
      "5: import graphql.language.Directive;",
      "6: import graphql.language.NodeUtil;",
      "8: import java.util.List;",
      "9: import java.util.Map;",
      "",
      "[Removed Lines]",
      "1: package graphql.execution;",
      "",
      "[Added Lines]",
      "1: package graphql.execution.conditional;",
      "4: import graphql.GraphQLContext;",
      "6: import graphql.execution.CoercedVariables;",
      "7: import graphql.execution.ValuesResolver;",
      "9: import graphql.language.DirectivesContainer;",
      "11: import graphql.schema.GraphQLSchema;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "14: @Internal",
      "15: public class ConditionalNodes {",
      "17:     public boolean shouldInclude(Map<String, Object> variables, List<Directive> directives) {",
      "19:         if (directives.isEmpty()) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23:     public boolean shouldInclude(DirectivesContainer<?> element,",
      "24:                                  Map<String, Object> variables,",
      "25:                                  GraphQLSchema graphQLSchema,",
      "26:                                  GraphQLContext graphQLContext",
      "27:     ) {",
      "28:         return shouldInclude(variables, element.getDirectives());",
      "30:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "27:         return getDirectiveResult(variables, directives, IncludeDirective.getName(), true);",
      "28:     }",
      "31:         Directive foundDirective = NodeUtil.findNodeByName(directives, directiveName);",
      "32:         if (foundDirective != null) {",
      "33:             Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(SkipDirective.getArguments(), foundDirective.getArguments(), CoercedVariables.of(variables));",
      "34:             Object flag = argumentValues.get(\"if\");",
      "36:             return (Boolean) flag;",
      "37:         }",
      "38:         return defaultValue;",
      "39:     }",
      "",
      "[Removed Lines]",
      "30:     private boolean getDirectiveResult(Map<String, Object> variables, List<Directive> directives, String directiveName, boolean defaultValue) {",
      "35:             Assert.assertTrue(flag instanceof Boolean, () -> String.format(\"The '%s' directive MUST have a value for the 'if' argument\", directiveName));",
      "41: }",
      "",
      "[Added Lines]",
      "46:     private boolean getDirectiveResult(Map<String, Object> variables, List<Directive> directives, String",
      "47:             directiveName, boolean defaultValue) {",
      "52:             Assert.assertTrue(flag instanceof Boolean, \"The '%s' directive MUST have a value for the 'if' argument\", directiveName);",
      "58: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/introspection/GoodFaithIntrospection.java||src/main/java/graphql/introspection/GoodFaithIntrospection.java": [
      "File: src/main/java/graphql/introspection/GoodFaithIntrospection.java -> src/main/java/graphql/introspection/GoodFaithIntrospection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: import java.util.Optional;",
      "21: import java.util.concurrent.atomic.AtomicBoolean;",
      "23: import static graphql.schema.FieldCoordinates.coordinates;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23: import static graphql.normalized.ExecutableNormalizedOperationFactory.Options;",
      "24: import static graphql.normalized.ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "46:     public static final String GOOD_FAITH_INTROSPECTION_DISABLED = \"GOOD_FAITH_INTROSPECTION_DISABLED\";",
      "48:     private static final AtomicBoolean ENABLED_STATE = new AtomicBoolean(true);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:     public static final int GOOD_FAITH_MAX_FIELDS_COUNT = 500;",
      "58:     public static final int GOOD_FAITH_MAX_DEPTH_COUNT = 20;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "79:     public static Optional<ExecutionResult> checkIntrospection(ExecutionContext executionContext) {",
      "80:         if (isIntrospectionEnabled(executionContext.getGraphQLContext())) {",
      "82:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToENFs = operation.getCoordinatesToNormalizedFields();",
      "83:             for (Map.Entry<FieldCoordinates, Integer> entry : ALLOWED_FIELD_INSTANCES.entrySet()) {",
      "84:                 FieldCoordinates coordinates = entry.getKey();",
      "",
      "[Removed Lines]",
      "81:             ExecutableNormalizedOperation operation = executionContext.getNormalizedQueryTree().get();",
      "",
      "[Added Lines]",
      "91:             ExecutableNormalizedOperation operation = mkOperation(executionContext);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "93:         return Optional.empty();",
      "94:     }",
      "96:     private static boolean isIntrospectionEnabled(GraphQLContext graphQlContext) {",
      "97:         if (!isEnabledJvmWide()) {",
      "98:             return false;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114:     private static ExecutableNormalizedOperation mkOperation(ExecutionContext executionContext) {",
      "115:         Options options = Options.defaultOptions()",
      "116:                 .maxFieldsCount(GOOD_FAITH_MAX_FIELDS_COUNT)",
      "117:                 .maxChildrenDepth(GOOD_FAITH_MAX_DEPTH_COUNT)",
      "118:                 .locale(executionContext.getLocale())",
      "119:                 .graphQLContext(executionContext.getGraphQLContext());",
      "121:         return createExecutableNormalizedOperation(executionContext.getGraphQLSchema(),",
      "122:                 executionContext.getOperationDefinition(),",
      "123:                 executionContext.getFragmentsByName(),",
      "124:                 executionContext.getCoercedVariables(),",
      "125:                 options);",
      "127:     }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/introspection/Introspection.java||src/main/java/graphql/introspection/Introspection.java": [
      "File: src/main/java/graphql/introspection/Introspection.java -> src/main/java/graphql/introspection/Introspection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "116:     public static Optional<ExecutionResult> isIntrospectionSensible(MergedSelectionSet mergedSelectionSet, ExecutionContext executionContext) {",
      "117:         GraphQLContext graphQLContext = executionContext.getGraphQLContext();",
      "128:             }",
      "129:         }",
      "132:             return GoodFaithIntrospection.checkIntrospection(executionContext);",
      "133:         }",
      "134:         return Optional.empty();",
      "",
      "[Removed Lines]",
      "118:         MergedField schemaField = mergedSelectionSet.getSubField(SchemaMetaFieldDef.getName());",
      "119:         if (schemaField != null) {",
      "120:             if (!isIntrospectionEnabled(graphQLContext)) {",
      "121:                 return mkDisabledError(schemaField);",
      "122:             }",
      "123:         }",
      "124:         MergedField typeField = mergedSelectionSet.getSubField(TypeMetaFieldDef.getName());",
      "125:         if (typeField != null) {",
      "126:             if (!isIntrospectionEnabled(graphQLContext)) {",
      "127:                 return mkDisabledError(typeField);",
      "130:         if (schemaField != null || typeField != null)",
      "131:         {",
      "",
      "[Added Lines]",
      "119:         boolean isIntrospection = false;",
      "120:         for (String key : mergedSelectionSet.getKeys()) {",
      "121:             String fieldName = mergedSelectionSet.getSubField(key).getName();",
      "122:             if (fieldName.equals(SchemaMetaFieldDef.getName())",
      "123:                     || fieldName.equals(TypeMetaFieldDef.getName())) {",
      "124:                 if (!isIntrospectionEnabled(graphQLContext)) {",
      "125:                     return mkDisabledError(mergedSelectionSet.getSubField(key));",
      "126:                 }",
      "127:                 isIntrospection = true;",
      "128:                 break;",
      "131:         if (isIntrospection) {",
      "",
      "---------------"
    ],
    "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java": [
      "File: src/main/java/graphql/normalized/ExecutableNormalizedOperation.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import com.google.common.collect.ImmutableListMultimap;",
      "4: import graphql.Assert;",
      "6: import graphql.execution.MergedField;",
      "7: import graphql.execution.ResultPath;",
      "8: import graphql.language.Field;",
      "9: import graphql.language.OperationDefinition;",
      "10: import graphql.schema.FieldCoordinates;",
      "",
      "[Removed Lines]",
      "5: import graphql.Internal;",
      "",
      "[Added Lines]",
      "5: import graphql.PublicApi;",
      "8: import graphql.execution.directives.QueryDirectives;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "13: import java.util.List;",
      "14: import java.util.Map;",
      "17: public class ExecutableNormalizedOperation {",
      "18:     private final OperationDefinition.Operation operation;",
      "19:     private final String operationName;",
      "20:     private final List<ExecutableNormalizedField> topLevelFields;",
      "21:     private final ImmutableListMultimap<Field, ExecutableNormalizedField> fieldToNormalizedField;",
      "22:     private final Map<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField;",
      "23:     private final ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields;",
      "25:     public ExecutableNormalizedOperation(",
      "26:             OperationDefinition.Operation operation,",
      "",
      "[Removed Lines]",
      "16: @Internal",
      "",
      "[Added Lines]",
      "25: @PublicApi",
      "32:     private final Map<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives;",
      "34:     private final int operationFieldCount;",
      "35:     private final int operationDepth;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "28:             List<ExecutableNormalizedField> topLevelFields,",
      "29:             ImmutableListMultimap<Field, ExecutableNormalizedField> fieldToNormalizedField,",
      "30:             Map<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField,",
      "33:         this.operation = operation;",
      "34:         this.operationName = operationName;",
      "35:         this.topLevelFields = topLevelFields;",
      "36:         this.fieldToNormalizedField = fieldToNormalizedField;",
      "37:         this.normalizedFieldToMergedField = normalizedFieldToMergedField;",
      "38:         this.coordinatesToNormalizedFields = coordinatesToNormalizedFields;",
      "39:     }",
      "41:     public OperationDefinition.Operation getOperation() {",
      "42:         return operation;",
      "43:     }",
      "45:     public String getOperationName() {",
      "46:         return operationName;",
      "47:     }",
      "49:     public ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> getCoordinatesToNormalizedFields() {",
      "50:         return coordinatesToNormalizedFields;",
      "51:     }",
      "53:     public List<ExecutableNormalizedField> getTopLevelFields() {",
      "54:         return topLevelFields;",
      "55:     }",
      "62:     public ImmutableListMultimap<Field, ExecutableNormalizedField> getFieldToNormalizedField() {",
      "63:         return fieldToNormalizedField;",
      "64:     }",
      "66:     public List<ExecutableNormalizedField> getNormalizedFields(Field field) {",
      "67:         return fieldToNormalizedField.get(field);",
      "68:     }",
      "70:     public Map<ExecutableNormalizedField, MergedField> getNormalizedFieldToMergedField() {",
      "71:         return normalizedFieldToMergedField;",
      "72:     }",
      "74:     public MergedField getMergedField(ExecutableNormalizedField executableNormalizedField) {",
      "75:         return normalizedFieldToMergedField.get(executableNormalizedField);",
      "76:     }",
      "78:     public ExecutableNormalizedField getNormalizedField(MergedField mergedField, GraphQLFieldsContainer fieldsContainer, ResultPath resultPath) {",
      "79:         List<ExecutableNormalizedField> executableNormalizedFields = fieldToNormalizedField.get(mergedField.getSingleField());",
      "80:         List<String> keysOnlyPath = resultPath.getKeysOnly();",
      "",
      "[Removed Lines]",
      "31:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields",
      "32:     ) {",
      "",
      "[Added Lines]",
      "43:             Map<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives,",
      "44:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields,",
      "45:             int operationFieldCount,",
      "46:             int operationDepth) {",
      "52:         this.normalizedFieldToQueryDirectives = normalizedFieldToQueryDirectives;",
      "54:         this.operationFieldCount = operationFieldCount;",
      "55:         this.operationDepth = operationDepth;",
      "75:     public int getOperationFieldCount() {",
      "76:         return operationFieldCount;",
      "77:     }",
      "82:     public int getOperationDepth() {",
      "83:         return operationDepth;",
      "84:     }",
      "143:     public Map<ExecutableNormalizedField, QueryDirectives> getNormalizedFieldToQueryDirectives() {",
      "144:         return normalizedFieldToQueryDirectives;",
      "146:     }",
      "155:     public QueryDirectives getQueryDirectives(ExecutableNormalizedField executableNormalizedField) {",
      "156:         return normalizedFieldToQueryDirectives.get(executableNormalizedField);",
      "157:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "87:         }",
      "88:         return Assert.assertShouldNeverHappen(\"normalized field not found\");",
      "89:     }",
      "",
      "[Removed Lines]",
      "90: }",
      "",
      "[Added Lines]",
      "180: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java": [
      "File: src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: import com.google.common.collect.ImmutableListMultimap;",
      "5: import com.google.common.collect.ImmutableMap;",
      "6: import com.google.common.collect.ImmutableSet;",
      "8: import graphql.collect.ImmutableKit;",
      "9: import graphql.execution.CoercedVariables;",
      "11: import graphql.execution.MergedField;",
      "12: import graphql.execution.RawVariables;",
      "13: import graphql.execution.ValuesResolver;",
      "15: import graphql.introspection.Introspection;",
      "16: import graphql.language.Document;",
      "17: import graphql.language.Field;",
      "",
      "[Removed Lines]",
      "7: import graphql.Internal;",
      "10: import graphql.execution.ConditionalNodes;",
      "14: import graphql.execution.nextgen.Common;",
      "",
      "[Added Lines]",
      "7: import graphql.GraphQLContext;",
      "8: import graphql.PublicApi;",
      "10: import graphql.execution.AbortExecutionException;",
      "15: import graphql.execution.conditional.ConditionalNodes;",
      "16: import graphql.execution.directives.QueryDirectives;",
      "17: import graphql.execution.directives.QueryDirectivesImpl;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "27: import graphql.schema.GraphQLCompositeType;",
      "28: import graphql.schema.GraphQLFieldDefinition;",
      "29: import graphql.schema.GraphQLInterfaceType;",
      "30: import graphql.schema.GraphQLObjectType;",
      "31: import graphql.schema.GraphQLSchema;",
      "32: import graphql.schema.GraphQLType;",
      "34: import graphql.schema.GraphQLUnionType;",
      "35: import graphql.schema.GraphQLUnmodifiedType;",
      "36: import org.jetbrains.annotations.Nullable;",
      "38: import java.util.ArrayList;",
      "39: import java.util.Collection;",
      "40: import java.util.LinkedHashMap;",
      "41: import java.util.List;",
      "42: import java.util.Map;",
      "43: import java.util.Set;",
      "45: import static graphql.Assert.assertNotNull;",
      "46: import static graphql.Assert.assertShouldNeverHappen;",
      "47: import static graphql.collect.ImmutableKit.map;",
      "49: import static graphql.schema.GraphQLTypeUtil.unwrapAll;",
      "50: import static graphql.util.FpKit.filterSet;",
      "51: import static graphql.util.FpKit.groupingBy;",
      "",
      "[Removed Lines]",
      "33: import graphql.schema.GraphQLTypeUtil;",
      "48: import static graphql.execution.MergedField.newMergedField;",
      "",
      "[Added Lines]",
      "33: import graphql.schema.GraphQLNamedOutputType;",
      "39: import graphql.schema.impl.SchemaUtil;",
      "46: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "53: import static java.util.Collections.singleton;",
      "54: import static java.util.Collections.singletonList;",
      "57: public class ExecutableNormalizedOperationFactory {",
      "65:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
      "67:     }",
      "69:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(GraphQLSchema graphQLSchema,",
      "70:                                                                                     OperationDefinition operationDefinition,",
      "71:                                                                                     Map<String, FragmentDefinition> fragments,",
      "72:                                                                                     CoercedVariables coercedVariableValues) {",
      "74:     }",
      "76:     public static ExecutableNormalizedOperation createExecutableNormalizedOperationWithRawVariables(GraphQLSchema graphQLSchema,",
      "77:                                                                                                     Document document,",
      "78:                                                                                                     String operationName,",
      "79:                                                                                                     RawVariables rawVariables) {",
      "82:     }",
      "94:     }",
      "147:     }",
      "173:         }",
      "181:         }",
      "188:         }",
      "209:         }",
      "221:         }",
      "227:             }",
      "236:         }",
      "250:         }",
      "285:                 }",
      "288:                 }",
      "293:             }",
      "294:         }",
      "333:         }",
      "340:         }",
      "345:         }",
      "350:         }",
      "368:             }",
      "369:         }",
      "389:         }",
      "400:         }",
      "420:         }",
      "428:         }",
      "440:         }",
      "444:         }",
      "455:         }",
      "468:             }",
      "469:         }",
      "484:         }",
      "485:     }",
      "",
      "[Removed Lines]",
      "56: @Internal",
      "59:     private final ConditionalNodes conditionalNodes = new ConditionalNodes();",
      "61:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(GraphQLSchema graphQLSchema,",
      "62:                                                                                     Document document,",
      "63:                                                                                     String operationName,",
      "64:                                                                                     CoercedVariables coercedVariableValues) {",
      "66:         return new ExecutableNormalizedOperationFactory().createNormalizedQueryImpl(graphQLSchema, getOperationResult.operationDefinition, getOperationResult.fragmentsByName, coercedVariableValues, null);",
      "73:         return new ExecutableNormalizedOperationFactory().createNormalizedQueryImpl(graphQLSchema, operationDefinition, fragments, coercedVariableValues, null);",
      "80:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
      "81:         return new ExecutableNormalizedOperationFactory().createExecutableNormalizedOperationImplWithRawVariables(graphQLSchema, getOperationResult.operationDefinition, getOperationResult.fragmentsByName, rawVariables);",
      "84:     private ExecutableNormalizedOperation createExecutableNormalizedOperationImplWithRawVariables(GraphQLSchema graphQLSchema,",
      "85:                                                                                                   OperationDefinition operationDefinition,",
      "86:                                                                                                   Map<String, FragmentDefinition> fragments,",
      "87:                                                                                                   RawVariables rawVariables",
      "88:     ) {",
      "90:         List<VariableDefinition> variableDefinitions = operationDefinition.getVariableDefinitions();",
      "91:         CoercedVariables coercedVariableValues = ValuesResolver.coerceVariableValues(graphQLSchema, variableDefinitions, rawVariables);",
      "92:         Map<String, NormalizedInputValue> normalizedVariableValues = ValuesResolver.getNormalizedVariableValues(graphQLSchema, variableDefinitions, rawVariables);",
      "93:         return createNormalizedQueryImpl(graphQLSchema, operationDefinition, fragments, coercedVariableValues, normalizedVariableValues);",
      "99:     private ExecutableNormalizedOperation createNormalizedQueryImpl(GraphQLSchema graphQLSchema,",
      "100:                                                                     OperationDefinition operationDefinition,",
      "101:                                                                     Map<String, FragmentDefinition> fragments,",
      "102:                                                                     CoercedVariables coercedVariableValues,",
      "103:                                                                     @Nullable Map<String, NormalizedInputValue> normalizedVariableValues) {",
      "104:         FieldCollectorNormalizedQueryParams parameters = FieldCollectorNormalizedQueryParams",
      "105:                 .newParameters()",
      "106:                 .fragments(fragments)",
      "107:                 .schema(graphQLSchema)",
      "108:                 .coercedVariables(coercedVariableValues.toMap())",
      "109:                 .normalizedVariables(normalizedVariableValues)",
      "110:                 .build();",
      "112:         GraphQLObjectType rootType = Common.getOperationRootType(graphQLSchema, operationDefinition);",
      "114:         CollectNFResult collectFromOperationResult = collectFromOperation(parameters, operationDefinition, rootType);",
      "116:         ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField = ImmutableListMultimap.builder();",
      "117:         ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField = ImmutableMap.builder();",
      "118:         ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
      "120:         for (ExecutableNormalizedField topLevel : collectFromOperationResult.children) {",
      "121:             ImmutableList<FieldAndAstParent> mergedField = collectFromOperationResult.normalizedFieldToAstFields.get(topLevel);",
      "122:             normalizedFieldToMergedField.put(topLevel, newMergedField(map(mergedField, fieldAndAstParent -> fieldAndAstParent.field)).build());",
      "123:             updateFieldToNFMap(topLevel, mergedField, fieldToNormalizedField);",
      "124:             updateCoordinatedToNFMap(coordinatesToNormalizedFields, topLevel);",
      "126:             buildFieldWithChildren(topLevel,",
      "127:                     mergedField,",
      "128:                     parameters,",
      "129:                     fieldToNormalizedField,",
      "130:                     normalizedFieldToMergedField,",
      "131:                     coordinatesToNormalizedFields,",
      "132:                     1);",
      "134:         }",
      "135:         for (FieldCollectorNormalizedQueryParams.PossibleMerger possibleMerger : parameters.possibleMergerList) {",
      "136:             List<ExecutableNormalizedField> childrenWithSameResultKey = possibleMerger.parent.getChildrenWithSameResultKey(possibleMerger.resultKey);",
      "137:             ENFMerger.merge(possibleMerger.parent, childrenWithSameResultKey, graphQLSchema);",
      "138:         }",
      "139:         return new ExecutableNormalizedOperation(",
      "140:                 operationDefinition.getOperation(),",
      "141:                 operationDefinition.getName(),",
      "142:                 new ArrayList<>(collectFromOperationResult.children),",
      "143:                 fieldToNormalizedField.build(),",
      "144:                 normalizedFieldToMergedField.build(),",
      "145:                 coordinatesToNormalizedFields.build()",
      "146:         );",
      "150:     private void buildFieldWithChildren(ExecutableNormalizedField field,",
      "151:                                         ImmutableList<FieldAndAstParent> mergedField,",
      "152:                                         FieldCollectorNormalizedQueryParams fieldCollectorNormalizedQueryParams,",
      "153:                                         ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldNormalizedField,",
      "154:                                         ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField,",
      "155:                                         ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields,",
      "156:                                         int curLevel) {",
      "157:         CollectNFResult nextLevel = collectFromMergedField(fieldCollectorNormalizedQueryParams, field, mergedField, curLevel + 1);",
      "159:         for (ExecutableNormalizedField child : nextLevel.children) {",
      "160:             field.addChild(child);",
      "161:             ImmutableList<FieldAndAstParent> mergedFieldForChild = nextLevel.normalizedFieldToAstFields.get(child);",
      "162:             normalizedFieldToMergedField.put(child, newMergedField(map(mergedFieldForChild, fieldAndAstParent -> fieldAndAstParent.field)).build());",
      "163:             updateFieldToNFMap(child, mergedFieldForChild, fieldNormalizedField);",
      "164:             updateCoordinatedToNFMap(coordinatesToNormalizedFields, child);",
      "166:             buildFieldWithChildren(child,",
      "167:                     mergedFieldForChild,",
      "168:                     fieldCollectorNormalizedQueryParams,",
      "169:                     fieldNormalizedField,",
      "170:                     normalizedFieldToMergedField,",
      "171:                     coordinatesToNormalizedFields,",
      "172:                     curLevel + 1);",
      "174:     }",
      "176:     private void updateFieldToNFMap(ExecutableNormalizedField executableNormalizedField,",
      "177:                                     ImmutableList<FieldAndAstParent> mergedField,",
      "178:                                     ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField) {",
      "179:         for (FieldAndAstParent astField : mergedField) {",
      "180:             fieldToNormalizedField.put(astField.field, executableNormalizedField);",
      "182:     }",
      "184:     private void updateCoordinatedToNFMap(ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields, ExecutableNormalizedField topLevel) {",
      "185:         for (String objectType : topLevel.getObjectTypeNames()) {",
      "186:             FieldCoordinates coordinates = FieldCoordinates.coordinates(objectType, topLevel.getFieldName());",
      "187:             coordinatesToNormalizedFields.put(coordinates, topLevel);",
      "189:     }",
      "191:     private static class FieldAndAstParent {",
      "192:         final Field field;",
      "193:         final GraphQLCompositeType astParentType;",
      "195:         private FieldAndAstParent(Field field, GraphQLCompositeType astParentType) {",
      "196:             this.field = field;",
      "197:             this.astParentType = astParentType;",
      "198:         }",
      "199:     }",
      "202:     public static class CollectNFResult {",
      "203:         private final Collection<ExecutableNormalizedField> children;",
      "204:         private final ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields;",
      "206:         public CollectNFResult(Collection<ExecutableNormalizedField> children, ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields) {",
      "207:             this.children = children;",
      "208:             this.normalizedFieldToAstFields = normalizedFieldToAstFields;",
      "210:     }",
      "213:     public CollectNFResult collectFromMergedField(FieldCollectorNormalizedQueryParams parameters,",
      "214:                                                   ExecutableNormalizedField executableNormalizedField,",
      "215:                                                   ImmutableList<FieldAndAstParent> mergedField,",
      "216:                                                   int level) {",
      "217:         List<GraphQLFieldDefinition> fieldDefs = executableNormalizedField.getFieldDefinitions(parameters.getGraphQLSchema());",
      "218:         Set<GraphQLObjectType> possibleObjects = resolvePossibleObjects(fieldDefs, parameters.getGraphQLSchema());",
      "219:         if (possibleObjects.isEmpty()) {",
      "220:             return new CollectNFResult(ImmutableKit.emptyList(), ImmutableListMultimap.of());",
      "223:         List<CollectedField> collectedFields = new ArrayList<>();",
      "224:         for (FieldAndAstParent fieldAndAstParent : mergedField) {",
      "225:             if (fieldAndAstParent.field.getSelectionSet() == null) {",
      "226:                 continue;",
      "228:             GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(parameters.getGraphQLSchema(), fieldAndAstParent.astParentType, fieldAndAstParent.field.getName());",
      "229:             GraphQLUnmodifiedType astParentType = unwrapAll(fieldDefinition.getType());",
      "230:             this.collectFromSelectionSet(parameters,",
      "231:                     fieldAndAstParent.field.getSelectionSet(),",
      "232:                     collectedFields,",
      "233:                     (GraphQLCompositeType) astParentType,",
      "234:                     possibleObjects",
      "235:             );",
      "237:         Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
      "238:         ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
      "239:         ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
      "241:         createNFs(resultNFs, parameters, fieldsByName, normalizedFieldToAstFields, level, executableNormalizedField);",
      "243:         return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
      "244:     }",
      "246:     private Map<String, List<CollectedField>> fieldsByResultKey(List<CollectedField> collectedFields) {",
      "247:         Map<String, List<CollectedField>> fieldsByName = new LinkedHashMap<>();",
      "248:         for (CollectedField collectedField : collectedFields) {",
      "249:             fieldsByName.computeIfAbsent(collectedField.field.getResultKey(), ignored -> new ArrayList<>()).add(collectedField);",
      "251:         return fieldsByName;",
      "252:     }",
      "254:     public CollectNFResult collectFromOperation(FieldCollectorNormalizedQueryParams parameters,",
      "255:                                                 OperationDefinition operationDefinition,",
      "256:                                                 GraphQLObjectType rootType) {",
      "259:         Set<GraphQLObjectType> possibleObjects = ImmutableSet.of(rootType);",
      "260:         List<CollectedField> collectedFields = new ArrayList<>();",
      "261:         collectFromSelectionSet(parameters, operationDefinition.getSelectionSet(), collectedFields, rootType, possibleObjects);",
      "263:         Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
      "264:         ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
      "265:         ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
      "267:         createNFs(resultNFs, parameters, fieldsByName, normalizedFieldToAstFields, 1, null);",
      "269:         return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
      "270:     }",
      "272:     private void createNFs(ImmutableList.Builder<ExecutableNormalizedField> nfListBuilder,",
      "273:                            FieldCollectorNormalizedQueryParams parameters,",
      "274:                            Map<String, List<CollectedField>> fieldsByName,",
      "275:                            ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields,",
      "276:                            int level,",
      "277:                            ExecutableNormalizedField parent) {",
      "278:         for (String resultKey : fieldsByName.keySet()) {",
      "279:             List<CollectedField> fieldsWithSameResultKey = fieldsByName.get(resultKey);",
      "280:             List<CollectedFieldGroup> commonParentsGroups = groupByCommonParents(fieldsWithSameResultKey);",
      "281:             for (CollectedFieldGroup fieldGroup : commonParentsGroups) {",
      "282:                 ExecutableNormalizedField nf = createNF(parameters, fieldGroup, level, parent);",
      "283:                 if (nf == null) {",
      "284:                     continue;",
      "286:                 for (CollectedField collectedField : fieldGroup.fields) {",
      "287:                     normalizedFieldToAstFields.put(nf, new FieldAndAstParent(collectedField.field, collectedField.astTypeCondition));",
      "289:                 nfListBuilder.add(nf);",
      "290:             }",
      "291:             if (commonParentsGroups.size() > 1) {",
      "292:                 parameters.addPossibleMergers(parent, resultKey);",
      "295:     }",
      "297:     private ExecutableNormalizedField createNF(FieldCollectorNormalizedQueryParams parameters,",
      "298:                                                CollectedFieldGroup collectedFieldGroup,",
      "299:                                                int level,",
      "300:                                                ExecutableNormalizedField parent) {",
      "301:         Field field;",
      "302:         Set<GraphQLObjectType> objectTypes = collectedFieldGroup.objectTypes;",
      "303:         field = collectedFieldGroup.fields.iterator().next().field;",
      "304:         String fieldName = field.getName();",
      "305:         GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(parameters.getGraphQLSchema(), objectTypes.iterator().next(), fieldName);",
      "307:         Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(fieldDefinition.getArguments(), field.getArguments(),CoercedVariables.of(parameters.getCoercedVariableValues()));",
      "308:         Map<String, NormalizedInputValue> normalizedArgumentValues = null;",
      "309:         if (parameters.getNormalizedVariableValues() != null) {",
      "310:             normalizedArgumentValues = ValuesResolver.getNormalizedArgumentValues(fieldDefinition.getArguments(), field.getArguments(), parameters.getNormalizedVariableValues());",
      "311:         }",
      "312:         ImmutableList<String> objectTypeNames = map(objectTypes, GraphQLObjectType::getName);",
      "314:         return ExecutableNormalizedField.newNormalizedField()",
      "315:                 .alias(field.getAlias())",
      "316:                 .resolvedArguments(argumentValues)",
      "317:                 .normalizedArguments(normalizedArgumentValues)",
      "318:                 .astArguments(field.getArguments())",
      "319:                 .objectTypeNames(objectTypeNames)",
      "320:                 .fieldName(fieldName)",
      "321:                 .level(level)",
      "322:                 .parent(parent)",
      "323:                 .build();",
      "324:     }",
      "326:     private static class CollectedFieldGroup {",
      "327:         Set<GraphQLObjectType> objectTypes;",
      "328:         Set<CollectedField> fields;",
      "330:         public CollectedFieldGroup(Set<CollectedField> fields, Set<GraphQLObjectType> objectTypes) {",
      "331:             this.fields = fields;",
      "332:             this.objectTypes = objectTypes;",
      "334:     }",
      "336:     private List<CollectedFieldGroup> groupByCommonParents(Collection<CollectedField> fields) {",
      "337:         ImmutableSet.Builder<GraphQLObjectType> objectTypes = ImmutableSet.builder();",
      "338:         for (CollectedField collectedField : fields) {",
      "339:             objectTypes.addAll(collectedField.objectTypes);",
      "341:         Set<GraphQLObjectType> allRelevantObjects = objectTypes.build();",
      "342:         Map<GraphQLType, ImmutableList<CollectedField>> groupByAstParent = groupingBy(fields, fieldAndType -> fieldAndType.astTypeCondition);",
      "343:         if (groupByAstParent.size() == 1) {",
      "344:             return singletonList(new CollectedFieldGroup(ImmutableSet.copyOf(fields), allRelevantObjects));",
      "346:         ImmutableList.Builder<CollectedFieldGroup> result = ImmutableList.builder();",
      "347:         for (GraphQLObjectType objectType : allRelevantObjects) {",
      "348:             Set<CollectedField> relevantFields = filterSet(fields, field -> field.objectTypes.contains(objectType));",
      "349:             result.add(new CollectedFieldGroup(relevantFields, singleton(objectType)));",
      "351:         return result.build();",
      "352:     }",
      "355:     private void collectFromSelectionSet(FieldCollectorNormalizedQueryParams parameters,",
      "356:                                          SelectionSet selectionSet,",
      "357:                                          List<CollectedField> result,",
      "358:                                          GraphQLCompositeType astTypeCondition,",
      "359:                                          Set<GraphQLObjectType> possibleObjects",
      "360:     ) {",
      "361:         for (Selection<?> selection : selectionSet.getSelections()) {",
      "362:             if (selection instanceof Field) {",
      "363:                 collectField(parameters, result, (Field) selection, possibleObjects, astTypeCondition);",
      "364:             } else if (selection instanceof InlineFragment) {",
      "365:                 collectInlineFragment(parameters, result, (InlineFragment) selection, possibleObjects, astTypeCondition);",
      "366:             } else if (selection instanceof FragmentSpread) {",
      "367:                 collectFragmentSpread(parameters, result, (FragmentSpread) selection, possibleObjects, astTypeCondition);",
      "370:     }",
      "372:     private static class CollectedField {",
      "373:         Field field;",
      "374:         Set<GraphQLObjectType> objectTypes;",
      "375:         GraphQLCompositeType astTypeCondition;",
      "377:         public CollectedField(Field field, Set<GraphQLObjectType> objectTypes, GraphQLCompositeType astTypeCondition) {",
      "378:             this.field = field;",
      "379:             this.objectTypes = objectTypes;",
      "380:             this.astTypeCondition = astTypeCondition;",
      "381:         }",
      "383:         public boolean isAbstract() {",
      "384:             return GraphQLTypeUtil.isInterfaceOrUnion(astTypeCondition);",
      "385:         }",
      "387:         public boolean isConcrete() {",
      "388:             return GraphQLTypeUtil.isObjectType(astTypeCondition);",
      "390:     }",
      "392:     private void collectFragmentSpread(FieldCollectorNormalizedQueryParams parameters,",
      "393:                                        List<CollectedField> result,",
      "394:                                        FragmentSpread fragmentSpread,",
      "395:                                        Set<GraphQLObjectType> possibleObjects,",
      "396:                                        GraphQLCompositeType astTypeCondition",
      "397:     ) {",
      "398:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), fragmentSpread.getDirectives())) {",
      "399:             return;",
      "401:         FragmentDefinition fragmentDefinition = assertNotNull(parameters.getFragmentsByName().get(fragmentSpread.getName()));",
      "403:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), fragmentDefinition.getDirectives())) {",
      "404:             return;",
      "405:         }",
      "406:         GraphQLCompositeType newAstTypeCondition = (GraphQLCompositeType) assertNotNull(parameters.getGraphQLSchema().getType(fragmentDefinition.getTypeCondition().getName()));",
      "407:         Set<GraphQLObjectType> newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition, parameters.getGraphQLSchema());",
      "408:         collectFromSelectionSet(parameters, fragmentDefinition.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
      "409:     }",
      "412:     private void collectInlineFragment(FieldCollectorNormalizedQueryParams parameters,",
      "413:                                        List<CollectedField> result,",
      "414:                                        InlineFragment inlineFragment,",
      "415:                                        Set<GraphQLObjectType> possibleObjects,",
      "416:                                        GraphQLCompositeType astTypeCondition",
      "417:     ) {",
      "418:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), inlineFragment.getDirectives())) {",
      "419:             return;",
      "421:         Set<GraphQLObjectType> newPossibleObjects = possibleObjects;",
      "422:         GraphQLCompositeType newAstTypeCondition = astTypeCondition;",
      "424:         if (inlineFragment.getTypeCondition() != null) {",
      "425:             newAstTypeCondition = (GraphQLCompositeType) parameters.getGraphQLSchema().getType(inlineFragment.getTypeCondition().getName());",
      "426:             newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition, parameters.getGraphQLSchema());",
      "429:         collectFromSelectionSet(parameters, inlineFragment.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
      "430:     }",
      "432:     private void collectField(FieldCollectorNormalizedQueryParams parameters,",
      "433:                               List<CollectedField> result,",
      "434:                               Field field,",
      "435:                               Set<GraphQLObjectType> possibleObjectTypes,",
      "436:                               GraphQLCompositeType astTypeCondition",
      "437:     ) {",
      "438:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), field.getDirectives())) {",
      "439:             return;",
      "442:         if (possibleObjectTypes.isEmpty()) {",
      "443:             return;",
      "445:         result.add(new CollectedField(field, possibleObjectTypes, astTypeCondition));",
      "446:     }",
      "448:     private Set<GraphQLObjectType> narrowDownPossibleObjects(Set<GraphQLObjectType> currentOnes,",
      "449:                                                              GraphQLCompositeType typeCondition,",
      "450:                                                              GraphQLSchema graphQLSchema) {",
      "452:         ImmutableSet<GraphQLObjectType> resolvedTypeCondition = resolvePossibleObjects(typeCondition, graphQLSchema);",
      "453:         if (currentOnes.isEmpty()) {",
      "454:             return resolvedTypeCondition;",
      "458:         return intersection(currentOnes, resolvedTypeCondition);",
      "459:     }",
      "461:     private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(List<GraphQLFieldDefinition> defs, GraphQLSchema graphQLSchema) {",
      "462:         ImmutableSet.Builder<GraphQLObjectType> builder = ImmutableSet.builder();",
      "464:         for (GraphQLFieldDefinition def : defs) {",
      "465:             GraphQLUnmodifiedType outputType = unwrapAll(def.getType());",
      "466:             if (outputType instanceof GraphQLCompositeType) {",
      "467:                 builder.addAll(resolvePossibleObjects((GraphQLCompositeType) outputType, graphQLSchema));",
      "471:         return builder.build();",
      "472:     }",
      "474:     private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(GraphQLCompositeType type, GraphQLSchema graphQLSchema) {",
      "475:         if (type instanceof GraphQLObjectType) {",
      "476:             return ImmutableSet.of((GraphQLObjectType) type);",
      "477:         } else if (type instanceof GraphQLInterfaceType) {",
      "478:             return ImmutableSet.copyOf(graphQLSchema.getImplementations((GraphQLInterfaceType) type));",
      "479:         } else if (type instanceof GraphQLUnionType) {",
      "480:             List types = ((GraphQLUnionType) type).getTypes();",
      "481:             return ImmutableSet.copyOf(types);",
      "482:         } else {",
      "483:             return assertShouldNeverHappen();",
      "486: }",
      "",
      "[Added Lines]",
      "64: @PublicApi",
      "67:     public static class Options {",
      "68:         private final GraphQLContext graphQLContext;",
      "69:         private final Locale locale;",
      "70:         private final int maxChildrenDepth;",
      "71:         private final int maxFieldsCount;",
      "73:         private Options(GraphQLContext graphQLContext,",
      "74:                         Locale locale,",
      "75:                         int maxChildrenDepth,",
      "76:                         int maxFieldsCount) {",
      "77:             this.graphQLContext = graphQLContext;",
      "78:             this.locale = locale;",
      "79:             this.maxChildrenDepth = maxChildrenDepth;",
      "80:             this.maxFieldsCount = maxFieldsCount;",
      "81:         }",
      "83:         public static Options defaultOptions() {",
      "84:             return new Options(",
      "85:                     GraphQLContext.getDefault(),",
      "86:                     Locale.getDefault(),",
      "87:                     Integer.MAX_VALUE,",
      "88:                     Integer.MAX_VALUE);",
      "89:         }",
      "100:         public Options locale(Locale locale) {",
      "101:             return new Options(this.graphQLContext, locale, this.maxChildrenDepth, this.maxFieldsCount);",
      "102:         }",
      "112:         public Options graphQLContext(GraphQLContext graphQLContext) {",
      "113:             return new Options(graphQLContext, this.locale, this.maxChildrenDepth, this.maxFieldsCount);",
      "114:         }",
      "124:         public Options maxChildrenDepth(int maxChildrenDepth) {",
      "125:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, this.maxFieldsCount);",
      "126:         }",
      "136:         public Options maxFieldsCount(int maxFieldsCount) {",
      "137:             return new Options(this.graphQLContext, this.locale, this.maxChildrenDepth, maxFieldsCount);",
      "138:         }",
      "145:         public GraphQLContext getGraphQLContext() {",
      "146:             return graphQLContext;",
      "147:         }",
      "154:         public Locale getLocale() {",
      "155:             return locale;",
      "156:         }",
      "163:         public int getMaxChildrenDepth() {",
      "164:             return maxChildrenDepth;",
      "165:         }",
      "167:         public int getMaxFieldsCount() {",
      "168:             return maxFieldsCount;",
      "169:         }",
      "171:     }",
      "173:     private static final ConditionalNodes conditionalNodes = new ConditionalNodes();",
      "175:     private ExecutableNormalizedOperationFactory() {",
      "177:     }",
      "190:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(",
      "191:             GraphQLSchema graphQLSchema,",
      "192:             Document document,",
      "193:             String operationName,",
      "194:             CoercedVariables coercedVariableValues",
      "195:     ) {",
      "196:         return createExecutableNormalizedOperation(",
      "197:                 graphQLSchema,",
      "198:                 document,",
      "199:                 operationName,",
      "200:                 coercedVariableValues,",
      "201:                 Options.defaultOptions());",
      "202:     }",
      "216:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(",
      "217:             GraphQLSchema graphQLSchema,",
      "218:             Document document,",
      "219:             String operationName,",
      "220:             CoercedVariables coercedVariableValues,",
      "221:             Options options",
      "222:     ) {",
      "225:         return new ExecutableNormalizedOperationFactoryImpl(",
      "226:                 graphQLSchema,",
      "227:                 getOperationResult.operationDefinition,",
      "228:                 getOperationResult.fragmentsByName,",
      "229:                 coercedVariableValues,",
      "230:                 null,",
      "231:                 options",
      "232:         ).createNormalizedQueryImpl();",
      "250:         return createExecutableNormalizedOperation(graphQLSchema,",
      "251:                 operationDefinition,",
      "252:                 fragments,",
      "253:                 coercedVariableValues,",
      "254:                 Options.defaultOptions());",
      "268:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(GraphQLSchema graphQLSchema,",
      "269:                                                                                     OperationDefinition operationDefinition,",
      "270:                                                                                     Map<String, FragmentDefinition> fragments,",
      "271:                                                                                     CoercedVariables coercedVariableValues,",
      "272:                                                                                     Options options) {",
      "273:         return new ExecutableNormalizedOperationFactoryImpl(",
      "274:                 graphQLSchema,",
      "275:                 operationDefinition,",
      "276:                 fragments,",
      "277:                 coercedVariableValues,",
      "278:                 null,",
      "279:                 options",
      "280:         ).createNormalizedQueryImpl();",
      "281:     }",
      "298:         return createExecutableNormalizedOperationWithRawVariables(graphQLSchema,",
      "299:                 document,",
      "300:                 operationName,",
      "301:                 rawVariables,",
      "302:                 Options.defaultOptions());",
      "319:     public static ExecutableNormalizedOperation createExecutableNormalizedOperationWithRawVariables(",
      "320:             GraphQLSchema graphQLSchema,",
      "321:             Document document,",
      "322:             String operationName,",
      "323:             RawVariables rawVariables,",
      "324:             GraphQLContext graphQLContext,",
      "325:             Locale locale",
      "326:     ) {",
      "327:         return createExecutableNormalizedOperationWithRawVariables(",
      "328:                 graphQLSchema,",
      "329:                 document,",
      "330:                 operationName,",
      "331:                 rawVariables,",
      "332:                 Options.defaultOptions().graphQLContext(graphQLContext).locale(locale));",
      "348:     public static ExecutableNormalizedOperation createExecutableNormalizedOperationWithRawVariables(GraphQLSchema graphQLSchema,",
      "349:                                                                                                     Document document,",
      "350:                                                                                                     String operationName,",
      "351:                                                                                                     RawVariables rawVariables,",
      "352:                                                                                                     Options options) {",
      "353:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
      "354:         OperationDefinition operationDefinition = getOperationResult.operationDefinition;",
      "356:         List<VariableDefinition> variableDefinitions = operationDefinition.getVariableDefinitions();",
      "357:         CoercedVariables coercedVariableValues = ValuesResolver.coerceVariableValues(graphQLSchema,",
      "358:                 variableDefinitions,",
      "359:                 rawVariables);",
      "360:         Map<String, NormalizedInputValue> normalizedVariableValues = ValuesResolver.getNormalizedVariableValues(graphQLSchema,",
      "361:                 variableDefinitions,",
      "362:                 rawVariables);",
      "364:         return new ExecutableNormalizedOperationFactoryImpl(",
      "365:                 graphQLSchema,",
      "366:                 operationDefinition,",
      "367:                 getOperationResult.fragmentsByName,",
      "368:                 coercedVariableValues,",
      "369:                 normalizedVariableValues,",
      "370:                 options",
      "371:         ).createNormalizedQueryImpl();",
      "375:     private static class ExecutableNormalizedOperationFactoryImpl {",
      "376:         private final GraphQLSchema graphQLSchema;",
      "377:         private final OperationDefinition operationDefinition;",
      "378:         private final Map<String, FragmentDefinition> fragments;",
      "379:         private final CoercedVariables coercedVariableValues;",
      "380:         private final @Nullable Map<String, NormalizedInputValue> normalizedVariableValues;",
      "381:         private final Options options;",
      "383:         private final List<PossibleMerger> possibleMergerList = new ArrayList<>();",
      "385:         private final ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField = ImmutableListMultimap.builder();",
      "386:         private final ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField = ImmutableMap.builder();",
      "387:         private final ImmutableMap.Builder<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives = ImmutableMap.builder();",
      "388:         private final ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
      "389:         private int fieldCount = 0;",
      "390:         private int maxDepthSeen = 0;",
      "392:         private ExecutableNormalizedOperationFactoryImpl(",
      "393:                 GraphQLSchema graphQLSchema,",
      "394:                 OperationDefinition operationDefinition,",
      "395:                 Map<String, FragmentDefinition> fragments,",
      "396:                 CoercedVariables coercedVariableValues,",
      "397:                 @Nullable Map<String, NormalizedInputValue> normalizedVariableValues,",
      "398:                 Options options",
      "399:         ) {",
      "400:             this.graphQLSchema = graphQLSchema;",
      "401:             this.operationDefinition = operationDefinition;",
      "402:             this.fragments = fragments;",
      "403:             this.coercedVariableValues = coercedVariableValues;",
      "404:             this.normalizedVariableValues = normalizedVariableValues;",
      "405:             this.options = options;",
      "411:         private ExecutableNormalizedOperation createNormalizedQueryImpl() {",
      "412:             GraphQLObjectType rootType = SchemaUtil.getOperationRootType(graphQLSchema, operationDefinition);",
      "414:             CollectNFResult collectFromOperationResult = collectFromOperation(rootType);",
      "416:             for (ExecutableNormalizedField topLevel : collectFromOperationResult.children) {",
      "417:                 ImmutableList<FieldAndAstParent> fieldAndAstParents = collectFromOperationResult.normalizedFieldToAstFields.get(topLevel);",
      "418:                 MergedField mergedField = newMergedField(fieldAndAstParents);",
      "420:                 captureMergedField(topLevel, mergedField);",
      "422:                 updateFieldToNFMap(topLevel, fieldAndAstParents);",
      "423:                 updateCoordinatedToNFMap(topLevel);",
      "425:                 int depthSeen = buildFieldWithChildren(",
      "426:                         topLevel,",
      "427:                         fieldAndAstParents,",
      "428:                         1);",
      "429:                 maxDepthSeen = Math.max(maxDepthSeen,depthSeen);",
      "430:             }",
      "432:             for (PossibleMerger possibleMerger : possibleMergerList) {",
      "433:                 List<ExecutableNormalizedField> childrenWithSameResultKey = possibleMerger.parent.getChildrenWithSameResultKey(possibleMerger.resultKey);",
      "434:                 ENFMerger.merge(possibleMerger.parent, childrenWithSameResultKey, graphQLSchema);",
      "435:             }",
      "436:             return new ExecutableNormalizedOperation(",
      "437:                     operationDefinition.getOperation(),",
      "438:                     operationDefinition.getName(),",
      "439:                     new ArrayList<>(collectFromOperationResult.children),",
      "440:                     fieldToNormalizedField.build(),",
      "441:                     normalizedFieldToMergedField.build(),",
      "442:                     normalizedFieldToQueryDirectives.build(),",
      "443:                     coordinatesToNormalizedFields.build(),",
      "444:                     fieldCount,",
      "445:                     maxDepthSeen",
      "446:             );",
      "449:         private void captureMergedField(ExecutableNormalizedField enf, MergedField mergedFld) {",
      "451:             QueryDirectives queryDirectives = new QueryDirectivesImpl(mergedFld, graphQLSchema, coercedVariableValues.toMap());",
      "452:             normalizedFieldToQueryDirectives.put(enf, queryDirectives);",
      "453:             normalizedFieldToMergedField.put(enf, mergedFld);",
      "456:         private int buildFieldWithChildren(ExecutableNormalizedField executableNormalizedField,",
      "457:                                            ImmutableList<FieldAndAstParent> fieldAndAstParents,",
      "458:                                            int curLevel) {",
      "459:             checkMaxDepthExceeded(curLevel);",
      "461:             CollectNFResult nextLevel = collectFromMergedField(executableNormalizedField, fieldAndAstParents, curLevel + 1);",
      "463:             int maxDepthSeen = curLevel;",
      "464:             for (ExecutableNormalizedField childENF : nextLevel.children) {",
      "465:                 executableNormalizedField.addChild(childENF);",
      "466:                 ImmutableList<FieldAndAstParent> childFieldAndAstParents = nextLevel.normalizedFieldToAstFields.get(childENF);",
      "468:                 MergedField mergedField = newMergedField(childFieldAndAstParents);",
      "469:                 captureMergedField(childENF, mergedField);",
      "471:                 updateFieldToNFMap(childENF, childFieldAndAstParents);",
      "472:                 updateCoordinatedToNFMap(childENF);",
      "474:                 int depthSeen = buildFieldWithChildren(childENF,",
      "475:                         childFieldAndAstParents,",
      "476:                         curLevel + 1);",
      "477:                 maxDepthSeen = Math.max(maxDepthSeen,depthSeen);",
      "479:                 checkMaxDepthExceeded(maxDepthSeen);",
      "480:             }",
      "481:             return maxDepthSeen;",
      "484:         private void checkMaxDepthExceeded(int depthSeen) {",
      "485:             if (depthSeen > this.options.getMaxChildrenDepth()) {",
      "486:                 throw new AbortExecutionException(\"Maximum query depth exceeded. \" + depthSeen + \" > \" + this.options.getMaxChildrenDepth());",
      "487:             }",
      "488:         }",
      "490:         private static MergedField newMergedField(ImmutableList<FieldAndAstParent> fieldAndAstParents) {",
      "491:             return MergedField.newMergedField(map(fieldAndAstParents, fieldAndAstParent -> fieldAndAstParent.field)).build();",
      "494:         private void updateFieldToNFMap(ExecutableNormalizedField executableNormalizedField,",
      "495:                                         ImmutableList<FieldAndAstParent> mergedField) {",
      "496:             for (FieldAndAstParent astField : mergedField) {",
      "497:                 fieldToNormalizedField.put(astField.field, executableNormalizedField);",
      "498:             }",
      "499:         }",
      "501:         private void updateCoordinatedToNFMap(ExecutableNormalizedField topLevel) {",
      "502:             for (String objectType : topLevel.getObjectTypeNames()) {",
      "503:                 FieldCoordinates coordinates = FieldCoordinates.coordinates(objectType, topLevel.getFieldName());",
      "504:                 coordinatesToNormalizedFields.put(coordinates, topLevel);",
      "508:         public CollectNFResult collectFromMergedField(ExecutableNormalizedField executableNormalizedField,",
      "509:                                                       ImmutableList<FieldAndAstParent> mergedField,",
      "510:                                                       int level) {",
      "511:             List<GraphQLFieldDefinition> fieldDefs = executableNormalizedField.getFieldDefinitions(graphQLSchema);",
      "512:             Set<GraphQLObjectType> possibleObjects = resolvePossibleObjects(fieldDefs);",
      "513:             if (possibleObjects.isEmpty()) {",
      "514:                 return new CollectNFResult(ImmutableKit.emptyList(), ImmutableListMultimap.of());",
      "515:             }",
      "517:             List<CollectedField> collectedFields = new ArrayList<>();",
      "518:             for (FieldAndAstParent fieldAndAstParent : mergedField) {",
      "519:                 if (fieldAndAstParent.field.getSelectionSet() == null) {",
      "520:                     continue;",
      "521:                 }",
      "522:                 GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(graphQLSchema, fieldAndAstParent.astParentType, fieldAndAstParent.field.getName());",
      "523:                 GraphQLUnmodifiedType astParentType = unwrapAll(fieldDefinition.getType());",
      "524:                 this.collectFromSelectionSet(fieldAndAstParent.field.getSelectionSet(),",
      "525:                         collectedFields,",
      "526:                         (GraphQLCompositeType) astParentType,",
      "527:                         possibleObjects",
      "528:                 );",
      "529:             }",
      "530:             Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
      "531:             ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
      "532:             ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
      "534:             createNFs(resultNFs, fieldsByName, normalizedFieldToAstFields, level, executableNormalizedField);",
      "536:             return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
      "537:         }",
      "539:         private Map<String, List<CollectedField>> fieldsByResultKey(List<CollectedField> collectedFields) {",
      "540:             Map<String, List<CollectedField>> fieldsByName = new LinkedHashMap<>();",
      "541:             for (CollectedField collectedField : collectedFields) {",
      "542:                 fieldsByName.computeIfAbsent(collectedField.field.getResultKey(), ignored -> new ArrayList<>()).add(collectedField);",
      "543:             }",
      "544:             return fieldsByName;",
      "547:         public CollectNFResult collectFromOperation(GraphQLObjectType rootType) {",
      "550:             Set<GraphQLObjectType> possibleObjects = ImmutableSet.of(rootType);",
      "551:             List<CollectedField> collectedFields = new ArrayList<>();",
      "552:             collectFromSelectionSet(operationDefinition.getSelectionSet(), collectedFields, rootType, possibleObjects);",
      "554:             Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
      "555:             ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
      "556:             ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
      "558:             createNFs(resultNFs, fieldsByName, normalizedFieldToAstFields, 1, null);",
      "560:             return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
      "561:         }",
      "563:         private void createNFs(ImmutableList.Builder<ExecutableNormalizedField> nfListBuilder,",
      "564:                                Map<String, List<CollectedField>> fieldsByName,",
      "565:                                ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields,",
      "566:                                int level,",
      "567:                                ExecutableNormalizedField parent) {",
      "568:             for (String resultKey : fieldsByName.keySet()) {",
      "569:                 List<CollectedField> fieldsWithSameResultKey = fieldsByName.get(resultKey);",
      "570:                 List<CollectedFieldGroup> commonParentsGroups = groupByCommonParents(fieldsWithSameResultKey);",
      "571:                 for (CollectedFieldGroup fieldGroup : commonParentsGroups) {",
      "572:                     ExecutableNormalizedField nf = createNF(fieldGroup, level, parent);",
      "573:                     if (nf == null) {",
      "574:                         continue;",
      "575:                     }",
      "576:                     for (CollectedField collectedField : fieldGroup.fields) {",
      "577:                         normalizedFieldToAstFields.put(nf, new FieldAndAstParent(collectedField.field, collectedField.astTypeCondition));",
      "578:                     }",
      "579:                     nfListBuilder.add(nf);",
      "581:                 if (commonParentsGroups.size() > 1) {",
      "582:                     possibleMergerList.add(new PossibleMerger(parent, resultKey));",
      "587:         private ExecutableNormalizedField createNF(CollectedFieldGroup collectedFieldGroup,",
      "588:                                                    int level,",
      "589:                                                    ExecutableNormalizedField parent) {",
      "591:             this.fieldCount++;",
      "592:             if (this.fieldCount > this.options.getMaxFieldsCount()) {",
      "593:                 throw new AbortExecutionException(\"Maximum field count exceeded. \" + this.fieldCount + \" > \" + this.options.getMaxFieldsCount());",
      "594:             }",
      "595:             Field field;",
      "596:             Set<GraphQLObjectType> objectTypes = collectedFieldGroup.objectTypes;",
      "597:             field = collectedFieldGroup.fields.iterator().next().field;",
      "598:             String fieldName = field.getName();",
      "599:             GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(graphQLSchema, objectTypes.iterator().next(), fieldName);",
      "601:             Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(fieldDefinition.getArguments(), field.getArguments(), CoercedVariables.of(this.coercedVariableValues.toMap()));",
      "602:             Map<String, NormalizedInputValue> normalizedArgumentValues = null;",
      "603:             if (this.normalizedVariableValues != null) {",
      "604:                 normalizedArgumentValues = ValuesResolver.getNormalizedArgumentValues(fieldDefinition.getArguments(), field.getArguments(), this.normalizedVariableValues);",
      "605:             }",
      "606:             ImmutableList<String> objectTypeNames = map(objectTypes, GraphQLObjectType::getName);",
      "607:             return ExecutableNormalizedField.newNormalizedField()",
      "608:                     .alias(field.getAlias())",
      "609:                     .resolvedArguments(argumentValues)",
      "610:                     .normalizedArguments(normalizedArgumentValues)",
      "611:                     .astArguments(field.getArguments())",
      "612:                     .objectTypeNames(objectTypeNames)",
      "613:                     .fieldName(fieldName)",
      "614:                     .level(level)",
      "615:                     .parent(parent)",
      "616:                     .build();",
      "619:         private List<CollectedFieldGroup> groupByCommonParents(Collection<CollectedField> fields) {",
      "620:             return groupByCommonParentsNoDeferSupport(fields);",
      "623:         private List<CollectedFieldGroup> groupByCommonParentsNoDeferSupport(Collection<CollectedField> fields) {",
      "624:             ImmutableSet.Builder<GraphQLObjectType> objectTypes = ImmutableSet.builder();",
      "625:             for (CollectedField collectedField : fields) {",
      "626:                 objectTypes.addAll(collectedField.objectTypes);",
      "627:             }",
      "628:             Set<GraphQLObjectType> allRelevantObjects = objectTypes.build();",
      "629:             Map<GraphQLType, ImmutableList<CollectedField>> groupByAstParent = groupingBy(fields, fieldAndType -> fieldAndType.astTypeCondition);",
      "630:             if (groupByAstParent.size() == 1) {",
      "631:                 return singletonList(new CollectedFieldGroup(ImmutableSet.copyOf(fields), allRelevantObjects));",
      "632:             }",
      "633:             ImmutableList.Builder<CollectedFieldGroup> result = ImmutableList.builder();",
      "634:             for (GraphQLObjectType objectType : allRelevantObjects) {",
      "635:                 Set<CollectedField> relevantFields = filterSet(fields, field -> field.objectTypes.contains(objectType));",
      "636:                 result.add(new CollectedFieldGroup(relevantFields, singleton(objectType)));",
      "637:             }",
      "638:             return result.build();",
      "641:         private void collectFromSelectionSet(SelectionSet selectionSet,",
      "642:                                              List<CollectedField> result,",
      "643:                                              GraphQLCompositeType astTypeCondition,",
      "644:                                              Set<GraphQLObjectType> possibleObjects",
      "645:         ) {",
      "646:             for (Selection<?> selection : selectionSet.getSelections()) {",
      "647:                 if (selection instanceof Field) {",
      "648:                     collectField(result, (Field) selection, possibleObjects, astTypeCondition);",
      "649:                 } else if (selection instanceof InlineFragment) {",
      "650:                     collectInlineFragment(result, (InlineFragment) selection, possibleObjects, astTypeCondition);",
      "651:                 } else if (selection instanceof FragmentSpread) {",
      "652:                     collectFragmentSpread(result, (FragmentSpread) selection, possibleObjects);",
      "653:                 }",
      "654:             }",
      "657:         private void collectFragmentSpread(List<CollectedField> result,",
      "658:                                            FragmentSpread fragmentSpread,",
      "659:                                            Set<GraphQLObjectType> possibleObjects",
      "660:         ) {",
      "661:             if (!conditionalNodes.shouldInclude(fragmentSpread,",
      "662:                     this.coercedVariableValues.toMap(),",
      "663:                     this.graphQLSchema,",
      "664:                     this.options.graphQLContext)) {",
      "665:                 return;",
      "666:             }",
      "667:             FragmentDefinition fragmentDefinition = assertNotNull(this.fragments.get(fragmentSpread.getName()));",
      "669:             if (!conditionalNodes.shouldInclude(fragmentDefinition,",
      "670:                     this.coercedVariableValues.toMap(),",
      "671:                     this.graphQLSchema,",
      "672:                     this.options.graphQLContext)) {",
      "673:                 return;",
      "675:             GraphQLCompositeType newAstTypeCondition = (GraphQLCompositeType) assertNotNull(this.graphQLSchema.getType(fragmentDefinition.getTypeCondition().getName()));",
      "676:             Set<GraphQLObjectType> newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition);",
      "678:             collectFromSelectionSet(fragmentDefinition.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
      "681:         private void collectInlineFragment(List<CollectedField> result,",
      "682:                                            InlineFragment inlineFragment,",
      "683:                                            Set<GraphQLObjectType> possibleObjects,",
      "684:                                            GraphQLCompositeType astTypeCondition",
      "685:         ) {",
      "686:             if (!conditionalNodes.shouldInclude(inlineFragment, this.coercedVariableValues.toMap(), this.graphQLSchema, this.options.graphQLContext)) {",
      "687:                 return;",
      "688:             }",
      "689:             Set<GraphQLObjectType> newPossibleObjects = possibleObjects;",
      "690:             GraphQLCompositeType newAstTypeCondition = astTypeCondition;",
      "692:             if (inlineFragment.getTypeCondition() != null) {",
      "693:                 newAstTypeCondition = (GraphQLCompositeType) this.graphQLSchema.getType(inlineFragment.getTypeCondition().getName());",
      "694:                 newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition);",
      "696:             }",
      "698:             collectFromSelectionSet(inlineFragment.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
      "701:         private void collectField(List<CollectedField> result,",
      "702:                                   Field field,",
      "703:                                   Set<GraphQLObjectType> possibleObjectTypes,",
      "704:                                   GraphQLCompositeType astTypeCondition",
      "705:         ) {",
      "706:             if (!conditionalNodes.shouldInclude(field,",
      "707:                     this.coercedVariableValues.toMap(),",
      "708:                     this.graphQLSchema,",
      "709:                     this.options.graphQLContext)) {",
      "710:                 return;",
      "711:             }",
      "713:             if (possibleObjectTypes.isEmpty()) {",
      "714:                 return;",
      "715:             }",
      "716:             result.add(new CollectedField(field, possibleObjectTypes, astTypeCondition));",
      "719:         private Set<GraphQLObjectType> narrowDownPossibleObjects(Set<GraphQLObjectType> currentOnes,",
      "720:                                                                  GraphQLCompositeType typeCondition) {",
      "722:             ImmutableSet<GraphQLObjectType> resolvedTypeCondition = resolvePossibleObjects(typeCondition);",
      "723:             if (currentOnes.isEmpty()) {",
      "724:                 return resolvedTypeCondition;",
      "725:             }",
      "728:             return intersection(currentOnes, resolvedTypeCondition);",
      "731:         private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(List<GraphQLFieldDefinition> defs) {",
      "732:             ImmutableSet.Builder<GraphQLObjectType> builder = ImmutableSet.builder();",
      "734:             for (GraphQLFieldDefinition def : defs) {",
      "735:                 GraphQLUnmodifiedType outputType = unwrapAll(def.getType());",
      "736:                 if (outputType instanceof GraphQLCompositeType) {",
      "737:                     builder.addAll(resolvePossibleObjects((GraphQLCompositeType) outputType));",
      "738:                 }",
      "739:             }",
      "741:             return builder.build();",
      "744:         private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(GraphQLCompositeType type) {",
      "745:             if (type instanceof GraphQLObjectType) {",
      "746:                 return ImmutableSet.of((GraphQLObjectType) type);",
      "747:             } else if (type instanceof GraphQLInterfaceType) {",
      "748:                 return ImmutableSet.copyOf(graphQLSchema.getImplementations((GraphQLInterfaceType) type));",
      "749:             } else if (type instanceof GraphQLUnionType) {",
      "750:                 List<GraphQLNamedOutputType> unionTypes = ((GraphQLUnionType) type).getTypes();",
      "751:                 return ImmutableSet.copyOf(ImmutableKit.map(unionTypes, GraphQLObjectType.class::cast));",
      "752:             } else {",
      "753:                 return assertShouldNeverHappen();",
      "754:             }",
      "757:         private static class PossibleMerger {",
      "758:             ExecutableNormalizedField parent;",
      "759:             String resultKey;",
      "761:             public PossibleMerger(ExecutableNormalizedField parent, String resultKey) {",
      "762:                 this.parent = parent;",
      "763:                 this.resultKey = resultKey;",
      "764:             }",
      "767:         private static class CollectedField {",
      "768:             Field field;",
      "769:             Set<GraphQLObjectType> objectTypes;",
      "770:             GraphQLCompositeType astTypeCondition;",
      "772:             public CollectedField(Field field, Set<GraphQLObjectType> objectTypes, GraphQLCompositeType astTypeCondition) {",
      "773:                 this.field = field;",
      "774:                 this.objectTypes = objectTypes;",
      "775:                 this.astTypeCondition = astTypeCondition;",
      "776:             }",
      "779:         public static class CollectNFResult {",
      "780:             private final Collection<ExecutableNormalizedField> children;",
      "781:             private final ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields;",
      "783:             public CollectNFResult(Collection<ExecutableNormalizedField> children, ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields) {",
      "784:                 this.children = children;",
      "785:                 this.normalizedFieldToAstFields = normalizedFieldToAstFields;",
      "786:             }",
      "787:         }",
      "789:         private static class FieldAndAstParent {",
      "790:             final Field field;",
      "791:             final GraphQLCompositeType astParentType;",
      "793:             private FieldAndAstParent(Field field, GraphQLCompositeType astParentType) {",
      "794:                 this.field = field;",
      "795:                 this.astParentType = astParentType;",
      "799:         private static class CollectedFieldGroup {",
      "800:             Set<GraphQLObjectType> objectTypes;",
      "801:             Set<CollectedField> fields;",
      "803:             public CollectedFieldGroup(Set<CollectedField> fields, Set<GraphQLObjectType> objectTypes) {",
      "804:                 this.fields = fields;",
      "805:                 this.objectTypes = objectTypes;",
      "806:             }",
      "810: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/schema/impl/SchemaUtil.java||src/main/java/graphql/schema/impl/SchemaUtil.java": [
      "File: src/main/java/graphql/schema/impl/SchemaUtil.java -> src/main/java/graphql/schema/impl/SchemaUtil.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: import com.google.common.collect.ImmutableMap;",
      "5: import graphql.Internal;",
      "6: import graphql.schema.GraphQLImplementingType;",
      "7: import graphql.schema.GraphQLNamedOutputType;",
      "8: import graphql.schema.GraphQLNamedType;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: import graphql.execution.MissingRootTypeException;",
      "7: import graphql.language.OperationDefinition;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "21: import java.util.Map;",
      "22: import java.util.TreeMap;",
      "24: @Internal",
      "25: public class SchemaUtil {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: import static graphql.Assert.assertShouldNeverHappen;",
      "27: import static graphql.language.OperationDefinition.Operation.MUTATION;",
      "28: import static graphql.language.OperationDefinition.Operation.QUERY;",
      "29: import static graphql.language.OperationDefinition.Operation.SUBSCRIPTION;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "93:         final Map<String, GraphQLNamedType> typeMap = schema.getTypeMap();",
      "94:         List<GraphQLSchemaElement> roots = new ArrayList<>(typeMap.values());",
      "95:         roots.addAll(schema.getDirectives());",
      "96:         SchemaTraverser schemaTraverser = new SchemaTraverser(schemaElement -> schemaElement.getChildrenWithTypeReferences().getChildrenAsList());",
      "97:         schemaTraverser.depthFirst(new GraphQLTypeResolvingVisitor(typeMap), roots);",
      "98:     }",
      "",
      "[Removed Lines]",
      "99: }",
      "",
      "[Added Lines]",
      "103:         roots.addAll(schema.getSchemaAppliedDirectives());",
      "108:     public static GraphQLObjectType getOperationRootType(GraphQLSchema graphQLSchema, OperationDefinition operationDefinition) {",
      "109:         OperationDefinition.Operation operation = operationDefinition.getOperation();",
      "110:         if (operation == MUTATION) {",
      "111:             GraphQLObjectType mutationType = graphQLSchema.getMutationType();",
      "112:             if (mutationType == null) {",
      "113:                 throw new MissingRootTypeException(\"Schema is not configured for mutations.\", operationDefinition.getSourceLocation());",
      "114:             }",
      "115:             return mutationType;",
      "116:         } else if (operation == QUERY) {",
      "117:             GraphQLObjectType queryType = graphQLSchema.getQueryType();",
      "118:             if (queryType == null) {",
      "119:                 throw new MissingRootTypeException(\"Schema does not define the required query root type.\", operationDefinition.getSourceLocation());",
      "120:             }",
      "121:             return queryType;",
      "122:         } else if (operation == SUBSCRIPTION) {",
      "123:             GraphQLObjectType subscriptionType = graphQLSchema.getSubscriptionType();",
      "124:             if (subscriptionType == null) {",
      "125:                 throw new MissingRootTypeException(\"Schema is not configured for subscriptions.\", operationDefinition.getSourceLocation());",
      "126:             }",
      "127:             return subscriptionType;",
      "128:         } else {",
      "129:             return assertShouldNeverHappen(\"Unhandled case. An extra operation enum has been added without code support\");",
      "130:         }",
      "131:     }",
      "132: }",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy": [
      "File: src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy -> src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "892:         given:",
      "893:         def graphQLSchema = createComplexSchema()",
      "895:         when:",
      "897:             {",
      "898:                 nodeType: __type(name: \"Node\") {",
      "899:                     possibleTypes {",
      "",
      "[Removed Lines]",
      "896:         def result = GraphQL.newGraphQL(graphQLSchema).build().execute(\"\"\"",
      "",
      "[Added Lines]",
      "895:         GraphQL graphQL = GraphQL.newGraphQL(graphQLSchema).build()",
      "898:         String query = \"\"\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "901:                         name",
      "902:                     }",
      "903:                 }",
      "905:                     possibleTypes {",
      "906:                         kind",
      "907:                         name",
      "",
      "[Removed Lines]",
      "904:                 resourceType: __type(name: \"Resource\") {",
      "",
      "[Added Lines]",
      "906:             }",
      "907:         \"\"\"",
      "908:         def result = graphQL.execute(query)",
      "910:         then:",
      "911:         !result.errors",
      "912:         result.data == [",
      "913:                 nodeType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']]],",
      "914:         ]",
      "916:         when:",
      "917:         query = \"\"\"",
      "918:         {",
      "919:             resourceType: __type(name: \"Resource\") {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "910:                         kind",
      "911:                         name",
      "912:                     }",
      "915:                     interfaces {",
      "916:                         kind",
      "917:                         name",
      "918:                     }",
      "919:                 }",
      "923:         then:",
      "924:         !result.errors",
      "925:         result.data == [",
      "927:                 imageType   : [interfaces: [[kind: 'INTERFACE', name: 'Resource'], [kind: 'INTERFACE', name: 'Node']]],",
      "929:         ]",
      "930:     }",
      "",
      "[Removed Lines]",
      "913:                 }",
      "914:                 imageType: __type(name: \"Image\") {",
      "920:             }",
      "921:         \"\"\")",
      "926:                 nodeType    : [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']]],",
      "928:                 resourceType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']], interfaces: [[kind: 'INTERFACE', name: 'Node']]]",
      "",
      "[Added Lines]",
      "928:                 }",
      "929:         }",
      "930:         \"\"\"",
      "931:         result = graphQL.execute(query)",
      "933:         then:",
      "934:         !result.errors",
      "935:         result.data == [",
      "936:                 resourceType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']], interfaces: [[kind: 'INTERFACE', name: 'Node']]]",
      "937:         ]",
      "939:         when:",
      "941:         query = \"\"\"",
      "942:         {",
      "943:             imageType: __type(name: \"Image\") {",
      "949:         }",
      "950:         \"\"\"",
      "951:         result = graphQL.execute(query)",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy": [
      "File: src/test/groovy/graphql/UnionTest.groovy -> src/test/groovy/graphql/UnionTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: class UnionTest extends Specification {",
      "9:         def query = \"\"\"",
      "10:             {",
      "11:                 Named: __type(name: \"Named\") {",
      "",
      "[Removed Lines]",
      "8:     def \"can introspect on union and intersection types\"() {",
      "",
      "[Added Lines]",
      "7:     def \"can introspect on union types\"() {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "16:                   possibleTypes { name }",
      "17:                   enumValues { name }",
      "18:                   inputFields { name }",
      "28:                 }",
      "29:             }",
      "30:             \"\"\"",
      "",
      "[Removed Lines]",
      "19:             }",
      "20:                 Pet: __type(name: \"Pet\") {",
      "21:                   kind",
      "22:                   name",
      "23:                   fields { name }",
      "24:                   interfaces { name }",
      "25:                   possibleTypes { name }",
      "26:                   enumValues { name }",
      "27:                   inputFields { name }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "43:                 ],",
      "44:                 enumValues   : null,",
      "45:                 inputFields  : null",
      "48:                                       kind         : 'UNION',",
      "49:                                       name         : 'Pet',",
      "50:                                       fields       : null,",
      "",
      "[Removed Lines]",
      "46:         ],",
      "47:                               Pet  : [",
      "",
      "[Added Lines]",
      "36:         ]]",
      "37:         when:",
      "38:         def executionResult = GraphQL.newGraphQL(GarfieldSchema.GarfieldSchema).build().execute(query)",
      "40:         then:",
      "41:         executionResult.data == expectedResult",
      "44:     }",
      "46:     def \"can introspect on intersection types\"() {",
      "47:         def query = \"\"\"",
      "48:             {",
      "49:                 Pet: __type(name: \"Pet\") {",
      "50:                   kind",
      "51:                   name",
      "52:                   fields { name }",
      "53:                   interfaces { name }",
      "54:                   possibleTypes { name }",
      "55:                   enumValues { name }",
      "56:                   inputFields { name }",
      "57:                 }",
      "58:             }",
      "59:             \"\"\"",
      "61:         def expectedResult = [Pet  : [",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/execution/ConditionalNodesTest.groovy||src/test/groovy/graphql/execution/ConditionalNodesTest.groovy": [
      "File: src/test/groovy/graphql/execution/ConditionalNodesTest.groovy -> src/test/groovy/graphql/execution/ConditionalNodesTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package graphql.execution",
      "4: import graphql.language.Argument",
      "5: import graphql.language.BooleanValue",
      "6: import graphql.language.Directive",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: import graphql.execution.conditional.ConditionalNodes",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy": [
      "File: src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy -> src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import graphql.ExecutionInput",
      "4: import graphql.ExecutionResult",
      "5: import graphql.TestUtil",
      "6: import spock.lang.Specification",
      "8: class GoodFaithIntrospectionInstrumentationTest extends Specification {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: import graphql.execution.AbortExecutionException",
      "7: import graphql.execution.CoercedVariables",
      "8: import graphql.language.Document",
      "9: import graphql.normalized.ExecutableNormalizedOperationFactory",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "12:     def setup() {",
      "13:         GoodFaithIntrospection.enabledJvmWide(true)",
      "14:     }",
      "15:     def cleanup() {",
      "16:         GoodFaithIntrospection.enabledJvmWide(true)",
      "17:     }",
      "19:     def \"test asking for introspection in good faith\"() {",
      "21:         when:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24:     def \"standard introspection query is inside limits just in general\"() {",
      "26:         when:",
      "27:         Document document = TestUtil.toDocument(IntrospectionQuery.INTROSPECTION_QUERY)",
      "28:         def eno = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphql.getGraphQLSchema(), document,",
      "29:                 \"IntrospectionQuery\", CoercedVariables.emptyVariables())",
      "31:         then:",
      "32:         eno.getOperationFieldCount() < GoodFaithIntrospection.GOOD_FAITH_MAX_FIELDS_COUNT  // currently 189",
      "33:         eno.getOperationDepth() < GoodFaithIntrospection.GOOD_FAITH_MAX_DEPTH_COUNT  // currently 13",
      "34:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "69:                 alias1 :  __type(name : \"t1\") { name }",
      "70:             }",
      "71:         \"\"\"                                                                                           | _",
      "73:         \"\"\" query badActor {",
      "74:                 __schema { types { name} }",
      "75:                 alias1 : __schema { types { name} }",
      "76:             }",
      "77:         \"\"\"                                                                                           | _",
      "78:     }",
      "80:     def \"mixed general queries and introspections will be stopped anyway\"() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "90:         \"\"\" query badActor {",
      "91:                 a1: __type(name : \"t\") { name }",
      "92:                 a2 :  __type(name : \"t1\") { name }",
      "93:             }",
      "94:         \"\"\"                                                                                           | _",
      "102:         \"\"\" query badActor {",
      "103:                 a1: __schema { types { name} }",
      "104:                 a2 : __schema { types { name} }",
      "105:             }",
      "106:         \"\"\"                                                                                           | _",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "133:         !er.errors.isEmpty()",
      "134:         er.errors[0] instanceof GoodFaithIntrospection.BadFaithIntrospectionError",
      "135:     }",
      "136: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "167:     def \"can stop deep queries\"() {",
      "169:         when:",
      "170:         def query = createDeepQuery(depth)",
      "171:         def then = System.currentTimeMillis()",
      "172:         ExecutionResult er = graphql.execute(query)",
      "173:         def ms = System.currentTimeMillis()-then",
      "175:         then:",
      "176:         !er.errors.isEmpty()",
      "177:         er.errors[0].class == targetError",
      "178:         er.data == null // it stopped hard - it did not continue to normal business",
      "179:         println \"Took \" + ms + \"ms\"",
      "181:         where:",
      "182:         depth | targetError",
      "183:         2     | GoodFaithIntrospection.BadFaithIntrospectionError.class",
      "184:         10    | AbortExecutionException.class",
      "185:         15    | AbortExecutionException.class",
      "186:         20    | AbortExecutionException.class",
      "187:         25    | AbortExecutionException.class",
      "188:         50    | AbortExecutionException.class",
      "189:         100    | AbortExecutionException.class",
      "190:     }",
      "192:     String createDeepQuery(int depth = 25) {",
      "193:         def result = \"\"\"",
      "194: query test {",
      "195:   __schema {",
      "196:     types {",
      "197:       ...F1",
      "198:     }",
      "199:   }",
      "200: }",
      "201: \"\"\"",
      "202:         for (int i = 1; i < depth; i++) {",
      "203:             result += \"\"\"",
      "204:         fragment F$i on __Type {",
      "205:           fields {",
      "206:             type {",
      "207:               ...F${i + 1}",
      "208:             }",
      "209:           }",
      "211:   ofType {",
      "212:     ...F${i + 1}",
      "213:   }",
      "214: }",
      "217: \"\"\"",
      "218:         }",
      "219:         result += \"\"\"",
      "220:         fragment F$depth on __Type {",
      "221:           fields {",
      "222:             type {",
      "223: name",
      "224:             }",
      "225:           }",
      "226: }",
      "229: \"\"\"",
      "230:         return result",
      "231:     }",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy": [
      "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package graphql.normalized",
      "3: import graphql.GraphQL",
      "4: import graphql.TestUtil",
      "5: import graphql.execution.CoercedVariables",
      "6: import graphql.execution.MergedField",
      "7: import graphql.execution.RawVariables",
      "8: import graphql.language.Document",
      "9: import graphql.language.Field",
      "10: import graphql.language.FragmentDefinition",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: import graphql.ExecutionInput",
      "6: import graphql.execution.AbortExecutionException",
      "10: import graphql.execution.directives.QueryAppliedDirective",
      "11: import graphql.introspection.IntrospectionQuery",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "17: import graphql.util.TraverserVisitorStub",
      "18: import spock.lang.Specification",
      "20: import static graphql.TestUtil.schema",
      "21: import static graphql.language.AstPrinter.printAst",
      "22: import static graphql.parser.Parser.parseValue",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: import java.util.stream.Collectors",
      "25: import java.util.stream.IntStream",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "109:         Document document = TestUtil.parseQuery(query)",
      "113:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "115:         expect:",
      "",
      "[Removed Lines]",
      "111:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "112:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "118:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "195:         Document document = TestUtil.parseQuery(query)",
      "199:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "201:         expect:",
      "",
      "[Removed Lines]",
      "197:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "198:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "203:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "275:         Document document = TestUtil.parseQuery(query)",
      "279:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "281:         expect:",
      "",
      "[Removed Lines]",
      "277:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "278:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "282:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "326:         Document document = TestUtil.parseQuery(query)",
      "330:         def printedTree = printTree(tree)",
      "332:         expect:",
      "",
      "[Removed Lines]",
      "328:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "329:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "333:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "369:         Document document = TestUtil.parseQuery(query)",
      "373:         def printedTree = printTree(tree)",
      "375:         expect:",
      "",
      "[Removed Lines]",
      "371:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "372:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "376:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "419:         Document document = TestUtil.parseQuery(query)",
      "423:         def printedTree = printTree(tree)",
      "425:         expect:",
      "",
      "[Removed Lines]",
      "421:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "422:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "426:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "482:         Document document = TestUtil.parseQuery(query)",
      "486:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "488:         expect:",
      "",
      "[Removed Lines]",
      "484:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "485:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "489:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "528:         Document document = TestUtil.parseQuery(query)",
      "532:         def printedTree = printTree(tree)",
      "534:         expect:",
      "",
      "[Removed Lines]",
      "530:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "531:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "535:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "572:         Document document = TestUtil.parseQuery(query)",
      "576:         def printedTree = printTree(tree)",
      "578:         expect:",
      "",
      "[Removed Lines]",
      "574:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "575:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "579:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "616:         Document document = TestUtil.parseQuery(query)",
      "620:         def printedTree = printTree(tree)",
      "622:         expect:",
      "",
      "[Removed Lines]",
      "618:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "619:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "623:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "648:         Document document = TestUtil.parseQuery(query)",
      "652:         def printedTree = printTree(tree)",
      "654:         expect:",
      "",
      "[Removed Lines]",
      "650:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "651:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "655:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "699:         Document document = TestUtil.parseQuery(query)",
      "703:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "705:         expect:",
      "",
      "[Removed Lines]",
      "701:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "702:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "706:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "707:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "709:         expect:",
      "710:         printedTree == ['-Query.pet: Pet',",
      "711:                         '--[Bird, Cat, Dog].name: String'",
      "712:         ]",
      "713:     }",
      "715:     def \"query with fragment and type condition merged together 2\"() {",
      "716:         def graphQLSchema = TestUtil.schema(\"\"\"",
      "717:             type Query {",
      "718:                 pet : Pet",
      "719:             }",
      "720:             interface Pet {",
      "721:                 name : String",
      "722:             }",
      "724:             type Dog implements Pet {",
      "725:                 name : String",
      "726:             }",
      "728:             type Bird implements Pet {",
      "729:                 name : String",
      "730:             }",
      "732:             type Cat implements Pet {",
      "733:                 name : String",
      "734:             }",
      "735:         \"\"\")",
      "736:         def query = \"\"\"",
      "737:         {",
      "738:             pet {",
      "739:                 name",
      "740:                 ... on Dog {",
      "741:                     name",
      "742:                 }",
      "743:                 ... CatFrag",
      "744:             }",
      "745:          }",
      "747:         fragment CatFrag on Cat {",
      "748:             name",
      "749:         }",
      "750:             \"\"\"",
      "751:         assertValidQuery(graphQLSchema, query)",
      "753:         Document document = TestUtil.parseQuery(query)",
      "756:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "737:         Document document = TestUtil.parseQuery(query)",
      "741:         def printedTree = printTree(tree)",
      "743:         expect:",
      "",
      "[Removed Lines]",
      "739:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "740:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "795:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "781:         Document document = TestUtil.parseQuery(query)",
      "785:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "787:         expect:",
      "",
      "[Removed Lines]",
      "783:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "784:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "839:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "821:         Document document = TestUtil.parseQuery(query)",
      "825:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "827:         expect:",
      "",
      "[Removed Lines]",
      "823:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "824:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "879:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "869:         Document document = TestUtil.parseQuery(query)",
      "873:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "875:         expect:",
      "",
      "[Removed Lines]",
      "871:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "872:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "927:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "895:         result",
      "896:     }",
      "898:     static List<String> printTreeWithLevelInfo(ExecutableNormalizedOperation queryExecutionTree, GraphQLSchema schema) {",
      "899:         def result = []",
      "900:         Traverser<ExecutableNormalizedField> traverser = Traverser.depthFirst({ it.getChildren() })",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "953:     List<String> printTreeAndDirectives(ExecutableNormalizedOperation queryExecutionTree) {",
      "954:         def result = []",
      "955:         Traverser<ExecutableNormalizedField> traverser = Traverser.depthFirst({ it.getChildren() })",
      "956:         traverser.traverse(queryExecutionTree.getTopLevelFields(), new TraverserVisitorStub<ExecutableNormalizedField>() {",
      "957:             @Override",
      "958:             TraversalControl enter(TraverserContext<ExecutableNormalizedField> context) {",
      "959:                 ExecutableNormalizedField queryExecutionField = context.thisNode()",
      "960:                 def queryDirectives = queryExecutionTree.getQueryDirectives(queryExecutionField)",
      "962:                 def fieldDetails = queryExecutionField.printDetails()",
      "963:                 if (queryDirectives != null) {",
      "964:                     def appliedDirectivesByName = queryDirectives.getImmediateAppliedDirectivesByName()",
      "965:                     if (!appliedDirectivesByName.isEmpty()) {",
      "966:                         fieldDetails += \" \" + printDirectives(appliedDirectivesByName)",
      "967:                     }",
      "968:                 }",
      "969:                 result << fieldDetails",
      "970:                 return TraversalControl.CONTINUE",
      "971:             }",
      "973:             String printDirectives(Map<String, List<QueryAppliedDirective>> stringListMap) {",
      "974:                 String s = stringListMap.collect { entry ->",
      "975:                     entry.value.collect {",
      "976:                         \" @\" + it.name + \"(\" + it.getArguments().collect {",
      "977:                             it.name + \" : \" + '\"' + it.value + '\"'",
      "978:                         }.join(\",\") + \")\"",
      "979:                     }.join(' ')",
      "980:                 }.join(\" \")",
      "981:                 return s",
      "982:             }",
      "983:         })",
      "984:         result",
      "985:     }",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "937:         Document document = TestUtil.parseQuery(query)",
      "938:         def subFooField = (document.getDefinitions()[1] as FragmentDefinition).getSelectionSet().getSelections()[0] as Field",
      "942:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
      "944:         expect:",
      "",
      "[Removed Lines]",
      "940:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "941:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1030:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "980:         def petsField = (document.getDefinitions()[0] as OperationDefinition).getSelectionSet().getSelections()[0] as Field",
      "981:         def idField = petsField.getSelectionSet().getSelections()[0] as Field",
      "985:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
      "",
      "[Removed Lines]",
      "983:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "984:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1073:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "1029:         def schemaField = selections[2] as Field",
      "1030:         def typeField = selections[3] as Field",
      "1034:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
      "1036:         expect:",
      "",
      "[Removed Lines]",
      "1032:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1033:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1122:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "1087:         Document document = TestUtil.parseQuery(query)",
      "1091:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "1093:         expect:",
      "",
      "[Removed Lines]",
      "1089:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1090:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1179:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "1130:         Document document = TestUtil.parseQuery(query)",
      "1134:         def printedTree = printTree(tree)",
      "1136:         expect:",
      "",
      "[Removed Lines]",
      "1132:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1133:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1222:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1158:         Document document = TestUtil.parseQuery(query)",
      "1162:         def normalizedFieldToMergedField = tree.getNormalizedFieldToMergedField()",
      "1163:         Traverser<ExecutableNormalizedField> traverser = Traverser.depthFirst({ it.getChildren() })",
      "1164:         List<MergedField> result = new ArrayList<>()",
      "",
      "[Removed Lines]",
      "1160:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1161:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1250:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1196:         Document document = TestUtil.parseQuery(query)",
      "1200:         when:",
      "1202:         def coordinatesToNormalizedFields = tree.coordinatesToNormalizedFields",
      "1204:         then:",
      "",
      "[Removed Lines]",
      "1198:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1201:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1289:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "1297:         Document document = TestUtil.parseQuery(mutation)",
      "1301:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "1303:         expect:",
      "",
      "[Removed Lines]",
      "1299:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1300:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1388:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "1315:     private void assertValidQuery(GraphQLSchema graphQLSchema, String query, Map variables = [:]) {",
      "1316:         GraphQL graphQL = GraphQL.newGraphQL(graphQLSchema).build()",
      "1318:     }",
      "1320:     def \"normalized arguments\"() {",
      "",
      "[Removed Lines]",
      "1317:         assert graphQL.execute(query, null, variables).errors.size() == 0",
      "",
      "[Added Lines]",
      "1405:         def ei = ExecutionInput.newExecutionInput(query).variables(variables).build()",
      "1406:         assert graphQL.execute(ei).errors.size() == 0",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "1346:         assertValidQuery(graphQLSchema, query)",
      "1347:         Document document = TestUtil.parseQuery(query)",
      "1349:         def variables = [",
      "1350:                 var1: [bar: 123],",
      "1351:                 var2: [foo: \"foo\", input2: [bar: 123]]",
      "",
      "[Removed Lines]",
      "1348:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "1354:         def expectedNormalizedArgValue = [foo: new NormalizedInputValue(\"String\", parseValue('\"foo\"')), input2: new NormalizedInputValue(\"Input2\", [bar: new NormalizedInputValue(\"Int\", parseValue(\"123\"))])]",
      "1355:         when:",
      "1357:         def topLevelField = tree.getTopLevelFields().get(0)",
      "1358:         def secondField = topLevelField.getChildren().get(0)",
      "1359:         def arg1 = secondField.getNormalizedArgument(\"arg1\")",
      "",
      "[Removed Lines]",
      "1356:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "",
      "[Added Lines]",
      "1445:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "1393:         assertValidQuery(graphQLSchema, query)",
      "1394:         def document = TestUtil.parseQuery(query)",
      "1397:         when:",
      "1400:         then:",
      "1401:         def topLevelField = tree.getTopLevelFields().get(0)",
      "",
      "[Removed Lines]",
      "1395:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1396:         def variables = [:]",
      "1398:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "",
      "[Added Lines]",
      "1486:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "1429:         assertValidQuery(graphQLSchema, query)",
      "1430:         def document = TestUtil.parseQuery(query)",
      "1432:         def variables = [",
      "1433:                 varIds  : null,",
      "1434:                 otherVar: null,",
      "1435:         ]",
      "1436:         when:",
      "1439:         then:",
      "1440:         def topLevelField = tree.getTopLevelFields().get(0)",
      "",
      "[Removed Lines]",
      "1431:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1437:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "",
      "[Added Lines]",
      "1525:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "1484:         ]",
      "1485:         assertValidQuery(graphQLSchema, query, variables)",
      "1486:         Document document = TestUtil.parseQuery(query)",
      "1488:         when:",
      "1490:         def topLevelField = tree.getTopLevelFields().get(0)",
      "1491:         def arg1 = topLevelField.getNormalizedArgument(\"arg1\")",
      "1492:         def arg2 = topLevelField.getNormalizedArgument(\"arg2\")",
      "",
      "[Removed Lines]",
      "1487:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1489:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "",
      "[Added Lines]",
      "1577:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1537:         ]",
      "1538:         assertValidQuery(graphQLSchema, query, variables)",
      "1539:         Document document = TestUtil.parseQuery(query)",
      "1541:         when:",
      "1543:         def topLevelField = tree.getTopLevelFields().get(0)",
      "1544:         def arg1 = topLevelField.getNormalizedArgument(\"arg1\")",
      "1545:         def arg2 = topLevelField.getNormalizedArgument(\"arg2\")",
      "",
      "[Removed Lines]",
      "1540:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1542:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "",
      "[Added Lines]",
      "1630:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1592:         '''",
      "1593:         assertValidQuery(graphQLSchema, query)",
      "1594:         Document document = TestUtil.parseQuery(query)",
      "1596:         when:",
      "1599:         then:",
      "1600:         tree.normalizedFieldToMergedField.size() == 3",
      "",
      "[Removed Lines]",
      "1595:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1597:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1685:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "1650:         '''",
      "1651:         assertValidQuery(graphQLSchema, query)",
      "1652:         Document document = TestUtil.parseQuery(query)",
      "1654:         when:",
      "1663:         then:",
      "1664:         tree.normalizedFieldToMergedField.size() == 5",
      "1665:         tree.fieldToNormalizedField.size() == 7",
      "1666:     }",
      "",
      "[Removed Lines]",
      "1653:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1655:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
      "1656:         println String.join(\"\\n\", printTree(tree))",
      "",
      "[Added Lines]",
      "1743:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
      "1744:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "1748:         printedTree == ['-Query.pets: Pet',",
      "1749:                         '--friend: Cat.catFriend: CatFriend',",
      "1750:                         '---CatFriend.catFriendName: String',",
      "1751:                         '--friend: Dog.dogFriend: DogFriend',",
      "1752:                         '---DogFriend.dogFriendName: String']",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "1696:         '''",
      "1697:         assertValidQuery(graphQLSchema, query)",
      "1698:         Document document = TestUtil.parseQuery(query)",
      "1700:         when:",
      "1702:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "1704:         then:",
      "1705:         printedTree == ['-Query.pets: Pet',",
      "1706:                         '--Cat.name: String',",
      "1707:                         '--Dog.name: String'",
      "1708:         ]",
      "1709:     }",
      "1711:     def \"diverging fields with the same parent type on deeper level\"() {",
      "1712:         given:",
      "1713:         def schema = schema('''",
      "",
      "[Removed Lines]",
      "1699:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1701:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1791:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 38 ---",
      "[Context before]",
      "1767:         '''",
      "1768:         assertValidQuery(schema, query)",
      "1769:         Document document = TestUtil.parseQuery(query)",
      "1771:         when:",
      "1773:         def printedTree = printTreeWithLevelInfo(tree, schema)",
      "1775:         then:",
      "",
      "[Removed Lines]",
      "1770:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1772:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1867:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 39 ---",
      "[Context before]",
      "1831:         '''",
      "1832:         assertValidQuery(schema, query)",
      "1833:         Document document = TestUtil.parseQuery(query)",
      "1835:         when:",
      "1837:         def printedTree = printTreeWithLevelInfo(tree, schema)",
      "1839:         then:",
      "",
      "[Removed Lines]",
      "1834:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1836:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1931:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 40 ---",
      "[Context before]",
      "1888:         '''",
      "1889:         assertValidQuery(schema, query)",
      "1890:         Document document = TestUtil.parseQuery(query)",
      "1892:         when:",
      "1894:         def printedTree = printTreeWithLevelInfo(tree, schema)",
      "1896:         then:",
      "",
      "[Removed Lines]",
      "1891:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1893:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1988:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 41 ---",
      "[Context before]",
      "1963:         '''",
      "1964:         assertValidQuery(schema, query)",
      "1965:         Document document = TestUtil.parseQuery(query)",
      "1967:         when:",
      "1969:         def printedTree = printTreeWithLevelInfo(tree, schema)",
      "1971:         then:",
      "",
      "[Removed Lines]",
      "1966:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1968:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "2063:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 42 ---",
      "[Context before]",
      "2025:         '''",
      "2026:         assertValidQuery(schema, query)",
      "2027:         Document document = TestUtil.parseQuery(query)",
      "2029:         when:",
      "2031:         def printedTree = printTreeWithLevelInfo(tree, schema)",
      "2033:         then:",
      "",
      "[Removed Lines]",
      "2028:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "2030:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "2125:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 43 ---",
      "[Context before]",
      "2067:         '''",
      "2068:         assertValidQuery(schema, query)",
      "2069:         Document document = TestUtil.parseQuery(query)",
      "2071:         when:",
      "2073:         def printedTree = printTreeWithLevelInfo(tree, schema)",
      "2075:         then:",
      "",
      "[Removed Lines]",
      "2070:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "2072:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "2167:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 44 ---",
      "[Context before]",
      "2110:         '''",
      "2111:         assertValidQuery(schema, query)",
      "2112:         Document document = TestUtil.parseQuery(query)",
      "2114:         when:",
      "2116:         def printedTree = printTreeWithLevelInfo(tree, schema)",
      "2118:         then:",
      "",
      "[Removed Lines]",
      "2113:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "2115:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "2210:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 45 ---",
      "[Context before]",
      "2153:         '''",
      "2154:         assertValidQuery(schema, query)",
      "2155:         Document document = TestUtil.parseQuery(query)",
      "2157:         when:",
      "2159:         def printedTree = printTreeWithLevelInfo(tree, schema)",
      "2161:         then:",
      "",
      "[Removed Lines]",
      "2156:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "2158:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "2253:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 46 ---",
      "[Context before]",
      "2228:         '''",
      "2229:         assertValidQuery(schema, query)",
      "2230:         Document document = TestUtil.parseQuery(query)",
      "2232:         when:",
      "2234:         def printedTree = printTreeWithLevelInfo(tree, schema)",
      "2236:         then:",
      "",
      "[Removed Lines]",
      "2231:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "2233:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "2328:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 47 ---",
      "[Context before]",
      "2304:         '''",
      "2305:         assertValidQuery(schema, query)",
      "2306:         Document document = TestUtil.parseQuery(query)",
      "2308:         when:",
      "2310:         def printedTree = printTreeWithLevelInfo(tree, schema)",
      "2312:         then:",
      "",
      "[Removed Lines]",
      "2307:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "2309:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "2404:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 48 ---",
      "[Context before]",
      "2366:         def variables = [\"true\": Boolean.TRUE, \"false\": Boolean.FALSE]",
      "2367:         assertValidQuery(graphQLSchema, query, variables)",
      "2368:         Document document = TestUtil.parseQuery(query)",
      "2370:         when:",
      "2372:         println String.join(\"\\n\", printTree(tree))",
      "2373:         def printedTree = printTree(tree)",
      "",
      "[Removed Lines]",
      "2369:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "2371:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "",
      "[Added Lines]",
      "2466:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "",
      "---------------",
      "--- Hunk 49 ---",
      "[Context before]",
      "2383:         ]",
      "2384:     }",
      "2386:     def \"missing argument\"() {",
      "2387:         given:",
      "2388:         String schema = \"\"\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2482:     def \"query directives are captured is respected\"() {",
      "2483:         given:",
      "2484:         String schema = \"\"\"",
      "2485:         directive @fieldDirective(target : String!) on FIELD",
      "2486:         directive @fieldXDirective(target : String!) on FIELD",
      "2488:         type Query {",
      "2489:           pets: Pet",
      "2490:         }",
      "2491:         interface Pet {",
      "2492:           name: String",
      "2493:         }",
      "2494:         type Cat implements Pet {",
      "2495:           name: String",
      "2496:         }",
      "2497:         type Dog implements Pet {",
      "2498:             name: String",
      "2499:         }",
      "2500:         \"\"\"",
      "2501:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2503:         String query = '''",
      "2504:           query q {",
      "2505:               pets {",
      "2506:                 ... on Cat {",
      "2507:                     cName : name @fieldDirective(target : \"Cat.name\")",
      "2508:               }",
      "2509:                 ... on Dog {",
      "2510:                     dName : name @fieldDirective(target : \"Dog.name\") @fieldXDirective(target : \"Dog.name\")",
      "2511:               }",
      "2512:               ... on Pet {",
      "2513:                     pName : name @fieldDirective(target : \"Pet.name\")",
      "2514:               }",
      "2515:           }}",
      "2516:         '''",
      "2518:         def variables = [:]",
      "2519:         assertValidQuery(graphQLSchema, query, variables)",
      "2520:         Document document = TestUtil.parseQuery(query)",
      "2522:         when:",
      "2523:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "2524:         def printedTree = printTreeAndDirectives(tree)",
      "2526:         then:",
      "2527:         printedTree == ['Query.pets',",
      "2528:                         'cName: Cat.name  @fieldDirective(target : \"Cat.name\")',",
      "2529:                         'dName: Dog.name  @fieldDirective(target : \"Dog.name\")  @fieldXDirective(target : \"Dog.name\")',",
      "2530:                         'pName: [Cat, Dog].name  @fieldDirective(target : \"Pet.name\")',",
      "2531:         ]",
      "2532:     }",
      "",
      "---------------",
      "--- Hunk 50 ---",
      "[Context before]",
      "2405:         printedTree == ['Query.hello']",
      "2406:         tree.getTopLevelFields().get(0).getNormalizedArguments().isEmpty()",
      "2407:     }",
      "2408: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2557:     def \"reused field via fragments\"() {",
      "2558:         String schema = \"\"\"",
      "2559:         type Query {",
      "2560:           pet: Pet",
      "2561:         }",
      "2562:         type Pet {",
      "2563:           owner: Person",
      "2564:           emergencyContact: Person",
      "2565:         }",
      "2566:         type Person {",
      "2567:           name: String",
      "2568:         }",
      "2569:         \"\"\"",
      "2570:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2572:         String query = \"\"\"",
      "2573: { pet {",
      "2574:   owner { ...personName }",
      "2575:   emergencyContact { ...personName }",
      "2576: }}",
      "2577: fragment personName on Person {",
      "2578:   name",
      "2579: }",
      "2580:         \"\"\"",
      "2582:         assertValidQuery(graphQLSchema, query)",
      "2584:         Document document = TestUtil.parseQuery(query)",
      "2587:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "2588:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "2590:         expect:",
      "2591:         printedTree == ['-Query.pet: Pet',",
      "2592:                         '--Pet.owner: Person',",
      "2593:                         '---Person.name: String',",
      "2594:                         '--Pet.emergencyContact: Person',",
      "2595:                         '---Person.name: String'",
      "2596:         ]",
      "2598:     }",
      "2601:     def \"test interface fields with three different output types (covariance) on the implementations\"() {",
      "2602:         def graphQLSchema = schema(\"\"\"",
      "2603:         interface Animal {",
      "2604:             parent: Animal",
      "2605:             name: String",
      "2606:         }",
      "2607:         type Cat implements Animal {",
      "2608:             name: String",
      "2609:             parent: Cat",
      "2610:         }",
      "2611:         type Dog implements Animal {",
      "2612:             name: String",
      "2613:             parent: Dog",
      "2614:             isGoodBoy: Boolean",
      "2615:         }",
      "2616:         type Bird implements Animal {",
      "2617:             name: String",
      "2618:             parent: Bird",
      "2619:         }",
      "2620:         type Query {",
      "2621:             animal: Animal",
      "2622:         }",
      "2623:         \"\"\")",
      "2625:         def query = \"\"\"",
      "2626:         {",
      "2627:             animal {",
      "2628:                 parent {",
      "2629:                     name",
      "2630:                 }",
      "2631:             }",
      "2632:         }",
      "2633:         \"\"\"",
      "2635:         assertValidQuery(graphQLSchema, query)",
      "2637:         Document document = TestUtil.parseQuery(query)",
      "2640:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "2641:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "2643:         expect:",
      "2644:         printedTree == [",
      "2645:                 \"-Query.animal: Animal\",",
      "2646:                 \"--[Bird, Cat, Dog].parent: Bird, Cat, Dog\",",
      "2647:                 \"---[Bird, Cat, Dog].name: String\",",
      "2648:         ]",
      "2649:     }",
      "2651:     def \"covariants with union fields\"() {",
      "2652:         def graphQLSchema = schema(\"\"\"",
      "2653:         type Query {",
      "2654:             animal: Animal",
      "2655:         }",
      "2656:         interface Animal {",
      "2657:             parent: DogOrCat",
      "2658:             name: String",
      "2659:         }",
      "2660:         type Cat implements Animal {",
      "2661:             name: String",
      "2662:             parent: Cat",
      "2663:         }",
      "2664:         type Dog implements Animal {",
      "2665:             name: String",
      "2666:             parent: Dog",
      "2667:             isGoodBoy: Boolean",
      "2668:         }",
      "2669:         union DogOrCat = Dog | Cat",
      "2670:         \"\"\")",
      "2672:         def query = \"\"\"",
      "2673:         {",
      "2674:             animal {",
      "2675:                 parent {",
      "2676:                   __typename",
      "2677:                 }",
      "2678:             }",
      "2679:         }",
      "2680:         \"\"\"",
      "2682:         assertValidQuery(graphQLSchema, query)",
      "2684:         Document document = TestUtil.parseQuery(query)",
      "2687:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "2688:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "2690:         expect:",
      "2691:         printedTree == [",
      "2692:                 \"-Query.animal: Animal\",",
      "2693:                 \"--[Cat, Dog].parent: Cat, Dog\",",
      "2694:                 \"---[Cat, Dog].__typename: String!\",",
      "2695:         ]",
      "2696:     }",
      "2698:     def \"query cannot exceed max depth\"() {",
      "2699:         String schema = \"\"\"",
      "2700:         type Query {",
      "2701:             animal: Animal",
      "2702:         }",
      "2703:         interface Animal {",
      "2704:             name: String",
      "2705:             friends: [Animal]",
      "2706:         }",
      "2707:         type Bird implements Animal {",
      "2708:             name: String",
      "2709:             friends: [Animal]",
      "2710:         }",
      "2711:         type Cat implements Animal {",
      "2712:             name: String",
      "2713:             friends: [Animal]",
      "2714:             breed: String",
      "2715:         }",
      "2716:         type Dog implements Animal {",
      "2717:             name: String",
      "2718:             breed: String",
      "2719:             friends: [Animal]",
      "2720:         }",
      "2721:         \"\"\"",
      "2722:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2727:         def animalSubselection = IntStream.rangeClosed(1, queryDepth - 2)",
      "2728:                 .mapToObj {",
      "2729:                     \"\"",
      "2730:                 }",
      "2731:                 .reduce(\"CHILD\") { acc, value ->",
      "2732:                     acc.replace(\"CHILD\", \"friends { CHILD }\")",
      "2733:                 }",
      "2734:                 .replace(\"CHILD\", \"name\")",
      "2737:         String query = \"\"\"",
      "2738:         {",
      "2739:             animal {",
      "2740:                 $animalSubselection",
      "2741:             }",
      "2742:         }",
      "2743:         \"\"\"",
      "2745:         def limit = 50",
      "2747:         assertValidQuery(graphQLSchema, query)",
      "2749:         Document document = TestUtil.parseQuery(query)",
      "2751:         when:",
      "2752:         Exception exception",
      "2753:         try {",
      "2754:             ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "2755:                     graphQLSchema,",
      "2756:                     document,",
      "2757:                     null,",
      "2758:                     RawVariables.emptyVariables(),",
      "2759:                     ExecutableNormalizedOperationFactory.Options.defaultOptions().maxChildrenDepth(limit))",
      "2760:         } catch (Exception e) {",
      "2761:             exception = e",
      "2762:         }",
      "2764:         then:",
      "2765:         if (queryDepth > limit) {",
      "2766:             assert exception != null",
      "2767:             assert exception.message.contains(\"depth exceeded\")",
      "2768:             assert exception.message.contains(\"> 50\")",
      "2769:         } else {",
      "2770:             assert exception == null",
      "2771:         }",
      "2773:         where:",
      "2774:         _ | queryDepth",
      "2775:         _ | 49",
      "2776:         _ | 50",
      "2777:         _ | 51",
      "2778:     }",
      "2780:     def \"big query is fine as long as depth is under limit\"() {",
      "2781:         String schema = \"\"\"",
      "2782:         type Query {",
      "2783:             animal: Animal",
      "2784:         }",
      "2785:         interface Animal {",
      "2786:             name: String",
      "2787:             friends: [Friend]",
      "2788:         }",
      "2789:         union Pet = Dog | Cat",
      "2790:         type Friend {",
      "2791:             name: String",
      "2792:             isBirdOwner: Boolean",
      "2793:             isCatOwner: Boolean",
      "2794:             pets: [Pet]",
      "2795:         }",
      "2796:         type Bird implements Animal {",
      "2797:             name: String",
      "2798:             friends: [Friend]",
      "2799:         }",
      "2800:         type Cat implements Animal {",
      "2801:             name: String",
      "2802:             friends: [Friend]",
      "2803:             breed: String",
      "2804:         }",
      "2805:         type Dog implements Animal {",
      "2806:             name: String",
      "2807:             breed: String",
      "2808:             friends: [Friend]",
      "2809:         }",
      "2810:         \"\"\"",
      "2812:         def garbageFields = IntStream.range(0, 1000)",
      "2813:                 .mapToObj {",
      "2814:                     \"\"\"test_$it: friends { name }\"\"\"",
      "2815:                 }",
      "2816:                 .collect(Collectors.joining(\"\\n\"))",
      "2818:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2820:         String query = \"\"\"",
      "2821:         {",
      "2822:             animal {",
      "2823:                 name",
      "2824:                 otherName: name",
      "2825:                 ... on Animal {",
      "2826:                     name",
      "2827:                 }",
      "2828:                 ... on Cat {",
      "2829:                     name",
      "2830:                     friends {",
      "2831:                         ... on Friend {",
      "2832:                             isCatOwner",
      "2833:                             pets {",
      "2834:                                 ... on Dog {",
      "2835:                                     name",
      "2836:                                 }",
      "2837:                             }",
      "2838:                         }",
      "2839:                     }",
      "2840:                 }",
      "2841:                 ... on Bird {",
      "2842:                     friends {",
      "2843:                         isBirdOwner",
      "2844:                     }",
      "2845:                     friends {",
      "2846:                         name",
      "2847:                         pets {",
      "2848:                             ... on Cat {",
      "2849:                                 breed",
      "2850:                             }",
      "2851:                         }",
      "2852:                     }",
      "2853:                 }",
      "2854:                 ... on Dog {",
      "2855:                     name",
      "2856:                 }",
      "2857:                 $garbageFields",
      "2858:             }",
      "2859:         }",
      "2860:         \"\"\"",
      "2862:         assertValidQuery(graphQLSchema, query)",
      "2864:         Document document = TestUtil.parseQuery(query)",
      "2866:         when:",
      "2867:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "2868:                 graphQLSchema,",
      "2869:                 document,",
      "2870:                 null,",
      "2871:                 RawVariables.emptyVariables(),",
      "2872:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxChildrenDepth(5))",
      "2874:         then:",
      "2875:         noExceptionThrown()",
      "2876:     }",
      "2878:     def \"big query exceeding fields count\"() {",
      "2879:         String schema = \"\"\"",
      "2880:         type Query {",
      "2881:             animal: Animal",
      "2882:         }",
      "2883:         interface Animal {",
      "2884:             name: String",
      "2885:             friends: [Friend]",
      "2886:         }",
      "2887:         union Pet = Dog | Cat",
      "2888:         type Friend {",
      "2889:             name: String",
      "2890:             isBirdOwner: Boolean",
      "2891:             isCatOwner: Boolean",
      "2892:             pets: [Pet]",
      "2893:         }",
      "2894:         type Bird implements Animal {",
      "2895:             name: String",
      "2896:             friends: [Friend]",
      "2897:         }",
      "2898:         type Cat implements Animal {",
      "2899:             name: String",
      "2900:             friends: [Friend]",
      "2901:             breed: String",
      "2902:         }",
      "2903:         type Dog implements Animal {",
      "2904:             name: String",
      "2905:             breed: String",
      "2906:             friends: [Friend]",
      "2907:         }",
      "2908:         \"\"\"",
      "2910:         def garbageFields = IntStream.range(0, 1000)",
      "2911:                 .mapToObj {",
      "2912:                     \"\"\"test_$it: friends { name }\"\"\"",
      "2913:                 }",
      "2914:                 .collect(Collectors.joining(\"\\n\"))",
      "2916:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2918:         String query = \"\"\"",
      "2919:         {",
      "2920:             animal {",
      "2921:                 name",
      "2922:                 otherName: name",
      "2923:                 ... on Animal {",
      "2924:                     name",
      "2925:                 }",
      "2926:                 ... on Cat {",
      "2927:                     name",
      "2928:                     friends {",
      "2929:                         ... on Friend {",
      "2930:                             isCatOwner",
      "2931:                             pets {",
      "2932:                                 ... on Dog {",
      "2933:                                     name",
      "2934:                                 }",
      "2935:                             }",
      "2936:                         }",
      "2937:                     }",
      "2938:                 }",
      "2939:                 ... on Bird {",
      "2940:                     friends {",
      "2941:                         isBirdOwner",
      "2942:                     }",
      "2943:                     friends {",
      "2944:                         name",
      "2945:                         pets {",
      "2946:                             ... on Cat {",
      "2947:                                 breed",
      "2948:                             }",
      "2949:                         }",
      "2950:                     }",
      "2951:                 }",
      "2952:                 ... on Dog {",
      "2953:                     name",
      "2954:                 }",
      "2955:                 $garbageFields",
      "2956:             }",
      "2957:         }",
      "2958:         \"\"\"",
      "2960:         assertValidQuery(graphQLSchema, query)",
      "2962:         Document document = TestUtil.parseQuery(query)",
      "2964:         when:",
      "2965:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "2966:                 graphQLSchema,",
      "2967:                 document,",
      "2968:                 null,",
      "2969:                 RawVariables.emptyVariables(),",
      "2970:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(2013))",
      "2972:         then:",
      "2973:         def e = thrown(AbortExecutionException)",
      "2974:         e.message == \"Maximum field count exceeded. 2014 > 2013\"",
      "2975:     }",
      "2977:     def \"small query exceeding fields count\"() {",
      "2978:         String schema = \"\"\"",
      "2979:         type Query {",
      "2980:             hello: String",
      "2981:         }",
      "2982:         \"\"\"",
      "2984:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2986:         String query = \"\"\" {hello a1: hello}\"\"\"",
      "2988:         assertValidQuery(graphQLSchema, query)",
      "2990:         Document document = TestUtil.parseQuery(query)",
      "2992:         when:",
      "2993:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "2994:                 graphQLSchema,",
      "2995:                 document,",
      "2996:                 null,",
      "2997:                 RawVariables.emptyVariables(),",
      "2998:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(1))",
      "3000:         then:",
      "3001:         def e = thrown(AbortExecutionException)",
      "3002:         e.message == \"Maximum field count exceeded. 2 > 1\"",
      "3005:     }",
      "3007:     def \"query not exceeding fields count\"() {",
      "3008:         String schema = \"\"\"",
      "3009:         type Query {",
      "3010:             dogs: [Dog]",
      "3011:         }",
      "3012:         type Dog {",
      "3013:             name: String",
      "3014:             breed: String",
      "3015:         }",
      "3016:         \"\"\"",
      "3018:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "3020:         String query = \"\"\" {dogs{name breed }}\"\"\"",
      "3022:         assertValidQuery(graphQLSchema, query)",
      "3024:         Document document = TestUtil.parseQuery(query)",
      "3026:         when:",
      "3027:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3028:                 graphQLSchema,",
      "3029:                 document,",
      "3030:                 null,",
      "3031:                 RawVariables.emptyVariables(),",
      "3032:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(3))",
      "3034:         then:",
      "3035:         notThrown(AbortExecutionException)",
      "3038:     }",
      "3040:     def \"query with meta fields exceeding fields count\"() {",
      "3041:         String schema = \"\"\"",
      "3042:         type Query {",
      "3043:             hello: String",
      "3044:         }",
      "3045:         \"\"\"",
      "3047:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "3049:         String query = IntrospectionQuery.INTROSPECTION_QUERY",
      "3051:         assertValidQuery(graphQLSchema, query)",
      "3053:         Document document = TestUtil.parseQuery(query)",
      "3055:         when:",
      "3056:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3057:                 graphQLSchema,",
      "3058:                 document,",
      "3059:                 null,",
      "3060:                 RawVariables.emptyVariables(),",
      "3063:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(187))",
      "3064:         println result.normalizedFieldToMergedField.size()",
      "3066:         then:",
      "3067:         def e = thrown(AbortExecutionException)",
      "3070:         e.message == \"Maximum field count exceeded. 188 > 187\"",
      "3071:     }",
      "3073:     def \"can capture depth and field count\"() {",
      "3074:         String schema = \"\"\"",
      "3075:         type Query {",
      "3076:             foo: Foo",
      "3077:         }",
      "3079:         type Foo {",
      "3080:             stop : String",
      "3081:             bar : Bar",
      "3082:         }",
      "3084:         type Bar {",
      "3085:             stop : String",
      "3086:             foo : Foo",
      "3087:         }",
      "3088:         \"\"\"",
      "3090:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "3092:         String query = \"{ foo { bar { foo { bar { foo { stop bar { stop }}}}}}}\"",
      "3094:         assertValidQuery(graphQLSchema, query)",
      "3096:         Document document = TestUtil.parseQuery(query)",
      "3098:         when:",
      "3099:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3100:                 graphQLSchema,",
      "3101:                 document,",
      "3102:                 null,",
      "3103:                 RawVariables.emptyVariables()",
      "3104:         )",
      "3106:         then:",
      "3107:         result.getOperationDepth() == 7",
      "3108:         result.getOperationFieldCount() == 8",
      "3109:     }",
      "3111:     private static ExecutableNormalizedOperation localCreateExecutableNormalizedOperation(",
      "3112:             GraphQLSchema graphQLSchema,",
      "3113:             Document document,",
      "3114:             String operationName,",
      "3115:             CoercedVariables coercedVariableValues",
      "3116:     ) {",
      "3118:         def options = ExecutableNormalizedOperationFactory.Options.defaultOptions()",
      "3120:         return ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, operationName, coercedVariableValues, options)",
      "3121:     }",
      "3123:     private static ExecutableNormalizedOperation localCreateExecutableNormalizedOperationWithRawVariables(",
      "3124:             GraphQLSchema graphQLSchema,",
      "3125:             Document document,",
      "3126:             String operationName,",
      "3127:             RawVariables rawVariables",
      "3128:     ) {",
      "3130:         def options = ExecutableNormalizedOperationFactory.Options.defaultOptions()",
      "3132:         return ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3133:                 graphQLSchema,",
      "3134:                 document,",
      "3135:                 operationName,",
      "3136:                 rawVariables,",
      "3137:                 options",
      "3138:         )",
      "3139:     }",
      "",
      "---------------"
    ],
    "src/test/java/benchmark/BenchmarkUtils.java||src/test/java/benchmark/BenchmarkUtils.java": [
      "File: src/test/java/benchmark/BenchmarkUtils.java -> src/test/java/benchmark/BenchmarkUtils.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package benchmark;",
      "6: import java.net.URL;",
      "7: import java.nio.charset.Charset;",
      "8: import java.util.concurrent.Callable;",
      "10: public class BenchmarkUtils {",
      "12:     static String loadResource(String name) {",
      "13:         return asRTE(() -> {",
      "14:             URL resource = BenchmarkUtils.class.getClassLoader().getResource(name);",
      "17:         });",
      "18:     }",
      "",
      "[Removed Lines]",
      "3: import com.google.common.io.Files;",
      "5: import java.io.File;",
      "15:             return String.join(\"\\n\", Files.readLines(new File(resource.toURI()), Charset.defaultCharset()));",
      "",
      "[Added Lines]",
      "3: import com.google.common.io.ByteStreams;",
      "5: import java.io.BufferedReader;",
      "6: import java.io.IOException;",
      "7: import java.io.InputStream;",
      "8: import java.io.InputStreamReader;",
      "11: import java.time.LocalDateTime;",
      "12: import java.time.format.DateTimeFormatter;",
      "17:     @SuppressWarnings(\"UnstableApiUsage\")",
      "21:             if (resource == null) {",
      "22:                 throw new IllegalArgumentException(\"missing resource: \" + name);",
      "23:             }",
      "24:             byte[] bytes;",
      "25:             try (InputStream inputStream = resource.openStream()) {",
      "27:                 bytes = ByteStreams.toByteArray(inputStream);",
      "28:             }",
      "29:             return new String(bytes, Charset.defaultCharset());",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "25:         }",
      "26:     }",
      "",
      "[Removed Lines]",
      "28: }",
      "",
      "[Added Lines]",
      "41:     public static void runInToolingForSomeTimeThenExit(Runnable setup, Runnable r, Runnable tearDown) {",
      "42:         int runForMillis = getRunForMillis();",
      "43:         if (runForMillis <= 0) {",
      "44:             System.out.print(\"'runForMillis' environment var is not set - continuing  \\n\");",
      "45:             return;",
      "46:         }",
      "47:         System.out.printf(\"Running initial code in some tooling - runForMillis=%d  \\n\", runForMillis);",
      "48:         System.out.print(\"Get your tooling in order and press enter...\");",
      "49:         readLine();",
      "50:         System.out.print(\"Lets go...\\n\");",
      "51:         setup.run();",
      "53:         DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"HH:mm:ss\");",
      "54:         long now, then = System.currentTimeMillis();",
      "55:         do {",
      "56:             now = System.currentTimeMillis();",
      "57:             long msLeft = runForMillis - (now - then);",
      "58:             System.out.printf(\"\\t%s Running in loop... %s ms left\\n\", dtf.format(LocalDateTime.now()), msLeft);",
      "59:             r.run();",
      "60:             now = System.currentTimeMillis();",
      "61:         } while ((now - then) < runForMillis);",
      "63:         tearDown.run();",
      "65:         System.out.printf(\"This ran for %d millis.  Exiting...\\n\", System.currentTimeMillis() - then);",
      "66:         System.exit(0);",
      "67:     }",
      "69:     private static void readLine() {",
      "70:         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));",
      "71:         try {",
      "72:             br.readLine();",
      "73:         } catch (IOException e) {",
      "74:             throw new RuntimeException(e);",
      "75:         }",
      "76:     }",
      "78:     private static int getRunForMillis() {",
      "79:         String runFor = System.getenv(\"runForMillis\");",
      "80:         try {",
      "81:             return Integer.parseInt(runFor);",
      "82:         } catch (NumberFormatException e) {",
      "83:             return -1;",
      "84:         }",
      "85:     }",
      "87: }",
      "",
      "---------------"
    ],
    "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java": [
      "File: src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java -> src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package benchmark;",
      "3: import graphql.execution.CoercedVariables;",
      "4: import graphql.language.Document;",
      "5: import graphql.normalized.ExecutableNormalizedOperation;",
      "6: import graphql.normalized.ExecutableNormalizedOperationFactory;",
      "7: import graphql.parser.Parser;",
      "8: import graphql.schema.GraphQLSchema;",
      "9: import graphql.schema.idl.SchemaGenerator;",
      "10: import org.openjdk.jmh.annotations.Benchmark;",
      "11: import org.openjdk.jmh.annotations.BenchmarkMode;",
      "12: import org.openjdk.jmh.annotations.Fork;",
      "13: import org.openjdk.jmh.annotations.Level;",
      "14: import org.openjdk.jmh.annotations.Measurement;",
      "15: import org.openjdk.jmh.annotations.Mode;",
      "16: import org.openjdk.jmh.annotations.OutputTimeUnit;",
      "17: import org.openjdk.jmh.annotations.Param;",
      "18: import org.openjdk.jmh.annotations.Scope;",
      "19: import org.openjdk.jmh.annotations.Setup;",
      "20: import org.openjdk.jmh.annotations.State;",
      "21: import org.openjdk.jmh.annotations.Warmup;",
      "22: import org.openjdk.jmh.runner.Runner;",
      "23: import org.openjdk.jmh.runner.RunnerException;",
      "24: import org.openjdk.jmh.runner.options.Options;",
      "25: import org.openjdk.jmh.runner.options.OptionsBuilder;",
      "27: import java.util.concurrent.TimeUnit;",
      "29: import static graphql.normalized.ExecutableNormalizedOperationFactory.*;",
      "31: @State(Scope.Benchmark)",
      "32: @Warmup(iterations = 2, time = 5)",
      "33: @Measurement(iterations = 3, time = 5)",
      "34: @Fork(2)",
      "35: public class ENFBenchmarkDeepIntrospection {",
      "37:     @Param({\"2\", \"10\", \"20\"})",
      "38:     int howDeep = 2;",
      "40:     String query = \"\";",
      "42:     GraphQLSchema schema;",
      "43:     Document document;",
      "45:     @Setup(Level.Trial)",
      "46:     public void setUp() {",
      "47:         String schemaString = BenchmarkUtils.loadResource(\"large-schema-2.graphqls\");",
      "48:         schema = SchemaGenerator.createdMockedSchema(schemaString);",
      "50:         query = createDeepQuery(howDeep);",
      "51:         document = Parser.parse(query);",
      "52:     }",
      "53:     @Benchmark",
      "54:     @BenchmarkMode(Mode.AverageTime)",
      "55:     @OutputTimeUnit(TimeUnit.MILLISECONDS)",
      "56:     public ExecutableNormalizedOperation benchMarkAvgTime() {",
      "57:         ExecutableNormalizedOperationFactory.Options options  = ExecutableNormalizedOperationFactory.Options.defaultOptions();",
      "58:         ExecutableNormalizedOperation executableNormalizedOperation = createExecutableNormalizedOperation(schema,",
      "59:                 document,",
      "60:                 null,",
      "61:                 CoercedVariables.emptyVariables(),",
      "62:                 options);",
      "63:         return executableNormalizedOperation;",
      "64:     }",
      "66:     public static void main(String[] args) throws RunnerException {",
      "67:         runAtStartup();",
      "69:         Options opt = new OptionsBuilder()",
      "70:                 .include(\"benchmark.ENFBenchmarkDeepIntrospection\")",
      "71:                 .build();",
      "73:         new Runner(opt).run();",
      "74:     }",
      "76:     private static void runAtStartup() {",
      "78:         ENFBenchmarkDeepIntrospection benchmarkIntrospection = new ENFBenchmarkDeepIntrospection();",
      "79:         benchmarkIntrospection.howDeep = 2;",
      "81:         BenchmarkUtils.runInToolingForSomeTimeThenExit(",
      "82:                 benchmarkIntrospection::setUp,",
      "83:                 () -> { while (true) { benchmarkIntrospection.benchMarkAvgTime(); }},",
      "84:                 () ->{}",
      "85:         );",
      "86:     }",
      "90:     private static String createDeepQuery(int depth) {",
      "91:         String result = \"query test {\\n\" +",
      "92:                 \"  __schema {\\n\" +",
      "93:                 \"    types {\\n\" +",
      "94:                 \"      ...F1\\n\" +",
      "95:                 \"    }\\n\" +",
      "96:                 \"  }\\n\" +",
      "97:                 \"}\\n\";",
      "99:         for (int i = 1; i < depth; i++) {",
      "100:             result += \"        fragment F\" + i + \" on __Type {\\n\" +",
      "101:                     \"          fields {\\n\" +",
      "102:                     \"            type {\\n\" +",
      "103:                     \"              ...F\" + (i + 1) +\"\\n\" +",
      "104:                     \"            }\\n\" +",
      "105:                     \"          }\\n\" +",
      "106:                     \"\\n\" +",
      "107:                     \"          ofType {\\n\" +",
      "108:                     \"            ...F\"+ (i + 1) + \"\\n\" +",
      "109:                     \"          }\\n\" +",
      "110:                     \"        }\\n\";",
      "111:         }",
      "112:         result += \"        fragment F\" + depth + \" on __Type {\\n\" +",
      "113:                 \"          fields {\\n\" +",
      "114:                 \"            type {\\n\" +",
      "115:                 \"name\\n\" +",
      "116:                 \"            }\\n\" +",
      "117:                 \"          }\\n\" +",
      "118:                 \"}\\n\";",
      "119:         return result;",
      "120:     }",
      "122: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0025495b5f0437a5de9b2dc875da826f7ebcfb19",
      "candidate_info": {
        "commit_hash": "0025495b5f0437a5de9b2dc875da826f7ebcfb19",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/0025495b5f0437a5de9b2dc875da826f7ebcfb19",
        "files": [
          "src/test/groovy/graphql/normalized/ExecutableNormalizedFieldTest.groovy",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryDeferTest.groovy",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerDeferTest.groovy",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerTest.groovy"
        ],
        "message": "WIP",
        "before_after_code_files": [
          "src/test/groovy/graphql/normalized/ExecutableNormalizedFieldTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedFieldTest.groovy",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryDeferTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryDeferTest.groovy",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerDeferTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerDeferTest.groovy",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
          ],
          "candidate": [
            "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
          ]
        }
      },
      "candidate_diff": {
        "src/test/groovy/graphql/normalized/ExecutableNormalizedFieldTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedFieldTest.groovy": [
          "File: src/test/groovy/graphql/normalized/ExecutableNormalizedFieldTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedFieldTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:         \"\"\"",
          "49:         Document document = TestUtil.parseQuery(query)",
          "54:         def pets = normalizedOperation.getTopLevelFields()[0]",
          "55:         def allChildren = pets.getChildren()",
          "",
          "[Removed Lines]",
          "51:         ExecutableNormalizedOperationFactory normalizedOperationFactory = new ExecutableNormalizedOperationFactory()",
          "52:         def normalizedOperation = normalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "51:         def normalizedOperation = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryDeferTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryDeferTest.groovy": [
          "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryDeferTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryDeferTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:         ]",
          "144:     }",
          "146:     def \"fragments on subset of non-conditional fields\"() {",
          "147:         given:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:     def \"fragments on non-conditional fields - andi\"() {",
          "147:         given:",
          "149:         String query = '''",
          "150:           query q {",
          "151:   dog {",
          "152:     ... @defer {",
          "153:       name",
          "154:       age",
          "155:     }",
          "156:     ... @defer {",
          "157:       age",
          "158:     }",
          "159:   }",
          "160:           }",
          "161:         '''",
          "163:         Map<String, Object> variables = [:]",
          "165:         when:",
          "166:         List<String> printedTree = executeQueryAndPrintTree(query, variables)",
          "168:         then:",
          "169:         printedTree == ['Query.dog',",
          "170:                         \"Dog.name defer{[label=null;types=[Dog]]}\",",
          "171:                         \"Dog.age defer{[label=null;types=[Dog]],[label=null;types=[Dog]]}\",",
          "172:         ]",
          "173:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "839:     private ExecutableNormalizedOperation createExecutableNormalizedOperations(String query, Map<String, Object> variables) {",
          "840:         assertValidQuery(graphQLSchema, query, variables)",
          "841:         Document document = TestUtil.parseQuery(query)",
          "845:                 graphQLSchema,",
          "846:                 document,",
          "847:                 null,",
          "",
          "[Removed Lines]",
          "842:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "844:         return dependencyGraph.createExecutableNormalizedOperationWithRawVariables(",
          "",
          "[Added Lines]",
          "872:         return ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "853:     private List<String> executeQueryAndPrintTree(String query, Map<String, Object> variables) {",
          "854:         assertValidQuery(graphQLSchema, query, variables)",
          "855:         Document document = TestUtil.parseQuery(query)",
          "859:                 graphQLSchema,",
          "860:                 document,",
          "861:                 null,",
          "",
          "[Removed Lines]",
          "856:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "858:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(",
          "",
          "[Added Lines]",
          "885:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy": [
          "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:         Document document = TestUtil.parseQuery(query)",
          "204:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "205:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "",
          "[Removed Lines]",
          "203:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281:         Document document = TestUtil.parseQuery(query)",
          "284:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "285:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "",
          "[Removed Lines]",
          "283:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "332:         Document document = TestUtil.parseQuery(query)",
          "335:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "336:         def printedTree = printTree(tree)",
          "",
          "[Removed Lines]",
          "334:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "375:         Document document = TestUtil.parseQuery(query)",
          "378:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "379:         def printedTree = printTree(tree)",
          "",
          "[Removed Lines]",
          "377:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "425:         Document document = TestUtil.parseQuery(query)",
          "428:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "429:         def printedTree = printTree(tree)",
          "",
          "[Removed Lines]",
          "427:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "488:         Document document = TestUtil.parseQuery(query)",
          "491:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "492:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "",
          "[Removed Lines]",
          "490:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "534:         Document document = TestUtil.parseQuery(query)",
          "537:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "538:         def printedTree = printTree(tree)",
          "",
          "[Removed Lines]",
          "536:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "578:         Document document = TestUtil.parseQuery(query)",
          "581:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "582:         def printedTree = printTree(tree)",
          "",
          "[Removed Lines]",
          "580:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "622:         Document document = TestUtil.parseQuery(query)",
          "625:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "626:         def printedTree = printTree(tree)",
          "",
          "[Removed Lines]",
          "624:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "654:         Document document = TestUtil.parseQuery(query)",
          "657:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "658:         def printedTree = printTree(tree)",
          "",
          "[Removed Lines]",
          "656:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "705:         Document document = TestUtil.parseQuery(query)",
          "708:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "709:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "",
          "[Removed Lines]",
          "707:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "755:         Document document = TestUtil.parseQuery(query)",
          "758:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "759:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "",
          "[Removed Lines]",
          "757:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "794:         Document document = TestUtil.parseQuery(query)",
          "797:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "798:         def printedTree = printTree(tree)",
          "",
          "[Removed Lines]",
          "796:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "838:         Document document = TestUtil.parseQuery(query)",
          "841:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "842:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "",
          "[Removed Lines]",
          "840:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "878:         Document document = TestUtil.parseQuery(query)",
          "881:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "882:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "",
          "[Removed Lines]",
          "880:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "926:         Document document = TestUtil.parseQuery(query)",
          "929:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "930:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "",
          "[Removed Lines]",
          "928:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1028:         Document document = TestUtil.parseQuery(query)",
          "1029:         def subFooField = (document.getDefinitions()[1] as FragmentDefinition).getSelectionSet().getSelections()[0] as Field",
          "1032:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "1033:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
          "",
          "[Removed Lines]",
          "1031:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1071:         def petsField = (document.getDefinitions()[0] as OperationDefinition).getSelectionSet().getSelections()[0] as Field",
          "1072:         def idField = petsField.getSelectionSet().getSelections()[0] as Field",
          "1075:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "1076:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
          "",
          "[Removed Lines]",
          "1074:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1120:         def schemaField = selections[2] as Field",
          "1121:         def typeField = selections[3] as Field",
          "1124:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "1125:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
          "",
          "[Removed Lines]",
          "1123:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1178:         Document document = TestUtil.parseQuery(query)",
          "1181:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "1182:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "",
          "[Removed Lines]",
          "1180:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1221:         Document document = TestUtil.parseQuery(query)",
          "1224:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "1225:         def printedTree = printTree(tree)",
          "",
          "[Removed Lines]",
          "1223:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1249:         Document document = TestUtil.parseQuery(query)",
          "1252:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "1253:         def normalizedFieldToMergedField = tree.getNormalizedFieldToMergedField()",
          "1254:         Traverser<ExecutableNormalizedField> traverser = Traverser.depthFirst({ it.getChildren() })",
          "",
          "[Removed Lines]",
          "1251:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1287:         Document document = TestUtil.parseQuery(query)",
          "1291:         when:",
          "1292:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Removed Lines]",
          "1289:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1388:         Document document = TestUtil.parseQuery(mutation)",
          "1391:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "1392:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "",
          "[Removed Lines]",
          "1390:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1438:         assertValidQuery(graphQLSchema, query)",
          "1439:         Document document = TestUtil.parseQuery(query)",
          "1441:         def variables = [",
          "1442:                 var1: [bar: 123],",
          "1443:                 var2: [foo: \"foo\", input2: [bar: 123]]",
          "",
          "[Removed Lines]",
          "1440:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1485:         assertValidQuery(graphQLSchema, query)",
          "1486:         def document = TestUtil.parseQuery(query)",
          "1488:         when:",
          "1489:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "[Removed Lines]",
          "1487:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1520:         assertValidQuery(graphQLSchema, query)",
          "1521:         def document = TestUtil.parseQuery(query)",
          "1523:         def variables = [",
          "1524:                 varIds  : null,",
          "1525:                 otherVar: null,",
          "",
          "[Removed Lines]",
          "1522:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1575:         ]",
          "1576:         assertValidQuery(graphQLSchema, query, variables)",
          "1577:         Document document = TestUtil.parseQuery(query)",
          "1579:         when:",
          "1580:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "1581:         def topLevelField = tree.getTopLevelFields().get(0)",
          "",
          "[Removed Lines]",
          "1578:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1628:         ]",
          "1629:         assertValidQuery(graphQLSchema, query, variables)",
          "1630:         Document document = TestUtil.parseQuery(query)",
          "1632:         when:",
          "1633:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "1634:         def topLevelField = tree.getTopLevelFields().get(0)",
          "",
          "[Removed Lines]",
          "1631:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1683:         '''",
          "1684:         assertValidQuery(graphQLSchema, query)",
          "1685:         Document document = TestUtil.parseQuery(query)",
          "1687:         when:",
          "1688:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "[Removed Lines]",
          "1686:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1741:         '''",
          "1742:         assertValidQuery(graphQLSchema, query)",
          "1743:         Document document = TestUtil.parseQuery(query)",
          "1745:         when:",
          "1746:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "1747:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "",
          "[Removed Lines]",
          "1744:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1789:         '''",
          "1790:         assertValidQuery(graphQLSchema, query)",
          "1791:         Document document = TestUtil.parseQuery(query)",
          "1793:         when:",
          "1794:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "1795:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "",
          "[Removed Lines]",
          "1792:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1865:         '''",
          "1866:         assertValidQuery(schema, query)",
          "1867:         Document document = TestUtil.parseQuery(query)",
          "1869:         when:",
          "1870:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "1871:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "",
          "[Removed Lines]",
          "1868:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1929:         '''",
          "1930:         assertValidQuery(schema, query)",
          "1931:         Document document = TestUtil.parseQuery(query)",
          "1933:         when:",
          "1934:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "1935:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "",
          "[Removed Lines]",
          "1932:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1986:         '''",
          "1987:         assertValidQuery(schema, query)",
          "1988:         Document document = TestUtil.parseQuery(query)",
          "1990:         when:",
          "1991:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "1992:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "",
          "[Removed Lines]",
          "1989:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2061:         '''",
          "2062:         assertValidQuery(schema, query)",
          "2063:         Document document = TestUtil.parseQuery(query)",
          "2065:         when:",
          "2066:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "2067:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "",
          "[Removed Lines]",
          "2064:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2123:         '''",
          "2124:         assertValidQuery(schema, query)",
          "2125:         Document document = TestUtil.parseQuery(query)",
          "2127:         when:",
          "2128:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "2129:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "",
          "[Removed Lines]",
          "2126:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2165:         '''",
          "2166:         assertValidQuery(schema, query)",
          "2167:         Document document = TestUtil.parseQuery(query)",
          "2169:         when:",
          "2170:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "2171:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "",
          "[Removed Lines]",
          "2168:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2208:         '''",
          "2209:         assertValidQuery(schema, query)",
          "2210:         Document document = TestUtil.parseQuery(query)",
          "2212:         when:",
          "2213:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "2214:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "",
          "[Removed Lines]",
          "2211:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2251:         '''",
          "2252:         assertValidQuery(schema, query)",
          "2253:         Document document = TestUtil.parseQuery(query)",
          "2255:         when:",
          "2256:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "2257:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "",
          "[Removed Lines]",
          "2254:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2326:         '''",
          "2327:         assertValidQuery(schema, query)",
          "2328:         Document document = TestUtil.parseQuery(query)",
          "2330:         when:",
          "2331:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "2332:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "",
          "[Removed Lines]",
          "2329:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2402:         '''",
          "2403:         assertValidQuery(schema, query)",
          "2404:         Document document = TestUtil.parseQuery(query)",
          "2406:         when:",
          "2407:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "2408:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "",
          "[Removed Lines]",
          "2405:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2464:         def variables = [\"true\": Boolean.TRUE, \"false\": Boolean.FALSE]",
          "2465:         assertValidQuery(graphQLSchema, query, variables)",
          "2466:         Document document = TestUtil.parseQuery(query)",
          "2468:         when:",
          "2469:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "2470:         println String.join(\"\\n\", printTree(tree))",
          "",
          "[Removed Lines]",
          "2467:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2521:         def variables = [:]",
          "2522:         assertValidQuery(graphQLSchema, query, variables)",
          "2523:         Document document = TestUtil.parseQuery(query)",
          "2525:         when:",
          "2526:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "2527:         def printedTree = printTreeAndDirectives(tree)",
          "",
          "[Removed Lines]",
          "2524:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2587:         Document document = TestUtil.parseQuery(query)",
          "2590:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "2591:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "",
          "[Removed Lines]",
          "2589:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2640:         Document document = TestUtil.parseQuery(query)",
          "2643:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "2644:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "",
          "[Removed Lines]",
          "2642:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2687:         Document document = TestUtil.parseQuery(query)",
          "2690:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "2691:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "",
          "[Removed Lines]",
          "2689:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2884:             String operationName,",
          "2885:             CoercedVariables coercedVariableValues",
          "2886:     ) {",
          "2888:         def options = ExecutableNormalizedOperationFactory.Options.defaultOptions().deferSupport(deferSupport)",
          "2891:     }",
          "2893:     private static ExecutableNormalizedOperation localCreateExecutableNormalizedOperationWithRawVariables(",
          "",
          "[Removed Lines]",
          "2887:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2890:         return dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, operationName, coercedVariableValues, options)",
          "",
          "[Added Lines]",
          "2876:         return ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, operationName, coercedVariableValues, options)",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2896:             String operationName,",
          "2897:             RawVariables rawVariables",
          "2898:     ) {",
          "2900:         def options = ExecutableNormalizedOperationFactory.Options.defaultOptions().deferSupport(deferSupport)",
          "2903:                 graphQLSchema,",
          "2904:                 document,",
          "2905:                 operationName,",
          "",
          "[Removed Lines]",
          "2899:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2902:         return dependencyGraph.createExecutableNormalizedOperationWithRawVariables(",
          "",
          "[Added Lines]",
          "2888:         return ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerDeferTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerDeferTest.groovy": [
          "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerDeferTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerDeferTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "491:         assertValidQuery(schema, query, variables)",
          "492:         Document originalDocument = TestUtil.parseQuery(query)",
          "495:         def options = ExecutableNormalizedOperationFactory.Options.defaultOptions().deferSupport(true)",
          "497:                 schema,",
          "498:                 originalDocument,",
          "499:                 null,",
          "",
          "[Removed Lines]",
          "494:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "496:         return dependencyGraph.createExecutableNormalizedOperationWithRawVariables(",
          "",
          "[Added Lines]",
          "495:         return ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerTest.groovy": [
          "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "2145:         assertValidQuery(schema, query, variables)",
          "2146:         Document originalDocument = TestUtil.parseQuery(query)",
          "2149:         def options = ExecutableNormalizedOperationFactory.Options.defaultOptions().deferSupport(deferSupport)",
          "2151:     }",
          "2153:     private List<ExecutableNormalizedField> createNormalizedFields(GraphQLSchema schema, String query, Map<String, Object> variables = [:]) {",
          "",
          "[Removed Lines]",
          "2148:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2150:         return dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, originalDocument, null, RawVariables.of(variables), options)",
          "",
          "[Added Lines]",
          "2149:         return ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, originalDocument, null, RawVariables.of(variables), options)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea786d6d95aa435c52c9368deb4673f17649566b",
      "candidate_info": {
        "commit_hash": "ea786d6d95aa435c52c9368deb4673f17649566b",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/ea786d6d95aa435c52c9368deb4673f17649566b",
        "files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/main/java/graphql/normalized/FieldCollectorNormalizedQueryParams.java",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedFieldTest.groovy",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerTest.groovy"
        ],
        "message": "Refactor ENF Factory - Create an inner class to maintain state, so we don't need to pass variables around that much",
        "before_after_code_files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/main/java/graphql/normalized/FieldCollectorNormalizedQueryParams.java||src/main/java/graphql/normalized/FieldCollectorNormalizedQueryParams.java",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedFieldTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedFieldTest.groovy",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
            "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
          ],
          "candidate": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
            "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java": [
          "File: src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import graphql.schema.GraphQLObjectType;",
          "35: import graphql.schema.GraphQLSchema;",
          "36: import graphql.schema.GraphQLType;",
          "38: import graphql.schema.GraphQLUnionType;",
          "39: import graphql.schema.GraphQLUnmodifiedType;",
          "40: import graphql.schema.impl.SchemaUtil;",
          "",
          "[Removed Lines]",
          "37: import graphql.schema.GraphQLTypeUtil;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:         }",
          "146:     }",
          "",
          "[Removed Lines]",
          "148:     private final ConditionalNodes conditionalNodes = new ConditionalNodes();",
          "",
          "[Added Lines]",
          "155:     private static final ConditionalNodes conditionalNodes = new ConditionalNodes();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "165:             CoercedVariables coercedVariableValues",
          "166:     ) {",
          "167:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
          "169:                 getOperationResult.operationDefinition,",
          "170:                 getOperationResult.fragmentsByName,",
          "174:     }",
          "",
          "[Removed Lines]",
          "168:         return new ExecutableNormalizedOperationFactory().createNormalizedQueryImpl(graphQLSchema,",
          "171:                 coercedVariableValues,",
          "172:                 null,",
          "173:                 Options.defaultOptions());",
          "",
          "[Added Lines]",
          "176:         return createExecutableNormalizedOperation(",
          "177:                 graphQLSchema,",
          "180:                 coercedVariableValues",
          "181:         );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "188:                                                                                     OperationDefinition operationDefinition,",
          "189:                                                                                     Map<String, FragmentDefinition> fragments,",
          "190:                                                                                     CoercedVariables coercedVariableValues) {",
          "192:                 operationDefinition,",
          "193:                 fragments,",
          "194:                 coercedVariableValues,",
          "195:                 null,",
          "197:     }",
          "",
          "[Removed Lines]",
          "191:         return new ExecutableNormalizedOperationFactory().createNormalizedQueryImpl(graphQLSchema,",
          "196:                 Options.defaultOptions());",
          "",
          "[Added Lines]",
          "199:         return new ExecutableNormalizedOperationFactoryInner(",
          "200:                 graphQLSchema,",
          "205:                 Options.defaultOptions()",
          "206:         ).createNormalizedQueryImpl();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "267:                                                                                                     RawVariables rawVariables,",
          "268:                                                                                                     Options options) {",
          "269:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
          "284:         List<VariableDefinition> variableDefinitions = operationDefinition.getVariableDefinitions();",
          "285:         CoercedVariables coercedVariableValues = ValuesResolver.coerceVariableValues(graphQLSchema,",
          "286:                 variableDefinitions,",
          "",
          "[Removed Lines]",
          "271:         return new ExecutableNormalizedOperationFactory().createExecutableNormalizedOperationImplWithRawVariables(graphQLSchema,",
          "272:                 getOperationResult.operationDefinition,",
          "273:                 getOperationResult.fragmentsByName,",
          "274:                 rawVariables,",
          "275:                 options",
          "276:         );",
          "277:     }",
          "279:     private ExecutableNormalizedOperation createExecutableNormalizedOperationImplWithRawVariables(GraphQLSchema graphQLSchema,",
          "280:                                                                                                   OperationDefinition operationDefinition,",
          "281:                                                                                                   Map<String, FragmentDefinition> fragments,",
          "282:                                                                                                   RawVariables rawVariables,",
          "283:                                                                                                   Options options) {",
          "",
          "[Added Lines]",
          "280:         OperationDefinition operationDefinition = getOperationResult.operationDefinition;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "292:                 rawVariables,",
          "293:                 options.getGraphQLContext(),",
          "294:                 options.getLocale());",
          "296:                 operationDefinition,",
          "298:                 coercedVariableValues,",
          "299:                 normalizedVariableValues,",
          "368:     }",
          "381:         }",
          "415:         }",
          "455:         }",
          "461:             }",
          "470:         }",
          "484:         }",
          "519:                 }",
          "522:                 }",
          "527:             }",
          "528:         }",
          "567:         }",
          "584:         }",
          "602:             }",
          "615:         }",
          "623:         }",
          "659:         }",
          "667:         }",
          "686:         }",
          "697:         }",
          "710:             }",
          "711:         }",
          "726:         }",
          "727:     }",
          "728: }",
          "",
          "[Removed Lines]",
          "295:         return createNormalizedQueryImpl(graphQLSchema,",
          "297:                 fragments,",
          "300:                 options);",
          "301:     }",
          "306:     private ExecutableNormalizedOperation createNormalizedQueryImpl(GraphQLSchema graphQLSchema,",
          "307:                                                                     OperationDefinition operationDefinition,",
          "308:                                                                     Map<String, FragmentDefinition> fragments,",
          "309:                                                                     CoercedVariables coercedVariableValues,",
          "310:                                                                     @Nullable Map<String, NormalizedInputValue> normalizedVariableValues,",
          "311:                                                                     Options options) {",
          "312:         FieldCollectorNormalizedQueryParams parameters = FieldCollectorNormalizedQueryParams",
          "313:                 .newParameters()",
          "314:                 .fragments(fragments)",
          "315:                 .schema(graphQLSchema)",
          "316:                 .coercedVariables(coercedVariableValues.toMap())",
          "317:                 .normalizedVariables(normalizedVariableValues)",
          "318:                 .build();",
          "320:         GraphQLObjectType rootType = SchemaUtil.getOperationRootType(graphQLSchema, operationDefinition);",
          "322:         CollectNFResult collectFromOperationResult = collectFromOperation(parameters, operationDefinition, rootType);",
          "324:         ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField = ImmutableListMultimap.builder();",
          "325:         ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField = ImmutableMap.builder();",
          "326:         ImmutableMap.Builder<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives = ImmutableMap.builder();",
          "327:         ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
          "329:         BiConsumer<ExecutableNormalizedField, MergedField> captureMergedField = (enf, mergedFld) -> {",
          "331:             QueryDirectives queryDirectives = new QueryDirectivesImpl(mergedFld, graphQLSchema, coercedVariableValues.toMap(), options.getGraphQLContext(), options.getLocale());",
          "332:             normalizedFieldToQueryDirectives.put(enf, queryDirectives);",
          "333:             normalizedFieldToMergedField.put(enf, mergedFld);",
          "334:         };",
          "336:         for (ExecutableNormalizedField topLevel : collectFromOperationResult.children) {",
          "337:             ImmutableList<FieldAndAstParent> fieldAndAstParents = collectFromOperationResult.normalizedFieldToAstFields.get(topLevel);",
          "338:             MergedField mergedField = newMergedField(fieldAndAstParents);",
          "340:             captureMergedField.accept(topLevel, mergedField);",
          "342:             updateFieldToNFMap(topLevel, fieldAndAstParents, fieldToNormalizedField);",
          "343:             updateCoordinatedToNFMap(coordinatesToNormalizedFields, topLevel);",
          "345:             buildFieldWithChildren(",
          "346:                     topLevel,",
          "347:                     fieldAndAstParents,",
          "348:                     parameters,",
          "349:                     fieldToNormalizedField,",
          "350:                     captureMergedField,",
          "351:                     coordinatesToNormalizedFields,",
          "352:                     1,",
          "353:                     options.getMaxChildrenDepth());",
          "354:         }",
          "355:         for (FieldCollectorNormalizedQueryParams.PossibleMerger possibleMerger : parameters.getPossibleMergerList()) {",
          "356:             List<ExecutableNormalizedField> childrenWithSameResultKey = possibleMerger.parent.getChildrenWithSameResultKey(possibleMerger.resultKey);",
          "357:             ENFMerger.merge(possibleMerger.parent, childrenWithSameResultKey, graphQLSchema);",
          "358:         }",
          "359:         return new ExecutableNormalizedOperation(",
          "360:                 operationDefinition.getOperation(),",
          "361:                 operationDefinition.getName(),",
          "362:                 new ArrayList<>(collectFromOperationResult.children),",
          "363:                 fieldToNormalizedField.build(),",
          "364:                 normalizedFieldToMergedField.build(),",
          "365:                 normalizedFieldToQueryDirectives.build(),",
          "366:                 coordinatesToNormalizedFields.build()",
          "367:         );",
          "371:     private void buildFieldWithChildren(ExecutableNormalizedField executableNormalizedField,",
          "372:                                         ImmutableList<FieldAndAstParent> fieldAndAstParents,",
          "373:                                         FieldCollectorNormalizedQueryParams fieldCollectorNormalizedQueryParams,",
          "374:                                         ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldNormalizedField,",
          "375:                                         BiConsumer<ExecutableNormalizedField, MergedField> captureMergedField,",
          "376:                                         ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields,",
          "377:                                         int curLevel,",
          "378:                                         int maxLevel) {",
          "379:         if (curLevel > maxLevel) {",
          "380:             throw new AbortExecutionException(\"Maximum query depth exceeded \" + curLevel + \" > \" + maxLevel);",
          "383:         CollectNFResult nextLevel = collectFromMergedField(fieldCollectorNormalizedQueryParams, executableNormalizedField, fieldAndAstParents, curLevel + 1);",
          "385:         for (ExecutableNormalizedField childENF : nextLevel.children) {",
          "386:             executableNormalizedField.addChild(childENF);",
          "387:             ImmutableList<FieldAndAstParent> childFieldAndAstParents = nextLevel.normalizedFieldToAstFields.get(childENF);",
          "389:             MergedField mergedField = newMergedField(childFieldAndAstParents);",
          "390:             captureMergedField.accept(childENF, mergedField);",
          "392:             updateFieldToNFMap(childENF, childFieldAndAstParents, fieldNormalizedField);",
          "393:             updateCoordinatedToNFMap(coordinatesToNormalizedFields, childENF);",
          "395:             buildFieldWithChildren(childENF,",
          "396:                     childFieldAndAstParents,",
          "397:                     fieldCollectorNormalizedQueryParams,",
          "398:                     fieldNormalizedField,",
          "399:                     captureMergedField,",
          "400:                     coordinatesToNormalizedFields,",
          "401:                     curLevel + 1,",
          "402:                     maxLevel);",
          "403:         }",
          "404:     }",
          "406:     private static MergedField newMergedField(ImmutableList<FieldAndAstParent> fieldAndAstParents) {",
          "407:         return MergedField.newMergedField(map(fieldAndAstParents, fieldAndAstParent -> fieldAndAstParent.field)).build();",
          "408:     }",
          "410:     private void updateFieldToNFMap(ExecutableNormalizedField executableNormalizedField,",
          "411:                                     ImmutableList<FieldAndAstParent> mergedField,",
          "412:                                     ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField) {",
          "413:         for (FieldAndAstParent astField : mergedField) {",
          "414:             fieldToNormalizedField.put(astField.field, executableNormalizedField);",
          "416:     }",
          "418:     private void updateCoordinatedToNFMap(ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields, ExecutableNormalizedField topLevel) {",
          "419:         for (String objectType : topLevel.getObjectTypeNames()) {",
          "420:             FieldCoordinates coordinates = FieldCoordinates.coordinates(objectType, topLevel.getFieldName());",
          "421:             coordinatesToNormalizedFields.put(coordinates, topLevel);",
          "422:         }",
          "423:     }",
          "425:     private static class FieldAndAstParent {",
          "426:         final Field field;",
          "427:         final GraphQLCompositeType astParentType;",
          "429:         private FieldAndAstParent(Field field, GraphQLCompositeType astParentType) {",
          "430:             this.field = field;",
          "431:             this.astParentType = astParentType;",
          "432:         }",
          "433:     }",
          "436:     public static class CollectNFResult {",
          "437:         private final Collection<ExecutableNormalizedField> children;",
          "438:         private final ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields;",
          "440:         public CollectNFResult(Collection<ExecutableNormalizedField> children, ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields) {",
          "441:             this.children = children;",
          "442:             this.normalizedFieldToAstFields = normalizedFieldToAstFields;",
          "443:         }",
          "444:     }",
          "447:     public CollectNFResult collectFromMergedField(FieldCollectorNormalizedQueryParams parameters,",
          "448:                                                   ExecutableNormalizedField executableNormalizedField,",
          "449:                                                   ImmutableList<FieldAndAstParent> mergedField,",
          "450:                                                   int level) {",
          "451:         List<GraphQLFieldDefinition> fieldDefs = executableNormalizedField.getFieldDefinitions(parameters.getGraphQLSchema());",
          "452:         Set<GraphQLObjectType> possibleObjects = resolvePossibleObjects(fieldDefs, parameters.getGraphQLSchema());",
          "453:         if (possibleObjects.isEmpty()) {",
          "454:             return new CollectNFResult(ImmutableKit.emptyList(), ImmutableListMultimap.of());",
          "457:         List<CollectedField> collectedFields = new ArrayList<>();",
          "458:         for (FieldAndAstParent fieldAndAstParent : mergedField) {",
          "459:             if (fieldAndAstParent.field.getSelectionSet() == null) {",
          "460:                 continue;",
          "462:             GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(parameters.getGraphQLSchema(), fieldAndAstParent.astParentType, fieldAndAstParent.field.getName());",
          "463:             GraphQLUnmodifiedType astParentType = unwrapAll(fieldDefinition.getType());",
          "464:             this.collectFromSelectionSet(parameters,",
          "465:                     fieldAndAstParent.field.getSelectionSet(),",
          "466:                     collectedFields,",
          "467:                     (GraphQLCompositeType) astParentType,",
          "468:                     possibleObjects",
          "469:             );",
          "471:         Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
          "472:         ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
          "473:         ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
          "475:         createNFs(resultNFs, parameters, fieldsByName, normalizedFieldToAstFields, level, executableNormalizedField);",
          "477:         return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
          "478:     }",
          "480:     private Map<String, List<CollectedField>> fieldsByResultKey(List<CollectedField> collectedFields) {",
          "481:         Map<String, List<CollectedField>> fieldsByName = new LinkedHashMap<>();",
          "482:         for (CollectedField collectedField : collectedFields) {",
          "483:             fieldsByName.computeIfAbsent(collectedField.field.getResultKey(), ignored -> new ArrayList<>()).add(collectedField);",
          "485:         return fieldsByName;",
          "486:     }",
          "488:     public CollectNFResult collectFromOperation(FieldCollectorNormalizedQueryParams parameters,",
          "489:                                                 OperationDefinition operationDefinition,",
          "490:                                                 GraphQLObjectType rootType) {",
          "493:         Set<GraphQLObjectType> possibleObjects = ImmutableSet.of(rootType);",
          "494:         List<CollectedField> collectedFields = new ArrayList<>();",
          "495:         collectFromSelectionSet(parameters, operationDefinition.getSelectionSet(), collectedFields, rootType, possibleObjects);",
          "497:         Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
          "498:         ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
          "499:         ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
          "501:         createNFs(resultNFs, parameters, fieldsByName, normalizedFieldToAstFields, 1, null);",
          "503:         return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
          "504:     }",
          "506:     private void createNFs(ImmutableList.Builder<ExecutableNormalizedField> nfListBuilder,",
          "507:                            FieldCollectorNormalizedQueryParams parameters,",
          "508:                            Map<String, List<CollectedField>> fieldsByName,",
          "509:                            ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields,",
          "510:                            int level,",
          "511:                            ExecutableNormalizedField parent) {",
          "512:         for (String resultKey : fieldsByName.keySet()) {",
          "513:             List<CollectedField> fieldsWithSameResultKey = fieldsByName.get(resultKey);",
          "514:             List<CollectedFieldGroup> commonParentsGroups = groupByCommonParents(fieldsWithSameResultKey);",
          "515:             for (CollectedFieldGroup fieldGroup : commonParentsGroups) {",
          "516:                 ExecutableNormalizedField nf = createNF(parameters, fieldGroup, level, parent);",
          "517:                 if (nf == null) {",
          "518:                     continue;",
          "520:                 for (CollectedField collectedField : fieldGroup.fields) {",
          "521:                     normalizedFieldToAstFields.put(nf, new FieldAndAstParent(collectedField.field, collectedField.astTypeCondition));",
          "523:                 nfListBuilder.add(nf);",
          "524:             }",
          "525:             if (commonParentsGroups.size() > 1) {",
          "526:                 parameters.addPossibleMergers(parent, resultKey);",
          "529:     }",
          "531:     private ExecutableNormalizedField createNF(FieldCollectorNormalizedQueryParams parameters,",
          "532:                                                CollectedFieldGroup collectedFieldGroup,",
          "533:                                                int level,",
          "534:                                                ExecutableNormalizedField parent) {",
          "535:         Field field;",
          "536:         Set<GraphQLObjectType> objectTypes = collectedFieldGroup.objectTypes;",
          "537:         field = collectedFieldGroup.fields.iterator().next().field;",
          "538:         String fieldName = field.getName();",
          "539:         GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(parameters.getGraphQLSchema(), objectTypes.iterator().next(), fieldName);",
          "541:         Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(fieldDefinition.getArguments(), field.getArguments(), CoercedVariables.of(parameters.getCoercedVariableValues()), parameters.getGraphQLContext(), parameters.getLocale());",
          "542:         Map<String, NormalizedInputValue> normalizedArgumentValues = null;",
          "543:         if (parameters.getNormalizedVariableValues() != null) {",
          "544:             normalizedArgumentValues = ValuesResolver.getNormalizedArgumentValues(fieldDefinition.getArguments(), field.getArguments(), parameters.getNormalizedVariableValues());",
          "545:         }",
          "546:         ImmutableList<String> objectTypeNames = map(objectTypes, GraphQLObjectType::getName);",
          "548:         return ExecutableNormalizedField.newNormalizedField()",
          "549:                 .alias(field.getAlias())",
          "550:                 .resolvedArguments(argumentValues)",
          "551:                 .normalizedArguments(normalizedArgumentValues)",
          "552:                 .astArguments(field.getArguments())",
          "553:                 .objectTypeNames(objectTypeNames)",
          "554:                 .fieldName(fieldName)",
          "555:                 .level(level)",
          "556:                 .parent(parent)",
          "557:                 .build();",
          "558:     }",
          "560:     private static class CollectedFieldGroup {",
          "561:         Set<GraphQLObjectType> objectTypes;",
          "562:         Set<CollectedField> fields;",
          "564:         public CollectedFieldGroup(Set<CollectedField> fields, Set<GraphQLObjectType> objectTypes) {",
          "565:             this.fields = fields;",
          "566:             this.objectTypes = objectTypes;",
          "568:     }",
          "570:     private List<CollectedFieldGroup> groupByCommonParents(Collection<CollectedField> fields) {",
          "571:         ImmutableSet.Builder<GraphQLObjectType> objectTypes = ImmutableSet.builder();",
          "572:         for (CollectedField collectedField : fields) {",
          "573:             objectTypes.addAll(collectedField.objectTypes);",
          "574:         }",
          "575:         Set<GraphQLObjectType> allRelevantObjects = objectTypes.build();",
          "576:         Map<GraphQLType, ImmutableList<CollectedField>> groupByAstParent = groupingBy(fields, fieldAndType -> fieldAndType.astTypeCondition);",
          "577:         if (groupByAstParent.size() == 1) {",
          "578:             return singletonList(new CollectedFieldGroup(ImmutableSet.copyOf(fields), allRelevantObjects));",
          "579:         }",
          "580:         ImmutableList.Builder<CollectedFieldGroup> result = ImmutableList.builder();",
          "581:         for (GraphQLObjectType objectType : allRelevantObjects) {",
          "582:             Set<CollectedField> relevantFields = filterSet(fields, field -> field.objectTypes.contains(objectType));",
          "583:             result.add(new CollectedFieldGroup(relevantFields, singleton(objectType)));",
          "585:         return result.build();",
          "586:     }",
          "589:     private void collectFromSelectionSet(FieldCollectorNormalizedQueryParams parameters,",
          "590:                                          SelectionSet selectionSet,",
          "591:                                          List<CollectedField> result,",
          "592:                                          GraphQLCompositeType astTypeCondition,",
          "593:                                          Set<GraphQLObjectType> possibleObjects",
          "594:     ) {",
          "595:         for (Selection<?> selection : selectionSet.getSelections()) {",
          "596:             if (selection instanceof Field) {",
          "597:                 collectField(parameters, result, (Field) selection, possibleObjects, astTypeCondition);",
          "598:             } else if (selection instanceof InlineFragment) {",
          "599:                 collectInlineFragment(parameters, result, (InlineFragment) selection, possibleObjects, astTypeCondition);",
          "600:             } else if (selection instanceof FragmentSpread) {",
          "601:                 collectFragmentSpread(parameters, result, (FragmentSpread) selection, possibleObjects);",
          "603:         }",
          "604:     }",
          "606:     private static class CollectedField {",
          "607:         Field field;",
          "608:         Set<GraphQLObjectType> objectTypes;",
          "609:         GraphQLCompositeType astTypeCondition;",
          "611:         public CollectedField(Field field, Set<GraphQLObjectType> objectTypes, GraphQLCompositeType astTypeCondition) {",
          "612:             this.field = field;",
          "613:             this.objectTypes = objectTypes;",
          "614:             this.astTypeCondition = astTypeCondition;",
          "617:         public boolean isAbstract() {",
          "618:             return GraphQLTypeUtil.isInterfaceOrUnion(astTypeCondition);",
          "619:         }",
          "621:         public boolean isConcrete() {",
          "622:             return GraphQLTypeUtil.isObjectType(astTypeCondition);",
          "624:     }",
          "626:     private void collectFragmentSpread(FieldCollectorNormalizedQueryParams parameters,",
          "627:                                        List<CollectedField> result,",
          "628:                                        FragmentSpread fragmentSpread,",
          "629:                                        Set<GraphQLObjectType> possibleObjects",
          "630:     ) {",
          "631:         if (!conditionalNodes.shouldInclude(fragmentSpread,",
          "632:                 parameters.getCoercedVariableValues(),",
          "633:                 parameters.getGraphQLSchema(),",
          "634:                 parameters.getGraphQLContext())) {",
          "635:             return;",
          "636:         }",
          "637:         FragmentDefinition fragmentDefinition = assertNotNull(parameters.getFragmentsByName().get(fragmentSpread.getName()));",
          "639:         if (!conditionalNodes.shouldInclude(fragmentDefinition,",
          "640:                 parameters.getCoercedVariableValues(),",
          "641:                 parameters.getGraphQLSchema(),",
          "642:                 parameters.getGraphQLContext())) {",
          "643:             return;",
          "644:         }",
          "645:         GraphQLCompositeType newAstTypeCondition = (GraphQLCompositeType) assertNotNull(parameters.getGraphQLSchema().getType(fragmentDefinition.getTypeCondition().getName()));",
          "646:         Set<GraphQLObjectType> newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition, parameters.getGraphQLSchema());",
          "647:         collectFromSelectionSet(parameters, fragmentDefinition.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
          "648:     }",
          "651:     private void collectInlineFragment(FieldCollectorNormalizedQueryParams parameters,",
          "652:                                        List<CollectedField> result,",
          "653:                                        InlineFragment inlineFragment,",
          "654:                                        Set<GraphQLObjectType> possibleObjects,",
          "655:                                        GraphQLCompositeType astTypeCondition",
          "656:     ) {",
          "657:         if (!conditionalNodes.shouldInclude(inlineFragment, parameters.getCoercedVariableValues(), parameters.getGraphQLSchema(), parameters.getGraphQLContext())) {",
          "658:             return;",
          "660:         Set<GraphQLObjectType> newPossibleObjects = possibleObjects;",
          "661:         GraphQLCompositeType newAstTypeCondition = astTypeCondition;",
          "663:         if (inlineFragment.getTypeCondition() != null) {",
          "664:             newAstTypeCondition = (GraphQLCompositeType) parameters.getGraphQLSchema().getType(inlineFragment.getTypeCondition().getName());",
          "665:             newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition, parameters.getGraphQLSchema());",
          "668:         collectFromSelectionSet(parameters, inlineFragment.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
          "669:     }",
          "671:     private void collectField(FieldCollectorNormalizedQueryParams parameters,",
          "672:                               List<CollectedField> result,",
          "673:                               Field field,",
          "674:                               Set<GraphQLObjectType> possibleObjectTypes,",
          "675:                               GraphQLCompositeType astTypeCondition",
          "676:     ) {",
          "677:         if (!conditionalNodes.shouldInclude(field,",
          "678:                 parameters.getCoercedVariableValues(),",
          "679:                 parameters.getGraphQLSchema(),",
          "680:                 parameters.getGraphQLContext())) {",
          "681:             return;",
          "682:         }",
          "684:         if (possibleObjectTypes.isEmpty()) {",
          "685:             return;",
          "687:         result.add(new CollectedField(field, possibleObjectTypes, astTypeCondition));",
          "688:     }",
          "690:     private Set<GraphQLObjectType> narrowDownPossibleObjects(Set<GraphQLObjectType> currentOnes,",
          "691:                                                              GraphQLCompositeType typeCondition,",
          "692:                                                              GraphQLSchema graphQLSchema) {",
          "694:         ImmutableSet<GraphQLObjectType> resolvedTypeCondition = resolvePossibleObjects(typeCondition, graphQLSchema);",
          "695:         if (currentOnes.isEmpty()) {",
          "696:             return resolvedTypeCondition;",
          "700:         return intersection(currentOnes, resolvedTypeCondition);",
          "701:     }",
          "703:     private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(List<GraphQLFieldDefinition> defs, GraphQLSchema graphQLSchema) {",
          "704:         ImmutableSet.Builder<GraphQLObjectType> builder = ImmutableSet.builder();",
          "706:         for (GraphQLFieldDefinition def : defs) {",
          "707:             GraphQLUnmodifiedType outputType = unwrapAll(def.getType());",
          "708:             if (outputType instanceof GraphQLCompositeType) {",
          "709:                 builder.addAll(resolvePossibleObjects((GraphQLCompositeType) outputType, graphQLSchema));",
          "713:         return builder.build();",
          "714:     }",
          "716:     private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(GraphQLCompositeType type, GraphQLSchema graphQLSchema) {",
          "717:         if (type instanceof GraphQLObjectType) {",
          "718:             return ImmutableSet.of((GraphQLObjectType) type);",
          "719:         } else if (type instanceof GraphQLInterfaceType) {",
          "720:             return ImmutableSet.copyOf(graphQLSchema.getImplementations((GraphQLInterfaceType) type));",
          "721:         } else if (type instanceof GraphQLUnionType) {",
          "722:             List<GraphQLNamedOutputType> unionTypes = ((GraphQLUnionType) type).getTypes();",
          "723:             return ImmutableSet.copyOf(ImmutableKit.map(unionTypes, GraphQLObjectType.class::cast));",
          "724:         } else {",
          "725:             return assertShouldNeverHappen();",
          "",
          "[Added Lines]",
          "294:         return new ExecutableNormalizedOperationFactoryInner(",
          "295:                 graphQLSchema,",
          "297:                 getOperationResult.fragmentsByName,",
          "300:                 options",
          "301:         ).createNormalizedQueryImpl();",
          "305:     private static class ExecutableNormalizedOperationFactoryInner {",
          "306:         private final GraphQLSchema graphQLSchema;",
          "307:         private final OperationDefinition operationDefinition;",
          "308:         private final Map<String, FragmentDefinition> fragments;",
          "309:         private final CoercedVariables coercedVariableValues;",
          "310:         private final @Nullable Map<String, NormalizedInputValue> normalizedVariableValues;",
          "311:         private final Options options;",
          "313:         private final List<PossibleMerger> possibleMergerList = new ArrayList<>();",
          "315:         private final ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField = ImmutableListMultimap.builder();",
          "316:         private final ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField = ImmutableMap.builder();",
          "317:         private final ImmutableMap.Builder<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives = ImmutableMap.builder();",
          "318:         private final ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
          "320:         private ExecutableNormalizedOperationFactoryInner(",
          "321:                 GraphQLSchema graphQLSchema,",
          "322:                 OperationDefinition operationDefinition,",
          "323:                 Map<String, FragmentDefinition> fragments,",
          "324:                 CoercedVariables coercedVariableValues,",
          "325:                 @Nullable Map<String, NormalizedInputValue> normalizedVariableValues,",
          "326:                 Options options",
          "327:         ) {",
          "328:             this.graphQLSchema = graphQLSchema;",
          "329:             this.operationDefinition = operationDefinition;",
          "330:             this.fragments = fragments;",
          "331:             this.coercedVariableValues = coercedVariableValues;",
          "332:             this.normalizedVariableValues = normalizedVariableValues;",
          "333:             this.options = options;",
          "339:         private ExecutableNormalizedOperation createNormalizedQueryImpl() {",
          "340:             GraphQLObjectType rootType = SchemaUtil.getOperationRootType(graphQLSchema, operationDefinition);",
          "342:             CollectNFResult collectFromOperationResult = collectFromOperation(rootType);",
          "344:             BiConsumer<ExecutableNormalizedField, MergedField> captureMergedField = (enf, mergedFld) -> {",
          "346:                 QueryDirectives queryDirectives = new QueryDirectivesImpl(mergedFld, graphQLSchema, coercedVariableValues.toMap(), options.getGraphQLContext(), options.getLocale());",
          "347:                 normalizedFieldToQueryDirectives.put(enf, queryDirectives);",
          "348:                 normalizedFieldToMergedField.put(enf, mergedFld);",
          "349:             };",
          "351:             for (ExecutableNormalizedField topLevel : collectFromOperationResult.children) {",
          "352:                 ImmutableList<FieldAndAstParent> fieldAndAstParents = collectFromOperationResult.normalizedFieldToAstFields.get(topLevel);",
          "353:                 MergedField mergedField = newMergedField(fieldAndAstParents);",
          "355:                 captureMergedField.accept(topLevel, mergedField);",
          "357:                 updateFieldToNFMap(topLevel, fieldAndAstParents);",
          "358:                 updateCoordinatedToNFMap(topLevel);",
          "360:                 buildFieldWithChildren(",
          "361:                         topLevel,",
          "362:                         fieldAndAstParents,",
          "363:                         captureMergedField,",
          "364:                         1,",
          "365:                         options.getMaxChildrenDepth());",
          "366:             }",
          "368:             for (PossibleMerger possibleMerger : possibleMergerList) {",
          "369:                 List<ExecutableNormalizedField> childrenWithSameResultKey = possibleMerger.parent.getChildrenWithSameResultKey(possibleMerger.resultKey);",
          "370:                 ENFMerger.merge(possibleMerger.parent, childrenWithSameResultKey, graphQLSchema);",
          "371:             }",
          "372:             return new ExecutableNormalizedOperation(",
          "373:                     operationDefinition.getOperation(),",
          "374:                     operationDefinition.getName(),",
          "375:                     new ArrayList<>(collectFromOperationResult.children),",
          "376:                     fieldToNormalizedField.build(),",
          "377:                     normalizedFieldToMergedField.build(),",
          "378:                     normalizedFieldToQueryDirectives.build(),",
          "379:                     coordinatesToNormalizedFields.build()",
          "380:             );",
          "384:         private void buildFieldWithChildren(ExecutableNormalizedField executableNormalizedField,",
          "385:                                             ImmutableList<FieldAndAstParent> fieldAndAstParents,",
          "386:                                             BiConsumer<ExecutableNormalizedField, MergedField> captureMergedField,",
          "387:                                             int curLevel,",
          "388:                                             int maxLevel) {",
          "389:             if (curLevel > maxLevel) {",
          "390:                 throw new AbortExecutionException(\"Maximum query depth exceeded \" + curLevel + \" > \" + maxLevel);",
          "391:             }",
          "393:             CollectNFResult nextLevel = collectFromMergedField(executableNormalizedField, fieldAndAstParents, curLevel + 1);",
          "395:             for (ExecutableNormalizedField childENF : nextLevel.children) {",
          "396:                 executableNormalizedField.addChild(childENF);",
          "397:                 ImmutableList<FieldAndAstParent> childFieldAndAstParents = nextLevel.normalizedFieldToAstFields.get(childENF);",
          "399:                 MergedField mergedField = newMergedField(childFieldAndAstParents);",
          "400:                 captureMergedField.accept(childENF, mergedField);",
          "402:                 updateFieldToNFMap(childENF, childFieldAndAstParents);",
          "403:                 updateCoordinatedToNFMap(childENF);",
          "405:                 buildFieldWithChildren(childENF,",
          "406:                         childFieldAndAstParents,",
          "407:                         captureMergedField,",
          "408:                         curLevel + 1,",
          "409:                         maxLevel);",
          "410:             }",
          "411:         }",
          "413:         private static MergedField newMergedField(ImmutableList<FieldAndAstParent> fieldAndAstParents) {",
          "414:             return MergedField.newMergedField(map(fieldAndAstParents, fieldAndAstParent -> fieldAndAstParent.field)).build();",
          "417:         private void updateFieldToNFMap(ExecutableNormalizedField executableNormalizedField,",
          "418:                                         ImmutableList<FieldAndAstParent> mergedField) {",
          "419:             for (FieldAndAstParent astField : mergedField) {",
          "420:                 fieldToNormalizedField.put(astField.field, executableNormalizedField);",
          "424:         private void updateCoordinatedToNFMap(ExecutableNormalizedField topLevel) {",
          "425:             for (String objectType : topLevel.getObjectTypeNames()) {",
          "426:                 FieldCoordinates coordinates = FieldCoordinates.coordinates(objectType, topLevel.getFieldName());",
          "427:                 coordinatesToNormalizedFields.put(coordinates, topLevel);",
          "428:             }",
          "431:         public CollectNFResult collectFromMergedField(ExecutableNormalizedField executableNormalizedField,",
          "432:                                                       ImmutableList<FieldAndAstParent> mergedField,",
          "433:                                                       int level) {",
          "434:             List<GraphQLFieldDefinition> fieldDefs = executableNormalizedField.getFieldDefinitions(graphQLSchema);",
          "435:             Set<GraphQLObjectType> possibleObjects = resolvePossibleObjects(fieldDefs);",
          "436:             if (possibleObjects.isEmpty()) {",
          "437:                 return new CollectNFResult(ImmutableKit.emptyList(), ImmutableListMultimap.of());",
          "438:             }",
          "440:             List<CollectedField> collectedFields = new ArrayList<>();",
          "441:             for (FieldAndAstParent fieldAndAstParent : mergedField) {",
          "442:                 if (fieldAndAstParent.field.getSelectionSet() == null) {",
          "443:                     continue;",
          "444:                 }",
          "445:                 GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(graphQLSchema, fieldAndAstParent.astParentType, fieldAndAstParent.field.getName());",
          "446:                 GraphQLUnmodifiedType astParentType = unwrapAll(fieldDefinition.getType());",
          "447:                 this.collectFromSelectionSet(fieldAndAstParent.field.getSelectionSet(),",
          "448:                         collectedFields,",
          "449:                         (GraphQLCompositeType) astParentType,",
          "450:                         possibleObjects",
          "451:                 );",
          "452:             }",
          "453:             Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
          "454:             ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
          "455:             ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
          "457:             createNFs(resultNFs, fieldsByName, normalizedFieldToAstFields, level, executableNormalizedField);",
          "459:             return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
          "460:         }",
          "462:         private Map<String, List<CollectedField>> fieldsByResultKey(List<CollectedField> collectedFields) {",
          "463:             Map<String, List<CollectedField>> fieldsByName = new LinkedHashMap<>();",
          "464:             for (CollectedField collectedField : collectedFields) {",
          "465:                 fieldsByName.computeIfAbsent(collectedField.field.getResultKey(), ignored -> new ArrayList<>()).add(collectedField);",
          "466:             }",
          "467:             return fieldsByName;",
          "468:         }",
          "470:         public CollectNFResult collectFromOperation(GraphQLObjectType rootType) {",
          "473:             Set<GraphQLObjectType> possibleObjects = ImmutableSet.of(rootType);",
          "474:             List<CollectedField> collectedFields = new ArrayList<>();",
          "475:             collectFromSelectionSet(operationDefinition.getSelectionSet(), collectedFields, rootType, possibleObjects);",
          "477:             Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
          "478:             ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
          "479:             ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
          "481:             createNFs(resultNFs, fieldsByName, normalizedFieldToAstFields, 1, null);",
          "483:             return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
          "484:         }",
          "486:         private void createNFs(ImmutableList.Builder<ExecutableNormalizedField> nfListBuilder,",
          "487:                                Map<String, List<CollectedField>> fieldsByName,",
          "488:                                ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields,",
          "489:                                int level,",
          "490:                                ExecutableNormalizedField parent) {",
          "491:             for (String resultKey : fieldsByName.keySet()) {",
          "492:                 List<CollectedField> fieldsWithSameResultKey = fieldsByName.get(resultKey);",
          "493:                 List<CollectedFieldGroup> commonParentsGroups = groupByCommonParents(fieldsWithSameResultKey);",
          "494:                 for (CollectedFieldGroup fieldGroup : commonParentsGroups) {",
          "495:                     ExecutableNormalizedField nf = createNF(fieldGroup, level, parent);",
          "496:                     if (nf == null) {",
          "497:                         continue;",
          "498:                     }",
          "499:                     for (CollectedField collectedField : fieldGroup.fields) {",
          "500:                         normalizedFieldToAstFields.put(nf, new FieldAndAstParent(collectedField.field, collectedField.astTypeCondition));",
          "501:                     }",
          "502:                     nfListBuilder.add(nf);",
          "504:                 if (commonParentsGroups.size() > 1) {",
          "505:                     possibleMergerList.add(new PossibleMerger(parent, resultKey));",
          "510:         private ExecutableNormalizedField createNF(CollectedFieldGroup collectedFieldGroup,",
          "511:                                                    int level,",
          "512:                                                    ExecutableNormalizedField parent) {",
          "513:             Field field;",
          "514:             Set<GraphQLObjectType> objectTypes = collectedFieldGroup.objectTypes;",
          "515:             field = collectedFieldGroup.fields.iterator().next().field;",
          "516:             String fieldName = field.getName();",
          "517:             GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(graphQLSchema, objectTypes.iterator().next(), fieldName);",
          "519:             Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(fieldDefinition.getArguments(), field.getArguments(), CoercedVariables.of(this.coercedVariableValues.toMap()), this.options.graphQLContext, this.options.locale);",
          "520:             Map<String, NormalizedInputValue> normalizedArgumentValues = null;",
          "521:             if (this.normalizedVariableValues != null) {",
          "522:                 normalizedArgumentValues = ValuesResolver.getNormalizedArgumentValues(fieldDefinition.getArguments(), field.getArguments(), this.normalizedVariableValues);",
          "523:             }",
          "524:             ImmutableList<String> objectTypeNames = map(objectTypes, GraphQLObjectType::getName);",
          "526:             return ExecutableNormalizedField.newNormalizedField()",
          "527:                     .alias(field.getAlias())",
          "528:                     .resolvedArguments(argumentValues)",
          "529:                     .normalizedArguments(normalizedArgumentValues)",
          "530:                     .astArguments(field.getArguments())",
          "531:                     .objectTypeNames(objectTypeNames)",
          "532:                     .fieldName(fieldName)",
          "533:                     .level(level)",
          "534:                     .parent(parent)",
          "535:                     .build();",
          "536:         }",
          "538:         private static class CollectedFieldGroup {",
          "539:             Set<GraphQLObjectType> objectTypes;",
          "540:             Set<CollectedField> fields;",
          "542:             public CollectedFieldGroup(Set<CollectedField> fields, Set<GraphQLObjectType> objectTypes) {",
          "543:                 this.fields = fields;",
          "544:                 this.objectTypes = objectTypes;",
          "545:             }",
          "548:         private List<CollectedFieldGroup> groupByCommonParents(Collection<CollectedField> fields) {",
          "549:             ImmutableSet.Builder<GraphQLObjectType> objectTypes = ImmutableSet.builder();",
          "550:             for (CollectedField collectedField : fields) {",
          "551:                 objectTypes.addAll(collectedField.objectTypes);",
          "552:             }",
          "553:             Set<GraphQLObjectType> allRelevantObjects = objectTypes.build();",
          "554:             Map<GraphQLType, ImmutableList<CollectedField>> groupByAstParent = groupingBy(fields, fieldAndType -> fieldAndType.astTypeCondition);",
          "555:             if (groupByAstParent.size() == 1) {",
          "556:                 return singletonList(new CollectedFieldGroup(ImmutableSet.copyOf(fields), allRelevantObjects));",
          "557:             }",
          "558:             ImmutableList.Builder<CollectedFieldGroup> result = ImmutableList.builder();",
          "559:             for (GraphQLObjectType objectType : allRelevantObjects) {",
          "560:                 Set<CollectedField> relevantFields = filterSet(fields, field -> field.objectTypes.contains(objectType));",
          "561:                 result.add(new CollectedFieldGroup(relevantFields, singleton(objectType)));",
          "562:             }",
          "563:             return result.build();",
          "564:         }",
          "566:         private void collectFromSelectionSet(SelectionSet selectionSet,",
          "567:                                              List<CollectedField> result,",
          "568:                                              GraphQLCompositeType astTypeCondition,",
          "569:                                              Set<GraphQLObjectType> possibleObjects",
          "570:         ) {",
          "571:             for (Selection<?> selection : selectionSet.getSelections()) {",
          "572:                 if (selection instanceof Field) {",
          "573:                     collectField(result, (Field) selection, possibleObjects, astTypeCondition);",
          "574:                 } else if (selection instanceof InlineFragment) {",
          "575:                     collectInlineFragment(result, (InlineFragment) selection, possibleObjects, astTypeCondition);",
          "576:                 } else if (selection instanceof FragmentSpread) {",
          "577:                     collectFragmentSpread(result, (FragmentSpread) selection, possibleObjects);",
          "578:                 }",
          "579:             }",
          "582:         private void collectFragmentSpread(List<CollectedField> result,",
          "583:                                            FragmentSpread fragmentSpread,",
          "584:                                            Set<GraphQLObjectType> possibleObjects",
          "585:         ) {",
          "586:             if (!conditionalNodes.shouldInclude(fragmentSpread,",
          "587:                     this.coercedVariableValues.toMap(),",
          "588:                     this.graphQLSchema,",
          "589:                     this.options.graphQLContext)) {",
          "590:                 return;",
          "591:             }",
          "592:             FragmentDefinition fragmentDefinition = assertNotNull(this.fragments.get(fragmentSpread.getName()));",
          "594:             if (!conditionalNodes.shouldInclude(fragmentDefinition,",
          "595:                     this.coercedVariableValues.toMap(),",
          "596:                     this.graphQLSchema,",
          "597:                     this.options.graphQLContext)) {",
          "598:                 return;",
          "600:             GraphQLCompositeType newAstTypeCondition = (GraphQLCompositeType) assertNotNull(this.graphQLSchema.getType(fragmentDefinition.getTypeCondition().getName()));",
          "601:             Set<GraphQLObjectType> newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition);",
          "602:             collectFromSelectionSet(fragmentDefinition.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
          "603:         }",
          "605:         private void collectInlineFragment(List<CollectedField> result,",
          "606:                                            InlineFragment inlineFragment,",
          "607:                                            Set<GraphQLObjectType> possibleObjects,",
          "608:                                            GraphQLCompositeType astTypeCondition",
          "609:         ) {",
          "610:             if (!conditionalNodes.shouldInclude(inlineFragment, this.coercedVariableValues.toMap(), this.graphQLSchema, this.options.graphQLContext)) {",
          "611:                 return;",
          "612:             }",
          "613:             Set<GraphQLObjectType> newPossibleObjects = possibleObjects;",
          "614:             GraphQLCompositeType newAstTypeCondition = astTypeCondition;",
          "616:             if (inlineFragment.getTypeCondition() != null) {",
          "617:                 newAstTypeCondition = (GraphQLCompositeType) this.graphQLSchema.getType(inlineFragment.getTypeCondition().getName());",
          "618:                 newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition);",
          "620:             }",
          "621:             collectFromSelectionSet(inlineFragment.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
          "622:         }",
          "624:         private void collectField(List<CollectedField> result,",
          "625:                                   Field field,",
          "626:                                   Set<GraphQLObjectType> possibleObjectTypes,",
          "627:                                   GraphQLCompositeType astTypeCondition",
          "628:         ) {",
          "629:             if (!conditionalNodes.shouldInclude(field,",
          "630:                     this.coercedVariableValues.toMap(),",
          "631:                     this.graphQLSchema,",
          "632:                     this.options.graphQLContext)) {",
          "633:                 return;",
          "634:             }",
          "636:             if (possibleObjectTypes.isEmpty()) {",
          "637:                 return;",
          "638:             }",
          "639:             result.add(new CollectedField(field, possibleObjectTypes, astTypeCondition));",
          "642:         private Set<GraphQLObjectType> narrowDownPossibleObjects(Set<GraphQLObjectType> currentOnes,",
          "643:                                                                  GraphQLCompositeType typeCondition) {",
          "645:             ImmutableSet<GraphQLObjectType> resolvedTypeCondition = resolvePossibleObjects(typeCondition);",
          "646:             if (currentOnes.isEmpty()) {",
          "647:                 return resolvedTypeCondition;",
          "648:             }",
          "651:             return intersection(currentOnes, resolvedTypeCondition);",
          "654:         private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(List<GraphQLFieldDefinition> defs) {",
          "655:             ImmutableSet.Builder<GraphQLObjectType> builder = ImmutableSet.builder();",
          "657:             for (GraphQLFieldDefinition def : defs) {",
          "658:                 GraphQLUnmodifiedType outputType = unwrapAll(def.getType());",
          "659:                 if (outputType instanceof GraphQLCompositeType) {",
          "660:                     builder.addAll(resolvePossibleObjects((GraphQLCompositeType) outputType));",
          "661:                 }",
          "662:             }",
          "664:             return builder.build();",
          "667:         private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(GraphQLCompositeType type) {",
          "668:             if (type instanceof GraphQLObjectType) {",
          "669:                 return ImmutableSet.of((GraphQLObjectType) type);",
          "670:             } else if (type instanceof GraphQLInterfaceType) {",
          "671:                 return ImmutableSet.copyOf(graphQLSchema.getImplementations((GraphQLInterfaceType) type));",
          "672:             } else if (type instanceof GraphQLUnionType) {",
          "673:                 List<GraphQLNamedOutputType> unionTypes = ((GraphQLUnionType) type).getTypes();",
          "674:                 return ImmutableSet.copyOf(ImmutableKit.map(unionTypes, GraphQLObjectType.class::cast));",
          "675:             } else {",
          "676:                 return assertShouldNeverHappen();",
          "677:             }",
          "680:         private static class PossibleMerger {",
          "681:             ExecutableNormalizedField parent;",
          "682:             String resultKey;",
          "684:             public PossibleMerger(ExecutableNormalizedField parent, String resultKey) {",
          "685:                 this.parent = parent;",
          "686:                 this.resultKey = resultKey;",
          "687:             }",
          "690:         private static class CollectedField {",
          "691:             Field field;",
          "692:             Set<GraphQLObjectType> objectTypes;",
          "693:             GraphQLCompositeType astTypeCondition;",
          "695:             public CollectedField(Field field, Set<GraphQLObjectType> objectTypes, GraphQLCompositeType astTypeCondition) {",
          "696:                 this.field = field;",
          "697:                 this.objectTypes = objectTypes;",
          "698:                 this.astTypeCondition = astTypeCondition;",
          "699:             }",
          "702:         public static class CollectNFResult {",
          "703:             private final Collection<ExecutableNormalizedField> children;",
          "704:             private final ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields;",
          "706:             public CollectNFResult(Collection<ExecutableNormalizedField> children, ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields) {",
          "707:                 this.children = children;",
          "708:                 this.normalizedFieldToAstFields = normalizedFieldToAstFields;",
          "712:         private static class FieldAndAstParent {",
          "713:             final Field field;",
          "714:             final GraphQLCompositeType astParentType;",
          "716:             private FieldAndAstParent(Field field, GraphQLCompositeType astParentType) {",
          "717:                 this.field = field;",
          "718:                 this.astParentType = astParentType;",
          "719:             }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/normalized/FieldCollectorNormalizedQueryParams.java||src/main/java/graphql/normalized/FieldCollectorNormalizedQueryParams.java": [
          "File: src/main/java/graphql/normalized/FieldCollectorNormalizedQueryParams.java -> src/main/java/graphql/normalized/FieldCollectorNormalizedQueryParams.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/normalized/ExecutableNormalizedFieldTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedFieldTest.groovy": [
          "File: src/test/groovy/graphql/normalized/ExecutableNormalizedFieldTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedFieldTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:         \"\"\"",
          "49:         Document document = TestUtil.parseQuery(query)",
          "54:         def pets = normalizedOperation.getTopLevelFields()[0]",
          "55:         def allChildren = pets.getChildren()",
          "",
          "[Removed Lines]",
          "51:         ExecutableNormalizedOperationFactory normalizedOperationFactory = new ExecutableNormalizedOperationFactory()",
          "52:         def normalizedOperation = normalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "51:         def normalizedOperation = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy": [
          "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:         Document document = TestUtil.parseQuery(query)",
          "117:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "119:         expect:",
          "",
          "[Removed Lines]",
          "115:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "116:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "116:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "199:         Document document = TestUtil.parseQuery(query)",
          "203:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "205:         expect:",
          "",
          "[Removed Lines]",
          "201:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "202:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "202:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "279:         Document document = TestUtil.parseQuery(query)",
          "283:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "285:         expect:",
          "",
          "[Removed Lines]",
          "281:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "282:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "282:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "330:         Document document = TestUtil.parseQuery(query)",
          "334:         def printedTree = printTree(tree)",
          "336:         expect:",
          "",
          "[Removed Lines]",
          "332:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "333:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "333:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "373:         Document document = TestUtil.parseQuery(query)",
          "377:         def printedTree = printTree(tree)",
          "379:         expect:",
          "",
          "[Removed Lines]",
          "375:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "376:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "376:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "423:         Document document = TestUtil.parseQuery(query)",
          "427:         def printedTree = printTree(tree)",
          "429:         expect:",
          "",
          "[Removed Lines]",
          "425:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "426:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "426:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "486:         Document document = TestUtil.parseQuery(query)",
          "490:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "492:         expect:",
          "",
          "[Removed Lines]",
          "488:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "489:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "489:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "532:         Document document = TestUtil.parseQuery(query)",
          "536:         def printedTree = printTree(tree)",
          "538:         expect:",
          "",
          "[Removed Lines]",
          "534:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "535:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "535:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "576:         Document document = TestUtil.parseQuery(query)",
          "580:         def printedTree = printTree(tree)",
          "582:         expect:",
          "",
          "[Removed Lines]",
          "578:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "579:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "579:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "620:         Document document = TestUtil.parseQuery(query)",
          "624:         def printedTree = printTree(tree)",
          "626:         expect:",
          "",
          "[Removed Lines]",
          "622:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "623:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "623:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "652:         Document document = TestUtil.parseQuery(query)",
          "656:         def printedTree = printTree(tree)",
          "658:         expect:",
          "",
          "[Removed Lines]",
          "654:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "655:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "655:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "703:         Document document = TestUtil.parseQuery(query)",
          "707:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "709:         expect:",
          "",
          "[Removed Lines]",
          "705:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "706:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "706:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "753:         Document document = TestUtil.parseQuery(query)",
          "757:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "759:         expect:",
          "",
          "[Removed Lines]",
          "755:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "756:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "756:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "792:         Document document = TestUtil.parseQuery(query)",
          "796:         def printedTree = printTree(tree)",
          "798:         expect:",
          "",
          "[Removed Lines]",
          "794:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "795:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "795:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "836:         Document document = TestUtil.parseQuery(query)",
          "840:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "842:         expect:",
          "",
          "[Removed Lines]",
          "838:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "839:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "839:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "876:         Document document = TestUtil.parseQuery(query)",
          "880:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "882:         expect:",
          "",
          "[Removed Lines]",
          "878:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "879:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "879:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "924:         Document document = TestUtil.parseQuery(query)",
          "928:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "930:         expect:",
          "",
          "[Removed Lines]",
          "926:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "927:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "927:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1026:         Document document = TestUtil.parseQuery(query)",
          "1027:         def subFooField = (document.getDefinitions()[1] as FragmentDefinition).getSelectionSet().getSelections()[0] as Field",
          "1031:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
          "1033:         expect:",
          "",
          "[Removed Lines]",
          "1029:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1030:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1030:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1069:         def petsField = (document.getDefinitions()[0] as OperationDefinition).getSelectionSet().getSelections()[0] as Field",
          "1070:         def idField = petsField.getSelectionSet().getSelections()[0] as Field",
          "1074:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
          "",
          "[Removed Lines]",
          "1072:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1073:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1073:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1118:         def schemaField = selections[2] as Field",
          "1119:         def typeField = selections[3] as Field",
          "1123:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
          "1125:         expect:",
          "",
          "[Removed Lines]",
          "1121:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1122:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1122:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1176:         Document document = TestUtil.parseQuery(query)",
          "1180:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "1182:         expect:",
          "",
          "[Removed Lines]",
          "1178:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1179:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1179:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1219:         Document document = TestUtil.parseQuery(query)",
          "1223:         def printedTree = printTree(tree)",
          "1225:         expect:",
          "",
          "[Removed Lines]",
          "1221:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1222:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1222:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1247:         Document document = TestUtil.parseQuery(query)",
          "1251:         def normalizedFieldToMergedField = tree.getNormalizedFieldToMergedField()",
          "1252:         Traverser<ExecutableNormalizedField> traverser = Traverser.depthFirst({ it.getChildren() })",
          "1253:         List<MergedField> result = new ArrayList<>()",
          "",
          "[Removed Lines]",
          "1249:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1250:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1250:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1285:         Document document = TestUtil.parseQuery(query)",
          "1289:         when:",
          "1291:         def coordinatesToNormalizedFields = tree.coordinatesToNormalizedFields",
          "1293:         then:",
          "",
          "[Removed Lines]",
          "1287:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1290:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1290:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1386:         Document document = TestUtil.parseQuery(mutation)",
          "1390:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "1392:         expect:",
          "",
          "[Removed Lines]",
          "1388:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1389:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1389:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1436:         assertValidQuery(graphQLSchema, query)",
          "1437:         Document document = TestUtil.parseQuery(query)",
          "1439:         def variables = [",
          "1440:                 var1: [bar: 123],",
          "1441:                 var2: [foo: \"foo\", input2: [bar: 123]]",
          "",
          "[Removed Lines]",
          "1438:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1444:         def expectedNormalizedArgValue = [foo: new NormalizedInputValue(\"String\", parseValue('\"foo\"')), input2: new NormalizedInputValue(\"Input2\", [bar: new NormalizedInputValue(\"Int\", parseValue(\"123\"))])]",
          "1445:         when:",
          "1447:         def topLevelField = tree.getTopLevelFields().get(0)",
          "1448:         def secondField = topLevelField.getChildren().get(0)",
          "1449:         def arg1 = secondField.getNormalizedArgument(\"arg1\")",
          "",
          "[Removed Lines]",
          "1446:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "1446:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1483:         assertValidQuery(graphQLSchema, query)",
          "1484:         def document = TestUtil.parseQuery(query)",
          "1486:         when:",
          "1489:         then:",
          "1490:         def topLevelField = tree.getTopLevelFields().get(0)",
          "",
          "[Removed Lines]",
          "1485:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1487:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1487:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1518:         assertValidQuery(graphQLSchema, query)",
          "1519:         def document = TestUtil.parseQuery(query)",
          "1521:         def variables = [",
          "1522:                 varIds  : null,",
          "1523:                 otherVar: null,",
          "1524:         ]",
          "1525:         when:",
          "1528:         then:",
          "1529:         def topLevelField = tree.getTopLevelFields().get(0)",
          "",
          "[Removed Lines]",
          "1520:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1526:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "1526:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1573:         ]",
          "1574:         assertValidQuery(graphQLSchema, query, variables)",
          "1575:         Document document = TestUtil.parseQuery(query)",
          "1577:         when:",
          "1579:         def topLevelField = tree.getTopLevelFields().get(0)",
          "1580:         def arg1 = topLevelField.getNormalizedArgument(\"arg1\")",
          "1581:         def arg2 = topLevelField.getNormalizedArgument(\"arg2\")",
          "",
          "[Removed Lines]",
          "1576:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1578:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "1578:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1626:         ]",
          "1627:         assertValidQuery(graphQLSchema, query, variables)",
          "1628:         Document document = TestUtil.parseQuery(query)",
          "1630:         when:",
          "1632:         def topLevelField = tree.getTopLevelFields().get(0)",
          "1633:         def arg1 = topLevelField.getNormalizedArgument(\"arg1\")",
          "1634:         def arg2 = topLevelField.getNormalizedArgument(\"arg2\")",
          "",
          "[Removed Lines]",
          "1629:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1631:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "1631:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1681:         '''",
          "1682:         assertValidQuery(graphQLSchema, query)",
          "1683:         Document document = TestUtil.parseQuery(query)",
          "1685:         when:",
          "1688:         then:",
          "1689:         tree.normalizedFieldToMergedField.size() == 3",
          "",
          "[Removed Lines]",
          "1684:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1686:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1686:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1739:         '''",
          "1740:         assertValidQuery(graphQLSchema, query)",
          "1741:         Document document = TestUtil.parseQuery(query)",
          "1743:         when:",
          "1745:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "1747:         then:",
          "",
          "[Removed Lines]",
          "1742:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1744:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1744:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1787:         '''",
          "1788:         assertValidQuery(graphQLSchema, query)",
          "1789:         Document document = TestUtil.parseQuery(query)",
          "1791:         when:",
          "1793:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "1795:         then:",
          "",
          "[Removed Lines]",
          "1790:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1792:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1792:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1863:         '''",
          "1864:         assertValidQuery(schema, query)",
          "1865:         Document document = TestUtil.parseQuery(query)",
          "1867:         when:",
          "1869:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "1871:         then:",
          "",
          "[Removed Lines]",
          "1866:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1868:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1868:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1927:         '''",
          "1928:         assertValidQuery(schema, query)",
          "1929:         Document document = TestUtil.parseQuery(query)",
          "1931:         when:",
          "1933:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "1935:         then:",
          "",
          "[Removed Lines]",
          "1930:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1932:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1932:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1984:         '''",
          "1985:         assertValidQuery(schema, query)",
          "1986:         Document document = TestUtil.parseQuery(query)",
          "1988:         when:",
          "1990:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "1992:         then:",
          "",
          "[Removed Lines]",
          "1987:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1989:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1989:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2059:         '''",
          "2060:         assertValidQuery(schema, query)",
          "2061:         Document document = TestUtil.parseQuery(query)",
          "2063:         when:",
          "2065:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2067:         then:",
          "",
          "[Removed Lines]",
          "2062:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2064:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2064:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2121:         '''",
          "2122:         assertValidQuery(schema, query)",
          "2123:         Document document = TestUtil.parseQuery(query)",
          "2125:         when:",
          "2127:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2129:         then:",
          "",
          "[Removed Lines]",
          "2124:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2126:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2126:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2163:         '''",
          "2164:         assertValidQuery(schema, query)",
          "2165:         Document document = TestUtil.parseQuery(query)",
          "2167:         when:",
          "2169:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2171:         then:",
          "",
          "[Removed Lines]",
          "2166:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2168:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2168:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2206:         '''",
          "2207:         assertValidQuery(schema, query)",
          "2208:         Document document = TestUtil.parseQuery(query)",
          "2210:         when:",
          "2212:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2214:         then:",
          "",
          "[Removed Lines]",
          "2209:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2211:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2211:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2249:         '''",
          "2250:         assertValidQuery(schema, query)",
          "2251:         Document document = TestUtil.parseQuery(query)",
          "2253:         when:",
          "2255:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2257:         then:",
          "",
          "[Removed Lines]",
          "2252:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2254:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2254:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2324:         '''",
          "2325:         assertValidQuery(schema, query)",
          "2326:         Document document = TestUtil.parseQuery(query)",
          "2328:         when:",
          "2330:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2332:         then:",
          "",
          "[Removed Lines]",
          "2327:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2329:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2329:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2400:         '''",
          "2401:         assertValidQuery(schema, query)",
          "2402:         Document document = TestUtil.parseQuery(query)",
          "2404:         when:",
          "2406:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2408:         then:",
          "",
          "[Removed Lines]",
          "2403:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2405:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2405:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2462:         def variables = [\"true\": Boolean.TRUE, \"false\": Boolean.FALSE]",
          "2463:         assertValidQuery(graphQLSchema, query, variables)",
          "2464:         Document document = TestUtil.parseQuery(query)",
          "2466:         when:",
          "2468:         println String.join(\"\\n\", printTree(tree))",
          "2469:         def printedTree = printTree(tree)",
          "",
          "[Removed Lines]",
          "2465:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2467:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "2467:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2519:         def variables = [:]",
          "2520:         assertValidQuery(graphQLSchema, query, variables)",
          "2521:         Document document = TestUtil.parseQuery(query)",
          "2523:         when:",
          "2525:         def printedTree = printTreeAndDirectives(tree)",
          "2527:         then:",
          "",
          "[Removed Lines]",
          "2522:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2524:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "2524:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2585:         Document document = TestUtil.parseQuery(query)",
          "2589:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "2591:         expect:",
          "",
          "[Removed Lines]",
          "2587:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2588:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2588:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2638:         Document document = TestUtil.parseQuery(query)",
          "2642:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "2644:         expect:",
          "",
          "[Removed Lines]",
          "2640:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2641:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2641:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2685:         Document document = TestUtil.parseQuery(query)",
          "2689:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "2691:         expect:",
          "",
          "[Removed Lines]",
          "2687:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2688:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2688:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerTest.groovy": [
          "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "2140:         assertValidQuery(schema, query, variables)",
          "2141:         Document originalDocument = TestUtil.parseQuery(query)",
          "2145:     }",
          "2147:     private List<ExecutableNormalizedField> createNormalizedFields(GraphQLSchema schema, String query, Map<String, Object> variables = [:]) {",
          "",
          "[Removed Lines]",
          "2143:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2144:         return dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, originalDocument, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "2143:         return ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, originalDocument, null, RawVariables.of(variables))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17f1fab605381690ff44bd0bf857ee520243015f",
      "candidate_info": {
        "commit_hash": "17f1fab605381690ff44bd0bf857ee520243015f",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/17f1fab605381690ff44bd0bf857ee520243015f",
        "files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedField.java",
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryDeferTest.groovy",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerDeferTest.groovy"
        ],
        "message": "Add dedicated entrypoint with defer support in the ENFOperationFactory",
        "before_after_code_files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedField.java||src/main/java/graphql/normalized/ExecutableNormalizedField.java",
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryDeferTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryDeferTest.groovy",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerDeferTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerDeferTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
            "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
          ],
          "candidate": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
            "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/graphql/normalized/ExecutableNormalizedField.java||src/main/java/graphql/normalized/ExecutableNormalizedField.java": [
          "File: src/main/java/graphql/normalized/ExecutableNormalizedField.java -> src/main/java/graphql/normalized/ExecutableNormalizedField.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import com.google.common.collect.ImmutableList;",
          "4: import com.google.common.collect.ImmutableMap;",
          "5: import graphql.Assert;",
          "6: import graphql.Internal;",
          "7: import graphql.Mutable;",
          "8: import graphql.PublicApi;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import graphql.ExperimentalApi;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "375:     public DeferExecution getDeferExecution() {",
          "376:         return deferExecution;",
          "377:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "376:     @ExperimentalApi",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "670:             return this;",
          "671:         }",
          "673:         public Builder deferExecution(DeferExecution deferExecution) {",
          "674:             this.deferExecution = deferExecution;",
          "675:             return this;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "676:         @ExperimentalApi",
          "",
          "---------------"
        ],
        "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java": [
          "File: src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:                 getOperationResult.fragmentsByName,",
          "174:                 coercedVariableValues,",
          "175:                 null,",
          "177:     }",
          "",
          "[Removed Lines]",
          "176:                 Options.defaultOptions());",
          "",
          "[Added Lines]",
          "176:                 Options.defaultOptions(),",
          "177:                 false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:                 fragments,",
          "196:                 coercedVariableValues,",
          "197:                 null,",
          "199:     }",
          "",
          "[Removed Lines]",
          "198:                 Options.defaultOptions());",
          "",
          "[Added Lines]",
          "199:                 Options.defaultOptions(),",
          "200:                 false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "271:                 getOperationResult.operationDefinition,",
          "272:                 getOperationResult.fragmentsByName,",
          "273:                 rawVariables,",
          "275:         );",
          "276:     }",
          "",
          "[Removed Lines]",
          "274:                 options",
          "",
          "[Added Lines]",
          "276:                 options,",
          "277:                 false",
          "278:         );",
          "279:     }",
          "281:     public static ExecutableNormalizedOperation createExecutableNormalizedOperationWithDeferSupport(",
          "282:             GraphQLSchema graphQLSchema,",
          "283:             Document document,",
          "284:             String operationName,",
          "285:             CoercedVariables coercedVariableValues",
          "286:     ) {",
          "287:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
          "288:         return new ExecutableNormalizedOperationFactory().createNormalizedQueryImpl(graphQLSchema,",
          "289:                 getOperationResult.operationDefinition,",
          "290:                 getOperationResult.fragmentsByName,",
          "291:                 coercedVariableValues,",
          "292:                 null,",
          "293:                 Options.defaultOptions(),",
          "294:                 true);",
          "295:     }",
          "297:     public static ExecutableNormalizedOperation createExecutableNormalizedOperationWithRawVariablesWithDeferSupport(GraphQLSchema graphQLSchema,",
          "298:                                                                                                     Document document,",
          "299:                                                                                                     String operationName,",
          "300:                                                                                                     RawVariables rawVariables,",
          "301:                                                                                                     Options options) {",
          "302:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
          "304:         return new ExecutableNormalizedOperationFactory().createExecutableNormalizedOperationImplWithRawVariables(graphQLSchema,",
          "305:                 getOperationResult.operationDefinition,",
          "306:                 getOperationResult.fragmentsByName,",
          "307:                 rawVariables,",
          "308:                 options,",
          "309:                 true",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "279:                                                                                                   OperationDefinition operationDefinition,",
          "280:                                                                                                   Map<String, FragmentDefinition> fragments,",
          "281:                                                                                                   RawVariables rawVariables,",
          "283:         List<VariableDefinition> variableDefinitions = operationDefinition.getVariableDefinitions();",
          "284:         CoercedVariables coercedVariableValues = ValuesResolver.coerceVariableValues(graphQLSchema,",
          "285:                 variableDefinitions,",
          "",
          "[Removed Lines]",
          "282:                                                                                                   Options options) {",
          "",
          "[Added Lines]",
          "317:                                                                                                   Options options,",
          "318:                                                                                                   boolean deferSupport) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "296:                 fragments,",
          "297:                 coercedVariableValues,",
          "298:                 normalizedVariableValues,",
          "300:     }",
          "",
          "[Removed Lines]",
          "299:                 options);",
          "",
          "[Added Lines]",
          "335:                 options,",
          "336:                 deferSupport);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "307:                                                                     Map<String, FragmentDefinition> fragments,",
          "308:                                                                     CoercedVariables coercedVariableValues,",
          "309:                                                                     @Nullable Map<String, NormalizedInputValue> normalizedVariableValues,",
          "311:         FieldCollectorNormalizedQueryParams parameters = FieldCollectorNormalizedQueryParams",
          "312:                 .newParameters()",
          "313:                 .fragments(fragments)",
          "",
          "[Removed Lines]",
          "310:                                                                     Options options) {",
          "",
          "[Added Lines]",
          "347:                                                                     Options options,",
          "348:                                                                     boolean deferSupport) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "349:                     captureMergedField,",
          "350:                     coordinatesToNormalizedFields,",
          "351:                     1,",
          "353:         }",
          "354:         for (FieldCollectorNormalizedQueryParams.PossibleMerger possibleMerger : parameters.getPossibleMergerList()) {",
          "355:             List<ExecutableNormalizedField> childrenWithSameResultKey = possibleMerger.parent.getChildrenWithSameResultKey(possibleMerger.resultKey);",
          "",
          "[Removed Lines]",
          "352:                     options.getMaxChildrenDepth());",
          "",
          "[Added Lines]",
          "390:                     options.getMaxChildrenDepth(),",
          "391:                     deferSupport);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "374:                                         BiConsumer<ExecutableNormalizedField, MergedField> captureMergedField,",
          "375:                                         ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields,",
          "376:                                         int curLevel,",
          "378:         if (curLevel > maxLevel) {",
          "379:             throw new AbortExecutionException(\"Maximum query depth exceeded \" + curLevel + \" > \" + maxLevel);",
          "380:         }",
          "384:         for (ExecutableNormalizedField childENF : nextLevel.children) {",
          "385:             executableNormalizedField.addChild(childENF);",
          "",
          "[Removed Lines]",
          "377:                                         int maxLevel) {",
          "382:         CollectNFResult nextLevel = collectFromMergedField(fieldCollectorNormalizedQueryParams, executableNormalizedField, fieldAndAstParents, curLevel + 1);",
          "",
          "[Added Lines]",
          "416:                                         int maxLevel,",
          "417:                                         boolean deferSupport) {",
          "422:         CollectNFResult nextLevel = collectFromMergedField(fieldCollectorNormalizedQueryParams, executableNormalizedField, fieldAndAstParents, curLevel + 1, deferSupport);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "398:                     captureMergedField,",
          "399:                     coordinatesToNormalizedFields,",
          "400:                     curLevel + 1,",
          "402:         }",
          "403:     }",
          "",
          "[Removed Lines]",
          "401:                     maxLevel);",
          "",
          "[Added Lines]",
          "441:                     maxLevel,",
          "442:                     deferSupport);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "446:     public CollectNFResult collectFromMergedField(FieldCollectorNormalizedQueryParams parameters,",
          "447:                                                   ExecutableNormalizedField executableNormalizedField,",
          "448:                                                   ImmutableList<FieldAndAstParent> mergedField,",
          "450:         List<GraphQLFieldDefinition> fieldDefs = executableNormalizedField.getFieldDefinitions(parameters.getGraphQLSchema());",
          "451:         Set<GraphQLObjectType> possibleObjects = resolvePossibleObjects(fieldDefs, parameters.getGraphQLSchema());",
          "452:         if (possibleObjects.isEmpty()) {",
          "",
          "[Removed Lines]",
          "449:                                                   int level) {",
          "",
          "[Added Lines]",
          "490:                                                   int level,",
          "491:                                                   boolean deferSupport) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "472:         ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
          "473:         ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
          "477:         return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
          "478:     }",
          "",
          "[Removed Lines]",
          "475:         createNFs(resultNFs, parameters, fieldsByName, normalizedFieldToAstFields, level, executableNormalizedField);",
          "",
          "[Added Lines]",
          "517:         createNFs(resultNFs, parameters, fieldsByName, normalizedFieldToAstFields, level, executableNormalizedField, deferSupport);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "498:         ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
          "499:         ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
          "503:         return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
          "504:     }",
          "",
          "[Removed Lines]",
          "501:         createNFs(resultNFs, parameters, fieldsByName, normalizedFieldToAstFields, 1, null);",
          "",
          "[Added Lines]",
          "543:         createNFs(resultNFs, parameters, fieldsByName, normalizedFieldToAstFields, 1, null, false);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "508:                            Map<String, List<CollectedField>> fieldsByName,",
          "509:                            ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields,",
          "510:                            int level,",
          "512:         for (String resultKey : fieldsByName.keySet()) {",
          "513:             List<CollectedField> fieldsWithSameResultKey = fieldsByName.get(resultKey);",
          "515:             for (CollectedFieldGroup fieldGroup : commonParentsGroups) {",
          "516:                 ExecutableNormalizedField nf = createNF(parameters, fieldGroup, level, parent);",
          "517:                 if (nf == null) {",
          "",
          "[Removed Lines]",
          "511:                            ExecutableNormalizedField parent) {",
          "514:             List<CollectedFieldGroup> commonParentsGroups = groupByCommonParents(fieldsWithSameResultKey);",
          "",
          "[Added Lines]",
          "553:                            ExecutableNormalizedField parent,",
          "554:                            boolean deferSupport) {",
          "557:             List<CollectedFieldGroup> commonParentsGroups = groupByCommonParents(fieldsWithSameResultKey, deferSupport);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "570:         }",
          "571:     }",
          "574:         ImmutableSet.Builder<GraphQLObjectType> objectTypes = ImmutableSet.builder();",
          "575:         DeferExecution deferExecution = null;",
          "576:         for (CollectedField collectedField : fields) {",
          "",
          "[Removed Lines]",
          "573:     private List<CollectedFieldGroup> groupByCommonParents(Collection<CollectedField> fields) {",
          "",
          "[Added Lines]",
          "616:     private List<CollectedFieldGroup> groupByCommonParents(Collection<CollectedField> fields, boolean deferSupport) {",
          "617:         if (deferSupport) {",
          "618:             return groupByCommonParentsWithDeferSupport(fields);",
          "619:         } else {",
          "620:             return groupByCommonParentsNoDeferSupport(fields);",
          "621:         }",
          "622:     }",
          "624:     private List<CollectedFieldGroup> groupByCommonParentsNoDeferSupport(Collection<CollectedField> fields) {",
          "625:         ImmutableSet.Builder<GraphQLObjectType> objectTypes = ImmutableSet.builder();",
          "626:         for (CollectedField collectedField : fields) {",
          "627:             objectTypes.addAll(collectedField.objectTypes);",
          "628:         }",
          "629:         Set<GraphQLObjectType> allRelevantObjects = objectTypes.build();",
          "630:         Map<GraphQLType, ImmutableList<CollectedField>> groupByAstParent = groupingBy(fields, fieldAndType -> fieldAndType.astTypeCondition);",
          "631:         if (groupByAstParent.size() == 1) {",
          "632:             return singletonList(new CollectedFieldGroup(ImmutableSet.copyOf(fields), allRelevantObjects, null));",
          "633:         }",
          "634:         ImmutableList.Builder<CollectedFieldGroup> result = ImmutableList.builder();",
          "635:         for (GraphQLObjectType objectType : allRelevantObjects) {",
          "636:             Set<CollectedField> relevantFields = filterSet(fields, field -> field.objectTypes.contains(objectType));",
          "637:             result.add(new CollectedFieldGroup(relevantFields, singleton(objectType), null));",
          "638:         }",
          "639:         return result.build();",
          "640:     }",
          "642:     private List<CollectedFieldGroup> groupByCommonParentsWithDeferSupport(Collection<CollectedField> fields) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "616:             } else if (selection instanceof InlineFragment) {",
          "617:                 collectInlineFragment(parameters, result, (InlineFragment) selection, possibleObjects, astTypeCondition, deferLabel);",
          "618:             } else if (selection instanceof FragmentSpread) {",
          "620:             }",
          "621:         }",
          "622:     }",
          "",
          "[Removed Lines]",
          "619:                 collectFragmentSpread(parameters, result, (FragmentSpread) selection, possibleObjects, deferLabel);",
          "",
          "[Added Lines]",
          "688:                 collectFragmentSpread(parameters, result, (FragmentSpread) selection, possibleObjects);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "647:     private void collectFragmentSpread(FieldCollectorNormalizedQueryParams parameters,",
          "648:                                        List<CollectedField> result,",
          "649:                                        FragmentSpread fragmentSpread,",
          "652:     ) {",
          "653:         if (!conditionalNodes.shouldInclude(fragmentSpread,",
          "654:                 parameters.getCoercedVariableValues(),",
          "",
          "[Removed Lines]",
          "650:                                        Set<GraphQLObjectType> possibleObjects,",
          "651:                                        DeferLabel deferLabel",
          "",
          "[Added Lines]",
          "719:                                        Set<GraphQLObjectType> possibleObjects",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryDeferTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryDeferTest.groovy": [
          "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryDeferTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryDeferTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "453:         Document document = TestUtil.parseQuery(query)",
          "454:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "457:         return printTreeWithIncrementalExecutionDetails(tree)",
          "458:     }",
          "",
          "[Removed Lines]",
          "456:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "456:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariablesWithDeferSupport(",
          "457:                 graphQLSchema,",
          "458:                 document,",
          "459:                 null,",
          "460:                 RawVariables.of(variables),",
          "461:                 ExecutableNormalizedOperationFactory.Options.defaultOptions(),",
          "462:         )",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy": [
          "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import static graphql.parser.Parser.parseValue",
          "28: import static graphql.schema.FieldCoordinates.coordinates",
          "31:     def \"test\"() {",
          "32:         String schema = \"\"\"",
          "33: type Query{",
          "",
          "[Removed Lines]",
          "30: class ExecutableNormalizedOperationFactoryTest extends Specification {",
          "",
          "[Added Lines]",
          "30: abstract class ExecutableNormalizedOperationFactoryTest extends Specification {",
          "31:     static boolean deferSupport",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:         Document document = TestUtil.parseQuery(query)",
          "117:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "119:         expect:",
          "",
          "[Removed Lines]",
          "115:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "116:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "118:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199:         Document document = TestUtil.parseQuery(query)",
          "201:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "203:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "205:         expect:",
          "",
          "[Removed Lines]",
          "202:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "204:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "279:         Document document = TestUtil.parseQuery(query)",
          "281:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "283:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "285:         expect:",
          "",
          "[Removed Lines]",
          "282:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "284:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "330:         Document document = TestUtil.parseQuery(query)",
          "332:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "334:         def printedTree = printTree(tree)",
          "336:         expect:",
          "",
          "[Removed Lines]",
          "333:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "335:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "373:         Document document = TestUtil.parseQuery(query)",
          "375:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "377:         def printedTree = printTree(tree)",
          "379:         expect:",
          "",
          "[Removed Lines]",
          "376:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "378:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "423:         Document document = TestUtil.parseQuery(query)",
          "425:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "427:         def printedTree = printTree(tree)",
          "429:         expect:",
          "",
          "[Removed Lines]",
          "426:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "428:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "486:         Document document = TestUtil.parseQuery(query)",
          "488:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "490:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "492:         expect:",
          "",
          "[Removed Lines]",
          "489:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "491:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "532:         Document document = TestUtil.parseQuery(query)",
          "534:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "536:         def printedTree = printTree(tree)",
          "538:         expect:",
          "",
          "[Removed Lines]",
          "535:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "537:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "576:         Document document = TestUtil.parseQuery(query)",
          "578:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "580:         def printedTree = printTree(tree)",
          "582:         expect:",
          "",
          "[Removed Lines]",
          "579:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "581:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "620:         Document document = TestUtil.parseQuery(query)",
          "622:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "624:         def printedTree = printTree(tree)",
          "626:         expect:",
          "",
          "[Removed Lines]",
          "623:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "625:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "652:         Document document = TestUtil.parseQuery(query)",
          "654:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "656:         def printedTree = printTree(tree)",
          "658:         expect:",
          "",
          "[Removed Lines]",
          "655:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "657:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "703:         Document document = TestUtil.parseQuery(query)",
          "705:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "707:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "709:         expect:",
          "",
          "[Removed Lines]",
          "706:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "708:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "753:         Document document = TestUtil.parseQuery(query)",
          "755:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "757:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "759:         expect:",
          "",
          "[Removed Lines]",
          "756:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "758:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "792:         Document document = TestUtil.parseQuery(query)",
          "794:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "796:         def printedTree = printTree(tree)",
          "798:         expect:",
          "",
          "[Removed Lines]",
          "795:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "797:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "836:         Document document = TestUtil.parseQuery(query)",
          "838:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "840:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "842:         expect:",
          "",
          "[Removed Lines]",
          "839:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "841:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "876:         Document document = TestUtil.parseQuery(query)",
          "878:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "880:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "882:         expect:",
          "",
          "[Removed Lines]",
          "879:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "881:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "924:         Document document = TestUtil.parseQuery(query)",
          "926:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "928:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "930:         expect:",
          "",
          "[Removed Lines]",
          "927:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "929:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1027:         def subFooField = (document.getDefinitions()[1] as FragmentDefinition).getSelectionSet().getSelections()[0] as Field",
          "1029:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1031:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
          "1033:         expect:",
          "",
          "[Removed Lines]",
          "1030:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1032:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1070:         def idField = petsField.getSelectionSet().getSelections()[0] as Field",
          "1072:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1074:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
          "",
          "[Removed Lines]",
          "1073:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1075:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1119:         def typeField = selections[3] as Field",
          "1121:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1123:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
          "1125:         expect:",
          "",
          "[Removed Lines]",
          "1122:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1124:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1176:         Document document = TestUtil.parseQuery(query)",
          "1178:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1180:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "1182:         expect:",
          "",
          "[Removed Lines]",
          "1179:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1181:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1219:         Document document = TestUtil.parseQuery(query)",
          "1221:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1223:         def printedTree = printTree(tree)",
          "1225:         expect:",
          "",
          "[Removed Lines]",
          "1222:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1224:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1247:         Document document = TestUtil.parseQuery(query)",
          "1249:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1251:         def normalizedFieldToMergedField = tree.getNormalizedFieldToMergedField()",
          "1252:         Traverser<ExecutableNormalizedField> traverser = Traverser.depthFirst({ it.getChildren() })",
          "1253:         List<MergedField> result = new ArrayList<>()",
          "",
          "[Removed Lines]",
          "1250:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1252:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1287:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1289:         when:",
          "1291:         def coordinatesToNormalizedFields = tree.coordinatesToNormalizedFields",
          "1293:         then:",
          "",
          "[Removed Lines]",
          "1290:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1292:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1386:         Document document = TestUtil.parseQuery(mutation)",
          "1388:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1390:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "1392:         expect:",
          "",
          "[Removed Lines]",
          "1389:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1391:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1444:         def expectedNormalizedArgValue = [foo: new NormalizedInputValue(\"String\", parseValue('\"foo\"')), input2: new NormalizedInputValue(\"Input2\", [bar: new NormalizedInputValue(\"Int\", parseValue(\"123\"))])]",
          "1445:         when:",
          "1447:         def topLevelField = tree.getTopLevelFields().get(0)",
          "1448:         def secondField = topLevelField.getChildren().get(0)",
          "1449:         def arg1 = secondField.getNormalizedArgument(\"arg1\")",
          "",
          "[Removed Lines]",
          "1446:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "1448:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1484:         def document = TestUtil.parseQuery(query)",
          "1485:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1486:         when:",
          "1489:         then:",
          "1490:         def topLevelField = tree.getTopLevelFields().get(0)",
          "",
          "[Removed Lines]",
          "1487:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1489:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1523:                 otherVar: null,",
          "1524:         ]",
          "1525:         when:",
          "1528:         then:",
          "1529:         def topLevelField = tree.getTopLevelFields().get(0)",
          "",
          "[Removed Lines]",
          "1526:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "1528:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1575:         Document document = TestUtil.parseQuery(query)",
          "1576:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1577:         when:",
          "1579:         def topLevelField = tree.getTopLevelFields().get(0)",
          "1580:         def arg1 = topLevelField.getNormalizedArgument(\"arg1\")",
          "1581:         def arg2 = topLevelField.getNormalizedArgument(\"arg2\")",
          "",
          "[Removed Lines]",
          "1578:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "1580:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1628:         Document document = TestUtil.parseQuery(query)",
          "1629:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1630:         when:",
          "1632:         def topLevelField = tree.getTopLevelFields().get(0)",
          "1633:         def arg1 = topLevelField.getNormalizedArgument(\"arg1\")",
          "1634:         def arg2 = topLevelField.getNormalizedArgument(\"arg2\")",
          "",
          "[Removed Lines]",
          "1631:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "1633:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1683:         Document document = TestUtil.parseQuery(query)",
          "1684:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1685:         when:",
          "1688:         then:",
          "1689:         tree.normalizedFieldToMergedField.size() == 3",
          "",
          "[Removed Lines]",
          "1686:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1688:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1741:         Document document = TestUtil.parseQuery(query)",
          "1742:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1743:         when:",
          "1745:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "1747:         then:",
          "",
          "[Removed Lines]",
          "1744:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1746:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1789:         Document document = TestUtil.parseQuery(query)",
          "1790:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1791:         when:",
          "1793:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "1795:         then:",
          "",
          "[Removed Lines]",
          "1792:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1794:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1865:         Document document = TestUtil.parseQuery(query)",
          "1866:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1867:         when:",
          "1869:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "1871:         then:",
          "",
          "[Removed Lines]",
          "1868:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1870:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1929:         Document document = TestUtil.parseQuery(query)",
          "1930:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1931:         when:",
          "1933:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "1935:         then:",
          "",
          "[Removed Lines]",
          "1932:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1934:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1986:         Document document = TestUtil.parseQuery(query)",
          "1987:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1988:         when:",
          "1990:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "1992:         then:",
          "",
          "[Removed Lines]",
          "1989:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1991:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2061:         Document document = TestUtil.parseQuery(query)",
          "2062:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2063:         when:",
          "2065:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2067:         then:",
          "",
          "[Removed Lines]",
          "2064:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2066:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2123:         Document document = TestUtil.parseQuery(query)",
          "2124:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2125:         when:",
          "2127:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2129:         then:",
          "",
          "[Removed Lines]",
          "2126:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2128:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2165:         Document document = TestUtil.parseQuery(query)",
          "2166:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2167:         when:",
          "2169:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2171:         then:",
          "",
          "[Removed Lines]",
          "2168:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2170:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2208:         Document document = TestUtil.parseQuery(query)",
          "2209:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2210:         when:",
          "2212:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2214:         then:",
          "",
          "[Removed Lines]",
          "2211:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2213:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2251:         Document document = TestUtil.parseQuery(query)",
          "2252:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2253:         when:",
          "2255:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2257:         then:",
          "",
          "[Removed Lines]",
          "2254:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2256:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2326:         Document document = TestUtil.parseQuery(query)",
          "2327:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2328:         when:",
          "2330:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2332:         then:",
          "",
          "[Removed Lines]",
          "2329:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2331:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2402:         Document document = TestUtil.parseQuery(query)",
          "2403:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2404:         when:",
          "2406:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2408:         then:",
          "",
          "[Removed Lines]",
          "2405:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2407:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2464:         Document document = TestUtil.parseQuery(query)",
          "2465:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2466:         when:",
          "2468:         println String.join(\"\\n\", printTree(tree))",
          "2469:         def printedTree = printTree(tree)",
          "",
          "[Removed Lines]",
          "2467:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "2469:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2521:         Document document = TestUtil.parseQuery(query)",
          "2522:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2523:         when:",
          "2525:         def printedTree = printTreeAndDirectives(tree)",
          "2527:         then:",
          "",
          "[Removed Lines]",
          "2524:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "2526:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2585:         Document document = TestUtil.parseQuery(query)",
          "2587:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2589:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "2591:         expect:",
          "",
          "[Removed Lines]",
          "2588:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2590:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2638:         Document document = TestUtil.parseQuery(query)",
          "2640:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2642:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "2644:         expect:",
          "",
          "[Removed Lines]",
          "2641:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2643:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2685:         Document document = TestUtil.parseQuery(query)",
          "2687:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2689:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "2691:         expect:",
          "",
          "[Removed Lines]",
          "2688:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2690:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2875:         then:",
          "2876:         noExceptionThrown()",
          "2877:     }",
          "2878: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2881:     private static ExecutableNormalizedOperation localCreateExecutableNormalizedOperation(",
          "2882:             GraphQLSchema graphQLSchema,",
          "2883:             Document document,",
          "2884:             String operationName,",
          "2885:             CoercedVariables coercedVariableValues",
          "2886:     ) {",
          "2887:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2888:         if (deferSupport) {",
          "2889:             return dependencyGraph.createExecutableNormalizedOperationWithDeferSupport(graphQLSchema, document, operationName, coercedVariableValues)",
          "2890:         } else {",
          "2891:             return dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, operationName, coercedVariableValues)",
          "2892:         }",
          "2893:     }",
          "2895:     private static ExecutableNormalizedOperation localCreateExecutableNormalizedOperationWithRawVariables(",
          "2896:             GraphQLSchema graphQLSchema,",
          "2897:             Document document,",
          "2898:             String operationName,",
          "2899:             RawVariables rawVariables",
          "2900:     ) {",
          "2901:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2902:         if (deferSupport) {",
          "2903:             return dependencyGraph.createExecutableNormalizedOperationWithRawVariablesWithDeferSupport(",
          "2904:                     graphQLSchema,",
          "2905:                     document,",
          "2906:                     operationName,",
          "2907:                     rawVariables,",
          "2908:                     ExecutableNormalizedOperationFactory.Options.defaultOptions()",
          "2909:             )",
          "2910:         } else {",
          "2911:             return dependencyGraph.createExecutableNormalizedOperationWithRawVariables(",
          "2912:                     graphQLSchema,",
          "2913:                     document,",
          "2914:                     operationName,",
          "2915:                     rawVariables",
          "2916:             )",
          "2917:         }",
          "2918:     }",
          "2919: }",
          "2921: class ExecutableNormalizedOperationFactoryTestWithDeferSupport extends ExecutableNormalizedOperationFactoryTest {",
          "2922:     static {",
          "2923:         deferSupport = true",
          "2924:     }",
          "2925: }",
          "2927: class ExecutableNormalizedOperationFactoryTestNoDeferSupport extends ExecutableNormalizedOperationFactoryTest {",
          "2928:     static {",
          "2929:         deferSupport = false",
          "2930:     }",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerDeferTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerDeferTest.groovy": [
          "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerDeferTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerDeferTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "379:         Document originalDocument = TestUtil.parseQuery(query)",
          "381:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "383:     }",
          "385:     private List<ExecutableNormalizedField> createNormalizedFields(GraphQLSchema schema, String query, Map<String, Object> variables = [:]) {",
          "",
          "[Removed Lines]",
          "382:         return dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, originalDocument, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "382:         return dependencyGraph.createExecutableNormalizedOperationWithRawVariablesWithDeferSupport(",
          "383:                 schema,",
          "384:                 originalDocument,",
          "385:                 null,",
          "386:                 RawVariables.of(variables),",
          "387:                 ExecutableNormalizedOperationFactory.Options.defaultOptions()",
          "388:         )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55f2e5d4e275da2568169f53ed38a34657b0e33c",
      "candidate_info": {
        "commit_hash": "55f2e5d4e275da2568169f53ed38a34657b0e33c",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/55f2e5d4e275da2568169f53ed38a34657b0e33c",
        "files": [
          "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
        ],
        "message": "Added benchmark code",
        "before_after_code_files": [
          "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
          ],
          "candidate": [
            "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
          ]
        }
      },
      "candidate_diff": {
        "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java": [
          "File: src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java -> src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package benchmark;",
          "3: import graphql.execution.CoercedVariables;",
          "4: import graphql.language.Document;",
          "5: import graphql.normalized.ExecutableNormalizedOperation;",
          "6: import graphql.normalized.ExecutableNormalizedOperationFactory;",
          "7: import graphql.parser.Parser;",
          "8: import graphql.schema.GraphQLSchema;",
          "9: import graphql.schema.idl.SchemaGenerator;",
          "10: import org.openjdk.jmh.annotations.Benchmark;",
          "11: import org.openjdk.jmh.annotations.BenchmarkMode;",
          "12: import org.openjdk.jmh.annotations.Fork;",
          "13: import org.openjdk.jmh.annotations.Level;",
          "14: import org.openjdk.jmh.annotations.Measurement;",
          "15: import org.openjdk.jmh.annotations.Mode;",
          "16: import org.openjdk.jmh.annotations.OutputTimeUnit;",
          "17: import org.openjdk.jmh.annotations.Param;",
          "18: import org.openjdk.jmh.annotations.Scope;",
          "19: import org.openjdk.jmh.annotations.Setup;",
          "20: import org.openjdk.jmh.annotations.State;",
          "21: import org.openjdk.jmh.annotations.Warmup;",
          "22: import org.openjdk.jmh.runner.Runner;",
          "23: import org.openjdk.jmh.runner.RunnerException;",
          "24: import org.openjdk.jmh.runner.options.Options;",
          "25: import org.openjdk.jmh.runner.options.OptionsBuilder;",
          "27: import java.util.concurrent.TimeUnit;",
          "29: import static graphql.normalized.ExecutableNormalizedOperationFactory.*;",
          "31: @State(Scope.Benchmark)",
          "32: @Warmup(iterations = 2, time = 5)",
          "33: @Measurement(iterations = 3, time = 5)",
          "34: @Fork(2)",
          "35: public class ENFBenchmarkDeepIntrospection {",
          "37:     @Param({\"2\", \"10\", \"20\"})",
          "38:     int howDeep = 2;",
          "40:     String query = \"\";",
          "42:     GraphQLSchema schema;",
          "43:     Document document;",
          "45:     @Setup(Level.Trial)",
          "46:     public void setUp() {",
          "47:         String schemaString = BenchmarkUtils.loadResource(\"large-schema-2.graphqls\");",
          "48:         schema = SchemaGenerator.createdMockedSchema(schemaString);",
          "50:         query = createDeepQuery(howDeep);",
          "51:         document = Parser.parse(query);",
          "52:     }",
          "53:     @Benchmark",
          "54:     @BenchmarkMode(Mode.AverageTime)",
          "55:     @OutputTimeUnit(TimeUnit.MILLISECONDS)",
          "56:     public ExecutableNormalizedOperation benchMarkAvgTime() {",
          "57:         ExecutableNormalizedOperationFactory.Options options  = ExecutableNormalizedOperationFactory.Options.defaultOptions();",
          "58:         ExecutableNormalizedOperation executableNormalizedOperation = createExecutableNormalizedOperation(schema,",
          "59:                 document,",
          "60:                 null,",
          "61:                 CoercedVariables.emptyVariables(),",
          "62:                 options);",
          "63:         return executableNormalizedOperation;",
          "64:     }",
          "66:     public static void main(String[] args) throws RunnerException {",
          "67:         runAtStartup();",
          "69:         Options opt = new OptionsBuilder()",
          "70:                 .include(\"benchmark.ENFBenchmarkDeepIntrospection\")",
          "71:                 .build();",
          "73:         new Runner(opt).run();",
          "74:     }",
          "76:     private static void runAtStartup() {",
          "78:         ENFBenchmarkDeepIntrospection benchmarkIntrospection = new ENFBenchmarkDeepIntrospection();",
          "79:         benchmarkIntrospection.howDeep = 2;",
          "81:         BenchmarkUtils.runInToolingForSomeTimeThenExit(",
          "82:                 benchmarkIntrospection::setUp,",
          "83:                 () -> { while (true) { benchmarkIntrospection.benchMarkAvgTime(); }},",
          "84:                 () ->{}",
          "85:         );",
          "86:     }",
          "90:     private static String createDeepQuery(int depth) {",
          "91:         String result = \"query test {\\n\" +",
          "92:                 \"  __schema {\\n\" +",
          "93:                 \"    types {\\n\" +",
          "94:                 \"      ...F1\\n\" +",
          "95:                 \"    }\\n\" +",
          "96:                 \"  }\\n\" +",
          "97:                 \"}\\n\";",
          "99:         for (int i = 1; i < depth; i++) {",
          "100:             result += \"        fragment F\" + i + \" on __Type {\\n\" +",
          "101:                     \"          fields {\\n\" +",
          "102:                     \"            type {\\n\" +",
          "103:                     \"              ...F\" + (i + 1) +\"\\n\" +",
          "104:                     \"            }\\n\" +",
          "105:                     \"          }\\n\" +",
          "106:                     \"\\n\" +",
          "107:                     \"          ofType {\\n\" +",
          "108:                     \"            ...F\"+ (i + 1) + \"\\n\" +",
          "109:                     \"          }\\n\" +",
          "110:                     \"        }\\n\";",
          "111:         }",
          "112:         result += \"        fragment F\" + depth + \" on __Type {\\n\" +",
          "113:                 \"          fields {\\n\" +",
          "114:                 \"            type {\\n\" +",
          "115:                 \"name\\n\" +",
          "116:                 \"            }\\n\" +",
          "117:                 \"          }\\n\" +",
          "118:                 \"}\\n\";",
          "119:         return result;",
          "120:     }",
          "122: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd6ec10c13146cc3a001db89e6842bd973064949",
      "candidate_info": {
        "commit_hash": "bd6ec10c13146cc3a001db89e6842bd973064949",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/bd6ec10c13146cc3a001db89e6842bd973064949",
        "files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
          "src/test/groovy/graphql/UnionTest.groovy",
          "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy"
        ],
        "message": "Fixed tests and also added unit test for depth in good faith",
        "before_after_code_files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
          "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy",
          "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
            "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
            "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy",
            "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy"
          ],
          "candidate": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
            "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
            "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy",
            "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java": [
          "File: src/main/java/graphql/normalized/ExecutableNormalizedOperation.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:             Map<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField,",
          "43:             Map<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives,",
          "44:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields,",
          "45:             int operationDepth) {",
          "46:         this.operation = operation;",
          "47:         this.operationName = operationName;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:             int operationFieldCount,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:         this.normalizedFieldToMergedField = normalizedFieldToMergedField;",
          "51:         this.normalizedFieldToQueryDirectives = normalizedFieldToQueryDirectives;",
          "52:         this.coordinatesToNormalizedFields = coordinatesToNormalizedFields;",
          "54:         this.operationDepth = operationDepth;",
          "55:     }",
          "",
          "[Removed Lines]",
          "53:         this.operationFieldCount = fieldToNormalizedField.keySet().size();",
          "",
          "[Added Lines]",
          "54:         this.operationFieldCount = operationFieldCount;",
          "",
          "---------------"
        ],
        "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java": [
          "File: src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "431:         private final ImmutableMap.Builder<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives = ImmutableMap.builder();",
          "432:         private final ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
          "433:         private int fieldCount = 0;",
          "435:         private ExecutableNormalizedOperationFactoryImpl(",
          "436:                 GraphQLSchema graphQLSchema,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "434:         private int maxDepthSeen = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "457:             CollectNFResult collectFromOperationResult = collectFromOperation(rootType);",
          "460:             for (ExecutableNormalizedField topLevel : collectFromOperationResult.children) {",
          "461:                 ImmutableList<FieldAndAstParent> fieldAndAstParents = collectFromOperationResult.normalizedFieldToAstFields.get(topLevel);",
          "462:                 MergedField mergedField = newMergedField(fieldAndAstParents);",
          "",
          "[Removed Lines]",
          "459:             int maxDepthSeen = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "485:                     normalizedFieldToMergedField.build(),",
          "486:                     normalizedFieldToQueryDirectives.build(),",
          "487:                     coordinatesToNormalizedFields.build(),",
          "488:                     maxDepthSeen",
          "489:             );",
          "490:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "488:                     fieldCount,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "629:         private ExecutableNormalizedField createNF(CollectedFieldGroup collectedFieldGroup,",
          "630:                                                    int level,",
          "631:                                                    ExecutableNormalizedField parent) {",
          "632:             Field field;",
          "633:             Set<GraphQLObjectType> objectTypes = collectedFieldGroup.objectTypes;",
          "634:             field = collectedFieldGroup.fields.iterator().next().field;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "634:             this.fieldCount++;",
          "635:             if (this.fieldCount > this.options.getMaxFieldsCount()) {",
          "636:                 throw new AbortExecutionException(\"Maximum field count exceeded. \" + this.fieldCount + \" > \" + this.options.getMaxFieldsCount());",
          "637:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "641:                 normalizedArgumentValues = ValuesResolver.getNormalizedArgumentValues(fieldDefinition.getArguments(), field.getArguments(), this.normalizedVariableValues);",
          "642:             }",
          "643:             ImmutableList<String> objectTypeNames = map(objectTypes, GraphQLObjectType::getName);",
          "648:             return ExecutableNormalizedField.newNormalizedField()",
          "649:                     .alias(field.getAlias())",
          "650:                     .resolvedArguments(argumentValues)",
          "",
          "[Removed Lines]",
          "644:             this.fieldCount++;",
          "645:             if (this.fieldCount > this.options.getMaxFieldsCount()) {",
          "646:                 throw new AbortExecutionException(\"Maximum field count exceeded. \" + this.fieldCount + \" > \" + this.options.getMaxFieldsCount());",
          "647:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy": [
          "File: src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy -> src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "893:         given:",
          "894:         def graphQLSchema = createComplexSchema()",
          "896:         when:",
          "898:             {",
          "899:                 nodeType: __type(name: \"Node\") {",
          "900:                     possibleTypes {",
          "",
          "[Removed Lines]",
          "897:         def result = GraphQL.newGraphQL(graphQLSchema).build().execute(\"\"\"",
          "",
          "[Added Lines]",
          "896:         GraphQL graphQL = GraphQL.newGraphQL(graphQLSchema).build()",
          "899:         String query = \"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "902:                         name",
          "903:                     }",
          "904:                 }",
          "906:                     possibleTypes {",
          "907:                         kind",
          "908:                         name",
          "",
          "[Removed Lines]",
          "905:                 resourceType: __type(name: \"Resource\") {",
          "",
          "[Added Lines]",
          "907:             }",
          "908:         \"\"\"",
          "909:         def result = graphQL.execute(query)",
          "911:         then:",
          "912:         !result.errors",
          "913:         result.data == [",
          "914:                 nodeType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']]],",
          "915:         ]",
          "917:         when:",
          "918:         query = \"\"\"",
          "919:         {",
          "920:             resourceType: __type(name: \"Resource\") {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "911:                         kind",
          "912:                         name",
          "913:                     }",
          "916:                     interfaces {",
          "917:                         kind",
          "918:                         name",
          "919:                     }",
          "920:                 }",
          "924:         then:",
          "925:         !result.errors",
          "926:         result.data == [",
          "928:                 imageType   : [interfaces: [[kind: 'INTERFACE', name: 'Resource'], [kind: 'INTERFACE', name: 'Node']]],",
          "930:         ]",
          "931:     }",
          "",
          "[Removed Lines]",
          "914:                 }",
          "915:                 imageType: __type(name: \"Image\") {",
          "921:             }",
          "922:         \"\"\")",
          "927:                 nodeType    : [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']]],",
          "929:                 resourceType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']], interfaces: [[kind: 'INTERFACE', name: 'Node']]]",
          "",
          "[Added Lines]",
          "929:                 }",
          "930:         }",
          "931:         \"\"\"",
          "932:         result = graphQL.execute(query)",
          "934:         then:",
          "935:         !result.errors",
          "936:         result.data == [",
          "937:                 resourceType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']], interfaces: [[kind: 'INTERFACE', name: 'Node']]]",
          "938:         ]",
          "940:         when:",
          "942:         query = \"\"\"",
          "943:         {",
          "944:             imageType: __type(name: \"Image\") {",
          "950:         }",
          "951:         \"\"\"",
          "952:         result = graphQL.execute(query)",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy": [
          "File: src/test/groovy/graphql/UnionTest.groovy -> src/test/groovy/graphql/UnionTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: class UnionTest extends Specification {",
          "8:         def query = \"\"\"",
          "9:             {",
          "10:                 Named: __type(name: \"Named\") {",
          "",
          "[Removed Lines]",
          "7:     def \"can introspect on union and intersection types\"() {",
          "",
          "[Added Lines]",
          "7:     def \"can introspect on union types\"() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:                   possibleTypes { name }",
          "16:                   enumValues { name }",
          "17:                   inputFields { name }",
          "27:                 }",
          "28:             }",
          "29:             \"\"\"",
          "",
          "[Removed Lines]",
          "18:             }",
          "19:                 Pet: __type(name: \"Pet\") {",
          "20:                   kind",
          "21:                   name",
          "22:                   fields { name }",
          "23:                   interfaces { name }",
          "24:                   possibleTypes { name }",
          "25:                   enumValues { name }",
          "26:                   inputFields { name }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:                 ],",
          "43:                 enumValues   : null,",
          "44:                 inputFields  : null",
          "47:                                       kind         : 'UNION',",
          "48:                                       name         : 'Pet',",
          "49:                                       fields       : null,",
          "",
          "[Removed Lines]",
          "45:         ],",
          "46:                               Pet  : [",
          "",
          "[Added Lines]",
          "36:         ]]",
          "37:         when:",
          "38:         def executionResult = GraphQL.newGraphQL(GarfieldSchema.GarfieldSchema).build().execute(query)",
          "40:         then:",
          "41:         executionResult.data == expectedResult",
          "44:     }",
          "46:     def \"can introspect on intersection types\"() {",
          "47:         def query = \"\"\"",
          "48:             {",
          "49:                 Pet: __type(name: \"Pet\") {",
          "50:                   kind",
          "51:                   name",
          "52:                   fields { name }",
          "53:                   interfaces { name }",
          "54:                   possibleTypes { name }",
          "55:                   enumValues { name }",
          "56:                   inputFields { name }",
          "57:                 }",
          "58:             }",
          "59:             \"\"\"",
          "61:         def expectedResult = [Pet  : [",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy": [
          "File: src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy -> src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import graphql.ExecutionInput",
          "4: import graphql.ExecutionResult",
          "5: import graphql.TestUtil",
          "6: import graphql.execution.CoercedVariables",
          "7: import graphql.language.Document",
          "8: import graphql.normalized.ExecutableNormalizedOperationFactory",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import graphql.execution.AbortExecutionException",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:         when:",
          "25:         Document document = TestUtil.toDocument(IntrospectionQuery.INTROSPECTION_QUERY)",
          "29:         then:",
          "31:         eno.getOperationDepth() < GoodFaithIntrospection.GOOD_FAITH_MAX_DEPTH_COUNT  // currently 13",
          "32:     }",
          "",
          "[Removed Lines]",
          "26:         def eno = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphql.getGraphQLSchema(),document,",
          "27:         \"IntrospectionQuery\", CoercedVariables.emptyVariables())",
          "30:         eno.getOperationFieldCount() < GoodFaithIntrospection.GOOD_FAITH_MAX_FIELDS_COUNT  // currently 62",
          "",
          "[Added Lines]",
          "28:         def eno = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphql.getGraphQLSchema(), document,",
          "29:                 \"IntrospectionQuery\", CoercedVariables.emptyVariables())",
          "32:         eno.getOperationFieldCount() < GoodFaithIntrospection.GOOD_FAITH_MAX_FIELDS_COUNT  // currently 189",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:                 a1: __type(name : \"t\") { name }",
          "90:                 a2 :  __type(name : \"t1\") { name }",
          "91:             }",
          "94:         \"\"\" query badActor {",
          "95:                 __schema { types { name} }",
          "",
          "[Removed Lines]",
          "92:         \"\"\"                                                | _",
          "",
          "[Added Lines]",
          "94:         \"\"\"                                                                                           | _",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "101:                 a1: __schema { types { name} }",
          "102:                 a2 : __schema { types { name} }",
          "103:             }",
          "106:     }",
          "",
          "[Removed Lines]",
          "104:         \"\"\"                                     | _",
          "",
          "[Added Lines]",
          "106:         \"\"\"                                                                                           | _",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "161:         !er.errors.isEmpty()",
          "162:         er.errors[0] instanceof GoodFaithIntrospection.BadFaithIntrospectionError",
          "163:     }",
          "164: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:     def \"can stop deep queries\"() {",
          "169:         when:",
          "170:         def query = createDeepQuery(depth)",
          "171:         def then = System.currentTimeMillis()",
          "172:         ExecutionResult er = graphql.execute(query)",
          "173:         def ms = System.currentTimeMillis()-then",
          "175:         then:",
          "176:         !er.errors.isEmpty()",
          "177:         er.errors[0].class == targetError",
          "178:         er.data == null // it stopped hard - it did not continue to normal business",
          "179:         println \"Took \" + ms + \"ms\"",
          "181:         where:",
          "182:         depth | targetError",
          "183:         2     | GoodFaithIntrospection.BadFaithIntrospectionError.class",
          "184:         10    | AbortExecutionException.class",
          "185:         15    | AbortExecutionException.class",
          "186:         20    | AbortExecutionException.class",
          "187:         25    | AbortExecutionException.class",
          "188:         50    | AbortExecutionException.class",
          "189:         100    | AbortExecutionException.class",
          "190:     }",
          "192:     String createDeepQuery(int depth = 25) {",
          "193:         def result = \"\"\"",
          "194: query test {",
          "195:   __schema {",
          "196:     types {",
          "197:       ...F1",
          "198:     }",
          "199:   }",
          "200: }",
          "201: \"\"\"",
          "202:         for (int i = 1; i < depth; i++) {",
          "203:             result += \"\"\"",
          "204:         fragment F$i on __Type {",
          "205:           fields {",
          "206:             type {",
          "207:               ...F${i + 1}",
          "208:             }",
          "209:           }",
          "211:   ofType {",
          "212:     ...F${i + 1}",
          "213:   }",
          "214: }",
          "217: \"\"\"",
          "218:         }",
          "219:         result += \"\"\"",
          "220:         fragment F$depth on __Type {",
          "221:           fields {",
          "222:             type {",
          "223: name",
          "224:             }",
          "225:           }",
          "226: }",
          "229: \"\"\"",
          "230:         return result",
          "231:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}