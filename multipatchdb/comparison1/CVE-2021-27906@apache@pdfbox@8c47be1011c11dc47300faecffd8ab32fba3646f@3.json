{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cd17a19e9ab1028dc662e972dd8dbb3fa68b4a33",
      "candidate_info": {
        "commit_hash": "cd17a19e9ab1028dc662e972dd8dbb3fa68b4a33",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/cd17a19e9ab1028dc662e972dd8dbb3fa68b4a33",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFObjectStreamParser.java"
        ],
        "message": "PDFBOX-5177: don't use number of objects to initialize list of objects, don't read beyond the part of the stream reserved for object numbers\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889168 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFObjectStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFObjectStreamParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFObjectStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFObjectStreamParser.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFObjectStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFObjectStreamParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:         try",
          "93:         {",
          "94:             Map<Integer, Long> offsets = readOffsets();",
          "96:             for (Entry<Integer, Long> offset : offsets.entrySet())",
          "97:             {",
          "98:                 COSBase cosObject = parseObject(offset.getKey());",
          "",
          "[Removed Lines]",
          "95:             streamObjects = new ArrayList<COSObject>( numberOfObjects );",
          "",
          "[Added Lines]",
          "95:             streamObjects = new ArrayList<COSObject>(offsets.size());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:         Map<Integer, Long> objectNumbers = new TreeMap<Integer, Long>();",
          "131:         for (int i = 0; i < numberOfObjects; i++)",
          "132:         {",
          "133:             long objectNumber = readObjectNumber();",
          "134:             int offset = (int) readLong();",
          "135:             objectNumbers.put(offset, objectNumber);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:         long firstObjectPosition = seqSource.getPosition() + firstObject - 1;",
          "135:             if (seqSource.getPosition() >= firstObjectPosition)",
          "136:             {",
          "137:                 break;",
          "138:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "557216e58ed73619bc831153560f12d3cb5cec45",
      "candidate_info": {
        "commit_hash": "557216e58ed73619bc831153560f12d3cb5cec45",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/557216e58ed73619bc831153560f12d3cb5cec45",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDMeshBasedShadingType.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType4.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType5.java"
        ],
        "message": "PDFBOX-4892: optimize, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889847 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDMeshBasedShadingType.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDMeshBasedShadingType.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType4.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType4.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType5.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType5.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDMeshBasedShadingType.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDMeshBasedShadingType.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDMeshBasedShadingType.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDMeshBasedShadingType.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:         }",
          "77:         int bitsPerFlag = getBitsPerFlag();",
          "78:         PDRange[] colRange = new PDRange[getNumberOfColorComponents()];",
          "80:         {",
          "81:             colRange[i] = getDecodeForParameter(2 + i);",
          "82:             if (colRange[i] == null)",
          "",
          "[Removed Lines]",
          "79:         for (int i = 0; i < getNumberOfColorComponents(); ++i)",
          "",
          "[Added Lines]",
          "79:         for (int i = 0; i < colRange.length; ++i)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:         try",
          "94:         {",
          "95:             Point2D[] implicitEdge = new Point2D[4];",
          "97:             byte flag = 0;",
          "99:             try",
          "",
          "[Removed Lines]",
          "96:             float[][] implicitCornerColor = new float[2][getNumberOfColorComponents()];",
          "",
          "[Added Lines]",
          "96:             float[][] implicitCornerColor = new float[2][colRange.length];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:             catch (EOFException ex)",
          "104:             {",
          "105:                 LOG.error(ex);",
          "106:             }",
          "108:             boolean eof = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:                 return list;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "177:             PDRange rangeY, PDRange[] colRange, Matrix matrix, AffineTransform xform,",
          "178:             int controlPoints) throws IOException",
          "179:     {",
          "181:         Point2D[] points = new Point2D[controlPoints];",
          "182:         int pStart = 4;",
          "183:         int cStart = 2;",
          "",
          "[Removed Lines]",
          "180:         float[][] color = new float[4][getNumberOfColorComponents()];",
          "",
          "[Added Lines]",
          "181:         int numberOfColorComponents = getNumberOfColorComponents();",
          "182:         float[][] color = new float[4][numberOfColorComponents];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "193:             points[2] = implicitEdge[2];",
          "194:             points[3] = implicitEdge[3];",
          "197:             {",
          "198:                 color[0][i] = implicitCornerColor[0][i];",
          "199:                 color[1][i] = implicitCornerColor[1][i];",
          "",
          "[Removed Lines]",
          "196:             for (int i = 0; i < getNumberOfColorComponents(); i++)",
          "",
          "[Added Lines]",
          "198:             for (int i = 0; i < numberOfColorComponents; i++)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "214:             }",
          "215:             for (int i = cStart; i < 4; i++)",
          "216:             {",
          "218:                 {",
          "219:                     long c = input.readBits(getBitsPerComponent());",
          "220:                     color[i][j] = interpolate(c, maxSrcColor, colRange[j].getMin(),",
          "",
          "[Removed Lines]",
          "217:                 for (int j = 0; j < getNumberOfColorComponents(); j++)",
          "",
          "[Added Lines]",
          "219:                 for (int j = 0; j < numberOfColorComponents; j++)",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType4.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType4.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType4.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType4.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:             return Collections.emptyList();",
          "106:         }",
          "107:         PDRange[] colRange = new PDRange[getNumberOfColorComponents()];",
          "109:         {",
          "110:             colRange[i] = getDecodeForParameter(2 + i);",
          "111:         }",
          "",
          "[Removed Lines]",
          "108:         for (int i = 0; i < getNumberOfColorComponents(); ++i)",
          "",
          "[Added Lines]",
          "108:         for (int i = 0; i < colRange.length; ++i)",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType5.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType5.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType5.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PDShadingType5.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:         }",
          "101:         int numPerRow = getVerticesPerRow();",
          "102:         PDRange[] colRange = new PDRange[getNumberOfColorComponents()];",
          "104:         {",
          "105:             colRange[i] = getDecodeForParameter(2 + i);",
          "106:         }",
          "",
          "[Removed Lines]",
          "103:         for (int i = 0; i < getNumberOfColorComponents(); ++i)",
          "",
          "[Added Lines]",
          "103:         for (int i = 0; i < colRange.length; ++i)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:             }",
          "148:         }",
          "150:         for (int i = 0; i < rowNum - 1; i++)",
          "151:         {",
          "152:             for (int j = 0; j < numPerRow - 1; j++)",
          "153:             {",
          "164:                 list.add(new ShadedTriangle(ps, cs));",
          "176:                 list.add(new ShadedTriangle(ps, cs));",
          "177:             }",
          "",
          "[Removed Lines]",
          "154:                 Point2D[] ps = new Point2D[] {",
          "155:                     latticeArray[i][j].point,",
          "156:                     latticeArray[i][j + 1].point,",
          "157:                     latticeArray[i + 1][j].point  };",
          "159:                 float[][] cs = new float[][] {",
          "160:                     latticeArray[i][j].color,",
          "161:                     latticeArray[i][j + 1].color,",
          "162:                     latticeArray[i + 1][j].color };",
          "166:                 ps = new Point2D[] {",
          "167:                     latticeArray[i][j + 1].point,",
          "168:                     latticeArray[i + 1][j].point,",
          "169:                     latticeArray[i + 1][j + 1].point };",
          "171:                 cs = new float[][]{",
          "172:                     latticeArray[i][j + 1].color,",
          "173:                     latticeArray[i + 1][j].color,",
          "174:                     latticeArray[i + 1][j + 1].color };",
          "",
          "[Added Lines]",
          "150:         Point2D[] ps = new Point2D[3]; // array will be shallow-cloned in ShadedTriangle constructor",
          "151:         float[][] cs = new float[3][];",
          "156:                 ps[0] = latticeArray[i][j].point;",
          "157:                 ps[1] = latticeArray[i][j + 1].point;",
          "158:                 ps[2] = latticeArray[i + 1][j].point;",
          "160:                 cs[0] = latticeArray[i][j].color;",
          "161:                 cs[1] = latticeArray[i][j + 1].color;",
          "162:                 cs[2] = latticeArray[i + 1][j].color;",
          "166:                 ps[0] = latticeArray[i][j + 1].point;",
          "167:                 ps[1] = latticeArray[i + 1][j].point;",
          "168:                 ps[2] = latticeArray[i + 1][j + 1].point;",
          "170:                 cs[0] = latticeArray[i][j + 1].color;",
          "171:                 cs[1] = latticeArray[i + 1][j].color;",
          "172:                 cs[2] = latticeArray[i + 1][j + 1].color;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21a028170b7f9ffe7c92c966cef41a9b34c1d051",
      "candidate_info": {
        "commit_hash": "21a028170b7f9ffe7c92c966cef41a9b34c1d051",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/21a028170b7f9ffe7c92c966cef41a9b34c1d051",
        "files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java"
        ],
        "message": "PDFBOX-2941: change mouse cursor to hand when URI, launch URI when clicked\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884125 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java||debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java||debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java": [
          "File: debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java -> debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import java.awt.Color;",
          "20: import java.awt.Component;",
          "21: import java.awt.Font;",
          "22: import java.awt.GraphicsEnvironment;",
          "23: import java.awt.event.ActionEvent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import java.awt.Cursor;",
          "22: import java.awt.Desktop;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: import java.awt.geom.AffineTransform;",
          "29: import java.awt.image.BufferedImage;",
          "30: import java.io.IOException;",
          "31: import java.util.HashMap;",
          "32: import java.util.HashSet;",
          "33: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import java.net.URI;",
          "34: import java.net.URISyntaxException;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49: import org.apache.pdfbox.pdmodel.PDPage;",
          "50: import org.apache.pdfbox.rendering.PDFRenderer;",
          "51: import org.apache.pdfbox.debugger.PDFDebugger;",
          "52: import org.apache.pdfbox.debugger.ui.HighResolutionImageIcon;",
          "53: import org.apache.pdfbox.debugger.ui.ImageTypeMenu;",
          "54: import org.apache.pdfbox.debugger.ui.RenderDestinationMenu;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: import org.apache.pdfbox.debugger.ui.ErrorDialog;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:     private final JLabel statuslabel;",
          "88:     private final PDPage page;",
          "89:     private String labelText = \"\";",
          "90:     private final Map<PDRectangle, String> rectMap = new HashMap<PDRectangle, String>();",
          "91:     private final AffineTransform defaultTransform = GraphicsEnvironment.getLocalGraphicsEnvironment().",
          "92:                         getDefaultScreenDevice().getDefaultConfiguration().getDefaultTransform();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:     private String currentURI = \"\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "351:         }",
          "352:         String text = \"x: \" + x1 + \", y: \" + y1;",
          "356:         {",
          "357:             if (entry.getKey().contains(x1, y1))",
          "358:             {",
          "360:                 break;",
          "361:             }",
          "362:         }",
          "364:         statuslabel.setText(text);",
          "365:     }",
          "",
          "[Removed Lines]",
          "355:         for (Map.Entry<PDRectangle, String> entry : rectMap.entrySet())",
          "359:                 text += \", \" + rectMap.get(entry.getKey());",
          "",
          "[Added Lines]",
          "361:         Cursor cursor = Cursor.getDefaultCursor();",
          "362:         currentURI = \"\";",
          "363:         for (Map.Entry<PDRectangle,String> entry : rectMap.entrySet())",
          "367:                 String s = rectMap.get(entry.getKey());",
          "368:                 text += \", \" + s;",
          "369:                 if (s.startsWith(\"URI: \"))",
          "370:                 {",
          "371:                     currentURI = s.substring(5);",
          "372:                     cursor = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);",
          "373:                 }",
          "377:         panel.setCursor(cursor);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "367:     @Override",
          "368:     public void mouseClicked(MouseEvent e)",
          "369:     {",
          "371:     }",
          "373:     @Override",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385:         if (!currentURI.isEmpty())",
          "386:         {",
          "387:             if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE))",
          "388:             {",
          "389:                 try",
          "390:                 {",
          "391:                     Desktop.getDesktop().browse(new URI(currentURI));",
          "392:                 }",
          "393:                 catch (URISyntaxException ex)",
          "394:                 {",
          "395:                     new ErrorDialog(ex).setVisible(true);",
          "396:                 }",
          "397:                 catch (IOException ex)",
          "398:                 {",
          "399:                     new ErrorDialog(ex).setVisible(true);",
          "400:                 }",
          "401:             }",
          "402:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "33448fdb567906a986466be1d842ed4a96c9d1dc",
      "candidate_info": {
        "commit_hash": "33448fdb567906a986466be1d842ed4a96c9d1dc",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/33448fdb567906a986466be1d842ed4a96c9d1dc",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java"
        ],
        "message": "PDFBOX-4959: avoid ClassCastExceptions\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881905 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.io.InputStream;",
          "21: import java.util.HashMap;",
          "22: import java.util.Map;",
          "24: import org.apache.pdfbox.cos.COSArray;",
          "25: import org.apache.pdfbox.cos.COSBase;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import org.apache.commons.logging.Log;",
          "24: import org.apache.commons.logging.LogFactory;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: public abstract class PDCIDFont implements COSObjectable, PDFontLike, PDVectorFont",
          "43: {",
          "44:     protected final PDType0Font parent;",
          "46:     private Map<Integer, Float> widths;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:     private static final Log LOG = LogFactory.getLog(PDCIDFont.class);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:             int counter = 0;",
          "79:             while (counter < size)",
          "80:             {",
          "82:                 COSBase next = wArray.getObject(counter++);",
          "83:                 if (next instanceof COSArray)",
          "84:                 {",
          "",
          "[Removed Lines]",
          "81:                 COSNumber firstCode = (COSNumber) wArray.getObject(counter++);",
          "",
          "[Added Lines]",
          "85:                 COSBase firstCodeBase = wArray.getObject(counter++);",
          "86:                 if (!(firstCodeBase instanceof COSNumber))",
          "87:                 {",
          "88:                     LOG.warn(\"Expected a number array member, got \" + firstCodeBase);",
          "89:                     continue;",
          "90:                 }",
          "91:                 COSNumber firstCode = (COSNumber) firstCodeBase;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:                     int arraySize = array.size();",
          "88:                     for (int i = 0; i < arraySize; i++)",
          "89:                     {",
          "92:                     }",
          "93:                 }",
          "94:                 else",
          "95:                 {",
          "98:                     int startRange = firstCode.intValue();",
          "99:                     int endRange = secondCode.intValue();",
          "100:                     float width = rangeWidth.floatValue();",
          "",
          "[Removed Lines]",
          "90:                         COSNumber width = (COSNumber) array.getObject(i);",
          "91:                         widths.put(startRange + i, width.floatValue());",
          "96:                     COSNumber secondCode = (COSNumber) next;",
          "97:                     COSNumber rangeWidth = (COSNumber) wArray.getObject(counter++);",
          "",
          "[Added Lines]",
          "100:                         COSBase widthBase = array.getObject(i);",
          "101:                         if (widthBase instanceof COSNumber)",
          "102:                         {",
          "103:                             COSNumber width = (COSNumber) widthBase;",
          "104:                             widths.put(startRange + i, width.floatValue());",
          "105:                         }",
          "106:                         else",
          "107:                         {",
          "108:                             LOG.warn(\"Expected a number array member, got \" + widthBase);",
          "109:                         }",
          "114:                     COSBase secondCodeBase = next;",
          "115:                     COSBase rangeWidthBase = wArray.getObject(counter++);",
          "116:                     if (!(secondCodeBase instanceof COSNumber) || !(rangeWidthBase instanceof COSNumber))",
          "117:                     {",
          "118:                         LOG.warn(\"Expected two numbers, got \" + secondCodeBase + \" and \" + rangeWidthBase);",
          "119:                         continue;",
          "120:                     }",
          "121:                     COSNumber secondCode = (COSNumber) secondCodeBase;",
          "122:                     COSNumber rangeWidth = (COSNumber) rangeWidthBase;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4fc9148e59341f44ce10bdaa86a0b0a87345084",
      "candidate_info": {
        "commit_hash": "b4fc9148e59341f44ce10bdaa86a0b0a87345084",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/b4fc9148e59341f44ce10bdaa86a0b0a87345084",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/EmbeddedFiles.java"
        ],
        "message": "PDFBOX-5138: add debug output\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887973 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/EmbeddedFiles.java||examples/src/main/java/org/apache/pdfbox/examples/pdmodel/EmbeddedFiles.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/EmbeddedFiles.java||examples/src/main/java/org/apache/pdfbox/examples/pdmodel/EmbeddedFiles.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/pdmodel/EmbeddedFiles.java -> examples/src/main/java/org/apache/pdfbox/examples/pdmodel/EmbeddedFiles.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.examples.pdmodel;",
          "19: import java.io.ByteArrayInputStream;",
          "20: import java.io.IOException;",
          "21: import java.util.ArrayList;",
          "22: import java.util.Collections;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.io.File;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:             doc.getDocumentCatalog().setPageMode(PageMode.USE_ATTACHMENTS);",
          "115:             doc.save( file );",
          "116:         }",
          "117:         finally",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: System.out.println(\"file: '\" + file + \"'\");",
          "116: System.out.println(\"Abs path: \" + new File(file).getAbsolutePath());",
          "117: System.out.println(\"parent exists? \" + new File(file).getParentFile().exists());",
          "",
          "---------------"
        ]
      }
    }
  ]
}