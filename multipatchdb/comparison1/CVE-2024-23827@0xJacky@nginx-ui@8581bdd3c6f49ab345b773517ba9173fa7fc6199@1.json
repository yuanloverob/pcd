{
  "cve_id": "CVE-2024-23827",
  "cve_desc": "Nginx-UI is a web interface to manage Nginx configurations. The Import Certificate feature allows arbitrary write into the system. The feature does not check if the provided user input is a certification/key and allows to write into arbitrary paths in the system. It's possible to leverage the vulnerability into a remote code execution overwriting the config file app.ini. Version 2.0.0.beta.12 fixed the issue.",
  "repo": "0xJacky/nginx-ui",
  "patch_hash": "8581bdd3c6f49ab345b773517ba9173fa7fc6199",
  "patch_info": {
    "commit_hash": "8581bdd3c6f49ab345b773517ba9173fa7fc6199",
    "repo": "0xJacky/nginx-ui",
    "commit_url": "https://github.com/0xJacky/nginx-ui/commit/8581bdd3c6f49ab345b773517ba9173fa7fc6199",
    "files": [
      "api/api.go",
      "api/certificate/certificate.go",
      "internal/cert/helper.go",
      "internal/kernal/boot.go",
      "internal/validation/alphanumdash.go",
      "internal/validation/certificate.go",
      "internal/validation/validation.go"
    ],
    "message": "enhance: validate certificate content before save",
    "before_after_code_files": [
      "api/api.go||api/api.go",
      "api/certificate/certificate.go||api/certificate/certificate.go",
      "internal/cert/helper.go||internal/cert/helper.go",
      "internal/kernal/boot.go||internal/kernal/boot.go",
      "internal/validation/alphanumdash.go||internal/validation/alphanumdash.go",
      "internal/validation/certificate.go||internal/validation/certificate.go",
      "internal/validation/validation.go||internal/validation/validation.go"
    ]
  },
  "patch_diff": {
    "api/api.go||api/api.go": [
      "File: api/api.go -> api/api.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "4:  \"errors\"",
      "5:  \"github.com/0xJacky/Nginx-UI/internal/logger\"",
      "6:  \"github.com/gin-gonic/gin\"",
      "8:  val \"github.com/go-playground/validator/v10\"",
      "9:  \"net/http\"",
      "10:  \"reflect\"",
      "12:  \"strings\"",
      "13: )",
      "29: func ErrHandler(c *gin.Context, err error) {",
      "30:  logger.GetLogger().Errorln(err)",
      "31:  c.JSON(http.StatusInternalServerError, gin.H{",
      "",
      "[Removed Lines]",
      "7:  \"github.com/gin-gonic/gin/binding\"",
      "11:  \"regexp\"",
      "15: func init() {",
      "16:  if v, ok := binding.Validator.Engine().(*val.Validate); ok {",
      "17:   err := v.RegisterValidation(\"alphanumdash\", func(fl val.FieldLevel) bool {",
      "18:    return regexp.MustCompile(`^[a-zA-Z0-9-]+$`).MatchString(fl.Field().String())",
      "19:   })",
      "21:   if err != nil {",
      "22:    logger.Fatal(err)",
      "23:   }",
      "24:   return",
      "25:  }",
      "26:  logger.Fatal(\"binding validator engine is not initialized\")",
      "27: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "54:    return false",
      "55:   }",
      "58:   errorsMap := make(map[string]interface{})",
      "59:   for _, value := range verrs {",
      "60:    var path []string",
      "62:    insertError(errorsMap, path, value.Tag())",
      "63:   }",
      "",
      "[Removed Lines]",
      "57:   t := reflect.TypeOf(target).Elem()",
      "61:    getJsonPath(t, value.StructNamespace(), &path)",
      "",
      "[Added Lines]",
      "41:   t := reflect.TypeOf(target)",
      "46:    namespace := strings.Split(value.StructNamespace(), \".\")",
      "48:    if t.Name() == \"\" && len(namespace) > 1 {",
      "49:     namespace = namespace[1:]",
      "50:    }",
      "52:    getJsonPath(t.Elem(), namespace, &path)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "75: }",
      "83:  f, ok := t.FieldByName(fields[0])",
      "84:  if !ok {",
      "85:   return",
      "",
      "[Removed Lines]",
      "78: func getJsonPath(t reflect.Type, namespace string, path *[]string) {",
      "79:  fields := strings.Split(namespace, \".\")",
      "80:  if len(fields) == 0 {",
      "81:   return",
      "82:  }",
      "",
      "[Added Lines]",
      "69: func getJsonPath(t reflect.Type, fields []string, path *[]string) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "90:  if len(fields) > 1 {",
      "92:   getJsonPath(f.Type, subFields, path)",
      "93:  }",
      "94: }",
      "",
      "[Removed Lines]",
      "91:   subFields := strings.Join(fields[1:], \".\")",
      "",
      "[Added Lines]",
      "78:   subFields := fields[1:]",
      "",
      "---------------"
    ],
    "api/certificate/certificate.go||api/certificate/certificate.go": [
      "File: api/certificate/certificate.go -> api/certificate/certificate.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package certificate",
      "3: import (",
      "13: )",
      "15: type APICertificate struct {",
      "20: }",
      "22: func Transformer(certModel *model.Cert) (certificate *APICertificate) {",
      "45: }",
      "47: func GetCertList(c *gin.Context) {",
      "57: }",
      "59: func GetCert(c *gin.Context) {",
      "70: }",
      "72: func AddCert(c *gin.Context) {",
      "115: }",
      "117: func ModifyCert(c *gin.Context) {",
      "170: }",
      "172: func RemoveCert(c *gin.Context) {",
      "174: }",
      "",
      "[Removed Lines]",
      "4:  \"github.com/0xJacky/Nginx-UI/api\"",
      "5:  \"github.com/0xJacky/Nginx-UI/api/cosy\"",
      "6:  \"github.com/0xJacky/Nginx-UI/internal/cert\"",
      "7:  \"github.com/0xJacky/Nginx-UI/model\"",
      "8:  \"github.com/0xJacky/Nginx-UI/query\"",
      "9:  \"github.com/gin-gonic/gin\"",
      "10:  \"github.com/spf13/cast\"",
      "11:  \"net/http\"",
      "12:  \"os\"",
      "17:  SSLCertificate    string     `json:\"ssl_certificate,omitempty\"`",
      "18:  SSLCertificateKey string     `json:\"ssl_certificate_key,omitempty\"`",
      "19:  CertificateInfo   *cert.Info `json:\"certificate_info,omitempty\"`",
      "23:  var sslCertificationBytes, sslCertificationKeyBytes []byte",
      "24:  var certificateInfo *cert.Info",
      "25:  if certModel.SSLCertificatePath != \"\" {",
      "26:   if _, err := os.Stat(certModel.SSLCertificatePath); err == nil {",
      "27:    sslCertificationBytes, _ = os.ReadFile(certModel.SSLCertificatePath)",
      "28:   }",
      "30:   certificateInfo, _ = cert.GetCertInfo(certModel.SSLCertificatePath)",
      "31:  }",
      "33:  if certModel.SSLCertificateKeyPath != \"\" {",
      "34:   if _, err := os.Stat(certModel.SSLCertificateKeyPath); err == nil {",
      "35:    sslCertificationKeyBytes, _ = os.ReadFile(certModel.SSLCertificateKeyPath)",
      "36:   }",
      "37:  }",
      "39:  return &APICertificate{",
      "40:   Cert:              certModel,",
      "41:   SSLCertificate:    string(sslCertificationBytes),",
      "42:   SSLCertificateKey: string(sslCertificationKeyBytes),",
      "43:   CertificateInfo:   certificateInfo,",
      "44:  }",
      "48:  cosy.Core[model.Cert](c).SetFussy(\"name\", \"domain\").SetTransformer(func(m *model.Cert) any {",
      "50:   info, _ := cert.GetCertInfo(m.SSLCertificatePath)",
      "52:   return APICertificate{",
      "53:    Cert:            m,",
      "54:    CertificateInfo: info,",
      "55:   }",
      "56:  }).PagingList()",
      "60:  q := query.Cert",
      "62:  certModel, err := q.FirstByID(cast.ToInt(c.Param(\"id\")))",
      "64:  if err != nil {",
      "65:   api.ErrHandler(c, err)",
      "66:   return",
      "67:  }",
      "69:  c.JSON(http.StatusOK, Transformer(certModel))",
      "73:  var json struct {",
      "74:   Name                  string `json:\"name\"`",
      "75:   SSLCertificatePath    string `json:\"ssl_certificate_path\" binding:\"required\"`",
      "76:   SSLCertificateKeyPath string `json:\"ssl_certificate_key_path\" binding:\"required\"`",
      "77:   SSLCertificate        string `json:\"ssl_certificate\"`",
      "78:   SSLCertificateKey     string `json:\"ssl_certificate_key\"`",
      "79:   ChallengeMethod       string `json:\"challenge_method\"`",
      "80:   DnsCredentialID       int    `json:\"dns_credential_id\"`",
      "81:  }",
      "82:  if !api.BindAndValid(c, &json) {",
      "83:   return",
      "84:  }",
      "85:  certModel := &model.Cert{",
      "86:   Name:                  json.Name,",
      "87:   SSLCertificatePath:    json.SSLCertificatePath,",
      "88:   SSLCertificateKeyPath: json.SSLCertificateKeyPath,",
      "89:   ChallengeMethod:       json.ChallengeMethod,",
      "90:   DnsCredentialID:       json.DnsCredentialID,",
      "91:  }",
      "93:  err := certModel.Insert()",
      "95:  if err != nil {",
      "96:   api.ErrHandler(c, err)",
      "97:   return",
      "98:  }",
      "100:  content := &cert.Content{",
      "101:   SSLCertificatePath:    json.SSLCertificatePath,",
      "102:   SSLCertificateKeyPath: json.SSLCertificateKeyPath,",
      "103:   SSLCertificate:        json.SSLCertificate,",
      "104:   SSLCertificateKey:     json.SSLCertificateKey,",
      "105:  }",
      "107:  err = content.WriteFile()",
      "109:  if err != nil {",
      "110:   api.ErrHandler(c, err)",
      "111:   return",
      "112:  }",
      "114:  c.JSON(http.StatusOK, Transformer(certModel))",
      "118:  id := cast.ToInt(c.Param(\"id\"))",
      "120:  var json struct {",
      "121:   Name                  string `json:\"name\"`",
      "122:   SSLCertificatePath    string `json:\"ssl_certificate_path\" binding:\"required\"`",
      "123:   SSLCertificateKeyPath string `json:\"ssl_certificate_key_path\" binding:\"required\"`",
      "124:   SSLCertificate        string `json:\"ssl_certificate\"`",
      "125:   SSLCertificateKey     string `json:\"ssl_certificate_key\"`",
      "126:   ChallengeMethod       string `json:\"challenge_method\"`",
      "127:   DnsCredentialID       int    `json:\"dns_credential_id\"`",
      "128:  }",
      "130:  if !api.BindAndValid(c, &json) {",
      "131:   return",
      "132:  }",
      "134:  q := query.Cert",
      "136:  certModel, err := q.FirstByID(id)",
      "137:  if err != nil {",
      "138:   api.ErrHandler(c, err)",
      "139:   return",
      "140:  }",
      "142:  err = certModel.Updates(&model.Cert{",
      "143:   Name:                  json.Name,",
      "144:   SSLCertificatePath:    json.SSLCertificatePath,",
      "145:   SSLCertificateKeyPath: json.SSLCertificateKeyPath,",
      "146:   ChallengeMethod:       json.ChallengeMethod,",
      "147:   DnsCredentialID:       json.DnsCredentialID,",
      "148:  })",
      "150:  if err != nil {",
      "151:   api.ErrHandler(c, err)",
      "152:   return",
      "153:  }",
      "155:  content := &cert.Content{",
      "156:   SSLCertificatePath:    json.SSLCertificatePath,",
      "157:   SSLCertificateKeyPath: json.SSLCertificateKeyPath,",
      "158:   SSLCertificate:        json.SSLCertificate,",
      "159:   SSLCertificateKey:     json.SSLCertificateKey,",
      "160:  }",
      "162:  err = content.WriteFile()",
      "164:  if err != nil {",
      "165:   api.ErrHandler(c, err)",
      "166:   return",
      "167:  }",
      "169:  GetCert(c)",
      "173:  cosy.Core[model.Cert](c).Destroy()",
      "",
      "[Added Lines]",
      "4:     \"github.com/0xJacky/Nginx-UI/api\"",
      "5:     \"github.com/0xJacky/Nginx-UI/api/cosy\"",
      "6:     \"github.com/0xJacky/Nginx-UI/internal/cert\"",
      "7:     \"github.com/0xJacky/Nginx-UI/model\"",
      "8:     \"github.com/0xJacky/Nginx-UI/query\"",
      "9:     \"github.com/gin-gonic/gin\"",
      "10:     \"github.com/spf13/cast\"",
      "11:     \"net/http\"",
      "12:     \"os\"",
      "17:     SSLCertificate    string     `json:\"ssl_certificate,omitempty\"`",
      "18:     SSLCertificateKey string     `json:\"ssl_certificate_key,omitempty\"`",
      "19:     CertificateInfo   *cert.Info `json:\"certificate_info,omitempty\"`",
      "23:     var sslCertificationBytes, sslCertificationKeyBytes []byte",
      "24:     var certificateInfo *cert.Info",
      "25:     if certModel.SSLCertificatePath != \"\" {",
      "26:         if _, err := os.Stat(certModel.SSLCertificatePath); err == nil {",
      "27:             sslCertificationBytes, _ = os.ReadFile(certModel.SSLCertificatePath)",
      "28:             if !cert.IsPublicKey(string(sslCertificationBytes)) {",
      "29:                 sslCertificationBytes = []byte{}",
      "30:             }",
      "31:         }",
      "33:         certificateInfo, _ = cert.GetCertInfo(certModel.SSLCertificatePath)",
      "34:     }",
      "36:     if certModel.SSLCertificateKeyPath != \"\" {",
      "37:         if _, err := os.Stat(certModel.SSLCertificateKeyPath); err == nil {",
      "38:             sslCertificationKeyBytes, _ = os.ReadFile(certModel.SSLCertificateKeyPath)",
      "39:             if !cert.IsPrivateKey(string(sslCertificationKeyBytes)) {",
      "40:                 sslCertificationKeyBytes = []byte{}",
      "41:             }",
      "42:         }",
      "43:     }",
      "45:     return &APICertificate{",
      "46:         Cert:              certModel,",
      "47:         SSLCertificate:    string(sslCertificationBytes),",
      "48:         SSLCertificateKey: string(sslCertificationKeyBytes),",
      "49:         CertificateInfo:   certificateInfo,",
      "50:     }",
      "54:     cosy.Core[model.Cert](c).SetFussy(\"name\", \"domain\").SetTransformer(func(m *model.Cert) any {",
      "56:         info, _ := cert.GetCertInfo(m.SSLCertificatePath)",
      "58:         return APICertificate{",
      "59:             Cert:            m,",
      "60:             CertificateInfo: info,",
      "61:         }",
      "62:     }).PagingList()",
      "66:     q := query.Cert",
      "68:     certModel, err := q.FirstByID(cast.ToInt(c.Param(\"id\")))",
      "70:     if err != nil {",
      "71:         api.ErrHandler(c, err)",
      "72:         return",
      "73:     }",
      "75:     c.JSON(http.StatusOK, Transformer(certModel))",
      "76: }",
      "78: type certJson struct {",
      "79:     Name                  string `json:\"name\"`",
      "80:     SSLCertificatePath    string `json:\"ssl_certificate_path\" binding:\"publickey_path\"`",
      "81:     SSLCertificateKeyPath string `json:\"ssl_certificate_key_path\" binding:\"privatekey_path\"`",
      "82:     SSLCertificate        string `json:\"ssl_certificate\" binding:\"omitempty,publickey\"`",
      "83:     SSLCertificateKey     string `json:\"ssl_certificate_key\" binding:\"omitempty,privatekey\"`",
      "84:     ChallengeMethod       string `json:\"challenge_method\"`",
      "85:     DnsCredentialID       int    `json:\"dns_credential_id\"`",
      "89:     var json certJson",
      "90:     if !api.BindAndValid(c, &json) {",
      "91:         return",
      "92:     }",
      "93:     certModel := &model.Cert{",
      "94:         Name:                  json.Name,",
      "95:         SSLCertificatePath:    json.SSLCertificatePath,",
      "96:         SSLCertificateKeyPath: json.SSLCertificateKeyPath,",
      "97:         ChallengeMethod:       json.ChallengeMethod,",
      "98:         DnsCredentialID:       json.DnsCredentialID,",
      "99:     }",
      "101:     err := certModel.Insert()",
      "103:     if err != nil {",
      "104:         api.ErrHandler(c, err)",
      "105:         return",
      "106:     }",
      "108:     content := &cert.Content{",
      "109:         SSLCertificatePath:    json.SSLCertificatePath,",
      "110:         SSLCertificateKeyPath: json.SSLCertificateKeyPath,",
      "111:         SSLCertificate:        json.SSLCertificate,",
      "112:         SSLCertificateKey:     json.SSLCertificateKey,",
      "113:     }",
      "115:     err = content.WriteFile()",
      "117:     if err != nil {",
      "118:         api.ErrHandler(c, err)",
      "119:         return",
      "120:     }",
      "122:     c.JSON(http.StatusOK, Transformer(certModel))",
      "126:     id := cast.ToInt(c.Param(\"id\"))",
      "128:     var json certJson",
      "130:     if !api.BindAndValid(c, &json) {",
      "131:         return",
      "132:     }",
      "134:     q := query.Cert",
      "136:     certModel, err := q.FirstByID(id)",
      "137:     if err != nil {",
      "138:         api.ErrHandler(c, err)",
      "139:         return",
      "140:     }",
      "142:     err = certModel.Updates(&model.Cert{",
      "143:         Name:                  json.Name,",
      "144:         SSLCertificatePath:    json.SSLCertificatePath,",
      "145:         SSLCertificateKeyPath: json.SSLCertificateKeyPath,",
      "146:         ChallengeMethod:       json.ChallengeMethod,",
      "147:         DnsCredentialID:       json.DnsCredentialID,",
      "148:     })",
      "150:     if err != nil {",
      "151:         api.ErrHandler(c, err)",
      "152:         return",
      "153:     }",
      "155:     content := &cert.Content{",
      "156:         SSLCertificatePath:    json.SSLCertificatePath,",
      "157:         SSLCertificateKeyPath: json.SSLCertificateKeyPath,",
      "158:         SSLCertificate:        json.SSLCertificate,",
      "159:         SSLCertificateKey:     json.SSLCertificateKey,",
      "160:     }",
      "162:     err = content.WriteFile()",
      "164:     if err != nil {",
      "165:         api.ErrHandler(c, err)",
      "166:         return",
      "167:     }",
      "169:     GetCert(c)",
      "173:     cosy.Core[model.Cert](c).Destroy()",
      "",
      "---------------"
    ],
    "internal/cert/helper.go||internal/cert/helper.go": [
      "File: internal/cert/helper.go -> internal/cert/helper.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package cert",
      "3: import (",
      "4:  \"crypto/x509\"",
      "5:  \"encoding/pem\"",
      "6:  \"os\"",
      "7: )",
      "9: func IsPublicKey(pemStr string) bool {",
      "10:  block, _ := pem.Decode([]byte(pemStr))",
      "11:  if block == nil {",
      "12:   return false",
      "13:  }",
      "15:  _, err := x509.ParsePKIXPublicKey(block.Bytes)",
      "16:  return err == nil",
      "17: }",
      "19: func IsPrivateKey(pemStr string) bool {",
      "20:  block, _ := pem.Decode([]byte(pemStr))",
      "21:  if block == nil {",
      "22:   return false",
      "23:  }",
      "25:  _, errRSA := x509.ParsePKCS1PrivateKey(block.Bytes)",
      "26:  if errRSA == nil {",
      "27:   return true",
      "28:  }",
      "30:  _, errECDSA := x509.ParseECPrivateKey(block.Bytes)",
      "31:  return errECDSA == nil",
      "32: }",
      "35: func IsPublicKeyPath(path string) bool {",
      "36:  _, err := os.Stat(path)",
      "38:  if err != nil {",
      "39:   if os.IsNotExist(err) {",
      "40:    return true",
      "41:   }",
      "42:   return false",
      "43:  }",
      "45:  bytes, err := os.ReadFile(path)",
      "46:  if err != nil {",
      "47:   return false",
      "48:  }",
      "50:  return IsPublicKey(string(bytes))",
      "51: }",
      "54: func IsPrivateKeyPath(path string) bool {",
      "55:  _, err := os.Stat(path)",
      "57:  if err != nil {",
      "58:   if os.IsNotExist(err) {",
      "59:    return true",
      "60:   }",
      "61:   return false",
      "62:  }",
      "64:  bytes, err := os.ReadFile(path)",
      "65:  if err != nil {",
      "66:   return false",
      "67:  }",
      "69:  return IsPrivateKey(string(bytes))",
      "70: }",
      "",
      "---------------"
    ],
    "internal/kernal/boot.go||internal/kernal/boot.go": [
      "File: internal/kernal/boot.go -> internal/kernal/boot.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "4:  \"github.com/0xJacky/Nginx-UI/internal/analytic\"",
      "5:  \"github.com/0xJacky/Nginx-UI/internal/cert\"",
      "6:  \"github.com/0xJacky/Nginx-UI/internal/logger\"",
      "7:  \"github.com/0xJacky/Nginx-UI/model\"",
      "8:  \"github.com/0xJacky/Nginx-UI/query\"",
      "9:  \"github.com/0xJacky/Nginx-UI/settings\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7:  \"github.com/0xJacky/Nginx-UI/internal/validation\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "21:   InitJsExtensionType,",
      "22:   InitDatabase,",
      "23:   InitNodeSecret,",
      "24:  }",
      "26:  syncs := []func(){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25:   validation.Init,",
      "",
      "---------------"
    ],
    "internal/validation/alphanumdash.go||internal/validation/alphanumdash.go": [
      "File: internal/validation/alphanumdash.go -> internal/validation/alphanumdash.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package validation",
      "3: import (",
      "4:  val \"github.com/go-playground/validator/v10\"",
      "5:  \"regexp\"",
      "6: )",
      "8: func alphaNumDash(fl val.FieldLevel) bool {",
      "9:  return regexp.MustCompile(`^[a-zA-Z0-9-]+$`).MatchString(fl.Field().String())",
      "10: }",
      "",
      "---------------"
    ],
    "internal/validation/certificate.go||internal/validation/certificate.go": [
      "File: internal/validation/certificate.go -> internal/validation/certificate.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package validation",
      "3: import (",
      "4:  \"github.com/0xJacky/Nginx-UI/internal/cert\"",
      "5:  val \"github.com/go-playground/validator/v10\"",
      "6: )",
      "8: func isPublicKey(fl val.FieldLevel) bool {",
      "9:  return cert.IsPublicKey(fl.Field().String())",
      "10: }",
      "12: func isPrivateKey(fl val.FieldLevel) bool {",
      "13:  return cert.IsPrivateKey(fl.Field().String())",
      "14: }",
      "16: func isPublicKeyPath(fl val.FieldLevel) bool {",
      "17:  return cert.IsPublicKeyPath(fl.Field().String())",
      "18: }",
      "20: func isPrivateKeyPath(fl val.FieldLevel) bool {",
      "21:  return cert.IsPrivateKeyPath(fl.Field().String())",
      "22: }",
      "",
      "---------------"
    ],
    "internal/validation/validation.go||internal/validation/validation.go": [
      "File: internal/validation/validation.go -> internal/validation/validation.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package validation",
      "3: import (",
      "4:  \"github.com/0xJacky/Nginx-UI/internal/logger\"",
      "5:  \"github.com/gin-gonic/gin/binding\"",
      "6:  val \"github.com/go-playground/validator/v10\"",
      "7: )",
      "9: func Init() {",
      "10:  v, ok := binding.Validator.Engine().(*val.Validate)",
      "11:  if !ok {",
      "12:   logger.Fatal(\"binding validator engine is not initialized\")",
      "13:  }",
      "15:  err := v.RegisterValidation(\"alphanumdash\", alphaNumDash)",
      "17:  if err != nil {",
      "18:   logger.Fatal(err)",
      "19:  }",
      "21:  err = v.RegisterValidation(\"publickey\", isPublicKey)",
      "23:  if err != nil {",
      "24:   logger.Fatal(err)",
      "25:  }",
      "27:  err = v.RegisterValidation(\"privatekey\", isPrivateKey)",
      "29:  if err != nil {",
      "30:   logger.Fatal(err)",
      "31:  }",
      "33:  err = v.RegisterValidation(\"publickey_path\", isPublicKeyPath)",
      "35:  if err != nil {",
      "36:   logger.Fatal(err)",
      "37:  }",
      "39:  err = v.RegisterValidation(\"privatekey_path\", isPrivateKeyPath)",
      "41:  if err != nil {",
      "42:   logger.Fatal(err)",
      "43:  }",
      "45:  return",
      "46: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7f3f23d706824f7300401b821a4e1020a8ab78da",
      "candidate_info": {
        "commit_hash": "7f3f23d706824f7300401b821a4e1020a8ab78da",
        "repo": "0xJacky/nginx-ui",
        "commit_url": "https://github.com/0xJacky/nginx-ui/commit/7f3f23d706824f7300401b821a4e1020a8ab78da",
        "files": [
          "app/src/version.json",
          "app/src/views/preference/OpenAISettings.vue",
          "app/version.json",
          "internal/validation/validation.go"
        ],
        "message": "feat: add gpt-4o-mini model",
        "before_after_code_files": [
          "app/src/views/preference/OpenAISettings.vue||app/src/views/preference/OpenAISettings.vue",
          "internal/validation/validation.go||internal/validation/validation.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "internal/validation/validation.go||internal/validation/validation.go"
          ],
          "candidate": [
            "internal/validation/validation.go||internal/validation/validation.go"
          ]
        }
      },
      "candidate_diff": {
        "app/src/views/preference/OpenAISettings.vue||app/src/views/preference/OpenAISettings.vue": [
          "File: app/src/views/preference/OpenAISettings.vue -> app/src/views/preference/OpenAISettings.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: const errors: Record<string, Record<string, string>> = inject('errors') as Record<string, Record<string, string>>",
          "8: const models = shallowRef([",
          "9:   {",
          "10:     value: 'gpt-4o',",
          "11:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:   {",
          "10:     value: 'gpt-4o-mini',",
          "11:   },",
          "",
          "---------------"
        ],
        "internal/validation/validation.go||internal/validation/validation.go": [
          "File: internal/validation/validation.go -> internal/validation/validation.go"
        ]
      }
    }
  ]
}