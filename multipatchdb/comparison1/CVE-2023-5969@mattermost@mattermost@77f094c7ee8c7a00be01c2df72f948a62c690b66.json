{
  "cve_id": "CVE-2023-5969",
  "cve_desc": "Mattermost fails to properly sanitize the request to\u00a0/api/v4/redirect_location allowing an\u00a0attacker,\u00a0sending a specially crafted request to /api/v4/redirect_location,\u00a0to fill up the memory due to caching large items.\n\n",
  "repo": "mattermost/mattermost",
  "patch_hash": "77f094c7ee8c7a00be01c2df72f948a62c690b66",
  "patch_info": {
    "commit_hash": "77f094c7ee8c7a00be01c2df72f948a62c690b66",
    "repo": "mattermost/mattermost",
    "commit_url": "https://github.com/mattermost/mattermost/commit/77f094c7ee8c7a00be01c2df72f948a62c690b66",
    "files": [
      "server/channels/api4/system.go",
      "server/channels/api4/system_test.go"
    ],
    "message": "MM-54219 - Fix: Improve limits on redirectLocationDataCache (#24429) (#24568)\n\nAutomatic Merge",
    "before_after_code_files": [
      "server/channels/api4/system.go||server/channels/api4/system.go",
      "server/channels/api4/system_test.go||server/channels/api4/system_test.go"
    ]
  },
  "patch_diff": {
    "server/channels/api4/system.go||server/channels/api4/system.go": [
      "File: server/channels/api4/system.go -> server/channels/api4/system.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: )",
      "28: const (",
      "32: )",
      "34: var redirectLocationDataCache = cache.NewLRU(cache.LRUOptions{",
      "",
      "[Removed Lines]",
      "29:  RedirectLocationCacheSize = 10000",
      "30:  DefaultServerBusySeconds  = 3600",
      "31:  MaxServerBusySeconds      = 86400",
      "",
      "[Added Lines]",
      "29:  RedirectLocationCacheSize     = 10000",
      "30:  RedirectLocationMaximumLength = 2100",
      "31:  RedirectLocationCacheExpiry   = 1 * time.Hour",
      "32:  DefaultServerBusySeconds      = 3600",
      "33:  MaxServerBusySeconds          = 86400",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "589:  res, err := client.Head(url)",
      "590:  if err != nil {",
      "594:   w.Write([]byte(model.MapToJSON(m)))",
      "595:   return",
      "",
      "[Removed Lines]",
      "592:   redirectLocationDataCache.SetWithExpiry(url, \"\", 1*time.Hour)",
      "",
      "[Added Lines]",
      "594:   redirectLocationDataCache.SetWithExpiry(url, \"\", RedirectLocationCacheExpiry)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "600:  }()",
      "602:  location = res.Header.Get(\"Location\")",
      "604:  m[\"location\"] = location",
      "606:  w.Write([]byte(model.MapToJSON(m)))",
      "",
      "[Removed Lines]",
      "603:  redirectLocationDataCache.SetWithExpiry(url, location, 1*time.Hour)",
      "",
      "[Added Lines]",
      "607:  if len(location) > RedirectLocationMaximumLength {",
      "609:   redirectLocationDataCache.SetWithExpiry(url, \"\", RedirectLocationCacheExpiry)",
      "611:   w.Write([]byte(model.MapToJSON(m)))",
      "612:   return",
      "613:  }",
      "615:  redirectLocationDataCache.SetWithExpiry(url, location, RedirectLocationCacheExpiry)",
      "",
      "---------------"
    ],
    "server/channels/api4/system_test.go||server/channels/api4/system_test.go": [
      "File: server/channels/api4/system_test.go -> server/channels/api4/system_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "673:  _, resp, err = client.GetRedirectLocation(context.Background(), \"\", \"\")",
      "674:  require.Error(t, err)",
      "675:  CheckUnauthorizedStatus(t, resp)",
      "676: }",
      "678: func TestSetServerBusy(t *testing.T) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "679:  urlPrefix := \"https://example.co\"",
      "680:  almostTooLongUrl := urlPrefix + strings.Repeat(\"a\", 2100-len(urlPrefix))",
      "681:  testServer2 := httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {",
      "682:   res.Header().Set(\"Location\", almostTooLongUrl)",
      "683:   res.WriteHeader(http.StatusFound)",
      "684:   res.Write([]byte(\"body\"))",
      "685:  }))",
      "686:  defer func() { testServer2.Close() }()",
      "688:  actual, _, err = th.SystemAdminClient.GetRedirectLocation(context.Background(), testServer2.URL, \"\")",
      "689:  require.NoError(t, err)",
      "690:  assert.Equal(t, almostTooLongUrl, actual)",
      "692:  tooLongUrl := urlPrefix + strings.Repeat(\"a\", 2101-len(urlPrefix))",
      "693:  testServer3 := httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {",
      "694:   res.Header().Set(\"Location\", tooLongUrl)",
      "695:   res.WriteHeader(http.StatusFound)",
      "696:   res.Write([]byte(\"body\"))",
      "697:  }))",
      "698:  defer func() { testServer3.Close() }()",
      "700:  actual, _, err = th.SystemAdminClient.GetRedirectLocation(context.Background(), testServer3.URL, \"\")",
      "701:  require.NoError(t, err)",
      "702:  assert.Equal(t, \"\", actual)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b6f2c8205e5b9c8b667c3c5135d38696528f05ee",
      "candidate_info": {
        "commit_hash": "b6f2c8205e5b9c8b667c3c5135d38696528f05ee",
        "repo": "mattermost/mattermost",
        "commit_url": "https://github.com/mattermost/mattermost/commit/b6f2c8205e5b9c8b667c3c5135d38696528f05ee",
        "files": [
          "server/channels/api4/system.go",
          "server/channels/api4/system_test.go"
        ],
        "message": "MM-54219 - Fix: Improve limits on redirectLocationDataCache (#24429)\n\n* ignore redirect locations over certain length\n\n* maybe the link isn't necessary\n\n* remove unrelated debugging line\n\n* PR comments",
        "before_after_code_files": [
          "server/channels/api4/system.go||server/channels/api4/system.go",
          "server/channels/api4/system_test.go||server/channels/api4/system_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "server/channels/api4/system.go||server/channels/api4/system.go",
            "server/channels/api4/system_test.go||server/channels/api4/system_test.go"
          ],
          "candidate": [
            "server/channels/api4/system.go||server/channels/api4/system.go",
            "server/channels/api4/system_test.go||server/channels/api4/system_test.go"
          ]
        }
      },
      "candidate_diff": {
        "server/channels/api4/system.go||server/channels/api4/system.go": [
          "File: server/channels/api4/system.go -> server/channels/api4/system.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: )",
          "28: const (",
          "32: )",
          "34: var redirectLocationDataCache = cache.NewLRU(cache.LRUOptions{",
          "",
          "[Removed Lines]",
          "29:  RedirectLocationCacheSize = 10000",
          "30:  DefaultServerBusySeconds  = 3600",
          "31:  MaxServerBusySeconds      = 86400",
          "",
          "[Added Lines]",
          "29:  RedirectLocationCacheSize     = 10000",
          "30:  RedirectLocationMaximumLength = 2100",
          "31:  RedirectLocationCacheExpiry   = 1 * time.Hour",
          "32:  DefaultServerBusySeconds      = 3600",
          "33:  MaxServerBusySeconds          = 86400",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "585:  res, err := client.Head(url)",
          "586:  if err != nil {",
          "590:   w.Write([]byte(model.MapToJSON(m)))",
          "591:   return",
          "",
          "[Removed Lines]",
          "588:   redirectLocationDataCache.SetWithExpiry(url, \"\", 1*time.Hour)",
          "",
          "[Added Lines]",
          "590:   redirectLocationDataCache.SetWithExpiry(url, \"\", RedirectLocationCacheExpiry)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "596:  }()",
          "598:  location = res.Header.Get(\"Location\")",
          "600:  m[\"location\"] = location",
          "602:  w.Write([]byte(model.MapToJSON(m)))",
          "",
          "[Removed Lines]",
          "599:  redirectLocationDataCache.SetWithExpiry(url, location, 1*time.Hour)",
          "",
          "[Added Lines]",
          "603:  if len(location) > RedirectLocationMaximumLength {",
          "605:   redirectLocationDataCache.SetWithExpiry(url, \"\", RedirectLocationCacheExpiry)",
          "607:   w.Write([]byte(model.MapToJSON(m)))",
          "608:   return",
          "609:  }",
          "611:  redirectLocationDataCache.SetWithExpiry(url, location, RedirectLocationCacheExpiry)",
          "",
          "---------------"
        ],
        "server/channels/api4/system_test.go||server/channels/api4/system_test.go": [
          "File: server/channels/api4/system_test.go -> server/channels/api4/system_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "673:  _, resp, err = client.GetRedirectLocation(context.Background(), \"\", \"\")",
          "674:  require.Error(t, err)",
          "675:  CheckUnauthorizedStatus(t, resp)",
          "676: }",
          "678: func TestSetServerBusy(t *testing.T) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "679:  urlPrefix := \"https://example.co\"",
          "680:  almostTooLongUrl := urlPrefix + strings.Repeat(\"a\", 2100-len(urlPrefix))",
          "681:  testServer2 := httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {",
          "682:   res.Header().Set(\"Location\", almostTooLongUrl)",
          "683:   res.WriteHeader(http.StatusFound)",
          "684:   res.Write([]byte(\"body\"))",
          "685:  }))",
          "686:  defer func() { testServer2.Close() }()",
          "688:  actual, _, err = th.SystemAdminClient.GetRedirectLocation(context.Background(), testServer2.URL, \"\")",
          "689:  require.NoError(t, err)",
          "690:  assert.Equal(t, almostTooLongUrl, actual)",
          "692:  tooLongUrl := urlPrefix + strings.Repeat(\"a\", 2101-len(urlPrefix))",
          "693:  testServer3 := httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {",
          "694:   res.Header().Set(\"Location\", tooLongUrl)",
          "695:   res.WriteHeader(http.StatusFound)",
          "696:   res.Write([]byte(\"body\"))",
          "697:  }))",
          "698:  defer func() { testServer3.Close() }()",
          "700:  actual, _, err = th.SystemAdminClient.GetRedirectLocation(context.Background(), testServer3.URL, \"\")",
          "701:  require.NoError(t, err)",
          "702:  assert.Equal(t, \"\", actual)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12a72b1fb469be6e9a60b8b053c0fb8c5f509d7b",
      "candidate_info": {
        "commit_hash": "12a72b1fb469be6e9a60b8b053c0fb8c5f509d7b",
        "repo": "mattermost/mattermost",
        "commit_url": "https://github.com/mattermost/mattermost/commit/12a72b1fb469be6e9a60b8b053c0fb8c5f509d7b",
        "files": [
          "server/channels/api4/system.go",
          "server/channels/api4/system_test.go"
        ],
        "message": "MM-54219 - Fix: Improve limits on redirectLocationDataCache (#24429) (#24485)\n\n* ignore redirect locations over certain length\n\n* maybe the link isn't necessary\n\n* remove unrelated debugging line\n\n* PR comments\n\n(cherry picked from commit b6f2c8205e5b9c8b667c3c5135d38696528f05ee)\n\nCo-authored-by: Christopher Poile <cpoile@gmail.com>",
        "before_after_code_files": [
          "server/channels/api4/system.go||server/channels/api4/system.go",
          "server/channels/api4/system_test.go||server/channels/api4/system_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "server/channels/api4/system.go||server/channels/api4/system.go",
            "server/channels/api4/system_test.go||server/channels/api4/system_test.go"
          ],
          "candidate": [
            "server/channels/api4/system.go||server/channels/api4/system.go",
            "server/channels/api4/system_test.go||server/channels/api4/system_test.go"
          ]
        }
      },
      "candidate_diff": {
        "server/channels/api4/system.go||server/channels/api4/system.go": [
          "File: server/channels/api4/system.go -> server/channels/api4/system.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: )",
          "28: const (",
          "32: )",
          "34: var redirectLocationDataCache = cache.NewLRU(cache.LRUOptions{",
          "",
          "[Removed Lines]",
          "29:  RedirectLocationCacheSize = 10000",
          "30:  DefaultServerBusySeconds  = 3600",
          "31:  MaxServerBusySeconds      = 86400",
          "",
          "[Added Lines]",
          "29:  RedirectLocationCacheSize     = 10000",
          "30:  RedirectLocationMaximumLength = 2100",
          "31:  RedirectLocationCacheExpiry   = 1 * time.Hour",
          "32:  DefaultServerBusySeconds      = 3600",
          "33:  MaxServerBusySeconds          = 86400",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "585:  res, err := client.Head(url)",
          "586:  if err != nil {",
          "590:   w.Write([]byte(model.MapToJSON(m)))",
          "591:   return",
          "",
          "[Removed Lines]",
          "588:   redirectLocationDataCache.SetWithExpiry(url, \"\", 1*time.Hour)",
          "",
          "[Added Lines]",
          "590:   redirectLocationDataCache.SetWithExpiry(url, \"\", RedirectLocationCacheExpiry)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "596:  }()",
          "598:  location = res.Header.Get(\"Location\")",
          "600:  m[\"location\"] = location",
          "602:  w.Write([]byte(model.MapToJSON(m)))",
          "",
          "[Removed Lines]",
          "599:  redirectLocationDataCache.SetWithExpiry(url, location, 1*time.Hour)",
          "",
          "[Added Lines]",
          "603:  if len(location) > RedirectLocationMaximumLength {",
          "605:   redirectLocationDataCache.SetWithExpiry(url, \"\", RedirectLocationCacheExpiry)",
          "607:   w.Write([]byte(model.MapToJSON(m)))",
          "608:   return",
          "609:  }",
          "611:  redirectLocationDataCache.SetWithExpiry(url, location, RedirectLocationCacheExpiry)",
          "",
          "---------------"
        ],
        "server/channels/api4/system_test.go||server/channels/api4/system_test.go": [
          "File: server/channels/api4/system_test.go -> server/channels/api4/system_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "673:  _, resp, err = client.GetRedirectLocation(context.Background(), \"\", \"\")",
          "674:  require.Error(t, err)",
          "675:  CheckUnauthorizedStatus(t, resp)",
          "676: }",
          "678: func TestSetServerBusy(t *testing.T) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "679:  urlPrefix := \"https://example.co\"",
          "680:  almostTooLongUrl := urlPrefix + strings.Repeat(\"a\", 2100-len(urlPrefix))",
          "681:  testServer2 := httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {",
          "682:   res.Header().Set(\"Location\", almostTooLongUrl)",
          "683:   res.WriteHeader(http.StatusFound)",
          "684:   res.Write([]byte(\"body\"))",
          "685:  }))",
          "686:  defer func() { testServer2.Close() }()",
          "688:  actual, _, err = th.SystemAdminClient.GetRedirectLocation(context.Background(), testServer2.URL, \"\")",
          "689:  require.NoError(t, err)",
          "690:  assert.Equal(t, almostTooLongUrl, actual)",
          "692:  tooLongUrl := urlPrefix + strings.Repeat(\"a\", 2101-len(urlPrefix))",
          "693:  testServer3 := httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {",
          "694:   res.Header().Set(\"Location\", tooLongUrl)",
          "695:   res.WriteHeader(http.StatusFound)",
          "696:   res.Write([]byte(\"body\"))",
          "697:  }))",
          "698:  defer func() { testServer3.Close() }()",
          "700:  actual, _, err = th.SystemAdminClient.GetRedirectLocation(context.Background(), testServer3.URL, \"\")",
          "701:  require.NoError(t, err)",
          "702:  assert.Equal(t, \"\", actual)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea0a6effc6446d3462ebd9916f9e94ff5985c27d",
      "candidate_info": {
        "commit_hash": "ea0a6effc6446d3462ebd9916f9e94ff5985c27d",
        "repo": "mattermost/mattermost",
        "commit_url": "https://github.com/mattermost/mattermost/commit/ea0a6effc6446d3462ebd9916f9e94ff5985c27d",
        "files": [
          "api4/system.go",
          "api4/system_test.go"
        ],
        "message": "Automated cherry pick of #24429 (#24571)\n\nAutomatic Merge",
        "before_after_code_files": [
          "api4/system.go||api4/system.go",
          "api4/system_test.go||api4/system_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "api4/system.go||api4/system.go": [
          "File: api4/system.go -> api4/system.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: )",
          "28: const (",
          "32: )",
          "34: var redirectLocationDataCache = cache.NewLRU(cache.LRUOptions{",
          "",
          "[Removed Lines]",
          "29:  RedirectLocationCacheSize = 10000",
          "30:  DefaultServerBusySeconds  = 3600",
          "31:  MaxServerBusySeconds      = 86400",
          "",
          "[Added Lines]",
          "29:  RedirectLocationCacheSize     = 10000",
          "30:  RedirectLocationMaximumLength = 2100",
          "31:  RedirectLocationCacheExpiry   = 1 * time.Hour",
          "32:  DefaultServerBusySeconds      = 3600",
          "33:  MaxServerBusySeconds          = 86400",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "540:  res, err := client.Head(url)",
          "541:  if err != nil {",
          "545:   w.Write([]byte(model.MapToJSON(m)))",
          "546:   return",
          "",
          "[Removed Lines]",
          "543:   redirectLocationDataCache.SetWithExpiry(url, \"\", 1*time.Hour)",
          "",
          "[Added Lines]",
          "545:   redirectLocationDataCache.SetWithExpiry(url, \"\", RedirectLocationCacheExpiry)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "551:  }()",
          "553:  location = res.Header.Get(\"Location\")",
          "555:  m[\"location\"] = location",
          "557:  w.Write([]byte(model.MapToJSON(m)))",
          "",
          "[Removed Lines]",
          "554:  redirectLocationDataCache.SetWithExpiry(url, location, 1*time.Hour)",
          "",
          "[Added Lines]",
          "558:  if len(location) > RedirectLocationMaximumLength {",
          "560:   redirectLocationDataCache.SetWithExpiry(url, \"\", RedirectLocationCacheExpiry)",
          "562:   w.Write([]byte(model.MapToJSON(m)))",
          "563:   return",
          "564:  }",
          "566:  redirectLocationDataCache.SetWithExpiry(url, location, RedirectLocationCacheExpiry)",
          "",
          "---------------"
        ],
        "api4/system_test.go||api4/system_test.go": [
          "File: api4/system_test.go -> api4/system_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "672:  _, resp, err = client.GetRedirectLocation(\"\", \"\")",
          "673:  require.Error(t, err)",
          "674:  CheckUnauthorizedStatus(t, resp)",
          "675: }",
          "677: func TestSetServerBusy(t *testing.T) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "678:  urlPrefix := \"https://example.co\"",
          "679:  almostTooLongUrl := urlPrefix + strings.Repeat(\"a\", 2100-len(urlPrefix))",
          "680:  testServer2 := httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {",
          "681:   res.Header().Set(\"Location\", almostTooLongUrl)",
          "682:   res.WriteHeader(http.StatusFound)",
          "683:   res.Write([]byte(\"body\"))",
          "684:  }))",
          "685:  defer func() { testServer2.Close() }()",
          "687:  actual, _, err = th.SystemAdminClient.GetRedirectLocation(testServer2.URL, \"\")",
          "688:  require.NoError(t, err)",
          "689:  assert.Equal(t, almostTooLongUrl, actual)",
          "691:  tooLongUrl := urlPrefix + strings.Repeat(\"a\", 2101-len(urlPrefix))",
          "692:  testServer3 := httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {",
          "693:   res.Header().Set(\"Location\", tooLongUrl)",
          "694:   res.WriteHeader(http.StatusFound)",
          "695:   res.Write([]byte(\"body\"))",
          "696:  }))",
          "697:  defer func() { testServer3.Close() }()",
          "699:  actual, _, err = th.SystemAdminClient.GetRedirectLocation(testServer3.URL, \"\")",
          "700:  require.NoError(t, err)",
          "701:  assert.Equal(t, \"\", actual)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4d01594c97ca2c13000f42ba328ac6f5d31f985",
      "candidate_info": {
        "commit_hash": "b4d01594c97ca2c13000f42ba328ac6f5d31f985",
        "repo": "mattermost/mattermost",
        "commit_url": "https://github.com/mattermost/mattermost/commit/b4d01594c97ca2c13000f42ba328ac6f5d31f985",
        "files": [
          "server/channels/api4/system.go",
          "server/channels/api4/system_test.go"
        ],
        "message": "MM-54219 - Fix: Improve limits on redirectLocationDataCache (#24429) (#24570)\n\nAutomatic Merge",
        "before_after_code_files": [
          "server/channels/api4/system.go||server/channels/api4/system.go",
          "server/channels/api4/system_test.go||server/channels/api4/system_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "server/channels/api4/system.go||server/channels/api4/system.go",
            "server/channels/api4/system_test.go||server/channels/api4/system_test.go"
          ],
          "candidate": [
            "server/channels/api4/system.go||server/channels/api4/system.go",
            "server/channels/api4/system_test.go||server/channels/api4/system_test.go"
          ]
        }
      },
      "candidate_diff": {
        "server/channels/api4/system.go||server/channels/api4/system.go": [
          "File: server/channels/api4/system.go -> server/channels/api4/system.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: )",
          "28: const (",
          "32: )",
          "34: var redirectLocationDataCache = cache.NewLRU(cache.LRUOptions{",
          "",
          "[Removed Lines]",
          "29:  RedirectLocationCacheSize = 10000",
          "30:  DefaultServerBusySeconds  = 3600",
          "31:  MaxServerBusySeconds      = 86400",
          "",
          "[Added Lines]",
          "29:  RedirectLocationCacheSize     = 10000",
          "30:  RedirectLocationMaximumLength = 2100",
          "31:  RedirectLocationCacheExpiry   = 1 * time.Hour",
          "32:  DefaultServerBusySeconds      = 3600",
          "33:  MaxServerBusySeconds          = 86400",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "589:  res, err := client.Head(url)",
          "590:  if err != nil {",
          "594:   w.Write([]byte(model.MapToJSON(m)))",
          "595:   return",
          "",
          "[Removed Lines]",
          "592:   redirectLocationDataCache.SetWithExpiry(url, \"\", 1*time.Hour)",
          "",
          "[Added Lines]",
          "594:   redirectLocationDataCache.SetWithExpiry(url, \"\", RedirectLocationCacheExpiry)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "600:  }()",
          "602:  location = res.Header.Get(\"Location\")",
          "604:  m[\"location\"] = location",
          "606:  w.Write([]byte(model.MapToJSON(m)))",
          "",
          "[Removed Lines]",
          "603:  redirectLocationDataCache.SetWithExpiry(url, location, 1*time.Hour)",
          "",
          "[Added Lines]",
          "607:  if len(location) > RedirectLocationMaximumLength {",
          "609:   redirectLocationDataCache.SetWithExpiry(url, \"\", RedirectLocationCacheExpiry)",
          "611:   w.Write([]byte(model.MapToJSON(m)))",
          "612:   return",
          "613:  }",
          "615:  redirectLocationDataCache.SetWithExpiry(url, location, RedirectLocationCacheExpiry)",
          "",
          "---------------"
        ],
        "server/channels/api4/system_test.go||server/channels/api4/system_test.go": [
          "File: server/channels/api4/system_test.go -> server/channels/api4/system_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "673:  _, resp, err = client.GetRedirectLocation(context.Background(), \"\", \"\")",
          "674:  require.Error(t, err)",
          "675:  CheckUnauthorizedStatus(t, resp)",
          "676: }",
          "678: func TestSetServerBusy(t *testing.T) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "679:  urlPrefix := \"https://example.co\"",
          "680:  almostTooLongUrl := urlPrefix + strings.Repeat(\"a\", 2100-len(urlPrefix))",
          "681:  testServer2 := httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {",
          "682:   res.Header().Set(\"Location\", almostTooLongUrl)",
          "683:   res.WriteHeader(http.StatusFound)",
          "684:   res.Write([]byte(\"body\"))",
          "685:  }))",
          "686:  defer func() { testServer2.Close() }()",
          "688:  actual, _, err = th.SystemAdminClient.GetRedirectLocation(context.Background(), testServer2.URL, \"\")",
          "689:  require.NoError(t, err)",
          "690:  assert.Equal(t, almostTooLongUrl, actual)",
          "692:  tooLongUrl := urlPrefix + strings.Repeat(\"a\", 2101-len(urlPrefix))",
          "693:  testServer3 := httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {",
          "694:   res.Header().Set(\"Location\", tooLongUrl)",
          "695:   res.WriteHeader(http.StatusFound)",
          "696:   res.Write([]byte(\"body\"))",
          "697:  }))",
          "698:  defer func() { testServer3.Close() }()",
          "700:  actual, _, err = th.SystemAdminClient.GetRedirectLocation(context.Background(), testServer3.URL, \"\")",
          "701:  require.NoError(t, err)",
          "702:  assert.Equal(t, \"\", actual)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd431ef8fb77453146160eff6dcde95c10d868d1",
      "candidate_info": {
        "commit_hash": "fd431ef8fb77453146160eff6dcde95c10d868d1",
        "repo": "mattermost/mattermost",
        "commit_url": "https://github.com/mattermost/mattermost/commit/fd431ef8fb77453146160eff6dcde95c10d868d1",
        "files": [
          "server/channels/api4/system.go",
          "server/channels/api4/system_test.go"
        ],
        "message": "MM-54219 - Fix: Improve limits on redirectLocationDataCache (#24429) (#24569)\n\nAutomatic Merge",
        "before_after_code_files": [
          "server/channels/api4/system.go||server/channels/api4/system.go",
          "server/channels/api4/system_test.go||server/channels/api4/system_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "server/channels/api4/system.go||server/channels/api4/system.go",
            "server/channels/api4/system_test.go||server/channels/api4/system_test.go"
          ],
          "candidate": [
            "server/channels/api4/system.go||server/channels/api4/system.go",
            "server/channels/api4/system_test.go||server/channels/api4/system_test.go"
          ]
        }
      },
      "candidate_diff": {
        "server/channels/api4/system.go||server/channels/api4/system.go": [
          "File: server/channels/api4/system.go -> server/channels/api4/system.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: )",
          "28: const (",
          "32: )",
          "34: var redirectLocationDataCache = cache.NewLRU(cache.LRUOptions{",
          "",
          "[Removed Lines]",
          "29:  RedirectLocationCacheSize = 10000",
          "30:  DefaultServerBusySeconds  = 3600",
          "31:  MaxServerBusySeconds      = 86400",
          "",
          "[Added Lines]",
          "29:  RedirectLocationCacheSize     = 10000",
          "30:  RedirectLocationMaximumLength = 2100",
          "31:  RedirectLocationCacheExpiry   = 1 * time.Hour",
          "32:  DefaultServerBusySeconds      = 3600",
          "33:  MaxServerBusySeconds          = 86400",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "589:  res, err := client.Head(url)",
          "590:  if err != nil {",
          "594:   w.Write([]byte(model.MapToJSON(m)))",
          "595:   return",
          "",
          "[Removed Lines]",
          "592:   redirectLocationDataCache.SetWithExpiry(url, \"\", 1*time.Hour)",
          "",
          "[Added Lines]",
          "594:   redirectLocationDataCache.SetWithExpiry(url, \"\", RedirectLocationCacheExpiry)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "600:  }()",
          "602:  location = res.Header.Get(\"Location\")",
          "604:  m[\"location\"] = location",
          "606:  w.Write([]byte(model.MapToJSON(m)))",
          "",
          "[Removed Lines]",
          "603:  redirectLocationDataCache.SetWithExpiry(url, location, 1*time.Hour)",
          "",
          "[Added Lines]",
          "607:  if len(location) > RedirectLocationMaximumLength {",
          "609:   redirectLocationDataCache.SetWithExpiry(url, \"\", RedirectLocationCacheExpiry)",
          "611:   w.Write([]byte(model.MapToJSON(m)))",
          "612:   return",
          "613:  }",
          "615:  redirectLocationDataCache.SetWithExpiry(url, location, RedirectLocationCacheExpiry)",
          "",
          "---------------"
        ],
        "server/channels/api4/system_test.go||server/channels/api4/system_test.go": [
          "File: server/channels/api4/system_test.go -> server/channels/api4/system_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "673:  _, resp, err = client.GetRedirectLocation(context.Background(), \"\", \"\")",
          "674:  require.Error(t, err)",
          "675:  CheckUnauthorizedStatus(t, resp)",
          "676: }",
          "678: func TestSetServerBusy(t *testing.T) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "679:  urlPrefix := \"https://example.co\"",
          "680:  almostTooLongUrl := urlPrefix + strings.Repeat(\"a\", 2100-len(urlPrefix))",
          "681:  testServer2 := httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {",
          "682:   res.Header().Set(\"Location\", almostTooLongUrl)",
          "683:   res.WriteHeader(http.StatusFound)",
          "684:   res.Write([]byte(\"body\"))",
          "685:  }))",
          "686:  defer func() { testServer2.Close() }()",
          "688:  actual, _, err = th.SystemAdminClient.GetRedirectLocation(context.Background(), testServer2.URL, \"\")",
          "689:  require.NoError(t, err)",
          "690:  assert.Equal(t, almostTooLongUrl, actual)",
          "692:  tooLongUrl := urlPrefix + strings.Repeat(\"a\", 2101-len(urlPrefix))",
          "693:  testServer3 := httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {",
          "694:   res.Header().Set(\"Location\", tooLongUrl)",
          "695:   res.WriteHeader(http.StatusFound)",
          "696:   res.Write([]byte(\"body\"))",
          "697:  }))",
          "698:  defer func() { testServer3.Close() }()",
          "700:  actual, _, err = th.SystemAdminClient.GetRedirectLocation(context.Background(), testServer3.URL, \"\")",
          "701:  require.NoError(t, err)",
          "702:  assert.Equal(t, \"\", actual)",
          "",
          "---------------"
        ]
      }
    }
  ]
}