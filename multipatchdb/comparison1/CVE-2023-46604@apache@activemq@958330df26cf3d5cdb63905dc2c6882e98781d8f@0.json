{
  "cve_id": "CVE-2023-46604",
  "cve_desc": "The Java OpenWire protocol marshaller is vulnerable to Remote Code \nExecution. This vulnerability may allow a remote attacker with network \naccess to either a Java-based OpenWire broker or client to run arbitrary\n shell commands by manipulating serialized class types in the OpenWire \nprotocol to cause either the client or the broker (respectively) to \ninstantiate any class on the classpath.\n\nUsers are recommended to upgrade\n both brokers and clients to version 5.15.16, 5.16.7, 5.17.6, or 5.18.3 \nwhich fixes this issue.",
  "repo": "apache/activemq",
  "patch_hash": "958330df26cf3d5cdb63905dc2c6882e98781d8f",
  "patch_info": {
    "commit_hash": "958330df26cf3d5cdb63905dc2c6882e98781d8f",
    "repo": "apache/activemq",
    "commit_url": "https://github.com/apache/activemq/commit/958330df26cf3d5cdb63905dc2c6882e98781d8f",
    "files": [
      "activemq-client/pom.xml",
      "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
      "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
      "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
      "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
      "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
      "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
      "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
      "activemq-openwire-legacy/pom.xml",
      "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
      "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
      "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
      "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
      "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
      "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
      "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
      "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java",
      "pom.xml"
    ],
    "message": "AMQ-9370 - Openwire marshaller should validate Throwable class type\n\n(cherry picked from commit 3eaf3107f4fb9a3ce7ab45c175bfaeac7e866d5b)",
    "before_after_code_files": [
      "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java||activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
      "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
      "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
      "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
      "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
      "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
      "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java||activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
      "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
      "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
      "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
      "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
      "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
      "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
      "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
      "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java||activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java"
    ]
  },
  "patch_diff": {
    "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java||activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java": [
      "File: activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java -> activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: package org.apache.activemq.openwire;",
      "19: public class OpenWireUtil {",
      "27:     public static void validateIsThrowable(Class<?> clazz) {",
      "28:         if (!Throwable.class.isAssignableFrom(clazz)) {",
      "29:             throw new IllegalArgumentException(\"Class \" + clazz + \" is not assignable to Throwable\");",
      "30:         }",
      "31:     }",
      "32: }",
      "",
      "---------------"
    ],
    "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java": [
      "File: activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import org.apache.activemq.openwire.BooleanStream;",
      "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
      "27: import org.apache.activemq.openwire.OpenWireFormat;",
      "28: import org.apache.activemq.util.ByteSequence;",
      "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import org.apache.activemq.openwire.OpenWireUtil;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "229:     private Throwable createThrowable(String className, String message) {",
      "230:         try {",
      "231:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
      "232:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
      "233:             return (Throwable)constructor.newInstance(new Object[] {message});",
      "234:         } catch (Throwable e) {",
      "235:             return new Throwable(className + \": \" + message);",
      "236:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "233:             OpenWireUtil.validateIsThrowable(clazz);",
      "236:         } catch (IllegalArgumentException e) {",
      "237:             return e;",
      "",
      "---------------"
    ],
    "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java": [
      "File: activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: import org.apache.activemq.openwire.BooleanStream;",
      "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
      "26: import org.apache.activemq.openwire.OpenWireFormat;",
      "27: import org.apache.activemq.util.ByteSequence;",
      "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: import org.apache.activemq.openwire.OpenWireUtil;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "228:     private Throwable createThrowable(String className, String message) {",
      "229:         try {",
      "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
      "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
      "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
      "233:         } catch (Throwable e) {",
      "234:             return new Throwable(className + \": \" + message);",
      "235:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "232:             OpenWireUtil.validateIsThrowable(clazz);",
      "235:         } catch (IllegalArgumentException e) {",
      "236:             return e;",
      "",
      "---------------"
    ],
    "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java": [
      "File: activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: import org.apache.activemq.openwire.BooleanStream;",
      "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
      "26: import org.apache.activemq.openwire.OpenWireFormat;",
      "27: import org.apache.activemq.util.ByteSequence;",
      "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: import org.apache.activemq.openwire.OpenWireUtil;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "227:     private Throwable createThrowable(String className, String message) {",
      "228:         try {",
      "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
      "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
      "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
      "232:         } catch (Throwable e) {",
      "233:             return new Throwable(className + \": \" + message);",
      "234:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "231:             OpenWireUtil.validateIsThrowable(clazz);",
      "234:         } catch (IllegalArgumentException e) {",
      "235:             return e;",
      "",
      "---------------"
    ],
    "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java": [
      "File: activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: import org.apache.activemq.openwire.BooleanStream;",
      "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
      "26: import org.apache.activemq.openwire.OpenWireFormat;",
      "27: import org.apache.activemq.util.ByteSequence;",
      "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: import org.apache.activemq.openwire.OpenWireUtil;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "227:     private Throwable createThrowable(String className, String message) {",
      "228:         try {",
      "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
      "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
      "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
      "232:         } catch (Throwable e) {",
      "233:             return new Throwable(className + \": \" + message);",
      "234:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "231:             OpenWireUtil.validateIsThrowable(clazz);",
      "234:         } catch (IllegalArgumentException e) {",
      "235:             return e;",
      "",
      "---------------"
    ],
    "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java": [
      "File: activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: import org.apache.activemq.openwire.BooleanStream;",
      "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
      "26: import org.apache.activemq.openwire.OpenWireFormat;",
      "27: import org.apache.activemq.util.ByteSequence;",
      "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: import org.apache.activemq.openwire.OpenWireUtil;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "227:     private Throwable createThrowable(String className, String message) {",
      "228:         try {",
      "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
      "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
      "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
      "232:         } catch (Throwable e) {",
      "233:             return new Throwable(className + \": \" + message);",
      "234:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "231:             OpenWireUtil.validateIsThrowable(clazz);",
      "234:         } catch (IllegalArgumentException e) {",
      "235:             return e;",
      "",
      "---------------"
    ],
    "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java||activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java": [
      "File: activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java -> activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: package org.apache.activemq.openwire;",
      "19: import static org.junit.Assert.assertTrue;",
      "21: import java.io.DataOutput;",
      "22: import java.io.IOException;",
      "23: import java.lang.reflect.Method;",
      "24: import java.util.ArrayList;",
      "25: import java.util.Collection;",
      "26: import java.util.List;",
      "27: import org.apache.activemq.command.CommandTypes;",
      "28: import org.apache.activemq.command.ExceptionResponse;",
      "29: import org.apache.activemq.util.ByteSequence;",
      "30: import org.junit.Test;",
      "31: import org.junit.runner.RunWith;",
      "32: import org.junit.runners.Parameterized;",
      "33: import org.junit.runners.Parameterized.Parameters;",
      "39: @RunWith(Parameterized.class)",
      "40: public class OpenWireValidationTest {",
      "42:     protected final int version;",
      "44:     @Parameters(name = \"version={0}\")",
      "45:     public static Collection<Object[]> data() {",
      "46:         List<Integer> versions = List.of(1, 9, 10, 11, 12);",
      "47:         List<Object[]> versionObjs = new ArrayList<>();",
      "48:         for (int i : versions) {",
      "49:             versionObjs.add(new Object[]{i});",
      "50:         }",
      "55:         assertTrue(\"List of Openwire versions does not include latest version\",",
      "56:             versions.contains((int)CommandTypes.PROTOCOL_VERSION));",
      "58:         return versionObjs;",
      "59:     }",
      "61:     public OpenWireValidationTest(int version) {",
      "62:         this.version = version;",
      "63:     }",
      "65:     @Test",
      "66:     public void testOpenwireThrowableValidation() throws Exception {",
      "70:         OpenWireFormat format = new OpenWireFormat();",
      "74:         Class<?> marshallerFactory = getMarshallerFactory();",
      "75:         Method createMarshallerMap = marshallerFactory.getMethod(\"createMarshallerMap\", OpenWireFormat.class);",
      "76:         DataStreamMarshaller[] map = (DataStreamMarshaller[]) createMarshallerMap.invoke(marshallerFactory, format);",
      "77:         map[ExceptionResponse.DATA_STRUCTURE_TYPE] = getExceptionMarshaller();",
      "79:         format.setVersion(version);",
      "83:         ExceptionResponse r = new ExceptionResponse();",
      "84:         r.setException(new Exception());",
      "85:         ByteSequence bss = format.marshal(r);",
      "86:         ExceptionResponse response = (ExceptionResponse) format.unmarshal(bss);",
      "88:         assertTrue(response.getException() instanceof IllegalArgumentException);",
      "89:         assertTrue(response.getException().getMessage().contains(\"is not assignable to Throwable\"));",
      "90:     }",
      "92:     static class NotAThrowable {",
      "93:         private String message;",
      "95:         public NotAThrowable(String message) {",
      "96:             this.message = message;",
      "97:         }",
      "99:         public NotAThrowable() {",
      "100:         }",
      "101:     }",
      "103:     private Class<?> getMarshallerFactory() throws ClassNotFoundException {",
      "104:         return Class.forName(\"org.apache.activemq.openwire.v\" + version + \".MarshallerFactory\");",
      "105:     }",
      "109:     protected DataStreamMarshaller getExceptionMarshaller() {",
      "110:         switch (version) {",
      "111:             case 12:",
      "112:                 return new org.apache.activemq.openwire.v12.ExceptionResponseMarshaller() {",
      "113:                     @Override",
      "114:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
      "115:                         DataOutput dataOut) throws IOException {",
      "116:                         dataOut.writeBoolean(o != null);",
      "117:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
      "118:                         looseMarshalString(o.getMessage(), dataOut);",
      "119:                     }",
      "120:                 };",
      "121:             case 11:",
      "122:                 return new org.apache.activemq.openwire.v11.ExceptionResponseMarshaller() {",
      "123:                     @Override",
      "124:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
      "125:                         DataOutput dataOut) throws IOException {",
      "126:                         dataOut.writeBoolean(o != null);",
      "127:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
      "128:                         looseMarshalString(o.getMessage(), dataOut);",
      "129:                     }",
      "130:                 };",
      "131:             case 10:",
      "132:                 return new org.apache.activemq.openwire.v10.ExceptionResponseMarshaller() {",
      "133:                     @Override",
      "134:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
      "135:                         DataOutput dataOut) throws IOException {",
      "136:                         dataOut.writeBoolean(o != null);",
      "137:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
      "138:                         looseMarshalString(o.getMessage(), dataOut);",
      "139:                     }",
      "140:                 };",
      "141:             case 9:",
      "142:                 return new org.apache.activemq.openwire.v9.ExceptionResponseMarshaller() {",
      "143:                     @Override",
      "144:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
      "145:                         DataOutput dataOut) throws IOException {",
      "146:                         dataOut.writeBoolean(o != null);",
      "147:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
      "148:                         looseMarshalString(o.getMessage(), dataOut);",
      "149:                     }",
      "150:                 };",
      "151:             case 1:",
      "152:                 return new org.apache.activemq.openwire.v1.ExceptionResponseMarshaller() {",
      "153:                     @Override",
      "154:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
      "155:                         DataOutput dataOut) throws IOException {",
      "156:                         dataOut.writeBoolean(o != null);",
      "157:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
      "158:                         looseMarshalString(o.getMessage(), dataOut);",
      "159:                     }",
      "160:                 };",
      "161:             default:",
      "162:                 throw new IllegalArgumentException(\"Unknown openwire version of \" + version);",
      "163:         }",
      "164:     }",
      "166: }",
      "",
      "---------------"
    ],
    "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java": [
      "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import org.apache.activemq.openwire.BooleanStream;",
      "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
      "27: import org.apache.activemq.openwire.OpenWireFormat;",
      "28: import org.apache.activemq.util.ByteSequence;",
      "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import org.apache.activemq.openwire.OpenWireUtil;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "228:     private Throwable createThrowable(String className, String message) {",
      "229:         try {",
      "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
      "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
      "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
      "233:         } catch (Throwable e) {",
      "234:             return new Throwable(className + \": \" + message);",
      "235:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "232:             OpenWireUtil.validateIsThrowable(clazz);",
      "235:         } catch (IllegalArgumentException e) {",
      "236:             return e;",
      "",
      "---------------"
    ],
    "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java": [
      "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import org.apache.activemq.openwire.BooleanStream;",
      "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
      "27: import org.apache.activemq.openwire.OpenWireFormat;",
      "28: import org.apache.activemq.util.ByteSequence;",
      "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import org.apache.activemq.openwire.OpenWireUtil;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "228:     private Throwable createThrowable(String className, String message) {",
      "229:         try {",
      "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
      "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
      "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
      "233:         } catch (Throwable e) {",
      "234:             return new Throwable(className + \": \" + message);",
      "235:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "232:             OpenWireUtil.validateIsThrowable(clazz);",
      "235:         } catch (IllegalArgumentException e) {",
      "236:             return e;",
      "",
      "---------------"
    ],
    "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java": [
      "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import org.apache.activemq.openwire.BooleanStream;",
      "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
      "27: import org.apache.activemq.openwire.OpenWireFormat;",
      "28: import org.apache.activemq.util.ByteSequence;",
      "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import org.apache.activemq.openwire.OpenWireUtil;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "228:     private Throwable createThrowable(String className, String message) {",
      "229:         try {",
      "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
      "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
      "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
      "233:         } catch (Throwable e) {",
      "234:             return new Throwable(className + \": \" + message);",
      "235:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "232:             OpenWireUtil.validateIsThrowable(clazz);",
      "235:         } catch (IllegalArgumentException e) {",
      "236:             return e;",
      "",
      "---------------"
    ],
    "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java": [
      "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import org.apache.activemq.openwire.BooleanStream;",
      "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
      "27: import org.apache.activemq.openwire.OpenWireFormat;",
      "28: import org.apache.activemq.util.ByteSequence;",
      "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import org.apache.activemq.openwire.OpenWireUtil;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "228:     private Throwable createThrowable(String className, String message) {",
      "229:         try {",
      "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
      "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
      "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
      "233:         } catch (Throwable e) {",
      "234:             return new Throwable(className + \": \" + message);",
      "235:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "232:             OpenWireUtil.validateIsThrowable(clazz);",
      "235:         } catch (IllegalArgumentException e) {",
      "236:             return e;",
      "",
      "---------------"
    ],
    "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java": [
      "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import org.apache.activemq.openwire.BooleanStream;",
      "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
      "27: import org.apache.activemq.openwire.OpenWireFormat;",
      "28: import org.apache.activemq.util.ByteSequence;",
      "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import org.apache.activemq.openwire.OpenWireUtil;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "228:     private Throwable createThrowable(String className, String message) {",
      "229:         try {",
      "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
      "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
      "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
      "233:         } catch (Throwable e) {",
      "234:             return new Throwable(className + \": \" + message);",
      "235:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "232:             OpenWireUtil.validateIsThrowable(clazz);",
      "235:         } catch (IllegalArgumentException e) {",
      "236:             return e;",
      "",
      "---------------"
    ],
    "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java": [
      "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: import org.apache.activemq.openwire.BooleanStream;",
      "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
      "26: import org.apache.activemq.openwire.OpenWireFormat;",
      "27: import org.apache.activemq.util.ByteSequence;",
      "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: import org.apache.activemq.openwire.OpenWireUtil;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "227:     private Throwable createThrowable(String className, String message) {",
      "228:         try {",
      "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
      "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
      "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
      "232:         } catch (Throwable e) {",
      "233:             return new Throwable(className + \": \" + message);",
      "234:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "231:             OpenWireUtil.validateIsThrowable(clazz);",
      "234:         } catch (IllegalArgumentException e) {",
      "235:             return e;",
      "",
      "---------------"
    ],
    "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java": [
      "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: import org.apache.activemq.openwire.BooleanStream;",
      "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
      "26: import org.apache.activemq.openwire.OpenWireFormat;",
      "27: import org.apache.activemq.util.ByteSequence;",
      "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: import org.apache.activemq.openwire.OpenWireUtil;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "227:     private Throwable createThrowable(String className, String message) {",
      "228:         try {",
      "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
      "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
      "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
      "232:         } catch (Throwable e) {",
      "233:             return new Throwable(className + \": \" + message);",
      "234:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "231:             OpenWireUtil.validateIsThrowable(clazz);",
      "234:         } catch (IllegalArgumentException e) {",
      "235:             return e;",
      "",
      "---------------"
    ],
    "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java||activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java": [
      "File: activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java -> activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: package org.apache.activemq.openwire;",
      "19: import java.io.DataOutput;",
      "20: import java.io.IOException;",
      "21: import java.util.ArrayList;",
      "22: import java.util.Collection;",
      "23: import java.util.List;",
      "24: import org.junit.runner.RunWith;",
      "25: import org.junit.runners.Parameterized;",
      "26: import org.junit.runners.Parameterized.Parameters;",
      "32: @RunWith(Parameterized.class)",
      "33: public class OpenWireLegacyValidationTest extends OpenWireValidationTest {",
      "37:     @Parameters(name = \"version={0}\")",
      "38:     public static Collection<Object[]> data() {",
      "39:         List<Object[]> versions = new ArrayList<>();",
      "40:         for (int i = 2; i <= 8; i++) {",
      "41:             versions.add(new Object[]{i});",
      "42:         }",
      "43:         return versions;",
      "44:     }",
      "46:     public OpenWireLegacyValidationTest(int version) {",
      "47:         super(version);",
      "48:     }",
      "52:     protected DataStreamMarshaller getExceptionMarshaller() {",
      "53:         switch (version) {",
      "54:             case 2:",
      "55:                 return new org.apache.activemq.openwire.v2.ExceptionResponseMarshaller() {",
      "56:                     @Override",
      "57:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
      "58:                         DataOutput dataOut) throws IOException {",
      "59:                         dataOut.writeBoolean(o != null);",
      "60:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
      "61:                         looseMarshalString(o.getMessage(), dataOut);",
      "62:                     }",
      "63:                 };",
      "64:             case 3:",
      "65:                 return new org.apache.activemq.openwire.v3.ExceptionResponseMarshaller() {",
      "66:                     @Override",
      "67:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
      "68:                         DataOutput dataOut) throws IOException {",
      "69:                         dataOut.writeBoolean(o != null);",
      "70:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
      "71:                         looseMarshalString(o.getMessage(), dataOut);",
      "72:                     }",
      "73:                 };",
      "74:             case 4:",
      "75:                 return new org.apache.activemq.openwire.v4.ExceptionResponseMarshaller() {",
      "76:                     @Override",
      "77:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
      "78:                         DataOutput dataOut) throws IOException {",
      "79:                         dataOut.writeBoolean(o != null);",
      "80:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
      "81:                         looseMarshalString(o.getMessage(), dataOut);",
      "82:                     }",
      "83:                 };",
      "84:             case 5:",
      "85:                 return new org.apache.activemq.openwire.v5.ExceptionResponseMarshaller() {",
      "86:                     @Override",
      "87:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
      "88:                         DataOutput dataOut) throws IOException {",
      "89:                         dataOut.writeBoolean(o != null);",
      "90:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
      "91:                         looseMarshalString(o.getMessage(), dataOut);",
      "92:                     }",
      "93:                 };",
      "94:             case 6:",
      "95:                 return new org.apache.activemq.openwire.v6.ExceptionResponseMarshaller() {",
      "96:                     @Override",
      "97:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
      "98:                         DataOutput dataOut) throws IOException {",
      "99:                         dataOut.writeBoolean(o != null);",
      "100:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
      "101:                         looseMarshalString(o.getMessage(), dataOut);",
      "102:                     }",
      "103:                 };",
      "104:             case 7:",
      "105:                 return new org.apache.activemq.openwire.v7.ExceptionResponseMarshaller() {",
      "106:                     @Override",
      "107:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
      "108:                         DataOutput dataOut) throws IOException {",
      "109:                         dataOut.writeBoolean(o != null);",
      "110:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
      "111:                         looseMarshalString(o.getMessage(), dataOut);",
      "112:                     }",
      "113:                 };",
      "114:             case 8:",
      "115:                 return new org.apache.activemq.openwire.v8.ExceptionResponseMarshaller() {",
      "116:                     @Override",
      "117:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
      "118:                         DataOutput dataOut) throws IOException {",
      "119:                         dataOut.writeBoolean(o != null);",
      "120:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
      "121:                         looseMarshalString(o.getMessage(), dataOut);",
      "122:                     }",
      "123:                 };",
      "124:             default:",
      "125:                 throw new IllegalArgumentException(\"Unknown openwire version of \" + version);",
      "126:         }",
      "127:     }",
      "129: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "22442b2385b1000312aec3d19e510131d595a5fc",
      "candidate_info": {
        "commit_hash": "22442b2385b1000312aec3d19e510131d595a5fc",
        "repo": "apache/activemq",
        "commit_url": "https://github.com/apache/activemq/commit/22442b2385b1000312aec3d19e510131d595a5fc",
        "files": [
          "activemq-client/pom.xml",
          "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
          "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
          "activemq-openwire-legacy/pom.xml",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java",
          "pom.xml"
        ],
        "message": "AMQ-9370 - Openwire marshaller should validate Throwable class type\n\n(cherry picked from commit 3eaf3107f4fb9a3ce7ab45c175bfaeac7e866d5b)\n(cherry picked from commit d0ccdd31544ada83185554c87c7aa141064020f0)",
        "before_after_code_files": [
          "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java||activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
          "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java||activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java||activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java||activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
            "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java||activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java||activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java"
          ],
          "candidate": [
            "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java||activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
            "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java||activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java||activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java"
          ]
        }
      },
      "candidate_diff": {
        "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java||activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java -> activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.activemq.openwire;",
          "19: public class OpenWireUtil {",
          "27:     public static void validateIsThrowable(Class<?> clazz) {",
          "28:         if (!Throwable.class.isAssignableFrom(clazz)) {",
          "29:             throw new IllegalArgumentException(\"Class \" + clazz + \" is not assignable to Throwable\");",
          "30:         }",
          "31:     }",
          "32: }",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229:     private Throwable createThrowable(String className, String message) {",
          "230:         try {",
          "231:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "232:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "233:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "234:         } catch (Throwable e) {",
          "235:             return new Throwable(className + \": \" + message);",
          "236:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:             OpenWireUtil.validateIsThrowable(clazz);",
          "236:         } catch (IllegalArgumentException e) {",
          "237:             return e;",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     private Throwable createThrowable(String className, String message) {",
          "228:         try {",
          "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "232:         } catch (Throwable e) {",
          "233:             return new Throwable(className + \": \" + message);",
          "234:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:             OpenWireUtil.validateIsThrowable(clazz);",
          "234:         } catch (IllegalArgumentException e) {",
          "235:             return e;",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     private Throwable createThrowable(String className, String message) {",
          "228:         try {",
          "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "232:         } catch (Throwable e) {",
          "233:             return new Throwable(className + \": \" + message);",
          "234:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:             OpenWireUtil.validateIsThrowable(clazz);",
          "234:         } catch (IllegalArgumentException e) {",
          "235:             return e;",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     private Throwable createThrowable(String className, String message) {",
          "228:         try {",
          "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "232:         } catch (Throwable e) {",
          "233:             return new Throwable(className + \": \" + message);",
          "234:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:             OpenWireUtil.validateIsThrowable(clazz);",
          "234:         } catch (IllegalArgumentException e) {",
          "235:             return e;",
          "",
          "---------------"
        ],
        "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java||activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java": [
          "File: activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java -> activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.activemq.openwire;",
          "19: import static org.junit.Assert.assertTrue;",
          "21: import java.io.DataOutput;",
          "22: import java.io.IOException;",
          "23: import java.lang.reflect.Method;",
          "24: import java.util.ArrayList;",
          "25: import java.util.Collection;",
          "26: import java.util.List;",
          "27: import org.apache.activemq.command.CommandTypes;",
          "28: import org.apache.activemq.command.ExceptionResponse;",
          "29: import org.apache.activemq.util.ByteSequence;",
          "30: import org.junit.Test;",
          "31: import org.junit.runner.RunWith;",
          "32: import org.junit.runners.Parameterized;",
          "33: import org.junit.runners.Parameterized.Parameters;",
          "39: @RunWith(Parameterized.class)",
          "40: public class OpenWireValidationTest {",
          "42:     protected final int version;",
          "44:     @Parameters(name = \"version={0}\")",
          "45:     public static Collection<Object[]> data() {",
          "46:         List<Integer> versions = List.of(1, 9, 10, 11, 12);",
          "47:         List<Object[]> versionObjs = new ArrayList<>();",
          "48:         for (int i : versions) {",
          "49:             versionObjs.add(new Object[]{i});",
          "50:         }",
          "55:         assertTrue(\"List of Openwire versions does not include latest version\",",
          "56:             versions.contains((int)CommandTypes.PROTOCOL_VERSION));",
          "58:         return versionObjs;",
          "59:     }",
          "61:     public OpenWireValidationTest(int version) {",
          "62:         this.version = version;",
          "63:     }",
          "65:     @Test",
          "66:     public void testOpenwireThrowableValidation() throws Exception {",
          "70:         OpenWireFormat format = new OpenWireFormat();",
          "74:         Class<?> marshallerFactory = getMarshallerFactory();",
          "75:         Method createMarshallerMap = marshallerFactory.getMethod(\"createMarshallerMap\", OpenWireFormat.class);",
          "76:         DataStreamMarshaller[] map = (DataStreamMarshaller[]) createMarshallerMap.invoke(marshallerFactory, format);",
          "77:         map[ExceptionResponse.DATA_STRUCTURE_TYPE] = getExceptionMarshaller();",
          "79:         format.setVersion(version);",
          "83:         ExceptionResponse r = new ExceptionResponse();",
          "84:         r.setException(new Exception());",
          "85:         ByteSequence bss = format.marshal(r);",
          "86:         ExceptionResponse response = (ExceptionResponse) format.unmarshal(bss);",
          "88:         assertTrue(response.getException() instanceof IllegalArgumentException);",
          "89:         assertTrue(response.getException().getMessage().contains(\"is not assignable to Throwable\"));",
          "90:     }",
          "92:     static class NotAThrowable {",
          "93:         private String message;",
          "95:         public NotAThrowable(String message) {",
          "96:             this.message = message;",
          "97:         }",
          "99:         public NotAThrowable() {",
          "100:         }",
          "101:     }",
          "103:     private Class<?> getMarshallerFactory() throws ClassNotFoundException {",
          "104:         return Class.forName(\"org.apache.activemq.openwire.v\" + version + \".MarshallerFactory\");",
          "105:     }",
          "109:     protected DataStreamMarshaller getExceptionMarshaller() {",
          "110:         switch (version) {",
          "111:             case 12:",
          "112:                 return new org.apache.activemq.openwire.v12.ExceptionResponseMarshaller() {",
          "113:                     @Override",
          "114:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "115:                         DataOutput dataOut) throws IOException {",
          "116:                         dataOut.writeBoolean(o != null);",
          "117:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "118:                         looseMarshalString(o.getMessage(), dataOut);",
          "119:                     }",
          "120:                 };",
          "121:             case 11:",
          "122:                 return new org.apache.activemq.openwire.v11.ExceptionResponseMarshaller() {",
          "123:                     @Override",
          "124:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "125:                         DataOutput dataOut) throws IOException {",
          "126:                         dataOut.writeBoolean(o != null);",
          "127:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "128:                         looseMarshalString(o.getMessage(), dataOut);",
          "129:                     }",
          "130:                 };",
          "131:             case 10:",
          "132:                 return new org.apache.activemq.openwire.v10.ExceptionResponseMarshaller() {",
          "133:                     @Override",
          "134:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "135:                         DataOutput dataOut) throws IOException {",
          "136:                         dataOut.writeBoolean(o != null);",
          "137:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "138:                         looseMarshalString(o.getMessage(), dataOut);",
          "139:                     }",
          "140:                 };",
          "141:             case 9:",
          "142:                 return new org.apache.activemq.openwire.v9.ExceptionResponseMarshaller() {",
          "143:                     @Override",
          "144:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "145:                         DataOutput dataOut) throws IOException {",
          "146:                         dataOut.writeBoolean(o != null);",
          "147:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "148:                         looseMarshalString(o.getMessage(), dataOut);",
          "149:                     }",
          "150:                 };",
          "151:             case 1:",
          "152:                 return new org.apache.activemq.openwire.v1.ExceptionResponseMarshaller() {",
          "153:                     @Override",
          "154:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "155:                         DataOutput dataOut) throws IOException {",
          "156:                         dataOut.writeBoolean(o != null);",
          "157:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "158:                         looseMarshalString(o.getMessage(), dataOut);",
          "159:                     }",
          "160:                 };",
          "161:             default:",
          "162:                 throw new IllegalArgumentException(\"Unknown openwire version of \" + version);",
          "163:         }",
          "164:     }",
          "166: }",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     private Throwable createThrowable(String className, String message) {",
          "228:         try {",
          "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "232:         } catch (Throwable e) {",
          "233:             return new Throwable(className + \": \" + message);",
          "234:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:             OpenWireUtil.validateIsThrowable(clazz);",
          "234:         } catch (IllegalArgumentException e) {",
          "235:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     private Throwable createThrowable(String className, String message) {",
          "228:         try {",
          "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "232:         } catch (Throwable e) {",
          "233:             return new Throwable(className + \": \" + message);",
          "234:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:             OpenWireUtil.validateIsThrowable(clazz);",
          "234:         } catch (IllegalArgumentException e) {",
          "235:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java||activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java": [
          "File: activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java -> activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.activemq.openwire;",
          "19: import java.io.DataOutput;",
          "20: import java.io.IOException;",
          "21: import java.util.ArrayList;",
          "22: import java.util.Collection;",
          "23: import java.util.List;",
          "24: import org.junit.runner.RunWith;",
          "25: import org.junit.runners.Parameterized;",
          "26: import org.junit.runners.Parameterized.Parameters;",
          "32: @RunWith(Parameterized.class)",
          "33: public class OpenWireLegacyValidationTest extends OpenWireValidationTest {",
          "37:     @Parameters(name = \"version={0}\")",
          "38:     public static Collection<Object[]> data() {",
          "39:         List<Object[]> versions = new ArrayList<>();",
          "40:         for (int i = 2; i <= 8; i++) {",
          "41:             versions.add(new Object[]{i});",
          "42:         }",
          "43:         return versions;",
          "44:     }",
          "46:     public OpenWireLegacyValidationTest(int version) {",
          "47:         super(version);",
          "48:     }",
          "52:     protected DataStreamMarshaller getExceptionMarshaller() {",
          "53:         switch (version) {",
          "54:             case 2:",
          "55:                 return new org.apache.activemq.openwire.v2.ExceptionResponseMarshaller() {",
          "56:                     @Override",
          "57:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "58:                         DataOutput dataOut) throws IOException {",
          "59:                         dataOut.writeBoolean(o != null);",
          "60:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "61:                         looseMarshalString(o.getMessage(), dataOut);",
          "62:                     }",
          "63:                 };",
          "64:             case 3:",
          "65:                 return new org.apache.activemq.openwire.v3.ExceptionResponseMarshaller() {",
          "66:                     @Override",
          "67:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "68:                         DataOutput dataOut) throws IOException {",
          "69:                         dataOut.writeBoolean(o != null);",
          "70:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "71:                         looseMarshalString(o.getMessage(), dataOut);",
          "72:                     }",
          "73:                 };",
          "74:             case 4:",
          "75:                 return new org.apache.activemq.openwire.v4.ExceptionResponseMarshaller() {",
          "76:                     @Override",
          "77:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "78:                         DataOutput dataOut) throws IOException {",
          "79:                         dataOut.writeBoolean(o != null);",
          "80:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "81:                         looseMarshalString(o.getMessage(), dataOut);",
          "82:                     }",
          "83:                 };",
          "84:             case 5:",
          "85:                 return new org.apache.activemq.openwire.v5.ExceptionResponseMarshaller() {",
          "86:                     @Override",
          "87:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "88:                         DataOutput dataOut) throws IOException {",
          "89:                         dataOut.writeBoolean(o != null);",
          "90:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "91:                         looseMarshalString(o.getMessage(), dataOut);",
          "92:                     }",
          "93:                 };",
          "94:             case 6:",
          "95:                 return new org.apache.activemq.openwire.v6.ExceptionResponseMarshaller() {",
          "96:                     @Override",
          "97:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "98:                         DataOutput dataOut) throws IOException {",
          "99:                         dataOut.writeBoolean(o != null);",
          "100:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "101:                         looseMarshalString(o.getMessage(), dataOut);",
          "102:                     }",
          "103:                 };",
          "104:             case 7:",
          "105:                 return new org.apache.activemq.openwire.v7.ExceptionResponseMarshaller() {",
          "106:                     @Override",
          "107:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "108:                         DataOutput dataOut) throws IOException {",
          "109:                         dataOut.writeBoolean(o != null);",
          "110:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "111:                         looseMarshalString(o.getMessage(), dataOut);",
          "112:                     }",
          "113:                 };",
          "114:             case 8:",
          "115:                 return new org.apache.activemq.openwire.v8.ExceptionResponseMarshaller() {",
          "116:                     @Override",
          "117:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "118:                         DataOutput dataOut) throws IOException {",
          "119:                         dataOut.writeBoolean(o != null);",
          "120:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "121:                         looseMarshalString(o.getMessage(), dataOut);",
          "122:                     }",
          "123:                 };",
          "124:             default:",
          "125:                 throw new IllegalArgumentException(\"Unknown openwire version of \" + version);",
          "126:         }",
          "127:     }",
          "129: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9905e2a5bf9862a049f94ce0a2465b0c7ad52436",
      "candidate_info": {
        "commit_hash": "9905e2a5bf9862a049f94ce0a2465b0c7ad52436",
        "repo": "apache/activemq",
        "commit_url": "https://github.com/apache/activemq/commit/9905e2a5bf9862a049f94ce0a2465b0c7ad52436",
        "files": [
          "activemq-client/pom.xml",
          "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
          "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
          "activemq-openwire-legacy/pom.xml",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java",
          "pom.xml"
        ],
        "message": "AMQ-9370 - Openwire marshaller should validate Throwable class type\n\n(cherry picked from commit 3eaf3107f4fb9a3ce7ab45c175bfaeac7e866d5b)\n(cherry picked from commit d0ccdd31544ada83185554c87c7aa141064020f0)",
        "before_after_code_files": [
          "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java||activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
          "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java||activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java||activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java||activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
            "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java||activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java||activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java"
          ],
          "candidate": [
            "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java||activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
            "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java||activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java||activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java"
          ]
        }
      },
      "candidate_diff": {
        "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java||activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java -> activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.activemq.openwire;",
          "19: public class OpenWireUtil {",
          "27:     public static void validateIsThrowable(Class<?> clazz) {",
          "28:         if (!Throwable.class.isAssignableFrom(clazz)) {",
          "29:             throw new IllegalArgumentException(\"Class \" + clazz + \" is not assignable to Throwable\");",
          "30:         }",
          "31:     }",
          "32: }",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229:     private Throwable createThrowable(String className, String message) {",
          "230:         try {",
          "231:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "232:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "233:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "234:         } catch (Throwable e) {",
          "235:             return new Throwable(className + \": \" + message);",
          "236:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:             OpenWireUtil.validateIsThrowable(clazz);",
          "236:         } catch (IllegalArgumentException e) {",
          "237:             return e;",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     private Throwable createThrowable(String className, String message) {",
          "228:         try {",
          "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "232:         } catch (Throwable e) {",
          "233:             return new Throwable(className + \": \" + message);",
          "234:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:             OpenWireUtil.validateIsThrowable(clazz);",
          "234:         } catch (IllegalArgumentException e) {",
          "235:             return e;",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     private Throwable createThrowable(String className, String message) {",
          "228:         try {",
          "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "232:         } catch (Throwable e) {",
          "233:             return new Throwable(className + \": \" + message);",
          "234:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:             OpenWireUtil.validateIsThrowable(clazz);",
          "234:         } catch (IllegalArgumentException e) {",
          "235:             return e;",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     private Throwable createThrowable(String className, String message) {",
          "228:         try {",
          "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "232:         } catch (Throwable e) {",
          "233:             return new Throwable(className + \": \" + message);",
          "234:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:             OpenWireUtil.validateIsThrowable(clazz);",
          "234:         } catch (IllegalArgumentException e) {",
          "235:             return e;",
          "",
          "---------------"
        ],
        "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java||activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java": [
          "File: activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java -> activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.activemq.openwire;",
          "19: import static org.junit.Assert.assertTrue;",
          "21: import java.io.DataOutput;",
          "22: import java.io.IOException;",
          "23: import java.lang.reflect.Method;",
          "24: import java.util.ArrayList;",
          "25: import java.util.Collection;",
          "26: import java.util.List;",
          "27: import org.apache.activemq.command.CommandTypes;",
          "28: import org.apache.activemq.command.ExceptionResponse;",
          "29: import org.apache.activemq.util.ByteSequence;",
          "30: import org.junit.Test;",
          "31: import org.junit.runner.RunWith;",
          "32: import org.junit.runners.Parameterized;",
          "33: import org.junit.runners.Parameterized.Parameters;",
          "39: @RunWith(Parameterized.class)",
          "40: public class OpenWireValidationTest {",
          "42:     protected final int version;",
          "44:     @Parameters(name = \"version={0}\")",
          "45:     public static Collection<Object[]> data() {",
          "46:         List<Integer> versions = List.of(1, 9, 10, 11, 12);",
          "47:         List<Object[]> versionObjs = new ArrayList<>();",
          "48:         for (int i : versions) {",
          "49:             versionObjs.add(new Object[]{i});",
          "50:         }",
          "55:         assertTrue(\"List of Openwire versions does not include latest version\",",
          "56:             versions.contains((int)CommandTypes.PROTOCOL_VERSION));",
          "58:         return versionObjs;",
          "59:     }",
          "61:     public OpenWireValidationTest(int version) {",
          "62:         this.version = version;",
          "63:     }",
          "65:     @Test",
          "66:     public void testOpenwireThrowableValidation() throws Exception {",
          "70:         OpenWireFormat format = new OpenWireFormat();",
          "74:         Class<?> marshallerFactory = getMarshallerFactory();",
          "75:         Method createMarshallerMap = marshallerFactory.getMethod(\"createMarshallerMap\", OpenWireFormat.class);",
          "76:         DataStreamMarshaller[] map = (DataStreamMarshaller[]) createMarshallerMap.invoke(marshallerFactory, format);",
          "77:         map[ExceptionResponse.DATA_STRUCTURE_TYPE] = getExceptionMarshaller();",
          "79:         format.setVersion(version);",
          "83:         ExceptionResponse r = new ExceptionResponse();",
          "84:         r.setException(new Exception());",
          "85:         ByteSequence bss = format.marshal(r);",
          "86:         ExceptionResponse response = (ExceptionResponse) format.unmarshal(bss);",
          "88:         assertTrue(response.getException() instanceof IllegalArgumentException);",
          "89:         assertTrue(response.getException().getMessage().contains(\"is not assignable to Throwable\"));",
          "90:     }",
          "92:     static class NotAThrowable {",
          "93:         private String message;",
          "95:         public NotAThrowable(String message) {",
          "96:             this.message = message;",
          "97:         }",
          "99:         public NotAThrowable() {",
          "100:         }",
          "101:     }",
          "103:     private Class<?> getMarshallerFactory() throws ClassNotFoundException {",
          "104:         return Class.forName(\"org.apache.activemq.openwire.v\" + version + \".MarshallerFactory\");",
          "105:     }",
          "109:     protected DataStreamMarshaller getExceptionMarshaller() {",
          "110:         switch (version) {",
          "111:             case 12:",
          "112:                 return new org.apache.activemq.openwire.v12.ExceptionResponseMarshaller() {",
          "113:                     @Override",
          "114:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "115:                         DataOutput dataOut) throws IOException {",
          "116:                         dataOut.writeBoolean(o != null);",
          "117:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "118:                         looseMarshalString(o.getMessage(), dataOut);",
          "119:                     }",
          "120:                 };",
          "121:             case 11:",
          "122:                 return new org.apache.activemq.openwire.v11.ExceptionResponseMarshaller() {",
          "123:                     @Override",
          "124:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "125:                         DataOutput dataOut) throws IOException {",
          "126:                         dataOut.writeBoolean(o != null);",
          "127:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "128:                         looseMarshalString(o.getMessage(), dataOut);",
          "129:                     }",
          "130:                 };",
          "131:             case 10:",
          "132:                 return new org.apache.activemq.openwire.v10.ExceptionResponseMarshaller() {",
          "133:                     @Override",
          "134:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "135:                         DataOutput dataOut) throws IOException {",
          "136:                         dataOut.writeBoolean(o != null);",
          "137:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "138:                         looseMarshalString(o.getMessage(), dataOut);",
          "139:                     }",
          "140:                 };",
          "141:             case 9:",
          "142:                 return new org.apache.activemq.openwire.v9.ExceptionResponseMarshaller() {",
          "143:                     @Override",
          "144:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "145:                         DataOutput dataOut) throws IOException {",
          "146:                         dataOut.writeBoolean(o != null);",
          "147:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "148:                         looseMarshalString(o.getMessage(), dataOut);",
          "149:                     }",
          "150:                 };",
          "151:             case 1:",
          "152:                 return new org.apache.activemq.openwire.v1.ExceptionResponseMarshaller() {",
          "153:                     @Override",
          "154:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "155:                         DataOutput dataOut) throws IOException {",
          "156:                         dataOut.writeBoolean(o != null);",
          "157:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "158:                         looseMarshalString(o.getMessage(), dataOut);",
          "159:                     }",
          "160:                 };",
          "161:             default:",
          "162:                 throw new IllegalArgumentException(\"Unknown openwire version of \" + version);",
          "163:         }",
          "164:     }",
          "166: }",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     private Throwable createThrowable(String className, String message) {",
          "228:         try {",
          "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "232:         } catch (Throwable e) {",
          "233:             return new Throwable(className + \": \" + message);",
          "234:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:             OpenWireUtil.validateIsThrowable(clazz);",
          "234:         } catch (IllegalArgumentException e) {",
          "235:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     private Throwable createThrowable(String className, String message) {",
          "228:         try {",
          "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "232:         } catch (Throwable e) {",
          "233:             return new Throwable(className + \": \" + message);",
          "234:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:             OpenWireUtil.validateIsThrowable(clazz);",
          "234:         } catch (IllegalArgumentException e) {",
          "235:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java||activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java": [
          "File: activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java -> activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.activemq.openwire;",
          "19: import java.io.DataOutput;",
          "20: import java.io.IOException;",
          "21: import java.util.ArrayList;",
          "22: import java.util.Collection;",
          "23: import java.util.List;",
          "24: import org.junit.runner.RunWith;",
          "25: import org.junit.runners.Parameterized;",
          "26: import org.junit.runners.Parameterized.Parameters;",
          "32: @RunWith(Parameterized.class)",
          "33: public class OpenWireLegacyValidationTest extends OpenWireValidationTest {",
          "37:     @Parameters(name = \"version={0}\")",
          "38:     public static Collection<Object[]> data() {",
          "39:         List<Object[]> versions = new ArrayList<>();",
          "40:         for (int i = 2; i <= 8; i++) {",
          "41:             versions.add(new Object[]{i});",
          "42:         }",
          "43:         return versions;",
          "44:     }",
          "46:     public OpenWireLegacyValidationTest(int version) {",
          "47:         super(version);",
          "48:     }",
          "52:     protected DataStreamMarshaller getExceptionMarshaller() {",
          "53:         switch (version) {",
          "54:             case 2:",
          "55:                 return new org.apache.activemq.openwire.v2.ExceptionResponseMarshaller() {",
          "56:                     @Override",
          "57:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "58:                         DataOutput dataOut) throws IOException {",
          "59:                         dataOut.writeBoolean(o != null);",
          "60:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "61:                         looseMarshalString(o.getMessage(), dataOut);",
          "62:                     }",
          "63:                 };",
          "64:             case 3:",
          "65:                 return new org.apache.activemq.openwire.v3.ExceptionResponseMarshaller() {",
          "66:                     @Override",
          "67:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "68:                         DataOutput dataOut) throws IOException {",
          "69:                         dataOut.writeBoolean(o != null);",
          "70:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "71:                         looseMarshalString(o.getMessage(), dataOut);",
          "72:                     }",
          "73:                 };",
          "74:             case 4:",
          "75:                 return new org.apache.activemq.openwire.v4.ExceptionResponseMarshaller() {",
          "76:                     @Override",
          "77:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "78:                         DataOutput dataOut) throws IOException {",
          "79:                         dataOut.writeBoolean(o != null);",
          "80:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "81:                         looseMarshalString(o.getMessage(), dataOut);",
          "82:                     }",
          "83:                 };",
          "84:             case 5:",
          "85:                 return new org.apache.activemq.openwire.v5.ExceptionResponseMarshaller() {",
          "86:                     @Override",
          "87:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "88:                         DataOutput dataOut) throws IOException {",
          "89:                         dataOut.writeBoolean(o != null);",
          "90:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "91:                         looseMarshalString(o.getMessage(), dataOut);",
          "92:                     }",
          "93:                 };",
          "94:             case 6:",
          "95:                 return new org.apache.activemq.openwire.v6.ExceptionResponseMarshaller() {",
          "96:                     @Override",
          "97:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "98:                         DataOutput dataOut) throws IOException {",
          "99:                         dataOut.writeBoolean(o != null);",
          "100:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "101:                         looseMarshalString(o.getMessage(), dataOut);",
          "102:                     }",
          "103:                 };",
          "104:             case 7:",
          "105:                 return new org.apache.activemq.openwire.v7.ExceptionResponseMarshaller() {",
          "106:                     @Override",
          "107:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "108:                         DataOutput dataOut) throws IOException {",
          "109:                         dataOut.writeBoolean(o != null);",
          "110:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "111:                         looseMarshalString(o.getMessage(), dataOut);",
          "112:                     }",
          "113:                 };",
          "114:             case 8:",
          "115:                 return new org.apache.activemq.openwire.v8.ExceptionResponseMarshaller() {",
          "116:                     @Override",
          "117:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "118:                         DataOutput dataOut) throws IOException {",
          "119:                         dataOut.writeBoolean(o != null);",
          "120:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "121:                         looseMarshalString(o.getMessage(), dataOut);",
          "122:                     }",
          "123:                 };",
          "124:             default:",
          "125:                 throw new IllegalArgumentException(\"Unknown openwire version of \" + version);",
          "126:         }",
          "127:     }",
          "129: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3eaf3107f4fb9a3ce7ab45c175bfaeac7e866d5b",
      "candidate_info": {
        "commit_hash": "3eaf3107f4fb9a3ce7ab45c175bfaeac7e866d5b",
        "repo": "apache/activemq",
        "commit_url": "https://github.com/apache/activemq/commit/3eaf3107f4fb9a3ce7ab45c175bfaeac7e866d5b",
        "files": [
          "activemq-client/pom.xml",
          "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
          "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
          "activemq-openwire-legacy/pom.xml",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java",
          "pom.xml"
        ],
        "message": "AMQ-9370 - Openwire marshaller should validate Throwable class type",
        "before_after_code_files": [
          "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java||activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
          "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java||activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java||activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java||activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
            "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java||activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java||activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java"
          ],
          "candidate": [
            "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java||activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
            "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java||activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java||activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java"
          ]
        }
      },
      "candidate_diff": {
        "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java||activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java -> activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.activemq.openwire;",
          "19: public class OpenWireUtil {",
          "27:     public static void validateIsThrowable(Class<?> clazz) {",
          "28:         if (!Throwable.class.isAssignableFrom(clazz)) {",
          "29:             throw new IllegalArgumentException(\"Class \" + clazz + \" is not assignable to Throwable\");",
          "30:         }",
          "31:     }",
          "32: }",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229:     private Throwable createThrowable(String className, String message) {",
          "230:         try {",
          "231:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "232:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "233:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "234:         } catch (Throwable e) {",
          "235:             return new Throwable(className + \": \" + message);",
          "236:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:             OpenWireUtil.validateIsThrowable(clazz);",
          "236:         } catch (IllegalArgumentException e) {",
          "237:             return e;",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     private Throwable createThrowable(String className, String message) {",
          "228:         try {",
          "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "232:         } catch (Throwable e) {",
          "233:             return new Throwable(className + \": \" + message);",
          "234:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:             OpenWireUtil.validateIsThrowable(clazz);",
          "234:         } catch (IllegalArgumentException e) {",
          "235:             return e;",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     private Throwable createThrowable(String className, String message) {",
          "228:         try {",
          "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "232:         } catch (Throwable e) {",
          "233:             return new Throwable(className + \": \" + message);",
          "234:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:             OpenWireUtil.validateIsThrowable(clazz);",
          "234:         } catch (IllegalArgumentException e) {",
          "235:             return e;",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     private Throwable createThrowable(String className, String message) {",
          "228:         try {",
          "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "232:         } catch (Throwable e) {",
          "233:             return new Throwable(className + \": \" + message);",
          "234:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:             OpenWireUtil.validateIsThrowable(clazz);",
          "234:         } catch (IllegalArgumentException e) {",
          "235:             return e;",
          "",
          "---------------"
        ],
        "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java||activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java": [
          "File: activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java -> activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.activemq.openwire;",
          "19: import static org.junit.Assert.assertTrue;",
          "21: import java.io.DataOutput;",
          "22: import java.io.IOException;",
          "23: import java.lang.reflect.Method;",
          "24: import java.util.ArrayList;",
          "25: import java.util.Collection;",
          "26: import java.util.List;",
          "27: import org.apache.activemq.command.CommandTypes;",
          "28: import org.apache.activemq.command.ExceptionResponse;",
          "29: import org.apache.activemq.util.ByteSequence;",
          "30: import org.junit.Test;",
          "31: import org.junit.runner.RunWith;",
          "32: import org.junit.runners.Parameterized;",
          "33: import org.junit.runners.Parameterized.Parameters;",
          "39: @RunWith(Parameterized.class)",
          "40: public class OpenWireValidationTest {",
          "42:     protected final int version;",
          "44:     @Parameters(name = \"version={0}\")",
          "45:     public static Collection<Object[]> data() {",
          "46:         List<Integer> versions = List.of(1, 9, 10, 11, 12);",
          "47:         List<Object[]> versionObjs = new ArrayList<>();",
          "48:         for (int i : versions) {",
          "49:             versionObjs.add(new Object[]{i});",
          "50:         }",
          "55:         assertTrue(\"List of Openwire versions does not include latest version\",",
          "56:             versions.contains((int)CommandTypes.PROTOCOL_VERSION));",
          "58:         return versionObjs;",
          "59:     }",
          "61:     public OpenWireValidationTest(int version) {",
          "62:         this.version = version;",
          "63:     }",
          "65:     @Test",
          "66:     public void testOpenwireThrowableValidation() throws Exception {",
          "70:         OpenWireFormat format = new OpenWireFormat();",
          "74:         Class<?> marshallerFactory = getMarshallerFactory();",
          "75:         Method createMarshallerMap = marshallerFactory.getMethod(\"createMarshallerMap\", OpenWireFormat.class);",
          "76:         DataStreamMarshaller[] map = (DataStreamMarshaller[]) createMarshallerMap.invoke(marshallerFactory, format);",
          "77:         map[ExceptionResponse.DATA_STRUCTURE_TYPE] = getExceptionMarshaller();",
          "79:         format.setVersion(version);",
          "83:         ExceptionResponse r = new ExceptionResponse();",
          "84:         r.setException(new Exception());",
          "85:         ByteSequence bss = format.marshal(r);",
          "86:         ExceptionResponse response = (ExceptionResponse) format.unmarshal(bss);",
          "88:         assertTrue(response.getException() instanceof IllegalArgumentException);",
          "89:         assertTrue(response.getException().getMessage().contains(\"is not assignable to Throwable\"));",
          "90:     }",
          "92:     static class NotAThrowable {",
          "93:         private String message;",
          "95:         public NotAThrowable(String message) {",
          "96:             this.message = message;",
          "97:         }",
          "99:         public NotAThrowable() {",
          "100:         }",
          "101:     }",
          "103:     private Class<?> getMarshallerFactory() throws ClassNotFoundException {",
          "104:         return Class.forName(\"org.apache.activemq.openwire.v\" + version + \".MarshallerFactory\");",
          "105:     }",
          "109:     protected DataStreamMarshaller getExceptionMarshaller() {",
          "110:         switch (version) {",
          "111:             case 12:",
          "112:                 return new org.apache.activemq.openwire.v12.ExceptionResponseMarshaller() {",
          "113:                     @Override",
          "114:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "115:                         DataOutput dataOut) throws IOException {",
          "116:                         dataOut.writeBoolean(o != null);",
          "117:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "118:                         looseMarshalString(o.getMessage(), dataOut);",
          "119:                     }",
          "120:                 };",
          "121:             case 11:",
          "122:                 return new org.apache.activemq.openwire.v11.ExceptionResponseMarshaller() {",
          "123:                     @Override",
          "124:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "125:                         DataOutput dataOut) throws IOException {",
          "126:                         dataOut.writeBoolean(o != null);",
          "127:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "128:                         looseMarshalString(o.getMessage(), dataOut);",
          "129:                     }",
          "130:                 };",
          "131:             case 10:",
          "132:                 return new org.apache.activemq.openwire.v10.ExceptionResponseMarshaller() {",
          "133:                     @Override",
          "134:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "135:                         DataOutput dataOut) throws IOException {",
          "136:                         dataOut.writeBoolean(o != null);",
          "137:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "138:                         looseMarshalString(o.getMessage(), dataOut);",
          "139:                     }",
          "140:                 };",
          "141:             case 9:",
          "142:                 return new org.apache.activemq.openwire.v9.ExceptionResponseMarshaller() {",
          "143:                     @Override",
          "144:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "145:                         DataOutput dataOut) throws IOException {",
          "146:                         dataOut.writeBoolean(o != null);",
          "147:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "148:                         looseMarshalString(o.getMessage(), dataOut);",
          "149:                     }",
          "150:                 };",
          "151:             case 1:",
          "152:                 return new org.apache.activemq.openwire.v1.ExceptionResponseMarshaller() {",
          "153:                     @Override",
          "154:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "155:                         DataOutput dataOut) throws IOException {",
          "156:                         dataOut.writeBoolean(o != null);",
          "157:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "158:                         looseMarshalString(o.getMessage(), dataOut);",
          "159:                     }",
          "160:                 };",
          "161:             default:",
          "162:                 throw new IllegalArgumentException(\"Unknown openwire version of \" + version);",
          "163:         }",
          "164:     }",
          "166: }",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     private Throwable createThrowable(String className, String message) {",
          "228:         try {",
          "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "232:         } catch (Throwable e) {",
          "233:             return new Throwable(className + \": \" + message);",
          "234:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:             OpenWireUtil.validateIsThrowable(clazz);",
          "234:         } catch (IllegalArgumentException e) {",
          "235:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     private Throwable createThrowable(String className, String message) {",
          "228:         try {",
          "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "232:         } catch (Throwable e) {",
          "233:             return new Throwable(className + \": \" + message);",
          "234:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:             OpenWireUtil.validateIsThrowable(clazz);",
          "234:         } catch (IllegalArgumentException e) {",
          "235:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java||activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java": [
          "File: activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java -> activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.activemq.openwire;",
          "19: import java.io.DataOutput;",
          "20: import java.io.IOException;",
          "21: import java.util.ArrayList;",
          "22: import java.util.Collection;",
          "23: import java.util.List;",
          "24: import org.junit.runner.RunWith;",
          "25: import org.junit.runners.Parameterized;",
          "26: import org.junit.runners.Parameterized.Parameters;",
          "32: @RunWith(Parameterized.class)",
          "33: public class OpenWireLegacyValidationTest extends OpenWireValidationTest {",
          "37:     @Parameters(name = \"version={0}\")",
          "38:     public static Collection<Object[]> data() {",
          "39:         List<Object[]> versions = new ArrayList<>();",
          "40:         for (int i = 2; i <= 8; i++) {",
          "41:             versions.add(new Object[]{i});",
          "42:         }",
          "43:         return versions;",
          "44:     }",
          "46:     public OpenWireLegacyValidationTest(int version) {",
          "47:         super(version);",
          "48:     }",
          "52:     protected DataStreamMarshaller getExceptionMarshaller() {",
          "53:         switch (version) {",
          "54:             case 2:",
          "55:                 return new org.apache.activemq.openwire.v2.ExceptionResponseMarshaller() {",
          "56:                     @Override",
          "57:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "58:                         DataOutput dataOut) throws IOException {",
          "59:                         dataOut.writeBoolean(o != null);",
          "60:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "61:                         looseMarshalString(o.getMessage(), dataOut);",
          "62:                     }",
          "63:                 };",
          "64:             case 3:",
          "65:                 return new org.apache.activemq.openwire.v3.ExceptionResponseMarshaller() {",
          "66:                     @Override",
          "67:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "68:                         DataOutput dataOut) throws IOException {",
          "69:                         dataOut.writeBoolean(o != null);",
          "70:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "71:                         looseMarshalString(o.getMessage(), dataOut);",
          "72:                     }",
          "73:                 };",
          "74:             case 4:",
          "75:                 return new org.apache.activemq.openwire.v4.ExceptionResponseMarshaller() {",
          "76:                     @Override",
          "77:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "78:                         DataOutput dataOut) throws IOException {",
          "79:                         dataOut.writeBoolean(o != null);",
          "80:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "81:                         looseMarshalString(o.getMessage(), dataOut);",
          "82:                     }",
          "83:                 };",
          "84:             case 5:",
          "85:                 return new org.apache.activemq.openwire.v5.ExceptionResponseMarshaller() {",
          "86:                     @Override",
          "87:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "88:                         DataOutput dataOut) throws IOException {",
          "89:                         dataOut.writeBoolean(o != null);",
          "90:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "91:                         looseMarshalString(o.getMessage(), dataOut);",
          "92:                     }",
          "93:                 };",
          "94:             case 6:",
          "95:                 return new org.apache.activemq.openwire.v6.ExceptionResponseMarshaller() {",
          "96:                     @Override",
          "97:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "98:                         DataOutput dataOut) throws IOException {",
          "99:                         dataOut.writeBoolean(o != null);",
          "100:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "101:                         looseMarshalString(o.getMessage(), dataOut);",
          "102:                     }",
          "103:                 };",
          "104:             case 7:",
          "105:                 return new org.apache.activemq.openwire.v7.ExceptionResponseMarshaller() {",
          "106:                     @Override",
          "107:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "108:                         DataOutput dataOut) throws IOException {",
          "109:                         dataOut.writeBoolean(o != null);",
          "110:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "111:                         looseMarshalString(o.getMessage(), dataOut);",
          "112:                     }",
          "113:                 };",
          "114:             case 8:",
          "115:                 return new org.apache.activemq.openwire.v8.ExceptionResponseMarshaller() {",
          "116:                     @Override",
          "117:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "118:                         DataOutput dataOut) throws IOException {",
          "119:                         dataOut.writeBoolean(o != null);",
          "120:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "121:                         looseMarshalString(o.getMessage(), dataOut);",
          "122:                     }",
          "123:                 };",
          "124:             default:",
          "125:                 throw new IllegalArgumentException(\"Unknown openwire version of \" + version);",
          "126:         }",
          "127:     }",
          "129: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0ccdd31544ada83185554c87c7aa141064020f0",
      "candidate_info": {
        "commit_hash": "d0ccdd31544ada83185554c87c7aa141064020f0",
        "repo": "apache/activemq",
        "commit_url": "https://github.com/apache/activemq/commit/d0ccdd31544ada83185554c87c7aa141064020f0",
        "files": [
          "activemq-client/pom.xml",
          "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
          "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
          "activemq-openwire-legacy/pom.xml",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java",
          "pom.xml"
        ],
        "message": "AMQ-9370 - Openwire marshaller should validate Throwable class type\n\n(cherry picked from commit 3eaf3107f4fb9a3ce7ab45c175bfaeac7e866d5b)",
        "before_after_code_files": [
          "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java||activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
          "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
          "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java||activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
          "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java||activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java||activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
            "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java||activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java||activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java"
          ],
          "candidate": [
            "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java||activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
            "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
            "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java||activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
            "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java||activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java"
          ]
        }
      },
      "candidate_diff": {
        "activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java||activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java -> activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.activemq.openwire;",
          "19: public class OpenWireUtil {",
          "27:     public static void validateIsThrowable(Class<?> clazz) {",
          "28:         if (!Throwable.class.isAssignableFrom(clazz)) {",
          "29:             throw new IllegalArgumentException(\"Class \" + clazz + \" is not assignable to Throwable\");",
          "30:         }",
          "31:     }",
          "32: }",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v1/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229:     private Throwable createThrowable(String className, String message) {",
          "230:         try {",
          "231:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "232:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "233:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "234:         } catch (Throwable e) {",
          "235:             return new Throwable(className + \": \" + message);",
          "236:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:             OpenWireUtil.validateIsThrowable(clazz);",
          "236:         } catch (IllegalArgumentException e) {",
          "237:             return e;",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v10/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v11/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     private Throwable createThrowable(String className, String message) {",
          "228:         try {",
          "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "232:         } catch (Throwable e) {",
          "233:             return new Throwable(className + \": \" + message);",
          "234:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:             OpenWireUtil.validateIsThrowable(clazz);",
          "234:         } catch (IllegalArgumentException e) {",
          "235:             return e;",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v12/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     private Throwable createThrowable(String className, String message) {",
          "228:         try {",
          "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "232:         } catch (Throwable e) {",
          "233:             return new Throwable(className + \": \" + message);",
          "234:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:             OpenWireUtil.validateIsThrowable(clazz);",
          "234:         } catch (IllegalArgumentException e) {",
          "235:             return e;",
          "",
          "---------------"
        ],
        "activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java||activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java": [
          "File: activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java -> activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     private Throwable createThrowable(String className, String message) {",
          "228:         try {",
          "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "232:         } catch (Throwable e) {",
          "233:             return new Throwable(className + \": \" + message);",
          "234:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:             OpenWireUtil.validateIsThrowable(clazz);",
          "234:         } catch (IllegalArgumentException e) {",
          "235:             return e;",
          "",
          "---------------"
        ],
        "activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java||activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java": [
          "File: activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java -> activemq-client/src/test/java/org/apache/activemq/openwire/OpenWireValidationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.activemq.openwire;",
          "19: import static org.junit.Assert.assertTrue;",
          "21: import java.io.DataOutput;",
          "22: import java.io.IOException;",
          "23: import java.lang.reflect.Method;",
          "24: import java.util.ArrayList;",
          "25: import java.util.Collection;",
          "26: import java.util.List;",
          "27: import org.apache.activemq.command.CommandTypes;",
          "28: import org.apache.activemq.command.ExceptionResponse;",
          "29: import org.apache.activemq.util.ByteSequence;",
          "30: import org.junit.Test;",
          "31: import org.junit.runner.RunWith;",
          "32: import org.junit.runners.Parameterized;",
          "33: import org.junit.runners.Parameterized.Parameters;",
          "39: @RunWith(Parameterized.class)",
          "40: public class OpenWireValidationTest {",
          "42:     protected final int version;",
          "44:     @Parameters(name = \"version={0}\")",
          "45:     public static Collection<Object[]> data() {",
          "46:         List<Integer> versions = List.of(1, 9, 10, 11, 12);",
          "47:         List<Object[]> versionObjs = new ArrayList<>();",
          "48:         for (int i : versions) {",
          "49:             versionObjs.add(new Object[]{i});",
          "50:         }",
          "55:         assertTrue(\"List of Openwire versions does not include latest version\",",
          "56:             versions.contains((int)CommandTypes.PROTOCOL_VERSION));",
          "58:         return versionObjs;",
          "59:     }",
          "61:     public OpenWireValidationTest(int version) {",
          "62:         this.version = version;",
          "63:     }",
          "65:     @Test",
          "66:     public void testOpenwireThrowableValidation() throws Exception {",
          "70:         OpenWireFormat format = new OpenWireFormat();",
          "74:         Class<?> marshallerFactory = getMarshallerFactory();",
          "75:         Method createMarshallerMap = marshallerFactory.getMethod(\"createMarshallerMap\", OpenWireFormat.class);",
          "76:         DataStreamMarshaller[] map = (DataStreamMarshaller[]) createMarshallerMap.invoke(marshallerFactory, format);",
          "77:         map[ExceptionResponse.DATA_STRUCTURE_TYPE] = getExceptionMarshaller();",
          "79:         format.setVersion(version);",
          "83:         ExceptionResponse r = new ExceptionResponse();",
          "84:         r.setException(new Exception());",
          "85:         ByteSequence bss = format.marshal(r);",
          "86:         ExceptionResponse response = (ExceptionResponse) format.unmarshal(bss);",
          "88:         assertTrue(response.getException() instanceof IllegalArgumentException);",
          "89:         assertTrue(response.getException().getMessage().contains(\"is not assignable to Throwable\"));",
          "90:     }",
          "92:     static class NotAThrowable {",
          "93:         private String message;",
          "95:         public NotAThrowable(String message) {",
          "96:             this.message = message;",
          "97:         }",
          "99:         public NotAThrowable() {",
          "100:         }",
          "101:     }",
          "103:     private Class<?> getMarshallerFactory() throws ClassNotFoundException {",
          "104:         return Class.forName(\"org.apache.activemq.openwire.v\" + version + \".MarshallerFactory\");",
          "105:     }",
          "109:     protected DataStreamMarshaller getExceptionMarshaller() {",
          "110:         switch (version) {",
          "111:             case 12:",
          "112:                 return new org.apache.activemq.openwire.v12.ExceptionResponseMarshaller() {",
          "113:                     @Override",
          "114:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "115:                         DataOutput dataOut) throws IOException {",
          "116:                         dataOut.writeBoolean(o != null);",
          "117:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "118:                         looseMarshalString(o.getMessage(), dataOut);",
          "119:                     }",
          "120:                 };",
          "121:             case 11:",
          "122:                 return new org.apache.activemq.openwire.v11.ExceptionResponseMarshaller() {",
          "123:                     @Override",
          "124:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "125:                         DataOutput dataOut) throws IOException {",
          "126:                         dataOut.writeBoolean(o != null);",
          "127:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "128:                         looseMarshalString(o.getMessage(), dataOut);",
          "129:                     }",
          "130:                 };",
          "131:             case 10:",
          "132:                 return new org.apache.activemq.openwire.v10.ExceptionResponseMarshaller() {",
          "133:                     @Override",
          "134:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "135:                         DataOutput dataOut) throws IOException {",
          "136:                         dataOut.writeBoolean(o != null);",
          "137:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "138:                         looseMarshalString(o.getMessage(), dataOut);",
          "139:                     }",
          "140:                 };",
          "141:             case 9:",
          "142:                 return new org.apache.activemq.openwire.v9.ExceptionResponseMarshaller() {",
          "143:                     @Override",
          "144:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "145:                         DataOutput dataOut) throws IOException {",
          "146:                         dataOut.writeBoolean(o != null);",
          "147:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "148:                         looseMarshalString(o.getMessage(), dataOut);",
          "149:                     }",
          "150:                 };",
          "151:             case 1:",
          "152:                 return new org.apache.activemq.openwire.v1.ExceptionResponseMarshaller() {",
          "153:                     @Override",
          "154:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "155:                         DataOutput dataOut) throws IOException {",
          "156:                         dataOut.writeBoolean(o != null);",
          "157:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "158:                         looseMarshalString(o.getMessage(), dataOut);",
          "159:                     }",
          "160:                 };",
          "161:             default:",
          "162:                 throw new IllegalArgumentException(\"Unknown openwire version of \" + version);",
          "163:         }",
          "164:     }",
          "166: }",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v2/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v3/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v5/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v6/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.activemq.openwire.BooleanStream;",
          "26: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "27: import org.apache.activemq.openwire.OpenWireFormat;",
          "28: import org.apache.activemq.util.ByteSequence;",
          "30: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     private Throwable createThrowable(String className, String message) {",
          "229:         try {",
          "230:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "231:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "232:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "233:         } catch (Throwable e) {",
          "234:             return new Throwable(className + \": \" + message);",
          "235:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:             OpenWireUtil.validateIsThrowable(clazz);",
          "235:         } catch (IllegalArgumentException e) {",
          "236:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v7/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     private Throwable createThrowable(String className, String message) {",
          "228:         try {",
          "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "232:         } catch (Throwable e) {",
          "233:             return new Throwable(className + \": \" + message);",
          "234:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:             OpenWireUtil.validateIsThrowable(clazz);",
          "234:         } catch (IllegalArgumentException e) {",
          "235:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java||activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java": [
          "File: activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java -> activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v8/BaseDataStreamMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.activemq.openwire.BooleanStream;",
          "25: import org.apache.activemq.openwire.DataStreamMarshaller;",
          "26: import org.apache.activemq.openwire.OpenWireFormat;",
          "27: import org.apache.activemq.util.ByteSequence;",
          "29: public abstract class BaseDataStreamMarshaller implements DataStreamMarshaller {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.activemq.openwire.OpenWireUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     private Throwable createThrowable(String className, String message) {",
          "228:         try {",
          "229:             Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());",
          "230:             Constructor constructor = clazz.getConstructor(new Class[] {String.class});",
          "231:             return (Throwable)constructor.newInstance(new Object[] {message});",
          "232:         } catch (Throwable e) {",
          "233:             return new Throwable(className + \": \" + message);",
          "234:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:             OpenWireUtil.validateIsThrowable(clazz);",
          "234:         } catch (IllegalArgumentException e) {",
          "235:             return e;",
          "",
          "---------------"
        ],
        "activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java||activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java": [
          "File: activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java -> activemq-openwire-legacy/src/test/java/org/apache/activemq/openwire/OpenWireLegacyValidationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.activemq.openwire;",
          "19: import java.io.DataOutput;",
          "20: import java.io.IOException;",
          "21: import java.util.ArrayList;",
          "22: import java.util.Collection;",
          "23: import java.util.List;",
          "24: import org.junit.runner.RunWith;",
          "25: import org.junit.runners.Parameterized;",
          "26: import org.junit.runners.Parameterized.Parameters;",
          "32: @RunWith(Parameterized.class)",
          "33: public class OpenWireLegacyValidationTest extends OpenWireValidationTest {",
          "37:     @Parameters(name = \"version={0}\")",
          "38:     public static Collection<Object[]> data() {",
          "39:         List<Object[]> versions = new ArrayList<>();",
          "40:         for (int i = 2; i <= 8; i++) {",
          "41:             versions.add(new Object[]{i});",
          "42:         }",
          "43:         return versions;",
          "44:     }",
          "46:     public OpenWireLegacyValidationTest(int version) {",
          "47:         super(version);",
          "48:     }",
          "52:     protected DataStreamMarshaller getExceptionMarshaller() {",
          "53:         switch (version) {",
          "54:             case 2:",
          "55:                 return new org.apache.activemq.openwire.v2.ExceptionResponseMarshaller() {",
          "56:                     @Override",
          "57:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "58:                         DataOutput dataOut) throws IOException {",
          "59:                         dataOut.writeBoolean(o != null);",
          "60:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "61:                         looseMarshalString(o.getMessage(), dataOut);",
          "62:                     }",
          "63:                 };",
          "64:             case 3:",
          "65:                 return new org.apache.activemq.openwire.v3.ExceptionResponseMarshaller() {",
          "66:                     @Override",
          "67:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "68:                         DataOutput dataOut) throws IOException {",
          "69:                         dataOut.writeBoolean(o != null);",
          "70:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "71:                         looseMarshalString(o.getMessage(), dataOut);",
          "72:                     }",
          "73:                 };",
          "74:             case 4:",
          "75:                 return new org.apache.activemq.openwire.v4.ExceptionResponseMarshaller() {",
          "76:                     @Override",
          "77:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "78:                         DataOutput dataOut) throws IOException {",
          "79:                         dataOut.writeBoolean(o != null);",
          "80:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "81:                         looseMarshalString(o.getMessage(), dataOut);",
          "82:                     }",
          "83:                 };",
          "84:             case 5:",
          "85:                 return new org.apache.activemq.openwire.v5.ExceptionResponseMarshaller() {",
          "86:                     @Override",
          "87:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "88:                         DataOutput dataOut) throws IOException {",
          "89:                         dataOut.writeBoolean(o != null);",
          "90:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "91:                         looseMarshalString(o.getMessage(), dataOut);",
          "92:                     }",
          "93:                 };",
          "94:             case 6:",
          "95:                 return new org.apache.activemq.openwire.v6.ExceptionResponseMarshaller() {",
          "96:                     @Override",
          "97:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "98:                         DataOutput dataOut) throws IOException {",
          "99:                         dataOut.writeBoolean(o != null);",
          "100:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "101:                         looseMarshalString(o.getMessage(), dataOut);",
          "102:                     }",
          "103:                 };",
          "104:             case 7:",
          "105:                 return new org.apache.activemq.openwire.v7.ExceptionResponseMarshaller() {",
          "106:                     @Override",
          "107:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "108:                         DataOutput dataOut) throws IOException {",
          "109:                         dataOut.writeBoolean(o != null);",
          "110:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "111:                         looseMarshalString(o.getMessage(), dataOut);",
          "112:                     }",
          "113:                 };",
          "114:             case 8:",
          "115:                 return new org.apache.activemq.openwire.v8.ExceptionResponseMarshaller() {",
          "116:                     @Override",
          "117:                     protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o,",
          "118:                         DataOutput dataOut) throws IOException {",
          "119:                         dataOut.writeBoolean(o != null);",
          "120:                         looseMarshalString(NotAThrowable.class.getName(), dataOut);",
          "121:                         looseMarshalString(o.getMessage(), dataOut);",
          "122:                     }",
          "123:                 };",
          "124:             default:",
          "125:                 throw new IllegalArgumentException(\"Unknown openwire version of \" + version);",
          "126:         }",
          "127:     }",
          "129: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}