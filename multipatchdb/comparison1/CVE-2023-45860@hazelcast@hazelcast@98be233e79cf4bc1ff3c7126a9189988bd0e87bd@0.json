{
  "cve_id": "CVE-2023-45860",
  "cve_desc": "In Hazelcast Platform through 5.3.4, a security issue exists within the SQL mapping for the CSV File Source connector. This issue arises from inadequate permission checking, which could enable unauthorized clients to access data from files stored on a member's filesystem.",
  "repo": "hazelcast/hazelcast",
  "patch_hash": "98be233e79cf4bc1ff3c7126a9189988bd0e87bd",
  "patch_info": {
    "commit_hash": "98be233e79cf4bc1ff3c7126a9189988bd0e87bd",
    "repo": "hazelcast/hazelcast",
    "commit_url": "https://github.com/hazelcast/hazelcast/commit/98be233e79cf4bc1ff3c7126a9189988bd0e87bd",
    "files": [
      "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java",
      "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java",
      "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java",
      "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java",
      "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java",
      "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java",
      "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java",
      "hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java",
      "hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java"
    ],
    "message": "Improve permission checks in File connector [HZ-2991] (#25348)\n\n`SqlConnector#resolveAndValidateFields` may try to resolve field names\nfrom metadata and a sample. This is not covered by any permission check.\n\nAdded `SqlConnector#permissionsForResolve` that returns permissions\nrequired to run the `resolveAndValidateFields`. Propagation of\nSqlSecurityContext was required for the actuall permission check.\n\nAdded permission to ProcessorSupplier returned by\nReadFilesP.MetaSupplier (previously this allowed constructing unsecured\nDAG):\n\n\nhttps://github.com/hazelcast/hazelcast/blob/ee7e96933748283a01428e306e1b886b06b8a5ba/hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java#L179-L191\n\nEE PR https://github.com/hazelcast/hazelcast-enterprise/pull/6421 (adds\nsecurity tests)",
    "before_after_code_files": [
      "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java",
      "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java",
      "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java",
      "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java",
      "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java",
      "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java",
      "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java",
      "hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java||hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java",
      "hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java||hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java"
    ]
  },
  "patch_diff": {
    "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java": [
      "File: hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java -> hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "182:         logger = nodeEngine.getLogger(getClass());",
      "183:     }",
      "187:         return UpdateSqlResultImpl.createUpdateCountResult(0);",
      "188:     }",
      "",
      "[Removed Lines]",
      "185:     SqlResult execute(CreateMappingPlan plan) {",
      "186:         catalog.createMapping(plan.mapping(), plan.replace(), plan.ifNotExists());",
      "",
      "[Added Lines]",
      "185:     SqlResult execute(CreateMappingPlan plan, SqlSecurityContext ssc) {",
      "186:         catalog.createMapping(plan.mapping(), plan.replace(), plan.ifNotExists(), ssc);",
      "",
      "---------------"
    ],
    "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java": [
      "File: hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java -> hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "152:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
      "153:             SqlPlanImpl.ensureNoArguments(\"CREATE MAPPING\", arguments);",
      "154:             SqlPlanImpl.ensureNoTimeout(\"CREATE MAPPING\", timeout);",
      "156:         }",
      "157:     }",
      "",
      "[Removed Lines]",
      "155:             return planExecutor.execute(this);",
      "",
      "[Added Lines]",
      "155:             return planExecutor.execute(this, ssc);",
      "",
      "---------------"
    ],
    "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java": [
      "File: hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java -> hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "39: import javax.annotation.Nullable;",
      "40: import java.io.Serializable;",
      "41: import java.lang.reflect.Method;",
      "42: import java.util.Arrays;",
      "43: import java.util.HashSet;",
      "44: import java.util.List;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "42: import java.security.Permission;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47: import java.util.Set;",
      "48: import java.util.function.Consumer;",
      "50: import static java.util.Collections.emptyMap;",
      "51: import static java.util.Objects.requireNonNull;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "51: import static java.util.Collections.emptyList;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "258:             @Nonnull List<MappingField> userFields",
      "259:     );",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "274:     @Nonnull",
      "275:     default List<Permission> permissionsForResolve(SqlExternalResource resource, NodeEngine nodeEngine) {",
      "276:         return emptyList();",
      "277:     }",
      "",
      "---------------"
    ],
    "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java": [
      "File: hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java -> hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: import javax.annotation.Nonnull;",
      "34: import javax.annotation.Nullable;",
      "35: import java.util.List;",
      "36: import java.util.Map;",
      "37: import java.util.Set;",
      "39: import static com.hazelcast.jet.core.Edge.between;",
      "41: public class FileSqlConnector implements SqlConnector {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35: import java.security.Permission;",
      "41: import static com.hazelcast.security.permission.ActionConstants.ACTION_READ;",
      "42: import static com.hazelcast.security.permission.ConnectorPermission.file;",
      "43: import static java.util.Collections.singletonList;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "85:         return METADATA_RESOLVERS.resolveAndValidateFields(userFields, options);",
      "86:     }",
      "88:     @Nonnull",
      "89:     @Override",
      "90:     public Table createTable(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "92:     @Nonnull",
      "93:     @Override",
      "94:     public List<Permission> permissionsForResolve(SqlExternalResource resource, NodeEngine nodeEngine) {",
      "95:         return singletonList(file(resource.options().get(OPTION_PATH), ACTION_READ));",
      "96:     }",
      "",
      "---------------"
    ],
    "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java": [
      "File: hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java -> hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: import com.hazelcast.sql.impl.schema.dataconnection.DataConnectionCatalogEntry;",
      "42: import com.hazelcast.sql.impl.schema.type.Type;",
      "43: import com.hazelcast.sql.impl.schema.view.View;",
      "45: import javax.annotation.Nonnull;",
      "46: import java.util.ArrayList;",
      "47: import java.util.Collection;",
      "48: import java.util.LinkedHashMap;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44: import com.hazelcast.sql.impl.security.SqlSecurityContext;",
      "47: import java.security.Permission;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "134:         String name = resolved.name();",
      "135:         if (ifNotExists) {",
      "",
      "[Removed Lines]",
      "131:     public void createMapping(Mapping mapping, boolean replace, boolean ifNotExists) {",
      "132:         Mapping resolved = resolveMapping(mapping);",
      "",
      "[Added Lines]",
      "133:     public void createMapping(Mapping mapping, boolean replace, boolean ifNotExists, SqlSecurityContext securityContext) {",
      "134:         Mapping resolved = resolveMapping(mapping, securityContext);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "142:         }",
      "143:     }",
      "146:         Map<String, String> options = mapping.options();",
      "147:         String type = mapping.connectorType();",
      "148:         String dataConnection = mapping.dataConnection();",
      "",
      "[Removed Lines]",
      "145:     private Mapping resolveMapping(Mapping mapping) {",
      "",
      "[Added Lines]",
      "147:     private Mapping resolveMapping(Mapping mapping, SqlSecurityContext securityContext) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "158:                 ? connector.defaultObjectType()",
      "159:                 : mapping.objectType();",
      "160:         checkNotNull(objectType, \"objectType cannot be null\");",
      "161:         resolvedFields = connector.resolveAndValidateFields(",
      "162:                 nodeEngine,",
      "169:                 mapping.fields()",
      "170:         );",
      "",
      "[Removed Lines]",
      "163:                 new SqlExternalResource(",
      "164:                         mapping.externalName(),",
      "165:                         mapping.dataConnection(),",
      "166:                         connector.typeName(),",
      "167:                         objectType,",
      "168:                         options),",
      "",
      "[Added Lines]",
      "164:         SqlExternalResource externalResource = new SqlExternalResource(",
      "165:                 mapping.externalName(),",
      "166:                 mapping.dataConnection(),",
      "167:                 connector.typeName(),",
      "168:                 objectType,",
      "169:                 options",
      "170:         );",
      "172:         List<Permission> permissions = connector.permissionsForResolve(externalResource, nodeEngine);",
      "173:         for (Permission permission : permissions) {",
      "174:             securityContext.checkPermission(permission);",
      "175:         }",
      "179:                 externalResource,",
      "",
      "---------------"
    ],
    "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java": [
      "File: hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java -> hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "112:         CreateMappingPlan plan = new CreateMappingPlan(planKey(), mapping, replace, ifNotExists, planExecutor);",
      "118:         assertThat(result.updateCount()).isEqualTo(0);",
      "120:     }",
      "122:     @Test",
      "",
      "[Removed Lines]",
      "115:         SqlResult result = planExecutor.execute(plan);",
      "119:         verify(catalog).createMapping(mapping, replace, ifNotExists);",
      "",
      "[Added Lines]",
      "115:         SqlResult result = planExecutor.execute(plan, null);",
      "119:         verify(catalog).createMapping(mapping, replace, ifNotExists, null);",
      "",
      "---------------"
    ],
    "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java": [
      "File: hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java -> hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:                 .hasMessageContaining(\"expected test exception\");",
      "123:         verify(relationsStorage, never()).putIfAbsent(anyString(), (Mapping) any());",
      "124:         verify(relationsStorage, never()).put(anyString(), (Mapping) any());",
      "",
      "[Removed Lines]",
      "121:         assertThatThrownBy(() -> catalog.createMapping(mapping, true, true))",
      "",
      "[Added Lines]",
      "121:         assertThatThrownBy(() -> catalog.createMapping(mapping, true, true, null))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "146:                 .isInstanceOf(QueryException.class)",
      "147:                 .hasMessageContaining(\"Mapping or view already exists: name\");",
      "148:         verifyNoInteractions(listener);",
      "",
      "[Removed Lines]",
      "145:         assertThatThrownBy(() -> catalog.createMapping(mapping, false, false))",
      "",
      "[Added Lines]",
      "145:         assertThatThrownBy(() -> catalog.createMapping(mapping, false, false, null))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "164:         given(relationsStorage.putIfAbsent(eq(mapping.name()), isA(Mapping.class))).willReturn(false);",
      "170:         verifyNoInteractions(listener);",
      "",
      "[Removed Lines]",
      "167:         catalog.createMapping(mapping, false, true);",
      "",
      "[Added Lines]",
      "167:         catalog.createMapping(mapping, false, true, null);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "185:                 .willReturn(singletonList(new MappingField(\"field_name\", INT)));",
      "191:         verify(relationsStorage).put(eq(mapping.name()), isA(Mapping.class));",
      "",
      "[Removed Lines]",
      "188:         catalog.createMapping(mapping, true, false);",
      "",
      "[Added Lines]",
      "188:         catalog.createMapping(mapping, true, false, null);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "213:         given(connector.defaultObjectType()).willReturn(\"MyDummyType\");",
      "219:         verify(relationsStorage).put(eq(mapping.name()), isA(Mapping.class));",
      "",
      "[Removed Lines]",
      "216:         catalog.createMapping(mapping, true, false);",
      "",
      "[Added Lines]",
      "216:         catalog.createMapping(mapping, true, false, null);",
      "",
      "---------------"
    ],
    "hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java||hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java": [
      "File: hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java -> hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "28: import com.hazelcast.jet.pipeline.file.impl.FileTraverser;",
      "29: import com.hazelcast.logging.ILogger;",
      "30: import com.hazelcast.logging.Logger;",
      "31: import com.hazelcast.security.permission.ConnectorPermission;",
      "33: import javax.annotation.Nonnull;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "31: import com.hazelcast.security.impl.function.SecuredFunctions;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:     private LocalFileTraverser<T> traverser;",
      "78:             @Nonnull String directory,",
      "79:             @Nonnull String glob,",
      "80:             boolean sharedFileSystem,",
      "",
      "[Removed Lines]",
      "77:     private ReadFilesP(",
      "",
      "[Added Lines]",
      "78:     public ReadFilesP(",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "174:         @Nonnull",
      "175:         @Override",
      "176:         public Function<? super Address, ? extends ProcessorSupplier> get(@Nonnull List<Address> addresses) {",
      "179:         }",
      "181:         @Override",
      "",
      "[Removed Lines]",
      "177:             return address -> ProcessorSupplier.of(() -> new ReadFilesP<>(directory, glob, sharedFileSystem,",
      "178:                     ignoreFileNotFound, readFileFn));",
      "",
      "[Added Lines]",
      "178:             return address -> ProcessorSupplier.of(SecuredFunctions.readFilesProcessorFn(",
      "179:                     directory, glob, sharedFileSystem, ignoreFileNotFound, readFileFn",
      "180:             ));",
      "",
      "---------------"
    ],
    "hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java||hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java": [
      "File: hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java -> hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import com.hazelcast.jet.core.ProcessorSupplier;",
      "28: import com.hazelcast.jet.core.ProcessorSupplier.Context;",
      "29: import com.hazelcast.jet.function.ToResultSetFunction;",
      "30: import com.hazelcast.jet.impl.connector.ReadIListP;",
      "31: import com.hazelcast.jet.impl.connector.ReadJdbcP;",
      "32: import com.hazelcast.jet.impl.connector.StreamFilesP;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: import com.hazelcast.jet.impl.connector.ReadFilesP;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "220:         };",
      "221:     }",
      "223:     public static <T> FunctionEx<? super Path, ? extends Stream<T>> jsonReadFileFn(",
      "224:             String directory,",
      "225:             Class<T> type",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "224:     public static <T> SupplierEx<Processor> readFilesProcessorFn(",
      "225:             String directory,",
      "226:             String glob,",
      "227:             boolean sharedFileSystem,",
      "228:             boolean ignoreFileNotFound,",
      "229:             FunctionEx<? super Path, ? extends Stream<T>> readFileFn) {",
      "231:         return new SupplierEx<>() {",
      "232:             @Override",
      "233:             public Processor getEx() {",
      "234:                 return new ReadFilesP<>(directory, glob, sharedFileSystem, ignoreFileNotFound, readFileFn);",
      "235:             }",
      "237:             @Override",
      "238:             public List<Permission> permissions() {",
      "239:                 return singletonList(ConnectorPermission.file(directory, ACTION_READ));",
      "240:             }",
      "241:         };",
      "242:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "da9feb20dfea86ddeadae65ce06a640683c64731",
      "candidate_info": {
        "commit_hash": "da9feb20dfea86ddeadae65ce06a640683c64731",
        "repo": "hazelcast/hazelcast",
        "commit_url": "https://github.com/hazelcast/hazelcast/commit/da9feb20dfea86ddeadae65ce06a640683c64731",
        "files": [
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java",
          "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java",
          "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/optimizer/SqlPlan.java",
          "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java",
          "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/cache/PlanCacheTestSupport.java",
          "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java",
          "hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java",
          "hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java"
        ],
        "message": "Improve permission checks in File connector [HZ-2991] [5.3.z] (#25603)\n\nBackport of #25348 to 5.3.z\n\nEE PR https://github.com/hazelcast/hazelcast-enterprise/pull/6621\n\n---------\n\nCo-authored-by: Franti\u0161ek Hartman <frant.hartm@gmail.com>",
        "before_after_code_files": [
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java",
          "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java||hazelcast-sql/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java",
          "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/optimizer/SqlPlan.java||hazelcast-sql/src/main/java/com/hazelcast/sql/impl/optimizer/SqlPlan.java",
          "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java",
          "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/cache/PlanCacheTestSupport.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/cache/PlanCacheTestSupport.java",
          "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java",
          "hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java||hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java",
          "hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java||hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java",
            "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java",
            "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java",
            "hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java||hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java",
            "hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java||hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java"
          ],
          "candidate": [
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java",
            "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java",
            "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java",
            "hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java||hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java",
            "hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java||hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java"
          ]
        }
      },
      "candidate_diff": {
        "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java": [
          "File: hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java -> hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "93: import com.hazelcast.sql.impl.schema.type.Type;",
          "94: import com.hazelcast.sql.impl.schema.type.TypeKind;",
          "95: import com.hazelcast.sql.impl.schema.view.View;",
          "96: import com.hazelcast.sql.impl.state.QueryResultRegistry;",
          "97: import com.hazelcast.sql.impl.type.QueryDataType;",
          "98: import org.apache.calcite.rel.RelNode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96: import com.hazelcast.sql.impl.security.SqlSecurityContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:         logger = nodeEngine.getLogger(getClass());",
          "172:     }",
          "176:         return UpdateSqlResultImpl.createUpdateCountResult(0);",
          "177:     }",
          "",
          "[Removed Lines]",
          "174:     SqlResult execute(CreateMappingPlan plan) {",
          "175:         catalog.createMapping(plan.mapping(), plan.replace(), plan.ifNotExists());",
          "",
          "[Added Lines]",
          "175:     SqlResult execute(CreateMappingPlan plan, SqlSecurityContext ssc) {",
          "176:         catalog.createMapping(plan.mapping(), plan.replace(), plan.ifNotExists(), ssc);",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java": [
          "File: hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java -> hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:         }",
          "150:         @Override",
          "152:             SqlPlanImpl.ensureNoArguments(\"CREATE MAPPING\", arguments);",
          "153:             SqlPlanImpl.ensureNoTimeout(\"CREATE MAPPING\", timeout);",
          "155:         }",
          "156:     }",
          "",
          "[Removed Lines]",
          "151:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "154:             return planExecutor.execute(this);",
          "",
          "[Added Lines]",
          "151:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "154:             return planExecutor.execute(this, ssc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "197:         }",
          "199:         @Override",
          "201:             SqlPlanImpl.ensureNoArguments(\"DROP MAPPING\", arguments);",
          "202:             SqlPlanImpl.ensureNoTimeout(\"DROP MAPPING\", timeout);",
          "203:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "200:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "200:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "278:         }",
          "280:         @Override",
          "282:             SqlPlanImpl.ensureNoArguments(\"CREATE DATA CONNECTION\", arguments);",
          "283:             SqlPlanImpl.ensureNoTimeout(\"CREATE DATA CONNECTION\", timeout);",
          "284:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "281:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "281:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "327:         }",
          "329:         @Override",
          "331:             SqlPlanImpl.ensureNoTimeout(\"DROP DATA CONNECTION\", timeout);",
          "332:             return planExecutor.execute(this);",
          "333:         }",
          "",
          "[Removed Lines]",
          "330:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "330:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "403:         }",
          "405:         @Override",
          "407:             SqlPlanImpl.ensureNoArguments(\"CREATE INDEX\", arguments);",
          "408:             SqlPlanImpl.ensureNoTimeout(\"CREATE INDEX\", timeout);",
          "409:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "406:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "406:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "452:         }",
          "454:         @Override",
          "456:             throw QueryException.error(\"DROP INDEX is not supported.\");",
          "457:         }",
          "458:     }",
          "",
          "[Removed Lines]",
          "455:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "455:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "530:         }",
          "532:         @Override",
          "534:             SqlPlanImpl.ensureNoTimeout(\"CREATE JOB\", timeout);",
          "535:             return planExecutor.execute(this, arguments);",
          "536:         }",
          "",
          "[Removed Lines]",
          "533:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "533:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "580:         }",
          "582:         @Override",
          "584:             SqlPlanImpl.ensureNoArguments(\"ALTER JOB\", arguments);",
          "585:             SqlPlanImpl.ensureNoTimeout(\"ALTER JOB\", timeout);",
          "586:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "583:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "583:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "631:         }",
          "633:         @Override",
          "635:             SqlPlanImpl.ensureNoArguments(\"DROP JOB\", arguments);",
          "636:             SqlPlanImpl.ensureNoTimeout(\"DROP JOB\", timeout);",
          "637:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "634:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "634:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "675:         }",
          "677:         @Override",
          "679:             SqlPlanImpl.ensureNoArguments(\"CREATE SNAPSHOT\", arguments);",
          "680:             SqlPlanImpl.ensureNoTimeout(\"CREATE SNAPSHOT\", timeout);",
          "681:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "678:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "678:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "719:         }",
          "721:         @Override",
          "723:             SqlPlanImpl.ensureNoArguments(\"DROP SNAPSHOT\", arguments);",
          "724:             SqlPlanImpl.ensureNoTimeout(\"DROP SNAPSHOT\", timeout);",
          "725:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "722:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "722:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "789:         }",
          "791:         @Override",
          "793:             SqlPlanImpl.ensureNoArguments(\"CREATE VIEW\", arguments);",
          "794:             SqlPlanImpl.ensureNoTimeout(\"CREATE VIEW\", timeout);",
          "795:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "792:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "792:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "838:         }",
          "840:         @Override",
          "842:             SqlPlanImpl.ensureNoArguments(\"DROP VIEW\", arguments);",
          "843:             SqlPlanImpl.ensureNoTimeout(\"DROP VIEW\", timeout);",
          "844:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "841:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "841:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "911:         }",
          "913:         @Override",
          "915:             SqlPlanImpl.ensureNoArguments(\"CREATE TYPE\", arguments);",
          "916:             SqlPlanImpl.ensureNoTimeout(\"CREATE TYPE\", timeout);",
          "917:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "914:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "914:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "960:         }",
          "962:         @Override",
          "964:             SqlPlanImpl.ensureNoArguments(\"DROP TYPE\", arguments);",
          "965:             SqlPlanImpl.ensureNoTimeout(\"DROP TYPE\", timeout);",
          "966:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "963:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "963:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1004:         }",
          "1006:         @Override",
          "1008:             SqlPlanImpl.ensureNoArguments(\"SHOW \" + showTarget, arguments);",
          "1009:             SqlPlanImpl.ensureNoTimeout(\"SHOW \" + showTarget, timeout);",
          "1010:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "1007:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1007:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1040:         }",
          "1042:         @Override",
          "1044:             SqlPlanImpl.ensureNoTimeout(\"EXPLAIN\", timeout);",
          "1045:             return planExecutor.execute(this);",
          "1046:         }",
          "",
          "[Removed Lines]",
          "1043:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1043:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1121:         }",
          "1123:         @Override",
          "1125:             return planExecutor.execute(this, queryId, arguments, timeout);",
          "1126:         }",
          "1127:     }",
          "",
          "[Removed Lines]",
          "1124:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1124:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1201:         }",
          "1203:         @Override",
          "1205:             return planExecutor.execute(this, queryId, arguments, timeout);",
          "1206:         }",
          "1207:     }",
          "",
          "[Removed Lines]",
          "1204:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1204:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1289:         }",
          "1291:         @Override",
          "1293:             return planExecutor.execute(this, queryId, arguments, timeout);",
          "1294:         }",
          "1295:     }",
          "",
          "[Removed Lines]",
          "1292:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1292:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1363:         }",
          "1365:         @Override",
          "1367:             return planExecutor.execute(this, arguments, timeout);",
          "1368:         }",
          "1369:     }",
          "",
          "[Removed Lines]",
          "1366:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1366:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1429:         }",
          "1431:         @Override",
          "1433:             return planExecutor.execute(this, arguments, timeout);",
          "1434:         }",
          "1435:     }",
          "",
          "[Removed Lines]",
          "1432:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1432:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1511:         }",
          "1513:         @Override",
          "1515:             return planExecutor.execute(this, arguments, timeout);",
          "1516:         }",
          "1517:     }",
          "",
          "[Removed Lines]",
          "1514:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1514:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1586:         }",
          "1588:         @Override",
          "1590:             return planExecutor.execute(this, arguments, timeout);",
          "1591:         }",
          "1592:     }",
          "",
          "[Removed Lines]",
          "1589:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1589:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java": [
          "File: hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java -> hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: import javax.annotation.Nullable;",
          "39: import java.io.Serializable;",
          "40: import java.lang.reflect.Method;",
          "41: import java.util.Arrays;",
          "42: import java.util.List;",
          "43: import java.util.Map;",
          "44: import java.util.Objects;",
          "45: import java.util.function.Consumer;",
          "47: import static java.util.Collections.emptyMap;",
          "48: import static java.util.Objects.requireNonNull;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: import java.security.Permission;",
          "48: import static java.util.Collections.emptyList;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231:             @Nonnull List<MappingField> userFields",
          "232:     );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:     @Nonnull",
          "248:     default List<Permission> permissionsForResolve(SqlExternalResource resource, NodeEngine nodeEngine) {",
          "249:         return emptyList();",
          "250:     }",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java": [
          "File: hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java -> hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import javax.annotation.Nonnull;",
          "33: import javax.annotation.Nullable;",
          "34: import java.util.List;",
          "35: import java.util.Map;",
          "37: import static com.hazelcast.jet.core.Edge.between;",
          "39: public class FileSqlConnector implements SqlConnector {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import java.security.Permission;",
          "39: import static com.hazelcast.security.permission.ActionConstants.ACTION_READ;",
          "40: import static com.hazelcast.security.permission.ConnectorPermission.file;",
          "41: import static java.util.Collections.singletonList;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:         return METADATA_RESOLVERS.resolveAndValidateFields(userFields, options);",
          "84:     }",
          "86:     @Nonnull",
          "87:     @Override",
          "88:     public Table createTable(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:     @Nonnull",
          "91:     @Override",
          "92:     public List<Permission> permissionsForResolve(SqlExternalResource resource, NodeEngine nodeEngine) {",
          "93:         return singletonList(file(resource.options().get(OPTION_PATH), ACTION_READ));",
          "94:     }",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java": [
          "File: hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java -> hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: import com.hazelcast.sql.impl.schema.dataconnection.DataConnectionCatalogEntry;",
          "42: import com.hazelcast.sql.impl.schema.type.Type;",
          "43: import com.hazelcast.sql.impl.schema.view.View;",
          "45: import javax.annotation.Nonnull;",
          "46: import java.util.ArrayList;",
          "47: import java.util.Collection;",
          "48: import java.util.LinkedHashMap;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: import com.hazelcast.sql.impl.security.SqlSecurityContext;",
          "47: import java.security.Permission;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:         String name = resolved.name();",
          "134:         if (ifNotExists) {",
          "",
          "[Removed Lines]",
          "130:     public void createMapping(Mapping mapping, boolean replace, boolean ifNotExists) {",
          "131:         Mapping resolved = resolveMapping(mapping);",
          "",
          "[Added Lines]",
          "132:     public void createMapping(Mapping mapping, boolean replace, boolean ifNotExists, SqlSecurityContext securityContext) {",
          "133:         Mapping resolved = resolveMapping(mapping, securityContext);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141:         }",
          "142:     }",
          "145:         Map<String, String> options = mapping.options();",
          "146:         String type = mapping.connectorType();",
          "147:         String dataConnection = mapping.dataConnection();",
          "",
          "[Removed Lines]",
          "144:     private Mapping resolveMapping(Mapping mapping) {",
          "",
          "[Added Lines]",
          "146:     private Mapping resolveMapping(Mapping mapping, SqlSecurityContext securityContext) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "157:                 ? connector.defaultObjectType()",
          "158:                 : mapping.objectType();",
          "159:         checkNotNull(objectType, \"objectType cannot be null\");",
          "160:         resolvedFields = connector.resolveAndValidateFields(",
          "161:                 nodeEngine,",
          "168:                 mapping.fields()",
          "169:         );",
          "",
          "[Removed Lines]",
          "162:                 new SqlExternalResource(",
          "163:                         mapping.externalName(),",
          "164:                         mapping.dataConnection(),",
          "165:                         connector.typeName(),",
          "166:                         objectType,",
          "167:                         options),",
          "",
          "[Added Lines]",
          "163:         SqlExternalResource externalResource = new SqlExternalResource(",
          "164:                 mapping.externalName(),",
          "165:                 mapping.dataConnection(),",
          "166:                 connector.typeName(),",
          "167:                 objectType,",
          "168:                 options",
          "169:         );",
          "171:         List<Permission> permissions = connector.permissionsForResolve(externalResource, nodeEngine);",
          "172:         for (Permission permission : permissions) {",
          "173:             securityContext.checkPermission(permission);",
          "174:         }",
          "178:                 externalResource,",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java||hazelcast-sql/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java": [
          "File: hazelcast-sql/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java -> hazelcast-sql/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:         }",
          "267:     }",
          "269:     private SqlPlan prepare(String schema, String sql, List<Object> arguments, SqlExpectedResultType expectedResultType) {",
          "",
          "[Removed Lines]",
          "266:         return plan.execute(queryId, args0, timeout);",
          "",
          "[Added Lines]",
          "266:         return plan.execute(queryId, args0, timeout, securityContext);",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/optimizer/SqlPlan.java||hazelcast-sql/src/main/java/com/hazelcast/sql/impl/optimizer/SqlPlan.java": [
          "File: hazelcast-sql/src/main/java/com/hazelcast/sql/impl/optimizer/SqlPlan.java -> hazelcast-sql/src/main/java/com/hazelcast/sql/impl/optimizer/SqlPlan.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     public abstract boolean producesRows();",
          "75: }",
          "",
          "[Removed Lines]",
          "74:     public abstract SqlResult execute(QueryId queryId, List<Object> arguments, long timeout);",
          "",
          "[Added Lines]",
          "74:     public abstract SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc);",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java": [
          "File: hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java -> hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:         CreateMappingPlan plan = new CreateMappingPlan(planKey(), mapping, replace, ifNotExists, planExecutor);",
          "108:         assertThat(result.updateCount()).isEqualTo(0);",
          "110:     }",
          "112:     @Test",
          "",
          "[Removed Lines]",
          "105:         SqlResult result = planExecutor.execute(plan);",
          "109:         verify(catalog).createMapping(mapping, replace, ifNotExists);",
          "",
          "[Added Lines]",
          "105:         SqlResult result = planExecutor.execute(plan, null);",
          "109:         verify(catalog).createMapping(mapping, replace, ifNotExists, null);",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/cache/PlanCacheTestSupport.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/cache/PlanCacheTestSupport.java": [
          "File: hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/cache/PlanCacheTestSupport.java -> hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/cache/PlanCacheTestSupport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:         }",
          "158:         @Override",
          "160:             throw new UnsupportedOperationException();",
          "161:         }",
          "162:     }",
          "",
          "[Removed Lines]",
          "159:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "159:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java": [
          "File: hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java -> hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:                 .hasMessageContaining(\"expected test exception\");",
          "114:         verify(relationsStorage, never()).putIfAbsent(anyString(), (Mapping) any());",
          "115:         verify(relationsStorage, never()).put(anyString(), (Mapping) any());",
          "",
          "[Removed Lines]",
          "112:         assertThatThrownBy(() -> catalog.createMapping(mapping, true, true))",
          "",
          "[Added Lines]",
          "112:         assertThatThrownBy(() -> catalog.createMapping(mapping, true, true, null))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:                 .isInstanceOf(QueryException.class)",
          "138:                 .hasMessageContaining(\"Mapping or view already exists: name\");",
          "139:         verifyNoInteractions(listener);",
          "",
          "[Removed Lines]",
          "136:         assertThatThrownBy(() -> catalog.createMapping(mapping, false, false))",
          "",
          "[Added Lines]",
          "136:         assertThatThrownBy(() -> catalog.createMapping(mapping, false, false, null))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:         given(relationsStorage.putIfAbsent(eq(mapping.name()), isA(Mapping.class))).willReturn(false);",
          "161:         verifyNoInteractions(listener);",
          "",
          "[Removed Lines]",
          "158:         catalog.createMapping(mapping, false, true);",
          "",
          "[Added Lines]",
          "158:         catalog.createMapping(mapping, false, true, null);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "176:                 .willReturn(singletonList(new MappingField(\"field_name\", INT)));",
          "182:         verify(relationsStorage).put(eq(mapping.name()), isA(Mapping.class));",
          "",
          "[Removed Lines]",
          "179:         catalog.createMapping(mapping, true, false);",
          "",
          "[Added Lines]",
          "179:         catalog.createMapping(mapping, true, false, null);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "204:         given(connector.defaultObjectType()).willReturn(\"MyDummyType\");",
          "210:         verify(relationsStorage).put(eq(mapping.name()), isA(Mapping.class));",
          "",
          "[Removed Lines]",
          "207:         catalog.createMapping(mapping, true, false);",
          "",
          "[Added Lines]",
          "207:         catalog.createMapping(mapping, true, false, null);",
          "",
          "---------------"
        ],
        "hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java||hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java": [
          "File: hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java -> hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import com.hazelcast.jet.pipeline.file.impl.FileTraverser;",
          "29: import com.hazelcast.logging.ILogger;",
          "30: import com.hazelcast.logging.Logger;",
          "31: import com.hazelcast.security.permission.ConnectorPermission;",
          "33: import javax.annotation.Nonnull;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import com.hazelcast.security.impl.function.SecuredFunctions;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     private LocalFileTraverser<T> traverser;",
          "78:             @Nonnull String directory,",
          "79:             @Nonnull String glob,",
          "80:             boolean sharedFileSystem,",
          "",
          "[Removed Lines]",
          "77:     private ReadFilesP(",
          "",
          "[Added Lines]",
          "78:     public ReadFilesP(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174:         @Nonnull",
          "175:         @Override",
          "176:         public Function<? super Address, ? extends ProcessorSupplier> get(@Nonnull List<Address> addresses) {",
          "179:         }",
          "181:         @Override",
          "",
          "[Removed Lines]",
          "177:             return address -> ProcessorSupplier.of(() -> new ReadFilesP<>(directory, glob, sharedFileSystem,",
          "178:                     ignoreFileNotFound, readFileFn));",
          "",
          "[Added Lines]",
          "178:             return address -> ProcessorSupplier.of(SecuredFunctions.readFilesProcessorFn(",
          "179:                     directory, glob, sharedFileSystem, ignoreFileNotFound, readFileFn",
          "180:             ));",
          "",
          "---------------"
        ],
        "hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java||hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java": [
          "File: hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java -> hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import com.hazelcast.jet.core.ProcessorSupplier;",
          "28: import com.hazelcast.jet.core.ProcessorSupplier.Context;",
          "29: import com.hazelcast.jet.function.ToResultSetFunction;",
          "30: import com.hazelcast.jet.impl.connector.ReadIListP;",
          "31: import com.hazelcast.jet.impl.connector.ReadJdbcP;",
          "32: import com.hazelcast.jet.impl.connector.StreamFilesP;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import com.hazelcast.jet.impl.connector.ReadFilesP;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "220:         };",
          "221:     }",
          "223:     public static <T> FunctionEx<? super Path, ? extends Stream<T>> jsonReadFileFn(",
          "224:             String directory,",
          "225:             Class<T> type",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224:     public static <T> SupplierEx<Processor> readFilesProcessorFn(",
          "225:             String directory,",
          "226:             String glob,",
          "227:             boolean sharedFileSystem,",
          "228:             boolean ignoreFileNotFound,",
          "229:             FunctionEx<? super Path, ? extends Stream<T>> readFileFn) {",
          "231:         return new SupplierEx<Processor>() {",
          "232:             @Override",
          "233:             public Processor getEx() {",
          "234:                 return new ReadFilesP<>(directory, glob, sharedFileSystem, ignoreFileNotFound, readFileFn);",
          "235:             }",
          "237:             @Override",
          "238:             public List<Permission> permissions() {",
          "239:                 return singletonList(ConnectorPermission.file(directory, ACTION_READ));",
          "240:             }",
          "241:         };",
          "242:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f229f9a32914bc53a84344f3659aa8aeb36fe73",
      "candidate_info": {
        "commit_hash": "7f229f9a32914bc53a84344f3659aa8aeb36fe73",
        "repo": "hazelcast/hazelcast",
        "commit_url": "https://github.com/hazelcast/hazelcast/commit/7f229f9a32914bc53a84344f3659aa8aeb36fe73",
        "files": [
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java",
          "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java",
          "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/cache/PlanCacheTestSupport.java",
          "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java",
          "hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java",
          "hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java",
          "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java",
          "hazelcast/src/main/java/com/hazelcast/sql/impl/optimizer/SqlPlan.java"
        ],
        "message": "Improve permission checks in File connector [HZ-2991] [5.2.5] (#791)\n\nBackport port of: https://github.com/hazelcast/hazelcast/pull/25674 and\nhttps://github.com/hazelcast/hazelcast-enterprise/pull/6631\n\nOriginal PRs in master:\nhttps://github.com/hazelcast/hazelcast/pull/25348 and\nhttps://github.com/hazelcast/hazelcast-enterprise/pull/6421\n\n---------\n\nCo-authored-by: Franti\u0161ek Hartman <frant.hartm@gmail.com>\nGitOrigin-RevId: 836979eec9b74102f67e9f2a44f49c1544dad014",
        "before_after_code_files": [
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java",
          "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java",
          "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/cache/PlanCacheTestSupport.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/cache/PlanCacheTestSupport.java",
          "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java",
          "hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java||hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java",
          "hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java||hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java",
          "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java||hazelcast/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java",
          "hazelcast/src/main/java/com/hazelcast/sql/impl/optimizer/SqlPlan.java||hazelcast/src/main/java/com/hazelcast/sql/impl/optimizer/SqlPlan.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java",
            "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java",
            "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java",
            "hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java||hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java",
            "hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java||hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java"
          ],
          "candidate": [
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java",
            "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java",
            "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java",
            "hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java||hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java",
            "hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java||hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java"
          ]
        }
      },
      "candidate_diff": {
        "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java": [
          "File: hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java -> hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: import com.hazelcast.sql.impl.schema.type.Type;",
          "80: import com.hazelcast.sql.impl.schema.type.TypeKind;",
          "81: import com.hazelcast.sql.impl.schema.view.View;",
          "82: import com.hazelcast.sql.impl.state.QueryResultRegistry;",
          "83: import com.hazelcast.sql.impl.type.QueryDataType;",
          "84: import org.apache.calcite.rel.RelNode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: import com.hazelcast.sql.impl.security.SqlSecurityContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:         this.resultRegistry = resultRegistry;",
          "134:     }",
          "138:         return UpdateSqlResultImpl.createUpdateCountResult(0);",
          "139:     }",
          "",
          "[Removed Lines]",
          "136:     SqlResult execute(CreateMappingPlan plan) {",
          "137:         catalog.createMapping(plan.mapping(), plan.replace(), plan.ifNotExists());",
          "",
          "[Added Lines]",
          "137:     SqlResult execute(CreateMappingPlan plan, SqlSecurityContext ssc) {",
          "138:         catalog.createMapping(plan.mapping(), plan.replace(), plan.ifNotExists(), ssc);",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java": [
          "File: hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java -> hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:         }",
          "142:         @Override",
          "144:             SqlPlanImpl.ensureNoArguments(\"CREATE MAPPING\", arguments);",
          "145:             SqlPlanImpl.ensureNoTimeout(\"CREATE MAPPING\", timeout);",
          "147:         }",
          "148:     }",
          "",
          "[Removed Lines]",
          "143:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "146:             return planExecutor.execute(this);",
          "",
          "[Added Lines]",
          "143:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "146:             return planExecutor.execute(this, ssc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:         }",
          "191:         @Override",
          "193:             SqlPlanImpl.ensureNoArguments(\"DROP MAPPING\", arguments);",
          "194:             SqlPlanImpl.ensureNoTimeout(\"DROP MAPPING\", timeout);",
          "195:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "192:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "192:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "266:         }",
          "268:         @Override",
          "270:             SqlPlanImpl.ensureNoArguments(\"CREATE INDEX\", arguments);",
          "271:             SqlPlanImpl.ensureNoTimeout(\"CREATE INDEX\", timeout);",
          "272:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "269:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "269:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "315:         }",
          "317:         @Override",
          "319:             throw QueryException.error(\"DROP INDEX is not supported.\");",
          "320:         }",
          "321:     }",
          "",
          "[Removed Lines]",
          "318:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "318:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "393:         }",
          "395:         @Override",
          "397:             SqlPlanImpl.ensureNoTimeout(\"CREATE JOB\", timeout);",
          "398:             return planExecutor.execute(this, arguments);",
          "399:         }",
          "",
          "[Removed Lines]",
          "396:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "396:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "436:         }",
          "438:         @Override",
          "440:             SqlPlanImpl.ensureNoArguments(\"ALTER JOB\", arguments);",
          "441:             SqlPlanImpl.ensureNoTimeout(\"ALTER JOB\", timeout);",
          "442:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "439:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "439:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "487:         }",
          "489:         @Override",
          "491:             SqlPlanImpl.ensureNoArguments(\"DROP JOB\", arguments);",
          "492:             SqlPlanImpl.ensureNoTimeout(\"DROP JOB\", timeout);",
          "493:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "490:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "490:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "531:         }",
          "533:         @Override",
          "535:             SqlPlanImpl.ensureNoArguments(\"CREATE SNAPSHOT\", arguments);",
          "536:             SqlPlanImpl.ensureNoTimeout(\"CREATE SNAPSHOT\", timeout);",
          "537:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "534:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "534:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "575:         }",
          "577:         @Override",
          "579:             SqlPlanImpl.ensureNoArguments(\"DROP SNAPSHOT\", arguments);",
          "580:             SqlPlanImpl.ensureNoTimeout(\"DROP SNAPSHOT\", timeout);",
          "581:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "578:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "578:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "645:         }",
          "647:         @Override",
          "649:             SqlPlanImpl.ensureNoArguments(\"CREATE VIEW\", arguments);",
          "650:             SqlPlanImpl.ensureNoTimeout(\"CREATE VIEW\", timeout);",
          "651:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "648:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "648:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "694:         }",
          "696:         @Override",
          "698:             SqlPlanImpl.ensureNoArguments(\"DROP VIEW\", arguments);",
          "699:             SqlPlanImpl.ensureNoTimeout(\"DROP VIEW\", timeout);",
          "700:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "697:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "697:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "743:         }",
          "745:         @Override",
          "747:             SqlPlanImpl.ensureNoArguments(\"DROP TYPE\", arguments);",
          "748:             SqlPlanImpl.ensureNoTimeout(\"DROP TYPE\", timeout);",
          "749:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "746:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "746:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "780:         }",
          "782:         @Override",
          "784:             SqlPlanImpl.ensureNoArguments(\"SHOW \" + showTarget, arguments);",
          "785:             SqlPlanImpl.ensureNoTimeout(\"SHOW \" + showTarget, timeout);",
          "786:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "783:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "783:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "816:         }",
          "818:         @Override",
          "820:             SqlPlanImpl.ensureNoTimeout(\"EXPLAIN\", timeout);",
          "821:             return planExecutor.execute(this);",
          "822:         }",
          "",
          "[Removed Lines]",
          "819:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "819:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "897:         }",
          "899:         @Override",
          "901:             return planExecutor.execute(this, queryId, arguments, timeout);",
          "902:         }",
          "903:     }",
          "",
          "[Removed Lines]",
          "900:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "900:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "977:         }",
          "979:         @Override",
          "981:             return planExecutor.execute(this, queryId, arguments, timeout);",
          "982:         }",
          "983:     }",
          "",
          "[Removed Lines]",
          "980:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "980:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1057:         }",
          "1059:         @Override",
          "1061:             return planExecutor.execute(this, queryId, arguments, timeout);",
          "1062:         }",
          "1063:     }",
          "",
          "[Removed Lines]",
          "1060:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1060:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1123:         }",
          "1125:         @Override",
          "1127:             return planExecutor.execute(this, arguments, timeout);",
          "1128:         }",
          "1129:     }",
          "",
          "[Removed Lines]",
          "1126:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1126:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1189:         }",
          "1191:         @Override",
          "1193:             return planExecutor.execute(this, arguments, timeout);",
          "1194:         }",
          "1195:     }",
          "",
          "[Removed Lines]",
          "1192:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1192:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1263:         }",
          "1265:         @Override",
          "1267:             return planExecutor.execute(this, arguments, timeout);",
          "1268:         }",
          "1269:     }",
          "",
          "[Removed Lines]",
          "1266:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1266:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1330:         }",
          "1332:         @Override",
          "1334:             return planExecutor.execute(this, arguments, timeout);",
          "1335:         }",
          "1336:     }",
          "",
          "[Removed Lines]",
          "1333:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1333:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1401:         }",
          "1403:         @Override",
          "1405:             SqlPlanImpl.ensureNoArguments(\"CREATE TYPE\", arguments);",
          "1406:             SqlPlanImpl.ensureNoTimeout(\"CREATE TYPE\", timeout);",
          "1407:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "1404:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1404:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java": [
          "File: hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java -> hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import javax.annotation.Nonnull;",
          "36: import javax.annotation.Nullable;",
          "37: import java.lang.reflect.Method;",
          "38: import java.util.List;",
          "39: import java.util.Map;",
          "40: import java.util.function.Consumer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import java.security.Permission;",
          "43: import static java.util.Collections.emptyList;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:             @Nonnull String externalName",
          "222:     );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238:     @Nonnull",
          "239:     default List<Permission> permissionsForResolve(@Nonnull Map<String, String> options, NodeEngine nodeEngine) {",
          "240:         return emptyList();",
          "241:     }",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java": [
          "File: hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java -> hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: import javax.annotation.Nonnull;",
          "34: import javax.annotation.Nullable;",
          "35: import java.util.List;",
          "36: import java.util.Map;",
          "38: import static com.hazelcast.jet.core.Edge.between;",
          "40: public class FileSqlConnector implements SqlConnector {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import java.security.Permission;",
          "40: import static com.hazelcast.security.permission.ActionConstants.ACTION_READ;",
          "41: import static com.hazelcast.security.permission.ConnectorPermission.file;",
          "42: import static java.util.Collections.singletonList;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:         return METADATA_RESOLVERS.resolveAndValidateFields(userFields, options);",
          "86:     }",
          "88:     @Nonnull",
          "89:     @Override",
          "90:     public Table createTable(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:     @Nonnull",
          "93:     @Override",
          "94:     public List<Permission> permissionsForResolve(@Nonnull Map<String, String> options, NodeEngine nodeEngine) {",
          "95:         return singletonList(file(options.get(OPTION_PATH), ACTION_READ));",
          "96:     }",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java": [
          "File: hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java -> hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import com.hazelcast.sql.impl.schema.TableResolver;",
          "36: import com.hazelcast.sql.impl.schema.type.Type;",
          "37: import com.hazelcast.sql.impl.schema.view.View;",
          "39: import javax.annotation.Nonnull;",
          "40: import java.util.ArrayList;",
          "41: import java.util.Arrays;",
          "42: import java.util.Collection;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import com.hazelcast.sql.impl.security.SqlSecurityContext;",
          "41: import java.security.Permission;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:         String name = resolved.name();",
          "125:         if (ifNotExists) {",
          "",
          "[Removed Lines]",
          "121:     public void createMapping(Mapping mapping, boolean replace, boolean ifNotExists) {",
          "122:         Mapping resolved = resolveMapping(mapping);",
          "",
          "[Added Lines]",
          "123:     public void createMapping(Mapping mapping, boolean replace, boolean ifNotExists, SqlSecurityContext securityContext) {",
          "124:         Mapping resolved = resolveMapping(mapping, securityContext);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:         }",
          "133:     }",
          "136:         String type = mapping.type();",
          "137:         Map<String, String> options = mapping.options();",
          "139:         SqlConnector connector = connectorCache.forType(type);",
          "140:         List<MappingField> resolvedFields = connector.resolveAndValidateFields(",
          "141:                 nodeEngine,",
          "142:                 options,",
          "",
          "[Removed Lines]",
          "135:     private Mapping resolveMapping(Mapping mapping) {",
          "",
          "[Added Lines]",
          "137:     private Mapping resolveMapping(Mapping mapping, SqlSecurityContext securityContext) {",
          "143:         List<Permission> permissions = connector.permissionsForResolve(mapping.options(), nodeEngine);",
          "144:         for (Permission permission : permissions) {",
          "145:             securityContext.checkPermission(permission);",
          "146:         }",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java": [
          "File: hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java -> hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:         CreateMappingPlan plan = new CreateMappingPlan(planKey(), mapping, replace, ifNotExists, planExecutor);",
          "102:         assertThat(result.updateCount()).isEqualTo(0);",
          "104:     }",
          "106:     @Test",
          "",
          "[Removed Lines]",
          "99:         SqlResult result = planExecutor.execute(plan);",
          "103:         verify(catalog).createMapping(mapping, replace, ifNotExists);",
          "",
          "[Added Lines]",
          "99:         SqlResult result = planExecutor.execute(plan, null);",
          "103:         verify(catalog).createMapping(mapping, replace, ifNotExists, null);",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/cache/PlanCacheTestSupport.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/cache/PlanCacheTestSupport.java": [
          "File: hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/cache/PlanCacheTestSupport.java -> hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/cache/PlanCacheTestSupport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:         }",
          "158:         @Override",
          "160:             throw new UnsupportedOperationException();",
          "161:         }",
          "162:     }",
          "",
          "[Removed Lines]",
          "159:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "159:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java": [
          "File: hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java -> hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:                 .hasMessageContaining(\"expected test exception\");",
          "108:         verify(tableStorage, never()).putIfAbsent(anyString(), (Mapping) any());",
          "109:         verify(tableStorage, never()).put(anyString(), (Mapping) any());",
          "",
          "[Removed Lines]",
          "106:         assertThatThrownBy(() -> catalog.createMapping(mapping, true, true))",
          "",
          "[Added Lines]",
          "106:         assertThatThrownBy(() -> catalog.createMapping(mapping, true, true, null))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:                 .isInstanceOf(QueryException.class)",
          "127:                 .hasMessageContaining(\"Mapping or view already exists: name\");",
          "128:         verifyNoInteractions(listener);",
          "",
          "[Removed Lines]",
          "125:         assertThatThrownBy(() -> catalog.createMapping(mapping, false, false))",
          "",
          "[Added Lines]",
          "125:         assertThatThrownBy(() -> catalog.createMapping(mapping, false, false, null))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "139:         given(tableStorage.putIfAbsent(eq(mapping.name()), isA(Mapping.class))).willReturn(false);",
          "145:         verifyNoInteractions(listener);",
          "",
          "[Removed Lines]",
          "142:         catalog.createMapping(mapping, false, true);",
          "",
          "[Added Lines]",
          "142:         catalog.createMapping(mapping, false, true, null);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "155:                 .willReturn(singletonList(new MappingField(\"field_name\", INT)));",
          "161:         verify(tableStorage).put(eq(mapping.name()), isA(Mapping.class));",
          "",
          "[Removed Lines]",
          "158:         catalog.createMapping(mapping, true, false);",
          "",
          "[Added Lines]",
          "158:         catalog.createMapping(mapping, true, false, null);",
          "",
          "---------------"
        ],
        "hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java||hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java": [
          "File: hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java -> hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import com.hazelcast.jet.pipeline.file.impl.FileTraverser;",
          "29: import com.hazelcast.logging.ILogger;",
          "30: import com.hazelcast.logging.Logger;",
          "31: import com.hazelcast.security.permission.ConnectorPermission;",
          "33: import javax.annotation.Nonnull;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import com.hazelcast.security.impl.function.SecuredFunctions;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     private LocalFileTraverser<T> traverser;",
          "78:             @Nonnull String directory,",
          "79:             @Nonnull String glob,",
          "80:             boolean sharedFileSystem,",
          "",
          "[Removed Lines]",
          "77:     private ReadFilesP(",
          "",
          "[Added Lines]",
          "78:     public ReadFilesP(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174:         @Nonnull",
          "175:         @Override",
          "176:         public Function<? super Address, ? extends ProcessorSupplier> get(@Nonnull List<Address> addresses) {",
          "179:         }",
          "181:         @Override",
          "",
          "[Removed Lines]",
          "177:             return address -> ProcessorSupplier.of(() -> new ReadFilesP<>(directory, glob, sharedFileSystem,",
          "178:                     ignoreFileNotFound, readFileFn));",
          "",
          "[Added Lines]",
          "178:             return address -> ProcessorSupplier.of(SecuredFunctions.readFilesProcessorFn(",
          "179:                     directory, glob, sharedFileSystem, ignoreFileNotFound, readFileFn",
          "180:             ));",
          "",
          "---------------"
        ],
        "hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java||hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java": [
          "File: hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java -> hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import com.hazelcast.jet.core.ProcessorSupplier;",
          "28: import com.hazelcast.jet.core.ProcessorSupplier.Context;",
          "29: import com.hazelcast.jet.function.ToResultSetFunction;",
          "30: import com.hazelcast.jet.impl.connector.ReadIListP;",
          "31: import com.hazelcast.jet.impl.connector.ReadJdbcP;",
          "32: import com.hazelcast.jet.impl.connector.StreamFilesP;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import com.hazelcast.jet.impl.connector.ReadFilesP;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:         };",
          "220:     }",
          "222:     public static <T> FunctionEx<? super Path, ? extends Stream<T>> jsonReadFileFn(",
          "223:             String directory,",
          "224:             Class<T> type",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:     public static <T> SupplierEx<Processor> readFilesProcessorFn(",
          "224:             String directory,",
          "225:             String glob,",
          "226:             boolean sharedFileSystem,",
          "227:             boolean ignoreFileNotFound,",
          "228:             FunctionEx<? super Path, ? extends Stream<T>> readFileFn) {",
          "230:         return new SupplierEx<Processor>() {",
          "231:             @Override",
          "232:             public Processor getEx() {",
          "233:                 return new ReadFilesP<>(directory, glob, sharedFileSystem, ignoreFileNotFound, readFileFn);",
          "234:             }",
          "236:             @Override",
          "237:             public List<Permission> permissions() {",
          "238:                 return singletonList(ConnectorPermission.file(directory, ACTION_READ));",
          "239:             }",
          "240:         };",
          "241:     }",
          "",
          "---------------"
        ],
        "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java||hazelcast/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java": [
          "File: hazelcast/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java -> hazelcast/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:         }",
          "270:     }",
          "272:     private SqlPlan prepare(String schema, String sql, List<Object> arguments, SqlExpectedResultType expectedResultType) {",
          "",
          "[Removed Lines]",
          "269:         return plan.execute(queryId, args0, timeout);",
          "",
          "[Added Lines]",
          "269:         return plan.execute(queryId, args0, timeout, securityContext);",
          "",
          "---------------"
        ],
        "hazelcast/src/main/java/com/hazelcast/sql/impl/optimizer/SqlPlan.java||hazelcast/src/main/java/com/hazelcast/sql/impl/optimizer/SqlPlan.java": [
          "File: hazelcast/src/main/java/com/hazelcast/sql/impl/optimizer/SqlPlan.java -> hazelcast/src/main/java/com/hazelcast/sql/impl/optimizer/SqlPlan.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     public abstract boolean producesRows();",
          "75: }",
          "",
          "[Removed Lines]",
          "74:     public abstract SqlResult execute(QueryId queryId, List<Object> arguments, long timeout);",
          "",
          "[Added Lines]",
          "74:     public abstract SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0028c5be952a58e135a2eae16ce30e9ed6cb9aa",
      "candidate_info": {
        "commit_hash": "d0028c5be952a58e135a2eae16ce30e9ed6cb9aa",
        "repo": "hazelcast/hazelcast",
        "commit_url": "https://github.com/hazelcast/hazelcast/commit/d0028c5be952a58e135a2eae16ce30e9ed6cb9aa",
        "files": [
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java",
          "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java",
          "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/optimizer/SqlPlan.java",
          "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java",
          "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/cache/PlanCacheTestSupport.java",
          "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java",
          "hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java",
          "hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java"
        ],
        "message": "Improve permission checks in File connector [HZ-2991] [5.3.3] (#25661)\n\nBackport of #25348\n\nEE PR: https://github.com/hazelcast/hazelcast-enterprise/pull/6622",
        "before_after_code_files": [
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java",
          "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java",
          "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java||hazelcast-sql/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java",
          "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/optimizer/SqlPlan.java||hazelcast-sql/src/main/java/com/hazelcast/sql/impl/optimizer/SqlPlan.java",
          "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java",
          "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/cache/PlanCacheTestSupport.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/cache/PlanCacheTestSupport.java",
          "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java",
          "hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java||hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java",
          "hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java||hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java",
            "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java",
            "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java",
            "hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java||hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java",
            "hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java||hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java"
          ],
          "candidate": [
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java",
            "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java",
            "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java",
            "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java",
            "hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java||hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java",
            "hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java||hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java"
          ]
        }
      },
      "candidate_diff": {
        "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java": [
          "File: hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java -> hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/PlanExecutor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "93: import com.hazelcast.sql.impl.schema.type.Type;",
          "94: import com.hazelcast.sql.impl.schema.type.TypeKind;",
          "95: import com.hazelcast.sql.impl.schema.view.View;",
          "96: import com.hazelcast.sql.impl.state.QueryResultRegistry;",
          "97: import com.hazelcast.sql.impl.type.QueryDataType;",
          "98: import org.apache.calcite.rel.RelNode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96: import com.hazelcast.sql.impl.security.SqlSecurityContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:         logger = nodeEngine.getLogger(getClass());",
          "172:     }",
          "176:         return UpdateSqlResultImpl.createUpdateCountResult(0);",
          "177:     }",
          "",
          "[Removed Lines]",
          "174:     SqlResult execute(CreateMappingPlan plan) {",
          "175:         catalog.createMapping(plan.mapping(), plan.replace(), plan.ifNotExists());",
          "",
          "[Added Lines]",
          "175:     SqlResult execute(CreateMappingPlan plan, SqlSecurityContext ssc) {",
          "176:         catalog.createMapping(plan.mapping(), plan.replace(), plan.ifNotExists(), ssc);",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java": [
          "File: hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java -> hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/SqlPlanImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:         }",
          "150:         @Override",
          "152:             SqlPlanImpl.ensureNoArguments(\"CREATE MAPPING\", arguments);",
          "153:             SqlPlanImpl.ensureNoTimeout(\"CREATE MAPPING\", timeout);",
          "155:         }",
          "156:     }",
          "",
          "[Removed Lines]",
          "151:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "154:             return planExecutor.execute(this);",
          "",
          "[Added Lines]",
          "151:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "154:             return planExecutor.execute(this, ssc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "197:         }",
          "199:         @Override",
          "201:             SqlPlanImpl.ensureNoArguments(\"DROP MAPPING\", arguments);",
          "202:             SqlPlanImpl.ensureNoTimeout(\"DROP MAPPING\", timeout);",
          "203:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "200:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "200:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "278:         }",
          "280:         @Override",
          "282:             SqlPlanImpl.ensureNoArguments(\"CREATE DATA CONNECTION\", arguments);",
          "283:             SqlPlanImpl.ensureNoTimeout(\"CREATE DATA CONNECTION\", timeout);",
          "284:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "281:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "281:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "327:         }",
          "329:         @Override",
          "331:             SqlPlanImpl.ensureNoTimeout(\"DROP DATA CONNECTION\", timeout);",
          "332:             return planExecutor.execute(this);",
          "333:         }",
          "",
          "[Removed Lines]",
          "330:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "330:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "403:         }",
          "405:         @Override",
          "407:             SqlPlanImpl.ensureNoArguments(\"CREATE INDEX\", arguments);",
          "408:             SqlPlanImpl.ensureNoTimeout(\"CREATE INDEX\", timeout);",
          "409:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "406:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "406:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "452:         }",
          "454:         @Override",
          "456:             throw QueryException.error(\"DROP INDEX is not supported.\");",
          "457:         }",
          "458:     }",
          "",
          "[Removed Lines]",
          "455:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "455:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "530:         }",
          "532:         @Override",
          "534:             SqlPlanImpl.ensureNoTimeout(\"CREATE JOB\", timeout);",
          "535:             return planExecutor.execute(this, arguments);",
          "536:         }",
          "",
          "[Removed Lines]",
          "533:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "533:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "580:         }",
          "582:         @Override",
          "584:             SqlPlanImpl.ensureNoArguments(\"ALTER JOB\", arguments);",
          "585:             SqlPlanImpl.ensureNoTimeout(\"ALTER JOB\", timeout);",
          "586:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "583:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "583:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "631:         }",
          "633:         @Override",
          "635:             SqlPlanImpl.ensureNoArguments(\"DROP JOB\", arguments);",
          "636:             SqlPlanImpl.ensureNoTimeout(\"DROP JOB\", timeout);",
          "637:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "634:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "634:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "675:         }",
          "677:         @Override",
          "679:             SqlPlanImpl.ensureNoArguments(\"CREATE SNAPSHOT\", arguments);",
          "680:             SqlPlanImpl.ensureNoTimeout(\"CREATE SNAPSHOT\", timeout);",
          "681:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "678:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "678:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "719:         }",
          "721:         @Override",
          "723:             SqlPlanImpl.ensureNoArguments(\"DROP SNAPSHOT\", arguments);",
          "724:             SqlPlanImpl.ensureNoTimeout(\"DROP SNAPSHOT\", timeout);",
          "725:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "722:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "722:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "789:         }",
          "791:         @Override",
          "793:             SqlPlanImpl.ensureNoArguments(\"CREATE VIEW\", arguments);",
          "794:             SqlPlanImpl.ensureNoTimeout(\"CREATE VIEW\", timeout);",
          "795:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "792:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "792:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "838:         }",
          "840:         @Override",
          "842:             SqlPlanImpl.ensureNoArguments(\"DROP VIEW\", arguments);",
          "843:             SqlPlanImpl.ensureNoTimeout(\"DROP VIEW\", timeout);",
          "844:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "841:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "841:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "911:         }",
          "913:         @Override",
          "915:             SqlPlanImpl.ensureNoArguments(\"CREATE TYPE\", arguments);",
          "916:             SqlPlanImpl.ensureNoTimeout(\"CREATE TYPE\", timeout);",
          "917:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "914:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "914:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "960:         }",
          "962:         @Override",
          "964:             SqlPlanImpl.ensureNoArguments(\"DROP TYPE\", arguments);",
          "965:             SqlPlanImpl.ensureNoTimeout(\"DROP TYPE\", timeout);",
          "966:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "963:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "963:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1004:         }",
          "1006:         @Override",
          "1008:             SqlPlanImpl.ensureNoArguments(\"SHOW \" + showTarget, arguments);",
          "1009:             SqlPlanImpl.ensureNoTimeout(\"SHOW \" + showTarget, timeout);",
          "1010:             return planExecutor.execute(this);",
          "",
          "[Removed Lines]",
          "1007:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1007:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1040:         }",
          "1042:         @Override",
          "1044:             SqlPlanImpl.ensureNoTimeout(\"EXPLAIN\", timeout);",
          "1045:             return planExecutor.execute(this);",
          "1046:         }",
          "",
          "[Removed Lines]",
          "1043:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1043:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1121:         }",
          "1123:         @Override",
          "1125:             return planExecutor.execute(this, queryId, arguments, timeout);",
          "1126:         }",
          "1127:     }",
          "",
          "[Removed Lines]",
          "1124:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1124:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1201:         }",
          "1203:         @Override",
          "1205:             return planExecutor.execute(this, queryId, arguments, timeout);",
          "1206:         }",
          "1207:     }",
          "",
          "[Removed Lines]",
          "1204:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1204:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1289:         }",
          "1291:         @Override",
          "1293:             return planExecutor.execute(this, queryId, arguments, timeout);",
          "1294:         }",
          "1295:     }",
          "",
          "[Removed Lines]",
          "1292:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1292:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1363:         }",
          "1365:         @Override",
          "1367:             return planExecutor.execute(this, arguments, timeout);",
          "1368:         }",
          "1369:     }",
          "",
          "[Removed Lines]",
          "1366:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1366:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1429:         }",
          "1431:         @Override",
          "1433:             return planExecutor.execute(this, arguments, timeout);",
          "1434:         }",
          "1435:     }",
          "",
          "[Removed Lines]",
          "1432:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1432:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1511:         }",
          "1513:         @Override",
          "1515:             return planExecutor.execute(this, arguments, timeout);",
          "1516:         }",
          "1517:     }",
          "",
          "[Removed Lines]",
          "1514:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1514:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1586:         }",
          "1588:         @Override",
          "1590:             return planExecutor.execute(this, arguments, timeout);",
          "1591:         }",
          "1592:     }",
          "",
          "[Removed Lines]",
          "1589:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "1589:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java": [
          "File: hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java -> hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/SqlConnector.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: import javax.annotation.Nullable;",
          "39: import java.io.Serializable;",
          "40: import java.lang.reflect.Method;",
          "41: import java.util.Arrays;",
          "42: import java.util.List;",
          "43: import java.util.Map;",
          "44: import java.util.Objects;",
          "45: import java.util.function.Consumer;",
          "47: import static java.util.Collections.emptyMap;",
          "48: import static java.util.Objects.requireNonNull;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: import java.security.Permission;",
          "48: import static java.util.Collections.emptyList;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231:             @Nonnull List<MappingField> userFields",
          "232:     );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:     @Nonnull",
          "248:     default List<Permission> permissionsForResolve(SqlExternalResource resource, NodeEngine nodeEngine) {",
          "249:         return emptyList();",
          "250:     }",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java": [
          "File: hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java -> hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/file/FileSqlConnector.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import javax.annotation.Nonnull;",
          "33: import javax.annotation.Nullable;",
          "34: import java.util.List;",
          "35: import java.util.Map;",
          "37: import static com.hazelcast.jet.core.Edge.between;",
          "39: public class FileSqlConnector implements SqlConnector {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import java.security.Permission;",
          "39: import static com.hazelcast.security.permission.ActionConstants.ACTION_READ;",
          "40: import static com.hazelcast.security.permission.ConnectorPermission.file;",
          "41: import static java.util.Collections.singletonList;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:         return METADATA_RESOLVERS.resolveAndValidateFields(userFields, options);",
          "84:     }",
          "86:     @Nonnull",
          "87:     @Override",
          "88:     public Table createTable(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:     @Nonnull",
          "91:     @Override",
          "92:     public List<Permission> permissionsForResolve(SqlExternalResource resource, NodeEngine nodeEngine) {",
          "93:         return singletonList(file(resource.options().get(OPTION_PATH), ACTION_READ));",
          "94:     }",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java||hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java": [
          "File: hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java -> hazelcast-sql/src/main/java/com/hazelcast/jet/sql/impl/schema/TableResolverImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: import com.hazelcast.sql.impl.schema.dataconnection.DataConnectionCatalogEntry;",
          "42: import com.hazelcast.sql.impl.schema.type.Type;",
          "43: import com.hazelcast.sql.impl.schema.view.View;",
          "45: import javax.annotation.Nonnull;",
          "46: import java.util.ArrayList;",
          "47: import java.util.Collection;",
          "48: import java.util.LinkedHashMap;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: import com.hazelcast.sql.impl.security.SqlSecurityContext;",
          "47: import java.security.Permission;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:         String name = resolved.name();",
          "134:         if (ifNotExists) {",
          "",
          "[Removed Lines]",
          "130:     public void createMapping(Mapping mapping, boolean replace, boolean ifNotExists) {",
          "131:         Mapping resolved = resolveMapping(mapping);",
          "",
          "[Added Lines]",
          "132:     public void createMapping(Mapping mapping, boolean replace, boolean ifNotExists, SqlSecurityContext securityContext) {",
          "133:         Mapping resolved = resolveMapping(mapping, securityContext);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141:         }",
          "142:     }",
          "145:         Map<String, String> options = mapping.options();",
          "146:         String type = mapping.connectorType();",
          "147:         String dataConnection = mapping.dataConnection();",
          "",
          "[Removed Lines]",
          "144:     private Mapping resolveMapping(Mapping mapping) {",
          "",
          "[Added Lines]",
          "146:     private Mapping resolveMapping(Mapping mapping, SqlSecurityContext securityContext) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "157:                 ? connector.defaultObjectType()",
          "158:                 : mapping.objectType();",
          "159:         checkNotNull(objectType, \"objectType cannot be null\");",
          "160:         resolvedFields = connector.resolveAndValidateFields(",
          "161:                 nodeEngine,",
          "168:                 mapping.fields()",
          "169:         );",
          "",
          "[Removed Lines]",
          "162:                 new SqlExternalResource(",
          "163:                         mapping.externalName(),",
          "164:                         mapping.dataConnection(),",
          "165:                         connector.typeName(),",
          "166:                         objectType,",
          "167:                         options),",
          "",
          "[Added Lines]",
          "163:         SqlExternalResource externalResource = new SqlExternalResource(",
          "164:                 mapping.externalName(),",
          "165:                 mapping.dataConnection(),",
          "166:                 connector.typeName(),",
          "167:                 objectType,",
          "168:                 options",
          "169:         );",
          "171:         List<Permission> permissions = connector.permissionsForResolve(externalResource, nodeEngine);",
          "172:         for (Permission permission : permissions) {",
          "173:             securityContext.checkPermission(permission);",
          "174:         }",
          "178:                 externalResource,",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java||hazelcast-sql/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java": [
          "File: hazelcast-sql/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java -> hazelcast-sql/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:         }",
          "267:     }",
          "269:     private SqlPlan prepare(String schema, String sql, List<Object> arguments, SqlExpectedResultType expectedResultType) {",
          "",
          "[Removed Lines]",
          "266:         return plan.execute(queryId, args0, timeout);",
          "",
          "[Added Lines]",
          "266:         return plan.execute(queryId, args0, timeout, securityContext);",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/optimizer/SqlPlan.java||hazelcast-sql/src/main/java/com/hazelcast/sql/impl/optimizer/SqlPlan.java": [
          "File: hazelcast-sql/src/main/java/com/hazelcast/sql/impl/optimizer/SqlPlan.java -> hazelcast-sql/src/main/java/com/hazelcast/sql/impl/optimizer/SqlPlan.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     public abstract boolean producesRows();",
          "75: }",
          "",
          "[Removed Lines]",
          "74:     public abstract SqlResult execute(QueryId queryId, List<Object> arguments, long timeout);",
          "",
          "[Added Lines]",
          "74:     public abstract SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc);",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java": [
          "File: hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java -> hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/PlanExecutorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:         CreateMappingPlan plan = new CreateMappingPlan(planKey(), mapping, replace, ifNotExists, planExecutor);",
          "108:         assertThat(result.updateCount()).isEqualTo(0);",
          "110:     }",
          "112:     @Test",
          "",
          "[Removed Lines]",
          "105:         SqlResult result = planExecutor.execute(plan);",
          "109:         verify(catalog).createMapping(mapping, replace, ifNotExists);",
          "",
          "[Added Lines]",
          "105:         SqlResult result = planExecutor.execute(plan, null);",
          "109:         verify(catalog).createMapping(mapping, replace, ifNotExists, null);",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/cache/PlanCacheTestSupport.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/cache/PlanCacheTestSupport.java": [
          "File: hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/cache/PlanCacheTestSupport.java -> hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/cache/PlanCacheTestSupport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:         }",
          "158:         @Override",
          "160:             throw new UnsupportedOperationException();",
          "161:         }",
          "162:     }",
          "",
          "[Removed Lines]",
          "159:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout) {",
          "",
          "[Added Lines]",
          "159:         public SqlResult execute(QueryId queryId, List<Object> arguments, long timeout, SqlSecurityContext ssc) {",
          "",
          "---------------"
        ],
        "hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java||hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java": [
          "File: hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java -> hazelcast-sql/src/test/java/com/hazelcast/jet/sql/impl/schema/TableResolverImplTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:                 .hasMessageContaining(\"expected test exception\");",
          "114:         verify(relationsStorage, never()).putIfAbsent(anyString(), (Mapping) any());",
          "115:         verify(relationsStorage, never()).put(anyString(), (Mapping) any());",
          "",
          "[Removed Lines]",
          "112:         assertThatThrownBy(() -> catalog.createMapping(mapping, true, true))",
          "",
          "[Added Lines]",
          "112:         assertThatThrownBy(() -> catalog.createMapping(mapping, true, true, null))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:                 .isInstanceOf(QueryException.class)",
          "138:                 .hasMessageContaining(\"Mapping or view already exists: name\");",
          "139:         verifyNoInteractions(listener);",
          "",
          "[Removed Lines]",
          "136:         assertThatThrownBy(() -> catalog.createMapping(mapping, false, false))",
          "",
          "[Added Lines]",
          "136:         assertThatThrownBy(() -> catalog.createMapping(mapping, false, false, null))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:         given(relationsStorage.putIfAbsent(eq(mapping.name()), isA(Mapping.class))).willReturn(false);",
          "161:         verifyNoInteractions(listener);",
          "",
          "[Removed Lines]",
          "158:         catalog.createMapping(mapping, false, true);",
          "",
          "[Added Lines]",
          "158:         catalog.createMapping(mapping, false, true, null);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "176:                 .willReturn(singletonList(new MappingField(\"field_name\", INT)));",
          "182:         verify(relationsStorage).put(eq(mapping.name()), isA(Mapping.class));",
          "",
          "[Removed Lines]",
          "179:         catalog.createMapping(mapping, true, false);",
          "",
          "[Added Lines]",
          "179:         catalog.createMapping(mapping, true, false, null);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "204:         given(connector.defaultObjectType()).willReturn(\"MyDummyType\");",
          "210:         verify(relationsStorage).put(eq(mapping.name()), isA(Mapping.class));",
          "",
          "[Removed Lines]",
          "207:         catalog.createMapping(mapping, true, false);",
          "",
          "[Added Lines]",
          "207:         catalog.createMapping(mapping, true, false, null);",
          "",
          "---------------"
        ],
        "hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java||hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java": [
          "File: hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java -> hazelcast/src/main/java/com/hazelcast/jet/impl/connector/ReadFilesP.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import com.hazelcast.jet.pipeline.file.impl.FileTraverser;",
          "29: import com.hazelcast.logging.ILogger;",
          "30: import com.hazelcast.logging.Logger;",
          "31: import com.hazelcast.security.permission.ConnectorPermission;",
          "33: import javax.annotation.Nonnull;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import com.hazelcast.security.impl.function.SecuredFunctions;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     private LocalFileTraverser<T> traverser;",
          "78:             @Nonnull String directory,",
          "79:             @Nonnull String glob,",
          "80:             boolean sharedFileSystem,",
          "",
          "[Removed Lines]",
          "77:     private ReadFilesP(",
          "",
          "[Added Lines]",
          "78:     public ReadFilesP(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174:         @Nonnull",
          "175:         @Override",
          "176:         public Function<? super Address, ? extends ProcessorSupplier> get(@Nonnull List<Address> addresses) {",
          "179:         }",
          "181:         @Override",
          "",
          "[Removed Lines]",
          "177:             return address -> ProcessorSupplier.of(() -> new ReadFilesP<>(directory, glob, sharedFileSystem,",
          "178:                     ignoreFileNotFound, readFileFn));",
          "",
          "[Added Lines]",
          "178:             return address -> ProcessorSupplier.of(SecuredFunctions.readFilesProcessorFn(",
          "179:                     directory, glob, sharedFileSystem, ignoreFileNotFound, readFileFn",
          "180:             ));",
          "",
          "---------------"
        ],
        "hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java||hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java": [
          "File: hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java -> hazelcast/src/main/java/com/hazelcast/security/impl/function/SecuredFunctions.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import com.hazelcast.jet.core.ProcessorSupplier;",
          "28: import com.hazelcast.jet.core.ProcessorSupplier.Context;",
          "29: import com.hazelcast.jet.function.ToResultSetFunction;",
          "30: import com.hazelcast.jet.impl.connector.ReadIListP;",
          "31: import com.hazelcast.jet.impl.connector.ReadJdbcP;",
          "32: import com.hazelcast.jet.impl.connector.StreamFilesP;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import com.hazelcast.jet.impl.connector.ReadFilesP;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "220:         };",
          "221:     }",
          "223:     public static <T> FunctionEx<? super Path, ? extends Stream<T>> jsonReadFileFn(",
          "224:             String directory,",
          "225:             Class<T> type",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224:     public static <T> SupplierEx<Processor> readFilesProcessorFn(",
          "225:             String directory,",
          "226:             String glob,",
          "227:             boolean sharedFileSystem,",
          "228:             boolean ignoreFileNotFound,",
          "229:             FunctionEx<? super Path, ? extends Stream<T>> readFileFn) {",
          "231:         return new SupplierEx<Processor>() {",
          "232:             @Override",
          "233:             public Processor getEx() {",
          "234:                 return new ReadFilesP<>(directory, glob, sharedFileSystem, ignoreFileNotFound, readFileFn);",
          "235:             }",
          "237:             @Override",
          "238:             public List<Permission> permissions() {",
          "239:                 return singletonList(ConnectorPermission.file(directory, ACTION_READ));",
          "240:             }",
          "241:         };",
          "242:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}