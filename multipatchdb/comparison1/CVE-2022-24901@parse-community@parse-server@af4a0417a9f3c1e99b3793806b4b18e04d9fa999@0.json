{
  "cve_id": "CVE-2022-24901",
  "cve_desc": "Improper validation of the Apple certificate URL in the Apple Game Center authentication adapter allows attackers to bypass authentication, making the server vulnerable to DoS attacks. The vulnerability has been fixed by improving the URL validation and adding additional checks of the resource the URL points to before downloading it.",
  "repo": "parse-community/parse-server",
  "patch_hash": "af4a0417a9f3c1e99b3793806b4b18e04d9fa999",
  "patch_info": {
    "commit_hash": "af4a0417a9f3c1e99b3793806b4b18e04d9fa999",
    "repo": "parse-community/parse-server",
    "commit_url": "https://github.com/parse-community/parse-server/commit/af4a0417a9f3c1e99b3793806b4b18e04d9fa999",
    "files": [
      "spec/AuthenticationAdapters.spec.js",
      "src/Adapters/Auth/gcenter.js"
    ],
    "message": "fix: authentication bypass and denial of service (DoS) vulnerabilities in Apple Game Center auth adapter (GHSA-qf8x-vqjv-92gr) (#7962)",
    "before_after_code_files": [
      "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js",
      "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js"
    ]
  },
  "patch_diff": {
    "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js": [
      "File: spec/AuthenticationAdapters.spec.js -> spec/AuthenticationAdapters.spec.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "1665:       bundleId: 'cloud.xtralife.gamecenterauth',",
      "1666:     };",
      "1673:   });",
      "1675:   it('validateAuthData invalid signature id', async () => {",
      "",
      "[Removed Lines]",
      "1668:     try {",
      "1669:       await gcenter.validateAuthData(authData);",
      "1670:     } catch (e) {",
      "1671:       fail();",
      "1672:     }",
      "",
      "[Added Lines]",
      "1668:     await gcenter.validateAuthData(authData);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1690:     }",
      "1691:   });",
      "1711:   it('validateAuthData invalid public key http url', async () => {",
      "1729:   });",
      "1730: });",
      "",
      "[Removed Lines]",
      "1693:   it('validateAuthData invalid public key url', async () => {",
      "1694:     const authData = {",
      "1695:       id: 'G:1965586982',",
      "1696:       publicKeyUrl: 'invalid.com',",
      "1697:       timestamp: 1565257031287,",
      "1698:       signature: '1234',",
      "1699:       salt: 'DzqqrQ==',",
      "1700:       bundleId: 'cloud.xtralife.gamecenterauth',",
      "1701:     };",
      "1703:     try {",
      "1704:       await gcenter.validateAuthData(authData);",
      "1705:       fail();",
      "1706:     } catch (e) {",
      "1707:       expect(e.message).toBe('Apple Game Center - invalid publicKeyUrl: invalid.com');",
      "1708:     }",
      "1709:   });",
      "1712:     const authData = {",
      "1713:       id: 'G:1965586982',",
      "1714:       publicKeyUrl: 'http://static.gc.apple.com/public-key/gc-prod-4.cer',",
      "1715:       timestamp: 1565257031287,",
      "1716:       signature: '1234',",
      "1717:       salt: 'DzqqrQ==',",
      "1718:       bundleId: 'cloud.xtralife.gamecenterauth',",
      "1719:     };",
      "1721:     try {",
      "1722:       await gcenter.validateAuthData(authData);",
      "1723:       fail();",
      "1724:     } catch (e) {",
      "1725:       expect(e.message).toBe(",
      "1726:         'Apple Game Center - invalid publicKeyUrl: http://static.gc.apple.com/public-key/gc-prod-4.cer'",
      "1727:       );",
      "1728:     }",
      "",
      "[Added Lines]",
      "1690:     const publicKeyUrls = [",
      "1691:       'example.com',",
      "1692:       'http://static.gc.apple.com/public-key/gc-prod-4.cer',",
      "1693:       'https://developer.apple.com/assets/elements/badges/download-on-the-app-store.svg',",
      "1694:       'https://example.com/ \\\\.apple.com/public_key.cer',",
      "1695:       'https://example.com/ &.apple.com/public_key.cer',",
      "1696:     ];",
      "1697:     await Promise.all(",
      "1698:       publicKeyUrls.map(publicKeyUrl =>",
      "1699:         expectAsync(",
      "1700:           gcenter.validateAuthData({",
      "1701:             id: 'G:1965586982',",
      "1702:             timestamp: 1565257031287,",
      "1703:             publicKeyUrl,",
      "1704:             signature: '1234',",
      "1705:             salt: 'DzqqrQ==',",
      "1706:             bundleId: 'com.example.com',",
      "1707:           })",
      "1708:         ).toBeRejectedWith(",
      "1709:           new Parse.Error(",
      "1710:             Parse.Error.SCRIPT_FAILED,",
      "1711:             `Apple Game Center - invalid publicKeyUrl: ${publicKeyUrl}`",
      "1712:           )",
      "1713:         )",
      "1714:       )",
      "1715:     );",
      "",
      "---------------"
    ],
    "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js": [
      "File: src/Adapters/Auth/gcenter.js -> src/Adapters/Auth/gcenter.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: function verifyPublicKeyUrl(publicKeyUrl) {",
      "21:   try {",
      "31:   } catch (error) {",
      "32:     return false;",
      "33:   }",
      "",
      "[Removed Lines]",
      "22:     const parsedUrl = new URL(publicKeyUrl);",
      "23:     if (parsedUrl.protocol !== 'https:') {",
      "24:       return false;",
      "25:     }",
      "26:     const hostnameParts = parsedUrl.hostname.split('.');",
      "27:     const length = hostnameParts.length;",
      "28:     const domainParts = hostnameParts.slice(length - 2, length);",
      "29:     const domain = domainParts.join('.');",
      "30:     return domain === 'apple.com';",
      "",
      "[Added Lines]",
      "22:     const regex = /^https:\\/\\/(?:[-_A-Za-z0-9]+\\.){0,}apple\\.com\\/.*\\.cer$/;",
      "23:     return regex.test(publicKeyUrl);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "43:   return pemPreFix + certBody + pemPostFix;",
      "44: }",
      "47:   if (!verifyPublicKeyUrl(publicKeyUrl)) {",
      "48:     throw new Parse.Error(",
      "49:       Parse.Error.OBJECT_NOT_FOUND,",
      "",
      "[Removed Lines]",
      "46: function getAppleCertificate(publicKeyUrl) {",
      "",
      "[Added Lines]",
      "39: async function getAppleCertificate(publicKeyUrl) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "53:   if (cache[publicKeyUrl]) {",
      "54:     return cache[publicKeyUrl];",
      "55:   }",
      "56:   return new Promise((resolve, reject) => {",
      "57:     https",
      "58:       .get(publicKeyUrl, res => {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "49:   const url = new URL(publicKeyUrl);",
      "50:   const headOptions = {",
      "51:     hostname: url.hostname,",
      "52:     path: url.pathname,",
      "53:     method: 'HEAD',",
      "54:   };",
      "55:   const headers = await new Promise((resolve, reject) =>",
      "56:     https.get(headOptions, res => resolve(res.headers)).on('error', reject)",
      "57:   );",
      "58:   if (",
      "59:     headers['content-type'] !== 'application/pkix-cert' ||",
      "60:     headers['content-length'] == null ||",
      "61:     headers['content-length'] > 10000",
      "62:   ) {",
      "63:     throw new Parse.Error(",
      "64:       Parse.Error.OBJECT_NOT_FOUND,",
      "65:       `Apple Game Center - invalid publicKeyUrl: ${publicKeyUrl}`",
      "66:     );",
      "67:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4c2aa63fd2f4ee6cca48b051b7d345ca7c975591",
      "candidate_info": {
        "commit_hash": "4c2aa63fd2f4ee6cca48b051b7d345ca7c975591",
        "repo": "parse-community/parse-server",
        "commit_url": "https://github.com/parse-community/parse-server/commit/4c2aa63fd2f4ee6cca48b051b7d345ca7c975591",
        "files": [
          "changelogs/CHANGELOG_release.md",
          "package-lock.json",
          "package.json",
          "spec/AuthenticationAdapters.spec.js",
          "src/Adapters/Auth/gcenter.js"
        ],
        "message": "fix: certificate in Apple Game Center auth adapter not validated [skip release] (#8055)",
        "before_after_code_files": [
          "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js",
          "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js",
            "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js"
          ],
          "candidate": [
            "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js",
            "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js"
          ]
        }
      },
      "candidate_diff": {
        "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js": [
          "File: spec/AuthenticationAdapters.spec.js -> spec/AuthenticationAdapters.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1682:   const gcenter = require('../lib/Adapters/Auth/gcenter');",
          "1683:   const fs = require('fs');",
          "1684:   const testCert = fs.readFileSync(__dirname + '/support/cert/game_center.pem');",
          "1685:   it('validateAuthData should validate', async () => {",
          "1687:     const authData = {",
          "1688:       id: 'G:1965586982',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1686:   it('can load adapter', async () => {",
          "1687:     const options = {",
          "1688:       gcenter: {",
          "1689:         rootCertificateUrl:",
          "1690:           'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem',",
          "1691:       },",
          "1692:     };",
          "1693:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1694:       'gcenter',",
          "1695:       options",
          "1696:     );",
          "1697:     await adapter.validateAppId(",
          "1698:       appIds,",
          "1699:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1700:       providerOptions",
          "1701:     );",
          "1702:   });",
          "1705:     const options = {",
          "1706:       gcenter: {",
          "1707:         rootCertificateUrl:",
          "1708:           'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem',",
          "1709:       },",
          "1710:     };",
          "1711:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1712:       'gcenter',",
          "1713:       options",
          "1714:     );",
          "1715:     await adapter.validateAppId(",
          "1716:       appIds,",
          "1717:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1718:       providerOptions",
          "1719:     );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1698:   });",
          "1700:   it('validateAuthData invalid signature id', async () => {",
          "1701:     const authData = {",
          "1702:       id: 'G:1965586982',",
          "1703:       publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-6.cer',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1735:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1736:       'gcenter',",
          "1737:       {}",
          "1738:     );",
          "1739:     await adapter.validateAppId(",
          "1740:       appIds,",
          "1741:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1742:       providerOptions",
          "1743:     );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1712:   });",
          "1714:   it('validateAuthData invalid public key http url', async () => {",
          "1715:     const publicKeyUrls = [",
          "1716:       'example.com',",
          "1717:       'http://static.gc.apple.com/public-key/gc-prod-4.cer',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1758:     const options = {",
          "1759:       gcenter: {",
          "1760:         rootCertificateUrl:",
          "1761:           'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem',",
          "1762:       },",
          "1763:     };",
          "1764:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1765:       'gcenter',",
          "1766:       options",
          "1767:     );",
          "1768:     await adapter.validateAppId(",
          "1769:       appIds,",
          "1770:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1771:       providerOptions",
          "1772:     );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1739:       )",
          "1740:     );",
          "1741:   });",
          "1742: });",
          "1744: describe('phant auth adapter', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1801:   it('should not validate Symantec Cert', async () => {",
          "1802:     const options = {",
          "1803:       gcenter: {",
          "1804:         rootCertificateUrl:",
          "1805:           'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem',",
          "1806:       },",
          "1807:     };",
          "1808:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1809:       'gcenter',",
          "1810:       options",
          "1811:     );",
          "1812:     await adapter.validateAppId(",
          "1813:       appIds,",
          "1814:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1815:       providerOptions",
          "1816:     );",
          "1817:     expect(() =>",
          "1818:       gcenter.verifyPublicKeyIssuer(",
          "1819:         testCert,",
          "1820:         'https://static.gc.apple.com/public-key/gc-prod-4.cer'",
          "1821:       )",
          "1822:     );",
          "1823:   });",
          "1825:   it('adapter should load default cert', async () => {",
          "1826:     const options = {",
          "1827:       gcenter: {},",
          "1828:     };",
          "1829:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1830:       'gcenter',",
          "1831:       options",
          "1832:     );",
          "1833:     await adapter.validateAppId(",
          "1834:       appIds,",
          "1835:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1836:       providerOptions",
          "1837:     );",
          "1838:     const previous = new Date();",
          "1839:     await adapter.validateAppId(",
          "1840:       appIds,",
          "1841:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1842:       providerOptions",
          "1843:     );",
          "1845:     const duration = new Date().getTime() - previous.getTime();",
          "1846:     expect(duration).toEqual(0);",
          "1847:   });",
          "1849:   it('adapter should throw', async () => {",
          "1850:     const options = {",
          "1851:       gcenter: {",
          "1852:         rootCertificateUrl: 'https://example.com',",
          "1853:       },",
          "1854:     };",
          "1855:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1856:       'gcenter',",
          "1857:       options",
          "1858:     );",
          "1859:     await expectAsync(",
          "1860:       adapter.validateAppId(",
          "1861:         appIds,",
          "1862:         { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1863:         providerOptions",
          "1864:       )",
          "1865:     ).toBeRejectedWith(",
          "1866:       new Parse.Error(",
          "1867:         Parse.Error.OBJECT_NOT_FOUND,",
          "1868:         'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.'",
          "1869:       )",
          "1870:     );",
          "1871:   });",
          "",
          "---------------"
        ],
        "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js": [
          "File: src/Adapters/Auth/gcenter.js -> src/Adapters/Auth/gcenter.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: const { Parse } = require('parse/node');",
          "15: const crypto = require('crypto');",
          "16: const https = require('https');",
          "18: const cache = {}; // (publicKey -> cert) cache",
          "20: function verifyPublicKeyUrl(publicKeyUrl) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: const { pki } = require('node-forge');",
          "18: const ca = { cert: null, url: null };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:     path: url.pathname,",
          "53:     method: 'HEAD',",
          "54:   };",
          "56:     https.get(headOptions, res => resolve(res.headers)).on('error', reject)",
          "57:   );",
          "58:   if (",
          "62:   ) {",
          "63:     throw new Parse.Error(",
          "64:       Parse.Error.OBJECT_NOT_FOUND,",
          "65:       `Apple Game Center - invalid publicKeyUrl: ${publicKeyUrl}`",
          "66:     );",
          "67:   }",
          "68:   return new Promise((resolve, reject) => {",
          "69:     https",
          "72:         res.on('data', chunk => {",
          "74:         });",
          "75:         res.on('end', () => {",
          "86:           }",
          "88:         });",
          "89:       })",
          "90:       .on('error', reject);",
          "",
          "[Removed Lines]",
          "55:   const headers = await new Promise((resolve, reject) =>",
          "59:     headers['content-type'] !== 'application/pkix-cert' ||",
          "60:     headers['content-length'] == null ||",
          "61:     headers['content-length'] > 10000",
          "70:       .get(publicKeyUrl, res => {",
          "71:         let data = '';",
          "73:           data += chunk.toString('base64');",
          "76:           const cert = convertX509CertToPEM(data);",
          "77:           if (res.headers['cache-control']) {",
          "78:             var expire = res.headers['cache-control'].match(/max-age=([0-9]+)/);",
          "79:             if (expire) {",
          "80:               cache[publicKeyUrl] = cert;",
          "82:               setTimeout(() => {",
          "83:                 delete cache[publicKeyUrl];",
          "84:               }, parseInt(expire[1], 10) * 1000);",
          "85:             }",
          "87:           resolve(cert);",
          "",
          "[Added Lines]",
          "56:   const cert_headers = await new Promise((resolve, reject) =>",
          "59:   const validContentTypes = ['application/x-x509-ca-cert', 'application/pkix-cert'];",
          "61:     !validContentTypes.includes(cert_headers['content-type']) ||",
          "62:     cert_headers['content-length'] == null ||",
          "63:     cert_headers['content-length'] > 10000",
          "70:   const { certificate, headers } = await getCertificate(publicKeyUrl);",
          "71:   if (headers['cache-control']) {",
          "72:     const expire = headers['cache-control'].match(/max-age=([0-9]+)/);",
          "73:     if (expire) {",
          "74:       cache[publicKeyUrl] = certificate;",
          "76:       setTimeout(() => {",
          "77:         delete cache[publicKeyUrl];",
          "78:       }, parseInt(expire[1], 10) * 1000);",
          "79:     }",
          "80:   }",
          "81:   return verifyPublicKeyIssuer(certificate, publicKeyUrl);",
          "82: }",
          "84: function getCertificate(url, buffer) {",
          "87:       .get(url, res => {",
          "88:         const data = [];",
          "90:           data.push(chunk);",
          "93:           if (buffer) {",
          "94:             resolve({ certificate: Buffer.concat(data), headers: res.headers });",
          "95:             return;",
          "97:           let cert = '';",
          "98:           for (const chunk of data) {",
          "99:             cert += chunk.toString('base64');",
          "100:           }",
          "101:           const certificate = convertX509CertToPEM(cert);",
          "102:           resolve({ certificate, headers: res.headers });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115:   }",
          "116: }",
          "119: async function validateAuthData(authData) {",
          "120:   if (!authData.id) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: function verifyPublicKeyIssuer(cert, publicKeyUrl) {",
          "134:   const publicKeyCert = pki.certificateFromPem(cert);",
          "135:   if (!ca.cert) {",
          "136:     throw new Parse.Error(",
          "137:       Parse.Error.OBJECT_NOT_FOUND,",
          "138:       'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.'",
          "139:     );",
          "140:   }",
          "141:   try {",
          "142:     if (!ca.cert.verify(publicKeyCert)) {",
          "143:       throw new Parse.Error(",
          "144:         Parse.Error.OBJECT_NOT_FOUND,",
          "145:         `Apple Game Center - invalid publicKeyUrl: ${publicKeyUrl}`",
          "146:       );",
          "147:     }",
          "148:   } catch (e) {",
          "149:     throw new Parse.Error(",
          "150:       Parse.Error.OBJECT_NOT_FOUND,",
          "151:       `Apple Game Center - invalid publicKeyUrl: ${publicKeyUrl}`",
          "152:     );",
          "153:   }",
          "154:   return cert;",
          "155: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126: }",
          "131: }",
          "133: module.exports = {",
          "",
          "[Removed Lines]",
          "129: function validateAppId() {",
          "130:   return Promise.resolve();",
          "",
          "[Added Lines]",
          "168: async function validateAppId(appIds, authData, options = {}) {",
          "169:   if (!options.rootCertificateUrl) {",
          "170:     options.rootCertificateUrl =",
          "171:       'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem';",
          "172:   }",
          "173:   if (ca.url === options.rootCertificateUrl) {",
          "174:     return;",
          "175:   }",
          "176:   const { certificate, headers } = await getCertificate(options.rootCertificateUrl, true);",
          "177:   if (",
          "178:     headers['content-type'] !== 'application/x-pem-file' ||",
          "179:     headers['content-length'] == null ||",
          "180:     headers['content-length'] > 10000",
          "181:   ) {",
          "182:     throw new Parse.Error(",
          "183:       Parse.Error.OBJECT_NOT_FOUND,",
          "184:       'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.'",
          "185:     );",
          "186:   }",
          "187:   ca.cert = pki.certificateFromPem(certificate);",
          "188:   ca.url = options.rootCertificateUrl;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5ffb9502232c03fe87692724e9d6449ac66ad00",
      "candidate_info": {
        "commit_hash": "a5ffb9502232c03fe87692724e9d6449ac66ad00",
        "repo": "parse-community/parse-server",
        "commit_url": "https://github.com/parse-community/parse-server/commit/a5ffb9502232c03fe87692724e9d6449ac66ad00",
        "files": [
          "spec/AuthenticationAdapters.spec.js",
          "spec/batch.spec.js",
          "src/Adapters/Auth/gcenter.js",
          "src/Adapters/Auth/oauth2.js",
          "src/Adapters/Storage/Postgres/PostgresConfigParser.js",
          "src/Controllers/LoggerController.js",
          "src/Controllers/index.js",
          "src/ParseServerRESTController.js",
          "src/batch.js"
        ],
        "message": "refactor: remove deprecated `url.parse()` method (#7751)",
        "before_after_code_files": [
          "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js",
          "spec/batch.spec.js||spec/batch.spec.js",
          "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js",
          "src/Adapters/Auth/oauth2.js||src/Adapters/Auth/oauth2.js",
          "src/Adapters/Storage/Postgres/PostgresConfigParser.js||src/Adapters/Storage/Postgres/PostgresConfigParser.js",
          "src/Controllers/LoggerController.js||src/Controllers/LoggerController.js",
          "src/Controllers/index.js||src/Controllers/index.js",
          "src/ParseServerRESTController.js||src/ParseServerRESTController.js",
          "src/batch.js||src/batch.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js",
            "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js"
          ],
          "candidate": [
            "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js",
            "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js"
          ]
        }
      },
      "candidate_diff": {
        "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js": [
          "File: spec/AuthenticationAdapters.spec.js -> spec/AuthenticationAdapters.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1707:       expect(e.message).toBe('Apple Game Center - invalid publicKeyUrl: invalid.com');",
          "1708:     }",
          "1709:   });",
          "1710: });",
          "1712: describe('phant auth adapter', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1711:   it('validateAuthData invalid public key http url', async () => {",
          "1712:     const authData = {",
          "1713:       id: 'G:1965586982',",
          "1714:       publicKeyUrl: 'http://static.gc.apple.com/public-key/gc-prod-4.cer',",
          "1715:       timestamp: 1565257031287,",
          "1716:       signature: '1234',",
          "1717:       salt: 'DzqqrQ==',",
          "1718:       bundleId: 'cloud.xtralife.gamecenterauth',",
          "1719:     };",
          "1721:     try {",
          "1722:       await gcenter.validateAuthData(authData);",
          "1723:       fail();",
          "1724:     } catch (e) {",
          "1725:       expect(e.message).toBe('Apple Game Center - invalid publicKeyUrl: http://static.gc.apple.com/public-key/gc-prod-4.cer');",
          "1726:     }",
          "1727:   });",
          "",
          "---------------"
        ],
        "spec/batch.spec.js||spec/batch.spec.js": [
          "File: spec/batch.spec.js -> spec/batch.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:     expect(internalURL).toEqual('/classes/Object');",
          "112:   });",
          "114:   it('should handle a batch request without transaction', async () => {",
          "115:     spyOn(databaseAdapter, 'createObject').and.callThrough();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:   it('should return the proper url with bad url provided', () => {",
          "115:     const originalURL = '/parse/batch';",
          "116:     const internalURL = batch.makeBatchRoutingPathFunction(",
          "117:       originalURL,",
          "118:       'badurl.com',",
          "119:       publicServerURL",
          "120:     )('/parse/classes/Object');",
          "122:     expect(internalURL).toEqual('/classes/Object');",
          "123:   });",
          "125:   it('should return the proper url with bad public url provided', () => {",
          "126:     const originalURL = '/parse/batch';",
          "127:     const internalURL = batch.makeBatchRoutingPathFunction(",
          "128:       originalURL,",
          "129:       serverURLNaked,",
          "130:       'badurl.com'",
          "131:     )('/parse/classes/Object');",
          "133:     expect(internalURL).toEqual('/classes/Object');",
          "134:   });",
          "",
          "---------------"
        ],
        "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js": [
          "File: src/Adapters/Auth/gcenter.js -> src/Adapters/Auth/gcenter.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: const { Parse } = require('parse/node');",
          "15: const crypto = require('crypto');",
          "16: const https = require('https');",
          "19: const cache = {}; // (publicKey -> cert) cache",
          "21: function verifyPublicKeyUrl(publicKeyUrl) {",
          "24:     return false;",
          "25:   }",
          "31: }",
          "33: function convertX509CertToPEM(X509Cert) {",
          "",
          "[Removed Lines]",
          "17: const url = require('url');",
          "22:   const parsedUrl = url.parse(publicKeyUrl);",
          "23:   if (parsedUrl.protocol !== 'https:') {",
          "26:   const hostnameParts = parsedUrl.hostname.split('.');",
          "27:   const length = hostnameParts.length;",
          "28:   const domainParts = hostnameParts.slice(length - 2, length);",
          "29:   const domain = domainParts.join('.');",
          "30:   return domain === 'apple.com';",
          "",
          "[Added Lines]",
          "21:   try {",
          "22:     const parsedUrl = new URL(publicKeyUrl);",
          "23:     if (parsedUrl.protocol !== 'https:') {",
          "24:       return false;",
          "25:     }",
          "26:     const hostnameParts = parsedUrl.hostname.split('.');",
          "27:     const length = hostnameParts.length;",
          "28:     const domainParts = hostnameParts.slice(length - 2, length);",
          "29:     const domain = domainParts.join('.');",
          "30:     return domain === 'apple.com';",
          "31:   } catch(error) {",
          "",
          "---------------"
        ],
        "src/Adapters/Auth/oauth2.js||src/Adapters/Auth/oauth2.js": [
          "File: src/Adapters/Auth/oauth2.js -> src/Adapters/Auth/oauth2.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: const Parse = require('parse/node').Parse;",
          "58: const querystring = require('querystring');",
          "59: const httpsRequest = require('./httpsRequest');",
          "",
          "[Removed Lines]",
          "57: const url = require('url');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:   if (!options || !options.tokenIntrospectionEndpointUrl) {",
          "113:     throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, MISSING_URL);",
          "114:   }",
          "116:   const postData = querystring.stringify({",
          "117:     token: access_token,",
          "118:   });",
          "",
          "[Removed Lines]",
          "115:   const parsedUrl = url.parse(options.tokenIntrospectionEndpointUrl);",
          "",
          "[Added Lines]",
          "114:   const parsedUrl = new URL(options.tokenIntrospectionEndpointUrl);",
          "",
          "---------------"
        ],
        "src/Adapters/Storage/Postgres/PostgresConfigParser.js||src/Adapters/Storage/Postgres/PostgresConfigParser.js": [
          "File: src/Adapters/Storage/Postgres/PostgresConfigParser.js -> src/Adapters/Storage/Postgres/PostgresConfigParser.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: const fs = require('fs');",
          "3: function getDatabaseOptionsFromURI(uri) {",
          "4:   const databaseOptions = {};",
          "10:   databaseOptions.host = parsedURI.hostname || 'localhost';",
          "11:   databaseOptions.port = parsedURI.port ? parseInt(parsedURI.port) : 5432;",
          "12:   databaseOptions.database = parsedURI.pathname ? parsedURI.pathname.substr(1) : undefined;",
          "17:   if (queryParams.ssl && queryParams.ssl.toLowerCase() === 'true') {",
          "18:     databaseOptions.ssl = true;",
          "",
          "[Removed Lines]",
          "1: const url = require('url');",
          "6:   const parsedURI = url.parse(uri);",
          "7:   const queryParams = parseQueryParams(parsedURI.query);",
          "8:   const authParts = parsedURI.auth ? parsedURI.auth.split(':') : [];",
          "14:   databaseOptions.user = authParts.length > 0 ? authParts[0] : '';",
          "15:   databaseOptions.password = authParts.length > 1 ? authParts[1] : '';",
          "",
          "[Added Lines]",
          "5:   const parsedURI = new URL(uri);",
          "6:   const queryParams = parseQueryParams(parsedURI.searchParams.toString());",
          "12:   databaseOptions.user = parsedURI.username;",
          "13:   databaseOptions.password = parsedURI.password;",
          "",
          "---------------"
        ],
        "src/Controllers/LoggerController.js||src/Controllers/LoggerController.js": [
          "File: src/Controllers/LoggerController.js -> src/Controllers/LoggerController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { Parse } from 'parse/node';",
          "2: import AdaptableController from './AdaptableController';",
          "3: import { LoggerAdapter } from '../Adapters/Logger/LoggerAdapter';",
          "6: const MILLISECONDS_IN_A_DAY = 24 * 60 * 60 * 1000;",
          "7: const LOG_STRING_TRUNCATE_LENGTH = 1000;",
          "",
          "[Removed Lines]",
          "4: import url from 'url';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     });",
          "39:   }",
          "44:     let sanitizedQuery = '?';",
          "47:       if (key !== 'password') {",
          "50:       } else {",
          "52:         sanitizedQuery += key + '=' + '********' + '&';",
          "",
          "[Removed Lines]",
          "41:   maskSensitiveUrl(urlString) {",
          "42:     const urlObj = url.parse(urlString, true);",
          "43:     const query = urlObj.query;",
          "46:     for (const key in query) {",
          "49:         sanitizedQuery += key + '=' + query[key] + '&';",
          "",
          "[Added Lines]",
          "40:   maskSensitiveUrl(path) {",
          "41:     const urlString = 'http://localhost' + path; // prepend dummy string to make a real URL",
          "42:     const urlObj = new URL(urlString);",
          "43:     const query = urlObj.searchParams;",
          "46:     for (const [key, value] of query) {",
          "49:         sanitizedQuery += key + '=' + value + '&';",
          "",
          "---------------"
        ],
        "src/Controllers/index.js||src/Controllers/index.js": [
          "File: src/Controllers/index.js -> src/Controllers/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import { ParseServerOptions } from '../Options';",
          "3: import { loadAdapter } from '../Adapters/AdapterLoader';",
          "4: import defaults from '../defaults';",
          "7: import { LoggerController } from './LoggerController';",
          "8: import { FilesController } from './FilesController';",
          "",
          "[Removed Lines]",
          "5: import url from 'url';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "220: export function getDatabaseAdapter(databaseURI, collectionPrefix, databaseOptions) {",
          "221:   let protocol;",
          "222:   try {",
          "224:     protocol = parsedURI.protocol ? parsedURI.protocol.toLowerCase() : null;",
          "225:   } catch (e) {",
          "",
          "[Removed Lines]",
          "223:     const parsedURI = url.parse(databaseURI);",
          "",
          "[Added Lines]",
          "222:     const parsedURI = new URL(databaseURI);",
          "",
          "---------------"
        ],
        "src/ParseServerRESTController.js||src/ParseServerRESTController.js": [
          "File: src/ParseServerRESTController.js -> src/ParseServerRESTController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: const Config = require('./Config');",
          "2: const Auth = require('./Auth');",
          "3: const RESTController = require('parse/lib/node/RESTController');",
          "5: const Parse = require('parse/node');",
          "7: function getSessionToken(options) {",
          "",
          "[Removed Lines]",
          "4: const URL = require('url');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     if (!config) {",
          "39:       config = Config.get(applicationId);",
          "40:     }",
          "44:     }",
          "46:     if (path[0] !== '/') {",
          "",
          "[Removed Lines]",
          "41:     const serverURL = URL.parse(config.serverURL);",
          "42:     if (path.indexOf(serverURL.path) === 0) {",
          "43:       path = path.slice(serverURL.path.length, path.length);",
          "",
          "[Added Lines]",
          "40:     const serverURL = new URL(config.serverURL);",
          "41:     if (path.indexOf(serverURL.pathname) === 0) {",
          "42:       path = path.slice(serverURL.pathname.length, path.length);",
          "",
          "---------------"
        ],
        "src/batch.js||src/batch.js": [
          "File: src/batch.js -> src/batch.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: const Parse = require('parse/node').Parse;",
          "3: const path = require('path');",
          "5: const batchPath = '/batch';",
          "",
          "[Removed Lines]",
          "2: const url = require('url');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11:   });",
          "12: }",
          "17:   }",
          "19: }",
          "21: function makeBatchRoutingPathFunction(originalUrl, serverURL, publicServerURL) {",
          "",
          "[Removed Lines]",
          "14: function parseURL(URL) {",
          "15:   if (typeof URL === 'string') {",
          "16:     return url.parse(URL);",
          "18:   return undefined;",
          "",
          "[Added Lines]",
          "13: function parseURL(urlString) {",
          "14:   try {",
          "15:     return new URL(urlString);",
          "16:   } catch(error) {",
          "17:     return undefined;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "33:     return path.posix.join('/', requestPath.slice(apiPrefix.length));",
          "34:   };",
          "41:     apiPrefix = localPath;",
          "",
          "[Removed Lines]",
          "36:   if (serverURL && publicServerURL && serverURL.path != publicServerURL.path) {",
          "37:     const localPath = serverURL.path;",
          "38:     const publicPath = publicServerURL.path;",
          "",
          "[Added Lines]",
          "36:   if (serverURL && publicServerURL && serverURL.pathname != publicServerURL.pathname) {",
          "37:     const localPath = serverURL.pathname;",
          "38:     const publicPath = publicServerURL.pathname;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75af9a26cc8e9e88a33d1e452c93a0ee6e509f17",
      "candidate_info": {
        "commit_hash": "75af9a26cc8e9e88a33d1e452c93a0ee6e509f17",
        "repo": "parse-community/parse-server",
        "commit_url": "https://github.com/parse-community/parse-server/commit/75af9a26cc8e9e88a33d1e452c93a0ee6e509f17",
        "files": [
          "changelogs/CHANGELOG_release.md",
          "package-lock.json",
          "package.json",
          "spec/AuthenticationAdapters.spec.js",
          "src/Adapters/Auth/gcenter.js"
        ],
        "message": "fix: certificate in Apple Game Center auth adapter not validated [skip release] (#8058)",
        "before_after_code_files": [
          "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js",
          "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js",
            "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js"
          ],
          "candidate": [
            "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js",
            "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js"
          ]
        }
      },
      "candidate_diff": {
        "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js": [
          "File: spec/AuthenticationAdapters.spec.js -> spec/AuthenticationAdapters.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1682:   const gcenter = require('../lib/Adapters/Auth/gcenter');",
          "1683:   const fs = require('fs');",
          "1684:   const testCert = fs.readFileSync(__dirname + '/support/cert/game_center.pem');",
          "1685:   it('validateAuthData should validate', async () => {",
          "1687:     const authData = {",
          "1688:       id: 'G:1965586982',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1686:   it('can load adapter', async () => {",
          "1687:     const options = {",
          "1688:       gcenter: {",
          "1689:         rootCertificateUrl:",
          "1690:           'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem',",
          "1691:       },",
          "1692:     };",
          "1693:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1694:       'gcenter',",
          "1695:       options",
          "1696:     );",
          "1697:     await adapter.validateAppId(",
          "1698:       appIds,",
          "1699:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1700:       providerOptions",
          "1701:     );",
          "1702:   });",
          "1705:     const options = {",
          "1706:       gcenter: {",
          "1707:         rootCertificateUrl:",
          "1708:           'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem',",
          "1709:       },",
          "1710:     };",
          "1711:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1712:       'gcenter',",
          "1713:       options",
          "1714:     );",
          "1715:     await adapter.validateAppId(",
          "1716:       appIds,",
          "1717:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1718:       providerOptions",
          "1719:     );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1698:   });",
          "1700:   it('validateAuthData invalid signature id', async () => {",
          "1701:     const authData = {",
          "1702:       id: 'G:1965586982',",
          "1703:       publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-6.cer',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1735:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1736:       'gcenter',",
          "1737:       {}",
          "1738:     );",
          "1739:     await adapter.validateAppId(",
          "1740:       appIds,",
          "1741:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1742:       providerOptions",
          "1743:     );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1712:   });",
          "1714:   it('validateAuthData invalid public key http url', async () => {",
          "1715:     const publicKeyUrls = [",
          "1716:       'example.com',",
          "1717:       'http://static.gc.apple.com/public-key/gc-prod-4.cer',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1758:     const options = {",
          "1759:       gcenter: {",
          "1760:         rootCertificateUrl:",
          "1761:           'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem',",
          "1762:       },",
          "1763:     };",
          "1764:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1765:       'gcenter',",
          "1766:       options",
          "1767:     );",
          "1768:     await adapter.validateAppId(",
          "1769:       appIds,",
          "1770:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1771:       providerOptions",
          "1772:     );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1739:       )",
          "1740:     );",
          "1741:   });",
          "1742: });",
          "1744: describe('phant auth adapter', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1801:   it('should not validate Symantec Cert', async () => {",
          "1802:     const options = {",
          "1803:       gcenter: {",
          "1804:         rootCertificateUrl:",
          "1805:           'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem',",
          "1806:       },",
          "1807:     };",
          "1808:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1809:       'gcenter',",
          "1810:       options",
          "1811:     );",
          "1812:     await adapter.validateAppId(",
          "1813:       appIds,",
          "1814:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1815:       providerOptions",
          "1816:     );",
          "1817:     expect(() =>",
          "1818:       gcenter.verifyPublicKeyIssuer(",
          "1819:         testCert,",
          "1820:         'https://static.gc.apple.com/public-key/gc-prod-4.cer'",
          "1821:       )",
          "1822:     );",
          "1823:   });",
          "1825:   it('adapter should load default cert', async () => {",
          "1826:     const options = {",
          "1827:       gcenter: {},",
          "1828:     };",
          "1829:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1830:       'gcenter',",
          "1831:       options",
          "1832:     );",
          "1833:     await adapter.validateAppId(",
          "1834:       appIds,",
          "1835:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1836:       providerOptions",
          "1837:     );",
          "1838:     const previous = new Date();",
          "1839:     await adapter.validateAppId(",
          "1840:       appIds,",
          "1841:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1842:       providerOptions",
          "1843:     );",
          "1845:     const duration = new Date().getTime() - previous.getTime();",
          "1846:     expect(duration).toEqual(0);",
          "1847:   });",
          "1849:   it('adapter should throw', async () => {",
          "1850:     const options = {",
          "1851:       gcenter: {",
          "1852:         rootCertificateUrl: 'https://example.com',",
          "1853:       },",
          "1854:     };",
          "1855:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1856:       'gcenter',",
          "1857:       options",
          "1858:     );",
          "1859:     await expectAsync(",
          "1860:       adapter.validateAppId(",
          "1861:         appIds,",
          "1862:         { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1863:         providerOptions",
          "1864:       )",
          "1865:     ).toBeRejectedWith(",
          "1866:       new Parse.Error(",
          "1867:         Parse.Error.OBJECT_NOT_FOUND,",
          "1868:         'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.'",
          "1869:       )",
          "1870:     );",
          "1871:   });",
          "",
          "---------------"
        ],
        "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js": [
          "File: src/Adapters/Auth/gcenter.js -> src/Adapters/Auth/gcenter.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: const { Parse } = require('parse/node');",
          "15: const crypto = require('crypto');",
          "16: const https = require('https');",
          "18: const cache = {}; // (publicKey -> cert) cache",
          "20: function verifyPublicKeyUrl(publicKeyUrl) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: const { pki } = require('node-forge');",
          "18: const ca = { cert: null, url: null };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:     path: url.pathname,",
          "53:     method: 'HEAD',",
          "54:   };",
          "56:     https.get(headOptions, res => resolve(res.headers)).on('error', reject)",
          "57:   );",
          "58:   if (",
          "62:   ) {",
          "63:     throw new Parse.Error(",
          "64:       Parse.Error.OBJECT_NOT_FOUND,",
          "65:       `Apple Game Center - invalid publicKeyUrl: ${publicKeyUrl}`",
          "66:     );",
          "67:   }",
          "68:   return new Promise((resolve, reject) => {",
          "69:     https",
          "72:         res.on('data', chunk => {",
          "74:         });",
          "75:         res.on('end', () => {",
          "86:           }",
          "88:         });",
          "89:       })",
          "90:       .on('error', reject);",
          "",
          "[Removed Lines]",
          "55:   const headers = await new Promise((resolve, reject) =>",
          "59:     headers['content-type'] !== 'application/pkix-cert' ||",
          "60:     headers['content-length'] == null ||",
          "61:     headers['content-length'] > 10000",
          "70:       .get(publicKeyUrl, res => {",
          "71:         let data = '';",
          "73:           data += chunk.toString('base64');",
          "76:           const cert = convertX509CertToPEM(data);",
          "77:           if (res.headers['cache-control']) {",
          "78:             var expire = res.headers['cache-control'].match(/max-age=([0-9]+)/);",
          "79:             if (expire) {",
          "80:               cache[publicKeyUrl] = cert;",
          "82:               setTimeout(() => {",
          "83:                 delete cache[publicKeyUrl];",
          "84:               }, parseInt(expire[1], 10) * 1000);",
          "85:             }",
          "87:           resolve(cert);",
          "",
          "[Added Lines]",
          "56:   const cert_headers = await new Promise((resolve, reject) =>",
          "59:   const validContentTypes = ['application/x-x509-ca-cert', 'application/pkix-cert'];",
          "61:     !validContentTypes.includes(cert_headers['content-type']) ||",
          "62:     cert_headers['content-length'] == null ||",
          "63:     cert_headers['content-length'] > 10000",
          "70:   const { certificate, headers } = await getCertificate(publicKeyUrl);",
          "71:   if (headers['cache-control']) {",
          "72:     const expire = headers['cache-control'].match(/max-age=([0-9]+)/);",
          "73:     if (expire) {",
          "74:       cache[publicKeyUrl] = certificate;",
          "76:       setTimeout(() => {",
          "77:         delete cache[publicKeyUrl];",
          "78:       }, parseInt(expire[1], 10) * 1000);",
          "79:     }",
          "80:   }",
          "81:   return verifyPublicKeyIssuer(certificate, publicKeyUrl);",
          "82: }",
          "84: function getCertificate(url, buffer) {",
          "87:       .get(url, res => {",
          "88:         const data = [];",
          "90:           data.push(chunk);",
          "93:           if (buffer) {",
          "94:             resolve({ certificate: Buffer.concat(data), headers: res.headers });",
          "95:             return;",
          "97:           let cert = '';",
          "98:           for (const chunk of data) {",
          "99:             cert += chunk.toString('base64');",
          "100:           }",
          "101:           const certificate = convertX509CertToPEM(cert);",
          "102:           resolve({ certificate, headers: res.headers });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115:   }",
          "116: }",
          "119: async function validateAuthData(authData) {",
          "120:   if (!authData.id) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: function verifyPublicKeyIssuer(cert, publicKeyUrl) {",
          "134:   const publicKeyCert = pki.certificateFromPem(cert);",
          "135:   if (!ca.cert) {",
          "136:     throw new Parse.Error(",
          "137:       Parse.Error.OBJECT_NOT_FOUND,",
          "138:       'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.'",
          "139:     );",
          "140:   }",
          "141:   try {",
          "142:     if (!ca.cert.verify(publicKeyCert)) {",
          "143:       throw new Parse.Error(",
          "144:         Parse.Error.OBJECT_NOT_FOUND,",
          "145:         `Apple Game Center - invalid publicKeyUrl: ${publicKeyUrl}`",
          "146:       );",
          "147:     }",
          "148:   } catch (e) {",
          "149:     throw new Parse.Error(",
          "150:       Parse.Error.OBJECT_NOT_FOUND,",
          "151:       `Apple Game Center - invalid publicKeyUrl: ${publicKeyUrl}`",
          "152:     );",
          "153:   }",
          "154:   return cert;",
          "155: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126: }",
          "131: }",
          "133: module.exports = {",
          "",
          "[Removed Lines]",
          "129: function validateAppId() {",
          "130:   return Promise.resolve();",
          "",
          "[Added Lines]",
          "168: async function validateAppId(appIds, authData, options = {}) {",
          "169:   if (!options.rootCertificateUrl) {",
          "170:     options.rootCertificateUrl =",
          "171:       'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem';",
          "172:   }",
          "173:   if (ca.url === options.rootCertificateUrl) {",
          "174:     return;",
          "175:   }",
          "176:   const { certificate, headers } = await getCertificate(options.rootCertificateUrl, true);",
          "177:   if (",
          "178:     headers['content-type'] !== 'application/x-pem-file' ||",
          "179:     headers['content-length'] == null ||",
          "180:     headers['content-length'] > 10000",
          "181:   ) {",
          "182:     throw new Parse.Error(",
          "183:       Parse.Error.OBJECT_NOT_FOUND,",
          "184:       'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.'",
          "185:     );",
          "186:   }",
          "187:   ca.cert = pki.certificateFromPem(certificate);",
          "188:   ca.url = options.rootCertificateUrl;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba2b0a9cb9a568817a114b132a4c2e0911d76df1",
      "candidate_info": {
        "commit_hash": "ba2b0a9cb9a568817a114b132a4c2e0911d76df1",
        "repo": "parse-community/parse-server",
        "commit_url": "https://github.com/parse-community/parse-server/commit/ba2b0a9cb9a568817a114b132a4c2e0911d76df1",
        "files": [
          "release.config.js",
          "spec/AuthenticationAdapters.spec.js",
          "spec/support/cert/game_center.pem",
          "src/Adapters/Auth/gcenter.js"
        ],
        "message": "fix: certificate in Apple Game Center auth adapter not validated; this fixes a security vulnerability in which authentication could be bypassed using a fake certificate; if you are using the Apple Gamer Center auth adapter it is your responsibility to keep its root certificate up-to-date and we advice you read the security advisory ([GHSA-rh9j-f5f8-rvgc](https://github.com/parse-community/parse-server/security/advisories/GHSA-rh9j-f5f8-rvgc))",
        "before_after_code_files": [
          "release.config.js||release.config.js",
          "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js",
          "spec/support/cert/game_center.pem||spec/support/cert/game_center.pem",
          "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js",
            "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js"
          ],
          "candidate": [
            "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js",
            "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js"
          ]
        }
      },
      "candidate_diff": {
        "release.config.js||release.config.js": [
          "File: release.config.js -> release.config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:       ['@semantic-release/git', {",
          "84:         assets: [changelogFile, 'package.json', 'package-lock.json', 'npm-shrinkwrap.json'],",
          "85:       }],",
          "86:       [",
          "87:         \"@saithodev/semantic-release-backmerge\",",
          "88:         {",
          "89:           \"branches\": [",
          "90:             { from: \"beta\", to: \"alpha\" },",
          "91:             { from: \"release\", to: \"beta\" },",
          "93:           ]",
          "94:         }",
          "95:       ],",
          "101:     ],",
          "102:   };",
          "",
          "[Removed Lines]",
          "92:             { from: \"release\", to: \"alpha\" },",
          "96:       ['@semantic-release/github', {",
          "97:         successComment: getReleaseComment(),",
          "98:         labels: ['type:ci'],",
          "99:         releasedLabels: ['state:released<%= nextRelease.channel ? `-\\${nextRelease.channel}` : \"\" %>']",
          "100:       }],",
          "",
          "[Added Lines]",
          "86:       ['@semantic-release/github', {",
          "87:         successComment: getReleaseComment(),",
          "88:         labels: ['type:ci'],",
          "89:         releasedLabels: ['state:released<%= nextRelease.channel ? `-\\${nextRelease.channel}` : \"\" %>']",
          "90:       }],",
          "",
          "---------------"
        ],
        "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js": [
          "File: spec/AuthenticationAdapters.spec.js -> spec/AuthenticationAdapters.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1653: describe('Apple Game Center Auth adapter', () => {",
          "1654:   const gcenter = require('../lib/Adapters/Auth/gcenter');",
          "1656:   it('validateAuthData should validate', async () => {",
          "1658:     const authData = {",
          "1659:       id: 'G:1965586982',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1655:   const fs = require('fs');",
          "1656:   const testCert = fs.readFileSync(__dirname + '/support/cert/game_center.pem');",
          "1657:   it('can load adapter', async () => {",
          "1658:     const options = {",
          "1659:       gcenter: {",
          "1660:         rootCertificateUrl:",
          "1661:           'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem',",
          "1662:       },",
          "1663:     };",
          "1664:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1665:       'gcenter',",
          "1666:       options",
          "1667:     );",
          "1668:     await adapter.validateAppId(",
          "1669:       appIds,",
          "1670:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1671:       providerOptions",
          "1672:     );",
          "1673:   });",
          "1675:     const options = {",
          "1676:       gcenter: {",
          "1677:         rootCertificateUrl:",
          "1678:           'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem',",
          "1679:       },",
          "1680:     };",
          "1681:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1682:       'gcenter',",
          "1683:       options",
          "1684:     );",
          "1685:     await adapter.validateAppId(",
          "1686:       appIds,",
          "1687:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1688:       providerOptions",
          "1689:     );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1664:       salt: 'DzqqrQ==',",
          "1665:       bundleId: 'cloud.xtralife.gamecenterauth',",
          "1666:     };",
          "1668:     await gcenter.validateAuthData(authData);",
          "1669:   });",
          "1671:   it('validateAuthData invalid signature id', async () => {",
          "1672:     const authData = {",
          "1673:       id: 'G:1965586982',",
          "1675:       timestamp: 1565257031287,",
          "1676:       signature: '1234',",
          "1677:       salt: 'DzqqrQ==',",
          "1679:     };",
          "1687:   });",
          "1689:   it('validateAuthData invalid public key http url', async () => {",
          "1690:     const publicKeyUrls = [",
          "1691:       'example.com',",
          "1692:       'http://static.gc.apple.com/public-key/gc-prod-4.cer',",
          "",
          "[Removed Lines]",
          "1674:       publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer',",
          "1678:       bundleId: 'cloud.xtralife.gamecenterauth',",
          "1681:     try {",
          "1682:       await gcenter.validateAuthData(authData);",
          "1683:       fail();",
          "1684:     } catch (e) {",
          "1685:       expect(e.message).toBe('Apple Game Center - invalid signature');",
          "1686:     }",
          "",
          "[Added Lines]",
          "1700:     gcenter.cache['https://static.gc.apple.com/public-key/gc-prod-4.cer'] = testCert;",
          "1705:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1706:       'gcenter',",
          "1707:       {}",
          "1708:     );",
          "1709:     await adapter.validateAppId(",
          "1710:       appIds,",
          "1711:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1712:       providerOptions",
          "1713:     );",
          "1716:       publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-6.cer',",
          "1720:       bundleId: 'com.example.com',",
          "1722:     await expectAsync(gcenter.validateAuthData(authData)).toBeRejectedWith(",
          "1723:       new Parse.Error(Parse.Error.SCRIPT_FAILED, 'Apple Game Center - invalid signature')",
          "1724:     );",
          "1728:     const options = {",
          "1729:       gcenter: {",
          "1730:         rootCertificateUrl:",
          "1731:           'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem',",
          "1732:       },",
          "1733:     };",
          "1734:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1735:       'gcenter',",
          "1736:       options",
          "1737:     );",
          "1738:     await adapter.validateAppId(",
          "1739:       appIds,",
          "1740:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1741:       providerOptions",
          "1742:     );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1714:       )",
          "1715:     );",
          "1716:   });",
          "1717: });",
          "1719: describe('phant auth adapter', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1771:   it('should not validate Symantec Cert', async () => {",
          "1772:     const options = {",
          "1773:       gcenter: {",
          "1774:         rootCertificateUrl:",
          "1775:           'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem',",
          "1776:       },",
          "1777:     };",
          "1778:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1779:       'gcenter',",
          "1780:       options",
          "1781:     );",
          "1782:     await adapter.validateAppId(",
          "1783:       appIds,",
          "1784:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1785:       providerOptions",
          "1786:     );",
          "1787:     expect(() =>",
          "1788:       gcenter.verifyPublicKeyIssuer(",
          "1789:         testCert,",
          "1790:         'https://static.gc.apple.com/public-key/gc-prod-4.cer'",
          "1791:       )",
          "1792:     );",
          "1793:   });",
          "1795:   it('adapter should load default cert', async () => {",
          "1796:     const options = {",
          "1797:       gcenter: {},",
          "1798:     };",
          "1799:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1800:       'gcenter',",
          "1801:       options",
          "1802:     );",
          "1803:     await adapter.validateAppId(",
          "1804:       appIds,",
          "1805:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1806:       providerOptions",
          "1807:     );",
          "1808:     const previous = new Date();",
          "1809:     await adapter.validateAppId(",
          "1810:       appIds,",
          "1811:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1812:       providerOptions",
          "1813:     );",
          "1815:     const duration = new Date().getTime() - previous.getTime();",
          "1816:     expect(duration).toEqual(0);",
          "1817:   });",
          "1819:   it('adapter should throw', async () => {",
          "1820:     const options = {",
          "1821:       gcenter: {",
          "1822:         rootCertificateUrl: 'https://example.com',",
          "1823:       },",
          "1824:     };",
          "1825:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1826:       'gcenter',",
          "1827:       options",
          "1828:     );",
          "1829:     await expectAsync(",
          "1830:       adapter.validateAppId(",
          "1831:         appIds,",
          "1832:         { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1833:         providerOptions",
          "1834:       )",
          "1835:     ).toBeRejectedWith(",
          "1836:       new Parse.Error(",
          "1837:         Parse.Error.OBJECT_NOT_FOUND,",
          "1838:         'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.'",
          "1839:       )",
          "1840:     );",
          "1841:   });",
          "",
          "---------------"
        ],
        "spec/support/cert/game_center.pem||spec/support/cert/game_center.pem": [
          "File: spec/support/cert/game_center.pem -> spec/support/cert/game_center.pem",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: -----BEGIN CERTIFICATE-----",
          "2: MIIEvDCCA6SgAwIBAgIQXRHxNXkw1L9z5/3EZ/T/hDANBgkqhkiG9w0BAQsFADB/",
          "3: MQswCQYDVQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9yYXRpb24xHzAd",
          "4: BgNVBAsTFlN5bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5bWFudGVj",
          "5: IENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmluZyBDQTAeFw0xODA5MTcwMDAwMDBa",
          "6: Fw0xOTA5MTcyMzU5NTlaMHMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9y",
          "7: bmlhMRIwEAYDVQQHDAlDdXBlcnRpbm8xFDASBgNVBAoMC0FwcGxlLCBJbmMuMQ8w",
          "8: DQYDVQQLDAZHQyBTUkUxFDASBgNVBAMMC0FwcGxlLCBJbmMuMIIBIjANBgkqhkiG",
          "9: 9w0BAQEFAAOCAQ8AMIIBCgKCAQEA06fwIi8fgKrTQu7cBcFkJVF6+Tqvkg7MKJTM",
          "10: IOYPPQtPF3AZYPsbUoRKAD7/JXrxxOSVJ7vU1mP77tYG8TcUteZ3sAwvt2dkRbm7",
          "11: ZO6DcmSggv1Dg4k3goNw4GYyCY4Z2/8JSmsQ80Iv/UOOwynpBziEeZmJ4uck6zlA",
          "12: 17cDkH48LBpKylaqthym5bFs9gj11pto7mvyb5BTcVuohwi6qosvbs/4VGbC2Nsz",
          "13: ie416nUZfv+xxoXH995gxR2mw5cDdeCew7pSKxEhvYjT2nVdQF0q/hnPMFnOaEyT",
          "14: q79n3gwFXyt0dy8eP6KBF7EW9J6b7ubu/j7h+tQfxPM+gTXOBQIDAQABo4IBPjCC",
          "15: ATowCQYDVR0TBAIwADAOBgNVHQ8BAf8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUH",
          "16: AwMwYQYDVR0gBFowWDBWBgZngQwBBAEwTDAjBggrBgEFBQcCARYXaHR0cHM6Ly9k",
          "17: LnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUHAgIwGQwXaHR0cHM6Ly9kLnN5bWNiLmNv",
          "18: bS9ycGEwHwYDVR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYDVR0fBCQw",
          "19: IjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNvbS9zdi5jcmwwVwYIKwYBBQUHAQEE",
          "20: SzBJMB8GCCsGAQUFBzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUFBzAC",
          "21: hhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDANBgkqhkiG9w0BAQsFAAOCAQEA",
          "22: I/j/PcCNPebSAGrcqSFBSa2mmbusOX01eVBg8X0G/z8Z+ZWUfGFzDG0GQf89MPxV",
          "23: woec+nZuqui7o9Bg8s8JbHV0TC52X14CbTj9w/qBF748WbH9gAaTkrJYPm+MlNhu",
          "24: tjEuQdNl/YXVMvQW4O8UMHTi09GyJQ0NC4q92Wxvx1m/qzjvTLvrXHGQ9pEHhPyz",
          "25: vfBLxQkWpNoCNKU7UeESyH06XOrGc9MsII9deeKsDJp9a0jtx+pP4MFVtFME9SSQ",
          "26: tMBs0It7WwEf7qcRLpialxKwY2EzQ9g4WnANHqo18PrDBE10TFpZPzUh7JhMViVr",
          "27: EEbl0YdElmF8Hlamah/yNw==",
          "28: -----END CERTIFICATE-----",
          "",
          "---------------"
        ],
        "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js": [
          "File: src/Adapters/Auth/gcenter.js -> src/Adapters/Auth/gcenter.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: const { Parse } = require('parse/node');",
          "15: const crypto = require('crypto');",
          "16: const https = require('https');",
          "18: const cache = {}; // (publicKey -> cert) cache",
          "20: function verifyPublicKeyUrl(publicKeyUrl) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: const { pki } = require('node-forge');",
          "18: const ca = { cert: null, url: null };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:     path: url.pathname,",
          "53:     method: 'HEAD',",
          "54:   };",
          "56:     https.get(headOptions, res => resolve(res.headers)).on('error', reject)",
          "57:   );",
          "58:   if (",
          "62:   ) {",
          "63:     throw new Parse.Error(",
          "64:       Parse.Error.OBJECT_NOT_FOUND,",
          "65:       `Apple Game Center - invalid publicKeyUrl: ${publicKeyUrl}`",
          "66:     );",
          "67:   }",
          "68:   return new Promise((resolve, reject) => {",
          "69:     https",
          "72:         res.on('data', chunk => {",
          "74:         });",
          "75:         res.on('end', () => {",
          "86:           }",
          "88:         });",
          "89:       })",
          "90:       .on('error', reject);",
          "",
          "[Removed Lines]",
          "55:   const headers = await new Promise((resolve, reject) =>",
          "59:     headers['content-type'] !== 'application/pkix-cert' ||",
          "60:     headers['content-length'] == null ||",
          "61:     headers['content-length'] > 10000",
          "70:       .get(publicKeyUrl, res => {",
          "71:         let data = '';",
          "73:           data += chunk.toString('base64');",
          "76:           const cert = convertX509CertToPEM(data);",
          "77:           if (res.headers['cache-control']) {",
          "78:             var expire = res.headers['cache-control'].match(/max-age=([0-9]+)/);",
          "79:             if (expire) {",
          "80:               cache[publicKeyUrl] = cert;",
          "82:               setTimeout(() => {",
          "83:                 delete cache[publicKeyUrl];",
          "84:               }, parseInt(expire[1], 10) * 1000);",
          "85:             }",
          "87:           resolve(cert);",
          "",
          "[Added Lines]",
          "56:   const cert_headers = await new Promise((resolve, reject) =>",
          "59:   const validContentTypes = ['application/x-x509-ca-cert', 'application/pkix-cert'];",
          "61:     !validContentTypes.includes(cert_headers['content-type']) ||",
          "62:     cert_headers['content-length'] == null ||",
          "63:     cert_headers['content-length'] > 10000",
          "70:   const { certificate, headers } = await getCertificate(publicKeyUrl);",
          "71:   if (headers['cache-control']) {",
          "72:     const expire = headers['cache-control'].match(/max-age=([0-9]+)/);",
          "73:     if (expire) {",
          "74:       cache[publicKeyUrl] = certificate;",
          "76:       setTimeout(() => {",
          "77:         delete cache[publicKeyUrl];",
          "78:       }, parseInt(expire[1], 10) * 1000);",
          "79:     }",
          "80:   }",
          "81:   return verifyPublicKeyIssuer(certificate, publicKeyUrl);",
          "82: }",
          "84: function getCertificate(url, buffer) {",
          "87:       .get(url, res => {",
          "88:         const data = [];",
          "90:           data.push(chunk);",
          "93:           if (buffer) {",
          "94:             resolve({ certificate: Buffer.concat(data), headers: res.headers });",
          "95:             return;",
          "97:           let cert = '';",
          "98:           for (const chunk of data) {",
          "99:             cert += chunk.toString('base64');",
          "100:           }",
          "101:           const certificate = convertX509CertToPEM(cert);",
          "102:           resolve({ certificate, headers: res.headers });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115:   }",
          "116: }",
          "119: async function validateAuthData(authData) {",
          "120:   if (!authData.id) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: function verifyPublicKeyIssuer(cert, publicKeyUrl) {",
          "134:   const publicKeyCert = pki.certificateFromPem(cert);",
          "135:   if (!ca.cert) {",
          "136:     throw new Parse.Error(",
          "137:       Parse.Error.OBJECT_NOT_FOUND,",
          "138:       'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.'",
          "139:     );",
          "140:   }",
          "141:   try {",
          "142:     if (!ca.cert.verify(publicKeyCert)) {",
          "143:       throw new Parse.Error(",
          "144:         Parse.Error.OBJECT_NOT_FOUND,",
          "145:         `Apple Game Center - invalid publicKeyUrl: ${publicKeyUrl}`",
          "146:       );",
          "147:     }",
          "148:   } catch (e) {",
          "149:     throw new Parse.Error(",
          "150:       Parse.Error.OBJECT_NOT_FOUND,",
          "151:       `Apple Game Center - invalid publicKeyUrl: ${publicKeyUrl}`",
          "152:     );",
          "153:   }",
          "154:   return cert;",
          "155: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126: }",
          "131: }",
          "133: module.exports = {",
          "134:   validateAppId,",
          "135:   validateAuthData,",
          "136: };",
          "",
          "[Removed Lines]",
          "129: function validateAppId() {",
          "130:   return Promise.resolve();",
          "",
          "[Added Lines]",
          "168: async function validateAppId(appIds, authData, options = {}) {",
          "169:   if (!options.rootCertificateUrl) {",
          "170:     options.rootCertificateUrl =",
          "171:       'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem';",
          "172:   }",
          "173:   if (ca.url === options.rootCertificateUrl) {",
          "174:     return;",
          "175:   }",
          "176:   const { certificate, headers } = await getCertificate(options.rootCertificateUrl, true);",
          "177:   if (",
          "178:     headers['content-type'] !== 'application/x-pem-file' ||",
          "179:     headers['content-length'] == null ||",
          "180:     headers['content-length'] > 10000",
          "181:   ) {",
          "182:     throw new Parse.Error(",
          "183:       Parse.Error.OBJECT_NOT_FOUND,",
          "184:       'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.'",
          "185:     );",
          "186:   }",
          "187:   ca.cert = pki.certificateFromPem(certificate);",
          "188:   ca.url = options.rootCertificateUrl;",
          "194:   cache,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1930a64e9c7e0d287b4ad9e57c6ee03b11b9cbc4",
      "candidate_info": {
        "commit_hash": "1930a64e9c7e0d287b4ad9e57c6ee03b11b9cbc4",
        "repo": "parse-community/parse-server",
        "commit_url": "https://github.com/parse-community/parse-server/commit/1930a64e9c7e0d287b4ad9e57c6ee03b11b9cbc4",
        "files": [
          "spec/AuthenticationAdapters.spec.js",
          "src/Adapters/Auth/gcenter.js"
        ],
        "message": "fix: authentication bypass and denial of service (DoS) vulnerabilities in Apple Game Center auth adapter (GHSA-qf8x-vqjv-92gr) (#7963)",
        "before_after_code_files": [
          "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js",
          "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js",
            "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js"
          ],
          "candidate": [
            "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js",
            "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js"
          ]
        }
      },
      "candidate_diff": {
        "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js": [
          "File: spec/AuthenticationAdapters.spec.js -> spec/AuthenticationAdapters.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1657:       bundleId: 'cloud.xtralife.gamecenterauth',",
          "1658:     };",
          "1665:   });",
          "1667:   it('validateAuthData invalid signature id', async () => {",
          "",
          "[Removed Lines]",
          "1660:     try {",
          "1661:       await gcenter.validateAuthData(authData);",
          "1662:     } catch (e) {",
          "1663:       fail();",
          "1664:     }",
          "",
          "[Added Lines]",
          "1660:     await gcenter.validateAuthData(authData);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1682:     }",
          "1683:   });",
          "1701:   });",
          "1702: });",
          "",
          "[Removed Lines]",
          "1685:   it('validateAuthData invalid public key url', async () => {",
          "1686:     const authData = {",
          "1687:       id: 'G:1965586982',",
          "1688:       publicKeyUrl: 'invalid.com',",
          "1689:       timestamp: 1565257031287,",
          "1690:       signature: '1234',",
          "1691:       salt: 'DzqqrQ==',",
          "1692:       bundleId: 'cloud.xtralife.gamecenterauth',",
          "1693:     };",
          "1695:     try {",
          "1696:       await gcenter.validateAuthData(authData);",
          "1697:       fail();",
          "1698:     } catch (e) {",
          "1699:       expect(e.message).toBe('Apple Game Center - invalid publicKeyUrl: invalid.com');",
          "1700:     }",
          "",
          "[Added Lines]",
          "1681:   it('validateAuthData invalid public key http url', async () => {",
          "1682:     const publicKeyUrls = [",
          "1683:       'example.com',",
          "1684:       'http://static.gc.apple.com/public-key/gc-prod-4.cer',",
          "1685:       'https://developer.apple.com/assets/elements/badges/download-on-the-app-store.svg',",
          "1686:       'https://example.com/ \\\\.apple.com/public_key.cer',",
          "1687:       'https://example.com/ &.apple.com/public_key.cer',",
          "1688:     ];",
          "1689:     await Promise.all(",
          "1690:       publicKeyUrls.map(publicKeyUrl =>",
          "1691:         expectAsync(",
          "1692:           gcenter.validateAuthData({",
          "1693:             id: 'G:1965586982',",
          "1694:             timestamp: 1565257031287,",
          "1695:             publicKeyUrl,",
          "1696:             signature: '1234',",
          "1697:             salt: 'DzqqrQ==',",
          "1698:             bundleId: 'com.example.com',",
          "1699:           })",
          "1700:         ).toBeRejectedWith(",
          "1701:           new Parse.Error(",
          "1702:             Parse.Error.SCRIPT_FAILED,",
          "1703:             `Apple Game Center - invalid publicKeyUrl: ${publicKeyUrl}`",
          "1704:           )",
          "1705:         )",
          "1706:       )",
          "1707:     );",
          "",
          "---------------"
        ],
        "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js": [
          "File: src/Adapters/Auth/gcenter.js -> src/Adapters/Auth/gcenter.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: const { Parse } = require('parse/node');",
          "15: const crypto = require('crypto');",
          "16: const https = require('https');",
          "19: const cache = {}; // (publicKey -> cert) cache",
          "21: function verifyPublicKeyUrl(publicKeyUrl) {",
          "24:     return false;",
          "25:   }",
          "31: }",
          "33: function convertX509CertToPEM(X509Cert) {",
          "",
          "[Removed Lines]",
          "17: const url = require('url');",
          "22:   const parsedUrl = url.parse(publicKeyUrl);",
          "23:   if (parsedUrl.protocol !== 'https:') {",
          "26:   const hostnameParts = parsedUrl.hostname.split('.');",
          "27:   const length = hostnameParts.length;",
          "28:   const domainParts = hostnameParts.slice(length - 2, length);",
          "29:   const domain = domainParts.join('.');",
          "30:   return domain === 'apple.com';",
          "",
          "[Added Lines]",
          "21:   try {",
          "22:     const regex = /^https:\\/\\/(?:[-_A-Za-z0-9]+\\.){0,}apple\\.com\\/.*\\.cer$/;",
          "23:     return regex.test(publicKeyUrl);",
          "24:   } catch (error) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:   return pemPreFix + certBody + pemPostFix;",
          "41: }",
          "44:   if (!verifyPublicKeyUrl(publicKeyUrl)) {",
          "45:     throw new Parse.Error(",
          "46:       Parse.Error.OBJECT_NOT_FOUND,",
          "",
          "[Removed Lines]",
          "43: function getAppleCertificate(publicKeyUrl) {",
          "",
          "[Added Lines]",
          "39: async function getAppleCertificate(publicKeyUrl) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:   if (cache[publicKeyUrl]) {",
          "51:     return cache[publicKeyUrl];",
          "52:   }",
          "53:   return new Promise((resolve, reject) => {",
          "54:     https",
          "55:       .get(publicKeyUrl, res => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:   const url = new URL(publicKeyUrl);",
          "50:   const headOptions = {",
          "51:     hostname: url.hostname,",
          "52:     path: url.pathname,",
          "53:     method: 'HEAD',",
          "54:   };",
          "55:   const headers = await new Promise((resolve, reject) =>",
          "56:     https.get(headOptions, res => resolve(res.headers)).on('error', reject)",
          "57:   );",
          "58:   if (",
          "59:     headers['content-type'] !== 'application/pkix-cert' ||",
          "60:     headers['content-length'] == null ||",
          "61:     headers['content-length'] > 10000",
          "62:   ) {",
          "63:     throw new Parse.Error(",
          "64:       Parse.Error.OBJECT_NOT_FOUND,",
          "65:       `Apple Game Center - invalid publicKeyUrl: ${publicKeyUrl}`",
          "66:     );",
          "67:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}