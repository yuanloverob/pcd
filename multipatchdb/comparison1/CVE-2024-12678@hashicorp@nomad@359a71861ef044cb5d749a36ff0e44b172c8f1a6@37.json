{
  "cve_id": "CVE-2024-12678",
  "cve_desc": "Nomad Community and Nomad Enterprise (\"Nomad\") allocations are vulnerable to privilege escalation within a namespace through unredacted workload identity tokens. This vulnerability, identified as CVE-2024-12678, is fixed in Nomad Community Edition 1.9.4 and Nomad Enterprise 1.9.4, 1.8.8, and 1.7.16.",
  "repo": "hashicorp/nomad",
  "patch_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
  "patch_info": {
    "commit_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "files": [
      ".changelog/24683.txt",
      "command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go",
      "nomad/structs/structs.go"
    ],
    "message": "Backport of sec: fix alloc workload identity namespace permission into release/1.9.x (#24685)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
    "before_after_code_files": [
      "command/agent/node_endpoint.go||command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go",
      "nomad/structs/structs.go||nomad/structs/structs.go"
    ]
  },
  "patch_diff": {
    "command/agent/node_endpoint.go||command/agent/node_endpoint.go": [
      "File: command/agent/node_endpoint.go -> command/agent/node_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   out.Allocs = make([]*structs.Allocation, 0)",
      "106:  }",
      "107:  for _, alloc := range out.Allocs {",
      "108:   alloc.SetEventDisplayMessages()",
      "109:  }",
      "110:  return out.Allocs, nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   alloc = alloc.Sanitize()",
      "",
      "---------------"
    ],
    "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go": [
      "File: nomad/alloc_endpoint.go -> nomad/alloc_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    }",
      "176:    if out != nil {",
      "178:     if !aclObj.AllowClientOp() && !allowNsOp(aclObj, out.Namespace) {",
      "179:      return structs.NewErrUnknownAllocation(args.AllocID)",
      "",
      "[Removed Lines]",
      "175:    reply.Alloc = out",
      "",
      "[Added Lines]",
      "176:     out = out.Sanitize()",
      "177:     reply.Alloc = out",
      "",
      "---------------"
    ],
    "nomad/structs/structs.go||nomad/structs/structs.go": [
      "File: nomad/structs/structs.go -> nomad/structs/structs.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11199:  return a.ID",
      "11200: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11205: func (a *Allocation) Sanitize() *Allocation {",
      "11206:  if a == nil {",
      "11207:   return nil",
      "11208:  }",
      "11210:  if a.SignedIdentities == nil {",
      "11211:   return a",
      "11212:  }",
      "11214:  clean := a.Copy()",
      "11215:  clean.SignedIdentities = nil",
      "11216:  return clean",
      "11217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f03260bce7ec0b13dd0eed03eacc7d64494eb9eb",
      "candidate_info": {
        "commit_hash": "f03260bce7ec0b13dd0eed03eacc7d64494eb9eb",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/f03260bce7ec0b13dd0eed03eacc7d64494eb9eb",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "sec: Update x/crypto and x/oauth2 to resolve scan failures (#25239)\n\nbackport of commit bc52ca314257d79d239449a2361df2ac9d168e57\n\nCo-authored-by: James Rasell <jrasell@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: module github.com/hashicorp/nomad",
          "6: replace (",
          "",
          "[Removed Lines]",
          "3: go 1.23",
          "",
          "[Added Lines]",
          "3: go 1.23.6",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:  github.com/zclconf/go-cty-yaml v1.1.0",
          "131:  go.etcd.io/bbolt v1.4.0",
          "132:  go.uber.org/goleak v1.2.1",
          "134:  golang.org/x/mod v0.22.0",
          "136:  golang.org/x/sys v0.30.0",
          "137:  golang.org/x/time v0.10.0",
          "138:  google.golang.org/grpc v1.69.4",
          "",
          "[Removed Lines]",
          "133:  golang.org/x/crypto v0.32.0",
          "135:  golang.org/x/sync v0.10.0",
          "",
          "[Added Lines]",
          "133:  golang.org/x/crypto v0.35.0",
          "135:  golang.org/x/sync v0.11.0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "327:  go.opentelemetry.io/otel/trace v1.34.0 // indirect",
          "328:  golang.org/x/exp v0.0.0-20241217172543-b2144cdd0a67 // indirect",
          "329:  golang.org/x/net v0.34.0 // indirect",
          "333:  golang.org/x/tools v0.28.0 // indirect",
          "334:  google.golang.org/api v0.217.0 // indirect",
          "335:  google.golang.org/genproto v0.0.0-20250115164207-1a7da9e5054f // indirect",
          "",
          "[Removed Lines]",
          "330:  golang.org/x/oauth2 v0.25.0 // indirect",
          "331:  golang.org/x/term v0.28.0 // indirect",
          "332:  golang.org/x/text v0.21.0 // indirect",
          "",
          "[Added Lines]",
          "330:  golang.org/x/oauth2 v0.27.0 // indirect",
          "331:  golang.org/x/term v0.29.0 // indirect",
          "332:  golang.org/x/text v0.22.0 // indirect",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "1763: golang.org/x/crypto v0.13.0/go.mod h1:y6Z2r+Rw4iayiXXAIxJIDAJ1zMW4yaTpebo8fPOliYc=",
          "1764: golang.org/x/crypto v0.19.0/go.mod h1:Iy9bg/ha4yyC70EfRS8jz+B6ybOBKMaSxLj6P6oBDfU=",
          "1765: golang.org/x/crypto v0.23.0/go.mod h1:CKFgDieR+mRhux2Lsu27y0fO304Db0wZe70UKqHu0v8=",
          "1767: golang.org/x/crypto v0.32.0/go.mod h1:ZnnJkOaASj8g0AjIduWNlq2NRxL0PlBrbKVyZ6V/Ugc=",
          "1768: golang.org/x/exp v0.0.0-20180321215751-8460e604b9de/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=",
          "1769: golang.org/x/exp v0.0.0-20180807140117-3d87b88a115f/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=",
          "1770: golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=",
          "",
          "[Removed Lines]",
          "1766: golang.org/x/crypto v0.32.0 h1:euUpcYgM8WcP71gNpTqQCn6rC2t6ULUPiOzfWaXVVfc=",
          "",
          "[Added Lines]",
          "1767: golang.org/x/crypto v0.35.0 h1:b15kiHdrGCHrP6LvwaQ3c03kgNhhiMgvlhxHQhmg2Xs=",
          "1768: golang.org/x/crypto v0.35.0/go.mod h1:dy7dXNW32cAb/6/PRuTNsix8T+vJAqvuIy5Bli/x0YQ=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1930: golang.org/x/oauth2 v0.5.0/go.mod h1:9/XBHVqLaWO3/BRHs5jbpYCnOZVjj5V0ndyaAM7KB4I=",
          "1931: golang.org/x/oauth2 v0.6.0/go.mod h1:ycmewcwgD4Rpr3eZJLSB4Kyyljb3qDh40vJ8STE5HKw=",
          "1932: golang.org/x/oauth2 v0.7.0/go.mod h1:hPLQkd9LyjfXTiRohC/41GhcFqxisoUQ99sCUOHO9x4=",
          "1935: golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=",
          "1936: golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=",
          "1937: golang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=",
          "",
          "[Removed Lines]",
          "1933: golang.org/x/oauth2 v0.25.0 h1:CY4y7XT9v0cRI9oupztF8AgiIu99L/ksR/Xp/6jrZ70=",
          "1934: golang.org/x/oauth2 v0.25.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=",
          "",
          "[Added Lines]",
          "1934: golang.org/x/oauth2 v0.27.0 h1:da9Vo7/tDv5RH/7nZDz1eMGS/q1Vv1N/7FCrBhI9I3M=",
          "1935: golang.org/x/oauth2 v0.27.0/go.mod h1:onh5ek6nERTohokkhCD/y2cV4Do3fxFHFuAejCkRWT8=",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1951: golang.org/x/sync v0.3.0/go.mod h1:FU7BRWz2tNW+3quACPkgCx/L+uEAv1htQ0V83Z9Rj+Y=",
          "1952: golang.org/x/sync v0.6.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=",
          "1953: golang.org/x/sync v0.7.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=",
          "1955: golang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=",
          "1956: golang.org/x/sys v0.0.0-20170830134202-bb24a47a89ea/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=",
          "1957: golang.org/x/sys v0.0.0-20180823144017-11551d06cbcc/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=",
          "1958: golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=",
          "",
          "[Removed Lines]",
          "1954: golang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=",
          "",
          "[Added Lines]",
          "1956: golang.org/x/sync v0.11.0 h1:GGz8+XQP4FvTTrjZPzNKTMFtSXH80RAzG+5ghFPgK9w=",
          "1957: golang.org/x/sync v0.11.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2082: golang.org/x/term v0.12.0/go.mod h1:owVbMEjm3cBLCHdkQu9b1opXd4ETQWc3BhuQGKgXgvU=",
          "2083: golang.org/x/term v0.17.0/go.mod h1:lLRBjIVuehSbZlaOtGMbcMncT+aqLLLmKrsjNrUguwk=",
          "2084: golang.org/x/term v0.20.0/go.mod h1:8UkIAJTvZgivsXaD6/pH6U9ecQzZ45awqEOzuCvwpFY=",
          "2086: golang.org/x/term v0.28.0/go.mod h1:Sw/lC2IAUZ92udQNf3WodGtn4k/XoLyZoh8v/8uiwek=",
          "2087: golang.org/x/text v0.0.0-20160726164857-2910a502d2bf/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=",
          "2088: golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=",
          "2089: golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=",
          "",
          "[Removed Lines]",
          "2085: golang.org/x/term v0.28.0 h1:/Ts8HFuMR2E6IP/jlo7QVLZHggjKQbhu/7H0LJFr3Gg=",
          "",
          "[Added Lines]",
          "2088: golang.org/x/term v0.29.0 h1:L6pJp37ocefwRRtYPKSWOWzOtWSxVajvz2ldH/xi3iU=",
          "2089: golang.org/x/term v0.29.0/go.mod h1:6bl4lRlvVuDgSf3179VpIxBF0o10JUpXWOnI7nErv7s=",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2104: golang.org/x/text v0.13.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=",
          "2105: golang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=",
          "2106: golang.org/x/text v0.15.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=",
          "2108: golang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=",
          "2109: golang.org/x/time v0.0.0-20181108054448-85acf8d2951c/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=",
          "2110: golang.org/x/time v0.0.0-20190308202827-9d24e82272b4/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=",
          "2111: golang.org/x/time v0.0.0-20191024005414-555d28b269f0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=",
          "",
          "[Removed Lines]",
          "2107: golang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=",
          "",
          "[Added Lines]",
          "2111: golang.org/x/text v0.22.0 h1:bofq7m3/HAFvbF51jz3Q9wLg3jkvSPuiZu/pD1XwgtM=",
          "2112: golang.org/x/text v0.22.0/go.mod h1:YRoo4H8PVmsu+E3Ou7cqLVH8oXWIHVoX0jqUWALQhfY=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aaf83bc67795d673bacbe133d876ce50f0b07243",
      "candidate_info": {
        "commit_hash": "aaf83bc67795d673bacbe133d876ce50f0b07243",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/aaf83bc67795d673bacbe133d876ce50f0b07243",
        "files": [
          ".release/ci.hcl",
          "GNUmakefile",
          "client/structs/structs.generated.go",
          "nomad/structs/structs.generated.go",
          "version/version.go"
        ],
        "message": "Prepare for next release",
        "before_after_code_files": [
          ".release/ci.hcl||.release/ci.hcl",
          "client/structs/structs.generated.go||client/structs/structs.generated.go",
          "nomad/structs/structs.generated.go||nomad/structs/structs.generated.go",
          "version/version.go||version/version.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        ".release/ci.hcl||.release/ci.hcl": [
          "File: .release/ci.hcl -> .release/ci.hcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   team = \"nomad\"",
          "9:   slack {",
          "11:   }",
          "13:   github {",
          "",
          "[Removed Lines]",
          "10:     notification_channel = \"CUYKT2A73\"",
          "",
          "[Added Lines]",
          "10:     notification_channel = \"C03B5EWFW01\"",
          "",
          "---------------"
        ],
        "client/structs/structs.generated.go||client/structs/structs.generated.go": [
          "File: client/structs/structs.generated.go -> client/structs/structs.generated.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "nomad/structs/structs.generated.go||nomad/structs/structs.generated.go": [
          "File: nomad/structs/structs.generated.go -> nomad/structs/structs.generated.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "version/version.go||version/version.go": [
          "File: version/version.go -> version/version.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  GitDescribe string",
          "30:  VersionMetadata = \"\"",
          "",
          "[Removed Lines]",
          "22:  Version = \"1.9.6\"",
          "27:  VersionPrerelease = \"\"",
          "",
          "[Added Lines]",
          "22:  Version = \"1.9.7\"",
          "27:  VersionPrerelease = \"dev\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e2776835ee9e76f948572c4bcd9ce9d37ace926",
      "candidate_info": {
        "commit_hash": "8e2776835ee9e76f948572c4bcd9ce9d37ace926",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/8e2776835ee9e76f948572c4bcd9ce9d37ace926",
        "files": [
          ".changelog/24165.txt",
          "scheduler/reconcile.go",
          "scheduler/reconcile_test.go"
        ],
        "message": "backport of commit 436ff75f15a52ae32862235ea0abe203b0a8c121 (#24189)\n\nCo-authored-by: Michael Smithhisler <michael.smithhisler@hashicorp.com>",
        "before_after_code_files": [
          "scheduler/reconcile.go||scheduler/reconcile.go",
          "scheduler/reconcile_test.go||scheduler/reconcile_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scheduler/reconcile.go||scheduler/reconcile.go": [
          "File: scheduler/reconcile.go -> scheduler/reconcile.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import (",
          "12:  \"fmt\"",
          "13:  \"sort\"",
          "14:  \"time\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13:  \"slices\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1192:    continue",
          "1193:   }",
          "1197:   for _, replacementAlloc := range all {",
          "1208:     continue",
          "1209:    }",
          "",
          "[Removed Lines]",
          "1201:    isReplacement := replacementAlloc.ID == reconnectingAlloc.NextAllocation",
          "1207:    if !isReplacement || replacementAlloc.ServerTerminalStatus() {",
          "",
          "[Added Lines]",
          "1198:   replacements := []string{}",
          "1199:   nextAlloc := reconnectingAlloc.NextAllocation",
          "1200:   for {",
          "1201:    val, ok := all[nextAlloc]",
          "1202:    if !ok {",
          "1203:     break",
          "1204:    }",
          "1205:    replacements = append(replacements, val.ID)",
          "1206:    nextAlloc = val.NextAllocation",
          "1207:   }",
          "1214:    if replacementAlloc == reconnectingAlloc {",
          "1215:     continue",
          "1216:    }",
          "1222:    if !slices.Contains(replacements, replacementAlloc.ID) || replacementAlloc.ServerTerminalStatus() {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1221:      })",
          "1222:     }",
          "1223:    } else {",
          "1227:      stop[replacementAlloc.ID] = replacementAlloc",
          "1228:      a.result.stop = append(a.result.stop, allocStopResult{",
          "1229:       alloc:             replacementAlloc,",
          "",
          "[Removed Lines]",
          "1226:     if replacementAlloc.ClientStatus != structs.AllocClientStatusFailed {",
          "",
          "[Added Lines]",
          "1241:     if _, ok := stop[replacementAlloc.ID]; !ok {",
          "",
          "---------------"
        ],
        "scheduler/reconcile_test.go||scheduler/reconcile_test.go": [
          "File: scheduler/reconcile_test.go -> scheduler/reconcile_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5339:   disconnectReplacement        bool",
          "5340:   replaceFailedReplacement     bool",
          "5341:   shouldStopOnDisconnectedNode bool",
          "5342:   maxDisconnect                *time.Duration",
          "5343:   expected                     *resultExpectation",
          "5344:   pickResult                   string",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5342:   shouldStopOnReconnect        bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5455:    disconnectedAllocStates:      disconnectAllocState,",
          "5456:    shouldStopOnDisconnectedNode: false,",
          "5457:    expected: &resultExpectation{",
          "5460:     desiredTGUpdates: map[string]*structs.DesiredUpdates{",
          "5461:      \"web\": {",
          "5462:       Stop:   2,",
          "",
          "[Removed Lines]",
          "5458:     stop:             2,",
          "5459:     reconnectUpdates: 2,",
          "",
          "[Added Lines]",
          "5459:     stop: 2,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5464:      },",
          "5465:     },",
          "5466:    },",
          "5467:   },",
          "5468:   {",
          "5469:    name:                         \"stop-original-pending-alloc-for-disconnected-node\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5467:    reconcileStrategy: structs.ReconcileOptionBestScore,",
          "5468:    callPicker:        true,",
          "5469:   },",
          "5470:   {",
          "5471:    name:                         \"stop-original-alloc-desired-status-stop\",",
          "5472:    allocCount:                   1,",
          "5473:    replace:                      true,",
          "5474:    failReplacement:              true,",
          "5475:    replaceFailedReplacement:     true,",
          "5476:    disconnectedAllocCount:       1,",
          "5477:    disconnectedAllocStatus:      structs.AllocClientStatusRunning,",
          "5478:    disconnectedAllocStates:      disconnectAllocState,",
          "5479:    shouldStopOnDisconnectedNode: false,",
          "5480:    shouldStopOnReconnect:        true,",
          "5481:    expected: &resultExpectation{",
          "5482:     stop: 1,",
          "5483:     desiredTGUpdates: map[string]*structs.DesiredUpdates{",
          "5484:      \"web\": {",
          "5485:       Stop:   1,",
          "5486:       Ignore: 2,",
          "5487:      },",
          "5488:     },",
          "5489:    },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5570:    disconnectedAllocCount := tc.disconnectedAllocCount",
          "5571:    for _, alloc := range allocs {",
          "5574:     if tc.maxDisconnect != nil {",
          "5575:      alloc.Job.TaskGroups[0].MaxClientDisconnect = tc.maxDisconnect",
          "",
          "[Removed Lines]",
          "5572:     alloc.DesiredStatus = structs.AllocDesiredStatusRun",
          "",
          "[Added Lines]",
          "5595:     if tc.shouldStopOnReconnect {",
          "5596:      alloc.DesiredStatus = structs.AllocDesiredStatusStop",
          "5597:     } else {",
          "5598:      alloc.DesiredStatus = structs.AllocDesiredStatusRun",
          "5599:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5665:     if tc.shouldStopOnDisconnectedNode {",
          "5666:      must.Eq(t, testNode.ID, stopResult.alloc.NodeID)",
          "5669:     }",
          "5671:     must.Eq(t, job.Version, stopResult.alloc.Job.Version)",
          "",
          "[Removed Lines]",
          "5667:     } else {",
          "5668:      must.NotEq(t, testNode.ID, stopResult.alloc.NodeID)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "574b10104fde52acee910f175d53a645b5d459a1",
      "candidate_info": {
        "commit_hash": "574b10104fde52acee910f175d53a645b5d459a1",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/574b10104fde52acee910f175d53a645b5d459a1",
        "files": [
          ".changelog/25432.txt",
          "nomad/core_sched.go",
          "nomad/core_sched_test.go",
          "nomad/fsm.go"
        ],
        "message": "Backport of CSI: prevent extraneous GC attempts for plugins into release/1.9.x (#25442)\n\nCo-authored-by: Tim Gross <tgross@hashicorp.com>",
        "before_after_code_files": [
          "nomad/core_sched.go||nomad/core_sched.go",
          "nomad/core_sched_test.go||nomad/core_sched_test.go",
          "nomad/fsm.go||nomad/fsm.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "nomad/core_sched.go||nomad/core_sched.go": [
          "File: nomad/core_sched.go -> nomad/core_sched.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "834:  for i := iter.Next(); i != nil; i = iter.Next() {",
          "835:   plugin := i.(*structs.CSIPlugin)",
          "838:   mt := time.Unix(0, plugin.ModifyTime)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "836:   if !plugin.IsEmpty() {",
          "837:    continue",
          "838:   }",
          "",
          "---------------"
        ],
        "nomad/core_sched_test.go||nomad/core_sched_test.go": [
          "File: nomad/core_sched_test.go -> nomad/core_sched_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2350:  index++",
          "2351:  must.NoError(t, store.UpsertJob(structs.MsgTypeTestSetup, index, nil, job))",
          "2354:  index++",
          "2355:  gc = srv.coreJobEval(structs.CoreJobCSIPluginGC, index)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2353:  snap, err = store.Snapshot()",
          "2354:  must.NoError(t, err)",
          "2355:  core = NewCoreScheduler(srv, snap)",
          "",
          "---------------"
        ],
        "nomad/fsm.go||nomad/fsm.go": [
          "File: nomad/fsm.go -> nomad/fsm.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: package nomad",
          "6: import (",
          "7:  \"fmt\"",
          "8:  \"io\"",
          "9:  \"reflect\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:  \"errors\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1437:  if err := n.state.DeleteCSIPlugin(index, req.ID); err != nil {",
          "1441:    n.logger.Error(\"DeleteCSIPlugin failed\", \"error\", err)",
          "1442:   }",
          "1443:   return err",
          "",
          "[Removed Lines]",
          "1440:   if err.Error() != \"plugin in use\" {",
          "",
          "[Added Lines]",
          "1441:   if !errors.Is(err, structs.ErrCSIPluginInUse) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb3c0f2270c7be26c2d48b72a252fa81ec87befe",
      "candidate_info": {
        "commit_hash": "bb3c0f2270c7be26c2d48b72a252fa81ec87befe",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/bb3c0f2270c7be26c2d48b72a252fa81ec87befe",
        "files": [
          ".changelog/24399.txt",
          "client/allocrunner/taskrunner/template/template.go",
          "client/allocrunner/taskrunner/template/template_test.go"
        ],
        "message": "backport of commit 0714353324cd420c3604ec6f35468a0c0f5bbe10 (#24408)\n\nCo-authored-by: Michael Smithhisler <michael.smithhisler@hashicorp.com>",
        "before_after_code_files": [
          "client/allocrunner/taskrunner/template/template.go||client/allocrunner/taskrunner/template/template.go",
          "client/allocrunner/taskrunner/template/template_test.go||client/allocrunner/taskrunner/template/template_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/allocrunner/taskrunner/template/template.go||client/allocrunner/taskrunner/template/template.go": [
          "File: client/allocrunner/taskrunner/template/template.go -> client/allocrunner/taskrunner/template/template.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "277:   <-eventTimer.C",
          "278:  }",
          "282:  outstandingEvent := false",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:  dirtyEvents := map[string]*manager.RenderEvent{}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:     continue",
          "309:    }",
          "312:    for _, event := range events {",
          "314:     if event.LastWouldRender.IsZero() {",
          "315:      continue WAIT",
          "316:     }",
          "319:     }",
          "320:    }",
          "325:     handledRenders := make(map[string]time.Time, len(tm.config.Templates))",
          "327:    }",
          "329:    break WAIT",
          "",
          "[Removed Lines]",
          "311:    dirty := false",
          "317:     if event.WouldRender && event.DidRender {",
          "318:      dirty = true",
          "324:    if dirty && tm.config.Lifecycle.IsRunning() {",
          "326:     tm.onTemplateRendered(handledRenders, time.Time{})",
          "",
          "[Added Lines]",
          "324:     if !event.LastDidRender.IsZero() {",
          "325:      dirtyEvents[event.Template.ID()] = event",
          "331:    if len(dirtyEvents) > 0 && tm.config.Lifecycle.IsRunning() {",
          "333:     tm.onTemplateRendered(handledRenders, time.Time{}, dirtyEvents)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "417:      SetFailsTask().",
          "418:      SetDisplayMessage(fmt.Sprintf(\"Template failed: %v\", err)))",
          "419:   case <-tm.runner.TemplateRenderedCh():",
          "421:   }",
          "422:  }",
          "423: }",
          "427:  var handling []string",
          "428:  signals := make(map[string]struct{})",
          "",
          "[Removed Lines]",
          "420:    tm.onTemplateRendered(handledRenders, allRenderedTime)",
          "425: func (tm *TaskTemplateManager) onTemplateRendered(handledRenders map[string]time.Time, allRenderedTime time.Time) {",
          "",
          "[Added Lines]",
          "427:    events := tm.runner.RenderEvents()",
          "428:    tm.onTemplateRendered(handledRenders, allRenderedTime, events)",
          "433: func (tm *TaskTemplateManager) onTemplateRendered(handledRenders map[string]time.Time, allRenderedTime time.Time, events map[string]*manager.RenderEvent) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "430:  restart := false",
          "431:  var splay time.Duration",
          "434:  for id, event := range events {",
          "",
          "[Removed Lines]",
          "433:  events := tm.runner.RenderEvents()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "client/allocrunner/taskrunner/template/template_test.go||client/allocrunner/taskrunner/template/template_test.go": [
          "File: client/allocrunner/taskrunner/template/template_test.go -> client/allocrunner/taskrunner/template/template_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "806:  }",
          "807: }",
          "809: func TestTaskTemplateManager_Rerender_Noop(t *testing.T) {",
          "810:  ci.Parallel(t)",
          "811:  clienttestutil.RequireConsul(t)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "814: func TestTaskTemplateManager_FirstRender_MultiSecret(t *testing.T) {",
          "815:  ci.Parallel(t)",
          "816:  clienttestutil.RequireVault(t)",
          "819:  vaultPath := \"secret/data/restart\"",
          "820:  key := \"shouldRestart\"",
          "821:  content := \"shouldRestart\"",
          "822:  embedded := fmt.Sprintf(`{{with secret \"%s\"}}{{.Data.data.%s}}{{end}}`, vaultPath, key)",
          "823:  file := \"my.tmpl\"",
          "824:  template := &structs.Template{",
          "825:   EmbeddedTmpl: embedded,",
          "826:   DestPath:     file,",
          "827:   ChangeMode:   structs.TemplateChangeModeRestart,",
          "828:  }",
          "830:  vaultPath2 := \"secret/data/noop\"",
          "831:  key2 := \"noop\"",
          "832:  content2 := \"noop\"",
          "833:  embedded2 := fmt.Sprintf(`{{with secret \"%s\"}}{{.Data.data.%s}}{{end}}`, vaultPath2, key2)",
          "834:  file2 := \"my.tmpl2\"",
          "835:  template2 := &structs.Template{",
          "836:   EmbeddedTmpl: embedded2,",
          "837:   DestPath:     file2,",
          "838:   ChangeMode:   structs.TemplateChangeModeNoop,",
          "839:  }",
          "841:  harness := newTestHarness(t, []*structs.Template{template, template2}, false, true)",
          "844:  logical := harness.vault.Client.Logical()",
          "845:  _, err := logical.Write(vaultPath, map[string]interface{}{\"data\": map[string]interface{}{key: content}})",
          "846:  must.NoError(t, err)",
          "847:  _, err = logical.Write(vaultPath2, map[string]interface{}{\"data\": map[string]interface{}{key2: content2}})",
          "848:  must.NoError(t, err)",
          "851:  harness.mockHooks.HasHandle = true",
          "853:  harness.start(t)",
          "854:  defer harness.stop()",
          "857:  select {",
          "858:  case <-harness.mockHooks.UnblockCh:",
          "859:  case <-time.After(time.Duration(5*testutil.TestMultiplier()) * time.Second):",
          "860:   t.Fatal(\"Task unblock should have been called\")",
          "861:  }",
          "863:  select {",
          "864:  case <-harness.mockHooks.RestartCh:",
          "865:  case <-harness.mockHooks.SignalCh:",
          "866:   t.Fatal(\"should not have received signal\", harness.mockHooks)",
          "867:  case <-time.After(time.Duration(1*testutil.TestMultiplier()) * time.Second):",
          "868:   t.Fatal(\"should have restarted\")",
          "869:  }",
          "870: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}