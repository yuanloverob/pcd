{
  "cve_id": "CVE-2019-10217",
  "cve_desc": "A flaw was found in ansible 2.8.0 before 2.8.4. Fields managing sensitive data should be set as such by no_log feature. Some of these fields in GCP modules are not set properly. service_account_contents() which is common class for all gcp modules is not setting no_log to True. Any sensitive data managed by that function would be leak as an output when running ansible playbooks.",
  "repo": "ansible/ansible",
  "patch_hash": "c1ee1f142db1e669b710a65147ea32be47a91519",
  "patch_info": {
    "commit_hash": "c1ee1f142db1e669b710a65147ea32be47a91519",
    "repo": "ansible/ansible",
    "commit_url": "https://github.com/ansible/ansible/commit/c1ee1f142db1e669b710a65147ea32be47a91519",
    "files": [
      "lib/ansible/module_utils/gcp_utils.py"
    ],
    "message": "gcp_utils: Handle JSON decode exception (#59427)\n\nHandle json.loads exception rather than providing stacktrace\n\nFixes: #56269\n\nSigned-off-by: Abhijeet Kasurde <akasurde@redhat.com>",
    "before_after_code_files": [
      "lib/ansible/module_utils/gcp_utils.py||lib/ansible/module_utils/gcp_utils.py"
    ]
  },
  "patch_diff": {
    "lib/ansible/module_utils/gcp_utils.py||lib/ansible/module_utils/gcp_utils.py": [
      "File: lib/ansible/module_utils/gcp_utils.py -> lib/ansible/module_utils/gcp_utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: from ansible.module_utils.basic import AnsibleModule, env_fallback",
      "20: from ansible.module_utils.six import string_types",
      "22: import ast",
      "23: import os",
      "24: import json",
      "",
      "[Removed Lines]",
      "21: from ansible.module_utils._text import to_text",
      "",
      "[Added Lines]",
      "21: from ansible.module_utils._text import to_text, to_native",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "156:             path = os.path.realpath(os.path.expanduser(self.module.params['service_account_file']))",
      "157:             return service_account.Credentials.from_service_account_file(path).with_scopes(self.module.params['scopes'])",
      "158:         elif cred_type == 'serviceaccount' and self.module.params.get('service_account_contents'):",
      "160:             return service_account.Credentials.from_service_account_info(cred).with_scopes(self.module.params['scopes'])",
      "161:         elif cred_type == 'machineaccount':",
      "162:             return google.auth.compute_engine.Credentials(",
      "",
      "[Removed Lines]",
      "159:             cred = json.loads(self.module.params.get('service_account_contents'))",
      "",
      "[Added Lines]",
      "159:             try:",
      "160:                 cred = json.loads(self.module.params.get('service_account_contents'))",
      "161:             except json.decoder.JSONDecodeError as e:",
      "162:                 self.module.fail_json(",
      "163:                     msg=\"Unable to decode service_account_contents as JSON : %s\" % to_native(e)",
      "164:                 )",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5e0bcc60b533b1adcb43d9a7fb06c436ecd921c7",
      "candidate_info": {
        "commit_hash": "5e0bcc60b533b1adcb43d9a7fb06c436ecd921c7",
        "repo": "ansible/ansible",
        "commit_url": "https://github.com/ansible/ansible/commit/5e0bcc60b533b1adcb43d9a7fb06c436ecd921c7",
        "files": [
          "lib/ansible/module_utils/gcp_utils.py",
          "lib/ansible/modules/cloud/google/gcp_cloudtasks_queue.py",
          "test/integration/targets/gcp_cloudtasks_queue/aliases",
          "test/integration/targets/gcp_cloudtasks_queue/defaults/main.yml",
          "test/integration/targets/gcp_cloudtasks_queue/meta/main.yml",
          "test/integration/targets/gcp_cloudtasks_queue/tasks/main.yml"
        ],
        "message": "New Module: gcp_cloudtasks_queue (#60094)",
        "before_after_code_files": [
          "lib/ansible/module_utils/gcp_utils.py||lib/ansible/module_utils/gcp_utils.py",
          "lib/ansible/modules/cloud/google/gcp_cloudtasks_queue.py||lib/ansible/modules/cloud/google/gcp_cloudtasks_queue.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/ansible/module_utils/gcp_utils.py||lib/ansible/module_utils/gcp_utils.py"
          ],
          "candidate": [
            "lib/ansible/module_utils/gcp_utils.py||lib/ansible/module_utils/gcp_utils.py"
          ]
        }
      },
      "candidate_diff": {
        "lib/ansible/module_utils/gcp_utils.py||lib/ansible/module_utils/gcp_utils.py": [
          "File: lib/ansible/module_utils/gcp_utils.py -> lib/ansible/module_utils/gcp_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:                 cred = json.loads(self.module.params.get('service_account_contents'))",
          "161:             except json.decoder.JSONDecodeError as e:",
          "162:                 self.module.fail_json(",
          "164:                 )",
          "165:             return service_account.Credentials.from_service_account_info(cred).with_scopes(self.module.params['scopes'])",
          "166:         elif cred_type == 'machineaccount':",
          "",
          "[Removed Lines]",
          "163:                     msg=\"Unable to decode service_account_contents as JSON : %s\" % to_native(e)",
          "",
          "[Added Lines]",
          "163:                     msg=\"Unable to decode service_account_contents as JSON\"",
          "",
          "---------------"
        ],
        "lib/ansible/modules/cloud/google/gcp_cloudtasks_queue.py||lib/ansible/modules/cloud/google/gcp_cloudtasks_queue.py": [
          "File: lib/ansible/modules/cloud/google/gcp_cloudtasks_queue.py -> lib/ansible/modules/cloud/google/gcp_cloudtasks_queue.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/python",
          "2: # -*- coding: utf-8 -*-",
          "3: #",
          "4: # Copyright (C) 2017 Google",
          "5: # GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)",
          "6: # ----------------------------------------------------------------------------",
          "7: #",
          "8: #     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***",
          "9: #",
          "10: # ----------------------------------------------------------------------------",
          "11: #",
          "12: #     This file is automatically generated by Magic Modules and manual",
          "13: #     changes will be clobbered when the file is regenerated.",
          "14: #",
          "15: #     Please read more about how to change this file at",
          "16: #     https://www.github.com/GoogleCloudPlatform/magic-modules",
          "17: #",
          "18: # ----------------------------------------------------------------------------",
          "20: from __future__ import absolute_import, division, print_function",
          "22: __metaclass__ = type",
          "24: ################################################################################",
          "25: # Documentation",
          "26: ################################################################################",
          "28: ANSIBLE_METADATA = {'metadata_version': '1.1', 'status': [\"preview\"], 'supported_by': 'community'}",
          "30: DOCUMENTATION = '''",
          "31: ---",
          "32: module: gcp_cloudtasks_queue",
          "33: description:",
          "34: - A named resource to which messages are sent by publishers.",
          "35: short_description: Creates a GCP Queue",
          "36: version_added: 2.9",
          "37: author: Google Inc. (@googlecloudplatform)",
          "38: requirements:",
          "39: - python >= 2.6",
          "40: - requests >= 2.18.4",
          "41: - google-auth >= 1.3.0",
          "42: options:",
          "43:   state:",
          "44:     description:",
          "45:     - Whether the given object should exist in GCP",
          "46:     choices:",
          "47:     - present",
          "48:     - absent",
          "49:     default: present",
          "50:     type: str",
          "51:   name:",
          "52:     description:",
          "53:     - The queue name.",
          "54:     required: false",
          "55:     type: str",
          "56:   app_engine_routing_override:",
          "57:     description:",
          "58:     - Overrides for task-level appEngineRouting. These settings apply only to App",
          "59:       Engine tasks in this queue .",
          "60:     required: false",
          "61:     type: dict",
          "62:     suboptions:",
          "63:       service:",
          "64:         description:",
          "65:         - App service.",
          "66:         - By default, the task is sent to the service which is the default service",
          "67:           when the task is attempted.",
          "68:         required: false",
          "69:         type: str",
          "70:       version:",
          "71:         description:",
          "72:         - App version.",
          "73:         - By default, the task is sent to the version which is the default version",
          "74:           when the task is attempted.",
          "75:         required: false",
          "76:         type: str",
          "77:       instance:",
          "78:         description:",
          "79:         - App instance.",
          "80:         - By default, the task is sent to an instance which is available when the",
          "81:           task is attempted.",
          "82:         required: false",
          "83:         type: str",
          "84:   rate_limits:",
          "85:     description:",
          "86:     - 'Rate limits for task dispatches. The queue''s actual dispatch rate is the result",
          "87:       of: * Number of tasks in the queue * User-specified throttling: rateLimits,",
          "88:       retryConfig, and the queue''s state.'",
          "89:     - \"* System throttling due to 429 (Too Many Requests) or 503 (Service Unavailable)",
          "90:       responses from the worker, high error rates, or to smooth sudden large traffic",
          "91:       spikes.\"",
          "92:     required: false",
          "93:     type: dict",
          "94:     suboptions:",
          "95:       max_dispatches_per_second:",
          "96:         description:",
          "97:         - The maximum rate at which tasks are dispatched from this queue.",
          "98:         - If unspecified when the queue is created, Cloud Tasks will pick the default.",
          "99:         required: false",
          "100:         type: int",
          "101:       max_concurrent_dispatches:",
          "102:         description:",
          "103:         - The maximum number of concurrent tasks that Cloud Tasks allows to be dispatched",
          "104:           for this queue. After this threshold has been reached, Cloud Tasks stops",
          "105:           dispatching tasks until the number of concurrent requests decreases.",
          "106:         required: false",
          "107:         type: int",
          "108:   retry_config:",
          "109:     description:",
          "110:     - Settings that determine the retry behavior.",
          "111:     required: false",
          "112:     type: dict",
          "113:     suboptions:",
          "114:       max_attempts:",
          "115:         description:",
          "116:         - Number of attempts per task.",
          "117:         - Cloud Tasks will attempt the task maxAttempts times (that is, if the first",
          "118:           attempt fails, then there will be maxAttempts - 1 retries). Must be >= -1.",
          "119:         - If unspecified when the queue is created, Cloud Tasks will pick the default.",
          "120:         - \"-1 indicates unlimited attempts.\"",
          "121:         required: false",
          "122:         type: int",
          "123:       max_retry_duration:",
          "124:         description:",
          "125:         - If positive, maxRetryDuration specifies the time limit for retrying a failed",
          "126:           task, measured from when the task was first attempted. Once maxRetryDuration",
          "127:           time has passed and the task has been attempted maxAttempts times, no further",
          "128:           attempts will be made and the task will be deleted.",
          "129:         - If zero, then the task age is unlimited.",
          "130:         required: false",
          "131:         type: str",
          "132:       min_backoff:",
          "133:         description:",
          "134:         - A task will be scheduled for retry between minBackoff and maxBackoff duration",
          "135:           after it fails, if the queue's RetryConfig specifies that the task should",
          "136:           be retried.",
          "137:         required: false",
          "138:         type: str",
          "139:       max_backoff:",
          "140:         description:",
          "141:         - A task will be scheduled for retry between minBackoff and maxBackoff duration",
          "142:           after it fails, if the queue's RetryConfig specifies that the task should",
          "143:           be retried.",
          "144:         required: false",
          "145:         type: str",
          "146:       max_doublings:",
          "147:         description:",
          "148:         - The time between retries will double maxDoublings times.",
          "149:         - A task's retry interval starts at minBackoff, then doubles maxDoublings",
          "150:           times, then increases linearly, and finally retries retries at intervals",
          "151:           of maxBackoff up to maxAttempts times.",
          "152:         required: false",
          "153:         type: int",
          "154:   status:",
          "155:     description:",
          "156:     - The current state of the queue.",
          "157:     - 'Some valid choices include: \"RUNNING\", \"PAUSED\", \"DISABLED\"'",
          "158:     required: false",
          "159:     type: str",
          "160:   location:",
          "161:     description:",
          "162:     - The location of the queue.",
          "163:     required: true",
          "164:     type: str",
          "165: extends_documentation_fragment: gcp",
          "166: '''",
          "168: EXAMPLES = '''",
          "169: - name: create a queue",
          "170:   gcp_cloudtasks_queue:",
          "171:     name: test_object",
          "172:     location: us-central1",
          "173:     project: test_project",
          "174:     auth_kind: serviceaccount",
          "175:     service_account_file: \"/tmp/auth.pem\"",
          "176:     state: present",
          "177: '''",
          "179: RETURN = '''",
          "180: name:",
          "181:   description:",
          "182:   - The queue name.",
          "183:   returned: success",
          "184:   type: str",
          "185: appEngineRoutingOverride:",
          "186:   description:",
          "187:   - Overrides for task-level appEngineRouting. These settings apply only to App Engine",
          "188:     tasks in this queue .",
          "189:   returned: success",
          "190:   type: complex",
          "191:   contains:",
          "192:     service:",
          "193:       description:",
          "194:       - App service.",
          "195:       - By default, the task is sent to the service which is the default service when",
          "196:         the task is attempted.",
          "197:       returned: success",
          "198:       type: str",
          "199:     version:",
          "200:       description:",
          "201:       - App version.",
          "202:       - By default, the task is sent to the version which is the default version when",
          "203:         the task is attempted.",
          "204:       returned: success",
          "205:       type: str",
          "206:     instance:",
          "207:       description:",
          "208:       - App instance.",
          "209:       - By default, the task is sent to an instance which is available when the task",
          "210:         is attempted.",
          "211:       returned: success",
          "212:       type: str",
          "213:     host:",
          "214:       description:",
          "215:       - The host that the task is sent to.",
          "216:       returned: success",
          "217:       type: str",
          "218: rateLimits:",
          "219:   description:",
          "220:   - 'Rate limits for task dispatches. The queue''s actual dispatch rate is the result",
          "221:     of: * Number of tasks in the queue * User-specified throttling: rateLimits, retryConfig,",
          "222:     and the queue''s state.'",
          "223:   - \"* System throttling due to 429 (Too Many Requests) or 503 (Service Unavailable)",
          "224:     responses from the worker, high error rates, or to smooth sudden large traffic",
          "225:     spikes.\"",
          "226:   returned: success",
          "227:   type: complex",
          "228:   contains:",
          "229:     maxDispatchesPerSecond:",
          "230:       description:",
          "231:       - The maximum rate at which tasks are dispatched from this queue.",
          "232:       - If unspecified when the queue is created, Cloud Tasks will pick the default.",
          "233:       returned: success",
          "234:       type: int",
          "235:     maxConcurrentDispatches:",
          "236:       description:",
          "237:       - The maximum number of concurrent tasks that Cloud Tasks allows to be dispatched",
          "238:         for this queue. After this threshold has been reached, Cloud Tasks stops dispatching",
          "239:         tasks until the number of concurrent requests decreases.",
          "240:       returned: success",
          "241:       type: int",
          "242:     maxBurstSize:",
          "243:       description:",
          "244:       - The max burst size.",
          "245:       - Max burst size limits how fast tasks in queue are processed when many tasks",
          "246:         are in the queue and the rate is high. This field allows the queue to have",
          "247:         a high rate so processing starts shortly after a task is enqueued, but still",
          "248:         limits resource usage when many tasks are enqueued in a short period of time.",
          "249:       returned: success",
          "250:       type: int",
          "251: retryConfig:",
          "252:   description:",
          "253:   - Settings that determine the retry behavior.",
          "254:   returned: success",
          "255:   type: complex",
          "256:   contains:",
          "257:     maxAttempts:",
          "258:       description:",
          "259:       - Number of attempts per task.",
          "260:       - Cloud Tasks will attempt the task maxAttempts times (that is, if the first",
          "261:         attempt fails, then there will be maxAttempts - 1 retries). Must be >= -1.",
          "262:       - If unspecified when the queue is created, Cloud Tasks will pick the default.",
          "263:       - \"-1 indicates unlimited attempts.\"",
          "264:       returned: success",
          "265:       type: int",
          "266:     maxRetryDuration:",
          "267:       description:",
          "268:       - If positive, maxRetryDuration specifies the time limit for retrying a failed",
          "269:         task, measured from when the task was first attempted. Once maxRetryDuration",
          "270:         time has passed and the task has been attempted maxAttempts times, no further",
          "271:         attempts will be made and the task will be deleted.",
          "272:       - If zero, then the task age is unlimited.",
          "273:       returned: success",
          "274:       type: str",
          "275:     minBackoff:",
          "276:       description:",
          "277:       - A task will be scheduled for retry between minBackoff and maxBackoff duration",
          "278:         after it fails, if the queue's RetryConfig specifies that the task should",
          "279:         be retried.",
          "280:       returned: success",
          "281:       type: str",
          "282:     maxBackoff:",
          "283:       description:",
          "284:       - A task will be scheduled for retry between minBackoff and maxBackoff duration",
          "285:         after it fails, if the queue's RetryConfig specifies that the task should",
          "286:         be retried.",
          "287:       returned: success",
          "288:       type: str",
          "289:     maxDoublings:",
          "290:       description:",
          "291:       - The time between retries will double maxDoublings times.",
          "292:       - A task's retry interval starts at minBackoff, then doubles maxDoublings times,",
          "293:         then increases linearly, and finally retries retries at intervals of maxBackoff",
          "294:         up to maxAttempts times.",
          "295:       returned: success",
          "296:       type: int",
          "297:     purgeTime:",
          "298:       description:",
          "299:       - The last time this queue was purged.",
          "300:       returned: success",
          "301:       type: str",
          "302: status:",
          "303:   description:",
          "304:   - The current state of the queue.",
          "305:   returned: success",
          "306:   type: str",
          "307: location:",
          "308:   description:",
          "309:   - The location of the queue.",
          "310:   returned: success",
          "311:   type: str",
          "312: '''",
          "314: ################################################################################",
          "315: # Imports",
          "316: ################################################################################",
          "318: from ansible.module_utils.gcp_utils import navigate_hash, GcpSession, GcpModule, GcpRequest, remove_nones_from_dict, replace_resource_dict",
          "319: import json",
          "320: import re",
          "322: ################################################################################",
          "323: # Main",
          "324: ################################################################################",
          "327: def main():",
          "328:     \"\"\"Main function\"\"\"",
          "330:     module = GcpModule(",
          "331:         argument_spec=dict(",
          "332:             state=dict(default='present', choices=['present', 'absent'], type='str'),",
          "333:             name=dict(type='str'),",
          "334:             app_engine_routing_override=dict(type='dict', options=dict(service=dict(type='str'), version=dict(type='str'), instance=dict(type='str'))),",
          "335:             rate_limits=dict(type='dict', options=dict(max_dispatches_per_second=dict(type='int'), max_concurrent_dispatches=dict(type='int'))),",
          "336:             retry_config=dict(",
          "337:                 type='dict',",
          "338:                 options=dict(",
          "339:                     max_attempts=dict(type='int'),",
          "340:                     max_retry_duration=dict(type='str'),",
          "341:                     min_backoff=dict(type='str'),",
          "342:                     max_backoff=dict(type='str'),",
          "343:                     max_doublings=dict(type='int'),",
          "344:                 ),",
          "345:             ),",
          "346:             status=dict(type='str'),",
          "347:             location=dict(required=True, type='str'),",
          "348:         )",
          "349:     )",
          "351:     if not module.params['scopes']:",
          "352:         module.params['scopes'] = ['https://www.googleapis.com/auth/cloud-platform']",
          "354:     state = module.params['state']",
          "356:     fetch = fetch_resource(module, self_link(module))",
          "357:     changed = False",
          "359:     if fetch:",
          "360:         if state == 'present':",
          "361:             if is_different(module, fetch):",
          "362:                 update(module, self_link(module))",
          "363:                 fetch = fetch_resource(module, self_link(module))",
          "364:                 changed = True",
          "365:         else:",
          "366:             delete(module, self_link(module))",
          "367:             fetch = {}",
          "368:             changed = True",
          "369:     else:",
          "370:         if state == 'present':",
          "371:             fetch = create(module, collection(module))",
          "372:             changed = True",
          "373:         else:",
          "374:             fetch = {}",
          "376:     if fetch:",
          "377:         instance = QueueStatus(module, fetch.get('state'))",
          "378:         instance.run()",
          "379:         if module.params.get('status'):",
          "380:             fetch.update({'status': module.params['status']})",
          "381:     fetch.update({'changed': changed})",
          "383:     module.exit_json(**fetch)",
          "386: def create(module, link):",
          "387:     auth = GcpSession(module, 'cloudtasks')",
          "388:     return return_if_object(module, auth.post(link, resource_to_request(module)))",
          "391: def update(module, link):",
          "392:     auth = GcpSession(module, 'cloudtasks')",
          "393:     return return_if_object(module, auth.put(link, resource_to_request(module)))",
          "396: def delete(module, link):",
          "397:     auth = GcpSession(module, 'cloudtasks')",
          "398:     return return_if_object(module, auth.delete(link))",
          "401: def resource_to_request(module):",
          "402:     request = {",
          "403:         u'name': name_pattern(module.params.get('name'), module),",
          "404:         u'appEngineRoutingOverride': QueueAppengineroutingoverride(module.params.get('app_engine_routing_override', {}), module).to_request(),",
          "405:         u'rateLimits': QueueRatelimits(module.params.get('rate_limits', {}), module).to_request(),",
          "406:         u'retryConfig': QueueRetryconfig(module.params.get('retry_config', {}), module).to_request(),",
          "407:     }",
          "408:     return_vals = {}",
          "409:     for k, v in request.items():",
          "410:         if v or v is False:",
          "411:             return_vals[k] = v",
          "413:     return return_vals",
          "416: def fetch_resource(module, link, allow_not_found=True):",
          "417:     auth = GcpSession(module, 'cloudtasks')",
          "418:     return return_if_object(module, auth.get(link), allow_not_found)",
          "421: def self_link(module):",
          "422:     return \"https://cloudtasks.googleapis.com/v2/projects/{project}/locations/{location}/queues/{name}\".format(**module.params)",
          "425: def collection(module):",
          "426:     return \"https://cloudtasks.googleapis.com/v2/projects/{project}/locations/{location}/queues\".format(**module.params)",
          "429: def return_if_object(module, response, allow_not_found=False):",
          "430:     # If not found, return nothing.",
          "431:     if allow_not_found and response.status_code == 404:",
          "432:         return None",
          "434:     # If no content, return nothing.",
          "435:     if response.status_code == 204:",
          "436:         return None",
          "438:     try:",
          "439:         module.raise_for_status(response)",
          "440:         result = response.json()",
          "441:     except getattr(json.decoder, 'JSONDecodeError', ValueError):",
          "442:         module.fail_json(msg=\"Invalid JSON response with error: %s\" % response.text)",
          "444:     if navigate_hash(result, ['error', 'errors']):",
          "445:         module.fail_json(msg=navigate_hash(result, ['error', 'errors']))",
          "447:     return result",
          "450: def is_different(module, response):",
          "451:     request = resource_to_request(module)",
          "452:     response = response_to_hash(module, response)",
          "454:     # Remove all output-only from response.",
          "455:     response_vals = {}",
          "456:     for k, v in response.items():",
          "457:         if k in request:",
          "458:             response_vals[k] = v",
          "460:     request_vals = {}",
          "461:     for k, v in request.items():",
          "462:         if k in response:",
          "463:             request_vals[k] = v",
          "465:     return GcpRequest(request_vals) != GcpRequest(response_vals)",
          "468: # Remove unnecessary properties from the response.",
          "469: # This is for doing comparisons with Ansible's current parameters.",
          "470: def response_to_hash(module, response):",
          "471:     return {",
          "472:         u'name': response.get(u'name'),",
          "473:         u'appEngineRoutingOverride': QueueAppengineroutingoverride(response.get(u'appEngineRoutingOverride', {}), module).from_response(),",
          "474:         u'rateLimits': QueueRatelimits(response.get(u'rateLimits', {}), module).from_response(),",
          "475:         u'retryConfig': QueueRetryconfig(response.get(u'retryConfig', {}), module).from_response(),",
          "476:     }",
          "479: def name_pattern(name, module):",
          "480:     if name is None:",
          "481:         return",
          "483:     regex = r\"projects/.*/locations/.*/queues/.*\"",
          "485:     if not re.match(regex, name):",
          "486:         name = \"projects/{project}/locations/{location}/queues/{name}\".format(**module.params)",
          "488:     return name",
          "491: class QueueStatus(object):",
          "492:     def __init__(self, module, current_status):",
          "493:         self.module = module",
          "494:         self.current_status = current_status",
          "495:         self.desired_status = self.module.params.get('status')",
          "497:     def run(self):",
          "498:         # GcpRequest handles unicode text handling",
          "499:         if GcpRequest({'status': self.current_status}) == GcpRequest({'status': self.desired_status}):",
          "500:             return",
          "501:         elif self.desired_status == 'PAUSED':",
          "502:             self.stop()",
          "503:         elif self.desired_status == 'RUNNING':",
          "504:             self.start()",
          "506:     def start(self):",
          "507:         auth = GcpSession(self.module, 'cloudtasks')",
          "508:         return_if_object(self.module, auth.post(self._start_url()))",
          "510:     def stop(self):",
          "511:         auth = GcpSession(self.module, 'cloudtasks')",
          "512:         return_if_object(self.module, auth.post(self._stop_url()))",
          "514:     def _start_url(self):",
          "515:         return \"https://cloudtasks.googleapis.com/v2/projects/{project}/locations/{location}/queues/{name}:resume\".format(**self.module.params)",
          "517:     def _stop_url(self):",
          "518:         return \"https://cloudtasks.googleapis.com/v2/projects/{project}/locations/{location}/queues/{name}:pause\".format(**self.module.params)",
          "521: class QueueAppengineroutingoverride(object):",
          "522:     def __init__(self, request, module):",
          "523:         self.module = module",
          "524:         if request:",
          "525:             self.request = request",
          "526:         else:",
          "527:             self.request = {}",
          "529:     def to_request(self):",
          "530:         return remove_nones_from_dict(",
          "531:             {u'service': self.request.get('service'), u'version': self.request.get('version'), u'instance': self.request.get('instance')}",
          "532:         )",
          "534:     def from_response(self):",
          "535:         return remove_nones_from_dict(",
          "536:             {u'service': self.request.get(u'service'), u'version': self.request.get(u'version'), u'instance': self.request.get(u'instance')}",
          "537:         )",
          "540: class QueueRatelimits(object):",
          "541:     def __init__(self, request, module):",
          "542:         self.module = module",
          "543:         if request:",
          "544:             self.request = request",
          "545:         else:",
          "546:             self.request = {}",
          "548:     def to_request(self):",
          "549:         return remove_nones_from_dict(",
          "550:             {",
          "551:                 u'maxDispatchesPerSecond': self.request.get('max_dispatches_per_second'),",
          "552:                 u'maxConcurrentDispatches': self.request.get('max_concurrent_dispatches'),",
          "553:             }",
          "554:         )",
          "556:     def from_response(self):",
          "557:         return remove_nones_from_dict(",
          "558:             {u'maxDispatchesPerSecond': self.request.get(u'maxDispatchesPerSecond'), u'maxConcurrentDispatches': self.request.get(u'maxConcurrentDispatches')}",
          "559:         )",
          "562: class QueueRetryconfig(object):",
          "563:     def __init__(self, request, module):",
          "564:         self.module = module",
          "565:         if request:",
          "566:             self.request = request",
          "567:         else:",
          "568:             self.request = {}",
          "570:     def to_request(self):",
          "571:         return remove_nones_from_dict(",
          "572:             {",
          "573:                 u'maxAttempts': self.request.get('max_attempts'),",
          "574:                 u'maxRetryDuration': self.request.get('max_retry_duration'),",
          "575:                 u'minBackoff': self.request.get('min_backoff'),",
          "576:                 u'maxBackoff': self.request.get('max_backoff'),",
          "577:                 u'maxDoublings': self.request.get('max_doublings'),",
          "578:             }",
          "579:         )",
          "581:     def from_response(self):",
          "582:         return remove_nones_from_dict(",
          "583:             {",
          "584:                 u'maxAttempts': self.request.get(u'maxAttempts'),",
          "585:                 u'maxRetryDuration': self.request.get(u'maxRetryDuration'),",
          "586:                 u'minBackoff': self.request.get(u'minBackoff'),",
          "587:                 u'maxBackoff': self.request.get(u'maxBackoff'),",
          "588:                 u'maxDoublings': self.request.get(u'maxDoublings'),",
          "589:             }",
          "590:         )",
          "593: if __name__ == '__main__':",
          "594:     main()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08918c6c2bcd73eb40b89af31736d3fcbe55e75a",
      "candidate_info": {
        "commit_hash": "08918c6c2bcd73eb40b89af31736d3fcbe55e75a",
        "repo": "ansible/ansible",
        "commit_url": "https://github.com/ansible/ansible/commit/08918c6c2bcd73eb40b89af31736d3fcbe55e75a",
        "files": [
          "lib/ansible/module_utils/gcp_utils.py",
          "lib/ansible/modules/cloud/google/gcp_iam_role.py",
          "lib/ansible/plugins/doc_fragments/gcp.py",
          "test/integration/targets/gcp_iam_role/aliases",
          "test/integration/targets/gcp_iam_role/defaults/main.yml",
          "test/integration/targets/gcp_iam_role/meta/main.yml",
          "test/integration/targets/gcp_iam_role/tasks/main.yml"
        ],
        "message": "GCP IAM Role (#53490)\n\n* GCP IAM Role\n\n* module util file\n\n* test fix\n\n* unit tests\n\n* test fixes\n\n* doc fragment fixes\n\n* test fixes\n\n* test fix",
        "before_after_code_files": [
          "lib/ansible/module_utils/gcp_utils.py||lib/ansible/module_utils/gcp_utils.py",
          "lib/ansible/modules/cloud/google/gcp_iam_role.py||lib/ansible/modules/cloud/google/gcp_iam_role.py",
          "lib/ansible/plugins/doc_fragments/gcp.py||lib/ansible/plugins/doc_fragments/gcp.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/ansible/module_utils/gcp_utils.py||lib/ansible/module_utils/gcp_utils.py"
          ],
          "candidate": [
            "lib/ansible/module_utils/gcp_utils.py||lib/ansible/module_utils/gcp_utils.py"
          ]
        }
      },
      "candidate_diff": {
        "lib/ansible/module_utils/gcp_utils.py||lib/ansible/module_utils/gcp_utils.py": [
          "File: lib/ansible/module_utils/gcp_utils.py -> lib/ansible/module_utils/gcp_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: from ansible.module_utils._text import to_text",
          "22: import ast",
          "23: import os",
          "26: def navigate_hash(source, path, default=None):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import json",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:                 msg=\"Service Account Email only works with Machine Account-based authentication\"",
          "144:             )",
          "147:             self.module.fail_json(",
          "148:                 msg=\"Service Account File only works with Service Account-based authentication\"",
          "149:             )",
          "",
          "[Removed Lines]",
          "146:         if self.module.params.get('service_account_file') is not None and self.module.params['auth_kind'] != 'serviceaccount':",
          "",
          "[Added Lines]",
          "147:         if (self.module.params.get('service_account_file') is not None or",
          "148:                 self.module.params.get('service_account_contents') is not None) and self.module.params['auth_kind'] != 'serviceaccount':",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "153:         if cred_type == 'application':",
          "154:             credentials, project_id = google.auth.default(scopes=self.module.params['scopes'])",
          "155:             return credentials",
          "157:             path = os.path.realpath(os.path.expanduser(self.module.params['service_account_file']))",
          "158:             return service_account.Credentials.from_service_account_file(path).with_scopes(self.module.params['scopes'])",
          "159:         elif cred_type == 'machineaccount':",
          "160:             return google.auth.compute_engine.Credentials(",
          "161:                 self.module.params['service_account_email'])",
          "",
          "[Removed Lines]",
          "156:         elif cred_type == 'serviceaccount':",
          "",
          "[Added Lines]",
          "158:         elif cred_type == 'serviceaccount' and self.module.params.get('service_account_file'):",
          "161:         elif cred_type == 'serviceaccount' and self.module.params.get('service_account_contents'):",
          "162:             cred = json.loads(self.module.params.get('service_account_contents'))",
          "163:             return service_account.Credentials.from_service_account_info(cred).with_scopes(self.module.params['scopes'])",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "199:                     required=False,",
          "200:                     fallback=(env_fallback, ['GCP_SERVICE_ACCOUNT_FILE']),",
          "201:                     type='path'),",
          "202:                 scopes=dict(",
          "203:                     required=False,",
          "204:                     fallback=(env_fallback, ['GCP_SCOPES']),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:                 service_account_contents=dict(",
          "208:                     required=False,",
          "209:                     fallback=(env_fallback, ['GCP_SERVICE_ACCOUNT_CONTENTS']),",
          "210:                     type='str'),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "211:             mutual = kwargs['mutually_exclusive']",
          "213:         kwargs['mutually_exclusive'] = mutual.append(",
          "215:         )",
          "217:         AnsibleModule.__init__(self, *args, **kwargs)",
          "",
          "[Removed Lines]",
          "214:             ['service_account_email', 'service_account_file']",
          "",
          "[Added Lines]",
          "223:             ['service_account_email', 'service_account_file', 'service_account_contents']",
          "",
          "---------------"
        ],
        "lib/ansible/modules/cloud/google/gcp_iam_role.py||lib/ansible/modules/cloud/google/gcp_iam_role.py": [
          "File: lib/ansible/modules/cloud/google/gcp_iam_role.py -> lib/ansible/modules/cloud/google/gcp_iam_role.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/python",
          "2: # -*- coding: utf-8 -*-",
          "3: #",
          "4: # Copyright (C) 2017 Google",
          "5: # GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)",
          "6: # ----------------------------------------------------------------------------",
          "7: #",
          "8: #     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***",
          "9: #",
          "10: # ----------------------------------------------------------------------------",
          "11: #",
          "12: #     This file is automatically generated by Magic Modules and manual",
          "13: #     changes will be clobbered when the file is regenerated.",
          "14: #",
          "15: #     Please read more about how to change this file at",
          "16: #     https://www.github.com/GoogleCloudPlatform/magic-modules",
          "17: #",
          "18: # ----------------------------------------------------------------------------",
          "20: from __future__ import absolute_import, division, print_function",
          "22: __metaclass__ = type",
          "24: ################################################################################",
          "25: # Documentation",
          "26: ################################################################################",
          "28: ANSIBLE_METADATA = {'metadata_version': '1.1', 'status': [\"preview\"], 'supported_by': 'community'}",
          "30: DOCUMENTATION = '''",
          "31: ---",
          "32: module: gcp_iam_role",
          "33: description:",
          "34: - A role in the Identity and Access Management API .",
          "35: short_description: Creates a GCP Role",
          "36: version_added: 2.8",
          "37: author: Google Inc. (@googlecloudplatform)",
          "38: requirements:",
          "39: - python >= 2.6",
          "40: - requests >= 2.18.4",
          "41: - google-auth >= 1.3.0",
          "42: options:",
          "43:   state:",
          "44:     description:",
          "45:     - Whether the given object should exist in GCP",
          "46:     choices:",
          "47:     - present",
          "48:     - absent",
          "49:     default: present",
          "50:   name:",
          "51:     description:",
          "52:     - The name of the role.",
          "53:     required: true",
          "54:   title:",
          "55:     description:",
          "56:     - A human-readable title for the role. Typically this is limited to 100 UTF-8",
          "57:       bytes.",
          "58:     required: false",
          "59:   description:",
          "60:     description:",
          "61:     - Human-readable description for the role.",
          "62:     required: false",
          "63:   included_permissions:",
          "64:     description:",
          "65:     - Names of permissions this role grants when bound in an IAM policy.",
          "66:     required: false",
          "67:   stage:",
          "68:     description:",
          "69:     - The current launch stage of the role.",
          "70:     required: false",
          "71:     choices:",
          "72:     - ALPHA",
          "73:     - BETA",
          "74:     - GA",
          "75:     - DEPRECATED",
          "76:     - DISABLED",
          "77:     - EAP",
          "78: extends_documentation_fragment: gcp",
          "79: '''",
          "81: EXAMPLES = '''",
          "82: - name: create a role",
          "83:   gcp_iam_role:",
          "84:     name: myCustomRole2",
          "85:     title: My Custom Role",
          "86:     description: My custom role description",
          "87:     included_permissions:",
          "88:     - iam.roles.list",
          "89:     - iam.roles.create",
          "90:     - iam.roles.delete",
          "91:     project: test_project",
          "92:     auth_kind: serviceaccount",
          "93:     service_account_file: \"/tmp/auth.pem\"",
          "94:     state: present",
          "95: '''",
          "97: RETURN = '''",
          "98: name:",
          "99:   description:",
          "100:   - The name of the role.",
          "101:   returned: success",
          "102:   type: str",
          "103: title:",
          "104:   description:",
          "105:   - A human-readable title for the role. Typically this is limited to 100 UTF-8 bytes.",
          "106:   returned: success",
          "107:   type: str",
          "108: description:",
          "109:   description:",
          "110:   - Human-readable description for the role.",
          "111:   returned: success",
          "112:   type: str",
          "113: includedPermissions:",
          "114:   description:",
          "115:   - Names of permissions this role grants when bound in an IAM policy.",
          "116:   returned: success",
          "117:   type: list",
          "118: stage:",
          "119:   description:",
          "120:   - The current launch stage of the role.",
          "121:   returned: success",
          "122:   type: str",
          "123: deleted:",
          "124:   description:",
          "125:   - The current deleted state of the role.",
          "126:   returned: success",
          "127:   type: bool",
          "128: '''",
          "130: ################################################################################",
          "131: # Imports",
          "132: ################################################################################",
          "134: from ansible.module_utils.gcp_utils import navigate_hash, GcpSession, GcpModule, GcpRequest, replace_resource_dict",
          "135: import json",
          "137: ################################################################################",
          "138: # Main",
          "139: ################################################################################",
          "142: def main():",
          "143:     \"\"\"Main function\"\"\"",
          "145:     module = GcpModule(",
          "146:         argument_spec=dict(",
          "147:             state=dict(default='present', choices=['present', 'absent'], type='str'),",
          "148:             name=dict(required=True, type='str'),",
          "149:             title=dict(type='str'),",
          "150:             description=dict(type='str'),",
          "151:             included_permissions=dict(type='list', elements='str'),",
          "152:             stage=dict(type='str', choices=['ALPHA', 'BETA', 'GA', 'DEPRECATED', 'DISABLED', 'EAP']),",
          "153:         )",
          "154:     )",
          "156:     if not module.params['scopes']:",
          "157:         module.params['scopes'] = ['https://www.googleapis.com/auth/iam']",
          "159:     state = module.params['state']",
          "161:     fetch = fetch_resource(module, self_link(module))",
          "162:     changed = False",
          "164:     if fetch:",
          "165:         if state == 'present':",
          "166:             if is_different(module, fetch):",
          "167:                 update(module, self_link(module), fetch)",
          "168:                 fetch = fetch_resource(module, self_link(module))",
          "169:                 changed = True",
          "170:         else:",
          "171:             delete(module, self_link(module))",
          "172:             fetch = {}",
          "173:             changed = True",
          "174:     else:",
          "175:         if state == 'present':",
          "176:             fetch = create(module, collection(module))",
          "177:             changed = True",
          "178:         else:",
          "179:             fetch = {}",
          "181:     fetch.update({'changed': changed})",
          "183:     module.exit_json(**fetch)",
          "186: def create(module, link):",
          "187:     auth = GcpSession(module, 'iam')",
          "188:     return return_if_object(module, auth.post(link, resource_to_create(module)))",
          "191: def update(module, link, fetch):",
          "192:     auth = GcpSession(module, 'iam')",
          "193:     params = {'updateMask': updateMask(resource_to_request(module), response_to_hash(module, fetch))}",
          "194:     request = resource_to_request(module)",
          "195:     del request['name']",
          "196:     return return_if_object(module, auth.put(link, request, params=params))",
          "199: def updateMask(request, response):",
          "200:     update_mask = []",
          "201:     if request.get('name') != response.get('name'):",
          "202:         update_mask.append('name')",
          "203:     if request.get('title') != response.get('title'):",
          "204:         update_mask.append('title')",
          "205:     if request.get('description') != response.get('description'):",
          "206:         update_mask.append('description')",
          "207:     if request.get('includedPermissions') != response.get('includedPermissions'):",
          "208:         update_mask.append('includedPermissions')",
          "209:     if request.get('stage') != response.get('stage'):",
          "210:         update_mask.append('stage')",
          "211:     return ','.join(update_mask)",
          "214: def delete(module, link):",
          "215:     auth = GcpSession(module, 'iam')",
          "216:     return return_if_object(module, auth.delete(link))",
          "219: def resource_to_request(module):",
          "220:     request = {",
          "221:         u'name': module.params.get('name'),",
          "222:         u'title': module.params.get('title'),",
          "223:         u'description': module.params.get('description'),",
          "224:         u'includedPermissions': module.params.get('included_permissions'),",
          "225:         u'stage': module.params.get('stage'),",
          "226:     }",
          "227:     return_vals = {}",
          "228:     for k, v in request.items():",
          "229:         if v or v is False:",
          "230:             return_vals[k] = v",
          "232:     return return_vals",
          "235: def fetch_resource(module, link, allow_not_found=True):",
          "236:     auth = GcpSession(module, 'iam')",
          "237:     return return_if_object(module, auth.get(link), allow_not_found)",
          "240: def self_link(module):",
          "241:     return \"https://iam.googleapis.com/v1/projects/{project}/roles/{name}\".format(**module.params)",
          "244: def collection(module):",
          "245:     return \"https://iam.googleapis.com/v1/projects/{project}/roles\".format(**module.params)",
          "248: def return_if_object(module, response, allow_not_found=False):",
          "249:     # If not found, return nothing.",
          "250:     if allow_not_found and response.status_code == 404:",
          "251:         return None",
          "253:     # If no content, return nothing.",
          "254:     if response.status_code == 204:",
          "255:         return None",
          "257:     try:",
          "258:         module.raise_for_status(response)",
          "259:         result = response.json()",
          "260:     except getattr(json.decoder, 'JSONDecodeError', ValueError):",
          "261:         module.fail_json(msg=\"Invalid JSON response with error: %s\" % response.text)",
          "263:     result = decode_response(result, module)",
          "265:     if navigate_hash(result, ['error', 'errors']):",
          "266:         module.fail_json(msg=navigate_hash(result, ['error', 'errors']))",
          "268:     return result",
          "271: def is_different(module, response):",
          "272:     request = resource_to_request(module)",
          "273:     response = response_to_hash(module, response)",
          "274:     request = decode_response(request, module)",
          "276:     # Remove all output-only from response.",
          "277:     response_vals = {}",
          "278:     for k, v in response.items():",
          "279:         if k in request:",
          "280:             response_vals[k] = v",
          "282:     request_vals = {}",
          "283:     for k, v in request.items():",
          "284:         if k in response:",
          "285:             request_vals[k] = v",
          "287:     return GcpRequest(request_vals) != GcpRequest(response_vals)",
          "290: # Remove unnecessary properties from the response.",
          "291: # This is for doing comparisons with Ansible's current parameters.",
          "292: def response_to_hash(module, response):",
          "293:     return {",
          "294:         u'name': response.get(u'name'),",
          "295:         u'title': response.get(u'title'),",
          "296:         u'description': response.get(u'description'),",
          "297:         u'includedPermissions': response.get(u'includedPermissions'),",
          "298:         u'stage': response.get(u'stage'),",
          "299:         u'deleted': response.get(u'deleted'),",
          "300:     }",
          "303: def resource_to_create(module):",
          "304:     role = resource_to_request(module)",
          "305:     del role['name']",
          "306:     return {'roleId': module.params['name'], 'role': role}",
          "309: def decode_response(response, module):",
          "310:     if 'name' in response:",
          "311:         response['name'] = response['name'].split('/')[-1]",
          "312:     return response",
          "315: if __name__ == '__main__':",
          "316:     main()",
          "",
          "---------------"
        ],
        "lib/ansible/plugins/doc_fragments/gcp.py||lib/ansible/plugins/doc_fragments/gcp.py": [
          "File: lib/ansible/plugins/doc_fragments/gcp.py -> lib/ansible/plugins/doc_fragments/gcp.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:         type: str",
          "19:         required: true",
          "20:         choices: [ application, machineaccount, serviceaccount ]",
          "21:     service_account_file:",
          "22:         description:",
          "23:             - The path of a Service Account JSON file if serviceaccount is selected as type.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:     service_account_contents:",
          "22:         description:",
          "23:             - A string representing the contents of a Service Account JSON file.",
          "24:             - This should not be passed in as a dictionary, but a string",
          "25:               that has the exact contents of a service account json file (valid JSON)",
          "26:         type: str",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     C(GCP_SERVICE_ACCOUNT_FILE) env variable.",
          "37:   - For authentication, you can set service_account_email using the",
          "38:     C(GCP_SERVICE_ACCOUNT_EMAIL) env variable.",
          "39:   - For authentication, you can set auth_kind using the C(GCP_AUTH_KIND) env",
          "40:     variable.",
          "41:   - For authentication, you can set scopes using the C(GCP_SCOPES) env variable.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:   - For authentication, you can set service_account_contents using the",
          "46:     C(GCP_SERVICE_ACCOUNT_CONTENTS) env variable.",
          "",
          "---------------"
        ]
      }
    }
  ]
}