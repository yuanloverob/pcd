{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9bc4131aa3f2fc31ca5260d7985270c626c7cac7",
      "candidate_info": {
        "commit_hash": "9bc4131aa3f2fc31ca5260d7985270c626c7cac7",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/9bc4131aa3f2fc31ca5260d7985270c626c7cac7",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java"
        ],
        "message": "PDFBOX-4892: performance improvement, as suggested by valerybokov; comment from CFF specification\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888772 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java||fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java||fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java -> fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:                     {",
          "141:                         parseUsecmap((LiteralName) previousToken, result);",
          "142:                     }",
          "144:                     {",
          "162:                     }",
          "163:                 }",
          "164:             }",
          "",
          "[Removed Lines]",
          "143:                     else if (op.op.equals(\"begincodespacerange\") && previousToken instanceof Number)",
          "145:                         parseBegincodespacerange((Number) previousToken, cmapStream, result);",
          "146:                     }",
          "147:                     else if (op.op.equals(\"beginbfchar\") && previousToken instanceof Number)",
          "148:                     {",
          "149:                         parseBeginbfchar((Number) previousToken, cmapStream, result);",
          "150:                     }",
          "151:                     else if (op.op.equals(\"beginbfrange\") && previousToken instanceof Number)",
          "152:                     {",
          "153:                         parseBeginbfrange((Number) previousToken, cmapStream, result);",
          "154:                     }",
          "155:                     else if (op.op.equals(\"begincidchar\") && previousToken instanceof Number)",
          "156:                     {",
          "157:                         parseBegincidchar((Number) previousToken, cmapStream, result);",
          "158:                     }",
          "159:                     else if (op.op.equals(\"begincidrange\") && previousToken instanceof Integer)",
          "160:                     {",
          "161:                         parseBegincidrange((Integer) previousToken, cmapStream, result);",
          "",
          "[Added Lines]",
          "143:                     else if (previousToken instanceof Number)",
          "145:                         if (op.op.equals(\"begincodespacerange\"))",
          "146:                         {",
          "147:                             parseBegincodespacerange((Number) previousToken, cmapStream, result);",
          "148:                         }",
          "149:                         else if (op.op.equals(\"beginbfchar\"))",
          "150:                         {",
          "151:                             parseBeginbfchar((Number) previousToken, cmapStream, result);",
          "152:                         }",
          "153:                         else if (op.op.equals(\"beginbfrange\"))",
          "154:                         {",
          "155:                             parseBeginbfrange((Number) previousToken, cmapStream, result);",
          "156:                         }",
          "157:                         else if (op.op.equals(\"begincidchar\"))",
          "158:                         {",
          "159:                             parseBegincidchar((Number) previousToken, cmapStream, result);",
          "160:                         }",
          "161:                         else if (op.op.equals(\"begincidrange\") && previousToken instanceof Integer)",
          "162:                         {",
          "163:                             parseBegincidrange((Integer) previousToken, cmapStream, result);",
          "164:                         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c71a6eed154dadf67055ddec5fe15956aca1018",
      "candidate_info": {
        "commit_hash": "8c71a6eed154dadf67055ddec5fe15956aca1018",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/8c71a6eed154dadf67055ddec5fe15956aca1018",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java"
        ],
        "message": "PDFBOX-3017: don't add LTV when MDP prevents this\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882737 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java||examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java||examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java -> examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:         PDDocument doc = PDDocument.load(inFile);",
          "115:         FileOutputStream fos = new FileOutputStream(outFile);",
          "116:         document = doc;",
          "117:         doValidation(inFile.getAbsolutePath(), fos);",
          "118:         fos.close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:         int accessPermissions = SigUtils.getMDPPermission(doc);",
          "117:         if (accessPermissions == 1)",
          "118:         {",
          "119:             throw new IllegalStateException(",
          "120:                     \"No changes to the document are permitted due to DocMDP transform parameters dictionary\");",
          "121:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1217879623298e634f0f62d3b7120c34466ade61",
      "candidate_info": {
        "commit_hash": "1217879623298e634f0f62d3b7120c34466ade61",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/1217879623298e634f0f62d3b7120c34466ade61",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"
        ],
        "message": "PDFBOX-5168: make non empty dash with only zero invisible (corrected,\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888853 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java -> pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "747:         }",
          "749:         PDLineDashPattern dashPattern = state.getLineDashPattern();",
          "750:         float phaseStart = dashPattern.getPhase();",
          "752:         phaseStart = transformWidth(phaseStart);",
          "757:         if (dashArray.length == 0 || Float.isInfinite(phaseStart) || Float.isNaN(phaseStart))",
          "758:         {",
          "",
          "[Removed Lines]",
          "751:         float[] dashArray = getDashArray(dashPattern);",
          "753:         boolean allZero = true;",
          "",
          "[Added Lines]",
          "752:         float[] dashArray = dashPattern.getDashArray();",
          "753:         if (dashArray.length > 0)",
          "754:         {",
          "755:             boolean allZero = true;",
          "756:             for (int i = 0; i < dashArray.length; ++i)",
          "757:             {",
          "758:                 if (dashArray[i] != 0)",
          "759:                 {",
          "760:                     allZero = false;",
          "761:                     break;",
          "762:                 }",
          "763:             }",
          "764:             if (allZero)",
          "765:             {",
          "766:                 return (Shape p) -> new Area();",
          "767:             }",
          "768:         }",
          "770:         dashArray = getDashArray(dashPattern);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "762:         {",
          "763:             for (int i = 0; i < dashArray.length; ++i)",
          "764:             {",
          "767:                 {",
          "768:                     dashArray = null;",
          "770:                     break;",
          "771:                 }",
          "788:             }",
          "789:         }",
          "790:         int lineCap = Math.min(2, Math.max(0, state.getLineCap()));",
          "",
          "[Removed Lines]",
          "765:                 float dash = dashArray[i];",
          "766:                 if (Float.isInfinite(dash) || Float.isNaN(dash))",
          "769:                     allZero = false;",
          "772:                 if (dash != 0)",
          "773:                 {",
          "774:                     allZero = false;",
          "775:                 }",
          "776:             }",
          "777:             if (allZero)",
          "778:             {",
          "780:                 return new Stroke()",
          "781:                 {",
          "782:                     @Override",
          "783:                     public Shape createStrokedShape(Shape p)",
          "784:                     {",
          "785:                         return new Area();",
          "786:                     }",
          "787:                 };",
          "",
          "[Added Lines]",
          "782:                 if (Float.isInfinite(dashArray[i]) || Float.isNaN(dashArray[i]))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "299e2741e2e9554836512bb6eb80f65531c0b3ad",
      "candidate_info": {
        "commit_hash": "299e2741e2e9554836512bb6eb80f65531c0b3ad",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/299e2741e2e9554836512bb6eb80f65531c0b3ad",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PDCryptFilterDictionary.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java"
        ],
        "message": "PDFBOX-5249: fix bug in decryption of AES documents with unencrypted metadata, by Christian Appl\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891948 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PDCryptFilterDictionary.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PDCryptFilterDictionary.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PDCryptFilterDictionary.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PDCryptFilterDictionary.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PDCryptFilterDictionary.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PDCryptFilterDictionary.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.pdfbox.pdmodel.encryption;",
          "20: import org.apache.pdfbox.cos.COSDictionary;",
          "21: import org.apache.pdfbox.cos.COSName;",
          "22: import org.apache.pdfbox.pdmodel.common.COSObjectable;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import org.apache.pdfbox.cos.COSBase;",
          "21: import org.apache.pdfbox.cos.COSBoolean;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:         return (COSName)cryptFilterDictionary.getDictionaryObject( COSName.CFM );",
          "120:     }",
          "122: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:     public boolean isEncryptMetaData()",
          "130:     {",
          "131:         COSBase value = getCOSObject().getDictionaryObject(COSName.ENCRYPT_META_DATA);",
          "132:         if (value instanceof COSBoolean)",
          "133:         {",
          "134:             return ((COSBoolean) value).getValue();",
          "135:         }",
          "138:         return true;",
          "139:     }",
          "146:     public void setEncryptMetaData(boolean encryptMetaData)",
          "147:     {",
          "148:         getCOSObject().setBoolean(COSName.ENCRYPT_META_DATA, encryptMetaData);",
          "149:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: import org.bouncycastle.cms.RecipientId;",
          "69: import org.bouncycastle.cms.RecipientInformation;",
          "70: import org.bouncycastle.cms.jcajce.JceKeyTransEnvelopedRecipient;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: import org.bouncycastle.util.Arrays;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:                             + \"did you pass a null keyStore?\");",
          "128:         }",
          "131:         PDCryptFilterDictionary defaultCryptFilterDictionary = encryption.getDefaultCryptFilterDictionary();",
          "132:         if (defaultCryptFilterDictionary != null && defaultCryptFilterDictionary.getLength() != 0)",
          "133:         {",
          "134:             setKeyLength(defaultCryptFilterDictionary.getLength());",
          "135:         }",
          "136:         else if (encryption.getLength() != 0)",
          "137:         {",
          "138:             setKeyLength(encryption.getLength());",
          "139:         }",
          "141:         PublicKeyDecryptionMaterial material = (PublicKeyDecryptionMaterial) decryptionMaterial;",
          "",
          "[Removed Lines]",
          "130:         setDecryptMetadata(encryption.isEncryptMetaData());",
          "",
          "[Added Lines]",
          "135:             setDecryptMetadata(defaultCryptFilterDictionary.isEncryptMetaData());",
          "140:             setDecryptMetadata(encryption.isEncryptMetaData());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "245:             byte[] mdResult;",
          "246:             if (encryption.getVersion() == 4 || encryption.getVersion() == 5)",
          "247:             {",
          "248:                 if (encryption.getVersion() == 4)",
          "249:                 {",
          "250:                     mdResult = MessageDigests.getSHA1().digest(sha1Input);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250:                 if (!isDecryptMetadata())",
          "251:                 {",
          "254:                     sha1Input = Arrays.copyOf(sha1Input, sha1Input.length + 4);",
          "255:                     System.arraycopy(new byte[]{ (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff}, 0, sha1Input, sha1Input.length - 4, 4);",
          "256:                 }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     {",
          "121:         this.decryptMetadata = decryptMetadata;",
          "122:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:     public boolean isDecryptMetadata()",
          "130:     {",
          "131:         return decryptMetadata;",
          "132:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1163e60edd5452d005ea85cdb0d6abd8fb4e191e",
      "candidate_info": {
        "commit_hash": "1163e60edd5452d005ea85cdb0d6abd8fb4e191e",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/1163e60edd5452d005ea85cdb0d6abd8fb4e191e",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/ttf/MemoryTTFDataStream.java"
        ],
        "message": "PDFBOX-4892: remove useless shift, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887043 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/ttf/MemoryTTFDataStream.java||fontbox/src/main/java/org/apache/fontbox/ttf/MemoryTTFDataStream.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/ttf/MemoryTTFDataStream.java||fontbox/src/main/java/org/apache/fontbox/ttf/MemoryTTFDataStream.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/ttf/MemoryTTFDataStream.java -> fontbox/src/main/java/org/apache/fontbox/ttf/MemoryTTFDataStream.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:         {",
          "85:             throw new EOFException();",
          "86:         }",
          "88:     }",
          "",
          "[Removed Lines]",
          "87:         return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4 << 0));",
          "",
          "[Added Lines]",
          "87:         return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8) + ch4);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:         {",
          "120:             throw new EOFException();",
          "121:         }",
          "123:     }",
          "",
          "[Removed Lines]",
          "122:         return (ch1 << 8) + (ch2 << 0);",
          "",
          "[Added Lines]",
          "122:         return (ch1 << 8) + ch2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:         {",
          "138:             throw new EOFException();",
          "139:         }",
          "141:     }",
          "",
          "[Removed Lines]",
          "140:         return (short)((ch1 << 8) + (ch2 << 0));",
          "",
          "[Added Lines]",
          "140:         return (short)((ch1 << 8) + ch2);",
          "",
          "---------------"
        ]
      }
    }
  ]
}