{
  "cve_id": "CVE-2024-38827",
  "cve_desc": "The usage of String.toLowerCase()\u00a0and String.toUpperCase()\u00a0has some Locale\u00a0dependent exceptions that could potentially result in authorization rules not working properly.",
  "repo": "spring-projects/spring-framework",
  "patch_hash": "11d4272ff48b4a4dabc4b28dfbff0364a4204bc9",
  "patch_info": {
    "commit_hash": "11d4272ff48b4a4dabc4b28dfbff0364a4204bc9",
    "repo": "spring-projects/spring-framework",
    "commit_url": "https://github.com/spring-projects/spring-framework/commit/11d4272ff48b4a4dabc4b28dfbff0364a4204bc9",
    "files": [
      "spring-beans/src/main/java/org/springframework/beans/support/PropertyComparator.java",
      "spring-context-support/src/main/java/org/springframework/scheduling/quartz/LocalDataSourceJobStore.java",
      "spring-context/src/main/java/org/springframework/format/datetime/standard/MonthFormatter.java",
      "spring-context/src/main/java/org/springframework/scheduling/support/CronField.java",
      "spring-core-test/src/main/java/org/springframework/aot/agent/InvocationsRecorderClassVisitor.java",
      "spring-core/src/main/java/org/springframework/core/convert/support/StringToBooleanConverter.java",
      "spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java",
      "spring-core/src/main/java/org/springframework/util/ResourceUtils.java",
      "spring-expression/src/main/java/org/springframework/expression/spel/SpelParserConfiguration.java",
      "spring-expression/src/main/java/org/springframework/expression/spel/ast/TypeReference.java",
      "spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java",
      "spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java",
      "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java",
      "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/Db2CallMetaDataProvider.java",
      "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/DerbyCallMetaDataProvider.java",
      "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericCallMetaDataProvider.java",
      "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java",
      "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/TableMetaDataContext.java",
      "spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/SqlParameterSourceUtils.java",
      "spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java",
      "spring-jms/src/main/java/org/springframework/jms/config/JmsListenerContainerParser.java",
      "spring-test/src/main/java/org/springframework/test/context/NestedTestConfiguration.java",
      "spring-test/src/main/java/org/springframework/test/context/TestConstructor.java"
    ],
    "message": "Use Locale.ROOT consistently for toLower/toUpperCase\n\nCloses gh-33708",
    "before_after_code_files": [
      "spring-beans/src/main/java/org/springframework/beans/support/PropertyComparator.java||spring-beans/src/main/java/org/springframework/beans/support/PropertyComparator.java",
      "spring-context-support/src/main/java/org/springframework/scheduling/quartz/LocalDataSourceJobStore.java||spring-context-support/src/main/java/org/springframework/scheduling/quartz/LocalDataSourceJobStore.java",
      "spring-context/src/main/java/org/springframework/format/datetime/standard/MonthFormatter.java||spring-context/src/main/java/org/springframework/format/datetime/standard/MonthFormatter.java",
      "spring-context/src/main/java/org/springframework/scheduling/support/CronField.java||spring-context/src/main/java/org/springframework/scheduling/support/CronField.java",
      "spring-core-test/src/main/java/org/springframework/aot/agent/InvocationsRecorderClassVisitor.java||spring-core-test/src/main/java/org/springframework/aot/agent/InvocationsRecorderClassVisitor.java",
      "spring-core/src/main/java/org/springframework/core/convert/support/StringToBooleanConverter.java||spring-core/src/main/java/org/springframework/core/convert/support/StringToBooleanConverter.java",
      "spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java||spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java",
      "spring-core/src/main/java/org/springframework/util/ResourceUtils.java||spring-core/src/main/java/org/springframework/util/ResourceUtils.java",
      "spring-expression/src/main/java/org/springframework/expression/spel/SpelParserConfiguration.java||spring-expression/src/main/java/org/springframework/expression/spel/SpelParserConfiguration.java",
      "spring-expression/src/main/java/org/springframework/expression/spel/ast/TypeReference.java||spring-expression/src/main/java/org/springframework/expression/spel/ast/TypeReference.java",
      "spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java||spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java",
      "spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java||spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java",
      "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java||spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java",
      "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/Db2CallMetaDataProvider.java||spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/Db2CallMetaDataProvider.java",
      "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/DerbyCallMetaDataProvider.java||spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/DerbyCallMetaDataProvider.java",
      "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericCallMetaDataProvider.java||spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericCallMetaDataProvider.java",
      "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java||spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java",
      "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/TableMetaDataContext.java||spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/TableMetaDataContext.java",
      "spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/SqlParameterSourceUtils.java||spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/SqlParameterSourceUtils.java",
      "spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java||spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java",
      "spring-jms/src/main/java/org/springframework/jms/config/JmsListenerContainerParser.java||spring-jms/src/main/java/org/springframework/jms/config/JmsListenerContainerParser.java",
      "spring-test/src/main/java/org/springframework/test/context/NestedTestConfiguration.java||spring-test/src/main/java/org/springframework/test/context/NestedTestConfiguration.java",
      "spring-test/src/main/java/org/springframework/test/context/TestConstructor.java||spring-test/src/main/java/org/springframework/test/context/TestConstructor.java"
    ]
  },
  "patch_diff": {
    "spring-beans/src/main/java/org/springframework/beans/support/PropertyComparator.java||spring-beans/src/main/java/org/springframework/beans/support/PropertyComparator.java": [
      "File: spring-beans/src/main/java/org/springframework/beans/support/PropertyComparator.java -> spring-beans/src/main/java/org/springframework/beans/support/PropertyComparator.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.util.Arrays;",
      "20: import java.util.Comparator;",
      "21: import java.util.List;",
      "23: import org.apache.commons.logging.Log;",
      "24: import org.apache.commons.logging.LogFactory;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77:   Object v1 = getPropertyValue(o1);",
      "78:   Object v2 = getPropertyValue(o2);",
      "79:   if (this.sortDefinition.isIgnoreCase() && (v1 instanceof String text1) && (v2 instanceof String text2)) {",
      "82:   }",
      "84:   int result;",
      "",
      "[Removed Lines]",
      "80:    v1 = text1.toLowerCase();",
      "81:    v2 = text2.toLowerCase();",
      "",
      "[Added Lines]",
      "81:    v1 = text1.toLowerCase(Locale.ROOT);",
      "82:    v2 = text2.toLowerCase(Locale.ROOT);",
      "",
      "---------------"
    ],
    "spring-context-support/src/main/java/org/springframework/scheduling/quartz/LocalDataSourceJobStore.java||spring-context-support/src/main/java/org/springframework/scheduling/quartz/LocalDataSourceJobStore.java": [
      "File: spring-context-support/src/main/java/org/springframework/scheduling/quartz/LocalDataSourceJobStore.java -> spring-context-support/src/main/java/org/springframework/scheduling/quartz/LocalDataSourceJobStore.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.sql.Connection;",
      "20: import java.sql.DatabaseMetaData;",
      "21: import java.sql.SQLException;",
      "23: import javax.sql.DataSource;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "155:    String productName = JdbcUtils.extractDatabaseMetaData(this.dataSource,",
      "156:      DatabaseMetaData::getDatabaseProductName);",
      "157:    productName = JdbcUtils.commonDatabaseName(productName);",
      "159:     setUseDBLocks(false);",
      "160:     setLockHandler(new SimpleSemaphore());",
      "161:    }",
      "",
      "[Removed Lines]",
      "158:    if (productName != null && productName.toLowerCase().contains(\"hsql\")) {",
      "",
      "[Added Lines]",
      "159:    if (productName != null && productName.toLowerCase(Locale.ROOT).contains(\"hsql\")) {",
      "",
      "---------------"
    ],
    "spring-context/src/main/java/org/springframework/format/datetime/standard/MonthFormatter.java||spring-context/src/main/java/org/springframework/format/datetime/standard/MonthFormatter.java": [
      "File: spring-context/src/main/java/org/springframework/format/datetime/standard/MonthFormatter.java -> spring-context/src/main/java/org/springframework/format/datetime/standard/MonthFormatter.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "35:  @Override",
      "36:  public Month parse(String text, Locale locale) throws ParseException {",
      "38:  }",
      "40:  @Override",
      "",
      "[Removed Lines]",
      "37:   return Month.valueOf(text.toUpperCase());",
      "",
      "[Added Lines]",
      "37:   return Month.valueOf(text.toUpperCase(Locale.ROOT));",
      "",
      "---------------"
    ],
    "spring-context/src/main/java/org/springframework/scheduling/support/CronField.java||spring-context/src/main/java/org/springframework/scheduling/support/CronField.java": [
      "File: spring-context/src/main/java/org/springframework/scheduling/support/CronField.java -> spring-context/src/main/java/org/springframework/scheduling/support/CronField.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: import java.time.temporal.ChronoUnit;",
      "22: import java.time.temporal.Temporal;",
      "23: import java.time.temporal.ValueRange;",
      "24: import java.util.function.BiFunction;",
      "26: import org.springframework.lang.Nullable;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "143:  }",
      "145:  private static String replaceOrdinals(String value, String[] list) {",
      "147:   for (int i = 0; i < list.length; i++) {",
      "148:    String replacement = Integer.toString(i + 1);",
      "149:    value = StringUtils.replace(value, list[i], replacement);",
      "",
      "[Removed Lines]",
      "146:   value = value.toUpperCase();",
      "",
      "[Added Lines]",
      "147:   value = value.toUpperCase(Locale.ROOT);",
      "",
      "---------------"
    ],
    "spring-core-test/src/main/java/org/springframework/aot/agent/InvocationsRecorderClassVisitor.java||spring-core-test/src/main/java/org/springframework/aot/agent/InvocationsRecorderClassVisitor.java": [
      "File: spring-core-test/src/main/java/org/springframework/aot/agent/InvocationsRecorderClassVisitor.java -> spring-core-test/src/main/java/org/springframework/aot/agent/InvocationsRecorderClassVisitor.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.springframework.aot.agent;",
      "19: import java.util.HashSet;",
      "20: import java.util.Set;",
      "22: import org.springframework.asm.ClassVisitor;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "125:   private String rewriteMethodName(String owner, String methodName) {",
      "126:    int classIndex = owner.lastIndexOf('/');",
      "128:   }",
      "130:   private String rewriteDescriptor(int opcode, String owner, String name, String descriptor) {",
      "131:    return (opcode == Opcodes.INVOKESTATIC || opcode == Opcodes.H_INVOKESTATIC) ? descriptor : \"(L\" + owner + \";\" + descriptor.substring(1);",
      "132:   }",
      "134:  }",
      "136: }",
      "",
      "[Removed Lines]",
      "127:    return owner.substring(classIndex + 1).toLowerCase() + methodName;",
      "",
      "[Added Lines]",
      "129:    return owner.substring(classIndex + 1).toLowerCase(Locale.ROOT) + methodName;",
      "",
      "---------------"
    ],
    "spring-core/src/main/java/org/springframework/core/convert/support/StringToBooleanConverter.java||spring-core/src/main/java/org/springframework/core/convert/support/StringToBooleanConverter.java": [
      "File: spring-core/src/main/java/org/springframework/core/convert/support/StringToBooleanConverter.java -> spring-core/src/main/java/org/springframework/core/convert/support/StringToBooleanConverter.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.springframework.core.convert.support;",
      "19: import java.util.Set;",
      "21: import org.springframework.core.convert.converter.Converter;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "43:   if (value.isEmpty()) {",
      "44:    return null;",
      "45:   }",
      "47:   if (trueValues.contains(value)) {",
      "48:    return Boolean.TRUE;",
      "49:   }",
      "",
      "[Removed Lines]",
      "46:   value = value.toLowerCase();",
      "",
      "[Added Lines]",
      "47:   value = value.toLowerCase(Locale.ROOT);",
      "",
      "---------------"
    ],
    "spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java||spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java": [
      "File: spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java -> spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.springframework.core.env;",
      "19: import java.util.Map;",
      "21: import org.springframework.lang.Nullable;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "109:   if (resolvedName != null) {",
      "110:    return resolvedName;",
      "111:   }",
      "113:   if (!name.equals(uppercasedName)) {",
      "114:    resolvedName = checkPropertyName(uppercasedName);",
      "115:    if (resolvedName != null) {",
      "",
      "[Removed Lines]",
      "112:   String uppercasedName = name.toUpperCase();",
      "",
      "[Added Lines]",
      "113:   String uppercasedName = name.toUpperCase(Locale.ROOT);",
      "",
      "---------------"
    ],
    "spring-core/src/main/java/org/springframework/util/ResourceUtils.java||spring-core/src/main/java/org/springframework/util/ResourceUtils.java": [
      "File: spring-core/src/main/java/org/springframework/util/ResourceUtils.java -> spring-core/src/main/java/org/springframework/util/ResourceUtils.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: import java.net.URISyntaxException;",
      "25: import java.net.URL;",
      "26: import java.net.URLConnection;",
      "28: import org.springframework.lang.Nullable;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "307:  public static boolean isJarFileURL(URL url) {",
      "308:   return (URL_PROTOCOL_FILE.equals(url.getProtocol()) &&",
      "310:  }",
      "",
      "[Removed Lines]",
      "309:     url.getPath().toLowerCase().endsWith(JAR_FILE_EXTENSION));",
      "",
      "[Added Lines]",
      "310:     url.getPath().toLowerCase(Locale.ROOT).endsWith(JAR_FILE_EXTENSION));",
      "",
      "---------------"
    ],
    "spring-expression/src/main/java/org/springframework/expression/spel/SpelParserConfiguration.java||spring-expression/src/main/java/org/springframework/expression/spel/SpelParserConfiguration.java": [
      "File: spring-expression/src/main/java/org/springframework/expression/spel/SpelParserConfiguration.java -> spring-expression/src/main/java/org/springframework/expression/spel/SpelParserConfiguration.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.springframework.expression.spel;",
      "19: import org.springframework.core.SpringProperties;",
      "20: import org.springframework.lang.Nullable;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "46:  static {",
      "47:   String compilerMode = SpringProperties.getProperty(SPRING_EXPRESSION_COMPILER_MODE_PROPERTY_NAME);",
      "48:   defaultCompilerMode = (compilerMode != null ?",
      "50:  }",
      "",
      "[Removed Lines]",
      "49:     SpelCompilerMode.valueOf(compilerMode.toUpperCase()) : SpelCompilerMode.OFF);",
      "",
      "[Added Lines]",
      "51:     SpelCompilerMode.valueOf(compilerMode.toUpperCase(Locale.ROOT)) : SpelCompilerMode.OFF);",
      "",
      "---------------"
    ],
    "spring-expression/src/main/java/org/springframework/expression/spel/ast/TypeReference.java||spring-expression/src/main/java/org/springframework/expression/spel/ast/TypeReference.java": [
      "File: spring-expression/src/main/java/org/springframework/expression/spel/ast/TypeReference.java -> spring-expression/src/main/java/org/springframework/expression/spel/ast/TypeReference.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.springframework.expression.spel.ast;",
      "19: import java.lang.reflect.Array;",
      "21: import org.springframework.asm.MethodVisitor;",
      "22: import org.springframework.asm.Type;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "58:   String typeName = (String) this.children[0].getValueInternal(state).getValue();",
      "59:   Assert.state(typeName != null, \"No type name\");",
      "60:   if (!typeName.contains(\".\") && Character.isLowerCase(typeName.charAt(0))) {",
      "62:    if (tc != TypeCode.OBJECT) {",
      "64:     Class<?> clazz = makeArrayIfNecessary(tc.getType());",
      "",
      "[Removed Lines]",
      "61:    TypeCode tc = TypeCode.valueOf(typeName.toUpperCase());",
      "",
      "[Added Lines]",
      "62:    TypeCode tc = TypeCode.valueOf(typeName.toUpperCase(Locale.ROOT));",
      "",
      "---------------"
    ],
    "spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java||spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java": [
      "File: spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java -> spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: import java.util.Collections;",
      "22: import java.util.Deque;",
      "23: import java.util.List;",
      "24: import java.util.concurrent.ConcurrentHashMap;",
      "25: import java.util.concurrent.ConcurrentMap;",
      "26: import java.util.regex.Pattern;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "750:     throw internalException( this.expressionString.length(), SpelMessage.OOD);",
      "751:    }",
      "752:    throw internalException(node.startPos, SpelMessage.NOT_EXPECTED_TOKEN,",
      "754:   }",
      "755:   return new QualifiedIdentifier(qualifiedIdPieces.getFirst().getStartPosition(),",
      "756:     qualifiedIdPieces.getLast().getEndPosition(), qualifiedIdPieces.toArray(new SpelNodeImpl[0]));",
      "",
      "[Removed Lines]",
      "753:      \"qualified ID\", node.getKind().toString().toLowerCase());",
      "",
      "[Added Lines]",
      "754:      \"qualified ID\", node.getKind().toString().toLowerCase(Locale.ROOT));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "942:   }",
      "943:   if (t.kind != expectedKind) {",
      "944:    throw internalException(t.startPos, SpelMessage.NOT_EXPECTED_TOKEN,",
      "946:   }",
      "947:   return t;",
      "948:  }",
      "",
      "[Removed Lines]",
      "945:      expectedKind.toString().toLowerCase(), t.getKind().toString().toLowerCase());",
      "",
      "[Added Lines]",
      "946:      expectedKind.toString().toLowerCase(Locale.ROOT), t.getKind().toString().toLowerCase(Locale.ROOT));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1038:   if (t.getKind().hasPayload()) {",
      "1039:    return t.stringValue();",
      "1040:   }",
      "1042:  }",
      "1044:  private void checkOperands(Token token, @Nullable SpelNodeImpl left, @Nullable SpelNodeImpl right) {",
      "",
      "[Removed Lines]",
      "1041:   return t.kind.toString().toLowerCase();",
      "",
      "[Added Lines]",
      "1042:   return t.kind.toString().toLowerCase(Locale.ROOT);",
      "",
      "---------------"
    ],
    "spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java||spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java": [
      "File: spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java -> spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.util.ArrayList;",
      "20: import java.util.Arrays;",
      "21: import java.util.List;",
      "23: import org.springframework.expression.spel.InternalParseException;",
      "24: import org.springframework.expression.spel.SpelMessage;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "459:   if (subarray.length == 2 || subarray.length == 3) {",
      "461:    int idx = Arrays.binarySearch(ALTERNATIVE_OPERATOR_NAMES, asString);",
      "462:    if (idx >= 0) {",
      "463:     pushOneCharOrTwoCharToken(TokenKind.valueOf(asString), start, subarray);",
      "",
      "[Removed Lines]",
      "460:    String asString = new String(subarray).toUpperCase();",
      "",
      "[Added Lines]",
      "461:    String asString = new String(subarray).toUpperCase(Locale.ROOT);",
      "",
      "---------------"
    ],
    "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java||spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java": [
      "File: spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java -> spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "385:     if (meta.isReturnParameter()) {",
      "386:      param = declaredParams.get(getFunctionReturnName());",
      "387:      if (param == null && !getOutParameterNames().isEmpty()) {",
      "389:      }",
      "390:      if (param == null) {",
      "391:       throw new InvalidDataAccessApiUsageException(",
      "",
      "[Removed Lines]",
      "388:       param = declaredParams.get(getOutParameterNames().get(0).toLowerCase());",
      "",
      "[Added Lines]",
      "388:       param = declaredParams.get(getOutParameterNames().get(0).toLowerCase(Locale.ROOT));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "488:     String parameterName = parameter.getName();",
      "489:     String parameterNameToMatch = obtainMetaDataProvider().parameterNameToUse(parameterName);",
      "490:     if (parameterNameToMatch != null) {",
      "492:     }",
      "493:     if (parameterName != null) {",
      "494:      if (parameterSource.hasValue(parameterName)) {",
      "",
      "[Removed Lines]",
      "491:      callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName);",
      "",
      "[Added Lines]",
      "491:      callParameterNames.put(parameterNameToMatch.toLowerCase(Locale.ROOT), parameterName);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "496:         SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName));",
      "497:      }",
      "498:      else {",
      "500:       if (parameterSource.hasValue(lowerCaseName)) {",
      "501:        matchedParameters.put(parameterName,",
      "502:          SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName));",
      "",
      "[Removed Lines]",
      "499:       String lowerCaseName = parameterName.toLowerCase();",
      "",
      "[Added Lines]",
      "499:       String lowerCaseName = parameterName.toLowerCase(Locale.ROOT);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "556:     String parameterName = parameter.getName();",
      "557:     String parameterNameToMatch = provider.parameterNameToUse(parameterName);",
      "558:     if (parameterNameToMatch != null) {",
      "560:     }",
      "561:    }",
      "562:   }",
      "",
      "[Removed Lines]",
      "559:      callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName);",
      "",
      "[Added Lines]",
      "559:      callParameterNames.put(parameterNameToMatch.toLowerCase(Locale.ROOT), parameterName);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "681:  }",
      "683:  private static String lowerCase(@Nullable String paramName) {",
      "685:  }",
      "687: }",
      "",
      "[Removed Lines]",
      "684:   return (paramName != null ? paramName.toLowerCase() : \"\");",
      "",
      "[Added Lines]",
      "684:   return (paramName != null ? paramName.toLowerCase(Locale.ROOT) : \"\");",
      "",
      "---------------"
    ],
    "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/Db2CallMetaDataProvider.java||spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/Db2CallMetaDataProvider.java": [
      "File: spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/Db2CallMetaDataProvider.java -> spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/Db2CallMetaDataProvider.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.sql.DatabaseMetaData;",
      "20: import java.sql.SQLException;",
      "22: import org.springframework.lang.Nullable;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:   String userName = getUserName();",
      "77:  }",
      "79: }",
      "",
      "[Removed Lines]",
      "76:   return (userName != null ? userName.toUpperCase() : null);",
      "",
      "[Added Lines]",
      "77:   return (userName != null ? userName.toUpperCase(Locale.ROOT) : null);",
      "",
      "---------------"
    ],
    "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/DerbyCallMetaDataProvider.java||spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/DerbyCallMetaDataProvider.java": [
      "File: spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/DerbyCallMetaDataProvider.java -> spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/DerbyCallMetaDataProvider.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.sql.DatabaseMetaData;",
      "20: import java.sql.SQLException;",
      "22: import org.springframework.lang.Nullable;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:   String userName = getUserName();",
      "49:  }",
      "51: }",
      "",
      "[Removed Lines]",
      "48:   return (userName != null ? userName.toUpperCase() : null);",
      "",
      "[Added Lines]",
      "49:   return (userName != null ? userName.toUpperCase(Locale.ROOT) : null);",
      "",
      "---------------"
    ],
    "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericCallMetaDataProvider.java||spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericCallMetaDataProvider.java": [
      "File: spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericCallMetaDataProvider.java -> spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericCallMetaDataProvider.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: import java.sql.Types;",
      "23: import java.util.ArrayList;",
      "24: import java.util.List;",
      "26: import org.apache.commons.logging.Log;",
      "27: import org.apache.commons.logging.LogFactory;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "284:    return null;",
      "285:   }",
      "286:   else if (isStoresUpperCaseIdentifiers()) {",
      "288:   }",
      "289:   else if (isStoresLowerCaseIdentifiers()) {",
      "291:   }",
      "292:   else {",
      "293:    return identifierName;",
      "",
      "[Removed Lines]",
      "287:    return identifierName.toUpperCase();",
      "290:    return identifierName.toLowerCase();",
      "",
      "[Added Lines]",
      "288:    return identifierName.toUpperCase(Locale.ROOT);",
      "291:    return identifierName.toLowerCase(Locale.ROOT);",
      "",
      "---------------"
    ],
    "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java||spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java": [
      "File: spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java -> spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: import java.util.Arrays;",
      "25: import java.util.HashMap;",
      "26: import java.util.List;",
      "27: import java.util.Map;",
      "29: import org.apache.commons.logging.Log;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "214:    return null;",
      "215:   }",
      "216:   else if (isStoresUpperCaseIdentifiers()) {",
      "218:   }",
      "219:   else if (isStoresLowerCaseIdentifiers()) {",
      "221:   }",
      "222:   else {",
      "223:    return identifierName;",
      "",
      "[Removed Lines]",
      "217:    return identifierName.toUpperCase();",
      "220:    return identifierName.toLowerCase();",
      "",
      "[Added Lines]",
      "218:    return identifierName.toUpperCase(Locale.ROOT);",
      "221:    return identifierName.toLowerCase(Locale.ROOT);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "326:     TableMetaData tmd = new TableMetaData(tables.getString(\"TABLE_CAT\"),",
      "327:       tables.getString(\"TABLE_SCHEM\"), tables.getString(\"TABLE_NAME\"));",
      "328:     if (tmd.schemaName() == null) {",
      "330:     }",
      "331:     else {",
      "333:     }",
      "334:    }",
      "335:   }",
      "",
      "[Removed Lines]",
      "329:      tableMeta.put(this.userName != null ? this.userName.toUpperCase() : \"\", tmd);",
      "332:      tableMeta.put(tmd.schemaName().toUpperCase(), tmd);",
      "",
      "[Added Lines]",
      "330:      tableMeta.put(this.userName != null ? this.userName.toUpperCase(Locale.ROOT) : \"\", tmd);",
      "333:      tableMeta.put(tmd.schemaName().toUpperCase(Locale.ROOT), tmd);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "356:    Map<String, TableMetaData> tableMeta) {",
      "358:   if (schemaName != null) {",
      "360:    if (tmd == null) {",
      "361:     throw new DataAccessResourceFailureException(\"Unable to locate table meta-data for '\" +",
      "362:       tableName + \"' in the '\" + schemaName + \"' schema\");",
      "",
      "[Removed Lines]",
      "359:    TableMetaData tmd = tableMeta.get(schemaName.toUpperCase());",
      "",
      "[Added Lines]",
      "360:    TableMetaData tmd = tableMeta.get(schemaName.toUpperCase(Locale.ROOT));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "369:   else {",
      "370:    TableMetaData tmd = tableMeta.get(getDefaultSchema());",
      "371:    if (tmd == null) {",
      "373:    }",
      "374:    if (tmd == null) {",
      "375:     tmd = tableMeta.get(\"PUBLIC\");",
      "",
      "[Removed Lines]",
      "372:     tmd = tableMeta.get(this.userName != null ? this.userName.toUpperCase() : \"\");",
      "",
      "[Added Lines]",
      "373:     tmd = tableMeta.get(this.userName != null ? this.userName.toUpperCase(Locale.ROOT) : \"\");",
      "",
      "---------------"
    ],
    "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/TableMetaDataContext.java||spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/TableMetaDataContext.java": [
      "File: spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/TableMetaDataContext.java -> spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/TableMetaDataContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: import java.util.Collections;",
      "21: import java.util.LinkedHashSet;",
      "22: import java.util.List;",
      "23: import java.util.Map;",
      "24: import java.util.Set;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "217:   }",
      "218:   Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length);",
      "219:   for (String key : generatedKeyNames) {",
      "221:   }",
      "222:   List<String> columns = new ArrayList<>();",
      "223:   for (TableParameterMetaData meta : obtainMetaDataProvider().getTableParameterMetaData()) {",
      "225:     columns.add(meta.getParameterName());",
      "226:    }",
      "227:   }",
      "",
      "[Removed Lines]",
      "220:    keys.add(key.toUpperCase());",
      "224:    if (!keys.contains(meta.getParameterName().toUpperCase())) {",
      "",
      "[Added Lines]",
      "221:    keys.add(key.toUpperCase(Locale.ROOT));",
      "225:    if (!keys.contains(meta.getParameterName().toUpperCase(Locale.ROOT))) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "243:     values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, column));",
      "244:    }",
      "245:    else {",
      "247:     if (parameterSource.hasValue(lowerCaseName)) {",
      "248:      values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName));",
      "249:     }",
      "",
      "[Removed Lines]",
      "246:     String lowerCaseName = column.toLowerCase();",
      "",
      "[Added Lines]",
      "247:     String lowerCaseName = column.toLowerCase(Locale.ROOT);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "276:   for (String column : this.tableColumns) {",
      "277:    Object value = inParameters.get(column);",
      "278:    if (value == null) {",
      "280:     if (value == null) {",
      "281:      for (Map.Entry<String, ?> entry : inParameters.entrySet()) {",
      "282:       if (column.equalsIgnoreCase(entry.getKey())) {",
      "",
      "[Removed Lines]",
      "279:     value = inParameters.get(column.toLowerCase());",
      "",
      "[Added Lines]",
      "280:     value = inParameters.get(column.toLowerCase(Locale.ROOT));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "298:  public String createInsertString(String... generatedKeyNames) {",
      "299:   Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length);",
      "300:   for (String key : generatedKeyNames) {",
      "302:   }",
      "304:   String identifierQuoteString = (isQuoteIdentifiers() ?",
      "",
      "[Removed Lines]",
      "301:    keys.add(key.toUpperCase());",
      "",
      "[Added Lines]",
      "302:    keys.add(key.toUpperCase(Locale.ROOT));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "326:   insertStatement.append(\" (\");",
      "327:   int columnCount = 0;",
      "328:   for (String columnName : getTableColumns()) {",
      "330:     columnCount++;",
      "331:     if (columnCount > 1) {",
      "332:      insertStatement.append(\", \");",
      "",
      "[Removed Lines]",
      "329:    if (!keys.contains(columnName.toUpperCase())) {",
      "",
      "[Added Lines]",
      "330:    if (!keys.contains(columnName.toUpperCase(Locale.ROOT))) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "366:   List<TableParameterMetaData> parameters = obtainMetaDataProvider().getTableParameterMetaData();",
      "367:   Map<String, TableParameterMetaData> parameterMap = CollectionUtils.newLinkedHashMap(parameters.size());",
      "368:   for (TableParameterMetaData tpmd : parameters) {",
      "370:   }",
      "371:   int typeIndx = 0;",
      "372:   for (String column : getTableColumns()) {",
      "",
      "[Removed Lines]",
      "369:    parameterMap.put(tpmd.getParameterName().toUpperCase(), tpmd);",
      "",
      "[Added Lines]",
      "370:    parameterMap.put(tpmd.getParameterName().toUpperCase(Locale.ROOT), tpmd);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "374:     types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN;",
      "375:    }",
      "376:    else {",
      "378:     if (tpmd != null) {",
      "379:      types[typeIndx] = tpmd.getSqlType();",
      "380:     }",
      "",
      "[Removed Lines]",
      "377:     TableParameterMetaData tpmd = parameterMap.get(column.toUpperCase());",
      "",
      "[Added Lines]",
      "378:     TableParameterMetaData tpmd = parameterMap.get(column.toUpperCase(Locale.ROOT));",
      "",
      "---------------"
    ],
    "spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/SqlParameterSourceUtils.java||spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/SqlParameterSourceUtils.java": [
      "File: spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/SqlParameterSourceUtils.java -> spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/SqlParameterSourceUtils.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.util.Arrays;",
      "20: import java.util.Collection;",
      "21: import java.util.HashMap;",
      "22: import java.util.Map;",
      "24: import org.springframework.jdbc.core.SqlParameterValue;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "115:   String[] paramNames = parameterSource.getParameterNames();",
      "116:   if (paramNames != null) {",
      "117:    for (String name : paramNames) {",
      "119:    }",
      "120:   }",
      "121:   return caseInsensitiveParameterNames;",
      "",
      "[Removed Lines]",
      "118:     caseInsensitiveParameterNames.put(name.toLowerCase(), name);",
      "",
      "[Added Lines]",
      "119:     caseInsensitiveParameterNames.put(name.toLowerCase(Locale.ROOT), name);",
      "",
      "---------------"
    ],
    "spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java||spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java": [
      "File: spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java -> spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: import java.util.Collections;",
      "27: import java.util.HashMap;",
      "28: import java.util.List;",
      "29: import java.util.Map;",
      "31: import javax.sql.DataSource;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "494:     Long key = getJdbcTemplate().queryForObject(",
      "495:       getInsertString() + \" \" + keyQuery, Long.class, values.toArray());",
      "496:     Map<String, Object> keys = new HashMap<>(2);",
      "",
      "[Removed Lines]",
      "493:    if (keyQuery.toUpperCase().startsWith(\"RETURNING\")) {",
      "",
      "[Added Lines]",
      "494:    if (keyQuery.toUpperCase(Locale.ROOT).startsWith(\"RETURNING\")) {",
      "",
      "---------------"
    ],
    "spring-jms/src/main/java/org/springframework/jms/config/JmsListenerContainerParser.java||spring-jms/src/main/java/org/springframework/jms/config/JmsListenerContainerParser.java": [
      "File: spring-jms/src/main/java/org/springframework/jms/config/JmsListenerContainerParser.java -> spring-jms/src/main/java/org/springframework/jms/config/JmsListenerContainerParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.springframework.jms.config;",
      "19: import jakarta.jms.Session;",
      "20: import org.w3c.dom.Element;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "155:     }",
      "156:    }",
      "157:    else {",
      "159:    }",
      "160:   }",
      "",
      "[Removed Lines]",
      "158:     properties.add(\"cacheLevelName\", \"CACHE_\" + cache.toUpperCase());",
      "",
      "[Added Lines]",
      "160:     properties.add(\"cacheLevelName\", \"CACHE_\" + cache.toUpperCase(Locale.ROOT));",
      "",
      "---------------"
    ],
    "spring-test/src/main/java/org/springframework/test/context/NestedTestConfiguration.java||spring-test/src/main/java/org/springframework/test/context/NestedTestConfiguration.java": [
      "File: spring-test/src/main/java/org/springframework/test/context/NestedTestConfiguration.java -> spring-test/src/main/java/org/springframework/test/context/NestedTestConfiguration.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: import java.lang.annotation.Retention;",
      "23: import java.lang.annotation.RetentionPolicy;",
      "24: import java.lang.annotation.Target;",
      "26: import org.apache.commons.logging.Log;",
      "27: import org.apache.commons.logging.LogFactory;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "159:     return null;",
      "160:    }",
      "161:    try {",
      "163:    }",
      "164:    catch (IllegalArgumentException ex) {",
      "165:     Log logger = LogFactory.getLog(EnclosingConfiguration.class);",
      "",
      "[Removed Lines]",
      "162:     return EnclosingConfiguration.valueOf(name.trim().toUpperCase());",
      "",
      "[Added Lines]",
      "163:     return EnclosingConfiguration.valueOf(name.trim().toUpperCase(Locale.ROOT));",
      "",
      "---------------"
    ],
    "spring-test/src/main/java/org/springframework/test/context/TestConstructor.java||spring-test/src/main/java/org/springframework/test/context/TestConstructor.java": [
      "File: spring-test/src/main/java/org/springframework/test/context/TestConstructor.java -> spring-test/src/main/java/org/springframework/test/context/TestConstructor.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: import java.lang.annotation.Retention;",
      "23: import java.lang.annotation.RetentionPolicy;",
      "24: import java.lang.annotation.Target;",
      "26: import org.apache.commons.logging.Log;",
      "27: import org.apache.commons.logging.LogFactory;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "161:     return null;",
      "162:    }",
      "163:    try {",
      "165:    }",
      "166:    catch (IllegalArgumentException ex) {",
      "167:     Log logger = LogFactory.getLog(AutowireMode.class);",
      "",
      "[Removed Lines]",
      "164:     return AutowireMode.valueOf(name.trim().toUpperCase());",
      "",
      "[Added Lines]",
      "165:     return AutowireMode.valueOf(name.trim().toUpperCase(Locale.ROOT));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f3c8102882b9756a1be98c93f6ee678b0473866e",
      "candidate_info": {
        "commit_hash": "f3c8102882b9756a1be98c93f6ee678b0473866e",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/f3c8102882b9756a1be98c93f6ee678b0473866e",
        "files": [
          "spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java",
          "spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java"
        ],
        "message": "Polish SpEL Tokenizer",
        "before_after_code_files": [
          "spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java||spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java",
          "spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java||spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java||spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java",
            "spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java||spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java"
          ],
          "candidate": [
            "spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java||spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java",
            "spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java||spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java"
          ]
        }
      },
      "candidate_diff": {
        "spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java||spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java": [
          "File: spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java -> spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java"
        ],
        "spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java||spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java": [
          "File: spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java -> spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "448:   char[] subarray = subarray(start, this.pos);",
          "453:    String asString = new String(subarray).toUpperCase();",
          "454:    int idx = Arrays.binarySearch(ALTERNATIVE_OPERATOR_NAMES, asString);",
          "455:    if (idx >= 0) {",
          "",
          "[Removed Lines]",
          "452:   if ((this.pos - start) == 2 || (this.pos - start) == 3) {",
          "",
          "[Added Lines]",
          "459:   if (subarray.length == 2 || subarray.length == 3) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}