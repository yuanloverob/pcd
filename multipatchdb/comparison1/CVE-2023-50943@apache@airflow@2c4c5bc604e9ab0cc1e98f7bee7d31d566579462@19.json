{
  "cve_id": "CVE-2023-50943",
  "cve_desc": "Apache Airflow, versions before 2.8.1, have a vulnerability that allows a potential attacker to poison the XCom data by bypassing the protection of \"enable_xcom_pickling=False\" configuration setting resulting in poisoned data after XCom deserialization. This vulnerability is considered low since it requires a DAG author to exploit it. Users are recommended to upgrade to version 2.8.1 or later, which fixes this issue.",
  "repo": "apache/airflow",
  "patch_hash": "2c4c5bc604e9ab0cc1e98f7bee7d31d566579462",
  "patch_info": {
    "commit_hash": "2c4c5bc604e9ab0cc1e98f7bee7d31d566579462",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/2c4c5bc604e9ab0cc1e98f7bee7d31d566579462",
    "files": [
      "airflow/models/xcom.py",
      "tests/api_connexion/schemas/test_xcom_schema.py",
      "tests/models/test_xcom.py"
    ],
    "message": "Stop deserializing pickle when enable_xcom_pickling is False (#36255)\n\n* Stop deserializing pickle when enable_xcom_pickling is False\n\n* Fix unit tests\n\n(cherry picked from commit 63e97abec5d56bc62a293c93f5227f364561e51c)",
    "before_after_code_files": [
      "airflow/models/xcom.py||airflow/models/xcom.py",
      "tests/api_connexion/schemas/test_xcom_schema.py||tests/api_connexion/schemas/test_xcom_schema.py",
      "tests/models/test_xcom.py||tests/models/test_xcom.py"
    ]
  },
  "patch_diff": {
    "airflow/models/xcom.py||airflow/models/xcom.py": [
      "File: airflow/models/xcom.py -> airflow/models/xcom.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "685:             except pickle.UnpicklingError:",
      "686:                 return json.loads(result.value.decode(\"UTF-8\"), cls=XComDecoder, object_hook=object_hook)",
      "687:         else:",
      "693:     @staticmethod",
      "694:     def deserialize_value(result: XCom) -> Any:",
      "",
      "[Removed Lines]",
      "688:             try:",
      "689:                 return json.loads(result.value.decode(\"UTF-8\"), cls=XComDecoder, object_hook=object_hook)",
      "690:             except (json.JSONDecodeError, UnicodeDecodeError):",
      "691:                 return pickle.loads(result.value)",
      "",
      "[Added Lines]",
      "688:             # Since xcom_pickling is disabled, we should only try to deserialize with JSON",
      "689:             return json.loads(result.value.decode(\"UTF-8\"), cls=XComDecoder, object_hook=object_hook)",
      "",
      "---------------"
    ],
    "tests/api_connexion/schemas/test_xcom_schema.py||tests/api_connexion/schemas/test_xcom_schema.py": [
      "File: tests/api_connexion/schemas/test_xcom_schema.py -> tests/api_connexion/schemas/test_xcom_schema.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: from airflow.models import DagRun, XCom",
      "31: from airflow.utils.dates import parse_execution_date",
      "32: from airflow.utils.session import create_session",
      "34: pytestmark = pytest.mark.db_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: from tests.test_utils.config import conf_vars",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "188:     default_time = \"2016-04-02T21:00:00+00:00\"",
      "189:     default_time_parsed = parse_execution_date(default_time)",
      "191:     def test_serialize(self, create_xcom, session):",
      "192:         create_xcom(",
      "193:             dag_id=\"test_dag\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "192:     @conf_vars({(\"core\", \"enable_xcom_pickling\"): \"True\"})",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "208:             \"map_index\": -1,",
      "209:         }",
      "211:     def test_deserialize(self):",
      "212:         xcom_dump = {",
      "213:             \"key\": \"test_key\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "213:     @conf_vars({(\"core\", \"enable_xcom_pickling\"): \"True\"})",
      "",
      "---------------"
    ],
    "tests/models/test_xcom.py||tests/models/test_xcom.py": [
      "File: tests/models/test_xcom.py -> tests/models/test_xcom.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "140:             ret_value = XCom.get_value(key=\"xcom_test3\", ti_key=ti_key, session=session)",
      "141:         assert ret_value == {\"key\": \"value\"}",
      "144:         with conf_vars({(\"core\", \"enable_xcom_pickling\"): \"True\"}):",
      "145:             XCom.set(",
      "146:                 key=\"xcom_test3\",",
      "",
      "[Removed Lines]",
      "143:     def test_xcom_deserialize_with_pickle_to_json_switch(self, task_instance, session):",
      "",
      "[Added Lines]",
      "143:     def test_xcom_deserialize_pickle_when_xcom_pickling_is_disabled(self, task_instance, session):",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "151:                 session=session,",
      "152:             )",
      "153:         with conf_vars({(\"core\", \"enable_xcom_pickling\"): \"False\"}):",
      "163:     @conf_vars({(\"core\", \"xcom_enable_pickling\"): \"False\"})",
      "164:     def test_xcom_disable_pickle_type_fail_on_non_json(self, task_instance, session):",
      "",
      "[Removed Lines]",
      "154:             ret_value = XCom.get_one(",
      "155:                 key=\"xcom_test3\",",
      "156:                 dag_id=task_instance.dag_id,",
      "157:                 task_id=task_instance.task_id,",
      "158:                 run_id=task_instance.run_id,",
      "159:                 session=session,",
      "160:             )",
      "161:         assert ret_value == {\"key\": \"value\"}",
      "",
      "[Added Lines]",
      "154:             with pytest.raises(UnicodeDecodeError):",
      "155:                 XCom.get_one(",
      "156:                     key=\"xcom_test3\",",
      "157:                     dag_id=task_instance.dag_id,",
      "158:                     task_id=task_instance.task_id,",
      "159:                     run_id=task_instance.run_id,",
      "160:                     session=session,",
      "161:                 )",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ed1e49a1196d8bc68fc9f48f9ad5cc5b30cf4921",
      "candidate_info": {
        "commit_hash": "ed1e49a1196d8bc68fc9f48f9ad5cc5b30cf4921",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/ed1e49a1196d8bc68fc9f48f9ad5cc5b30cf4921",
        "files": [
          ".github/workflows/ci.yml",
          ".pre-commit-config.yaml",
          "STATIC_CODE_CHECKS.rst",
          "dev/breeze/src/airflow_breeze/pre_commit_ids.py",
          "dev/breeze/src/airflow_breeze/utils/selective_checks.py",
          "dev/breeze/tests/test_selective_checks.py",
          "images/breeze/output_static-checks.svg",
          "images/breeze/output_static-checks.txt",
          "scripts/ci/pre_commit/pre_commit_mypy.py",
          "scripts/ci/pre_commit/pre_commit_mypy_folder.py"
        ],
        "message": "Simplify how mypy \"folder\" checks are run (#36760)\n\nThe #36638 change introduced \"full package\" checks - where in\ncase of CI we run mypy checks separately from regular static checks,\nfor the whole folders.\n\nHowever it's been a little convoluted on how the checks were run,\nwith a separate env variable. Instead we can actually have multiple\nmypy-* checks (same as we have for local pre-commit runs) as mypy\nallows to have multiple checks with the same name in various stages.\n\nThis change simplifies the setup a bit:\n\n* we name the checks \"folder\" checks because this is what they are\n* we name the check names consistent (\"airflow\", \"providers\", \"docs\",\n  \"dev\") with mypy-folders output\n* we have separate small script to run the folder checks\n* we map \"providers\" into \"airflow/providers\" in the pre-commit\n\n(cherry picked from commit a912948b51cc50ae6c92496e11abebbba0c647e5)",
        "before_after_code_files": [
          "dev/breeze/src/airflow_breeze/pre_commit_ids.py||dev/breeze/src/airflow_breeze/pre_commit_ids.py",
          "dev/breeze/src/airflow_breeze/utils/selective_checks.py||dev/breeze/src/airflow_breeze/utils/selective_checks.py",
          "dev/breeze/tests/test_selective_checks.py||dev/breeze/tests/test_selective_checks.py",
          "scripts/ci/pre_commit/pre_commit_mypy.py||scripts/ci/pre_commit/pre_commit_mypy.py",
          "scripts/ci/pre_commit/pre_commit_mypy_folder.py||scripts/ci/pre_commit/pre_commit_mypy_folder.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "dev/breeze/src/airflow_breeze/pre_commit_ids.py||dev/breeze/src/airflow_breeze/pre_commit_ids.py": [
          "File: dev/breeze/src/airflow_breeze/pre_commit_ids.py -> dev/breeze/src/airflow_breeze/pre_commit_ids.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:     \"lint-markdown\",",
          "104:     \"lint-openapi\",",
          "105:     \"mixed-line-ending\",",
          "108:     \"mypy-dev\",",
          "109:     \"mypy-docs\",",
          "110:     \"mypy-providers\",",
          "",
          "[Removed Lines]",
          "106:     \"mypy\",",
          "107:     \"mypy-core\",",
          "",
          "[Added Lines]",
          "106:     \"mypy-airflow\",",
          "",
          "---------------"
        ],
        "dev/breeze/src/airflow_breeze/utils/selective_checks.py||dev/breeze/src/airflow_breeze/utils/selective_checks.py": [
          "File: dev/breeze/src/airflow_breeze/utils/selective_checks.py -> dev/breeze/src/airflow_breeze/utils/selective_checks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "582:             return False",
          "584:     @cached_property",
          "587:         if (",
          "588:             self._matching_files(",
          "589:                 FileGroupForCi.ALL_AIRFLOW_PYTHON_FILES, CI_FILE_GROUP_MATCHES, CI_FILE_GROUP_EXCLUDES",
          "590:             )",
          "591:             or self.full_tests_needed",
          "592:         ):",
          "594:         if (",
          "595:             self._matching_files(",
          "596:                 FileGroupForCi.ALL_PROVIDERS_PYTHON_FILES, CI_FILE_GROUP_MATCHES, CI_FILE_GROUP_EXCLUDES",
          "597:             )",
          "598:             or self._are_all_providers_affected()",
          "599:         ) and self._default_branch == \"main\":",
          "601:         if (",
          "602:             self._matching_files(",
          "603:                 FileGroupForCi.ALL_DOCS_PYTHON_FILES, CI_FILE_GROUP_MATCHES, CI_FILE_GROUP_EXCLUDES",
          "604:             )",
          "605:             or self.full_tests_needed",
          "606:         ):",
          "608:         if (",
          "609:             self._matching_files(",
          "610:                 FileGroupForCi.ALL_DEV_PYTHON_FILES, CI_FILE_GROUP_MATCHES, CI_FILE_GROUP_EXCLUDES",
          "611:             )",
          "612:             or self.full_tests_needed",
          "613:         ):",
          "617:     @cached_property",
          "618:     def needs_mypy(self) -> bool:",
          "621:     @cached_property",
          "622:     def needs_python_scans(self) -> bool:",
          "",
          "[Removed Lines]",
          "585:     def mypy_packages(self) -> list[str]:",
          "586:         packages_to_run: list[str] = []",
          "593:             packages_to_run.append(\"airflow\")",
          "600:             packages_to_run.append(\"airflow/providers\")",
          "607:             packages_to_run.append(\"docs\")",
          "614:             packages_to_run.append(\"dev\")",
          "615:         return packages_to_run",
          "619:         return self.mypy_packages != []",
          "",
          "[Added Lines]",
          "585:     def mypy_folders(self) -> list[str]:",
          "586:         folders_to_check: list[str] = []",
          "593:             folders_to_check.append(\"airflow\")",
          "600:             folders_to_check.append(\"providers\")",
          "607:             folders_to_check.append(\"docs\")",
          "614:             folders_to_check.append(\"dev\")",
          "615:         return folders_to_check",
          "619:         return self.mypy_folders != []",
          "",
          "---------------"
        ],
        "dev/breeze/tests/test_selective_checks.py||dev/breeze/tests/test_selective_checks.py": [
          "File: dev/breeze/tests/test_selective_checks.py -> dev/breeze/tests/test_selective_checks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "113:                     \"parallel-test-types-list-as-string\": None,",
          "114:                     \"needs-mypy\": \"false\",",
          "116:                 },",
          "117:                 id=\"No tests on simple change\",",
          "118:             )",
          "",
          "[Removed Lines]",
          "115:                     \"mypy-packages\": \"[]\",",
          "",
          "[Added Lines]",
          "115:                     \"mypy-folders\": \"[]\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "138:                     \"parallel-test-types-list-as-string\": \"API Always\",",
          "139:                     \"needs-mypy\": \"true\",",
          "141:                 },",
          "142:                 id=\"Only API tests and DOCS should run\",",
          "143:             )",
          "",
          "[Removed Lines]",
          "140:                     \"mypy-packages\": \"['airflow']\",",
          "",
          "[Added Lines]",
          "140:                     \"mypy-folders\": \"['airflow']\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "163:                     \"parallel-test-types-list-as-string\": \"Always Operators\",",
          "164:                     \"needs-mypy\": \"true\",",
          "166:                 },",
          "167:                 id=\"Only Operator tests and DOCS should run\",",
          "168:             )",
          "",
          "[Removed Lines]",
          "165:                     \"mypy-packages\": \"['airflow']\",",
          "",
          "[Added Lines]",
          "165:                     \"mypy-folders\": \"['airflow']\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "188:                     \"parallel-test-types-list-as-string\": \"Always BranchExternalPython BranchPythonVenv \"",
          "189:                     \"ExternalPython Operators PythonVenv\",",
          "190:                     \"needs-mypy\": \"true\",",
          "192:                 },",
          "193:                 id=\"Only Python tests\",",
          "194:             )",
          "",
          "[Removed Lines]",
          "191:                     \"mypy-packages\": \"['airflow']\",",
          "",
          "[Added Lines]",
          "191:                     \"mypy-folders\": \"['airflow']\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "213:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "214:                     \"parallel-test-types-list-as-string\": \"Always Serialization\",",
          "215:                     \"needs-mypy\": \"true\",",
          "217:                 },",
          "218:                 id=\"Only Serialization tests\",",
          "219:             )",
          "",
          "[Removed Lines]",
          "216:                     \"mypy-packages\": \"['airflow']\",",
          "",
          "[Added Lines]",
          "216:                     \"mypy-folders\": \"['airflow']\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "243:                     \"parallel-test-types-list-as-string\": \"API Always Providers[amazon] \"",
          "244:                     \"Providers[common.sql,openlineage,pgvector,postgres] Providers[google]\",",
          "245:                     \"needs-mypy\": \"true\",",
          "247:                 },",
          "248:                 id=\"API and providers tests and docs should run\",",
          "249:             )",
          "",
          "[Removed Lines]",
          "246:                     \"mypy-packages\": \"['airflow', 'airflow/providers']\",",
          "",
          "[Added Lines]",
          "246:                     \"mypy-folders\": \"['airflow', 'providers']\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "269:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "270:                     \"parallel-test-types-list-as-string\": \"Always Providers[apache.beam] Providers[google]\",",
          "271:                     \"needs-mypy\": \"true\",",
          "273:                 },",
          "274:                 id=\"Selected Providers and docs should run\",",
          "275:             )",
          "",
          "[Removed Lines]",
          "272:                     \"mypy-packages\": \"['airflow/providers']\",",
          "",
          "[Added Lines]",
          "272:                     \"mypy-folders\": \"['providers']\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "295:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "296:                     \"parallel-test-types-list-as-string\": None,",
          "297:                     \"needs-mypy\": \"false\",",
          "299:                 },",
          "300:                 id=\"Only docs builds should run - no tests needed\",",
          "301:             )",
          "",
          "[Removed Lines]",
          "298:                     \"mypy-packages\": \"[]\",",
          "",
          "[Added Lines]",
          "298:                     \"mypy-folders\": \"[]\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "325:                     \"parallel-test-types-list-as-string\": \"Always Providers[amazon] \"",
          "326:                     \"Providers[common.sql,openlineage,pgvector,postgres] Providers[google]\",",
          "327:                     \"needs-mypy\": \"true\",",
          "329:                 },",
          "330:                 id=\"Helm tests, providers (both upstream and downstream),\"",
          "331:                 \"kubernetes tests and docs should run\",",
          "",
          "[Removed Lines]",
          "328:                     \"mypy-packages\": \"['airflow/providers']\",",
          "",
          "[Added Lines]",
          "328:                     \"mypy-folders\": \"['providers']\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "357:                     \"parallel-test-types-list-as-string\": \"Always \"",
          "358:                     \"Providers[airbyte,apache.livy,dbt.cloud,dingding,discord,http] Providers[amazon]\",",
          "359:                     \"needs-mypy\": \"true\",",
          "361:                 },",
          "362:                 id=\"Helm tests, http and all relevant providers, kubernetes tests and \"",
          "363:                 \"docs should run even if unimportant files were added\",",
          "",
          "[Removed Lines]",
          "360:                     \"mypy-packages\": \"['airflow/providers']\",",
          "",
          "[Added Lines]",
          "360:                     \"mypy-folders\": \"['providers']\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "387:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "388:                     \"parallel-test-types-list-as-string\": \"Always Providers[airbyte,http]\",",
          "389:                     \"needs-mypy\": \"true\",",
          "391:                 },",
          "392:                 id=\"Helm tests, airbyte/http providers, kubernetes tests and \"",
          "393:                 \"docs should run even if unimportant files were added\",",
          "",
          "[Removed Lines]",
          "390:                     \"mypy-packages\": \"['airflow/providers']\",",
          "",
          "[Added Lines]",
          "390:                     \"mypy-folders\": \"['providers']\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "418:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "419:                     \"parallel-test-types-list-as-string\": \"Always\",",
          "420:                     \"needs-mypy\": \"true\",",
          "422:                 },",
          "423:                 id=\"Docs should run even if unimportant files were added and prod image \"",
          "424:                 \"should be build for chart changes\",",
          "",
          "[Removed Lines]",
          "421:                     \"mypy-packages\": \"['airflow']\",",
          "",
          "[Added Lines]",
          "421:                     \"mypy-folders\": \"['airflow']\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "444:                     \"upgrade-to-newer-dependencies\": \"true\",",
          "445:                     \"parallel-test-types-list-as-string\": ALL_CI_SELECTIVE_TEST_TYPES,",
          "446:                     \"needs-mypy\": \"true\",",
          "448:                 },",
          "449:                 id=\"Everything should run - including all providers and upgrading to \"",
          "450:                 \"newer requirements as pyproject.toml changed and all Python versions\",",
          "",
          "[Removed Lines]",
          "447:                     \"mypy-packages\": \"['airflow', 'airflow/providers', 'docs', 'dev']\",",
          "",
          "[Added Lines]",
          "447:                     \"mypy-folders\": \"['airflow', 'providers', 'docs', 'dev']\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "470:                     \"upgrade-to-newer-dependencies\": \"true\",",
          "471:                     \"parallel-test-types-list-as-string\": ALL_CI_SELECTIVE_TEST_TYPES,",
          "472:                     \"needs-mypy\": \"true\",",
          "474:                 },",
          "475:                 id=\"Everything should run and upgrading to newer requirements as dependencies change\",",
          "476:             )",
          "",
          "[Removed Lines]",
          "473:                     \"mypy-packages\": \"['airflow', 'airflow/providers', 'docs', 'dev']\",",
          "",
          "[Added Lines]",
          "473:                     \"mypy-folders\": \"['airflow', 'providers', 'docs', 'dev']\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "498:                 \"Providers[apache.hive,cncf.kubernetes,common.sql,exasol,ftp,http,\"",
          "499:                 \"imap,microsoft.azure,mongo,mysql,openlineage,postgres,salesforce,ssh] Providers[google]\",",
          "500:                 \"needs-mypy\": \"true\",",
          "502:             },",
          "503:             id=\"Providers tests run including amazon tests if amazon provider files changed\",",
          "504:         ),",
          "",
          "[Removed Lines]",
          "501:                 \"mypy-packages\": \"['airflow/providers']\",",
          "",
          "[Added Lines]",
          "501:                 \"mypy-folders\": \"['providers']\",",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "521:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "522:                 \"parallel-test-types-list-as-string\": \"Always Providers[airbyte,http]\",",
          "523:                 \"needs-mypy\": \"true\",",
          "525:             },",
          "526:             id=\"Providers tests run without amazon tests if no amazon file changed\",",
          "527:         ),",
          "",
          "[Removed Lines]",
          "524:                 \"mypy-packages\": \"['airflow/providers']\",",
          "",
          "[Added Lines]",
          "524:                 \"mypy-folders\": \"['providers']\",",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "548:                 \"Providers[apache.hive,cncf.kubernetes,common.sql,exasol,ftp,http,\"",
          "549:                 \"imap,microsoft.azure,mongo,mysql,openlineage,postgres,salesforce,ssh] Providers[google]\",",
          "550:                 \"needs-mypy\": \"true\",",
          "552:             },",
          "553:             id=\"Providers tests run including amazon tests if amazon provider files changed\",",
          "554:         ),",
          "",
          "[Removed Lines]",
          "551:                 \"mypy-packages\": \"['airflow/providers']\",",
          "",
          "[Added Lines]",
          "551:                 \"mypy-folders\": \"['providers']\",",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "575:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "576:                 \"parallel-test-types-list-as-string\": \"Always Providers[common.io]\",",
          "577:                 \"needs-mypy\": \"true\",",
          "579:             },",
          "580:             id=\"Only Always and Common.IO tests should run when only common.io and tests/always changed\",",
          "581:         ),",
          "",
          "[Removed Lines]",
          "578:                 \"mypy-packages\": \"['airflow', 'airflow/providers']\",",
          "",
          "[Added Lines]",
          "578:                 \"mypy-folders\": \"['airflow', 'providers']\",",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "619:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "620:                     \"parallel-test-types-list-as-string\": ALL_CI_SELECTIVE_TEST_TYPES,",
          "621:                     \"needs-mypy\": \"true\",",
          "623:                 },",
          "624:                 id=\"Everything should run including all providers when full tests are needed\",",
          "625:             )",
          "",
          "[Removed Lines]",
          "622:                     \"mypy-packages\": \"['airflow', 'airflow/providers', 'docs', 'dev']\",",
          "",
          "[Added Lines]",
          "622:                     \"mypy-folders\": \"['airflow', 'providers', 'docs', 'dev']\",",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "648:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "649:                     \"parallel-test-types-list-as-string\": ALL_CI_SELECTIVE_TEST_TYPES,",
          "650:                     \"needs-mypy\": \"true\",",
          "652:                 },",
          "653:                 id=\"Everything should run including full providers when full \"",
          "654:                 \"tests are needed even with different label set as well\",",
          "",
          "[Removed Lines]",
          "651:                     \"mypy-packages\": \"['airflow', 'airflow/providers', 'docs', 'dev']\",",
          "",
          "[Added Lines]",
          "651:                     \"mypy-folders\": \"['airflow', 'providers', 'docs', 'dev']\",",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "675:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "676:                     \"parallel-test-types-list-as-string\": ALL_CI_SELECTIVE_TEST_TYPES,",
          "677:                     \"needs-mypy\": \"true\",",
          "679:                 },",
          "680:                 id=\"Everything should run including full providers when\"",
          "681:                 \"full tests are needed even if no files are changed\",",
          "",
          "[Removed Lines]",
          "678:                     \"mypy-packages\": \"['airflow', 'airflow/providers', 'docs', 'dev']\",",
          "",
          "[Added Lines]",
          "678:                     \"mypy-folders\": \"['airflow', 'providers', 'docs', 'dev']\",",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "705:                     \"BranchPythonVenv CLI Core ExternalPython Operators Other PlainAsserts \"",
          "706:                     \"PythonVenv Serialization WWW\",",
          "707:                     \"needs-mypy\": \"true\",",
          "709:                 },",
          "710:                 id=\"Everything should run except Providers and lint pre-commit \"",
          "711:                 \"when full tests are needed for non-main branch\",",
          "",
          "[Removed Lines]",
          "708:                     \"mypy-packages\": \"['airflow', 'docs', 'dev']\",",
          "",
          "[Added Lines]",
          "708:                     \"mypy-folders\": \"['airflow', 'docs', 'dev']\",",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "751:                 \"skip-provider-tests\": \"true\",",
          "752:                 \"parallel-test-types-list-as-string\": None,",
          "753:                 \"needs-mypy\": \"false\",",
          "755:             },",
          "756:             id=\"Nothing should run if only non-important files changed\",",
          "757:         ),",
          "",
          "[Removed Lines]",
          "754:                 \"mypy-packages\": \"[]\",",
          "",
          "[Added Lines]",
          "754:                 \"mypy-folders\": \"[]\",",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "781:                 \"skip-provider-tests\": \"true\",",
          "782:                 \"parallel-test-types-list-as-string\": \"Always\",",
          "783:                 \"needs-mypy\": \"false\",",
          "785:             },",
          "786:             id=\"No Helm tests, No providers no lint charts, should run if \"",
          "787:             \"only chart/providers changed in non-main but PROD image should be built\",",
          "",
          "[Removed Lines]",
          "784:                 \"mypy-packages\": \"[]\",",
          "",
          "[Added Lines]",
          "784:                 \"mypy-folders\": \"[]\",",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "812:                 \"skip-provider-tests\": \"true\",",
          "813:                 \"parallel-test-types-list-as-string\": \"Always CLI\",",
          "814:                 \"needs-mypy\": \"true\",",
          "816:             },",
          "817:             id=\"Only CLI tests and Kubernetes tests should run if cli/chart files changed in non-main branch\",",
          "818:         ),",
          "",
          "[Removed Lines]",
          "815:                 \"mypy-packages\": \"['airflow']\",",
          "",
          "[Added Lines]",
          "815:                 \"mypy-folders\": \"['airflow']\",",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "839:                 \"parallel-test-types-list-as-string\": \"API Always BranchExternalPython BranchPythonVenv \"",
          "840:                 \"CLI Core ExternalPython Operators Other PlainAsserts PythonVenv Serialization WWW\",",
          "841:                 \"needs-mypy\": \"true\",",
          "843:             },",
          "844:             id=\"All tests except Providers and helm lint pre-commit \"",
          "845:             \"should run if core file changed in non-main branch\",",
          "",
          "[Removed Lines]",
          "842:                 \"mypy-packages\": \"['airflow']\",",
          "",
          "[Added Lines]",
          "842:                 \"mypy-folders\": \"['airflow']\",",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "880:                 \"skip-provider-tests\": \"true\",",
          "881:                 \"parallel-test-types-list-as-string\": None,",
          "882:                 \"needs-mypy\": \"false\",",
          "884:             },",
          "885:             id=\"Nothing should run if only non-important files changed\",",
          "886:         ),",
          "",
          "[Removed Lines]",
          "883:                 \"mypy-packages\": \"[]\",",
          "",
          "[Added Lines]",
          "883:                 \"mypy-folders\": \"[]\",",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "901:                 \"skip-provider-tests\": \"true\",",
          "902:                 \"parallel-test-types-list-as-string\": \"Always\",",
          "903:                 \"needs-mypy\": \"true\",",
          "905:             },",
          "906:             id=\"Only Always and docs build should run if only system tests changed\",",
          "907:         ),",
          "",
          "[Removed Lines]",
          "904:                 \"mypy-packages\": \"['airflow']\",",
          "",
          "[Added Lines]",
          "904:                 \"mypy-folders\": \"['airflow']\",",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "936:                 \"microsoft.azure,microsoft.mssql,mysql,openlineage,oracle,postgres,presto,salesforce,\"",
          "937:                 \"samba,sftp,ssh,trino] Providers[google]\",",
          "938:                 \"needs-mypy\": \"true\",",
          "940:             },",
          "941:             id=\"CLI tests and Google-related provider tests should run if cli/chart files changed but \"",
          "942:             \"prod image should be build too and k8s tests too\",",
          "",
          "[Removed Lines]",
          "939:                 \"mypy-packages\": \"['airflow', 'airflow/providers']\",",
          "",
          "[Added Lines]",
          "939:                 \"mypy-folders\": \"['airflow', 'providers']\",",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "964:                 \"skip-provider-tests\": \"true\",",
          "965:                 \"parallel-test-types-list-as-string\": \"API Always CLI Operators WWW\",",
          "966:                 \"needs-mypy\": \"true\",",
          "968:             },",
          "969:             id=\"No providers tests should run if only CLI/API/Operators/WWW file changed\",",
          "970:         ),",
          "",
          "[Removed Lines]",
          "967:                 \"mypy-packages\": \"['airflow']\",",
          "",
          "[Added Lines]",
          "967:                 \"mypy-folders\": \"['airflow']\",",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "986:                 \"skip-provider-tests\": \"false\",",
          "987:                 \"parallel-test-types-list-as-string\": ALL_CI_SELECTIVE_TEST_TYPES,",
          "988:                 \"needs-mypy\": \"true\",",
          "990:             },",
          "991:             id=\"Tests for all providers should run if model file changed\",",
          "992:         ),",
          "",
          "[Removed Lines]",
          "989:                 \"mypy-packages\": \"['airflow', 'airflow/providers']\",",
          "",
          "[Added Lines]",
          "989:                 \"mypy-folders\": \"['airflow', 'providers']\",",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1008:                 \"skip-provider-tests\": \"false\",",
          "1009:                 \"parallel-test-types-list-as-string\": ALL_CI_SELECTIVE_TEST_TYPES,",
          "1010:                 \"needs-mypy\": \"true\",",
          "1012:             },",
          "1013:             id=\"Tests for all providers should run if any other than API/WWW/CLI/Operators file changed.\",",
          "1014:         ),",
          "",
          "[Removed Lines]",
          "1011:                 \"mypy-packages\": \"['airflow', 'airflow/providers']\",",
          "",
          "[Added Lines]",
          "1011:                 \"mypy-folders\": \"['airflow', 'providers']\",",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1049:                 \"upgrade-to-newer-dependencies\": \"true\",",
          "1050:                 \"parallel-test-types-list-as-string\": ALL_CI_SELECTIVE_TEST_TYPES,",
          "1051:                 \"needs-mypy\": \"true\",",
          "1053:             },",
          "1054:             id=\"All tests run on push even if unimportant file changed\",",
          "1055:         ),",
          "",
          "[Removed Lines]",
          "1052:                 \"mypy-packages\": \"['airflow', 'airflow/providers', 'docs', 'dev']\",",
          "",
          "[Added Lines]",
          "1052:                 \"mypy-folders\": \"['airflow', 'providers', 'docs', 'dev']\",",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1072:                 \"parallel-test-types-list-as-string\": \"API Always BranchExternalPython BranchPythonVenv \"",
          "1073:                 \"CLI Core ExternalPython Operators Other PlainAsserts PythonVenv Serialization WWW\",",
          "1074:                 \"needs-mypy\": \"true\",",
          "1076:             },",
          "1077:             id=\"All tests except Providers and Helm run on push\"",
          "1078:             \" even if unimportant file changed in non-main branch\",",
          "",
          "[Removed Lines]",
          "1075:                 \"mypy-packages\": \"['airflow', 'docs', 'dev']\",",
          "",
          "[Added Lines]",
          "1075:                 \"mypy-folders\": \"['airflow', 'docs', 'dev']\",",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1095:                 \"upgrade-to-newer-dependencies\": \"true\",",
          "1096:                 \"parallel-test-types-list-as-string\": ALL_CI_SELECTIVE_TEST_TYPES,",
          "1097:                 \"needs-mypy\": \"true\",",
          "1099:             },",
          "1100:             id=\"All tests run on push if core file changed\",",
          "1101:         ),",
          "",
          "[Removed Lines]",
          "1098:                 \"mypy-packages\": \"['airflow', 'airflow/providers', 'docs', 'dev']\",",
          "",
          "[Added Lines]",
          "1098:                 \"mypy-folders\": \"['airflow', 'providers', 'docs', 'dev']\",",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1150:             else \"false\",",
          "1151:             \"parallel-test-types-list-as-string\": ALL_CI_SELECTIVE_TEST_TYPES,",
          "1152:             \"needs-mypy\": \"true\",",
          "1154:         },",
          "1155:         str(stderr),",
          "1156:     )",
          "",
          "[Removed Lines]",
          "1153:             \"mypy-packages\": \"['airflow', 'airflow/providers', 'docs', 'dev']\",",
          "",
          "[Added Lines]",
          "1153:             \"mypy-folders\": \"['airflow', 'providers', 'docs', 'dev']\",",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1640:             (\"README.md\",),",
          "1641:             {",
          "1642:                 \"needs-mypy\": \"false\",",
          "1644:             },",
          "1645:             \"main\",",
          "1646:             (),",
          "",
          "[Removed Lines]",
          "1643:                 \"mypy-packages\": \"[]\",",
          "",
          "[Added Lines]",
          "1643:                 \"mypy-folders\": \"[]\",",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1650:             (\"airflow/cli/file.py\",),",
          "1651:             {",
          "1652:                 \"needs-mypy\": \"true\",",
          "1654:             },",
          "1655:             \"main\",",
          "1656:             (),",
          "",
          "[Removed Lines]",
          "1653:                 \"mypy-packages\": \"['airflow']\",",
          "",
          "[Added Lines]",
          "1653:                 \"mypy-folders\": \"['airflow']\",",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1660:             (\"airflow/models/file.py\",),",
          "1661:             {",
          "1662:                 \"needs-mypy\": \"true\",",
          "1664:             },",
          "1665:             \"main\",",
          "1666:             (),",
          "",
          "[Removed Lines]",
          "1663:                 \"mypy-packages\": \"['airflow', 'airflow/providers']\",",
          "",
          "[Added Lines]",
          "1663:                 \"mypy-folders\": \"['airflow', 'providers']\",",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1670:             (\"airflow/providers/a_file.py\",),",
          "1671:             {",
          "1672:                 \"needs-mypy\": \"true\",",
          "1674:             },",
          "1675:             \"main\",",
          "1676:             (),",
          "",
          "[Removed Lines]",
          "1673:                 \"mypy-packages\": \"['airflow/providers']\",",
          "",
          "[Added Lines]",
          "1673:                 \"mypy-folders\": \"['providers']\",",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1680:             (\"docs/a_file.py\",),",
          "1681:             {",
          "1682:                 \"needs-mypy\": \"true\",",
          "1684:             },",
          "1685:             \"main\",",
          "1686:             (),",
          "",
          "[Removed Lines]",
          "1683:                 \"mypy-packages\": \"['docs']\",",
          "",
          "[Added Lines]",
          "1683:                 \"mypy-folders\": \"['docs']\",",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1690:             (\"dev/a_package/a_file.py\",),",
          "1691:             {",
          "1692:                 \"needs-mypy\": \"true\",",
          "1694:             },",
          "1695:             \"main\",",
          "1696:             (),",
          "",
          "[Removed Lines]",
          "1693:                 \"mypy-packages\": \"['airflow', 'airflow/providers', 'docs', 'dev']\",",
          "",
          "[Added Lines]",
          "1693:                 \"mypy-folders\": \"['airflow', 'providers', 'docs', 'dev']\",",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1700:             (\"readme.md\",),",
          "1701:             {",
          "1702:                 \"needs-mypy\": \"true\",",
          "1704:             },",
          "1705:             \"main\",",
          "1706:             (\"full tests needed\",),",
          "",
          "[Removed Lines]",
          "1703:                 \"mypy-packages\": \"['airflow', 'airflow/providers', 'docs', 'dev']\",",
          "",
          "[Added Lines]",
          "1703:                 \"mypy-folders\": \"['airflow', 'providers', 'docs', 'dev']\",",
          "",
          "---------------"
        ],
        "scripts/ci/pre_commit/pre_commit_mypy.py||scripts/ci/pre_commit/pre_commit_mypy.py": [
          "File: scripts/ci/pre_commit/pre_commit_mypy.py -> scripts/ci/pre_commit/pre_commit_mypy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: from __future__ import annotations",
          "20: import os",
          "22: import sys",
          "23: from pathlib import Path",
          "",
          "[Removed Lines]",
          "21: import shlex",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: initialize_breeze_precommit(__name__, __file__)",
          "36: files_to_test = pre_process_files(sys.argv[1:])",
          "40: if files_to_test == [\"--namespace-packages\"] or files_to_test == []:",
          "41:     print(\"No files to tests. Quitting\")",
          "42:     sys.exit(0)",
          "",
          "[Removed Lines]",
          "37: mypy_packages = os.environ.get(\"MYPY_PACKAGES\")",
          "38: if mypy_packages:",
          "39:     files_to_test += shlex.split(mypy_packages)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57: )",
          "58: ci_environment = os.environ.get(\"CI\")",
          "59: if res.returncode != 0:",
          "68:     upgrading = os.environ.get(\"UPGRADE_TO_NEWER_DEPENDENCIES\", \"false\") != \"false\"",
          "69:     if upgrading:",
          "70:         console.print(",
          "",
          "[Removed Lines]",
          "60:     if mypy_packages and ci_environment:",
          "61:         console.print(",
          "62:             \"[yellow]You are running mypy with the packages selected. If you want to\"",
          "63:             \"reproduce it locally, you need to run the following command:\\n\"",
          "64:         )",
          "65:         console.print(",
          "66:             f'MYPY_PACKAGES=\"{mypy_packages}\" pre-commit run --hook-stage manual mypy --all-files\\n'",
          "67:         )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "scripts/ci/pre_commit/pre_commit_mypy_folder.py||scripts/ci/pre_commit/pre_commit_mypy_folder.py": [
          "File: scripts/ci/pre_commit/pre_commit_mypy_folder.py -> scripts/ci/pre_commit/pre_commit_mypy_folder.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env python",
          "2: # Licensed to the Apache Software Foundation (ASF) under one",
          "3: # or more contributor license agreements.  See the NOTICE file",
          "4: # distributed with this work for additional information",
          "5: # regarding copyright ownership.  The ASF licenses this file",
          "6: # to you under the Apache License, Version 2.0 (the",
          "7: # \"License\"); you may not use this file except in compliance",
          "8: # with the License.  You may obtain a copy of the License at",
          "9: #",
          "10: #   http://www.apache.org/licenses/LICENSE-2.0",
          "11: #",
          "12: # Unless required by applicable law or agreed to in writing,",
          "13: # software distributed under the License is distributed on an",
          "14: # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "15: # KIND, either express or implied.  See the License for the",
          "16: # specific language governing permissions and limitations",
          "17: # under the License.",
          "18: from __future__ import annotations",
          "20: import os",
          "21: import sys",
          "22: from pathlib import Path",
          "24: sys.path.insert(0, str(Path(__file__).parent.resolve()))",
          "26: from common_precommit_utils import (",
          "27:     console,",
          "28:     initialize_breeze_precommit,",
          "29:     run_command_via_breeze_shell,",
          "30: )",
          "32: initialize_breeze_precommit(__name__, __file__)",
          "34: ALLOWED_FOLDERS = [\"airflow\", \"airflow/providers\", \"dev\", \"docs\"]",
          "36: if len(sys.argv) < 2:",
          "37:     console.print(f\"[yellow]You need to specify the folder to test as parameter: {ALLOWED_FOLDERS}\\n\")",
          "38:     sys.exit(1)",
          "40: mypy_folder = sys.argv[1]",
          "41: if mypy_folder not in ALLOWED_FOLDERS:",
          "42:     console.print(f\"[yellow]Wrong folder {mypy_folder}. It should be one of those: {ALLOWED_FOLDERS}\\n\")",
          "43:     sys.exit(1)",
          "45: arguments = [mypy_folder]",
          "46: if mypy_folder == \"airflow/providers\":",
          "47:     arguments.append(\"--namespace-packages\")",
          "49: res = run_command_via_breeze_shell(",
          "50:     [",
          "51:         \"/opt/airflow/scripts/in_container/run_mypy.sh\",",
          "53:     ],",
          "54:     warn_image_upgrade_needed=True,",
          "55:     extra_env={",
          "56:         \"INCLUDE_MYPY_VOLUME\": \"true\",",
          "57:         # Need to mount local sources when running it - to not have to rebuild the image",
          "58:         # and to let CI work on it when running on PRs from forks - because mypy-dev uses files",
          "59:         # that are not available at the time when image is built in CI",
          "60:         \"MOUNT_SOURCES\": \"selected\",",
          "61:     },",
          "62: )",
          "63: ci_environment = os.environ.get(\"CI\")",
          "64: if res.returncode != 0:",
          "65:     if ci_environment:",
          "66:         console.print(",
          "67:             \"[yellow]You are running mypy with the folders selected. If you want to\"",
          "68:             \"reproduce it locally, you need to run the following command:\\n\"",
          "69:         )",
          "70:         console.print(\"pre-commit run --hook-stage manual mypy-<folder> --all-files\\n\")",
          "71:     upgrading = os.environ.get(\"UPGRADE_TO_NEWER_DEPENDENCIES\", \"false\") != \"false\"",
          "72:     if upgrading:",
          "73:         console.print(",
          "74:             \"[yellow]You are running mypy with the image that has dependencies upgraded automatically.\\n\"",
          "75:         )",
          "76:     flag = \" --upgrade-to-newer-dependencies\" if upgrading else \"\"",
          "77:     console.print(",
          "78:         \"[yellow]If you see strange stacktraces above, and can't reproduce it, please run\"",
          "79:         \" this command and try again:\\n\"",
          "80:     )",
          "81:     console.print(f\"breeze ci-image build --python 3.8{flag}\\n\")",
          "82:     console.print(\"[yellow]You can also run `breeze down --cleanup-mypy-cache` to clean up the cache used.\\n\")",
          "83: sys.exit(res.returncode)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1718b2bc7c19b260071ce8988da3e86806b56792",
      "candidate_info": {
        "commit_hash": "1718b2bc7c19b260071ce8988da3e86806b56792",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/1718b2bc7c19b260071ce8988da3e86806b56792",
        "files": [
          "airflow/www/static/js/dag/details/index.tsx"
        ],
        "message": "Fix details tab not showing when using dynamic task mapping (#36522)\n\n* Fix details tab not showing when using dynamic task mapping\n\n* Remove unnecessary variable\n\n(cherry picked from commit 18b701358183762b0b3609627c198c263680eb6e)",
        "before_after_code_files": [
          "airflow/www/static/js/dag/details/index.tsx||airflow/www/static/js/dag/details/index.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/static/js/dag/details/index.tsx||airflow/www/static/js/dag/details/index.tsx": [
          "File: airflow/www/static/js/dag/details/index.tsx -> airflow/www/static/js/dag/details/index.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "301:           <TabPanel height=\"100%\">",
          "302:             {isDag && <DagContent />}",
          "303:             {isDagRun && <DagRunContent runId={runId} />}",
          "305:               <>",
          "306:                 <BackToTaskSummary",
          "307:                   isMapIndexDefined={mapIndex !== undefined && mapIndex > -1}",
          "",
          "[Removed Lines]",
          "304:             {isTaskInstance && (",
          "",
          "[Added Lines]",
          "304:             {!!runId && !!taskId && (",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d27170e3c5b237abcba1aa6e54d122bcb37efac",
      "candidate_info": {
        "commit_hash": "4d27170e3c5b237abcba1aa6e54d122bcb37efac",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/4d27170e3c5b237abcba1aa6e54d122bcb37efac",
        "files": [
          "airflow/decorators/__init__.pyi"
        ],
        "message": "Make `kubernetes` decorator type annotation consistent with operator (#36405)\n\n(cherry picked from commit 8af63683640358eaad2a9ed8d3a4ea26bfbee29a)",
        "before_after_code_files": [
          "airflow/decorators/__init__.pyi||airflow/decorators/__init__.pyi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/decorators/__init__.pyi||airflow/decorators/__init__.pyi": [
          "File: airflow/decorators/__init__.pyi -> airflow/decorators/__init__.pyi",
          "--- Hunk 1 ---",
          "[Context before]",
          "461:     def kubernetes(",
          "462:         self,",
          "469:         ports: list[k8s.V1ContainerPort] | None = None,",
          "470:         volume_mounts: list[k8s.V1VolumeMount] | None = None,",
          "471:         volumes: list[k8s.V1Volume] | None = None,",
          "473:         env_from: list[k8s.V1EnvFromSource] | None = None,",
          "474:         secrets: list[Secret] | None = None,",
          "475:         in_cluster: bool | None = None,",
          "476:         cluster_context: str | None = None,",
          "477:         labels: dict | None = None,",
          "480:         get_logs: bool = True,",
          "481:         image_pull_policy: str | None = None,",
          "482:         annotations: dict | None = None,",
          "483:         container_resources: k8s.V1ResourceRequirements | None = None,",
          "484:         affinity: k8s.V1Affinity | None = None,",
          "486:         node_selector: dict | None = None,",
          "487:         image_pull_secrets: list[k8s.V1LocalObjectReference] | None = None,",
          "488:         service_account_name: str | None = None,",
          "490:         hostnetwork: bool = False,",
          "491:         tolerations: list[k8s.V1Toleration] | None = None,",
          "493:         dnspolicy: str | None = None,",
          "494:         schedulername: str | None = None,",
          "495:         init_containers: list[k8s.V1Container] | None = None,",
          "496:         log_events_on_failure: bool = False,",
          "497:         do_xcom_push: bool = False,",
          "498:         pod_template_file: str | None = None,",
          "499:         priority_class_name: str | None = None,",
          "500:         pod_runtime_info_envs: list[k8s.V1EnvVar] | None = None,",
          "501:         termination_grace_period: int | None = None,",
          "502:         configmaps: list[str] | None = None,",
          "504:     ) -> TaskDecorator:",
          "505:         \"\"\"Create a decorator to convert a callable to a Kubernetes Pod task.",
          "507:         :param kubernetes_conn_id: The Kubernetes cluster's",
          "508:             :ref:`connection ID <howto/connection:kubernetes>`.",
          "509:         :param namespace: Namespace to run within Kubernetes. Defaults to *default*.",
          "",
          "[Removed Lines]",
          "464:         image: str,",
          "465:         kubernetes_conn_id: str = ...,",
          "466:         namespace: str = \"default\",",
          "467:         name: str = ...,",
          "468:         random_name_suffix: bool = True,",
          "472:         env_vars: list[k8s.V1EnvVar] | None = None,",
          "478:         reattach_on_restart: bool = True,",
          "479:         startup_timeout_seconds: int = 120,",
          "485:         config_file: str = ...,",
          "489:         is_delete_operator_pod: bool = True,",
          "492:         security_context: dict | None = None,",
          "",
          "[Added Lines]",
          "464:         multiple_outputs: bool | None = None,",
          "465:         use_dill: bool = False,  # Added by _KubernetesDecoratedOperator.",
          "466:         # 'cmds' filled by _KubernetesDecoratedOperator.",
          "467:         kubernetes_conn_id: str | None = ...,",
          "468:         namespace: str | None = None,",
          "469:         image: str | None = None,",
          "470:         name: str | None = None,",
          "471:         random_name_suffix: bool = ...,",
          "472:         arguments: list[str] | None = None,",
          "476:         env_vars: list[k8s.V1EnvVar] | dict[str, str] | None = None,",
          "482:         reattach_on_restart: bool = ...,",
          "483:         startup_timeout_seconds: int = ...,",
          "484:         startup_check_interval_seconds: int = ...,",
          "486:         container_logs: Iterable[str] | str | Literal[True] = ...,",
          "491:         config_file: str | None = None,",
          "496:         host_aliases: list[k8s.V1HostAlias] | None = None,",
          "498:         security_context: k8s.V1PodSecurityContext | dict | None = None,",
          "499:         container_security_context: k8s.V1SecurityContext | dict | None = None,",
          "501:         dns_config: k8s.V1PodDNSConfig | None = None,",
          "502:         hostname: str | None = None,",
          "503:         subdomain: str | None = None,",
          "505:         full_pod_spec: k8s.V1Pod | None = None,",
          "510:         pod_template_dict: dict | None = None,",
          "515:         skip_on_exit_code: int | Container[int] | None = None,",
          "516:         base_container_name: str | None = None,",
          "517:         deferrable: bool = ...,",
          "518:         poll_interval: float = ...,",
          "519:         log_pod_spec_on_failure: bool = ...,",
          "520:         on_finish_action: str = ...,",
          "521:         termination_message_policy: str = ...,",
          "522:         active_deadline_seconds: int | None = None,",
          "523:         progress_callback: Callable[[str], None] | None = None,",
          "528:         :param multiple_outputs: If set, function return value will be unrolled to multiple XCom values.",
          "529:             Dict will unroll to XCom values with keys as XCom keys. Defaults to False.",
          "530:         :param use_dill: Whether to use dill or pickle for serialization",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "514:             (DNS-1123 subdomain, containing only ``[a-z0-9.-]``). Defaults to",
          "515:             ``k8s_airflow_pod_{RANDOM_UUID}``.",
          "516:         :param random_name_suffix: If *True*, will generate a random suffix.",
          "517:         :param ports: Ports for the launched pod.",
          "518:         :param volume_mounts: *volumeMounts* for the launched pod.",
          "519:         :param volumes: Volumes for the launched pod. Includes *ConfigMaps* and",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "541:         :param arguments: arguments of the entrypoint. (templated)",
          "542:             The docker image's CMD is used if this is not provided.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "533:             a new pod for each try.",
          "534:         :param labels: Labels to apply to the pod. (templated)",
          "535:         :param startup_timeout_seconds: Timeout in seconds to startup the pod.",
          "536:         :param get_logs: Get the stdout of the container as logs of the tasks.",
          "537:         :param image_pull_policy: Specify a policy to cache or always pull an",
          "538:             image.",
          "539:         :param annotations: Non-identifying metadata you can attach to the pod.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "562:         :param startup_check_interval_seconds: interval in seconds to check if the pod has already started",
          "564:         :param container_logs: list of containers whose logs will be published to stdout",
          "565:             Takes a sequence of containers, a single container name or True.",
          "566:             If True, all the containers logs are published. Works in conjunction with ``get_logs`` param.",
          "567:             The default value is the base container.",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "548:             pod. If more than one secret is required, provide a comma separated",
          "549:             list, e.g. ``secret_a,secret_b``.",
          "550:         :param service_account_name: Name of the service account.",
          "554:         :param hostnetwork: If *True*, enable host networking on the pod.",
          "555:         :param tolerations: A list of Kubernetes tolerations.",
          "556:         :param security_context: Security options the pod should run with",
          "557:             (PodSecurityContext).",
          "558:         :param dnspolicy: DNS policy for the pod.",
          "559:         :param schedulername: Specify a scheduler name for the pod",
          "560:         :param init_containers: Init containers for the launched pod.",
          "561:         :param log_events_on_failure: Log the pod's events if a failure occurs.",
          "562:         :param do_xcom_push: If *True*, the content of",
          "563:             ``/airflow/xcom/return.json`` in the container will also be pushed",
          "564:             to an XCom when the container completes.",
          "565:         :param pod_template_file: Path to pod template file (templated)",
          "566:         :param priority_class_name: Priority class name for the launched pod.",
          "567:         :param pod_runtime_info_envs: A list of environment variables",
          "568:             to be set in the container.",
          "",
          "[Removed Lines]",
          "551:         :param is_delete_operator_pod: What to do when the pod reaches its final",
          "552:             state, or the execution is interrupted. If *True* (default), delete",
          "553:             the pod; otherwise leave the pod.",
          "",
          "[Added Lines]",
          "583:         :param host_aliases: A list of host aliases to apply to the containers in the pod.",
          "587:         :param container_security_context: security options the container should run with.",
          "589:         :param dns_config: dns configuration (ip addresses, searches, options) for the pod.",
          "590:         :param hostname: hostname for the pod.",
          "591:         :param subdomain: subdomain for the pod.",
          "593:         :param full_pod_spec: The complete podSpec",
          "600:         :param pod_template_dict: pod template dictionary (templated)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "572:             ConfigMaps to populate the environment variables with. The contents",
          "573:             of the target ConfigMap's Data field will represent the key-value",
          "574:             pairs as environment variables. Extends env_from.",
          "575:         \"\"\"",
          "576:     @overload",
          "577:     def sensor(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "610:         :param skip_on_exit_code: If task exits with this exit code, leave the task",
          "611:             in ``skipped`` state (default: None). If set to ``None``, any non-zero",
          "612:             exit code will be treated as a failure.",
          "613:         :param base_container_name: The name of the base container in the pod. This container's logs",
          "614:             will appear as part of this task's logs if get_logs is True. Defaults to None. If None,",
          "615:             will consult the class variable BASE_CONTAINER_NAME (which defaults to \"base\") for the base",
          "616:             container name to use.",
          "617:         :param deferrable: Run operator in the deferrable mode.",
          "618:         :param poll_interval: Polling period in seconds to check for the status. Used only in deferrable mode.",
          "619:         :param log_pod_spec_on_failure: Log the pod's specification if a failure occurs",
          "620:         :param on_finish_action: What to do when the pod reaches its final state, or the execution is interrupted.",
          "621:             If \"delete_pod\", the pod will be deleted regardless its state; if \"delete_succeeded_pod\",",
          "622:             only succeeded pod will be deleted. You can set to \"keep_pod\" to keep the pod.",
          "623:         :param termination_message_policy: The termination message policy of the base container.",
          "624:             Default value is \"File\"",
          "625:         :param active_deadline_seconds: The active_deadline_seconds which matches to active_deadline_seconds",
          "626:             in V1PodSpec.",
          "627:         :param progress_callback: Callback function for receiving k8s container logs.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bbf6ebc703f83963345acdbd69da089749fc1c4d",
      "candidate_info": {
        "commit_hash": "bbf6ebc703f83963345acdbd69da089749fc1c4d",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/bbf6ebc703f83963345acdbd69da089749fc1c4d",
        "files": [
          "airflow/decorators/__init__.pyi"
        ],
        "message": "Remove redundant `docker` decorator type annotations (#36406)\n\n(cherry picked from commit e3fd0d1a985fc99e4af8edaccda01f97cb9693d9)",
        "before_after_code_files": [
          "airflow/decorators/__init__.pyi||airflow/decorators/__init__.pyi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/decorators/__init__.pyi||airflow/decorators/__init__.pyi": [
          "File: airflow/decorators/__init__.pyi -> airflow/decorators/__init__.pyi",
          "--- Hunk 1 ---",
          "[Context before]",
          "354:         privileged: bool = False,",
          "355:         cap_add: str | None = None,",
          "356:         extra_hosts: dict[str, str] | None = None,",
          "359:         timeout: int = 60,",
          "360:         device_requests: list[dict] | None = None,",
          "361:         log_opts_max_size: str | None = None,",
          "",
          "[Removed Lines]",
          "357:         retrieve_output: bool = False,",
          "358:         retrieve_output_path: str | None = None,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "441:         :param cap_add: Include container capabilities",
          "442:         :param extra_hosts: Additional hostnames to resolve inside the container,",
          "443:             as a mapping of hostname to IP address.",
          "448:         :param device_requests: Expose host resources such as GPUs to the container.",
          "449:         :param log_opts_max_size: The maximum size of the log before it is rolled.",
          "450:             A positive integer plus a modifier representing the unit of measure (k, m, or g).",
          "",
          "[Removed Lines]",
          "444:         :param retrieve_output: Should this docker image consistently attempt to pull from and output",
          "445:             file before manually shutting down the image. Useful for cases where users want a pickle serialized",
          "446:             output that is not posted to logs",
          "447:         :param retrieve_output_path: path for output file that will be retrieved and passed to xcom",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4c613f827aa992ae5aff2d074eff16338ff5de54",
      "candidate_info": {
        "commit_hash": "4c613f827aa992ae5aff2d074eff16338ff5de54",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/4c613f827aa992ae5aff2d074eff16338ff5de54",
        "files": [
          "airflow/hooks/filesystem.py",
          "airflow/hooks/package_index.py",
          "airflow/hooks/subprocess.py"
        ],
        "message": "Provide the logger_name param to base hook in order to override the logger name (#36674)\n\n(cherry picked from commit 8e8c080050c374b47fd0e6ffb8cb0a27adbca055)",
        "before_after_code_files": [
          "airflow/hooks/filesystem.py||airflow/hooks/filesystem.py",
          "airflow/hooks/package_index.py||airflow/hooks/package_index.py",
          "airflow/hooks/subprocess.py||airflow/hooks/subprocess.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/hooks/filesystem.py||airflow/hooks/filesystem.py": [
          "File: airflow/hooks/filesystem.py -> airflow/hooks/filesystem.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:             \"placeholders\": {},",
          "60:         }",
          "64:         conn = self.get_connection(fs_conn_id)",
          "65:         self.basepath = conn.extra_dejson.get(\"path\", \"\")",
          "66:         self.conn = conn",
          "",
          "[Removed Lines]",
          "62:     def __init__(self, fs_conn_id: str = default_conn_name):",
          "63:         super().__init__()",
          "",
          "[Added Lines]",
          "62:     def __init__(self, fs_conn_id: str = default_conn_name, **kwargs):",
          "63:         super().__init__(**kwargs)",
          "",
          "---------------"
        ],
        "airflow/hooks/package_index.py||airflow/hooks/package_index.py": [
          "File: airflow/hooks/package_index.py -> airflow/hooks/package_index.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     conn_type = \"package_index\"",
          "34:     hook_name = \"Package Index (Python)\"",
          "38:         self.pi_conn_id = pi_conn_id",
          "39:         self.conn = None",
          "",
          "[Removed Lines]",
          "36:     def __init__(self, pi_conn_id: str = default_conn_name) -> None:",
          "37:         super().__init__()",
          "",
          "[Added Lines]",
          "36:     def __init__(self, pi_conn_id: str = default_conn_name, **kwargs) -> None:",
          "37:         super().__init__(**kwargs)",
          "",
          "---------------"
        ],
        "airflow/hooks/subprocess.py||airflow/hooks/subprocess.py": [
          "File: airflow/hooks/subprocess.py -> airflow/hooks/subprocess.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: class SubprocessHook(BaseHook):",
          "32:     \"\"\"Hook for running processes with the ``subprocess`` module.\"\"\"",
          "35:         self.sub_process: Popen[bytes] | None = None",
          "38:     def run_command(",
          "39:         self,",
          "",
          "[Removed Lines]",
          "34:     def __init__(self) -> None:",
          "36:         super().__init__()",
          "",
          "[Added Lines]",
          "34:     def __init__(self, **kwargs) -> None:",
          "36:         super().__init__(**kwargs)",
          "",
          "---------------"
        ]
      }
    }
  ]
}