{
  "cve_id": "CVE-2022-31179",
  "cve_desc": "Shescape is a simple shell escape package for JavaScript. Versions prior to 1.5.8 were found to be subject to code injection on windows. This impacts users that use Shescape (any API function) to escape arguments for cmd.exe on Windows An attacker can omit all arguments following their input by including a line feed character (`'\\n'`) in the payload. This bug has been patched in [v1.5.8] which you can upgrade to now. No further changes are required. Alternatively, line feed characters (`'\\n'`) can be stripped out manually or the user input can be made the last argument (this only limits the impact).",
  "repo": "ericcornelissen/shescape",
  "patch_hash": "aceea7358f7222984e21260381ebc5ec4543b76f",
  "patch_info": {
    "commit_hash": "aceea7358f7222984e21260381ebc5ec4543b76f",
    "repo": "ericcornelissen/shescape",
    "commit_url": "https://github.com/ericcornelissen/shescape/commit/aceea7358f7222984e21260381ebc5ec4543b76f",
    "files": [
      "CHANGELOG.md",
      "src/unix.js",
      "src/win.js",
      "test/fixtures/unix.cjs",
      "test/fixtures/win.cjs",
      "test/fuzz/_common.cjs",
      "test/fuzz/corpus/036053b103374e82177446b4e083ccb6a22da06e0375582d622632775c8a938a",
      "test/fuzz/corpus/31ed7643aba69fe2d776af3aee587bb7899165af5ed3846c6f70327f2eec4713",
      "test/fuzz/corpus/7ef6c55f814adceff17a05c032ba6ec89483e37addcfd96bd13281f5de6716fa",
      "test/fuzz/corpus/dece2a606846120af17949c2d758b7df475449689d043a04a1ba63953326e5bb",
      "test/fuzz/corpus/f1d97ce94d0c9dd109dc27538786781da634bbed1df58877cac3c44e4344f3dd",
      "test/fuzz/corpus/f28febc41472c437122c2a44b66ccf7dcefdd19876fe4d9370ece44b5b2deb13",
      "test/fuzz/corpus/faf3c25ec7c017c2cc21a5af0f5584557d8a0c7340c68249076a86a2c4ce74fb",
      "test/fuzz/exec.test.cjs",
      "test/unit/_macros.js"
    ],
    "message": "Improve testing and escaping of newlines (#332)\n\n* Don't ignore newlines when fuzzing\n\nUpdate the fuzzing logic to not ignore newline characters anymore. For\nBash, Dash, PowerShell, and Zsh this is reflected by the removal of\n\n    arg = arg.replace(/[\\n\\r]+/g, \"\");\n\nfrom the `exec.test.cjs` fuzz target. For CMD it is (additionally) the\nremoval of\n\n    arg = arg.replace(/[\\n\\r]+/g, \"\");\n\nin the `_common.cjs` fuzz logic.\n\nThe inclusion of newlines in input arguments required some changes to\nthe `getExpectedOutput` function to account for the individual shell's\nhandling of these characters, typically removing them from the start and\nend of the input. (Note: not all changes to `getExpectedOutput` are due\nto this.)\n\n* Update the fuzz corpus\n\n- `31ed764`: contains a trailing forward slash ('\\\\') character that\n  was echod as a double quote ('\"') character by CMD due to carriage\n  return ('\\r') characters not being escaped.\n- `dece2a6`: contains a line feed ('\\n') character and a tilde where the\n  tilde should be escaped but wasn't for Bash.\n- `f28febc`: contains a carriage return ('\\r') character and a tilde\n  where the tilde should be escaped but wasn't for Bash.\n- `faf3c25`: contains a line feed ('\\n') character inside of curly\n  braces where the opening curly bracket should be escaped but wasn't\n  for bash.\n\nThe remaining new items in the fuzz corpus (`036053b`, `71ef6c5`, and\n`f1d97ce`) we're added based on fuzzing with whitespace for PowerShell.\n\n* Update macro for executing fixtures\n\nUpdate the macro for executing fixtures to properly display all the\nwhitespace characters as distinct characters. This is required because\notherwise test names will be considered duplicates.\n\nWhitespace characters with common shorthands are display using that\nshorthand (e.g. '\\n' for line feed). Other characters will be displayed\nby their unicode index (similar to the null character). This has been\nnormalized to the `\\u{hhhh}` notation for consistency where the curly\nbraces are included to improve readability of the test title (clearly\ndemarcating the end of the unicode index from any characters that might\nfollow it).\n\n* Escape newlines for PowerShell\n\nFor PowerShell only line feed ('\\n') and carriage return ('\\r')\ncharacters need to be escaped, and only when `interpolation` is `true`.\nThis is supported by manual testing as well as fuzzing.\n\nFrom manual testing (see [2]) it turned out that all character except\nfor line feed ('\\n'), carriage return ('\\r'), and '\\uFEFF' are converted\nto a normal space by PowerShell so it isn't necessary to escape them.\nFor '\\uFEFF', it was found that it is interpreted as is and doesn't\ncause any problems.\n\nThe test fixtures for PowerShell were updated to include examples where\nwhitespace characters need or need not be escaped.\n\n* Escape newlines for CMD\n\nFor CMD only line feed ('\\n') and carriage return ('\\r') characters need\nto be escaped, but those need to be escaped always. This is supported by\nmanual testing as well as fuzzing.\n\nFrom manual testing (see [2]) it turned out that line feed ('\\n')\ncharacters cause CMD to omit the remaining input;  carriage return\n('\\r') could change the interpretation of certain characters; tab ('\\t')\ncharacters are converted to normal spaces; and all other whitespace\ncharacters are interpreted as is.\n\nThe test fixtures for CMD were updated to include examples where\nwhitespace characters need or need not be escaped.\n\n* Escape newlines for Bash, Dash, and Zsh\n\nFor the supported Unix shells only the line feed ('\\n') character needs\nto be escaped, and only when `interpolation` is `true`. This is\nsupported by manual testing as well as fuzzing.\n\nFrom manual testing (see [2]) it turned out that line feed ('\\n') and\ncharacters cause the whatever follows it to be interpreted as a new\ncommand; tab ('\\t') characters are converted to normal spaces; and all\nother whitespace characters are interpreted as is.\n\nThe test fixtures for Bash, Dash, and Zsh were updated to include\nexamples where whitespace characters need or need not be escaped.\n\n* Improve escaping of tilde for Bash\n\nFor Bash escape the tilde ('~') character if a line terminating\ncharacter ('\\n', '\\r', '\\u2028', or '\\u2029') appears between and\n\"opening\" equals sign ('=') and a \"closing\" colon-tilde (\":~\"). This\ncase was missed previously because the regular expression `/./` does not\nindeed match all characters, but only those that are not line\nterminating characters (even with the multiline flag). From [1]:\n\n> Note that the m multiline flag doesn't change the dot behavior. So to\n> match a pattern across multiple lines, the character class `[^]` can\n> be used - it will match any character including newlines.\n\nThe test fixtures for Bash were updated to include examples where the\ntilde character should have been escaped but wasn't.\n\n* Improve escaping of curly braces for Bash\n\nFor Bash escape the opening curly brace ('}') character if a line\nterminating character ('\\n', '\\r', '\\u2028', or '\\u2029') appears\nbetween and opening curly brace ('{') and closing curly brace ('}').\nAgain, this case was missed previously because the regular expression\n`/./` does match _all_ characters - instead `/[^]/` is used.\n\nThe test fixtures for Bash were updated to include examples where the\nopening curly brace should have been escaped but wasn't.\n\n* Update CHANGELOG\n\nInclude the fixed bugs in the CHANGELOG.\n\n---\n\n1. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide-\n   /Regular_Expressions/Character_Classes\n2. Sample of a script used for manual testing:\n\n    import { execSync } from \"node:child_process\";\n    import assert from \"node:assert\";\n    import * as shescape from \"shescape\";\n\n    const options = {\n      shell: \"powershell.exe\", // <-- set shell to test here\n      interpolation: true,     // <-- change depending on test\n      encoding: \"utf8\",\n    };\n\n    const whitespaceChars = [\n      \"\\u0009\", \"\\u000A\", \"\\u000B\", \"\\u000C\", \"\\u000D\", \" \", \"\\u0085\",\n      \"\\u00A0\", \"\\u1680\", \"\\u2000\", \"\\u2001\", \"\\u2002\", \"\\u2003\",\n      \"\\u2004\", \"\\u2005\", \"\\u2006\", \"\\u2007\", \"\\u2008\", \"\\u2009\",\n      \"\\u200A\", \"\\u2028\", \"\\u2029\", \"\\u202F\", \"\\u205F\", \"\\u3000\",\n      \"\\uFEFF\",\n    ];\n\n    for (const char of whitespaceChars) {\n      const userInput = `foo${char}bar`;\n\n      const escapeOutput = execSync(\n        `node test/_echo.js ${shescape.escape(userInput, options)}`,\n        options\n      );\n      // Use this if you don't expect the escaped output to equal the\n      // quote output.\n      //assert.strictEqual(escapeOutput, \"some string\");\n\n      const quoteOutput = execSync(\n        `node test/_echo.js ${shescape.quote(userInput, options)}`,\n        options\n      );\n      assert.strictEqual(escapeOutput, quoteOutput);\n    }",
    "before_after_code_files": [
      "src/unix.js||src/unix.js",
      "src/win.js||src/win.js",
      "test/fixtures/unix.cjs||test/fixtures/unix.cjs",
      "test/fixtures/win.cjs||test/fixtures/win.cjs",
      "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
      "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs",
      "test/unit/_macros.js||test/unit/_macros.js"
    ]
  },
  "patch_diff": {
    "src/unix.js||src/unix.js": [
      "File: src/unix.js -> src/unix.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "46:   if (interpolation) {",
      "47:     result = result",
      "48:       .replace(/\\\\/g, \"\\\\\\\\\")",
      "49:       .replace(/(^|\\s)(~|#)/g, \"$1\\\\$2\")",
      "50:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
      "51:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
      "52:       .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
      "53:       .replace(/(\"|'|`)/g, \"\\\\$1\")",
      "56:   } else if (quoted) {",
      "57:     result = result.replace(/'/g, `'\\\\''`);",
      "58:   }",
      "",
      "[Removed Lines]",
      "54:       .replace(/\\{(?=(.*?(?:\\,|\\.).*?)\\})/g, \"\\\\{\")",
      "55:       .replace(/(?<=\\=(?:.*?:)?)(~)(?=\\:|\\=|\\-|\\+|\\/|0|\\s|$)/g, \"\\\\$1\");",
      "",
      "[Added Lines]",
      "49:       .replace(/\\n/g, \" \")",
      "55:       .replace(/\\{(?=([^]*?(?:\\,|\\.)[^]*?)\\})/g, \"\\\\{\")",
      "56:       .replace(/(?<=\\=(?:[^]*?:)?)(~)(?=\\:|\\=|\\-|\\+|\\/|0|\\s|$)/g, \"\\\\$1\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:   if (interpolation) {",
      "75:     result = result",
      "76:       .replace(/\\\\/g, \"\\\\\\\\\")",
      "77:       .replace(/(^|\\s)(~|#)/g, \"$1\\\\$2\")",
      "78:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
      "79:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
      "80:       .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
      "81:       .replace(/(\"|'|`)/g, \"\\\\$1\")",
      "83:   } else if (quoted) {",
      "84:     result = result.replace(/'/g, `'\\\\''`);",
      "85:   }",
      "",
      "[Removed Lines]",
      "82:       .replace(/\\{(?=(.*?(?:\\,|\\.).*?)\\})/g, \"\\\\{\");",
      "",
      "[Added Lines]",
      "78:       .replace(/\\n/g, \" \")",
      "84:       .replace(/\\{(?=([^]*?(?:\\,|\\.)[^]*?)\\})/g, \"\\\\{\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "101:   if (interpolation) {",
      "102:     result = result",
      "103:       .replace(/\\\\/g, \"\\\\\\\\\")",
      "104:       .replace(/(^|\\s)(~|#|=)/g, \"$1\\\\$2\")",
      "105:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
      "106:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:       .replace(/\\n/g, \" \")",
      "",
      "---------------"
    ],
    "src/win.js||src/win.js": [
      "File: src/win.js -> src/win.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: function escapeArgCmd(arg, interpolation, quoted) {",
      "38:   if (interpolation) {",
      "39:     result = result",
      "",
      "[Removed Lines]",
      "36:   let result = arg.replace(/\\u0000/g, \"\");",
      "",
      "[Added Lines]",
      "36:   let result = arg.replace(/\\u0000/g, \"\").replace(/\\n|\\r/g, \" \");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65:   if (interpolation) {",
      "66:     result = result",
      "67:       .replace(/(^|\\s)((?:\\*|[1-6])?)(>)/g, \"$1$2`$3\")",
      "68:       .replace(/(^|\\s)(<|@|#|-|\\:|\\])/g, \"$1`$2\")",
      "69:       .replace(/(,|\\;|\\&|\\|)/g, \"`$1\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67:       .replace(/\\n|\\r/g, \" \")",
      "",
      "---------------"
    ],
    "test/fixtures/unix.cjs||test/fixtures/unix.cjs": [
      "File: test/fixtures/unix.cjs -> test/fixtures/unix.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "30:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "31:       },",
      "32:     ],",
      "33:     'single quotes (\"\\'\")': [",
      "34:       {",
      "35:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33:     \"whitespace (\\\\s)\": [",
      "34:       {",
      "35:         input: \"foo bar\",",
      "36:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "37:       },",
      "38:       {",
      "39:         input: \"foo\\nbar\",",
      "40:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "41:       },",
      "42:       {",
      "43:         input: \"foo\\vbar\",",
      "44:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "45:       },",
      "46:       {",
      "47:         input: \"foo\\fbar\",",
      "48:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "49:       },",
      "50:       {",
      "51:         input: \"foo\\rbar\",",
      "52:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
      "53:       },",
      "54:       {",
      "55:         input: \"foo bar\",",
      "56:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "57:       },",
      "58:       {",
      "59:         input: \"foo\\u0085bar\",",
      "60:         expected: {",
      "61:           interpolation: \"foo\\u0085bar\",",
      "62:           noInterpolation: \"foo\\u0085bar\",",
      "63:         },",
      "64:       },",
      "65:       {",
      "66:         input: \"foo\\u00A0bar\",",
      "67:         expected: {",
      "68:           interpolation: \"foo\\u00A0bar\",",
      "69:           noInterpolation: \"foo\\u00A0bar\",",
      "70:         },",
      "71:       },",
      "72:       {",
      "73:         input: \"foo\\u2000bar\",",
      "74:         expected: {",
      "75:           interpolation: \"foo\\u2000bar\",",
      "76:           noInterpolation: \"foo\\u2000bar\",",
      "77:         },",
      "78:       },",
      "79:       {",
      "80:         input: \"foo\\u2001bar\",",
      "81:         expected: {",
      "82:           interpolation: \"foo\\u2001bar\",",
      "83:           noInterpolation: \"foo\\u2001bar\",",
      "84:         },",
      "85:       },",
      "86:       {",
      "87:         input: \"foo\\u2002bar\",",
      "88:         expected: {",
      "89:           interpolation: \"foo\\u2002bar\",",
      "90:           noInterpolation: \"foo\\u2002bar\",",
      "91:         },",
      "92:       },",
      "93:       {",
      "94:         input: \"foo\\u2003bar\",",
      "95:         expected: {",
      "96:           interpolation: \"foo\\u2003bar\",",
      "97:           noInterpolation: \"foo\\u2003bar\",",
      "98:         },",
      "99:       },",
      "100:       {",
      "101:         input: \"foo\\u2004bar\",",
      "102:         expected: {",
      "103:           interpolation: \"foo\\u2004bar\",",
      "104:           noInterpolation: \"foo\\u2004bar\",",
      "105:         },",
      "106:       },",
      "107:       {",
      "108:         input: \"foo\\u2005bar\",",
      "109:         expected: {",
      "110:           interpolation: \"foo\\u2005bar\",",
      "111:           noInterpolation: \"foo\\u2005bar\",",
      "112:         },",
      "113:       },",
      "114:       {",
      "115:         input: \"foo\\u2006bar\",",
      "116:         expected: {",
      "117:           interpolation: \"foo\\u2006bar\",",
      "118:           noInterpolation: \"foo\\u2006bar\",",
      "119:         },",
      "120:       },",
      "121:       {",
      "122:         input: \"foo\\u2007bar\",",
      "123:         expected: {",
      "124:           interpolation: \"foo\\u2007bar\",",
      "125:           noInterpolation: \"foo\\u2007bar\",",
      "126:         },",
      "127:       },",
      "128:       {",
      "129:         input: \"foo\\u2008bar\",",
      "130:         expected: {",
      "131:           interpolation: \"foo\\u2008bar\",",
      "132:           noInterpolation: \"foo\\u2008bar\",",
      "133:         },",
      "134:       },",
      "135:       {",
      "136:         input: \"foo\\u2009bar\",",
      "137:         expected: {",
      "138:           interpolation: \"foo\\u2009bar\",",
      "139:           noInterpolation: \"foo\\u2009bar\",",
      "140:         },",
      "141:       },",
      "142:       {",
      "143:         input: \"foo\\u200Abar\",",
      "144:         expected: {",
      "145:           interpolation: \"foo\\u200Abar\",",
      "146:           noInterpolation: \"foo\\u200Abar\",",
      "147:         },",
      "148:       },",
      "149:       {",
      "150:         input: \"foo\\u2028bar\",",
      "151:         expected: {",
      "152:           interpolation: \"foo\\u2028bar\",",
      "153:           noInterpolation: \"foo\\u2028bar\",",
      "154:         },",
      "155:       },",
      "156:       {",
      "157:         input: \"foo\\u2029bar\",",
      "158:         expected: {",
      "159:           interpolation: \"foo\\u2029bar\",",
      "160:           noInterpolation: \"foo\\u2029bar\",",
      "161:         },",
      "162:       },",
      "163:       {",
      "164:         input: \"foo\\u202Fbar\",",
      "165:         expected: {",
      "166:           interpolation: \"foo\\u202Fbar\",",
      "167:           noInterpolation: \"foo\\u202Fbar\",",
      "168:         },",
      "169:       },",
      "170:       {",
      "171:         input: \"foo\\u205Fbar\",",
      "172:         expected: {",
      "173:           interpolation: \"foo\\u205Fbar\",",
      "174:           noInterpolation: \"foo\\u205Fbar\",",
      "175:         },",
      "176:       },",
      "177:       {",
      "178:         input: \"foo\\u3000bar\",",
      "179:         expected: {",
      "180:           interpolation: \"foo\\u3000bar\",",
      "181:           noInterpolation: \"foo\\u3000bar\",",
      "182:         },",
      "183:       },",
      "184:       {",
      "185:         input: \"foo\\uFEFFbar\",",
      "186:         expected: {",
      "187:           interpolation: \"foo\\uFEFFbar\",",
      "188:           noInterpolation: \"foo\\uFEFFbar\",",
      "189:         },",
      "190:       },",
      "191:       {",
      "192:         input: \"foo\\n\\rbar\",",
      "193:         expected: {",
      "194:           interpolation: \"foo \\rbar\",",
      "195:           noInterpolation: \"foo\\n\\rbar\",",
      "196:         },",
      "197:       },",
      "198:     ],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "137:         input: \"a=b:~:\",",
      "138:         expected: { interpolation: \"a=b:\\\\~:\", noInterpolation: \"a=b:~:\" },",
      "139:       },",
      "140:       {",
      "141:         input: \"a=b:~:c\",",
      "142:         expected: { interpolation: \"a=b:\\\\~:c\", noInterpolation: \"a=b:~:c\" },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306:       {",
      "307:         input: \"a=\\r:~:\",",
      "308:         expected: { interpolation: \"a=\\r:\\\\~:\", noInterpolation: \"a=\\r:~:\" },",
      "309:       },",
      "310:       {",
      "311:         input: \"a=\\u2028:~:\",",
      "312:         expected: {",
      "313:           interpolation: \"a=\\u2028:\\\\~:\",",
      "314:           noInterpolation: \"a=\\u2028:~:\",",
      "315:         },",
      "316:       },",
      "317:       {",
      "318:         input: \"a=\\u2029:~:\",",
      "319:         expected: {",
      "320:           interpolation: \"a=\\u2029:\\\\~:\",",
      "321:           noInterpolation: \"a=\\u2029:~:\",",
      "322:         },",
      "323:       },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "391:         input: \"a{0..2}b\",",
      "392:         expected: { interpolation: \"a\\\\{0..2}b\", noInterpolation: \"a{0..2}b\" },",
      "393:       },",
      "394:     ],",
      "395:     \"angle brackets ('<', '>')\": [",
      "396:       {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "578:       {",
      "579:         input: \"a{\\u000Db,c}d\",",
      "580:         expected: {",
      "581:           interpolation: \"a\\\\{\\u000Db,c}d\",",
      "582:           noInterpolation: \"a{\\u000Db,c}d\",",
      "583:         },",
      "584:       },",
      "585:       {",
      "586:         input: \"a{\\u2028b,c}d\",",
      "587:         expected: {",
      "588:           interpolation: \"a\\\\{\\u2028b,c}d\",",
      "589:           noInterpolation: \"a{\\u2028b,c}d\",",
      "590:         },",
      "591:       },",
      "592:       {",
      "593:         input: \"a{\\u2029b,c}d\",",
      "594:         expected: {",
      "595:           interpolation: \"a\\\\{\\u2029b,c}d\",",
      "596:           noInterpolation: \"a{\\u2029b,c}d\",",
      "597:         },",
      "598:       },",
      "599:       {",
      "600:         input: \"a{b,c\\u000D}d\",",
      "601:         expected: {",
      "602:           interpolation: \"a\\\\{b,c\\u000D}d\",",
      "603:           noInterpolation: \"a{b,c\\u000D}d\",",
      "604:         },",
      "605:       },",
      "606:       {",
      "607:         input: \"a{b,c\\u2028}d\",",
      "608:         expected: {",
      "609:           interpolation: \"a\\\\{b,c\\u2028}d\",",
      "610:           noInterpolation: \"a{b,c\\u2028}d\",",
      "611:         },",
      "612:       },",
      "613:       {",
      "614:         input: \"a{b,c\\u2029}d\",",
      "615:         expected: {",
      "616:           interpolation: \"a\\\\{b,c\\u2029}d\",",
      "617:           noInterpolation: \"a{b,c\\u2029}d\",",
      "618:         },",
      "619:       },",
      "620:       {",
      "621:         input: \"a{\\u000D0..2}b\",",
      "622:         expected: {",
      "623:           interpolation: \"a\\\\{\\u000D0..2}b\",",
      "624:           noInterpolation: \"a{\\u000D0..2}b\",",
      "625:         },",
      "626:       },",
      "627:       {",
      "628:         input: \"a{\\u20280..2}b\",",
      "629:         expected: {",
      "630:           interpolation: \"a\\\\{\\u20280..2}b\",",
      "631:           noInterpolation: \"a{\\u20280..2}b\",",
      "632:         },",
      "633:       },",
      "634:       {",
      "635:         input: \"a{\\u20290..2}b\",",
      "636:         expected: {",
      "637:           interpolation: \"a\\\\{\\u20290..2}b\",",
      "638:           noInterpolation: \"a{\\u20290..2}b\",",
      "639:         },",
      "640:       },",
      "641:       {",
      "642:         input: \"a{0..2\\u000D}b\",",
      "643:         expected: {",
      "644:           interpolation: \"a\\\\{0..2\\u000D}b\",",
      "645:           noInterpolation: \"a{0..2\\u000D}b\",",
      "646:         },",
      "647:       },",
      "648:       {",
      "649:         input: \"a{0..2\\u2028}b\",",
      "650:         expected: {",
      "651:           interpolation: \"a\\\\{0..2\\u2028}b\",",
      "652:           noInterpolation: \"a{0..2\\u2028}b\",",
      "653:         },",
      "654:       },",
      "655:       {",
      "656:         input: \"a{0..2\\u2029}b\",",
      "657:         expected: {",
      "658:           interpolation: \"a\\\\{0..2\\u2029}b\",",
      "659:           noInterpolation: \"a{0..2\\u2029}b\",",
      "660:         },",
      "661:       },",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "439:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "440:       },",
      "441:     ],",
      "442:     'single quotes (\"\\'\")': [",
      "443:       {",
      "444:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "710:     \"whitespace (\\\\s)\": [",
      "711:       {",
      "712:         input: \"foo bar\",",
      "713:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "714:       },",
      "715:       {",
      "716:         input: \"foo\\nbar\",",
      "717:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "718:       },",
      "719:       {",
      "720:         input: \"foo\\vbar\",",
      "721:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "722:       },",
      "723:       {",
      "724:         input: \"foo\\fbar\",",
      "725:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "726:       },",
      "727:       {",
      "728:         input: \"foo\\rbar\",",
      "729:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
      "730:       },",
      "731:       {",
      "732:         input: \"foo bar\",",
      "733:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "734:       },",
      "735:       {",
      "736:         input: \"foo\\u0085bar\",",
      "737:         expected: {",
      "738:           interpolation: \"foo\\u0085bar\",",
      "739:           noInterpolation: \"foo\\u0085bar\",",
      "740:         },",
      "741:       },",
      "742:       {",
      "743:         input: \"foo\\u00A0bar\",",
      "744:         expected: {",
      "745:           interpolation: \"foo\\u00A0bar\",",
      "746:           noInterpolation: \"foo\\u00A0bar\",",
      "747:         },",
      "748:       },",
      "749:       {",
      "750:         input: \"foo\\u2000bar\",",
      "751:         expected: {",
      "752:           interpolation: \"foo\\u2000bar\",",
      "753:           noInterpolation: \"foo\\u2000bar\",",
      "754:         },",
      "755:       },",
      "756:       {",
      "757:         input: \"foo\\u2001bar\",",
      "758:         expected: {",
      "759:           interpolation: \"foo\\u2001bar\",",
      "760:           noInterpolation: \"foo\\u2001bar\",",
      "761:         },",
      "762:       },",
      "763:       {",
      "764:         input: \"foo\\u2002bar\",",
      "765:         expected: {",
      "766:           interpolation: \"foo\\u2002bar\",",
      "767:           noInterpolation: \"foo\\u2002bar\",",
      "768:         },",
      "769:       },",
      "770:       {",
      "771:         input: \"foo\\u2003bar\",",
      "772:         expected: {",
      "773:           interpolation: \"foo\\u2003bar\",",
      "774:           noInterpolation: \"foo\\u2003bar\",",
      "775:         },",
      "776:       },",
      "777:       {",
      "778:         input: \"foo\\u2004bar\",",
      "779:         expected: {",
      "780:           interpolation: \"foo\\u2004bar\",",
      "781:           noInterpolation: \"foo\\u2004bar\",",
      "782:         },",
      "783:       },",
      "784:       {",
      "785:         input: \"foo\\u2005bar\",",
      "786:         expected: {",
      "787:           interpolation: \"foo\\u2005bar\",",
      "788:           noInterpolation: \"foo\\u2005bar\",",
      "789:         },",
      "790:       },",
      "791:       {",
      "792:         input: \"foo\\u2006bar\",",
      "793:         expected: {",
      "794:           interpolation: \"foo\\u2006bar\",",
      "795:           noInterpolation: \"foo\\u2006bar\",",
      "796:         },",
      "797:       },",
      "798:       {",
      "799:         input: \"foo\\u2007bar\",",
      "800:         expected: {",
      "801:           interpolation: \"foo\\u2007bar\",",
      "802:           noInterpolation: \"foo\\u2007bar\",",
      "803:         },",
      "804:       },",
      "805:       {",
      "806:         input: \"foo\\u2008bar\",",
      "807:         expected: {",
      "808:           interpolation: \"foo\\u2008bar\",",
      "809:           noInterpolation: \"foo\\u2008bar\",",
      "810:         },",
      "811:       },",
      "812:       {",
      "813:         input: \"foo\\u2009bar\",",
      "814:         expected: {",
      "815:           interpolation: \"foo\\u2009bar\",",
      "816:           noInterpolation: \"foo\\u2009bar\",",
      "817:         },",
      "818:       },",
      "819:       {",
      "820:         input: \"foo\\u200Abar\",",
      "821:         expected: {",
      "822:           interpolation: \"foo\\u200Abar\",",
      "823:           noInterpolation: \"foo\\u200Abar\",",
      "824:         },",
      "825:       },",
      "826:       {",
      "827:         input: \"foo\\u2028bar\",",
      "828:         expected: {",
      "829:           interpolation: \"foo\\u2028bar\",",
      "830:           noInterpolation: \"foo\\u2028bar\",",
      "831:         },",
      "832:       },",
      "833:       {",
      "834:         input: \"foo\\u2029bar\",",
      "835:         expected: {",
      "836:           interpolation: \"foo\\u2029bar\",",
      "837:           noInterpolation: \"foo\\u2029bar\",",
      "838:         },",
      "839:       },",
      "840:       {",
      "841:         input: \"foo\\u202Fbar\",",
      "842:         expected: {",
      "843:           interpolation: \"foo\\u202Fbar\",",
      "844:           noInterpolation: \"foo\\u202Fbar\",",
      "845:         },",
      "846:       },",
      "847:       {",
      "848:         input: \"foo\\u205Fbar\",",
      "849:         expected: {",
      "850:           interpolation: \"foo\\u205Fbar\",",
      "851:           noInterpolation: \"foo\\u205Fbar\",",
      "852:         },",
      "853:       },",
      "854:       {",
      "855:         input: \"foo\\u3000bar\",",
      "856:         expected: {",
      "857:           interpolation: \"foo\\u3000bar\",",
      "858:           noInterpolation: \"foo\\u3000bar\",",
      "859:         },",
      "860:       },",
      "861:       {",
      "862:         input: \"foo\\uFEFFbar\",",
      "863:         expected: {",
      "864:           interpolation: \"foo\\uFEFFbar\",",
      "865:           noInterpolation: \"foo\\uFEFFbar\",",
      "866:         },",
      "867:       },",
      "868:       {",
      "869:         input: \"foo\\n\\rbar\",",
      "870:         expected: {",
      "871:           interpolation: \"foo \\rbar\",",
      "872:           noInterpolation: \"foo\\n\\rbar\",",
      "873:         },",
      "874:       },",
      "875:     ],",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "800:         input: \"a{0..2}b\",",
      "801:         expected: { interpolation: \"a\\\\{0..2}b\", noInterpolation: \"a{0..2}b\" },",
      "802:       },",
      "803:     ],",
      "804:     \"angle brackets ('<', '>')\": [",
      "805:       {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1237:       {",
      "1238:         input: \"a{\\u000Db,c}d\",",
      "1239:         expected: {",
      "1240:           interpolation: \"a\\\\{\\u000Db,c}d\",",
      "1241:           noInterpolation: \"a{\\u000Db,c}d\",",
      "1242:         },",
      "1243:       },",
      "1244:       {",
      "1245:         input: \"a{\\u2028b,c}d\",",
      "1246:         expected: {",
      "1247:           interpolation: \"a\\\\{\\u2028b,c}d\",",
      "1248:           noInterpolation: \"a{\\u2028b,c}d\",",
      "1249:         },",
      "1250:       },",
      "1251:       {",
      "1252:         input: \"a{\\u2029b,c}d\",",
      "1253:         expected: {",
      "1254:           interpolation: \"a\\\\{\\u2029b,c}d\",",
      "1255:           noInterpolation: \"a{\\u2029b,c}d\",",
      "1256:         },",
      "1257:       },",
      "1258:       {",
      "1259:         input: \"a{b,c\\u000D}d\",",
      "1260:         expected: {",
      "1261:           interpolation: \"a\\\\{b,c\\u000D}d\",",
      "1262:           noInterpolation: \"a{b,c\\u000D}d\",",
      "1263:         },",
      "1264:       },",
      "1265:       {",
      "1266:         input: \"a{b,c\\u2028}d\",",
      "1267:         expected: {",
      "1268:           interpolation: \"a\\\\{b,c\\u2028}d\",",
      "1269:           noInterpolation: \"a{b,c\\u2028}d\",",
      "1270:         },",
      "1271:       },",
      "1272:       {",
      "1273:         input: \"a{b,c\\u2029}d\",",
      "1274:         expected: {",
      "1275:           interpolation: \"a\\\\{b,c\\u2029}d\",",
      "1276:           noInterpolation: \"a{b,c\\u2029}d\",",
      "1277:         },",
      "1278:       },",
      "1279:       {",
      "1280:         input: \"a{\\u000D0..2}b\",",
      "1281:         expected: {",
      "1282:           interpolation: \"a\\\\{\\u000D0..2}b\",",
      "1283:           noInterpolation: \"a{\\u000D0..2}b\",",
      "1284:         },",
      "1285:       },",
      "1286:       {",
      "1287:         input: \"a{\\u20280..2}b\",",
      "1288:         expected: {",
      "1289:           interpolation: \"a\\\\{\\u20280..2}b\",",
      "1290:           noInterpolation: \"a{\\u20280..2}b\",",
      "1291:         },",
      "1292:       },",
      "1293:       {",
      "1294:         input: \"a{\\u20290..2}b\",",
      "1295:         expected: {",
      "1296:           interpolation: \"a\\\\{\\u20290..2}b\",",
      "1297:           noInterpolation: \"a{\\u20290..2}b\",",
      "1298:         },",
      "1299:       },",
      "1300:       {",
      "1301:         input: \"a{0..2\\u000D}b\",",
      "1302:         expected: {",
      "1303:           interpolation: \"a\\\\{0..2\\u000D}b\",",
      "1304:           noInterpolation: \"a{0..2\\u000D}b\",",
      "1305:         },",
      "1306:       },",
      "1307:       {",
      "1308:         input: \"a{0..2\\u2028}b\",",
      "1309:         expected: {",
      "1310:           interpolation: \"a\\\\{0..2\\u2028}b\",",
      "1311:           noInterpolation: \"a{0..2\\u2028}b\",",
      "1312:         },",
      "1313:       },",
      "1314:       {",
      "1315:         input: \"a{0..2\\u2029}b\",",
      "1316:         expected: {",
      "1317:           interpolation: \"a\\\\{0..2\\u2029}b\",",
      "1318:           noInterpolation: \"a{0..2\\u2029}b\",",
      "1319:         },",
      "1320:       },",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "848:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "849:       },",
      "850:     ],",
      "851:     'single quotes (\"\\'\")': [",
      "852:       {",
      "853:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1369:     \"whitespace (\\\\s)\": [",
      "1370:       {",
      "1371:         input: \"foo bar\",",
      "1372:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "1373:       },",
      "1374:       {",
      "1375:         input: \"foo\\nbar\",",
      "1376:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "1377:       },",
      "1378:       {",
      "1379:         input: \"foo\\vbar\",",
      "1380:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "1381:       },",
      "1382:       {",
      "1383:         input: \"foo\\fbar\",",
      "1384:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "1385:       },",
      "1386:       {",
      "1387:         input: \"foo\\rbar\",",
      "1388:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
      "1389:       },",
      "1390:       {",
      "1391:         input: \"foo bar\",",
      "1392:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "1393:       },",
      "1394:       {",
      "1395:         input: \"foo\\u0085bar\",",
      "1396:         expected: {",
      "1397:           interpolation: \"foo\\u0085bar\",",
      "1398:           noInterpolation: \"foo\\u0085bar\",",
      "1399:         },",
      "1400:       },",
      "1401:       {",
      "1402:         input: \"foo\\u00A0bar\",",
      "1403:         expected: {",
      "1404:           interpolation: \"foo\\u00A0bar\",",
      "1405:           noInterpolation: \"foo\\u00A0bar\",",
      "1406:         },",
      "1407:       },",
      "1408:       {",
      "1409:         input: \"foo\\u2000bar\",",
      "1410:         expected: {",
      "1411:           interpolation: \"foo\\u2000bar\",",
      "1412:           noInterpolation: \"foo\\u2000bar\",",
      "1413:         },",
      "1414:       },",
      "1415:       {",
      "1416:         input: \"foo\\u2001bar\",",
      "1417:         expected: {",
      "1418:           interpolation: \"foo\\u2001bar\",",
      "1419:           noInterpolation: \"foo\\u2001bar\",",
      "1420:         },",
      "1421:       },",
      "1422:       {",
      "1423:         input: \"foo\\u2002bar\",",
      "1424:         expected: {",
      "1425:           interpolation: \"foo\\u2002bar\",",
      "1426:           noInterpolation: \"foo\\u2002bar\",",
      "1427:         },",
      "1428:       },",
      "1429:       {",
      "1430:         input: \"foo\\u2003bar\",",
      "1431:         expected: {",
      "1432:           interpolation: \"foo\\u2003bar\",",
      "1433:           noInterpolation: \"foo\\u2003bar\",",
      "1434:         },",
      "1435:       },",
      "1436:       {",
      "1437:         input: \"foo\\u2004bar\",",
      "1438:         expected: {",
      "1439:           interpolation: \"foo\\u2004bar\",",
      "1440:           noInterpolation: \"foo\\u2004bar\",",
      "1441:         },",
      "1442:       },",
      "1443:       {",
      "1444:         input: \"foo\\u2005bar\",",
      "1445:         expected: {",
      "1446:           interpolation: \"foo\\u2005bar\",",
      "1447:           noInterpolation: \"foo\\u2005bar\",",
      "1448:         },",
      "1449:       },",
      "1450:       {",
      "1451:         input: \"foo\\u2006bar\",",
      "1452:         expected: {",
      "1453:           interpolation: \"foo\\u2006bar\",",
      "1454:           noInterpolation: \"foo\\u2006bar\",",
      "1455:         },",
      "1456:       },",
      "1457:       {",
      "1458:         input: \"foo\\u2007bar\",",
      "1459:         expected: {",
      "1460:           interpolation: \"foo\\u2007bar\",",
      "1461:           noInterpolation: \"foo\\u2007bar\",",
      "1462:         },",
      "1463:       },",
      "1464:       {",
      "1465:         input: \"foo\\u2008bar\",",
      "1466:         expected: {",
      "1467:           interpolation: \"foo\\u2008bar\",",
      "1468:           noInterpolation: \"foo\\u2008bar\",",
      "1469:         },",
      "1470:       },",
      "1471:       {",
      "1472:         input: \"foo\\u2009bar\",",
      "1473:         expected: {",
      "1474:           interpolation: \"foo\\u2009bar\",",
      "1475:           noInterpolation: \"foo\\u2009bar\",",
      "1476:         },",
      "1477:       },",
      "1478:       {",
      "1479:         input: \"foo\\u200Abar\",",
      "1480:         expected: {",
      "1481:           interpolation: \"foo\\u200Abar\",",
      "1482:           noInterpolation: \"foo\\u200Abar\",",
      "1483:         },",
      "1484:       },",
      "1485:       {",
      "1486:         input: \"foo\\u2028bar\",",
      "1487:         expected: {",
      "1488:           interpolation: \"foo\\u2028bar\",",
      "1489:           noInterpolation: \"foo\\u2028bar\",",
      "1490:         },",
      "1491:       },",
      "1492:       {",
      "1493:         input: \"foo\\u2029bar\",",
      "1494:         expected: {",
      "1495:           interpolation: \"foo\\u2029bar\",",
      "1496:           noInterpolation: \"foo\\u2029bar\",",
      "1497:         },",
      "1498:       },",
      "1499:       {",
      "1500:         input: \"foo\\u202Fbar\",",
      "1501:         expected: {",
      "1502:           interpolation: \"foo\\u202Fbar\",",
      "1503:           noInterpolation: \"foo\\u202Fbar\",",
      "1504:         },",
      "1505:       },",
      "1506:       {",
      "1507:         input: \"foo\\u205Fbar\",",
      "1508:         expected: {",
      "1509:           interpolation: \"foo\\u205Fbar\",",
      "1510:           noInterpolation: \"foo\\u205Fbar\",",
      "1511:         },",
      "1512:       },",
      "1513:       {",
      "1514:         input: \"foo\\u3000bar\",",
      "1515:         expected: {",
      "1516:           interpolation: \"foo\\u3000bar\",",
      "1517:           noInterpolation: \"foo\\u3000bar\",",
      "1518:         },",
      "1519:       },",
      "1520:       {",
      "1521:         input: \"foo\\uFEFFbar\",",
      "1522:         expected: {",
      "1523:           interpolation: \"foo\\uFEFFbar\",",
      "1524:           noInterpolation: \"foo\\uFEFFbar\",",
      "1525:         },",
      "1526:       },",
      "1527:       {",
      "1528:         input: \"foo\\n\\rbar\",",
      "1529:         expected: {",
      "1530:           interpolation: \"foo \\rbar\",",
      "1531:           noInterpolation: \"foo\\n\\rbar\",",
      "1532:         },",
      "1533:       },",
      "1534:     ],",
      "",
      "---------------"
    ],
    "test/fixtures/win.cjs||test/fixtures/win.cjs": [
      "File: test/fixtures/win.cjs -> test/fixtures/win.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "30:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "31:       },",
      "32:     ],",
      "33:     'single quotes (\"\\'\")': [",
      "34:       {",
      "35:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33:     \"whitespace (\\\\s)\": [",
      "34:       {",
      "35:         input: \"foo bar\",",
      "36:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "37:       },",
      "38:       {",
      "39:         input: \"foo\\nbar\",",
      "40:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "41:       },",
      "42:       {",
      "43:         input: \"foo\\vbar\",",
      "44:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "45:       },",
      "46:       {",
      "47:         input: \"foo\\fbar\",",
      "48:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "49:       },",
      "50:       {",
      "51:         input: \"foo\\rbar\",",
      "52:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "53:       },",
      "54:       {",
      "55:         input: \"foo bar\",",
      "56:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "57:       },",
      "58:       {",
      "59:         input: \"foo\\u0085bar\",",
      "60:         expected: {",
      "61:           interpolation: \"foo\\u0085bar\",",
      "62:           noInterpolation: \"foo\\u0085bar\",",
      "63:         },",
      "64:       },",
      "65:       {",
      "66:         input: \"foo\\u00A0bar\",",
      "67:         expected: {",
      "68:           interpolation: \"foo\\u00A0bar\",",
      "69:           noInterpolation: \"foo\\u00A0bar\",",
      "70:         },",
      "71:       },",
      "72:       {",
      "73:         input: \"foo\\u1680bar\",",
      "74:         expected: {",
      "75:           interpolation: \"foo\\u1680bar\",",
      "76:           noInterpolation: \"foo\\u1680bar\",",
      "77:         },",
      "78:       },",
      "79:       {",
      "80:         input: \"foo\\u2000bar\",",
      "81:         expected: {",
      "82:           interpolation: \"foo\\u2000bar\",",
      "83:           noInterpolation: \"foo\\u2000bar\",",
      "84:         },",
      "85:       },",
      "86:       {",
      "87:         input: \"foo\\u2001bar\",",
      "88:         expected: {",
      "89:           interpolation: \"foo\\u2001bar\",",
      "90:           noInterpolation: \"foo\\u2001bar\",",
      "91:         },",
      "92:       },",
      "93:       {",
      "94:         input: \"foo\\u2002bar\",",
      "95:         expected: {",
      "96:           interpolation: \"foo\\u2002bar\",",
      "97:           noInterpolation: \"foo\\u2002bar\",",
      "98:         },",
      "99:       },",
      "100:       {",
      "101:         input: \"foo\\u2003bar\",",
      "102:         expected: {",
      "103:           interpolation: \"foo\\u2003bar\",",
      "104:           noInterpolation: \"foo\\u2003bar\",",
      "105:         },",
      "106:       },",
      "107:       {",
      "108:         input: \"foo\\u2004bar\",",
      "109:         expected: {",
      "110:           interpolation: \"foo\\u2004bar\",",
      "111:           noInterpolation: \"foo\\u2004bar\",",
      "112:         },",
      "113:       },",
      "114:       {",
      "115:         input: \"foo\\u2005bar\",",
      "116:         expected: {",
      "117:           interpolation: \"foo\\u2005bar\",",
      "118:           noInterpolation: \"foo\\u2005bar\",",
      "119:         },",
      "120:       },",
      "121:       {",
      "122:         input: \"foo\\u2006bar\",",
      "123:         expected: {",
      "124:           interpolation: \"foo\\u2006bar\",",
      "125:           noInterpolation: \"foo\\u2006bar\",",
      "126:         },",
      "127:       },",
      "128:       {",
      "129:         input: \"foo\\u2007bar\",",
      "130:         expected: {",
      "131:           interpolation: \"foo\\u2007bar\",",
      "132:           noInterpolation: \"foo\\u2007bar\",",
      "133:         },",
      "134:       },",
      "135:       {",
      "136:         input: \"foo\\u2008bar\",",
      "137:         expected: {",
      "138:           interpolation: \"foo\\u2008bar\",",
      "139:           noInterpolation: \"foo\\u2008bar\",",
      "140:         },",
      "141:       },",
      "142:       {",
      "143:         input: \"foo\\u2009bar\",",
      "144:         expected: {",
      "145:           interpolation: \"foo\\u2009bar\",",
      "146:           noInterpolation: \"foo\\u2009bar\",",
      "147:         },",
      "148:       },",
      "149:       {",
      "150:         input: \"foo\\u200Abar\",",
      "151:         expected: {",
      "152:           interpolation: \"foo\\u200Abar\",",
      "153:           noInterpolation: \"foo\\u200Abar\",",
      "154:         },",
      "155:       },",
      "156:       {",
      "157:         input: \"foo\\u2028bar\",",
      "158:         expected: {",
      "159:           interpolation: \"foo\\u2028bar\",",
      "160:           noInterpolation: \"foo\\u2028bar\",",
      "161:         },",
      "162:       },",
      "163:       {",
      "164:         input: \"foo\\u2029bar\",",
      "165:         expected: {",
      "166:           interpolation: \"foo\\u2029bar\",",
      "167:           noInterpolation: \"foo\\u2029bar\",",
      "168:         },",
      "169:       },",
      "170:       {",
      "171:         input: \"foo\\u202Fbar\",",
      "172:         expected: {",
      "173:           interpolation: \"foo\\u202Fbar\",",
      "174:           noInterpolation: \"foo\\u202Fbar\",",
      "175:         },",
      "176:       },",
      "177:       {",
      "178:         input: \"foo\\u205Fbar\",",
      "179:         expected: {",
      "180:           interpolation: \"foo\\u205Fbar\",",
      "181:           noInterpolation: \"foo\\u205Fbar\",",
      "182:         },",
      "183:       },",
      "184:       {",
      "185:         input: \"foo\\u3000bar\",",
      "186:         expected: {",
      "187:           interpolation: \"foo\\u3000bar\",",
      "188:           noInterpolation: \"foo\\u3000bar\",",
      "189:         },",
      "190:       },",
      "191:       {",
      "192:         input: \"foo\\uFEFFbar\",",
      "193:         expected: {",
      "194:           interpolation: \"foo\\uFEFFbar\",",
      "195:           noInterpolation: \"foo\\uFEFFbar\",",
      "196:         },",
      "197:       },",
      "198:       {",
      "199:         input: \"foo\\n\\rbar\",",
      "200:         expected: {",
      "201:           interpolation: \"foo  bar\",",
      "202:           noInterpolation: \"foo  bar\",",
      "203:         },",
      "204:       },",
      "205:     ],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "399:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "400:       },",
      "401:     ],",
      "402:     'single quotes (\"\\'\")': [",
      "403:       {",
      "404:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "575:     \"whitespace (\\\\s)\": [",
      "576:       {",
      "577:         input: \"foo bar\",",
      "578:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "579:       },",
      "580:       {",
      "581:         input: \"foo\\nbar\",",
      "582:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "583:       },",
      "584:       {",
      "585:         input: \"foo\\vbar\",",
      "586:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "587:       },",
      "588:       {",
      "589:         input: \"foo\\fbar\",",
      "590:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "591:       },",
      "592:       {",
      "593:         input: \"foo\\rbar\",",
      "594:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\rbar\" },",
      "595:       },",
      "596:       {",
      "597:         input: \"foo bar\",",
      "598:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "599:       },",
      "600:       {",
      "601:         input: \"foo\\u0085bar\",",
      "602:         expected: {",
      "603:           interpolation: \"foo\\u0085bar\",",
      "604:           noInterpolation: \"foo\\u0085bar\",",
      "605:         },",
      "606:       },",
      "607:       {",
      "608:         input: \"foo\\u00A0bar\",",
      "609:         expected: {",
      "610:           interpolation: \"foo\\u00A0bar\",",
      "611:           noInterpolation: \"foo\\u00A0bar\",",
      "612:         },",
      "613:       },",
      "614:       {",
      "615:         input: \"foo\\u1680bar\",",
      "616:         expected: {",
      "617:           interpolation: \"foo\\u1680bar\",",
      "618:           noInterpolation: \"foo\\u1680bar\",",
      "619:         },",
      "620:       },",
      "621:       {",
      "622:         input: \"foo\\u2000bar\",",
      "623:         expected: {",
      "624:           interpolation: \"foo\\u2000bar\",",
      "625:           noInterpolation: \"foo\\u2000bar\",",
      "626:         },",
      "627:       },",
      "628:       {",
      "629:         input: \"foo\\u2001bar\",",
      "630:         expected: {",
      "631:           interpolation: \"foo\\u2001bar\",",
      "632:           noInterpolation: \"foo\\u2001bar\",",
      "633:         },",
      "634:       },",
      "635:       {",
      "636:         input: \"foo\\u2002bar\",",
      "637:         expected: {",
      "638:           interpolation: \"foo\\u2002bar\",",
      "639:           noInterpolation: \"foo\\u2002bar\",",
      "640:         },",
      "641:       },",
      "642:       {",
      "643:         input: \"foo\\u2003bar\",",
      "644:         expected: {",
      "645:           interpolation: \"foo\\u2003bar\",",
      "646:           noInterpolation: \"foo\\u2003bar\",",
      "647:         },",
      "648:       },",
      "649:       {",
      "650:         input: \"foo\\u2004bar\",",
      "651:         expected: {",
      "652:           interpolation: \"foo\\u2004bar\",",
      "653:           noInterpolation: \"foo\\u2004bar\",",
      "654:         },",
      "655:       },",
      "656:       {",
      "657:         input: \"foo\\u2005bar\",",
      "658:         expected: {",
      "659:           interpolation: \"foo\\u2005bar\",",
      "660:           noInterpolation: \"foo\\u2005bar\",",
      "661:         },",
      "662:       },",
      "663:       {",
      "664:         input: \"foo\\u2006bar\",",
      "665:         expected: {",
      "666:           interpolation: \"foo\\u2006bar\",",
      "667:           noInterpolation: \"foo\\u2006bar\",",
      "668:         },",
      "669:       },",
      "670:       {",
      "671:         input: \"foo\\u2007bar\",",
      "672:         expected: {",
      "673:           interpolation: \"foo\\u2007bar\",",
      "674:           noInterpolation: \"foo\\u2007bar\",",
      "675:         },",
      "676:       },",
      "677:       {",
      "678:         input: \"foo\\u2008bar\",",
      "679:         expected: {",
      "680:           interpolation: \"foo\\u2008bar\",",
      "681:           noInterpolation: \"foo\\u2008bar\",",
      "682:         },",
      "683:       },",
      "684:       {",
      "685:         input: \"foo\\u2009bar\",",
      "686:         expected: {",
      "687:           interpolation: \"foo\\u2009bar\",",
      "688:           noInterpolation: \"foo\\u2009bar\",",
      "689:         },",
      "690:       },",
      "691:       {",
      "692:         input: \"foo\\u200Abar\",",
      "693:         expected: {",
      "694:           interpolation: \"foo\\u200Abar\",",
      "695:           noInterpolation: \"foo\\u200Abar\",",
      "696:         },",
      "697:       },",
      "698:       {",
      "699:         input: \"foo\\u2028bar\",",
      "700:         expected: {",
      "701:           interpolation: \"foo\\u2028bar\",",
      "702:           noInterpolation: \"foo\\u2028bar\",",
      "703:         },",
      "704:       },",
      "705:       {",
      "706:         input: \"foo\\u2029bar\",",
      "707:         expected: {",
      "708:           interpolation: \"foo\\u2029bar\",",
      "709:           noInterpolation: \"foo\\u2029bar\",",
      "710:         },",
      "711:       },",
      "712:       {",
      "713:         input: \"foo\\u202Fbar\",",
      "714:         expected: {",
      "715:           interpolation: \"foo\\u202Fbar\",",
      "716:           noInterpolation: \"foo\\u202Fbar\",",
      "717:         },",
      "718:       },",
      "719:       {",
      "720:         input: \"foo\\u205Fbar\",",
      "721:         expected: {",
      "722:           interpolation: \"foo\\u205Fbar\",",
      "723:           noInterpolation: \"foo\\u205Fbar\",",
      "724:         },",
      "725:       },",
      "726:       {",
      "727:         input: \"foo\\u3000bar\",",
      "728:         expected: {",
      "729:           interpolation: \"foo\\u3000bar\",",
      "730:           noInterpolation: \"foo\\u3000bar\",",
      "731:         },",
      "732:       },",
      "733:       {",
      "734:         input: \"foo\\uFEFFbar\",",
      "735:         expected: {",
      "736:           interpolation: \"foo\\uFEFFbar\",",
      "737:           noInterpolation: \"foo\\uFEFFbar\",",
      "738:         },",
      "739:       },",
      "740:       {",
      "741:         input: \"foo\\n\\rbar\",",
      "742:         expected: {",
      "743:           interpolation: \"foo  bar\",",
      "744:           noInterpolation: \"foo\\n\\rbar\",",
      "745:         },",
      "746:       },",
      "747:     ],",
      "",
      "---------------"
    ],
    "test/fuzz/_common.cjs||test/fuzz/_common.cjs": [
      "File: test/fuzz/_common.cjs -> test/fuzz/_common.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: }",
      "27: function getExpectedOutput({ arg, shell }, normalizeWhitespace) {",
      "32:   arg = arg.replace(/\\u{0}/gu, \"\"); // Remove null characters, like Shescape",
      "34:   if (normalizeWhitespace) {",
      "37:     if (isShellPowerShell(shell)) {",
      "39:     } else {",
      "41:     }",
      "44:     if (isShellPowerShell(shell)) {",
      "46:     } else {",
      "48:     }",
      "49:   }",
      "",
      "[Removed Lines]",
      "28:   if (isShellCmd(shell)) {",
      "29:     arg = arg.replace(/[\\n\\r]+/g, \"\"); // Remove newline characters, like prep",
      "30:   }",
      "38:       arg = arg.replace(/^[\\s\\u0085]+|[\\s\\u0085]+$/g, \"\");",
      "40:       arg = arg.replace(/^[ \\t]+|[ \\t]+$/g, \"\");",
      "45:       arg = arg.replace(/(\\s|\\u0085)+/g, \" \");",
      "47:       arg = arg.replace(/[ \\t]+/g, \" \");",
      "",
      "[Added Lines]",
      "33:       arg = arg.replace(",
      "34:         /^[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+|[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+$/g,",
      "35:         \"\"",
      "36:       );",
      "37:     } else if (isShellCmd(shell)) {",
      "38:       arg = arg.replace(/^[ \\t\\n\\r]+|[ \\t\\n\\r]+$/g, \"\");",
      "40:       arg = arg.replace(/^[ \\t\\n]+|[ \\t\\n]+$/g, \"\");",
      "45:       arg = arg.replace(",
      "46:         /[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+/g,",
      "47:         \" \"",
      "48:       );",
      "49:     } else if (isShellCmd(shell)) {",
      "50:       arg = arg.replace(/[ \\t\\n\\r]+/g, \" \");",
      "52:       arg = arg.replace(/[ \\t\\n]+/g, \" \");",
      "53:     }",
      "54:   } else {",
      "55:     if (isShellCmd(shell)) {",
      "56:       arg = arg.replace(/[\\n\\r]/g, \" \"); // Change newlines to spaces, like Shescape",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "57: }",
      "59: function prepareArg({ arg, quoted, shell }, disableExtraWindowsPreparations) {",
      "66:   if (isWindows() && !disableExtraWindowsPreparations) {",
      "68:     if (isShellCmd(shell)) {",
      "",
      "[Removed Lines]",
      "60:   if (isShellCmd(shell)) {",
      "63:     arg = arg.replace(/[\\n\\r]+/g, \"\");",
      "64:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs": [
      "File: test/fuzz/exec.test.cjs -> test/fuzz/exec.test.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "43: }",
      "45: function checkWithoutShellUsingInterpolation(arg) {",
      "48:   const argInfo = { arg, shell: undefined, quoted: false };",
      "50:   const preparedArg = common.prepareArg(argInfo);",
      "",
      "[Removed Lines]",
      "46:   arg = arg.replace(/[\\n\\r]+/g, \"\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "60: }",
      "62: function checkWithShellUsingInterpolation(arg) {",
      "65:   const shell = common.getFuzzShell() || true;",
      "66:   const argInfo = { arg, shell, quoted: false };",
      "67:   const execOptions = { shell };",
      "",
      "[Removed Lines]",
      "63:   arg = arg.replace(/[\\n\\r]+/g, \"\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/unit/_macros.js||test/unit/_macros.js": [
      "File: test/unit/_macros.js -> test/unit/_macros.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "28:     t.is(actual, expected);",
      "29:   },",
      "30:   title(_, { input, interpolation, quoted, shellName }) {",
      "32:     interpolation = interpolation ? \"interpolation\" : \"no interpolation\";",
      "33:     quoted = quoted ? \"quoted\" : \"not quoted\";",
      "",
      "[Removed Lines]",
      "31:     input = input.replace(/\\u{0}/gu, \"\\\\x00\").replace(/\\t/g, \"\\\\t\");",
      "",
      "[Added Lines]",
      "31:     input = input",
      "32:       .replace(/\\u0000/g, \"\\\\u{0000}\")",
      "33:       .replace(/\\u0009/g, \"\\\\t\")",
      "34:       .replace(/\\u000A/g, \"\\\\n\")",
      "35:       .replace(/\\u000B/g, \"\\\\v\")",
      "36:       .replace(/\\u000C/g, \"\\\\f\")",
      "37:       .replace(/\\u000D/g, \"\\\\r\")",
      "38:       .replace(/\\u0085/g, \"\\\\u{0085}\")",
      "39:       .replace(/\\u00A0/g, \"\\\\u{00A0}\")",
      "40:       .replace(/\\u1680/g, \"\\\\u{1680}\")",
      "41:       .replace(/\\u2000/g, \"\\\\u{2000}\")",
      "42:       .replace(/\\u2001/g, \"\\\\u{2001}\")",
      "43:       .replace(/\\u2002/g, \"\\\\u{2002}\")",
      "44:       .replace(/\\u2003/g, \"\\\\u{2003}\")",
      "45:       .replace(/\\u2004/g, \"\\\\u{2004}\")",
      "46:       .replace(/\\u2005/g, \"\\\\u{2005}\")",
      "47:       .replace(/\\u2006/g, \"\\\\u{2006}\")",
      "48:       .replace(/\\u2007/g, \"\\\\u{2007}\")",
      "49:       .replace(/\\u2008/g, \"\\\\u{2008}\")",
      "50:       .replace(/\\u2009/g, \"\\\\u{2009}\")",
      "51:       .replace(/\\u200A/g, \"\\\\u{200A}\")",
      "52:       .replace(/\\u2028/g, \"\\\\u{2028}\")",
      "53:       .replace(/\\u2029/g, \"\\\\u{2029}\")",
      "54:       .replace(/\\u202F/g, \"\\\\u{202F}\")",
      "55:       .replace(/\\u205F/g, \"\\\\u{205F}\")",
      "56:       .replace(/\\u3000/g, \"\\\\u{3000}\")",
      "57:       .replace(/\\uFEFF/g, \"\\\\u{FEFF}\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e92de1478a52042ebdb0027b704e63dcb7e070a8",
      "candidate_info": {
        "commit_hash": "e92de1478a52042ebdb0027b704e63dcb7e070a8",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/e92de1478a52042ebdb0027b704e63dcb7e070a8",
        "files": [
          "src/unix.js"
        ],
        "message": "Simplify replacements in accordance with `regexp/prefer-lookaround` (#874)\n\nUpdate some of the replacement in Unix specific code to equivalent\nreplacements that preserve more of the string (replace fewer characters)\n\nThis was reported by the `regexp/prefer-lookaround` rule after some\nrefactoring of the related code on a separate branch. I haven't yet\nfigured out why this problem isn't being reported by the\nesling-plugin-regexp with the current implementation.",
        "before_after_code_files": [
          "src/unix.js||src/unix.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.js||src/unix.js"
          ],
          "candidate": [
            "src/unix.js||src/unix.js"
          ]
        }
      },
      "candidate_diff": {
        "src/unix.js||src/unix.js": [
          "File: src/unix.js -> src/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     result = result",
          "60:       .replace(/\\\\/gu, \"\\\\\\\\\")",
          "61:       .replace(/\\r?\\n/gu, \" \")",
          "63:       .replace(/([\"$&'()*;<>?`{|])/gu, \"\\\\$1\")",
          "64:       .replace(/(?<=[:=])(~)(?=[\\s+\\-/0:=]|$)/gu, \"\\\\$1\")",
          "65:       .replace(/([\\t ])/gu, \"\\\\$1\");",
          "",
          "[Removed Lines]",
          "62:       .replace(/(^|\\s)([#~])/gu, \"$1\\\\$2\")",
          "",
          "[Added Lines]",
          "62:       .replace(/(?<=^|\\s)([#~])/gu, \"\\\\$1\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:   if (interpolation) {",
          "88:     result = result",
          "89:       .replace(/\\\\/gu, \"\\\\\\\\\")",
          "91:       .replace(/([\"#$&'()*;<>?[`{|])/gu, \"\\\\$1\")",
          "92:       .replace(/([\\t ])/gu, \"\\\\$1\");",
          "",
          "[Removed Lines]",
          "90:       .replace(/(^|\\s)(~)/gu, \"$1\\\\$2\")",
          "",
          "[Added Lines]",
          "90:       .replace(/(?<=^|\\s)(~)/gu, \"\\\\$1\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:     result = result",
          "134:       .replace(/\\\\/gu, \"\\\\\\\\\")",
          "135:       .replace(/\\r?\\n/gu, \" \")",
          "137:       .replace(/([\"$&'()*;<>?`|])/gu, \"\\\\$1\")",
          "138:       .replace(/([\\t\\n ])/gu, \"\\\\$1\");",
          "139:   } else if (quoted) {",
          "",
          "[Removed Lines]",
          "136:       .replace(/(^|\\s)([#~])/gu, \"$1\\\\$2\")",
          "",
          "[Added Lines]",
          "136:       .replace(/(?<=^|\\s)([#~])/gu, \"\\\\$1\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "161:     result = result",
          "162:       .replace(/\\\\/gu, \"\\\\\\\\\")",
          "163:       .replace(/\\r?\\n/gu, \" \")",
          "165:       .replace(/([\"$&'()*;<>?[\\]`{|}])/gu, \"\\\\$1\")",
          "166:       .replace(/([\\t ])/gu, \"\\\\$1\");",
          "167:   } else if (quoted) {",
          "",
          "[Removed Lines]",
          "164:       .replace(/(^|\\s)([#=~])/gu, \"$1\\\\$2\")",
          "",
          "[Added Lines]",
          "164:       .replace(/(?<=^|\\s)([#=~])/gu, \"\\\\$1\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "021c350500d8947b7ccc31eb78c78602f786c36b",
      "candidate_info": {
        "commit_hash": "021c350500d8947b7ccc31eb78c78602f786c36b",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/021c350500d8947b7ccc31eb78c78602f786c36b",
        "files": [
          "CHANGELOG.md",
          "src/win.js",
          "test/fixtures/win.cjs",
          "test/unit/_macros.js"
        ],
        "message": "Escaping for PowerShell after whitespace with `{interpolation:true}` (#322)\n\n* Update test fixtures for PowerShell on Windows\n\nUpdate the test fixtures (used for unit and integration tests) for\nPowerShell on Windows to include examples where characters need to be\nescaped because they appear after whitespace (thus far represented only\nby a space character, ` `). Namely:\n\n- `>`, `*>`, `1>`, `2>`, `3>`, `4>`, `5>`, `6>`\n- `<`\n- `@`\n- `#`\n- `-`\n- `:`\n- `]` (as well as negative tests for `[`)\n\nwith both spaces (` `) and tabs (`\\t`).\n\n* Escape certain characters after whitespace for PowerShell\n\n* Update CHANGELOG",
        "before_after_code_files": [
          "src/win.js||src/win.js",
          "test/fixtures/win.cjs||test/fixtures/win.cjs",
          "test/unit/_macros.js||test/unit/_macros.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/win.js||src/win.js",
            "test/fixtures/win.cjs||test/fixtures/win.cjs",
            "test/unit/_macros.js||test/unit/_macros.js"
          ],
          "candidate": [
            "src/win.js||src/win.js",
            "test/fixtures/win.cjs||test/fixtures/win.cjs",
            "test/unit/_macros.js||test/unit/_macros.js"
          ]
        }
      },
      "candidate_diff": {
        "src/win.js||src/win.js": [
          "File: src/win.js -> src/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   if (interpolation) {",
          "66:     result = result",
          "69:       .replace(/(,|\\;|\\&|\\|)/g, \"`$1\")",
          "70:       .replace(/(\\(|\\)|\\{|\\})/g, \"`$1\")",
          "71:       .replace(/('|\u2019|\u2018|\u201b|\u201a)/g, \"`$1\")",
          "",
          "[Removed Lines]",
          "67:       .replace(/^((?:\\*|[1-6])?)(>)/g, \"$1`$2\")",
          "68:       .replace(/^(<|@|#|-|\\:|\\])/g, \"`$1\")",
          "",
          "[Added Lines]",
          "67:       .replace(/(^|\\s)((?:\\*|[1-6])?)(>)/g, \"$1$2`$3\")",
          "68:       .replace(/(^|\\s)(<|@|#|-|\\:|\\])/g, \"$1`$2\")",
          "",
          "---------------"
        ],
        "test/fixtures/win.cjs||test/fixtures/win.cjs": [
          "File: test/fixtures/win.cjs -> test/fixtures/win.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "457:         input: \"a@b@c\",",
          "458:         expected: { interpolation: \"a@b@c\", noInterpolation: \"a@b@c\" },",
          "459:       },",
          "460:     ],",
          "461:     \"hashtags ('#')\": [",
          "462:       {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "460:       {",
          "461:         input: \"a @b\",",
          "462:         expected: { interpolation: \"a `@b\", noInterpolation: \"a @b\" },",
          "463:       },",
          "464:       {",
          "465:         input: \"a @b\",",
          "466:         expected: { interpolation: \"a `@b\", noInterpolation: \"a @b\" },",
          "467:       },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "475:         input: \"a#b#c\",",
          "476:         expected: { interpolation: \"a#b#c\", noInterpolation: \"a#b#c\" },",
          "477:       },",
          "478:     ],",
          "479:     \"carets ('^')\": [",
          "480:       {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "486:       {",
          "487:         input: \"a #b\",",
          "488:         expected: { interpolation: \"a `#b\", noInterpolation: \"a #b\" },",
          "489:       },",
          "490:       {",
          "491:         input: \"a #b\",",
          "492:         expected: { interpolation: \"a `#b\", noInterpolation: \"a #b\" },",
          "493:       },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "523:         input: \"a-b-c\",",
          "524:         expected: { interpolation: \"a-b-c\", noInterpolation: \"a-b-c\" },",
          "525:       },",
          "526:     ],",
          "527:     \"colons (':')\": [",
          "528:       {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "542:       {",
          "543:         input: \"a -b\",",
          "544:         expected: { interpolation: \"a `-b\", noInterpolation: \"a -b\" },",
          "545:       },",
          "546:       {",
          "547:         input: \"a -b\",",
          "548:         expected: { interpolation: \"a `-b\", noInterpolation: \"a -b\" },",
          "549:       },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "537:         input: \"a:b:c\",",
          "538:         expected: { interpolation: \"a:b:c\", noInterpolation: \"a:b:c\" },",
          "539:       },",
          "540:     ],",
          "541:     \"semicolons (';')\": [",
          "542:       {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "564:       {",
          "565:         input: \"a :b\",",
          "566:         expected: { interpolation: \"a `:b\", noInterpolation: \"a :b\" },",
          "567:       },",
          "568:       {",
          "569:         input: \"a :b\",",
          "570:         expected: { interpolation: \"a `:b\", noInterpolation: \"a :b\" },",
          "571:       },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "623:         input: \"a[b]c\",",
          "624:         expected: { interpolation: \"a[b]c\", noInterpolation: \"a[b]c\" },",
          "625:       },",
          "626:     ],",
          "627:     \"curly brackets ('{', '}')\": [",
          "628:       {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "658:       {",
          "659:         input: \"a [b\",",
          "660:         expected: { interpolation: \"a [b\", noInterpolation: \"a [b\" },",
          "661:       },",
          "662:       {",
          "663:         input: \"a ]b\",",
          "664:         expected: { interpolation: \"a `]b\", noInterpolation: \"a ]b\" },",
          "665:       },",
          "666:       {",
          "667:         input: \"a [b]\",",
          "668:         expected: { interpolation: \"a [b]\", noInterpolation: \"a [b]\" },",
          "669:       },",
          "670:       {",
          "671:         input: \"a [b\",",
          "672:         expected: { interpolation: \"a [b\", noInterpolation: \"a [b\" },",
          "673:       },",
          "674:       {",
          "675:         input: \"a ]b\",",
          "676:         expected: { interpolation: \"a `]b\", noInterpolation: \"a ]b\" },",
          "677:       },",
          "678:       {",
          "679:         input: \"a [b]\",",
          "680:         expected: { interpolation: \"a [b]\", noInterpolation: \"a [b]\" },",
          "681:       },",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "703:         input: \"a<b>c\",",
          "704:         expected: { interpolation: \"a<b>c\", noInterpolation: \"a<b>c\" },",
          "705:       },",
          "706:     ],",
          "707:     \"left double quotation mark ('\u201c')\": [",
          "708:       {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "762:       {",
          "763:         input: \"a <b\",",
          "764:         expected: { interpolation: \"a `<b\", noInterpolation: \"a <b\" },",
          "765:       },",
          "766:       {",
          "767:         input: \"a >b\",",
          "768:         expected: { interpolation: \"a `>b\", noInterpolation: \"a >b\" },",
          "769:       },",
          "770:       {",
          "771:         input: \"a 1>b\",",
          "772:         expected: { interpolation: \"a 1`>b\", noInterpolation: \"a 1>b\" },",
          "773:       },",
          "774:       {",
          "775:         input: \"a 2>b\",",
          "776:         expected: { interpolation: \"a 2`>b\", noInterpolation: \"a 2>b\" },",
          "777:       },",
          "778:       {",
          "779:         input: \"a 3>b\",",
          "780:         expected: { interpolation: \"a 3`>b\", noInterpolation: \"a 3>b\" },",
          "781:       },",
          "782:       {",
          "783:         input: \"a 4>b\",",
          "784:         expected: { interpolation: \"a 4`>b\", noInterpolation: \"a 4>b\" },",
          "785:       },",
          "786:       {",
          "787:         input: \"a 5>b\",",
          "788:         expected: { interpolation: \"a 5`>b\", noInterpolation: \"a 5>b\" },",
          "789:       },",
          "790:       {",
          "791:         input: \"a 6>b\",",
          "792:         expected: { interpolation: \"a 6`>b\", noInterpolation: \"a 6>b\" },",
          "793:       },",
          "794:       {",
          "795:         input: \"a *>b\",",
          "796:         expected: { interpolation: \"a *`>b\", noInterpolation: \"a *>b\" },",
          "797:       },",
          "798:       {",
          "799:         input: \"a <b\",",
          "800:         expected: { interpolation: \"a `<b\", noInterpolation: \"a <b\" },",
          "801:       },",
          "802:       {",
          "803:         input: \"a >b\",",
          "804:         expected: { interpolation: \"a `>b\", noInterpolation: \"a >b\" },",
          "805:       },",
          "806:       {",
          "807:         input: \"a 1>b\",",
          "808:         expected: { interpolation: \"a 1`>b\", noInterpolation: \"a 1>b\" },",
          "809:       },",
          "810:       {",
          "811:         input: \"a 2>b\",",
          "812:         expected: { interpolation: \"a 2`>b\", noInterpolation: \"a 2>b\" },",
          "813:       },",
          "814:       {",
          "815:         input: \"a 3>b\",",
          "816:         expected: { interpolation: \"a 3`>b\", noInterpolation: \"a 3>b\" },",
          "817:       },",
          "818:       {",
          "819:         input: \"a 4>b\",",
          "820:         expected: { interpolation: \"a 4`>b\", noInterpolation: \"a 4>b\" },",
          "821:       },",
          "822:       {",
          "823:         input: \"a 5>b\",",
          "824:         expected: { interpolation: \"a 5`>b\", noInterpolation: \"a 5>b\" },",
          "825:       },",
          "826:       {",
          "827:         input: \"a 6>b\",",
          "828:         expected: { interpolation: \"a 6`>b\", noInterpolation: \"a 6>b\" },",
          "829:       },",
          "830:       {",
          "831:         input: \"a *>b\",",
          "832:         expected: { interpolation: \"a *`>b\", noInterpolation: \"a *>b\" },",
          "833:       },",
          "",
          "---------------"
        ],
        "test/unit/_macros.js||test/unit/_macros.js": [
          "File: test/unit/_macros.js -> test/unit/_macros.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     t.is(actual, expected);",
          "29:   },",
          "30:   title(_, { input, interpolation, quoted, shellName }) {",
          "32:     interpolation = interpolation ? \"interpolation\" : \"no interpolation\";",
          "33:     quoted = quoted ? \"quoted\" : \"not quoted\";",
          "",
          "[Removed Lines]",
          "31:     input = input.replace(/\\u{0}/gu, \"\\\\x00\");",
          "",
          "[Added Lines]",
          "31:     input = input.replace(/\\u{0}/gu, \"\\\\x00\").replace(/\\t/g, \"\\\\t\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7fc35c39fab3fb5feb5ff6f571b99c5fd69f5827",
      "candidate_info": {
        "commit_hash": "7fc35c39fab3fb5feb5ff6f571b99c5fd69f5827",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/7fc35c39fab3fb5feb5ff6f571b99c5fd69f5827",
        "files": [
          ".depcheckrc.json",
          ".github/workflows/test.yml",
          "CONTRIBUTING.md",
          "package.json",
          "script/fuzz.js",
          "script/prefuzz.js",
          "test/fuzz/_common.cjs",
          "test/fuzz/exec.test.cjs",
          "test/fuzz/execFile.test.cjs",
          "test/fuzz/spawn.test.cjs"
        ],
        "message": "Update fuzzing with more fuzz targets (#275)\n\nAdd support for fuzzing targetting different child_process functions.\nWhere previously only `exec`/`execSync` were fuzz tested, this adds a\nfuzz target for `spawn`/`spawnSync` (partial) and a skeleton for a fuzz\ntarget for `execFile`/`execFileSync` (currently unsupported). More on\nthe incomplete support for these targets can be found below.\n\nTo support this, a script is created to run some pre-fuzz checks and\ninvoke jsfuzz [1] with the right fuzz target (based on an input provided\non the CLI). This script effectively replaces the old `prefuzz.js`\nscript.\n\nThe CI has been updated to run each of the (supported) fuzz targets. Now\nfor a shorter amount of time per target to keep the overall time\nmanagable. Note, as this work resulted in some CI failures for fuzzing,\nit was also discovered that the artifact names were invalid for all\n`ubuntu-latests` shells due to those containing a `/`. Hence, this also\nadds a \"name\" value to the fuzz matrix for usage in the artifact name.\n\nFor `spawn`/`spawnSync` only partial fuzzing support is provided due to\nunexpected behaviour uncovered as part of this work. You can read more\nabout this at [2].\n\nFor `execFile`/`execFileSync` no fuzzing support is currently provided,\nonly a skeleton for fuzzing. This is in part due to [2], but also in\npart due to a bug in the implementation of `execFileSync` - in\nparticular when `options.shell` is set to a non-falsy value, arguments\nmight not be passed on to underlying command correctly (depending on the\nshell, but notably Bash and Dash exhibit this behaviour).\n\n--\n1. https://gitlab.com/gitlab-org/security-products/analyzers/fuzzers/jsfuzz\n2. https://github.com/ericcornelissen/shescape/issues/286",
        "before_after_code_files": [
          "script/fuzz.js||script/fuzz.js",
          "script/prefuzz.js||script/prefuzz.js",
          "test/fuzz/index.test.cjs||test/fuzz/_common.cjs",
          "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs",
          "test/fuzz/execFile.test.cjs||test/fuzz/execFile.test.cjs",
          "test/fuzz/spawn.test.cjs||test/fuzz/spawn.test.cjs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs"
          ],
          "candidate": [
            "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs"
          ]
        }
      },
      "candidate_diff": {
        "script/fuzz.js||script/fuzz.js": [
          "File: script/fuzz.js -> script/fuzz.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import * as cp from \"node:child_process\";",
          "8: import * as fs from \"node:fs\";",
          "9: import * as process from \"node:process\";",
          "11: import { getFuzzShell } from \"../test/fuzz/_common.cjs\";",
          "13: const corpusDir = \"./.corpus\";",
          "14: const fuzzTargetsDir = \"./test/fuzz\";",
          "15: const testCasesDir = \"./test/fuzz/corpus\";",
          "17: main(process.argv.slice(2));",
          "19: function main(argv) {",
          "20:   const fuzzTarget = getFuzzTarget(argv);",
          "21:   prepareCorpus();",
          "22:   logShellToFuzz();",
          "23:   startFuzzing(fuzzTarget);",
          "24: }",
          "26: function getFuzzTarget(argv) {",
          "27:   if (argv.length === 0) {",
          "28:     const availableTargets = fs",
          "29:       .readdirSync(fuzzTargetsDir)",
          "30:       .filter((fileName) => fileName.endsWith(\".test.cjs\"))",
          "31:       .map((fileName) => fileName.replace(\".test.cjs\", \"\"));",
          "33:     console.log(\"Provide a fuzz target. Available targets:\");",
          "34:     for (const target of availableTargets) {",
          "35:       console.log(`- '${target}'`);",
          "36:     }",
          "37:     console.log(\"\\n\", `Example: 'npm run fuzz -- ${availableTargets[0]}'`);",
          "39:     process.exit(1);",
          "40:   }",
          "42:   const target = `${fuzzTargetsDir}/${argv[0]}.test.cjs`;",
          "43:   if (!fs.existsSync(target)) {",
          "44:     console.log(`Cannot find fuzz target \"${target}\"`);",
          "45:     process.exit(2);",
          "46:   }",
          "48:   return target;",
          "49: }",
          "51: function logShellToFuzz() {",
          "52:   console.log(",
          "53:     `Fuzzing will use ${getFuzzShell() || \"[default shell]\"} as shell`",
          "54:   );",
          "55:   console.log(\"\\n\");",
          "56: }",
          "58: function prepareCorpus() {",
          "59:   if (!fs.existsSync(corpusDir)) {",
          "60:     fs.mkdirSync(corpusDir);",
          "61:   }",
          "63:   for (const entry of fs.readdirSync(testCasesDir)) {",
          "64:     fs.copyFileSync(`${testCasesDir}/${entry}`, `${corpusDir}/${entry}`);",
          "65:   }",
          "66: }",
          "68: function startFuzzing(target) {",
          "69:   const fuzz = cp.spawn(\"jsfuzz\", [target, corpusDir], {",
          "70:     stdio: [\"inherit\", \"inherit\", \"inherit\"],",
          "71:     shell: true,",
          "72:   });",
          "74:   fuzz.on(\"close\", (code) => process.exit(code));",
          "75: }",
          "",
          "---------------"
        ],
        "script/prefuzz.js||script/prefuzz.js": [
          "File: script/prefuzz.js -> script/prefuzz.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzz/index.test.cjs||test/fuzz/_common.cjs": [
          "File: test/fuzz/index.test.cjs -> test/fuzz/_common.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: const os = require(\"node:os\");",
          "8: const process = require(\"node:process\");",
          "12: require(\"dotenv\").config();",
          "14: const WHITESPACE_REGEX = /\\s|\\u0085/gu;",
          "16: function getFuzzShell() {",
          "17:   return process.env.FUZZ_SHELL;",
          "18: }",
          "20: function prepareArg(arg, quoted) {",
          "21:   const shell = getFuzzShell();",
          "22:   const isWindows = () => os.platform() === \"win32\";",
          "23:   const isShellCmd = () => shell === undefined || /cmd\\.exe$/.test(shell);",
          "",
          "[Removed Lines]",
          "6: const cp = require(\"node:child_process\");",
          "10: const shescape = require(\"../../index.cjs\");",
          "",
          "[Added Lines]",
          "13: function getExpectedOutput(arg) {",
          "14:   return arg",
          "15:     .replace(/[\\n\\r]+/g, \"\") // Avoid dealing with newlines",
          "16:     .replace(/\\u{0}/gu, \"\"); // Remove null characters",
          "17: }",
          "24:   WHITESPACE_REGEX.lastIndex = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:   return result;",
          "67: }",
          "121: module.exports = {",
          "123:   getFuzzShell,",
          "124: };",
          "",
          "[Removed Lines]",
          "69: function getExpectedOutput(arg) {",
          "70:   return arg",
          "71:     .replace(/[\\n\\r]+/g, \"\") // Avoid dealing with newlines",
          "72:     .replace(/\\u{0}/gu, \"\"); // Remove null characters",
          "73: }",
          "75: function checkEscapesCorrectly(arg, options) {",
          "76:   arg = arg.replace(WHITESPACE_REGEX, \"\");",
          "77:   const preparedArg = prepareArg(arg, false);",
          "78:   const escapedArg = shescape.escape(preparedArg, {",
          "79:     ...options,",
          "80:     interpolation: true,",
          "81:   });",
          "82:   const cmd = `node test/fuzz/echo.js ${escapedArg}`;",
          "84:   const result = cp.execSync(cmd, options).toString();",
          "85:   const expected = getExpectedOutput(arg);",
          "86:   if (expected !== result) {",
          "87:     throw new Error(",
          "88:       \"Unexpected output after escaping (- got, + expected):\\n\" +",
          "89:         `- ${result}\\n` +",
          "90:         `+ ${expected}`",
          "91:     );",
          "92:   }",
          "93: }",
          "95: function checkQuotesAndEscapesCorrectly(arg, options) {",
          "96:   const preparedArg = prepareArg(arg, true);",
          "97:   const quotedArg = shescape.quote(preparedArg, options);",
          "98:   const cmd = `node test/fuzz/echo.js ${quotedArg}`;",
          "100:   const result = cp.execSync(cmd, options).toString();",
          "101:   const expected = getExpectedOutput(arg);",
          "102:   if (expected !== result) {",
          "103:     throw new Error(",
          "104:       \"Unexpected output after quoting and escaping (- got, + expected):\\n\" +",
          "105:         `- ${result}\\n` +",
          "106:         `+ ${expected}`",
          "107:     );",
          "108:   }",
          "109: }",
          "111: function fuzz(buf) {",
          "112:   const arg = buf.toString();",
          "113:   const options = {",
          "114:     shell: getFuzzShell(),",
          "115:   };",
          "117:   checkEscapesCorrectly(arg, options);",
          "118:   checkQuotesAndEscapesCorrectly(arg, options);",
          "119: }",
          "122:   fuzz,",
          "",
          "[Added Lines]",
          "75:   WHITESPACE_REGEX,",
          "76:   getExpectedOutput,",
          "78:   prepareArg,",
          "",
          "---------------"
        ],
        "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs": [
          "File: test/fuzz/exec.test.cjs -> test/fuzz/exec.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: const assert = require(\"node:assert\");",
          "8: const { execSync } = require(\"node:child_process\");",
          "10: const common = require(\"./_common.cjs\");",
          "12: const shescape = require(\"../../index.cjs\");",
          "14: function checkEscapesCorrectly(arg, options) {",
          "15:   arg = arg.replace(common.WHITESPACE_REGEX, \"\");",
          "17:   const preparedArg = common.prepareArg(arg, false);",
          "18:   const escapedArg = shescape.escape(preparedArg, {",
          "19:     ...options,",
          "20:     interpolation: true,",
          "21:   });",
          "23:   const stdout = execSync(`node test/fuzz/echo.js ${escapedArg}`, options);",
          "25:   const result = stdout.toString();",
          "26:   const expected = common.getExpectedOutput(arg);",
          "27:   assert.strictEqual(result, expected);",
          "28: }",
          "30: function checkQuotesAndEscapesCorrectly(arg, options) {",
          "31:   const preparedArg = common.prepareArg(arg, true);",
          "32:   const quotedArg = shescape.quote(preparedArg, {",
          "33:     ...options,",
          "34:     interpolation: false,",
          "35:   });",
          "37:   const stdout = execSync(`node test/fuzz/echo.js ${quotedArg}`, options);",
          "39:   const result = stdout.toString();",
          "40:   const expected = common.getExpectedOutput(arg);",
          "41:   assert.strictEqual(result, expected);",
          "42: }",
          "44: function fuzz(buf) {",
          "45:   const arg = buf.toString();",
          "46:   const options = {",
          "47:     shell: common.getFuzzShell(),",
          "48:   };",
          "50:   checkEscapesCorrectly(arg, options);",
          "51:   checkQuotesAndEscapesCorrectly(arg, options);",
          "52: }",
          "54: module.exports = {",
          "55:   fuzz,",
          "56: };",
          "",
          "---------------"
        ],
        "test/fuzz/execFile.test.cjs||test/fuzz/execFile.test.cjs": [
          "File: test/fuzz/execFile.test.cjs -> test/fuzz/execFile.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: const assert = require(\"node:assert\");",
          "8: const { execFileSync } = require(\"node:child_process\");",
          "10: const common = require(\"./_common.cjs\");",
          "12: const shescape = require(\"../../index.cjs\");",
          "14: function checkWithoutShell(arg) {",
          "15:   const preparedArg = common.prepareArg(arg, false);",
          "17:   const stdout = execFileSync(",
          "18:     \"node\",",
          "19:     shescape.escapeAll([\"test/fuzz/echo.js\", preparedArg])",
          "20:   );",
          "22:   const result = stdout.toString();",
          "23:   const expected = common.getExpectedOutput(arg);",
          "24:   assert.strictEqual(result, expected);",
          "25: }",
          "27: function checkWithShell(arg) {",
          "28:   const spawnOptions = {",
          "29:     shell: common.getFuzzShell() || true,",
          "30:   };",
          "32:   const preparedArg = common.prepareArg(arg, true);",
          "34:   const stdout = execFileSync(",
          "35:     \"node\",",
          "36:     shescape.quoteAll([\"test/fuzz/echo.js\", preparedArg], spawnOptions),",
          "37:     spawnOptions",
          "38:   );",
          "40:   const result = stdout.toString();",
          "41:   const expected = common.getExpectedOutput(arg);",
          "42:   assert.strictEqual(result, expected);",
          "43: }",
          "45: function fuzz(buf) {",
          "46:   const arg = buf.toString();",
          "58:   process.exit(1); // Because it currently cannot test anything",
          "59: }",
          "61: module.exports = {",
          "62:   fuzz,",
          "63: };",
          "",
          "---------------"
        ],
        "test/fuzz/spawn.test.cjs||test/fuzz/spawn.test.cjs": [
          "File: test/fuzz/spawn.test.cjs -> test/fuzz/spawn.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: const assert = require(\"node:assert\");",
          "8: const { spawnSync } = require(\"node:child_process\");",
          "10: const common = require(\"./_common.cjs\");",
          "12: const shescape = require(\"../../index.cjs\");",
          "14: function checkWithoutShell(arg) {",
          "15:   const preparedArg = common.prepareArg(arg, false);",
          "17:   const child = spawnSync(",
          "18:     \"node\",",
          "19:     shescape.escapeAll([\"test/fuzz/echo.js\", preparedArg])",
          "20:   );",
          "22:   const result = child.stdout.toString();",
          "23:   const expected = common.getExpectedOutput(arg);",
          "24:   assert.strictEqual(result, expected);",
          "25: }",
          "27: function checkWithShell(arg) {",
          "28:   const spawnOptions = {",
          "29:     shell: common.getFuzzShell() || true,",
          "30:   };",
          "32:   const preparedArg = common.prepareArg(arg, true);",
          "34:   const child = spawnSync(",
          "35:     \"node\",",
          "36:     shescape.quoteAll([\"test/fuzz/echo.js\", preparedArg], spawnOptions),",
          "37:     spawnOptions",
          "38:   );",
          "40:   const result = child.stdout.toString();",
          "41:   const expected = common.getExpectedOutput(arg);",
          "42:   assert.strictEqual(result, expected);",
          "43: }",
          "45: function fuzz(buf) {",
          "46:   const arg = buf.toString();",
          "52:   checkWithShell(arg);",
          "53: }",
          "55: module.exports = {",
          "56:   fuzz,",
          "57: };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4f4c3a49a9e2ea38f2541c1dd3cbf09dc183363",
      "candidate_info": {
        "commit_hash": "d4f4c3a49a9e2ea38f2541c1dd3cbf09dc183363",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/d4f4c3a49a9e2ea38f2541c1dd3cbf09dc183363",
        "files": [
          ".github/workflows/test.yml",
          ".npmrc",
          ".nvmrc",
          "CONTRIBUTING.md",
          "package-lock.json",
          "src/unix.js",
          "src/win.js"
        ],
        "message": "Update Node.js and npm versions for development (#291)\n\n* Bump Node.js version for dev to 18, use lockfile version 3\n\n* Update the Contributing Guidelines\n\nUpdate the required version of Node.js and npm. lockfile version 3 is\nonly supported by npm v8 and up and prior to npm 8.1.2 there was a bug\nwith the `--lockfile-version` option inside of an `.npmrc` file.\n\nThe stylized names for \"Node.js\" and \"npm\" are also updated to be inline\nwith the official style (based on the website `<title>`s).\n\n* Update compatibility testing job to use specific npm version\n\nAdd a step to the compatibility testing job to install a specific\nversion of npm that is known to be compatible with lockfile version 3.\nThis shouldn't affect the compatibility tests as those don't depend on\nthe npm version.\n\nBased on CI logs, this is necessary for Node.js 10.13.0, 12, and 14. For\nsimplicity it happens for all compatability test jobs.\n\n* Change `\\u{0}` to `\\u0000` in RegExps\n\nThe two are equivalent. But the former triggers a bug in Stryker.js\nv6.0.1. For that reason, at least for now, `\\u0000` is preferred.",
        "before_after_code_files": [
          "src/unix.js||src/unix.js",
          "src/win.js||src/win.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js"
          ],
          "candidate": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js"
          ]
        }
      },
      "candidate_diff": {
        "src/unix.js||src/unix.js": [
          "File: src/unix.js -> src/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: function escapeArgBash(arg, interpolation) {",
          "45:   if (interpolation) {",
          "46:     result = result",
          "",
          "[Removed Lines]",
          "43:   let result = arg.replace(/\\u{0}/gu, \"\");",
          "",
          "[Added Lines]",
          "43:   let result = arg.replace(/\\u0000/g, \"\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69: function escapeArgDash(arg, interpolation) {",
          "72:   if (interpolation) {",
          "73:     result = result",
          "",
          "[Removed Lines]",
          "70:   let result = arg.replace(/\\u{0}/gu, \"\");",
          "",
          "[Added Lines]",
          "70:   let result = arg.replace(/\\u0000/g, \"\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95: function escapeArgZsh(arg, interpolation) {",
          "98:   if (interpolation) {",
          "99:     result = result",
          "",
          "[Removed Lines]",
          "96:   let result = arg.replace(/\\u{0}/gu, \"\");",
          "",
          "[Added Lines]",
          "96:   let result = arg.replace(/\\u0000/g, \"\");",
          "",
          "---------------"
        ],
        "src/win.js||src/win.js": [
          "File: src/win.js -> src/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: function escapeArgCmd(arg, interpolation) {",
          "37:   if (interpolation) {",
          "38:     result = result",
          "",
          "[Removed Lines]",
          "35:   let result = arg.replace(/\\u{0}/gu, \"\");",
          "",
          "[Added Lines]",
          "35:   let result = arg.replace(/\\u0000/g, \"\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: function escapeArgPowerShell(arg, interpolation) {",
          "58:   let result = arg",
          "60:     .replace(/`/g, \"``\")",
          "61:     .replace(/\\$/g, \"`$\");",
          "",
          "[Removed Lines]",
          "59:     .replace(/\\u{0}/gu, \"\")",
          "",
          "[Added Lines]",
          "59:     .replace(/\\u0000/g, \"\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e183cfda431216c87bae4773f32c8bc527c64f58",
      "candidate_info": {
        "commit_hash": "e183cfda431216c87bae4773f32c8bc527c64f58",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/e183cfda431216c87bae4773f32c8bc527c64f58",
        "files": [
          "bench/bench.js",
          "bench/unix.js",
          "bench/win.js",
          "src/unix.js",
          "src/unix/bash.js",
          "src/unix/csh.js",
          "src/unix/dash.js",
          "src/unix/index.js",
          "src/unix/zsh.js",
          "src/win.js",
          "src/win/cmd.js",
          "src/win/index.js",
          "src/win/powershell.js",
          "test/unit/_macros.js",
          "test/unit/unix/csh.test.js",
          "test/unit/unix/default-shell.test.js",
          "test/unit/unix/escape.test.js",
          "test/unit/unix/facade.test.js",
          "test/unit/unix/index.test.js",
          "test/unit/unix/quote.test.js",
          "test/unit/unix/shell-name.test.js",
          "test/unit/unix/shells.test.js",
          "test/unit/win/default-shell.test.js",
          "test/unit/win/escape.test.js",
          "test/unit/win/facade.test.js",
          "test/unit/win/index.test.js",
          "test/unit/win/quote.test.js",
          "test/unit/win/shell-name.test.js",
          "test/unit/win/shells.test.js"
        ],
        "message": "Refactor internals in preparation for a more performant API (#870)\n\n* Lift interpolation and quoted checks\n\nRefactor the internal escaping/quoting functionality to left the\nevaluation of the `interpolation` and `quoted` options up such that it\nbecomes possible to get an escape/quote function for a specific\nconfiguration (rather than calling an escape/quote function with that\nconfiguration)\n\nThe goal of this change is to enable a more performand API based on the\nlift implemented here, namely evaluating escape configuration once up\nfront.\n\n* Benchmark compare new/old escape logic\n\nAdd benchmarks using the new `getEscapeFunction` implementation to\ncompare to the old API against the new API.\n\n* Create new benchmark suites aimed at comparing new/old escape logic\n\nCreate two new benchmark, one for Unix and one for Windows, aimed at\ncomparing the old against the new (internal) API for escaping for a\ngiven setup (shell, options, argument) and reporting back the fastest\nimplementation. This is intended for comparing performance during\ndevelopment. As of this commit, running these benchmarks for any shell\nshould (nearly) always report back that the \"[f]astest is 'new'\".",
        "before_after_code_files": [
          "bench/bench.js||bench/bench.js",
          "bench/unix.js||bench/unix.js",
          "bench/win.js||bench/win.js",
          "src/unix.js||src/unix.js",
          "src/unix/bash.js||src/unix/bash.js",
          "src/unix/csh.js||src/unix/csh.js",
          "src/unix/dash.js||src/unix/dash.js",
          "src/unix/index.js||src/unix/index.js",
          "src/unix/zsh.js||src/unix/zsh.js",
          "src/win.js||src/win.js",
          "src/win/cmd.js||src/win/cmd.js",
          "src/win/index.js||src/win/index.js",
          "src/win/powershell.js||src/win/powershell.js",
          "test/unit/_macros.js||test/unit/_macros.js",
          "test/unit/unix/csh.test.js||test/unit/unix/csh.test.js",
          "test/unit/unix/default-shell.test.js||test/unit/unix/default-shell.test.js",
          "test/unit/unix/escape.test.js||test/unit/unix/escape.test.js",
          "test/unit/unix/facade.test.js||test/unit/unix/facade.test.js",
          "test/unit/unix/index.test.js||test/unit/unix/index.test.js",
          "test/unit/unix/quote.test.js||test/unit/unix/quote.test.js",
          "test/unit/unix/shell-name.test.js||test/unit/unix/shell-name.test.js",
          "test/unit/unix/shells.test.js||test/unit/unix/shells.test.js",
          "test/unit/win/default-shell.test.js||test/unit/win/default-shell.test.js",
          "test/unit/win/escape.test.js||test/unit/win/escape.test.js",
          "test/unit/win/facade.test.js||test/unit/win/facade.test.js",
          "test/unit/win/index.test.js||test/unit/win/index.test.js",
          "test/unit/win/quote.test.js||test/unit/win/quote.test.js",
          "test/unit/win/shell-name.test.js||test/unit/win/shell-name.test.js",
          "test/unit/win/shells.test.js||test/unit/win/shells.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js",
            "test/unit/_macros.js||test/unit/_macros.js"
          ],
          "candidate": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js",
            "test/unit/_macros.js||test/unit/_macros.js"
          ]
        }
      },
      "candidate_diff": {
        "bench/bench.js||bench/bench.js": [
          "File: bench/bench.js -> bench/bench.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: } from \"../test/_constants.cjs\";",
          "17: import * as unix from \"../src/unix.js\";",
          "18: import * as win from \"../src/win.js\";",
          "20: const sampleArg = \"foobar\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: import * as unixNew from \"../src/unix/index.js\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:   escapeShellArg(sampleArg, { interpolation: false, quoted: false });",
          "33: });",
          "35: suite.add(`unix, ${binCsh}, ${sampleArg}`, () => {",
          "36:   const escapeShellArg = unix.getEscapeFunction(binCsh);",
          "37:   escapeShellArg(sampleArg, { interpolation: false, quoted: false });",
          "38: });",
          "40: suite.add(`unix, ${binDash}, ${sampleArg}`, () => {",
          "41:   const escapeShellArg = unix.getEscapeFunction(binDash);",
          "42:   escapeShellArg(sampleArg, { interpolation: false, quoted: false });",
          "43: });",
          "45: suite.add(`unix, ${binZsh}, ${sampleArg}`, () => {",
          "46:   const escapeShellArg = unix.getEscapeFunction(binZsh);",
          "47:   escapeShellArg(sampleArg, { interpolation: false, quoted: false });",
          "48: });",
          "50: suite.add(`win, ${binCmd}, ${sampleArg}`, () => {",
          "51:   const escapeShellArg = win.getEscapeFunction(binCmd);",
          "52:   escapeShellArg(sampleArg, { interpolation: false, quoted: false });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: const escapeShellArgBashNew = unixNew.getEscapeFunction(binBash, {",
          "37:   interpolation: false,",
          "38:   quoted: false,",
          "39: });",
          "40: suite.add(`unix (new), ${binBash}, ${sampleArg}`, () => {",
          "41:   escapeShellArgBashNew(sampleArg);",
          "42: });",
          "49: const escapeShellArgCshNew = unixNew.getEscapeFunction(binCsh, {",
          "50:   interpolation: false,",
          "51:   quoted: false,",
          "52: });",
          "53: suite.add(`unix (new), ${binCsh}, ${sampleArg}`, () => {",
          "54:   escapeShellArgCshNew(sampleArg);",
          "55: });",
          "62: const escapeShellArgDashNew = unixNew.getEscapeFunction(binDash, {",
          "63:   interpolation: false,",
          "64:   quoted: false,",
          "65: });",
          "66: suite.add(`unix (new), ${binDash}, ${sampleArg}`, () => {",
          "67:   escapeShellArgDashNew(sampleArg);",
          "68: });",
          "75: const escapeShellArgZshNew = unixNew.getEscapeFunction(binZsh, {",
          "76:   interpolation: false,",
          "77:   quoted: false,",
          "78: });",
          "79: suite.add(`unix (new), ${binZsh}, ${sampleArg}`, () => {",
          "80:   escapeShellArgZshNew(sampleArg);",
          "81: });",
          "",
          "---------------"
        ],
        "bench/unix.js||bench/unix.js": [
          "File: bench/unix.js -> bench/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import Benchmark from \"benchmark\";",
          "8: import { binBash, binCsh, binDash, binZsh } from \"../test/_constants.cjs\";",
          "10: import * as unix from \"../src/unix.js\";",
          "11: import * as unixNew from \"../src/unix/index.js\";",
          "13: const targetArg = \"foobar\";",
          "14: const targetShell = binZsh;",
          "15: const targetOptions = {",
          "16:   interpolation: false,",
          "17:   quoted: false,",
          "18: };",
          "20: const suite = new Benchmark.Suite();",
          "23: const escapeArg = unix.getEscapeFunction(targetShell);",
          "24: suite.add(\"current\", () => {",
          "25:   escapeArg(targetArg, targetOptions);",
          "26: });",
          "29: const escapeArgNew = unixNew.getEscapeFunction(targetShell, targetOptions);",
          "30: suite.add(\"new\", () => {",
          "31:   escapeArgNew(targetArg);",
          "32: });",
          "35: suite.on(\"cycle\", function (event) {",
          "36:   console.log(event.target.toString());",
          "37: });",
          "39: suite.on(\"complete\", function () {",
          "40:   console.log(`Fastest is '${this.filter(\"fastest\").map(\"name\")}'`);",
          "41: });",
          "43: suite.run();",
          "",
          "---------------"
        ],
        "bench/win.js||bench/win.js": [
          "File: bench/win.js -> bench/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import Benchmark from \"benchmark\";",
          "8: import { binCmd, binPowerShell } from \"../test/_constants.cjs\";",
          "10: import * as win from \"../src/win.js\";",
          "11: import * as winNew from \"../src/win/index.js\";",
          "13: const targetArg = \"foobar\";",
          "14: const targetShell = binCmd;",
          "15: const targetOptions = {",
          "16:   interpolation: false,",
          "17:   quoted: false,",
          "18: };",
          "20: const suite = new Benchmark.Suite();",
          "23: const escapeArg = win.getEscapeFunction(targetShell);",
          "24: suite.add(\"current\", () => {",
          "25:   escapeArg(targetArg, targetOptions);",
          "26: });",
          "29: const escapeArgNew = winNew.getEscapeFunction(targetShell, targetOptions);",
          "30: suite.add(\"new\", () => {",
          "31:   escapeArgNew(targetArg);",
          "32: });",
          "35: suite.on(\"cycle\", function (event) {",
          "36:   console.log(event.target.toString());",
          "37: });",
          "39: suite.on(\"complete\", function () {",
          "40:   console.log(`Fastest is '${this.filter(\"fastest\").map(\"name\")}'`);",
          "41: });",
          "43: suite.run();",
          "",
          "---------------"
        ],
        "src/unix.js||src/unix.js": [
          "File: src/unix.js -> src/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "6: import * as fs from \"fs\";",
          "7: import * as path from \"path\";",
          "8: import { TextEncoder } from \"util\";",
          "10: import which from \"which\";",
          "18: const binBash = \"bash\";",
          "26: const binCsh = \"csh\";",
          "34: const binDash = \"dash\";",
          "42: const binZsh = \"zsh\";",
          "53: function escapeArgBash(arg, { interpolation, quoted }) {",
          "54:   let result = arg",
          "55:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "56:     .replace(/\\r(?!\\n)/gu, \"\");",
          "58:   if (interpolation) {",
          "59:     result = result",
          "60:       .replace(/\\\\/gu, \"\\\\\\\\\")",
          "61:       .replace(/\\r?\\n/gu, \" \")",
          "62:       .replace(/(?<=^|\\s)([#~])/gu, \"\\\\$1\")",
          "63:       .replace(/([\"$&'()*;<>?`{|])/gu, \"\\\\$1\")",
          "64:       .replace(/(?<=[:=])(~)(?=[\\s+\\-/0:=]|$)/gu, \"\\\\$1\")",
          "65:       .replace(/([\\t ])/gu, \"\\\\$1\");",
          "66:   } else if (quoted) {",
          "67:     result = result.replace(/'/gu, `'\\\\''`);",
          "68:   }",
          "70:   return result;",
          "71: }",
          "82: function escapeArgCsh(arg, { interpolation, quoted }) {",
          "83:   let result = arg",
          "84:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "85:     .replace(/\\r?\\n|\\r/gu, \" \");",
          "87:   if (interpolation) {",
          "88:     result = result",
          "89:       .replace(/\\\\/gu, \"\\\\\\\\\")",
          "90:       .replace(/(?<=^|\\s)(~)/gu, \"\\\\$1\")",
          "91:       .replace(/([\"#$&'()*;<>?[`{|])/gu, \"\\\\$1\")",
          "92:       .replace(/([\\t ])/gu, \"\\\\$1\");",
          "94:     const textEncoder = new TextEncoder();",
          "95:     result = result",
          "96:       .split(\"\")",
          "97:       .map(",
          "103:         (char) => (textEncoder.encode(char).includes(160) ? `'${char}'` : char)",
          "104:       )",
          "105:       .join(\"\");",
          "106:   } else {",
          "107:     result = result.replace(/\\\\!$/gu, \"\\\\\\\\!\");",
          "108:     if (quoted) {",
          "109:       result = result.replace(/'/gu, `'\\\\''`);",
          "110:     }",
          "111:   }",
          "113:   result = result.replace(/!(?!$)/gu, \"\\\\!\");",
          "115:   return result;",
          "116: }",
          "127: function escapeArgDash(arg, { interpolation, quoted }) {",
          "128:   let result = arg",
          "129:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "130:     .replace(/\\r(?!\\n)/gu, \"\");",
          "132:   if (interpolation) {",
          "133:     result = result",
          "134:       .replace(/\\\\/gu, \"\\\\\\\\\")",
          "135:       .replace(/\\r?\\n/gu, \" \")",
          "136:       .replace(/(?<=^|\\s)([#~])/gu, \"\\\\$1\")",
          "137:       .replace(/([\"$&'()*;<>?`|])/gu, \"\\\\$1\")",
          "138:       .replace(/([\\t\\n ])/gu, \"\\\\$1\");",
          "139:   } else if (quoted) {",
          "140:     result = result.replace(/'/gu, `'\\\\''`);",
          "141:   }",
          "143:   return result;",
          "144: }",
          "155: function escapeArgZsh(arg, { interpolation, quoted }) {",
          "156:   let result = arg",
          "157:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "158:     .replace(/\\r(?!\\n)/gu, \"\");",
          "160:   if (interpolation) {",
          "161:     result = result",
          "162:       .replace(/\\\\/gu, \"\\\\\\\\\")",
          "163:       .replace(/\\r?\\n/gu, \" \")",
          "164:       .replace(/(?<=^|\\s)([#=~])/gu, \"\\\\$1\")",
          "165:       .replace(/([\"$&'()*;<>?[\\]`{|}])/gu, \"\\\\$1\")",
          "166:       .replace(/([\\t ])/gu, \"\\\\$1\");",
          "167:   } else if (quoted) {",
          "168:     result = result.replace(/'/gu, `'\\\\''`);",
          "169:   }",
          "171:   return result;",
          "172: }",
          "180: function quoteArg(arg) {",
          "181:   return `'${arg}'`;",
          "182: }",
          "190: function getBasename(fullPath) {",
          "191:   return path.basename(fullPath);",
          "192: }",
          "202: export function getDefaultShell() {",
          "203:   return \"/bin/sh\";",
          "204: }",
          "",
          "[Added Lines]",
          "6: import * as unix from \"./unix/index.js\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212: export function getEscapeFunction(shellName) {",
          "213:   switch (shellName) {",
          "238:   }",
          "239: }",
          "",
          "[Removed Lines]",
          "214:     case binBash:",
          "215:       return escapeArgBash;",
          "216:     case binCsh:",
          "217:       return escapeArgCsh;",
          "218:     case binDash:",
          "219:       return escapeArgDash;",
          "220:     case binZsh:",
          "221:       return escapeArgZsh;",
          "222:   }",
          "223: }",
          "231: export function getQuoteFunction(shellName) {",
          "232:   switch (shellName) {",
          "233:     case binBash:",
          "234:     case binCsh:",
          "235:     case binDash:",
          "236:     case binZsh:",
          "237:       return quoteArg;",
          "250: export function getShellName({ shell }, { resolveExecutable }) {",
          "251:   shell = resolveExecutable(",
          "252:     { executable: shell },",
          "253:     { exists: fs.existsSync, readlink: fs.readlinkSync, which: which.sync }",
          "254:   );",
          "256:   const shellName = getBasename(shell);",
          "257:   if (getEscapeFunction(shellName) === undefined) {",
          "258:     return binBash;",
          "259:   }",
          "261:   return shellName;",
          "262: }",
          "",
          "[Added Lines]",
          "16:     case unix.binBash:",
          "17:     case unix.binCsh:",
          "18:     case unix.binDash:",
          "19:     case unix.binZsh:",
          "20:       return (arg, options) => unix.getEscapeFunction(shellName, options)(arg);",
          "24: export {",
          "25:   getDefaultShell,",
          "26:   getQuoteFunction,",
          "27:   getShellName,",
          "28: } from \"./unix/index.js\";",
          "",
          "---------------"
        ],
        "src/unix/bash.js||src/unix/bash.js": [
          "File: src/unix/bash.js -> src/unix/bash.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: function escapeForInterpolation(arg) {",
          "13:   return arg",
          "14:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "15:     .replace(/\\r(?!\\n)/gu, \"\")",
          "16:     .replace(/\\\\/gu, \"\\\\\\\\\")",
          "17:     .replace(/\\r?\\n/gu, \" \")",
          "18:     .replace(/(?<=^|\\s)([#~])/gu, \"\\\\$1\")",
          "19:     .replace(/([\"$&'()*;<>?`{|])/gu, \"\\\\$1\")",
          "20:     .replace(/(?<=[:=])(~)(?=[\\s+\\-/0:=]|$)/gu, \"\\\\$1\")",
          "21:     .replace(/([\\t ])/gu, \"\\\\$1\");",
          "22: }",
          "30: function escapeForQuoted(arg) {",
          "31:   return arg",
          "32:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "33:     .replace(/\\r(?!\\n)/gu, \"\")",
          "34:     .replace(/'/gu, `'\\\\''`);",
          "35: }",
          "44: function escapeForUnquoted(arg) {",
          "45:   return arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\").replace(/\\r(?!\\n)/gu, \"\");",
          "46: }",
          "57: export function getEscapeFunction(options) {",
          "58:   if (options.interpolation) {",
          "59:     return escapeForInterpolation;",
          "60:   } else if (options.quoted) {",
          "61:     return escapeForQuoted;",
          "62:   } else {",
          "63:     return escapeForUnquoted;",
          "64:   }",
          "65: }",
          "73: function quoteArg(arg) {",
          "74:   return `'${arg}'`;",
          "75: }",
          "82: export function getQuoteFunction() {",
          "83:   return quoteArg;",
          "84: }",
          "",
          "---------------"
        ],
        "src/unix/csh.js||src/unix/csh.js": [
          "File: src/unix/csh.js -> src/unix/csh.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: function escapeForInterpolation(arg) {",
          "13:   const textEncoder = new TextEncoder();",
          "14:   return arg",
          "15:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "16:     .replace(/\\r?\\n|\\r/gu, \" \")",
          "17:     .replace(/\\\\/gu, \"\\\\\\\\\")",
          "18:     .replace(/(?<=^|\\s)(~)/gu, \"\\\\$1\")",
          "19:     .replace(/([\"#$&'()*;<>?[`{|])/gu, \"\\\\$1\")",
          "20:     .replace(/([\\t ])/gu, \"\\\\$1\")",
          "21:     .split(\"\")",
          "22:     .map(",
          "28:       (char) => (textEncoder.encode(char).includes(160) ? `'${char}'` : char)",
          "29:     )",
          "30:     .join(\"\")",
          "31:     .replace(/!(?!$)/gu, \"\\\\!\");",
          "32: }",
          "40: function escapeForQuoted(arg) {",
          "41:   return arg",
          "42:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "43:     .replace(/\\r?\\n|\\r/gu, \" \")",
          "44:     .replace(/\\\\!$/gu, \"\\\\\\\\!\")",
          "45:     .replace(/'/gu, `'\\\\''`)",
          "46:     .replace(/!(?!$)/gu, \"\\\\!\");",
          "47: }",
          "56: function escapeForUnquoted(arg) {",
          "57:   return arg",
          "58:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "59:     .replace(/\\r?\\n|\\r/gu, \" \")",
          "60:     .replace(/\\\\!$/gu, \"\\\\\\\\!\")",
          "61:     .replace(/!(?!$)/gu, \"\\\\!\");",
          "62: }",
          "72: export function getEscapeFunction(options) {",
          "73:   if (options.interpolation) {",
          "74:     return escapeForInterpolation;",
          "75:   } else if (options.quoted) {",
          "76:     return escapeForQuoted;",
          "77:   } else {",
          "78:     return escapeForUnquoted;",
          "79:   }",
          "80: }",
          "88: function quoteArg(arg) {",
          "89:   return `'${arg}'`;",
          "90: }",
          "97: export function getQuoteFunction() {",
          "98:   return quoteArg;",
          "99: }",
          "",
          "---------------"
        ],
        "src/unix/dash.js||src/unix/dash.js": [
          "File: src/unix/dash.js -> src/unix/dash.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: function escapeForInterpolation(arg) {",
          "13:   return arg",
          "14:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "15:     .replace(/\\r(?!\\n)/gu, \"\")",
          "16:     .replace(/\\\\/gu, \"\\\\\\\\\")",
          "17:     .replace(/\\r?\\n/gu, \" \")",
          "18:     .replace(/(?<=^|\\s)([#~])/gu, \"\\\\$1\")",
          "19:     .replace(/([\"$&'()*;<>?`|])/gu, \"\\\\$1\")",
          "20:     .replace(/([\\t\\n ])/gu, \"\\\\$1\");",
          "21: }",
          "29: function escapeForQuoted(arg) {",
          "30:   return arg",
          "31:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "32:     .replace(/\\r(?!\\n)/gu, \"\")",
          "33:     .replace(/'/gu, `'\\\\''`);",
          "34: }",
          "43: function escapeForUnquoted(arg) {",
          "44:   return arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\").replace(/\\r(?!\\n)/gu, \"\");",
          "45: }",
          "56: export function getEscapeFunction(options) {",
          "57:   if (options.interpolation) {",
          "58:     return escapeForInterpolation;",
          "59:   } else if (options.quoted) {",
          "60:     return escapeForQuoted;",
          "61:   } else {",
          "62:     return escapeForUnquoted;",
          "63:   }",
          "64: }",
          "72: function quoteArg(arg) {",
          "73:   return `'${arg}'`;",
          "74: }",
          "81: export function getQuoteFunction() {",
          "82:   return quoteArg;",
          "83: }",
          "",
          "---------------"
        ],
        "src/unix/index.js||src/unix/index.js": [
          "File: src/unix/index.js -> src/unix/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import * as fs from \"fs\";",
          "7: import * as path from \"path\";",
          "9: import which from \"which\";",
          "11: import * as bash from \"./bash.js\";",
          "12: import * as csh from \"./csh.js\";",
          "13: import * as dash from \"./dash.js\";",
          "14: import * as zsh from \"./zsh.js\";",
          "22: export const binBash = \"bash\";",
          "30: export const binCsh = \"csh\";",
          "38: export const binDash = \"dash\";",
          "46: export const binZsh = \"zsh\";",
          "54: function getBasename(fullPath) {",
          "55:   return path.basename(fullPath);",
          "56: }",
          "66: export function getDefaultShell() {",
          "67:   return \"/bin/sh\";",
          "68: }",
          "79: export function getEscapeFunction(shellName, options) {",
          "80:   switch (shellName) {",
          "81:     case binBash:",
          "82:       return bash.getEscapeFunction(options);",
          "83:     case binCsh:",
          "84:       return csh.getEscapeFunction(options);",
          "85:     case binDash:",
          "86:       return dash.getEscapeFunction(options);",
          "87:     case binZsh:",
          "88:       return zsh.getEscapeFunction(options);",
          "89:   }",
          "90: }",
          "98: export function getQuoteFunction(shellName) {",
          "99:   switch (shellName) {",
          "100:     case binBash:",
          "101:       return bash.getQuoteFunction();",
          "102:     case binCsh:",
          "103:       return csh.getQuoteFunction();",
          "104:     case binDash:",
          "105:       return dash.getQuoteFunction();",
          "106:     case binZsh:",
          "107:       return zsh.getQuoteFunction();",
          "108:   }",
          "109: }",
          "120: export function getShellName({ shell }, { resolveExecutable }) {",
          "121:   shell = resolveExecutable(",
          "122:     { executable: shell },",
          "123:     { exists: fs.existsSync, readlink: fs.readlinkSync, which: which.sync }",
          "124:   );",
          "126:   const shellName = getBasename(shell);",
          "127:   if (getEscapeFunction(shellName, {}) === undefined) {",
          "128:     return binBash;",
          "129:   }",
          "131:   return shellName;",
          "132: }",
          "",
          "---------------"
        ],
        "src/unix/zsh.js||src/unix/zsh.js": [
          "File: src/unix/zsh.js -> src/unix/zsh.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: function escapeForInterpolation(arg) {",
          "13:   return arg",
          "14:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "15:     .replace(/\\r(?!\\n)/gu, \"\")",
          "16:     .replace(/\\\\/gu, \"\\\\\\\\\")",
          "17:     .replace(/\\r?\\n/gu, \" \")",
          "18:     .replace(/(?<=^|\\s)([#=~])/gu, \"\\\\$1\")",
          "19:     .replace(/([\"$&'()*;<>?[\\]`{|}])/gu, \"\\\\$1\")",
          "20:     .replace(/([\\t ])/gu, \"\\\\$1\");",
          "21: }",
          "29: function escapeForQuoted(arg) {",
          "30:   return arg",
          "31:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "32:     .replace(/\\r(?!\\n)/gu, \"\")",
          "33:     .replace(/'/gu, `'\\\\''`);",
          "34: }",
          "43: function escapeForUnquoted(arg) {",
          "44:   return arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\").replace(/\\r(?!\\n)/gu, \"\");",
          "45: }",
          "55: export function getEscapeFunction(options) {",
          "56:   if (options.interpolation) {",
          "57:     return escapeForInterpolation;",
          "58:   } else if (options.quoted) {",
          "59:     return escapeForQuoted;",
          "60:   } else {",
          "61:     return escapeForUnquoted;",
          "62:   }",
          "63: }",
          "71: function quoteArg(arg) {",
          "72:   return `'${arg}'`;",
          "73: }",
          "80: export function getQuoteFunction() {",
          "81:   return quoteArg;",
          "82: }",
          "",
          "---------------"
        ],
        "src/win.js||src/win.js": [
          "File: src/win.js -> src/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "6: import * as fs from \"fs\";",
          "7: import * as path from \"path\";",
          "9: import which from \"which\";",
          "17: const binCmd = \"cmd.exe\";",
          "25: const binPowerShell = \"powershell.exe\";",
          "36: function escapeArgCmd(arg, { interpolation, quoted }) {",
          "37:   let result = arg",
          "38:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "39:     .replace(/\\r?\\n|\\r/gu, \" \");",
          "41:   if (interpolation) {",
          "42:     result = result.replace(/\\^/gu, \"^^\").replace(/([\"&<>|])/gu, \"^$1\");",
          "43:   } else if (quoted) {",
          "44:     result = result.replace(/\"/gu, `\"\"`);",
          "45:   }",
          "47:   return result;",
          "48: }",
          "59: function escapeArgPowerShell(arg, { interpolation, quoted }) {",
          "60:   let result = arg",
          "61:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "62:     .replace(/`/gu, \"``\")",
          "63:     .replace(/\\$/gu, \"`$$\")",
          "64:     .replace(/\\r(?!\\n)/gu, \"\");",
          "66:   if (interpolation) {",
          "67:     result = result",
          "68:       .replace(/\\r?\\n/gu, \" \")",
          "69:       .replace(/(?<=^|[\\s\\u0085])([*1-6]?)(>)/gu, \"$1`$2\")",
          "70:       .replace(/(?<=^|[\\s\\u0085])([#\\-:<@\\]])/gu, \"`$1\")",
          "71:       .replace(/([\"&'(),;{|}\u2018\u2019\u201a\u201b\u201c\u201d\u201e])/gu, \"`$1\")",
          "72:       .replace(/([\\s\\u0085])/gu, \"`$1\");",
          "73:   } else if (quoted) {",
          "74:     result = result.replace(/([\"\u201c\u201d\u201e])/gu, \"$1$1\");",
          "75:   }",
          "77:   return result;",
          "78: }",
          "86: function quoteArg(arg) {",
          "87:   return `\"${arg}\"`;",
          "88: }",
          "96: function getBasename(fullPath) {",
          "97:   return path.win32.basename(fullPath);",
          "98: }",
          "111: export function getDefaultShell({ env: { ComSpec } }) {",
          "112:   if (ComSpec !== undefined) {",
          "113:     return ComSpec;",
          "114:   }",
          "116:   return binCmd;",
          "117: }",
          "",
          "[Added Lines]",
          "6: import * as win from \"./win/index.js\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125: export function getEscapeFunction(shellName) {",
          "126:   switch (shellName) {",
          "131:   }",
          "132: }",
          "",
          "[Removed Lines]",
          "127:     case binCmd:",
          "128:       return escapeArgCmd;",
          "129:     case binPowerShell:",
          "130:       return escapeArgPowerShell;",
          "140: export function getQuoteFunction(shellName) {",
          "141:   switch (shellName) {",
          "142:     case binCmd:",
          "143:     case binPowerShell:",
          "144:       return quoteArg;",
          "145:   }",
          "146: }",
          "157: export function getShellName({ shell }, { resolveExecutable }) {",
          "158:   shell = resolveExecutable(",
          "159:     { executable: shell },",
          "160:     { exists: fs.existsSync, readlink: fs.readlinkSync, which: which.sync }",
          "161:   );",
          "163:   const shellName = getBasename(shell);",
          "164:   if (getEscapeFunction(shellName) === undefined) {",
          "165:     return binCmd;",
          "166:   }",
          "168:   return shellName;",
          "169: }",
          "",
          "[Added Lines]",
          "16:     case win.binCmd:",
          "17:     case win.binPowerShell:",
          "18:       return (arg, options) => win.getEscapeFunction(shellName, options)(arg);",
          "22: export {",
          "23:   getDefaultShell,",
          "24:   getQuoteFunction,",
          "25:   getShellName,",
          "26: } from \"./win/index.js\";",
          "",
          "---------------"
        ],
        "src/win/cmd.js||src/win/cmd.js": [
          "File: src/win/cmd.js -> src/win/cmd.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: function escapeForInterpolation(arg) {",
          "13:   return arg",
          "14:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "15:     .replace(/\\r?\\n|\\r/gu, \" \")",
          "16:     .replace(/\\^/gu, \"^^\")",
          "17:     .replace(/([\"&<>|])/gu, \"^$1\");",
          "18: }",
          "26: function escapeForQuoted(arg) {",
          "27:   return arg",
          "28:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "29:     .replace(/\\r?\\n|\\r/gu, \" \")",
          "30:     .replace(/\"/gu, `\"\"`);",
          "31: }",
          "40: function escapeForUnquoted(arg) {",
          "41:   return arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\").replace(/\\r?\\n|\\r/gu, \" \");",
          "42: }",
          "52: export function getEscapeFunction(options) {",
          "53:   if (options.interpolation) {",
          "54:     return escapeForInterpolation;",
          "55:   } else if (options.quoted) {",
          "56:     return escapeForQuoted;",
          "57:   } else {",
          "58:     return escapeForUnquoted;",
          "59:   }",
          "60: }",
          "68: function quoteArg(arg) {",
          "69:   return `\"${arg}\"`;",
          "70: }",
          "77: export function getQuoteFunction() {",
          "78:   return quoteArg;",
          "79: }",
          "",
          "---------------"
        ],
        "src/win/index.js||src/win/index.js": [
          "File: src/win/index.js -> src/win/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import * as fs from \"fs\";",
          "7: import * as path from \"path\";",
          "9: import which from \"which\";",
          "11: import * as cmd from \"./cmd.js\";",
          "12: import * as powershell from \"./powershell.js\";",
          "20: export const binCmd = \"cmd.exe\";",
          "28: export const binPowerShell = \"powershell.exe\";",
          "36: function getBasename(fullPath) {",
          "37:   return path.win32.basename(fullPath);",
          "38: }",
          "51: export function getDefaultShell({ env: { ComSpec } }) {",
          "52:   if (ComSpec !== undefined) {",
          "53:     return ComSpec;",
          "54:   }",
          "56:   return binCmd;",
          "57: }",
          "68: export function getEscapeFunction(shellName, options) {",
          "69:   switch (shellName) {",
          "70:     case binCmd:",
          "71:       return cmd.getEscapeFunction(options);",
          "72:     case binPowerShell:",
          "73:       return powershell.getEscapeFunction(options);",
          "74:   }",
          "75: }",
          "83: export function getQuoteFunction(shellName) {",
          "84:   switch (shellName) {",
          "85:     case binCmd:",
          "86:       return cmd.getQuoteFunction();",
          "87:     case binPowerShell:",
          "88:       return powershell.getQuoteFunction();",
          "89:   }",
          "90: }",
          "101: export function getShellName({ shell }, { resolveExecutable }) {",
          "102:   shell = resolveExecutable(",
          "103:     { executable: shell },",
          "104:     { exists: fs.existsSync, readlink: fs.readlinkSync, which: which.sync }",
          "105:   );",
          "107:   const shellName = getBasename(shell);",
          "108:   if (getEscapeFunction(shellName, {}) === undefined) {",
          "109:     return binCmd;",
          "110:   }",
          "112:   return shellName;",
          "113: }",
          "",
          "---------------"
        ],
        "src/win/powershell.js||src/win/powershell.js": [
          "File: src/win/powershell.js -> src/win/powershell.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: function escapeForInterpolation(arg) {",
          "13:   return arg",
          "14:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "15:     .replace(/`/gu, \"``\")",
          "16:     .replace(/\\$/gu, \"`$$\")",
          "17:     .replace(/\\r(?!\\n)/gu, \"\")",
          "18:     .replace(/\\r?\\n/gu, \" \")",
          "19:     .replace(/(?<=^|[\\s\\u0085])([*1-6]?)(>)/gu, \"$1`$2\")",
          "20:     .replace(/(?<=^|[\\s\\u0085])([#\\-:<@\\]])/gu, \"`$1\")",
          "21:     .replace(/([\"&'(),;{|}\u2018\u2019\u201a\u201b\u201c\u201d\u201e])/gu, \"`$1\")",
          "22:     .replace(/([\\s\\u0085])/gu, \"`$1\");",
          "23: }",
          "31: function escapeForQuoted(arg) {",
          "32:   return arg",
          "33:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "34:     .replace(/`/gu, \"``\")",
          "35:     .replace(/\\$/gu, \"`$$\")",
          "36:     .replace(/\\r(?!\\n)/gu, \"\")",
          "37:     .replace(/([\"\u201c\u201d\u201e])/gu, \"$1$1\");",
          "38: }",
          "47: function escapeForUnquoted(arg) {",
          "48:   return arg",
          "49:     .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")",
          "50:     .replace(/`/gu, \"``\")",
          "51:     .replace(/\\$/gu, \"`$$\")",
          "52:     .replace(/\\r(?!\\n)/gu, \"\");",
          "53: }",
          "64: export function getEscapeFunction(options) {",
          "65:   if (options.interpolation) {",
          "66:     return escapeForInterpolation;",
          "67:   } else if (options.quoted) {",
          "68:     return escapeForQuoted;",
          "69:   } else {",
          "70:     return escapeForUnquoted;",
          "71:   }",
          "72: }",
          "80: function quoteArg(arg) {",
          "81:   return `\"${arg}\"`;",
          "82: }",
          "89: export function getQuoteFunction() {",
          "90:   return quoteArg;",
          "91: }",
          "",
          "---------------"
        ],
        "test/unit/_macros.js||test/unit/_macros.js": [
          "File: test/unit/_macros.js -> test/unit/_macros.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import test from \"ava\";",
          "24: export const escape = test.macro({",
          "28:     t.is(actual, expected);",
          "29:   },",
          "30:   title(_, { input, interpolation, quoted, shellName }) {",
          "",
          "[Removed Lines]",
          "25:   exec(t, { expected, input, interpolation, platform, quoted, shellName }) {",
          "26:     const escapeFn = platform.getEscapeFunction(shellName);",
          "27:     const actual = escapeFn(input, { interpolation, quoted });",
          "",
          "[Added Lines]",
          "22:   exec(t, { expected, getEscapeFunction, input, interpolation, quoted }) {",
          "23:     const escapeFn = getEscapeFunction({ interpolation, quoted });",
          "24:     const actual = escapeFn(input);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66: });",
          "82: export const quote = test.macro({",
          "85:     const actual = quoteFn(input);",
          "86:     t.is(actual, expected);",
          "87:   },",
          "",
          "[Removed Lines]",
          "83:   exec(t, { expected, input, platform, shellName }) {",
          "84:     const quoteFn = platform.getQuoteFunction(shellName);",
          "",
          "[Added Lines]",
          "78:   exec(t, { expected, input, getQuoteFunction }) {",
          "79:     const quoteFn = getQuoteFunction();",
          "",
          "---------------"
        ],
        "test/unit/unix/csh.test.js||test/unit/unix/csh.test.js": [
          "File: test/unit/unix/csh.test.js -> test/unit/unix/csh.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import { testProp } from \"@fast-check/ava\";",
          "10: import * as fc from \"fast-check\";",
          "16: const textDecoder = new TextDecoder(\"utf-8\", { fatal: true });",
          "",
          "[Removed Lines]",
          "12: import { constants } from \"./_.js\";",
          "14: import * as unix from \"../../../src/unix.js\";",
          "",
          "[Added Lines]",
          "12: import * as csh from \"../../../src/unix/csh.js\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:       testCharacter +",
          "43:       baseString.substring(insertIndex);",
          "47:       interpolation: true,",
          "48:       quoted: false,",
          "49:     });",
          "50:     t.assert(result.includes(`'${testCharacter}'`));",
          "51:   }",
          "52: );",
          "",
          "[Removed Lines]",
          "45:     const escapeFn = unix.getEscapeFunction(constants.binCsh);",
          "46:     const result = escapeFn(testStr, {",
          "",
          "[Added Lines]",
          "43:     const escapeFn = csh.getEscapeFunction({",
          "47:     const result = escapeFn(testStr);",
          "",
          "---------------"
        ],
        "test/unit/unix/default-shell.test.js||test/unit/unix/default-shell.test.js": [
          "File: test/unit/unix/default-shell.test.js -> test/unit/unix/default-shell.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/unit/unix/escape.test.js||test/unit/unix/escape.test.js": [
          "File: test/unit/unix/escape.test.js -> test/unit/unix/escape.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/unit/unix/facade.test.js||test/unit/unix/facade.test.js": [
          "File: test/unit/unix/facade.test.js -> test/unit/unix/facade.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import { testProp } from \"@fast-check/ava\";",
          "7: import * as fc from \"fast-check\";",
          "9: import { arbitrary } from \"./_.js\";",
          "11: import * as facade from \"../../../src/unix.js\";",
          "12: import * as unix from \"../../../src/unix/index.js\";",
          "14: testProp(",
          "15:   \"escape function for supported shell\",",
          "16:   [arbitrary.unixShell(), fc.string()],",
          "17:   (t, shellName, arg) => {",
          "18:     let options = { interpolation: false, quoted: false };",
          "19:     t.is(",
          "20:       facade.getEscapeFunction(shellName)(arg, options),",
          "21:       unix.getEscapeFunction(shellName, options)(arg)",
          "22:     );",
          "24:     options = { interpolation: true, quoted: false };",
          "25:     t.is(",
          "26:       facade.getEscapeFunction(shellName)(arg, options),",
          "27:       unix.getEscapeFunction(shellName, options)(arg)",
          "28:     );",
          "30:     options = { interpolation: false, quoted: true };",
          "31:     t.is(",
          "32:       facade.getEscapeFunction(shellName)(arg, options),",
          "33:       unix.getEscapeFunction(shellName, options)(arg)",
          "34:     );",
          "35:   }",
          "36: );",
          "38: testProp(",
          "39:   \"escape function for unsupported shell\",",
          "40:   [arbitrary.unsupportedUnixShell()],",
          "41:   (t, shellName) => {",
          "42:     const result = facade.getEscapeFunction(shellName);",
          "43:     t.is(result, undefined);",
          "44:   }",
          "45: );",
          "47: testProp(",
          "48:   \"quote function for supported shell\",",
          "49:   [arbitrary.unixShell(), fc.string()],",
          "50:   (t, shellName, arg) => {",
          "51:     const quoteFn = unix.getQuoteFunction(shellName);",
          "52:     t.is(typeof quoteFn, \"function\");",
          "53:     const result = quoteFn(arg);",
          "54:     t.is(typeof result, \"string\");",
          "55:     t.is(result.substring(1, arg.length + 1), arg);",
          "56:     t.regex(result, /^(\".*\"|'.*')$/u);",
          "57:   }",
          "58: );",
          "60: testProp(",
          "61:   \"quote function for unsupported shell\",",
          "62:   [arbitrary.unsupportedUnixShell()],",
          "63:   (t, shellName) => {",
          "64:     const result = unix.getQuoteFunction(shellName);",
          "65:     t.is(result, undefined);",
          "66:   }",
          "67: );",
          "",
          "---------------"
        ],
        "test/unit/unix/index.test.js||test/unit/unix/index.test.js": [
          "File: test/unit/unix/index.test.js -> test/unit/unix/index.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import path from \"node:path\";",
          "8: import { testProp } from \"@fast-check/ava\";",
          "9: import test from \"ava\";",
          "10: import * as fc from \"fast-check\";",
          "11: import sinon from \"sinon\";",
          "13: import { arbitrary, constants } from \"./_.js\";",
          "15: import * as bash from \"../../../src/unix/bash.js\";",
          "16: import * as csh from \"../../../src/unix/csh.js\";",
          "17: import * as dash from \"../../../src/unix/dash.js\";",
          "18: import * as unix from \"../../../src/unix/index.js\";",
          "19: import * as zsh from \"../../../src/unix/zsh.js\";",
          "21: test(\"the default shell\", (t) => {",
          "22:   const result = unix.getDefaultShell();",
          "23:   t.is(result, \"/bin/sh\");",
          "24: });",
          "26: test(\"escape function for bash\", (t) => {",
          "27:   let options = { interpolation: false, quoted: false };",
          "28:   t.is(",
          "29:     unix.getEscapeFunction(constants.binBash, options),",
          "30:     bash.getEscapeFunction(options)",
          "31:   );",
          "33:   options = { interpolation: true, quoted: false };",
          "34:   t.is(",
          "35:     unix.getEscapeFunction(constants.binBash, options),",
          "36:     bash.getEscapeFunction(options)",
          "37:   );",
          "39:   options = { interpolation: false, quoted: true };",
          "40:   t.is(",
          "41:     unix.getEscapeFunction(constants.binBash, options),",
          "42:     bash.getEscapeFunction(options)",
          "43:   );",
          "44: });",
          "46: test(\"escape function for csh\", (t) => {",
          "47:   let options = { interpolation: false, quoted: false };",
          "48:   t.is(",
          "49:     unix.getEscapeFunction(constants.binCsh, options),",
          "50:     csh.getEscapeFunction(options)",
          "51:   );",
          "53:   options = { interpolation: true, quoted: false };",
          "54:   t.is(",
          "55:     unix.getEscapeFunction(constants.binCsh, options),",
          "56:     csh.getEscapeFunction(options)",
          "57:   );",
          "59:   options = { interpolation: false, quoted: true };",
          "60:   t.is(",
          "61:     unix.getEscapeFunction(constants.binCsh, options),",
          "62:     csh.getEscapeFunction(options)",
          "63:   );",
          "64: });",
          "66: test(\"escape function for dash\", (t) => {",
          "67:   let options = { interpolation: false, quoted: false };",
          "68:   t.is(",
          "69:     unix.getEscapeFunction(constants.binDash, options),",
          "70:     dash.getEscapeFunction(options)",
          "71:   );",
          "73:   options = { interpolation: true, quoted: false };",
          "74:   t.is(",
          "75:     unix.getEscapeFunction(constants.binDash, options),",
          "76:     dash.getEscapeFunction(options)",
          "77:   );",
          "79:   options = { interpolation: false, quoted: true };",
          "80:   t.is(",
          "81:     unix.getEscapeFunction(constants.binDash, options),",
          "82:     dash.getEscapeFunction(options)",
          "83:   );",
          "84: });",
          "86: test(\"escape function for zsh\", (t) => {",
          "87:   let options = { interpolation: false, quoted: false };",
          "88:   t.is(",
          "89:     unix.getEscapeFunction(constants.binZsh, options),",
          "90:     zsh.getEscapeFunction(options)",
          "91:   );",
          "93:   options = { interpolation: true, quoted: false };",
          "94:   t.is(",
          "95:     unix.getEscapeFunction(constants.binZsh, options),",
          "96:     zsh.getEscapeFunction(options)",
          "97:   );",
          "99:   options = { interpolation: false, quoted: true };",
          "100:   t.is(",
          "101:     unix.getEscapeFunction(constants.binZsh, options),",
          "102:     zsh.getEscapeFunction(options)",
          "103:   );",
          "104: });",
          "106: testProp(",
          "107:   \"escape function for unsupported shell\",",
          "108:   [arbitrary.unsupportedUnixShell(), fc.boolean(), fc.boolean()],",
          "109:   (t, shellName, interpolation, quoted) => {",
          "110:     const result = unix.getEscapeFunction(shellName, { interpolation, quoted });",
          "111:     t.is(result, undefined);",
          "112:   }",
          "113: );",
          "115: test(\"quote function for bash\", (t) => {",
          "116:   const actual = unix.getQuoteFunction(constants.binBash);",
          "117:   const expected = bash.getQuoteFunction();",
          "118:   t.is(actual, expected);",
          "119: });",
          "121: test(\"quote function for csh\", (t) => {",
          "122:   const actual = unix.getQuoteFunction(constants.binCsh);",
          "123:   const expected = csh.getQuoteFunction();",
          "124:   t.is(actual, expected);",
          "125: });",
          "127: test(\"quote function for dash\", (t) => {",
          "128:   const actual = unix.getQuoteFunction(constants.binDash);",
          "129:   const expected = dash.getQuoteFunction();",
          "130:   t.is(actual, expected);",
          "131: });",
          "133: test(\"quote function for zsh\", (t) => {",
          "134:   const actual = unix.getQuoteFunction(constants.binZsh);",
          "135:   const expected = zsh.getQuoteFunction();",
          "136:   t.is(actual, expected);",
          "137: });",
          "139: testProp(",
          "140:   \"quote function for unsupported shell\",",
          "141:   [arbitrary.unsupportedUnixShell()],",
          "142:   (t, shellName) => {",
          "143:     const result = unix.getQuoteFunction(shellName);",
          "144:     t.is(result, undefined);",
          "145:   }",
          "146: );",
          "148: testProp(",
          "149:   \"get shell name for supported shell\",",
          "150:   [arbitrary.env(), arbitrary.unixPath(), arbitrary.unixShell()],",
          "151:   (t, env, basePath, shell) => {",
          "152:     const resolveExecutable = sinon.stub();",
          "153:     resolveExecutable.returns(path.join(basePath, shell));",
          "155:     const result = unix.getShellName({ env, shell }, { resolveExecutable });",
          "156:     t.is(result, shell);",
          "157:   }",
          "158: );",
          "160: testProp(",
          "161:   \"get shell name for unsupported shell\",",
          "162:   [arbitrary.env(), arbitrary.unixPath(), arbitrary.unsupportedUnixShell()],",
          "163:   (t, env, basePath, shell) => {",
          "164:     const resolveExecutable = sinon.stub();",
          "165:     resolveExecutable.returns(path.join(basePath, shell));",
          "167:     const result = unix.getShellName({ env, shell }, { resolveExecutable });",
          "168:     t.is(result, constants.binBash);",
          "169:   }",
          "170: );",
          "172: testProp(",
          "173:   \"resolving the shell\",",
          "174:   [arbitrary.env(), fc.string()],",
          "175:   (t, env, shell) => {",
          "176:     const resolveExecutable = sinon.stub();",
          "177:     resolveExecutable.returns(\"foobar\");",
          "179:     unix.getShellName({ env, shell }, { resolveExecutable });",
          "180:     t.true(",
          "181:       resolveExecutable.calledWithExactly(",
          "182:         { executable: shell },",
          "183:         {",
          "184:           exists: sinon.match.func,",
          "185:           readlink: sinon.match.func,",
          "186:           which: sinon.match.func,",
          "187:         }",
          "188:       )",
          "189:     );",
          "190:   }",
          "191: );",
          "",
          "---------------"
        ],
        "test/unit/unix/quote.test.js||test/unit/unix/quote.test.js": [
          "File: test/unit/unix/quote.test.js -> test/unit/unix/quote.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/unit/unix/shell-name.test.js||test/unit/unix/shell-name.test.js": [
          "File: test/unit/unix/shell-name.test.js -> test/unit/unix/shell-name.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/unit/unix/shells.test.js||test/unit/unix/shells.test.js": [
          "File: test/unit/unix/shells.test.js -> test/unit/unix/shells.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import test from \"ava\";",
          "8: import { constants, fixtures, macros } from \"./_.js\";",
          "10: import * as bash from \"../../../src/unix/bash.js\";",
          "11: import * as csh from \"../../../src/unix/csh.js\";",
          "12: import * as dash from \"../../../src/unix/dash.js\";",
          "13: import * as zsh from \"../../../src/unix/zsh.js\";",
          "15: const shells = {",
          "16:   [constants.binBash]: bash,",
          "17:   [constants.binCsh]: csh,",
          "18:   [constants.binDash]: dash,",
          "19:   [constants.binZsh]: zsh,",
          "20: };",
          "22: for (const [shellName, shellExports] of Object.entries(shells)) {",
          "23:   const escapeFixtures = Object.values(fixtures.escape[shellName]).flat();",
          "24:   const quoteFixtures = Object.values(fixtures.quote[shellName]).flat();",
          "25:   const redosFixtures = fixtures.redos();",
          "27:   escapeFixtures.forEach(({ input, expected }) => {",
          "28:     test(macros.escape, {",
          "29:       expected: expected.noInterpolation,",
          "30:       input,",
          "31:       getEscapeFunction: shellExports.getEscapeFunction,",
          "32:       interpolation: false,",
          "33:       quoted: false,",
          "34:       shellName,",
          "35:     });",
          "37:     test(macros.escape, {",
          "38:       expected: expected.interpolation,",
          "39:       input,",
          "40:       getEscapeFunction: shellExports.getEscapeFunction,",
          "41:       interpolation: true,",
          "42:       quoted: false,",
          "43:       shellName,",
          "44:     });",
          "46:     test(macros.escape, {",
          "47:       expected: expected.quoted || expected.noInterpolation,",
          "48:       input,",
          "49:       getEscapeFunction: shellExports.getEscapeFunction,",
          "50:       interpolation: false,",
          "51:       quoted: true,",
          "52:       shellName,",
          "53:     });",
          "54:   });",
          "56:   quoteFixtures.forEach(({ input, expected }) => {",
          "57:     test(macros.quote, {",
          "58:       expected: expected.notEscaped,",
          "59:       input,",
          "60:       getQuoteFunction: shellExports.getQuoteFunction,",
          "61:       shellName,",
          "62:     });",
          "63:   });",
          "65:   redosFixtures.forEach((input, id) => {",
          "66:     test(`${shellName}, ReDoS #${id}`, (t) => {",
          "67:       const escape = shellExports.getEscapeFunction({",
          "68:         interpolation: true,",
          "69:         quoted: false,",
          "70:       });",
          "71:       escape(input);",
          "72:       t.pass();",
          "73:     });",
          "74:   });",
          "75: }",
          "",
          "---------------"
        ],
        "test/unit/win/default-shell.test.js||test/unit/win/default-shell.test.js": [
          "File: test/unit/win/default-shell.test.js -> test/unit/win/default-shell.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/unit/win/escape.test.js||test/unit/win/escape.test.js": [
          "File: test/unit/win/escape.test.js -> test/unit/win/escape.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/unit/win/facade.test.js||test/unit/win/facade.test.js": [
          "File: test/unit/win/facade.test.js -> test/unit/win/facade.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import { testProp } from \"@fast-check/ava\";",
          "7: import * as fc from \"fast-check\";",
          "9: import { arbitrary } from \"./_.js\";",
          "11: import * as facade from \"../../../src/win.js\";",
          "12: import * as win from \"../../../src/win/index.js\";",
          "14: testProp(",
          "15:   \"escape function for supported shell\",",
          "16:   [arbitrary.windowsShell(), fc.string()],",
          "17:   (t, shellName, arg) => {",
          "18:     let options = { interpolation: false, quoted: false };",
          "19:     t.is(",
          "20:       facade.getEscapeFunction(shellName)(arg, options),",
          "21:       win.getEscapeFunction(shellName, options)(arg)",
          "22:     );",
          "24:     options = { interpolation: true, quoted: false };",
          "25:     t.is(",
          "26:       facade.getEscapeFunction(shellName)(arg, options),",
          "27:       win.getEscapeFunction(shellName, options)(arg)",
          "28:     );",
          "30:     options = { interpolation: false, quoted: true };",
          "31:     t.is(",
          "32:       facade.getEscapeFunction(shellName)(arg, options),",
          "33:       win.getEscapeFunction(shellName, options)(arg)",
          "34:     );",
          "35:   }",
          "36: );",
          "38: testProp(",
          "39:   \"escape function for unsupported shell\",",
          "40:   [arbitrary.unsupportedWindowsShell()],",
          "41:   (t, shellName) => {",
          "42:     const result = facade.getEscapeFunction(shellName);",
          "43:     t.is(result, undefined);",
          "44:   }",
          "45: );",
          "47: testProp(",
          "48:   \"quote function for supported shell\",",
          "49:   [arbitrary.windowsShell(), fc.string()],",
          "50:   (t, shellName, arg) => {",
          "51:     const quoteFn = win.getQuoteFunction(shellName);",
          "52:     t.is(typeof quoteFn, \"function\");",
          "53:     const result = quoteFn(arg);",
          "54:     t.is(typeof result, \"string\");",
          "55:     t.is(result.substring(1, arg.length + 1), arg);",
          "56:     t.regex(result, /^(\".*\"|'.*')$/u);",
          "57:   }",
          "58: );",
          "60: testProp(",
          "61:   \"quote function for unsupported shell\",",
          "62:   [arbitrary.unsupportedWindowsShell()],",
          "63:   (t, shellName) => {",
          "64:     const result = win.getQuoteFunction(shellName);",
          "65:     t.is(result, undefined);",
          "66:   }",
          "67: );",
          "",
          "---------------"
        ],
        "test/unit/win/index.test.js||test/unit/win/index.test.js": [
          "File: test/unit/win/index.test.js -> test/unit/win/index.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import path from \"node:path/win32\";",
          "8: import { testProp } from \"@fast-check/ava\";",
          "9: import test from \"ava\";",
          "10: import * as fc from \"fast-check\";",
          "11: import sinon from \"sinon\";",
          "13: import { arbitrary, constants } from \"./_.js\";",
          "15: import * as cmd from \"../../../src/win/cmd.js\";",
          "16: import * as win from \"../../../src/win/index.js\";",
          "17: import * as powershell from \"../../../src/win/powershell.js\";",
          "19: testProp(",
          "20:   \"the default shell when %COMSPEC% is defined\",",
          "21:   [arbitrary.env(), arbitrary.windowsPath()],",
          "22:   (t, env, ComSpec) => {",
          "23:     env.ComSpec = ComSpec;",
          "25:     const result = win.getDefaultShell({ env });",
          "26:     t.is(result, ComSpec);",
          "27:   }",
          "28: );",
          "30: test(\"the default shell when %COMSPEC% is an empty string\", (t) => {",
          "31:   const ComSpec = \"\";",
          "32:   const env = { ComSpec };",
          "34:   const result = win.getDefaultShell({ env });",
          "35:   t.is(result, ComSpec);",
          "36: });",
          "38: testProp(",
          "39:   `the default shell when %COMSPEC% is not defined`,",
          "40:   [arbitrary.env()],",
          "41:   (t, env) => {",
          "42:     delete env.ComSpec;",
          "44:     const result = win.getDefaultShell({ env });",
          "45:     t.is(result, constants.binCmd);",
          "46:   }",
          "47: );",
          "49: test(\"escape function for CMD\", (t) => {",
          "50:   let options = { interpolation: false, quoted: false };",
          "51:   t.is(",
          "52:     win.getEscapeFunction(constants.binCmd, options),",
          "53:     cmd.getEscapeFunction(options)",
          "54:   );",
          "56:   options = { interpolation: true, quoted: false };",
          "57:   t.is(",
          "58:     win.getEscapeFunction(constants.binCmd, options),",
          "59:     cmd.getEscapeFunction(options)",
          "60:   );",
          "62:   options = { interpolation: false, quoted: true };",
          "63:   t.is(",
          "64:     win.getEscapeFunction(constants.binCmd, options),",
          "65:     cmd.getEscapeFunction(options)",
          "66:   );",
          "67: });",
          "69: test(\"escape function for PowerShell\", (t) => {",
          "70:   let options = { interpolation: false, quoted: false };",
          "71:   t.is(",
          "72:     win.getEscapeFunction(constants.binPowerShell, options),",
          "73:     powershell.getEscapeFunction(options)",
          "74:   );",
          "76:   options = { interpolation: true, quoted: false };",
          "77:   t.is(",
          "78:     win.getEscapeFunction(constants.binPowerShell, options),",
          "79:     powershell.getEscapeFunction(options)",
          "80:   );",
          "82:   options = { interpolation: false, quoted: true };",
          "83:   t.is(",
          "84:     win.getEscapeFunction(constants.binPowerShell, options),",
          "85:     powershell.getEscapeFunction(options)",
          "86:   );",
          "87: });",
          "89: testProp(",
          "90:   \"escape function for unsupported shell\",",
          "91:   [arbitrary.unsupportedWindowsShell(), fc.boolean(), fc.boolean()],",
          "92:   (t, shellName, interpolation, quoted) => {",
          "93:     const result = win.getEscapeFunction(shellName, { interpolation, quoted });",
          "94:     t.is(result, undefined);",
          "95:   }",
          "96: );",
          "98: test(\"quote function for CMD\", (t) => {",
          "99:   const actual = win.getQuoteFunction(constants.binCmd);",
          "100:   const expected = cmd.getQuoteFunction();",
          "101:   t.is(actual, expected);",
          "102: });",
          "104: test(\"quote function for PowerShell\", (t) => {",
          "105:   const actual = win.getQuoteFunction(constants.binPowerShell);",
          "106:   const expected = powershell.getQuoteFunction();",
          "107:   t.is(actual, expected);",
          "108: });",
          "110: testProp(",
          "111:   \"quote function for unsupported shell\",",
          "112:   [arbitrary.unsupportedWindowsShell()],",
          "113:   (t, shellName) => {",
          "114:     const result = win.getQuoteFunction(shellName);",
          "115:     t.is(result, undefined);",
          "116:   }",
          "117: );",
          "119: testProp(",
          "120:   \"get shell name for supported shell\",",
          "121:   [arbitrary.env(), arbitrary.windowsPath(), arbitrary.windowsShell()],",
          "122:   (t, env, basePath, shell) => {",
          "123:     const resolveExecutable = sinon.stub();",
          "124:     resolveExecutable.returns(path.join(basePath, shell));",
          "126:     const result = win.getShellName({ env, shell }, { resolveExecutable });",
          "127:     t.is(result, shell);",
          "128:   }",
          "129: );",
          "131: testProp(",
          "132:   \"get shell name for unsupported shell\",",
          "133:   [",
          "134:     arbitrary.env(),",
          "135:     arbitrary.windowsPath(),",
          "136:     arbitrary.unsupportedWindowsShell(),",
          "137:   ],",
          "138:   (t, env, basePath, shell) => {",
          "139:     const resolveExecutable = sinon.stub();",
          "140:     resolveExecutable.returns(path.join(basePath, shell));",
          "142:     const result = win.getShellName({ env, shell }, { resolveExecutable });",
          "143:     t.is(result, constants.binCmd);",
          "144:   }",
          "145: );",
          "147: testProp(",
          "148:   \"resolving the shell\",",
          "149:   [arbitrary.env(), fc.string()],",
          "150:   (t, env, shell) => {",
          "151:     const resolveExecutable = sinon.stub();",
          "152:     resolveExecutable.returns(\"foobar\");",
          "154:     win.getShellName({ env, shell }, { resolveExecutable });",
          "155:     t.true(",
          "156:       resolveExecutable.calledWithExactly(",
          "157:         { executable: shell },",
          "158:         {",
          "159:           exists: sinon.match.func,",
          "160:           readlink: sinon.match.func,",
          "161:           which: sinon.match.func,",
          "162:         }",
          "163:       )",
          "164:     );",
          "165:   }",
          "166: );",
          "",
          "---------------"
        ],
        "test/unit/win/quote.test.js||test/unit/win/quote.test.js": [
          "File: test/unit/win/quote.test.js -> test/unit/win/quote.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/unit/win/shell-name.test.js||test/unit/win/shell-name.test.js": [
          "File: test/unit/win/shell-name.test.js -> test/unit/win/shell-name.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/unit/win/shells.test.js||test/unit/win/shells.test.js": [
          "File: test/unit/win/shells.test.js -> test/unit/win/shells.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import test from \"ava\";",
          "8: import { constants, fixtures, macros } from \"./_.js\";",
          "10: import * as cmd from \"../../../src/win/cmd.js\";",
          "11: import * as powershell from \"../../../src/win/powershell.js\";",
          "13: const shells = {",
          "14:   [constants.binCmd]: cmd,",
          "15:   [constants.binPowerShell]: powershell,",
          "16: };",
          "18: for (const [shellName, shellExports] of Object.entries(shells)) {",
          "19:   const escapeFixtures = Object.values(fixtures.escape[shellName]).flat();",
          "20:   const quoteFixtures = Object.values(fixtures.quote[shellName]).flat();",
          "22:   escapeFixtures.forEach(({ input, expected }) => {",
          "23:     test(macros.escape, {",
          "24:       expected: expected.noInterpolation,",
          "25:       input,",
          "26:       getEscapeFunction: shellExports.getEscapeFunction,",
          "27:       interpolation: false,",
          "28:       quoted: false,",
          "29:       shellName,",
          "30:     });",
          "32:     test(macros.escape, {",
          "33:       expected: expected.interpolation,",
          "34:       input,",
          "35:       getEscapeFunction: shellExports.getEscapeFunction,",
          "36:       interpolation: true,",
          "37:       quoted: false,",
          "38:       shellName,",
          "39:     });",
          "41:     test(macros.escape, {",
          "42:       expected: expected.quoted || expected.noInterpolation,",
          "43:       input,",
          "44:       getEscapeFunction: shellExports.getEscapeFunction,",
          "45:       interpolation: false,",
          "46:       quoted: true,",
          "47:       shellName,",
          "48:     });",
          "49:   });",
          "51:   quoteFixtures.forEach(({ input, expected }) => {",
          "52:     test(macros.quote, {",
          "53:       expected: expected.notEscaped,",
          "54:       input,",
          "55:       getQuoteFunction: shellExports.getQuoteFunction,",
          "56:       shellName,",
          "57:     });",
          "58:   });",
          "59: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}