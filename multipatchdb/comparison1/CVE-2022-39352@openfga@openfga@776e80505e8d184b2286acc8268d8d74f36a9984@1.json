{
  "cve_id": "CVE-2022-39352",
  "cve_desc": "OpenFGA is a high-performance authorization/permission engine inspired by Google Zanzibar. Versions prior to 0.2.5 are vulnerable to authorization bypass under certain conditions. You are affected by this vulnerability if you added a tuple with a wildcard (*) assigned to a tupleset relation (the right hand side of a \u2018from\u2019 statement). This issue has been patched in version v0.2.5. This update is not backward compatible with any authorization model that uses wildcard on a tupleset relation.",
  "repo": "openfga/openfga",
  "patch_hash": "776e80505e8d184b2286acc8268d8d74f36a9984",
  "patch_info": {
    "commit_hash": "776e80505e8d184b2286acc8268d8d74f36a9984",
    "repo": "openfga/openfga",
    "commit_url": "https://github.com/openfga/openfga/commit/776e80505e8d184b2286acc8268d8d74f36a9984",
    "files": [
      "pkg/tuple/validation.go",
      "pkg/typesystem/typesystem.go",
      "pkg/typesystem/typesystem_test.go",
      "server/commands/check.go",
      "server/commands/expand.go",
      "server/commands/write.go",
      "server/test/check.go",
      "server/test/expand.go",
      "server/test/write.go",
      "server/test/write_authzmodel.go",
      "server/validation/validation.go"
    ],
    "message": "Merge pull request from GHSA-3gfj-fxx4-f22w\n\n* wip\n\n* do not expand. fail!\n\n* follow zanzibar style\n\n* address comments\n\n* format comment\n\n* add test\n\n* address feedback\n\n* fix Expand as well\n\n* chore: fix Check and Expand so all usersets return an error\n\nCo-authored-by: Jonathan Whitaker <jon.whitaker@auth0.com>",
    "before_after_code_files": [
      "pkg/tuple/validation.go||pkg/tuple/validation.go",
      "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go",
      "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go",
      "server/commands/check.go||server/commands/check.go",
      "server/commands/expand.go||server/commands/expand.go",
      "server/commands/write.go||server/commands/write.go",
      "server/test/check.go||server/test/check.go",
      "server/test/expand.go||server/test/expand.go",
      "server/test/write.go||server/test/write.go",
      "server/test/write_authzmodel.go||server/test/write_authzmodel.go",
      "server/validation/validation.go||server/validation/validation.go"
    ]
  },
  "patch_diff": {
    "pkg/tuple/validation.go||pkg/tuple/validation.go": [
      "File: pkg/tuple/validation.go -> pkg/tuple/validation.go"
    ],
    "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go": [
      "File: pkg/typesystem/typesystem.go -> pkg/typesystem/typesystem.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "546: func validateRelationTypeRestrictions(model *openfgapb.AuthorizationModel) error {",
      "547:  t := New(model)",
      "549:  for objectType := range t.typeDefinitions {",
      "550:   relations, err := t.GetRelations(objectType)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "548:  allTupleToUsersetDefinitions := t.GetAllTupleToUsersetsDefinitions()",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "576:      if _, err := t.GetRelation(relatedObjectType, relatedRelation); err != nil {",
      "577:       return InvalidRelationTypeError(objectType, name, relatedObjectType, relatedRelation)",
      "578:      }",
      "579:     }",
      "580:    }",
      "581:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "582:      for _, arrayOfTtus := range allTupleToUsersetDefinitions[objectType] {",
      "583:       for _, tupleToUserSetDef := range arrayOfTtus {",
      "584:        if tupleToUserSetDef.Tupleset.Relation == name {",
      "585:         return &InvalidRelationError{ObjectType: objectType, Relation: name}",
      "586:        }",
      "587:       }",
      "588:      }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "726:  return fmt.Errorf(\"the relation type '%s' on '%s' in object type '%s' is not valid\", relationType, relation, objectType)",
      "727: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "741: func (t *TypeSystem) GetAllTupleToUsersetsDefinitions() map[string]map[string][]*openfgapb.TupleToUserset {",
      "742:  response := make(map[string]map[string][]*openfgapb.TupleToUserset, 0)",
      "743:  for typeName, typeDef := range t.GetTypeDefinitions() {",
      "744:   response[typeName] = make(map[string][]*openfgapb.TupleToUserset, 0)",
      "745:   for relationName, relationDef := range typeDef.GetRelations() {",
      "746:    ttus := make([]*openfgapb.TupleToUserset, 0)",
      "747:    response[typeName][relationName] = t.getAllTupleToUsersetsDefinitions(relationDef, &ttus)",
      "748:   }",
      "749:  }",
      "750:  return response",
      "751: }",
      "753: func (t *TypeSystem) getAllTupleToUsersetsDefinitions(relationDef *openfgapb.Userset, resp *[]*openfgapb.TupleToUserset) []*openfgapb.TupleToUserset {",
      "754:  if relationDef.GetTupleToUserset() != nil {",
      "756:  }",
      "757:  if relationDef.GetUnion() != nil {",
      "758:   for _, child := range relationDef.GetUnion().GetChild() {",
      "759:    t.getAllTupleToUsersetsDefinitions(child, resp)",
      "760:   }",
      "761:  }",
      "762:  if relationDef.GetIntersection() != nil {",
      "763:   for _, child := range relationDef.GetIntersection().GetChild() {",
      "764:    t.getAllTupleToUsersetsDefinitions(child, resp)",
      "765:   }",
      "766:  }",
      "767:  if relationDef.GetDifference() != nil {",
      "768:   t.getAllTupleToUsersetsDefinitions(relationDef.GetDifference().GetBase(), resp)",
      "769:   t.getAllTupleToUsersetsDefinitions(relationDef.GetDifference().GetSubtract(), resp)",
      "770:  }",
      "771:  return *resp",
      "772: }",
      "",
      "---------------"
    ],
    "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go": [
      "File: pkg/typesystem/typesystem_test.go -> pkg/typesystem/typesystem_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "868:    },",
      "869:    err: NonAssignableRelationError(\"document\", \"reader\"),",
      "870:   },",
      "871:  }",
      "873:  for _, test := range tests {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "871:   {",
      "872:    name: \"userset specified as allowed type, but the relation is used in a TTU rewrite\",",
      "873:    model: &openfgapb.AuthorizationModel{",
      "874:     SchemaVersion: SchemaVersion1_1,",
      "875:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "876:      {",
      "877:       Type: \"user\",",
      "878:      },",
      "879:      {",
      "880:       Type: \"folder\",",
      "881:       Relations: map[string]*openfgapb.Userset{",
      "882:        \"member\": This(),",
      "883:       },",
      "884:       Metadata: &openfgapb.Metadata{",
      "885:        Relations: map[string]*openfgapb.RelationMetadata{",
      "886:         \"member\": {",
      "887:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
      "888:           {",
      "889:            Type: \"user\",",
      "890:           },",
      "891:          },",
      "892:         },",
      "893:        },",
      "894:       },",
      "895:      },",
      "896:      {",
      "897:       Type: \"document\",",
      "898:       Relations: map[string]*openfgapb.Userset{",
      "899:        \"parent\":   This(),",
      "900:        \"can_view\": TupleToUserset(\"parent\", \"member\"),",
      "901:       },",
      "902:       Metadata: &openfgapb.Metadata{",
      "903:        Relations: map[string]*openfgapb.RelationMetadata{",
      "904:         \"parent\": {",
      "905:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
      "906:           {",
      "907:            Type:     \"folder\",",
      "908:            Relation: \"member\", //this isn't allowed",
      "909:           },",
      "910:          },",
      "911:         },",
      "912:        },",
      "913:       },",
      "914:      },",
      "915:     },",
      "916:    },",
      "917:    err: &InvalidRelationError{ObjectType: \"document\", Relation: \"parent\"},",
      "918:   },",
      "919:   {",
      "920:    name: \"userset specified as allowed type, but the relation is used in a TTU rewrite included in a union\",",
      "921:    model: &openfgapb.AuthorizationModel{",
      "922:     SchemaVersion: SchemaVersion1_1,",
      "923:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "924:      {",
      "925:       Type: \"user\",",
      "926:      },",
      "927:      {",
      "928:       Type: \"folder\",",
      "929:       Relations: map[string]*openfgapb.Userset{",
      "930:        \"parent\": This(),",
      "931:        \"viewer\": This(),",
      "932:       },",
      "933:       Metadata: &openfgapb.Metadata{",
      "934:        Relations: map[string]*openfgapb.RelationMetadata{",
      "935:         \"parent\": {",
      "936:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
      "937:           {",
      "938:            Type: \"folder\",",
      "939:           },",
      "940:          },",
      "941:         },",
      "942:         \"viewer\": {",
      "943:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
      "944:           {",
      "945:            Type: \"user\",",
      "946:           },",
      "947:          },",
      "948:         },",
      "949:        },",
      "950:       },",
      "951:      },",
      "952:      {",
      "953:       Type: \"document\",",
      "954:       Relations: map[string]*openfgapb.Userset{",
      "955:        \"parent\": This(),",
      "956:        \"viewer\": Union(TupleToUserset(\"parent\", \"viewer\"), This()),",
      "957:       },",
      "958:       Metadata: &openfgapb.Metadata{",
      "959:        Relations: map[string]*openfgapb.RelationMetadata{",
      "960:         \"parent\": {",
      "961:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
      "962:           {",
      "963:            Type:     \"folder\",",
      "964:            Relation: \"parent\", // this isn't allowed",
      "965:           },",
      "966:          },",
      "967:         },",
      "968:         \"viewer\": {",
      "969:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
      "970:           {",
      "971:            Type:     \"folder\",",
      "972:            Relation: \"parent\",",
      "973:           },",
      "974:           {",
      "975:            Type: \"user\",",
      "976:           },",
      "977:          },",
      "978:         },",
      "979:        },",
      "980:       },",
      "981:      },",
      "982:     },",
      "983:    },",
      "984:    err: &InvalidRelationError{ObjectType: \"document\", Relation: \"parent\"},",
      "985:   },",
      "",
      "---------------"
    ],
    "server/commands/check.go||server/commands/check.go": [
      "File: server/commands/check.go -> server/commands/check.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "463:   relation = rc.tk.GetRelation()",
      "464:  }",
      "468:  tracer := rc.tracer.AppendTupleToUserset().AppendString(tupleUtils.ToObjectRelationString(findTK.GetObject(), relation))",
      "469:  iter, err := rc.read(ctx, query.datastore, findTK)",
      "",
      "[Removed Lines]",
      "466:  findTK := tupleUtils.NewTupleKey(rc.tk.GetObject(), relation, \"\")",
      "",
      "[Added Lines]",
      "488:  findTK := tupleUtils.NewTupleKey(rc.tk.GetObject(), relation, \"\") //findTk=document:budget#parent@",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "490:    break // the user was resolved already, avoid launching extra lookups",
      "491:   }",
      "495:   if userObj == Wildcard {",
      "498:    query.logger.WarnWithContext(",
      "499:     ctx,",
      "501:     zap.String(\"store_id\", rc.store),",
      "502:     zap.String(\"authorization_model_id\", rc.modelID),",
      "503:     zap.String(\"object_type\", objectType),",
      "",
      "[Removed Lines]",
      "493:   userObj, userRel := tupleUtils.SplitObjectRelation(tuple.GetUser())",
      "496:    objectType, _ := tupleUtils.SplitObject(rc.tk.GetObject())",
      "500:     fmt.Sprintf(\"unexpected wildcard evaluated on tupleset relation '%s'\", relation),",
      "",
      "[Added Lines]",
      "515:   userObj, userRel := tupleUtils.SplitObjectRelation(tuple.GetUser()) // userObj=folder:budgets, userRel=\"\"",
      "517:   objectType, _ := tupleUtils.SplitObject(rc.tk.GetObject())",
      "523:     fmt.Sprintf(\"unexpected wildcard evaluated on tupleset relation '%s#%s'\", objectType, relation),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "509:    )",
      "510:   }",
      "512:   if !tupleUtils.IsValidObject(userObj) {",
      "513:    continue // TupleToUserset tuplesets should be of the form 'objectType:id' or 'objectType:id#relation' but are not guaranteed to be because it is neither a user or userset",
      "514:   }",
      "519:   if userRel == \"\" {",
      "525:   }",
      "527:   tupleKey := &openfgapb.TupleKey{",
      "533:   }",
      "534:   tracer := tracer.AppendString(tupleUtils.ToObjectRelationString(userObj, userRel))",
      "535:   nestedRC := rc.fork(tupleKey, tracer, false)",
      "",
      "[Removed Lines]",
      "516:   usersetRel := node.TupleToUserset.GetComputedUserset().GetRelation()",
      "520:    userRel = usersetRel",
      "521:   }",
      "523:   if userRel != usersetRel {",
      "524:    continue",
      "529:    Object:   userObj,",
      "530:    Relation: userRel,",
      "532:    User: rc.tk.GetUser(),",
      "",
      "[Added Lines]",
      "535:   if tupleUtils.UserSet == tupleUtils.GetUserTypeFromUser(tuple.GetUser()) {",
      "536:    query.logger.WarnWithContext(",
      "537:     ctx,",
      "538:     fmt.Sprintf(\"unexpected userset evaluated on tupleset relation '%s#%s'\", objectType, relation),",
      "539:     zap.String(\"store_id\", rc.store),",
      "540:     zap.String(\"authorization_model_id\", rc.modelID),",
      "541:     zap.String(\"object_type\", objectType),",
      "542:    )",
      "544:    return serverErrors.InvalidTuple(",
      "545:     fmt.Sprintf(\"unexpected userset evaluated on relation '%s#%s'\", tupleUtils.GetType(rc.tk.GetObject()), relation),",
      "546:     tupleUtils.NewTupleKey(tuple.GetObject(), relation, tuple.GetUser()),",
      "547:    )",
      "548:   }",
      "554:   usersetRel := node.TupleToUserset.GetComputedUserset().GetRelation() //reader",
      "557:    userRel = usersetRel // userRel=reader",
      "561:    Object:   userObj,         //folder:budgets",
      "562:    Relation: userRel,         //reader",
      "563:    User:     rc.tk.GetUser(), //anne",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "538:   go func(c chan<- *chanResolveResult) {",
      "539:    defer wg.Done()",
      "542:    if err == nil {",
      "543:     err = query.resolveNode(ctx, nestedRC, userset, typesys)",
      "544:    }",
      "",
      "[Removed Lines]",
      "541:    userset, err := query.getTypeDefinitionRelationUsersets(ctx, nestedRC)",
      "",
      "[Added Lines]",
      "572:    userset, err := query.getTypeDefinitionRelationUsersets(ctx, nestedRC) // folder:budgets#reader",
      "",
      "---------------"
    ],
    "server/commands/expand.go||server/commands/expand.go": [
      "File: server/commands/expand.go -> server/commands/expand.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "258:    continue",
      "259:   }",
      "261:   tObject, tRelation := tupleUtils.SplitObjectRelation(user)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "261:   userType := tupleUtils.GetUserTypeFromUser(user)",
      "262:   if userType == tupleUtils.UserSet {",
      "263:    return nil, serverErrors.InvalidTuple(",
      "264:     fmt.Sprintf(\"unexpected userset evaluated on relation '%s#%s'\", objectType, tupleset),",
      "265:     tupleUtils.NewTupleKey(targetObject, tupleset, user),",
      "266:    )",
      "267:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "265:    tRelation = userset.GetComputedUserset().GetRelation()",
      "266:   }",
      "272:   cs := &openfgapb.TupleKey{",
      "273:    Object:   tObject,",
      "274:    Relation: tRelation,",
      "",
      "[Removed Lines]",
      "268:   if tRelation != userset.GetComputedUserset().GetRelation() {",
      "269:    continue",
      "270:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "server/commands/write.go||server/commands/write.go": [
      "File: server/commands/write.go -> server/commands/write.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "84:    return serverErrors.HandleTupleValidateError(&tupleUtils.IndirectWriteError{Reason: IndirectWriteErrorReason, TupleKey: tk})",
      "85:   }",
      "87:   if err := c.validateTypesForTuple(authModel, tk); err != nil {",
      "88:    return err",
      "89:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "87:   if err := c.validateNoUsersetForRelationReferencedInTupleset(authModel, tk); err != nil {",
      "88:    return err",
      "89:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "103:  return nil",
      "104: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "110: func (c *WriteCommand) validateNoUsersetForRelationReferencedInTupleset(authModel *openfgapb.AuthorizationModel, tk *openfgapb.TupleKey) error {",
      "111:  if !tupleUtils.IsObjectRelation(tk.GetUser()) {",
      "112:   return nil",
      "113:  }",
      "115:  objType := tupleUtils.GetType(tk.GetObject())",
      "119:  ts := typesystem.New(authModel)",
      "120:  for _, arrayOfTtus := range ts.GetAllTupleToUsersetsDefinitions()[objType] {",
      "121:   for _, tupleToUserSetDef := range arrayOfTtus {",
      "122:    if tupleToUserSetDef.Tupleset.Relation == tk.Relation {",
      "123:     return serverErrors.InvalidTuple(fmt.Sprintf(\"Userset '%s' is not allowed to have relation '%s' with '%s'\", tk.User, tk.Relation, tk.Object), tk)",
      "124:    }",
      "125:   }",
      "126:  }",
      "128:  return nil",
      "129: }",
      "",
      "---------------"
    ],
    "server/test/check.go||server/test/check.go": [
      "File: server/test/check.go -> server/test/check.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "764:    },",
      "765:   },",
      "766:   {",
      "768:    typeDefinitions: []*openfgapb.TypeDefinition{",
      "769:     {",
      "770:      Type: \"repo\",",
      "",
      "[Removed Lines]",
      "767:    name: \"ExecuteReturnsAllowedForTupleToUserset\",",
      "",
      "[Added Lines]",
      "767:    name: \"Error if userset encountered in tupleset relation of a TTU definition\",",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "779:            Relation: \"manager\",",
      "780:           },",
      "781:           ComputedUserset: &openfgapb.ObjectRelation{",
      "783:            Relation: \"repo_admin\",",
      "784:           },",
      "785:          }}},",
      "",
      "[Removed Lines]",
      "782:            Object:   \"$TUPLE_USERSET_OBJECT\",",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "789:      },",
      "790:     },",
      "791:     {",
      "793:      Relations: map[string]*openfgapb.Userset{",
      "796:      },",
      "797:     },",
      "798:    },",
      "799:    tuples: []*openfgapb.TupleKey{",
      "800:     tuple.NewTupleKey(\"repo:openfga/canaveral\", \"manager\", \"org:openfga#repo_admin\"),",
      "802:    },",
      "803:    resolveNodeLimit: defaultResolveNodeLimit,",
      "804:    request: &openfgapb.CheckRequest{",
      "805:     TupleKey: tuple.NewTupleKey(\"repo:openfga/canaveral\", \"admin\", \"github|jose@openfga\"),",
      "806:     Trace:    true,",
      "807:    },",
      "812:   },",
      "813:   {",
      "814:    name: \"ExecuteCanResolveRecursiveComputedUserSets\",",
      "",
      "[Removed Lines]",
      "792:      Type: \"org\",",
      "795:       \"repo_admin\": {},",
      "801:     tuple.NewTupleKey(\"org:openfga\", \"repo_admin\", \"github|jose@openfga\"),",
      "808:    response: &openfgapb.CheckResponse{",
      "809:     Allowed:    true,",
      "810:     Resolution: \".union.1(tuple-to-userset).repo:openfga/canaveral#manager.org:openfga#repo_admin.(direct).\",",
      "811:    },",
      "",
      "[Added Lines]",
      "791:      Type: \"group\",",
      "793:       \"member\": typesystem.This(),",
      "799:     tuple.NewTupleKey(\"org:openfga\", \"repo_admin\", \"group:eng#member\"),",
      "800:     tuple.NewTupleKey(\"group:eng\", \"member\", \"github|jose@openfga\"),",
      "807:    err: serverErrors.InvalidTuple(",
      "808:     \"unexpected userset evaluated on relation 'repo#manager'\",",
      "809:     tuple.NewTupleKey(\"repo:openfga/canaveral\", \"manager\", \"org:openfga#repo_admin\"),",
      "810:    ),",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1288:     errors.New(\"unexpected rewrite on relation 'document#parent'\"),",
      "1289:    ),",
      "1290:   },",
      "1291:  }",
      "1293:  ctx := context.Background()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1290:   {",
      "1299:    name:             \"Fails if expanding the computed userset of a tupleToUserset rewrite\",",
      "1300:    resolveNodeLimit: defaultResolveNodeLimit,",
      "1301:    typeDefinitions: []*openfgapb.TypeDefinition{",
      "1302:     {",
      "1303:      Type: \"document\",",
      "1304:      Relations: map[string]*openfgapb.Userset{",
      "1305:       \"parent\": typesystem.This(),",
      "1306:       \"viewer\": typesystem.TupleToUserset(\"parent\", \"viewer\"),",
      "1307:      },",
      "1308:     },",
      "1309:     {",
      "1310:      Type: \"org\",",
      "1311:      Relations: map[string]*openfgapb.Userset{",
      "1312:       \"viewer\":   typesystem.This(),",
      "1313:       \"can_view\": typesystem.ComputedUserset(\"viewer\"),",
      "1314:      },",
      "1315:     },",
      "1316:    },",
      "1317:    tuples: []*openfgapb.TupleKey{",
      "1318:     tuple.NewTupleKey(\"org:x\", \"viewer\", \"org:y\"),",
      "1319:     tuple.NewTupleKey(\"document:1\", \"parent\", \"org:y#can_view\"),",
      "1320:     tuple.NewTupleKey(\"document:1\", \"parent\", \"org:z#can_view\"), //not relevant",
      "1321:    },",
      "1322:    request: &openfgapb.CheckRequest{",
      "1323:     TupleKey:         tuple.NewTupleKey(\"document:1\", \"viewer\", \"org:y\"),",
      "1324:     ContextualTuples: &openfgapb.ContextualTupleKeys{},",
      "1325:    },",
      "1326:    err: serverErrors.InvalidTuple(",
      "1327:     \"unexpected userset evaluated on relation 'document#parent'\",",
      "1328:     tuple.NewTupleKey(\"document:1\", \"parent\", \"org:y#can_view\"),",
      "1329:    ),",
      "1330:   },",
      "1331:   {",
      "1340:    name:             \"Fails if expanding the computed userset of a tupleToUserset rewrite\",",
      "1341:    resolveNodeLimit: defaultResolveNodeLimit,",
      "1342:    typeDefinitions: []*openfgapb.TypeDefinition{",
      "1343:     {",
      "1344:      Type: \"document\",",
      "1345:      Relations: map[string]*openfgapb.Userset{",
      "1346:       \"parent\": typesystem.This(),",
      "1347:       \"viewer\": typesystem.Union(",
      "1348:        typesystem.This(),",
      "1349:        typesystem.TupleToUserset(\"parent\", \"viewer\"),",
      "1350:       ),",
      "1351:      },",
      "1352:     },",
      "1353:    },",
      "1354:    tuples: []*openfgapb.TupleKey{",
      "1355:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#viewer\"),",
      "1356:     tuple.NewTupleKey(\"document:2\", \"viewer\", \"jon\"),",
      "1357:    },",
      "1358:    request: &openfgapb.CheckRequest{",
      "1359:     TupleKey:         tuple.NewTupleKey(\"document:1\", \"viewer\", \"org:y\"),",
      "1360:     ContextualTuples: &openfgapb.ContextualTupleKeys{},",
      "1361:    },",
      "1362:    err: serverErrors.InvalidTuple(",
      "1363:     \"unexpected userset evaluated on relation 'document#parent'\",",
      "1364:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#viewer\"),",
      "1365:    ),",
      "1366:   },",
      "",
      "---------------"
    ],
    "server/test/expand.go||server/test/expand.go": [
      "File: server/test/expand.go -> server/test/expand.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "706:     },",
      "707:    },",
      "708:   },",
      "709:  }",
      "711:  require := require.New(t)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "709:   {",
      "710:    name: \"Tuple involving userset that is not involved in TTU rewrite\",",
      "711:    typeDefinitions: []*openfgapb.TypeDefinition{",
      "712:     {",
      "713:      Type: \"document\",",
      "714:      Relations: map[string]*openfgapb.Userset{",
      "715:       \"parent\": typesystem.This(),",
      "716:       \"editor\": typesystem.This(),",
      "717:      },",
      "718:     },",
      "719:    },",
      "720:    tuples: []*openfgapb.TupleKey{",
      "721:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#editor\"),",
      "722:    },",
      "723:    request: &openfgapb.ExpandRequest{",
      "724:     TupleKey: tuple.NewTupleKey(\"document:1\", \"parent\", \"\"),",
      "725:    },",
      "726:    expected: &openfgapb.ExpandResponse{",
      "727:     Tree: &openfgapb.UsersetTree{",
      "728:      Root: &openfgapb.UsersetTree_Node{",
      "729:       Name: \"document:1#parent\",",
      "730:       Value: &openfgapb.UsersetTree_Node_Leaf{",
      "731:        Leaf: &openfgapb.UsersetTree_Leaf{",
      "732:         Value: &openfgapb.UsersetTree_Leaf_Users{",
      "733:          Users: &openfgapb.UsersetTree_Users{",
      "734:           Users: []string{\"document:2#editor\"},",
      "735:          },",
      "736:         },",
      "737:        },",
      "738:       },",
      "739:      },",
      "740:     },",
      "741:    },",
      "742:   },",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "858:     errors.Errorf(\"unexpected rewrite on relation '%s#%s'\", \"document\", \"parent\"),",
      "859:    ),",
      "860:   },",
      "861:  }",
      "863:  require := require.New(t)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "895:   {",
      "896:    name: \"Tuple involving userset returns error if it is referenced in a TTU rewrite\",",
      "897:    typeDefinitions: []*openfgapb.TypeDefinition{",
      "898:     {",
      "899:      Type: \"folder\",",
      "900:      Relations: map[string]*openfgapb.Userset{",
      "901:       \"viewer\": typesystem.This(),",
      "902:      },",
      "903:     },",
      "904:     {",
      "905:      Type: \"document\",",
      "906:      Relations: map[string]*openfgapb.Userset{",
      "907:       \"parent\": typesystem.This(),",
      "908:       \"editor\": typesystem.This(),",
      "909:       \"viewer\": typesystem.TupleToUserset(\"parent\", \"viewer\"),",
      "910:      },",
      "911:     },",
      "912:    },",
      "913:    tuples: []*openfgapb.TupleKey{",
      "914:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#editor\"),",
      "915:    },",
      "916:    request: &openfgapb.ExpandRequest{",
      "917:     TupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"\"),",
      "918:    },",
      "919:    expected: serverErrors.InvalidTuple(",
      "920:     \"unexpected userset evaluated on relation 'document#parent'\",",
      "921:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#editor\"),",
      "922:    ),",
      "923:   },",
      "924:   {",
      "925:    name: \"Tuple involving userset returns error if same ComputedUserset involved in TTU rewrite\",",
      "926:    typeDefinitions: []*openfgapb.TypeDefinition{",
      "927:     {",
      "928:      Type: \"document\",",
      "929:      Relations: map[string]*openfgapb.Userset{",
      "930:       \"parent\": typesystem.This(),",
      "931:       \"viewer\": typesystem.Union(",
      "932:        typesystem.This(),",
      "933:        typesystem.TupleToUserset(\"parent\", \"viewer\"),",
      "934:       ),",
      "935:      },",
      "936:     },",
      "937:    },",
      "938:    tuples: []*openfgapb.TupleKey{",
      "939:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#viewer\"),",
      "940:     tuple.NewTupleKey(\"document:2\", \"viewer\", \"jon\"),",
      "941:    },",
      "942:    request: &openfgapb.ExpandRequest{",
      "943:     TupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"\"),",
      "944:    },",
      "945:    expected: serverErrors.InvalidTuple(",
      "946:     \"unexpected userset evaluated on relation 'document#parent'\",",
      "947:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#viewer\"),",
      "948:    ),",
      "949:   },",
      "",
      "---------------"
    ],
    "server/test/write.go||server/test/write.go": [
      "File: server/test/write.go -> server/test/write.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "1268:   },",
      "1269:   err: serverErrors.NewInternalError(\"invalid authorization model\", errors.New(\"invalid authorization model\")),",
      "1270:  },",
      "1271: }",
      "1273: func TestWriteCommand(t *testing.T, datastore storage.OpenFGADatastore) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1272:  {",
      "1273:   _name: \"Write fails if a. schema version is 1.0 b. user is a userset c. relation is referenced in a tupleset of a tupleToUserset relation\",",
      "1274:   model: &openfgapb.AuthorizationModel{",
      "1275:    Id:            ulid.Make().String(),",
      "1276:    SchemaVersion: typesystem.SchemaVersion1_0,",
      "1277:    TypeDefinitions: []*openfgapb.TypeDefinition{",
      "1278:     {",
      "1279:      Type: \"folder\",",
      "1280:      Relations: map[string]*openfgapb.Userset{",
      "1281:       \"owner\": typesystem.This(),",
      "1282:       \"admin\": typesystem.This(),",
      "1283:      },",
      "1284:     },",
      "1285:     {",
      "1286:      Type: \"document\",",
      "1287:      Relations: map[string]*openfgapb.Userset{",
      "1288:       \"parent\":   typesystem.This(),",
      "1289:       \"can_view\": typesystem.TupleToUserset(\"parent\", \"owner\"), //owner from parent",
      "1290:      },",
      "1291:     },",
      "1292:    },",
      "1293:   },",
      "1294:   request: &openfgapb.WriteRequest{",
      "1295:    Writes: &openfgapb.TupleKeys{TupleKeys: []*openfgapb.TupleKey{",
      "1296:     tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
      "1297:    }},",
      "1298:   },",
      "1299:   err: serverErrors.InvalidTuple(\"Userset 'folder:budgets#admin' is not allowed to have relation 'parent' with 'document:budget'\",",
      "1300:    tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
      "1301:   ),",
      "1302:  },",
      "1303:  {",
      "1304:   _name: \"Write fails if a. schema version is 1.0 b. user is a userset c. relation is referenced in a tupleset of a tupleToUserset relation (defined as union)\",",
      "1305:   model: &openfgapb.AuthorizationModel{",
      "1306:    Id:            ulid.Make().String(),",
      "1307:    SchemaVersion: typesystem.SchemaVersion1_0,",
      "1308:    TypeDefinitions: []*openfgapb.TypeDefinition{",
      "1309:     {",
      "1310:      Type: \"folder\",",
      "1311:      Relations: map[string]*openfgapb.Userset{",
      "1312:       \"owner\": typesystem.This(),",
      "1313:       \"admin\": typesystem.This(),",
      "1314:      },",
      "1315:     },",
      "1316:     {",
      "1317:      Type: \"document\",",
      "1318:      Relations: map[string]*openfgapb.Userset{",
      "1319:       \"parent\": typesystem.This(),",
      "1320:       \"can_view\": typesystem.Union(",
      "1321:        typesystem.TupleToUserset(\"parent\", \"owner\"), //owner from parent",
      "1322:        typesystem.TupleToUserset(\"parent\", \"admin\"), //admin from parent",
      "1323:       ),",
      "1324:      },",
      "1325:     },",
      "1326:    },",
      "1327:   },",
      "1328:   request: &openfgapb.WriteRequest{",
      "1329:    Writes: &openfgapb.TupleKeys{TupleKeys: []*openfgapb.TupleKey{",
      "1330:     tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
      "1331:    }},",
      "1332:   },",
      "1333:   err: serverErrors.InvalidTuple(\"Userset 'folder:budgets#admin' is not allowed to have relation 'parent' with 'document:budget'\",",
      "1334:    tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
      "1335:   ),",
      "1336:  },",
      "1337:  {",
      "1338:   _name: \"Write fails if a. schema version is 1.0 b. user is a userset c. relation is referenced in a tupleset of a tupleToUserset relation (defined as intersection)\",",
      "1339:   model: &openfgapb.AuthorizationModel{",
      "1340:    Id:            ulid.Make().String(),",
      "1341:    SchemaVersion: typesystem.SchemaVersion1_0,",
      "1342:    TypeDefinitions: []*openfgapb.TypeDefinition{",
      "1343:     {",
      "1344:      Type: \"folder\",",
      "1345:      Relations: map[string]*openfgapb.Userset{",
      "1346:       \"owner\": typesystem.This(),",
      "1347:       \"admin\": typesystem.This(),",
      "1348:      },",
      "1349:     },",
      "1350:     {",
      "1351:      Type: \"document\",",
      "1352:      Relations: map[string]*openfgapb.Userset{",
      "1353:       \"parent\": typesystem.This(),",
      "1354:       \"can_view\": typesystem.Intersection(",
      "1355:        typesystem.TupleToUserset(\"parent\", \"owner\"), //owner from parent",
      "1356:        typesystem.TupleToUserset(\"parent\", \"admin\"), //admin from parent",
      "1357:       ),",
      "1358:      },",
      "1359:     },",
      "1360:    },",
      "1361:   },",
      "1362:   request: &openfgapb.WriteRequest{",
      "1363:    Writes: &openfgapb.TupleKeys{TupleKeys: []*openfgapb.TupleKey{",
      "1364:     tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
      "1365:    }},",
      "1366:   },",
      "1367:   err: serverErrors.InvalidTuple(\"Userset 'folder:budgets#admin' is not allowed to have relation 'parent' with 'document:budget'\",",
      "1368:    tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
      "1369:   ),",
      "1370:  },",
      "1371:  {",
      "1372:   _name: \"Write fails if a. schema version is 1.0 b. user is a userset c. relation is referenced in a tupleset of a tupleToUserset relation (defined as difference)\",",
      "1373:   model: &openfgapb.AuthorizationModel{",
      "1374:    Id:            ulid.Make().String(),",
      "1375:    SchemaVersion: typesystem.SchemaVersion1_0,",
      "1376:    TypeDefinitions: []*openfgapb.TypeDefinition{",
      "1377:     {",
      "1378:      Type: \"folder\",",
      "1379:      Relations: map[string]*openfgapb.Userset{",
      "1380:       \"owner\": typesystem.This(),",
      "1381:       \"admin\": typesystem.This(),",
      "1382:      },",
      "1383:     },",
      "1384:     {",
      "1385:      Type: \"document\",",
      "1386:      Relations: map[string]*openfgapb.Userset{",
      "1387:       \"parent\": typesystem.This(),",
      "1388:       \"can_view\": typesystem.Difference(",
      "1389:        typesystem.TupleToUserset(\"parent\", \"owner\"), //owner from parent",
      "1390:        typesystem.TupleToUserset(\"parent\", \"admin\"), //admin from parent",
      "1391:       ),",
      "1392:      },",
      "1393:     },",
      "1394:    },",
      "1395:   },",
      "1396:   request: &openfgapb.WriteRequest{",
      "1397:    Writes: &openfgapb.TupleKeys{TupleKeys: []*openfgapb.TupleKey{",
      "1398:     tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
      "1399:    }},",
      "1400:   },",
      "1401:   err: serverErrors.InvalidTuple(\"Userset 'folder:budgets#admin' is not allowed to have relation 'parent' with 'document:budget'\",",
      "1402:    tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
      "1403:   ),",
      "1404:  },",
      "1405:  {",
      "1406:   _name: \"Write succeeds if a. schema version is 1.0 b. user is a userset c. relation is referenced in a tupleset of a tupleToUserset relation of another type\",",
      "1407:   model: &openfgapb.AuthorizationModel{",
      "1408:    Id:            ulid.Make().String(),",
      "1409:    SchemaVersion: typesystem.SchemaVersion1_0,",
      "1410:    TypeDefinitions: []*openfgapb.TypeDefinition{",
      "1411:     {",
      "1412:      Type: \"folder\",",
      "1413:      Relations: map[string]*openfgapb.Userset{",
      "1414:       \"owner\": typesystem.This(),",
      "1415:       \"parent\": typesystem.Union( // let's confuse the code. if this were defined in 'document' type, it would fail",
      "1416:        typesystem.TupleToUserset(\"parent\", \"owner\"),",
      "1417:       ),",
      "1418:      },",
      "1419:     },",
      "1420:     {",
      "1421:      Type: \"document\",",
      "1422:      Relations: map[string]*openfgapb.Userset{",
      "1423:       \"owner\":  typesystem.This(),",
      "1424:       \"parent\": typesystem.This(),",
      "1425:      },",
      "1426:     },",
      "1427:    },",
      "1428:   },",
      "1429:   request: &openfgapb.WriteRequest{",
      "1430:    Writes: &openfgapb.TupleKeys{TupleKeys: []*openfgapb.TupleKey{",
      "1431:     tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
      "1432:    }},",
      "1433:   },",
      "1434:  },",
      "",
      "---------------"
    ],
    "server/test/write_authzmodel.go||server/test/write_authzmodel.go": [
      "File: server/test/write_authzmodel.go -> server/test/write_authzmodel.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "35:   err     error",
      "36:  }{",
      "37:   {",
      "39:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "40:     StoreId: storeID,",
      "41:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "38:    name: \"succeeds\",",
      "",
      "[Added Lines]",
      "38:    name: \"succeeds with a simple model\",",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "49:    },",
      "50:   },",
      "51:   {",
      "53:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "54:     StoreId: \"somestoreid\",",
      "55:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "52:    name: \"succeeds part II\",",
      "",
      "[Added Lines]",
      "52:    name: \"succeeds with a complex model\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "112:    err: serverErrors.ExceededEntityLimit(\"type definitions in an authorization model\", datastore.MaxTypesInTypeDefinition()),",
      "113:   },",
      "114:   {",
      "116:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "117:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "118:      {",
      "",
      "[Removed Lines]",
      "115:    name: \"empty relations is valid\",",
      "",
      "[Added Lines]",
      "115:    name: \"succeeds with empty relations\",",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "122:    },",
      "123:   },",
      "124:   {",
      "126:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "127:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "128:      {",
      "",
      "[Removed Lines]",
      "125:    name: \"zero length relations is valid\",",
      "",
      "[Added Lines]",
      "125:    name: \"succeeds with zero length relations\",",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "133:    },",
      "134:   },",
      "135:   {",
      "137:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "138:     StoreId: storeID,",
      "139:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "136:    name: \"ExecuteWriteFailsIfSameTypeTwice\",",
      "",
      "[Added Lines]",
      "136:    name: \"fails if the same type appears twice\",",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "154:    err: serverErrors.InvalidAuthorizationModelInput(typesystem.ErrDuplicateTypes),",
      "155:   },",
      "156:   {",
      "158:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "159:     StoreId: storeID,",
      "160:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "157:    name: \"ExecuteWriteFailsIfEmptyRewrites\",",
      "",
      "[Added Lines]",
      "157:    name: \"fails if a relation is not defined\",",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "169:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{ObjectType: \"repo\", Relation: \"owner\"}),",
      "170:   },",
      "171:   {",
      "173:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "174:     StoreId: storeID,",
      "175:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "172:    name: \"ExecuteWriteFailsIfUnknownRelationInComputedUserset\",",
      "",
      "[Added Lines]",
      "172:    name: \"fails if unknown relation in computed userset definition\",",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "191:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
      "192:   },",
      "193:   {",
      "195:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "196:     StoreId: storeID,",
      "197:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "194:    name: \"ExecuteWriteFailsIfUnknownRelationInTupleToUserset\",",
      "",
      "[Added Lines]",
      "194:    name: \"fails if unknown relation in tuple to userset definition (computed userset component)\",",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "218:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"\", Relation: \"owner\"}),",
      "219:   },",
      "220:   {",
      "222:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "223:     StoreId: storeID,",
      "224:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "221:    name: \"ExecuteWriteFailsIfUnknownRelationInUnion\",",
      "",
      "[Added Lines]",
      "221:    name: \"fails if unknown relation in union\",",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "253:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
      "254:   },",
      "255:   {",
      "257:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "258:     StoreId: storeID,",
      "259:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "256:    name: \"ExecuteWriteFailsIfUnknownRelationInDifferenceBaseArgument\",",
      "",
      "[Added Lines]",
      "256:    name: \"fails if unknown relation in difference base argument\",",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "288:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
      "289:   },",
      "290:   {",
      "292:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "293:     StoreId: storeID,",
      "294:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "291:    name: \"ExecuteWriteFailsIfUnknownRelationInDifferenceSubtractArgument\",",
      "",
      "[Added Lines]",
      "291:    name: \"fails if unknown relation in difference subtract argument\",",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "323:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
      "324:   },",
      "325:   {",
      "327:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "328:     StoreId: storeID,",
      "329:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "326:    name: \"ExecuteWriteFailsIfUnknownRelationInTupleToUsersetTupleset\",",
      "",
      "[Added Lines]",
      "326:    name: \"fails if unknown relation in tuple to userset definition (tupleset component)\",",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "352:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
      "353:   },",
      "354:   {",
      "385:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "386:     StoreId: storeID,",
      "387:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "355:    name: \"ExecuteWriteFailsIfUnknownRelationInTupleToUsersetComputedUserset\",",
      "356:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "357:     StoreId: storeID,",
      "358:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "359:      {",
      "360:       Type: \"repo\",",
      "361:       Relations: map[string]*openfgapb.Userset{",
      "362:        \"writer\": {",
      "363:         Userset: &openfgapb.Userset_This{},",
      "364:        },",
      "365:        \"viewer\": {",
      "366:         Userset: &openfgapb.Userset_TupleToUserset{",
      "367:          TupleToUserset: &openfgapb.TupleToUserset{",
      "368:           Tupleset: &openfgapb.ObjectRelation{",
      "369:            Relation: \"writer\",",
      "370:           },",
      "371:           ComputedUserset: &openfgapb.ObjectRelation{",
      "372:            Relation: \"owner\",",
      "373:           },",
      "374:          },",
      "375:         },",
      "376:        },",
      "377:       },",
      "378:      },",
      "379:     },",
      "380:    },",
      "381:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"\", Relation: \"owner\"}),",
      "382:   },",
      "383:   {",
      "384:    name: \"ExecuteWriteFailsIfTupleToUsersetReferencesUnknownRelation\",",
      "",
      "[Added Lines]",
      "355:    name: \"fails if unknown relation in computed userset\",",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "417:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"bar\", Relation: \"writer\"}),",
      "418:   },",
      "419:   {",
      "421:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "422:     StoreId: storeID,",
      "423:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "420:    name: \"ExecuteWriteFailsIfUnknownRelationInIntersection\",",
      "",
      "[Added Lines]",
      "391:    name: \"fails if unknown relation in intersection\",",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "450:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
      "451:   },",
      "452:   {",
      "454:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "455:     StoreId: storeID,",
      "456:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "453:    name: \"ExecuteWriteFailsIfDifferenceIncludesSameRelationTwice\",",
      "",
      "[Added Lines]",
      "424:    name: \"fails if difference includes same relation twice\",",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "480:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{ObjectType: \"repo\", Relation: \"viewer\"}),",
      "481:   },",
      "482:   {",
      "484:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "485:     StoreId: storeID,",
      "486:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "483:    name: \"ExecuteWriteFailsIfUnionIncludesSameRelationTwice\",",
      "",
      "[Added Lines]",
      "454:    name: \"fails if union includes same relation twice\",",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "507:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{ObjectType: \"repo\", Relation: \"viewer\"}),",
      "508:   },",
      "509:   {",
      "511:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "512:     StoreId: storeID,",
      "513:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "510:    name: \"ExecuteWriteFailsIfIntersectionIncludesSameRelationTwice\",",
      "",
      "[Added Lines]",
      "481:    name: \"fails if intersection includes same relation twice\",",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "533:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{ObjectType: \"repo\", Relation: \"viewer\"}),",
      "534:   },",
      "535:   {",
      "537:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "538:     StoreId: storeID,",
      "539:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "536:    name: \"Union Rewrite Contains Repeated Definitions\",",
      "",
      "[Added Lines]",
      "507:    name: \"Success if Union Rewrite Contains Repeated Definitions\",",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "556:    },",
      "557:   },",
      "558:   {",
      "560:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "561:     StoreId: storeID,",
      "562:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "559:    name: \"Intersection Rewrite Contains Repeated Definitions\",",
      "",
      "[Added Lines]",
      "530:    name: \"Success if Intersection Rewrite Contains Repeated Definitions\",",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "579:    },",
      "580:   },",
      "581:   {",
      "583:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "584:     StoreId: storeID,",
      "585:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "582:    name: \"Exclusion Rewrite Contains Repeated Definitions\",",
      "",
      "[Added Lines]",
      "553:    name: \"Success if Exclusion Rewrite Contains Repeated Definitions\",",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "602:    },",
      "603:   },",
      "604:   {",
      "606:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "607:     StoreId: storeID,",
      "608:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "605:    name: \"Tupleset relation involves ComputedUserset rewrite\",",
      "",
      "[Added Lines]",
      "576:    name: \"Fails if Tupleset relation involves ComputedUserset rewrite\",",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "621:    ),",
      "622:   },",
      "623:   {",
      "625:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "626:     StoreId: storeID,",
      "627:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "624:    name: \"Tupleset relation involves Union rewrite\",",
      "",
      "[Added Lines]",
      "595:    name: \"Fails if Tupleset relation involves Union rewrite\",",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "640:    ),",
      "641:   },",
      "642:   {",
      "644:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "645:     StoreId: storeID,",
      "646:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "643:    name: \"Tupleset relation involves Intersection rewrite\",",
      "",
      "[Added Lines]",
      "614:    name: \"Fails if Tupleset relation involves Intersection rewrite\",",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "659:    ),",
      "660:   },",
      "661:   {",
      "663:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "664:     StoreId: storeID,",
      "665:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "662:    name: \"Tupleset relation involves Exclusion rewrite\",",
      "",
      "[Added Lines]",
      "633:    name: \"Fails if Tupleset relation involves Exclusion rewrite\",",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "678:    ),",
      "679:   },",
      "680:   {",
      "682:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "683:     StoreId: storeID,",
      "684:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "681:    name: \"Tupleset relation involves TupleToUserset rewrite\",",
      "",
      "[Added Lines]",
      "652:    name: \"Fails if Tupleset relation involves TupleToUserset rewrite\",",
      "",
      "---------------"
    ],
    "server/validation/validation.go||server/validation/validation.go": [
      "File: server/validation/validation.go -> server/validation/validation.go"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "89554e8b6a0fb5eca0101bdd9fed3c7d944ebed9",
      "candidate_info": {
        "commit_hash": "89554e8b6a0fb5eca0101bdd9fed3c7d944ebed9",
        "repo": "openfga/openfga",
        "commit_url": "https://github.com/openfga/openfga/commit/89554e8b6a0fb5eca0101bdd9fed3c7d944ebed9",
        "files": [
          "pkg/server/commands/write_authzmodel.go",
          "pkg/server/test/write_authzmodel.go",
          "pkg/typesystem/typesystem.go",
          "pkg/typesystem/typesystem_test.go",
          "tests/check/check_test.go",
          "tests/model/write_model_test.go",
          "tests/oldcheck/check_test.go",
          "tests/tests.go"
        ],
        "message": "chore: add model validation tests (#453)\n\nCo-authored-by: Jonathan Whitaker <jon.b.whitaker@gmail.com>",
        "before_after_code_files": [
          "pkg/server/commands/write_authzmodel.go||pkg/server/commands/write_authzmodel.go",
          "pkg/server/test/write_authzmodel.go||pkg/server/test/write_authzmodel.go",
          "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go",
          "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go",
          "tests/check/check_test.go||tests/check/check_test.go",
          "tests/model/write_model_test.go||tests/model/write_model_test.go",
          "tests/oldcheck/check_test.go||tests/oldcheck/check_test.go",
          "tests/tests.go||tests/tests.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go",
            "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go"
          ],
          "candidate": [
            "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go",
            "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/server/commands/write_authzmodel.go||pkg/server/commands/write_authzmodel.go": [
          "File: pkg/server/commands/write_authzmodel.go -> pkg/server/commands/write_authzmodel.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   TypeDefinitions: req.GetTypeDefinitions(),",
          "47:  }",
          "50:  if err != nil {",
          "51:   return nil, serverErrors.InvalidAuthorizationModelInput(err)",
          "52:  }",
          "",
          "[Removed Lines]",
          "49:  err := typesystem.Validate(model)",
          "",
          "[Added Lines]",
          "49:  _, err := typesystem.New(model).Validate()",
          "",
          "---------------"
        ],
        "pkg/server/test/write_authzmodel.go||pkg/server/test/write_authzmodel.go": [
          "File: pkg/server/test/write_authzmodel.go -> pkg/server/test/write_authzmodel.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:   request *openfgapb.WriteAuthorizationModelRequest",
          "35:   err     error",
          "36:  }{",
          "106:   {",
          "107:    name: \"fails_if_too_many_types\",",
          "108:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "",
          "[Removed Lines]",
          "37:   {",
          "38:    name: \"succeeds_with_a_simple_model\",",
          "39:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "40:     StoreId: storeID,",
          "41:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "42:      {",
          "43:       Type: \"repo\",",
          "44:       Relations: map[string]*openfgapb.Userset{",
          "45:        \"admin\": {Userset: &openfgapb.Userset_This{}},",
          "46:       },",
          "47:      },",
          "48:     },",
          "49:    },",
          "50:   },",
          "51:   {",
          "52:    name: \"succeeds_with_a_complex_model\",",
          "53:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "54:     StoreId: \"somestoreid\",",
          "55:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "56:      {",
          "57:       Type: \"group\",",
          "58:       Relations: map[string]*openfgapb.Userset{",
          "59:        \"member\": {Userset: &openfgapb.Userset_This{}},",
          "60:       },",
          "61:      },",
          "62:      {",
          "63:       Type: \"document\",",
          "64:       Relations: map[string]*openfgapb.Userset{",
          "65:        \"owner\": {Userset: &openfgapb.Userset_This{}},",
          "66:        \"reader\": {",
          "67:         Userset: &openfgapb.Userset_Union{",
          "68:          Union: &openfgapb.Usersets{",
          "69:           Child: []*openfgapb.Userset{",
          "70:            {",
          "71:             Userset: &openfgapb.Userset_This{},",
          "72:            },",
          "73:            {",
          "74:             Userset: &openfgapb.Userset_ComputedUserset{",
          "75:              ComputedUserset: &openfgapb.ObjectRelation{Relation: \"writer\"},",
          "76:             },",
          "77:            },",
          "78:           },",
          "79:          },",
          "80:         },",
          "81:        },",
          "82:        \"writer\": {",
          "83:         Userset: &openfgapb.Userset_Union{",
          "84:          Union: &openfgapb.Usersets{",
          "85:           Child: []*openfgapb.Userset{",
          "86:            {",
          "87:             Userset: &openfgapb.Userset_This{},",
          "88:            },",
          "89:            {",
          "90:             Userset: &openfgapb.Userset_TupleToUserset{",
          "91:              TupleToUserset: &openfgapb.TupleToUserset{",
          "92:               Tupleset:        &openfgapb.ObjectRelation{Relation: \"owner\"},",
          "93:               ComputedUserset: &openfgapb.ObjectRelation{Relation: \"member\"},",
          "94:              },",
          "95:             },",
          "96:            },",
          "97:           },",
          "98:          },",
          "99:         },",
          "100:        },",
          "101:       },",
          "102:      },",
          "103:     },",
          "104:    },",
          "105:   },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:    },",
          "112:    err: serverErrors.ExceededEntityLimit(\"type definitions in an authorization model\", datastore.MaxTypesPerAuthorizationModel()),",
          "113:   },",
          "156:   {",
          "157:    name: \"fails_if_a_relation_is_not_defined\",",
          "158:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "",
          "[Removed Lines]",
          "114:   {",
          "115:    name: \"succeeds_with_empty_relations\",",
          "116:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "117:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "118:      {",
          "119:       Type: \"repo\",",
          "120:      },",
          "121:     },",
          "122:    },",
          "123:   },",
          "124:   {",
          "125:    name: \"succeeds_with_zero_length_relations\",",
          "126:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "127:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "128:      {",
          "129:       Type:      \"repo\",",
          "130:       Relations: map[string]*openfgapb.Userset{},",
          "131:      },",
          "132:     },",
          "133:    },",
          "134:   },",
          "135:   {",
          "136:    name: \"fails_if_the_same_type_appears_twice\",",
          "137:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "138:     StoreId: storeID,",
          "139:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "140:      {",
          "141:       Type: \"repo\",",
          "142:       Relations: map[string]*openfgapb.Userset{",
          "143:        \"admin\": {Userset: &openfgapb.Userset_This{}},",
          "144:       },",
          "145:      },",
          "146:      {",
          "147:       Type: \"repo\",",
          "148:       Relations: map[string]*openfgapb.Userset{",
          "149:        \"admin\": {Userset: &openfgapb.Userset_This{}},",
          "150:       },",
          "151:      },",
          "152:     },",
          "153:    },",
          "154:    err: serverErrors.InvalidAuthorizationModelInput(typesystem.ErrDuplicateTypes),",
          "155:   },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168:    },",
          "169:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{ObjectType: \"repo\", Relation: \"owner\"}),",
          "170:   },",
          "670:   {",
          "671:    name: \"Fails_if_type_info_metadata_is_omitted_in_1.1_model\",",
          "672:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "",
          "[Removed Lines]",
          "171:   {",
          "172:    name: \"fails_if_unknown_relation_in_computed_userset_definition\",",
          "173:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "174:     StoreId: storeID,",
          "175:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "176:      {",
          "177:       Type: \"repo\",",
          "178:       Relations: map[string]*openfgapb.Userset{",
          "179:        \"writer\": {",
          "180:         Userset: &openfgapb.Userset_ComputedUserset{",
          "181:          ComputedUserset: &openfgapb.ObjectRelation{",
          "182:           Object:   \"\",",
          "183:           Relation: \"owner\",",
          "184:          },",
          "185:         },",
          "186:        },",
          "187:       },",
          "188:      },",
          "189:     },",
          "190:    },",
          "191:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
          "192:   },",
          "193:   {",
          "194:    name: \"fails_if_unknown_relation_in_tuple_to_userset_definition_(computed_userset_component)\",",
          "195:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "196:     StoreId: storeID,",
          "197:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "198:      {",
          "199:       Type: \"repo\",",
          "200:       Relations: map[string]*openfgapb.Userset{",
          "201:        \"writer\": {Userset: &openfgapb.Userset_This{}},",
          "202:        \"viewer\": {",
          "203:         Userset: &openfgapb.Userset_TupleToUserset{",
          "204:          TupleToUserset: &openfgapb.TupleToUserset{",
          "205:           Tupleset: &openfgapb.ObjectRelation{",
          "206:            Relation: \"writer\",",
          "207:           },",
          "208:           ComputedUserset: &openfgapb.ObjectRelation{",
          "209:            Relation: \"owner\",",
          "210:           },",
          "211:          },",
          "212:         },",
          "213:        },",
          "214:       },",
          "215:      },",
          "216:     },",
          "217:    },",
          "218:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"\", Relation: \"owner\"}),",
          "219:   },",
          "220:   {",
          "221:    name: \"fails_if_unknown_relation_in_union\",",
          "222:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "223:     StoreId: storeID,",
          "224:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "225:      {",
          "226:       Type: \"repo\",",
          "227:       Relations: map[string]*openfgapb.Userset{",
          "228:        \"writer\": {",
          "229:         Userset: &openfgapb.Userset_This{},",
          "230:        },",
          "231:        \"viewer\": {",
          "232:         Userset: &openfgapb.Userset_Union{",
          "233:          Union: &openfgapb.Usersets{",
          "234:           Child: []*openfgapb.Userset{",
          "235:            {",
          "236:             Userset: &openfgapb.Userset_This{},",
          "237:            },",
          "238:            {",
          "239:             Userset: &openfgapb.Userset_ComputedUserset{",
          "240:              ComputedUserset: &openfgapb.ObjectRelation{",
          "241:               Relation: \"owner\",",
          "242:              },",
          "243:             },",
          "244:            },",
          "245:           },",
          "246:          },",
          "247:         },",
          "248:        },",
          "249:       },",
          "250:      },",
          "251:     },",
          "252:    },",
          "253:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
          "254:   },",
          "255:   {",
          "256:    name: \"fails_if_unknown_relation_in_difference_base_argument\",",
          "257:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "258:     StoreId: storeID,",
          "259:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "260:      {",
          "261:       Type: \"repo\",",
          "262:       Relations: map[string]*openfgapb.Userset{",
          "263:        \"writer\": {Userset: &openfgapb.Userset_This{}},",
          "264:        \"viewer\": {",
          "265:         Userset: &openfgapb.Userset_Difference{",
          "266:          Difference: &openfgapb.Difference{",
          "267:           Base: &openfgapb.Userset{",
          "268:            Userset: &openfgapb.Userset_ComputedUserset{",
          "269:             ComputedUserset: &openfgapb.ObjectRelation{",
          "270:              Relation: \"writer\",",
          "271:             },",
          "272:            },",
          "273:           },",
          "274:           Subtract: &openfgapb.Userset{",
          "275:            Userset: &openfgapb.Userset_ComputedUserset{",
          "276:             ComputedUserset: &openfgapb.ObjectRelation{",
          "277:              Relation: \"owner\",",
          "278:             },",
          "279:            },",
          "280:           },",
          "281:          },",
          "282:         },",
          "283:        },",
          "284:       },",
          "285:      },",
          "286:     },",
          "287:    },",
          "288:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
          "289:   },",
          "290:   {",
          "291:    name: \"fails_if_unknown_relation_in_difference_subtract_argument\",",
          "292:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "293:     StoreId: storeID,",
          "294:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "295:      {",
          "296:       Type: \"repo\",",
          "297:       Relations: map[string]*openfgapb.Userset{",
          "298:        \"writer\": {Userset: &openfgapb.Userset_This{}},",
          "299:        \"viewer\": {",
          "300:         Userset: &openfgapb.Userset_Difference{",
          "301:          Difference: &openfgapb.Difference{",
          "302:           Base: &openfgapb.Userset{",
          "303:            Userset: &openfgapb.Userset_ComputedUserset{",
          "304:             ComputedUserset: &openfgapb.ObjectRelation{",
          "305:              Relation: \"owner\",",
          "306:             },",
          "307:            },",
          "308:           },",
          "309:           Subtract: &openfgapb.Userset{",
          "310:            Userset: &openfgapb.Userset_ComputedUserset{",
          "311:             ComputedUserset: &openfgapb.ObjectRelation{",
          "312:              Relation: \"writer\",",
          "313:             },",
          "314:            },",
          "315:           },",
          "316:          },",
          "317:         },",
          "318:        },",
          "319:       },",
          "320:      },",
          "321:     },",
          "322:    },",
          "323:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
          "324:   },",
          "325:   {",
          "326:    name: \"fails_if_unknown_relation_in_tuple_to_userset_definition_(tupleset_component)\",",
          "327:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "328:     StoreId: storeID,",
          "329:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "330:      {",
          "331:       Type: \"repo\",",
          "332:       Relations: map[string]*openfgapb.Userset{",
          "333:        \"writer\": {",
          "334:         Userset: &openfgapb.Userset_This{},",
          "335:        },",
          "336:        \"viewer\": {",
          "337:         Userset: &openfgapb.Userset_TupleToUserset{",
          "338:          TupleToUserset: &openfgapb.TupleToUserset{",
          "339:           Tupleset: &openfgapb.ObjectRelation{",
          "340:            Relation: \"owner\",",
          "341:           },",
          "342:           ComputedUserset: &openfgapb.ObjectRelation{",
          "343:            Relation: \"from\",",
          "344:           },",
          "345:          },",
          "346:         },",
          "347:        },",
          "348:       },",
          "349:      },",
          "350:     },",
          "351:    },",
          "352:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
          "353:   },",
          "354:   {",
          "355:    name: \"fails_if_unknown_relation_in_computed_userset\",",
          "356:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "357:     StoreId: storeID,",
          "358:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "359:      {",
          "360:       Type: \"foo\",",
          "361:       Relations: map[string]*openfgapb.Userset{",
          "362:        \"writer\": {",
          "363:         Userset: &openfgapb.Userset_ComputedUserset{",
          "364:          ComputedUserset: &openfgapb.ObjectRelation{",
          "365:           Relation: \"reader\",",
          "366:          },",
          "367:         },",
          "368:        },",
          "369:        \"reader\": {",
          "370:         Userset: &openfgapb.Userset_This{},",
          "371:        },",
          "372:       },",
          "373:      },",
          "374:      {",
          "375:       Type: \"bar\",",
          "376:       Relations: map[string]*openfgapb.Userset{",
          "377:        \"owner\": {",
          "378:         Userset: &openfgapb.Userset_ComputedUserset{",
          "379:          ComputedUserset: &openfgapb.ObjectRelation{",
          "380:           Relation: \"writer\",",
          "381:          },",
          "382:         },",
          "383:        },",
          "384:       },",
          "385:      },",
          "386:     },",
          "387:    },",
          "388:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"bar\", Relation: \"writer\"}),",
          "389:   },",
          "390:   {",
          "391:    name: \"fails_if_unknown_relation_in_intersection\",",
          "392:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "393:     StoreId: storeID,",
          "394:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "395:      {",
          "396:       Type: \"repo\",",
          "397:       Relations: map[string]*openfgapb.Userset{",
          "398:        \"writer\": {Userset: &openfgapb.Userset_This{}},",
          "399:        \"viewer\": {",
          "400:         Userset: &openfgapb.Userset_Intersection{",
          "401:          Intersection: &openfgapb.Usersets{",
          "402:           Child: []*openfgapb.Userset{",
          "403:            {",
          "404:             Userset: &openfgapb.Userset_This{},",
          "405:            },",
          "406:            {",
          "407:             Userset: &openfgapb.Userset_ComputedUserset{",
          "408:              ComputedUserset: &openfgapb.ObjectRelation{",
          "409:               Relation: \"owner\",",
          "410:              },",
          "411:             },",
          "412:            },",
          "413:           },",
          "414:          },",
          "415:         },",
          "416:        },",
          "417:       },",
          "418:      },",
          "419:     },",
          "420:    },",
          "421:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
          "422:   },",
          "423:   {",
          "424:    name: \"fails_if_difference_includes_same_relation_twice\",",
          "425:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "426:     StoreId: storeID,",
          "427:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "428:      {",
          "429:       Type: \"repo\",",
          "430:       Relations: map[string]*openfgapb.Userset{",
          "431:        \"viewer\": {",
          "432:         Userset: &openfgapb.Userset_Difference{",
          "433:          Difference: &openfgapb.Difference{",
          "434:           Base: &openfgapb.Userset{",
          "435:            Userset: &openfgapb.Userset_This{},",
          "436:           },",
          "437:           Subtract: &openfgapb.Userset{",
          "438:            Userset: &openfgapb.Userset_ComputedUserset{",
          "439:             ComputedUserset: &openfgapb.ObjectRelation{",
          "440:              Relation: \"viewer\",",
          "441:             },",
          "442:            },",
          "443:           },",
          "444:          },",
          "445:         },",
          "446:        },",
          "447:       },",
          "448:      },",
          "449:     },",
          "450:    },",
          "451:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{ObjectType: \"repo\", Relation: \"viewer\"}),",
          "452:   },",
          "453:   {",
          "454:    name: \"fails_if_union_includes_same_relation_twice\",",
          "455:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "456:     StoreId: storeID,",
          "457:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "458:      {",
          "459:       Type: \"repo\",",
          "460:       Relations: map[string]*openfgapb.Userset{",
          "461:        \"viewer\": {",
          "462:         Userset: &openfgapb.Userset_Union{",
          "463:          Union: &openfgapb.Usersets{",
          "464:           Child: []*openfgapb.Userset{",
          "465:            {Userset: &openfgapb.Userset_ComputedUserset{",
          "466:             ComputedUserset: &openfgapb.ObjectRelation{",
          "467:              Relation: \"viewer\",",
          "468:             },",
          "469:            }},",
          "470:           },",
          "471:          },",
          "472:         },",
          "473:        },",
          "474:       },",
          "475:      },",
          "476:     },",
          "477:    },",
          "478:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{ObjectType: \"repo\", Relation: \"viewer\"}),",
          "479:   },",
          "480:   {",
          "481:    name: \"fails_if_intersection_includes_same_relation_twice\",",
          "482:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "483:     StoreId: storeID,",
          "484:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "485:      {",
          "486:       Type: \"repo\",",
          "487:       Relations: map[string]*openfgapb.Userset{",
          "488:        \"viewer\": {",
          "489:         Userset: &openfgapb.Userset_Intersection{",
          "490:          Intersection: &openfgapb.Usersets{Child: []*openfgapb.Userset{",
          "491:           {Userset: &openfgapb.Userset_ComputedUserset{",
          "492:            ComputedUserset: &openfgapb.ObjectRelation{",
          "493:             Relation: \"viewer\",",
          "494:            },",
          "495:           }},",
          "496:           {Userset: &openfgapb.Userset_This{}},",
          "497:          }},",
          "498:         },",
          "499:        },",
          "500:       },",
          "501:      },",
          "502:     },",
          "503:    },",
          "504:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{ObjectType: \"repo\", Relation: \"viewer\"}),",
          "505:   },",
          "506:   {",
          "507:    name: \"Success_if_Union_Rewrite_Contains_Repeated_Definitions\",",
          "508:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "509:     StoreId: storeID,",
          "510:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "511:      {",
          "512:       Type: \"document\",",
          "513:       Relations: map[string]*openfgapb.Userset{",
          "514:        \"parent\": typesystem.This(),",
          "515:        \"viewer\": typesystem.Union(",
          "516:         typesystem.ComputedUserset(\"editor\"),",
          "517:         typesystem.ComputedUserset(\"editor\"),",
          "518:        ),",
          "519:        \"editor\": typesystem.Union(typesystem.This(), typesystem.This()),",
          "520:        \"manage\": typesystem.Union(",
          "521:         typesystem.TupleToUserset(\"parent\", \"manage\"),",
          "522:         typesystem.TupleToUserset(\"parent\", \"manage\"),",
          "523:        ),",
          "524:       },",
          "525:      },",
          "526:     },",
          "527:    },",
          "528:   },",
          "529:   {",
          "530:    name: \"Success_if_Intersection_Rewrite_Contains_Repeated_Definitions\",",
          "531:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "532:     StoreId: storeID,",
          "533:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "534:      {",
          "535:       Type: \"document\",",
          "536:       Relations: map[string]*openfgapb.Userset{",
          "537:        \"parent\": typesystem.This(),",
          "538:        \"viewer\": typesystem.Intersection(",
          "539:         typesystem.ComputedUserset(\"editor\"),",
          "540:         typesystem.ComputedUserset(\"editor\"),",
          "541:        ),",
          "542:        \"editor\": typesystem.Intersection(typesystem.This(), typesystem.This()),",
          "543:        \"manage\": typesystem.Intersection(",
          "544:         typesystem.TupleToUserset(\"parent\", \"manage\"),",
          "545:         typesystem.TupleToUserset(\"parent\", \"manage\"),",
          "546:        ),",
          "547:       },",
          "548:      },",
          "549:     },",
          "550:    },",
          "551:   },",
          "552:   {",
          "553:    name: \"Success_if_Exclusion_Rewrite_Contains_Repeated_Definitions\",",
          "554:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "555:     StoreId: storeID,",
          "556:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "557:      {",
          "558:       Type: \"document\",",
          "559:       Relations: map[string]*openfgapb.Userset{",
          "560:        \"parent\": typesystem.This(),",
          "561:        \"viewer\": typesystem.Difference(",
          "562:         typesystem.ComputedUserset(\"editor\"),",
          "563:         typesystem.ComputedUserset(\"editor\"),",
          "564:        ),",
          "565:        \"editor\": typesystem.Difference(typesystem.This(), typesystem.This()),",
          "566:        \"manage\": typesystem.Difference(",
          "567:         typesystem.TupleToUserset(\"parent\", \"manage\"),",
          "568:         typesystem.TupleToUserset(\"parent\", \"manage\"),",
          "569:        ),",
          "570:       },",
          "571:      },",
          "572:     },",
          "573:    },",
          "574:   },",
          "575:   {",
          "576:    name: \"Fails_if_Tupleset_relation_involves_ComputedUserset_rewrite\",",
          "577:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "578:     StoreId: storeID,",
          "579:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "580:      {",
          "581:       Type: \"document\",",
          "582:       Relations: map[string]*openfgapb.Userset{",
          "583:        \"ancestor\": typesystem.This(),",
          "584:        \"parent\":   typesystem.ComputedUserset(\"ancestor\"),",
          "585:        \"viewer\":   typesystem.TupleToUserset(\"parent\", \"viewer\"),",
          "586:       },",
          "587:      },",
          "588:     },",
          "589:    },",
          "590:    err: serverErrors.InvalidAuthorizationModelInput(",
          "591:     errors.New(\"the 'document#parent' relation is referenced in at least one tupleset and thus must be a direct relation\"),",
          "592:    ),",
          "593:   },",
          "594:   {",
          "595:    name: \"Fails_if_Tupleset_relation_involves_Union_rewrite\",",
          "596:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "597:     StoreId: storeID,",
          "598:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "599:      {",
          "600:       Type: \"document\",",
          "601:       Relations: map[string]*openfgapb.Userset{",
          "602:        \"ancestor\": typesystem.This(),",
          "603:        \"parent\":   typesystem.Union(typesystem.This(), typesystem.ComputedUserset(\"ancestor\")),",
          "604:        \"viewer\":   typesystem.TupleToUserset(\"parent\", \"viewer\"),",
          "605:       },",
          "606:      },",
          "607:     },",
          "608:    },",
          "609:    err: serverErrors.InvalidAuthorizationModelInput(",
          "610:     errors.New(\"the 'document#parent' relation is referenced in at least one tupleset and thus must be a direct relation\"),",
          "611:    ),",
          "612:   },",
          "613:   {",
          "614:    name: \"Fails_if_Tupleset_relation_involves_Intersection_rewrite\",",
          "615:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "616:     StoreId: storeID,",
          "617:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "618:      {",
          "619:       Type: \"document\",",
          "620:       Relations: map[string]*openfgapb.Userset{",
          "621:        \"ancestor\": typesystem.This(),",
          "622:        \"parent\":   typesystem.Intersection(typesystem.This(), typesystem.ComputedUserset(\"ancestor\")),",
          "623:        \"viewer\":   typesystem.TupleToUserset(\"parent\", \"viewer\"),",
          "624:       },",
          "625:      },",
          "626:     },",
          "627:    },",
          "628:    err: serverErrors.InvalidAuthorizationModelInput(",
          "629:     errors.New(\"the 'document#parent' relation is referenced in at least one tupleset and thus must be a direct relation\"),",
          "630:    ),",
          "631:   },",
          "632:   {",
          "633:    name: \"Fails_if_Tupleset_relation_involves_Exclusion_rewrite\",",
          "634:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "635:     StoreId: storeID,",
          "636:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "637:      {",
          "638:       Type: \"document\",",
          "639:       Relations: map[string]*openfgapb.Userset{",
          "640:        \"restricted\": typesystem.This(),",
          "641:        \"parent\":     typesystem.Difference(typesystem.This(), typesystem.ComputedUserset(\"restricted\")),",
          "642:        \"viewer\":     typesystem.TupleToUserset(\"parent\", \"viewer\"),",
          "643:       },",
          "644:      },",
          "645:     },",
          "646:    },",
          "647:    err: serverErrors.InvalidAuthorizationModelInput(",
          "648:     errors.New(\"the 'document#parent' relation is referenced in at least one tupleset and thus must be a direct relation\"),",
          "649:    ),",
          "650:   },",
          "651:   {",
          "652:    name: \"Fails_if_Tupleset_relation_involves_TupleToUserset_rewrite\",",
          "653:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "654:     StoreId: storeID,",
          "655:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "656:      {",
          "657:       Type: \"document\",",
          "658:       Relations: map[string]*openfgapb.Userset{",
          "659:        \"ancestor\": typesystem.This(),",
          "660:        \"parent\":   typesystem.TupleToUserset(\"ancestor\", \"viewer\"),",
          "661:        \"viewer\":   typesystem.TupleToUserset(\"parent\", \"viewer\"),",
          "662:       },",
          "663:      },",
          "664:     },",
          "665:    },",
          "666:    err: serverErrors.InvalidAuthorizationModelInput(",
          "667:     errors.New(\"the 'document#parent' relation is referenced in at least one tupleset and thus must be a direct relation\"),",
          "668:    ),",
          "669:   },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go": [
          "File: pkg/typesystem/typesystem.go -> pkg/typesystem/typesystem.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:  typeDefinitions map[string]*openfgapb.TypeDefinition",
          "113: }",
          "117: func New(model *openfgapb.AuthorizationModel) *TypeSystem {",
          "118:  tds := map[string]*openfgapb.TypeDefinition{}",
          "119:  for _, td := range model.GetTypeDefinitions() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: type ValidatedTypeSystem struct {",
          "117: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "543:  return false, nil",
          "544: }",
          "563:  if schemaVersion != SchemaVersion1_0 && schemaVersion != SchemaVersion1_1 {",
          "565:  }",
          "569:  }",
          "573:  }",
          "575:  if schemaVersion == SchemaVersion1_1 {",
          "578:   }",
          "579:  }",
          "582: }",
          "585:  seen := map[string]struct{}{}",
          "587:   objectType := td.GetType()",
          "588:   if _, ok := seen[objectType]; ok {",
          "589:    return true",
          "",
          "[Removed Lines]",
          "560: func Validate(model *openfgapb.AuthorizationModel) error {",
          "561:  schemaVersion := model.GetSchemaVersion()",
          "564:   return ErrInvalidSchemaVersion",
          "567:  if containsDuplicateType(model) {",
          "568:   return ErrDuplicateTypes",
          "571:  if err := validateRelationRewrites(model); err != nil {",
          "572:   return err",
          "576:   if err := validateRelationTypeRestrictions(model); err != nil {",
          "577:    return err",
          "581:  return nil",
          "584: func containsDuplicateType(model *openfgapb.AuthorizationModel) bool {",
          "586:  for _, td := range model.TypeDefinitions {",
          "",
          "[Added Lines]",
          "550: func (t *TypeSystem) allRelations() map[string]*openfgapb.Relation {",
          "551:  relations := map[string]*openfgapb.Relation{}",
          "553:  for _, td := range t.typeDefinitions {",
          "554:   relationMetadata := td.GetMetadata().GetRelations()",
          "556:   for relation, rewrite := range td.GetRelations() {",
          "557:    var typeInfo *openfgapb.RelationTypeInfo",
          "558:    if md, ok := relationMetadata[relation]; ok {",
          "559:     typeInfo = &openfgapb.RelationTypeInfo{",
          "560:      DirectlyRelatedUserTypes: md.GetDirectlyRelatedUserTypes(),",
          "561:     }",
          "562:    }",
          "564:    relations[relation] = &openfgapb.Relation{",
          "565:     Name:     relation,",
          "566:     Rewrite:  rewrite,",
          "567:     TypeInfo: typeInfo,",
          "568:    }",
          "569:   }",
          "570:  }",
          "572:  return relations",
          "573: }",
          "589: func (t *TypeSystem) Validate() (*ValidatedTypeSystem, error) {",
          "590:  schemaVersion := t.GetSchemaVersion()",
          "593:   return nil, ErrInvalidSchemaVersion",
          "596:  if containsDuplicateType(t.model.GetTypeDefinitions()) {",
          "597:   return nil, ErrDuplicateTypes",
          "601:  for _, td := range t.GetTypeDefinitions() {",
          "602:   for relation, rewrite := range td.GetRelations() {",
          "603:    err := t.isUsersetRewriteValid(td.GetType(), relation, rewrite)",
          "604:    if err != nil {",
          "605:     return nil, err",
          "606:    }",
          "607:   }",
          "611:   if err := t.validateRelationTypeRestrictions(); err != nil {",
          "612:    return nil, err",
          "616:  return &ValidatedTypeSystem{t}, nil",
          "619: func containsDuplicateType(tds []*openfgapb.TypeDefinition) bool {",
          "621:  for _, td := range tds {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "593:  return false",
          "594: }",
          "651:  if rewrite.GetUserset() == nil {",
          "652:   return &InvalidRelationError{ObjectType: objectType, Relation: relation, Cause: ErrInvalidUsersetRewrite}",
          "653:  }",
          "656:  case *openfgapb.Userset_ComputedUserset:",
          "658:   if computedUserset == relation {",
          "659:    return &InvalidRelationError{ObjectType: objectType, Relation: relation, Cause: ErrInvalidUsersetRewrite}",
          "660:   }",
          "662:    return &RelationUndefinedError{ObjectType: objectType, Relation: computedUserset, Err: ErrRelationUndefined}",
          "663:   }",
          "664:  case *openfgapb.Userset_TupleToUserset:",
          "669:    return &RelationUndefinedError{ObjectType: objectType, Relation: tupleset, Err: ErrRelationUndefined}",
          "670:   }",
          "674:   tuplesetRewrite := tuplesetRelation.GetRewrite()",
          "675:   if reflect.TypeOf(tuplesetRewrite.GetUserset()) != reflect.TypeOf(&openfgapb.Userset_This{}) {",
          "676:    return fmt.Errorf(\"the '%s#%s' relation is referenced in at least one tupleset and thus must be a direct relation\", objectType, tupleset)",
          "677:   }",
          "682:   }",
          "683:  case *openfgapb.Userset_Union:",
          "686:    if err != nil {",
          "687:     return err",
          "688:    }",
          "689:   }",
          "690:  case *openfgapb.Userset_Intersection:",
          "693:    if err != nil {",
          "694:     return err",
          "695:    }",
          "696:   }",
          "697:  case *openfgapb.Userset_Difference:",
          "699:   if err != nil {",
          "700:    return err",
          "701:   }",
          "704:   if err != nil {",
          "705:    return err",
          "706:   }",
          "",
          "[Removed Lines]",
          "596: func validateRelationRewrites(model *openfgapb.AuthorizationModel) error {",
          "597:  typeDefinitions := model.GetTypeDefinitions()",
          "599:  relations := map[string]*openfgapb.Relation{}",
          "600:  typerels := map[string]map[string]*openfgapb.Relation{}",
          "602:  for _, td := range typeDefinitions {",
          "603:   objectType := td.GetType()",
          "605:   typerels[objectType] = map[string]*openfgapb.Relation{}",
          "607:   for relation, rewrite := range td.GetRelations() {",
          "608:    relationMetadata := td.GetMetadata().GetRelations()",
          "609:    md, ok := relationMetadata[relation]",
          "611:    var typeinfo *openfgapb.RelationTypeInfo",
          "612:    if ok {",
          "613:     typeinfo = &openfgapb.RelationTypeInfo{",
          "614:      DirectlyRelatedUserTypes: md.GetDirectlyRelatedUserTypes(),",
          "615:     }",
          "616:    }",
          "618:    r := &openfgapb.Relation{",
          "619:     Name:     relation,",
          "620:     Rewrite:  rewrite,",
          "621:     TypeInfo: typeinfo,",
          "622:    }",
          "624:    typerels[objectType][relation] = r",
          "625:    relations[relation] = r",
          "626:   }",
          "627:  }",
          "629:  for _, td := range typeDefinitions {",
          "630:   objectType := td.GetType()",
          "632:   for relation, rewrite := range td.GetRelations() {",
          "633:    err := isUsersetRewriteValid(relations, typerels[objectType], objectType, relation, rewrite)",
          "634:    if err != nil {",
          "635:     return err",
          "636:    }",
          "637:   }",
          "638:  }",
          "640:  return nil",
          "641: }",
          "645: func isUsersetRewriteValid(",
          "646:  allRelations map[string]*openfgapb.Relation,",
          "647:  relationsOnType map[string]*openfgapb.Relation,",
          "648:  objectType, relation string,",
          "649:  rewrite *openfgapb.Userset,",
          "650: ) error {",
          "655:  switch t := rewrite.GetUserset().(type) {",
          "657:   computedUserset := t.ComputedUserset.GetRelation()",
          "661:   if _, ok := relationsOnType[computedUserset]; !ok {",
          "665:   tupleset := t.TupleToUserset.GetTupleset().GetRelation()",
          "667:   tuplesetRelation, ok := relationsOnType[tupleset]",
          "668:   if !ok {",
          "679:   computedUserset := t.TupleToUserset.GetComputedUserset().GetRelation()",
          "680:   if _, ok := allRelations[computedUserset]; !ok {",
          "681:    return &RelationUndefinedError{ObjectType: \"\", Relation: computedUserset, Err: ErrRelationUndefined}",
          "684:   for _, child := range t.Union.GetChild() {",
          "685:    err := isUsersetRewriteValid(allRelations, relationsOnType, objectType, relation, child)",
          "691:   for _, child := range t.Intersection.GetChild() {",
          "692:    err := isUsersetRewriteValid(allRelations, relationsOnType, objectType, relation, child)",
          "698:   err := isUsersetRewriteValid(allRelations, relationsOnType, objectType, relation, t.Difference.Base)",
          "703:   err = isUsersetRewriteValid(allRelations, relationsOnType, objectType, relation, t.Difference.Subtract)",
          "",
          "[Added Lines]",
          "632: func (t *TypeSystem) isUsersetRewriteValid(objectType, relation string, rewrite *openfgapb.Userset) error {",
          "637:  switch r := rewrite.GetUserset().(type) {",
          "639:   computedUserset := r.ComputedUserset.GetRelation()",
          "643:   if _, err := t.GetRelation(objectType, computedUserset); err != nil {",
          "647:   tupleset := r.TupleToUserset.GetTupleset().GetRelation()",
          "649:   tuplesetRelation, err := t.GetRelation(objectType, tupleset)",
          "650:   if err != nil {",
          "660:   computedUserset := r.TupleToUserset.GetComputedUserset().GetRelation()",
          "662:   if t.GetSchemaVersion() == SchemaVersion1_1 {",
          "663:    userTypes := tuplesetRelation.GetTypeInfo().GetDirectlyRelatedUserTypes()",
          "664:    for _, rr := range userTypes {",
          "665:     if _, err := t.GetRelation(rr.GetType(), computedUserset); err == nil {",
          "666:      return nil",
          "667:     }",
          "668:    }",
          "670:    return fmt.Errorf(\"%s does not appear as a relation in any of the directly related user types %v\", computedUserset, userTypes)",
          "671:   } else {",
          "672:    if _, ok := t.allRelations()[computedUserset]; !ok {",
          "673:     return &RelationUndefinedError{ObjectType: \"\", Relation: computedUserset, Err: ErrRelationUndefined}",
          "674:    }",
          "677:   for _, child := range r.Union.GetChild() {",
          "678:    err := t.isUsersetRewriteValid(objectType, relation, child)",
          "684:   for _, child := range r.Intersection.GetChild() {",
          "685:    err := t.isUsersetRewriteValid(objectType, relation, child)",
          "691:   err := t.isUsersetRewriteValid(objectType, relation, r.Difference.Base)",
          "696:   err = t.isUsersetRewriteValid(objectType, relation, r.Difference.Subtract)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "709:  return nil",
          "710: }",
          "717:   if err != nil {",
          "718:    return err",
          "719:   }",
          "721:   for name, relation := range relations {",
          "722:    relatedTypes := relation.GetTypeInfo().GetDirectlyRelatedUserTypes()",
          "725:    if assignable && len(relatedTypes) == 0 {",
          "726:     return AssignableRelationError(objectType, name)",
          "",
          "[Removed Lines]",
          "712: func validateRelationTypeRestrictions(model *openfgapb.AuthorizationModel) error {",
          "713:  typesys := New(model)",
          "715:  for objectType := range typesys.typeDefinitions {",
          "716:   relations, err := typesys.GetRelations(objectType)",
          "723:    assignable := typesys.IsDirectlyAssignable(relation)",
          "",
          "[Added Lines]",
          "705: func (t *TypeSystem) validateRelationTypeRestrictions() error {",
          "706:  for objectType := range t.typeDefinitions {",
          "707:   relations, err := t.GetRelations(objectType)",
          "714:    assignable := t.IsDirectlyAssignable(relation)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "734:     relatedObjectType := related.GetType()",
          "735:     relatedRelation := related.GetRelation()",
          "738:      return InvalidRelationTypeError(objectType, name, relatedObjectType, relatedRelation)",
          "739:     }",
          "741:     if related.GetRelationOrWildcard() != nil {",
          "744:       return InvalidRelationTypeError(objectType, name, relatedObjectType, relatedRelation)",
          "745:      }",
          "747:      if relatedRelation != \"\" {",
          "749:        return InvalidRelationTypeError(objectType, name, relatedObjectType, relatedRelation)",
          "750:       }",
          "751:      }",
          "",
          "[Removed Lines]",
          "737:     if _, err := typesys.GetRelations(relatedObjectType); err != nil {",
          "743:      if ok, _ := typesys.IsTuplesetRelation(objectType, name); ok {",
          "748:       if _, err := typesys.GetRelation(relatedObjectType, relatedRelation); err != nil {",
          "",
          "[Added Lines]",
          "728:     if _, err := t.GetRelations(relatedObjectType); err != nil {",
          "734:      if ok, _ := t.IsTuplesetRelation(objectType, name); ok {",
          "739:       if _, err := t.GetRelation(relatedObjectType, relatedRelation); err != nil {",
          "",
          "---------------"
        ],
        "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go": [
          "File: pkg/typesystem/typesystem_test.go -> pkg/typesystem/typesystem_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:  for _, test := range tests {",
          "42:   t.Run(test.name, func(t *testing.T) {",
          "44:    require.NoError(t, err)",
          "45:   })",
          "46:  }",
          "",
          "[Removed Lines]",
          "43:    err := Validate(test.model)",
          "",
          "[Added Lines]",
          "43:    _, err := New(test.model).Validate()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "439:  for _, test := range tests {",
          "440:   t.Run(test.name, func(t *testing.T) {",
          "442:    require.ErrorIs(t, err, test.err)",
          "443:   })",
          "444:  }",
          "",
          "[Removed Lines]",
          "441:    err := Validate(test.model)",
          "",
          "[Added Lines]",
          "441:    _, err := New(test.model).Validate()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "540:  for _, test := range tests {",
          "541:   t.Run(test.name, func(t *testing.T) {",
          "543:    require.NoError(t, err)",
          "544:   })",
          "545:  }",
          "",
          "[Removed Lines]",
          "542:    err := Validate(test.model)",
          "",
          "[Added Lines]",
          "542:    _, err := New(test.model).Validate()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1014:  for _, test := range tests {",
          "1015:   t.Run(test.name, func(t *testing.T) {",
          "1017:    require.EqualError(t, err, test.err.Error())",
          "1018:   })",
          "1019:  }",
          "",
          "[Removed Lines]",
          "1016:    err := Validate(test.model)",
          "",
          "[Added Lines]",
          "1016:    _, err := New(test.model).Validate()",
          "",
          "---------------"
        ],
        "tests/check/check_test.go||tests/check/check_test.go": [
          "File: tests/check/check_test.go -> tests/check/check_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"context\"",
          "7:  \"os\"",
          "8:  \"testing\"",
          "12:  parser \"github.com/craigpastro/openfga-dsl-parser/v2\"",
          "13:  \"github.com/openfga/openfga/cmd\"",
          "15:  \"github.com/openfga/openfga/pkg/typesystem\"",
          "16:  \"github.com/stretchr/testify/require\"",
          "17:  pb \"go.buf.build/openfga/go/openfga/api/openfga/v1\"",
          "21:  \"google.golang.org/grpc/status\"",
          "22:  \"gopkg.in/yaml.v3\"",
          "23: )",
          "",
          "[Removed Lines]",
          "5:  \"fmt\"",
          "6:  \"log\"",
          "9:  \"time\"",
          "11:  \"github.com/cenkalti/backoff/v4\"",
          "14:  \"github.com/openfga/openfga/pkg/testfixtures/storage\"",
          "18:  \"google.golang.org/grpc\"",
          "19:  \"google.golang.org/grpc/credentials/insecure\"",
          "20:  healthv1pb \"google.golang.org/grpc/health/grpc_health_v1\"",
          "",
          "[Added Lines]",
          "11:  \"github.com/openfga/openfga/tests\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:  data, err := os.ReadFile(\"tests.yaml\")",
          "63:  require.NoError(t, err)",
          "67:  require.NoError(t, err)",
          "71:  cfg := cmd.MustDefaultConfigWithRandomPorts()",
          "72:  cfg.Log.Level = \"none\"",
          "73:  cfg.Datastore.Engine = engine",
          "86:  defer conn.Close()",
          "111:  cancel()",
          "",
          "[Removed Lines]",
          "65:  var tests checkTests",
          "66:  err = yaml.Unmarshal(data, &tests)",
          "69:  container := storage.RunDatastoreTestContainer(t, engine)",
          "74:  cfg.Datastore.URI = container.GetConnectionURI()",
          "76:  ctx, cancel := context.WithCancel(context.Background())",
          "78:  go func() {",
          "79:   if err := cmd.RunServer(ctx, cfg); err != nil {",
          "80:    log.Fatal(err)",
          "81:   }",
          "82:  }()",
          "84:  conn, err := grpc.Dial(cfg.GRPC.Addr, grpc.WithTransportCredentials(insecure.NewCredentials()))",
          "85:  require.NoError(t, err)",
          "89:  client := healthv1pb.NewHealthClient(conn)",
          "90:  policy := backoff.NewExponentialBackOff()",
          "91:  policy.MaxElapsedTime = 10 * time.Second",
          "92:  err = backoff.Retry(func() error {",
          "93:   resp, err := client.Check(ctx, &healthv1pb.HealthCheckRequest{",
          "94:    Service: pb.OpenFGAService_ServiceDesc.ServiceName,",
          "95:   })",
          "96:   if err != nil {",
          "97:    return err",
          "98:   }",
          "100:   if resp.GetStatus() != healthv1pb.HealthCheckResponse_SERVING {",
          "101:    return fmt.Errorf(\"not serving\")",
          "102:   }",
          "104:   return nil",
          "105:  }, policy)",
          "106:  require.NoError(t, err)",
          "108:  runTests(t, pb.NewOpenFGAServiceClient(conn), tests)",
          "",
          "[Added Lines]",
          "58:  var testCases checkTests",
          "59:  err = yaml.Unmarshal(data, &testCases)",
          "66:  cancel := tests.StartServer(t, cfg)",
          "67:  defer cancel()",
          "69:  conn := tests.Connect(t, cfg.GRPC.Addr)",
          "72:  runTests(t, pb.NewOpenFGAServiceClient(conn), testCases)",
          "",
          "---------------"
        ],
        "tests/model/write_model_test.go||tests/model/write_model_test.go": [
          "File: tests/model/write_model_test.go -> tests/model/write_model_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package model",
          "3: import (",
          "4:  \"context\"",
          "5:  \"testing\"",
          "7:  parser \"github.com/craigpastro/openfga-dsl-parser/v2\"",
          "8:  \"github.com/openfga/openfga/cmd\"",
          "9:  \"github.com/openfga/openfga/pkg/typesystem\"",
          "10:  \"github.com/openfga/openfga/tests\"",
          "11:  \"github.com/stretchr/testify/require\"",
          "12:  pb \"go.buf.build/openfga/go/openfga/api/openfga/v1\"",
          "13:  \"google.golang.org/grpc/status\"",
          "14: )",
          "16: var testCases = map[string]struct {",
          "17:  model string",
          "18:  code  int",
          "19: }{",
          "20:  \"case6\": {",
          "21:   model: `",
          "22:   type user",
          "23:   type group",
          "24:     relations",
          "25:    define group as group from group",
          "26:   `,",
          "27:   code: 2056,",
          "28:  },",
          "29:  \"case9\": {",
          "30:   model: `",
          "31:   type user",
          "32:   type org",
          "33:     relations",
          "34:    define member: [user] as self",
          "35:   type group",
          "36:     relations",
          "37:    define parent: [org] as self",
          "38:    define viewer as viewer from parent",
          "39:   `,",
          "40:   code: 2056,",
          "41:  },",
          "42:  \"case10\": {",
          "43:   model: `",
          "44:   type user",
          "45:   type group",
          "46:     relations",
          "47:    define parent: [group] as self",
          "48:    define viewer as reader from parent",
          "49:   `,",
          "50:   code: 2056,",
          "51:  },",
          "52:  \"case11\": {",
          "53:   model: `",
          "54:   type user",
          "55:   type org",
          "56:   type group",
          "57:     relations",
          "58:    define parent: [group] as self",
          "59:    define viewer as viewer from org",
          "60:   `,",
          "61:   code: 2056,",
          "62:  },",
          "63:  \"case12\": {",
          "64:   model: `",
          "65:   type user",
          "66:   type org",
          "67:   type group",
          "68:     relations",
          "69:    define parent: [group] as self",
          "70:    define viewer as org from parent",
          "71:   `,",
          "72:   code: 2056,",
          "73:  },",
          "74:  \"case13\": {",
          "75:   model: `",
          "76:   type user",
          "77:   type org",
          "78:   type group",
          "79:     relations",
          "80:    define parent: [group, group#org] as self",
          "81:   `,",
          "82:   code: 2056,",
          "83:  },",
          "84:  \"case17\": {",
          "85:   model: `",
          "86:   type user",
          "87:   type folder",
          "88:     relations",
          "89:    define parent: [folder] as self or parent from parent",
          "90:    define viewer: [user] as self or viewer from parent",
          "91:   `,",
          "92:   code: 2056,",
          "93:  },",
          "94:  \"case18\": {",
          "95:   model: `",
          "96:   type user",
          "97:   type folder",
          "98:     relations",
          "99:    define root: [folder] as self",
          "100:    define parent: [folder] as self or root",
          "101:    define viewer: [user] as self or viewer from parent",
          "102:   `,",
          "103:   code: 2056,",
          "104:  },",
          "105:  \"case19\": {",
          "106:   model: `",
          "107:   type user",
          "108:   type folder",
          "109:     relations",
          "110:    define root: [folder] as self",
          "111:    define parent as root",
          "112:    define viewer: [user] as self or viewer from parent",
          "113:   `,",
          "114:   code: 2056,",
          "115:  },",
          "116:  \"case20\": {",
          "117:   model: `",
          "118:   type user",
          "119:   type folder",
          "120:     relations",
          "121:    define root: [folder] as self",
          "122:    define parent: [folder, folder#parent] as self",
          "123:    define viewer: [user] as self or viewer from parent",
          "124:   `,",
          "125:   code: 2056,",
          "126:  },",
          "127:  \"case21\": {",
          "128:   model: `",
          "129:   type user",
          "130:   type group",
          "131:     relations",
          "132:    define member: [user] as self",
          "133:    define reader as member and allowed",
          "134:   `,",
          "135:   code: 2056,",
          "136:  },",
          "137:  \"case22\": {",
          "138:   model: `",
          "139:   type user",
          "140:   type group",
          "141:     relations",
          "142:    define member: [user] as self",
          "143:    define reader as member or allowed",
          "144:   `,",
          "145:   code: 2056,",
          "146:  },",
          "147:  \"case23\": {",
          "148:   model: `",
          "149:   type user",
          "150:   type group",
          "151:     relations",
          "152:    define member: [user] as self",
          "153:    define reader as allowed but not member",
          "154:   `,",
          "155:   code: 2056,",
          "156:  },",
          "157:  \"case24\": {",
          "158:   model: `",
          "159:   type user",
          "160:   type group",
          "161:     relations",
          "162:    define member: [user] as self",
          "163:    define reader as member but not allowed",
          "164:   `,",
          "165:   code: 2056,",
          "166:  },",
          "167:  \"case25\": {",
          "168:   model: `",
          "169:   type user",
          "170:   type org",
          "171:     relations",
          "172:    define member as self",
          "173:   `,",
          "174:   code: 2056,",
          "175:  },",
          "176:  \"same_type_fails\": {",
          "177:   model: `",
          "178:   type user",
          "179:   type user",
          "180:   `,",
          "181:   code: 2056,",
          "182:  },",
          "183:  \"difference_includes_itself_in_subtract_fails\": {",
          "184:   model: `",
          "185:         type user",
          "186:         type document",
          "187:           relations",
          "188:             define viewer: [user] as self but not viewer",
          "189:   `,",
          "190:   code: 2056,",
          "191:  },",
          "192:  \"union_includes_itself_fails\": {",
          "193:   model: `",
          "194:   type user",
          "195:   type document",
          "196:     relations",
          "197:    define viewer: [user] as self or viewer",
          "198:   `,",
          "199:   code: 2056,",
          "200:  },",
          "201:  \"intersection_includes_itself_fails\": {",
          "202:   model: `",
          "203:   type user",
          "204:   type document",
          "205:     relations",
          "206:    define viewer: [user] as self and viewer",
          "207:   `,",
          "208:   code: 2056,",
          "209:  },",
          "210:  \"simple_model_succeeds\": {",
          "211:   model: `",
          "212:   type user",
          "213:   type folder",
          "214:     relations",
          "215:    define viewer: [user] as self",
          "216:   type document",
          "217:     relations",
          "218:    define parent: [folder] as self",
          "219:    define viewer as viewer from parent",
          "220:   `,",
          "221:  },",
          "222:  \"no_relations_succeeds\": {",
          "223:   model: `",
          "224:   type user",
          "225:   `,",
          "226:  },",
          "227:  \"union_may_contain_repeated_relations\": {",
          "228:   model: `",
          "229:   type user",
          "230:   type document",
          "231:     relations",
          "232:    define editor: [user] as self",
          "233:    define viewer as editor or editor",
          "234:   `,",
          "235:  },",
          "236:  \"intersection_may_contain_repeated_relations\": {",
          "237:   model: `",
          "238:   type user",
          "239:   type document",
          "240:     relations",
          "241:    define editor: [user] as self",
          "242:    define viewer as editor and editor",
          "243:   `,",
          "244:  },",
          "245:  \"exclusion_may_contain_repeated_relations\": {",
          "246:   model: `",
          "247:   type user",
          "248:   type document",
          "249:     relations",
          "250:    define editor: [user] as self",
          "251:    define viewer as editor but not editor",
          "252:   `,",
          "253:  },",
          "254:  \"at_long_as_one_computed_userset_type_is_valid\": {",
          "255:   model: `",
          "256:   type user",
          "257:   type group",
          "258:     relations",
          "259:    define parent: [group, team] as self",
          "260:    define viewer as reader from parent",
          "261:   type team",
          "262:     relations",
          "263:    define reader: [user] as self",
          "264:   `,",
          "265:  },",
          "266: }",
          "268: func TestWriteAuthorizationModel(t *testing.T) {",
          "269:  cfg := cmd.MustDefaultConfigWithRandomPorts()",
          "270:  cfg.Log.Level = \"none\"",
          "271:  cfg.Datastore.Engine = \"memory\"",
          "273:  cancel := tests.StartServer(t, cfg)",
          "274:  defer cancel()",
          "276:  conn := tests.Connect(t, cfg.GRPC.Addr)",
          "277:  defer conn.Close()",
          "279:  runTests(t, pb.NewOpenFGAServiceClient(conn))",
          "282:  cancel()",
          "283: }",
          "285: func runTests(t *testing.T, client pb.OpenFGAServiceClient) {",
          "286:  ctx := context.Background()",
          "287:  resp, err := client.CreateStore(ctx, &pb.CreateStoreRequest{Name: \"write_model_test\"})",
          "288:  require.NoError(t, err)",
          "290:  storeID := resp.GetId()",
          "292:  for name, test := range testCases {",
          "293:   t.Run(name, func(t *testing.T) {",
          "294:    _, err = client.WriteAuthorizationModel(ctx, &pb.WriteAuthorizationModelRequest{",
          "295:     StoreId:         storeID,",
          "296:     SchemaVersion:   typesystem.SchemaVersion1_1,",
          "297:     TypeDefinitions: parser.MustParse(test.model),",
          "298:    })",
          "300:    if test.code == 0 {",
          "301:     require.NoError(t, err)",
          "302:    } else {",
          "303:     require.Error(t, err)",
          "304:     e, ok := status.FromError(err)",
          "305:     require.True(t, ok)",
          "306:     require.Equal(t, test.code, int(e.Code()), err)",
          "307:    }",
          "308:   })",
          "309:  }",
          "310: }",
          "",
          "---------------"
        ],
        "tests/oldcheck/check_test.go||tests/oldcheck/check_test.go": [
          "File: tests/oldcheck/check_test.go -> tests/oldcheck/check_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"context\"",
          "7:  \"os\"",
          "8:  \"testing\"",
          "12:  parser \"github.com/craigpastro/openfga-dsl-parser\"",
          "13:  \"github.com/openfga/openfga/cmd\"",
          "15:  \"github.com/openfga/openfga/pkg/typesystem\"",
          "16:  \"github.com/stretchr/testify/require\"",
          "17:  pb \"go.buf.build/openfga/go/openfga/api/openfga/v1\"",
          "21:  \"gopkg.in/yaml.v3\"",
          "22: )",
          "",
          "[Removed Lines]",
          "5:  \"fmt\"",
          "6:  \"log\"",
          "9:  \"time\"",
          "11:  \"github.com/cenkalti/backoff/v4\"",
          "14:  \"github.com/openfga/openfga/pkg/testfixtures/storage\"",
          "18:  \"google.golang.org/grpc\"",
          "19:  \"google.golang.org/grpc/credentials/insecure\"",
          "20:  healthv1pb \"google.golang.org/grpc/health/grpc_health_v1\"",
          "",
          "[Added Lines]",
          "11:  \"github.com/openfga/openfga/tests\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:  data, err := os.ReadFile(\"tests.yaml\")",
          "55:  require.NoError(t, err)",
          "59:  require.NoError(t, err)",
          "63:  cfg := cmd.MustDefaultConfigWithRandomPorts()",
          "64:  cfg.Log.Level = \"none\"",
          "65:  cfg.Datastore.Engine = engine",
          "78:  defer conn.Close()",
          "103:  cancel()",
          "",
          "[Removed Lines]",
          "57:  var tests checkTests",
          "58:  err = yaml.Unmarshal(data, &tests)",
          "61:  container := storage.RunDatastoreTestContainer(t, engine)",
          "66:  cfg.Datastore.URI = container.GetConnectionURI()",
          "68:  ctx, cancel := context.WithCancel(context.Background())",
          "70:  go func() {",
          "71:   if err := cmd.RunServer(ctx, cfg); err != nil {",
          "72:    log.Fatal(err)",
          "73:   }",
          "74:  }()",
          "76:  conn, err := grpc.Dial(cfg.GRPC.Addr, grpc.WithTransportCredentials(insecure.NewCredentials()))",
          "77:  require.NoError(t, err)",
          "81:  client := healthv1pb.NewHealthClient(conn)",
          "82:  policy := backoff.NewExponentialBackOff()",
          "83:  policy.MaxElapsedTime = 10 * time.Second",
          "84:  err = backoff.Retry(func() error {",
          "85:   resp, err := client.Check(ctx, &healthv1pb.HealthCheckRequest{",
          "86:    Service: pb.OpenFGAService_ServiceDesc.ServiceName,",
          "87:   })",
          "88:   if err != nil {",
          "89:    return err",
          "90:   }",
          "92:   if resp.GetStatus() != healthv1pb.HealthCheckResponse_SERVING {",
          "93:    return fmt.Errorf(\"not serving\")",
          "94:   }",
          "96:   return nil",
          "97:  }, policy)",
          "98:  require.NoError(t, err)",
          "100:  runTest(t, pb.NewOpenFGAServiceClient(conn), tests)",
          "",
          "[Added Lines]",
          "50:  var testCases checkTests",
          "51:  err = yaml.Unmarshal(data, &testCases)",
          "58:  cancel := tests.StartServer(t, cfg)",
          "59:  defer cancel()",
          "61:  conn := tests.Connect(t, cfg.GRPC.Addr)",
          "64:  runTest(t, pb.NewOpenFGAServiceClient(conn), testCases)",
          "",
          "---------------"
        ],
        "tests/tests.go||tests/tests.go": [
          "File: tests/tests.go -> tests/tests.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package tests",
          "3: import (",
          "4:  \"context\"",
          "5:  \"fmt\"",
          "6:  \"testing\"",
          "7:  \"time\"",
          "9:  \"github.com/cenkalti/backoff/v4\"",
          "10:  \"github.com/openfga/openfga/cmd\"",
          "11:  \"github.com/openfga/openfga/pkg/testfixtures/storage\"",
          "12:  \"github.com/stretchr/testify/require\"",
          "13:  pb \"go.buf.build/openfga/go/openfga/api/openfga/v1\"",
          "14:  \"google.golang.org/grpc\"",
          "15:  \"google.golang.org/grpc/credentials/insecure\"",
          "16:  healthv1pb \"google.golang.org/grpc/health/grpc_health_v1\"",
          "17: )",
          "19: func StartServer(t *testing.T, cfg *cmd.Config) context.CancelFunc {",
          "20:  container := storage.RunDatastoreTestContainer(t, cfg.Datastore.Engine)",
          "21:  cfg.Datastore.URI = container.GetConnectionURI()",
          "23:  ctx, cancel := context.WithCancel(context.Background())",
          "25:  go func() {",
          "26:   err := cmd.RunServer(ctx, cfg)",
          "27:   require.NoError(t, err)",
          "28:  }()",
          "30:  return cancel",
          "31: }",
          "33: func Connect(t *testing.T, addr string) *grpc.ClientConn {",
          "34:  conn, err := grpc.Dial(addr, grpc.WithTransportCredentials(insecure.NewCredentials()))",
          "35:  require.NoError(t, err)",
          "38:  client := healthv1pb.NewHealthClient(conn)",
          "39:  policy := backoff.NewExponentialBackOff()",
          "40:  policy.MaxElapsedTime = 5 * time.Second",
          "41:  err = backoff.Retry(func() error {",
          "42:   resp, err := client.Check(context.Background(), &healthv1pb.HealthCheckRequest{",
          "43:    Service: pb.OpenFGAService_ServiceDesc.ServiceName,",
          "44:   })",
          "45:   if err != nil {",
          "46:    return err",
          "47:   }",
          "49:   if resp.GetStatus() != healthv1pb.HealthCheckResponse_SERVING {",
          "50:    return fmt.Errorf(\"not serving\")",
          "51:   }",
          "53:   return nil",
          "54:  }, policy)",
          "55:  require.NoError(t, err)",
          "57:  return conn",
          "58: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3367054861d9c7d7941312817b75f169db80787d",
      "candidate_info": {
        "commit_hash": "3367054861d9c7d7941312817b75f169db80787d",
        "repo": "openfga/openfga",
        "commit_url": "https://github.com/openfga/openfga/commit/3367054861d9c7d7941312817b75f169db80787d",
        "files": [
          "pkg/server/commands/write_authzmodel.go",
          "pkg/typesystem/typesystem.go",
          "pkg/typesystem/typesystem_test.go"
        ],
        "message": "chore: refactor typesystem to reduce memory usage (#624)",
        "before_after_code_files": [
          "pkg/server/commands/write_authzmodel.go||pkg/server/commands/write_authzmodel.go",
          "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go",
          "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go",
            "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go"
          ],
          "candidate": [
            "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go",
            "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/server/commands/write_authzmodel.go||pkg/server/commands/write_authzmodel.go": [
          "File: pkg/server/commands/write_authzmodel.go -> pkg/server/commands/write_authzmodel.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   TypeDefinitions: req.GetTypeDefinitions(),",
          "47:  }",
          "50:  if err != nil {",
          "51:   return nil, serverErrors.InvalidAuthorizationModelInput(err)",
          "52:  }",
          "",
          "[Removed Lines]",
          "49:  _, err := typesystem.New(model).Validate()",
          "",
          "[Added Lines]",
          "49:  _, err := typesystem.NewAndValidate(model)",
          "",
          "---------------"
        ],
        "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go": [
          "File: pkg/typesystem/typesystem.go -> pkg/typesystem/typesystem.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: }",
          "128: type TypeSystem struct {",
          "131:  typeDefinitions map[string]*openfgapb.TypeDefinition",
          "136: }",
          "139: func New(model *openfgapb.AuthorizationModel) *TypeSystem {",
          "141:  for _, td := range model.GetTypeDefinitions() {",
          "142:   tds[td.GetType()] = td",
          "143:  }",
          "145:  return &TypeSystem{",
          "147:   schemaVersion:   model.GetSchemaVersion(),",
          "148:   typeDefinitions: tds,",
          "149:  }",
          "150: }",
          "160: func (t *TypeSystem) GetAuthorizationModelID() string {",
          "162: }",
          "164: func (t *TypeSystem) GetSchemaVersion() string {",
          "165:  return t.schemaVersion",
          "166: }",
          "172: func (t *TypeSystem) GetTypeDefinition(objectType string) (*openfgapb.TypeDefinition, bool) {",
          "173:  if typeDefinition, ok := t.typeDefinitions[objectType]; ok {",
          "174:   return typeDefinition, true",
          "",
          "[Removed Lines]",
          "129:  model           *openfgapb.AuthorizationModel",
          "130:  schemaVersion   string",
          "132: }",
          "134: type ValidatedTypeSystem struct {",
          "140:  tds := map[string]*openfgapb.TypeDefinition{}",
          "146:   model:           model,",
          "154: func (t *TypeSystem) GetAuthorizationModel() *openfgapb.AuthorizationModel {",
          "155:  return t.model",
          "156: }",
          "161:  return t.model.GetId()",
          "168: func (t *TypeSystem) GetTypeDefinitions() map[string]*openfgapb.TypeDefinition {",
          "169:  return t.typeDefinitions",
          "170: }",
          "",
          "[Added Lines]",
          "130:  modelID         string",
          "131:  schemaVersion   string",
          "137:  tds := make(map[string]*openfgapb.TypeDefinition, len(model.GetTypeDefinitions()))",
          "143:   modelID:         model.GetId(),",
          "152:  return t.modelID",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:  return nil, false",
          "177: }",
          "179: func (t *TypeSystem) GetRelations(objectType string) (map[string]*openfgapb.Relation, error) {",
          "181:  if !ok {",
          "182:   return nil, &ObjectTypeUndefinedError{",
          "183:    ObjectType: objectType,",
          "",
          "[Removed Lines]",
          "180:  td, ok := t.typeDefinitions[objectType]",
          "",
          "[Added Lines]",
          "168:  td, ok := t.GetTypeDefinition(objectType)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "637:  schemaVersion := t.GetSchemaVersion()",
          "639:  if schemaVersion != SchemaVersion1_0 && schemaVersion != SchemaVersion1_1 {",
          "640:   return nil, ErrInvalidSchemaVersion",
          "641:  }",
          "644:   return nil, ErrDuplicateTypes",
          "645:  }",
          "",
          "[Removed Lines]",
          "636: func (t *TypeSystem) Validate() (*ValidatedTypeSystem, error) {",
          "643:  if containsDuplicateType(t.model.GetTypeDefinitions()) {",
          "",
          "[Added Lines]",
          "624: func NewAndValidate(model *openfgapb.AuthorizationModel) (*TypeSystem, error) {",
          "625:  t := New(model)",
          "632:  if containsDuplicateType(model) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "649:  }",
          "653:   for relation, rewrite := range td.GetRelations() {",
          "654:    err := t.isUsersetRewriteValid(td.GetType(), relation, rewrite)",
          "655:    if err != nil {",
          "",
          "[Removed Lines]",
          "652:  for _, td := range t.GetTypeDefinitions() {",
          "",
          "[Added Lines]",
          "641:  for _, td := range t.typeDefinitions {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "672:   }",
          "673:  }",
          "676: }",
          "681:   objectType := td.GetType()",
          "682:   if _, ok := seen[objectType]; ok {",
          "683:    return true",
          "",
          "[Removed Lines]",
          "675:  return &ValidatedTypeSystem{t}, nil",
          "678: func containsDuplicateType(tds []*openfgapb.TypeDefinition) bool {",
          "679:  seen := map[string]struct{}{}",
          "680:  for _, td := range tds {",
          "",
          "[Added Lines]",
          "664:  return t, nil",
          "667: func containsDuplicateType(model *openfgapb.AuthorizationModel) bool {",
          "668:  seen := make(map[string]struct{}, len(model.GetTypeDefinitions()))",
          "669:  for _, td := range model.GetTypeDefinitions() {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "692: func (t *TypeSystem) validateNames() error {",
          "694:   objectType := td.GetType()",
          "695:   if objectType == \"self\" || objectType == \"this\" {",
          "696:    return &InvalidTypeError{ObjectType: objectType, Cause: ErrReservedKeywords}",
          "",
          "[Removed Lines]",
          "693:  for _, td := range t.model.TypeDefinitions {",
          "",
          "[Added Lines]",
          "682:  for _, td := range t.typeDefinitions {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1051: func (t *TypeSystem) getAllTupleToUsersetsDefinitions() map[string]map[string][]*openfgapb.TupleToUserset {",
          "1052:  response := make(map[string]map[string][]*openfgapb.TupleToUserset, 0)",
          "1054:   response[typeName] = make(map[string][]*openfgapb.TupleToUserset, 0)",
          "1055:   for relationName, relationDef := range typeDef.GetRelations() {",
          "1056:    ttus := make([]*openfgapb.TupleToUserset, 0)",
          "",
          "[Removed Lines]",
          "1053:  for typeName, typeDef := range t.GetTypeDefinitions() {",
          "",
          "[Added Lines]",
          "1042:  for typeName, typeDef := range t.typeDefinitions {",
          "",
          "---------------"
        ],
        "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go": [
          "File: pkg/typesystem/typesystem_test.go -> pkg/typesystem/typesystem_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:  for _, test := range tests {",
          "42:   t.Run(test.name, func(t *testing.T) {",
          "44:    require.NoError(t, err)",
          "45:   })",
          "46:  }",
          "",
          "[Removed Lines]",
          "43:    _, err := New(test.model).Validate()",
          "",
          "[Added Lines]",
          "43:    _, err := NewAndValidate(test.model)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "534:  for _, test := range tests {",
          "535:   t.Run(test.name, func(t *testing.T) {",
          "537:    require.ErrorIs(t, err, test.err)",
          "538:   })",
          "539:  }",
          "",
          "[Removed Lines]",
          "536:    _, err := New(test.model).Validate()",
          "",
          "[Added Lines]",
          "536:    _, err := NewAndValidate(test.model)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "635:  for _, test := range tests {",
          "636:   t.Run(test.name, func(t *testing.T) {",
          "638:    require.NoError(t, err)",
          "639:   })",
          "640:  }",
          "",
          "[Removed Lines]",
          "637:    _, err := New(test.model).Validate()",
          "",
          "[Added Lines]",
          "637:    _, err := NewAndValidate(test.model)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1109:  for _, test := range tests {",
          "1110:   t.Run(test.name, func(t *testing.T) {",
          "1112:    require.EqualError(t, err, test.err.Error())",
          "1113:   })",
          "1114:  }",
          "",
          "[Removed Lines]",
          "1111:    _, err := New(test.model).Validate()",
          "",
          "[Added Lines]",
          "1111:    _, err := NewAndValidate(test.model)",
          "",
          "---------------"
        ]
      }
    }
  ]
}