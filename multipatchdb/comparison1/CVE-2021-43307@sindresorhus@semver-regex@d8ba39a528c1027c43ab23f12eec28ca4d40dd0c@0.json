{
  "cve_id": "CVE-2021-43307",
  "cve_desc": "An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the semver-regex npm package, when an attacker is able to supply arbitrary input to the test() method",
  "repo": "sindresorhus/semver-regex",
  "patch_hash": "d8ba39a528c1027c43ab23f12eec28ca4d40dd0c",
  "patch_info": {
    "commit_hash": "d8ba39a528c1027c43ab23f12eec28ca4d40dd0c",
    "repo": "sindresorhus/semver-regex",
    "commit_url": "https://github.com/sindresorhus/semver-regex/commit/d8ba39a528c1027c43ab23f12eec28ca4d40dd0c",
    "files": [
      "index.js",
      "package.json",
      "test.js"
    ],
    "message": "Fix ReDoS vulnerability",
    "before_after_code_files": [
      "index.js||index.js",
      "test.js||test.js"
    ]
  },
  "patch_diff": {
    "index.js||index.js": [
      "File: index.js -> index.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: export default function semverRegex() {",
      "3: }",
      "",
      "[Removed Lines]",
      "2:  return /(?:(?<=^v?|\\sv?)(?:(?:0|[1-9]\\d{0,9})\\.){2}(?:0|[1-9]\\d{0,9})(?:-(?:0|[1-9]\\d*?|[\\da-z-]*?[a-z-][\\da-z-]*?){0,100}(?:\\.(?:0|[1-9]\\d*?|[\\da-z-]*?[a-z-][\\da-z-]*?))*?){0,100}(?:\\+[\\da-z-]+?(?:\\.[\\da-z-]+?)*?){0,100}\\b){1,200}/gi;",
      "",
      "[Added Lines]",
      "2:  return /(?:(?<=^v?|\\sv?)(?:(?:0|[1-9]\\d{0,9}?)\\.){2}(?:0|[1-9]\\d{0,9}?)(?:-(?:0|[1-9]\\d*?|[\\da-z-]*?[a-z-][\\da-z-]*?){0,100}?(?:\\.(?:0|[1-9]\\d*?|[\\da-z-]*?[a-z-][\\da-z-]*?))*?){0,100}?(?:\\+[\\da-z-]+?(?:\\.[\\da-z-]+?)*?){0,100}?\\b){1,200}?/gi;",
      "",
      "---------------"
    ],
    "test.js||test.js": [
      "File: test.js -> test.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "119:   const difference = Date.now() - start;",
      "120:   t.true(difference < 10, `Execution time: ${difference}`);",
      "121:  }",
      "122: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "123:  for (let index = 1; index <= 20; index++) {",
      "124:   const start = Date.now();",
      "125:   const fixture = `0.0.1-${'-.--'.repeat(index)} `;",
      "126:   semverRegex().test(fixture);",
      "127:   const difference = Date.now() - start;",
      "128:   t.true(difference < 10, `Execution time: ${difference}`);",
      "129:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "29842b44320171e030d89fd0ff110d9f1f748c0d",
      "candidate_info": {
        "commit_hash": "29842b44320171e030d89fd0ff110d9f1f748c0d",
        "repo": "sindresorhus/semver-regex",
        "commit_url": "https://github.com/sindresorhus/semver-regex/commit/29842b44320171e030d89fd0ff110d9f1f748c0d",
        "files": [
          "index.js",
          "test.js"
        ],
        "message": "Improve regex\n\nCo-authored-by: FUJINAMI Hiroya <make.just.on@gmail.com>",
        "before_after_code_files": [
          "index.js||index.js",
          "test.js||test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "index.js||index.js",
            "test.js||test.js"
          ],
          "candidate": [
            "index.js||index.js",
            "test.js||test.js"
          ]
        }
      },
      "candidate_diff": {
        "index.js||index.js": [
          "File: index.js -> index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: export default function semverRegex() {",
          "3: }",
          "",
          "[Removed Lines]",
          "2:  return /(?<=^v?|\\sv?)(?:(?:0|[1-9]\\d{0,9}?)\\.){2}(?:0|[1-9]\\d{0,9})(?:-(?:--?|0|[1-9]\\d*|\\d*[a-z]+\\d*)){0,100}(?=$| |\\+|\\.)(?:(?<=-\\S+)(?:\\.(?:--?|[\\da-z-]*[a-z-]\\d*|0|[1-9]\\d*)){1,100}?)?(?!\\.)(?:\\+(?:[\\da-z]\\.?-?){1,100}?(?!\\w))?(?!\\+)/gi;",
          "",
          "[Added Lines]",
          "2:  return /(?<=^v?|\\sv?)(?:(?:0|[1-9]\\d{0,9}?)\\.){2}(?:0|[1-9]\\d{0,9})(?:-(?:--+)?(?:0|[1-9]\\d*|\\d*[a-z]+\\d*)){0,100}(?=$| |\\+|\\.)(?:(?<=-\\S+)(?:\\.(?:--?|[\\da-z-]*[a-z-]\\d*|0|[1-9]\\d*)){1,100}?)?(?!\\.)(?:\\+(?:[\\da-z]\\.?-?){1,100}?(?!\\w))?(?!\\+)/gi;",
          "",
          "---------------"
        ],
        "test.js||test.js": [
          "File: test.js -> test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:   const difference = Date.now() - start;",
          "227:   t.true(difference < 50, `Execution time: ${difference}`);",
          "228:  }",
          "229: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230:  for (let index = 1; index <= 30; index++) {",
          "231:   const start = Date.now();",
          "232:   const fixture = `0.0.1--${'--'.repeat(index)}\\u0000`;",
          "233:   semverRegex().test(fixture);",
          "234:   const difference = Date.now() - start;",
          "235:   t.true(difference < 50, `Execution time: ${difference}`);",
          "236:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e93d9c81ca2b27a7c63ae8f45725dfceb0df2d4a",
      "candidate_info": {
        "commit_hash": "e93d9c81ca2b27a7c63ae8f45725dfceb0df2d4a",
        "repo": "sindresorhus/semver-regex",
        "commit_url": "https://github.com/sindresorhus/semver-regex/commit/e93d9c81ca2b27a7c63ae8f45725dfceb0df2d4a",
        "files": [
          ".github/workflows/main.yml",
          "index.js",
          "package.json",
          "test.js"
        ],
        "message": "Fix some false positive matches (#23)\n\nCo-authored-by: Sindre Sorhus <sindresorhus@gmail.com>",
        "before_after_code_files": [
          "index.js||index.js",
          "test.js||test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "index.js||index.js",
            "test.js||test.js"
          ],
          "candidate": [
            "index.js||index.js",
            "test.js||test.js"
          ]
        }
      },
      "candidate_diff": {
        "index.js||index.js": [
          "File: index.js -> index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: export default function semverRegex() {",
          "3: }",
          "",
          "[Removed Lines]",
          "2:  return /(?:(?<=^v?|\\sv?)(?:(?:0|[1-9]\\d{0,9}?)\\.){2}(?:0|[1-9]\\d{0,9}?)(?:-(?:0|[1-9]\\d*?|[\\da-z-]*?[a-z-][\\da-z-]*?){0,100}?(?:\\.(?:0|[1-9]\\d*?|[\\da-z-]*?[a-z-][\\da-z-]*?))*?){0,100}?(?:\\+[\\da-z-]+?(?:\\.[\\da-z-]+?)*?){0,100}?\\b){1,200}?/gi;",
          "",
          "[Added Lines]",
          "2:  return /(?<=^v?|\\sv?)(?:(?:0|[1-9]\\d{0,9}?)\\.){2}(?:0|[1-9]\\d{0,9})(?:-(?:--?|0|[1-9]\\d*|\\d*[a-z]+\\d*)){0,100}(?=$| |\\+|\\.)(?:(?<=-\\S+)(?:\\.(?:--?|[\\da-z-]*[a-z-]\\d*|0|[1-9]\\d*)){1,100}?)?(?!\\.)(?:\\+(?:[\\da-z]\\.?-?){1,100}?(?!\\w))?(?!\\+)/gi;",
          "",
          "---------------"
        ],
        "test.js||test.js": [
          "File: test.js -> test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import test from 'ava';",
          "2: import semverRegex from './index.js';",
          "5:  '0.0.0',",
          "6:  '0.10.0',",
          "7:  'v1.0.0',",
          "8:  '0.0.0-foo',",
          "9:  '1.2.3-4',",
          "10:  '2.7.2+asdf',",
          "11:  '1.2.3-a.b.c.10.d.5',",
          "12:  '2.7.2-foo+bar',",
          "13:  '1.2.3-alpha.10.beta',",
          "14:  '1.2.3-alpha.10.beta+build.unicorn.rainbow',",
          "17: ];",
          "19: test('matches semver versions on test', t => {",
          "21:   t.regex(fixture, semverRegex());",
          "22:  }",
          "24:  t.notRegex('0.88', semverRegex());",
          "",
          "[Removed Lines]",
          "4: const fixtures = [",
          "15:  'foo 0.0.0 bar 0.0.0',",
          "16:  '99999.99999.99999'",
          "20:  for (const fixture of fixtures) {",
          "",
          "[Added Lines]",
          "2: import semver from 'semver';",
          "5: const validStrings = [",
          "10:  '0.0.0-foo-bar-baz',",
          "17:  '99999.99999.99999',",
          "20:  '0.0.4',",
          "21:  '1.2.3',",
          "22:  '10.20.30',",
          "23:  '1.1.2-prerelease+meta',",
          "24:  '1.1.2+meta',",
          "25:  '1.1.2+meta-valid',",
          "26:  '1.0.0-alpha',",
          "27:  '1.0.0-beta',",
          "28:  '1.0.0-alpha.beta',",
          "29:  '1.0.0-alpha.beta.1',",
          "30:  '1.0.0-alpha.1',",
          "31:  '1.0.0-alpha0.valid',",
          "32:  '1.0.0-alpha.va1id',",
          "33:  '1.0.0-alpha.0valid',",
          "34:  '1.0.0-alpha-a.b-c-somethinglong+build.1-aef.1-its-okay',",
          "35:  '1.0.0-rc.1+build.1',",
          "36:  '2.0.0-rc.1+build.123',",
          "37:  '1.2.3-beta',",
          "38:  '10.2.3-DEV-SNAPSHOT',",
          "39:  '1.2.3-SNAPSHOT-123',",
          "40:  '1.0.0',",
          "41:  '2.0.0',",
          "42:  '1.1.7',",
          "43:  '2.0.0+build.1848',",
          "44:  '2.0.1-alpha.1227',",
          "45:  '1.0.0-alpha+beta',",
          "46:  '1.2.3----RC-SNAPSHOT.12.9.1--.12+788',",
          "47:  '1.2.3----R-S.12.9.1--.12+meta',",
          "48:  '1.2.3----RC-SNAPSHOT.12.9.1--.12',",
          "49:  '1.0.0+0.build.1-rc.10000aaa-kk-0.1',",
          "51:  '1.0.0-0A.is.legal',",
          "52: ];",
          "54: const invalidStrings = [",
          "55:  '1',",
          "56:  '1.2',",
          "57:  '1.2.3-0123',",
          "58:  '1.2.3-0123.0123',",
          "59:  '1.1.2+.123',",
          "60:  '+invalid',",
          "61:  '-invalid',",
          "62:  '-invalid+invalid',",
          "63:  '-invalid.01',",
          "64:  'alpha',",
          "65:  'alpha.beta',",
          "66:  'alpha.beta.1',",
          "67:  'alpha.1',",
          "68:  'alpha+beta',",
          "69:  'alpha_beta',",
          "70:  'alpha.',",
          "71:  'alpha..',",
          "72:  'beta',",
          "73:  '1.0.0-alpha_beta',",
          "74:  '-alpha.',",
          "75:  '1.0.0-alpha..',",
          "76:  '1.0.0-alpha..1',",
          "77:  '1.0.0-alpha...1',",
          "78:  '1.0.0-alpha....1',",
          "79:  '1.0.0-alpha.....1',",
          "80:  '1.0.0-alpha......1',",
          "81:  '1.0.0-alpha.......1',",
          "82:  '01.1.1',",
          "83:  '1.01.1',",
          "84:  '1.1.01',",
          "85:  '1.2',",
          "86:  '1.2.3.DEV',",
          "87:  '1.2-SNAPSHOT',",
          "88:  '1.2.31.2.3----RC-SNAPSHOT.12.09.1--..12+788',",
          "89:  '1.2-RC-SNAPSHOT',",
          "90:  '-1.0.3-gamma+b7718',",
          "91:  '+justmeta',",
          "92:  '9.8.7+meta+meta',",
          "93:  '9.8.7-whatever+meta+meta',",
          "94:  '99999999999999999999999.999999999999999999.99999999999999999----RC-SNAPSHOT.12.09.1--------------------------------..12',",
          "95:  '1.0.0-beta@beta',",
          "99:  for (const fixture of validStrings) {",
          "101:   t.true(semver.valid(fixture) !== null);",
          "103:   if (!fixture.startsWith('v')) { // Should we trim v prefix?",
          "104:    t.deepEqual(fixture.match(semverRegex()), [fixture]);",
          "105:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: test('returns semver on match', t => {",
          "31:  t.deepEqual('0.0.0'.match(semverRegex()), ['0.0.0']);",
          "32:  t.deepEqual('foo 0.0.0 bar 0.1.1'.match(semverRegex()), ['0.0.0', '0.1.1']);",
          "33: });",
          "35: test('#7, does not return tag prefix', t => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:  t.deepEqual('1.2.3-alpha.10.beta'.match(semverRegex()), ['1.2.3-alpha.10.beta']);",
          "118:  t.deepEqual('0.0.0-foo-bar alpha.beta.1 1.2.31.2.3----RC-SNAPSHOT.12.09.1--..12+788 1.0.0-alpha+beta 1.2.3----RC-SNAPSHOT.12.9.1--.12+788 1.2 1.2.3-4'.match(semverRegex()), ['0.0.0-foo-bar', '1.0.0-alpha+beta', '1.2.3----RC-SNAPSHOT.12.9.1--.12+788', '1.2.3-4']);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37: });",
          "39: test('#14, does not match sub-strings of longer semver-similar strings, respect semver@2.0.0 clause 9', t => {",
          "84:  for (const string of invalidStrings) {",
          "85:   t.notRegex(string, semverRegex());",
          "86:  }",
          "87: });",
          "",
          "[Removed Lines]",
          "41:  const invalidStrings = [",
          "42:   '1',",
          "43:   '1.2',",
          "47:   '+invalid',",
          "48:   '-invalid',",
          "49:   '-invalid+invalid',",
          "50:   '-invalid.01',",
          "51:   'alpha',",
          "52:   'alpha.beta',",
          "53:   'alpha.beta.1',",
          "54:   'alpha.1',",
          "55:   'alpha+beta',",
          "56:   'alpha_beta',",
          "57:   'alpha.',",
          "58:   'alpha..',",
          "59:   'beta',",
          "61:   '-alpha.',",
          "69:   '01.1.1',",
          "70:   '1.01.1',",
          "71:   '1.1.01',",
          "72:   '1.2',",
          "74:   '1.2-SNAPSHOT',",
          "76:   '1.2-RC-SNAPSHOT',",
          "77:   '-1.0.3-gamma+b7718',",
          "78:   '+justmeta'",
          "82:  ];",
          "",
          "[Added Lines]",
          "128:   t.true(semver.valid(string) === null);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "93:   '1.2.0-alpha.10.beta+build.unicorn.rainbow',",
          "94:   '1.2.3-0.10.beta+build.unicorn.rainbow',",
          "95:   '1.2.3-alpha.0.beta+build.unicorn.rainbow',",
          "97:  ]) {",
          "98:   t.regex(string, semverRegex());",
          "99:  }",
          "100: });",
          "",
          "[Removed Lines]",
          "96:   '1.2.3-alpha.10.0+build.unicorn.rainbow'",
          "",
          "[Added Lines]",
          "139:   '1.2.3-alpha.10.0+build.unicorn.rainbow',",
          "142:   t.true(semver.valid(string) !== null);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "103: test('invalid version does not cause catatrophic backtracking', t => {",
          "104:  t.regex(",
          "105:   'v1.1.3-0aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$',",
          "107:  );",
          "110:  t.regex(",
          "111:   `v1.1.3-0aa${postfix}$`,",
          "113:  );",
          "116:   const start = Date.now();",
          "117:   const fixture = `0.0.0-0${'.-------'.repeat(index)}@`;",
          "118:   semverRegex().test(fixture);",
          "",
          "[Removed Lines]",
          "106:   semverRegex()",
          "109:  const postfix = '.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'.repeat(99999);",
          "112:   semverRegex()",
          "115:  for (let index = 1; index <= 50000; index++) {",
          "",
          "[Added Lines]",
          "150:   semverRegex(),",
          "153:  const postfix = '.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'.repeat(99_999);",
          "156:   semverRegex(),",
          "159:  for (let index = 1; index <= 50_000; index++) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "127:   const difference = Date.now() - start;",
          "128:   t.true(difference < 20, `Execution time: ${difference}`);",
          "129:  }",
          "130: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:  for (let index = 1; index <= 30; index++) {",
          "177:   const start = Date.now();",
          "178:   const fixtures = [",
          "179:    '0.0.1-i' + '--i-'.repeat(index) + '\\u0000',",
          "180:    '0' + ' 0.1.0-i0'.repeat(index) + '.1.1+1' + '1'.repeat(index) + 'A',",
          "181:    '1.0.1--' + '-'.repeat(index) + '\\u0000',",
          "182:    'g' + ' 0.0.1-i+'.repeat(index) + 'a' + 'v0'.repeat(index) + '\\u0000',",
          "183:   ];",
          "184:   for (const fixture of fixtures) {",
          "185:    semverRegex().test(fixture);",
          "186:   }",
          "188:   const difference = Date.now() - start;",
          "189:   t.true(difference < 20, `Execution time: ${difference}`);",
          "190:  }",
          "192:  for (let index = 1; index <= 100; index++) {",
          "193:   const start = Date.now();",
          "194:   const shuffle = array => array.sort(() => Math.random() - 0.5);",
          "196:   const rndstr = (() => {",
          "197:    const gen = (min, max) => max++ && Array.from({length: max - min}).map((s, i) => String.fromCodePoint(min + i));",
          "198:    const sets = {",
          "199:     num: gen(48, 57),",
          "200:     alphaLower: gen(97, 122),",
          "201:     alphaUpper: gen(65, 90),",
          "202:     special: [...'~!@#$%^&*()_+-=[]{}|;:\\'\",./<>?'],",
          "203:    };",
          "204:    function * iter(length, set) {",
          "205:     if (set.length === 0) {",
          "206:      set = Object.values(sets).flat();",
          "207:     }",
          "209:     for (let i = 0; i < length; i++) {",
          "210:      yield set[Math.trunc(Math.random() * set.length)];",
          "211:     }",
          "212:    }",
          "214:    return Object.assign(((length, ...set) => [...iter(length, set.flat())].join('')), sets);",
          "215:   })();",
          "216:   const fuzz = Array.from({length: 100}).map(() => rndstr(100 * Math.random(), rndstr.alphaUpper, rndstr.special, rndstr.alphaLower, rndstr.num));",
          "217:   const fixture = shuffle(Array.from({length: index}).map(() => [validStrings, invalidStrings, fuzz]).flat(2)).join(' ');",
          "219:   semverRegex().test(fixture);",
          "221:   const difference = Date.now() - start;",
          "222:   t.true(difference < 50, `Execution time: ${difference}`);",
          "223:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ddfeb8b1d9c67dff4c9aa6af318a2bb883783982",
      "candidate_info": {
        "commit_hash": "ddfeb8b1d9c67dff4c9aa6af318a2bb883783982",
        "repo": "sindresorhus/semver-regex",
        "commit_url": "https://github.com/sindresorhus/semver-regex/commit/ddfeb8b1d9c67dff4c9aa6af318a2bb883783982",
        "files": [
          "test.js"
        ],
        "message": "Fix CI",
        "before_after_code_files": [
          "test.js||test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test.js||test.js"
          ],
          "candidate": [
            "test.js||test.js"
          ]
        }
      },
      "candidate_diff": {
        "test.js||test.js": [
          "File: test.js -> test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:   const fixture = `0.0.0-0${'.-------'.repeat(index)}@`;",
          "118:   semverRegex().test(fixture);",
          "119:   const difference = Date.now() - start;",
          "121:  }",
          "123:  for (let index = 1; index <= 20; index++) {",
          "",
          "[Removed Lines]",
          "120:   t.true(difference < 10, `Execution time: ${difference}`);",
          "",
          "[Added Lines]",
          "120:   t.true(difference < 20, `Execution time: ${difference}`);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:   const fixture = `0.0.1-${'-.--'.repeat(index)} `;",
          "126:   semverRegex().test(fixture);",
          "127:   const difference = Date.now() - start;",
          "129:  }",
          "130: });",
          "",
          "[Removed Lines]",
          "128:   t.true(difference < 10, `Execution time: ${difference}`);",
          "",
          "[Added Lines]",
          "128:   t.true(difference < 20, `Execution time: ${difference}`);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "11c66245f4e1976dccc52977ed183696a21a3fd7",
      "candidate_info": {
        "commit_hash": "11c66245f4e1976dccc52977ed183696a21a3fd7",
        "repo": "sindresorhus/semver-regex",
        "commit_url": "https://github.com/sindresorhus/semver-regex/commit/11c66245f4e1976dccc52977ed183696a21a3fd7",
        "files": [
          "index.js",
          "readme.md",
          "test.js"
        ],
        "message": "Fix ReDoS vulnerability",
        "before_after_code_files": [
          "index.js||index.js",
          "test.js||test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "index.js||index.js",
            "test.js||test.js"
          ],
          "candidate": [
            "index.js||index.js",
            "test.js||test.js"
          ]
        }
      },
      "candidate_diff": {
        "index.js||index.js": [
          "File: index.js -> index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: export default function semverRegex() {",
          "3: }",
          "",
          "[Removed Lines]",
          "2:  return /(?<=^v?|\\sv?)(?:(?:0|[1-9]\\d*)\\.){2}(?:0|[1-9]\\d*)(?:-(?:0|[1-9]\\d*|[\\da-z-]*[a-z-][\\da-z-]*)(?:\\.(?:0|[1-9]\\d*|[\\da-z-]*[a-z-][\\da-z-]*))*)?(?:\\+[\\da-z-]+(?:\\.[\\da-z-]+)*)?\\b/gi;",
          "",
          "[Added Lines]",
          "2:  return /(?:(?<=^v?|\\sv?)(?:(?:0|[1-9]\\d{0,9})\\.){2}(?:0|[1-9]\\d{0,9})(?:-(?:0|[1-9]\\d*?|[\\da-z-]*?[a-z-][\\da-z-]*?){0,100}(?:\\.(?:0|[1-9]\\d*?|[\\da-z-]*?[a-z-][\\da-z-]*?))*?){0,100}(?:\\+[\\da-z-]+?(?:\\.[\\da-z-]+?)*?){0,100}\\b){1,200}/gi;",
          "",
          "---------------"
        ],
        "test.js||test.js": [
          "File: test.js -> test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  '2.7.2-foo+bar',",
          "13:  '1.2.3-alpha.10.beta',",
          "14:  '1.2.3-alpha.10.beta+build.unicorn.rainbow',",
          "16: ];",
          "18: test('matches semver versions on test', t => {",
          "",
          "[Removed Lines]",
          "15:  'foo 0.0.0 bar 0.0.0'",
          "",
          "[Added Lines]",
          "15:  'foo 0.0.0 bar 0.0.0',",
          "16:  '99999.99999.99999'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:   `v1.1.3-0aa${postfix}$`,",
          "111:   semverRegex()",
          "112:  );",
          "113: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:  for (let index = 1; index <= 50000; index++) {",
          "116:   const start = Date.now();",
          "117:   const fixture = `0.0.0-0${'.-------'.repeat(index)}@`;",
          "118:   semverRegex().test(fixture);",
          "119:   const difference = Date.now() - start;",
          "120:   t.true(difference < 10, `Execution time: ${difference}`);",
          "121:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}