{
  "cve_id": "CVE-2024-12678",
  "cve_desc": "Nomad Community and Nomad Enterprise (\"Nomad\") allocations are vulnerable to privilege escalation within a namespace through unredacted workload identity tokens. This vulnerability, identified as CVE-2024-12678, is fixed in Nomad Community Edition 1.9.4 and Nomad Enterprise 1.9.4, 1.8.8, and 1.7.16.",
  "repo": "hashicorp/nomad",
  "patch_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
  "patch_info": {
    "commit_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "files": [
      ".changelog/24683.txt",
      "command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go",
      "nomad/structs/structs.go"
    ],
    "message": "Backport of sec: fix alloc workload identity namespace permission into release/1.9.x (#24685)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
    "before_after_code_files": [
      "command/agent/node_endpoint.go||command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go",
      "nomad/structs/structs.go||nomad/structs/structs.go"
    ]
  },
  "patch_diff": {
    "command/agent/node_endpoint.go||command/agent/node_endpoint.go": [
      "File: command/agent/node_endpoint.go -> command/agent/node_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   out.Allocs = make([]*structs.Allocation, 0)",
      "106:  }",
      "107:  for _, alloc := range out.Allocs {",
      "108:   alloc.SetEventDisplayMessages()",
      "109:  }",
      "110:  return out.Allocs, nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   alloc = alloc.Sanitize()",
      "",
      "---------------"
    ],
    "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go": [
      "File: nomad/alloc_endpoint.go -> nomad/alloc_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    }",
      "176:    if out != nil {",
      "178:     if !aclObj.AllowClientOp() && !allowNsOp(aclObj, out.Namespace) {",
      "179:      return structs.NewErrUnknownAllocation(args.AllocID)",
      "",
      "[Removed Lines]",
      "175:    reply.Alloc = out",
      "",
      "[Added Lines]",
      "176:     out = out.Sanitize()",
      "177:     reply.Alloc = out",
      "",
      "---------------"
    ],
    "nomad/structs/structs.go||nomad/structs/structs.go": [
      "File: nomad/structs/structs.go -> nomad/structs/structs.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11199:  return a.ID",
      "11200: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11205: func (a *Allocation) Sanitize() *Allocation {",
      "11206:  if a == nil {",
      "11207:   return nil",
      "11208:  }",
      "11210:  if a.SignedIdentities == nil {",
      "11211:   return a",
      "11212:  }",
      "11214:  clean := a.Copy()",
      "11215:  clean.SignedIdentities = nil",
      "11216:  return clean",
      "11217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e84999b41c3536cd3f98f884335eae57f95a5b0c",
      "candidate_info": {
        "commit_hash": "e84999b41c3536cd3f98f884335eae57f95a5b0c",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/e84999b41c3536cd3f98f884335eae57f95a5b0c",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "chore(deps): bump github.com/containerd/go-cni from 1.1.9 to 1.1.11\n\nbackport of commit 96f5a092d9f99cc9bafc2c8a76e688d69d04614f (#24761)\n\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:  github.com/aws/aws-sdk-go v1.55.5",
          "22:  github.com/brianvoe/gofakeit/v6 v6.20.1",
          "23:  github.com/container-storage-interface/spec v1.10.0",
          "25:  github.com/containernetworking/cni v1.2.3",
          "26:  github.com/coreos/go-iptables v0.8.0",
          "27:  github.com/creack/pty v1.1.24",
          "",
          "[Removed Lines]",
          "24:  github.com/containerd/go-cni v1.1.9",
          "",
          "[Added Lines]",
          "24:  github.com/containerd/go-cni v1.1.11",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "347: github.com/containerd/console v1.0.1/go.mod h1:XUsP6YE/mKtz6bxc+I8UiKKTP04qjQL4qcS3XoQ5xkw=",
          "348: github.com/containerd/console v1.0.4 h1:F2g4+oChYvBTsASRTz8NP6iIAi97J3TtSAsLbIFn4ro=",
          "349: github.com/containerd/console v1.0.4/go.mod h1:YynlIjWYF8myEu6sdkwKIvGQq+cOckRm6So2avqoYAk=",
          "352: github.com/containerd/log v0.1.0 h1:TCJt7ioM2cr/tfR8GPbGf9/VRAX8D2B4PjzCpfX540I=",
          "353: github.com/containerd/log v0.1.0/go.mod h1:VRRf09a7mHDIRezVKTRCrOq78v577GXq3bSa3EhrzVo=",
          "354: github.com/containernetworking/cni v1.2.3 h1:hhOcjNVUQTnzdRJ6alC5XF+wd9mfGIUaj8FuJbEslXM=",
          "",
          "[Removed Lines]",
          "350: github.com/containerd/go-cni v1.1.9 h1:ORi7P1dYzCwVM6XPN4n3CbkuOx/NZ2DOqy+SHRdo9rU=",
          "351: github.com/containerd/go-cni v1.1.9/go.mod h1:XYrZJ1d5W6E2VOvjffL3IZq0Dz6bsVlERHbekNK90PM=",
          "",
          "[Added Lines]",
          "350: github.com/containerd/go-cni v1.1.11 h1:fWt1K15AmSLsEfa57N+qYw4NeGPiQKYq1pjNGJwV9mc=",
          "351: github.com/containerd/go-cni v1.1.11/go.mod h1:/Y/sL8yqYQn1ZG1om1OncJB1W4zN3YmjfP/ShCzG/OY=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f59f66bc3da93153fe001a9ae3ab3b78398f761",
      "candidate_info": {
        "commit_hash": "9f59f66bc3da93153fe001a9ae3ab3b78398f761",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/9f59f66bc3da93153fe001a9ae3ab3b78398f761",
        "files": [
          "command/agent/consul/connect.go",
          "command/agent/consul/connect_test.go",
          "nomad/structs/structs.go"
        ],
        "message": "backport of commit 067afcda26803363c2a5a2949338aca39fb1e937 (#24204)\n\nCo-authored-by: Daniel Bennett <dbennett@hashicorp.com>",
        "before_after_code_files": [
          "command/agent/consul/connect.go||command/agent/consul/connect.go",
          "command/agent/consul/connect_test.go||command/agent/consul/connect_test.go",
          "nomad/structs/structs.go||nomad/structs/structs.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [
            "nomad/structs/structs.go||nomad/structs/structs.go"
          ],
          "candidate": [
            "nomad/structs/structs.go||nomad/structs/structs.go"
          ]
        }
      },
      "candidate_diff": {
        "command/agent/consul/connect.go||command/agent/consul/connect.go": [
          "File: command/agent/consul/connect.go -> command/agent/consul/connect.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:   Mode:                mode,",
          "155:   LocalServiceAddress: proxy.LocalServiceAddress,",
          "156:   LocalServicePort:    proxy.LocalServicePort,",
          "158:   Upstreams:           connectUpstreams(proxy.Upstreams),",
          "159:   Expose:              expose,",
          "160:  }, nil",
          "",
          "[Removed Lines]",
          "157:   Config:              connectProxyConfig(proxy.Config, cPort, info),",
          "",
          "[Added Lines]",
          "157:   Config:              connectProxyConfig(proxy.Config, cPort, info, networks),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:  return gw",
          "244: }",
          "247:  if cfg == nil {",
          "248:   cfg = make(map[string]interface{})",
          "249:  }",
          "251:  cfg[\"bind_port\"] = port",
          "253:  tags := map[string]string{",
          "",
          "[Removed Lines]",
          "246: func connectProxyConfig(cfg map[string]interface{}, port int, info structs.AllocInfo) map[string]interface{} {",
          "250:  cfg[\"bind_address\"] = \"0.0.0.0\"",
          "",
          "[Added Lines]",
          "246: func connectProxyConfig(cfg map[string]interface{}, port int, info structs.AllocInfo, networks structs.Networks) map[string]interface{} {",
          "250:  if _, ok := cfg[\"bind_address\"]; !ok {",
          "251:   cfg[\"bind_address\"] = connectProxyBindAddress(networks)",
          "252:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "260:  return cfg",
          "261: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265: func connectProxyBindAddress(networks structs.Networks) string {",
          "266:  for _, n := range networks {",
          "267:   if n.Mode == \"bridge\" && n.IsIPv6() {",
          "268:    return \"::\"",
          "269:   }",
          "270:  }",
          "271:  return \"0.0.0.0\"",
          "272: }",
          "",
          "---------------"
        ],
        "command/agent/consul/connect_test.go||command/agent/consul/connect_test.go": [
          "File: command/agent/consul/connect_test.go -> command/agent/consul/connect_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "409:  ci.Parallel(t)",
          "411:  t.Run(\"nil map\", func(t *testing.T) {",
          "413:    \"bind_address\":     \"0.0.0.0\",",
          "414:    \"bind_port\":        42,",
          "415:    \"envoy_stats_tags\": []string{\"nomad.alloc_id=test_alloc1\"},",
          "417:  })",
          "419:  t.Run(\"pre-existing map\", func(t *testing.T) {",
          "421:    \"bind_address\":     \"0.0.0.0\",",
          "422:    \"bind_port\":        42,",
          "423:    \"foo\":              \"bar\",",
          "424:    \"envoy_stats_tags\": []string{\"nomad.alloc_id=test_alloc2\"},",
          "426:    \"foo\": \"bar\",",
          "428:  })",
          "429: }",
          "",
          "[Removed Lines]",
          "412:   require.Equal(t, map[string]interface{}{",
          "416:   }, connectProxyConfig(nil, 42, structs.AllocInfo{AllocID: \"test_alloc1\"}))",
          "420:   require.Equal(t, map[string]interface{}{",
          "425:   }, connectProxyConfig(map[string]interface{}{",
          "427:   }, 42, structs.AllocInfo{AllocID: \"test_alloc2\"}))",
          "",
          "[Added Lines]",
          "412:   must.Eq(t, map[string]any{",
          "416:   }, connectProxyConfig(nil, 42, structs.AllocInfo{AllocID: \"test_alloc1\"}, nil))",
          "420:   must.Eq(t, map[string]any{",
          "425:   }, connectProxyConfig(map[string]any{",
          "427:   }, 42, structs.AllocInfo{AllocID: \"test_alloc2\"}, nil))",
          "428:  })",
          "430:  t.Run(\"bind_address override\", func(t *testing.T) {",
          "431:   must.Eq(t, map[string]any{",
          "432:    \"bind_address\":     \"anything\",",
          "433:    \"bind_port\":        42,",
          "434:    \"envoy_stats_tags\": []string{\"nomad.alloc_id=custom_bind_alloc\"},",
          "435:   }, connectProxyConfig(map[string]any{",
          "436:    \"bind_address\": \"anything\",",
          "437:   }, 42, structs.AllocInfo{AllocID: \"custom_bind_alloc\"}, nil))",
          "438:  })",
          "440:  t.Run(\"bind_address ipv6\", func(t *testing.T) {",
          "441:   must.Eq(t, map[string]any{",
          "442:    \"bind_address\":     \"::\",",
          "443:    \"bind_port\":        42,",
          "444:    \"envoy_stats_tags\": []string{\"nomad.alloc_id=ipv6_alloc\"},",
          "445:   }, connectProxyConfig(map[string]any{",
          "446:    \"bind_address\": \"::\",",
          "447:   }, 42, structs.AllocInfo{AllocID: \"ipv6_alloc\"}, []*structs.NetworkResource{",
          "448:    {Mode: \"bridge\", IP: \"fd00:a110:c8::1\"},",
          "449:   }))",
          "",
          "---------------"
        ],
        "nomad/structs/structs.go||nomad/structs/structs.go": [
          "File: nomad/structs/structs.go -> nomad/structs/structs.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3037:  return labelValues",
          "3038: }",
          "3041: type Networks []*NetworkResource",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3040: func (n *NetworkResource) IsIPv6() bool {",
          "3041:  ip := net.ParseIP(n.IP)",
          "3042:  return ip != nil && ip.To4() == nil",
          "3043: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c45186e7ad671fb7b5dff4e4c887bf615fc6f27",
      "candidate_info": {
        "commit_hash": "0c45186e7ad671fb7b5dff4e4c887bf615fc6f27",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/0c45186e7ad671fb7b5dff4e4c887bf615fc6f27",
        "files": [
          ".changelog/24157.txt",
          "api/tasks.go",
          "api/tasks_test.go",
          "client/allocrunner/taskrunner/artifact_hook.go",
          "client/allocrunner/taskrunner/getter/params.go",
          "client/allocrunner/taskrunner/getter/params_test.go",
          "client/allocrunner/taskrunner/getter/sandbox.go",
          "client/allocrunner/taskrunner/getter/sandbox_test.go",
          "client/allocrunner/taskrunner/getter/util.go",
          "client/allocrunner/taskrunner/getter/z_getter_cmd.go",
          "client/interfaces/client.go",
          "command/agent/job_endpoint.go",
          "command/agent/job_endpoint_test.go",
          "nomad/structs/diff_test.go",
          "nomad/structs/structs.go",
          "nomad/structs/structs_test.go",
          "website/content/docs/job-specification/artifact.mdx"
        ],
        "message": "jobspec: add a chown option to artifact block (#24157)\n\n* jobspec: add a chown option to artifact block\n\nThis PR adds a boolean 'chown' field to the artifact block.\n\nIt indicates whether the Nomad client should chown the downloaded files\nand directories to be owned by the task.user. This is useful for drivers\nlike raw_exec and exec2 which are subject to the host filesystem user\npermissions structure. Before, these drivers might not be able to use or\nmanage the downloaded artifacts since they would be owned by the root\nuser on a typical Nomad client configuration.\n\n* api: no need for pointer of chown field",
        "before_after_code_files": [
          "api/tasks.go||api/tasks.go",
          "api/tasks_test.go||api/tasks_test.go",
          "client/allocrunner/taskrunner/artifact_hook.go||client/allocrunner/taskrunner/artifact_hook.go",
          "client/allocrunner/taskrunner/getter/params.go||client/allocrunner/taskrunner/getter/params.go",
          "client/allocrunner/taskrunner/getter/params_test.go||client/allocrunner/taskrunner/getter/params_test.go",
          "client/allocrunner/taskrunner/getter/sandbox.go||client/allocrunner/taskrunner/getter/sandbox.go",
          "client/allocrunner/taskrunner/getter/sandbox_test.go||client/allocrunner/taskrunner/getter/sandbox_test.go",
          "client/allocrunner/taskrunner/getter/util.go||client/allocrunner/taskrunner/getter/util.go",
          "client/allocrunner/taskrunner/getter/z_getter_cmd.go||client/allocrunner/taskrunner/getter/z_getter_cmd.go",
          "client/interfaces/client.go||client/interfaces/client.go",
          "command/agent/job_endpoint.go||command/agent/job_endpoint.go",
          "command/agent/job_endpoint_test.go||command/agent/job_endpoint_test.go",
          "nomad/structs/diff_test.go||nomad/structs/diff_test.go",
          "nomad/structs/structs.go||nomad/structs/structs.go",
          "nomad/structs/structs_test.go||nomad/structs/structs_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [
            "nomad/structs/structs.go||nomad/structs/structs.go"
          ],
          "candidate": [
            "nomad/structs/structs.go||nomad/structs/structs.go"
          ]
        }
      },
      "candidate_diff": {
        "api/tasks.go||api/tasks.go": [
          "File: api/tasks.go -> api/tasks.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "864:  GetterMode     *string           `mapstructure:\"mode\" hcl:\"mode,optional\"`",
          "865:  GetterInsecure *bool             `mapstructure:\"insecure\" hcl:\"insecure,optional\"`",
          "866:  RelativeDest   *string           `mapstructure:\"destination\" hcl:\"destination,optional\"`",
          "867: }",
          "869: func (a *TaskArtifact) Canonicalize() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "867:  Chown          bool              `mapstructure:\"chown\" hcl:\"chown,optional\"`",
          "",
          "---------------"
        ],
        "api/tasks_test.go||api/tasks_test.go": [
          "File: api/tasks_test.go -> api/tasks_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "321:  must.Eq(t, \"local/foo.txt\", filepath.ToSlash(*a.RelativeDest))",
          "322:  must.Nil(t, a.GetterOptions)",
          "323:  must.Nil(t, a.GetterHeaders)",
          "324: }",
          "326: func TestTask_VolumeMount(t *testing.T) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324:  must.Eq(t, false, a.Chown)",
          "",
          "---------------"
        ],
        "client/allocrunner/taskrunner/artifact_hook.go||client/allocrunner/taskrunner/artifact_hook.go": [
          "File: client/allocrunner/taskrunner/artifact_hook.go -> client/allocrunner/taskrunner/artifact_hook.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:  return h",
          "32: }",
          "35:  defer wg.Done()",
          "36:  for artifact := range jobs {",
          "37:   aid := artifact.Hash()",
          "",
          "[Removed Lines]",
          "34: func (h *artifactHook) doWork(req *interfaces.TaskPrestartRequest, resp *interfaces.TaskPrestartResponse, jobs chan *structs.TaskArtifact, errorChannel chan error, wg *sync.WaitGroup, responseStateMutex *sync.Mutex) {",
          "",
          "[Added Lines]",
          "34: func (h *artifactHook) doWork(",
          "35:  req *interfaces.TaskPrestartRequest,",
          "36:  resp *interfaces.TaskPrestartResponse,",
          "37:  jobs chan *structs.TaskArtifact,",
          "38:  errorChannel chan error,",
          "39:  wg *sync.WaitGroup,",
          "40:  responseStateMutex *sync.Mutex,",
          "41: ) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   h.logger.Debug(\"downloading artifact\", \"artifact\", artifact.GetterSource, \"aid\", aid)",
          "49:    wrapped := structs.NewRecoverableError(",
          "50:     fmt.Errorf(\"failed to download artifact %q: %v\", artifact.GetterSource, err),",
          "51:     true,",
          "",
          "[Removed Lines]",
          "48:   if err := h.getter.Get(req.TaskEnv, artifact); err != nil {",
          "",
          "[Added Lines]",
          "55:   if err := h.getter.Get(req.TaskEnv, artifact, req.Task.User); err != nil {",
          "",
          "---------------"
        ],
        "client/allocrunner/taskrunner/getter/params.go||client/allocrunner/taskrunner/getter/params.go": [
          "File: client/allocrunner/taskrunner/getter/params.go -> client/allocrunner/taskrunner/getter/params.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:  AllocDir string `json:\"alloc_dir\"`",
          "47:  TaskDir  string `json:\"task_dir\"`",
          "48: }",
          "50: func (p *parameters) reader() io.Reader {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:  User     string `json:\"user\"`",
          "49:  Chown    bool   `json:\"chown\"`",
          "",
          "---------------"
        ],
        "client/allocrunner/taskrunner/getter/params_test.go||client/allocrunner/taskrunner/getter/params_test.go": [
          "File: client/allocrunner/taskrunner/getter/params_test.go -> client/allocrunner/taskrunner/getter/params_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     \"X-Nomad-Artifact\": [\"hi\"]",
          "40:   },",
          "41:   \"alloc_dir\": \"/path/to/alloc\",",
          "43: }`",
          "45: var paramsAsStruct = &parameters{",
          "",
          "[Removed Lines]",
          "42:   \"task_dir\": \"/path/to/alloc/task\"",
          "",
          "[Added Lines]",
          "42:   \"task_dir\": \"/path/to/alloc/task\",",
          "43:   \"chown\": true,",
          "44:   \"user\":\"nobody\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:  Headers: map[string][]string{",
          "66:   \"X-Nomad-Artifact\": {\"hi\"},",
          "67:  },",
          "68: }",
          "70: func TestParameters_reader(t *testing.T) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:  User:  \"nobody\",",
          "71:  Chown: true,",
          "",
          "---------------"
        ],
        "client/allocrunner/taskrunner/getter/sandbox.go||client/allocrunner/taskrunner/getter/sandbox.go": [
          "File: client/allocrunner/taskrunner/getter/sandbox.go -> client/allocrunner/taskrunner/getter/sandbox.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:  ac     *config.ArtifactConfig",
          "25: }",
          "30:  source, err := getURL(env, artifact)",
          "31:  if err != nil {",
          "",
          "[Removed Lines]",
          "27: func (s *Sandbox) Get(env interfaces.EnvReplacer, artifact *structs.TaskArtifact) error {",
          "28:  s.logger.Debug(\"get\", \"source\", artifact.GetterSource, \"destination\", artifact.RelativeDest)",
          "",
          "[Added Lines]",
          "27: func (s *Sandbox) Get(env interfaces.EnvReplacer, artifact *structs.TaskArtifact, user string) error {",
          "28:  s.logger.Debug(\"get\", \"source\", artifact.GetterSource, \"destination\", artifact.RelativeDest, \"user\", user)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:   AllocDir: allocDir,",
          "68:   TaskDir:  taskDir,",
          "69:  }",
          "71:  if err = s.runCmd(params); err != nil {",
          "72:   return err",
          "73:  }",
          "74:  return nil",
          "75: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:   User:     user,",
          "70:   Chown:    artifact.Chown,",
          "",
          "---------------"
        ],
        "client/allocrunner/taskrunner/getter/sandbox_test.go||client/allocrunner/taskrunner/getter/sandbox_test.go": [
          "File: client/allocrunner/taskrunner/getter/sandbox_test.go -> client/allocrunner/taskrunner/getter/sandbox_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"net/http/httptest\"",
          "9:  \"os\"",
          "10:  \"path/filepath\"",
          "11:  \"testing\"",
          "12:  \"time\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  \"syscall\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   RelativeDest: \"local/downloads\",",
          "47:  }",
          "50:  must.NoError(t, err)",
          "52:  b, err := os.ReadFile(filepath.Join(taskDir, \"local\", \"downloads\", \"go.mod\"))",
          "",
          "[Removed Lines]",
          "49:  err := sbox.Get(env, artifact)",
          "",
          "[Added Lines]",
          "50:  err := sbox.Get(env, artifact, \"nobody\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:   RelativeDest: \"local/downloads\",",
          "75:  }",
          "78:  must.Error(t, err)",
          "79:  must.StrContains(t, err.Error(), \"x509: certificate signed by unknown authority\")",
          "81:  artifact.GetterInsecure = true",
          "83:  must.NoError(t, err)",
          "84: }",
          "",
          "[Removed Lines]",
          "77:  err := sbox.Get(env, artifact)",
          "82:  err = sbox.Get(env, artifact)",
          "",
          "[Added Lines]",
          "78:  err := sbox.Get(env, artifact, \"nobody\")",
          "83:  err = sbox.Get(env, artifact, \"nobody\")",
          "87: func TestSandbox_Get_chown(t *testing.T) {",
          "88:  testutil.RequireRoot(t)",
          "89:  logger := testlog.HCLogger(t)",
          "91:  ac := artifactConfig(10 * time.Second)",
          "92:  sbox := New(ac, logger)",
          "94:  _, taskDir := SetupDir(t)",
          "95:  env := noopTaskEnv(taskDir)",
          "97:  artifact := &structs.TaskArtifact{",
          "98:   GetterSource: \"https://raw.githubusercontent.com/hashicorp/go-set/main/go.mod\",",
          "99:   RelativeDest: \"local/downloads\",",
          "100:   Chown:        true,",
          "101:  }",
          "103:  err := sbox.Get(env, artifact, \"nobody\")",
          "104:  must.NoError(t, err)",
          "106:  info, err := os.Stat(filepath.Join(taskDir, \"local\", \"downloads\"))",
          "107:  must.NoError(t, err)",
          "109:  uid := info.Sys().(*syscall.Stat_t).Uid",
          "110:  must.Eq(t, 65534, uid) // nobody's conventional uid",
          "111: }",
          "",
          "---------------"
        ],
        "client/allocrunner/taskrunner/getter/util.go||client/allocrunner/taskrunner/getter/util.go": [
          "File: client/allocrunner/taskrunner/getter/util.go -> client/allocrunner/taskrunner/getter/util.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:  \"os\"",
          "12:  \"os/exec\"",
          "13:  \"path/filepath\"",
          "14:  \"sort\"",
          "15:  \"strings\"",
          "16:  \"unicode\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:  \"runtime\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:  \"github.com/hashicorp/go-getter\"",
          "19:  \"github.com/hashicorp/nomad/client/interfaces\"",
          "20:  \"github.com/hashicorp/nomad/helper/subproc\"",
          "21:  \"github.com/hashicorp/nomad/nomad/structs\"",
          "22: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:  \"github.com/hashicorp/nomad/helper/users\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:  }",
          "85: }",
          "87: func isInsecure(artifact *structs.TaskArtifact) bool {",
          "88:  return artifact.GetterInsecure",
          "89: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: func chownDestination(destination, username string) error {",
          "90:  if destination == \"\" || username == \"\" {",
          "91:   return nil",
          "92:  }",
          "94:  if os.Geteuid() != 0 {",
          "95:   return nil",
          "96:  }",
          "98:  if runtime.GOOS == \"windows\" {",
          "99:   return nil",
          "100:  }",
          "102:  uid, gid, _, err := users.LookupUnix(username)",
          "103:  if err != nil {",
          "104:   return err",
          "105:  }",
          "107:  return filepath.Walk(destination, func(path string, info os.FileInfo, err error) error {",
          "108:   if err != nil {",
          "109:    return err",
          "110:   }",
          "111:   return os.Chown(path, uid, gid)",
          "112:  })",
          "113: }",
          "",
          "---------------"
        ],
        "client/allocrunner/taskrunner/getter/z_getter_cmd.go||client/allocrunner/taskrunner/getter/z_getter_cmd.go": [
          "File: client/allocrunner/taskrunner/getter/z_getter_cmd.go -> client/allocrunner/taskrunner/getter/z_getter_cmd.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:    return subproc.ExitFailure",
          "52:   }",
          "54:   subproc.Print(\"artifact download was a success\")",
          "55:   return subproc.ExitSuccess",
          "56:  })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:   if env.Chown {",
          "57:    err := chownDestination(env.Destination, env.User)",
          "58:    if err != nil {",
          "59:     subproc.Print(\"failed to chown artifact: %v\", err)",
          "60:     return subproc.ExitFailure",
          "61:    }",
          "62:   }",
          "",
          "---------------"
        ],
        "client/interfaces/client.go||client/interfaces/client.go": [
          "File: client/interfaces/client.go -> client/interfaces/client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: type ArtifactGetter interface {",
          "45: }",
          "",
          "[Removed Lines]",
          "44:  Get(EnvReplacer, *structs.TaskArtifact) error",
          "",
          "[Added Lines]",
          "44:  Get(EnvReplacer, *structs.TaskArtifact, string) error",
          "",
          "---------------"
        ],
        "command/agent/job_endpoint.go||command/agent/job_endpoint.go": [
          "File: command/agent/job_endpoint.go -> command/agent/job_endpoint.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1426:      GetterMode:     *ta.GetterMode,",
          "1427:      GetterInsecure: *ta.GetterInsecure,",
          "1428:      RelativeDest:   *ta.RelativeDest,",
          "1429:     })",
          "1430:   }",
          "1431:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1429:      Chown:          ta.Chown,",
          "",
          "---------------"
        ],
        "command/agent/job_endpoint_test.go||command/agent/job_endpoint_test.go": [
          "File: command/agent/job_endpoint_test.go -> command/agent/job_endpoint_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2932:         },",
          "2933:         GetterMode:   pointer.Of(\"dir\"),",
          "2934:         RelativeDest: pointer.Of(\"dest\"),",
          "2935:        },",
          "2936:       },",
          "2937:       Vault: &api.Vault{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2935:         Chown:        true,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3387:         },",
          "3388:         GetterMode:   \"dir\",",
          "3389:         RelativeDest: \"dest\",",
          "3390:        },",
          "3391:       },",
          "3392:       Vault: &structs.Vault{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3391:         Chown:        true,",
          "",
          "---------------"
        ],
        "nomad/structs/diff_test.go||nomad/structs/diff_test.go": [
          "File: nomad/structs/diff_test.go -> nomad/structs/diff_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6059:       },",
          "6060:       GetterMode:   \"dir\",",
          "6061:       RelativeDest: \"bar\",",
          "6062:      },",
          "6063:     },",
          "6064:    },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6062:       Chown:        false,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6082:       },",
          "6083:       GetterMode:   \"file\",",
          "6084:       RelativeDest: \"bam\",",
          "6085:      },",
          "6086:     },",
          "6087:    },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6086:       Chown:        true,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6104:       Type: DiffTypeAdded,",
          "6105:       Name: \"Artifact\",",
          "6106:       Fields: []*FieldDiff{",
          "6107:        {",
          "6108:         Type: DiffTypeAdded,",
          "6109:         Name: \"GetterHeaders[User-Agent]\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6109:        {",
          "6110:         Type: DiffTypeAdded,",
          "6111:         Name: \"Chown\",",
          "6112:         Old:  \"\",",
          "6113:         New:  \"true\",",
          "6114:        },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6152:       Type: DiffTypeDeleted,",
          "6153:       Name: \"Artifact\",",
          "6154:       Fields: []*FieldDiff{",
          "6155:        {",
          "6156:         Type: DiffTypeDeleted,",
          "6157:         Name: \"GetterHeaders[User]\",",
          "6158:         Old:  \"user1\",",
          "6159:         New:  \"\",",
          "6160:        },",
          "6162:        {",
          "6163:         Type: DiffTypeDeleted,",
          "6164:         Name: \"GetterInsecure\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6163:        {",
          "6164:         Type: DiffTypeDeleted,",
          "6165:         Name: \"Chown\",",
          "6166:         Old:  \"false\",",
          "6167:         New:  \"\",",
          "6168:        },",
          "",
          "---------------"
        ],
        "nomad/structs/structs.go||nomad/structs/structs.go": [
          "File: nomad/structs/structs.go -> nomad/structs/structs.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9817:  RelativeDest string",
          "9818: }",
          "9820: func (ta *TaskArtifact) Equal(o *TaskArtifact) bool {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9822:  Chown bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9834:   return false",
          "9835:  case ta.RelativeDest != o.RelativeDest:",
          "9836:   return false",
          "9837:  }",
          "9838:  return true",
          "9839: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9842:  case ta.Chown != o.Chown:",
          "9843:   return false",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9849:   GetterMode:     ta.GetterMode,",
          "9850:   GetterInsecure: ta.GetterInsecure,",
          "9851:   RelativeDest:   ta.RelativeDest,",
          "9852:  }",
          "9853: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9859:   Chown:          ta.Chown,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9890:  _, _ = h.Write([]byte(ta.GetterMode))",
          "9891:  _, _ = h.Write([]byte(strconv.FormatBool(ta.GetterInsecure)))",
          "9892:  _, _ = h.Write([]byte(ta.RelativeDest))",
          "9893:  return base64.RawStdEncoding.EncodeToString(h.Sum(nil))",
          "9894: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9901:  _, _ = h.Write([]byte(strconv.FormatBool(ta.Chown)))",
          "",
          "---------------"
        ],
        "nomad/structs/structs_test.go||nomad/structs/structs_test.go": [
          "File: nomad/structs/structs_test.go -> nomad/structs/structs_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5065:    GetterInsecure: true,",
          "5066:    RelativeDest:   \"i\",",
          "5067:   },",
          "5068:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5068:   {",
          "5069:    GetterSource: \"b\",",
          "5070:    GetterOptions: map[string]string{",
          "5071:     \"c\": \"c\",",
          "5072:     \"d\": \"e\",",
          "5073:    },",
          "5074:    GetterMode:     \"g\",",
          "5075:    GetterInsecure: true,",
          "5076:    RelativeDest:   \"i\",",
          "5077:    Chown:          true,",
          "5078:   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7860:  ci.Parallel(t)",
          "7862:  must.Equal[*TaskArtifact](t, nil, nil)",
          "7865:  must.StructEqual(t, &TaskArtifact{",
          "7866:   GetterSource:  \"source\",",
          "",
          "[Removed Lines]",
          "7863:  must.NotEqual[*TaskArtifact](t, nil, new(TaskArtifact))",
          "",
          "[Added Lines]",
          "7874:  must.NotEqual(t, nil, new(TaskArtifact))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7883:  }, {",
          "7884:   Field: \"RelativeDest\",",
          "7885:   Apply: func(ta *TaskArtifact) { ta.RelativeDest = \"./alloc\" },",
          "7887: }",
          "7889: func TestVault_Equal(t *testing.T) {",
          "",
          "[Removed Lines]",
          "7886:  }})",
          "",
          "[Added Lines]",
          "7897:  }, {",
          "7898:   Field: \"Chown\",",
          "7899:   Apply: func(ta *TaskArtifact) { ta.Chown = true },",
          "7900:  },",
          "7901:  })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b36261d96174698bc186671a2d27137d42ac75f7",
      "candidate_info": {
        "commit_hash": "b36261d96174698bc186671a2d27137d42ac75f7",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/b36261d96174698bc186671a2d27137d42ac75f7",
        "files": [
          "drivers/docker/stats.go",
          "helper/funcs.go"
        ],
        "message": "backport of commit a9e7166b6b182e31d438be9c75c438bcfc41c951 (#24527)\n\nCo-authored-by: Juana De La Cuesta <juanita.delacuestamorales@hashicorp.com>",
        "before_after_code_files": [
          "drivers/docker/stats.go||drivers/docker/stats.go",
          "helper/funcs.go||helper/funcs.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/docker/stats.go||drivers/docker/stats.go": [
          "File: drivers/docker/stats.go -> drivers/docker/stats.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "93: func (h *taskHandle) collectStats(ctx context.Context, destCh *usageSender, interval time.Duration, compute cpustats.Compute) {",
          "94:  defer destCh.close()",
          "97:  defer cancel()",
          "125:  for {",
          "126:   select {",
          "",
          "[Removed Lines]",
          "96:  timer, cancel := helper.NewSafeTimer(interval)",
          "102:  statsReader, err := h.dockerClient.ContainerStats(ctx, h.containerID, true)",
          "103:  if err != nil && err != io.EOF {",
          "104:   h.logger.Debug(\"error collecting stats from container\", \"error\", err)",
          "105:   return",
          "106:  }",
          "107:  defer statsReader.Body.Close()",
          "109:  collectOnce := func() {",
          "110:   defer timer.Reset(interval)",
          "111:   var stats *containerapi.Stats",
          "112:   err := json.NewDecoder(statsReader.Body).Decode(&stats)",
          "113:   if err != nil && err != io.EOF {",
          "114:    h.logger.Debug(\"error decoding stats data from container\", \"error\", err)",
          "115:    return",
          "116:   }",
          "117:   if stats == nil {",
          "118:    h.logger.Debug(\"error decoding stats data: stats were nil\")",
          "119:    return",
          "120:   }",
          "121:   resourceUsage := util.DockerStatsToTaskResourceUsage(stats, compute)",
          "122:   destCh.send(resourceUsage)",
          "123:  }",
          "",
          "[Added Lines]",
          "96:  ticker, cancel := helper.NewSafeTicker(interval)",
          "98:  var stats *containerapi.Stats",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:    return",
          "129:   case <-h.doneCh:",
          "130:    return",
          "133:   }",
          "134:  }",
          "135: }",
          "",
          "[Removed Lines]",
          "131:   case <-timer.C:",
          "132:    collectOnce()",
          "",
          "[Added Lines]",
          "106:   case <-ticker.C:",
          "111:    statsReader, err := h.dockerClient.ContainerStats(ctx, h.containerID, true)",
          "112:    if err != nil && err != io.EOF {",
          "113:     h.logger.Debug(\"error collecting stats from container\", \"error\", err)",
          "114:     return",
          "115:    }",
          "117:    err = json.NewDecoder(statsReader.Body).Decode(&stats)",
          "118:    statsReader.Body.Close()",
          "119:    if err != nil && err != io.EOF {",
          "120:     h.logger.Error(\"error decoding stats data from container\", \"error\", err)",
          "121:     return",
          "122:    }",
          "124:    if stats == nil {",
          "125:     h.logger.Error(\"error decoding stats data: stats were nil\")",
          "126:     return",
          "127:    }",
          "129:    resourceUsage := util.DockerStatsToTaskResourceUsage(stats, compute)",
          "130:    destCh.send(resourceUsage)",
          "",
          "---------------"
        ],
        "helper/funcs.go||helper/funcs.go": [
          "File: helper/funcs.go -> helper/funcs.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:  return t, cancel",
          "388: }",
          "392: func NewStoppedTimer() (*time.Timer, StopFunc) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "395: func NewSafeTicker(duration time.Duration) (*time.Ticker, StopFunc) {",
          "396:  if duration <= 0 {",
          "401:   duration = 1",
          "402:  }",
          "404:  t := time.NewTicker(duration)",
          "405:  cancel := func() {",
          "406:   t.Stop()",
          "407:  }",
          "409:  return t, cancel",
          "410: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8fe803a84d860f24b7a281235feb7836405bee6a",
      "candidate_info": {
        "commit_hash": "8fe803a84d860f24b7a281235feb7836405bee6a",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/8fe803a84d860f24b7a281235feb7836405bee6a",
        "files": [
          ".changelog/24650.txt",
          "client/allocrunner/cni/bridge.go",
          "client/allocrunner/cni/plugins.go",
          "client/allocrunner/test_fixtures/bad_input.conflist.json",
          "client/allocrunner/test_fixtures/consul-cni.conflist.json",
          "client/allocrunner/test_fixtures/empty.conflist.json",
          "client/allocrunner/test_fixtures/hairpin.conflist.json",
          "client/allocrunner/test_fixtures/ipv6.conflist.json"
        ],
        "message": "Backport of CNI: use tmpfs location for ipam plugin into release/1.9.x (#24681)\n\nCo-authored-by: Tim Gross <tgross@hashicorp.com>",
        "before_after_code_files": [
          "client/allocrunner/cni/bridge.go||client/allocrunner/cni/bridge.go",
          "client/allocrunner/cni/plugins.go||client/allocrunner/cni/plugins.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/allocrunner/cni/bridge.go||client/allocrunner/cni/bridge.go": [
          "File: client/allocrunner/cni/bridge.go -> client/allocrunner/cni/bridge.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:    ForceAddress: true,",
          "59:    HairpinMode:  conf.HairpinMode,",
          "60:    Ipam: IPAM{",
          "64:    },",
          "65:   },",
          "66:   Firewall{",
          "",
          "[Removed Lines]",
          "61:     Type:   \"host-local\",",
          "62:     Ranges: ipRanges,",
          "63:     Routes: ipRoutes,",
          "",
          "[Added Lines]",
          "61:     Type:    \"host-local\",",
          "62:     Ranges:  ipRanges,",
          "63:     Routes:  ipRoutes,",
          "64:     DataDir: \"/var/run/cni\",",
          "",
          "---------------"
        ],
        "client/allocrunner/cni/plugins.go||client/allocrunner/cni/plugins.go": [
          "File: client/allocrunner/cni/plugins.go -> client/allocrunner/cni/plugins.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  Ipam         IPAM   `json:\"ipam\"`",
          "21: }",
          "22: type IPAM struct {",
          "26: }",
          "27: type Range struct {",
          "28:  Subnet string `json:\"subnet\"`",
          "",
          "[Removed Lines]",
          "23:  Type   string    `json:\"type\"`",
          "24:  Ranges [][]Range `json:\"ranges\"`",
          "25:  Routes []Route   `json:\"routes\"`",
          "",
          "[Added Lines]",
          "23:  Type    string    `json:\"type\"`",
          "24:  Ranges  [][]Range `json:\"ranges\"`",
          "25:  Routes  []Route   `json:\"routes\"`",
          "26:  DataDir string    `json:\"dataDir\"`",
          "",
          "---------------"
        ]
      }
    }
  ]
}