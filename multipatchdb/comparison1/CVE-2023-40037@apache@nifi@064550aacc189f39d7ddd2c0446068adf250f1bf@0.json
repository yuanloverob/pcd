{
  "cve_id": "CVE-2023-40037",
  "cve_desc": "Apache NiFi 1.21.0 through 1.23.0 support JDBC and JNDI JMS access in several Processors and Controller Services with connection URL validation that does not provide sufficient protection against crafted inputs. An authenticated and authorized user can bypass connection URL validation using custom input formatting. The resolution enhances connection URL validation and introduces validation for additional related properties. Upgrading to Apache NiFi 1.23.1 is the recommended mitigation.",
  "repo": "apache/nifi",
  "patch_hash": "064550aacc189f39d7ddd2c0446068adf250f1bf",
  "patch_info": {
    "commit_hash": "064550aacc189f39d7ddd2c0446068adf250f1bf",
    "repo": "apache/nifi",
    "commit_url": "https://github.com/apache/nifi/commit/064550aacc189f39d7ddd2c0446068adf250f1bf",
    "files": [
      "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java",
      "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java",
      "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java",
      "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java",
      "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java",
      "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java",
      "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java",
      "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java"
    ],
    "message": "NIFI-11920 Improved JDBC and JNDI JMS Connection URL Validation\n\nSigned-off-by: Matt Burgess <mattyb149@apache.org>",
    "before_after_code_files": [
      "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java||nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java",
      "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java",
      "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java",
      "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java",
      "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java",
      "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java",
      "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java",
      "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java"
    ]
  },
  "patch_diff": {
    "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java||nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java": [
      "File: nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java -> nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: import org.apache.nifi.components.resource.ResourceType;",
      "23: import org.apache.nifi.dbcp.ConnectionUrlValidator;",
      "24: import org.apache.nifi.dbcp.DBCPValidator;",
      "25: import org.apache.nifi.expression.ExpressionLanguageScope;",
      "26: import org.apache.nifi.kerberos.KerberosUserService;",
      "27: import org.apache.nifi.processor.util.StandardValidators;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: import org.apache.nifi.dbcp.DriverClassValidator;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67:             .description(\"Database driver class name\")",
      "68:             .defaultValue(null)",
      "69:             .required(true)",
      "71:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
      "72:             .build();",
      "",
      "[Removed Lines]",
      "70:             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)",
      "",
      "[Added Lines]",
      "71:             .addValidator(new DriverClassValidator())",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java": [
      "File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java -> nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "158:         public ValidationResult validate(final String subject, final String input, final ValidationContext context) {",
      "159:             final ValidationResult.Builder builder = new ValidationResult.Builder().subject(subject).input(input);",
      "162:                 builder.valid(false);",
      "163:                 builder.explanation(\"URL is required\");",
      "165:                 builder.valid(true);",
      "166:                 builder.explanation(\"URL scheme allowed\");",
      "167:             } else {",
      "",
      "[Removed Lines]",
      "161:             if (input == null || input.isEmpty()) {",
      "164:             } else if (isUrlAllowed(input)) {",
      "",
      "[Added Lines]",
      "161:             final String url = context.newPropertyValue(input).evaluateAttributeExpressions().getValue();",
      "162:             if (url == null || url.isEmpty()) {",
      "165:             } else if (isUrlAllowed(url)) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "176:         private boolean isUrlAllowed(final String input) {",
      "177:             final boolean allowed;",
      "180:             if (matcher.matches()) {",
      "181:                 final String scheme = matcher.group(SCHEME_GROUP);",
      "182:                 allowed = isSchemeAllowed(scheme);",
      "",
      "[Removed Lines]",
      "179:             final Matcher matcher = URL_SCHEME_PATTERN.matcher(input);",
      "",
      "[Added Lines]",
      "180:             final String normalizedUrl = input.trim();",
      "181:             final Matcher matcher = URL_SCHEME_PATTERN.matcher(normalizedUrl);",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java": [
      "File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java -> nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:     private static final String LDAP_PROVIDER_URL = \"ldap://127.0.0.1\";",
      "44:     private static final String HOST_PORT_URL = \"127.0.0.1:1024\";",
      "46:     private static final String LDAP_ALLOWED_URL_SCHEMES = \"ldap\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:     private static final String LDAP_PROVIDER_URL_SPACED = String.format(\" %s\", LDAP_PROVIDER_URL);",
      "46:     private static final String LDAP_PROVIDER_URL_EXPRESSION = \"ldap:${separator}//127.0.0.1\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "81:         runner.assertNotValid(provider);",
      "82:     }",
      "84:     @Test",
      "85:     void testPropertiesHostPortUrl() {",
      "86:         setFactoryProperties();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "88:     @Test",
      "89:     void testPropertiesInvalidUrlSchemeSpaced() {",
      "90:         setFactoryProperties();",
      "92:         runner.setProperty(provider, JndiJmsConnectionFactoryProperties.JNDI_PROVIDER_URL, LDAP_PROVIDER_URL_SPACED);",
      "94:         runner.assertNotValid(provider);",
      "95:     }",
      "97:     @Test",
      "98:     void testPropertiesInvalidUrlSchemeExpression() {",
      "99:         setFactoryProperties();",
      "101:         runner.setProperty(provider, JndiJmsConnectionFactoryProperties.JNDI_PROVIDER_URL, LDAP_PROVIDER_URL_EXPRESSION);",
      "103:         runner.assertNotValid(provider);",
      "104:     }",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java": [
      "File: nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java -> nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "37:             builder.valid(false);",
      "38:             builder.explanation(\"Connection URL required\");",
      "39:         } else {",
      "42:             if (isUrlUnsupported(url)) {",
      "43:                 builder.valid(false);",
      "45:             } else {",
      "46:                 builder.valid(true);",
      "47:                 builder.explanation(\"Connection URL is valid\");",
      "",
      "[Removed Lines]",
      "40:             final String url = context.newPropertyValue(input).evaluateAttributeExpressions().getValue();",
      "44:                 builder.explanation(String.format(\"Connection URL starts with an unsupported scheme %s\", UNSUPPORTED_SCHEMES));",
      "",
      "[Added Lines]",
      "40:             final String url = context.newPropertyValue(input).evaluateAttributeExpressions().getValue().trim();",
      "44:                 builder.explanation(String.format(\"Connection URL contains an unsupported scheme %s\", UNSUPPORTED_SCHEMES));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "55:         boolean unsupported = false;",
      "57:         for (final String unsupportedScheme : UNSUPPORTED_SCHEMES) {",
      "59:                 unsupported = true;",
      "60:                 break;",
      "61:             }",
      "",
      "[Removed Lines]",
      "58:             if (url.startsWith(unsupportedScheme)) {",
      "",
      "[Added Lines]",
      "58:             if (url.contains(unsupportedScheme)) {",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java": [
      "File: nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java -> nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: package org.apache.nifi.dbcp;",
      "19: import org.apache.nifi.components.ValidationContext;",
      "20: import org.apache.nifi.components.ValidationResult;",
      "21: import org.apache.nifi.components.Validator;",
      "23: import java.util.Collections;",
      "24: import java.util.Set;",
      "29: public class DriverClassValidator implements Validator {",
      "30:     private static final Set<String> UNSUPPORTED_CLASSES = Collections.singleton(\"org.h2.Driver\");",
      "32:     @Override",
      "33:     public ValidationResult validate(final String subject, final String input, final ValidationContext context) {",
      "34:         final ValidationResult.Builder builder = new ValidationResult.Builder().subject(subject).input(input);",
      "36:         if (input == null || input.isEmpty()) {",
      "37:             builder.valid(false);",
      "38:             builder.explanation(\"Driver Class required\");",
      "39:         } else {",
      "40:             final String driverClass = context.newPropertyValue(input).evaluateAttributeExpressions().getValue().trim();",
      "42:             if (isDriverClassUnsupported(driverClass)) {",
      "43:                 builder.valid(false);",
      "44:                 builder.explanation(String.format(\"Driver Class is listed as unsupported %s\", UNSUPPORTED_CLASSES));",
      "45:             } else {",
      "46:                 builder.valid(true);",
      "47:                 builder.explanation(\"Driver Class is valid\");",
      "48:             }",
      "49:         }",
      "51:         return builder.build();",
      "52:     }",
      "54:     private boolean isDriverClassUnsupported(final String driverClass) {",
      "55:         return UNSUPPORTED_CLASSES.contains(driverClass);",
      "56:     }",
      "57: }",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java": [
      "File: nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java -> nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "38:     private static final String UNSUPPORTED_URL = \"jdbc:h2:file\";",
      "40:     private static final String VENDOR_URL = \"jdbc:vendor\";",
      "42:     private ValidationContext validationContext;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40:     private static final String UNSUPPORTED_URL_SPACED = String.format(\" %s \", UNSUPPORTED_URL);",
      "42:     private static final String UNSUPPORTED_URL_EXPRESSION = String.format(\"${attribute}%s\", UNSUPPORTED_URL);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67:         assertFalse(result.isValid());",
      "68:     }",
      "70:     @Test",
      "71:     void testValidateSupportedUrl() {",
      "72:         final ValidationResult result = validator.validate(SUBJECT, VENDOR_URL, validationContext);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "74:     @Test",
      "75:     void testValidateUnsupportedUrlExpressionLanguage() {",
      "76:         final ValidationResult result = validator.validate(SUBJECT, UNSUPPORTED_URL_EXPRESSION, validationContext);",
      "78:         assertNotNull(result);",
      "79:         assertFalse(result.isValid());",
      "80:     }",
      "82:     @Test",
      "83:     void testValidateUnsupportedUrlSpaced() {",
      "84:         final ValidationResult result = validator.validate(SUBJECT, UNSUPPORTED_URL_SPACED, validationContext);",
      "86:         assertNotNull(result);",
      "87:         assertFalse(result.isValid());",
      "88:     }",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java": [
      "File: nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java -> nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: package org.apache.nifi.dbcp;",
      "19: import org.apache.nifi.components.ValidationContext;",
      "20: import org.apache.nifi.components.ValidationResult;",
      "21: import org.apache.nifi.util.MockProcessContext;",
      "22: import org.apache.nifi.util.MockValidationContext;",
      "23: import org.apache.nifi.util.NoOpProcessor;",
      "24: import org.apache.nifi.util.TestRunners;",
      "25: import org.junit.jupiter.api.BeforeEach;",
      "26: import org.junit.jupiter.api.Test;",
      "28: import static org.junit.jupiter.api.Assertions.assertFalse;",
      "29: import static org.junit.jupiter.api.Assertions.assertNotNull;",
      "30: import static org.junit.jupiter.api.Assertions.assertTrue;",
      "32: class DriverClassValidatorTest {",
      "34:     private static final String SUBJECT = \"Database Driver Class\";",
      "36:     private static final String EMPTY = \"\";",
      "38:     private static final String UNSUPPORTED_DRIVER = \"org.h2.Driver\";",
      "40:     private static final String UNSUPPORTED_DRIVER_SPACED = String.format(\" %s \", UNSUPPORTED_DRIVER);",
      "42:     private static final String UNSUPPORTED_DRIVER_EXPRESSION = String.format(\"${attribute}%s\", UNSUPPORTED_DRIVER);",
      "44:     private static final String OTHER_DRIVER = \"org.apache.nifi.Driver\";",
      "46:     private ValidationContext validationContext;",
      "48:     private DriverClassValidator validator;",
      "50:     @BeforeEach",
      "51:     void setValidator() {",
      "52:         validator = new DriverClassValidator();",
      "54:         final MockProcessContext processContext = (MockProcessContext) TestRunners.newTestRunner(NoOpProcessor.class).getProcessContext();",
      "55:         validationContext = new MockValidationContext(processContext);",
      "56:     }",
      "58:     @Test",
      "59:     void testValidateEmpty() {",
      "60:         final ValidationResult result = validator.validate(SUBJECT, EMPTY, validationContext);",
      "62:         assertNotNull(result);",
      "63:         assertFalse(result.isValid());",
      "64:     }",
      "66:     @Test",
      "67:     void testValidateUnsupportedDriver() {",
      "68:         final ValidationResult result = validator.validate(SUBJECT, UNSUPPORTED_DRIVER, validationContext);",
      "70:         assertNotNull(result);",
      "71:         assertFalse(result.isValid());",
      "72:     }",
      "74:     @Test",
      "75:     void testValidateUnsupportedDriverExpressionLanguage() {",
      "76:         final ValidationResult result = validator.validate(SUBJECT, UNSUPPORTED_DRIVER_EXPRESSION, validationContext);",
      "78:         assertNotNull(result);",
      "79:         assertFalse(result.isValid());",
      "80:     }",
      "82:     @Test",
      "83:     void testValidateUnsupportedDriverSpaced() {",
      "84:         final ValidationResult result = validator.validate(SUBJECT, UNSUPPORTED_DRIVER_SPACED, validationContext);",
      "86:         assertNotNull(result);",
      "87:         assertFalse(result.isValid());",
      "88:     }",
      "90:     @Test",
      "91:     void testValidateSupportedDriver() {",
      "92:         final ValidationResult result = validator.validate(SUBJECT, OTHER_DRIVER, validationContext);",
      "94:         assertNotNull(result);",
      "95:         assertTrue(result.isValid());",
      "96:     }",
      "97: }",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java": [
      "File: nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java -> nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "98:             .description(\"The fully-qualified class name of the JDBC driver. Example: com.mysql.jdbc.Driver\")",
      "99:             .defaultValue(null)",
      "100:             .required(true)",
      "102:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
      "103:             .build();",
      "",
      "[Removed Lines]",
      "101:             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)",
      "",
      "[Added Lines]",
      "101:             .addValidator(new DriverClassValidator())",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3fcb82ee4509d1ad73893d8dca003be6d086c5d6",
      "candidate_info": {
        "commit_hash": "3fcb82ee4509d1ad73893d8dca003be6d086c5d6",
        "repo": "apache/nifi",
        "commit_url": "https://github.com/apache/nifi/commit/3fcb82ee4509d1ad73893d8dca003be6d086c5d6",
        "files": [
          "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java",
          "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/resources/docs/org.apache.nifi.jms.cf.JndiJmsConnectionFactoryProvider/additionalDetails.html",
          "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java"
        ],
        "message": "NIFI-11614 Improved Validation for JndiJmsConnectionFactoryProvider\n\nThis closes #7313.\n\nSigned-off-by: Peter Turcsanyi <turcsanyi@apache.org>",
        "before_after_code_files": [
          "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java",
          "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java",
            "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java"
          ],
          "candidate": [
            "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java",
            "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java"
          ]
        }
      },
      "candidate_diff": {
        "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java": [
          "File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java -> nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import org.apache.nifi.components.PropertyDescriptor;",
          "20: import org.apache.nifi.components.PropertyDescriptor.Builder;",
          "21: import org.apache.nifi.components.Validator;",
          "22: import org.apache.nifi.components.resource.ResourceCardinality;",
          "23: import org.apache.nifi.components.resource.ResourceType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import org.apache.nifi.components.ValidationContext;",
          "22: import org.apache.nifi.components.ValidationResult;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.apache.nifi.processor.util.StandardValidators;",
          "27: import java.util.Arrays;",
          "28: import java.util.List;",
          "30: import static org.apache.nifi.processor.util.StandardValidators.NON_EMPTY_VALIDATOR;",
          "32: public class JndiJmsConnectionFactoryProperties {",
          "34:     public static final PropertyDescriptor JNDI_INITIAL_CONTEXT_FACTORY = new Builder()",
          "35:             .name(\"java.naming.factory.initial\")",
          "36:             .displayName(\"JNDI Initial Context Factory Class\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import java.util.Collections;",
          "31: import java.util.LinkedHashSet;",
          "33: import java.util.Set;",
          "34: import java.util.regex.Matcher;",
          "35: import java.util.regex.Pattern;",
          "36: import java.util.stream.Collectors;",
          "42:     public static final String URL_SCHEMES_ALLOWED_PROPERTY = \"org.apache.nifi.jms.cf.jndi.provider.url.schemes.allowed\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43:     public static final PropertyDescriptor JNDI_PROVIDER_URL = new Builder()",
          "44:             .name(\"java.naming.provider.url\")",
          "45:             .displayName(\"JNDI Provider URL\")",
          "47:             .required(true)",
          "49:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "50:             .build();",
          "",
          "[Removed Lines]",
          "46:             .description(\"The URL of the JNDI Provider to use (java.naming.provider.url).\")",
          "48:             .addValidator(NON_EMPTY_VALIDATOR)",
          "",
          "[Added Lines]",
          "56:             .description(\"The URL of the JNDI Provider to use as the value for java.naming.provider.url. See additional details documentation for allowed URL schemes.\")",
          "58:             .addValidator(new JndiJmsProviderUrlValidator())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "114:                 .build();",
          "115:     }",
          "117: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:     static class JndiJmsProviderUrlValidator implements Validator {",
          "129:         private static final Pattern URL_SCHEME_PATTERN = Pattern.compile(\"^([^:]+)://.+$\");",
          "131:         private static final int SCHEME_GROUP = 1;",
          "133:         private static final String SPACE_SEPARATOR = \" \";",
          "135:         private static final Set<String> DEFAULT_ALLOWED_SCHEMES = Collections.unmodifiableSet(new LinkedHashSet<>(Arrays.asList(",
          "136:                 \"file\",",
          "137:                 \"jgroups\",",
          "138:                 \"t3\",",
          "139:                 \"t3s\",",
          "140:                 \"tcp\",",
          "141:                 \"ssl\",",
          "142:                 \"udp\",",
          "143:                 \"vm\"",
          "144:         )));",
          "146:         private final Set<String> allowedSchemes;",
          "148:         JndiJmsProviderUrlValidator() {",
          "149:             final String allowed = System.getProperty(URL_SCHEMES_ALLOWED_PROPERTY);",
          "150:             if (allowed == null || allowed.isEmpty()) {",
          "151:                 allowedSchemes = DEFAULT_ALLOWED_SCHEMES;",
          "152:             } else {",
          "153:                 allowedSchemes = Arrays.stream(allowed.split(SPACE_SEPARATOR)).collect(Collectors.toSet());",
          "154:             }",
          "155:         }",
          "157:         @Override",
          "158:         public ValidationResult validate(final String subject, final String input, final ValidationContext context) {",
          "159:             final ValidationResult.Builder builder = new ValidationResult.Builder().subject(subject).input(input);",
          "161:             if (input == null || input.isEmpty()) {",
          "162:                 builder.valid(false);",
          "163:                 builder.explanation(\"URL is required\");",
          "164:             } else if (isUrlAllowed(input)) {",
          "165:                 builder.valid(true);",
          "166:                 builder.explanation(\"URL scheme allowed\");",
          "167:             } else {",
          "168:                 builder.valid(false);",
          "169:                 final String explanation = String.format(\"URL scheme not allowed. Allowed URL schemes include %s\", allowedSchemes);",
          "170:                 builder.explanation(explanation);",
          "171:             }",
          "173:             return builder.build();",
          "174:         }",
          "176:         private boolean isUrlAllowed(final String input) {",
          "177:             final boolean allowed;",
          "179:             final Matcher matcher = URL_SCHEME_PATTERN.matcher(input);",
          "180:             if (matcher.matches()) {",
          "181:                 final String scheme = matcher.group(SCHEME_GROUP);",
          "182:                 allowed = isSchemeAllowed(scheme);",
          "183:             } else {",
          "184:                 allowed = true;",
          "185:             }",
          "187:             return allowed;",
          "188:         }",
          "190:         private boolean isSchemeAllowed(final String scheme) {",
          "191:             boolean allowed = false;",
          "193:             for (final String allowedScheme : allowedSchemes) {",
          "194:                 if (allowedScheme.contains(scheme)) {",
          "195:                     allowed = true;",
          "196:                     break;",
          "197:                 }",
          "198:             }",
          "200:             return allowed;",
          "201:         }",
          "202:     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java": [
          "File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java -> nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.nifi.jms.cf;",
          "19: import org.apache.nifi.components.ValidationResult;",
          "20: import org.apache.nifi.reporting.InitializationException;",
          "21: import org.apache.nifi.util.MockProcessContext;",
          "22: import org.apache.nifi.util.MockValidationContext;",
          "23: import org.apache.nifi.util.NoOpProcessor;",
          "24: import org.apache.nifi.util.TestRunner;",
          "25: import org.apache.nifi.util.TestRunners;",
          "26: import org.junit.jupiter.api.BeforeEach;",
          "27: import org.junit.jupiter.api.Test;",
          "29: import static org.junit.jupiter.api.Assertions.assertNotNull;",
          "30: import static org.junit.jupiter.api.Assertions.assertTrue;",
          "32: public class JndiJmsConnectionFactoryProviderTest {",
          "34:     private static final String SERVICE_ID = JndiJmsConnectionFactoryProvider.class.getSimpleName();",
          "36:     private static final String CONTEXT_FACTORY = \"ContextFactory\";",
          "38:     private static final String FACTORY_NAME = \"ConnectionFactory\";",
          "40:     private static final String TCP_PROVIDER_URL = \"tcp://127.0.0.1\";",
          "42:     private static final String LDAP_PROVIDER_URL = \"ldap://127.0.0.1\";",
          "44:     private static final String HOST_PORT_URL = \"127.0.0.1:1024\";",
          "46:     private static final String LDAP_ALLOWED_URL_SCHEMES = \"ldap\";",
          "48:     private TestRunner runner;",
          "50:     private JndiJmsConnectionFactoryProvider provider;",
          "52:     @BeforeEach",
          "53:     void setRunner() throws InitializationException {",
          "54:         runner = TestRunners.newTestRunner(NoOpProcessor.class);",
          "55:         provider = new JndiJmsConnectionFactoryProvider();",
          "56:         runner.addControllerService(SERVICE_ID, provider);",
          "57:     }",
          "59:     @Test",
          "60:     void testPropertiesValid() {",
          "61:         setFactoryProperties();",
          "63:         runner.setProperty(provider, JndiJmsConnectionFactoryProperties.JNDI_PROVIDER_URL, TCP_PROVIDER_URL);",
          "65:         runner.assertValid(provider);",
          "66:     }",
          "68:     @Test",
          "69:     void testPropertiesInvalidUrlNotConfigured() {",
          "70:         setFactoryProperties();",
          "72:         runner.assertNotValid(provider);",
          "73:     }",
          "75:     @Test",
          "76:     void testPropertiesInvalidUrlScheme() {",
          "77:         setFactoryProperties();",
          "79:         runner.setProperty(provider, JndiJmsConnectionFactoryProperties.JNDI_PROVIDER_URL, LDAP_PROVIDER_URL);",
          "81:         runner.assertNotValid(provider);",
          "82:     }",
          "84:     @Test",
          "85:     void testPropertiesHostPortUrl() {",
          "86:         setFactoryProperties();",
          "88:         runner.setProperty(provider, JndiJmsConnectionFactoryProperties.JNDI_PROVIDER_URL, HOST_PORT_URL);",
          "90:         runner.assertValid(provider);",
          "91:     }",
          "94:     @Test",
          "95:     void testUrlSchemeValidSystemProperty() {",
          "96:         try {",
          "97:             System.setProperty(JndiJmsConnectionFactoryProperties.URL_SCHEMES_ALLOWED_PROPERTY, LDAP_ALLOWED_URL_SCHEMES);",
          "99:             final MockProcessContext processContext = new MockProcessContext(new NoOpProcessor());",
          "100:             final MockValidationContext validationContext = new MockValidationContext(processContext);",
          "102:             final JndiJmsConnectionFactoryProperties.JndiJmsProviderUrlValidator validator = new JndiJmsConnectionFactoryProperties.JndiJmsProviderUrlValidator();",
          "103:             final ValidationResult result = validator.validate(JndiJmsConnectionFactoryProperties.JNDI_PROVIDER_URL.getDisplayName(), LDAP_PROVIDER_URL, validationContext);",
          "105:             assertNotNull(result);",
          "106:             assertTrue(result.isValid());",
          "107:         } finally {",
          "108:             System.clearProperty(JndiJmsConnectionFactoryProperties.URL_SCHEMES_ALLOWED_PROPERTY);",
          "109:         }",
          "110:     }",
          "112:     private void setFactoryProperties() {",
          "113:         runner.setProperty(provider, JndiJmsConnectionFactoryProperties.JNDI_INITIAL_CONTEXT_FACTORY, CONTEXT_FACTORY);",
          "114:         runner.setProperty(provider, JndiJmsConnectionFactoryProperties.JNDI_CONNECTION_FACTORY_NAME, FACTORY_NAME);",
          "115:     }",
          "116: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b3242304f8cbd14476b30fdb35e4173c9edac0ed",
      "candidate_info": {
        "commit_hash": "b3242304f8cbd14476b30fdb35e4173c9edac0ed",
        "repo": "apache/nifi",
        "commit_url": "https://github.com/apache/nifi/commit/b3242304f8cbd14476b30fdb35e4173c9edac0ed",
        "files": [
          "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/AbstractDBCPConnectionPool.java",
          "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java",
          "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DataSourceConfiguration.java",
          "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DefaultDataSourceValues.java",
          "nifi-nar-bundles/nifi-snowflake-bundle/nifi-snowflake-services/src/main/java/org/apache/nifi/snowflake/service/SnowflakeComputingConnectionPool.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/main/java/org/apache/nifi/dbcp/DBCPConnectionPool.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/test/groovy/org/apache/nifi/record/sink/db/DatabaseRecordSinkTest.groovy",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/test/java/org/apache/nifi/dbcp/DBCPServiceTest.java"
        ],
        "message": "NIFI-11151: Improving code reusability of DBCP services\n\nThis closes #6935.\n\nSigned-off-by: Peter Turcsanyi <turcsanyi@apache.org>",
        "before_after_code_files": [
          "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/AbstractDBCPConnectionPool.java||nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/AbstractDBCPConnectionPool.java",
          "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java||nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java",
          "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DataSourceConfiguration.java||nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DataSourceConfiguration.java",
          "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DefaultDataSourceValues.java||nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DefaultDataSourceValues.java",
          "nifi-nar-bundles/nifi-snowflake-bundle/nifi-snowflake-services/src/main/java/org/apache/nifi/snowflake/service/SnowflakeComputingConnectionPool.java||nifi-nar-bundles/nifi-snowflake-bundle/nifi-snowflake-services/src/main/java/org/apache/nifi/snowflake/service/SnowflakeComputingConnectionPool.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/main/java/org/apache/nifi/dbcp/DBCPConnectionPool.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/main/java/org/apache/nifi/dbcp/DBCPConnectionPool.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/test/groovy/org/apache/nifi/record/sink/db/DatabaseRecordSinkTest.groovy||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/test/groovy/org/apache/nifi/record/sink/db/DatabaseRecordSinkTest.groovy",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/test/java/org/apache/nifi/dbcp/DBCPServiceTest.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/test/java/org/apache/nifi/dbcp/DBCPServiceTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java||nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java"
          ],
          "candidate": [
            "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java||nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java"
          ]
        }
      },
      "candidate_diff": {
        "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/AbstractDBCPConnectionPool.java||nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/AbstractDBCPConnectionPool.java": [
          "File: nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/AbstractDBCPConnectionPool.java -> nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/AbstractDBCPConnectionPool.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.nifi.dbcp;",
          "20: import org.apache.commons.dbcp2.BasicDataSource;",
          "21: import org.apache.commons.lang3.StringUtils;",
          "23: import org.apache.nifi.annotation.lifecycle.OnDisabled;",
          "24: import org.apache.nifi.annotation.lifecycle.OnEnabled;",
          "25: import org.apache.nifi.components.ConfigVerificationResult;",
          "26: import org.apache.nifi.components.PropertyDescriptor;",
          "27: import org.apache.nifi.components.PropertyValue;",
          "30: import org.apache.nifi.controller.AbstractControllerService;",
          "31: import org.apache.nifi.controller.ConfigurationContext;",
          "32: import org.apache.nifi.controller.VerifiableControllerService;",
          "36: import org.apache.nifi.kerberos.KerberosUserService;",
          "37: import org.apache.nifi.logging.ComponentLog;",
          "38: import org.apache.nifi.processor.exception.ProcessException;",
          "40: import org.apache.nifi.reporting.InitializationException;",
          "41: import org.apache.nifi.security.krb.KerberosAction;",
          "43: import org.apache.nifi.security.krb.KerberosLoginException;",
          "45: import org.apache.nifi.security.krb.KerberosUser;",
          "48: import java.sql.Connection;",
          "49: import java.sql.Driver;",
          "51: import java.sql.SQLException;",
          "52: import java.util.ArrayList;",
          "53: import java.util.List;",
          "54: import java.util.Map;",
          "56: import java.util.stream.Collectors;",
          "58: import static org.apache.nifi.components.ConfigVerificationResult.Outcome.FAILED;",
          "59: import static org.apache.nifi.components.ConfigVerificationResult.Outcome.SUCCESSFUL;",
          "65: public abstract class AbstractDBCPConnectionPool extends AbstractControllerService implements DBCPService, VerifiableControllerService {",
          "282:     protected volatile BasicDataSource dataSource;",
          "283:     protected volatile KerberosUser kerberosUser;",
          "303:     @Override",
          "304:     public List<ConfigVerificationResult> verify(final ConfigurationContext context, final ComponentLog verificationLogger, final Map<String, String> variables) {",
          "305:         List<ConfigVerificationResult> results = new ArrayList<>();",
          "",
          "[Removed Lines]",
          "19: import java.util.HashMap;",
          "22: import org.apache.commons.pool2.impl.GenericObjectPoolConfig;",
          "28: import org.apache.nifi.components.resource.ResourceCardinality;",
          "29: import org.apache.nifi.components.resource.ResourceType;",
          "33: import org.apache.nifi.expression.AttributeExpression;",
          "34: import org.apache.nifi.expression.ExpressionLanguageScope;",
          "35: import org.apache.nifi.kerberos.KerberosCredentialsService;",
          "39: import org.apache.nifi.processor.util.StandardValidators;",
          "42: import org.apache.nifi.security.krb.KerberosKeytabUser;",
          "44: import org.apache.nifi.security.krb.KerberosPasswordUser;",
          "47: import javax.security.auth.login.LoginException;",
          "50: import java.sql.DriverManager;",
          "55: import java.util.concurrent.TimeUnit;",
          "67:     protected static final String SENSITIVE_PROPERTY_PREFIX = \"SENSITIVE.\";",
          "72:     private static final String DEFAULT_MIN_IDLE = \"0\";",
          "76:     private static final String DEFAULT_MAX_IDLE = \"8\";",
          "80:     private static final String DEFAULT_MAX_CONN_LIFETIME = \"-1\";",
          "84:     private static final String DEFAULT_EVICTION_RUN_PERIOD = String.valueOf(-1L);",
          "89:     private static final String DEFAULT_MIN_EVICTABLE_IDLE_TIME = \"30 mins\";",
          "93:     private static final String DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME = String.valueOf(-1L);",
          "95:     public static final PropertyDescriptor DATABASE_URL = new PropertyDescriptor.Builder()",
          "96:             .name(\"Database Connection URL\")",
          "97:             .description(\"A database connection URL used to connect to a database. May contain database system name, host, port, database name and some parameters.\"",
          "98:                     + \" The exact syntax of a database connection URL is specified by your DBMS.\")",
          "99:             .defaultValue(null)",
          "100:             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)",
          "101:             .required(true)",
          "102:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "103:             .build();",
          "105:     public static final PropertyDescriptor DB_DRIVERNAME = new PropertyDescriptor.Builder()",
          "106:             .name(\"Database Driver Class Name\")",
          "107:             .description(\"Database driver class name\")",
          "108:             .defaultValue(null)",
          "109:             .required(true)",
          "110:             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)",
          "111:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "112:             .build();",
          "114:     public static final PropertyDescriptor DB_DRIVER_LOCATION = new PropertyDescriptor.Builder()",
          "115:             .name(\"database-driver-locations\")",
          "116:             .displayName(\"Database Driver Location(s)\")",
          "117:             .description(\"Comma-separated list of files/folders and/or URLs containing the driver JAR and its dependencies (if any). For example '/var/tmp/mariadb-java-client-1.1.7.jar'\")",
          "118:             .defaultValue(null)",
          "119:             .required(false)",
          "120:             .identifiesExternalResource(ResourceCardinality.MULTIPLE, ResourceType.FILE, ResourceType.DIRECTORY, ResourceType.URL)",
          "121:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "122:             .dynamicallyModifiesClasspath(true)",
          "123:             .build();",
          "125:     public static final PropertyDescriptor DB_USER = new PropertyDescriptor.Builder()",
          "126:             .name(\"Database User\")",
          "127:             .description(\"Database user name\")",
          "128:             .defaultValue(null)",
          "129:             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)",
          "130:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "131:             .build();",
          "133:     public static final PropertyDescriptor DB_PASSWORD = new PropertyDescriptor.Builder()",
          "134:             .name(\"Password\")",
          "135:             .description(\"The password for the database user\")",
          "136:             .defaultValue(null)",
          "137:             .required(false)",
          "138:             .sensitive(true)",
          "139:             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)",
          "140:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "141:             .build();",
          "143:     public static final PropertyDescriptor MAX_WAIT_TIME = new PropertyDescriptor.Builder()",
          "144:             .name(\"Max Wait Time\")",
          "145:             .description(\"The maximum amount of time that the pool will wait (when there are no available connections) \"",
          "146:                     + \" for a connection to be returned before failing, or -1 to wait indefinitely. \")",
          "147:             .defaultValue(\"500 millis\")",
          "148:             .required(true)",
          "149:             .addValidator(DBCPValidator.CUSTOM_TIME_PERIOD_VALIDATOR)",
          "150:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "151:             .sensitive(false)",
          "152:             .build();",
          "154:     public static final PropertyDescriptor MAX_TOTAL_CONNECTIONS = new PropertyDescriptor.Builder()",
          "155:             .name(\"Max Total Connections\")",
          "156:             .description(\"The maximum number of active connections that can be allocated from this pool at the same time, \"",
          "157:                     + \" or negative for no limit.\")",
          "158:             .defaultValue(\"8\")",
          "159:             .required(true)",
          "160:             .addValidator(StandardValidators.INTEGER_VALIDATOR)",
          "161:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "162:             .sensitive(false)",
          "163:             .build();",
          "165:     public static final PropertyDescriptor VALIDATION_QUERY = new PropertyDescriptor.Builder()",
          "166:             .name(\"Validation-query\")",
          "167:             .displayName(\"Validation query\")",
          "168:             .description(\"Validation query used to validate connections before returning them. \"",
          "169:                     + \"When connection is invalid, it gets dropped and new valid connection will be returned. \"",
          "170:                     + \"Note!! Using validation might have some performance penalty.\")",
          "171:             .required(false)",
          "172:             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)",
          "173:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "174:             .build();",
          "176:     public static final PropertyDescriptor MIN_IDLE = new PropertyDescriptor.Builder()",
          "177:             .displayName(\"Minimum Idle Connections\")",
          "178:             .name(\"dbcp-min-idle-conns\")",
          "179:             .description(\"The minimum number of connections that can remain idle in the pool without extra ones being \" +",
          "180:                     \"created. Set to or zero to allow no idle connections.\")",
          "181:             .defaultValue(DEFAULT_MIN_IDLE)",
          "182:             .required(false)",
          "183:             .addValidator(StandardValidators.NON_NEGATIVE_INTEGER_VALIDATOR)",
          "184:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "185:             .build();",
          "187:     public static final PropertyDescriptor MAX_IDLE = new PropertyDescriptor.Builder()",
          "188:             .displayName(\"Max Idle Connections\")",
          "189:             .name(\"dbcp-max-idle-conns\")",
          "190:             .description(\"The maximum number of connections that can remain idle in the pool without extra ones being \" +",
          "191:                     \"released. Set to any negative value to allow unlimited idle connections.\")",
          "192:             .defaultValue(DEFAULT_MAX_IDLE)",
          "193:             .required(false)",
          "194:             .addValidator(StandardValidators.INTEGER_VALIDATOR)",
          "195:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "196:             .build();",
          "198:     public static final PropertyDescriptor MAX_CONN_LIFETIME = new PropertyDescriptor.Builder()",
          "199:             .displayName(\"Max Connection Lifetime\")",
          "200:             .name(\"dbcp-max-conn-lifetime\")",
          "201:             .description(\"The maximum lifetime in milliseconds of a connection. After this time is exceeded the \" +",
          "202:                     \"connection will fail the next activation, passivation or validation test. A value of zero or less \" +",
          "203:                     \"means the connection has an infinite lifetime.\")",
          "204:             .defaultValue(DEFAULT_MAX_CONN_LIFETIME)",
          "205:             .required(false)",
          "206:             .addValidator(DBCPValidator.CUSTOM_TIME_PERIOD_VALIDATOR)",
          "207:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "208:             .build();",
          "210:     public static final PropertyDescriptor EVICTION_RUN_PERIOD = new PropertyDescriptor.Builder()",
          "211:             .displayName(\"Time Between Eviction Runs\")",
          "212:             .name(\"dbcp-time-between-eviction-runs\")",
          "213:             .description(\"The number of milliseconds to sleep between runs of the idle connection evictor thread. When \" +",
          "214:                     \"non-positive, no idle connection evictor thread will be run.\")",
          "215:             .defaultValue(DEFAULT_EVICTION_RUN_PERIOD)",
          "216:             .required(false)",
          "217:             .addValidator(DBCPValidator.CUSTOM_TIME_PERIOD_VALIDATOR)",
          "218:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "219:             .build();",
          "221:     public static final PropertyDescriptor MIN_EVICTABLE_IDLE_TIME = new PropertyDescriptor.Builder()",
          "222:             .displayName(\"Minimum Evictable Idle Time\")",
          "223:             .name(\"dbcp-min-evictable-idle-time\")",
          "224:             .description(\"The minimum amount of time a connection may sit idle in the pool before it is eligible for eviction.\")",
          "225:             .defaultValue(DEFAULT_MIN_EVICTABLE_IDLE_TIME)",
          "226:             .required(false)",
          "227:             .addValidator(DBCPValidator.CUSTOM_TIME_PERIOD_VALIDATOR)",
          "228:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "229:             .build();",
          "231:     public static final PropertyDescriptor SOFT_MIN_EVICTABLE_IDLE_TIME = new PropertyDescriptor.Builder()",
          "232:             .displayName(\"Soft Minimum Evictable Idle Time\")",
          "233:             .name(\"dbcp-soft-min-evictable-idle-time\")",
          "234:             .description(\"The minimum amount of time a connection may sit idle in the pool before it is eligible for \" +",
          "235:                     \"eviction by the idle connection evictor, with the extra condition that at least a minimum number of\" +",
          "236:                     \" idle connections remain in the pool. When the not-soft version of this option is set to a positive\" +",
          "237:                     \" value, it is examined first by the idle connection evictor: when idle connections are visited by \" +",
          "238:                     \"the evictor, idle time is first compared against it (without considering the number of idle \" +",
          "239:                     \"connections in the pool) and then against this soft option, including the minimum idle connections \" +",
          "240:                     \"constraint.\")",
          "241:             .defaultValue(DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME)",
          "242:             .required(false)",
          "243:             .addValidator(DBCPValidator.CUSTOM_TIME_PERIOD_VALIDATOR)",
          "244:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "245:             .build();",
          "247:     public static final PropertyDescriptor KERBEROS_CREDENTIALS_SERVICE = new PropertyDescriptor.Builder()",
          "248:             .name(\"kerberos-credentials-service\")",
          "249:             .displayName(\"Kerberos Credentials Service\")",
          "250:             .description(\"Specifies the Kerberos Credentials Controller Service that should be used for authenticating with Kerberos\")",
          "251:             .identifiesControllerService(KerberosCredentialsService.class)",
          "252:             .required(false)",
          "253:             .build();",
          "255:     public static final PropertyDescriptor KERBEROS_USER_SERVICE = new PropertyDescriptor.Builder()",
          "256:             .name(\"kerberos-user-service\")",
          "257:             .displayName(\"Kerberos User Service\")",
          "258:             .description(\"Specifies the Kerberos User Controller Service that should be used for authenticating with Kerberos\")",
          "259:             .identifiesControllerService(KerberosUserService.class)",
          "260:             .required(false)",
          "261:             .build();",
          "263:     public static final PropertyDescriptor KERBEROS_PRINCIPAL = new PropertyDescriptor.Builder()",
          "264:             .name(\"kerberos-principal\")",
          "265:             .displayName(\"Kerberos Principal\")",
          "266:             .description(\"The principal to use when specifying the principal and password directly in the processor for authenticating via Kerberos.\")",
          "267:             .required(false)",
          "268:             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)",
          "269:             .addValidator(StandardValidators.createAttributeExpressionLanguageValidator(AttributeExpression.ResultType.STRING))",
          "270:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "271:             .build();",
          "273:     public static final PropertyDescriptor KERBEROS_PASSWORD = new PropertyDescriptor.Builder()",
          "274:             .name(\"kerberos-password\")",
          "275:             .displayName(\"Kerberos Password\")",
          "276:             .description(\"The password to use when specifying the principal and password directly in the processor for authenticating via Kerberos.\")",
          "277:             .required(false)",
          "278:             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)",
          "279:             .sensitive(true)",
          "280:             .build();",
          "285:     @Override",
          "286:     protected PropertyDescriptor getSupportedDynamicPropertyDescriptor(final String propertyDescriptorName) {",
          "287:         final PropertyDescriptor.Builder builder = new PropertyDescriptor.Builder()",
          "288:                 .name(propertyDescriptorName)",
          "289:                 .required(false)",
          "290:                 .dynamic(true)",
          "291:                 .addValidator(StandardValidators.createAttributeExpressionLanguageValidator(AttributeExpression.ResultType.STRING, true))",
          "292:                 .addValidator(StandardValidators.ATTRIBUTE_KEY_PROPERTY_NAME_VALIDATOR);",
          "294:         if (propertyDescriptorName.startsWith(SENSITIVE_PROPERTY_PREFIX)) {",
          "295:             builder.sensitive(true).expressionLanguageSupported(ExpressionLanguageScope.NONE);",
          "296:         } else {",
          "297:             builder.expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY);",
          "298:         }",
          "300:         return builder.build();",
          "301:     }",
          "",
          "[Added Lines]",
          "29: import org.apache.nifi.dbcp.utils.DataSourceConfiguration;",
          "48: import static org.apache.nifi.dbcp.utils.DBCPProperties.DB_DRIVER_LOCATION;",
          "49: import static org.apache.nifi.dbcp.utils.DBCPProperties.KERBEROS_USER_SERVICE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "326:         final BasicDataSource dataSource = new BasicDataSource();",
          "327:         try {",
          "329:             results.add(new ConfigVerificationResult.Builder()",
          "330:                     .verificationStepName(\"Configure Data Source\")",
          "331:                     .outcome(SUCCESSFUL)",
          "",
          "[Removed Lines]",
          "328:             configureDataSource(dataSource, kerberosUser, context);",
          "",
          "[Added Lines]",
          "81:             final DataSourceConfiguration configuration = getDataSourceConfiguration(context);",
          "82:             configureDataSource(context, configuration);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "386:     @OnEnabled",
          "387:     public void onConfigured(final ConfigurationContext context) throws InitializationException {",
          "389:         dataSource = new BasicDataSource();",
          "391:     }",
          "410:         if (kerberosUser != null) {",
          "411:             try {",
          "412:                 kerberosUser.login();",
          "",
          "[Removed Lines]",
          "388:         kerberosUser = getKerberosUser(context);",
          "390:         configureDataSource(dataSource, kerberosUser, context);",
          "393:     private void configureDataSource(final BasicDataSource dataSource, final KerberosUser kerberosUser,",
          "394:                                      final ConfigurationContext context) throws InitializationException {",
          "395:         final String dburl = getUrl(context);",
          "397:         final String driverName = context.getProperty(DB_DRIVERNAME).evaluateAttributeExpressions().getValue();",
          "398:         final String user = context.getProperty(DB_USER).evaluateAttributeExpressions().getValue();",
          "399:         final String passw = context.getProperty(DB_PASSWORD).evaluateAttributeExpressions().getValue();",
          "400:         final Integer maxTotal = context.getProperty(MAX_TOTAL_CONNECTIONS).evaluateAttributeExpressions().asInteger();",
          "401:         final String validationQuery = context.getProperty(VALIDATION_QUERY).evaluateAttributeExpressions().getValue();",
          "402:         final Long maxWaitMillis = extractMillisWithInfinite(context.getProperty(MAX_WAIT_TIME).evaluateAttributeExpressions());",
          "403:         final Integer minIdle = context.getProperty(MIN_IDLE).evaluateAttributeExpressions().asInteger();",
          "404:         final Integer maxIdle = context.getProperty(MAX_IDLE).evaluateAttributeExpressions().asInteger();",
          "405:         final Long maxConnLifetimeMillis = extractMillisWithInfinite(context.getProperty(MAX_CONN_LIFETIME).evaluateAttributeExpressions());",
          "406:         final Long timeBetweenEvictionRunsMillis = extractMillisWithInfinite(context.getProperty(EVICTION_RUN_PERIOD).evaluateAttributeExpressions());",
          "407:         final Long minEvictableIdleTimeMillis = extractMillisWithInfinite(context.getProperty(MIN_EVICTABLE_IDLE_TIME).evaluateAttributeExpressions());",
          "408:         final Long softMinEvictableIdleTimeMillis = extractMillisWithInfinite(context.getProperty(SOFT_MIN_EVICTABLE_IDLE_TIME).evaluateAttributeExpressions());",
          "",
          "[Added Lines]",
          "140:         kerberosUser = getKerberosUser(context);",
          "141:         loginKerberos(kerberosUser);",
          "142:         final DataSourceConfiguration configuration = getDataSourceConfiguration(context);",
          "143:         configureDataSource(context, configuration);",
          "146:     private void loginKerberos(KerberosUser kerberosUser) throws InitializationException {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "414:                 throw new InitializationException(\"Unable to authenticate Kerberos principal\", e);",
          "415:             }",
          "416:         }",
          "429:             dataSource.setValidationQuery(validationQuery);",
          "430:             dataSource.setTestOnBorrow(true);",
          "431:         }",
          "438:                 .keySet()",
          "439:                 .stream()",
          "440:                 .filter(PropertyDescriptor::isDynamic)",
          "441:                 .collect(Collectors.toList());",
          "454:     }",
          "459:         final KerberosUserService kerberosUserService = context.getProperty(KERBEROS_USER_SERVICE).asControllerService(KerberosUserService.class);",
          "463:         if (kerberosUserService != null) {",
          "464:             kerberosUser = kerberosUserService.createKerberosUser();",
          "469:         }",
          "470:         return kerberosUser;",
          "471:     }",
          "475:     }",
          "486:         try {",
          "488:         } catch (final SQLException e) {",
          "498:             }",
          "499:         }",
          "500:     }",
          "526:     @OnDisabled",
          "527:     public void shutdown() throws SQLException {",
          "528:         try {",
          "530:         } finally {",
          "531:             kerberosUser = null;",
          "532:             dataSource = null;",
          "",
          "[Removed Lines]",
          "418:         dataSource.setDriver(getDriver(driverName, dburl));",
          "419:         dataSource.setMaxWaitMillis(maxWaitMillis);",
          "420:         dataSource.setMaxTotal(maxTotal);",
          "421:         dataSource.setMinIdle(minIdle);",
          "422:         dataSource.setMaxIdle(maxIdle);",
          "423:         dataSource.setMaxConnLifetimeMillis(maxConnLifetimeMillis);",
          "424:         dataSource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);",
          "425:         dataSource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);",
          "426:         dataSource.setSoftMinEvictableIdleTimeMillis(softMinEvictableIdleTimeMillis);",
          "428:         if (validationQuery != null && !validationQuery.isEmpty()) {",
          "433:         dataSource.setUrl(dburl);",
          "434:         dataSource.setUsername(user);",
          "435:         dataSource.setPassword(passw);",
          "437:         final List<PropertyDescriptor> dynamicProperties = context.getProperties()",
          "443:         dynamicProperties.forEach((descriptor) -> {",
          "444:             final PropertyValue propertyValue = context.getProperty(descriptor);",
          "445:             if (descriptor.isSensitive()) {",
          "446:                 final String propertyName = StringUtils.substringAfter(descriptor.getName(), SENSITIVE_PROPERTY_PREFIX);",
          "447:                 dataSource.addConnectionProperty(propertyName, propertyValue.getValue());",
          "448:             } else {",
          "449:                 dataSource.addConnectionProperty(descriptor.getName(), propertyValue.evaluateAttributeExpressions().getValue());",
          "450:             }",
          "451:         });",
          "453:         getConnectionProperties(context).forEach(dataSource::addConnectionProperty);",
          "456:     private KerberosUser getKerberosUser(final ConfigurationContext context) {",
          "457:         KerberosUser kerberosUser = null;",
          "458:         final KerberosCredentialsService kerberosCredentialsService = context.getProperty(KERBEROS_CREDENTIALS_SERVICE).asControllerService(KerberosCredentialsService.class);",
          "460:         final String kerberosPrincipal = context.getProperty(KERBEROS_PRINCIPAL).evaluateAttributeExpressions().getValue();",
          "461:         final String kerberosPassword = context.getProperty(KERBEROS_PASSWORD).getValue();",
          "465:         } else if (kerberosCredentialsService != null) {",
          "466:             kerberosUser = new KerberosKeytabUser(kerberosCredentialsService.getPrincipal(), kerberosCredentialsService.getKeytab());",
          "467:         } else if (!StringUtils.isBlank(kerberosPrincipal) && !StringUtils.isBlank(kerberosPassword)) {",
          "468:             kerberosUser = new KerberosPasswordUser(kerberosPrincipal, kerberosPassword);",
          "473:     protected String getUrl(ConfigurationContext context) {",
          "474:         return context.getProperty(DATABASE_URL).evaluateAttributeExpressions().getValue();",
          "477:     protected Driver getDriver(final String driverName, final String url) {",
          "478:         final Class<?> clazz;",
          "480:         try {",
          "481:             clazz = Class.forName(driverName);",
          "482:         } catch (final ClassNotFoundException e) {",
          "483:             throw new ProcessException(\"Driver class \" + driverName +  \" is not found\", e);",
          "484:         }",
          "487:             return DriverManager.getDriver(url);",
          "490:             try {",
          "491:                 final Driver driver = (Driver) clazz.newInstance();",
          "492:                 DriverManager.registerDriver(driver);",
          "493:                 return DriverManager.getDriver(url);",
          "494:             } catch (final SQLException e2) {",
          "495:                 throw new ProcessException(\"No suitable driver for the given Database Connection URL\", e2);",
          "496:             } catch (final IllegalAccessException | InstantiationException e2) {",
          "497:                 throw new ProcessException(\"Creating driver instance is failed\", e2);",
          "507:     protected Map<String, String> getConnectionProperties(final ConfigurationContext context) {",
          "508:         return new HashMap<>();",
          "509:     }",
          "511:     protected Long extractMillisWithInfinite(PropertyValue prop) {",
          "512:         return \"-1\".equals(prop.getValue()) ? -1 : prop.asTimePeriod(TimeUnit.MILLISECONDS);",
          "513:     }",
          "529:             this.shutdown(dataSource, kerberosUser);",
          "",
          "[Added Lines]",
          "154:     }",
          "156:     protected abstract Driver getDriver(final String driverName, final String url);",
          "158:     protected abstract DataSourceConfiguration getDataSourceConfiguration(final ConfigurationContext context);",
          "160:     protected void configureDataSource(final ConfigurationContext context, final DataSourceConfiguration configuration) {",
          "161:         final Driver driver = getDriver(configuration.getDriverName(), configuration.getUrl());",
          "163:         dataSource.setDriver(driver);",
          "164:         dataSource.setMaxWaitMillis(configuration.getMaxWaitMillis());",
          "165:         dataSource.setMaxTotal(configuration.getMaxTotal());",
          "166:         dataSource.setMinIdle(configuration.getMinIdle());",
          "167:         dataSource.setMaxIdle(configuration.getMaxIdle());",
          "168:         dataSource.setMaxConnLifetimeMillis(configuration.getMaxConnLifetimeMillis());",
          "169:         dataSource.setTimeBetweenEvictionRunsMillis(configuration.getTimeBetweenEvictionRunsMillis());",
          "170:         dataSource.setMinEvictableIdleTimeMillis(configuration.getMinEvictableIdleTimeMillis());",
          "171:         dataSource.setSoftMinEvictableIdleTimeMillis(configuration.getSoftMinEvictableIdleTimeMillis());",
          "173:         final String validationQuery = configuration.getValidationQuery();",
          "174:         if (StringUtils.isNotBlank(validationQuery)) {",
          "179:         dataSource.setUrl(configuration.getUrl());",
          "180:         dataSource.setUsername(configuration.getUserName());",
          "181:         dataSource.setPassword(configuration.getPassword());",
          "183:         getConnectionProperties(context).forEach(dataSource::addConnectionProperty);",
          "184:     }",
          "186:     protected Map<String, String> getConnectionProperties(final ConfigurationContext context) {",
          "187:         return getDynamicProperties(context)",
          "188:                 .stream()",
          "189:                 .collect(Collectors.toMap(PropertyDescriptor::getName, s -> {",
          "190:                     final PropertyValue propertyValue = context.getProperty(s);",
          "191:                     return propertyValue.evaluateAttributeExpressions().getValue();",
          "192:                 }));",
          "193:     }",
          "195:     protected List<PropertyDescriptor> getDynamicProperties(final ConfigurationContext context) {",
          "196:         return context.getProperties()",
          "203:     protected KerberosUser getKerberosUser(final ConfigurationContext context) {",
          "204:         final KerberosUser kerberosUser;",
          "209:         } else {",
          "210:             kerberosUser = getKerberosUserByCredentials(context);",
          "215:     protected KerberosUser getKerberosUserByCredentials(final ConfigurationContext context) {",
          "216:         return null;",
          "220:     @Override",
          "221:     public Connection getConnection() throws ProcessException {",
          "222:         return getConnection(dataSource, kerberosUser);",
          "223:     }",
          "225:     private Connection getConnection(final BasicDataSource dataSource, final KerberosUser kerberosUser) {",
          "227:             final Connection con;",
          "228:             if (kerberosUser != null) {",
          "229:                 KerberosAction<Connection> kerberosAction = new KerberosAction<>(kerberosUser, dataSource::getConnection, getLogger());",
          "230:                 con = kerberosAction.execute();",
          "231:             } else {",
          "232:                 con = dataSource.getConnection();",
          "233:             }",
          "234:             return con;",
          "237:             if (kerberosUser != null) {",
          "238:                 try {",
          "239:                     getLogger().info(\"Error getting connection, performing Kerberos re-login\");",
          "240:                     kerberosUser.login();",
          "241:                 } catch (KerberosLoginException le) {",
          "242:                     throw new ProcessException(\"Unable to authenticate Kerberos principal\", le);",
          "243:                 }",
          "245:             throw new ProcessException(e);",
          "258:             shutdown(dataSource, kerberosUser);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "544:             }",
          "545:         }",
          "546:     }",
          "581: }",
          "",
          "[Removed Lines]",
          "548:     @Override",
          "549:     public Connection getConnection() throws ProcessException {",
          "550:         return getConnection(dataSource, kerberosUser);",
          "551:     }",
          "553:     private Connection getConnection(final BasicDataSource dataSource, final KerberosUser kerberosUser) {",
          "554:         try {",
          "555:             final Connection con;",
          "556:             if (kerberosUser != null) {",
          "557:                 KerberosAction<Connection> kerberosAction = new KerberosAction<>(kerberosUser, () -> dataSource.getConnection(), getLogger());",
          "558:                 con = kerberosAction.execute();",
          "559:             } else {",
          "560:                 con = dataSource.getConnection();",
          "561:             }",
          "562:             return con;",
          "563:         } catch (final SQLException e) {",
          "565:             if (kerberosUser != null) {",
          "566:                 try {",
          "567:                     getLogger().info(\"Error getting connection, performing Kerberos re-login\");",
          "568:                     kerberosUser.login();",
          "569:                 } catch (KerberosLoginException le) {",
          "570:                     throw new ProcessException(\"Unable to authenticate Kerberos principal\", le);",
          "571:                 }",
          "572:             }",
          "573:             throw new ProcessException(e);",
          "574:         }",
          "575:     }",
          "577:     @Override",
          "578:     public String toString() {",
          "579:         return this.getClass().getSimpleName() + \"[id=\" + getIdentifier() + \"]\";",
          "580:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java||nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java": [
          "File: nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java -> nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.nifi.dbcp.utils;",
          "19: import org.apache.nifi.components.PropertyDescriptor;",
          "20: import org.apache.nifi.components.PropertyValue;",
          "21: import org.apache.nifi.components.resource.ResourceCardinality;",
          "22: import org.apache.nifi.components.resource.ResourceType;",
          "23: import org.apache.nifi.dbcp.DBCPValidator;",
          "24: import org.apache.nifi.expression.ExpressionLanguageScope;",
          "25: import org.apache.nifi.kerberos.KerberosUserService;",
          "26: import org.apache.nifi.processor.util.StandardValidators;",
          "28: import java.util.concurrent.TimeUnit;",
          "30: public final class DBCPProperties {",
          "32:     private DBCPProperties() {",
          "33:     }",
          "35:     public static final PropertyDescriptor DATABASE_URL = new PropertyDescriptor.Builder()",
          "36:             .name(\"Database Connection URL\")",
          "37:             .description(\"A database connection URL used to connect to a database. May contain database system name, host, port, database name and some parameters.\"",
          "38:                     + \" The exact syntax of a database connection URL is specified by your DBMS.\")",
          "39:             .defaultValue(null)",
          "40:             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)",
          "41:             .required(true)",
          "42:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "43:             .build();",
          "45:     public static final PropertyDescriptor DB_USER = new PropertyDescriptor.Builder()",
          "46:             .name(\"Database User\")",
          "47:             .description(\"Database user name\")",
          "48:             .defaultValue(null)",
          "49:             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)",
          "50:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "51:             .build();",
          "53:     public static final PropertyDescriptor DB_PASSWORD = new PropertyDescriptor.Builder()",
          "54:             .name(\"Password\")",
          "55:             .description(\"The password for the database user\")",
          "56:             .defaultValue(null)",
          "57:             .required(false)",
          "58:             .sensitive(true)",
          "59:             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)",
          "60:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "61:             .build();",
          "64:     public static final PropertyDescriptor DB_DRIVERNAME = new PropertyDescriptor.Builder()",
          "65:             .name(\"Database Driver Class Name\")",
          "66:             .description(\"Database driver class name\")",
          "67:             .defaultValue(null)",
          "68:             .required(true)",
          "69:             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)",
          "70:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "71:             .build();",
          "73:     public static final PropertyDescriptor DB_DRIVER_LOCATION = new PropertyDescriptor.Builder()",
          "74:             .name(\"database-driver-locations\")",
          "75:             .displayName(\"Database Driver Location(s)\")",
          "76:             .description(\"Comma-separated list of files/folders and/or URLs containing the driver JAR and its dependencies (if any). For example '/var/tmp/mariadb-java-client-1.1.7.jar'\")",
          "77:             .defaultValue(null)",
          "78:             .required(false)",
          "79:             .identifiesExternalResource(ResourceCardinality.MULTIPLE, ResourceType.FILE, ResourceType.DIRECTORY, ResourceType.URL)",
          "80:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "81:             .dynamicallyModifiesClasspath(true)",
          "82:             .build();",
          "84:     public static final PropertyDescriptor MAX_WAIT_TIME = new PropertyDescriptor.Builder()",
          "85:             .name(\"Max Wait Time\")",
          "86:             .description(\"The maximum amount of time that the pool will wait (when there are no available connections) \"",
          "87:                     + \" for a connection to be returned before failing, or -1 to wait indefinitely. \")",
          "88:             .defaultValue(DefaultDataSourceValues.MAX_WAIT_TIME.getValue())",
          "89:             .required(true)",
          "90:             .addValidator(DBCPValidator.CUSTOM_TIME_PERIOD_VALIDATOR)",
          "91:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "92:             .sensitive(false)",
          "93:             .build();",
          "95:     public static final PropertyDescriptor MAX_TOTAL_CONNECTIONS = new PropertyDescriptor.Builder()",
          "96:             .name(\"Max Total Connections\")",
          "97:             .description(\"The maximum number of active connections that can be allocated from this pool at the same time, \"",
          "98:                     + \" or negative for no limit.\")",
          "99:             .defaultValue(DefaultDataSourceValues.MAX_TOTAL_CONNECTIONS.getValue())",
          "100:             .required(true)",
          "101:             .addValidator(StandardValidators.INTEGER_VALIDATOR)",
          "102:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "103:             .sensitive(false)",
          "104:             .build();",
          "106:     public static final PropertyDescriptor VALIDATION_QUERY = new PropertyDescriptor.Builder()",
          "107:             .name(\"Validation-query\")",
          "108:             .displayName(\"Validation query\")",
          "109:             .description(\"Validation query used to validate connections before returning them. \"",
          "110:                     + \"When connection is invalid, it gets dropped and new valid connection will be returned. \"",
          "111:                     + \"Note!! Using validation might have some performance penalty.\")",
          "112:             .required(false)",
          "113:             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)",
          "114:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "115:             .build();",
          "117:     public static final PropertyDescriptor MIN_IDLE = new PropertyDescriptor.Builder()",
          "118:             .displayName(\"Minimum Idle Connections\")",
          "119:             .name(\"dbcp-min-idle-conns\")",
          "120:             .description(\"The minimum number of connections that can remain idle in the pool without extra ones being \" +",
          "121:                     \"created. Set to or zero to allow no idle connections.\")",
          "122:             .defaultValue(DefaultDataSourceValues.MIN_IDLE.getValue())",
          "123:             .required(false)",
          "124:             .addValidator(StandardValidators.NON_NEGATIVE_INTEGER_VALIDATOR)",
          "125:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "126:             .build();",
          "128:     public static final PropertyDescriptor MAX_IDLE = new PropertyDescriptor.Builder()",
          "129:             .displayName(\"Max Idle Connections\")",
          "130:             .name(\"dbcp-max-idle-conns\")",
          "131:             .description(\"The maximum number of connections that can remain idle in the pool without extra ones being \" +",
          "132:                     \"released. Set to any negative value to allow unlimited idle connections.\")",
          "133:             .defaultValue(DefaultDataSourceValues.MAX_IDLE.getValue())",
          "134:             .required(false)",
          "135:             .addValidator(StandardValidators.INTEGER_VALIDATOR)",
          "136:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "137:             .build();",
          "139:     public static final PropertyDescriptor MAX_CONN_LIFETIME = new PropertyDescriptor.Builder()",
          "140:             .displayName(\"Max Connection Lifetime\")",
          "141:             .name(\"dbcp-max-conn-lifetime\")",
          "142:             .description(\"The maximum lifetime in milliseconds of a connection. After this time is exceeded the \" +",
          "143:                     \"connection will fail the next activation, passivation or validation test. A value of zero or less \" +",
          "144:                     \"means the connection has an infinite lifetime.\")",
          "145:             .defaultValue(DefaultDataSourceValues.MAX_CONN_LIFETIME.getValue())",
          "146:             .required(false)",
          "147:             .addValidator(DBCPValidator.CUSTOM_TIME_PERIOD_VALIDATOR)",
          "148:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "149:             .build();",
          "151:     public static final PropertyDescriptor EVICTION_RUN_PERIOD = new PropertyDescriptor.Builder()",
          "152:             .displayName(\"Time Between Eviction Runs\")",
          "153:             .name(\"dbcp-time-between-eviction-runs\")",
          "154:             .description(\"The number of milliseconds to sleep between runs of the idle connection evictor thread. When \" +",
          "155:                     \"non-positive, no idle connection evictor thread will be run.\")",
          "156:             .defaultValue(DefaultDataSourceValues.EVICTION_RUN_PERIOD.getValue())",
          "157:             .required(false)",
          "158:             .addValidator(DBCPValidator.CUSTOM_TIME_PERIOD_VALIDATOR)",
          "159:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "160:             .build();",
          "162:     public static final PropertyDescriptor MIN_EVICTABLE_IDLE_TIME = new PropertyDescriptor.Builder()",
          "163:             .displayName(\"Minimum Evictable Idle Time\")",
          "164:             .name(\"dbcp-min-evictable-idle-time\")",
          "165:             .description(\"The minimum amount of time a connection may sit idle in the pool before it is eligible for eviction.\")",
          "166:             .defaultValue(DefaultDataSourceValues.MIN_EVICTABLE_IDLE_TIME.getValue())",
          "167:             .required(false)",
          "168:             .addValidator(DBCPValidator.CUSTOM_TIME_PERIOD_VALIDATOR)",
          "169:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "170:             .build();",
          "172:     public static final PropertyDescriptor SOFT_MIN_EVICTABLE_IDLE_TIME = new PropertyDescriptor.Builder()",
          "173:             .displayName(\"Soft Minimum Evictable Idle Time\")",
          "174:             .name(\"dbcp-soft-min-evictable-idle-time\")",
          "175:             .description(\"The minimum amount of time a connection may sit idle in the pool before it is eligible for \" +",
          "176:                     \"eviction by the idle connection evictor, with the extra condition that at least a minimum number of\" +",
          "177:                     \" idle connections remain in the pool. When the not-soft version of this option is set to a positive\" +",
          "178:                     \" value, it is examined first by the idle connection evictor: when idle connections are visited by \" +",
          "179:                     \"the evictor, idle time is first compared against it (without considering the number of idle \" +",
          "180:                     \"connections in the pool) and then against this soft option, including the minimum idle connections \" +",
          "181:                     \"constraint.\")",
          "182:             .defaultValue(DefaultDataSourceValues.SOFT_MIN_EVICTABLE_IDLE_TIME.getValue())",
          "183:             .required(false)",
          "184:             .addValidator(DBCPValidator.CUSTOM_TIME_PERIOD_VALIDATOR)",
          "185:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "186:             .build();",
          "188:     public static final PropertyDescriptor KERBEROS_USER_SERVICE = new PropertyDescriptor.Builder()",
          "189:             .name(\"kerberos-user-service\")",
          "190:             .displayName(\"Kerberos User Service\")",
          "191:             .description(\"Specifies the Kerberos User Controller Service that should be used for authenticating with Kerberos\")",
          "192:             .identifiesControllerService(KerberosUserService.class)",
          "193:             .required(false)",
          "194:             .build();",
          "196:     public static Long extractMillisWithInfinite(PropertyValue prop) {",
          "197:         return \"-1\".equals(prop.getValue()) ? -1 : prop.asTimePeriod(TimeUnit.MILLISECONDS);",
          "198:     }",
          "199: }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DataSourceConfiguration.java||nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DataSourceConfiguration.java": [
          "File: nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DataSourceConfiguration.java -> nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DataSourceConfiguration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.nifi.dbcp.utils;",
          "19: public class DataSourceConfiguration {",
          "21:     private final String url;",
          "22:     private final String driverName;",
          "23:     private final String userName;",
          "24:     private final String password;",
          "25:     private final long maxWaitMillis;",
          "26:     private final int maxTotal;",
          "27:     private final int minIdle;",
          "28:     private final int maxIdle;",
          "29:     private final long maxConnLifetimeMillis;",
          "30:     private final long timeBetweenEvictionRunsMillis;",
          "31:     private final long minEvictableIdleTimeMillis;",
          "32:     private final long softMinEvictableIdleTimeMillis;",
          "33:     private final String validationQuery;",
          "35:     public String getUrl() {",
          "36:         return url;",
          "37:     }",
          "39:     public String getDriverName() {",
          "40:         return driverName;",
          "41:     }",
          "43:     public String getUserName() {",
          "44:         return userName;",
          "45:     }",
          "47:     public String getPassword() {",
          "48:         return password;",
          "49:     }",
          "51:     public long getMaxWaitMillis() {",
          "52:         return maxWaitMillis;",
          "53:     }",
          "55:     public int getMaxTotal() {",
          "56:         return maxTotal;",
          "57:     }",
          "59:     public int getMinIdle() {",
          "60:         return minIdle;",
          "61:     }",
          "63:     public int getMaxIdle() {",
          "64:         return maxIdle;",
          "65:     }",
          "67:     public long getMaxConnLifetimeMillis() {",
          "68:         return maxConnLifetimeMillis;",
          "69:     }",
          "71:     public long getTimeBetweenEvictionRunsMillis() {",
          "72:         return timeBetweenEvictionRunsMillis;",
          "73:     }",
          "75:     public long getMinEvictableIdleTimeMillis() {",
          "76:         return minEvictableIdleTimeMillis;",
          "77:     }",
          "79:     public long getSoftMinEvictableIdleTimeMillis() {",
          "80:         return softMinEvictableIdleTimeMillis;",
          "81:     }",
          "83:     public String getValidationQuery() {",
          "84:         return validationQuery;",
          "85:     }",
          "87:     public DataSourceConfiguration(final Builder builder) {",
          "88:         this.url = builder.url;",
          "89:         this.driverName = builder.driverName;",
          "90:         this.userName = builder.userName;",
          "91:         this.password = builder.password;",
          "92:         this.maxWaitMillis = builder.maxWaitMillis;",
          "93:         this.maxTotal = builder.maxTotal;",
          "94:         this.minIdle = builder.minIdle;",
          "95:         this.maxIdle = builder.maxIdle;",
          "96:         this.maxConnLifetimeMillis = builder.maxConnLifetimeMillis;",
          "97:         this.timeBetweenEvictionRunsMillis = builder.timeBetweenEvictionRunsMillis;",
          "98:         this.minEvictableIdleTimeMillis = builder.minEvictableIdleTimeMillis;",
          "99:         this.softMinEvictableIdleTimeMillis = builder.softMinEvictableIdleTimeMillis;",
          "100:         this.validationQuery = builder.validationQuery;",
          "101:     }",
          "103:     public static class Builder {",
          "104:         private final String url;",
          "105:         private final String driverName;",
          "106:         private final String userName;",
          "107:         private final String password;",
          "108:         private long maxWaitMillis = DefaultDataSourceValues.MAX_WAIT_TIME.getLongValue();",
          "109:         private int maxTotal = DefaultDataSourceValues.MAX_TOTAL_CONNECTIONS.getLongValue().intValue();",
          "110:         private int minIdle = DefaultDataSourceValues.MIN_IDLE.getLongValue().intValue();",
          "111:         private int maxIdle = DefaultDataSourceValues.MAX_IDLE.getLongValue().intValue();",
          "112:         private long maxConnLifetimeMillis = DefaultDataSourceValues.MAX_CONN_LIFETIME.getLongValue();",
          "113:         private long timeBetweenEvictionRunsMillis = DefaultDataSourceValues.EVICTION_RUN_PERIOD.getLongValue();",
          "114:         private long minEvictableIdleTimeMillis = DefaultDataSourceValues.MIN_EVICTABLE_IDLE_TIME.getLongValue();",
          "115:         private long softMinEvictableIdleTimeMillis = DefaultDataSourceValues.SOFT_MIN_EVICTABLE_IDLE_TIME.getLongValue();",
          "116:         private String validationQuery;",
          "118:         public Builder(final String url, final String driverName, final String userName, final String password) {",
          "119:             this.url = url;",
          "120:             this.driverName = driverName;",
          "121:             this.userName = userName;",
          "122:             this.password = password;",
          "123:         }",
          "125:         public Builder maxWaitMillis(long maxWaitMillis) {",
          "126:             this.maxWaitMillis = maxWaitMillis;",
          "127:             return this;",
          "128:         }",
          "130:         public Builder maxTotal(int maxTotal) {",
          "131:             this.maxTotal = maxTotal;",
          "132:             return this;",
          "133:         }",
          "135:         public Builder minIdle(int minIdle) {",
          "136:             this.minIdle = minIdle;",
          "137:             return this;",
          "138:         }",
          "140:         public Builder maxIdle(int maxIdle) {",
          "141:             this.maxIdle = maxIdle;",
          "142:             return this;",
          "143:         }",
          "145:         public Builder maxConnLifetimeMillis(long maxConnLifetimeMillis) {",
          "146:             this.maxConnLifetimeMillis = maxConnLifetimeMillis;",
          "147:             return this;",
          "148:         }",
          "150:         public Builder timeBetweenEvictionRunsMillis(long timeBetweenEvictionRunsMillis) {",
          "151:             this.timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;",
          "152:             return this;",
          "153:         }",
          "155:         public Builder minEvictableIdleTimeMillis(long minEvictableIdleTimeMillis) {",
          "156:             this.minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;",
          "157:             return this;",
          "158:         }",
          "160:         public Builder softMinEvictableIdleTimeMillis(long softMinEvictableIdleTimeMillis) {",
          "161:             this.softMinEvictableIdleTimeMillis = softMinEvictableIdleTimeMillis;",
          "162:             return this;",
          "163:         }",
          "165:         public Builder validationQuery(String validationQuery) {",
          "166:             this.validationQuery = validationQuery;",
          "167:             return this;",
          "168:         }",
          "170:         public DataSourceConfiguration build() {",
          "171:             return new DataSourceConfiguration(this);",
          "172:         }",
          "173:     }",
          "174: }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DefaultDataSourceValues.java||nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DefaultDataSourceValues.java": [
          "File: nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DefaultDataSourceValues.java -> nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DefaultDataSourceValues.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.nifi.dbcp.utils;",
          "19: import org.apache.commons.dbcp2.BasicDataSource;",
          "20: import org.apache.commons.pool2.impl.GenericObjectPoolConfig;",
          "21: import org.apache.nifi.util.FormatUtils;",
          "23: import java.util.concurrent.TimeUnit;",
          "25: public enum DefaultDataSourceValues {",
          "27:     MAX_WAIT_TIME(\"500 millis\") {",
          "28:         @Override",
          "29:         public Long getLongValue() {",
          "30:             return (long) FormatUtils.getPreciseTimeDuration(MAX_WAIT_TIME.value, TimeUnit.MILLISECONDS);",
          "31:         }",
          "32:     },",
          "33:     MAX_TOTAL_CONNECTIONS(\"8\"),",
          "37:     MIN_IDLE(\"0\"),",
          "41:     MAX_IDLE(\"8\"),",
          "45:     MAX_CONN_LIFETIME(\"-1\"),",
          "49:     EVICTION_RUN_PERIOD(\"-1\"),",
          "54:     MIN_EVICTABLE_IDLE_TIME(\"30 mins\") {",
          "55:         @Override",
          "56:         public Long getLongValue() {",
          "57:             return (long) FormatUtils.getPreciseTimeDuration(MAX_WAIT_TIME.value, TimeUnit.MINUTES);",
          "58:         }",
          "59:     },",
          "63:     SOFT_MIN_EVICTABLE_IDLE_TIME(\"-1\");",
          "66:     private final String value;",
          "68:     DefaultDataSourceValues(String value) {",
          "69:         this.value = value;",
          "70:     }",
          "72:     public String getValue() {",
          "73:         return value;",
          "74:     }",
          "76:     public Long getLongValue() {",
          "77:         return Long.parseLong(value);",
          "78:     }",
          "79: }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-snowflake-bundle/nifi-snowflake-services/src/main/java/org/apache/nifi/snowflake/service/SnowflakeComputingConnectionPool.java||nifi-nar-bundles/nifi-snowflake-bundle/nifi-snowflake-services/src/main/java/org/apache/nifi/snowflake/service/SnowflakeComputingConnectionPool.java": [
          "File: nifi-nar-bundles/nifi-snowflake-bundle/nifi-snowflake-services/src/main/java/org/apache/nifi/snowflake/service/SnowflakeComputingConnectionPool.java -> nifi-nar-bundles/nifi-snowflake-bundle/nifi-snowflake-services/src/main/java/org/apache/nifi/snowflake/service/SnowflakeComputingConnectionPool.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.nifi.snowflake.service;",
          "27: import net.snowflake.client.core.SFSessionProperty;",
          "28: import net.snowflake.client.jdbc.SnowflakeDriver;",
          "29: import org.apache.nifi.annotation.behavior.DynamicProperties;",
          "",
          "[Removed Lines]",
          "19: import java.sql.Driver;",
          "20: import java.sql.DriverManager;",
          "21: import java.util.ArrayList;",
          "22: import java.util.Collection;",
          "23: import java.util.Collections;",
          "24: import java.util.HashMap;",
          "25: import java.util.List;",
          "26: import java.util.Map;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: import org.apache.nifi.components.ValidationResult;",
          "37: import org.apache.nifi.controller.ConfigurationContext;",
          "38: import org.apache.nifi.dbcp.AbstractDBCPConnectionPool;",
          "39: import org.apache.nifi.expression.ExpressionLanguageScope;",
          "40: import org.apache.nifi.processor.exception.ProcessException;",
          "41: import org.apache.nifi.processor.util.StandardValidators;",
          "42: import org.apache.nifi.processors.snowflake.SnowflakeConnectionProviderService;",
          "43: import org.apache.nifi.processors.snowflake.SnowflakeConnectionWrapper;",
          "44: import org.apache.nifi.proxy.ProxyConfiguration;",
          "45: import org.apache.nifi.proxy.ProxyConfigurationService;",
          "48: import org.apache.nifi.snowflake.service.util.ConnectionUrlFormat;",
          "",
          "[Removed Lines]",
          "46: import org.apache.nifi.snowflake.service.util.ConnectionUrlFormatParameters;",
          "47: import org.apache.nifi.processors.snowflake.util.SnowflakeProperties;",
          "",
          "[Added Lines]",
          "31: import org.apache.nifi.dbcp.utils.DBCPProperties;",
          "32: import org.apache.nifi.dbcp.utils.DataSourceConfiguration;",
          "38: import org.apache.nifi.processors.snowflake.util.SnowflakeProperties;",
          "42: import org.apache.nifi.snowflake.service.util.ConnectionUrlFormatParameters;",
          "44: import java.sql.Driver;",
          "45: import java.sql.DriverManager;",
          "46: import java.util.ArrayList;",
          "47: import java.util.Collection;",
          "48: import java.util.Collections;",
          "49: import java.util.List;",
          "50: import java.util.Map;",
          "52: import static org.apache.nifi.dbcp.utils.DBCPProperties.DB_DRIVERNAME;",
          "53: import static org.apache.nifi.dbcp.utils.DBCPProperties.DB_PASSWORD;",
          "54: import static org.apache.nifi.dbcp.utils.DBCPProperties.DB_USER;",
          "55: import static org.apache.nifi.dbcp.utils.DBCPProperties.EVICTION_RUN_PERIOD;",
          "56: import static org.apache.nifi.dbcp.utils.DBCPProperties.MAX_CONN_LIFETIME;",
          "57: import static org.apache.nifi.dbcp.utils.DBCPProperties.MAX_IDLE;",
          "58: import static org.apache.nifi.dbcp.utils.DBCPProperties.MAX_TOTAL_CONNECTIONS;",
          "59: import static org.apache.nifi.dbcp.utils.DBCPProperties.MAX_WAIT_TIME;",
          "60: import static org.apache.nifi.dbcp.utils.DBCPProperties.MIN_EVICTABLE_IDLE_TIME;",
          "61: import static org.apache.nifi.dbcp.utils.DBCPProperties.MIN_IDLE;",
          "62: import static org.apache.nifi.dbcp.utils.DBCPProperties.SOFT_MIN_EVICTABLE_IDLE_TIME;",
          "63: import static org.apache.nifi.dbcp.utils.DBCPProperties.VALIDATION_QUERY;",
          "64: import static org.apache.nifi.dbcp.utils.DBCPProperties.extractMillisWithInfinite;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: @Tags({\"snowflake\", \"dbcp\", \"jdbc\", \"database\", \"connection\", \"pooling\", \"store\"})",
          "55: @CapabilityDescription(\"Provides Snowflake Connection Pooling Service. Connections can be asked from pool and returned after usage.\")",
          "56: @DynamicProperties({",
          "65: })",
          "66: @RequiresInstanceClassLoading",
          "67: public class SnowflakeComputingConnectionPool extends AbstractDBCPConnectionPool implements SnowflakeConnectionProviderService {",
          "",
          "[Removed Lines]",
          "57:     @DynamicProperty(name = \"JDBC property name\",",
          "58:         value = \"Snowflake JDBC property value\",",
          "59:         expressionLanguageScope = ExpressionLanguageScope.VARIABLE_REGISTRY,",
          "60:         description = \"Snowflake JDBC driver property name and value applied to JDBC connections.\"),",
          "61:     @DynamicProperty(name = \"SENSITIVE.JDBC property name\",",
          "62:         value = \"Snowflake JDBC property value\",",
          "63:         expressionLanguageScope = ExpressionLanguageScope.NONE,",
          "64:         description = \"Snowflake JDBC driver property name prefixed with 'SENSITIVE.' handled as a sensitive property.\")",
          "",
          "[Added Lines]",
          "73:         @DynamicProperty(name = \"JDBC property name\",",
          "74:                 value = \"Snowflake JDBC property value\",",
          "75:                 expressionLanguageScope = ExpressionLanguageScope.VARIABLE_REGISTRY,",
          "76:                 description = \"Snowflake JDBC driver property name and value applied to JDBC connections.\"),",
          "77:         @DynamicProperty(name = \"SENSITIVE.JDBC property name\",",
          "78:                 value = \"Snowflake JDBC property value\",",
          "79:                 expressionLanguageScope = ExpressionLanguageScope.NONE,",
          "80:                 description = \"Snowflake JDBC driver property name prefixed with 'SENSITIVE.' handled as a sensitive property.\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "76:             .build();",
          "78:     public static final PropertyDescriptor SNOWFLAKE_URL = new PropertyDescriptor.Builder()",
          "80:             .displayName(\"Snowflake URL\")",
          "81:             .description(\"Example connection string: jdbc:snowflake://[account].[region]\" + ConnectionUrlFormat.SNOWFLAKE_HOST_SUFFIX + \"/?[connection_params]\" +",
          "82:                     \" The connection parameters can include db=DATABASE_NAME to avoid using qualified table names such as DATABASE_NAME.PUBLIC.TABLE_NAME\")",
          "",
          "[Removed Lines]",
          "79:             .fromPropertyDescriptor(AbstractDBCPConnectionPool.DATABASE_URL)",
          "",
          "[Added Lines]",
          "95:             .fromPropertyDescriptor(DBCPProperties.DATABASE_URL)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "110:             .build();",
          "112:     public static final PropertyDescriptor SNOWFLAKE_USER = new PropertyDescriptor.Builder()",
          "114:             .displayName(\"Username\")",
          "115:             .description(\"The Snowflake user name.\")",
          "116:             .build();",
          "118:     public static final PropertyDescriptor SNOWFLAKE_PASSWORD = new PropertyDescriptor.Builder()",
          "120:             .displayName(\"Password\")",
          "121:             .description(\"The password for the Snowflake user.\")",
          "122:             .build();",
          "",
          "[Removed Lines]",
          "113:             .fromPropertyDescriptor(AbstractDBCPConnectionPool.DB_USER)",
          "119:             .fromPropertyDescriptor(AbstractDBCPConnectionPool.DB_PASSWORD)",
          "",
          "[Added Lines]",
          "129:             .fromPropertyDescriptor(DBCPProperties.DB_USER)",
          "135:             .fromPropertyDescriptor(DBCPProperties.DB_PASSWORD)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "170:     }",
          "172:     @Override",
          "173:     protected String getUrl(final ConfigurationContext context) {",
          "174:         final ConnectionUrlFormat connectionUrlFormat = ConnectionUrlFormat.forName(context.getProperty(CONNECTION_URL_FORMAT)",
          "175:                 .getValue());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189:     protected DataSourceConfiguration getDataSourceConfiguration(final ConfigurationContext context) {",
          "190:         final String url = getUrl(context);",
          "191:         final String driverName = context.getProperty(DB_DRIVERNAME).evaluateAttributeExpressions().getValue();",
          "192:         final String user = context.getProperty(DB_USER).evaluateAttributeExpressions().getValue();",
          "193:         final String password = context.getProperty(DB_PASSWORD).evaluateAttributeExpressions().getValue();",
          "194:         final Integer maxTotal = context.getProperty(MAX_TOTAL_CONNECTIONS).evaluateAttributeExpressions().asInteger();",
          "195:         final String validationQuery = context.getProperty(VALIDATION_QUERY).evaluateAttributeExpressions().getValue();",
          "196:         final Long maxWaitMillis = extractMillisWithInfinite(context.getProperty(MAX_WAIT_TIME).evaluateAttributeExpressions());",
          "197:         final Integer minIdle = context.getProperty(MIN_IDLE).evaluateAttributeExpressions().asInteger();",
          "198:         final Integer maxIdle = context.getProperty(MAX_IDLE).evaluateAttributeExpressions().asInteger();",
          "199:         final Long maxConnLifetimeMillis = extractMillisWithInfinite(context.getProperty(MAX_CONN_LIFETIME).evaluateAttributeExpressions());",
          "200:         final Long timeBetweenEvictionRunsMillis = extractMillisWithInfinite(context.getProperty(EVICTION_RUN_PERIOD).evaluateAttributeExpressions());",
          "201:         final Long minEvictableIdleTimeMillis = extractMillisWithInfinite(context.getProperty(MIN_EVICTABLE_IDLE_TIME).evaluateAttributeExpressions());",
          "202:         final Long softMinEvictableIdleTimeMillis = extractMillisWithInfinite(context.getProperty(SOFT_MIN_EVICTABLE_IDLE_TIME).evaluateAttributeExpressions());",
          "204:         return new DataSourceConfiguration.Builder(url, driverName, user, password)",
          "205:                 .maxTotal(maxTotal)",
          "206:                 .validationQuery(validationQuery)",
          "207:                 .maxWaitMillis(maxWaitMillis)",
          "208:                 .minIdle(minIdle)",
          "209:                 .maxIdle(maxIdle)",
          "210:                 .maxConnLifetimeMillis(maxConnLifetimeMillis)",
          "211:                 .timeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis)",
          "212:                 .minEvictableIdleTimeMillis(minEvictableIdleTimeMillis)",
          "213:                 .softMinEvictableIdleTimeMillis(softMinEvictableIdleTimeMillis)",
          "214:                 .build();",
          "215:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "194:         final String schema = context.getProperty(SnowflakeProperties.SCHEMA).evaluateAttributeExpressions().getValue();",
          "195:         final String warehouse = context.getProperty(SNOWFLAKE_WAREHOUSE).evaluateAttributeExpressions().getValue();",
          "198:         if (database != null) {",
          "199:             connectionProperties.put(\"db\", database);",
          "200:         }",
          "",
          "[Removed Lines]",
          "197:         final Map<String, String> connectionProperties = new HashMap<>();",
          "",
          "[Added Lines]",
          "241:         final Map<String, String> connectionProperties = super.getConnectionProperties(context);",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/main/java/org/apache/nifi/dbcp/DBCPConnectionPool.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/main/java/org/apache/nifi/dbcp/DBCPConnectionPool.java": [
          "File: nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/main/java/org/apache/nifi/dbcp/DBCPConnectionPool.java -> nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/main/java/org/apache/nifi/dbcp/DBCPConnectionPool.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.nifi.annotation.documentation.CapabilityDescription;",
          "26: import org.apache.nifi.annotation.documentation.Tags;",
          "27: import org.apache.nifi.components.PropertyDescriptor;",
          "28: import org.apache.nifi.components.ValidationContext;",
          "29: import org.apache.nifi.components.ValidationResult;",
          "30: import org.apache.nifi.controller.VerifiableControllerService;",
          "31: import org.apache.nifi.expression.ExpressionLanguageScope;",
          "32: import org.apache.nifi.kerberos.KerberosCredentialsService;",
          "33: import org.apache.nifi.kerberos.KerberosUserService;",
          "35: import java.util.ArrayList;",
          "36: import java.util.Collection;",
          "37: import java.util.Collections;",
          "38: import java.util.List;",
          "44: @SupportsSensitiveDynamicProperties",
          "46: @CapabilityDescription(\"Provides Database Connection Pooling Service. Connections can be asked from pool and returned after usage.\")",
          "47: @DynamicProperties({",
          "48:         @DynamicProperty(name = \"JDBC property name\",",
          "",
          "[Removed Lines]",
          "45: @Tags({ \"dbcp\", \"jdbc\", \"database\", \"connection\", \"pooling\", \"store\" })",
          "",
          "[Added Lines]",
          "28: import org.apache.nifi.components.PropertyValue;",
          "31: import org.apache.nifi.controller.ConfigurationContext;",
          "33: import org.apache.nifi.dbcp.utils.DataSourceConfiguration;",
          "34: import org.apache.nifi.expression.AttributeExpression;",
          "38: import org.apache.nifi.processor.exception.ProcessException;",
          "39: import org.apache.nifi.processor.util.StandardValidators;",
          "40: import org.apache.nifi.security.krb.KerberosKeytabUser;",
          "41: import org.apache.nifi.security.krb.KerberosPasswordUser;",
          "42: import org.apache.nifi.security.krb.KerberosUser;",
          "44: import java.sql.Driver;",
          "45: import java.sql.DriverManager;",
          "46: import java.sql.SQLException;",
          "47: import java.util.AbstractMap;",
          "52: import java.util.Map;",
          "53: import java.util.stream.Collectors;",
          "55: import static org.apache.nifi.dbcp.utils.DBCPProperties.DATABASE_URL;",
          "56: import static org.apache.nifi.dbcp.utils.DBCPProperties.DB_DRIVERNAME;",
          "57: import static org.apache.nifi.dbcp.utils.DBCPProperties.DB_DRIVER_LOCATION;",
          "58: import static org.apache.nifi.dbcp.utils.DBCPProperties.DB_PASSWORD;",
          "59: import static org.apache.nifi.dbcp.utils.DBCPProperties.DB_USER;",
          "60: import static org.apache.nifi.dbcp.utils.DBCPProperties.EVICTION_RUN_PERIOD;",
          "61: import static org.apache.nifi.dbcp.utils.DBCPProperties.KERBEROS_USER_SERVICE;",
          "62: import static org.apache.nifi.dbcp.utils.DBCPProperties.MAX_CONN_LIFETIME;",
          "63: import static org.apache.nifi.dbcp.utils.DBCPProperties.MAX_IDLE;",
          "64: import static org.apache.nifi.dbcp.utils.DBCPProperties.MAX_TOTAL_CONNECTIONS;",
          "65: import static org.apache.nifi.dbcp.utils.DBCPProperties.MAX_WAIT_TIME;",
          "66: import static org.apache.nifi.dbcp.utils.DBCPProperties.MIN_EVICTABLE_IDLE_TIME;",
          "67: import static org.apache.nifi.dbcp.utils.DBCPProperties.MIN_IDLE;",
          "68: import static org.apache.nifi.dbcp.utils.DBCPProperties.SOFT_MIN_EVICTABLE_IDLE_TIME;",
          "69: import static org.apache.nifi.dbcp.utils.DBCPProperties.VALIDATION_QUERY;",
          "70: import static org.apache.nifi.dbcp.utils.DBCPProperties.extractMillisWithInfinite;",
          "76: @Tags({\"dbcp\", \"jdbc\", \"database\", \"connection\", \"pooling\", \"store\"})",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56: })",
          "57: @RequiresInstanceClassLoading",
          "58: public class DBCPConnectionPool extends AbstractDBCPConnectionPool implements DBCPService, VerifiableControllerService {",
          "60:     private static final List<PropertyDescriptor> PROPERTIES;",
          "62:     static {",
          "63:         final List<PropertyDescriptor> props = new ArrayList<>();",
          "64:         props.add(DATABASE_URL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:     protected static final String SENSITIVE_PROPERTY_PREFIX = \"SENSITIVE.\";",
          "97:     public static final PropertyDescriptor KERBEROS_CREDENTIALS_SERVICE = new PropertyDescriptor.Builder()",
          "98:             .name(\"kerberos-credentials-service\")",
          "99:             .displayName(\"Kerberos Credentials Service\")",
          "100:             .description(\"Specifies the Kerberos Credentials Controller Service that should be used for authenticating with Kerberos\")",
          "101:             .identifiesControllerService(KerberosCredentialsService.class)",
          "102:             .required(false)",
          "103:             .build();",
          "105:     public static final PropertyDescriptor KERBEROS_PRINCIPAL = new PropertyDescriptor.Builder()",
          "106:             .name(\"kerberos-principal\")",
          "107:             .displayName(\"Kerberos Principal\")",
          "108:             .description(\"The principal to use when specifying the principal and password directly in the processor for authenticating via Kerberos.\")",
          "109:             .required(false)",
          "110:             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)",
          "111:             .addValidator(StandardValidators.createAttributeExpressionLanguageValidator(AttributeExpression.ResultType.STRING))",
          "112:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "113:             .build();",
          "115:     public static final PropertyDescriptor KERBEROS_PASSWORD = new PropertyDescriptor.Builder()",
          "116:             .name(\"kerberos-password\")",
          "117:             .displayName(\"Kerberos Password\")",
          "118:             .description(\"The password to use when specifying the principal and password directly in the processor for authenticating via Kerberos.\")",
          "119:             .required(false)",
          "120:             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)",
          "121:             .sensitive(true)",
          "122:             .build();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:     BasicDataSource getDataSource() {",
          "145:         return dataSource;",
          "146:     }",
          "147: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210:     @Override",
          "211:     protected DataSourceConfiguration getDataSourceConfiguration(ConfigurationContext context) {",
          "212:         final String url = context.getProperty(DATABASE_URL).evaluateAttributeExpressions().getValue();",
          "213:         final String driverName = context.getProperty(DB_DRIVERNAME).evaluateAttributeExpressions().getValue();",
          "214:         final String user = context.getProperty(DB_USER).evaluateAttributeExpressions().getValue();",
          "215:         final String password = context.getProperty(DB_PASSWORD).evaluateAttributeExpressions().getValue();",
          "216:         final Integer maxTotal = context.getProperty(MAX_TOTAL_CONNECTIONS).evaluateAttributeExpressions().asInteger();",
          "217:         final String validationQuery = context.getProperty(VALIDATION_QUERY).evaluateAttributeExpressions().getValue();",
          "218:         final Long maxWaitMillis = extractMillisWithInfinite(context.getProperty(MAX_WAIT_TIME).evaluateAttributeExpressions());",
          "219:         final Integer minIdle = context.getProperty(MIN_IDLE).evaluateAttributeExpressions().asInteger();",
          "220:         final Integer maxIdle = context.getProperty(MAX_IDLE).evaluateAttributeExpressions().asInteger();",
          "221:         final Long maxConnLifetimeMillis = extractMillisWithInfinite(context.getProperty(MAX_CONN_LIFETIME).evaluateAttributeExpressions());",
          "222:         final Long timeBetweenEvictionRunsMillis = extractMillisWithInfinite(context.getProperty(EVICTION_RUN_PERIOD).evaluateAttributeExpressions());",
          "223:         final Long minEvictableIdleTimeMillis = extractMillisWithInfinite(context.getProperty(MIN_EVICTABLE_IDLE_TIME).evaluateAttributeExpressions());",
          "224:         final Long softMinEvictableIdleTimeMillis = extractMillisWithInfinite(context.getProperty(SOFT_MIN_EVICTABLE_IDLE_TIME).evaluateAttributeExpressions());",
          "226:         return new DataSourceConfiguration.Builder(url, driverName, user, password)",
          "227:                 .maxTotal(maxTotal)",
          "228:                 .validationQuery(validationQuery)",
          "229:                 .maxWaitMillis(maxWaitMillis)",
          "230:                 .minIdle(minIdle)",
          "231:                 .maxIdle(maxIdle)",
          "232:                 .maxConnLifetimeMillis(maxConnLifetimeMillis)",
          "233:                 .timeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis)",
          "234:                 .minEvictableIdleTimeMillis(minEvictableIdleTimeMillis)",
          "235:                 .softMinEvictableIdleTimeMillis(softMinEvictableIdleTimeMillis)",
          "236:                 .build();",
          "237:     }",
          "239:     @Override",
          "240:     protected PropertyDescriptor getSupportedDynamicPropertyDescriptor(final String propertyDescriptorName) {",
          "241:         final PropertyDescriptor.Builder builder = new PropertyDescriptor.Builder()",
          "242:                 .name(propertyDescriptorName)",
          "243:                 .required(false)",
          "244:                 .dynamic(true)",
          "245:                 .addValidator(StandardValidators.createAttributeExpressionLanguageValidator(AttributeExpression.ResultType.STRING, true))",
          "246:                 .addValidator(StandardValidators.ATTRIBUTE_KEY_PROPERTY_NAME_VALIDATOR);",
          "248:         if (propertyDescriptorName.startsWith(SENSITIVE_PROPERTY_PREFIX)) {",
          "249:             builder.sensitive(true).expressionLanguageSupported(ExpressionLanguageScope.NONE);",
          "250:         } else {",
          "251:             builder.expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY);",
          "252:         }",
          "254:         return builder.build();",
          "255:     }",
          "257:     @Override",
          "258:     protected Map<String, String> getConnectionProperties(ConfigurationContext context) {",
          "259:         return getDynamicProperties(context)",
          "260:                 .stream()",
          "261:                 .map(descriptor -> {",
          "262:                     final PropertyValue propertyValue = context.getProperty(descriptor);",
          "263:                     if (descriptor.isSensitive()) {",
          "264:                         final String propertyName = StringUtils.substringAfter(descriptor.getName(), SENSITIVE_PROPERTY_PREFIX);",
          "265:                         return new AbstractMap.SimpleEntry<>(propertyName, propertyValue.getValue());",
          "266:                     } else {",
          "267:                         return new AbstractMap.SimpleEntry<>(descriptor.getName(), propertyValue.evaluateAttributeExpressions().getValue());",
          "268:                     }",
          "269:                 })",
          "270:                 .collect(Collectors.toMap(AbstractMap.SimpleEntry::getKey, AbstractMap.SimpleEntry::getValue));",
          "271:     }",
          "273:     @Override",
          "274:     protected Driver getDriver(final String driverName, final String url) {",
          "275:         final Class<?> clazz;",
          "277:         try {",
          "278:             clazz = Class.forName(driverName);",
          "279:         } catch (final ClassNotFoundException e) {",
          "280:             throw new ProcessException(\"Driver class \" + driverName + \" is not found\", e);",
          "281:         }",
          "283:         try {",
          "284:             return DriverManager.getDriver(url);",
          "285:         } catch (final SQLException e) {",
          "287:             try {",
          "288:                 final Driver driver = (Driver) clazz.newInstance();",
          "289:                 DriverManager.registerDriver(driver);",
          "290:                 return DriverManager.getDriver(url);",
          "291:             } catch (final SQLException e2) {",
          "292:                 throw new ProcessException(\"No suitable driver for the given Database Connection URL\", e2);",
          "293:             } catch (final IllegalAccessException | InstantiationException e2) {",
          "294:                 throw new ProcessException(\"Creating driver instance is failed\", e2);",
          "295:             }",
          "296:         }",
          "297:     }",
          "299:     @Override",
          "300:     protected KerberosUser getKerberosUserByCredentials(ConfigurationContext context) {",
          "301:         KerberosUser kerberosUser = super.getKerberosUserByCredentials(context);",
          "302:         if (kerberosUser == null) {",
          "303:             final KerberosCredentialsService kerberosCredentialsService = context.getProperty(KERBEROS_CREDENTIALS_SERVICE).asControllerService(KerberosCredentialsService.class);",
          "304:             final String kerberosPrincipal = context.getProperty(KERBEROS_PRINCIPAL).evaluateAttributeExpressions().getValue();",
          "305:             final String kerberosPassword = context.getProperty(KERBEROS_PASSWORD).getValue();",
          "306:             if (kerberosCredentialsService != null) {",
          "307:                 kerberosUser = new KerberosKeytabUser(kerberosCredentialsService.getPrincipal(), kerberosCredentialsService.getKeytab());",
          "308:             } else if (!StringUtils.isBlank(kerberosPrincipal) && !StringUtils.isBlank(kerberosPassword)) {",
          "309:                 kerberosUser = new KerberosPasswordUser(kerberosPrincipal, kerberosPassword);",
          "310:             }",
          "311:         }",
          "312:         return kerberosUser;",
          "313:     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/test/groovy/org/apache/nifi/record/sink/db/DatabaseRecordSinkTest.groovy||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/test/groovy/org/apache/nifi/record/sink/db/DatabaseRecordSinkTest.groovy": [
          "File: nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/test/groovy/org/apache/nifi/record/sink/db/DatabaseRecordSinkTest.groovy -> nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/test/groovy/org/apache/nifi/record/sink/db/DatabaseRecordSinkTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: import java.sql.SQLNonTransientConnectionException",
          "52: import java.sql.Statement",
          "60: import static org.apache.nifi.dbcp.DBCPConnectionPool.KERBEROS_CREDENTIALS_SERVICE",
          "62: import static org.apache.nifi.dbcp.DBCPConnectionPool.KERBEROS_PRINCIPAL",
          "72: import static org.junit.jupiter.api.Assertions.assertEquals",
          "73: import static org.junit.jupiter.api.Assertions.assertFalse",
          "74: import static org.junit.jupiter.api.Assertions.assertNotNull",
          "",
          "[Removed Lines]",
          "54: import static org.apache.nifi.dbcp.DBCPConnectionPool.DATABASE_URL",
          "55: import static org.apache.nifi.dbcp.DBCPConnectionPool.DB_DRIVERNAME",
          "56: import static org.apache.nifi.dbcp.DBCPConnectionPool.DB_DRIVER_LOCATION",
          "57: import static org.apache.nifi.dbcp.DBCPConnectionPool.DB_PASSWORD",
          "58: import static org.apache.nifi.dbcp.DBCPConnectionPool.DB_USER",
          "59: import static org.apache.nifi.dbcp.DBCPConnectionPool.EVICTION_RUN_PERIOD",
          "61: import static org.apache.nifi.dbcp.DBCPConnectionPool.KERBEROS_PASSWORD",
          "63: import static org.apache.nifi.dbcp.DBCPConnectionPool.KERBEROS_USER_SERVICE",
          "64: import static org.apache.nifi.dbcp.DBCPConnectionPool.MAX_CONN_LIFETIME",
          "65: import static org.apache.nifi.dbcp.DBCPConnectionPool.MAX_IDLE",
          "66: import static org.apache.nifi.dbcp.DBCPConnectionPool.MAX_TOTAL_CONNECTIONS",
          "67: import static org.apache.nifi.dbcp.DBCPConnectionPool.MAX_WAIT_TIME",
          "68: import static org.apache.nifi.dbcp.DBCPConnectionPool.MIN_EVICTABLE_IDLE_TIME",
          "69: import static org.apache.nifi.dbcp.DBCPConnectionPool.MIN_IDLE",
          "70: import static org.apache.nifi.dbcp.DBCPConnectionPool.SOFT_MIN_EVICTABLE_IDLE_TIME",
          "71: import static org.apache.nifi.dbcp.DBCPConnectionPool.VALIDATION_QUERY",
          "",
          "[Added Lines]",
          "54: import static org.apache.nifi.dbcp.utils.DBCPProperties.DATABASE_URL",
          "55: import static org.apache.nifi.dbcp.utils.DBCPProperties.DB_DRIVERNAME",
          "56: import static org.apache.nifi.dbcp.utils.DBCPProperties.DB_DRIVER_LOCATION",
          "57: import static org.apache.nifi.dbcp.utils.DBCPProperties.DB_PASSWORD",
          "58: import static org.apache.nifi.dbcp.utils.DBCPProperties.DB_USER",
          "59: import static org.apache.nifi.dbcp.utils.DBCPProperties.EVICTION_RUN_PERIOD",
          "62: import static org.apache.nifi.dbcp.DBCPConnectionPool.KERBEROS_PASSWORD",
          "63: import static org.apache.nifi.dbcp.utils.DBCPProperties.KERBEROS_USER_SERVICE",
          "64: import static org.apache.nifi.dbcp.utils.DBCPProperties.MAX_CONN_LIFETIME",
          "65: import static org.apache.nifi.dbcp.utils.DBCPProperties.MAX_IDLE",
          "66: import static org.apache.nifi.dbcp.utils.DBCPProperties.MAX_TOTAL_CONNECTIONS",
          "67: import static org.apache.nifi.dbcp.utils.DBCPProperties.MAX_WAIT_TIME",
          "68: import static org.apache.nifi.dbcp.utils.DBCPProperties.MIN_EVICTABLE_IDLE_TIME",
          "69: import static org.apache.nifi.dbcp.utils.DBCPProperties.MIN_IDLE",
          "70: import static org.apache.nifi.dbcp.utils.DBCPProperties.SOFT_MIN_EVICTABLE_IDLE_TIME",
          "71: import static org.apache.nifi.dbcp.utils.DBCPProperties.VALIDATION_QUERY",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/test/java/org/apache/nifi/dbcp/DBCPServiceTest.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/test/java/org/apache/nifi/dbcp/DBCPServiceTest.java": [
          "File: nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/test/java/org/apache/nifi/dbcp/DBCPServiceTest.java -> nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-dbcp-service/src/test/java/org/apache/nifi/dbcp/DBCPServiceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.nifi.dbcp;",
          "19: import org.apache.nifi.kerberos.KerberosCredentialsService;",
          "20: import org.apache.nifi.kerberos.KerberosUserService;",
          "21: import org.apache.nifi.kerberos.MockKerberosCredentialsService;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import org.apache.nifi.dbcp.utils.DBCPProperties;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:         runner.addControllerService(SERVICE_ID, service);",
          "85:         final String url = String.format(\"jdbc:derby:%s;create=true\", databaseDirectory);",
          "90:     }",
          "92:     @AfterEach",
          "",
          "[Removed Lines]",
          "86:         runner.setProperty(service, DBCPConnectionPool.DATABASE_URL, url);",
          "87:         runner.setProperty(service, DBCPConnectionPool.DB_USER, String.class.getSimpleName());",
          "88:         runner.setProperty(service, DBCPConnectionPool.DB_PASSWORD, String.class.getName());",
          "89:         runner.setProperty(service, DBCPConnectionPool.DB_DRIVERNAME, \"org.apache.derby.jdbc.EmbeddedDriver\");",
          "",
          "[Added Lines]",
          "87:         runner.setProperty(service, DBCPProperties.DATABASE_URL, url);",
          "88:         runner.setProperty(service, DBCPProperties.DB_USER, String.class.getSimpleName());",
          "89:         runner.setProperty(service, DBCPProperties.DB_PASSWORD, String.class.getName());",
          "90:         runner.setProperty(service, DBCPProperties.DB_DRIVERNAME, \"org.apache.derby.jdbc.EmbeddedDriver\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119:         final KerberosUserService kerberosUserService = enableKerberosUserService(runner);",
          "121:         runner.assertNotValid(service);",
          "",
          "[Removed Lines]",
          "120:         runner.setProperty(service, DBCPConnectionPool.KERBEROS_USER_SERVICE, kerberosUserService.getIdentifier());",
          "",
          "[Added Lines]",
          "121:         runner.setProperty(service, DBCPProperties.KERBEROS_USER_SERVICE, kerberosUserService.getIdentifier());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:     @Test",
          "134:     public void testNotValidWithNegativeMinIdleProperty() {",
          "136:         runner.assertNotValid(service);",
          "137:     }",
          "",
          "[Removed Lines]",
          "135:         runner.setProperty(service, DBCPConnectionPool.MIN_IDLE, \"-1\");",
          "",
          "[Added Lines]",
          "136:         runner.setProperty(service, DBCPProperties.MIN_IDLE, \"-1\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "185:         runner.enableControllerService(kerberosCredentialsService);",
          "191:         runner.setProperty(service, DBCPConnectionPool.KERBEROS_CREDENTIALS_SERVICE, kerberosServiceId);",
          "193:         try {",
          "",
          "[Removed Lines]",
          "188:         runner.setProperty(service, DBCPConnectionPool.DATABASE_URL, \"jdbc:derby://localhost:1527/NoDB\");",
          "190:         runner.setProperty(service, DBCPConnectionPool.DB_DRIVERNAME, \"org.apache.derby.jdbc.ClientDriver\");",
          "",
          "[Added Lines]",
          "189:         runner.setProperty(service, DBCPProperties.DATABASE_URL, \"jdbc:derby://localhost:1527/NoDB\");",
          "191:         runner.setProperty(service, DBCPProperties.DB_DRIVERNAME, \"org.apache.derby.jdbc.ClientDriver\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "203:     @Test",
          "204:     public void testGetConnection() throws SQLException {",
          "206:         runner.enableControllerService(service);",
          "207:         runner.assertValid(service);",
          "",
          "[Removed Lines]",
          "205:         runner.setProperty(service, DBCPConnectionPool.MAX_TOTAL_CONNECTIONS, \"2\");",
          "",
          "[Added Lines]",
          "206:         runner.setProperty(service, DBCPProperties.MAX_TOTAL_CONNECTIONS, \"2\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "217:     @Test",
          "218:     public void testGetConnectionMaxTotalConnectionsExceeded() {",
          "221:         runner.enableControllerService(service);",
          "222:         runner.assertValid(service);",
          "",
          "[Removed Lines]",
          "219:         runner.setProperty(service, DBCPConnectionPool.MAX_TOTAL_CONNECTIONS, \"1\");",
          "220:         runner.setProperty(service, DBCPConnectionPool.MAX_WAIT_TIME, \"1 ms\");",
          "",
          "[Added Lines]",
          "220:         runner.setProperty(service, DBCPProperties.MAX_TOTAL_CONNECTIONS, \"1\");",
          "221:         runner.setProperty(service, DBCPProperties.MAX_WAIT_TIME, \"1 ms\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "229:     @Test",
          "230:     public void testGetDataSourceProperties() throws SQLException {",
          "239:         runner.enableControllerService(service);",
          "",
          "[Removed Lines]",
          "231:         runner.setProperty(service, DBCPConnectionPool.MAX_WAIT_TIME, \"-1\");",
          "232:         runner.setProperty(service, DBCPConnectionPool.MAX_IDLE, \"6\");",
          "233:         runner.setProperty(service, DBCPConnectionPool.MIN_IDLE, \"4\");",
          "234:         runner.setProperty(service, DBCPConnectionPool.MAX_CONN_LIFETIME, \"1 secs\");",
          "235:         runner.setProperty(service, DBCPConnectionPool.EVICTION_RUN_PERIOD, \"1 secs\");",
          "236:         runner.setProperty(service, DBCPConnectionPool.MIN_EVICTABLE_IDLE_TIME, \"1 secs\");",
          "237:         runner.setProperty(service, DBCPConnectionPool.SOFT_MIN_EVICTABLE_IDLE_TIME, \"1 secs\");",
          "",
          "[Added Lines]",
          "232:         runner.setProperty(service, DBCPProperties.MAX_WAIT_TIME, \"-1\");",
          "233:         runner.setProperty(service, DBCPProperties.MAX_IDLE, \"6\");",
          "234:         runner.setProperty(service, DBCPProperties.MIN_IDLE, \"4\");",
          "235:         runner.setProperty(service, DBCPProperties.MAX_CONN_LIFETIME, \"1 secs\");",
          "236:         runner.setProperty(service, DBCPProperties.EVICTION_RUN_PERIOD, \"1 secs\");",
          "237:         runner.setProperty(service, DBCPProperties.MIN_EVICTABLE_IDLE_TIME, \"1 secs\");",
          "238:         runner.setProperty(service, DBCPProperties.SOFT_MIN_EVICTABLE_IDLE_TIME, \"1 secs\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1fdca9128bc5d9c61575837e5e08c3b97b86ed97",
      "candidate_info": {
        "commit_hash": "1fdca9128bc5d9c61575837e5e08c3b97b86ed97",
        "repo": "apache/nifi",
        "commit_url": "https://github.com/apache/nifi/commit/1fdca9128bc5d9c61575837e5e08c3b97b86ed97",
        "files": [
          "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java",
          "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java",
          "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java"
        ],
        "message": "NIFI-11920 Improved JDBC and JNDI JMS Connection URL Validation\n\nSigned-off-by: Matt Burgess <mattyb149@apache.org>",
        "before_after_code_files": [
          "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java||nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java",
          "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java",
          "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java||nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java",
            "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java",
            "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java",
            "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java",
            "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java",
            "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java",
            "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java",
            "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java"
          ],
          "candidate": [
            "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java||nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java",
            "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java",
            "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java",
            "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java",
            "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java",
            "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java",
            "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java",
            "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java"
          ]
        }
      },
      "candidate_diff": {
        "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java||nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java": [
          "File: nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java -> nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import org.apache.nifi.components.resource.ResourceType;",
          "23: import org.apache.nifi.dbcp.ConnectionUrlValidator;",
          "24: import org.apache.nifi.dbcp.DBCPValidator;",
          "25: import org.apache.nifi.expression.ExpressionLanguageScope;",
          "26: import org.apache.nifi.kerberos.KerberosUserService;",
          "27: import org.apache.nifi.processor.util.StandardValidators;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import org.apache.nifi.dbcp.DriverClassValidator;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:             .description(\"Database driver class name\")",
          "68:             .defaultValue(null)",
          "69:             .required(true)",
          "71:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "72:             .build();",
          "",
          "[Removed Lines]",
          "70:             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)",
          "",
          "[Added Lines]",
          "71:             .addValidator(new DriverClassValidator())",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java": [
          "File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java -> nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:         public ValidationResult validate(final String subject, final String input, final ValidationContext context) {",
          "159:             final ValidationResult.Builder builder = new ValidationResult.Builder().subject(subject).input(input);",
          "162:                 builder.valid(false);",
          "163:                 builder.explanation(\"URL is required\");",
          "165:                 builder.valid(true);",
          "166:                 builder.explanation(\"URL scheme allowed\");",
          "167:             } else {",
          "",
          "[Removed Lines]",
          "161:             if (input == null || input.isEmpty()) {",
          "164:             } else if (isUrlAllowed(input)) {",
          "",
          "[Added Lines]",
          "161:             final String url = context.newPropertyValue(input).evaluateAttributeExpressions().getValue();",
          "162:             if (url == null || url.isEmpty()) {",
          "165:             } else if (isUrlAllowed(url)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:         private boolean isUrlAllowed(final String input) {",
          "177:             final boolean allowed;",
          "180:             if (matcher.matches()) {",
          "181:                 final String scheme = matcher.group(SCHEME_GROUP);",
          "182:                 allowed = isSchemeAllowed(scheme);",
          "",
          "[Removed Lines]",
          "179:             final Matcher matcher = URL_SCHEME_PATTERN.matcher(input);",
          "",
          "[Added Lines]",
          "180:             final String normalizedUrl = input.trim();",
          "181:             final Matcher matcher = URL_SCHEME_PATTERN.matcher(normalizedUrl);",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java": [
          "File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java -> nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     private static final String LDAP_PROVIDER_URL = \"ldap://127.0.0.1\";",
          "44:     private static final String HOST_PORT_URL = \"127.0.0.1:1024\";",
          "46:     private static final String LDAP_ALLOWED_URL_SCHEMES = \"ldap\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:     private static final String LDAP_PROVIDER_URL_SPACED = String.format(\" %s\", LDAP_PROVIDER_URL);",
          "46:     private static final String LDAP_PROVIDER_URL_EXPRESSION = \"ldap:${separator}//127.0.0.1\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:         runner.assertNotValid(provider);",
          "82:     }",
          "84:     @Test",
          "85:     void testPropertiesHostPortUrl() {",
          "86:         setFactoryProperties();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     @Test",
          "89:     void testPropertiesInvalidUrlSchemeSpaced() {",
          "90:         setFactoryProperties();",
          "92:         runner.setProperty(provider, JndiJmsConnectionFactoryProperties.JNDI_PROVIDER_URL, LDAP_PROVIDER_URL_SPACED);",
          "94:         runner.assertNotValid(provider);",
          "95:     }",
          "97:     @Test",
          "98:     void testPropertiesInvalidUrlSchemeExpression() {",
          "99:         setFactoryProperties();",
          "101:         runner.setProperty(provider, JndiJmsConnectionFactoryProperties.JNDI_PROVIDER_URL, LDAP_PROVIDER_URL_EXPRESSION);",
          "103:         runner.assertNotValid(provider);",
          "104:     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java": [
          "File: nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java -> nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:             builder.valid(false);",
          "38:             builder.explanation(\"Connection URL required\");",
          "39:         } else {",
          "42:             if (isUrlUnsupported(url)) {",
          "43:                 builder.valid(false);",
          "45:             } else {",
          "46:                 builder.valid(true);",
          "47:                 builder.explanation(\"Connection URL is valid\");",
          "",
          "[Removed Lines]",
          "40:             final String url = context.newPropertyValue(input).evaluateAttributeExpressions().getValue();",
          "44:                 builder.explanation(String.format(\"Connection URL starts with an unsupported scheme %s\", UNSUPPORTED_SCHEMES));",
          "",
          "[Added Lines]",
          "40:             final String url = context.newPropertyValue(input).evaluateAttributeExpressions().getValue().trim();",
          "44:                 builder.explanation(String.format(\"Connection URL contains an unsupported scheme %s\", UNSUPPORTED_SCHEMES));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:         boolean unsupported = false;",
          "57:         for (final String unsupportedScheme : UNSUPPORTED_SCHEMES) {",
          "59:                 unsupported = true;",
          "60:                 break;",
          "61:             }",
          "",
          "[Removed Lines]",
          "58:             if (url.startsWith(unsupportedScheme)) {",
          "",
          "[Added Lines]",
          "58:             if (url.contains(unsupportedScheme)) {",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java": [
          "File: nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java -> nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.nifi.dbcp;",
          "19: import org.apache.nifi.components.ValidationContext;",
          "20: import org.apache.nifi.components.ValidationResult;",
          "21: import org.apache.nifi.components.Validator;",
          "23: import java.util.Collections;",
          "24: import java.util.Set;",
          "29: public class DriverClassValidator implements Validator {",
          "30:     private static final Set<String> UNSUPPORTED_CLASSES = Collections.singleton(\"org.h2.Driver\");",
          "32:     @Override",
          "33:     public ValidationResult validate(final String subject, final String input, final ValidationContext context) {",
          "34:         final ValidationResult.Builder builder = new ValidationResult.Builder().subject(subject).input(input);",
          "36:         if (input == null || input.isEmpty()) {",
          "37:             builder.valid(false);",
          "38:             builder.explanation(\"Driver Class required\");",
          "39:         } else {",
          "40:             final String driverClass = context.newPropertyValue(input).evaluateAttributeExpressions().getValue().trim();",
          "42:             if (isDriverClassUnsupported(driverClass)) {",
          "43:                 builder.valid(false);",
          "44:                 builder.explanation(String.format(\"Driver Class is listed as unsupported %s\", UNSUPPORTED_CLASSES));",
          "45:             } else {",
          "46:                 builder.valid(true);",
          "47:                 builder.explanation(\"Driver Class is valid\");",
          "48:             }",
          "49:         }",
          "51:         return builder.build();",
          "52:     }",
          "54:     private boolean isDriverClassUnsupported(final String driverClass) {",
          "55:         return UNSUPPORTED_CLASSES.contains(driverClass);",
          "56:     }",
          "57: }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java": [
          "File: nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java -> nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     private static final String UNSUPPORTED_URL = \"jdbc:h2:file\";",
          "40:     private static final String VENDOR_URL = \"jdbc:vendor\";",
          "42:     private ValidationContext validationContext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:     private static final String UNSUPPORTED_URL_SPACED = String.format(\" %s \", UNSUPPORTED_URL);",
          "42:     private static final String UNSUPPORTED_URL_EXPRESSION = String.format(\"${attribute}%s\", UNSUPPORTED_URL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:         assertFalse(result.isValid());",
          "68:     }",
          "70:     @Test",
          "71:     void testValidateSupportedUrl() {",
          "72:         final ValidationResult result = validator.validate(SUBJECT, VENDOR_URL, validationContext);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:     @Test",
          "75:     void testValidateUnsupportedUrlExpressionLanguage() {",
          "76:         final ValidationResult result = validator.validate(SUBJECT, UNSUPPORTED_URL_EXPRESSION, validationContext);",
          "78:         assertNotNull(result);",
          "79:         assertFalse(result.isValid());",
          "80:     }",
          "82:     @Test",
          "83:     void testValidateUnsupportedUrlSpaced() {",
          "84:         final ValidationResult result = validator.validate(SUBJECT, UNSUPPORTED_URL_SPACED, validationContext);",
          "86:         assertNotNull(result);",
          "87:         assertFalse(result.isValid());",
          "88:     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java": [
          "File: nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java -> nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.nifi.dbcp;",
          "19: import org.apache.nifi.components.ValidationContext;",
          "20: import org.apache.nifi.components.ValidationResult;",
          "21: import org.apache.nifi.util.MockProcessContext;",
          "22: import org.apache.nifi.util.MockValidationContext;",
          "23: import org.apache.nifi.util.NoOpProcessor;",
          "24: import org.apache.nifi.util.TestRunners;",
          "25: import org.junit.jupiter.api.BeforeEach;",
          "26: import org.junit.jupiter.api.Test;",
          "28: import static org.junit.jupiter.api.Assertions.assertFalse;",
          "29: import static org.junit.jupiter.api.Assertions.assertNotNull;",
          "30: import static org.junit.jupiter.api.Assertions.assertTrue;",
          "32: class DriverClassValidatorTest {",
          "34:     private static final String SUBJECT = \"Database Driver Class\";",
          "36:     private static final String EMPTY = \"\";",
          "38:     private static final String UNSUPPORTED_DRIVER = \"org.h2.Driver\";",
          "40:     private static final String UNSUPPORTED_DRIVER_SPACED = String.format(\" %s \", UNSUPPORTED_DRIVER);",
          "42:     private static final String UNSUPPORTED_DRIVER_EXPRESSION = String.format(\"${attribute}%s\", UNSUPPORTED_DRIVER);",
          "44:     private static final String OTHER_DRIVER = \"org.apache.nifi.Driver\";",
          "46:     private ValidationContext validationContext;",
          "48:     private DriverClassValidator validator;",
          "50:     @BeforeEach",
          "51:     void setValidator() {",
          "52:         validator = new DriverClassValidator();",
          "54:         final MockProcessContext processContext = (MockProcessContext) TestRunners.newTestRunner(NoOpProcessor.class).getProcessContext();",
          "55:         validationContext = new MockValidationContext(processContext);",
          "56:     }",
          "58:     @Test",
          "59:     void testValidateEmpty() {",
          "60:         final ValidationResult result = validator.validate(SUBJECT, EMPTY, validationContext);",
          "62:         assertNotNull(result);",
          "63:         assertFalse(result.isValid());",
          "64:     }",
          "66:     @Test",
          "67:     void testValidateUnsupportedDriver() {",
          "68:         final ValidationResult result = validator.validate(SUBJECT, UNSUPPORTED_DRIVER, validationContext);",
          "70:         assertNotNull(result);",
          "71:         assertFalse(result.isValid());",
          "72:     }",
          "74:     @Test",
          "75:     void testValidateUnsupportedDriverExpressionLanguage() {",
          "76:         final ValidationResult result = validator.validate(SUBJECT, UNSUPPORTED_DRIVER_EXPRESSION, validationContext);",
          "78:         assertNotNull(result);",
          "79:         assertFalse(result.isValid());",
          "80:     }",
          "82:     @Test",
          "83:     void testValidateUnsupportedDriverSpaced() {",
          "84:         final ValidationResult result = validator.validate(SUBJECT, UNSUPPORTED_DRIVER_SPACED, validationContext);",
          "86:         assertNotNull(result);",
          "87:         assertFalse(result.isValid());",
          "88:     }",
          "90:     @Test",
          "91:     void testValidateSupportedDriver() {",
          "92:         final ValidationResult result = validator.validate(SUBJECT, OTHER_DRIVER, validationContext);",
          "94:         assertNotNull(result);",
          "95:         assertTrue(result.isValid());",
          "96:     }",
          "97: }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java": [
          "File: nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java -> nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:             .description(\"The fully-qualified class name of the JDBC driver. Example: com.mysql.jdbc.Driver\")",
          "99:             .defaultValue(null)",
          "100:             .required(true)",
          "102:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "103:             .build();",
          "",
          "[Removed Lines]",
          "101:             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)",
          "",
          "[Added Lines]",
          "101:             .addValidator(new DriverClassValidator())",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "84326ba4b2853f67e7c60aaff0790d3ccf82fdb5",
      "candidate_info": {
        "commit_hash": "84326ba4b2853f67e7c60aaff0790d3ccf82fdb5",
        "repo": "apache/nifi",
        "commit_url": "https://github.com/apache/nifi/commit/84326ba4b2853f67e7c60aaff0790d3ccf82fdb5",
        "files": [
          "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java",
          "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java",
          "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java"
        ],
        "message": "NIFI-11920 Improved JDBC and JNDI JMS Connection URL Validation\n\nSigned-off-by: Matt Burgess <mattyb149@apache.org>\n\nThis closes #7586",
        "before_after_code_files": [
          "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java||nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java",
          "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java",
          "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java",
          "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java||nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java",
            "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java",
            "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java",
            "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java",
            "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java",
            "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java",
            "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java",
            "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java"
          ],
          "candidate": [
            "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java||nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java",
            "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java",
            "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java",
            "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java",
            "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java",
            "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java",
            "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java",
            "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java"
          ]
        }
      },
      "candidate_diff": {
        "nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java||nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java": [
          "File: nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java -> nifi-nar-bundles/nifi-extension-utils/nifi-dbcp-base/src/main/java/org/apache/nifi/dbcp/utils/DBCPProperties.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import org.apache.nifi.components.resource.ResourceType;",
          "23: import org.apache.nifi.dbcp.ConnectionUrlValidator;",
          "24: import org.apache.nifi.dbcp.DBCPValidator;",
          "25: import org.apache.nifi.expression.ExpressionLanguageScope;",
          "26: import org.apache.nifi.kerberos.KerberosUserService;",
          "27: import org.apache.nifi.processor.util.StandardValidators;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import org.apache.nifi.dbcp.DriverClassValidator;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:             .description(\"Database driver class name\")",
          "68:             .defaultValue(null)",
          "69:             .required(true)",
          "71:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "72:             .build();",
          "",
          "[Removed Lines]",
          "70:             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)",
          "",
          "[Added Lines]",
          "71:             .addValidator(new DriverClassValidator())",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java": [
          "File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java -> nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/main/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProperties.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:         public ValidationResult validate(final String subject, final String input, final ValidationContext context) {",
          "159:             final ValidationResult.Builder builder = new ValidationResult.Builder().subject(subject).input(input);",
          "162:                 builder.valid(false);",
          "163:                 builder.explanation(\"URL is required\");",
          "165:                 builder.valid(true);",
          "166:                 builder.explanation(\"URL scheme allowed\");",
          "167:             } else {",
          "",
          "[Removed Lines]",
          "161:             if (input == null || input.isEmpty()) {",
          "164:             } else if (isUrlAllowed(input)) {",
          "",
          "[Added Lines]",
          "161:             final String url = context.newPropertyValue(input).evaluateAttributeExpressions().getValue();",
          "162:             if (url == null || url.isEmpty()) {",
          "165:             } else if (isUrlAllowed(url)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:         private boolean isUrlAllowed(final String input) {",
          "177:             final boolean allowed;",
          "180:             if (matcher.matches()) {",
          "181:                 final String scheme = matcher.group(SCHEME_GROUP);",
          "182:                 allowed = isSchemeAllowed(scheme);",
          "",
          "[Removed Lines]",
          "179:             final Matcher matcher = URL_SCHEME_PATTERN.matcher(input);",
          "",
          "[Added Lines]",
          "180:             final String normalizedUrl = input.trim();",
          "181:             final Matcher matcher = URL_SCHEME_PATTERN.matcher(normalizedUrl);",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java||nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java": [
          "File: nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java -> nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/cf/JndiJmsConnectionFactoryProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     private static final String LDAP_PROVIDER_URL = \"ldap://127.0.0.1\";",
          "44:     private static final String HOST_PORT_URL = \"127.0.0.1:1024\";",
          "46:     private static final String LDAP_ALLOWED_URL_SCHEMES = \"ldap\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:     private static final String LDAP_PROVIDER_URL_SPACED = String.format(\" %s\", LDAP_PROVIDER_URL);",
          "46:     private static final String LDAP_PROVIDER_URL_EXPRESSION = \"ldap:${separator}//127.0.0.1\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:         runner.assertNotValid(provider);",
          "82:     }",
          "84:     @Test",
          "85:     void testPropertiesHostPortUrl() {",
          "86:         setFactoryProperties();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     @Test",
          "89:     void testPropertiesInvalidUrlSchemeSpaced() {",
          "90:         setFactoryProperties();",
          "92:         runner.setProperty(provider, JndiJmsConnectionFactoryProperties.JNDI_PROVIDER_URL, LDAP_PROVIDER_URL_SPACED);",
          "94:         runner.assertNotValid(provider);",
          "95:     }",
          "97:     @Test",
          "98:     void testPropertiesInvalidUrlSchemeExpression() {",
          "99:         setFactoryProperties();",
          "101:         runner.setProperty(provider, JndiJmsConnectionFactoryProperties.JNDI_PROVIDER_URL, LDAP_PROVIDER_URL_EXPRESSION);",
          "103:         runner.assertNotValid(provider);",
          "104:     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java": [
          "File: nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java -> nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/ConnectionUrlValidator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:             builder.valid(false);",
          "38:             builder.explanation(\"Connection URL required\");",
          "39:         } else {",
          "42:             if (isUrlUnsupported(url)) {",
          "43:                 builder.valid(false);",
          "45:             } else {",
          "46:                 builder.valid(true);",
          "47:                 builder.explanation(\"Connection URL is valid\");",
          "",
          "[Removed Lines]",
          "40:             final String url = context.newPropertyValue(input).evaluateAttributeExpressions().getValue();",
          "44:                 builder.explanation(String.format(\"Connection URL starts with an unsupported scheme %s\", UNSUPPORTED_SCHEMES));",
          "",
          "[Added Lines]",
          "40:             final String url = context.newPropertyValue(input).evaluateAttributeExpressions().getValue().trim();",
          "44:                 builder.explanation(String.format(\"Connection URL contains an unsupported scheme %s\", UNSUPPORTED_SCHEMES));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:         boolean unsupported = false;",
          "57:         for (final String unsupportedScheme : UNSUPPORTED_SCHEMES) {",
          "59:                 unsupported = true;",
          "60:                 break;",
          "61:             }",
          "",
          "[Removed Lines]",
          "58:             if (url.startsWith(unsupportedScheme)) {",
          "",
          "[Added Lines]",
          "58:             if (url.contains(unsupportedScheme)) {",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java": [
          "File: nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java -> nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DriverClassValidator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.nifi.dbcp;",
          "19: import org.apache.nifi.components.ValidationContext;",
          "20: import org.apache.nifi.components.ValidationResult;",
          "21: import org.apache.nifi.components.Validator;",
          "23: import java.util.Collections;",
          "24: import java.util.Set;",
          "29: public class DriverClassValidator implements Validator {",
          "30:     private static final Set<String> UNSUPPORTED_CLASSES = Collections.singleton(\"org.h2.Driver\");",
          "32:     @Override",
          "33:     public ValidationResult validate(final String subject, final String input, final ValidationContext context) {",
          "34:         final ValidationResult.Builder builder = new ValidationResult.Builder().subject(subject).input(input);",
          "36:         if (input == null || input.isEmpty()) {",
          "37:             builder.valid(false);",
          "38:             builder.explanation(\"Driver Class required\");",
          "39:         } else {",
          "40:             final String driverClass = context.newPropertyValue(input).evaluateAttributeExpressions().getValue().trim();",
          "42:             if (isDriverClassUnsupported(driverClass)) {",
          "43:                 builder.valid(false);",
          "44:                 builder.explanation(String.format(\"Driver Class is listed as unsupported %s\", UNSUPPORTED_CLASSES));",
          "45:             } else {",
          "46:                 builder.valid(true);",
          "47:                 builder.explanation(\"Driver Class is valid\");",
          "48:             }",
          "49:         }",
          "51:         return builder.build();",
          "52:     }",
          "54:     private boolean isDriverClassUnsupported(final String driverClass) {",
          "55:         return UNSUPPORTED_CLASSES.contains(driverClass);",
          "56:     }",
          "57: }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java": [
          "File: nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java -> nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/ConnectionUrlValidatorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     private static final String UNSUPPORTED_URL = \"jdbc:h2:file\";",
          "40:     private static final String VENDOR_URL = \"jdbc:vendor\";",
          "42:     private ValidationContext validationContext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:     private static final String UNSUPPORTED_URL_SPACED = String.format(\" %s \", UNSUPPORTED_URL);",
          "42:     private static final String UNSUPPORTED_URL_EXPRESSION = String.format(\"${attribute}%s\", UNSUPPORTED_URL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:         assertFalse(result.isValid());",
          "68:     }",
          "70:     @Test",
          "71:     void testValidateSupportedUrl() {",
          "72:         final ValidationResult result = validator.validate(SUBJECT, VENDOR_URL, validationContext);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:     @Test",
          "75:     void testValidateUnsupportedUrlExpressionLanguage() {",
          "76:         final ValidationResult result = validator.validate(SUBJECT, UNSUPPORTED_URL_EXPRESSION, validationContext);",
          "78:         assertNotNull(result);",
          "79:         assertFalse(result.isValid());",
          "80:     }",
          "82:     @Test",
          "83:     void testValidateUnsupportedUrlSpaced() {",
          "84:         final ValidationResult result = validator.validate(SUBJECT, UNSUPPORTED_URL_SPACED, validationContext);",
          "86:         assertNotNull(result);",
          "87:         assertFalse(result.isValid());",
          "88:     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java": [
          "File: nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java -> nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/test/java/org/apache/nifi/dbcp/DriverClassValidatorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.nifi.dbcp;",
          "19: import org.apache.nifi.components.ValidationContext;",
          "20: import org.apache.nifi.components.ValidationResult;",
          "21: import org.apache.nifi.util.MockProcessContext;",
          "22: import org.apache.nifi.util.MockValidationContext;",
          "23: import org.apache.nifi.util.NoOpProcessor;",
          "24: import org.apache.nifi.util.TestRunners;",
          "25: import org.junit.jupiter.api.BeforeEach;",
          "26: import org.junit.jupiter.api.Test;",
          "28: import static org.junit.jupiter.api.Assertions.assertFalse;",
          "29: import static org.junit.jupiter.api.Assertions.assertNotNull;",
          "30: import static org.junit.jupiter.api.Assertions.assertTrue;",
          "32: class DriverClassValidatorTest {",
          "34:     private static final String SUBJECT = \"Database Driver Class\";",
          "36:     private static final String EMPTY = \"\";",
          "38:     private static final String UNSUPPORTED_DRIVER = \"org.h2.Driver\";",
          "40:     private static final String UNSUPPORTED_DRIVER_SPACED = String.format(\" %s \", UNSUPPORTED_DRIVER);",
          "42:     private static final String UNSUPPORTED_DRIVER_EXPRESSION = String.format(\"${attribute}%s\", UNSUPPORTED_DRIVER);",
          "44:     private static final String OTHER_DRIVER = \"org.apache.nifi.Driver\";",
          "46:     private ValidationContext validationContext;",
          "48:     private DriverClassValidator validator;",
          "50:     @BeforeEach",
          "51:     void setValidator() {",
          "52:         validator = new DriverClassValidator();",
          "54:         final MockProcessContext processContext = (MockProcessContext) TestRunners.newTestRunner(NoOpProcessor.class).getProcessContext();",
          "55:         validationContext = new MockValidationContext(processContext);",
          "56:     }",
          "58:     @Test",
          "59:     void testValidateEmpty() {",
          "60:         final ValidationResult result = validator.validate(SUBJECT, EMPTY, validationContext);",
          "62:         assertNotNull(result);",
          "63:         assertFalse(result.isValid());",
          "64:     }",
          "66:     @Test",
          "67:     void testValidateUnsupportedDriver() {",
          "68:         final ValidationResult result = validator.validate(SUBJECT, UNSUPPORTED_DRIVER, validationContext);",
          "70:         assertNotNull(result);",
          "71:         assertFalse(result.isValid());",
          "72:     }",
          "74:     @Test",
          "75:     void testValidateUnsupportedDriverExpressionLanguage() {",
          "76:         final ValidationResult result = validator.validate(SUBJECT, UNSUPPORTED_DRIVER_EXPRESSION, validationContext);",
          "78:         assertNotNull(result);",
          "79:         assertFalse(result.isValid());",
          "80:     }",
          "82:     @Test",
          "83:     void testValidateUnsupportedDriverSpaced() {",
          "84:         final ValidationResult result = validator.validate(SUBJECT, UNSUPPORTED_DRIVER_SPACED, validationContext);",
          "86:         assertNotNull(result);",
          "87:         assertFalse(result.isValid());",
          "88:     }",
          "90:     @Test",
          "91:     void testValidateSupportedDriver() {",
          "92:         final ValidationResult result = validator.validate(SUBJECT, OTHER_DRIVER, validationContext);",
          "94:         assertNotNull(result);",
          "95:         assertTrue(result.isValid());",
          "96:     }",
          "97: }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java||nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java": [
          "File: nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java -> nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-bundle/nifi-hikari-dbcp-service/src/main/java/org/apache/nifi/dbcp/HikariCPConnectionPool.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:             .description(\"The fully-qualified class name of the JDBC driver. Example: com.mysql.jdbc.Driver\")",
          "99:             .defaultValue(null)",
          "100:             .required(true)",
          "102:             .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)",
          "103:             .build();",
          "",
          "[Removed Lines]",
          "101:             .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)",
          "",
          "[Added Lines]",
          "101:             .addValidator(new DriverClassValidator())",
          "",
          "---------------"
        ]
      }
    }
  ]
}