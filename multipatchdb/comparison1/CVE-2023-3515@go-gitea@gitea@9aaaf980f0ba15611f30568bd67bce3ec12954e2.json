{
  "cve_id": "CVE-2023-3515",
  "cve_desc": "Open Redirect in GitHub repository go-gitea/gitea prior to 1.19.4.",
  "repo": "go-gitea/gitea",
  "patch_hash": "9aaaf980f0ba15611f30568bd67bce3ec12954e2",
  "patch_info": {
    "commit_hash": "9aaaf980f0ba15611f30568bd67bce3ec12954e2",
    "repo": "go-gitea/gitea",
    "commit_url": "https://github.com/go-gitea/gitea/commit/9aaaf980f0ba15611f30568bd67bce3ec12954e2",
    "files": [
      "modules/context/context_response.go"
    ],
    "message": "Fix open redirect check for more cases (#25143)\n\nIf redirect_to parameter has set value starting with `\\\\example.com`\nredirect will be created with header `Location: /\\\\example.com` that\nwill redirect to example.com domain.",
    "before_after_code_files": [
      "modules/context/context_response.go||modules/context/context_response.go"
    ]
  },
  "patch_diff": {
    "modules/context/context_response.go||modules/context/context_response.go": [
      "File: modules/context/context_response.go -> modules/context/context_response.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "49:    continue",
      "50:   }",
      "55:    continue",
      "56:   }",
      "",
      "[Removed Lines]",
      "54:   if len(loc) > 1 && loc[0] == '/' && (loc[1] == '/' || loc[1] == '\\\\') {",
      "",
      "[Added Lines]",
      "54:   if len(loc) > 1 && (loc[0] == '/' || loc[0] == '\\\\') && (loc[1] == '/' || loc[1] == '\\\\') {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cb700aedd1e670fb47b8cf0cd67fb117a1ad88a2",
      "candidate_info": {
        "commit_hash": "cb700aedd1e670fb47b8cf0cd67fb117a1ad88a2",
        "repo": "go-gitea/gitea",
        "commit_url": "https://github.com/go-gitea/gitea/commit/cb700aedd1e670fb47b8cf0cd67fb117a1ad88a2",
        "files": [
          "models/repo.go",
          "models/repo/search.go",
          "modules/context/context.go",
          "modules/context/context_cookie.go",
          "modules/context/context_data.go",
          "modules/context/context_form.go",
          "modules/context/context_model.go",
          "modules/context/context_request.go",
          "modules/context/context_response.go",
          "modules/context/context_serve.go",
          "modules/context/form.go",
          "modules/context/repo.go",
          "routers/api/v1/repo/repo.go",
          "routers/web/admin/users.go",
          "routers/web/auth/auth.go",
          "routers/web/auth/password.go",
          "routers/web/repo/repo.go",
          "routers/web/repo/view.go",
          "routers/web/user/setting/account.go"
        ],
        "message": "Split \"modules/context.go\" to separate files (#24569)\n\nThe \"modules/context.go\" is too large to maintain.\n\nThis PR splits it to separate files, eg: context_request.go,\ncontext_response.go, context_serve.go\n\nThis PR will help:\n\n1. The future refactoring for Gitea's web context (eg: simplify the context)\n2. Introduce proper \"range request\" support\n3. Introduce context function\n\nThis PR only moves code, doesn't change any logic.",
        "before_after_code_files": [
          "models/repo.go||models/repo.go",
          "models/repo/search.go||models/repo/search.go",
          "modules/context/context.go||modules/context/context.go",
          "modules/context/context_cookie.go||modules/context/context_cookie.go",
          "modules/context/context_data.go||modules/context/context_data.go",
          "modules/context/context_model.go||modules/context/context_model.go",
          "modules/context/context_request.go||modules/context/context_request.go",
          "modules/context/context_response.go||modules/context/context_response.go",
          "modules/context/context_serve.go||modules/context/context_serve.go",
          "modules/context/repo.go||modules/context/repo.go",
          "routers/api/v1/repo/repo.go||routers/api/v1/repo/repo.go",
          "routers/web/admin/users.go||routers/weadmin/users.go",
          "routers/web/auth/auth.go||routers/weauth/auth.go",
          "routers/web/auth/password.go||routers/weauth/password.go",
          "routers/web/repo/repo.go||routers/werepo/repo.go",
          "routers/web/repo/view.go||routers/werepo/view.go",
          "routers/web/user/setting/account.go||routers/weuser/setting/account.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "modules/context/context_response.go||modules/context/context_response.go"
          ],
          "candidate": [
            "modules/context/context_response.go||modules/context/context_response.go"
          ]
        }
      },
      "candidate_diff": {
        "models/repo.go||models/repo.go": [
          "File: models/repo.go -> models/repo.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:  \"xorm.io/builder\"",
          "36: )",
          "42: func Init(ctx context.Context) error {",
          "43:  if err := unit.LoadUnitConfig(); err != nil {",
          "",
          "[Removed Lines]",
          "39: var ItemsPerPage = 40",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "models/repo/search.go||models/repo/search.go": [
          "File: models/repo/search.go -> models/repo/search.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: package repo",
          "6: import \"code.gitea.io/gitea/models/db\"",
          "9: var SearchOrderByMap = map[string]map[string]db.SearchOrderBy{",
          "10:  \"asc\": {",
          "11:   \"alpha\":   db.SearchOrderByAlphabetically,",
          "12:   \"created\": db.SearchOrderByOldest,",
          "13:   \"updated\": db.SearchOrderByLeastUpdated,",
          "14:   \"size\":    db.SearchOrderBySize,",
          "15:   \"id\":      db.SearchOrderByID,",
          "16:  },",
          "17:  \"desc\": {",
          "18:   \"alpha\":   db.SearchOrderByAlphabeticallyReverse,",
          "19:   \"created\": db.SearchOrderByNewest,",
          "20:   \"updated\": db.SearchOrderByRecentUpdated,",
          "21:   \"size\":    db.SearchOrderBySizeReverse,",
          "22:   \"id\":      db.SearchOrderByIDReverse,",
          "23:  },",
          "24: }",
          "",
          "---------------"
        ],
        "modules/context/context.go||modules/context/context.go": [
          "File: modules/context/context.go -> modules/context/context.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import (",
          "8:  \"context\"",
          "12:  \"html\"",
          "13:  \"html/template\"",
          "14:  \"io\"",
          "16:  \"net/http\"",
          "17:  \"net/url\"",
          "20:  \"strings\"",
          "21:  \"time\"",
          "24:  \"code.gitea.io/gitea/models/unit\"",
          "25:  user_model \"code.gitea.io/gitea/models/user\"",
          "27:  mc \"code.gitea.io/gitea/modules/cache\"",
          "28:  \"code.gitea.io/gitea/modules/git\"",
          "29:  \"code.gitea.io/gitea/modules/httpcache\"",
          "32:  \"code.gitea.io/gitea/modules/setting\"",
          "33:  \"code.gitea.io/gitea/modules/templates\"",
          "34:  \"code.gitea.io/gitea/modules/translation\"",
          "37:  \"code.gitea.io/gitea/modules/web/middleware\"",
          "39:  \"gitea.com/go-chi/cache\"",
          "40:  \"gitea.com/go-chi/session\"",
          "44: )",
          "49: type Render interface {",
          "50:  TemplateLookup(tmpl string) (templates.TemplateExecutor, error)",
          "",
          "[Removed Lines]",
          "9:  \"encoding/hex\"",
          "10:  \"errors\"",
          "11:  \"fmt\"",
          "15:  \"net\"",
          "18:  \"path\"",
          "19:  \"strconv\"",
          "23:  \"code.gitea.io/gitea/models/db\"",
          "26:  \"code.gitea.io/gitea/modules/base\"",
          "30:  \"code.gitea.io/gitea/modules/json\"",
          "31:  \"code.gitea.io/gitea/modules/log\"",
          "35:  \"code.gitea.io/gitea/modules/typesniffer\"",
          "36:  \"code.gitea.io/gitea/modules/util\"",
          "41:  chi \"github.com/go-chi/chi/v5\"",
          "42:  \"github.com/minio/sha256-simd\"",
          "43:  \"golang.org/x/crypto/pbkdf2\"",
          "46: const CookieNameFlash = \"gitea_flash\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:  Resp     ResponseWriter",
          "57:  Req      *http.Request",
          "58:  Data     middleware.ContextData // data used by MVC templates",
          "60:  Render   Render",
          "67:  Link        string // current request URL",
          "68:  EscapedLink string",
          "",
          "[Removed Lines]",
          "59:  PageData map[string]interface{} // data used by JavaScript modules in one page, it's `window.config.pageData`",
          "61:  translation.Locale",
          "62:  Cache   cache.Cache",
          "63:  Csrf    CSRFProtector",
          "64:  Flash   *middleware.Flash",
          "65:  Session session.Store",
          "",
          "[Added Lines]",
          "42:  PageData map[string]any         // data used by JavaScript modules in one page, it's `window.config.pageData`",
          "44:  Locale   translation.Locale",
          "45:  Cache    cache.Cache",
          "46:  Csrf     CSRFProtector",
          "47:  Flash    *middleware.Flash",
          "48:  Session  session.Store",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:  return err",
          "87: }",
          "91: func (ctx *Context) TrHTMLEscapeArgs(msg string, args ...string) string {",
          "92:  trArgs := make([]interface{}, len(args))",
          "93:  for i, arg := range args {",
          "94:   trArgs[i] = html.EscapeString(arg)",
          "95:  }",
          "158: }",
          "215: }",
          "596: }",
          "",
          "[Removed Lines]",
          "96:  return ctx.Tr(msg, trArgs...)",
          "97: }",
          "100: func (ctx *Context) GetData() middleware.ContextData {",
          "101:  return ctx.Data",
          "102: }",
          "105: func (ctx *Context) IsUserSiteAdmin() bool {",
          "106:  return ctx.IsSigned && ctx.Doer.IsAdmin",
          "107: }",
          "110: func (ctx *Context) IsUserRepoOwner() bool {",
          "111:  return ctx.Repo.IsOwner()",
          "112: }",
          "115: func (ctx *Context) IsUserRepoAdmin() bool {",
          "116:  return ctx.Repo.IsAdmin()",
          "117: }",
          "120: func (ctx *Context) IsUserRepoWriter(unitTypes []unit.Type) bool {",
          "121:  for _, unitType := range unitTypes {",
          "122:   if ctx.Repo.CanWrite(unitType) {",
          "123:    return true",
          "124:   }",
          "125:  }",
          "127:  return false",
          "128: }",
          "131: func (ctx *Context) IsUserRepoReaderSpecific(unitType unit.Type) bool {",
          "132:  return ctx.Repo.CanRead(unitType)",
          "133: }",
          "136: func (ctx *Context) IsUserRepoReaderAny() bool {",
          "137:  return ctx.Repo.HasAccess()",
          "138: }",
          "141: func RedirectToUser(ctx *Context, userName string, redirectUserID int64) {",
          "142:  user, err := user_model.GetUserByID(ctx, redirectUserID)",
          "143:  if err != nil {",
          "144:   ctx.ServerError(\"GetUserByID\", err)",
          "145:   return",
          "146:  }",
          "148:  redirectPath := strings.Replace(",
          "149:   ctx.Req.URL.EscapedPath(),",
          "150:   url.PathEscape(userName),",
          "151:   url.PathEscape(user.Name),",
          "152:   1,",
          "153:  )",
          "154:  if ctx.Req.URL.RawQuery != \"\" {",
          "155:   redirectPath += \"?\" + ctx.Req.URL.RawQuery",
          "156:  }",
          "157:  ctx.Redirect(path.Join(setting.AppSubURL, redirectPath), http.StatusTemporaryRedirect)",
          "161: func (ctx *Context) HasAPIError() bool {",
          "162:  hasErr, ok := ctx.Data[\"HasError\"]",
          "163:  if !ok {",
          "164:   return false",
          "165:  }",
          "166:  return hasErr.(bool)",
          "167: }",
          "170: func (ctx *Context) GetErrMsg() string {",
          "171:  return ctx.Data[\"ErrorMsg\"].(string)",
          "172: }",
          "176: func (ctx *Context) HasError() bool {",
          "177:  hasErr, ok := ctx.Data[\"HasError\"]",
          "178:  if !ok {",
          "179:   return false",
          "180:  }",
          "181:  ctx.Flash.ErrorMsg = ctx.Data[\"ErrorMsg\"].(string)",
          "182:  ctx.Data[\"Flash\"] = ctx.Flash",
          "183:  return hasErr.(bool)",
          "184: }",
          "187: func (ctx *Context) HasValue(name string) bool {",
          "188:  _, ok := ctx.Data[name]",
          "189:  return ok",
          "190: }",
          "193: func (ctx *Context) RedirectToFirst(location ...string) {",
          "194:  for _, loc := range location {",
          "195:   if len(loc) == 0 {",
          "196:    continue",
          "197:   }",
          "201:   if len(loc) > 1 && loc[0] == '/' && (loc[1] == '/' || loc[1] == '\\\\') {",
          "202:    continue",
          "203:   }",
          "205:   u, err := url.Parse(loc)",
          "206:   if err != nil || ((u.Scheme != \"\" || u.Host != \"\") && !strings.HasPrefix(strings.ToLower(loc), strings.ToLower(setting.AppURL))) {",
          "207:    continue",
          "208:   }",
          "210:   ctx.Redirect(loc)",
          "211:   return",
          "212:  }",
          "214:  ctx.Redirect(setting.AppSubURL + \"/\")",
          "217: const tplStatus500 base.TplName = \"status/500\"",
          "220: func (ctx *Context) HTML(status int, name base.TplName) {",
          "221:  log.Debug(\"Template: %s\", name)",
          "223:  tmplStartTime := time.Now()",
          "224:  if !setting.IsProd {",
          "225:   ctx.Data[\"TemplateName\"] = name",
          "226:  }",
          "227:  ctx.Data[\"TemplateLoadTimes\"] = func() string {",
          "228:   return strconv.FormatInt(time.Since(tmplStartTime).Nanoseconds()/1e6, 10) + \"ms\"",
          "229:  }",
          "231:  err := ctx.Render.HTML(ctx.Resp, status, string(name), ctx.Data)",
          "232:  if err == nil {",
          "233:   return",
          "234:  }",
          "237:  if name != tplStatus500 {",
          "238:   err = fmt.Errorf(\"failed to render template: %s, error: %s\", name, templates.HandleTemplateRenderingError(err))",
          "239:   ctx.ServerError(\"Render failed\", err) // show the 500 error page",
          "240:  } else {",
          "241:   ctx.PlainText(http.StatusInternalServerError, \"Unable to render status/500 page, the template system is broken, or Gitea can't find your template files.\")",
          "242:   return",
          "243:  }",
          "244: }",
          "247: func (ctx *Context) RenderToString(name base.TplName, data map[string]interface{}) (string, error) {",
          "248:  var buf strings.Builder",
          "249:  err := ctx.Render.HTML(&buf, http.StatusOK, string(name), data)",
          "250:  return buf.String(), err",
          "251: }",
          "254: func (ctx *Context) RenderWithErr(msg string, tpl base.TplName, form interface{}) {",
          "255:  if form != nil {",
          "256:   middleware.AssignForm(form, ctx.Data)",
          "257:  }",
          "258:  ctx.Flash.ErrorMsg = msg",
          "259:  ctx.Data[\"Flash\"] = ctx.Flash",
          "260:  ctx.HTML(http.StatusOK, tpl)",
          "261: }",
          "264: func (ctx *Context) NotFound(logMsg string, logErr error) {",
          "265:  ctx.notFoundInternal(logMsg, logErr)",
          "266: }",
          "268: func (ctx *Context) notFoundInternal(logMsg string, logErr error) {",
          "269:  if logErr != nil {",
          "270:   log.Log(2, log.DEBUG, \"%s: %v\", logMsg, logErr)",
          "271:   if !setting.IsProd {",
          "272:    ctx.Data[\"ErrorMsg\"] = logErr",
          "273:   }",
          "274:  }",
          "277:  showHTML := false",
          "278:  for _, part := range ctx.Req.Header[\"Accept\"] {",
          "279:   if strings.Contains(part, \"text/html\") {",
          "280:    showHTML = true",
          "281:    break",
          "282:   }",
          "283:  }",
          "285:  if !showHTML {",
          "286:   ctx.plainTextInternal(3, http.StatusNotFound, []byte(\"Not found.\\n\"))",
          "287:   return",
          "288:  }",
          "290:  ctx.Data[\"IsRepo\"] = ctx.Repo.Repository != nil",
          "291:  ctx.Data[\"Title\"] = \"Page Not Found\"",
          "292:  ctx.HTML(http.StatusNotFound, base.TplName(\"status/404\"))",
          "293: }",
          "296: func (ctx *Context) ServerError(logMsg string, logErr error) {",
          "297:  ctx.serverErrorInternal(logMsg, logErr)",
          "298: }",
          "300: func (ctx *Context) serverErrorInternal(logMsg string, logErr error) {",
          "301:  if logErr != nil {",
          "302:   log.ErrorWithSkip(2, \"%s: %v\", logMsg, logErr)",
          "303:   if _, ok := logErr.(*net.OpError); ok || errors.Is(logErr, &net.OpError{}) {",
          "306:    return",
          "307:   }",
          "310:   if !setting.IsProd || (ctx.Doer != nil && ctx.Doer.IsAdmin) {",
          "311:    ctx.Data[\"ErrorMsg\"] = fmt.Sprintf(\"%s, %s\", logMsg, logErr)",
          "312:   }",
          "313:  }",
          "315:  ctx.Data[\"Title\"] = \"Internal Server Error\"",
          "316:  ctx.HTML(http.StatusInternalServerError, tplStatus500)",
          "317: }",
          "322: func (ctx *Context) NotFoundOrServerError(logMsg string, errCheck func(error) bool, logErr error) {",
          "323:  if errCheck(logErr) {",
          "324:   ctx.notFoundInternal(logMsg, logErr)",
          "325:   return",
          "326:  }",
          "327:  ctx.serverErrorInternal(logMsg, logErr)",
          "328: }",
          "331: func (ctx *Context) plainTextInternal(skip, status int, bs []byte) {",
          "332:  statusPrefix := status / 100",
          "333:  if statusPrefix == 4 || statusPrefix == 5 {",
          "334:   log.Log(skip, log.TRACE, \"plainTextInternal (status=%d): %s\", status, string(bs))",
          "335:  }",
          "336:  ctx.Resp.Header().Set(\"Content-Type\", \"text/plain;charset=utf-8\")",
          "337:  ctx.Resp.Header().Set(\"X-Content-Type-Options\", \"nosniff\")",
          "338:  ctx.Resp.WriteHeader(status)",
          "339:  if _, err := ctx.Resp.Write(bs); err != nil {",
          "340:   log.ErrorWithSkip(skip, \"plainTextInternal (status=%d): write bytes failed: %v\", status, err)",
          "341:  }",
          "342: }",
          "345: func (ctx *Context) PlainTextBytes(status int, bs []byte) {",
          "346:  ctx.plainTextInternal(2, status, bs)",
          "347: }",
          "350: func (ctx *Context) PlainText(status int, text string) {",
          "351:  ctx.plainTextInternal(2, status, []byte(text))",
          "352: }",
          "355: func (ctx *Context) RespHeader() http.Header {",
          "356:  return ctx.Resp.Header()",
          "357: }",
          "359: type ServeHeaderOptions struct {",
          "360:  ContentType        string // defaults to \"application/octet-stream\"",
          "361:  ContentTypeCharset string",
          "362:  ContentLength      *int64",
          "363:  Disposition        string // defaults to \"attachment\"",
          "364:  Filename           string",
          "365:  CacheDuration      time.Duration // defaults to 5 minutes",
          "366:  LastModified       time.Time",
          "367: }",
          "370: func (ctx *Context) SetServeHeaders(opts *ServeHeaderOptions) {",
          "371:  header := ctx.Resp.Header()",
          "373:  contentType := typesniffer.ApplicationOctetStream",
          "374:  if opts.ContentType != \"\" {",
          "375:   if opts.ContentTypeCharset != \"\" {",
          "376:    contentType = opts.ContentType + \"; charset=\" + strings.ToLower(opts.ContentTypeCharset)",
          "377:   } else {",
          "378:    contentType = opts.ContentType",
          "379:   }",
          "380:  }",
          "381:  header.Set(\"Content-Type\", contentType)",
          "382:  header.Set(\"X-Content-Type-Options\", \"nosniff\")",
          "384:  if opts.ContentLength != nil {",
          "385:   header.Set(\"Content-Length\", strconv.FormatInt(*opts.ContentLength, 10))",
          "386:  }",
          "388:  if opts.Filename != \"\" {",
          "389:   disposition := opts.Disposition",
          "390:   if disposition == \"\" {",
          "391:    disposition = \"attachment\"",
          "392:   }",
          "394:   backslashEscapedName := strings.ReplaceAll(strings.ReplaceAll(opts.Filename, `\\`, `\\\\`), `\"`, `\\\"`) // \\ -> \\\\, \" -> \\\"",
          "395:   header.Set(\"Content-Disposition\", fmt.Sprintf(`%s; filename=\"%s\"; filename*=UTF-8''%s`, disposition, backslashEscapedName, url.PathEscape(opts.Filename)))",
          "396:   header.Set(\"Access-Control-Expose-Headers\", \"Content-Disposition\")",
          "397:  }",
          "399:  duration := opts.CacheDuration",
          "400:  if duration == 0 {",
          "401:   duration = 5 * time.Minute",
          "402:  }",
          "403:  httpcache.SetCacheControlInHeader(header, duration)",
          "405:  if !opts.LastModified.IsZero() {",
          "406:   header.Set(\"Last-Modified\", opts.LastModified.UTC().Format(http.TimeFormat))",
          "407:  }",
          "408: }",
          "411: func (ctx *Context) ServeContent(r io.ReadSeeker, opts *ServeHeaderOptions) {",
          "412:  ctx.SetServeHeaders(opts)",
          "413:  http.ServeContent(ctx.Resp, ctx.Req, opts.Filename, opts.LastModified, r)",
          "414: }",
          "418: func (ctx *Context) UploadStream() (rd io.ReadCloser, needToClose bool, err error) {",
          "419:  contentType := strings.ToLower(ctx.Req.Header.Get(\"Content-Type\"))",
          "420:  if strings.HasPrefix(contentType, \"application/x-www-form-urlencoded\") || strings.HasPrefix(contentType, \"multipart/form-data\") {",
          "421:   if err := ctx.Req.ParseMultipartForm(32 << 20); err != nil {",
          "422:    return nil, false, err",
          "423:   }",
          "424:   if ctx.Req.MultipartForm.File == nil {",
          "425:    return nil, false, http.ErrMissingFile",
          "426:   }",
          "427:   for _, files := range ctx.Req.MultipartForm.File {",
          "428:    if len(files) > 0 {",
          "429:     r, err := files[0].Open()",
          "430:     return r, true, err",
          "431:    }",
          "432:   }",
          "433:   return nil, false, http.ErrMissingFile",
          "434:  }",
          "435:  return ctx.Req.Body, false, nil",
          "436: }",
          "439: func (ctx *Context) Error(status int, contents ...string) {",
          "440:  v := http.StatusText(status)",
          "441:  if len(contents) > 0 {",
          "442:   v = contents[0]",
          "443:  }",
          "444:  http.Error(ctx.Resp, v, status)",
          "445: }",
          "448: func (ctx *Context) JSON(status int, content interface{}) {",
          "449:  ctx.Resp.Header().Set(\"Content-Type\", \"application/json;charset=utf-8\")",
          "450:  ctx.Resp.WriteHeader(status)",
          "451:  if err := json.NewEncoder(ctx.Resp).Encode(content); err != nil {",
          "452:   ctx.ServerError(\"Render JSON failed\", err)",
          "453:  }",
          "454: }",
          "456: func removeSessionCookieHeader(w http.ResponseWriter) {",
          "457:  cookies := w.Header()[\"Set-Cookie\"]",
          "458:  w.Header().Del(\"Set-Cookie\")",
          "459:  for _, cookie := range cookies {",
          "460:   if strings.HasPrefix(cookie, setting.SessionConfig.CookieName+\"=\") {",
          "461:    continue",
          "462:   }",
          "463:   w.Header().Add(\"Set-Cookie\", cookie)",
          "464:  }",
          "465: }",
          "468: func (ctx *Context) Redirect(location string, status ...int) {",
          "469:  code := http.StatusSeeOther",
          "470:  if len(status) == 1 {",
          "471:   code = status[0]",
          "472:  }",
          "474:  if strings.Contains(location, \"://\") || strings.HasPrefix(location, \"//\") {",
          "481:   removeSessionCookieHeader(ctx.Resp)",
          "482:  }",
          "483:  http.Redirect(ctx.Resp, ctx.Req, location, code)",
          "484: }",
          "488: func (ctx *Context) SetSiteCookie(name, value string, maxAge int) {",
          "489:  middleware.SetSiteCookie(ctx.Resp, name, value, maxAge)",
          "490: }",
          "494: func (ctx *Context) DeleteSiteCookie(name string) {",
          "495:  middleware.SetSiteCookie(ctx.Resp, name, \"\", -1)",
          "496: }",
          "499: func (ctx *Context) GetSiteCookie(name string) string {",
          "500:  return middleware.GetSiteCookie(ctx.Req, name)",
          "501: }",
          "504: func (ctx *Context) GetSuperSecureCookie(secret, name string) (string, bool) {",
          "505:  val := ctx.GetSiteCookie(name)",
          "506:  return ctx.CookieDecrypt(secret, val)",
          "507: }",
          "510: func (ctx *Context) CookieDecrypt(secret, val string) (string, bool) {",
          "511:  if val == \"\" {",
          "512:   return \"\", false",
          "513:  }",
          "515:  text, err := hex.DecodeString(val)",
          "516:  if err != nil {",
          "517:   return \"\", false",
          "518:  }",
          "520:  key := pbkdf2.Key([]byte(secret), []byte(secret), 1000, 16, sha256.New)",
          "521:  text, err = util.AESGCMDecrypt(key, text)",
          "522:  return string(text), err == nil",
          "523: }",
          "526: func (ctx *Context) SetSuperSecureCookie(secret, name, value string, maxAge int) {",
          "527:  text := ctx.CookieEncrypt(secret, value)",
          "528:  ctx.SetSiteCookie(name, text, maxAge)",
          "529: }",
          "532: func (ctx *Context) CookieEncrypt(secret, value string) string {",
          "533:  key := pbkdf2.Key([]byte(secret), []byte(secret), 1000, 16, sha256.New)",
          "534:  text, err := util.AESGCMEncrypt(key, []byte(value))",
          "535:  if err != nil {",
          "536:   panic(\"error encrypting cookie: \" + err.Error())",
          "537:  }",
          "539:  return hex.EncodeToString(text)",
          "540: }",
          "543: func (ctx *Context) GetCookieInt(name string) int {",
          "544:  r, _ := strconv.Atoi(ctx.GetSiteCookie(name))",
          "545:  return r",
          "546: }",
          "549: func (ctx *Context) GetCookieInt64(name string) int64 {",
          "550:  r, _ := strconv.ParseInt(ctx.GetSiteCookie(name), 10, 64)",
          "551:  return r",
          "552: }",
          "555: func (ctx *Context) GetCookieFloat64(name string) float64 {",
          "556:  v, _ := strconv.ParseFloat(ctx.GetSiteCookie(name), 64)",
          "557:  return v",
          "558: }",
          "561: func (ctx *Context) RemoteAddr() string {",
          "562:  return ctx.Req.RemoteAddr",
          "563: }",
          "566: func (ctx *Context) Params(p string) string {",
          "567:  s, _ := url.PathUnescape(chi.URLParam(ctx.Req, strings.TrimPrefix(p, \":\")))",
          "568:  return s",
          "569: }",
          "572: func (ctx *Context) ParamsInt64(p string) int64 {",
          "573:  v, _ := strconv.ParseInt(ctx.Params(p), 10, 64)",
          "574:  return v",
          "575: }",
          "578: func (ctx *Context) SetParams(k, v string) {",
          "579:  chiCtx := chi.RouteContext(ctx)",
          "580:  chiCtx.URLParams.Add(strings.TrimPrefix(k, \":\"), url.PathEscape(v))",
          "581: }",
          "584: func (ctx *Context) Write(bs []byte) (int, error) {",
          "585:  return ctx.Resp.Write(bs)",
          "586: }",
          "589: func (ctx *Context) Written() bool {",
          "590:  return ctx.Resp.Status() > 0",
          "591: }",
          "594: func (ctx *Context) Status(status int) {",
          "595:  ctx.Resp.WriteHeader(status)",
          "",
          "[Added Lines]",
          "79:  return ctx.Locale.Tr(msg, trArgs...)",
          "82: func (ctx *Context) Tr(msg string, args ...any) string {",
          "83:  return ctx.Locale.Tr(msg, args...)",
          "86: func (ctx *Context) TrN(cnt any, key1, keyN string, args ...any) string {",
          "87:  return ctx.Locale.TrN(cnt, key1, keyN, args...)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "621:  return ctx.Req.Context().Value(key)",
          "622: }",
          "643: type contextKeyType struct{}",
          "645: var contextKey interface{} = contextKeyType{}",
          "",
          "[Removed Lines]",
          "625: func (ctx *Context) SetTotalCountHeader(total int64) {",
          "626:  ctx.RespHeader().Set(\"X-Total-Count\", fmt.Sprint(total))",
          "627:  ctx.AppendAccessControlExposeHeaders(\"X-Total-Count\")",
          "628: }",
          "631: func (ctx *Context) AppendAccessControlExposeHeaders(names ...string) {",
          "632:  val := ctx.RespHeader().Get(\"Access-Control-Expose-Headers\")",
          "633:  if len(val) != 0 {",
          "634:   ctx.RespHeader().Set(\"Access-Control-Expose-Headers\", fmt.Sprintf(\"%s, %s\", val, strings.Join(names, \", \")))",
          "635:  } else {",
          "636:   ctx.RespHeader().Set(\"Access-Control-Expose-Headers\", strings.Join(names, \", \"))",
          "637:  }",
          "638: }",
          "641: type Handler func(*Context)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "657:  return nil",
          "658: }",
          "673:   Secret:         setting.SecretKey,",
          "674:   Cookie:         setting.CSRFCookieName,",
          "675:   SetCookie:      true,",
          "",
          "[Removed Lines]",
          "661: func GetContextUser(req *http.Request) *user_model.User {",
          "662:  if apiContext, ok := req.Context().Value(apiContextKey).(*APIContext); ok {",
          "663:   return apiContext.Doer",
          "664:  }",
          "665:  if ctx, ok := req.Context().Value(contextKey).(*Context); ok {",
          "666:   return ctx.Doer",
          "667:  }",
          "668:  return nil",
          "669: }",
          "671: func getCsrfOpts() CsrfOptions {",
          "672:  return CsrfOptions{",
          "",
          "[Added Lines]",
          "134: func Contexter() func(next http.Handler) http.Handler {",
          "135:  rnd := templates.HTMLRenderer()",
          "136:  csrfOpts := CsrfOptions{",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "680:   CookiePath:     setting.SessionConfig.CookiePath,",
          "681:   SameSite:       setting.SessionConfig.SameSite,",
          "682:  }",
          "689:  if !setting.IsProd {",
          "690:   CsrfTokenRegenerationInterval = 5 * time.Second // in dev, re-generate the tokens more aggressively for debug purpose",
          "691:  }",
          "",
          "[Removed Lines]",
          "683: }",
          "686: func Contexter() func(next http.Handler) http.Handler {",
          "687:  rnd := templates.HTMLRenderer()",
          "688:  csrfOpts := getCsrfOpts()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "776:   })",
          "777:  }",
          "778: }",
          "",
          "[Removed Lines]",
          "781: var SearchOrderByMap = map[string]map[string]db.SearchOrderBy{",
          "782:  \"asc\": {",
          "783:   \"alpha\":   db.SearchOrderByAlphabetically,",
          "784:   \"created\": db.SearchOrderByOldest,",
          "785:   \"updated\": db.SearchOrderByLeastUpdated,",
          "786:   \"size\":    db.SearchOrderBySize,",
          "787:   \"id\":      db.SearchOrderByID,",
          "788:  },",
          "789:  \"desc\": {",
          "790:   \"alpha\":   db.SearchOrderByAlphabeticallyReverse,",
          "791:   \"created\": db.SearchOrderByNewest,",
          "792:   \"updated\": db.SearchOrderByRecentUpdated,",
          "793:   \"size\":    db.SearchOrderBySizeReverse,",
          "794:   \"id\":      db.SearchOrderByIDReverse,",
          "795:  },",
          "796: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "modules/context/context_cookie.go||modules/context/context_cookie.go": [
          "File: modules/context/context_cookie.go -> modules/context/context_cookie.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: package context",
          "6: import (",
          "7:  \"encoding/hex\"",
          "8:  \"net/http\"",
          "9:  \"strconv\"",
          "10:  \"strings\"",
          "12:  \"code.gitea.io/gitea/modules/setting\"",
          "13:  \"code.gitea.io/gitea/modules/util\"",
          "14:  \"code.gitea.io/gitea/modules/web/middleware\"",
          "16:  \"github.com/minio/sha256-simd\"",
          "17:  \"golang.org/x/crypto/pbkdf2\"",
          "18: )",
          "20: const CookieNameFlash = \"gitea_flash\"",
          "22: func removeSessionCookieHeader(w http.ResponseWriter) {",
          "23:  cookies := w.Header()[\"Set-Cookie\"]",
          "24:  w.Header().Del(\"Set-Cookie\")",
          "25:  for _, cookie := range cookies {",
          "26:   if strings.HasPrefix(cookie, setting.SessionConfig.CookieName+\"=\") {",
          "27:    continue",
          "28:   }",
          "29:   w.Header().Add(\"Set-Cookie\", cookie)",
          "30:  }",
          "31: }",
          "35: func (ctx *Context) SetSiteCookie(name, value string, maxAge int) {",
          "36:  middleware.SetSiteCookie(ctx.Resp, name, value, maxAge)",
          "37: }",
          "41: func (ctx *Context) DeleteSiteCookie(name string) {",
          "42:  middleware.SetSiteCookie(ctx.Resp, name, \"\", -1)",
          "43: }",
          "46: func (ctx *Context) GetSiteCookie(name string) string {",
          "47:  return middleware.GetSiteCookie(ctx.Req, name)",
          "48: }",
          "51: func (ctx *Context) GetSuperSecureCookie(secret, name string) (string, bool) {",
          "52:  val := ctx.GetSiteCookie(name)",
          "53:  return ctx.CookieDecrypt(secret, val)",
          "54: }",
          "57: func (ctx *Context) CookieDecrypt(secret, val string) (string, bool) {",
          "58:  if val == \"\" {",
          "59:   return \"\", false",
          "60:  }",
          "62:  text, err := hex.DecodeString(val)",
          "63:  if err != nil {",
          "64:   return \"\", false",
          "65:  }",
          "67:  key := pbkdf2.Key([]byte(secret), []byte(secret), 1000, 16, sha256.New)",
          "68:  text, err = util.AESGCMDecrypt(key, text)",
          "69:  return string(text), err == nil",
          "70: }",
          "73: func (ctx *Context) SetSuperSecureCookie(secret, name, value string, maxAge int) {",
          "74:  text := ctx.CookieEncrypt(secret, value)",
          "75:  ctx.SetSiteCookie(name, text, maxAge)",
          "76: }",
          "79: func (ctx *Context) CookieEncrypt(secret, value string) string {",
          "80:  key := pbkdf2.Key([]byte(secret), []byte(secret), 1000, 16, sha256.New)",
          "81:  text, err := util.AESGCMEncrypt(key, []byte(value))",
          "82:  if err != nil {",
          "83:   panic(\"error encrypting cookie: \" + err.Error())",
          "84:  }",
          "86:  return hex.EncodeToString(text)",
          "87: }",
          "90: func (ctx *Context) GetCookieInt(name string) int {",
          "91:  r, _ := strconv.Atoi(ctx.GetSiteCookie(name))",
          "92:  return r",
          "93: }",
          "96: func (ctx *Context) GetCookieInt64(name string) int64 {",
          "97:  r, _ := strconv.ParseInt(ctx.GetSiteCookie(name), 10, 64)",
          "98:  return r",
          "99: }",
          "102: func (ctx *Context) GetCookieFloat64(name string) float64 {",
          "103:  v, _ := strconv.ParseFloat(ctx.GetSiteCookie(name), 64)",
          "104:  return v",
          "105: }",
          "",
          "---------------"
        ],
        "modules/context/context_data.go||modules/context/context_data.go": [
          "File: modules/context/context_data.go -> modules/context/context_data.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: package context",
          "6: import \"code.gitea.io/gitea/modules/web/middleware\"",
          "9: func (ctx *Context) GetData() middleware.ContextData {",
          "10:  return ctx.Data",
          "11: }",
          "14: func (ctx *Context) HasAPIError() bool {",
          "15:  hasErr, ok := ctx.Data[\"HasError\"]",
          "16:  if !ok {",
          "17:   return false",
          "18:  }",
          "19:  return hasErr.(bool)",
          "20: }",
          "23: func (ctx *Context) GetErrMsg() string {",
          "24:  return ctx.Data[\"ErrorMsg\"].(string)",
          "25: }",
          "29: func (ctx *Context) HasError() bool {",
          "30:  hasErr, ok := ctx.Data[\"HasError\"]",
          "31:  if !ok {",
          "32:   return false",
          "33:  }",
          "34:  ctx.Flash.ErrorMsg = ctx.Data[\"ErrorMsg\"].(string)",
          "35:  ctx.Data[\"Flash\"] = ctx.Flash",
          "36:  return hasErr.(bool)",
          "37: }",
          "40: func (ctx *Context) HasValue(name string) bool {",
          "41:  _, ok := ctx.Data[name]",
          "42:  return ok",
          "43: }",
          "",
          "---------------"
        ],
        "modules/context/context_model.go||modules/context/context_model.go": [
          "File: modules/context/context_model.go -> modules/context/context_model.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: package context",
          "6: import (",
          "7:  \"path\"",
          "8:  \"strings\"",
          "10:  \"code.gitea.io/gitea/models/unit\"",
          "11:  \"code.gitea.io/gitea/modules/git\"",
          "12:  \"code.gitea.io/gitea/modules/issue/template\"",
          "13:  \"code.gitea.io/gitea/modules/log\"",
          "14:  api \"code.gitea.io/gitea/modules/structs\"",
          "15: )",
          "18: func (ctx *Context) IsUserSiteAdmin() bool {",
          "19:  return ctx.IsSigned && ctx.Doer.IsAdmin",
          "20: }",
          "23: func (ctx *Context) IsUserRepoOwner() bool {",
          "24:  return ctx.Repo.IsOwner()",
          "25: }",
          "28: func (ctx *Context) IsUserRepoAdmin() bool {",
          "29:  return ctx.Repo.IsAdmin()",
          "30: }",
          "33: func (ctx *Context) IsUserRepoWriter(unitTypes []unit.Type) bool {",
          "34:  for _, unitType := range unitTypes {",
          "35:   if ctx.Repo.CanWrite(unitType) {",
          "36:    return true",
          "37:   }",
          "38:  }",
          "40:  return false",
          "41: }",
          "44: func (ctx *Context) IsUserRepoReaderSpecific(unitType unit.Type) bool {",
          "45:  return ctx.Repo.CanRead(unitType)",
          "46: }",
          "49: func (ctx *Context) IsUserRepoReaderAny() bool {",
          "50:  return ctx.Repo.HasAccess()",
          "51: }",
          "54: func (ctx *Context) IssueTemplatesFromDefaultBranch() []*api.IssueTemplate {",
          "55:  ret, _ := ctx.IssueTemplatesErrorsFromDefaultBranch()",
          "56:  return ret",
          "57: }",
          "61: func (ctx *Context) IssueTemplatesErrorsFromDefaultBranch() ([]*api.IssueTemplate, map[string]error) {",
          "62:  var issueTemplates []*api.IssueTemplate",
          "64:  if ctx.Repo.Repository.IsEmpty {",
          "65:   return issueTemplates, nil",
          "66:  }",
          "68:  if ctx.Repo.Commit == nil {",
          "69:   var err error",
          "70:   ctx.Repo.Commit, err = ctx.Repo.GitRepo.GetBranchCommit(ctx.Repo.Repository.DefaultBranch)",
          "71:   if err != nil {",
          "72:    return issueTemplates, nil",
          "73:   }",
          "74:  }",
          "76:  invalidFiles := map[string]error{}",
          "77:  for _, dirName := range IssueTemplateDirCandidates {",
          "78:   tree, err := ctx.Repo.Commit.SubTree(dirName)",
          "79:   if err != nil {",
          "80:    log.Debug(\"get sub tree of %s: %v\", dirName, err)",
          "81:    continue",
          "82:   }",
          "83:   entries, err := tree.ListEntries()",
          "84:   if err != nil {",
          "85:    log.Debug(\"list entries in %s: %v\", dirName, err)",
          "86:    return issueTemplates, nil",
          "87:   }",
          "88:   for _, entry := range entries {",
          "89:    if !template.CouldBe(entry.Name()) {",
          "90:     continue",
          "91:    }",
          "92:    fullName := path.Join(dirName, entry.Name())",
          "93:    if it, err := template.UnmarshalFromEntry(entry, dirName); err != nil {",
          "94:     invalidFiles[fullName] = err",
          "95:    } else {",
          "96:     if !strings.HasPrefix(it.Ref, \"refs/\") { // Assume that the ref intended is always a branch - for tags users should use refs/tags/<ref>",
          "97:      it.Ref = git.BranchPrefix + it.Ref",
          "98:     }",
          "99:     issueTemplates = append(issueTemplates, it)",
          "100:    }",
          "101:   }",
          "102:  }",
          "103:  return issueTemplates, invalidFiles",
          "104: }",
          "108: func (ctx *Context) IssueConfigFromDefaultBranch() (api.IssueConfig, error) {",
          "109:  if ctx.Repo.Repository.IsEmpty {",
          "110:   return GetDefaultIssueConfig(), nil",
          "111:  }",
          "113:  commit, err := ctx.Repo.GitRepo.GetBranchCommit(ctx.Repo.Repository.DefaultBranch)",
          "114:  if err != nil {",
          "115:   return GetDefaultIssueConfig(), err",
          "116:  }",
          "118:  for _, configName := range IssueConfigCandidates {",
          "119:   if _, err := commit.GetTreeEntryByPath(configName + \".yaml\"); err == nil {",
          "120:    return ctx.Repo.GetIssueConfig(configName+\".yaml\", commit)",
          "121:   }",
          "123:   if _, err := commit.GetTreeEntryByPath(configName + \".yml\"); err == nil {",
          "124:    return ctx.Repo.GetIssueConfig(configName+\".yml\", commit)",
          "125:   }",
          "126:  }",
          "128:  return GetDefaultIssueConfig(), nil",
          "129: }",
          "131: func (ctx *Context) HasIssueTemplatesOrContactLinks() bool {",
          "132:  if len(ctx.IssueTemplatesFromDefaultBranch()) > 0 {",
          "133:   return true",
          "134:  }",
          "136:  issueConfig, _ := ctx.IssueConfigFromDefaultBranch()",
          "137:  return len(issueConfig.ContactLinks) > 0",
          "138: }",
          "",
          "---------------"
        ],
        "modules/context/context_request.go||modules/context/context_request.go": [
          "File: modules/context/context_request.go -> modules/context/context_request.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: package context",
          "6: import (",
          "7:  \"io\"",
          "8:  \"net/http\"",
          "9:  \"net/url\"",
          "10:  \"strconv\"",
          "11:  \"strings\"",
          "13:  \"github.com/go-chi/chi/v5\"",
          "14: )",
          "17: func (ctx *Context) RemoteAddr() string {",
          "18:  return ctx.Req.RemoteAddr",
          "19: }",
          "22: func (ctx *Context) Params(p string) string {",
          "23:  s, _ := url.PathUnescape(chi.URLParam(ctx.Req, strings.TrimPrefix(p, \":\")))",
          "24:  return s",
          "25: }",
          "28: func (ctx *Context) ParamsInt64(p string) int64 {",
          "29:  v, _ := strconv.ParseInt(ctx.Params(p), 10, 64)",
          "30:  return v",
          "31: }",
          "34: func (ctx *Context) SetParams(k, v string) {",
          "35:  chiCtx := chi.RouteContext(ctx)",
          "36:  chiCtx.URLParams.Add(strings.TrimPrefix(k, \":\"), url.PathEscape(v))",
          "37: }",
          "41: func (ctx *Context) UploadStream() (rd io.ReadCloser, needToClose bool, err error) {",
          "42:  contentType := strings.ToLower(ctx.Req.Header.Get(\"Content-Type\"))",
          "43:  if strings.HasPrefix(contentType, \"application/x-www-form-urlencoded\") || strings.HasPrefix(contentType, \"multipart/form-data\") {",
          "44:   if err := ctx.Req.ParseMultipartForm(32 << 20); err != nil {",
          "45:    return nil, false, err",
          "46:   }",
          "47:   if ctx.Req.MultipartForm.File == nil {",
          "48:    return nil, false, http.ErrMissingFile",
          "49:   }",
          "50:   for _, files := range ctx.Req.MultipartForm.File {",
          "51:    if len(files) > 0 {",
          "52:     r, err := files[0].Open()",
          "53:     return r, true, err",
          "54:    }",
          "55:   }",
          "56:   return nil, false, http.ErrMissingFile",
          "57:  }",
          "58:  return ctx.Req.Body, false, nil",
          "59: }",
          "",
          "---------------"
        ],
        "modules/context/context_response.go||modules/context/context_response.go": [
          "File: modules/context/context_response.go -> modules/context/context_response.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: package context",
          "6: import (",
          "7:  \"errors\"",
          "8:  \"fmt\"",
          "9:  \"net\"",
          "10:  \"net/http\"",
          "11:  \"net/url\"",
          "12:  \"path\"",
          "13:  \"strconv\"",
          "14:  \"strings\"",
          "15:  \"time\"",
          "17:  user_model \"code.gitea.io/gitea/models/user\"",
          "18:  \"code.gitea.io/gitea/modules/base\"",
          "19:  \"code.gitea.io/gitea/modules/json\"",
          "20:  \"code.gitea.io/gitea/modules/log\"",
          "21:  \"code.gitea.io/gitea/modules/setting\"",
          "22:  \"code.gitea.io/gitea/modules/templates\"",
          "23:  \"code.gitea.io/gitea/modules/web/middleware\"",
          "24: )",
          "27: func (ctx *Context) SetTotalCountHeader(total int64) {",
          "28:  ctx.RespHeader().Set(\"X-Total-Count\", fmt.Sprint(total))",
          "29:  ctx.AppendAccessControlExposeHeaders(\"X-Total-Count\")",
          "30: }",
          "33: func (ctx *Context) AppendAccessControlExposeHeaders(names ...string) {",
          "34:  val := ctx.RespHeader().Get(\"Access-Control-Expose-Headers\")",
          "35:  if len(val) != 0 {",
          "36:   ctx.RespHeader().Set(\"Access-Control-Expose-Headers\", fmt.Sprintf(\"%s, %s\", val, strings.Join(names, \", \")))",
          "37:  } else {",
          "38:   ctx.RespHeader().Set(\"Access-Control-Expose-Headers\", strings.Join(names, \", \"))",
          "39:  }",
          "40: }",
          "43: func (ctx *Context) Written() bool {",
          "44:  return ctx.Resp.Status() > 0",
          "45: }",
          "48: func (ctx *Context) Status(status int) {",
          "49:  ctx.Resp.WriteHeader(status)",
          "50: }",
          "53: func (ctx *Context) Write(bs []byte) (int, error) {",
          "54:  return ctx.Resp.Write(bs)",
          "55: }",
          "58: func RedirectToUser(ctx *Context, userName string, redirectUserID int64) {",
          "59:  user, err := user_model.GetUserByID(ctx, redirectUserID)",
          "60:  if err != nil {",
          "61:   ctx.ServerError(\"GetUserByID\", err)",
          "62:   return",
          "63:  }",
          "65:  redirectPath := strings.Replace(",
          "66:   ctx.Req.URL.EscapedPath(),",
          "67:   url.PathEscape(userName),",
          "68:   url.PathEscape(user.Name),",
          "69:   1,",
          "70:  )",
          "71:  if ctx.Req.URL.RawQuery != \"\" {",
          "72:   redirectPath += \"?\" + ctx.Req.URL.RawQuery",
          "73:  }",
          "74:  ctx.Redirect(path.Join(setting.AppSubURL, redirectPath), http.StatusTemporaryRedirect)",
          "75: }",
          "78: func (ctx *Context) RedirectToFirst(location ...string) {",
          "79:  for _, loc := range location {",
          "80:   if len(loc) == 0 {",
          "81:    continue",
          "82:   }",
          "86:   if len(loc) > 1 && loc[0] == '/' && (loc[1] == '/' || loc[1] == '\\\\') {",
          "87:    continue",
          "88:   }",
          "90:   u, err := url.Parse(loc)",
          "91:   if err != nil || ((u.Scheme != \"\" || u.Host != \"\") && !strings.HasPrefix(strings.ToLower(loc), strings.ToLower(setting.AppURL))) {",
          "92:    continue",
          "93:   }",
          "95:   ctx.Redirect(loc)",
          "96:   return",
          "97:  }",
          "99:  ctx.Redirect(setting.AppSubURL + \"/\")",
          "100: }",
          "102: const tplStatus500 base.TplName = \"status/500\"",
          "105: func (ctx *Context) HTML(status int, name base.TplName) {",
          "106:  log.Debug(\"Template: %s\", name)",
          "108:  tmplStartTime := time.Now()",
          "109:  if !setting.IsProd {",
          "110:   ctx.Data[\"TemplateName\"] = name",
          "111:  }",
          "112:  ctx.Data[\"TemplateLoadTimes\"] = func() string {",
          "113:   return strconv.FormatInt(time.Since(tmplStartTime).Nanoseconds()/1e6, 10) + \"ms\"",
          "114:  }",
          "116:  err := ctx.Render.HTML(ctx.Resp, status, string(name), ctx.Data)",
          "117:  if err == nil {",
          "118:   return",
          "119:  }",
          "122:  if name != tplStatus500 {",
          "123:   err = fmt.Errorf(\"failed to render template: %s, error: %s\", name, templates.HandleTemplateRenderingError(err))",
          "124:   ctx.ServerError(\"Render failed\", err) // show the 500 error page",
          "125:  } else {",
          "126:   ctx.PlainText(http.StatusInternalServerError, \"Unable to render status/500 page, the template system is broken, or Gitea can't find your template files.\")",
          "127:   return",
          "128:  }",
          "129: }",
          "132: func (ctx *Context) RenderToString(name base.TplName, data map[string]interface{}) (string, error) {",
          "133:  var buf strings.Builder",
          "134:  err := ctx.Render.HTML(&buf, http.StatusOK, string(name), data)",
          "135:  return buf.String(), err",
          "136: }",
          "139: func (ctx *Context) RenderWithErr(msg string, tpl base.TplName, form interface{}) {",
          "140:  if form != nil {",
          "141:   middleware.AssignForm(form, ctx.Data)",
          "142:  }",
          "143:  ctx.Flash.ErrorMsg = msg",
          "144:  ctx.Data[\"Flash\"] = ctx.Flash",
          "145:  ctx.HTML(http.StatusOK, tpl)",
          "146: }",
          "149: func (ctx *Context) NotFound(logMsg string, logErr error) {",
          "150:  ctx.notFoundInternal(logMsg, logErr)",
          "151: }",
          "153: func (ctx *Context) notFoundInternal(logMsg string, logErr error) {",
          "154:  if logErr != nil {",
          "155:   log.Log(2, log.DEBUG, \"%s: %v\", logMsg, logErr)",
          "156:   if !setting.IsProd {",
          "157:    ctx.Data[\"ErrorMsg\"] = logErr",
          "158:   }",
          "159:  }",
          "162:  showHTML := false",
          "163:  for _, part := range ctx.Req.Header[\"Accept\"] {",
          "164:   if strings.Contains(part, \"text/html\") {",
          "165:    showHTML = true",
          "166:    break",
          "167:   }",
          "168:  }",
          "170:  if !showHTML {",
          "171:   ctx.plainTextInternal(3, http.StatusNotFound, []byte(\"Not found.\\n\"))",
          "172:   return",
          "173:  }",
          "175:  ctx.Data[\"IsRepo\"] = ctx.Repo.Repository != nil",
          "176:  ctx.Data[\"Title\"] = \"Page Not Found\"",
          "177:  ctx.HTML(http.StatusNotFound, base.TplName(\"status/404\"))",
          "178: }",
          "181: func (ctx *Context) ServerError(logMsg string, logErr error) {",
          "182:  ctx.serverErrorInternal(logMsg, logErr)",
          "183: }",
          "185: func (ctx *Context) serverErrorInternal(logMsg string, logErr error) {",
          "186:  if logErr != nil {",
          "187:   log.ErrorWithSkip(2, \"%s: %v\", logMsg, logErr)",
          "188:   if _, ok := logErr.(*net.OpError); ok || errors.Is(logErr, &net.OpError{}) {",
          "191:    return",
          "192:   }",
          "195:   if !setting.IsProd || (ctx.Doer != nil && ctx.Doer.IsAdmin) {",
          "196:    ctx.Data[\"ErrorMsg\"] = fmt.Sprintf(\"%s, %s\", logMsg, logErr)",
          "197:   }",
          "198:  }",
          "200:  ctx.Data[\"Title\"] = \"Internal Server Error\"",
          "201:  ctx.HTML(http.StatusInternalServerError, tplStatus500)",
          "202: }",
          "207: func (ctx *Context) NotFoundOrServerError(logMsg string, errCheck func(error) bool, logErr error) {",
          "208:  if errCheck(logErr) {",
          "209:   ctx.notFoundInternal(logMsg, logErr)",
          "210:   return",
          "211:  }",
          "212:  ctx.serverErrorInternal(logMsg, logErr)",
          "213: }",
          "216: func (ctx *Context) plainTextInternal(skip, status int, bs []byte) {",
          "217:  statusPrefix := status / 100",
          "218:  if statusPrefix == 4 || statusPrefix == 5 {",
          "219:   log.Log(skip, log.TRACE, \"plainTextInternal (status=%d): %s\", status, string(bs))",
          "220:  }",
          "221:  ctx.Resp.Header().Set(\"Content-Type\", \"text/plain;charset=utf-8\")",
          "222:  ctx.Resp.Header().Set(\"X-Content-Type-Options\", \"nosniff\")",
          "223:  ctx.Resp.WriteHeader(status)",
          "224:  if _, err := ctx.Resp.Write(bs); err != nil {",
          "225:   log.ErrorWithSkip(skip, \"plainTextInternal (status=%d): write bytes failed: %v\", status, err)",
          "226:  }",
          "227: }",
          "230: func (ctx *Context) PlainTextBytes(status int, bs []byte) {",
          "231:  ctx.plainTextInternal(2, status, bs)",
          "232: }",
          "235: func (ctx *Context) PlainText(status int, text string) {",
          "236:  ctx.plainTextInternal(2, status, []byte(text))",
          "237: }",
          "240: func (ctx *Context) RespHeader() http.Header {",
          "241:  return ctx.Resp.Header()",
          "242: }",
          "245: func (ctx *Context) Error(status int, contents ...string) {",
          "246:  v := http.StatusText(status)",
          "247:  if len(contents) > 0 {",
          "248:   v = contents[0]",
          "249:  }",
          "250:  http.Error(ctx.Resp, v, status)",
          "251: }",
          "254: func (ctx *Context) JSON(status int, content interface{}) {",
          "255:  ctx.Resp.Header().Set(\"Content-Type\", \"application/json;charset=utf-8\")",
          "256:  ctx.Resp.WriteHeader(status)",
          "257:  if err := json.NewEncoder(ctx.Resp).Encode(content); err != nil {",
          "258:   ctx.ServerError(\"Render JSON failed\", err)",
          "259:  }",
          "260: }",
          "263: func (ctx *Context) Redirect(location string, status ...int) {",
          "264:  code := http.StatusSeeOther",
          "265:  if len(status) == 1 {",
          "266:   code = status[0]",
          "267:  }",
          "269:  if strings.Contains(location, \"://\") || strings.HasPrefix(location, \"//\") {",
          "276:   removeSessionCookieHeader(ctx.Resp)",
          "277:  }",
          "278:  http.Redirect(ctx.Resp, ctx.Req, location, code)",
          "279: }",
          "",
          "---------------"
        ],
        "modules/context/context_serve.go||modules/context/context_serve.go": [
          "File: modules/context/context_serve.go -> modules/context/context_serve.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: package context",
          "6: import (",
          "7:  \"fmt\"",
          "8:  \"io\"",
          "9:  \"net/http\"",
          "10:  \"net/url\"",
          "11:  \"strconv\"",
          "12:  \"strings\"",
          "13:  \"time\"",
          "15:  \"code.gitea.io/gitea/modules/httpcache\"",
          "16:  \"code.gitea.io/gitea/modules/typesniffer\"",
          "17: )",
          "19: type ServeHeaderOptions struct {",
          "20:  ContentType        string // defaults to \"application/octet-stream\"",
          "21:  ContentTypeCharset string",
          "22:  ContentLength      *int64",
          "23:  Disposition        string // defaults to \"attachment\"",
          "24:  Filename           string",
          "25:  CacheDuration      time.Duration // defaults to 5 minutes",
          "26:  LastModified       time.Time",
          "27: }",
          "30: func (ctx *Context) SetServeHeaders(opts *ServeHeaderOptions) {",
          "31:  header := ctx.Resp.Header()",
          "33:  contentType := typesniffer.ApplicationOctetStream",
          "34:  if opts.ContentType != \"\" {",
          "35:   if opts.ContentTypeCharset != \"\" {",
          "36:    contentType = opts.ContentType + \"; charset=\" + strings.ToLower(opts.ContentTypeCharset)",
          "37:   } else {",
          "38:    contentType = opts.ContentType",
          "39:   }",
          "40:  }",
          "41:  header.Set(\"Content-Type\", contentType)",
          "42:  header.Set(\"X-Content-Type-Options\", \"nosniff\")",
          "44:  if opts.ContentLength != nil {",
          "45:   header.Set(\"Content-Length\", strconv.FormatInt(*opts.ContentLength, 10))",
          "46:  }",
          "48:  if opts.Filename != \"\" {",
          "49:   disposition := opts.Disposition",
          "50:   if disposition == \"\" {",
          "51:    disposition = \"attachment\"",
          "52:   }",
          "54:   backslashEscapedName := strings.ReplaceAll(strings.ReplaceAll(opts.Filename, `\\`, `\\\\`), `\"`, `\\\"`) // \\ -> \\\\, \" -> \\\"",
          "55:   header.Set(\"Content-Disposition\", fmt.Sprintf(`%s; filename=\"%s\"; filename*=UTF-8''%s`, disposition, backslashEscapedName, url.PathEscape(opts.Filename)))",
          "56:   header.Set(\"Access-Control-Expose-Headers\", \"Content-Disposition\")",
          "57:  }",
          "59:  duration := opts.CacheDuration",
          "60:  if duration == 0 {",
          "61:   duration = 5 * time.Minute",
          "62:  }",
          "63:  httpcache.SetCacheControlInHeader(header, duration)",
          "65:  if !opts.LastModified.IsZero() {",
          "66:   header.Set(\"Last-Modified\", opts.LastModified.UTC().Format(http.TimeFormat))",
          "67:  }",
          "68: }",
          "71: func (ctx *Context) ServeContent(r io.ReadSeeker, opts *ServeHeaderOptions) {",
          "72:  ctx.SetServeHeaders(opts)",
          "73:  http.ServeContent(ctx.Resp, ctx.Req, opts.Filename, opts.LastModified, r)",
          "74: }",
          "",
          "---------------"
        ],
        "modules/context/repo.go||modules/context/repo.go": [
          "File: modules/context/repo.go -> modules/context/repo.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  \"code.gitea.io/gitea/modules/cache\"",
          "26:  \"code.gitea.io/gitea/modules/git\"",
          "27:  code_indexer \"code.gitea.io/gitea/modules/indexer/code\"",
          "29:  \"code.gitea.io/gitea/modules/log\"",
          "30:  repo_module \"code.gitea.io/gitea/modules/repository\"",
          "31:  \"code.gitea.io/gitea/modules/setting\"",
          "",
          "[Removed Lines]",
          "28:  \"code.gitea.io/gitea/modules/issue/template\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1063:  }",
          "1064: }",
          "1119: func GetDefaultIssueConfig() api.IssueConfig {",
          "1120:  return api.IssueConfig{",
          "1121:   BlankIssuesEnabled: true,",
          "",
          "[Removed Lines]",
          "1067: func (ctx *Context) IssueTemplatesFromDefaultBranch() []*api.IssueTemplate {",
          "1068:  ret, _ := ctx.IssueTemplatesErrorsFromDefaultBranch()",
          "1069:  return ret",
          "1070: }",
          "1074: func (ctx *Context) IssueTemplatesErrorsFromDefaultBranch() ([]*api.IssueTemplate, map[string]error) {",
          "1075:  var issueTemplates []*api.IssueTemplate",
          "1077:  if ctx.Repo.Repository.IsEmpty {",
          "1078:   return issueTemplates, nil",
          "1079:  }",
          "1081:  if ctx.Repo.Commit == nil {",
          "1082:   var err error",
          "1083:   ctx.Repo.Commit, err = ctx.Repo.GitRepo.GetBranchCommit(ctx.Repo.Repository.DefaultBranch)",
          "1084:   if err != nil {",
          "1085:    return issueTemplates, nil",
          "1086:   }",
          "1087:  }",
          "1089:  invalidFiles := map[string]error{}",
          "1090:  for _, dirName := range IssueTemplateDirCandidates {",
          "1091:   tree, err := ctx.Repo.Commit.SubTree(dirName)",
          "1092:   if err != nil {",
          "1093:    log.Debug(\"get sub tree of %s: %v\", dirName, err)",
          "1094:    continue",
          "1095:   }",
          "1096:   entries, err := tree.ListEntries()",
          "1097:   if err != nil {",
          "1098:    log.Debug(\"list entries in %s: %v\", dirName, err)",
          "1099:    return issueTemplates, nil",
          "1100:   }",
          "1101:   for _, entry := range entries {",
          "1102:    if !template.CouldBe(entry.Name()) {",
          "1103:     continue",
          "1104:    }",
          "1105:    fullName := path.Join(dirName, entry.Name())",
          "1106:    if it, err := template.UnmarshalFromEntry(entry, dirName); err != nil {",
          "1107:     invalidFiles[fullName] = err",
          "1108:    } else {",
          "1109:     if !strings.HasPrefix(it.Ref, \"refs/\") { // Assume that the ref intended is always a branch - for tags users should use refs/tags/<ref>",
          "1110:      it.Ref = git.BranchPrefix + it.Ref",
          "1111:     }",
          "1112:     issueTemplates = append(issueTemplates, it)",
          "1113:    }",
          "1114:   }",
          "1115:  }",
          "1116:  return issueTemplates, invalidFiles",
          "1117: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1177:  return issueConfig, nil",
          "1178: }",
          "1206: func (r *Repository) IsIssueConfig(path string) bool {",
          "1207:  for _, configName := range IssueConfigCandidates {",
          "",
          "[Removed Lines]",
          "1182: func (ctx *Context) IssueConfigFromDefaultBranch() (api.IssueConfig, error) {",
          "1183:  if ctx.Repo.Repository.IsEmpty {",
          "1184:   return GetDefaultIssueConfig(), nil",
          "1185:  }",
          "1187:  commit, err := ctx.Repo.GitRepo.GetBranchCommit(ctx.Repo.Repository.DefaultBranch)",
          "1188:  if err != nil {",
          "1189:   return GetDefaultIssueConfig(), err",
          "1190:  }",
          "1192:  for _, configName := range IssueConfigCandidates {",
          "1193:   if _, err := commit.GetTreeEntryByPath(configName + \".yaml\"); err == nil {",
          "1194:    return ctx.Repo.GetIssueConfig(configName+\".yaml\", commit)",
          "1195:   }",
          "1197:   if _, err := commit.GetTreeEntryByPath(configName + \".yml\"); err == nil {",
          "1198:    return ctx.Repo.GetIssueConfig(configName+\".yml\", commit)",
          "1199:   }",
          "1200:  }",
          "1202:  return GetDefaultIssueConfig(), nil",
          "1203: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1211:  }",
          "1212:  return false",
          "1213: }",
          "",
          "[Removed Lines]",
          "1215: func (ctx *Context) HasIssueTemplatesOrContactLinks() bool {",
          "1216:  if len(ctx.IssueTemplatesFromDefaultBranch()) > 0 {",
          "1217:   return true",
          "1218:  }",
          "1220:  issueConfig, _ := ctx.IssueConfigFromDefaultBranch()",
          "1221:  return len(issueConfig.ContactLinks) > 0",
          "1222: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "routers/api/v1/repo/repo.go||routers/api/v1/repo/repo.go": [
          "File: routers/api/v1/repo/repo.go -> routers/api/v1/repo/repo.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:   if len(sortOrder) == 0 {",
          "179:    sortOrder = \"asc\"",
          "180:   }",
          "182:    if orderBy, ok := searchModeMap[sortMode]; ok {",
          "183:     opts.OrderBy = orderBy",
          "184:    } else {",
          "",
          "[Removed Lines]",
          "181:   if searchModeMap, ok := context.SearchOrderByMap[sortOrder]; ok {",
          "",
          "[Added Lines]",
          "181:   if searchModeMap, ok := repo_model.SearchOrderByMap[sortOrder]; ok {",
          "",
          "---------------"
        ],
        "routers/web/admin/users.go||routers/weadmin/users.go": [
          "File: routers/web/admin/users.go -> routers/weadmin/users.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:   }",
          "149:   if !password.IsComplexEnough(form.Password) {",
          "150:    ctx.Data[\"Err_Password\"] = true",
          "152:    return",
          "153:   }",
          "154:   pwned, err := password.IsPwned(ctx, form.Password)",
          "",
          "[Removed Lines]",
          "151:    ctx.RenderWithErr(password.BuildComplexityError(ctx), tplUserNew, &form)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "301:    return",
          "302:   }",
          "303:   if !password.IsComplexEnough(form.Password) {",
          "305:    return",
          "306:   }",
          "307:   pwned, err := password.IsPwned(ctx, form.Password)",
          "",
          "[Removed Lines]",
          "304:    ctx.RenderWithErr(password.BuildComplexityError(ctx), tplUserEdit, &form)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "routers/web/auth/auth.go||routers/weauth/auth.go": [
          "File: routers/web/auth/auth.go -> routers/weauth/auth.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "444:  }",
          "445:  if !password.IsComplexEnough(form.Password) {",
          "446:   ctx.Data[\"Err_Password\"] = true",
          "448:   return",
          "449:  }",
          "450:  pwned, err := password.IsPwned(ctx, form.Password)",
          "",
          "[Removed Lines]",
          "447:   ctx.RenderWithErr(password.BuildComplexityError(ctx), tplSignUp, &form)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "routers/web/auth/password.go||routers/weauth/password.go": [
          "File: routers/web/auth/password.go -> routers/weauth/password.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:  } else if !password.IsComplexEnough(passwd) {",
          "177:   ctx.Data[\"IsResetForm\"] = true",
          "178:   ctx.Data[\"Err_Password\"] = true",
          "180:   return",
          "181:  } else if pwned, err := password.IsPwned(ctx, passwd); pwned || err != nil {",
          "182:   errMsg := ctx.Tr(\"auth.password_pwned\")",
          "",
          "[Removed Lines]",
          "179:   ctx.RenderWithErr(password.BuildComplexityError(ctx), tplResetPassword, nil)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "306:  if !password.IsComplexEnough(form.Password) {",
          "307:   ctx.Data[\"Err_Password\"] = true",
          "309:   return",
          "310:  }",
          "311:  pwned, err := password.IsPwned(ctx, form.Password)",
          "",
          "[Removed Lines]",
          "308:   ctx.RenderWithErr(password.BuildComplexityError(ctx), tplMustChangePassword, &form)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "routers/web/repo/repo.go||routers/werepo/repo.go": [
          "File: routers/web/repo/repo.go -> routers/werepo/repo.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "546:   if len(sortOrder) == 0 {",
          "547:    sortOrder = \"asc\"",
          "548:   }",
          "550:    if orderBy, ok := searchModeMap[sortMode]; ok {",
          "551:     opts.OrderBy = orderBy",
          "552:    } else {",
          "",
          "[Removed Lines]",
          "549:   if searchModeMap, ok := context.SearchOrderByMap[sortOrder]; ok {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "routers/web/repo/view.go||routers/werepo/view.go": [
          "File: routers/web/repo/view.go -> routers/werepo/view.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:  extCount := len(exts)",
          "71:  readmeFiles := make([]*git.TreeEntry, extCount+1)",
          "",
          "[Removed Lines]",
          "69:  exts := append(localizedExtensions(\".md\", ctx.Language()), \".txt\", \"\") // sorted by priority",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "routers/web/user/setting/account.go||routers/weuser/setting/account.go": [
          "File: routers/web/user/setting/account.go -> routers/weuser/setting/account.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:  } else if form.Password != form.Retype {",
          "61:   ctx.Flash.Error(ctx.Tr(\"form.password_not_match\"))",
          "62:  } else if !password.IsComplexEnough(form.Password) {",
          "64:  } else if pwned, err := password.IsPwned(ctx, form.Password); pwned || err != nil {",
          "65:   errMsg := ctx.Tr(\"auth.password_pwned\")",
          "66:   if err != nil {",
          "",
          "[Removed Lines]",
          "63:   ctx.Flash.Error(password.BuildComplexityError(ctx))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b71cb7acdc8840c9fc16b496c90a048051d15823",
      "candidate_info": {
        "commit_hash": "b71cb7acdc8840c9fc16b496c90a048051d15823",
        "repo": "go-gitea/gitea",
        "commit_url": "https://github.com/go-gitea/gitea/commit/b71cb7acdc8840c9fc16b496c90a048051d15823",
        "files": [
          "modules/context/base.go",
          "modules/context/context_response.go",
          "modules/httplib/url.go",
          "modules/httplib/url_test.go",
          "modules/test/utils.go",
          "routers/common/redirect.go",
          "routers/init.go",
          "routers/web/repo/issue.go",
          "templates/repo/issue/new_form.tmpl",
          "templates/repo/issue/view_content.tmpl",
          "tests/integration/attachment_test.go",
          "tests/integration/issue_test.go",
          "web_src/js/features/common-global.js",
          "web_src/js/features/repo-issue.js"
        ],
        "message": "Use fetch to send requests to create issues/comments (#25258)\n\nFollow #23290\n\nNetwork error won't make content lost. And this is a much better\napproach than \"loading-button\".\n\nThe UI is not perfect and there are still some TODOs, they can be done\nin following PRs, not a must in this PR's scope.\n\n<details>\n\n\n![image](https://github.com/go-gitea/gitea/assets/2114189/c94ba958-aa46-4747-8ddf-6584deeed25c)\n\n</details>",
        "before_after_code_files": [
          "modules/context/base.go||modules/context/base.go",
          "modules/context/context_response.go||modules/context/context_response.go",
          "modules/httplib/url.go||modules/httpliurl.go",
          "modules/httplib/url_test.go||modules/httpliurl_test.go",
          "modules/test/utils.go||modules/test/utils.go",
          "routers/common/redirect.go||routers/common/redirect.go",
          "routers/init.go||routers/init.go",
          "routers/web/repo/issue.go||routers/werepo/issue.go",
          "templates/repo/issue/new_form.tmpl||templates/repo/issue/new_form.tmpl",
          "templates/repo/issue/view_content.tmpl||templates/repo/issue/view_content.tmpl",
          "tests/integration/attachment_test.go||tests/integration/attachment_test.go",
          "tests/integration/issue_test.go||tests/integration/issue_test.go",
          "web_src/js/features/common-global.js||web_src/js/features/common-global.js",
          "web_src/js/features/repo-issue.js||web_src/js/features/repo-issue.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "modules/context/context_response.go||modules/context/context_response.go"
          ],
          "candidate": [
            "modules/context/context_response.go||modules/context/context_response.go"
          ]
        }
      },
      "candidate_diff": {
        "modules/context/base.go||modules/context/base.go": [
          "File: modules/context/base.go -> modules/context/base.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:  b.JSON(http.StatusOK, map[string]any{\"redirect\": redirect})",
          "137: }",
          "140: func (b *Base) RemoteAddr() string {",
          "141:  return b.Req.RemoteAddr",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139: func (b *Base) JSONError(msg string) {",
          "140:  b.JSON(http.StatusBadRequest, map[string]any{\"errorMessage\": msg})",
          "141: }",
          "",
          "---------------"
        ],
        "modules/context/context_response.go||modules/context/context_response.go": [
          "File: modules/context/context_response.go -> modules/context/context_response.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:  user_model \"code.gitea.io/gitea/models/user\"",
          "18:  \"code.gitea.io/gitea/modules/base\"",
          "19:  \"code.gitea.io/gitea/modules/log\"",
          "20:  \"code.gitea.io/gitea/modules/setting\"",
          "21:  \"code.gitea.io/gitea/modules/templates\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:  \"code.gitea.io/gitea/modules/httplib\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:    continue",
          "50:   }",
          "60:    continue",
          "61:   }",
          "",
          "[Removed Lines]",
          "54:   if len(loc) > 1 && (loc[0] == '/' || loc[0] == '\\\\') && (loc[1] == '/' || loc[1] == '\\\\') {",
          "55:    continue",
          "56:   }",
          "58:   u, err := url.Parse(loc)",
          "59:   if err != nil || ((u.Scheme != \"\" || u.Host != \"\") && !strings.HasPrefix(strings.ToLower(loc), strings.ToLower(setting.AppURL))) {",
          "",
          "[Added Lines]",
          "53:   if httplib.IsRiskyRedirectURL(loc) {",
          "",
          "---------------"
        ],
        "modules/httplib/url.go||modules/httpliurl.go": [
          "File: modules/httplib/url.go -> modules/httpliurl.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "modules/httplib/url_test.go||modules/httpliurl_test.go": [
          "File: modules/httplib/url_test.go -> modules/httpliurl_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "modules/test/utils.go||modules/test/utils.go": [
          "File: modules/test/utils.go -> modules/test/utils.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import (",
          "7:  \"net/http\"",
          "8:  \"strings\"",
          "9: )",
          "12: func RedirectURL(resp http.ResponseWriter) string {",
          "14: }",
          "16: func IsNormalPageCompleted(s string) bool {",
          "",
          "[Removed Lines]",
          "13:  return resp.Header().Get(\"Location\")",
          "",
          "[Added Lines]",
          "8:  \"net/http/httptest\"",
          "11:  \"code.gitea.io/gitea/modules/json\"",
          "17:  loc := resp.Header().Get(\"Location\")",
          "18:  if loc != \"\" {",
          "19:   return loc",
          "20:  }",
          "21:  if r, ok := resp.(*httptest.ResponseRecorder); ok {",
          "22:   m := map[string]any{}",
          "23:   err := json.Unmarshal(r.Body.Bytes(), &m)",
          "24:   if err == nil {",
          "25:    if loc, ok := m[\"redirect\"].(string); ok {",
          "26:     return loc",
          "27:    }",
          "28:   }",
          "29:  }",
          "30:  return \"\"",
          "",
          "---------------"
        ],
        "routers/common/redirect.go||routers/common/redirect.go": [
          "File: routers/common/redirect.go -> routers/common/redirect.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: package common",
          "6: import (",
          "7:  \"net/http\"",
          "9:  \"code.gitea.io/gitea/modules/httplib\"",
          "10: )",
          "13: func FetchRedirectDelegate(resp http.ResponseWriter, req *http.Request) {",
          "19:  redirect := req.PostFormValue(\"redirect\")",
          "20:  if httplib.IsRiskyRedirectURL(redirect) {",
          "21:   resp.WriteHeader(http.StatusBadRequest)",
          "22:   return",
          "23:  }",
          "24:  resp.Header().Add(\"Location\", redirect)",
          "25:  resp.WriteHeader(http.StatusSeeOther)",
          "26: }",
          "",
          "---------------"
        ],
        "routers/init.go||routers/init.go": [
          "File: routers/init.go -> routers/init.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:  r.Mount(\"/api/v1\", apiv1.Routes(ctx))",
          "184:  r.Mount(\"/api/internal\", private.Routes())",
          "186:  if setting.Packages.Enabled {",
          "188:   r.Mount(\"/api/packages\", packages_router.CommonRoutes(ctx))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:  r.Post(\"/-/fetch-redirect\", common.FetchRedirectDelegate)",
          "",
          "---------------"
        ],
        "routers/web/repo/issue.go||routers/werepo/issue.go": [
          "File: routers/web/repo/issue.go -> routers/werepo/issue.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1134:  }",
          "1136:  if ctx.HasError() {",
          "1138:   return",
          "1139:  }",
          "1141:  if util.IsEmptyString(form.Title) {",
          "1143:   return",
          "1144:  }",
          "",
          "[Removed Lines]",
          "1137:   ctx.HTML(http.StatusOK, tplIssueNew)",
          "1142:   ctx.RenderWithErr(ctx.Tr(\"repo.issues.new.title_empty\"), tplIssueNew, form)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1185:  log.Trace(\"Issue created: %d/%d\", repo.ID, issue.ID)",
          "1186:  if ctx.FormString(\"redirect_after_creation\") == \"project\" && projectID > 0 {",
          "1188:  } else {",
          "1190:  }",
          "1191: }",
          "",
          "[Removed Lines]",
          "1187:   ctx.Redirect(ctx.Repo.RepoLink + \"/projects/\" + strconv.FormatInt(projectID, 10))",
          "1189:   ctx.Redirect(issue.Link())",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2777:  }",
          "2779:  if issue.IsLocked && !ctx.Repo.CanWriteIssuesOrPulls(issue.IsPull) && !ctx.Doer.IsAdmin {",
          "2782:   return",
          "2783:  }",
          "",
          "[Removed Lines]",
          "2780:   ctx.Flash.Error(ctx.Tr(\"repo.issues.comment_on_locked\"))",
          "2781:   ctx.Redirect(issue.Link())",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2788:  }",
          "2790:  if ctx.HasError() {",
          "2793:   return",
          "2794:  }",
          "",
          "[Removed Lines]",
          "2791:   ctx.Flash.Error(ctx.Data[\"ErrorMsg\"].(string))",
          "2792:   ctx.Redirect(issue.Link())",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2809:     pr, err = issues_model.GetUnmergedPullRequest(ctx, pull.HeadRepoID, pull.BaseRepoID, pull.HeadBranch, pull.BaseBranch, pull.Flow)",
          "2810:     if err != nil {",
          "2811:      if !issues_model.IsErrPullRequestNotExist(err) {",
          "2814:       return",
          "2815:      }",
          "2816:     }",
          "",
          "[Removed Lines]",
          "2812:       ctx.Flash.Error(ctx.Tr(\"repo.issues.dependency.pr_close_blocked\"))",
          "2813:       ctx.Redirect(fmt.Sprintf(\"%s/pulls/%d\", ctx.Repo.RepoLink, pull.Index))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2841:     }",
          "2842:     if ok := git.IsBranchExist(ctx, pull.HeadRepo.RepoPath(), pull.BaseBranch); !ok {",
          "2846:      return",
          "2847:     }",
          "2848:     headBranchRef := pull.GetGitHeadBranchRefName()",
          "",
          "[Removed Lines]",
          "2844:      ctx.Flash.Error(\"The origin branch is delete, cannot reopen.\")",
          "2845:      ctx.Redirect(fmt.Sprintf(\"%s/pulls/%d\", ctx.Repo.RepoLink, pull.Index))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2883:      if issues_model.IsErrDependenciesLeft(err) {",
          "2884:       if issue.IsPull {",
          "2887:       } else {",
          "2890:       }",
          "2891:       return",
          "2892:      }",
          "",
          "[Removed Lines]",
          "2885:        ctx.Flash.Error(ctx.Tr(\"repo.issues.dependency.pr_close_blocked\"))",
          "2886:        ctx.Redirect(fmt.Sprintf(\"%s/pulls/%d\", ctx.Repo.RepoLink, issue.Index))",
          "2888:        ctx.Flash.Error(ctx.Tr(\"repo.issues.dependency.issue_close_blocked\"))",
          "2889:        ctx.Redirect(fmt.Sprintf(\"%s/issues/%d\", ctx.Repo.RepoLink, issue.Index))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2908:    typeName = \"pulls\"",
          "2909:   }",
          "2910:   if comment != nil {",
          "2912:   } else {",
          "2914:   }",
          "2915:  }()",
          "",
          "[Removed Lines]",
          "2911:    ctx.Redirect(fmt.Sprintf(\"%s/%s/%d#%s\", ctx.Repo.RepoLink, typeName, issue.Index, comment.HashTag()))",
          "2913:    ctx.Redirect(fmt.Sprintf(\"%s/%s/%d\", ctx.Repo.RepoLink, typeName, issue.Index))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "templates/repo/issue/new_form.tmpl||templates/repo/issue/new_form.tmpl": [
          "File: templates/repo/issue/new_form.tmpl -> templates/repo/issue/new_form.tmpl",
          "--- Hunk 1 ---",
          "[Context before]",
          "2:  {{.CsrfTokenHtml}}",
          "3:  {{if .Flash}}",
          "4:   <div class=\"sixteen wide column\">",
          "",
          "[Removed Lines]",
          "1: <form class=\"issue-content ui comment form\" id=\"new-issue\" action=\"{{.Link}}\" method=\"post\">",
          "",
          "[Added Lines]",
          "1: <form class=\"issue-content ui comment form form-fetch-action\" id=\"new-issue\" action=\"{{.Link}}\" method=\"post\">",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:       {{template \"repo/issue/comment_tab\" .}}",
          "36:      {{end}}",
          "37:      <div class=\"text right\">",
          "39:        {{if .PageIsComparePull}}",
          "40:         {{.locale.Tr \"repo.pulls.create\"}}",
          "41:        {{else}}",
          "",
          "[Removed Lines]",
          "38:       <button class=\"ui green button loading-button\" tabindex=\"6\">",
          "",
          "[Added Lines]",
          "38:       <button class=\"ui green button\" tabindex=\"6\">",
          "",
          "---------------"
        ],
        "templates/repo/issue/view_content.tmpl||templates/repo/issue/view_content.tmpl": [
          "File: templates/repo/issue/view_content.tmpl -> templates/repo/issue/view_content.tmpl",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:       {{avatar $.Context .SignedUser 40}}",
          "97:      </a>",
          "98:      <div class=\"content\">",
          "100:        {{template \"repo/issue/comment_tab\" .}}",
          "101:        {{.CsrfTokenHtml}}",
          "103:        <div class=\"field footer\">",
          "104:         <div class=\"text right\">",
          "105:          {{if and (or .HasIssuesOrPullsWritePermission .IsIssuePoster) (not .DisableStatusChange)}}",
          "106:           {{if .Issue.IsClosed}}",
          "108:             {{.locale.Tr \"repo.issues.reopen_issue\"}}",
          "109:            </button>",
          "110:           {{else}}",
          "",
          "[Removed Lines]",
          "99:       <form class=\"ui segment form\" id=\"comment-form\" action=\"{{$.RepoLink}}/issues/{{.Issue.Index}}/comments\" method=\"post\">",
          "102:        <input id=\"status\" name=\"status\" type=\"hidden\">",
          "107:            <button id=\"status-button\" class=\"ui green basic button\" tabindex=\"6\" data-status=\"{{.locale.Tr \"repo.issues.reopen_issue\"}}\" data-status-and-comment=\"{{.locale.Tr \"repo.issues.reopen_comment_issue\"}}\" data-status-val=\"reopen\">",
          "",
          "[Added Lines]",
          "99:       <form class=\"ui segment form form-fetch-action\" id=\"comment-form\" action=\"{{$.RepoLink}}/issues/{{.Issue.Index}}/comments\" method=\"post\">",
          "106:            <button id=\"status-button\" class=\"ui green basic button\" tabindex=\"6\" data-status=\"{{.locale.Tr \"repo.issues.reopen_issue\"}}\" data-status-and-comment=\"{{.locale.Tr \"repo.issues.reopen_comment_issue\"}}\" name=\"status\" value=\"reopen\">",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:            {{if .Issue.IsPull}}",
          "113:             {{$closeTranslationKey = \"repo.pulls.close\"}}",
          "114:            {{end}}",
          "116:             {{.locale.Tr $closeTranslationKey}}",
          "117:            </button>",
          "118:           {{end}}",
          "119:          {{end}}",
          "121:           {{.locale.Tr \"repo.issues.create_comment\"}}",
          "122:          </button>",
          "123:         </div>",
          "",
          "[Removed Lines]",
          "115:            <button id=\"status-button\" class=\"ui red basic button\" tabindex=\"6\" data-status=\"{{.locale.Tr $closeTranslationKey}}\" data-status-and-comment=\"{{.locale.Tr \"repo.issues.close_comment_issue\"}}\" data-status-val=\"close\">",
          "120:          <button class=\"ui green button loading-button\" tabindex=\"5\">",
          "",
          "[Added Lines]",
          "114:            <button id=\"status-button\" class=\"ui red basic button\" tabindex=\"6\" data-status=\"{{.locale.Tr $closeTranslationKey}}\" data-status-and-comment=\"{{.locale.Tr \"repo.issues.close_comment_issue\"}}\" name=\"status\" value=\"close\">",
          "119:          <button class=\"ui green button\" tabindex=\"5\">",
          "",
          "---------------"
        ],
        "tests/integration/attachment_test.go||tests/integration/attachment_test.go": [
          "File: tests/integration/attachment_test.go -> tests/integration/attachment_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:  }",
          "85:  req = NewRequestWithValues(t, \"POST\", link, postData)",
          "87:  test.RedirectURL(resp) // check that redirect URL exists",
          "",
          "[Removed Lines]",
          "86:  resp = session.MakeRequest(t, req, http.StatusSeeOther)",
          "",
          "[Added Lines]",
          "86:  resp = session.MakeRequest(t, req, http.StatusOK)",
          "",
          "---------------"
        ],
        "tests/integration/issue_test.go||tests/integration/issue_test.go": [
          "File: tests/integration/issue_test.go -> tests/integration/issue_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:   \"title\":   title,",
          "136:   \"content\": content,",
          "137:  })",
          "140:  issueURL := test.RedirectURL(resp)",
          "141:  req = NewRequest(t, \"GET\", issueURL)",
          "",
          "[Removed Lines]",
          "138:  resp = session.MakeRequest(t, req, http.StatusSeeOther)",
          "",
          "[Added Lines]",
          "138:  resp = session.MakeRequest(t, req, http.StatusOK)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:   \"content\": content,",
          "166:   \"status\":  status,",
          "167:  })",
          "170:  req = NewRequest(t, \"GET\", test.RedirectURL(resp))",
          "171:  resp = session.MakeRequest(t, req, http.StatusOK)",
          "",
          "[Removed Lines]",
          "168:  resp = session.MakeRequest(t, req, http.StatusSeeOther)",
          "",
          "[Added Lines]",
          "168:  resp = session.MakeRequest(t, req, http.StatusOK)",
          "",
          "---------------"
        ],
        "web_src/js/features/common-global.js||web_src/js/features/common-global.js": [
          "File: web_src/js/features/common-global.js -> web_src/js/features/common-global.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import {htmlEscape} from 'escape-goat';",
          "10: import {createTippy} from '../modules/tippy.js';",
          "14: export function initGlobalFormDirtyLeaveConfirm() {",
          "",
          "[Removed Lines]",
          "12: const {appUrl, csrfToken, i18n} = window.config;",
          "",
          "[Added Lines]",
          "12: const {appUrl, appSubUrl, csrfToken, i18n} = window.config;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:   });",
          "62: }",
          "64: async function formFetchAction(e) {",
          "65:   if (!e.target.classList.contains('form-fetch-action')) return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66: function doRedirect(redirect) {",
          "67:   const form = document.createElement('form');",
          "68:   const input = document.createElement('input');",
          "69:   form.method = 'post';",
          "70:   form.action = `${appSubUrl}/-/fetch-redirect`;",
          "71:   input.type = 'hidden';",
          "72:   input.name = 'redirect';",
          "73:   input.value = redirect;",
          "74:   form.append(input);",
          "75:   document.body.append(form);",
          "76:   form.submit();",
          "77: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:         const {redirect} = await resp.json();",
          "121:         formEl.classList.remove('dirty'); // remove the areYouSure check before reloading",
          "122:         if (redirect) {",
          "124:         } else {",
          "125:           window.location.reload();",
          "126:         }",
          "127:       } else {",
          "128:         onError(`server error: ${resp.status}`);",
          "129:       }",
          "130:     } catch (e) {",
          "132:     }",
          "133:   };",
          "",
          "[Removed Lines]",
          "123:           window.location.href = redirect;",
          "131:       onError(e.error);",
          "",
          "[Added Lines]",
          "139:           doRedirect(redirect);",
          "143:       } else if (resp.status >= 400 && resp.status < 500) {",
          "144:         const data = await resp.json();",
          "147:         onError(data.errorMessage || `server error: ${resp.status}`);",
          "152:       console.error('error when doRequest', e);",
          "153:       onError(i18n.network_error);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "184:   $('.tabular.menu .item').tab();",
          "194:   document.addEventListener('submit', formFetchAction);",
          "195: }",
          "",
          "[Removed Lines]",
          "187:   document.addEventListener('submit', (e) => {",
          "188:     const btn = e.target.querySelector('.loading-button');",
          "189:     if (!btn) return;",
          "190:     if (btn.classList.contains('loading')) return e.preventDefault();",
          "191:     btn.classList.add('loading');",
          "192:   });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "web_src/js/features/repo-issue.js||web_src/js/features/repo-issue.js": [
          "File: web_src/js/features/repo-issue.js -> web_src/js/features/repo-issue.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "636:   const opts = {};",
          "637:   const $statusButton = $('#status-button');",
          "638:   if ($statusButton.length) {",
          "644:     opts.onContentChanged = (editor) => {",
          "645:       $statusButton.text($statusButton.attr(editor.value().trim() ? 'data-status-and-comment' : 'data-status'));",
          "646:     };",
          "",
          "[Removed Lines]",
          "639:     $statusButton.on('click', (e) => {",
          "640:       e.preventDefault();",
          "641:       $('#status').val($statusButton.data('status-val'));",
          "642:       $('#comment-form').trigger('submit');",
          "643:     });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7679f4d51a637ae47880e09dbb185651cb7163c7",
      "candidate_info": {
        "commit_hash": "7679f4d51a637ae47880e09dbb185651cb7163c7",
        "repo": "go-gitea/gitea",
        "commit_url": "https://github.com/go-gitea/gitea/commit/7679f4d51a637ae47880e09dbb185651cb7163c7",
        "files": [
          "modules/context/context_response.go"
        ],
        "message": "Fix open redirect check for more cases (#25143) (#25154)\n\nBackport #25143 by @lafriks\n\nIf redirect_to parameter has set value starting with `\\\\example.com`\nredirect will be created with header `Location: /\\\\example.com` that\nwill redirect to example.com domain.\n\nCo-authored-by: Lauris BH <lauris@nix.lv>",
        "before_after_code_files": [
          "modules/context/context_response.go||modules/context/context_response.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "modules/context/context_response.go||modules/context/context_response.go"
          ],
          "candidate": [
            "modules/context/context_response.go||modules/context/context_response.go"
          ]
        }
      },
      "candidate_diff": {
        "modules/context/context_response.go||modules/context/context_response.go": [
          "File: modules/context/context_response.go -> modules/context/context_response.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:    continue",
          "50:   }",
          "55:    continue",
          "56:   }",
          "",
          "[Removed Lines]",
          "54:   if len(loc) > 1 && loc[0] == '/' && (loc[1] == '/' || loc[1] == '\\\\') {",
          "",
          "[Added Lines]",
          "54:   if len(loc) > 1 && (loc[0] == '/' || loc[0] == '\\\\') && (loc[1] == '/' || loc[1] == '\\\\') {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a9030052a7b92bdfa1a6be0cdb540050a16ba31e",
      "candidate_info": {
        "commit_hash": "a9030052a7b92bdfa1a6be0cdb540050a16ba31e",
        "repo": "go-gitea/gitea",
        "commit_url": "https://github.com/go-gitea/gitea/commit/a9030052a7b92bdfa1a6be0cdb540050a16ba31e",
        "files": [
          "modules/context/context.go"
        ],
        "message": "Fix open redirect check for more cases (#25143) (#25155)\n\nBackport https://github.com/go-gitea/gitea/pull/25143\n\nIf redirect_to parameter has set value starting with \\\\example.com\nredirect will be created with header Location: /\\\\example.com that will\nredirect to example.com domain.",
        "before_after_code_files": [
          "modules/context/context.go||modules/context/context.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/context/context.go||modules/context/context.go": [
          "File: modules/context/context.go -> modules/context/context.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:    continue",
          "198:   }",
          "203:    continue",
          "204:   }",
          "",
          "[Removed Lines]",
          "202:   if len(loc) > 1 && loc[0] == '/' && (loc[1] == '/' || loc[1] == '\\\\') {",
          "",
          "[Added Lines]",
          "202:   if len(loc) > 1 && (loc[0] == '/' || loc[0] == '\\\\') && (loc[1] == '/' || loc[1] == '\\\\') {",
          "",
          "---------------"
        ]
      }
    }
  ]
}