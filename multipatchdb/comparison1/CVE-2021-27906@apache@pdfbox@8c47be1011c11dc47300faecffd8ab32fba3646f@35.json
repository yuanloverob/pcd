{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "de14af9140705db0e94fb49d74f5080d16296829",
      "candidate_info": {
        "commit_hash": "de14af9140705db0e94fb49d74f5080d16296829",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/de14af9140705db0e94fb49d74f5080d16296829",
        "files": [
          "xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java"
        ],
        "message": "PDFBOX-4892: remove unnecessary check and initialisation, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889533 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java||xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java||xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java": [
          "File: xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java -> xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:                 int timeZonePos = 12;",
          "134:                 if (date.length() - 12 > 5 || (date.length() - 12 == 3 && date.endsWith(\"Z\")))",
          "135:                 {",
          "140:                     timeZonePos = 14;",
          "141:                 }",
          "147:                 if (date.length() >= (timeZonePos + 1))",
          "148:                 {",
          "",
          "[Removed Lines]",
          "136:                     if (date.length() >= 14)",
          "137:                     {",
          "138:                         second = Integer.parseInt(date.substring(12, 14));",
          "139:                     }",
          "142:                 else",
          "143:                 {",
          "144:                     second = 0;",
          "145:                 }",
          "",
          "[Added Lines]",
          "136:                     second = Integer.parseInt(date.substring(12, 14));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9dfaa4da7621acda7e64bc7a40357d8511300320",
      "candidate_info": {
        "commit_hash": "9dfaa4da7621acda7e64bc7a40357d8511300320",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/9dfaa4da7621acda7e64bc7a40357d8511300320",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java",
          "preflight/src/main/java/org/apache/pdfbox/preflight/PreflightConstants.java"
        ],
        "message": "PDFBOX-4892: use constant + fix typo\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887951 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java",
          "preflight/src/main/java/org/apache/pdfbox/preflight/PreflightConstants.java||preflight/src/main/java/org/apache/pdfbox/preflight/PreflightConstants.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "493:     public void setFileDecodeParams(List<?> decodeParams)",
          "494:     {",
          "496:     }",
          "",
          "[Removed Lines]",
          "495:         stream.setItem(\"FDecodeParams\", COSArrayList.converterToCOSArray(decodeParams));",
          "",
          "[Added Lines]",
          "495:         stream.setItem(COSName.F_DECODE_PARMS, COSArrayList.converterToCOSArray(decodeParams));",
          "",
          "---------------"
        ],
        "preflight/src/main/java/org/apache/pdfbox/preflight/PreflightConstants.java||preflight/src/main/java/org/apache/pdfbox/preflight/PreflightConstants.java": [
          "File: preflight/src/main/java/org/apache/pdfbox/preflight/PreflightConstants.java -> preflight/src/main/java/org/apache/pdfbox/preflight/PreflightConstants.java"
        ]
      }
    },
    {
      "candidate_hash": "4b98ceb05c4360c5799e8ac3d4f442251a4e558b",
      "candidate_info": {
        "commit_hash": "4b98ceb05c4360c5799e8ac3d4f442251a4e558b",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/4b98ceb05c4360c5799e8ac3d4f442251a4e558b",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java"
        ],
        "message": "PDFBOX-5163: remove dubious code\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889695 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "292:         }",
          "293:         COSBase value = parseCOSDictionaryValue();",
          "294:         skipSpaces();",
          "310:         if (value == null)",
          "311:         {",
          "312:             LOG.warn(\"Bad dictionary declaration at offset \" + seqSource.getPosition());",
          "",
          "[Removed Lines]",
          "295:         if (((char) seqSource.peek()) == 'd')",
          "296:         {",
          "299:             String potentialDEF = readString();",
          "300:             if (!potentialDEF.equals(DEF))",
          "301:             {",
          "302:                 seqSource.unread(potentialDEF.getBytes(ISO_8859_1));",
          "303:             }",
          "304:             else",
          "305:             {",
          "306:                 skipSpaces();",
          "307:             }",
          "308:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41caa911de9318da7ac730dc83f2c3fc59a7c6f6",
      "candidate_info": {
        "commit_hash": "41caa911de9318da7ac730dc83f2c3fc59a7c6f6",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/41caa911de9318da7ac730dc83f2c3fc59a7c6f6",
        "files": [
          "xmpbox/src/main/java/org/apache/xmpbox/type/ArrayProperty.java"
        ],
        "message": "PDFBOX-4892: set individual initial ArrayList size and simplify code, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887528 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "xmpbox/src/main/java/org/apache/xmpbox/type/ArrayProperty.java||xmpbox/src/main/java/org/apache/xmpbox/type/ArrayProperty.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "xmpbox/src/main/java/org/apache/xmpbox/type/ArrayProperty.java||xmpbox/src/main/java/org/apache/xmpbox/type/ArrayProperty.java": [
          "File: xmpbox/src/main/java/org/apache/xmpbox/type/ArrayProperty.java -> xmpbox/src/main/java/org/apache/xmpbox/type/ArrayProperty.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import java.util.ArrayList;",
          "25: import java.util.Collections;",
          "27: import java.util.List;",
          "29: import org.apache.xmpbox.XMPMetadata;",
          "",
          "[Removed Lines]",
          "26: import java.util.Iterator;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:     public List<String> getElementsAsString()",
          "74:     {",
          "80:         {",
          "83:         }",
          "86:     }",
          "",
          "[Removed Lines]",
          "75:         List<String> retval;",
          "76:         retval = new ArrayList<String>();",
          "77:         Iterator<AbstractField> it = getContainer().getAllProperties().iterator();",
          "78:         AbstractSimpleProperty tmp;",
          "79:         while (it.hasNext())",
          "81:             tmp = (AbstractSimpleProperty) it.next();",
          "82:             retval.add(tmp.getStringValue());",
          "84:         retval = Collections.unmodifiableList(retval);",
          "85:         return retval;",
          "",
          "[Added Lines]",
          "74:         List<AbstractField> allProperties = getContainer().getAllProperties();",
          "75:         List<String> retval = new ArrayList<String>(allProperties.size());",
          "76:         for (AbstractField tmp : allProperties)",
          "78:             retval.add(((AbstractSimpleProperty) tmp).getStringValue());",
          "80:         return Collections.unmodifiableList(retval);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6e8a0dd3439c3efdd99b24e48b6e751c3d0b8de",
      "candidate_info": {
        "commit_hash": "f6e8a0dd3439c3efdd99b24e48b6e751c3d0b8de",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/f6e8a0dd3439c3efdd99b24e48b6e751c3d0b8de",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDExportFormatAttributeObject.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDLayoutAttributeObject.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDTableAttributeObject.java"
        ],
        "message": "PDFBOX-4892: remove unneeded code, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889409 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDExportFormatAttributeObject.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDExportFormatAttributeObject.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDLayoutAttributeObject.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDLayoutAttributeObject.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDTableAttributeObject.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDTableAttributeObject.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDExportFormatAttributeObject.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDExportFormatAttributeObject.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDExportFormatAttributeObject.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDExportFormatAttributeObject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:         }",
          "243:         if (this.isSpecified(PDTableAttributeObject.ROW_SPAN))",
          "244:         {",
          "246:         }",
          "247:         if (this.isSpecified(PDTableAttributeObject.COL_SPAN))",
          "248:         {",
          "250:         }",
          "251:         if (this.isSpecified(PDTableAttributeObject.HEADERS))",
          "252:         {",
          "",
          "[Removed Lines]",
          "245:             sb.append(\", RowSpan=\").append(String.valueOf(this.getRowSpan()));",
          "249:             sb.append(\", ColSpan=\").append(String.valueOf(this.getColSpan()));",
          "",
          "[Added Lines]",
          "245:             sb.append(\", RowSpan=\").append(this.getRowSpan());",
          "249:             sb.append(\", ColSpan=\").append(this.getColSpan());",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDLayoutAttributeObject.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDLayoutAttributeObject.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDLayoutAttributeObject.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDLayoutAttributeObject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1518:             }",
          "1519:             else",
          "1520:             {",
          "1522:             }",
          "1523:         }",
          "1524:         if (this.isSpecified(PADDING))",
          "",
          "[Removed Lines]",
          "1521:                 sb.append(String.valueOf(borderThickness));",
          "",
          "[Added Lines]",
          "1521:                 sb.append(borderThickness);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1531:             }",
          "1532:             else",
          "1533:             {",
          "1535:             }",
          "1536:         }",
          "1537:         if (this.isSpecified(COLOR))",
          "",
          "[Removed Lines]",
          "1534:                 sb.append(String.valueOf(padding));",
          "",
          "[Added Lines]",
          "1534:                 sb.append(padding);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1541:         if (this.isSpecified(SPACE_BEFORE))",
          "1542:         {",
          "1543:             sb.append(\", SpaceBefore=\")",
          "1545:         }",
          "1546:         if (this.isSpecified(SPACE_AFTER))",
          "1547:         {",
          "1548:             sb.append(\", SpaceAfter=\")",
          "1550:         }",
          "1551:         if (this.isSpecified(START_INDENT))",
          "1552:         {",
          "1553:             sb.append(\", StartIndent=\")",
          "1555:         }",
          "1556:         if (this.isSpecified(END_INDENT))",
          "1557:         {",
          "1558:             sb.append(\", EndIndent=\")",
          "1560:         }",
          "1561:         if (this.isSpecified(TEXT_INDENT))",
          "1562:         {",
          "1563:             sb.append(\", TextIndent=\")",
          "1565:         }",
          "1566:         if (this.isSpecified(TEXT_ALIGN))",
          "1567:         {",
          "",
          "[Removed Lines]",
          "1544:                 .append(String.valueOf(this.getSpaceBefore()));",
          "1549:                 .append(String.valueOf(this.getSpaceAfter()));",
          "1554:                 .append(String.valueOf(this.getStartIndent()));",
          "1559:                 .append(String.valueOf(this.getEndIndent()));",
          "1564:                 .append(String.valueOf(this.getTextIndent()));",
          "",
          "[Added Lines]",
          "1544:                 .append(this.getSpaceBefore());",
          "1549:                 .append(this.getSpaceAfter());",
          "1554:                 .append(this.getStartIndent());",
          "1559:                 .append(this.getEndIndent());",
          "1564:                 .append(this.getTextIndent());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1573:         }",
          "1574:         if (this.isSpecified(WIDTH))",
          "1575:         {",
          "1586:         }",
          "1587:         if (this.isSpecified(HEIGHT))",
          "1588:         {",
          "1599:         }",
          "1600:         if (this.isSpecified(BLOCK_ALIGN))",
          "1601:         {",
          "",
          "[Removed Lines]",
          "1576:             Object width = this.getWidth();",
          "1577:             sb.append(\", Width=\");",
          "1578:             if (width instanceof Float)",
          "1579:             {",
          "1580:                 sb.append(String.valueOf(width));",
          "1581:             }",
          "1582:             else",
          "1583:             {",
          "1584:                 sb.append(width);",
          "1585:             }",
          "1589:             Object height = this.getHeight();",
          "1590:             sb.append(\", Height=\");",
          "1591:             if (height instanceof Float)",
          "1592:             {",
          "1593:                 sb.append(String.valueOf(height));",
          "1594:             }",
          "1595:             else",
          "1596:             {",
          "1597:                 sb.append(height);",
          "1598:             }",
          "",
          "[Added Lines]",
          "1576:             sb.append(\", Width=\").append(this.getWidth());",
          "1580:             sb.append(\", Height=\").append(this.getHeight());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1628:             }",
          "1629:             else",
          "1630:             {",
          "1632:             }",
          "1633:         }",
          "1634:         if (this.isSpecified(BASELINE_SHIFT))",
          "1635:         {",
          "1638:         }",
          "1639:         if (this.isSpecified(LINE_HEIGHT))",
          "1640:         {",
          "1651:         }",
          "1652:         if (this.isSpecified(TEXT_DECORATION_COLOR))",
          "1653:         {",
          "",
          "[Removed Lines]",
          "1631:                 sb.append(String.valueOf(tPadding));",
          "1636:             sb.append(\", BaselineShift=\")",
          "1637:                 .append(String.valueOf(this.getBaselineShift()));",
          "1641:             Object lineHeight = this.getLineHeight();",
          "1642:             sb.append(\", LineHeight=\");",
          "1643:             if (lineHeight instanceof Float)",
          "1644:             {",
          "1645:                 sb.append(String.valueOf(lineHeight));",
          "1646:             }",
          "1647:             else",
          "1648:             {",
          "1649:                 sb.append(lineHeight);",
          "1650:             }",
          "",
          "[Added Lines]",
          "1613:                 sb.append(tPadding);",
          "1618:             sb.append(\", BaselineShift=\").append(this.getBaselineShift());",
          "1622:             sb.append(\", LineHeight=\").append(this.getLineHeight());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1657:         if (this.isSpecified(TEXT_DECORATION_THICKNESS))",
          "1658:         {",
          "1659:             sb.append(\", TextDecorationThickness=\")",
          "1661:         }",
          "1662:         if (this.isSpecified(TEXT_DECORATION_TYPE))",
          "1663:         {",
          "",
          "[Removed Lines]",
          "1660:                 .append(String.valueOf(this.getTextDecorationThickness()));",
          "",
          "[Added Lines]",
          "1632:                 .append(this.getTextDecorationThickness());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1680:         if (this.isSpecified(COLUMN_COUNT))",
          "1681:         {",
          "1682:             sb.append(\", ColumnCount=\")",
          "1684:         }",
          "1685:         if (this.isSpecified(COLUMN_GAP))",
          "1686:         {",
          "",
          "[Removed Lines]",
          "1683:                 .append(String.valueOf(this.getColumnCount()));",
          "",
          "[Added Lines]",
          "1655:                 .append(this.getColumnCount());",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1692:             }",
          "1693:             else",
          "1694:             {",
          "1696:             }",
          "1697:         }",
          "1698:         if (this.isSpecified(COLUMN_WIDTHS))",
          "",
          "[Removed Lines]",
          "1695:                 sb.append(String.valueOf(columnGap));",
          "",
          "[Added Lines]",
          "1667:                 sb.append(columnGap);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1705:             }",
          "1706:             else",
          "1707:             {",
          "1709:             }",
          "1710:         }",
          "1711:         return sb.toString();",
          "",
          "[Removed Lines]",
          "1708:                 sb.append(String.valueOf(columnWidth));",
          "",
          "[Added Lines]",
          "1680:                 sb.append(columnWidth);",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDTableAttributeObject.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDTableAttributeObject.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDTableAttributeObject.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDTableAttributeObject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:         StringBuilder sb = new StringBuilder().append(super.toString());",
          "197:         if (this.isSpecified(ROW_SPAN))",
          "198:         {",
          "200:         }",
          "201:         if (this.isSpecified(COL_SPAN))",
          "202:         {",
          "204:         }",
          "205:         if (this.isSpecified(HEADERS))",
          "206:         {",
          "",
          "[Removed Lines]",
          "199:             sb.append(\", RowSpan=\").append(String.valueOf(this.getRowSpan()));",
          "203:             sb.append(\", ColSpan=\").append(String.valueOf(this.getColSpan()));",
          "",
          "[Added Lines]",
          "199:             sb.append(\", RowSpan=\").append(this.getRowSpan());",
          "203:             sb.append(\", ColSpan=\").append(this.getColSpan());",
          "",
          "---------------"
        ]
      }
    }
  ]
}