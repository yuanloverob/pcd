{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cb7f6a6f99a3e9b7878b31b295789d53bdf82814",
      "candidate_info": {
        "commit_hash": "cb7f6a6f99a3e9b7878b31b295789d53bdf82814",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/cb7f6a6f99a3e9b7878b31b295789d53bdf82814",
        "files": [
          "version.php"
        ],
        "message": "weekly on-sync release 3.7dev\n\nAmended to keep it on-sync with 3.6.1 emergency release",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2018120300.03;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev (Build: 20181204)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2018120301.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev (Build: 20181205)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e020b161a1049f459b5861525af46c8a3dcc112",
      "candidate_info": {
        "commit_hash": "6e020b161a1049f459b5861525af46c8a3dcc112",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/6e020b161a1049f459b5861525af46c8a3dcc112",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.6dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '36';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2018073000.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.6dev (Build: 20180727)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2018080300.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.6dev (Build: 20180803)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb628a9a08933c2a9f1eae2f3be70ea5d343b419",
      "candidate_info": {
        "commit_hash": "cb628a9a08933c2a9f1eae2f3be70ea5d343b419",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/cb628a9a08933c2a9f1eae2f3be70ea5d343b419",
        "files": [
          "version.php"
        ],
        "message": "Moodle release 3.6",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '36';                       // This version's branch.",
          "",
          "[Removed Lines]",
          "32: $version  = 2018120100.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.6rc3 (Build: 20181201)'; // Human-friendly version name",
          "39: $maturity = MATURITY_RC;             // This version's maturity level.",
          "",
          "[Added Lines]",
          "32: $version  = 2018120300.00;              // 20181203      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.6 (Build: 20181203)'; // Human-friendly version name",
          "39: $maturity = MATURITY_STABLE;             // This version's maturity level.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "735122c33f97da708abd0a9cbadab14ebb89401e",
      "candidate_info": {
        "commit_hash": "735122c33f97da708abd0a9cbadab14ebb89401e",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/735122c33f97da708abd0a9cbadab14ebb89401e",
        "files": [
          "admin/tool/mobile/classes/api.php",
          "admin/tool/mobile/tests/externallib_test.php",
          "calendar/externallib.php",
          "calendar/tests/externallib_test.php",
          "lib/db/services.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-64641-master' of git://github.com/jleyva/moodle",
        "before_after_code_files": [
          "admin/tool/mobile/classes/api.php||admin/tool/mobile/classes/api.php",
          "admin/tool/mobile/tests/externallib_test.php||admin/tool/mobile/tests/externallib_test.php",
          "calendar/externallib.php||calendar/externallib.php",
          "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php",
          "lib/db/services.php||lib/db/services.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/tool/mobile/classes/api.php||admin/tool/mobile/classes/api.php": [
          "File: admin/tool/mobile/classes/api.php -> admin/tool/mobile/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "280:             $settings->tool_mobile_apppolicy = get_config('tool_mobile', 'apppolicy');",
          "281:         }",
          "283:         return $settings;",
          "284:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283:         if (empty($section) or $section == 'calendar') {",
          "284:             $settings->calendartype = $CFG->calendartype;",
          "285:             $settings->calendar_site_timeformat = $CFG->calendar_site_timeformat;",
          "286:             $settings->calendar_startwday = $CFG->calendar_startwday;",
          "287:             $settings->calendar_adminseesall = $CFG->calendar_adminseesall;",
          "288:             $settings->calendar_lookahead = $CFG->calendar_lookahead;",
          "289:             $settings->calendar_maxevents = $CFG->calendar_maxevents;",
          "290:         }",
          "",
          "---------------"
        ],
        "admin/tool/mobile/tests/externallib_test.php||admin/tool/mobile/tests/externallib_test.php": [
          "File: admin/tool/mobile/tests/externallib_test.php -> admin/tool/mobile/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:             array('name' => 'tool_mobile_disabledfeatures', 'value' => ''),",
          "178:             array('name' => 'tool_mobile_custommenuitems', 'value' => ''),",
          "179:             array('name' => 'tool_mobile_apppolicy', 'value' => ''),",
          "180:         );",
          "181:         $this->assertCount(0, $result['warnings']);",
          "182:         $this->assertEquals($expected, $result['settings']);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180:             array('name' => 'calendartype', 'value' => $CFG->calendartype),",
          "181:             array('name' => 'calendar_site_timeformat', 'value' => $CFG->calendar_site_timeformat),",
          "182:             array('name' => 'calendar_startwday', 'value' => $CFG->calendar_startwday),",
          "183:             array('name' => 'calendar_adminseesall', 'value' => $CFG->calendar_adminseesall),",
          "184:             array('name' => 'calendar_lookahead', 'value' => $CFG->calendar_lookahead),",
          "185:             array('name' => 'calendar_maxevents', 'value' => $CFG->calendar_maxevents),",
          "",
          "---------------"
        ],
        "calendar/externallib.php||calendar/externallib.php": [
          "File: calendar/externallib.php -> calendar/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: defined('MOODLE_INTERNAL') || die;",
          "30: require_once(\"$CFG->libdir/externallib.php\");",
          "32: use \\core_calendar\\local\\api as local_api;",
          "33: use \\core_calendar\\local\\event\\container as event_container;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: require_once($CFG->dirroot . '/calendar/lib.php');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:     public static function delete_calendar_events($events) {",
          "86:         $params = self::validate_parameters(self:: delete_calendar_events_parameters(), array('events' => $events));",
          "",
          "[Removed Lines]",
          "82:         global $CFG, $DB;",
          "83:         require_once($CFG->dirroot.\"/calendar/lib.php\");",
          "",
          "[Added Lines]",
          "83:         global $DB;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "175:     public static function get_calendar_events($events = array(), $options = array()) {",
          "180:         $params = self::validate_parameters(self::get_calendar_events_parameters(), array('events' => $events, 'options' => $options));",
          "",
          "[Removed Lines]",
          "176:         global $SITE, $DB, $USER, $CFG;",
          "177:         require_once($CFG->dirroot.\"/calendar/lib.php\");",
          "",
          "[Added Lines]",
          "176:         global $SITE, $DB, $USER;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "426:     public static function get_calendar_action_events_by_timesort($timesortfrom = 0, $timesortto = null,",
          "427:                                                        $aftereventid = 0, $limitnum = 20, $limittononsuspendedevents = false,",
          "428:                                                        $userid = null) {",
          "433:         $params = self::validate_parameters(",
          "434:             self::get_calendar_action_events_by_timesort_parameters(),",
          "",
          "[Removed Lines]",
          "429:         global $CFG, $PAGE, $USER;",
          "431:         require_once($CFG->dirroot . '/calendar/lib.php');",
          "",
          "[Added Lines]",
          "428:         global $PAGE, $USER;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "511:     public static function get_calendar_action_events_by_course(",
          "512:         $courseid, $timesortfrom = null, $timesortto = null, $aftereventid = 0, $limitnum = 20) {",
          "518:         $user = null;",
          "519:         $params = self::validate_parameters(",
          "",
          "[Removed Lines]",
          "514:         global $CFG, $PAGE, $USER;",
          "516:         require_once($CFG->dirroot . '/calendar/lib.php');",
          "",
          "[Added Lines]",
          "511:         global $PAGE, $USER;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "596:     public static function get_calendar_action_events_by_courses(",
          "597:         array $courseids, $timesortfrom = null, $timesortto = null, $limitnum = 10) {",
          "603:         $user = null;",
          "604:         $params = self::validate_parameters(",
          "",
          "[Removed Lines]",
          "599:         global $CFG, $PAGE, $USER;",
          "601:         require_once($CFG->dirroot . '/calendar/lib.php');",
          "",
          "[Added Lines]",
          "594:         global $PAGE, $USER;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "693:     public static function create_calendar_events($events) {",
          "698:         $params = self::validate_parameters(self::create_calendar_events_parameters(), array('events' => $events));",
          "",
          "[Removed Lines]",
          "694:         global $CFG, $DB, $USER;",
          "695:         require_once($CFG->dirroot.\"/calendar/lib.php\");",
          "",
          "[Added Lines]",
          "687:         global $DB, $USER;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "799:     public static function get_calendar_event_by_id($eventid) {",
          "803:         $params = self::validate_parameters(self::get_calendar_event_by_id_parameters(), ['eventid' => $eventid]);",
          "804:         $context = \\context_user::instance($USER->id);",
          "",
          "[Removed Lines]",
          "800:         global $CFG, $PAGE, $USER;",
          "801:         require_once($CFG->dirroot.\"/calendar/lib.php\");",
          "",
          "[Added Lines]",
          "792:         global $PAGE, $USER;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "870:     public static function submit_create_update_form($formdata) {",
          "873:         require_once($CFG->libdir.\"/filelib.php\");",
          "",
          "[Removed Lines]",
          "871:         global $CFG, $USER, $PAGE;",
          "872:         require_once($CFG->dirroot.\"/calendar/lib.php\");",
          "",
          "[Added Lines]",
          "862:         global $USER, $PAGE, $CFG;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "997:     public static function get_calendar_monthly_view($year, $month, $courseid, $categoryid, $includenavigation, $mini) {",
          "1002:         $params = self::validate_parameters(self::get_calendar_monthly_view_parameters(), [",
          "",
          "[Removed Lines]",
          "998:         global $CFG, $DB, $USER, $PAGE;",
          "999:         require_once($CFG->dirroot.\"/calendar/lib.php\");",
          "",
          "[Added Lines]",
          "988:         global $DB, $USER, $PAGE;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1075:     public static function get_calendar_day_view($year, $month, $day, $courseid, $categoryid) {",
          "1080:         $params = self::validate_parameters(self::get_calendar_day_view_parameters(), [",
          "",
          "[Removed Lines]",
          "1076:         global $CFG, $DB, $USER, $PAGE;",
          "1077:         require_once($CFG->dirroot.\"/calendar/lib.php\");",
          "",
          "[Added Lines]",
          "1065:         global $DB, $USER, $PAGE;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1216:     public static function get_calendar_upcoming_view($courseid, $categoryid) {",
          "1221:         $params = self::validate_parameters(self::get_calendar_upcoming_view_parameters(), [",
          "",
          "[Removed Lines]",
          "1217:         global $CFG, $DB, $USER, $PAGE;",
          "1218:         require_once($CFG->dirroot.\"/calendar/lib.php\");",
          "",
          "[Added Lines]",
          "1205:         global $DB, $USER, $PAGE;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1257:     public static function get_calendar_upcoming_view_returns() {",
          "1258:         return \\core_calendar\\external\\calendar_upcoming_exporter::get_read_structure();",
          "1259:     }",
          "1260: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1255:     public static function get_calendar_access_information_parameters() {",
          "1256:         return new external_function_parameters(",
          "1257:             [",
          "1258:                 'courseid' => new external_value(PARAM_INT, 'Course to check, empty for site calendar events.', VALUE_DEFAULT, 0),",
          "1259:             ]",
          "1260:         );",
          "1261:     }",
          "1271:     public static function get_calendar_access_information($courseid = 0) {",
          "1273:         $params = self::validate_parameters(self::get_calendar_access_information_parameters(), ['courseid' => $courseid]);",
          "1275:         if (empty($params['courseid']) || $params['courseid'] == SITEID) {",
          "1276:             $context = \\context_system::instance();",
          "1277:         } else {",
          "1278:             $context = \\context_course::instance($params['courseid']);",
          "1279:         }",
          "1281:         self::validate_context($context);",
          "1283:         return [",
          "1284:             'canmanageentries' => has_capability('moodle/calendar:manageentries', $context),",
          "1285:             'canmanageownentries' => has_capability('moodle/calendar:manageownentries', $context),",
          "1286:             'canmanagegroupentries' => has_capability('moodle/calendar:managegroupentries', $context),",
          "1287:             'warnings' => [],",
          "1288:         ];",
          "1289:     }",
          "1297:     public static function  get_calendar_access_information_returns() {",
          "1299:         return new external_single_structure(",
          "1300:             [",
          "1301:                 'canmanageentries' => new external_value(PARAM_BOOL, 'Whether the user can manage entries.'),",
          "1302:                 'canmanageownentries' => new external_value(PARAM_BOOL, 'Whether the user can manage its own entries.'),",
          "1303:                 'canmanagegroupentries' => new external_value(PARAM_BOOL, 'Whether the user can manage group entries.'),",
          "1304:                 'warnings' => new external_warnings(),",
          "1305:             ]",
          "1306:         );",
          "1307:     }",
          "1315:     public static function get_allowed_event_types_parameters() {",
          "1316:         return new external_function_parameters(",
          "1317:             [",
          "1318:                 'courseid' => new external_value(PARAM_INT, 'Course to check, empty for site.', VALUE_DEFAULT, 0),",
          "1319:             ]",
          "1320:         );",
          "1321:     }",
          "1331:     public static function get_allowed_event_types($courseid = 0) {",
          "1333:         $params = self::validate_parameters(self::get_allowed_event_types_parameters(), ['courseid' => $courseid]);",
          "1335:         if (empty($params['courseid']) || $params['courseid'] == SITEID) {",
          "1336:             $context = \\context_system::instance();",
          "1337:         } else {",
          "1338:             $context = \\context_course::instance($params['courseid']);",
          "1339:         }",
          "1341:         self::validate_context($context);",
          "1343:         $allowedeventtypes = array_filter(calendar_get_allowed_event_types($params['courseid']));",
          "1345:         return [",
          "1346:             'allowedeventtypes' => array_keys($allowedeventtypes),",
          "1347:             'warnings' => [],",
          "1348:         ];",
          "1349:     }",
          "1357:     public static function  get_allowed_event_types_returns() {",
          "1359:         return new external_single_structure(",
          "1360:             [",
          "1361:                 'allowedeventtypes' => new external_multiple_structure(",
          "1362:                     new external_value(PARAM_NOTAGS, 'Allowed event types to be created in the given course.')",
          "1363:                 ),",
          "1364:                 'warnings' => new external_warnings(),",
          "1365:             ]",
          "1366:         );",
          "1367:     }",
          "",
          "---------------"
        ],
        "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php": [
          "File: calendar/tests/externallib_test.php -> calendar/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2552:         $this->assertCount(0, $data['events']);",
          "2553:         $this->assertEquals('nopermissions', $data['warnings'][0]['warningcode']);",
          "2554:     }",
          "2555: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2559:     public function test_get_calendar_access_information_for_admins() {",
          "2560:         global $CFG;",
          "2561:         $this->resetAfterTest(true);",
          "2562:         $this->setAdminUser();",
          "2564:         $CFG->calendar_adminseesall = 1;",
          "2566:         $data = external_api::clean_returnvalue(",
          "2567:             core_calendar_external::get_calendar_access_information_returns(),",
          "2568:             core_calendar_external::get_calendar_access_information()",
          "2569:         );",
          "2570:         $this->assertTrue($data['canmanageownentries']);",
          "2571:         $this->assertTrue($data['canmanagegroupentries']);",
          "2572:         $this->assertTrue($data['canmanageentries']);",
          "2573:     }",
          "2578:     public function test_get_calendar_access_information_for_authenticated_users() {",
          "2579:         $this->resetAfterTest(true);",
          "2580:         $this->setUser($this->getDataGenerator()->create_user());",
          "2582:         $data = external_api::clean_returnvalue(",
          "2583:             core_calendar_external::get_calendar_access_information_returns(),",
          "2584:             core_calendar_external::get_calendar_access_information()",
          "2585:         );",
          "2586:         $this->assertTrue($data['canmanageownentries']);",
          "2587:         $this->assertFalse($data['canmanagegroupentries']);",
          "2588:         $this->assertFalse($data['canmanageentries']);",
          "2589:     }",
          "2594:     public function test_get_calendar_access_information_for_student_users() {",
          "2595:         global $DB;",
          "2596:         $this->resetAfterTest(true);",
          "2598:         $user = $this->getDataGenerator()->create_user();",
          "2599:         $course = $this->getDataGenerator()->create_course();",
          "2600:         $role = $DB->get_record('role', array('shortname' => 'student'));",
          "2601:         $this->getDataGenerator()->enrol_user($user->id, $course->id, $role->id);",
          "2603:         $this->setUser($user);",
          "2605:         $data = external_api::clean_returnvalue(",
          "2606:             core_calendar_external::get_calendar_access_information_returns(),",
          "2607:             core_calendar_external::get_calendar_access_information($course->id)",
          "2608:         );",
          "2609:         $this->assertTrue($data['canmanageownentries']);",
          "2610:         $this->assertFalse($data['canmanagegroupentries']);",
          "2611:         $this->assertFalse($data['canmanageentries']);",
          "2612:     }",
          "2617:     public function test_get_calendar_access_information_for_teacher_users() {",
          "2618:         global $DB;",
          "2619:         $this->resetAfterTest(true);",
          "2621:         $user = $this->getDataGenerator()->create_user();",
          "2622:         $course = $this->getDataGenerator()->create_course(['groupmode' => 1]);",
          "2623:         $role = $DB->get_record('role', array('shortname' => 'editingteacher'));",
          "2624:         $this->getDataGenerator()->enrol_user($user->id, $course->id, $role->id);",
          "2625:         $this->getDataGenerator()->create_group(['courseid' => $course->id]);",
          "2627:         $this->setUser($user);",
          "2629:         $data = external_api::clean_returnvalue(",
          "2630:             core_calendar_external::get_calendar_access_information_returns(),",
          "2631:             core_calendar_external::get_calendar_access_information($course->id)",
          "2632:         );",
          "2633:         $this->assertTrue($data['canmanageownentries']);",
          "2634:         $this->assertTrue($data['canmanagegroupentries']);",
          "2635:         $this->assertTrue($data['canmanageentries']);",
          "2636:     }",
          "2641:     public function test_get_allowed_event_types_for_admins() {",
          "2642:         global $CFG;",
          "2643:         $this->resetAfterTest(true);",
          "2644:         $this->setAdminUser();",
          "2645:         $CFG->calendar_adminseesall = 1;",
          "2646:         $data = external_api::clean_returnvalue(",
          "2647:             core_calendar_external::get_allowed_event_types_returns(),",
          "2648:             core_calendar_external::get_allowed_event_types()",
          "2649:         );",
          "2650:         $this->assertEquals(['user', 'site', 'course', 'category'], $data['allowedeventtypes']);",
          "2651:     }",
          "2655:     public function test_get_allowed_event_types_for_authenticated_users() {",
          "2656:         $this->resetAfterTest(true);",
          "2657:         $this->setUser($this->getDataGenerator()->create_user());",
          "2658:         $data = external_api::clean_returnvalue(",
          "2659:             core_calendar_external::get_allowed_event_types_returns(),",
          "2660:             core_calendar_external::get_allowed_event_types()",
          "2661:         );",
          "2662:         $this->assertEquals(['user'], $data['allowedeventtypes']);",
          "2663:     }",
          "2667:     public function test_get_allowed_event_types_for_student_users() {",
          "2668:         global $DB;",
          "2669:         $this->resetAfterTest(true);",
          "2670:         $user = $this->getDataGenerator()->create_user();",
          "2671:         $course = $this->getDataGenerator()->create_course();",
          "2672:         $role = $DB->get_record('role', array('shortname' => 'student'));",
          "2673:         $this->getDataGenerator()->enrol_user($user->id, $course->id, $role->id);",
          "2674:         $this->setUser($user);",
          "2675:         $data = external_api::clean_returnvalue(",
          "2676:             core_calendar_external::get_allowed_event_types_returns(),",
          "2677:             core_calendar_external::get_allowed_event_types($course->id)",
          "2678:         );",
          "2679:         $this->assertEquals(['user'], $data['allowedeventtypes']);",
          "2680:     }",
          "2684:     public function test_get_allowed_event_types_for_teacher_users() {",
          "2685:         global $DB;",
          "2686:         $this->resetAfterTest(true);",
          "2687:         $user = $this->getDataGenerator()->create_user();",
          "2688:         $course = $this->getDataGenerator()->create_course(['groupmode' => 1]);",
          "2689:         $role = $DB->get_record('role', array('shortname' => 'editingteacher'));",
          "2690:         $this->getDataGenerator()->enrol_user($user->id, $course->id, $role->id);",
          "2691:         $this->getDataGenerator()->create_group(['courseid' => $course->id]);",
          "2692:         $this->setUser($user);",
          "2693:         $data = external_api::clean_returnvalue(",
          "2694:             core_calendar_external::get_allowed_event_types_returns(),",
          "2695:             core_calendar_external::get_allowed_event_types($course->id)",
          "2696:         );",
          "2697:         $this->assertEquals(['user', 'course', 'group'], $data['allowedeventtypes']);",
          "2698:     }",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:         'type' => 'write',",
          "166:         'capabilities' => 'moodle/calendar:manageentries, moodle/calendar:manageownentries, moodle/calendar:managegroupentries',",
          "167:         'ajax' => true,",
          "168:     ),",
          "169:     'core_calendar_create_calendar_events' => array(",
          "170:         'classname' => 'core_calendar_external',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242:         'type' => 'write',",
          "243:         'capabilities' => 'moodle/calendar:manageentries, moodle/calendar:manageownentries, moodle/calendar:managegroupentries',",
          "244:         'ajax' => true,",
          "245:     ),",
          "246:     'core_cohort_add_cohort_members' => array(",
          "247:         'classname' => 'core_cohort_external',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "247:     ),",
          "248:     'core_calendar_get_calendar_access_information' => array(",
          "249:         'classname' => 'core_calendar_external',",
          "250:         'methodname' => 'get_calendar_access_information',",
          "251:         'description' => 'Convenience function to retrieve some permissions/access information for the given course calendar.',",
          "252:         'classpath' => 'calendar/externallib.php',",
          "253:         'type' => 'read',",
          "254:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "255:     ),",
          "256:     'core_calendar_get_allowed_event_types' => array(",
          "257:         'classname' => 'core_calendar_external',",
          "258:         'methodname' => 'get_allowed_event_types',",
          "259:         'description' => 'Get the type of events a user can create in the given course.',",
          "260:         'classpath' => 'calendar/externallib.php',",
          "261:         'type' => 'read',",
          "262:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019041800.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019041800.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "414eca89239d275807f155837e10200f9e81322a",
      "candidate_info": {
        "commit_hash": "414eca89239d275807f155837e10200f9e81322a",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/414eca89239d275807f155837e10200f9e81322a",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.8dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '38';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019073100.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev (Build: 20190725)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019080100.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev (Build: 20190801)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    }
  ]
}