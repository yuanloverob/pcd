{
  "cve_id": "CVE-2024-35230",
  "cve_desc": "GeoServer is an open source software server written in Java that allows users to share and edit geospatial data. In affected versions the welcome and about page includes version and revision information about the software in use (including library and components used). This information is sensitive from a security point of view because it allows software used by the server to be easily identified. This issue has been patched in version 2.26.0 and all users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "geoserver/geoserver",
  "patch_hash": "8cd1590a604a10875de67b04995f1952f631f920",
  "patch_info": {
    "commit_hash": "8cd1590a604a10875de67b04995f1952f631f920",
    "repo": "geoserver/geoserver",
    "commit_url": "https://github.com/geoserver/geoserver/commit/8cd1590a604a10875de67b04995f1952f631f920",
    "files": [
      "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html",
      "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java",
      "src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java"
    ],
    "message": "hide private info on about page",
    "before_after_code_files": [
      "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html",
      "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java",
      "src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java||src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java"
    ]
  },
  "patch_diff": {
    "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html": [
      "File: src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html -> src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html",
      "--- Hunk 1 ---",
      "[Context before]",
      "2:   <body>",
      "3:     <wicket:extend>",
      "4:       <form>",
      "36:        <fieldset>",
      "37:            <legend><wicket:message key=\"moreInformation\">More Information</wicket:message></legend>",
      "38:            <p>",
      "",
      "[Removed Lines]",
      "5:        <fieldset class=\"mt-3\">",
      "6:          <legend>",
      "7:            <wicket:message key=\"buildInformation\">Build Information</wicket:message>",
      "8:          </legend>",
      "9:          <ul>",
      "10:            <li>",
      "11:              <label for=\"version\"><wicket:message key=\"geoserverVersion\">Version</wicket:message></label>",
      "12:              <span id=\"version\"><wicket:message key=\"version\"></wicket:message></span>",
      "13:            </li>",
      "14:            <li>",
      "15:              <label for=\"buildRevision\"><wicket:message key=\"gitRevision\">Git Revision</wicket:message></label>",
      "16:              <span id=\"buildRevision\"><wicket:message key=\"build.revision\"></wicket:message></span>",
      "17:            </li>",
      "18:            <li>",
      "19:              <label for=\"buildDate\"><wicket:message key=\"buildDate\">Build Date</wicket:message></label>",
      "20:              <span id=\"buildDate\"><wicket:message key=\"build.date\"></wicket:message></span>",
      "21:            </li>",
      "22:            <li>",
      "23:              <label for=\"geotoolsInfo\"><wicket:message key=\"geotoolsVersion\">GeoTools Version</wicket:message></label>",
      "24:              <span id=\"geotoolsInfo\">",
      "25:                <span wicket:id=\"geotoolsVersion\"></span> (rev <span wicket:id=\"geotoolsRevision\"></span>)",
      "26:              </span>",
      "27:            </li>",
      "28:            <li>",
      "29:              <label for=\"geowebcacheInfo\"><wicket:message key=\"geowebcacheVersion\">GeoWebCache Version</wicket:message></label>",
      "30:              <span id=\"geotoolsInfo\">",
      "31:                <span wicket:id=\"geowebcacheVersion\"></span> (rev <span wicket:id=\"geowebcacheRevision\"></span>)",
      "32:              </span>",
      "33:            </li>",
      "34:          </ul>",
      "35:        </fieldset>",
      "",
      "[Added Lines]",
      "5:           <wicket:container wicket:id=\"privateInfo\">",
      "6:                <fieldset  class=\"mt-3\">",
      "7:                  <legend>",
      "8:                    <wicket:message key=\"buildInformation\">Build Information</wicket:message>",
      "9:                  </legend>",
      "10:                  <ul>",
      "11:                    <li>",
      "12:                      <label for=\"version\"><wicket:message key=\"geoserverVersion\">Version</wicket:message></label>",
      "13:                      <span id=\"version\"><wicket:message key=\"version\"></wicket:message></span>",
      "14:                    </li>",
      "15:                    <li>",
      "16:                      <label for=\"buildRevision\"><wicket:message key=\"gitRevision\">Git Revision</wicket:message></label>",
      "17:                      <span id=\"buildRevision\"><wicket:message key=\"build.revision\"></wicket:message></span>",
      "18:                    </li>",
      "19:                    <li>",
      "20:                      <label for=\"buildDate\"><wicket:message key=\"buildDate\">Build Date</wicket:message></label>",
      "21:                      <span id=\"buildDate\"><wicket:message key=\"build.date\"></wicket:message></span>",
      "22:                    </li>",
      "23:                    <li>",
      "24:                      <label for=\"geotoolsInfo\"><wicket:message key=\"geotoolsVersion\">GeoTools Version</wicket:message></label>",
      "25:                      <span id=\"geotoolsInfo\">",
      "26:                        <span wicket:id=\"geotoolsVersion\"></span> (rev <span wicket:id=\"geotoolsRevision\"></span>)",
      "27:                      </span>",
      "28:                    </li>",
      "29:                    <li>",
      "30:                      <label for=\"geowebcacheInfo\"><wicket:message key=\"geowebcacheVersion\">GeoWebCache Version</wicket:message></label>",
      "31:                      <span id=\"geotoolsInfo\">",
      "32:                        <span wicket:id=\"geowebcacheVersion\"></span> (rev <span wicket:id=\"geowebcacheRevision\"></span>)",
      "33:                      </span>",
      "34:                    </li>",
      "35:                  </ul>",
      "36:                </fieldset>",
      "37:           </wicket:container>",
      "",
      "---------------"
    ],
    "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java": [
      "File: src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java -> src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: package org.geoserver.web;",
      "8: import java.util.logging.Level;",
      "9: import org.apache.wicket.markup.html.basic.Label;",
      "10: import org.geotools.util.factory.GeoTools;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9: import org.apache.wicket.markup.html.WebMarkupContainer;",
      "11: import org.geoserver.platform.GeoServerExtensions;",
      "12: import org.geoserver.security.GeoServerSecurityManager;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "17: public class AboutGeoServerPage extends GeoServerBasePage {",
      "19:     public AboutGeoServerPage() {",
      "24:     }",
      "26:     public String getGwcVersion() {",
      "",
      "[Removed Lines]",
      "20:         add(new Label(\"geotoolsVersion\", GeoTools.getVersion().toString()));",
      "21:         add(new Label(\"geotoolsRevision\", GeoTools.getBuildRevision()));",
      "22:         add(new Label(\"geowebcacheVersion\", getGwcVersion()));",
      "23:         add(new Label(\"geowebcacheRevision\", getGwcRevision()));",
      "",
      "[Added Lines]",
      "22:     GeoServerSecurityManager getManager() {",
      "23:         return GeoServerExtensions.bean(GeoServerSecurityManager.class);",
      "24:     }",
      "28:         var privateInfo = new WebMarkupContainer(\"privateInfo\");",
      "29:         add(privateInfo);",
      "31:         var isAdmin = getManager().checkAuthenticationForAdminRole();",
      "32:         if (isAdmin) {",
      "33:             privateInfo.add(new Label(\"geotoolsVersion\", GeoTools.getVersion().toString()));",
      "34:             privateInfo.add(new Label(\"geotoolsRevision\", GeoTools.getBuildRevision()));",
      "35:             privateInfo.add(new Label(\"geowebcacheVersion\", getGwcVersion()));",
      "36:             privateInfo.add(new Label(\"geowebcacheRevision\", getGwcRevision()));",
      "37:         } else {",
      "38:             add(new Label(\"geotoolsVersion\", GeoTools.getVersion().toString()));",
      "39:             add(new Label(\"geotoolsRevision\", GeoTools.getBuildRevision()));",
      "40:             add(new Label(\"geowebcacheVersion\", getGwcVersion()));",
      "41:             add(new Label(\"geowebcacheRevision\", getGwcRevision()));",
      "42:             privateInfo.setVisible(false);",
      "43:         }",
      "",
      "---------------"
    ],
    "src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java||src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java": [
      "File: src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java -> src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: import static org.hamcrest.CoreMatchers.instanceOf;",
      "8: import static org.hamcrest.MatcherAssert.assertThat;",
      "9: import static org.junit.Assert.assertEquals;",
      "11: import org.apache.wicket.util.tester.TagTester;",
      "12: import org.junit.Test;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: import static org.junit.Assert.assertFalse;",
      "11: import static org.junit.Assert.assertTrue;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "26:                 \"http://localhost/context/j_spring_security_check\",",
      "27:                 tagTester.getAttribute(\"action\"));",
      "28:     }",
      "29: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37:     @Test",
      "38:     public void testHideSensitiveInfo() throws Exception {",
      "39:         logout();",
      "40:         tester.executeUrl(\"./wicket/bookmarkable/org.geoserver.web.AboutGeoServerPage\");",
      "42:         String responseTxt = tester.getLastResponse().getDocument();",
      "43:         assertFalse(responseTxt.contains(\"geotoolsInfo\"));",
      "45:         login();",
      "46:         tester.executeUrl(\"./wicket/bookmarkable/org.geoserver.web.AboutGeoServerPage\");",
      "48:         responseTxt = tester.getLastResponse().getDocument();",
      "49:         assertTrue(responseTxt.contains(\"geotoolsInfo\"));",
      "50:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "651b4a3f9ff730b98cdcf2ed3515e32ff0247ba2",
      "candidate_info": {
        "commit_hash": "651b4a3f9ff730b98cdcf2ed3515e32ff0247ba2",
        "repo": "geoserver/geoserver",
        "commit_url": "https://github.com/geoserver/geoserver/commit/651b4a3f9ff730b98cdcf2ed3515e32ff0247ba2",
        "files": [
          "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java",
          "src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.html",
          "src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.java",
          "src/web/core/src/main/java/org/geoserver/web/GeoServerHomePage.java"
        ],
        "message": "andrea and jody feedback",
        "before_after_code_files": [
          "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java",
          "src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.html||src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.html",
          "src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.java||src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.java",
          "src/web/core/src/main/java/org/geoserver/web/GeoServerHomePage.java||src/web/core/src/main/java/org/geoserver/web/GeoServerHomePage.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java"
          ],
          "candidate": [
            "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java"
          ]
        }
      },
      "candidate_diff": {
        "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java": [
          "File: src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java -> src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import java.util.logging.Level;",
          "9: import org.apache.wicket.markup.html.WebMarkupContainer;",
          "10: import org.apache.wicket.markup.html.basic.Label;",
          "13: import org.geotools.util.factory.GeoTools;",
          "",
          "[Removed Lines]",
          "11: import org.geoserver.platform.GeoServerExtensions;",
          "12: import org.geoserver.security.GeoServerSecurityManager;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: public class AboutGeoServerPage extends GeoServerBasePage {",
          "26:     public AboutGeoServerPage() {",
          "28:         var privateInfo = new WebMarkupContainer(\"privateInfo\");",
          "29:         add(privateInfo);",
          "32:         if (isAdmin) {",
          "33:             privateInfo.add(new Label(\"geotoolsVersion\", GeoTools.getVersion().toString()));",
          "34:             privateInfo.add(new Label(\"geotoolsRevision\", GeoTools.getBuildRevision()));",
          "",
          "[Removed Lines]",
          "22:     GeoServerSecurityManager getManager() {",
          "23:         return GeoServerExtensions.bean(GeoServerSecurityManager.class);",
          "24:     }",
          "31:         var isAdmin = getManager().checkAuthenticationForAdminRole();",
          "",
          "[Added Lines]",
          "25:         var isAdmin = getSession().isAdmin();",
          "",
          "---------------"
        ],
        "src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.html||src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.html": [
          "File: src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.html -> src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: <body>",
          "32:   <div id=\"header\">",
          "33:     <div class=\"wrap\">",
          "35:       <div class=\"button-group selfclear\">",
          "36:        <span wicket:id=\"loginforms\">",
          "37:         <form class=\"d-inline-block\" wicket:id=\"loginform\" method=\"post\" action=\"../j_spring_security_check\">",
          "",
          "[Removed Lines]",
          "34:       <h2><a wicket:id=\"home\" class=\"pngfix\" href=\"#\"><span wicket:id=\"label\">GeoServer</span></a></h2>",
          "",
          "[Added Lines]",
          "34:       <h2><a wicket:id=\"home\" class=\"pngfix\" href=\"#\"></a></h2>",
          "",
          "---------------"
        ],
        "src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.java||src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.java": [
          "File: src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.java -> src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "265:         logoutForm.setVisible(!anonymous);",
          "273:         DeveloperToolbar devToolbar = new DeveloperToolbar(\"devButtons\");",
          "",
          "[Removed Lines]",
          "268:         add(",
          "269:                 new BookmarkablePageLink<>(\"home\", GeoServerHomePage.class)",
          "270:                         .add(new Label(\"label\", \"\")));",
          "",
          "[Added Lines]",
          "268:         add(new BookmarkablePageLink<>(\"home\", GeoServerHomePage.class));",
          "",
          "---------------"
        ],
        "src/web/core/src/main/java/org/geoserver/web/GeoServerHomePage.java||src/web/core/src/main/java/org/geoserver/web/GeoServerHomePage.java": [
          "File: src/web/core/src/main/java/org/geoserver/web/GeoServerHomePage.java -> src/web/core/src/main/java/org/geoserver/web/GeoServerHomePage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "643:     }",
          "645:     private Label footerMessage(ContactInfo contactInfo, Locale locale) {",
          "648:         boolean admin = getSession().isAdmin();",
          "649:         if (!admin) {",
          "650:             Label footerMessage = new Label(\"footerMessage\", \"\");",
          "651:             return footerMessage;",
          "652:         }",
          "654:         HashMap<String, String> params = new HashMap<>();",
          "655:         params.put(\"version\", version);",
          "",
          "[Removed Lines]",
          "646:         String version = String.valueOf(new ResourceModel(\"version\").getObject());",
          "",
          "[Added Lines]",
          "652:         String version = String.valueOf(new ResourceModel(\"version\").getObject());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64300603ef4681a621624fdd640026b5cdbdbd12",
      "candidate_info": {
        "commit_hash": "64300603ef4681a621624fdd640026b5cdbdbd12",
        "repo": "geoserver/geoserver",
        "commit_url": "https://github.com/geoserver/geoserver/commit/64300603ef4681a621624fdd640026b5cdbdbd12",
        "files": [
          "build/qa/pmd-ruleset.xml",
          "src/community/jms-cluster/activemqBroker/src/test/java/org/geoserver/web/Start.java",
          "src/extension/ogcapi/web-ogcapi/src/main/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProvider.java",
          "src/extension/ogcapi/web-ogcapi/src/test/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProviderTest.java",
          "src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilder.java",
          "src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilderPanel.java",
          "src/extension/wps/web-wps/src/test/java/org/geoserver/wps/web/WPSRequestBuilderTest.java",
          "src/platform/src/main/java/org/geoserver/platform/SystemEnvironmentStatus.java",
          "src/platform/src/main/java/org/geoserver/platform/SystemPropertyStatus.java",
          "src/platform/src/test/java/org/geoserver/platform/SystemEnvironmentTest.java",
          "src/platform/src/test/java/org/geoserver/platform/SystemPropertiesStatusTest.java",
          "src/release/installer/mac/console/src/main/java/org/geoserver/console/GeoServerConsole.java",
          "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java",
          "src/web/core/src/main/java/org/geoserver/web/ServicesPanel.java",
          "src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java",
          "src/web/demo/src/main/java/org/geoserver/web/demo/DemoRequestsPage.java",
          "src/web/demo/src/test/java/org/geoserver/web/demo/DemoRequestsPageTest.java",
          "src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilder.java",
          "src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilderPanel.java"
        ],
        "message": "[GEOS-11804] Disallow usage of var in GeoServer source code",
        "before_after_code_files": [
          "src/community/jms-cluster/activemqBroker/src/test/java/org/geoserver/web/Start.java||src/community/jms-cluster/activemqBroker/src/test/java/org/geoserver/web/Start.java",
          "src/extension/ogcapi/web-ogcapi/src/main/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProvider.java||src/extension/ogcapi/web-ogcapi/src/main/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProvider.java",
          "src/extension/ogcapi/web-ogcapi/src/test/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProviderTest.java||src/extension/ogcapi/web-ogcapi/src/test/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProviderTest.java",
          "src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilder.java||src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilder.java",
          "src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilderPanel.java||src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilderPanel.java",
          "src/extension/wps/web-wps/src/test/java/org/geoserver/wps/web/WPSRequestBuilderTest.java||src/extension/wps/web-wps/src/test/java/org/geoserver/wps/web/WPSRequestBuilderTest.java",
          "src/platform/src/main/java/org/geoserver/platform/SystemEnvironmentStatus.java||src/platform/src/main/java/org/geoserver/platform/SystemEnvironmentStatus.java",
          "src/platform/src/main/java/org/geoserver/platform/SystemPropertyStatus.java||src/platform/src/main/java/org/geoserver/platform/SystemPropertyStatus.java",
          "src/platform/src/test/java/org/geoserver/platform/SystemEnvironmentTest.java||src/platform/src/test/java/org/geoserver/platform/SystemEnvironmentTest.java",
          "src/platform/src/test/java/org/geoserver/platform/SystemPropertiesStatusTest.java||src/platform/src/test/java/org/geoserver/platform/SystemPropertiesStatusTest.java",
          "src/release/installer/mac/console/src/main/java/org/geoserver/console/GeoServerConsole.java||src/release/installer/mac/console/src/main/java/org/geoserver/console/GeoServerConsole.java",
          "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java",
          "src/web/core/src/main/java/org/geoserver/web/ServicesPanel.java||src/web/core/src/main/java/org/geoserver/web/ServicesPanel.java",
          "src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java||src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java",
          "src/web/demo/src/main/java/org/geoserver/web/demo/DemoRequestsPage.java||src/web/demo/src/main/java/org/geoserver/web/demo/DemoRequestsPage.java",
          "src/web/demo/src/test/java/org/geoserver/web/demo/DemoRequestsPageTest.java||src/web/demo/src/test/java/org/geoserver/web/demo/DemoRequestsPageTest.java",
          "src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilder.java||src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilder.java",
          "src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilderPanel.java||src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilderPanel.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java"
          ],
          "candidate": [
            "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java"
          ]
        }
      },
      "candidate_diff": {
        "src/community/jms-cluster/activemqBroker/src/test/java/org/geoserver/web/Start.java||src/community/jms-cluster/activemqBroker/src/test/java/org/geoserver/web/Start.java": [
          "File: src/community/jms-cluster/activemqBroker/src/test/java/org/geoserver/web/Start.java -> src/community/jms-cluster/activemqBroker/src/test/java/org/geoserver/web/Start.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:         if (props == null || !props.exists()) {",
          "112:             throw new IllegalArgumentException(\"Bad file name argument: \" + props);",
          "113:         }",
          "117:             prop.load(is);",
          "120:         }",
          "122:         return prop;",
          "",
          "[Removed Lines]",
          "114:         FileInputStream is = null;",
          "115:         try {",
          "116:             is = new FileInputStream(props);",
          "118:         } finally {",
          "119:             if (is != null) is.close();",
          "",
          "[Added Lines]",
          "114:         try (FileInputStream is = new FileInputStream(props)) {",
          "",
          "---------------"
        ],
        "src/extension/ogcapi/web-ogcapi/src/main/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProvider.java||src/extension/ogcapi/web-ogcapi/src/main/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProvider.java": [
          "File: src/extension/ogcapi/web-ogcapi/src/main/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProvider.java -> src/extension/ogcapi/web-ogcapi/src/main/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:         this.serviceName = serviceName;",
          "62:         this.specificServiceType = specificServiceType;",
          "63:         @SuppressWarnings(\"unchecked\")",
          "65:                 ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];",
          "66:         this.infoClass = infoClass;",
          "68:         @SuppressWarnings(\"unchecked\")",
          "70:                 ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[1];",
          "71:         this.serviceClass = serviceClass;",
          "72:     }",
          "",
          "[Removed Lines]",
          "64:         var infoClass = (Class<SERVICEINFOTYPE>)",
          "69:         var serviceClass = (Class<SERVICETYPE>)",
          "",
          "[Added Lines]",
          "64:         Class<SERVICEINFOTYPE> infoClass = (Class<SERVICEINFOTYPE>)",
          "69:         Class<SERVICETYPE> serviceClass = (Class<SERVICETYPE>)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:         InternationalString description = InternationalStringUtils.growable(",
          "132:                 info.getInternationalAbstract(), Strings.isEmpty(info.getAbstract()) ? null : info.getAbstract());",
          "135:                 serviceType,",
          "136:                 title,",
          "137:                 description,",
          "",
          "[Removed Lines]",
          "134:         var serviceDesc = new ServiceDescription(",
          "",
          "[Added Lines]",
          "134:         ServiceDescription serviceDesc = new ServiceDescription(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "182:             String customLink, WorkspaceInfo workspaceInfo, PublishedInfo layerInfo) {",
          "183:         if (workspaceInfo == null) return customLink;",
          "186:         customLink = customLink.replace(\"/ogc/\", \"/\" + wsName + \"/ogc/\");",
          "187:         if (layerInfo != null) {",
          "189:             customLink = customLink.replace(\"/ogc/\", \"/\" + layerName + \"/ogc/\");",
          "190:         }",
          "191:         return customLink;",
          "",
          "[Removed Lines]",
          "185:         var wsName = UriUtils.encodePath(workspaceInfo.getName(), \"UTF-8\");",
          "188:             var layerName = UriUtils.encodePath(layerInfo.getName(), \"UTF-8\");",
          "",
          "[Added Lines]",
          "185:         String wsName = UriUtils.encodePath(workspaceInfo.getName(), \"UTF-8\");",
          "188:             String layerName = UriUtils.encodePath(layerInfo.getName(), \"UTF-8\");",
          "",
          "---------------"
        ],
        "src/extension/ogcapi/web-ogcapi/src/test/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProviderTest.java||src/extension/ogcapi/web-ogcapi/src/test/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProviderTest.java": [
          "File: src/extension/ogcapi/web-ogcapi/src/test/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProviderTest.java -> src/extension/ogcapi/web-ogcapi/src/test/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import static org.junit.Assert.assertTrue;",
          "10: import java.util.Arrays;",
          "11: import org.geoserver.data.test.SystemTestData;",
          "12: import org.geoserver.platform.GeoServerExtensionsHelper;",
          "13: import org.geoserver.test.GeoServerSystemTestSupport;",
          "14: import org.geoserver.web.ogcapi.provider.TestCaseInfo;",
          "15: import org.geoserver.web.ogcapi.provider.TestCaseInfoImpl;",
          "16: import org.geoserver.web.ogcapi.provider.TestCaseOgcApiServiceDescriptionProvider;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: import java.util.List;",
          "12: import org.geoserver.catalog.LayerInfo;",
          "13: import org.geoserver.catalog.WorkspaceInfo;",
          "17: import org.geoserver.web.ServiceDescription;",
          "18: import org.geoserver.web.ServiceLinkDescription;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:     @Test",
          "27:     public void testBasic() {",
          "29:         assertEquals(\"TestCaseServiceType\", provider.getServiceType());",
          "30:         assertEquals(\"OGCAPI-TestCase\", provider.getServiceName());",
          "31:         assertEquals(\"TestCase\", provider.getSpecificServiceType());",
          "",
          "[Removed Lines]",
          "28:         var provider = new TestCaseOgcApiServiceDescriptionProvider(this.getGeoServer());",
          "",
          "[Added Lines]",
          "33:         TestCaseOgcApiServiceDescriptionProvider provider =",
          "34:                 new TestCaseOgcApiServiceDescriptionProvider(this.getGeoServer());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:     @Test",
          "42:     public void testURLMangler() {",
          "47:         assertEquals(link, mangled); // no change",
          "51:         mangled = provider.ogcApiCustomCapabilitiesLinkMangler(link, wsInfo, null);",
          "52:         assertEquals(\"../cite/ogc/features/v1\", mangled);",
          "56:         mangled = provider.ogcApiCustomCapabilitiesLinkMangler(link, wsInfo, layerInfo);",
          "57:         assertEquals(\"../cite/DividedRoutes/ogc/features/v1\", mangled);",
          "",
          "[Removed Lines]",
          "43:         var provider = new TestCaseOgcApiServiceDescriptionProvider(this.getGeoServer());",
          "44:         var link = \"../ogc/features/v1\";",
          "46:         var mangled = provider.ogcApiCustomCapabilitiesLinkMangler(link, null, null);",
          "49:         var wsInfo = getCatalog().getWorkspaceByName(\"cite\");",
          "54:         var layerInfo = getCatalog().getLayerByName(\"DividedRoutes\");",
          "",
          "[Added Lines]",
          "49:         TestCaseOgcApiServiceDescriptionProvider provider =",
          "50:                 new TestCaseOgcApiServiceDescriptionProvider(this.getGeoServer());",
          "51:         String link = \"../ogc/features/v1\";",
          "53:         String mangled = provider.ogcApiCustomCapabilitiesLinkMangler(link, null, null);",
          "56:         WorkspaceInfo wsInfo = getCatalog().getWorkspaceByName(\"cite\");",
          "61:         LayerInfo layerInfo = getCatalog().getLayerByName(\"DividedRoutes\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:     @Test",
          "78:     public void testProvider() {",
          "82:         assertEquals(1, descriptions.size());",
          "83:         assertEquals(\"TestCaseServiceType\", descriptions.get(0).getServiceType());",
          "84:         assertTrue(descriptions.get(0).getDescriptionPriority() < 100);",
          "",
          "[Removed Lines]",
          "79:         var provider = new TestCaseOgcApiServiceDescriptionProvider(this.getGeoServer());",
          "81:         var descriptions = provider.getServices(null, null);",
          "",
          "[Added Lines]",
          "86:         TestCaseOgcApiServiceDescriptionProvider provider =",
          "87:                 new TestCaseOgcApiServiceDescriptionProvider(this.getGeoServer());",
          "89:         List<ServiceDescription> descriptions = provider.getServices(null, null);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "89:     @Test",
          "90:     public void testLinks() {",
          "94:         assertEquals(1, links.size());",
          "95:         assertEquals(\"TestCaseServiceType\", links.get(0).getServiceType());",
          "96:         assertEquals(\"TestCase\", links.get(0).getSpecificServiceType());",
          "97:         assertEquals(\"OGCAPI-TestCase\", links.get(0).getProtocol());",
          "98:         assertEquals(\"../ogc/TestCaseService/v1\", links.get(0).getLink());",
          "102:         links = provider.getServiceLinks(ws, null);",
          "103:         assertEquals(1, links.size());",
          "",
          "[Removed Lines]",
          "91:         var provider = new TestCaseOgcApiServiceDescriptionProvider(this.getGeoServer());",
          "93:         var links = provider.getServiceLinks(null, null);",
          "100:         var ws = getCatalog().getWorkspaceByName(\"cite\");",
          "",
          "[Added Lines]",
          "99:         TestCaseOgcApiServiceDescriptionProvider provider =",
          "100:                 new TestCaseOgcApiServiceDescriptionProvider(this.getGeoServer());",
          "102:         List<ServiceLinkDescription> links = provider.getServiceLinks(null, null);",
          "109:         WorkspaceInfo ws = getCatalog().getWorkspaceByName(\"cite\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "106:         assertEquals(\"OGCAPI-TestCase\", links.get(0).getProtocol());",
          "107:         assertEquals(\"../cite/ogc/TestCaseService/v1\", links.get(0).getLink());",
          "111:         links = provider.getServiceLinks(ws, layer);",
          "112:         assertEquals(1, links.size());",
          "",
          "[Removed Lines]",
          "109:         var layer = getCatalog().getLayerByName(\"DividedRoutes\");",
          "",
          "[Added Lines]",
          "118:         LayerInfo layer = getCatalog().getLayerByName(\"DividedRoutes\");",
          "",
          "---------------"
        ],
        "src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilder.java||src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilder.java": [
          "File: src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilder.java -> src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:         Form form = new Form<>(\"form\");",
          "66:         add(form);",
          "69:         form.setDefaultModel(model);",
          "71:         xml = new TextField<>(\"xml\", new PropertyModel<>(model, \"xml\"));",
          "",
          "[Removed Lines]",
          "68:         var model = new Model<>(new WPSRequestModel());",
          "",
          "[Added Lines]",
          "68:         Model<WPSRequestModel> model = new Model<>(new WPSRequestModel());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:             @Override",
          "89:             protected void onSubmit(AjaxRequestTarget target) {",
          "90:                 try {",
          "92:                     xml.setModelObject(xmlText);",
          "93:                     target.add(xml);",
          "94:                 } catch (Exception e) {",
          "",
          "[Removed Lines]",
          "91:                     var xmlText = getRequestXML();",
          "",
          "[Added Lines]",
          "91:                     String xmlText = getRequestXML();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:                         \"ows\",",
          "117:                         Collections.singletonMap(\"strict\", \"true\"),",
          "118:                         URLType.SERVICE);",
          "121:                 PageParameters parameters = new PageParameters();",
          "122:                 parameters.add(\"url\", url);",
          "",
          "[Removed Lines]",
          "119:                 var xml = getRequestXML();",
          "",
          "[Added Lines]",
          "119:                 String xml = getRequestXML();",
          "",
          "---------------"
        ],
        "src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilderPanel.java||src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilderPanel.java": [
          "File: src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilderPanel.java -> src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilderPanel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:                 processChoice.processInput();",
          "177:                 if (execute.processName != null) {",
          "181:                     xml.setModelObject(xmlText);",
          "182:                     target.add(xml);",
          "183:                     target.appendJavaScript(\"executeWPS()\");",
          "",
          "[Removed Lines]",
          "179:                     var xmlText = getDescribeXML(execute.processName);",
          "180:                     var xml = (TextField) form.get(\"xml\");",
          "",
          "[Added Lines]",
          "179:                     String xmlText = getDescribeXML(execute.processName);",
          "180:                     TextField xml = (TextField) form.get(\"xml\");",
          "",
          "---------------"
        ],
        "src/extension/wps/web-wps/src/test/java/org/geoserver/wps/web/WPSRequestBuilderTest.java||src/extension/wps/web-wps/src/test/java/org/geoserver/wps/web/WPSRequestBuilderTest.java": [
          "File: src/extension/wps/web-wps/src/test/java/org/geoserver/wps/web/WPSRequestBuilderTest.java -> src/extension/wps/web-wps/src/test/java/org/geoserver/wps/web/WPSRequestBuilderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:         tester.clickLink(\"form:execute\", true);",
          "108:         assertEquals(\"http://localhost/context/ows?strict=true\", model.getRequestUrl());",
          "109:         assertTrue(model.getRequestBody().contains(\"wps:Execute\"));",
          "",
          "[Removed Lines]",
          "106:         var model = (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "[Added Lines]",
          "106:         DemoRequest model =",
          "107:                 (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "---------------"
        ],
        "src/platform/src/main/java/org/geoserver/platform/SystemEnvironmentStatus.java||src/platform/src/main/java/org/geoserver/platform/SystemEnvironmentStatus.java": [
          "File: src/platform/src/main/java/org/geoserver/platform/SystemEnvironmentStatus.java -> src/platform/src/main/java/org/geoserver/platform/SystemEnvironmentStatus.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:     @Override",
          "85:     public Optional<String> getMessage() {",
          "86:         if (!isShow()) {",
          "88:                     \"Environment variables hidden for security reasons.  Set the environment variable '%s' to 'true' to see them.\",",
          "89:                     SystemEnvironmentStatusEnabledEnvironmentVar);",
          "90:             return Optional.of(message);",
          "",
          "[Removed Lines]",
          "87:             var message = String.format(",
          "",
          "[Added Lines]",
          "87:             String message = String.format(",
          "",
          "---------------"
        ],
        "src/platform/src/main/java/org/geoserver/platform/SystemPropertyStatus.java||src/platform/src/main/java/org/geoserver/platform/SystemPropertyStatus.java": [
          "File: src/platform/src/main/java/org/geoserver/platform/SystemPropertyStatus.java -> src/platform/src/main/java/org/geoserver/platform/SystemPropertyStatus.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:     @Override",
          "83:     public Optional<String> getMessage() {",
          "84:         if (!isShow()) {",
          "86:                     \"Java system properties hidden for security reasons.  Set the environment variable '%s' to 'true' to see them.\",",
          "87:                     SystemPropertyStatusEnabledEnvironmentVar);",
          "88:             return Optional.of(message);",
          "",
          "[Removed Lines]",
          "85:             var message = String.format(",
          "",
          "[Added Lines]",
          "85:             String message = String.format(",
          "",
          "---------------"
        ],
        "src/platform/src/test/java/org/geoserver/platform/SystemEnvironmentTest.java||src/platform/src/test/java/org/geoserver/platform/SystemEnvironmentTest.java": [
          "File: src/platform/src/test/java/org/geoserver/platform/SystemEnvironmentTest.java -> src/platform/src/test/java/org/geoserver/platform/SystemEnvironmentTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import java.util.ArrayList;",
          "12: import java.util.HashMap;",
          "13: import java.util.Map;",
          "14: import java.util.logging.Logger;",
          "15: import org.easymock.EasyMock;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     @Test",
          "46:     public void testEnabled() {",
          "",
          "[Removed Lines]",
          "47:         final var VALUE = new ArrayList<String>();",
          "",
          "[Added Lines]",
          "48:         final List<String> VALUE = new ArrayList<>();",
          "",
          "---------------"
        ],
        "src/platform/src/test/java/org/geoserver/platform/SystemPropertiesStatusTest.java||src/platform/src/test/java/org/geoserver/platform/SystemPropertiesStatusTest.java": [
          "File: src/platform/src/test/java/org/geoserver/platform/SystemPropertiesStatusTest.java -> src/platform/src/test/java/org/geoserver/platform/SystemPropertiesStatusTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import static org.junit.Assert.assertTrue;",
          "11: import java.util.ArrayList;",
          "12: import org.junit.Test;",
          "14: public class SystemPropertiesStatusTest {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     @Test",
          "38:     public void testEnabled() {",
          "",
          "[Removed Lines]",
          "39:         final var VALUE = new ArrayList<String>();",
          "",
          "[Added Lines]",
          "40:         List<String> VALUE = new ArrayList<>();",
          "",
          "---------------"
        ],
        "src/release/installer/mac/console/src/main/java/org/geoserver/console/GeoServerConsole.java||src/release/installer/mac/console/src/main/java/org/geoserver/console/GeoServerConsole.java": [
          "File: src/release/installer/mac/console/src/main/java/org/geoserver/console/GeoServerConsole.java -> src/release/installer/mac/console/src/main/java/org/geoserver/console/GeoServerConsole.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:         public boolean isStarted() throws Exception {",
          "128:                 return s.isConnected();",
          "129:             } catch (ConnectException e) {",
          "130:                 return false;",
          "133:             }",
          "134:         }",
          "",
          "[Removed Lines]",
          "125:             Socket s = null;",
          "126:             try {",
          "127:                 s = new Socket(InetAddress.getLocalHost(), 8080);",
          "131:             } finally {",
          "132:                 if (s != null) s.close();",
          "",
          "[Added Lines]",
          "125:             try (Socket s = new Socket(InetAddress.getLocalHost(), 8080)) {",
          "",
          "---------------"
        ],
        "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java": [
          "File: src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java -> src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     public AboutGeoServerPage() {",
          "23:         add(privateInfo);",
          "26:         if (isAdmin) {",
          "27:             privateInfo.add(new Label(\"geotoolsVersion\", GeoTools.getVersion().toString()));",
          "28:             privateInfo.add(new Label(\"geotoolsRevision\", GeoTools.getBuildRevision()));",
          "",
          "[Removed Lines]",
          "22:         var privateInfo = new WebMarkupContainer(\"privateInfo\");",
          "25:         var isAdmin = getSession().isAdmin();",
          "",
          "[Added Lines]",
          "22:         WebMarkupContainer privateInfo = new WebMarkupContainer(\"privateInfo\");",
          "25:         boolean isAdmin = getSession().isAdmin();",
          "",
          "---------------"
        ],
        "src/web/core/src/main/java/org/geoserver/web/ServicesPanel.java||src/web/core/src/main/java/org/geoserver/web/ServicesPanel.java": [
          "File: src/web/core/src/main/java/org/geoserver/web/ServicesPanel.java -> src/web/core/src/main/java/org/geoserver/web/ServicesPanel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:             String serviceName = service.getServiceType();",
          "106:             if (serviceMap.containsKey(serviceName)) {",
          "109:                 if (service.getDescriptionPriority() > otherServiceDescription.getDescriptionPriority()) {",
          "110:                     serviceMap.put(serviceName, service);",
          "111:                 }",
          "",
          "[Removed Lines]",
          "108:                 var otherServiceDescription = serviceMap.get(serviceName);",
          "",
          "[Added Lines]",
          "108:                 ServiceDescription otherServiceDescription = serviceMap.get(serviceName);",
          "",
          "---------------"
        ],
        "src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java||src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java": [
          "File: src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java -> src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:         logout();",
          "290:         tester.startPage(GeoServerHomePage.class);",
          "294:         String responseTxt = tester.getLastResponse().getDocument();",
          "295:         assertFalse(responseTxt.contains(version));",
          "",
          "[Removed Lines]",
          "292:         var version = new StringResourceModel(\"version\", null, null).getString();",
          "",
          "[Added Lines]",
          "292:         String version = new StringResourceModel(\"version\", null, null).getString();",
          "",
          "---------------"
        ],
        "src/web/demo/src/main/java/org/geoserver/web/demo/DemoRequestsPage.java||src/web/demo/src/main/java/org/geoserver/web/demo/DemoRequestsPage.java": [
          "File: src/web/demo/src/main/java/org/geoserver/web/demo/DemoRequestsPage.java -> src/web/demo/src/main/java/org/geoserver/web/demo/DemoRequestsPage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     static {",
          "77:         try {",
          "79:                     DemoRequestsPage.class.getResourceAsStream(\"/org/geoserver/web/demo/demo-requests.js\"), UTF_8));",
          "81:                     DemoRequestsPage.class.getResourceAsStream(\"/org/geoserver/web/demo/xml-pretty-print.js\"), UTF_8));",
          "83:             demoRequestsJavascript = js;",
          "85:             demoRequestsCSS = CharStreams.toString(new InputStreamReader(",
          "",
          "[Removed Lines]",
          "78:             var demo_request_js = CharStreams.toString(new InputStreamReader(",
          "80:             var xml_pretty_print_js = CharStreams.toString(new InputStreamReader(",
          "82:             var js = demo_request_js + \"\\n\" + xml_pretty_print_js;",
          "",
          "[Added Lines]",
          "78:             String demo_request_js = CharStreams.toString(new InputStreamReader(",
          "80:             String xml_pretty_print_js = CharStreams.toString(new InputStreamReader(",
          "82:             String js = demo_request_js + \"\\n\" + xml_pretty_print_js;",
          "",
          "---------------"
        ],
        "src/web/demo/src/test/java/org/geoserver/web/demo/DemoRequestsPageTest.java||src/web/demo/src/test/java/org/geoserver/web/demo/DemoRequestsPageTest.java": [
          "File: src/web/demo/src/test/java/org/geoserver/web/demo/DemoRequestsPageTest.java -> src/web/demo/src/test/java/org/geoserver/web/demo/DemoRequestsPageTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:         requestFormTester.select(\"demoRequestsList\", 0);",
          "64:         tester.executeAjaxEvent(\"demoRequestsForm:demoRequestsList\", \"change\");",
          "67:         assertTrue(model.isPrettyXML());",
          "69:         requestFormTester.setValue(\"prettyXML\", false);",
          "",
          "[Removed Lines]",
          "66:         var model = (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "[Added Lines]",
          "66:         DemoRequest model =",
          "67:                 (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:         requestFormTester.select(\"demoRequestsList\", 0);",
          "81:         tester.executeAjaxEvent(\"demoRequestsForm:demoRequestsList\", \"change\");",
          "84:         assertFalse(model.isOpenNewWindow());",
          "86:         requestFormTester.setValue(\"openNewWindow\", true);",
          "",
          "[Removed Lines]",
          "83:         var model = (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "[Added Lines]",
          "84:         DemoRequest model =",
          "85:                 (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:         parameters.add(\"xml\", \"myxml\");",
          "100:         tester.startPage(new DemoRequestsPage(Files.asResource(demoDir), parameters));",
          "103:         assertEquals(\"myurl\", model.getRequestUrl());",
          "104:         assertEquals(\"myxml\", model.getRequestBody());",
          "",
          "[Removed Lines]",
          "101:         var model = (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "[Added Lines]",
          "103:         DemoRequest model =",
          "104:                 (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "114:         requestFormTester.select(\"demoRequestsList\", 0);",
          "115:         tester.executeAjaxEvent(\"demoRequestsForm:demoRequestsList\", \"change\");",
          "118:         assertEquals(\"UserName\", model.getUserName());",
          "119:         assertEquals(\"PassWord\", model.getPassword());",
          "",
          "[Removed Lines]",
          "117:         var model = (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "[Added Lines]",
          "120:         DemoRequest model =",
          "121:                 (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "134:         requestFormTester.select(\"demoRequestsList\", 0);",
          "135:         tester.executeAjaxEvent(\"demoRequestsForm:demoRequestsList\", \"change\");",
          "139:         assertEquals(\"WFS_getFeature-1.1.xml\", model.getRequestFileName());",
          "140:         assertEquals(\"http://localhost/context/wfs\", model.getRequestUrl());",
          "",
          "[Removed Lines]",
          "137:         var model = (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "[Added Lines]",
          "141:         DemoRequest model =",
          "142:                 (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "187:             tester.executeAjaxEvent(\"demoRequestsForm:demoRequestsList\", \"change\");",
          "188:             tester.assertModelValue(\"demoRequestsForm:demoRequestsList\", requestName);",
          "191:                     (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "193:             String requestFileName = model.getRequestFileName();",
          "",
          "[Removed Lines]",
          "190:             var model =",
          "",
          "[Added Lines]",
          "195:             DemoRequest model =",
          "",
          "---------------"
        ],
        "src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilder.java||src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilder.java": [
          "File: src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilder.java -> src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:         Form form = new Form<>(\"form\");",
          "51:         add(form);",
          "54:         form.setDefaultModel(model);",
          "56:         xml = new TextField<>(\"xml\", new PropertyModel<>(model, \"xml\"));",
          "",
          "[Removed Lines]",
          "53:         var model = new Model<>(new WCSRequestModel());",
          "",
          "[Added Lines]",
          "53:         Model<WCSRequestModel> model = new Model<>(new WCSRequestModel());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:                         \"ows\",",
          "77:                         Collections.singletonMap(\"strict\", \"true\"),",
          "78:                         URLType.SERVICE);",
          "81:                 PageParameters parameters = new PageParameters();",
          "82:                 parameters.add(\"url\", url);",
          "",
          "[Removed Lines]",
          "79:                 var xml = getRequestXML();",
          "",
          "[Added Lines]",
          "79:                 String xml = getRequestXML();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:             @Override",
          "117:             protected void onSubmit(AjaxRequestTarget target) {",
          "118:                 try {",
          "120:                     xml.setModelObject(xmlText);",
          "121:                     target.add(xml);",
          "122:                 } catch (Exception e) {",
          "",
          "[Removed Lines]",
          "119:                     var xmlText = getRequestXML();",
          "",
          "[Added Lines]",
          "119:                     String xmlText = getRequestXML();",
          "",
          "---------------"
        ],
        "src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilderPanel.java||src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilderPanel.java": [
          "File: src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilderPanel.java -> src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilderPanel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:                 coverage.processInput();",
          "204:                 final String coverageName = WCSRequestBuilderPanel.this.getCoverage.coverage;",
          "205:                 if (coverageName != null) {",
          "207:                     @SuppressWarnings(\"unchecked\")",
          "209:                     xml.setModelObject(xmlText);",
          "210:                     target.add(xml);",
          "211:                     target.appendJavaScript(\"getCoverage()\");",
          "",
          "[Removed Lines]",
          "206:                     var xmlText = getDescribeXML(coverageName);",
          "208:                     var xml = (TextField<String>) form.get(\"xml\");",
          "",
          "[Added Lines]",
          "206:                     String xmlText = getDescribeXML(coverageName);",
          "208:                     TextField<String> xml = (TextField<String>) form.get(\"xml\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "092801eb82dcfae8fb1f1c51858605b19607b714",
      "candidate_info": {
        "commit_hash": "092801eb82dcfae8fb1f1c51858605b19607b714",
        "repo": "geoserver/geoserver",
        "commit_url": "https://github.com/geoserver/geoserver/commit/092801eb82dcfae8fb1f1c51858605b19607b714",
        "files": [
          "build/qa/pmd-ruleset.xml",
          "src/community/jms-cluster/activemqBroker/src/test/java/org/geoserver/web/Start.java",
          "src/extension/ogcapi/web-ogcapi/src/main/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProvider.java",
          "src/extension/ogcapi/web-ogcapi/src/test/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProviderTest.java",
          "src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilder.java",
          "src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilderPanel.java",
          "src/extension/wps/web-wps/src/test/java/org/geoserver/wps/web/WPSRequestBuilderTest.java",
          "src/platform/src/main/java/org/geoserver/platform/SystemEnvironmentStatus.java",
          "src/platform/src/main/java/org/geoserver/platform/SystemPropertyStatus.java",
          "src/platform/src/test/java/org/geoserver/platform/SystemEnvironmentTest.java",
          "src/platform/src/test/java/org/geoserver/platform/SystemPropertiesStatusTest.java",
          "src/release/installer/mac/console/src/main/java/org/geoserver/console/GeoServerConsole.java",
          "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java",
          "src/web/core/src/main/java/org/geoserver/web/ServicesPanel.java",
          "src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java",
          "src/web/demo/src/main/java/org/geoserver/web/demo/DemoRequestsPage.java",
          "src/web/demo/src/test/java/org/geoserver/web/demo/DemoRequestsPageTest.java",
          "src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilder.java",
          "src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilderPanel.java"
        ],
        "message": "[GEOS-11804] Disallow usage of var in GeoServer source code",
        "before_after_code_files": [
          "src/community/jms-cluster/activemqBroker/src/test/java/org/geoserver/web/Start.java||src/community/jms-cluster/activemqBroker/src/test/java/org/geoserver/web/Start.java",
          "src/extension/ogcapi/web-ogcapi/src/main/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProvider.java||src/extension/ogcapi/web-ogcapi/src/main/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProvider.java",
          "src/extension/ogcapi/web-ogcapi/src/test/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProviderTest.java||src/extension/ogcapi/web-ogcapi/src/test/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProviderTest.java",
          "src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilder.java||src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilder.java",
          "src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilderPanel.java||src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilderPanel.java",
          "src/extension/wps/web-wps/src/test/java/org/geoserver/wps/web/WPSRequestBuilderTest.java||src/extension/wps/web-wps/src/test/java/org/geoserver/wps/web/WPSRequestBuilderTest.java",
          "src/platform/src/main/java/org/geoserver/platform/SystemEnvironmentStatus.java||src/platform/src/main/java/org/geoserver/platform/SystemEnvironmentStatus.java",
          "src/platform/src/main/java/org/geoserver/platform/SystemPropertyStatus.java||src/platform/src/main/java/org/geoserver/platform/SystemPropertyStatus.java",
          "src/platform/src/test/java/org/geoserver/platform/SystemEnvironmentTest.java||src/platform/src/test/java/org/geoserver/platform/SystemEnvironmentTest.java",
          "src/platform/src/test/java/org/geoserver/platform/SystemPropertiesStatusTest.java||src/platform/src/test/java/org/geoserver/platform/SystemPropertiesStatusTest.java",
          "src/release/installer/mac/console/src/main/java/org/geoserver/console/GeoServerConsole.java||src/release/installer/mac/console/src/main/java/org/geoserver/console/GeoServerConsole.java",
          "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java",
          "src/web/core/src/main/java/org/geoserver/web/ServicesPanel.java||src/web/core/src/main/java/org/geoserver/web/ServicesPanel.java",
          "src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java||src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java",
          "src/web/demo/src/main/java/org/geoserver/web/demo/DemoRequestsPage.java||src/web/demo/src/main/java/org/geoserver/web/demo/DemoRequestsPage.java",
          "src/web/demo/src/test/java/org/geoserver/web/demo/DemoRequestsPageTest.java||src/web/demo/src/test/java/org/geoserver/web/demo/DemoRequestsPageTest.java",
          "src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilder.java||src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilder.java",
          "src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilderPanel.java||src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilderPanel.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java"
          ],
          "candidate": [
            "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java"
          ]
        }
      },
      "candidate_diff": {
        "src/community/jms-cluster/activemqBroker/src/test/java/org/geoserver/web/Start.java||src/community/jms-cluster/activemqBroker/src/test/java/org/geoserver/web/Start.java": [
          "File: src/community/jms-cluster/activemqBroker/src/test/java/org/geoserver/web/Start.java -> src/community/jms-cluster/activemqBroker/src/test/java/org/geoserver/web/Start.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:         if (props == null || !props.exists()) {",
          "112:             throw new IllegalArgumentException(\"Bad file name argument: \" + props);",
          "113:         }",
          "117:             prop.load(is);",
          "120:         }",
          "122:         return prop;",
          "",
          "[Removed Lines]",
          "114:         FileInputStream is = null;",
          "115:         try {",
          "116:             is = new FileInputStream(props);",
          "118:         } finally {",
          "119:             if (is != null) is.close();",
          "",
          "[Added Lines]",
          "114:         try (FileInputStream is = new FileInputStream(props)) {",
          "",
          "---------------"
        ],
        "src/extension/ogcapi/web-ogcapi/src/main/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProvider.java||src/extension/ogcapi/web-ogcapi/src/main/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProvider.java": [
          "File: src/extension/ogcapi/web-ogcapi/src/main/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProvider.java -> src/extension/ogcapi/web-ogcapi/src/main/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:         this.serviceName = serviceName;",
          "62:         this.specificServiceType = specificServiceType;",
          "63:         @SuppressWarnings(\"unchecked\")",
          "65:                 ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];",
          "66:         this.infoClass = infoClass;",
          "68:         @SuppressWarnings(\"unchecked\")",
          "70:                 ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[1];",
          "71:         this.serviceClass = serviceClass;",
          "72:     }",
          "",
          "[Removed Lines]",
          "64:         var infoClass = (Class<SERVICEINFOTYPE>)",
          "69:         var serviceClass = (Class<SERVICETYPE>)",
          "",
          "[Added Lines]",
          "64:         Class<SERVICEINFOTYPE> infoClass = (Class<SERVICEINFOTYPE>)",
          "69:         Class<SERVICETYPE> serviceClass = (Class<SERVICETYPE>)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:         InternationalString description = InternationalStringUtils.growable(",
          "132:                 info.getInternationalAbstract(), Strings.isEmpty(info.getAbstract()) ? null : info.getAbstract());",
          "135:                 serviceType,",
          "136:                 title,",
          "137:                 description,",
          "",
          "[Removed Lines]",
          "134:         var serviceDesc = new ServiceDescription(",
          "",
          "[Added Lines]",
          "134:         ServiceDescription serviceDesc = new ServiceDescription(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "182:             String customLink, WorkspaceInfo workspaceInfo, PublishedInfo layerInfo) {",
          "183:         if (workspaceInfo == null) return customLink;",
          "186:         customLink = customLink.replace(\"/ogc/\", \"/\" + wsName + \"/ogc/\");",
          "187:         if (layerInfo != null) {",
          "189:             customLink = customLink.replace(\"/ogc/\", \"/\" + layerName + \"/ogc/\");",
          "190:         }",
          "191:         return customLink;",
          "",
          "[Removed Lines]",
          "185:         var wsName = UriUtils.encodePath(workspaceInfo.getName(), \"UTF-8\");",
          "188:             var layerName = UriUtils.encodePath(layerInfo.getName(), \"UTF-8\");",
          "",
          "[Added Lines]",
          "185:         String wsName = UriUtils.encodePath(workspaceInfo.getName(), \"UTF-8\");",
          "188:             String layerName = UriUtils.encodePath(layerInfo.getName(), \"UTF-8\");",
          "",
          "---------------"
        ],
        "src/extension/ogcapi/web-ogcapi/src/test/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProviderTest.java||src/extension/ogcapi/web-ogcapi/src/test/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProviderTest.java": [
          "File: src/extension/ogcapi/web-ogcapi/src/test/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProviderTest.java -> src/extension/ogcapi/web-ogcapi/src/test/java/org/geoserver/web/ogcapi/OgcApiServiceDescriptionProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import static org.junit.Assert.assertTrue;",
          "10: import java.util.Arrays;",
          "11: import org.geoserver.data.test.SystemTestData;",
          "12: import org.geoserver.platform.GeoServerExtensionsHelper;",
          "13: import org.geoserver.test.GeoServerSystemTestSupport;",
          "14: import org.geoserver.web.ogcapi.provider.TestCaseInfo;",
          "15: import org.geoserver.web.ogcapi.provider.TestCaseInfoImpl;",
          "16: import org.geoserver.web.ogcapi.provider.TestCaseOgcApiServiceDescriptionProvider;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: import java.util.List;",
          "12: import org.geoserver.catalog.LayerInfo;",
          "13: import org.geoserver.catalog.WorkspaceInfo;",
          "17: import org.geoserver.web.ServiceDescription;",
          "18: import org.geoserver.web.ServiceLinkDescription;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:     @Test",
          "27:     public void testBasic() {",
          "29:         assertEquals(\"TestCaseServiceType\", provider.getServiceType());",
          "30:         assertEquals(\"OGCAPI-TestCase\", provider.getServiceName());",
          "31:         assertEquals(\"TestCase\", provider.getSpecificServiceType());",
          "",
          "[Removed Lines]",
          "28:         var provider = new TestCaseOgcApiServiceDescriptionProvider(this.getGeoServer());",
          "",
          "[Added Lines]",
          "33:         TestCaseOgcApiServiceDescriptionProvider provider =",
          "34:                 new TestCaseOgcApiServiceDescriptionProvider(this.getGeoServer());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:     @Test",
          "42:     public void testURLMangler() {",
          "47:         assertEquals(link, mangled); // no change",
          "51:         mangled = provider.ogcApiCustomCapabilitiesLinkMangler(link, wsInfo, null);",
          "52:         assertEquals(\"../cite/ogc/features/v1\", mangled);",
          "56:         mangled = provider.ogcApiCustomCapabilitiesLinkMangler(link, wsInfo, layerInfo);",
          "57:         assertEquals(\"../cite/DividedRoutes/ogc/features/v1\", mangled);",
          "",
          "[Removed Lines]",
          "43:         var provider = new TestCaseOgcApiServiceDescriptionProvider(this.getGeoServer());",
          "44:         var link = \"../ogc/features/v1\";",
          "46:         var mangled = provider.ogcApiCustomCapabilitiesLinkMangler(link, null, null);",
          "49:         var wsInfo = getCatalog().getWorkspaceByName(\"cite\");",
          "54:         var layerInfo = getCatalog().getLayerByName(\"DividedRoutes\");",
          "",
          "[Added Lines]",
          "49:         TestCaseOgcApiServiceDescriptionProvider provider =",
          "50:                 new TestCaseOgcApiServiceDescriptionProvider(this.getGeoServer());",
          "51:         String link = \"../ogc/features/v1\";",
          "53:         String mangled = provider.ogcApiCustomCapabilitiesLinkMangler(link, null, null);",
          "56:         WorkspaceInfo wsInfo = getCatalog().getWorkspaceByName(\"cite\");",
          "61:         LayerInfo layerInfo = getCatalog().getLayerByName(\"DividedRoutes\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:     @Test",
          "78:     public void testProvider() {",
          "82:         assertEquals(1, descriptions.size());",
          "83:         assertEquals(\"TestCaseServiceType\", descriptions.get(0).getServiceType());",
          "84:         assertTrue(descriptions.get(0).getDescriptionPriority() < 100);",
          "",
          "[Removed Lines]",
          "79:         var provider = new TestCaseOgcApiServiceDescriptionProvider(this.getGeoServer());",
          "81:         var descriptions = provider.getServices(null, null);",
          "",
          "[Added Lines]",
          "86:         TestCaseOgcApiServiceDescriptionProvider provider =",
          "87:                 new TestCaseOgcApiServiceDescriptionProvider(this.getGeoServer());",
          "89:         List<ServiceDescription> descriptions = provider.getServices(null, null);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "89:     @Test",
          "90:     public void testLinks() {",
          "94:         assertEquals(1, links.size());",
          "95:         assertEquals(\"TestCaseServiceType\", links.get(0).getServiceType());",
          "96:         assertEquals(\"TestCase\", links.get(0).getSpecificServiceType());",
          "97:         assertEquals(\"OGCAPI-TestCase\", links.get(0).getProtocol());",
          "98:         assertEquals(\"../ogc/TestCaseService/v1\", links.get(0).getLink());",
          "102:         links = provider.getServiceLinks(ws, null);",
          "103:         assertEquals(1, links.size());",
          "",
          "[Removed Lines]",
          "91:         var provider = new TestCaseOgcApiServiceDescriptionProvider(this.getGeoServer());",
          "93:         var links = provider.getServiceLinks(null, null);",
          "100:         var ws = getCatalog().getWorkspaceByName(\"cite\");",
          "",
          "[Added Lines]",
          "99:         TestCaseOgcApiServiceDescriptionProvider provider =",
          "100:                 new TestCaseOgcApiServiceDescriptionProvider(this.getGeoServer());",
          "102:         List<ServiceLinkDescription> links = provider.getServiceLinks(null, null);",
          "109:         WorkspaceInfo ws = getCatalog().getWorkspaceByName(\"cite\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "106:         assertEquals(\"OGCAPI-TestCase\", links.get(0).getProtocol());",
          "107:         assertEquals(\"../cite/ogc/TestCaseService/v1\", links.get(0).getLink());",
          "111:         links = provider.getServiceLinks(ws, layer);",
          "112:         assertEquals(1, links.size());",
          "",
          "[Removed Lines]",
          "109:         var layer = getCatalog().getLayerByName(\"DividedRoutes\");",
          "",
          "[Added Lines]",
          "118:         LayerInfo layer = getCatalog().getLayerByName(\"DividedRoutes\");",
          "",
          "---------------"
        ],
        "src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilder.java||src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilder.java": [
          "File: src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilder.java -> src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:         Form form = new Form<>(\"form\");",
          "66:         add(form);",
          "69:         form.setDefaultModel(model);",
          "71:         xml = new TextField<>(\"xml\", new PropertyModel<>(model, \"xml\"));",
          "",
          "[Removed Lines]",
          "68:         var model = new Model<>(new WPSRequestModel());",
          "",
          "[Added Lines]",
          "68:         Model<WPSRequestModel> model = new Model<>(new WPSRequestModel());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:             @Override",
          "89:             protected void onSubmit(AjaxRequestTarget target) {",
          "90:                 try {",
          "92:                     xml.setModelObject(xmlText);",
          "93:                     target.add(xml);",
          "94:                 } catch (Exception e) {",
          "",
          "[Removed Lines]",
          "91:                     var xmlText = getRequestXML();",
          "",
          "[Added Lines]",
          "91:                     String xmlText = getRequestXML();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:                         \"ows\",",
          "117:                         Collections.singletonMap(\"strict\", \"true\"),",
          "118:                         URLType.SERVICE);",
          "121:                 PageParameters parameters = new PageParameters();",
          "122:                 parameters.add(\"url\", url);",
          "",
          "[Removed Lines]",
          "119:                 var xml = getRequestXML();",
          "",
          "[Added Lines]",
          "119:                 String xml = getRequestXML();",
          "",
          "---------------"
        ],
        "src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilderPanel.java||src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilderPanel.java": [
          "File: src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilderPanel.java -> src/extension/wps/web-wps/src/main/java/org/geoserver/wps/web/WPSRequestBuilderPanel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:                 processChoice.processInput();",
          "177:                 if (execute.processName != null) {",
          "181:                     xml.setModelObject(xmlText);",
          "182:                     target.add(xml);",
          "183:                     target.appendJavaScript(\"executeWPS()\");",
          "",
          "[Removed Lines]",
          "179:                     var xmlText = getDescribeXML(execute.processName);",
          "180:                     var xml = (TextField) form.get(\"xml\");",
          "",
          "[Added Lines]",
          "179:                     String xmlText = getDescribeXML(execute.processName);",
          "180:                     TextField xml = (TextField) form.get(\"xml\");",
          "",
          "---------------"
        ],
        "src/extension/wps/web-wps/src/test/java/org/geoserver/wps/web/WPSRequestBuilderTest.java||src/extension/wps/web-wps/src/test/java/org/geoserver/wps/web/WPSRequestBuilderTest.java": [
          "File: src/extension/wps/web-wps/src/test/java/org/geoserver/wps/web/WPSRequestBuilderTest.java -> src/extension/wps/web-wps/src/test/java/org/geoserver/wps/web/WPSRequestBuilderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:         tester.clickLink(\"form:execute\", true);",
          "108:         assertEquals(\"http://localhost/context/ows?strict=true\", model.getRequestUrl());",
          "109:         assertTrue(model.getRequestBody().contains(\"wps:Execute\"));",
          "",
          "[Removed Lines]",
          "106:         var model = (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "[Added Lines]",
          "106:         DemoRequest model =",
          "107:                 (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "---------------"
        ],
        "src/platform/src/main/java/org/geoserver/platform/SystemEnvironmentStatus.java||src/platform/src/main/java/org/geoserver/platform/SystemEnvironmentStatus.java": [
          "File: src/platform/src/main/java/org/geoserver/platform/SystemEnvironmentStatus.java -> src/platform/src/main/java/org/geoserver/platform/SystemEnvironmentStatus.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:     @Override",
          "85:     public Optional<String> getMessage() {",
          "86:         if (!isShow()) {",
          "88:                     \"Environment variables hidden for security reasons.  Set the environment variable '%s' to 'true' to see them.\",",
          "89:                     SystemEnvironmentStatusEnabledEnvironmentVar);",
          "90:             return Optional.of(message);",
          "",
          "[Removed Lines]",
          "87:             var message = String.format(",
          "",
          "[Added Lines]",
          "87:             String message = String.format(",
          "",
          "---------------"
        ],
        "src/platform/src/main/java/org/geoserver/platform/SystemPropertyStatus.java||src/platform/src/main/java/org/geoserver/platform/SystemPropertyStatus.java": [
          "File: src/platform/src/main/java/org/geoserver/platform/SystemPropertyStatus.java -> src/platform/src/main/java/org/geoserver/platform/SystemPropertyStatus.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:     @Override",
          "83:     public Optional<String> getMessage() {",
          "84:         if (!isShow()) {",
          "86:                     \"Java system properties hidden for security reasons.  Set the environment variable '%s' to 'true' to see them.\",",
          "87:                     SystemPropertyStatusEnabledEnvironmentVar);",
          "88:             return Optional.of(message);",
          "",
          "[Removed Lines]",
          "85:             var message = String.format(",
          "",
          "[Added Lines]",
          "85:             String message = String.format(",
          "",
          "---------------"
        ],
        "src/platform/src/test/java/org/geoserver/platform/SystemEnvironmentTest.java||src/platform/src/test/java/org/geoserver/platform/SystemEnvironmentTest.java": [
          "File: src/platform/src/test/java/org/geoserver/platform/SystemEnvironmentTest.java -> src/platform/src/test/java/org/geoserver/platform/SystemEnvironmentTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import java.util.ArrayList;",
          "12: import java.util.HashMap;",
          "13: import java.util.Map;",
          "14: import java.util.logging.Logger;",
          "15: import org.easymock.EasyMock;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     @Test",
          "46:     public void testEnabled() {",
          "",
          "[Removed Lines]",
          "47:         final var VALUE = new ArrayList<String>();",
          "",
          "[Added Lines]",
          "48:         final List<String> VALUE = new ArrayList<>();",
          "",
          "---------------"
        ],
        "src/platform/src/test/java/org/geoserver/platform/SystemPropertiesStatusTest.java||src/platform/src/test/java/org/geoserver/platform/SystemPropertiesStatusTest.java": [
          "File: src/platform/src/test/java/org/geoserver/platform/SystemPropertiesStatusTest.java -> src/platform/src/test/java/org/geoserver/platform/SystemPropertiesStatusTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import static org.junit.Assert.assertTrue;",
          "11: import java.util.ArrayList;",
          "12: import org.junit.Test;",
          "14: public class SystemPropertiesStatusTest {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     @Test",
          "38:     public void testEnabled() {",
          "",
          "[Removed Lines]",
          "39:         final var VALUE = new ArrayList<String>();",
          "",
          "[Added Lines]",
          "40:         List<String> VALUE = new ArrayList<>();",
          "",
          "---------------"
        ],
        "src/release/installer/mac/console/src/main/java/org/geoserver/console/GeoServerConsole.java||src/release/installer/mac/console/src/main/java/org/geoserver/console/GeoServerConsole.java": [
          "File: src/release/installer/mac/console/src/main/java/org/geoserver/console/GeoServerConsole.java -> src/release/installer/mac/console/src/main/java/org/geoserver/console/GeoServerConsole.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:         public boolean isStarted() throws Exception {",
          "128:                 return s.isConnected();",
          "129:             } catch (ConnectException e) {",
          "130:                 return false;",
          "133:             }",
          "134:         }",
          "",
          "[Removed Lines]",
          "125:             Socket s = null;",
          "126:             try {",
          "127:                 s = new Socket(InetAddress.getLocalHost(), 8080);",
          "131:             } finally {",
          "132:                 if (s != null) s.close();",
          "",
          "[Added Lines]",
          "125:             try (Socket s = new Socket(InetAddress.getLocalHost(), 8080)) {",
          "",
          "---------------"
        ],
        "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java": [
          "File: src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java -> src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     public AboutGeoServerPage() {",
          "23:         add(privateInfo);",
          "26:         if (isAdmin) {",
          "27:             privateInfo.add(new Label(\"geotoolsVersion\", GeoTools.getVersion().toString()));",
          "28:             privateInfo.add(new Label(\"geotoolsRevision\", GeoTools.getBuildRevision()));",
          "",
          "[Removed Lines]",
          "22:         var privateInfo = new WebMarkupContainer(\"privateInfo\");",
          "25:         var isAdmin = getSession().isAdmin();",
          "",
          "[Added Lines]",
          "22:         WebMarkupContainer privateInfo = new WebMarkupContainer(\"privateInfo\");",
          "25:         boolean isAdmin = getSession().isAdmin();",
          "",
          "---------------"
        ],
        "src/web/core/src/main/java/org/geoserver/web/ServicesPanel.java||src/web/core/src/main/java/org/geoserver/web/ServicesPanel.java": [
          "File: src/web/core/src/main/java/org/geoserver/web/ServicesPanel.java -> src/web/core/src/main/java/org/geoserver/web/ServicesPanel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:             String serviceName = service.getServiceType();",
          "106:             if (serviceMap.containsKey(serviceName)) {",
          "109:                 if (service.getDescriptionPriority() > otherServiceDescription.getDescriptionPriority()) {",
          "110:                     serviceMap.put(serviceName, service);",
          "111:                 }",
          "",
          "[Removed Lines]",
          "108:                 var otherServiceDescription = serviceMap.get(serviceName);",
          "",
          "[Added Lines]",
          "108:                 ServiceDescription otherServiceDescription = serviceMap.get(serviceName);",
          "",
          "---------------"
        ],
        "src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java||src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java": [
          "File: src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java -> src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:         logout();",
          "290:         tester.startPage(GeoServerHomePage.class);",
          "294:         String responseTxt = tester.getLastResponse().getDocument();",
          "295:         assertFalse(responseTxt.contains(version));",
          "",
          "[Removed Lines]",
          "292:         var version = new StringResourceModel(\"version\", null, null).getString();",
          "",
          "[Added Lines]",
          "292:         String version = new StringResourceModel(\"version\", null, null).getString();",
          "",
          "---------------"
        ],
        "src/web/demo/src/main/java/org/geoserver/web/demo/DemoRequestsPage.java||src/web/demo/src/main/java/org/geoserver/web/demo/DemoRequestsPage.java": [
          "File: src/web/demo/src/main/java/org/geoserver/web/demo/DemoRequestsPage.java -> src/web/demo/src/main/java/org/geoserver/web/demo/DemoRequestsPage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     static {",
          "77:         try {",
          "79:                     DemoRequestsPage.class.getResourceAsStream(\"/org/geoserver/web/demo/demo-requests.js\"), UTF_8));",
          "81:                     DemoRequestsPage.class.getResourceAsStream(\"/org/geoserver/web/demo/xml-pretty-print.js\"), UTF_8));",
          "83:             demoRequestsJavascript = js;",
          "85:             demoRequestsCSS = CharStreams.toString(new InputStreamReader(",
          "",
          "[Removed Lines]",
          "78:             var demo_request_js = CharStreams.toString(new InputStreamReader(",
          "80:             var xml_pretty_print_js = CharStreams.toString(new InputStreamReader(",
          "82:             var js = demo_request_js + \"\\n\" + xml_pretty_print_js;",
          "",
          "[Added Lines]",
          "78:             String demo_request_js = CharStreams.toString(new InputStreamReader(",
          "80:             String xml_pretty_print_js = CharStreams.toString(new InputStreamReader(",
          "82:             String js = demo_request_js + \"\\n\" + xml_pretty_print_js;",
          "",
          "---------------"
        ],
        "src/web/demo/src/test/java/org/geoserver/web/demo/DemoRequestsPageTest.java||src/web/demo/src/test/java/org/geoserver/web/demo/DemoRequestsPageTest.java": [
          "File: src/web/demo/src/test/java/org/geoserver/web/demo/DemoRequestsPageTest.java -> src/web/demo/src/test/java/org/geoserver/web/demo/DemoRequestsPageTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:         requestFormTester.select(\"demoRequestsList\", 0);",
          "64:         tester.executeAjaxEvent(\"demoRequestsForm:demoRequestsList\", \"change\");",
          "67:         assertTrue(model.isPrettyXML());",
          "69:         requestFormTester.setValue(\"prettyXML\", false);",
          "",
          "[Removed Lines]",
          "66:         var model = (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "[Added Lines]",
          "66:         DemoRequest model =",
          "67:                 (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:         requestFormTester.select(\"demoRequestsList\", 0);",
          "81:         tester.executeAjaxEvent(\"demoRequestsForm:demoRequestsList\", \"change\");",
          "84:         assertFalse(model.isOpenNewWindow());",
          "86:         requestFormTester.setValue(\"openNewWindow\", true);",
          "",
          "[Removed Lines]",
          "83:         var model = (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "[Added Lines]",
          "84:         DemoRequest model =",
          "85:                 (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:         parameters.add(\"xml\", \"myxml\");",
          "100:         tester.startPage(new DemoRequestsPage(Files.asResource(demoDir), parameters));",
          "103:         assertEquals(\"myurl\", model.getRequestUrl());",
          "104:         assertEquals(\"myxml\", model.getRequestBody());",
          "",
          "[Removed Lines]",
          "101:         var model = (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "[Added Lines]",
          "103:         DemoRequest model =",
          "104:                 (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "114:         requestFormTester.select(\"demoRequestsList\", 0);",
          "115:         tester.executeAjaxEvent(\"demoRequestsForm:demoRequestsList\", \"change\");",
          "118:         assertEquals(\"UserName\", model.getUserName());",
          "119:         assertEquals(\"PassWord\", model.getPassword());",
          "",
          "[Removed Lines]",
          "117:         var model = (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "[Added Lines]",
          "120:         DemoRequest model =",
          "121:                 (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "134:         requestFormTester.select(\"demoRequestsList\", 0);",
          "135:         tester.executeAjaxEvent(\"demoRequestsForm:demoRequestsList\", \"change\");",
          "139:         assertEquals(\"WFS_getFeature-1.1.xml\", model.getRequestFileName());",
          "140:         assertEquals(\"http://localhost/context/wfs\", model.getRequestUrl());",
          "",
          "[Removed Lines]",
          "137:         var model = (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "[Added Lines]",
          "141:         DemoRequest model =",
          "142:                 (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "187:             tester.executeAjaxEvent(\"demoRequestsForm:demoRequestsList\", \"change\");",
          "188:             tester.assertModelValue(\"demoRequestsForm:demoRequestsList\", requestName);",
          "191:                     (DemoRequest) tester.getLastRenderedPage().getDefaultModel().getObject();",
          "193:             String requestFileName = model.getRequestFileName();",
          "",
          "[Removed Lines]",
          "190:             var model =",
          "",
          "[Added Lines]",
          "195:             DemoRequest model =",
          "",
          "---------------"
        ],
        "src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilder.java||src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilder.java": [
          "File: src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilder.java -> src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:         Form form = new Form<>(\"form\");",
          "51:         add(form);",
          "54:         form.setDefaultModel(model);",
          "56:         xml = new TextField<>(\"xml\", new PropertyModel<>(model, \"xml\"));",
          "",
          "[Removed Lines]",
          "53:         var model = new Model<>(new WCSRequestModel());",
          "",
          "[Added Lines]",
          "53:         Model<WCSRequestModel> model = new Model<>(new WCSRequestModel());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:                         \"ows\",",
          "77:                         Collections.singletonMap(\"strict\", \"true\"),",
          "78:                         URLType.SERVICE);",
          "81:                 PageParameters parameters = new PageParameters();",
          "82:                 parameters.add(\"url\", url);",
          "",
          "[Removed Lines]",
          "79:                 var xml = getRequestXML();",
          "",
          "[Added Lines]",
          "79:                 String xml = getRequestXML();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:             @Override",
          "117:             protected void onSubmit(AjaxRequestTarget target) {",
          "118:                 try {",
          "120:                     xml.setModelObject(xmlText);",
          "121:                     target.add(xml);",
          "122:                 } catch (Exception e) {",
          "",
          "[Removed Lines]",
          "119:                     var xmlText = getRequestXML();",
          "",
          "[Added Lines]",
          "119:                     String xmlText = getRequestXML();",
          "",
          "---------------"
        ],
        "src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilderPanel.java||src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilderPanel.java": [
          "File: src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilderPanel.java -> src/web/wcs/src/main/java/org/geoserver/wcs/web/demo/WCSRequestBuilderPanel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:                 coverage.processInput();",
          "204:                 final String coverageName = WCSRequestBuilderPanel.this.getCoverage.coverage;",
          "205:                 if (coverageName != null) {",
          "207:                     @SuppressWarnings(\"unchecked\")",
          "209:                     xml.setModelObject(xmlText);",
          "210:                     target.add(xml);",
          "211:                     target.appendJavaScript(\"getCoverage()\");",
          "",
          "[Removed Lines]",
          "206:                     var xmlText = getDescribeXML(coverageName);",
          "208:                     var xml = (TextField<String>) form.get(\"xml\");",
          "",
          "[Added Lines]",
          "206:                     String xmlText = getDescribeXML(coverageName);",
          "208:                     TextField<String> xml = (TextField<String>) form.get(\"xml\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed060f94f20fd324e7b45c3a7207409dffcd0f93",
      "candidate_info": {
        "commit_hash": "ed060f94f20fd324e7b45c3a7207409dffcd0f93",
        "repo": "geoserver/geoserver",
        "commit_url": "https://github.com/geoserver/geoserver/commit/ed060f94f20fd324e7b45c3a7207409dffcd0f93",
        "files": [
          "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html",
          "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java",
          "src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.html",
          "src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.java",
          "src/web/core/src/main/java/org/geoserver/web/GeoServerHomePage.java",
          "src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java",
          "src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java"
        ],
        "message": "[GEOS-11400] About Page Layout and display of build information\n\nBackport of davidblasby PR that showed up as individual commits to main",
        "before_after_code_files": [
          "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html",
          "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java",
          "src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.html||src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.html",
          "src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.java||src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.java",
          "src/web/core/src/main/java/org/geoserver/web/GeoServerHomePage.java||src/web/core/src/main/java/org/geoserver/web/GeoServerHomePage.java",
          "src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java||src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java",
          "src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java||src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html",
            "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java",
            "src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java||src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java"
          ],
          "candidate": [
            "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html",
            "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java",
            "src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java||src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html": [
          "File: src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html -> src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "2:   <body>",
          "3:     <wicket:extend>",
          "4:       <form>",
          "36:        <fieldset>",
          "37:            <legend><wicket:message key=\"moreInformation\">More Information</wicket:message></legend>",
          "38:            <p>",
          "",
          "[Removed Lines]",
          "5:        <fieldset class=\"mt-3\">",
          "6:          <legend>",
          "7:            <wicket:message key=\"buildInformation\">Build Information</wicket:message>",
          "8:          </legend>",
          "9:          <ul>",
          "10:            <li>",
          "11:              <label for=\"version\"><wicket:message key=\"geoserverVersion\">Version</wicket:message></label>",
          "12:              <span id=\"version\"><wicket:message key=\"version\"></wicket:message></span>",
          "13:            </li>",
          "14:            <li>",
          "15:              <label for=\"buildRevision\"><wicket:message key=\"gitRevision\">Git Revision</wicket:message></label>",
          "16:              <span id=\"buildRevision\"><wicket:message key=\"build.revision\"></wicket:message></span>",
          "17:            </li>",
          "18:            <li>",
          "19:              <label for=\"buildDate\"><wicket:message key=\"buildDate\">Build Date</wicket:message></label>",
          "20:              <span id=\"buildDate\"><wicket:message key=\"build.date\"></wicket:message></span>",
          "21:            </li>",
          "22:            <li>",
          "23:              <label for=\"geotoolsInfo\"><wicket:message key=\"geotoolsVersion\">GeoTools Version</wicket:message></label>",
          "24:              <span id=\"geotoolsInfo\">",
          "25:                <span wicket:id=\"geotoolsVersion\"></span> (rev <span wicket:id=\"geotoolsRevision\"></span>)",
          "26:              </span>",
          "27:            </li>",
          "28:            <li>",
          "29:              <label for=\"geowebcacheInfo\"><wicket:message key=\"geowebcacheVersion\">GeoWebCache Version</wicket:message></label>",
          "30:              <span id=\"geotoolsInfo\">",
          "31:                <span wicket:id=\"geowebcacheVersion\"></span> (rev <span wicket:id=\"geowebcacheRevision\"></span>)",
          "32:              </span>",
          "33:            </li>",
          "34:          </ul>",
          "35:        </fieldset>",
          "",
          "[Added Lines]",
          "5:           <wicket:container wicket:id=\"privateInfo\">",
          "6:                <fieldset  class=\"mt-3\">",
          "7:                  <legend>",
          "8:                    <wicket:message key=\"buildInformation\">Build Information</wicket:message>",
          "9:                  </legend>",
          "10:                  <ul>",
          "11:                    <li>",
          "12:                      <label for=\"version\"><wicket:message key=\"geoserverVersion\">Version</wicket:message></label>",
          "13:                      <span id=\"version\"><wicket:message key=\"version\"></wicket:message></span>",
          "14:                    </li>",
          "15:                    <li>",
          "16:                      <label for=\"buildRevision\"><wicket:message key=\"gitRevision\">Git Revision</wicket:message></label>",
          "17:                      <span id=\"buildRevision\"><wicket:message key=\"build.revision\"></wicket:message></span>",
          "18:                    </li>",
          "19:                    <li>",
          "20:                      <label for=\"buildDate\"><wicket:message key=\"buildDate\">Build Date</wicket:message></label>",
          "21:                      <span id=\"buildDate\"><wicket:message key=\"build.date\"></wicket:message></span>",
          "22:                    </li>",
          "23:                    <li>",
          "24:                      <label for=\"geotoolsInfo\"><wicket:message key=\"geotoolsVersion\">GeoTools Version</wicket:message></label>",
          "25:                      <span id=\"geotoolsInfo\">",
          "26:                        <span wicket:id=\"geotoolsVersion\"></span> (rev <span wicket:id=\"geotoolsRevision\"></span>)",
          "27:                      </span>",
          "28:                    </li>",
          "29:                    <li>",
          "30:                      <label for=\"geowebcacheInfo\"><wicket:message key=\"geowebcacheVersion\">GeoWebCache Version</wicket:message></label>",
          "31:                      <span id=\"geotoolsInfo\">",
          "32:                        <span wicket:id=\"geowebcacheVersion\"></span> (rev <span wicket:id=\"geowebcacheRevision\"></span>)",
          "33:                      </span>",
          "34:                    </li>",
          "35:                  </ul>",
          "36:                </fieldset>",
          "37:           </wicket:container>",
          "",
          "---------------"
        ],
        "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java": [
          "File: src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java -> src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: package org.geoserver.web;",
          "8: import java.util.logging.Level;",
          "9: import org.apache.wicket.markup.html.basic.Label;",
          "10: import org.geotools.util.factory.GeoTools;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: import org.apache.wicket.markup.html.WebMarkupContainer;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: public class AboutGeoServerPage extends GeoServerBasePage {",
          "19:     public AboutGeoServerPage() {",
          "24:     }",
          "26:     public String getGwcVersion() {",
          "",
          "[Removed Lines]",
          "20:         add(new Label(\"geotoolsVersion\", GeoTools.getVersion().toString()));",
          "21:         add(new Label(\"geotoolsRevision\", GeoTools.getBuildRevision()));",
          "22:         add(new Label(\"geowebcacheVersion\", getGwcVersion()));",
          "23:         add(new Label(\"geowebcacheRevision\", getGwcRevision()));",
          "",
          "[Added Lines]",
          "22:         var privateInfo = new WebMarkupContainer(\"privateInfo\");",
          "23:         add(privateInfo);",
          "25:         var isAdmin = getSession().isAdmin();",
          "26:         if (isAdmin) {",
          "27:             privateInfo.add(new Label(\"geotoolsVersion\", GeoTools.getVersion().toString()));",
          "28:             privateInfo.add(new Label(\"geotoolsRevision\", GeoTools.getBuildRevision()));",
          "29:             privateInfo.add(new Label(\"geowebcacheVersion\", getGwcVersion()));",
          "30:             privateInfo.add(new Label(\"geowebcacheRevision\", getGwcRevision()));",
          "31:         } else {",
          "32:             add(new Label(\"geotoolsVersion\", GeoTools.getVersion().toString()));",
          "33:             add(new Label(\"geotoolsRevision\", GeoTools.getBuildRevision()));",
          "34:             add(new Label(\"geowebcacheVersion\", getGwcVersion()));",
          "35:             add(new Label(\"geowebcacheRevision\", getGwcRevision()));",
          "36:             privateInfo.setVisible(false);",
          "37:         }",
          "",
          "---------------"
        ],
        "src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.html||src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.html": [
          "File: src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.html -> src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: <body>",
          "32:   <div id=\"header\">",
          "33:     <div class=\"wrap\">",
          "35:       <div class=\"button-group selfclear\">",
          "36:        <span wicket:id=\"loginforms\">",
          "37:         <form class=\"d-inline-block\" wicket:id=\"loginform\" method=\"post\" action=\"../j_spring_security_check\">",
          "",
          "[Removed Lines]",
          "34:       <h2><a wicket:id=\"home\" class=\"pngfix\" href=\"#\"><span wicket:id=\"label\">GeoServer</span></a></h2>",
          "",
          "[Added Lines]",
          "34:       <h2><a wicket:id=\"home\" class=\"pngfix\" href=\"#\"></a></h2>",
          "",
          "---------------"
        ],
        "src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.java||src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.java": [
          "File: src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.java -> src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "265:         logoutForm.setVisible(!anonymous);",
          "273:         DeveloperToolbar devToolbar = new DeveloperToolbar(\"devButtons\");",
          "",
          "[Removed Lines]",
          "268:         add(",
          "269:                 new BookmarkablePageLink<>(\"home\", GeoServerHomePage.class)",
          "270:                         .add(new Label(\"label\", new StringResourceModel(\"home\", null, null))));",
          "",
          "[Added Lines]",
          "268:         add(new BookmarkablePageLink<>(\"home\", GeoServerHomePage.class));",
          "",
          "---------------"
        ],
        "src/web/core/src/main/java/org/geoserver/web/GeoServerHomePage.java||src/web/core/src/main/java/org/geoserver/web/GeoServerHomePage.java": [
          "File: src/web/core/src/main/java/org/geoserver/web/GeoServerHomePage.java -> src/web/core/src/main/java/org/geoserver/web/GeoServerHomePage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "643:     }",
          "645:     private Label footerMessage(ContactInfo contactInfo, Locale locale) {",
          "646:         String version = String.valueOf(new ResourceModel(\"version\").getObject());",
          "648:         HashMap<String, String> params = new HashMap<>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "646:         boolean admin = getSession().isAdmin();",
          "647:         if (!admin) {",
          "648:             Label footerMessage = new Label(\"footerMessage\", \"\");",
          "649:             return footerMessage;",
          "650:         }",
          "",
          "---------------"
        ],
        "src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java||src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java": [
          "File: src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java -> src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import static org.hamcrest.CoreMatchers.instanceOf;",
          "8: import static org.hamcrest.MatcherAssert.assertThat;",
          "9: import static org.junit.Assert.assertEquals;",
          "11: import org.apache.wicket.util.tester.TagTester;",
          "12: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: import static org.junit.Assert.assertFalse;",
          "11: import static org.junit.Assert.assertTrue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:                 \"http://localhost/context/j_spring_security_check\",",
          "27:                 tagTester.getAttribute(\"action\"));",
          "28:     }",
          "29: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:     @Test",
          "38:     public void testHideSensitiveInfo() throws Exception {",
          "39:         logout();",
          "40:         tester.executeUrl(\"./wicket/bookmarkable/org.geoserver.web.AboutGeoServerPage\");",
          "42:         String responseTxt = tester.getLastResponse().getDocument();",
          "43:         assertFalse(responseTxt.contains(\"geotoolsInfo\"));",
          "45:         login();",
          "46:         tester.executeUrl(\"./wicket/bookmarkable/org.geoserver.web.AboutGeoServerPage\");",
          "48:         responseTxt = tester.getLastResponse().getDocument();",
          "49:         assertTrue(responseTxt.contains(\"geotoolsInfo\"));",
          "50:     }",
          "",
          "---------------"
        ],
        "src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java||src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java": [
          "File: src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java -> src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: import static org.junit.Assert.assertFalse;",
          "13: import static org.junit.Assert.assertNotSame;",
          "14: import static org.junit.Assert.assertNull;",
          "16: import java.util.ArrayList;",
          "17: import java.util.Collections;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: import static org.junit.Assert.assertTrue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: import org.apache.wicket.Page;",
          "22: import org.apache.wicket.markup.html.basic.Label;",
          "23: import org.apache.wicket.markup.html.form.TextField;",
          "24: import org.apache.wicket.util.tester.FormTester;",
          "25: import org.geoserver.catalog.PublishedInfo;",
          "26: import org.geoserver.catalog.WorkspaceInfo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import org.apache.wicket.model.StringResourceModel;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "290:         tester.assertComponent(\"form:layer:select\", Select2DropDownChoice.class);",
          "291:     }",
          "293:     public static class MockHomePageContentProvider implements GeoServerHomePageContentProvider {",
          "294:         @Override",
          "295:         public Component getPageBodyComponent(final String id) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "295:     @Test",
          "296:     public void testHideSensitiveInfo() throws Exception {",
          "297:         logout();",
          "298:         tester.startPage(GeoServerHomePage.class);",
          "300:         var version = new StringResourceModel(\"version\", null, null).getString();",
          "302:         String responseTxt = tester.getLastResponse().getDocument();",
          "303:         assertFalse(responseTxt.contains(version));",
          "305:         login();",
          "306:         tester.startPage(GeoServerHomePage.class);",
          "308:         responseTxt = tester.getLastResponse().getDocument();",
          "309:         assertTrue(responseTxt.contains(version));",
          "310:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d26b8be622841b4a94d83dc3be87057da224058",
      "candidate_info": {
        "commit_hash": "7d26b8be622841b4a94d83dc3be87057da224058",
        "repo": "geoserver/geoserver",
        "commit_url": "https://github.com/geoserver/geoserver/commit/7d26b8be622841b4a94d83dc3be87057da224058",
        "files": [
          "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html",
          "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java",
          "src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.html",
          "src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.java",
          "src/web/core/src/main/java/org/geoserver/web/GeoServerHomePage.java",
          "src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java",
          "src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java"
        ],
        "message": "[GEOS-11400] About Page Layout and display of build information\n\nBackport of davidblasby PR that showed up as individual commits to main",
        "before_after_code_files": [
          "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html",
          "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java",
          "src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.html||src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.html",
          "src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.java||src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.java",
          "src/web/core/src/main/java/org/geoserver/web/GeoServerHomePage.java||src/web/core/src/main/java/org/geoserver/web/GeoServerHomePage.java",
          "src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java||src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java",
          "src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java||src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html",
            "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java",
            "src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java||src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java"
          ],
          "candidate": [
            "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html",
            "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java",
            "src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java||src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html": [
          "File: src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html -> src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "2:   <body>",
          "3:     <wicket:extend>",
          "4:       <form>",
          "36:        <fieldset>",
          "37:            <legend><wicket:message key=\"moreInformation\">More Information</wicket:message></legend>",
          "38:            <p>",
          "",
          "[Removed Lines]",
          "5:        <fieldset class=\"mt-3\">",
          "6:          <legend>",
          "7:            <wicket:message key=\"buildInformation\">Build Information</wicket:message>",
          "8:          </legend>",
          "9:          <ul>",
          "10:            <li>",
          "11:              <label for=\"version\"><wicket:message key=\"geoserverVersion\">Version</wicket:message></label>",
          "12:              <span id=\"version\"><wicket:message key=\"version\"></wicket:message></span>",
          "13:            </li>",
          "14:            <li>",
          "15:              <label for=\"buildRevision\"><wicket:message key=\"gitRevision\">Git Revision</wicket:message></label>",
          "16:              <span id=\"buildRevision\"><wicket:message key=\"build.revision\"></wicket:message></span>",
          "17:            </li>",
          "18:            <li>",
          "19:              <label for=\"buildDate\"><wicket:message key=\"buildDate\">Build Date</wicket:message></label>",
          "20:              <span id=\"buildDate\"><wicket:message key=\"build.date\"></wicket:message></span>",
          "21:            </li>",
          "22:            <li>",
          "23:              <label for=\"geotoolsInfo\"><wicket:message key=\"geotoolsVersion\">GeoTools Version</wicket:message></label>",
          "24:              <span id=\"geotoolsInfo\">",
          "25:                <span wicket:id=\"geotoolsVersion\"></span> (rev <span wicket:id=\"geotoolsRevision\"></span>)",
          "26:              </span>",
          "27:            </li>",
          "28:            <li>",
          "29:              <label for=\"geowebcacheInfo\"><wicket:message key=\"geowebcacheVersion\">GeoWebCache Version</wicket:message></label>",
          "30:              <span id=\"geotoolsInfo\">",
          "31:                <span wicket:id=\"geowebcacheVersion\"></span> (rev <span wicket:id=\"geowebcacheRevision\"></span>)",
          "32:              </span>",
          "33:            </li>",
          "34:          </ul>",
          "35:        </fieldset>",
          "",
          "[Added Lines]",
          "5:           <wicket:container wicket:id=\"privateInfo\">",
          "6:                <fieldset  class=\"mt-3\">",
          "7:                  <legend>",
          "8:                    <wicket:message key=\"buildInformation\">Build Information</wicket:message>",
          "9:                  </legend>",
          "10:                  <ul>",
          "11:                    <li>",
          "12:                      <label for=\"version\"><wicket:message key=\"geoserverVersion\">Version</wicket:message></label>",
          "13:                      <span id=\"version\"><wicket:message key=\"version\"></wicket:message></span>",
          "14:                    </li>",
          "15:                    <li>",
          "16:                      <label for=\"buildRevision\"><wicket:message key=\"gitRevision\">Git Revision</wicket:message></label>",
          "17:                      <span id=\"buildRevision\"><wicket:message key=\"build.revision\"></wicket:message></span>",
          "18:                    </li>",
          "19:                    <li>",
          "20:                      <label for=\"buildDate\"><wicket:message key=\"buildDate\">Build Date</wicket:message></label>",
          "21:                      <span id=\"buildDate\"><wicket:message key=\"build.date\"></wicket:message></span>",
          "22:                    </li>",
          "23:                    <li>",
          "24:                      <label for=\"geotoolsInfo\"><wicket:message key=\"geotoolsVersion\">GeoTools Version</wicket:message></label>",
          "25:                      <span id=\"geotoolsInfo\">",
          "26:                        <span wicket:id=\"geotoolsVersion\"></span> (rev <span wicket:id=\"geotoolsRevision\"></span>)",
          "27:                      </span>",
          "28:                    </li>",
          "29:                    <li>",
          "30:                      <label for=\"geowebcacheInfo\"><wicket:message key=\"geowebcacheVersion\">GeoWebCache Version</wicket:message></label>",
          "31:                      <span id=\"geotoolsInfo\">",
          "32:                        <span wicket:id=\"geowebcacheVersion\"></span> (rev <span wicket:id=\"geowebcacheRevision\"></span>)",
          "33:                      </span>",
          "34:                    </li>",
          "35:                  </ul>",
          "36:                </fieldset>",
          "37:           </wicket:container>",
          "",
          "---------------"
        ],
        "src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java||src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java": [
          "File: src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java -> src/web/core/src/main/java/org/geoserver/web/AboutGeoServerPage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: package org.geoserver.web;",
          "8: import java.util.logging.Level;",
          "9: import org.apache.wicket.markup.html.basic.Label;",
          "10: import org.geotools.util.factory.GeoTools;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: import org.apache.wicket.markup.html.WebMarkupContainer;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: public class AboutGeoServerPage extends GeoServerBasePage {",
          "19:     public AboutGeoServerPage() {",
          "24:     }",
          "26:     public String getGwcVersion() {",
          "",
          "[Removed Lines]",
          "20:         add(new Label(\"geotoolsVersion\", GeoTools.getVersion().toString()));",
          "21:         add(new Label(\"geotoolsRevision\", GeoTools.getBuildRevision()));",
          "22:         add(new Label(\"geowebcacheVersion\", getGwcVersion()));",
          "23:         add(new Label(\"geowebcacheRevision\", getGwcRevision()));",
          "",
          "[Added Lines]",
          "22:         var privateInfo = new WebMarkupContainer(\"privateInfo\");",
          "23:         add(privateInfo);",
          "25:         var isAdmin = getSession().isAdmin();",
          "26:         if (isAdmin) {",
          "27:             privateInfo.add(new Label(\"geotoolsVersion\", GeoTools.getVersion().toString()));",
          "28:             privateInfo.add(new Label(\"geotoolsRevision\", GeoTools.getBuildRevision()));",
          "29:             privateInfo.add(new Label(\"geowebcacheVersion\", getGwcVersion()));",
          "30:             privateInfo.add(new Label(\"geowebcacheRevision\", getGwcRevision()));",
          "31:         } else {",
          "32:             add(new Label(\"geotoolsVersion\", GeoTools.getVersion().toString()));",
          "33:             add(new Label(\"geotoolsRevision\", GeoTools.getBuildRevision()));",
          "34:             add(new Label(\"geowebcacheVersion\", getGwcVersion()));",
          "35:             add(new Label(\"geowebcacheRevision\", getGwcRevision()));",
          "36:             privateInfo.setVisible(false);",
          "37:         }",
          "",
          "---------------"
        ],
        "src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.html||src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.html": [
          "File: src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.html -> src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: <body>",
          "32:   <div id=\"header\">",
          "33:     <div class=\"wrap\">",
          "35:       <div class=\"button-group selfclear\">",
          "36:        <span wicket:id=\"loginforms\">",
          "37:         <form class=\"d-inline-block\" wicket:id=\"loginform\" method=\"post\" action=\"../j_spring_security_check\">",
          "",
          "[Removed Lines]",
          "34:       <h2><a wicket:id=\"home\" class=\"pngfix\" href=\"#\"><span wicket:id=\"label\">GeoServer</span></a></h2>",
          "",
          "[Added Lines]",
          "34:       <h2><a wicket:id=\"home\" class=\"pngfix\" href=\"#\"></a></h2>",
          "",
          "---------------"
        ],
        "src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.java||src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.java": [
          "File: src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.java -> src/web/core/src/main/java/org/geoserver/web/GeoServerBasePage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "265:         logoutForm.setVisible(!anonymous);",
          "273:         DeveloperToolbar devToolbar = new DeveloperToolbar(\"devButtons\");",
          "",
          "[Removed Lines]",
          "268:         add(",
          "269:                 new BookmarkablePageLink<>(\"home\", GeoServerHomePage.class)",
          "270:                         .add(new Label(\"label\", new StringResourceModel(\"home\", null, null))));",
          "",
          "[Added Lines]",
          "268:         add(new BookmarkablePageLink<>(\"home\", GeoServerHomePage.class));",
          "",
          "---------------"
        ],
        "src/web/core/src/main/java/org/geoserver/web/GeoServerHomePage.java||src/web/core/src/main/java/org/geoserver/web/GeoServerHomePage.java": [
          "File: src/web/core/src/main/java/org/geoserver/web/GeoServerHomePage.java -> src/web/core/src/main/java/org/geoserver/web/GeoServerHomePage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "643:     }",
          "645:     private Label footerMessage(ContactInfo contactInfo, Locale locale) {",
          "646:         String version = String.valueOf(new ResourceModel(\"version\").getObject());",
          "648:         HashMap<String, String> params = new HashMap<>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "646:         boolean admin = getSession().isAdmin();",
          "647:         if (!admin) {",
          "648:             Label footerMessage = new Label(\"footerMessage\", \"\");",
          "649:             return footerMessage;",
          "650:         }",
          "",
          "---------------"
        ],
        "src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java||src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java": [
          "File: src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java -> src/web/core/src/test/java/org/geoserver/web/GeoServerAboutPageTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import static org.hamcrest.CoreMatchers.instanceOf;",
          "8: import static org.hamcrest.MatcherAssert.assertThat;",
          "9: import static org.junit.Assert.assertEquals;",
          "11: import org.apache.wicket.util.tester.TagTester;",
          "12: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: import static org.junit.Assert.assertFalse;",
          "11: import static org.junit.Assert.assertTrue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:                 \"http://localhost/context/j_spring_security_check\",",
          "27:                 tagTester.getAttribute(\"action\"));",
          "28:     }",
          "29: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:     @Test",
          "38:     public void testHideSensitiveInfo() throws Exception {",
          "39:         logout();",
          "40:         tester.executeUrl(\"./wicket/bookmarkable/org.geoserver.web.AboutGeoServerPage\");",
          "42:         String responseTxt = tester.getLastResponse().getDocument();",
          "43:         assertFalse(responseTxt.contains(\"geotoolsInfo\"));",
          "45:         login();",
          "46:         tester.executeUrl(\"./wicket/bookmarkable/org.geoserver.web.AboutGeoServerPage\");",
          "48:         responseTxt = tester.getLastResponse().getDocument();",
          "49:         assertTrue(responseTxt.contains(\"geotoolsInfo\"));",
          "50:     }",
          "",
          "---------------"
        ],
        "src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java||src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java": [
          "File: src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java -> src/web/core/src/test/java/org/geoserver/web/GeoServerHomePageTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: import static org.junit.Assert.assertFalse;",
          "13: import static org.junit.Assert.assertNotSame;",
          "14: import static org.junit.Assert.assertNull;",
          "16: import java.util.ArrayList;",
          "17: import java.util.Collections;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: import static org.junit.Assert.assertTrue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: import org.apache.wicket.Page;",
          "22: import org.apache.wicket.markup.html.basic.Label;",
          "23: import org.apache.wicket.markup.html.form.TextField;",
          "24: import org.apache.wicket.util.tester.FormTester;",
          "25: import org.geoserver.catalog.PublishedInfo;",
          "26: import org.geoserver.catalog.WorkspaceInfo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import org.apache.wicket.model.StringResourceModel;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "290:         tester.assertComponent(\"form:layer:select\", Select2DropDownChoice.class);",
          "291:     }",
          "293:     public static class MockHomePageContentProvider implements GeoServerHomePageContentProvider {",
          "294:         @Override",
          "295:         public Component getPageBodyComponent(final String id) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "295:     @Test",
          "296:     public void testHideSensitiveInfo() throws Exception {",
          "297:         logout();",
          "298:         tester.startPage(GeoServerHomePage.class);",
          "300:         var version = new StringResourceModel(\"version\", null, null).getString();",
          "302:         String responseTxt = tester.getLastResponse().getDocument();",
          "303:         assertFalse(responseTxt.contains(version));",
          "305:         login();",
          "306:         tester.startPage(GeoServerHomePage.class);",
          "308:         responseTxt = tester.getLastResponse().getDocument();",
          "309:         assertTrue(responseTxt.contains(version));",
          "310:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}