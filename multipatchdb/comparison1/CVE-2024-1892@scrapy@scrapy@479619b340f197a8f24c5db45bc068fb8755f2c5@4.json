{
  "cve_id": "CVE-2024-1892",
  "cve_desc": "A Regular Expression Denial of Service (ReDoS) vulnerability exists in the XMLFeedSpider class of the scrapy/scrapy project, specifically in the parsing of XML content. By crafting malicious XML content that exploits inefficient regular expression complexity used in the parsing process, an attacker can cause a denial-of-service (DoS) condition. This vulnerability allows for the system to hang and consume significant resources, potentially rendering services that utilize Scrapy for XML processing unresponsive.",
  "repo": "scrapy/scrapy",
  "patch_hash": "479619b340f197a8f24c5db45bc068fb8755f2c5",
  "patch_info": {
    "commit_hash": "479619b340f197a8f24c5db45bc068fb8755f2c5",
    "repo": "scrapy/scrapy",
    "commit_url": "https://github.com/scrapy/scrapy/commit/479619b340f197a8f24c5db45bc068fb8755f2c5",
    "files": [
      "docs/faq.rst",
      "docs/news.rst",
      "docs/topics/debug.rst",
      "scrapy/spiders/feed.py",
      "scrapy/utils/iterators.py",
      "scrapy/utils/response.py",
      "tests/test_spider.py",
      "tests/test_utils_iterators.py",
      "tests/test_utils_response.py"
    ],
    "message": "Merge branch '2.11-redos' into 2.11",
    "before_after_code_files": [
      "scrapy/spiders/feed.py||scrapy/spiders/feed.py",
      "scrapy/utils/iterators.py||scrapy/utils/iterators.py",
      "scrapy/utils/response.py||scrapy/utils/response.py",
      "tests/test_spider.py||tests/test_spider.py",
      "tests/test_utils_iterators.py||tests/test_utils_iterators.py",
      "tests/test_utils_response.py||tests/test_utils_response.py"
    ]
  },
  "patch_diff": {
    "scrapy/spiders/feed.py||scrapy/spiders/feed.py": [
      "File: scrapy/spiders/feed.py -> scrapy/spiders/feed.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: from scrapy.exceptions import NotConfigured, NotSupported",
      "8: from scrapy.selector import Selector",
      "9: from scrapy.spiders import Spider",
      "11: from scrapy.utils.spider import iterate_spider_output",
      "",
      "[Removed Lines]",
      "10: from scrapy.utils.iterators import csviter, xmliter",
      "",
      "[Added Lines]",
      "10: from scrapy.utils.iterators import csviter, xmliter_lxml",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84:         return self.parse_nodes(response, nodes)",
      "86:     def _iternodes(self, response):",
      "88:             self._register_namespaces(node)",
      "89:             yield node",
      "",
      "[Removed Lines]",
      "87:         for node in xmliter(response, self.itertag):",
      "",
      "[Added Lines]",
      "87:         for node in xmliter_lxml(response, self.itertag):",
      "",
      "---------------"
    ],
    "scrapy/utils/iterators.py||scrapy/utils/iterators.py": [
      "File: scrapy/utils/iterators.py -> scrapy/utils/iterators.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "16:     cast,",
      "17:     overload,",
      "18: )",
      "20: from scrapy.http import Response, TextResponse",
      "21: from scrapy.selector import Selector",
      "22: from scrapy.utils.python import re_rsearch, to_unicode",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: from warnings import warn",
      "21: from lxml import etree",
      "23: from scrapy.exceptions import ScrapyDeprecationWarning",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "38:     - a unicode string",
      "39:     - a string encoded as utf-8",
      "40:     \"\"\"",
      "41:     nodename_patt = re.escape(nodename)",
      "43:     DOCUMENT_HEADER_RE = re.compile(r\"<\\?xml[^>]+>\\s*\", re.S)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45:     warn(",
      "46:         (",
      "47:             \"xmliter is deprecated and its use strongly discouraged because \"",
      "48:             \"it is vulnerable to ReDoS attacks. Use xmliter_lxml instead. See \"",
      "49:             \"https://github.com/scrapy/scrapy/security/advisories/GHSA-cc65-xxvf-f7r9\"",
      "50:         ),",
      "51:         ScrapyDeprecationWarning,",
      "52:         stacklevel=2,",
      "53:     )",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "81:     namespace: Optional[str] = None,",
      "82:     prefix: str = \"x\",",
      "83: ) -> Generator[Selector, Any, None]:",
      "86:     reader = _StreamReader(obj)",
      "87:     tag = f\"{{{namespace}}}{nodename}\" if namespace else nodename",
      "88:     iterable = etree.iterparse(",
      "90:     )",
      "91:     selxpath = \"//\" + (f\"{prefix}:{nodename}\" if namespace else nodename)",
      "93:         nodetext = etree.tostring(node, encoding=\"unicode\")",
      "94:         node.clear()",
      "95:         xs = Selector(text=nodetext, type=\"xml\")",
      "",
      "[Removed Lines]",
      "84:     from lxml import etree",
      "89:         cast(\"SupportsReadClose[bytes]\", reader), tag=tag, encoding=reader.encoding",
      "92:     for _, node in iterable:",
      "",
      "[Added Lines]",
      "101:         cast(\"SupportsReadClose[bytes]\", reader),",
      "102:         encoding=reader.encoding,",
      "103:         events=(\"end\", \"start-ns\"),",
      "104:         huge_tree=True,",
      "107:     needs_namespace_resolution = not namespace and \":\" in nodename",
      "108:     if needs_namespace_resolution:",
      "109:         prefix, nodename = nodename.split(\":\", maxsplit=1)",
      "110:     for event, data in iterable:",
      "111:         if event == \"start-ns\":",
      "112:             assert isinstance(data, tuple)",
      "113:             if needs_namespace_resolution:",
      "114:                 _prefix, _namespace = data",
      "115:                 if _prefix != prefix:",
      "116:                     continue",
      "117:                 namespace = _namespace",
      "118:                 needs_namespace_resolution = False",
      "119:                 selxpath = f\"//{prefix}:{nodename}\"",
      "120:                 tag = f\"{{{namespace}}}{nodename}\"",
      "121:             continue",
      "122:         assert isinstance(data, etree._Element)",
      "123:         node = data",
      "124:         if node.tag != tag:",
      "125:             continue",
      "",
      "---------------"
    ],
    "scrapy/utils/response.py||scrapy/utils/response.py": [
      "File: scrapy/utils/response.py -> scrapy/utils/response.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "74:     return b\"\".join(values)",
      "77: def open_in_browser(",
      "78:     response: Union[",
      "79:         \"scrapy.http.response.html.HtmlResponse\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "77: def _remove_html_comments(body):",
      "78:     start = body.find(b\"<!--\")",
      "79:     while start != -1:",
      "80:         end = body.find(b\"-->\", start + 1)",
      "81:         if end == -1:",
      "82:             return body[:start]",
      "83:         else:",
      "84:             body = body[:start] + body[end + 3 :]",
      "85:             start = body.find(b\"<!--\")",
      "86:     return body",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "81:     ],",
      "82:     _openfunc: Callable[[str], Any] = webbrowser.open,",
      "83: ) -> Any:",
      "86:     \"\"\"",
      "87:     from scrapy.http import HtmlResponse, TextResponse",
      "",
      "[Removed Lines]",
      "84:     \"\"\"Open the given response in a local web browser, populating the <base>",
      "85:     tag for external links to work",
      "",
      "[Added Lines]",
      "96:     \"\"\"Open *response* in a local web browser, adjusting the `base tag`_ for",
      "97:     external links to work, e.g. so that images and styles are displayed.",
      "99:     .. _base tag: https://www.w3schools.com/tags/tag_base.asp",
      "101:     For example:",
      "103:     .. code-block:: python",
      "105:         from scrapy.utils.response import open_in_browser",
      "108:         def parse_details(self, response):",
      "109:             if \"item name\" not in response.body:",
      "110:                 open_in_browser(response)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "90:     body = response.body",
      "91:     if isinstance(response, HtmlResponse):",
      "92:         if b\"<base\" not in body:",
      "96:         ext = \".html\"",
      "97:     elif isinstance(response, TextResponse):",
      "98:         ext = \".txt\"",
      "",
      "[Removed Lines]",
      "93:             repl = rf'\\1<base href=\"{response.url}\">'",
      "94:             body = re.sub(b\"<!--.*?-->\", b\"\", body, flags=re.DOTALL)",
      "95:             body = re.sub(rb\"(<head(?:>|\\s.*?>))\", to_bytes(repl), body)",
      "",
      "[Added Lines]",
      "118:             _remove_html_comments(body)",
      "119:             repl = rf'\\0<base href=\"{response.url}\">'",
      "120:             body = re.sub(rb\"<head(?:[^<>]*?>)\", to_bytes(repl), body, count=1)",
      "",
      "---------------"
    ],
    "tests/test_spider.py||tests/test_spider.py": [
      "File: tests/test_spider.py -> tests/test_spider.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "151:         body = b\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "152:         <urlset xmlns:x=\"http://www.google.com/schemas/sitemap/0.84\"",
      "153:                 xmlns:y=\"http://www.example.com/schemas/extras/1.0\">",
      "155:             <other value=\"bar\" y:custom=\"fuu\"/>",
      "156:         </url>",
      "158:         </urlset>\"\"\"",
      "159:         response = XmlResponse(url=\"http://example.com/sitemap.xml\", body=body)",
      "",
      "[Removed Lines]",
      "154:         <url><x:loc>http://www.example.com/Special-Offers.html</loc><y:updated>2009-08-16</updated>",
      "157:         <url><loc>http://www.example.com/</loc><y:updated>2009-08-16</updated><other value=\"foo\"/></url>",
      "",
      "[Added Lines]",
      "154:         <url><x:loc>http://www.example.com/Special-Offers.html</x:loc><y:updated>2009-08-16</y:updated>",
      "157:         <url><loc>http://www.example.com/</loc><y:updated>2009-08-16</y:updated><other value=\"foo\"/></url>",
      "",
      "---------------"
    ],
    "tests/test_utils_iterators.py||tests/test_utils_iterators.py": [
      "File: tests/test_utils_iterators.py -> tests/test_utils_iterators.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: from twisted.trial import unittest",
      "4: from scrapy.http import Response, TextResponse, XmlResponse",
      "5: from scrapy.utils.iterators import _body_or_str, csviter, xmliter, xmliter_lxml",
      "6: from tests import get_testdata",
      "12:     def test_xmliter(self):",
      "13:         body = b\"\"\"",
      "14:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "",
      "[Removed Lines]",
      "1: from pytest import mark",
      "9: class XmliterTestCase(unittest.TestCase):",
      "10:     xmliter = staticmethod(xmliter)",
      "",
      "[Added Lines]",
      "1: import pytest",
      "4: from scrapy.exceptions import ScrapyDeprecationWarning",
      "10: class XmliterBaseTestCase:",
      "11:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40:             attrs, [(\"001\", [\"Name 1\"], [\"Type 1\"]), (\"002\", [\"Name 2\"], [\"Type 2\"])]",
      "41:         )",
      "43:     def test_xmliter_unusual_node(self):",
      "44:         body = b\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "45:             <root>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "53:         ]",
      "54:         self.assertEqual(nodenames, [[\"matchme...\"]])",
      "56:     def test_xmliter_unicode(self):",
      "57:         # example taken from https://github.com/scrapy/scrapy/issues/1665",
      "58:         body = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "112:                 [(\"26\", [\"-\"], [\"80\"]), (\"21\", [\"Ab\"], [\"76\"]), (\"27\", [\"A\"], [\"27\"])],",
      "113:             )",
      "115:     def test_xmliter_text(self):",
      "116:         body = (",
      "117:             '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "117:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "123:             [[\"one\"], [\"two\"]],",
      "124:         )",
      "126:     def test_xmliter_namespaces(self):",
      "127:         body = b\"\"\"",
      "128:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "129:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "162:         self.assertEqual(node.xpath(\"id/text()\").getall(), [])",
      "163:         self.assertEqual(node.xpath(\"price/text()\").getall(), [])",
      "165:     def test_xmliter_namespaced_nodename(self):",
      "166:         body = b\"\"\"",
      "167:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "169:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "190:             [\"http://www.mydummycompany.com/images/item1.jpg\"],",
      "191:         )",
      "193:     def test_xmliter_namespaced_nodename_missing(self):",
      "194:         body = b\"\"\"",
      "195:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "198:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "214:         with self.assertRaises(StopIteration):",
      "215:             next(my_iter)",
      "217:     def test_xmliter_exception(self):",
      "218:         body = (",
      "219:             '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "223:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "227:         self.assertRaises(StopIteration, next, iter)",
      "229:     def test_xmliter_objtype_exception(self):",
      "230:         i = self.xmliter(42, \"product\")",
      "231:         self.assertRaises(TypeError, next, i)",
      "233:     def test_xmliter_encoding(self):",
      "234:         body = (",
      "235:             b'<?xml version=\"1.0\" encoding=\"ISO-8859-9\"?>\\n'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "236:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "241:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "244:         )",
      "254:     def test_xmliter_iterate_namespace(self):",
      "255:         body = b\"\"\"",
      "",
      "[Removed Lines]",
      "247: class LxmlXmliterTestCase(XmliterTestCase):",
      "248:     xmliter = staticmethod(xmliter_lxml)",
      "250:     @mark.xfail(reason=\"known bug of the current implementation\")",
      "251:     def test_xmliter_namespaced_nodename(self):",
      "252:         super().test_xmliter_namespaced_nodename()",
      "",
      "[Added Lines]",
      "256: class XmliterTestCase(XmliterBaseTestCase, unittest.TestCase):",
      "257:     xmliter = staticmethod(xmliter)",
      "259:     def test_deprecation(self):",
      "260:         body = b\"\"\"",
      "261:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "262:             <products>",
      "263:               <product></product>",
      "264:             </products>",
      "265:         \"\"\"",
      "266:         with pytest.warns(",
      "267:             ScrapyDeprecationWarning,",
      "268:             match=\"xmliter\",",
      "269:         ):",
      "270:             next(self.xmliter(body, \"product\"))",
      "273: class LxmlXmliterTestCase(XmliterBaseTestCase, unittest.TestCase):",
      "274:     xmliter = staticmethod(xmliter_lxml)",
      "",
      "---------------"
    ],
    "tests/test_utils_response.py||tests/test_utils_response.py": [
      "File: tests/test_utils_response.py -> tests/test_utils_response.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import unittest",
      "2: import warnings",
      "3: from pathlib import Path",
      "4: from urllib.parse import urlparse",
      "6: from scrapy.exceptions import ScrapyDeprecationWarning",
      "7: from scrapy.http import HtmlResponse, Response, TextResponse",
      "8: from scrapy.utils.python import to_bytes",
      "9: from scrapy.utils.response import (",
      "10:     get_base_url,",
      "11:     get_meta_refresh,",
      "12:     open_in_browser,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: from time import process_time",
      "7: import pytest",
      "13:     _remove_html_comments,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "198:         assert open_in_browser(",
      "199:             r5, _openfunc=check_base_url",
      "200:         ), \"Inject unique base url with conditional comment\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "206:     def test_open_in_browser_redos_comment(self):",
      "207:         MAX_CPU_TIME = 0.001",
      "209:         # Exploit input from",
      "210:         # https://makenowjust-labs.github.io/recheck/playground/",
      "211:         # for /<!--.*?-->/ (old pattern to remove comments).",
      "212:         body = b\"-><!--\\x00\" * 25_000 + b\"->\\n<!---->\"",
      "214:         response = HtmlResponse(\"https://example.com\", body=body)",
      "216:         start_time = process_time()",
      "218:         open_in_browser(response, lambda url: True)",
      "220:         end_time = process_time()",
      "221:         self.assertLess(end_time - start_time, MAX_CPU_TIME)",
      "223:     def test_open_in_browser_redos_head(self):",
      "224:         MAX_CPU_TIME = 0.001",
      "226:         # Exploit input from",
      "227:         # https://makenowjust-labs.github.io/recheck/playground/",
      "228:         # for /(<head(?:>|\\s.*?>))/ (old pattern to find the head element).",
      "229:         body = b\"<head\\t\" * 8_000",
      "231:         response = HtmlResponse(\"https://example.com\", body=body)",
      "233:         start_time = process_time()",
      "235:         open_in_browser(response, lambda url: True)",
      "237:         end_time = process_time()",
      "238:         self.assertLess(end_time - start_time, MAX_CPU_TIME)",
      "241: @pytest.mark.parametrize(",
      "242:     \"input_body,output_body\",",
      "243:     (",
      "244:         (",
      "245:             b\"a<!--\",",
      "246:             b\"a\",",
      "247:         ),",
      "248:         (",
      "249:             b\"a<!---->b\",",
      "250:             b\"ab\",",
      "251:         ),",
      "252:         (",
      "253:             b\"a<!--b-->c\",",
      "254:             b\"ac\",",
      "255:         ),",
      "256:         (",
      "257:             b\"a<!--b-->c<!--\",",
      "258:             b\"ac\",",
      "259:         ),",
      "260:         (",
      "261:             b\"a<!--b-->c<!--d\",",
      "262:             b\"ac\",",
      "263:         ),",
      "264:         (",
      "265:             b\"a<!--b-->c<!---->d\",",
      "266:             b\"acd\",",
      "267:         ),",
      "268:         (",
      "269:             b\"a<!--b--><!--c-->d\",",
      "270:             b\"ad\",",
      "271:         ),",
      "272:     ),",
      "273: )",
      "274: def test_remove_html_comments(input_body, output_body):",
      "275:     assert (",
      "276:         _remove_html_comments(input_body) == output_body",
      "277:     ), f\"{_remove_html_comments(input_body)=} == {output_body=}\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3fda2fe103dafa8d4d48b21c63b2321ccec9c378",
      "candidate_info": {
        "commit_hash": "3fda2fe103dafa8d4d48b21c63b2321ccec9c378",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/3fda2fe103dafa8d4d48b21c63b2321ccec9c378",
        "files": [
          "scrapy/spiders/sitemap.py",
          "tests/test_spider.py"
        ],
        "message": "Protect against gzip bomb sitemaps",
        "before_after_code_files": [
          "scrapy/spiders/sitemap.py||scrapy/spiders/sitemap.py",
          "tests/test_spider.py||tests/test_spider.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [
            "tests/test_spider.py||tests/test_spider.py"
          ],
          "candidate": [
            "tests/test_spider.py||tests/test_spider.py"
          ]
        }
      },
      "candidate_diff": {
        "scrapy/spiders/sitemap.py||scrapy/spiders/sitemap.py": [
          "File: scrapy/spiders/sitemap.py -> scrapy/spiders/sitemap.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: from scrapy.http import Request, XmlResponse",
          "5: from scrapy.spiders import Spider",
          "6: from scrapy.utils.gz import gunzip, gzip_magic_number",
          "7: from scrapy.utils.sitemap import Sitemap, sitemap_urls_from_robots",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: from scrapy.utils._compression import _DecompressionMaxSizeExceeded",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:         if isinstance(response, XmlResponse):",
          "72:             return response.body",
          "73:         if gzip_magic_number(response):",
          "75:         # actual gzipped sitemap files are decompressed above ;",
          "76:         # if we are here (response body is not gzipped)",
          "77:         # and have a response for .xml.gz,",
          "",
          "[Removed Lines]",
          "74:             return gunzip(response.body)",
          "",
          "[Added Lines]",
          "75:             try:",
          "76:                 return gunzip(",
          "77:                     response.body, max_size=self.settings.getint(\"DOWNLOAD_MAXSIZE\")",
          "78:                 )",
          "79:             except _DecompressionMaxSizeExceeded:",
          "80:                 return None",
          "",
          "---------------"
        ],
        "tests/test_spider.py||tests/test_spider.py": [
          "File: tests/test_spider.py -> tests/test_spider.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import inspect",
          "3: import warnings",
          "4: from io import BytesIO",
          "5: from typing import Any",
          "6: from unittest import mock",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: from pathlib import Path",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: )",
          "26: from scrapy.spiders.init import InitSpider",
          "27: from scrapy.utils.test import get_crawler",
          "31: class SpiderTest(unittest.TestCase):",
          "",
          "[Removed Lines]",
          "28: from tests import get_testdata",
          "",
          "[Added Lines]",
          "29: from tests import get_testdata, tests_datadir",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "489:     GZBODY = f.getvalue()",
          "491:     def assertSitemapBody(self, response, body):",
          "493:         self.assertEqual(spider._get_sitemap_body(response), body)",
          "495:     def test_get_sitemap_body(self):",
          "",
          "[Removed Lines]",
          "492:         spider = self.spider_class(\"example.com\")",
          "",
          "[Added Lines]",
          "493:         crawler = get_crawler()",
          "494:         spider = self.spider_class.from_crawler(crawler, \"example.com\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "692:             [\"http://www.example.com/sitemap2.xml\"],",
          "693:         )",
          "696: class DeprecationTest(unittest.TestCase):",
          "697:     def test_crawl_spider(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "697:     def test_compression_bomb(self):",
          "698:         settings = {\"DOWNLOAD_MAXSIZE\": 10_000_000}",
          "699:         crawler = get_crawler(settings_dict=settings)",
          "700:         spider = self.spider_class.from_crawler(crawler, \"example.com\")",
          "701:         body_path = Path(tests_datadir, \"compressed\", \"bomb-gzip.bin\")",
          "702:         body = body_path.read_bytes()",
          "703:         response = Response(url=\"https://example.com\", body=body)",
          "704:         self.assertIsNone(spider._get_sitemap_body(response))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce9d290eff8b5992023ffa5e833881b83a0669c3",
      "candidate_info": {
        "commit_hash": "ce9d290eff8b5992023ffa5e833881b83a0669c3",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/ce9d290eff8b5992023ffa5e833881b83a0669c3",
        "files": [
          "docs/news.rst",
          "scrapy/utils/iterators.py"
        ],
        "message": "Remove the lxml version check for huge_tree on xmliter_lxml\n\niterparse supports the option since lxml 2.2.1, it was the HTML parser that only got it in 4.2",
        "before_after_code_files": [
          "scrapy/utils/iterators.py||scrapy/utils/iterators.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [
            "scrapy/utils/iterators.py||scrapy/utils/iterators.py"
          ],
          "candidate": [
            "scrapy/utils/iterators.py||scrapy/utils/iterators.py"
          ]
        }
      },
      "candidate_diff": {
        "scrapy/utils/iterators.py||scrapy/utils/iterators.py": [
          "File: scrapy/utils/iterators.py -> scrapy/utils/iterators.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: from warnings import warn",
          "21: from lxml import etree",
          "24: from scrapy.exceptions import ScrapyDeprecationWarning",
          "25: from scrapy.http import Response, TextResponse",
          "",
          "[Removed Lines]",
          "22: from packaging.version import Version",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: logger = logging.getLogger(__name__)",
          "41: def xmliter(",
          "42:     obj: Union[Response, str, bytes], nodename: str",
          "",
          "[Removed Lines]",
          "34: _LXML_VERSION = Version(etree.__version__)",
          "35: _LXML_HUGE_TREE_VERSION = Version(\"4.2\")",
          "36: _ITERPARSE_KWARGS = {}",
          "37: if _LXML_VERSION >= _LXML_HUGE_TREE_VERSION:",
          "38:     _ITERPARSE_KWARGS[\"huge_tree\"] = True",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:         reader,",
          "109:         encoding=reader.encoding,",
          "110:         events=(\"end\", \"start-ns\"),",
          "112:     )",
          "113:     selxpath = \"//\" + (f\"{prefix}:{nodename}\" if namespace else nodename)",
          "114:     needs_namespace_resolution = not namespace and \":\" in nodename",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:         huge_tree=True,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e4fb0bc5fc066136b171ce488599b1ddd64c83a",
      "candidate_info": {
        "commit_hash": "5e4fb0bc5fc066136b171ce488599b1ddd64c83a",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/5e4fb0bc5fc066136b171ce488599b1ddd64c83a",
        "files": [
          ".github/workflows/checks.yml",
          ".github/workflows/publish.yml",
          ".github/workflows/tests-ubuntu.yml",
          "scrapy/contracts/__init__.py",
          "tests/requirements.txt",
          "tox.ini"
        ],
        "message": "Re-enable uvloop tests on 3.12 (#6098)",
        "before_after_code_files": [
          "scrapy/contracts/__init__.py||scrapy/contracts/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scrapy/contracts/__init__.py||scrapy/contracts/__init__.py": [
          "File: scrapy/contracts/__init__.py -> scrapy/contracts/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:                     cb_result = cb(response, **cb_kwargs)",
          "42:                     if isinstance(cb_result, (AsyncGenerator, CoroutineType)):",
          "43:                         raise TypeError(\"Contracts don't support async callbacks\")",
          "46:             request.callback = wrapper",
          "",
          "[Removed Lines]",
          "44:                     return list(iterate_spider_output(cb_result))",
          "",
          "[Added Lines]",
          "44:                     return list(  # pylint: disable=return-in-finally",
          "45:                         iterate_spider_output(cb_result)",
          "46:                     )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:                 else:",
          "69:                     results.addSuccess(self.testcase_post)",
          "70:                 finally:",
          "73:             request.callback = wrapper",
          "",
          "[Removed Lines]",
          "71:                     return output",
          "",
          "[Added Lines]",
          "73:                     return output  # pylint: disable=return-in-finally",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f72b49f975a406784779dc19ede31364f92235f",
      "candidate_info": {
        "commit_hash": "4f72b49f975a406784779dc19ede31364f92235f",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/4f72b49f975a406784779dc19ede31364f92235f",
        "files": [
          "scrapy/utils/iterators.py",
          "tests/test_utils_iterators.py"
        ],
        "message": "Fix namespaces nodename support for xmliter_lxml",
        "before_after_code_files": [
          "scrapy/utils/iterators.py||scrapy/utils/iterators.py",
          "tests/test_utils_iterators.py||tests/test_utils_iterators.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [
            "scrapy/utils/iterators.py||scrapy/utils/iterators.py",
            "tests/test_utils_iterators.py||tests/test_utils_iterators.py"
          ],
          "candidate": [
            "scrapy/utils/iterators.py||scrapy/utils/iterators.py",
            "tests/test_utils_iterators.py||tests/test_utils_iterators.py"
          ]
        }
      },
      "candidate_diff": {
        "scrapy/utils/iterators.py||scrapy/utils/iterators.py": [
          "File: scrapy/utils/iterators.py -> scrapy/utils/iterators.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     List,",
          "13:     Literal,",
          "14:     Optional,",
          "15:     Union,",
          "16:     cast,",
          "17:     overload,",
          "18: )",
          "20: from scrapy.http import Response, TextResponse",
          "21: from scrapy.selector import Selector",
          "22: from scrapy.utils.python import re_rsearch, to_unicode",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:     Tuple,",
          "21: from lxml import etree",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:         yield Selector(text=nodetext, type=\"xml\")",
          "80: def xmliter_lxml(",
          "81:     obj: Union[Response, str, bytes],",
          "82:     nodename: str,",
          "83:     namespace: Optional[str] = None,",
          "84:     prefix: str = \"x\",",
          "85: ) -> Generator[Selector, Any, None]:",
          "89:     tag = f\"{{{namespace}}}{nodename}\" if namespace else nodename",
          "90:     iterable = etree.iterparse(",
          "91:         cast(\"SupportsReadClose[bytes]\", reader), tag=tag, encoding=reader.encoding",
          "",
          "[Removed Lines]",
          "86:     from lxml import etree",
          "88:     reader = _StreamReader(obj)",
          "",
          "[Added Lines]",
          "83: def _resolve_xml_namespace(element_name: str, data: bytes) -> Tuple[str, str]:",
          "84:     if \":\" not in element_name:",
          "85:         return element_name, None, None",
          "86:     reader: \"SupportsReadClose[bytes]\" = _StreamReader(data)",
          "87:     node_prefix, element_name = element_name.split(\":\", maxsplit=1)",
          "88:     ns_iterator = etree.iterparse(",
          "89:         reader, encoding=reader.encoding, events=(\"start-ns\",)",
          "90:     )",
          "91:     for event, (_prefix, _namespace) in ns_iterator:",
          "92:         if _prefix != node_prefix:",
          "93:             continue",
          "94:         return element_name, _prefix, _namespace",
          "95:     return f\"{node_prefix}:{element_name}\", None, None",
          "104:     if not namespace:",
          "105:         nodename, prefix, namespace = _resolve_xml_namespace(nodename, obj)",
          "107:     reader: \"SupportsReadClose[bytes]\" = _StreamReader(obj)",
          "",
          "---------------"
        ],
        "tests/test_utils_iterators.py||tests/test_utils_iterators.py": [
          "File: tests/test_utils_iterators.py -> tests/test_utils_iterators.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from twisted.trial import unittest",
          "4: from scrapy.http import Response, TextResponse, XmlResponse",
          "",
          "[Removed Lines]",
          "1: from pytest import mark",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247: class LxmlXmliterTestCase(XmliterTestCase):",
          "248:     xmliter = staticmethod(xmliter_lxml)",
          "254:     def test_xmliter_iterate_namespace(self):",
          "255:         body = b\"\"\"",
          "256:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "",
          "[Removed Lines]",
          "250:     @mark.xfail(reason=\"known bug of the current implementation\")",
          "251:     def test_xmliter_namespaced_nodename(self):",
          "252:         super().test_xmliter_namespaced_nodename()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a113208a0643263fdd7198238bf9213f9148bc1a",
      "candidate_info": {
        "commit_hash": "a113208a0643263fdd7198238bf9213f9148bc1a",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/a113208a0643263fdd7198238bf9213f9148bc1a",
        "files": [
          "scrapy/utils/gz.py"
        ],
        "message": "Fix BytesIO non-emptiness check",
        "before_after_code_files": [
          "scrapy/utils/gz.py||scrapy/utils/gz.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scrapy/utils/gz.py||scrapy/utils/gz.py": [
          "File: scrapy/utils/gz.py -> scrapy/utils/gz.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:             # complete only if there is some data, otherwise re-raise",
          "24:             # see issue 87 about catching struct.error",
          "25:             # some pages are quite small so output_stream is empty",
          "27:                 break",
          "28:             raise",
          "29:         decompressed_size += len(chunk)",
          "",
          "[Removed Lines]",
          "26:             if output_stream:",
          "",
          "[Added Lines]",
          "26:             if output_stream.getbuffer().nbytes > 0:",
          "",
          "---------------"
        ]
      }
    }
  ]
}