{
  "cve_id": "CVE-2018-18240",
  "cve_desc": "Pippo through 1.11.0 allows remote code execution via a command to java.lang.ProcessBuilder because the XstreamEngine component does not use XStream's available protection mechanisms to restrict unmarshalling.",
  "repo": "pippo-java/pippo",
  "patch_hash": "c6b26551a82d2dd32097fcb17c13c3b830916296",
  "patch_info": {
    "commit_hash": "c6b26551a82d2dd32097fcb17c13c3b830916296",
    "repo": "pippo-java/pippo",
    "commit_url": "https://github.com/pippo-java/pippo/commit/c6b26551a82d2dd32097fcb17c13c3b830916296",
    "files": [
      "CHANGELOG.md",
      "pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java",
      "pippo-session-parent/pippo-session/src/main/java/ro/pippo/session/SerializationSessionDataTranscoder.java"
    ],
    "message": "Fix 458 (#470)\n\nThanks! I will come with small changes after merge.",
    "before_after_code_files": [
      "pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java||pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java",
      "pippo-session-parent/pippo-session/src/main/java/ro/pippo/session/SerializationSessionDataTranscoder.java||pippo-session-parent/pippo-session/src/main/java/ro/pippo/session/SerializationSessionDataTranscoder.java"
    ]
  },
  "patch_diff": {
    "pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java||pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java": [
      "File: pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java -> pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16: package ro.pippo.core.util;",
      "18: import java.io.IOException;",
      "19: import java.io.InputStream;",
      "20: import java.io.InvalidClassException;",
      "21: import java.io.ObjectInputStream;",
      "22: import java.io.ObjectStreamClass;",
      "23: import java.util.ArrayList;",
      "24: import java.util.Collections;",
      "25: import java.util.List;",
      "26: import java.util.Properties;",
      "28: import static ro.pippo.core.util.StringUtils.isNullOrEmpty;",
      "33: public class WhitelistObjectInputStream extends ObjectInputStream {",
      "34:     private static List<String> whiteClassNames = new ArrayList<String>();",
      "36:     public WhitelistObjectInputStream(InputStream in) throws IOException {",
      "37:         super(in);",
      "39:         whiteClassNames.add(\"ro.pippo.session.DefaultSessionData\");",
      "40:         whiteClassNames.add(\"java.util.HashMap\");",
      "41:         whiteClassNames.add(\"ro.pippo.core.Flash\");",
      "42:         whiteClassNames.add(\"java.util.ArrayList\");",
      "43:     }",
      "45:     protected Class<?> resolveClass(ObjectStreamClass descriptor) throws ClassNotFoundException, IOException {",
      "46:         String className = descriptor.getName();",
      "47:         if (isNullOrEmpty(className) && !isWhiteListed(className)) {",
      "48:             throw new InvalidClassException(\"Unauthorized deserialization attempt\", descriptor.getName());",
      "49:         } else {",
      "50:             return super.resolveClass(descriptor);",
      "51:         }",
      "52:     }",
      "54:     private boolean isWhiteListed(String className) {",
      "55:         for (Object name : whiteClassNames) {",
      "56:             if (name.equals(className)) return true;",
      "57:         }",
      "58:         return false;",
      "59:     }",
      "64:     static void loadWhitelist() {",
      "65:         Properties whitelistProperties = new Properties();",
      "66:         InputStream stream = null;",
      "67:         try {",
      "68:             stream =  WhitelistObjectInputStream.class.getResourceAsStream(\"src/main/resources/pippo/whitelist-serialization.txt\");",
      "69:             whitelistProperties.load(stream);",
      "70:         } catch (IOException e) {",
      "71:             throw new RuntimeException(\"Error loading the whitelist-serialization.properties file\", e);",
      "72:         } finally {",
      "73:             if (stream != null) {",
      "74:                 try {",
      "75:                     stream.close();",
      "76:                 } catch (IOException e) {",
      "77:                     throw new RuntimeException(\"Error closing the resource-serialization.properties file\", e);",
      "78:                 }",
      "79:             }",
      "80:         }",
      "81:         Collections.addAll(whiteClassNames, whitelistProperties.getProperty(\"whitelist\").split(\",\"));",
      "82:     }",
      "83: }",
      "",
      "---------------"
    ],
    "pippo-session-parent/pippo-session/src/main/java/ro/pippo/session/SerializationSessionDataTranscoder.java||pippo-session-parent/pippo-session/src/main/java/ro/pippo/session/SerializationSessionDataTranscoder.java": [
      "File: pippo-session-parent/pippo-session/src/main/java/ro/pippo/session/SerializationSessionDataTranscoder.java -> pippo-session-parent/pippo-session/src/main/java/ro/pippo/session/SerializationSessionDataTranscoder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package ro.pippo.session;",
      "18: import ro.pippo.core.PippoRuntimeException;",
      "20: import java.io.ByteArrayInputStream;",
      "21: import java.io.ByteArrayOutputStream;",
      "22: import java.io.IOException;",
      "24: import java.io.ObjectOutputStream;",
      "25: import java.util.Base64;",
      "",
      "[Removed Lines]",
      "23: import java.io.ObjectInputStream;",
      "",
      "[Added Lines]",
      "19: import ro.pippo.core.util.WhitelistObjectInputStream;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48:     public SessionData decode(String data) {",
      "49:         byte[] bytes = Base64.getDecoder().decode(data);",
      "50:         try (ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes);",
      "52:             return (SessionData) objectInputStream.readObject();",
      "53:         } catch (IOException | ClassNotFoundException e) {",
      "54:             throw new PippoRuntimeException(e, \"Cannot deserialize session. A new one will be created.\");",
      "",
      "[Removed Lines]",
      "51:                 ObjectInputStream objectInputStream = new ObjectInputStream(inputStream)) {",
      "",
      "[Added Lines]",
      "51:              WhitelistObjectInputStream objectInputStream = new WhitelistObjectInputStream(inputStream)) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3f1aacc72190881f83b9a456d09ae8354e00ff62",
      "candidate_info": {
        "commit_hash": "3f1aacc72190881f83b9a456d09ae8354e00ff62",
        "repo": "pippo-java/pippo",
        "commit_url": "https://github.com/pippo-java/pippo/commit/3f1aacc72190881f83b9a456d09ae8354e00ff62",
        "files": [
          "pippo-core/src/main/java/ro/pippo/core/PippoConstants.java",
          "pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java",
          "pippo-core/src/main/resources/pippo/whitelist-serialization.txt"
        ],
        "message": "Polishing #470",
        "before_after_code_files": [
          "pippo-core/src/main/java/ro/pippo/core/PippoConstants.java||pippo-core/src/main/java/ro/pippo/core/PippoConstants.java",
          "pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java||pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java||pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java"
          ],
          "candidate": [
            "pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java||pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java"
          ]
        }
      },
      "candidate_diff": {
        "pippo-core/src/main/java/ro/pippo/core/PippoConstants.java||pippo-core/src/main/java/ro/pippo/core/PippoConstants.java": [
          "File: pippo-core/src/main/java/ro/pippo/core/PippoConstants.java -> pippo-core/src/main/java/ro/pippo/core/PippoConstants.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     public static final String LOCATION_OF_PIPPO_BUILTIN_PROPERTIES = \"pippo/pippo-builtin.properties\";",
          "26:     public static final String LOCATION_OF_PIPPO_CLASSPATH_PROPERTIES = \"conf/application.properties\";",
          "28:     public static final String APPLICATION_PROPERTIES = \"application.properties\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:     public static final String LOCATION_OF_PIPPO_WHITELIST_SERIALIZATION = \"/pippo/whitelist-serialization.txt\";",
          "",
          "---------------"
        ],
        "pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java||pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java": [
          "File: pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java -> pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "16: package ro.pippo.core.util;",
          "18: import java.io.IOException;",
          "19: import java.io.InputStream;",
          "20: import java.io.InvalidClassException;",
          "21: import java.io.ObjectInputStream;",
          "22: import java.io.ObjectStreamClass;",
          "23: import java.util.ArrayList;",
          "24: import java.util.Collections;",
          "25: import java.util.List;",
          "26: import java.util.Properties;",
          "28: import static ro.pippo.core.util.StringUtils.isNullOrEmpty;",
          "33: public class WhitelistObjectInputStream extends ObjectInputStream {",
          "34:     private static List<String> whiteClassNames = new ArrayList<String>();",
          "36:     public WhitelistObjectInputStream(InputStream in) throws IOException {",
          "37:         super(in);",
          "39:         whiteClassNames.add(\"ro.pippo.session.DefaultSessionData\");",
          "40:         whiteClassNames.add(\"java.util.HashMap\");",
          "41:         whiteClassNames.add(\"ro.pippo.core.Flash\");",
          "42:         whiteClassNames.add(\"java.util.ArrayList\");",
          "43:     }",
          "45:     protected Class<?> resolveClass(ObjectStreamClass descriptor) throws ClassNotFoundException, IOException {",
          "46:         String className = descriptor.getName();",
          "47:         if (isNullOrEmpty(className) && !isWhiteListed(className)) {",
          "48:             throw new InvalidClassException(\"Unauthorized deserialization attempt\", descriptor.getName());",
          "49:         } else {",
          "50:             return super.resolveClass(descriptor);",
          "51:         }",
          "52:     }",
          "54:     private boolean isWhiteListed(String className) {",
          "55:         for (Object name : whiteClassNames) {",
          "56:             if (name.equals(className)) return true;",
          "57:         }",
          "58:         return false;",
          "59:     }",
          "64:     static void loadWhitelist() {",
          "65:         Properties whitelistProperties = new Properties();",
          "66:         InputStream stream = null;",
          "67:         try {",
          "68:             stream =  WhitelistObjectInputStream.class.getResourceAsStream(\"src/main/resources/pippo/whitelist-serialization.txt\");",
          "69:             whitelistProperties.load(stream);",
          "70:         } catch (IOException e) {",
          "71:             throw new RuntimeException(\"Error loading the whitelist-serialization.properties file\", e);",
          "72:         } finally {",
          "73:             if (stream != null) {",
          "74:                 try {",
          "75:                     stream.close();",
          "76:                 } catch (IOException e) {",
          "77:                     throw new RuntimeException(\"Error closing the resource-serialization.properties file\", e);",
          "78:                 }",
          "79:             }",
          "80:         }",
          "81:         Collections.addAll(whiteClassNames, whitelistProperties.getProperty(\"whitelist\").split(\",\"));",
          "82:     }",
          "83: }",
          "",
          "[Added Lines]",
          "16: package ro.pippo.core.util;",
          "18: import ro.pippo.core.PippoConstants;",
          "20: import java.io.IOException;",
          "21: import java.io.InputStream;",
          "22: import java.io.InvalidClassException;",
          "23: import java.io.ObjectInputStream;",
          "24: import java.io.ObjectStreamClass;",
          "25: import java.util.ArrayList;",
          "26: import java.util.List;",
          "33: public class WhitelistObjectInputStream extends ObjectInputStream {",
          "35:     private static List<String> whiteClassNames;",
          "37:     static {",
          "38:         loadWhitelist(WhitelistObjectInputStream.class.getResourceAsStream(PippoConstants.LOCATION_OF_PIPPO_WHITELIST_SERIALIZATION));",
          "39:     }",
          "41:     public WhitelistObjectInputStream(InputStream in) throws IOException {",
          "42:         super(in);",
          "43:     }",
          "45:     protected Class<?> resolveClass(ObjectStreamClass descriptor) throws ClassNotFoundException, IOException {",
          "46:         String className = descriptor.getName();",
          "47:         if (!isWhiteListed(className)) {",
          "48:             throw new InvalidClassException(\"Unauthorized deserialization attempt\", className);",
          "49:         }",
          "51:         return super.resolveClass(descriptor);",
          "52:     }",
          "54:     private boolean isWhiteListed(String className) {",
          "55:         for (String name : whiteClassNames) {",
          "56:             if (name.equals(className)) {",
          "57:                 return true;",
          "58:             }",
          "59:         }",
          "61:         return false;",
          "62:     }",
          "79:     private static void loadWhitelist(InputStream input) {",
          "80:         String content;",
          "81:         try {",
          "82:             content = IoUtils.toString(input);",
          "83:         } catch (IOException e) {",
          "84:             throw new RuntimeException(\"Error loading the whitelist input\", e);",
          "85:         }",
          "87:         whiteClassNames = new ArrayList<>();",
          "89:         String[] lines = content.split(\"[\\\\r\\\\n]+\");",
          "90:         for (String line : lines) {",
          "91:             if (line.startsWith(\"#\")) {",
          "93:                 continue;",
          "94:             }",
          "96:             addWhiteClassName(line);",
          "97:         }",
          "98:     }",
          "100:     private static void addWhiteClassName(String className) {",
          "101:         whiteClassNames.add(className);",
          "102:     }",
          "104: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "33c4c7b8c20b7c06a9e3700446f5759a030db23a",
      "candidate_info": {
        "commit_hash": "33c4c7b8c20b7c06a9e3700446f5759a030db23a",
        "repo": "pippo-java/pippo",
        "commit_url": "https://github.com/pippo-java/pippo/commit/33c4c7b8c20b7c06a9e3700446f5759a030db23a",
        "files": [
          "pippo-content-type-parent/pippo-xstream/src/main/java/ro/pippo/xstream/XstreamEngine.java",
          "pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java"
        ],
        "message": "Polishing #472",
        "before_after_code_files": [
          "pippo-content-type-parent/pippo-xstream/src/main/java/ro/pippo/xstream/XstreamEngine.java||pippo-content-type-parent/pippo-xstream/src/main/java/ro/pippo/xstream/XstreamEngine.java",
          "pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java||pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java||pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java"
          ],
          "candidate": [
            "pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java||pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java"
          ]
        }
      },
      "candidate_diff": {
        "pippo-content-type-parent/pippo-xstream/src/main/java/ro/pippo/xstream/XstreamEngine.java||pippo-content-type-parent/pippo-xstream/src/main/java/ro/pippo/xstream/XstreamEngine.java": [
          "File: pippo-content-type-parent/pippo-xstream/src/main/java/ro/pippo/xstream/XstreamEngine.java -> pippo-content-type-parent/pippo-xstream/src/main/java/ro/pippo/xstream/XstreamEngine.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package ro.pippo.xstream;",
          "18: import org.kohsuke.MetaInfServices;",
          "19: import ro.pippo.core.Application;",
          "20: import ro.pippo.core.ContentTypeEngine;",
          "21: import ro.pippo.core.HttpConstants;",
          "24: import ro.pippo.core.util.WhitelistObjectInputStream;",
          "",
          "[Removed Lines]",
          "23: import com.thoughtworks.xstream.XStream;",
          "26: import java.util.regex.Pattern;",
          "",
          "[Added Lines]",
          "18: import com.thoughtworks.xstream.XStream;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     private XStream xstream() {",
          "46:         XStream xstream = new XStream();",
          "48:         xstream.autodetectAnnotations(true);",
          "50:         xstream.setMode(XStream.NO_REFERENCES);",
          "55:         return xstream;",
          "56:     }",
          "",
          "[Removed Lines]",
          "53:         xstream.allowTypes((String[]) WhitelistObjectInputStream.getWhitelistedClassNames().toArray());",
          "54:         xstream.allowTypesByRegExp((Pattern[]) WhitelistObjectInputStream.getWhitelistedRegExp().toArray());",
          "",
          "[Added Lines]",
          "52:         xstream.allowTypes(WhitelistObjectInputStream.getWhiteClassNames());",
          "53:         xstream.allowTypesByRegExp(WhitelistObjectInputStream.getWhiteRegEx());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:         return xstream().toXML(object);",
          "61:     }",
          "63:     @Override",
          "64:     public <T> T fromString(String content, Class<T> classOfT) {",
          "65:         return (T) xstream().fromXML(content);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:     @SuppressWarnings(\"unchecked\")",
          "",
          "---------------"
        ],
        "pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java||pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java": [
          "File: pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java -> pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.InvalidClassException;",
          "23: import java.io.ObjectInputStream;",
          "24: import java.io.ObjectStreamClass;",
          "27: import java.util.regex.Pattern;",
          "",
          "[Removed Lines]",
          "25: import java.util.ArrayList;",
          "26: import java.util.List;",
          "",
          "[Added Lines]",
          "25: import java.util.HashSet;",
          "26: import java.util.Set;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: public class WhitelistObjectInputStream extends ObjectInputStream {",
          "39:     static {",
          "40:         loadWhitelist(WhitelistObjectInputStream.class.getResourceAsStream(PippoConstants.LOCATION_OF_PIPPO_WHITELIST_SERIALIZATION));",
          "",
          "[Removed Lines]",
          "36:     private static List<String> whiteClassNames;",
          "37:     private static List<Pattern> whiteRegExp;",
          "",
          "[Added Lines]",
          "36:     private static Set<String> whiteClassNames;",
          "37:     private static Set<Pattern> whiteRegEx;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     protected Class<?> resolveClass(ObjectStreamClass descriptor) throws ClassNotFoundException, IOException {",
          "48:         String className = descriptor.getName();",
          "50:             throw new InvalidClassException(\"Unauthorized deserialization attempt\", className);",
          "51:         }",
          "53:         return super.resolveClass(descriptor);",
          "54:     }",
          "57:         for (String name : whiteClassNames) {",
          "58:             if (name.equals(className)) {",
          "59:                 return true;",
          "60:             }",
          "61:         }",
          "68:             if (pattern.matcher(className).matches()) {",
          "69:                 return true;",
          "70:             }",
          "",
          "[Removed Lines]",
          "49:         if ((!isWhiteListed(className)) && (!isWhiteListedRegex(className))) {",
          "56:     private boolean isWhiteListed(String className) {",
          "63:         return false;",
          "64:     }",
          "66:     private boolean isWhiteListedRegex(String className) {",
          "67:         for (Pattern pattern : whiteRegExp) {",
          "",
          "[Added Lines]",
          "49:         if (!isWhiteClass(className)) {",
          "56:     private boolean isWhiteClass(String className) {",
          "65:         for (Pattern pattern : whiteRegEx) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "99:             throw new RuntimeException(\"Error loading the whitelist input\", e);",
          "100:         }",
          "104:         String[] lines = content.split(\"[\\\\r\\\\n]+\");",
          "105:         for (String line : lines) {",
          "106:             if (line.startsWith(\"#\")) {",
          "108:                 continue;",
          "111:             }",
          "114:         }",
          "115:     }",
          "",
          "[Removed Lines]",
          "102:         whiteClassNames = new ArrayList<>();",
          "109:             } else if (line.startsWith(\"/\") && (line.endsWith(\"/\"))) {",
          "110:                 addWhiteRegExp(Pattern.compile(line.substring(1, line.length() - 2)));",
          "113:             addWhiteClassName(line);",
          "",
          "[Added Lines]",
          "100:         whiteClassNames = new HashSet<>();",
          "101:         whiteRegEx = new HashSet<>();",
          "111:             if (line.startsWith(\">\")) {",
          "113:                 addWhiteRegEx(line.substring(1).trim());",
          "114:             } else {",
          "116:                 addWhiteClassName(line.trim());",
          "117:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "118:         whiteClassNames.add(className);",
          "119:     }",
          "123:     }",
          "131:     }",
          "139:     }",
          "141: }",
          "",
          "[Removed Lines]",
          "121:     private static void addWhiteRegExp(Pattern pattern) {",
          "122:         whiteRegExp.add(pattern);",
          "129:     public static List<String> getWhitelistedClassNames() {",
          "130:         return whiteClassNames;",
          "137:     public static List<Pattern> getWhitelistedRegExp() {",
          "138:         return whiteRegExp;",
          "",
          "[Added Lines]",
          "125:     private static void addWhiteRegEx(String regex) {",
          "126:         whiteRegEx.add(Pattern.compile(regex));",
          "134:     public static String[] getWhiteClassNames() {",
          "135:         return whiteClassNames.toArray(new String[0]);",
          "143:     public static Pattern[] getWhiteRegEx() {",
          "144:         return whiteRegEx.toArray(new Pattern[0]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b889ecc532fd273acd91b15ebb5d1c3851099eb",
      "candidate_info": {
        "commit_hash": "0b889ecc532fd273acd91b15ebb5d1c3851099eb",
        "repo": "pippo-java/pippo",
        "commit_url": "https://github.com/pippo-java/pippo/commit/0b889ecc532fd273acd91b15ebb5d1c3851099eb",
        "files": [
          "pippo-content-type-parent/pippo-xstream/pom.xml",
          "pippo-content-type-parent/pippo-xstream/src/main/java/ro/pippo/xstream/XstreamEngine.java",
          "pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java"
        ],
        "message": "Fix 454 (#472)",
        "before_after_code_files": [
          "pippo-content-type-parent/pippo-xstream/src/main/java/ro/pippo/xstream/XstreamEngine.java||pippo-content-type-parent/pippo-xstream/src/main/java/ro/pippo/xstream/XstreamEngine.java",
          "pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java||pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java||pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java"
          ],
          "candidate": [
            "pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java||pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java"
          ]
        }
      },
      "candidate_diff": {
        "pippo-content-type-parent/pippo-xstream/src/main/java/ro/pippo/xstream/XstreamEngine.java||pippo-content-type-parent/pippo-xstream/src/main/java/ro/pippo/xstream/XstreamEngine.java": [
          "File: pippo-content-type-parent/pippo-xstream/src/main/java/ro/pippo/xstream/XstreamEngine.java -> pippo-content-type-parent/pippo-xstream/src/main/java/ro/pippo/xstream/XstreamEngine.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import ro.pippo.core.HttpConstants;",
          "23: import com.thoughtworks.xstream.XStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import ro.pippo.core.util.WhitelistObjectInputStream;",
          "26: import java.util.regex.Pattern;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:         xstream.autodetectAnnotations(true);",
          "47:         xstream.setMode(XStream.NO_REFERENCES);",
          "48:         return xstream;",
          "49:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:         xstream.allowTypes((String[]) WhitelistObjectInputStream.getWhitelistedClassNames().toArray());",
          "54:         xstream.allowTypesByRegExp((Pattern[]) WhitelistObjectInputStream.getWhitelistedRegExp().toArray());",
          "",
          "---------------"
        ],
        "pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java||pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java": [
          "File: pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java -> pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import java.io.ObjectStreamClass;",
          "25: import java.util.ArrayList;",
          "26: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import java.util.regex.Pattern;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: public class WhitelistObjectInputStream extends ObjectInputStream {",
          "35:     private static List<String> whiteClassNames;",
          "37:     static {",
          "38:         loadWhitelist(WhitelistObjectInputStream.class.getResourceAsStream(PippoConstants.LOCATION_OF_PIPPO_WHITELIST_SERIALIZATION));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:     private static List<Pattern> whiteRegExp;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:     protected Class<?> resolveClass(ObjectStreamClass descriptor) throws ClassNotFoundException, IOException {",
          "46:         String className = descriptor.getName();",
          "48:             throw new InvalidClassException(\"Unauthorized deserialization attempt\", className);",
          "49:         }",
          "",
          "[Removed Lines]",
          "47:         if (!isWhiteListed(className)) {",
          "",
          "[Added Lines]",
          "49:         if ((!isWhiteListed(className)) && (!isWhiteListedRegex(className))) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "61:         return false;",
          "62:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     private boolean isWhiteListedRegex(String className) {",
          "67:         for (Pattern pattern : whiteRegExp) {",
          "68:             if (pattern.matcher(className).matches()) {",
          "69:                 return true;",
          "70:             }",
          "71:         }",
          "73:         return false;",
          "74:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "91:             if (line.startsWith(\"#\")) {",
          "93:                 continue;",
          "94:             }",
          "96:             addWhiteClassName(line);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:             } else if (line.startsWith(\"/\") && (line.endsWith(\"/\"))) {",
          "110:                 addWhiteRegExp(Pattern.compile(line.substring(1, line.length() - 2)));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "101:         whiteClassNames.add(className);",
          "102:     }",
          "104: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:     private static void addWhiteRegExp(Pattern pattern) {",
          "122:         whiteRegExp.add(pattern);",
          "123:     }",
          "129:     public static List<String> getWhitelistedClassNames() {",
          "130:         return whiteClassNames;",
          "131:     }",
          "137:     public static List<Pattern> getWhitelistedRegExp() {",
          "138:         return whiteRegExp;",
          "139:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}