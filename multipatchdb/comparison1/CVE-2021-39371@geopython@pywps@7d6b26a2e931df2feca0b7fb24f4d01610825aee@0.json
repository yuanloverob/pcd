{
  "cve_id": "CVE-2021-39371",
  "cve_desc": "An XML external entity (XXE) injection in PyWPS before 4.4.5 allows an attacker to view files on the application server filesystem by assigning a path to the entity. OWSLib 0.24.1 may also be affected.",
  "repo": "geopython/pywps",
  "patch_hash": "7d6b26a2e931df2feca0b7fb24f4d01610825aee",
  "patch_info": {
    "commit_hash": "7d6b26a2e931df2feca0b7fb24f4d01610825aee",
    "repo": "geopython/pywps",
    "commit_url": "https://github.com/geopython/pywps/commit/7d6b26a2e931df2feca0b7fb24f4d01610825aee",
    "files": [
      "pywps/app/WPSRequest.py",
      "pywps/exceptions.py",
      "pywps/inout/inputs.py",
      "pywps/inout/outputs.py",
      "pywps/tests.py",
      "pywps/validator/complexvalidator.py",
      "pywps/xml_util.py",
      "requirements.txt",
      "tests/test_capabilities.py",
      "tests/test_complexdata_io.py",
      "tests/test_exceptions.py",
      "tests/test_execute.py",
      "tests/test_formats.py",
      "tests/test_inout.py",
      "tests/test_ows.py",
      "tests/test_wpsrequest.py",
      "tests/test_xml_util.py"
    ],
    "message": "Merge pull request #616 from cehbrecht/fix-lxml-parser\n\nFix lxml default parser",
    "before_after_code_files": [
      "pywps/app/WPSRequest.py||pywps/app/WPSRequest.py",
      "pywps/exceptions.py||pywps/exceptions.py",
      "pywps/inout/inputs.py||pywps/inout/inputs.py",
      "pywps/inout/outputs.py||pywps/inout/outputs.py",
      "pywps/tests.py||pywps/tests.py",
      "pywps/validator/complexvalidator.py||pywps/validator/complexvalidator.py",
      "pywps/xml_util.py||pywps/xml_util.py",
      "tests/test_capabilities.py||tests/test_capabilities.py",
      "tests/test_complexdata_io.py||tests/test_complexdata_io.py",
      "tests/test_exceptions.py||tests/test_exceptions.py",
      "tests/test_execute.py||tests/test_execute.py",
      "tests/test_formats.py||tests/test_formats.py",
      "tests/test_inout.py||tests/test_inout.py",
      "tests/test_ows.py||tests/test_ows.py",
      "tests/test_wpsrequest.py||tests/test_wpsrequest.py",
      "tests/test_xml_util.py||tests/test_xml_util.py"
    ]
  },
  "patch_diff": {
    "pywps/app/WPSRequest.py||pywps/app/WPSRequest.py": [
      "File: pywps/app/WPSRequest.py -> pywps/app/WPSRequest.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: import logging",
      "7: import lxml",
      "9: from werkzeug.exceptions import MethodNotAllowed",
      "10: from pywps import get_ElementMakerForVersion",
      "11: import base64",
      "",
      "[Removed Lines]",
      "8: import lxml.etree",
      "",
      "[Added Lines]",
      "8: from pywps import xml_util as etree",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "85:                                    ' Maximum request size allowed: {} megabytes'.format(maxsize / 1024 / 1024))",
      "87:         try:",
      "89:         except Exception as e:",
      "90:             raise NoApplicableCode(e.msg)",
      "",
      "[Removed Lines]",
      "88:             doc = lxml.etree.fromstring(self.http_request.get_data())",
      "",
      "[Added Lines]",
      "88:             doc = etree.fromstring(self.http_request.get_data())",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "571:     \"\"\"",
      "573:     if isinstance(value_el, lxml.etree._Element):",
      "575:     else:",
      "576:         return value_el",
      "",
      "[Removed Lines]",
      "574:         return lxml.etree.tostring(value_el, encoding=str)",
      "",
      "[Added Lines]",
      "574:         return etree.tostring(value_el, encoding=str)",
      "",
      "---------------"
    ],
    "pywps/exceptions.py||pywps/exceptions.py": [
      "File: pywps/exceptions.py -> pywps/exceptions.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: from werkzeug.wrappers import Response",
      "16: from werkzeug.exceptions import HTTPException",
      "19: import logging",
      "",
      "[Removed Lines]",
      "17: from werkzeug.utils import escape",
      "",
      "[Added Lines]",
      "17: from markupsafe import escape",
      "",
      "---------------"
    ],
    "pywps/inout/inputs.py||pywps/inout/inputs.py": [
      "File: pywps/inout/inputs.py -> pywps/inout/inputs.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: ##################################################################",
      "6: import re",
      "9: from pywps.app.Common import Metadata",
      "10: from pywps.exceptions import InvalidParameterValue",
      "",
      "[Removed Lines]",
      "7: import lxml.etree as etree",
      "",
      "[Added Lines]",
      "7: from pywps import xml_util as etree",
      "",
      "---------------"
    ],
    "pywps/inout/outputs.py||pywps/inout/outputs.py": [
      "File: pywps/inout/outputs.py -> pywps/inout/outputs.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: WPS Output classes",
      "7: \"\"\"",
      "10: import os",
      "11: import re",
      "12: from pywps.app.Common import Metadata",
      "",
      "[Removed Lines]",
      "9: import lxml.etree as etree",
      "",
      "[Added Lines]",
      "9: from pywps import xml_util as etree",
      "",
      "---------------"
    ],
    "pywps/tests.py||pywps/tests.py": [
      "File: pywps/tests.py -> pywps/tests.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: import tempfile",
      "6: from pathlib import Path",
      "9: import requests",
      "10: from werkzeug.test import Client",
      "12: from pywps import __version__",
      "13: from pywps import Process",
      "14: from pywps.inout import LiteralInput, LiteralOutput, ComplexInput, ComplexOutput, BoundingBoxInput, BoundingBoxOutput",
      "",
      "[Removed Lines]",
      "8: import lxml.etree",
      "11: from werkzeug.wrappers import BaseResponse",
      "",
      "[Added Lines]",
      "8: import lxml",
      "9: from pywps import xml_util as etree",
      "12: from werkzeug.wrappers import Response",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "94:     def post_xml(self, *args, **kwargs):",
      "95:         doc = kwargs.pop('doc')",
      "97:         kwargs['data'] = data",
      "98:         return self.post(*args, **kwargs)",
      "103:     def __init__(self, *args):",
      "104:         super(WpsTestResponse, self).__init__(*args)",
      "105:         if re.match(r'text/xml(;\\s*charset=.*)?', self.headers.get('Content-Type')):",
      "108:     def xpath(self, path):",
      "109:         version = self.xml.attrib[\"version\"]",
      "",
      "[Removed Lines]",
      "96:         data = lxml.etree.tostring(doc, pretty_print=True)",
      "101: class WpsTestResponse(BaseResponse):",
      "106:             self.xml = lxml.etree.fromstring(self.get_data())",
      "",
      "[Added Lines]",
      "97:         data = etree.tostring(doc, pretty_print=True)",
      "102: class WpsTestResponse(Response):",
      "107:             self.xml = etree.fromstring(self.get_data())",
      "",
      "---------------"
    ],
    "pywps/validator/complexvalidator.py||pywps/validator/complexvalidator.py": [
      "File: pywps/validator/complexvalidator.py -> pywps/validator/complexvalidator.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "12: from pywps.validator.mode import MODE",
      "13: from pywps.inout.formats import FORMATS",
      "14: from urllib.request import urlopen",
      "15: import mimetypes",
      "16: import os",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: from lxml.etree import XMLSchema",
      "15: from pywps import xml_util as etree",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "61:             passed = False",
      "63:     if mode >= MODE.VERYSTRICT:",
      "67:         try:",
      "68:             schema_url = data_input.data_format.schema",
      "69:             gmlschema_doc = etree.parse(urlopen(schema_url))",
      "71:             passed = gmlschema.validate(etree.parse(data_input.stream))",
      "72:         except Exception as e:",
      "73:             LOGGER.warning(e)",
      "",
      "[Removed Lines]",
      "65:         from lxml import etree",
      "70:             gmlschema = etree.XMLSchema(gmlschema_doc)",
      "",
      "[Added Lines]",
      "69:             gmlschema = XMLSchema(gmlschema_doc)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "118:             passed = False",
      "120:     if mode >= MODE.VERYSTRICT:",
      "124:         try:",
      "125:             schema_url = data_input.data_format.schema",
      "126:             gpxschema_doc = etree.parse(urlopen(schema_url))",
      "128:             passed = gpxschema.validate(etree.parse(data_input.stream))",
      "129:         except Exception as e:",
      "130:             LOGGER.warning(e)",
      "",
      "[Removed Lines]",
      "122:         from lxml import etree",
      "127:             gpxschema = etree.XMLSchema(gpxschema_doc)",
      "",
      "[Added Lines]",
      "123:             gpxschema = XMLSchema(gpxschema_doc)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "164:         passed = data_input.data_format.mime_type in {mtype, FORMATS.GML.mime_type}",
      "166:     if mode >= MODE.STRICT:",
      "169:         # TODO: Raise the actual validation exception to make it easier to spot the error.",
      "170:         #  xml = etree.parse(data_input.file)",
      "171:         #  schema.assertValid(xml)",
      "172:         try:",
      "173:             fn = os.path.join(_get_schemas_home(), data_input.data_format.schema)",
      "174:             schema_doc = etree.parse(fn)",
      "176:             passed = schema.validate(etree.parse(data_input.file))",
      "177:         except Exception as e:",
      "178:             LOGGER.warning(e)",
      "",
      "[Removed Lines]",
      "167:         from lxml import etree",
      "175:             schema = etree.XMLSchema(schema_doc)",
      "",
      "[Added Lines]",
      "169:             schema = XMLSchema(schema_doc)",
      "",
      "---------------"
    ],
    "pywps/xml_util.py||pywps/xml_util.py": [
      "File: pywps/xml_util.py -> pywps/xml_util.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: from lxml import etree as _etree",
      "4: PARSER = _etree.XMLParser(",
      "5:     resolve_entities=False,",
      "6: )",
      "8: tostring = _etree.tostring",
      "11: def fromstring(text):",
      "12:     return _etree.fromstring(text, parser=PARSER)",
      "15: def parse(source):",
      "16:     return _etree.parse(source, parser=PARSER)",
      "",
      "---------------"
    ],
    "tests/test_capabilities.py||tests/test_capabilities.py": [
      "File: tests/test_capabilities.py -> tests/test_capabilities.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: ##################################################################",
      "6: import unittest",
      "9: from pywps import configuration",
      "10: from pywps.app import Process, Service",
      "11: from pywps.app.Common import Metadata",
      "12: from pywps import get_ElementMakerForVersion",
      "15: WPS, OWS = get_ElementMakerForVersion(\"1.0.0\")",
      "",
      "[Removed Lines]",
      "7: import lxml",
      "8: import lxml.etree",
      "13: from pywps.tests import assert_pywps_version, client_for, assert_wps_version",
      "",
      "[Added Lines]",
      "11: from pywps.tests import client_for, assert_wps_version",
      "",
      "---------------"
    ],
    "tests/test_complexdata_io.py||tests/test_complexdata_io.py": [
      "File: tests/test_complexdata_io.py -> tests/test_complexdata_io.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import unittest",
      "4: import os",
      "6: from pywps.app.basic import get_xpath_ns",
      "7: from pywps import Service, Process, ComplexInput, ComplexOutput, FORMATS",
      "8: from pywps.tests import client_for, assert_response_success",
      "9: from owslib.wps import WPSExecution, ComplexDataInput",
      "12: VERSION = \"1.0.0\"",
      "13: WPS, OWS = get_ElementMakerForVersion(VERSION)",
      "",
      "[Removed Lines]",
      "5: from pywps import get_ElementMakerForVersion, E",
      "10: from lxml import etree",
      "",
      "[Added Lines]",
      "5: from pywps import get_ElementMakerForVersion",
      "10: from pywps import xml_util as etree",
      "",
      "---------------"
    ],
    "tests/test_exceptions.py||tests/test_exceptions.py": [
      "File: tests/test_exceptions.py -> tests/test_exceptions.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: ##################################################################",
      "6: import unittest",
      "8: from pywps.app.basic import get_xpath_ns",
      "9: from pywps.tests import assert_pywps_version, client_for",
      "12: import re",
      "",
      "[Removed Lines]",
      "7: from pywps import Process, Service, get_ElementMakerForVersion",
      "10: import lxml.etree",
      "",
      "[Added Lines]",
      "7: from pywps import Service, get_ElementMakerForVersion",
      "",
      "---------------"
    ],
    "tests/test_execute.py||tests/test_execute.py": [
      "File: tests/test_execute.py -> tests/test_execute.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: import unittest",
      "7: import pytest",
      "9: import json",
      "10: import tempfile",
      "11: import os.path",
      "",
      "[Removed Lines]",
      "8: import lxml.etree",
      "",
      "[Added Lines]",
      "8: from pywps import xml_util as etree",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "13:     BoundingBoxOutput, BoundingBoxInput, Format, ComplexInput, ComplexOutput, FORMATS",
      "14: from pywps.validator.base import emptyvalidator",
      "15: from pywps.validator.complexvalidator import validategml",
      "17: from pywps.exceptions import InvalidParameterValue",
      "19: from pywps import E, get_ElementMakerForVersion",
      "20: from pywps.app.basic import get_xpath_ns",
      "21: from pywps.tests import client_for, assert_response_success",
      "22: from pywps import configuration",
      "24: from io import StringIO",
      "27: try:",
      "28:     import netCDF4",
      "",
      "[Removed Lines]",
      "16: from pywps.validator.mode import MODE",
      "18: from pywps import get_inputs_from_xml, get_output_from_xml",
      "25: from owslib.ows import BoundingBox",
      "",
      "[Added Lines]",
      "17: from pywps import get_inputs_from_xml",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "223:                 output[identifier_el.text] = data_el[0].text",
      "224:             else:  # XML children",
      "225:                 ch = list(data_el[0])[0]",
      "228:     return output",
      "",
      "[Removed Lines]",
      "226:                 output[identifier_el.text] = lxml.etree.tostring(ch)",
      "",
      "[Added Lines]",
      "224:                 output[identifier_el.text] = etree.tostring(ch)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "600:                         WPS.ComplexData(the_data, mimeType='text/foobar')))))",
      "601:         rv = get_inputs_from_xml(request_doc)",
      "602:         self.assertEqual(rv['name'][0]['mimeType'], 'text/foobar')",
      "604:         self.assertEqual(rv_doc.tag, 'TheData')",
      "605:         self.assertEqual(rv_doc.text, 'hello world')",
      "",
      "[Removed Lines]",
      "603:         rv_doc = lxml.etree.parse(StringIO(rv['name'][0]['data'])).getroot()",
      "",
      "[Added Lines]",
      "601:         rv_doc = etree.parse(StringIO(rv['name'][0]['data'])).getroot()",
      "",
      "---------------"
    ],
    "tests/test_formats.py||tests/test_formats.py": [
      "File: tests/test_formats.py -> tests/test_formats.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: import unittest",
      "10: from pywps.inout.formats import Format, get_format, FORMATS",
      "12: from pywps.app.basic import get_xpath_ns",
      "15: xpath_ns = get_xpath_ns(\"1.0.0\")",
      "",
      "[Removed Lines]",
      "11: from lxml import etree",
      "13: from pywps.validator.base import emptyvalidator",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "tests/test_inout.py||tests/test_inout.py": [
      "File: tests/test_inout.py -> tests/test_inout.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: import requests",
      "12: import os",
      "13: import tempfile",
      "15: import unittest",
      "16: import json",
      "17: from pywps import inout",
      "",
      "[Removed Lines]",
      "14: import datetime",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: from pywps.tests import service_ok",
      "36: from pywps.translations import get_translation",
      "40: DATA_DIR = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'data')",
      "",
      "[Removed Lines]",
      "38: from lxml import etree",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "tests/test_ows.py||tests/test_ows.py": [
      "File: tests/test_ows.py -> tests/test_ows.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: import os",
      "10: import tempfile",
      "11: import unittest",
      "14: from pywps import Service, Process, ComplexInput, ComplexOutput, Format, FORMATS, get_format",
      "15: from pywps.dependencies import ogr",
      "16: from pywps.exceptions import NoApplicableCode",
      "",
      "[Removed Lines]",
      "12: import lxml.etree",
      "13: import sys",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "tests/test_wpsrequest.py||tests/test_wpsrequest.py": [
      "File: tests/test_wpsrequest.py -> tests/test_wpsrequest.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: ##################################################################",
      "6: import unittest",
      "8: from pywps.app import WPSRequest",
      "9: import tempfile",
      "10: import datetime",
      "",
      "[Removed Lines]",
      "7: import lxml.etree",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "tests/test_xml_util.py||tests/test_xml_util.py": [
      "File: tests/test_xml_util.py -> tests/test_xml_util.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: from pywps import xml_util as etree",
      "3: from io import StringIO",
      "6: XML_EXECUTE = \"\"\"",
      "7: <!DOCTYPE foo [",
      "8:   <!ELEMENT foo ANY >",
      "9:   <!ENTITY xxe SYSTEM \"file:///PATH/TO/input.txt\">",
      "10: ]>",
      "11: <wps:Execute",
      "12:     service=\"WPS\"",
      "13:     version=\"1.0.0\"",
      "14:     xmlns:wps=\"http://www.opengis.net/wps/1.0.0\"",
      "15:     xmlns:ows=\"http://www.opengis.net/ows/1.1\"",
      "16:     xmlns:xlink=\"http://www.w3.org/1999/xlink\"",
      "17:     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
      "18:     xsi:schemaLocation=\"http://schemas.opengis.net/wps/1.0.0/wpsExecute_request.xsd\">",
      "19:     <ows:Identifier>test_process</ows:Identifier>",
      "20:     <wps:DataInputs>",
      "21:         <wps:Input>",
      "22:             <ows:Identifier>name</ows:Identifier>",
      "23:             <wps:Data>",
      "24:                 <wps:LiteralData>&xxe;</wps:LiteralData>",
      "25:             </wps:Data>",
      "26:         </wps:Input>",
      "27:     </wps:DataInputs>",
      "28:     <wps:ResponseForm>",
      "29:         <wps:ResponseDocument",
      "30:             storeExecuteResponse=\"true\"",
      "31:             status=\"true\">",
      "32:             <wps:Output asReference=\"false\">",
      "33:                 <ows:Identifier>output</ows:Identifier>",
      "34:             </wps:Output>",
      "35:         </wps:ResponseDocument>",
      "36:     </wps:ResponseForm>",
      "37: </wps:Execute>",
      "38: \"\"\"",
      "41: def test_etree_fromstring():",
      "42:     xml = etree.tostring(etree.fromstring(XML_EXECUTE))",
      "43:     # don't replace entities",
      "44:     # https://lxml.de/parsing.html",
      "45:     assert b\"<wps:LiteralData>&xxe;</wps:LiteralData>\" in xml",
      "48: def test_etree_parse():",
      "49:     xml = etree.tostring(etree.parse(StringIO(XML_EXECUTE)))",
      "50:     # don't replace entities",
      "51:     # https://lxml.de/parsing.html",
      "52:     assert b\"<wps:LiteralData>&xxe;</wps:LiteralData>\" in xml",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6896931b926d81b2debe8f907495dd742d705c6c",
      "candidate_info": {
        "commit_hash": "6896931b926d81b2debe8f907495dd742d705c6c",
        "repo": "geopython/pywps",
        "commit_url": "https://github.com/geopython/pywps/commit/6896931b926d81b2debe8f907495dd742d705c6c",
        "files": [
          "pywps/app/WPSRequest.py",
          "pywps/exceptions.py",
          "pywps/inout/inputs.py",
          "pywps/inout/outputs.py",
          "pywps/tests.py",
          "pywps/validator/complexvalidator.py",
          "pywps/xml_util.py",
          "requirements.txt",
          "tests/test_capabilities.py",
          "tests/test_complexdata_io.py",
          "tests/test_exceptions.py",
          "tests/test_execute.py",
          "tests/test_formats.py",
          "tests/test_inout.py",
          "tests/test_ows.py",
          "tests/test_wpsrequest.py",
          "tests/test_xml_util.py"
        ],
        "message": "Squashed commit of the following:\n\n    added test for xml_util\n\n    use xml_util\n\n    use werkzeug Response\n\n    use markupsafe",
        "before_after_code_files": [
          "pywps/app/WPSRequest.py||pywps/app/WPSRequest.py",
          "pywps/exceptions.py||pywps/exceptions.py",
          "pywps/inout/inputs.py||pywps/inout/inputs.py",
          "pywps/inout/outputs.py||pywps/inout/outputs.py",
          "pywps/tests.py||pywps/tests.py",
          "pywps/validator/complexvalidator.py||pywps/validator/complexvalidator.py",
          "pywps/xml_util.py||pywps/xml_util.py",
          "tests/test_capabilities.py||tests/test_capabilities.py",
          "tests/test_complexdata_io.py||tests/test_complexdata_io.py",
          "tests/test_exceptions.py||tests/test_exceptions.py",
          "tests/test_execute.py||tests/test_execute.py",
          "tests/test_formats.py||tests/test_formats.py",
          "tests/test_inout.py||tests/test_inout.py",
          "tests/test_ows.py||tests/test_ows.py",
          "tests/test_wpsrequest.py||tests/test_wpsrequest.py",
          "tests/test_xml_util.py||tests/test_xml_util.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/geopython/pywps/pull/616"
        ],
        "olp_code_files": {
          "patch": [
            "pywps/app/WPSRequest.py||pywps/app/WPSRequest.py",
            "pywps/exceptions.py||pywps/exceptions.py",
            "pywps/inout/inputs.py||pywps/inout/inputs.py",
            "pywps/inout/outputs.py||pywps/inout/outputs.py",
            "pywps/tests.py||pywps/tests.py",
            "pywps/validator/complexvalidator.py||pywps/validator/complexvalidator.py",
            "pywps/xml_util.py||pywps/xml_util.py",
            "tests/test_capabilities.py||tests/test_capabilities.py",
            "tests/test_complexdata_io.py||tests/test_complexdata_io.py",
            "tests/test_exceptions.py||tests/test_exceptions.py",
            "tests/test_execute.py||tests/test_execute.py",
            "tests/test_formats.py||tests/test_formats.py",
            "tests/test_inout.py||tests/test_inout.py",
            "tests/test_ows.py||tests/test_ows.py",
            "tests/test_wpsrequest.py||tests/test_wpsrequest.py",
            "tests/test_xml_util.py||tests/test_xml_util.py"
          ],
          "candidate": [
            "pywps/app/WPSRequest.py||pywps/app/WPSRequest.py",
            "pywps/exceptions.py||pywps/exceptions.py",
            "pywps/inout/inputs.py||pywps/inout/inputs.py",
            "pywps/inout/outputs.py||pywps/inout/outputs.py",
            "pywps/tests.py||pywps/tests.py",
            "pywps/validator/complexvalidator.py||pywps/validator/complexvalidator.py",
            "pywps/xml_util.py||pywps/xml_util.py",
            "tests/test_capabilities.py||tests/test_capabilities.py",
            "tests/test_complexdata_io.py||tests/test_complexdata_io.py",
            "tests/test_exceptions.py||tests/test_exceptions.py",
            "tests/test_execute.py||tests/test_execute.py",
            "tests/test_formats.py||tests/test_formats.py",
            "tests/test_inout.py||tests/test_inout.py",
            "tests/test_ows.py||tests/test_ows.py",
            "tests/test_wpsrequest.py||tests/test_wpsrequest.py",
            "tests/test_xml_util.py||tests/test_xml_util.py"
          ]
        }
      },
      "candidate_diff": {
        "pywps/app/WPSRequest.py||pywps/app/WPSRequest.py": [
          "File: pywps/app/WPSRequest.py -> pywps/app/WPSRequest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import logging",
          "7: import lxml",
          "9: from werkzeug.exceptions import MethodNotAllowed",
          "10: from pywps import get_ElementMakerForVersion",
          "11: import base64",
          "",
          "[Removed Lines]",
          "8: import lxml.etree",
          "",
          "[Added Lines]",
          "8: from pywps import xml_util as etree",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:                                    ' Maximum request size allowed: {} megabytes'.format(maxsize / 1024 / 1024))",
          "87:         try:",
          "89:         except Exception as e:",
          "90:             raise NoApplicableCode(e.msg)",
          "",
          "[Removed Lines]",
          "88:             doc = lxml.etree.fromstring(self.http_request.get_data())",
          "",
          "[Added Lines]",
          "88:             doc = etree.fromstring(self.http_request.get_data())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "571:     \"\"\"",
          "573:     if isinstance(value_el, lxml.etree._Element):",
          "575:     else:",
          "576:         return value_el",
          "",
          "[Removed Lines]",
          "574:         return lxml.etree.tostring(value_el, encoding=str)",
          "",
          "[Added Lines]",
          "574:         return etree.tostring(value_el, encoding=str)",
          "",
          "---------------"
        ],
        "pywps/exceptions.py||pywps/exceptions.py": [
          "File: pywps/exceptions.py -> pywps/exceptions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: from werkzeug.wrappers import Response",
          "16: from werkzeug.exceptions import HTTPException",
          "19: import logging",
          "",
          "[Removed Lines]",
          "17: from werkzeug.utils import escape",
          "",
          "[Added Lines]",
          "17: from markupsafe import escape",
          "",
          "---------------"
        ],
        "pywps/inout/inputs.py||pywps/inout/inputs.py": [
          "File: pywps/inout/inputs.py -> pywps/inout/inputs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: ##################################################################",
          "6: import re",
          "9: from pywps.app.Common import Metadata",
          "10: from pywps.exceptions import InvalidParameterValue",
          "",
          "[Removed Lines]",
          "7: import lxml.etree as etree",
          "",
          "[Added Lines]",
          "7: from pywps import xml_util as etree",
          "",
          "---------------"
        ],
        "pywps/inout/outputs.py||pywps/inout/outputs.py": [
          "File: pywps/inout/outputs.py -> pywps/inout/outputs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: WPS Output classes",
          "7: \"\"\"",
          "10: import os",
          "11: import re",
          "12: from pywps.app.Common import Metadata",
          "",
          "[Removed Lines]",
          "9: import lxml.etree as etree",
          "",
          "[Added Lines]",
          "9: from pywps import xml_util as etree",
          "",
          "---------------"
        ],
        "pywps/tests.py||pywps/tests.py": [
          "File: pywps/tests.py -> pywps/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import tempfile",
          "6: from pathlib import Path",
          "9: import requests",
          "10: from werkzeug.test import Client",
          "12: from pywps import __version__",
          "13: from pywps import Process",
          "14: from pywps.inout import LiteralInput, LiteralOutput, ComplexInput, ComplexOutput, BoundingBoxInput, BoundingBoxOutput",
          "",
          "[Removed Lines]",
          "8: import lxml.etree",
          "11: from werkzeug.wrappers import BaseResponse",
          "",
          "[Added Lines]",
          "8: import lxml",
          "9: from pywps import xml_util as etree",
          "12: from werkzeug.wrappers import Response",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:     def post_xml(self, *args, **kwargs):",
          "95:         doc = kwargs.pop('doc')",
          "97:         kwargs['data'] = data",
          "98:         return self.post(*args, **kwargs)",
          "103:     def __init__(self, *args):",
          "104:         super(WpsTestResponse, self).__init__(*args)",
          "105:         if re.match(r'text/xml(;\\s*charset=.*)?', self.headers.get('Content-Type')):",
          "108:     def xpath(self, path):",
          "109:         version = self.xml.attrib[\"version\"]",
          "",
          "[Removed Lines]",
          "96:         data = lxml.etree.tostring(doc, pretty_print=True)",
          "101: class WpsTestResponse(BaseResponse):",
          "106:             self.xml = lxml.etree.fromstring(self.get_data())",
          "",
          "[Added Lines]",
          "97:         data = etree.tostring(doc, pretty_print=True)",
          "102: class WpsTestResponse(Response):",
          "107:             self.xml = etree.fromstring(self.get_data())",
          "",
          "---------------"
        ],
        "pywps/validator/complexvalidator.py||pywps/validator/complexvalidator.py": [
          "File: pywps/validator/complexvalidator.py -> pywps/validator/complexvalidator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: from pywps.validator.mode import MODE",
          "13: from pywps.inout.formats import FORMATS",
          "14: from urllib.request import urlopen",
          "15: import mimetypes",
          "16: import os",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: from lxml.etree import XMLSchema",
          "15: from pywps import xml_util as etree",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:             passed = False",
          "63:     if mode >= MODE.VERYSTRICT:",
          "67:         try:",
          "68:             schema_url = data_input.data_format.schema",
          "69:             gmlschema_doc = etree.parse(urlopen(schema_url))",
          "71:             passed = gmlschema.validate(etree.parse(data_input.stream))",
          "72:         except Exception as e:",
          "73:             LOGGER.warning(e)",
          "",
          "[Removed Lines]",
          "65:         from lxml import etree",
          "70:             gmlschema = etree.XMLSchema(gmlschema_doc)",
          "",
          "[Added Lines]",
          "69:             gmlschema = XMLSchema(gmlschema_doc)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:             passed = False",
          "120:     if mode >= MODE.VERYSTRICT:",
          "124:         try:",
          "125:             schema_url = data_input.data_format.schema",
          "126:             gpxschema_doc = etree.parse(urlopen(schema_url))",
          "128:             passed = gpxschema.validate(etree.parse(data_input.stream))",
          "129:         except Exception as e:",
          "130:             LOGGER.warning(e)",
          "",
          "[Removed Lines]",
          "122:         from lxml import etree",
          "127:             gpxschema = etree.XMLSchema(gpxschema_doc)",
          "",
          "[Added Lines]",
          "123:             gpxschema = XMLSchema(gpxschema_doc)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "164:         passed = data_input.data_format.mime_type in {mtype, FORMATS.GML.mime_type}",
          "166:     if mode >= MODE.STRICT:",
          "169:         # TODO: Raise the actual validation exception to make it easier to spot the error.",
          "170:         #  xml = etree.parse(data_input.file)",
          "171:         #  schema.assertValid(xml)",
          "172:         try:",
          "173:             fn = os.path.join(_get_schemas_home(), data_input.data_format.schema)",
          "174:             schema_doc = etree.parse(fn)",
          "176:             passed = schema.validate(etree.parse(data_input.file))",
          "177:         except Exception as e:",
          "178:             LOGGER.warning(e)",
          "",
          "[Removed Lines]",
          "167:         from lxml import etree",
          "175:             schema = etree.XMLSchema(schema_doc)",
          "",
          "[Added Lines]",
          "169:             schema = XMLSchema(schema_doc)",
          "",
          "---------------"
        ],
        "pywps/xml_util.py||pywps/xml_util.py": [
          "File: pywps/xml_util.py -> pywps/xml_util.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from lxml import etree as _etree",
          "4: PARSER = _etree.XMLParser(",
          "5:     resolve_entities=False,",
          "6: )",
          "8: tostring = _etree.tostring",
          "11: def fromstring(text):",
          "12:     return _etree.fromstring(text, parser=PARSER)",
          "15: def parse(source):",
          "16:     return _etree.parse(source, parser=PARSER)",
          "",
          "---------------"
        ],
        "tests/test_capabilities.py||tests/test_capabilities.py": [
          "File: tests/test_capabilities.py -> tests/test_capabilities.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: ##################################################################",
          "6: import unittest",
          "9: from pywps import configuration",
          "10: from pywps.app import Process, Service",
          "11: from pywps.app.Common import Metadata",
          "12: from pywps import get_ElementMakerForVersion",
          "15: WPS, OWS = get_ElementMakerForVersion(\"1.0.0\")",
          "",
          "[Removed Lines]",
          "7: import lxml",
          "8: import lxml.etree",
          "13: from pywps.tests import assert_pywps_version, client_for, assert_wps_version",
          "",
          "[Added Lines]",
          "11: from pywps.tests import client_for, assert_wps_version",
          "",
          "---------------"
        ],
        "tests/test_complexdata_io.py||tests/test_complexdata_io.py": [
          "File: tests/test_complexdata_io.py -> tests/test_complexdata_io.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import unittest",
          "4: import os",
          "6: from pywps.app.basic import get_xpath_ns",
          "7: from pywps import Service, Process, ComplexInput, ComplexOutput, FORMATS",
          "8: from pywps.tests import client_for, assert_response_success",
          "9: from owslib.wps import WPSExecution, ComplexDataInput",
          "12: VERSION = \"1.0.0\"",
          "13: WPS, OWS = get_ElementMakerForVersion(VERSION)",
          "",
          "[Removed Lines]",
          "5: from pywps import get_ElementMakerForVersion, E",
          "10: from lxml import etree",
          "",
          "[Added Lines]",
          "5: from pywps import get_ElementMakerForVersion",
          "10: from pywps import xml_util as etree",
          "",
          "---------------"
        ],
        "tests/test_exceptions.py||tests/test_exceptions.py": [
          "File: tests/test_exceptions.py -> tests/test_exceptions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: ##################################################################",
          "6: import unittest",
          "8: from pywps.app.basic import get_xpath_ns",
          "9: from pywps.tests import assert_pywps_version, client_for",
          "12: import re",
          "",
          "[Removed Lines]",
          "7: from pywps import Process, Service, get_ElementMakerForVersion",
          "10: import lxml.etree",
          "",
          "[Added Lines]",
          "7: from pywps import Service, get_ElementMakerForVersion",
          "",
          "---------------"
        ],
        "tests/test_execute.py||tests/test_execute.py": [
          "File: tests/test_execute.py -> tests/test_execute.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import unittest",
          "7: import pytest",
          "9: import json",
          "10: import tempfile",
          "11: import os.path",
          "",
          "[Removed Lines]",
          "8: import lxml.etree",
          "",
          "[Added Lines]",
          "8: from pywps import xml_util as etree",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:     BoundingBoxOutput, BoundingBoxInput, Format, ComplexInput, ComplexOutput, FORMATS",
          "14: from pywps.validator.base import emptyvalidator",
          "15: from pywps.validator.complexvalidator import validategml",
          "17: from pywps.exceptions import InvalidParameterValue",
          "19: from pywps import E, get_ElementMakerForVersion",
          "20: from pywps.app.basic import get_xpath_ns",
          "21: from pywps.tests import client_for, assert_response_success",
          "22: from pywps import configuration",
          "24: from io import StringIO",
          "27: try:",
          "28:     import netCDF4",
          "",
          "[Removed Lines]",
          "16: from pywps.validator.mode import MODE",
          "18: from pywps import get_inputs_from_xml, get_output_from_xml",
          "25: from owslib.ows import BoundingBox",
          "",
          "[Added Lines]",
          "17: from pywps import get_inputs_from_xml",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "223:                 output[identifier_el.text] = data_el[0].text",
          "224:             else:  # XML children",
          "225:                 ch = list(data_el[0])[0]",
          "228:     return output",
          "",
          "[Removed Lines]",
          "226:                 output[identifier_el.text] = lxml.etree.tostring(ch)",
          "",
          "[Added Lines]",
          "224:                 output[identifier_el.text] = etree.tostring(ch)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "600:                         WPS.ComplexData(the_data, mimeType='text/foobar')))))",
          "601:         rv = get_inputs_from_xml(request_doc)",
          "602:         self.assertEqual(rv['name'][0]['mimeType'], 'text/foobar')",
          "604:         self.assertEqual(rv_doc.tag, 'TheData')",
          "605:         self.assertEqual(rv_doc.text, 'hello world')",
          "",
          "[Removed Lines]",
          "603:         rv_doc = lxml.etree.parse(StringIO(rv['name'][0]['data'])).getroot()",
          "",
          "[Added Lines]",
          "601:         rv_doc = etree.parse(StringIO(rv['name'][0]['data'])).getroot()",
          "",
          "---------------"
        ],
        "tests/test_formats.py||tests/test_formats.py": [
          "File: tests/test_formats.py -> tests/test_formats.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import unittest",
          "10: from pywps.inout.formats import Format, get_format, FORMATS",
          "12: from pywps.app.basic import get_xpath_ns",
          "15: xpath_ns = get_xpath_ns(\"1.0.0\")",
          "",
          "[Removed Lines]",
          "11: from lxml import etree",
          "13: from pywps.validator.base import emptyvalidator",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/test_inout.py||tests/test_inout.py": [
          "File: tests/test_inout.py -> tests/test_inout.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import requests",
          "12: import os",
          "13: import tempfile",
          "15: import unittest",
          "16: import json",
          "17: from pywps import inout",
          "",
          "[Removed Lines]",
          "14: import datetime",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: from pywps.tests import service_ok",
          "36: from pywps.translations import get_translation",
          "40: DATA_DIR = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'data')",
          "",
          "[Removed Lines]",
          "38: from lxml import etree",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/test_ows.py||tests/test_ows.py": [
          "File: tests/test_ows.py -> tests/test_ows.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import os",
          "10: import tempfile",
          "11: import unittest",
          "14: from pywps import Service, Process, ComplexInput, ComplexOutput, Format, FORMATS, get_format",
          "15: from pywps.dependencies import ogr",
          "16: from pywps.exceptions import NoApplicableCode",
          "",
          "[Removed Lines]",
          "12: import lxml.etree",
          "13: import sys",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/test_wpsrequest.py||tests/test_wpsrequest.py": [
          "File: tests/test_wpsrequest.py -> tests/test_wpsrequest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: ##################################################################",
          "6: import unittest",
          "8: from pywps.app import WPSRequest",
          "9: import tempfile",
          "10: import datetime",
          "",
          "[Removed Lines]",
          "7: import lxml.etree",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/test_xml_util.py||tests/test_xml_util.py": [
          "File: tests/test_xml_util.py -> tests/test_xml_util.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from pywps import xml_util as etree",
          "3: from io import StringIO",
          "6: XML_EXECUTE = \"\"\"",
          "7: <!DOCTYPE foo [",
          "8:   <!ELEMENT foo ANY >",
          "9:   <!ENTITY xxe SYSTEM \"file:///PATH/TO/input.txt\">",
          "10: ]>",
          "11: <wps:Execute",
          "12:     service=\"WPS\"",
          "13:     version=\"1.0.0\"",
          "14:     xmlns:wps=\"http://www.opengis.net/wps/1.0.0\"",
          "15:     xmlns:ows=\"http://www.opengis.net/ows/1.1\"",
          "16:     xmlns:xlink=\"http://www.w3.org/1999/xlink\"",
          "17:     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
          "18:     xsi:schemaLocation=\"http://schemas.opengis.net/wps/1.0.0/wpsExecute_request.xsd\">",
          "19:     <ows:Identifier>test_process</ows:Identifier>",
          "20:     <wps:DataInputs>",
          "21:         <wps:Input>",
          "22:             <ows:Identifier>name</ows:Identifier>",
          "23:             <wps:Data>",
          "24:                 <wps:LiteralData>&xxe;</wps:LiteralData>",
          "25:             </wps:Data>",
          "26:         </wps:Input>",
          "27:     </wps:DataInputs>",
          "28:     <wps:ResponseForm>",
          "29:         <wps:ResponseDocument",
          "30:             storeExecuteResponse=\"true\"",
          "31:             status=\"true\">",
          "32:             <wps:Output asReference=\"false\">",
          "33:                 <ows:Identifier>output</ows:Identifier>",
          "34:             </wps:Output>",
          "35:         </wps:ResponseDocument>",
          "36:     </wps:ResponseForm>",
          "37: </wps:Execute>",
          "38: \"\"\"",
          "41: def test_etree_fromstring():",
          "42:     xml = etree.tostring(etree.fromstring(XML_EXECUTE))",
          "43:     # don't replace entities",
          "44:     # https://lxml.de/parsing.html",
          "45:     assert b\"<wps:LiteralData>&xxe;</wps:LiteralData>\" in xml",
          "48: def test_etree_parse():",
          "49:     xml = etree.tostring(etree.parse(StringIO(XML_EXECUTE)))",
          "50:     # don't replace entities",
          "51:     # https://lxml.de/parsing.html",
          "52:     assert b\"<wps:LiteralData>&xxe;</wps:LiteralData>\" in xml",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "897308742cfabd9954198476fc80ac0ab8e7fb93",
      "candidate_info": {
        "commit_hash": "897308742cfabd9954198476fc80ac0ab8e7fb93",
        "repo": "geopython/pywps",
        "commit_url": "https://github.com/geopython/pywps/commit/897308742cfabd9954198476fc80ac0ab8e7fb93",
        "files": [
          "pywps/app/WPSRequest.py",
          "pywps/exceptions.py",
          "pywps/inout/inputs.py",
          "pywps/inout/outputs.py",
          "pywps/tests.py",
          "pywps/validator/complexvalidator.py",
          "pywps/xml_util.py",
          "requirements.txt",
          "tests/test_capabilities.py",
          "tests/test_complexdata_io.py",
          "tests/test_exceptions.py",
          "tests/test_execute.py",
          "tests/test_formats.py",
          "tests/test_inout.py",
          "tests/test_ows.py",
          "tests/test_wpsrequest.py",
          "tests/test_xml_util.py"
        ],
        "message": "Squashed commit of the following:\n\n    added test for xml_util\n\n    use xml_util\n\n    use werkzeug Response\n\n    use markupsafe",
        "before_after_code_files": [
          "pywps/app/WPSRequest.py||pywps/app/WPSRequest.py",
          "pywps/exceptions.py||pywps/exceptions.py",
          "pywps/inout/inputs.py||pywps/inout/inputs.py",
          "pywps/inout/outputs.py||pywps/inout/outputs.py",
          "pywps/tests.py||pywps/tests.py",
          "pywps/validator/complexvalidator.py||pywps/validator/complexvalidator.py",
          "pywps/xml_util.py||pywps/xml_util.py",
          "tests/test_capabilities.py||tests/test_capabilities.py",
          "tests/test_complexdata_io.py||tests/test_complexdata_io.py",
          "tests/test_exceptions.py||tests/test_exceptions.py",
          "tests/test_execute.py||tests/test_execute.py",
          "tests/test_formats.py||tests/test_formats.py",
          "tests/test_inout.py||tests/test_inout.py",
          "tests/test_ows.py||tests/test_ows.py",
          "tests/test_wpsrequest.py||tests/test_wpsrequest.py",
          "tests/test_xml_util.py||tests/test_xml_util.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "pywps/app/WPSRequest.py||pywps/app/WPSRequest.py",
            "pywps/exceptions.py||pywps/exceptions.py",
            "pywps/inout/inputs.py||pywps/inout/inputs.py",
            "pywps/inout/outputs.py||pywps/inout/outputs.py",
            "pywps/tests.py||pywps/tests.py",
            "pywps/validator/complexvalidator.py||pywps/validator/complexvalidator.py",
            "pywps/xml_util.py||pywps/xml_util.py",
            "tests/test_capabilities.py||tests/test_capabilities.py",
            "tests/test_complexdata_io.py||tests/test_complexdata_io.py",
            "tests/test_exceptions.py||tests/test_exceptions.py",
            "tests/test_execute.py||tests/test_execute.py",
            "tests/test_formats.py||tests/test_formats.py",
            "tests/test_inout.py||tests/test_inout.py",
            "tests/test_ows.py||tests/test_ows.py",
            "tests/test_wpsrequest.py||tests/test_wpsrequest.py",
            "tests/test_xml_util.py||tests/test_xml_util.py"
          ],
          "candidate": [
            "pywps/app/WPSRequest.py||pywps/app/WPSRequest.py",
            "pywps/exceptions.py||pywps/exceptions.py",
            "pywps/inout/inputs.py||pywps/inout/inputs.py",
            "pywps/inout/outputs.py||pywps/inout/outputs.py",
            "pywps/tests.py||pywps/tests.py",
            "pywps/validator/complexvalidator.py||pywps/validator/complexvalidator.py",
            "pywps/xml_util.py||pywps/xml_util.py",
            "tests/test_capabilities.py||tests/test_capabilities.py",
            "tests/test_complexdata_io.py||tests/test_complexdata_io.py",
            "tests/test_exceptions.py||tests/test_exceptions.py",
            "tests/test_execute.py||tests/test_execute.py",
            "tests/test_formats.py||tests/test_formats.py",
            "tests/test_inout.py||tests/test_inout.py",
            "tests/test_ows.py||tests/test_ows.py",
            "tests/test_wpsrequest.py||tests/test_wpsrequest.py",
            "tests/test_xml_util.py||tests/test_xml_util.py"
          ]
        }
      },
      "candidate_diff": {
        "pywps/app/WPSRequest.py||pywps/app/WPSRequest.py": [
          "File: pywps/app/WPSRequest.py -> pywps/app/WPSRequest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import logging",
          "8: import lxml",
          "10: from werkzeug.exceptions import MethodNotAllowed",
          "11: from pywps import get_ElementMakerForVersion",
          "12: import base64",
          "",
          "[Removed Lines]",
          "9: import lxml.etree",
          "",
          "[Added Lines]",
          "9: from pywps import xml_util as etree",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:         json_input = 'json' in content_type",
          "107:         if not json_input:",
          "108:             try:",
          "110:             except Exception as e:",
          "111:                 raise NoApplicableCode(e.msg)",
          "112:             operation = doc.tag",
          "",
          "[Removed Lines]",
          "109:                 doc = lxml.etree.fromstring(self.http_request.get_data())",
          "",
          "[Added Lines]",
          "109:                 doc = etree.fromstring(self.http_request.get_data())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "754:     \"\"\"",
          "756:     if isinstance(value_el, lxml.etree._Element):",
          "758:     else:",
          "759:         return value_el",
          "",
          "[Removed Lines]",
          "757:         return lxml.etree.tostring(value_el, encoding=str)",
          "",
          "[Added Lines]",
          "757:         return etree.tostring(value_el, encoding=str)",
          "",
          "---------------"
        ],
        "pywps/exceptions.py||pywps/exceptions.py": [
          "File: pywps/exceptions.py -> pywps/exceptions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: from werkzeug.http import parse_accept_header",
          "18: from werkzeug.wrappers import Response",
          "19: from werkzeug.exceptions import HTTPException",
          "22: import logging",
          "",
          "[Removed Lines]",
          "20: from werkzeug.utils import escape",
          "",
          "[Added Lines]",
          "20: from markupsafe import escape",
          "",
          "---------------"
        ],
        "pywps/inout/inputs.py||pywps/inout/inputs.py": [
          "File: pywps/inout/inputs.py -> pywps/inout/inputs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: ##################################################################",
          "6: import re",
          "9: from pywps.app.Common import Metadata",
          "10: from pywps.exceptions import InvalidParameterValue",
          "",
          "[Removed Lines]",
          "7: import lxml.etree as etree",
          "",
          "[Added Lines]",
          "7: from pywps import xml_util as etree",
          "",
          "---------------"
        ],
        "pywps/inout/outputs.py||pywps/inout/outputs.py": [
          "File: pywps/inout/outputs.py -> pywps/inout/outputs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: \"\"\"",
          "8: from typing import Optional, Sequence, Dict, Union",
          "11: import os",
          "12: import re",
          "13: from pywps.app.Common import Metadata",
          "",
          "[Removed Lines]",
          "10: import lxml.etree as etree",
          "",
          "[Added Lines]",
          "10: from pywps import xml_util as etree",
          "",
          "---------------"
        ],
        "pywps/tests.py||pywps/tests.py": [
          "File: pywps/tests.py -> pywps/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import tempfile",
          "7: from pathlib import Path",
          "10: import requests",
          "11: from werkzeug.test import Client",
          "13: from pywps import __version__",
          "14: from pywps import Process",
          "15: from pywps.inout import LiteralInput, LiteralOutput, ComplexInput, ComplexOutput, BoundingBoxInput, BoundingBoxOutput",
          "",
          "[Removed Lines]",
          "9: import lxml.etree",
          "12: from werkzeug.wrappers import BaseResponse",
          "",
          "[Added Lines]",
          "9: import lxml",
          "10: from pywps import xml_util as etree",
          "13: from werkzeug.wrappers import Response",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:     def post_xml(self, *args, **kwargs):",
          "96:         doc = kwargs.pop('doc')",
          "98:         kwargs['data'] = data",
          "99:         return self.post(*args, **kwargs)",
          "",
          "[Removed Lines]",
          "97:         data = lxml.etree.tostring(doc, pretty_print=True)",
          "",
          "[Added Lines]",
          "98:         data = etree.tostring(doc, pretty_print=True)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:         return self.post(*args, **kwargs)",
          "114:     def __init__(self, *args):",
          "115:         super(WpsTestResponse, self).__init__(*args)",
          "116:         if re.match(r'text/xml(;\\s*charset=.*)?', self.headers.get('Content-Type')):",
          "119:     def xpath(self, path):",
          "120:         version = self.xml.attrib[\"version\"]",
          "",
          "[Removed Lines]",
          "112: class WpsTestResponse(BaseResponse):",
          "117:             self.xml = lxml.etree.fromstring(self.get_data())",
          "",
          "[Added Lines]",
          "113: class WpsTestResponse(Response):",
          "118:             self.xml = etree.fromstring(self.get_data())",
          "",
          "---------------"
        ],
        "pywps/validator/complexvalidator.py||pywps/validator/complexvalidator.py": [
          "File: pywps/validator/complexvalidator.py -> pywps/validator/complexvalidator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: from pywps.validator.mode import MODE",
          "13: from pywps.inout.formats import FORMATS",
          "14: from urllib.request import urlopen",
          "15: import mimetypes",
          "16: import os",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: from lxml.etree import XMLSchema",
          "15: from pywps import xml_util as etree",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:             passed = False",
          "63:     if mode >= MODE.VERYSTRICT:",
          "67:         try:",
          "68:             schema_url = data_input.data_format.schema",
          "69:             gmlschema_doc = etree.parse(urlopen(schema_url))",
          "71:             passed = gmlschema.validate(etree.parse(data_input.stream))",
          "72:         except Exception as e:",
          "73:             LOGGER.warning(e)",
          "",
          "[Removed Lines]",
          "65:         from lxml import etree",
          "70:             gmlschema = etree.XMLSchema(gmlschema_doc)",
          "",
          "[Added Lines]",
          "69:             gmlschema = XMLSchema(gmlschema_doc)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:             passed = False",
          "120:     if mode >= MODE.VERYSTRICT:",
          "124:         try:",
          "125:             schema_url = data_input.data_format.schema",
          "126:             gpxschema_doc = etree.parse(urlopen(schema_url))",
          "128:             passed = gpxschema.validate(etree.parse(data_input.stream))",
          "129:         except Exception as e:",
          "130:             LOGGER.warning(e)",
          "",
          "[Removed Lines]",
          "122:         from lxml import etree",
          "127:             gpxschema = etree.XMLSchema(gpxschema_doc)",
          "",
          "[Added Lines]",
          "123:             gpxschema = XMLSchema(gpxschema_doc)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "164:         passed = data_input.data_format.mime_type in {mtype, FORMATS.GML.mime_type}",
          "166:     if mode >= MODE.STRICT:",
          "169:         # TODO: Raise the actual validation exception to make it easier to spot the error.",
          "170:         #  xml = etree.parse(data_input.file)",
          "171:         #  schema.assertValid(xml)",
          "172:         try:",
          "173:             fn = os.path.join(_get_schemas_home(), data_input.data_format.schema)",
          "174:             schema_doc = etree.parse(fn)",
          "176:             passed = schema.validate(etree.parse(data_input.file))",
          "177:         except Exception as e:",
          "178:             LOGGER.warning(e)",
          "",
          "[Removed Lines]",
          "167:         from lxml import etree",
          "175:             schema = etree.XMLSchema(schema_doc)",
          "",
          "[Added Lines]",
          "169:             schema = XMLSchema(schema_doc)",
          "",
          "---------------"
        ],
        "pywps/xml_util.py||pywps/xml_util.py": [
          "File: pywps/xml_util.py -> pywps/xml_util.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from lxml import etree as _etree",
          "4: PARSER = _etree.XMLParser(",
          "5:     resolve_entities=False,",
          "6: )",
          "8: tostring = _etree.tostring",
          "11: def fromstring(text):",
          "12:     return _etree.fromstring(text, parser=PARSER)",
          "15: def parse(source):",
          "16:     return _etree.parse(source, parser=PARSER)",
          "",
          "---------------"
        ],
        "tests/test_capabilities.py||tests/test_capabilities.py": [
          "File: tests/test_capabilities.py -> tests/test_capabilities.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: ##################################################################",
          "6: import unittest",
          "9: from pywps import configuration",
          "10: from pywps.app import Process, Service",
          "11: from pywps.app.Common import Metadata",
          "12: from pywps import get_ElementMakerForVersion",
          "15: WPS, OWS = get_ElementMakerForVersion(\"1.0.0\")",
          "",
          "[Removed Lines]",
          "7: import lxml",
          "8: import lxml.etree",
          "13: from pywps.tests import assert_pywps_version, client_for, assert_wps_version",
          "",
          "[Added Lines]",
          "11: from pywps.tests import client_for, assert_wps_version",
          "",
          "---------------"
        ],
        "tests/test_complexdata_io.py||tests/test_complexdata_io.py": [
          "File: tests/test_complexdata_io.py -> tests/test_complexdata_io.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import unittest",
          "4: import os",
          "6: from pywps.app.basic import get_xpath_ns",
          "7: from pywps import Service, Process, ComplexInput, ComplexOutput, FORMATS",
          "8: from pywps.tests import client_for, assert_response_success",
          "9: from owslib.wps import WPSExecution, ComplexDataInput",
          "12: VERSION = \"1.0.0\"",
          "13: WPS, OWS = get_ElementMakerForVersion(VERSION)",
          "",
          "[Removed Lines]",
          "5: from pywps import get_ElementMakerForVersion, E",
          "10: from lxml import etree",
          "",
          "[Added Lines]",
          "5: from pywps import get_ElementMakerForVersion",
          "10: from pywps import xml_util as etree",
          "",
          "---------------"
        ],
        "tests/test_exceptions.py||tests/test_exceptions.py": [
          "File: tests/test_exceptions.py -> tests/test_exceptions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: ##################################################################",
          "6: import unittest",
          "8: from pywps.app.basic import get_xpath_ns",
          "9: from pywps.tests import assert_pywps_version, client_for",
          "12: import re",
          "",
          "[Removed Lines]",
          "7: from pywps import Process, Service, get_ElementMakerForVersion",
          "10: import lxml.etree",
          "",
          "[Added Lines]",
          "7: from pywps import Service, get_ElementMakerForVersion",
          "",
          "---------------"
        ],
        "tests/test_execute.py||tests/test_execute.py": [
          "File: tests/test_execute.py -> tests/test_execute.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import unittest",
          "7: import pytest",
          "9: import json",
          "10: import tempfile",
          "11: import os.path",
          "",
          "[Removed Lines]",
          "8: import lxml.etree",
          "",
          "[Added Lines]",
          "8: from pywps import xml_util as etree",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:     BoundingBoxOutput, BoundingBoxInput, Format, ComplexInput, ComplexOutput, FORMATS",
          "14: from pywps.validator.base import emptyvalidator",
          "15: from pywps.validator.complexvalidator import validategml",
          "17: from pywps.exceptions import InvalidParameterValue",
          "19: from pywps import E, get_ElementMakerForVersion",
          "20: from pywps.app.basic import get_xpath_ns",
          "21: from pywps.tests import client_for, assert_response_success, assert_response_success_json",
          "22: from pywps import configuration",
          "24: from io import StringIO",
          "27: try:",
          "28:     import netCDF4",
          "",
          "[Removed Lines]",
          "16: from pywps.validator.mode import MODE",
          "18: from pywps import get_inputs_from_xml, get_output_from_xml",
          "25: from owslib.ows import BoundingBox",
          "",
          "[Added Lines]",
          "17: from pywps import get_inputs_from_xml",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "228:                 output[identifier_el.text] = data_el[0].text",
          "229:             else:  # XML children",
          "230:                 ch = list(data_el[0])[0]",
          "233:     return output",
          "",
          "[Removed Lines]",
          "231:                 output[identifier_el.text] = lxml.etree.tostring(ch)",
          "",
          "[Added Lines]",
          "229:                 output[identifier_el.text] = etree.tostring(ch)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "700:                         WPS.ComplexData(the_data, mimeType='text/foobar')))))",
          "701:         rv = get_inputs_from_xml(request_doc)",
          "702:         self.assertEqual(rv['name'][0]['mimeType'], 'text/foobar')",
          "704:         self.assertEqual(rv_doc.tag, 'TheData')",
          "705:         self.assertEqual(rv_doc.text, 'hello world')",
          "",
          "[Removed Lines]",
          "703:         rv_doc = lxml.etree.parse(StringIO(rv['name'][0]['data'])).getroot()",
          "",
          "[Added Lines]",
          "701:         rv_doc = etree.parse(StringIO(rv['name'][0]['data'])).getroot()",
          "",
          "---------------"
        ],
        "tests/test_formats.py||tests/test_formats.py": [
          "File: tests/test_formats.py -> tests/test_formats.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import unittest",
          "10: from pywps.inout.formats import Format, get_format, FORMATS",
          "12: from pywps.app.basic import get_xpath_ns",
          "15: xpath_ns = get_xpath_ns(\"1.0.0\")",
          "",
          "[Removed Lines]",
          "11: from lxml import etree",
          "13: from pywps.validator.base import emptyvalidator",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/test_inout.py||tests/test_inout.py": [
          "File: tests/test_inout.py -> tests/test_inout.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import requests",
          "12: import os",
          "13: import tempfile",
          "15: import unittest",
          "16: import json",
          "17: from pywps import inout",
          "",
          "[Removed Lines]",
          "14: import datetime",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: from pywps.tests import service_ok",
          "36: from pywps.translations import get_translation",
          "40: DATA_DIR = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'data')",
          "",
          "[Removed Lines]",
          "38: from lxml import etree",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/test_ows.py||tests/test_ows.py": [
          "File: tests/test_ows.py -> tests/test_ows.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import os",
          "10: import tempfile",
          "11: import unittest",
          "14: from pywps import Service, Process, ComplexInput, ComplexOutput, Format, FORMATS, get_format",
          "15: from pywps.dependencies import ogr",
          "16: from pywps.exceptions import NoApplicableCode",
          "",
          "[Removed Lines]",
          "12: import lxml.etree",
          "13: import sys",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/test_wpsrequest.py||tests/test_wpsrequest.py": [
          "File: tests/test_wpsrequest.py -> tests/test_wpsrequest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: ##################################################################",
          "6: import unittest",
          "8: from pywps.app import WPSRequest",
          "9: import tempfile",
          "10: import datetime",
          "",
          "[Removed Lines]",
          "7: import lxml.etree",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/test_xml_util.py||tests/test_xml_util.py": [
          "File: tests/test_xml_util.py -> tests/test_xml_util.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from pywps import xml_util as etree",
          "3: from io import StringIO",
          "6: XML_EXECUTE = \"\"\"",
          "7: <!DOCTYPE foo [",
          "8:   <!ELEMENT foo ANY >",
          "9:   <!ENTITY xxe SYSTEM \"file:///PATH/TO/input.txt\">",
          "10: ]>",
          "11: <wps:Execute",
          "12:     service=\"WPS\"",
          "13:     version=\"1.0.0\"",
          "14:     xmlns:wps=\"http://www.opengis.net/wps/1.0.0\"",
          "15:     xmlns:ows=\"http://www.opengis.net/ows/1.1\"",
          "16:     xmlns:xlink=\"http://www.w3.org/1999/xlink\"",
          "17:     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
          "18:     xsi:schemaLocation=\"http://schemas.opengis.net/wps/1.0.0/wpsExecute_request.xsd\">",
          "19:     <ows:Identifier>test_process</ows:Identifier>",
          "20:     <wps:DataInputs>",
          "21:         <wps:Input>",
          "22:             <ows:Identifier>name</ows:Identifier>",
          "23:             <wps:Data>",
          "24:                 <wps:LiteralData>&xxe;</wps:LiteralData>",
          "25:             </wps:Data>",
          "26:         </wps:Input>",
          "27:     </wps:DataInputs>",
          "28:     <wps:ResponseForm>",
          "29:         <wps:ResponseDocument",
          "30:             storeExecuteResponse=\"true\"",
          "31:             status=\"true\">",
          "32:             <wps:Output asReference=\"false\">",
          "33:                 <ows:Identifier>output</ows:Identifier>",
          "34:             </wps:Output>",
          "35:         </wps:ResponseDocument>",
          "36:     </wps:ResponseForm>",
          "37: </wps:Execute>",
          "38: \"\"\"",
          "41: def test_etree_fromstring():",
          "42:     xml = etree.tostring(etree.fromstring(XML_EXECUTE))",
          "43:     # don't replace entities",
          "44:     # https://lxml.de/parsing.html",
          "45:     assert b\"<wps:LiteralData>&xxe;</wps:LiteralData>\" in xml",
          "48: def test_etree_parse():",
          "49:     xml = etree.tostring(etree.parse(StringIO(XML_EXECUTE)))",
          "50:     # don't replace entities",
          "51:     # https://lxml.de/parsing.html",
          "52:     assert b\"<wps:LiteralData>&xxe;</wps:LiteralData>\" in xml",
          "",
          "---------------"
        ]
      }
    }
  ]
}