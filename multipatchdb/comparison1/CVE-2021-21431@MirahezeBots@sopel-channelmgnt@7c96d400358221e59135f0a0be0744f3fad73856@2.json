{
  "cve_id": "CVE-2021-21431",
  "cve_desc": "sopel-channelmgnt is a channelmgnt plugin for sopel. In versions prior to 2.0.1, on some IRC servers, restrictions around the removal of the bot using the kick/kickban command could be bypassed when kicking multiple users at once. We also believe it may have been possible to remove users from other channels but due to the wonder that is IRC and following RfCs, We have no POC for that. Freenode is not affected. This is fixed in version 2.0.1. As a workaround, do not use this plugin on networks where TARGMAX > 1.",
  "repo": "MirahezeBots/sopel-channelmgnt",
  "patch_hash": "7c96d400358221e59135f0a0be0744f3fad73856",
  "patch_info": {
    "commit_hash": "7c96d400358221e59135f0a0be0744f3fad73856",
    "repo": "MirahezeBots/sopel-channelmgnt",
    "commit_url": "https://github.com/MirahezeBots/sopel-channelmgnt/commit/7c96d400358221e59135f0a0be0744f3fad73856",
    "files": [
      "dev-requirements.txt",
      "setup.py",
      "sopel_channelmgnt/channelmgnt/__init__.py"
    ],
    "message": "[SECURITY] Release 2.0.1 (#65)\n\nFixes CVE-2021-21431",
    "before_after_code_files": [
      "setup.py||setup.py",
      "sopel_channelmgnt/channelmgnt/__init__.py||sopel_channelmgnt/channelmgnt/__init__.py"
    ]
  },
  "patch_diff": {
    "setup.py||setup.py": [
      "File: setup.py -> setup.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: setup(",
      "12:     name='sopel_plugins.channelmgnt',",
      "14:     description='Channelmgnt plugin for Sopel',",
      "15:     long_description=readme,",
      "16:     long_description_content_type='text/markdown',  # This is important!",
      "17:     author='MirahezeBot Contributors',",
      "19:     url='https://github.com/MirahezeBots/sopel-channelmgnt',",
      "20:     packages=find_packages('.'),",
      "21:     include_package_data=True,",
      "",
      "[Removed Lines]",
      "13:     version='2.0',",
      "18:     author_email='bots@miraheze.org',",
      "",
      "[Added Lines]",
      "13:     version='2.0.1',",
      "18:     author_email='staff@mirahezebots.org',",
      "",
      "---------------"
    ],
    "sopel_channelmgnt/channelmgnt/__init__.py||sopel_channelmgnt/channelmgnt/__init__.py": [
      "File: sopel_channelmgnt/channelmgnt/__init__.py -> sopel_channelmgnt/channelmgnt/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "216:             return",
      "217:         nick = Identifier(text[1])",
      "218:         reason = ' '.join(text[2:])",
      "219:         if nick != bot.config.core.nick and trigger.account in chanops:",
      "220:             bot.write(['KICK', trigger.sender, nick, ':' + reason])",
      "221:             if dodeop:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "219:         if ',' in str(nick):",
      "220:             return bot.reply('Unable to kick. Kicking multiple users is not allowed.')",
      "221:         if '#' in str(nick):",
      "222:             return bot.reply('Unable to kick. Use of # when kicking is not expected.')",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "263: @example('.ban Zppix')",
      "264: def ban(bot, trigger):",
      "265:     \"\"\"Ban a user from the channel. The bot must be a channel operator for this command to work.\"\"\"",
      "266:     makemodechange(bot, trigger, '+b', isbqmode=True)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "270:     if ',' in str(parse_host_mask(trigger.group().split())):",
      "271:         return bot.reply('Unable to ban. Banning multiple users is not allowed.')",
      "272:     if '#' in str(parse_host_mask(trigger.group().split())):",
      "273:         return bot.reply('Unable to ban. Use of # when banning is not expected.')",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "271: @example('.unban Zppix')",
      "272: def unban(bot, trigger):",
      "273:     \"\"\"Unban a user from the channel. The bot must be a channel operator for this command to work.\"\"\"",
      "274:     makemodechange(bot, trigger, '-b', isbqmode=True)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "282:     if ',' in str(parse_host_mask(trigger.group().split())):",
      "283:         return bot.reply('Unable to ban. Banning multiple users is not allowed.')",
      "284:     if '#' in str(parse_host_mask(trigger.group().split())):",
      "285:         return bot.reply('Unable to ban. Use of # when banning is not expected.')",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "312:                 deopbot(trigger.sender, bot)",
      "313:             return",
      "314:         nick = Identifier(text[1])",
      "315:         mask = text[2] if any(s in text[2] for s in '!@*') else ''",
      "316:         reasonidx = 3 if mask != '' else 2",
      "317:         reason = ' '.join(text[reasonidx:])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "327:         if ',' in str(nick):",
      "328:             return bot.reply('Unable to kickban. Kickbanning multiple users is not allowed.')",
      "329:         if '#' in str(nick):",
      "330:             return bot.reply('Unable to kickban. Use of # when kickbanning is not expected.')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "518fdc891b1e2f28e7179cd133f61cda27e20609",
      "candidate_info": {
        "commit_hash": "518fdc891b1e2f28e7179cd133f61cda27e20609",
        "repo": "MirahezeBots/sopel-channelmgnt",
        "commit_url": "https://github.com/MirahezeBots/sopel-channelmgnt/commit/518fdc891b1e2f28e7179cd133f61cda27e20609",
        "files": [
          ".travis.yml",
          "LICENSE",
          "MANIFEST.in",
          "README.md",
          "requirements.txt",
          "setup.cfg",
          "setup.py",
          "sopel_channelmgnt/__init__.py",
          "sopel_channelmgnt/channelmgnt/__init__.py"
        ],
        "message": "add files for channelmgnt ' '\n\nSigned-off-by: MacFan4000 <paulfkeffer@gmail.com>",
        "before_after_code_files": [
          "MANIFEST.in||MANIFEST.in",
          "setup.cfg||setup.cfg",
          "setup.py||setup.py",
          "sopel_channelmgnt/channelmgnt/__init__.py||sopel_channelmgnt/channelmgnt/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py",
            "sopel_channelmgnt/channelmgnt/__init__.py||sopel_channelmgnt/channelmgnt/__init__.py"
          ],
          "candidate": [
            "setup.py||setup.py",
            "sopel_channelmgnt/channelmgnt/__init__.py||sopel_channelmgnt/channelmgnt/__init__.py"
          ]
        }
      },
      "candidate_diff": {
        "MANIFEST.in||MANIFEST.in": [
          "File: MANIFEST.in -> MANIFEST.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: include README.md",
          "2: include *requirements.txt",
          "",
          "---------------"
        ],
        "setup.cfg||setup.cfg": [
          "File: setup.cfg -> setup.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: [metadata]",
          "2: license_file = LICENSE",
          "3: classifiers =",
          "4:     Development Status :: 5 - Production/Stable",
          "5:     Intended Audience :: Developers",
          "6:     Intended Audience :: System Administrators",
          "7:     License :: Eiffel Forum License (EFL)",
          "8:     License :: OSI Approved :: Eiffel Forum License",
          "9:     Operating System :: POSIX :: Linux",
          "10:     Programming Language :: Python :: 3.6",
          "11:     Programming Language :: Python :: 3.7",
          "12:     Programming Language :: Python :: 3.8",
          "13:     Topic :: Communications :: Chat :: Internet Relay Chat",
          "14: [options]",
          "15: python_requires = >=3.6",
          "16: [options.entry_points]",
          "17: sopel.plugins =",
          "18:     channelmgnt   = sopel_channelmgnt.channelmgnt",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from __future__ import print_function",
          "2: from setuptools import setup, find_packages",
          "4: with open('README.md') as readme_file:",
          "5:     readme = readme_file.read()",
          "6: with open('requirements.txt') as requirements_file:",
          "7:     requirements = [req for req in requirements_file.readlines()]",
          "10: setup(",
          "11:     name='sopel_plugins.channelmgnt',",
          "12:     version='1.0.0',",
          "13:     description='Channelmgnt plugin for Sopel',",
          "14:     long_description=readme,",
          "15:     long_description_content_type='text/markdown',  # This is important!",
          "16:     author='MirahezeBot Contributors',",
          "17:     author_email='bots@miraheze.org',",
          "18:     url='https://github.com/MirahezeBots/sopel-channelmgnt',",
          "19:     packages=find_packages('.'),",
          "20:     include_package_data=True,",
          "21:     install_requires=requirements,",
          "22:     license='Eiffel Forum License, version 2',",
          "23: )",
          "",
          "---------------"
        ],
        "sopel_channelmgnt/channelmgnt/__init__.py||sopel_channelmgnt/channelmgnt/__init__.py": [
          "File: sopel_channelmgnt/channelmgnt/__init__.py -> sopel_channelmgnt/channelmgnt/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # coding=utf-8",
          "2: \"\"\"",
          "3: channelmgnt.py - Sopel Channel Management Plugin",
          "4: Modified from adminchannel.py - Sopel Channel Admin Module",
          "5: Copyright 2010-2011, Michael Yanovich, Alek Rollyson, and Elsie Powell",
          "6: Copyright \u00a9 2012, Elad Alfassa <elad@fedoraproject.org>",
          "7: Licensed under the Eiffel Forum License 2.",
          "8: https://sopel.chat",
          "9: \"\"\"",
          "10: import re",
          "11: import time",
          "13: from sopel import formatting",
          "14: from sopel.module import (",
          "15:     commands, example, priority, OP, require_chanmsg, require_admin",
          "16: )",
          "17: from sopel.config.types import StaticSection, ValidatedAttribute",
          "18: from sopel.tools import Identifier",
          "19: from MirahezeBots.utils import jsonparser as jp",
          "20: from sopel.tools import SopelMemory",
          "23: class ChannelmgntSection(StaticSection):",
          "24:     datafile = ValidatedAttribute('datafile', str)",
          "25:     support_channel = ValidatedAttribute('support_channel', str)",
          "28: def setup(bot):",
          "29:     bot.config.define_section('channelmgnt', ChannelmgntSection)",
          "30:     bot.memory[\"channelmgnt\"] = SopelMemory()",
          "31:     bot.memory[\"channelmgnt\"][\"jdcache\"] = jp.createdict(bot.settings.channelmgnt.datafile)",
          "34: def configure(config):",
          "35:     config.define_section('channelmgnt', ChannelmgntSection, validate=False)",
          "36:     config.channelmgnt.configure_setting('datafile', 'Where is the datafile for channelmgnt?')",
          "37:     config.channelmgnt.configure_setting('support_channel', 'What channel should users ask for help in?')",
          "40: def default_mask(trigger):",
          "41:     welcome = formatting.color('Welcome to:', formatting.colors.PURPLE)",
          "42:     chan = formatting.color(trigger.sender, formatting.colors.TEAL)",
          "43:     topic_ = formatting.bold('Topic:')",
          "44:     topic_ = formatting.color('| ' + topic_, formatting.colors.PURPLE)",
          "45:     arg = formatting.color('{}', formatting.colors.GREEN)",
          "46:     return '{} {} {} {}'.format(welcome, chan, topic_, arg)",
          "49: def chanopget(channeldata, chanopsjson):",
          "50:     chanops = []",
          "51:     if 'inherits-from' in channeldata.keys():",
          "52:         for x in channeldata[\"inherits-from\"]:",
          "53:             y = channelparse(channel=x, cachedjson=chanopsjson)",
          "54:             chanops = chanops + y[0][\"chanops\"]",
          "55:     if 'chanops' in channeldata.keys():",
          "56:         chanops = chanops + (channeldata[\"chanops\"])",
          "57:     if chanops == []:",
          "58:         return False",
          "59:     else:",
          "60:         return chanops",
          "63: def channelparse(channel, cachedjson):",
          "64:     if channel in cachedjson.keys():",
          "65:         channeldata = cachedjson[channel]",
          "66:         return channeldata, cachedjson",
          "67:     else:",
          "68:         return False",
          "71: def get_chanops(channel, cachedjson):",
          "72:     channeldata = channelparse(channel=channel, cachedjson=cachedjson)",
          "73:     if not channeldata:",
          "74:         chanops = False",
          "75:     else:",
          "76:         chanops = chanopget(channeldata[0], channeldata[1])",
          "77:     return chanops",
          "80: def makemodechange(bot, trigger, mode, isusermode=False, isbqmode=False):",
          "81:     chanops = get_chanops(str(trigger.sender), bot.memory[\"channelmgnt\"][\"jdcache\"])",
          "82:     if chanops:",
          "83:         if bot.channels[trigger.sender].privileges[bot.nick] < OP and trigger.account in chanops:",
          "84:             bot.say('Attempting to OP...')",
          "85:             bot.say('op ' + trigger.sender, 'ChanServ')",
          "86:             time.sleep(1)",
          "87:         if isusermode and not trigger.group(2):",
          "88:             bot.write(['MODE', trigger.sender, mode, trigger.nick])",
          "89:         elif isusermode and trigger.account in chanops:",
          "90:             bot.write(['MODE', trigger.sender, mode, trigger.group(2)])",
          "91:         elif isbqmode and trigger.account in chanops:",
          "92:             bot.write(['MODE', trigger.sender, mode, parse_host_mask(trigger.group().split())])",
          "93:         elif trigger.account in chanops:",
          "94:             bot.write(['MODE', trigger.sender, mode])",
          "95:         else:",
          "96:             bot.reply('Access Denied. If in error, please contact the channel founder.')",
          "98:     else:",
          "99:         bot.reply('No ChanOps Found. Please ask for assistance in {}'.format(bot.settings.channelmgnt.support_channel))",
          "102: @require_chanmsg",
          "103: @commands('chanmode')",
          "104: @example('.chanmode +mz')",
          "105: def chanmode(bot, trigger):",
          "106:     \"\"\"",
          "107:     Command to change channel mode.",
          "108:     \"\"\"",
          "109:     makemodechange(bot, trigger, trigger.group(2), isusermode=False)",
          "112: @require_chanmsg",
          "113: @commands('op')",
          "114: @example('.op Zppix')",
          "115: def op(bot, trigger):",
          "116:     \"\"\"",
          "117:     Command to op users in a room. If no nick is given, Sopel will op the nick who sent the command.",
          "118:     \"\"\"",
          "119:     makemodechange(bot, trigger, '+o', isusermode=True)",
          "122: @require_chanmsg",
          "123: @commands('deop')",
          "124: @example('.deop Zppix')",
          "125: def deop(bot, trigger):",
          "126:     \"\"\"",
          "127:     Command to deop users in a room. If no nick is given, Sopel will deop the nick who sent the command.",
          "128:     \"\"\"",
          "129:     makemodechange(bot, trigger, '-o', isusermode=True)",
          "132: @require_chanmsg",
          "133: @commands('voice')",
          "134: @example('.voice Zppix')",
          "135: def voice(bot, trigger):",
          "136:     \"\"\"",
          "137:     Command to voice users in a room. If no nick is given, Sopel will voice the nick who sent the command.",
          "138:     \"\"\"",
          "139:     makemodechange(bot, trigger, '+v', isusermode=True)",
          "142: @require_chanmsg",
          "143: @commands('devoice')",
          "144: @example('.devoice Zppix')",
          "145: def devoice(bot, trigger):",
          "146:     \"\"\"",
          "147:     Command to devoice users in a room. If no nick is given, the nick who sent the command will be devoiced.",
          "148:     \"\"\"",
          "149:     makemodechange(bot, trigger, '-v', isusermode=True)",
          "152: @require_chanmsg",
          "153: @commands('kick')",
          "154: @priority('high')",
          "155: @example('.kick Zppix')",
          "156: def kick(bot, trigger):",
          "157:     \"\"\"Kick a user from the channel.\"\"\"",
          "158:     chanops = get_chanops(str(trigger.sender), bot.memory[\"channelmgnt\"][\"jdcache\"])",
          "159:     if chanops:",
          "160:         if bot.channels[trigger.sender].privileges[bot.nick] < OP and trigger.account in chanops:",
          "161:             bot.say('Please wait...')",
          "162:             bot.say('op ' + trigger.sender, 'ChanServ')",
          "163:             time.sleep(1)",
          "164:         text = trigger.group().split()",
          "165:         argc = len(text)",
          "166:         if argc < 2:",
          "167:             return",
          "168:         opt = Identifier(text[1])",
          "169:         nick = opt",
          "170:         channel = trigger.sender",
          "171:         reasonidx = 2",
          "172:         if not opt.is_nick():",
          "173:             if argc < 3:",
          "174:                 return",
          "175:             nick = text[2]",
          "176:             channel = opt",
          "177:             reasonidx = 3",
          "178:         reason = ' '.join(text[reasonidx:])",
          "179:         if nick != bot.config.core.nick and trigger.account in chanops:",
          "180:             bot.write(['KICK', channel, nick, ':' + reason])",
          "181:         else:",
          "182:             bot.reply('Access Denied. If in error, please contact the channel founder.')",
          "183:     else:",
          "184:         bot.reply('No ChanOps Found. Please ask for assistance in {}'.format(bot.settings.channelmgnt.support_channel))",
          "187: def parse_host_mask(text):",
          "188:     argc = len(text)",
          "189:     if argc < 2:",
          "190:         return",
          "191:     opt = Identifier(text[1])",
          "192:     mask = opt",
          "193:     if not opt.is_nick():",
          "194:         if argc < 3:",
          "195:             return",
          "196:         mask = text[2]",
          "197:     if mask == '*!*@*':",
          "198:         return mask",
          "199:     if re.match('^[^.@!/]+$', mask) is not None:",
          "200:         return '%s!*@*' % mask",
          "201:     if re.match('^[^@!]+$', mask) is not None:",
          "202:         return '*!*@%s' % mask",
          "204:     m = re.match('^([^!@]+)@$', mask)",
          "205:     if m is not None:",
          "206:         return '*!%s@*' % m.group(1)",
          "208:     m = re.match('^([^!@]+)@([^@!]+)$', mask)",
          "209:     if m is not None:",
          "210:         return '*!%s@%s' % (m.group(1), m.group(2))",
          "212:     m = re.match('^([^!@]+)!(^[!@]+)@?$', mask)",
          "213:     if m is not None:",
          "214:         return '%s!%s@*' % (m.group(1), m.group(2))",
          "215:     return ''",
          "218: @require_chanmsg",
          "219: @commands('ban')",
          "220: @priority('high')",
          "221: @example('.ban Zppix')",
          "222: def ban(bot, trigger):",
          "223:     \"\"\"Ban a user from the channel. The bot must be a channel operator for this command to work.",
          "224:     \"\"\"",
          "225:     makemodechange(bot, trigger, '+b', isbqmode=True)",
          "228: @require_chanmsg",
          "229: @commands('unban')",
          "230: @example('.unban Zppix')",
          "231: def unban(bot, trigger):",
          "232:     \"\"\"Unban a user from the channel. The bot must be a channel operator for this command to work.",
          "233:     \"\"\"",
          "234:     makemodechange(bot, trigger, '-b', isbqmode=True)",
          "237: @require_chanmsg",
          "238: @commands('quiet')",
          "239: @example('.quiet Zppix')",
          "240: def quiet(bot, trigger):",
          "241:     \"\"\"Quiet a user. The bot must be a channel operator for this command to work.",
          "242:     \"\"\"",
          "243:     makemodechange(bot, trigger, '+q', isbqmode=True)",
          "246: @require_chanmsg",
          "247: @commands('unquiet')",
          "248: @example('.unquiet Zppix')",
          "249: def unquiet(bot, trigger):",
          "250:     \"\"\"Unquiet a user. The bot must be a channel operator for this command to work.",
          "251:     \"\"\"",
          "252:     makemodechange(bot, trigger, '-q', isbqmode=True)",
          "255: @require_chanmsg",
          "256: @commands('kickban', 'kb')",
          "257: @example('.kickban [#chan] user1 user!*@* get out of here')",
          "258: @priority('high')",
          "259: def kickban(bot, trigger):",
          "260:     \"\"\"Kick and ban a user from the channel. The bot must be a channel operator for this command to work.",
          "261:     \"\"\"",
          "262:     chanops = get_chanops(str(trigger.sender), bot.memory[\"channelmgnt\"][\"jdcache\"])",
          "263:     if chanops:",
          "264:         if bot.channels[trigger.sender].privileges[bot.nick] < OP and trigger.account in chanops:",
          "265:             bot.say('Please wait...')",
          "266:             bot.say('op ' + trigger.sender, 'ChanServ')",
          "267:             time.sleep(1)",
          "268:         text = trigger.group().split()",
          "269:         argc = len(text)",
          "270:         if argc < 3:",
          "271:             bot.reply('Syntax is: .kickban <nick> <reason>')",
          "272:             return",
          "273:         opt = Identifier(text[1])",
          "274:         nick = opt",
          "275:         mask = text[2] if any([s in text[2] for s in \"!@*\"]) else ''",
          "276:         channel = trigger.sender",
          "277:         reasonidx = 3 if mask != '' else 2",
          "278:         if not opt.is_nick():",
          "279:             if argc < 5:",
          "280:                 bot.reply('Syntax is: .kickban <nick> <reason>')",
          "281:                 return",
          "282:             channel = opt",
          "283:             nick = text[2]",
          "284:             mask = text[3] if any([s in text[3] for s in \"!@*\"]) else ''",
          "285:             reasonidx = 4 if mask != '' else 3",
          "286:         reason = ' '.join(text[reasonidx:])",
          "287:         mask = parse_host_mask(trigger.group().split())",
          "288:         if mask == '':",
          "289:             mask = nick + '!*@*'",
          "290:         if trigger.account in chanops:",
          "291:             bot.write(['MODE', channel, '+b', mask])",
          "292:             bot.write(['KICK', channel, nick, ':' + reason])",
          "293:         else:",
          "294:             bot.reply('Access Denied. If in error, please contact the channel founder.')",
          "295:     else:",
          "296:         bot.reply('No ChanOps Found. Please ask for assistance in {}'.format(bot.settings.channelmgnt.support_channel))",
          "299: @require_chanmsg",
          "300: @commands('topic')",
          "301: @example('.topic Your Great New Topic')",
          "302: def topic(bot, trigger):",
          "303:     \"\"\"Change the channel topic. The bot must be a channel operator for this command to work.",
          "304:     \"\"\"",
          "305:     chanops = get_chanops(str(trigger.sender), bot.memory[\"channelmgnt\"][\"jdcache\"])",
          "306:     if chanops:",
          "307:         if bot.channels[trigger.sender].privileges[bot.nick] < OP and trigger.account in chanops:",
          "308:             bot.say('Please wait...')",
          "309:             bot.say('op ' + trigger.sender, 'ChanServ')",
          "310:             time.sleep(1)",
          "311:         if not trigger.group(2):",
          "312:             return",
          "313:         channel = trigger.sender.lower()",
          "315:         mask = None",
          "316:         mask = bot.db.get_channel_value(channel, 'topic_mask')",
          "317:         mask = mask or default_mask(trigger)",
          "318:         mask = mask.replace('%s', '{}')",
          "319:         narg = len(re.findall('{}', mask))",
          "321:         top = trigger.group(2)",
          "322:         args = []",
          "323:         if top:",
          "324:             args = top.split('~', narg)",
          "326:         if len(args) != narg:",
          "327:             message = \"Not enough arguments. You gave {}, it requires {}.\".format(",
          "328:                 len(args), narg)",
          "329:             return bot.say(message)",
          "330:         topic = mask.format(*args)",
          "331:         if trigger.account in chanops:",
          "332:             bot.write(('TOPIC', channel + ' :' + topic))",
          "333:         else:",
          "334:             bot.reply('Access Denied. If in error, please contact the channel founder.')",
          "335:     else:",
          "336:         bot.reply('No ChanOps Found. Please ask for assistance in {}'.format(bot.settings.channelmgnt.support_channel))",
          "339: @require_chanmsg",
          "340: @commands('tmask')",
          "341: @example('.tmask Welcome to My Channel | Info: {}')",
          "342: def set_mask(bot, trigger):",
          "343:     \"\"\"Set the topic mask to use for the current channel. Within the topic mask, {} is used to allow substituting in chunks of text. This mask is used when running the 'topic' command.",
          "344:     \"\"\"",
          "345:     chanops = get_chanops(str(trigger.sender), bot.memory[\"channelmgnt\"][\"jdcache\"])",
          "346:     if chanops:",
          "347:         if trigger.account in chanops:",
          "348:             bot.db.set_channel_value(trigger.sender, 'topic_mask', trigger.group(2))",
          "349:             bot.say(\"Gotcha, \" + trigger.account)",
          "350:         else:",
          "351:             bot.reply('Access Denied. If in error, please contact the channel founder.')",
          "352:     else:",
          "353:         bot.reply('No ChanOps Found. Please ask for assistance in {}'.format(bot.settings.channelmgnt.support_channel))",
          "356: @require_chanmsg",
          "357: @commands('showmask')",
          "358: @example('showmask')",
          "359: def show_mask(bot, trigger):",
          "360:     \"\"\"Show the topic mask for the current channel.\"\"\"",
          "361:     mask = bot.db.get_channel_value(trigger.sender, 'topic_mask')",
          "362:     mask = mask or default_mask(trigger)",
          "363:     bot.say(mask)",
          "366: @require_chanmsg",
          "367: @commands('invite')",
          "368: def invite_user(bot, trigger):",
          "369:     \"\"\"",
          "370:     Command to invite users to a room.",
          "371:     \"\"\"",
          "372:     chanops = get_chanops(str(trigger.sender), bot.memory[\"channelmgnt\"][\"jdcache\"])",
          "373:     channel = trigger.sender",
          "374:     if chanops:",
          "375:         if bot.channels[trigger.sender].privileges[bot.nick] < OP and trigger.account in chanops:",
          "376:             bot.say('Please wait...')",
          "377:             bot.say('op ' + trigger.sender, 'ChanServ')",
          "378:             time.sleep(1)",
          "379:             nick = trigger.group(2)",
          "380:             if not nick:",
          "381:                 bot.say(trigger.account + \": No user specified.\", trigger.sender)",
          "382:             elif trigger.account in chanops:",
          "383:                 bot.write(['INVITE', channel, nick])",
          "384:             else:",
          "385:                 bot.reply('Access Denied. If in error, please contact the channel founder.')",
          "386:     else:",
          "387:         bot.reply('No ChanOps Found. Please ask for assistance in {}'.format(bot.settings.channelmgnt.support_channel))",
          "390: @require_admin(message=\"Only admins may purge cache.\")",
          "391: @commands('resetchanopcache')",
          "392: def reset_chanop_cache(bot, trigger):",
          "393:     \"\"\"",
          "394:     Reset the cache of the channel management data file",
          "395:     \"\"\"",
          "396:     bot.reply(\"Refreshing Cache...\")",
          "397:     bot.memory[\"channelmgnt\"][\"jdcache\"] = jp.createdict(bot.settings.channelmgnt.datafile)",
          "398:     bot.reply(\"Cache refreshed\")",
          "401: @require_admin(message=\"Only admins may check cache\")",
          "402: @commands('checkchanopcache')",
          "403: def check_chanop_cache(bot, trigger):",
          "404:     \"\"\"",
          "405:     Validate the cache matches the copy on disk",
          "406:     \"\"\"",
          "407:     result = jp.validatecache(bot.settings.channelmgnt.datafile, bot.memory[\"channelmgnt\"][\"jdcache\"])",
          "408:     if result:",
          "409:         bot.reply(\"Cache is correct.\")",
          "410:     else:",
          "411:         bot.reply(\"Cache does not match on-disk copy\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9dbe424e0e51b0a9210b6215f88e3575cdbedb68",
      "candidate_info": {
        "commit_hash": "9dbe424e0e51b0a9210b6215f88e3575cdbedb68",
        "repo": "MirahezeBots/sopel-channelmgnt",
        "commit_url": "https://github.com/MirahezeBots/sopel-channelmgnt/commit/9dbe424e0e51b0a9210b6215f88e3575cdbedb68",
        "files": [
          ".github/workflows/workflow.yml",
          "dev-requirements.txt",
          "requirements.txt",
          "setup.py"
        ],
        "message": "release: build with 3.9 (#69)\n\n* release: build with 3.9\n\n* Update workflow.yml\n\n* Update setup.py\n\n* Update workflow.yml\n\n* Update dev-requirements.txt",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: setup(",
          "12:     name='sopel_plugins.channelmgnt',",
          "14:     description='Channelmgnt plugin for Sopel',",
          "15:     long_description=readme,",
          "16:     long_description_content_type='text/markdown',  # This is important!",
          "",
          "[Removed Lines]",
          "13:     version='2.0.1',",
          "",
          "[Added Lines]",
          "13:     version='2.0.2',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6f403bc81e454e0deffe272863e45f6365b85923",
      "candidate_info": {
        "commit_hash": "6f403bc81e454e0deffe272863e45f6365b85923",
        "repo": "MirahezeBots/sopel-channelmgnt",
        "commit_url": "https://github.com/MirahezeBots/sopel-channelmgnt/commit/6f403bc81e454e0deffe272863e45f6365b85923",
        "files": [
          "setup.py"
        ],
        "message": "bump version",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: setup(",
          "11:     name='sopel_plugins.channelmgnt',",
          "13:     description='Channelmgnt plugin for Sopel',",
          "14:     long_description=readme,",
          "15:     long_description_content_type='text/markdown',  # This is important!",
          "",
          "[Removed Lines]",
          "12:     version='1.0.0',",
          "",
          "[Added Lines]",
          "12:     version='1.0.1',",
          "",
          "---------------"
        ]
      }
    }
  ]
}