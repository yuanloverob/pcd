{
  "cve_id": "CVE-2024-4540",
  "cve_desc": "A flaw was found in Keycloak in OAuth 2.0 Pushed Authorization Requests (PAR). Client-provided parameters were found to be included in plain text in the KC_RESTART cookie returned by the authorization server's HTTP response to a `request_uri` authorization request, possibly leading to an information disclosure vulnerability.",
  "repo": "keycloak/keycloak",
  "patch_hash": "2191cc26ae6deb52eeaf74046027b65804d16fd0",
  "patch_info": {
    "commit_hash": "2191cc26ae6deb52eeaf74046027b65804d16fd0",
    "repo": "keycloak/keycloak",
    "commit_url": "https://github.com/keycloak/keycloak/commit/2191cc26ae6deb52eeaf74046027b65804d16fd0",
    "files": [
      "docs/documentation/release_notes/index.adoc",
      "docs/documentation/release_notes/topics/24_0_5.adoc",
      "services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java",
      "services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java",
      "services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java",
      "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java",
      "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java",
      "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java"
    ],
    "message": "Encrypted KC_RESTART cookie and removed sensitive notes (#167)\n\nCloses #keycloak/keycloak-private#162\n\nSigned-off-by: Giuseppe Graziano <g.graziano94@gmail.com>",
    "before_after_code_files": [
      "services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java||services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java",
      "services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java||services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java",
      "services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java||services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java",
      "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java||testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java",
      "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java",
      "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java"
    ]
  },
  "patch_diff": {
    "services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java||services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java": [
      "File: services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java -> services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "273:     public String cekManagementAlgorithm(TokenCategory category) {",
      "274:         if (category == null) return null;",
      "275:         switch (category) {",
      "276:             case ID:",
      "277:             case LOGOUT:",
      "278:                 return getCekManagementAlgorithm(OIDCConfigAttributes.ID_TOKEN_ENCRYPTED_RESPONSE_ALG);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "276:             case INTERNAL:",
      "277:                 return Algorithm.AES;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "300:         switch (category) {",
      "301:             case ID:",
      "302:                 return getEncryptAlgorithm(OIDCConfigAttributes.ID_TOKEN_ENCRYPTED_RESPONSE_ENC, JWEConstants.A128CBC_HS256);",
      "303:             case LOGOUT:",
      "304:                 return getEncryptAlgorithm(OIDCConfigAttributes.ID_TOKEN_ENCRYPTED_RESPONSE_ENC);",
      "305:             case AUTHORIZATION_RESPONSE:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "305:             case INTERNAL:",
      "306:                 return JWEConstants.A128CBC_HS256;",
      "",
      "---------------"
    ],
    "services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java||services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java": [
      "File: services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java -> services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "23: import org.keycloak.TokenCategory;",
      "24: import org.keycloak.cookie.CookieProvider;",
      "25: import org.keycloak.cookie.CookieType;",
      "26: import org.keycloak.models.ClientModel;",
      "27: import org.keycloak.models.KeycloakSession;",
      "28: import org.keycloak.models.RealmModel;",
      "29: import org.keycloak.services.managers.AuthenticationSessionManager;",
      "30: import org.keycloak.sessions.AuthenticationSessionModel;",
      "31: import org.keycloak.sessions.RootAuthenticationSessionModel;",
      "33: import java.util.HashMap;",
      "34: import java.util.Map;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: import org.keycloak.crypto.KeyUse;",
      "33: import org.keycloak.util.TokenUtil;",
      "35: import javax.crypto.SecretKey;",
      "36: import java.nio.charset.StandardCharsets;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "119:     public static void setRestartCookie(KeycloakSession session, AuthenticationSessionModel authSession) {",
      "120:         RestartLoginCookie restart = new RestartLoginCookie(authSession);",
      "122:         session.getProvider(CookieProvider.class).set(CookieType.AUTH_RESTART, encoded);",
      "123:     }",
      "",
      "[Removed Lines]",
      "121:         String encoded = session.tokens().encode(restart);",
      "",
      "[Added Lines]",
      "125:         String encoded = encodeAndEncrypt(session, restart);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "138:     public static AuthenticationSessionModel restartSession(KeycloakSession session, RealmModel realm,",
      "139:                                                             RootAuthenticationSessionModel rootSession, String expectedClientId,",
      "140:                                                             String encodedCookie) throws Exception {",
      "142:         if (cookie == null) {",
      "143:             logger.debug(\"Failed to verify encoded RestartLoginCookie\");",
      "144:             return null;",
      "",
      "[Removed Lines]",
      "141:         RestartLoginCookie cookie = session.tokens().decode(encodedCookie, RestartLoginCookie.class);",
      "",
      "[Added Lines]",
      "145:         RestartLoginCookie cookie = decryptAndDecode(session, encodedCookie);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "169:         return authSession;",
      "170:     }",
      "172:     @Override",
      "173:     public TokenCategory getCategory() {",
      "174:         return TokenCategory.INTERNAL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:     private static RestartLoginCookie decryptAndDecode(KeycloakSession session, String encodedToken) {",
      "177:         try {",
      "178:             String sigAlgorithm = session.tokens().signatureAlgorithm(TokenCategory.INTERNAL);",
      "179:             String algAlgorithm = session.tokens().cekManagementAlgorithm(TokenCategory.INTERNAL);",
      "180:             SecretKey encKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.ENC, algAlgorithm).getSecretKey();",
      "181:             SecretKey signKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.SIG, sigAlgorithm).getSecretKey();",
      "183:             byte[] contentBytes = TokenUtil.jweDirectVerifyAndDecode(encKey, signKey, encodedToken);",
      "184:             String jwt = new String(contentBytes, StandardCharsets.UTF_8);",
      "185:             return session.tokens().decode(jwt, RestartLoginCookie.class);",
      "186:         } catch (Exception e) {",
      "188:             return session.tokens().decode(encodedToken, RestartLoginCookie.class);",
      "189:         }",
      "190:     }",
      "192:     private static String encodeAndEncrypt(KeycloakSession session, RestartLoginCookie cookie) {",
      "193:         try {",
      "194:             String sigAlgorithm = session.tokens().signatureAlgorithm(cookie.getCategory());",
      "195:             String algAlgorithm = session.tokens().cekManagementAlgorithm(cookie.getCategory());",
      "196:             SecretKey encKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.ENC, algAlgorithm).getSecretKey();",
      "197:             SecretKey signKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.SIG, sigAlgorithm).getSecretKey();",
      "199:             String encodedJwt = session.tokens().encode(cookie);",
      "200:             return TokenUtil.jweDirectEncode(encKey, signKey, encodedJwt.getBytes(StandardCharsets.UTF_8));",
      "201:         } catch (Exception e) {",
      "202:             throw new RuntimeException(\"Error encoding cookie.\", e);",
      "203:         }",
      "204:     }",
      "",
      "---------------"
    ],
    "services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java||services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java": [
      "File: services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java -> services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "74:         KNOWN_REQ_PARAMS.add(OIDCLoginProtocol.CODE_CHALLENGE_PARAM);",
      "75:         KNOWN_REQ_PARAMS.add(OIDCLoginProtocol.CODE_CHALLENGE_METHOD_PARAM);",
      "76:     }",
      "78:     public void parseRequest(AuthorizationEndpointRequest request) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:         KNOWN_REQ_PARAMS.add(OAuth2Constants.CLIENT_ASSERTION_TYPE);",
      "79:         KNOWN_REQ_PARAMS.add(OAuth2Constants.CLIENT_ASSERTION);",
      "80:         KNOWN_REQ_PARAMS.add(OAuth2Constants.CLIENT_SECRET);",
      "",
      "---------------"
    ],
    "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java||testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java": [
      "File: testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java -> testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1198:                 parameters.add(new BasicNameValuePair(OIDCLoginProtocol.RESPONSE_MODE_PARAM, responseMode));",
      "1199:             }",
      "1200:             if (clientId != null && clientSecret != null) {",
      "1203:             }",
      "1205:                 parameters.add(new BasicNameValuePair(OAuth2Constants.CLIENT_ID, clientId));",
      "1206:             }",
      "1207:             if (redirectUri != null) {",
      "",
      "[Removed Lines]",
      "1201:                 String authorization = BasicAuthHelper.createHeader(clientId, clientSecret);",
      "1202:                 post.setHeader(\"Authorization\", authorization);",
      "1204:             if (clientId != null) {",
      "",
      "[Added Lines]",
      "1201:                 parameters.add(new BasicNameValuePair(OAuth2Constants.CLIENT_ID, clientId));",
      "1202:                 parameters.add(new BasicNameValuePair(OAuth2Constants.CLIENT_SECRET, clientSecret));",
      "1204:             else if (clientId != null) {",
      "",
      "---------------"
    ],
    "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java": [
      "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: package org.keycloak.testsuite.forms;",
      "20: import jakarta.ws.rs.core.Response;",
      "21: import java.io.IOException;",
      "22: import org.jboss.arquillian.graphene.page.Page;",
      "23: import org.junit.Rule;",
      "24: import org.junit.Test;",
      "25: import org.keycloak.common.util.MultivaluedHashMap;",
      "26: import org.keycloak.crypto.Algorithm;",
      "27: import org.keycloak.events.Details;",
      "28: import org.keycloak.events.Errors;",
      "29: import org.keycloak.jose.jws.JWSBuilder;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23: import java.nio.charset.StandardCharsets;",
      "24: import java.util.HashSet;",
      "25: import java.util.Set;",
      "30: import org.keycloak.OAuth2Constants;",
      "31: import org.keycloak.TokenCategory;",
      "34: import org.keycloak.crypto.KeyUse;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "32: import org.keycloak.keys.KeyProvider;",
      "33: import org.keycloak.models.KeyManager;",
      "34: import org.keycloak.models.KeycloakSession;",
      "35: import org.keycloak.models.RealmModel;",
      "36: import org.keycloak.models.utils.DefaultKeyProviders;",
      "37: import org.keycloak.protocol.RestartLoginCookie;",
      "38: import org.keycloak.representations.idm.ComponentRepresentation;",
      "39: import org.keycloak.representations.idm.RealmRepresentation;",
      "40: import org.keycloak.testsuite.AbstractTestRealmKeycloakTest;",
      "41: import org.keycloak.testsuite.Assert;",
      "42: import org.keycloak.testsuite.AssertEvents;",
      "43: import org.keycloak.testsuite.pages.LoginPage;",
      "44: import org.openqa.selenium.Cookie;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43: import org.keycloak.models.ParConfig;",
      "47: import org.keycloak.protocol.oidc.endpoints.AuthorizationEndpoint;",
      "54: import org.keycloak.testsuite.util.ClientBuilder;",
      "55: import org.keycloak.testsuite.util.OAuthClient;",
      "56: import org.keycloak.util.TokenUtil;",
      "59: import javax.crypto.SecretKey;",
      "61: import static org.junit.Assert.assertEquals;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "76:             \"  }\\n\" +",
      "77:             \"}\";",
      "79:     @Override",
      "80:     public void configureTestRealm(RealmRepresentation testRealm) {",
      "81:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "96:     public static final Set<String> sensitiveNotes = new HashSet<>();",
      "97:     static {",
      "98:         sensitiveNotes.add(OAuth2Constants.CLIENT_ASSERTION_TYPE);",
      "99:         sensitiveNotes.add(OAuth2Constants.CLIENT_ASSERTION);",
      "100:         sensitiveNotes.add(OAuth2Constants.CLIENT_SECRET);",
      "101:         sensitiveNotes.add(AuthorizationEndpoint.LOGIN_SESSION_NOTE_ADDITIONAL_REQ_PARAMS_PREFIX + OAuth2Constants.CLIENT_ASSERTION_TYPE);",
      "102:         sensitiveNotes.add(AuthorizationEndpoint.LOGIN_SESSION_NOTE_ADDITIONAL_REQ_PARAMS_PREFIX + OAuth2Constants.CLIENT_ASSERTION);",
      "103:         sensitiveNotes.add(AuthorizationEndpoint.LOGIN_SESSION_NOTE_ADDITIONAL_REQ_PARAMS_PREFIX + OAuth2Constants.CLIENT_SECRET);",
      "104:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "99:         }",
      "100:     }",
      "103:     @Test",
      "104:     public void testRestartCookieBackwardsCompatible_Keycloak25() throws IOException {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "129:     @Test",
      "130:     public void testRestartCookie() {",
      "131:         loginPage.open();",
      "132:         String restartCookie = loginPage.getDriver().manage().getCookieNamed(RestartLoginCookie.KC_RESTART).getValue();",
      "133:         assertRestartCookie(restartCookie);",
      "134:     }",
      "136:     @Test",
      "137:     public void testRestartCookieWithPar() {",
      "138:         String clientId = \"par-confidential-client\";",
      "139:         adminClient.realm(\"test\").clients().create(ClientBuilder.create()",
      "140:                 .clientId(\"par-confidential-client\")",
      "141:                 .secret(\"secret\")",
      "142:                 .redirectUris(oauth.getRedirectUri() + \"/*\")",
      "143:                 .attribute(ParConfig.REQUIRE_PUSHED_AUTHORIZATION_REQUESTS, \"true\")",
      "144:                 .build());",
      "146:         oauth.clientId(clientId);",
      "147:         String requestUri = null;",
      "148:         try {",
      "149:             OAuthClient.ParResponse pResp = oauth.doPushedAuthorizationRequest(clientId, \"secret\");",
      "150:             assertEquals(201, pResp.getStatusCode());",
      "151:             requestUri = pResp.getRequestUri();",
      "152:         }",
      "153:         catch (Exception e) {",
      "154:             Assert.fail();",
      "155:         }",
      "157:         oauth.redirectUri(null);",
      "158:         oauth.scope(null);",
      "159:         oauth.responseType(null);",
      "160:         oauth.requestUri(requestUri);",
      "161:         String state = oauth.stateParamRandom().getState();",
      "162:         oauth.stateParamHardcoded(state);",
      "164:         oauth.openLoginForm();",
      "165:         String restartCookie = loginPage.getDriver().manage().getCookieNamed(RestartLoginCookie.KC_RESTART).getValue();",
      "166:         assertRestartCookie(restartCookie);",
      "167:     }",
      "169:     private void assertRestartCookie(String restartCookie) {",
      "170:         getTestingClient()",
      "171:                 .server(TEST_REALM_NAME)",
      "172:                 .run(session ->",
      "173:                 {",
      "174:                     try {",
      "175:                         String sigAlgorithm = session.tokens().signatureAlgorithm(TokenCategory.INTERNAL);",
      "176:                         String encAlgorithm = session.tokens().cekManagementAlgorithm(TokenCategory.INTERNAL);",
      "177:                         SecretKey encKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.ENC, encAlgorithm).getSecretKey();",
      "178:                         SecretKey signKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.SIG, sigAlgorithm).getSecretKey();",
      "180:                         byte[] contentBytes = TokenUtil.jweDirectVerifyAndDecode(encKey, signKey, restartCookie);",
      "181:                         String jwt = new String(contentBytes, StandardCharsets.UTF_8);",
      "182:                         RestartLoginCookie restartLoginCookie = session.tokens().decode(jwt, RestartLoginCookie.class);",
      "183:                         Assert.assertFalse(restartLoginCookie.getNotes().keySet().stream().anyMatch(sensitiveNotes::contains));",
      "184:                     } catch (Exception e) {",
      "185:                         Assert.fail();",
      "186:                     }",
      "187:                 });",
      "188:     }",
      "",
      "---------------"
    ],
    "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java": [
      "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "82:         Assert.assertEquals(AppPage.RequestType.AUTH_RESPONSE, appPage.getRequestType());",
      "84:         providers = realmsResouce().realm(\"test\").components().query(realmId, \"org.keycloak.keys.KeyProvider\");",
      "86:     }",
      "88:     @Test",
      "",
      "[Removed Lines]",
      "85:         assertProviders(providers, \"fallback-RS256\", \"fallback-\" + Constants.INTERNAL_SIGNATURE_ALGORITHM);",
      "",
      "[Added Lines]",
      "85:         assertProviders(providers, \"fallback-RS256\", \"fallback-AES\", \"fallback-\" + Constants.INTERNAL_SIGNATURE_ALGORITHM);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4ff4c3f89783a1c166b0f88ed47e17bac3bb6558",
      "candidate_info": {
        "commit_hash": "4ff4c3f89783a1c166b0f88ed47e17bac3bb6558",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/4ff4c3f89783a1c166b0f88ed47e17bac3bb6558",
        "files": [
          "docs/documentation/upgrading/topics/keycloak/changes-24_0_0.adoc",
          "model/storage-private/src/main/java/org/keycloak/migration/migrators/MigrateTo24_0_0.java",
          "server-spi-private/src/main/java/org/keycloak/models/Constants.java",
          "server-spi-private/src/main/java/org/keycloak/models/utils/DefaultKeyProviders.java",
          "services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java",
          "services/src/main/java/org/keycloak/keys/Attributes.java",
          "services/src/main/java/org/keycloak/keys/GeneratedHmacKeyProviderFactory.java",
          "services/src/main/java/org/keycloak/protocol/oidc/grants/ciba/channel/CIBAAuthenticationRequest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/InitialAccessTokenTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/LoginTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/GeneratedHmacKeyProviderTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/KeyRotationTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/migration/AbstractMigrationTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/AccessTokenTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LogoutTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthProofKeyForCodeExchangeTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OfflineTokenTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RefreshTokenTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/ResourceOwnerPasswordCredentialsGrantTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/ServiceAccountTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/hok/HoKTest.java"
        ],
        "message": "Increase internal algorithm security using HS512 and 128 byte hmac keys Closes #13080\n\nSigned-off-by: rmartinc <rmartinc@redhat.com>",
        "before_after_code_files": [
          "model/storage-private/src/main/java/org/keycloak/migration/migrators/MigrateTo24_0_0.java||model/storage-private/src/main/java/org/keycloak/migration/migrators/MigrateTo24_0_0.java",
          "server-spi-private/src/main/java/org/keycloak/models/Constants.java||server-spi-private/src/main/java/org/keycloak/models/Constants.java",
          "server-spi-private/src/main/java/org/keycloak/models/utils/DefaultKeyProviders.java||server-spi-private/src/main/java/org/keycloak/models/utils/DefaultKeyProviders.java",
          "services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java||services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java",
          "services/src/main/java/org/keycloak/keys/Attributes.java||services/src/main/java/org/keycloak/keys/Attributes.java",
          "services/src/main/java/org/keycloak/keys/GeneratedHmacKeyProviderFactory.java||services/src/main/java/org/keycloak/keys/GeneratedHmacKeyProviderFactory.java",
          "services/src/main/java/org/keycloak/protocol/oidc/grants/ciba/channel/CIBAAuthenticationRequest.java||services/src/main/java/org/keycloak/protocol/oidc/grants/ciba/channel/CIBAAuthenticationRequest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/InitialAccessTokenTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/InitialAccessTokenTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/LoginTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/LoginTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/GeneratedHmacKeyProviderTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/GeneratedHmacKeyProviderTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/KeyRotationTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/KeyRotationTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/migration/AbstractMigrationTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/migration/AbstractMigrationTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/AccessTokenTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/AccessTokenTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LogoutTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LogoutTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthProofKeyForCodeExchangeTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthProofKeyForCodeExchangeTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OfflineTokenTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OfflineTokenTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RefreshTokenTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RefreshTokenTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/ResourceOwnerPasswordCredentialsGrantTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/ResourceOwnerPasswordCredentialsGrantTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/ServiceAccountTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/ServiceAccountTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/hok/HoKTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/hok/HoKTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java||services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java"
          ],
          "candidate": [
            "services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java||services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java"
          ]
        }
      },
      "candidate_diff": {
        "model/storage-private/src/main/java/org/keycloak/migration/migrators/MigrateTo24_0_0.java||model/storage-private/src/main/java/org/keycloak/migration/migrators/MigrateTo24_0_0.java": [
          "File: model/storage-private/src/main/java/org/keycloak/migration/migrators/MigrateTo24_0_0.java -> model/storage-private/src/main/java/org/keycloak/migration/migrators/MigrateTo24_0_0.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.keycloak.models.KeycloakSession;",
          "26: import org.keycloak.models.LDAPConstants;",
          "27: import org.keycloak.models.RealmModel;",
          "28: import org.keycloak.representations.idm.RealmRepresentation;",
          "29: import org.keycloak.representations.userprofile.config.UPConfig;",
          "30: import org.keycloak.representations.userprofile.config.UPConfig.UnmanagedAttributePolicy;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.keycloak.models.utils.DefaultKeyProviders;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:             context.setRealm(realm);",
          "59:             updateUserProfileSettings(session);",
          "60:             updateLdapProviderConfig(session);",
          "61:         } finally {",
          "62:             context.setRealm(null);",
          "63:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:             createHS512ComponentModelKey(session);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:                     realm.updateComponent(c);",
          "97:                 });",
          "98:     }",
          "99: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:     private void createHS512ComponentModelKey(KeycloakSession session) {",
          "103:         RealmModel realm = session.getContext().getRealm();",
          "104:         DefaultKeyProviders.createSecretProvider(realm);",
          "105:     }",
          "",
          "---------------"
        ],
        "server-spi-private/src/main/java/org/keycloak/models/Constants.java||server-spi-private/src/main/java/org/keycloak/models/Constants.java": [
          "File: server-spi-private/src/main/java/org/keycloak/models/Constants.java -> server-spi-private/src/main/java/org/keycloak/models/Constants.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     public static final int DEFAULT_OFFLINE_SESSION_MAX_LIFESPAN = 5184000;",
          "65:     public static final String DEFAULT_SIGNATURE_ALGORITHM = Algorithm.RS256;",
          "67:     public static final int DEFAULT_SESSION_IDLE_TIMEOUT = 1800; // 30 minutes",
          "68:     public static final int DEFAULT_SESSION_MAX_LIFESPAN = 36000; // 10 hours",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     public static final String INTERNAL_SIGNATURE_ALGORITHM = Algorithm.HS512;",
          "",
          "---------------"
        ],
        "server-spi-private/src/main/java/org/keycloak/models/utils/DefaultKeyProviders.java||server-spi-private/src/main/java/org/keycloak/models/utils/DefaultKeyProviders.java": [
          "File: server-spi-private/src/main/java/org/keycloak/models/utils/DefaultKeyProviders.java -> server-spi-private/src/main/java/org/keycloak/models/utils/DefaultKeyProviders.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import org.keycloak.component.ComponentModel;",
          "22: import org.keycloak.crypto.Algorithm;",
          "23: import org.keycloak.crypto.KeyUse;",
          "25: import org.keycloak.keys.KeyProvider;",
          "26: import org.keycloak.models.RealmModel;",
          "",
          "[Removed Lines]",
          "24: import org.keycloak.jose.jwe.JWEConstants;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:     }",
          "81:     public static void createSecretProvider(RealmModel realm) {",
          "83:         ComponentModel generated = new ComponentModel();",
          "85:         generated.setParentId(realm.getId());",
          "86:         generated.setProviderId(\"hmac-generated\");",
          "87:         generated.setProviderType(KeyProvider.class.getName());",
          "89:         MultivaluedHashMap<String, String> config = new MultivaluedHashMap<>();",
          "90:         config.putSingle(\"priority\", DEFAULT_PRIORITY);",
          "92:         generated.setConfig(config);",
          "94:         realm.addComponentModel(generated);",
          "",
          "[Removed Lines]",
          "82:         if (hasProvider(realm, \"hmac-generated\")) return;",
          "84:         generated.setName(\"hmac-generated\");",
          "91:         config.putSingle(\"algorithm\", Algorithm.HS256);",
          "",
          "[Added Lines]",
          "81:         if (hasProvider(realm, \"hmac-generated\", Algorithm.HS512)) return;",
          "83:         generated.setName(\"hmac-generated-hs512\");",
          "90:         config.putSingle(\"algorithm\", Algorithm.HS512);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110:     }",
          "112:     protected static boolean hasProvider(RealmModel realm, String providerId) {",
          "113:         return realm.getComponentsStream(realm.getId(), KeyProvider.class.getName())",
          "115:     }",
          "117:     public static void createProviders(RealmModel realm, String privateKeyPem, String certificatePem) {",
          "",
          "[Removed Lines]",
          "114:                 .anyMatch(component -> Objects.equals(component.getProviderId(), providerId));",
          "",
          "[Added Lines]",
          "112:         return hasProvider(realm, providerId, null);",
          "113:     }",
          "115:     protected static boolean hasProvider(RealmModel realm, String providerId, String algorithm) {",
          "117:                 .anyMatch(component -> Objects.equals(component.getProviderId(), providerId)",
          "118:                         && (algorithm == null || algorithm.equals(component.getConfig().getFirst(\"algorithm\"))));",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java||services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java": [
          "File: services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java -> services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:     public String signatureAlgorithm(TokenCategory category) {",
          "193:         switch (category) {",
          "194:             case INTERNAL:",
          "196:             case ADMIN:",
          "197:                 return getSignatureAlgorithm(null);",
          "198:             case ACCESS:",
          "",
          "[Removed Lines]",
          "195:                 return Algorithm.HS256;",
          "",
          "[Added Lines]",
          "195:                 return Constants.INTERNAL_SIGNATURE_ALGORITHM;",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/keys/Attributes.java||services/src/main/java/org/keycloak/keys/Attributes.java": [
          "File: services/src/main/java/org/keycloak/keys/Attributes.java -> services/src/main/java/org/keycloak/keys/Attributes.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:             Algorithm.RS256, Algorithm.RS384, Algorithm.RS512, Algorithm.PS256, Algorithm.PS384, Algorithm.PS512);",
          "73:     ProviderConfigProperty HS_ALGORITHM_PROPERTY = new ProviderConfigProperty(ALGORITHM_KEY, \"Algorithm\", \"Intended algorithm for the key\", LIST_TYPE,",
          "75:             Algorithm.HS256, Algorithm.HS384, Algorithm.HS512);",
          "77:     ProviderConfigProperty RS_ENC_ALGORITHM_PROPERTY = new ProviderConfigProperty(ALGORITHM_KEY, \"Algorithm\", \"Intended algorithm for the key encryption\", LIST_TYPE,",
          "",
          "[Removed Lines]",
          "74:             Algorithm.HS256,",
          "",
          "[Added Lines]",
          "74:             Algorithm.HS512,",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/keys/GeneratedHmacKeyProviderFactory.java||services/src/main/java/org/keycloak/keys/GeneratedHmacKeyProviderFactory.java": [
          "File: services/src/main/java/org/keycloak/keys/GeneratedHmacKeyProviderFactory.java -> services/src/main/java/org/keycloak/keys/GeneratedHmacKeyProviderFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     private static final String HELP_TEXT = \"Generates HMAC secret key\";",
          "44:     private static final List<ProviderConfigProperty> CONFIG_PROPERTIES = SecretKeyProviderUtils.configurationBuilder()",
          "45:             .property(Attributes.SECRET_SIZE_PROPERTY)",
          "",
          "[Removed Lines]",
          "42:     public static final int DEFAULT_HMAC_KEY_SIZE = 64;",
          "",
          "[Added Lines]",
          "42:     public static final int DEFAULT_HMAC_KEY_SIZE = 128;",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/protocol/oidc/grants/ciba/channel/CIBAAuthenticationRequest.java||services/src/main/java/org/keycloak/protocol/oidc/grants/ciba/channel/CIBAAuthenticationRequest.java": [
          "File: services/src/main/java/org/keycloak/protocol/oidc/grants/ciba/channel/CIBAAuthenticationRequest.java -> services/src/main/java/org/keycloak/protocol/oidc/grants/ciba/channel/CIBAAuthenticationRequest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.keycloak.protocol.oidc.grants.ciba.channel;",
          "23: import com.fasterxml.jackson.annotation.JsonIgnore;",
          "24: import org.keycloak.OAuth2Constants;",
          "25: import org.keycloak.crypto.Algorithm;",
          "26: import org.keycloak.crypto.KeyUse;",
          "",
          "[Removed Lines]",
          "20: import javax.crypto.SecretKey;",
          "21: import java.io.UnsupportedEncodingException;",
          "",
          "[Added Lines]",
          "21: import com.fasterxml.jackson.annotation.JsonProperty;",
          "22: import java.io.UnsupportedEncodingException;",
          "23: import javax.crypto.SecretKey;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: import org.keycloak.jose.jwe.JWEException;",
          "30: import org.keycloak.jose.jws.JWSBuilder;",
          "31: import org.keycloak.models.ClientModel;",
          "32: import org.keycloak.models.KeycloakSession;",
          "33: import org.keycloak.models.RealmModel;",
          "34: import org.keycloak.models.UserModel;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import org.keycloak.models.Constants;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36: import org.keycloak.protocol.oidc.grants.ciba.CibaGrantType;",
          "37: import org.keycloak.representations.IDToken;",
          "38: import org.keycloak.representations.JsonWebToken;",
          "41: import org.keycloak.services.Urls;",
          "42: import org.keycloak.util.TokenUtil;",
          "",
          "[Removed Lines]",
          "40: import com.fasterxml.jackson.annotation.JsonProperty;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:     public static CIBAAuthenticationRequest deserialize(KeycloakSession session, String jwe) {",
          "63:         SecretKey aesKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.ENC, Algorithm.AES).getSecretKey();",
          "66:         try {",
          "67:             byte[] contentBytes = TokenUtil.jweDirectVerifyAndDecode(aesKey, hmacKey, jwe);",
          "",
          "[Removed Lines]",
          "64:         SecretKey hmacKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.SIG, Algorithm.HS256).getSecretKey();",
          "",
          "[Added Lines]",
          "63:         SecretKey hmacKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.SIG, Constants.INTERNAL_SIGNATURE_ALGORITHM).getSecretKey();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "155:     public String serialize(KeycloakSession session) {",
          "156:         try {",
          "158:             SignatureSignerContext signer = signatureProvider.signer();",
          "159:             String encodedJwt = new JWSBuilder().type(\"JWT\").jsonContent(this).sign(signer);",
          "160:             SecretKey aesKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.ENC, Algorithm.AES).getSecretKey();",
          "163:             return TokenUtil.jweDirectEncode(aesKey, hmacKey, encodedJwt.getBytes(\"UTF-8\"));",
          "164:         } catch (JWEException | UnsupportedEncodingException e) {",
          "",
          "[Removed Lines]",
          "157:             SignatureProvider signatureProvider = session.getProvider(SignatureProvider.class, Algorithm.HS256);",
          "161:             SecretKey hmacKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.SIG, Algorithm.HS256).getSecretKey();",
          "",
          "[Added Lines]",
          "156:             SignatureProvider signatureProvider = session.getProvider(SignatureProvider.class, Constants.INTERNAL_SIGNATURE_ALGORITHM);",
          "160:             SecretKey hmacKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.SIG, Constants.INTERNAL_SIGNATURE_ALGORITHM).getSecretKey();",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/InitialAccessTokenTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/InitialAccessTokenTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/InitialAccessTokenTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/InitialAccessTokenTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import org.keycloak.jose.jws.JWSHeader;",
          "29: import org.keycloak.jose.jws.JWSInput;",
          "30: import org.keycloak.jose.jws.JWSInputException;",
          "31: import org.keycloak.representations.idm.ClientInitialAccessCreatePresentation;",
          "32: import org.keycloak.representations.idm.ClientInitialAccessPresentation;",
          "33: import org.keycloak.representations.idm.ClientRepresentation;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import org.keycloak.models.Constants;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:             String token = response.getToken();",
          "83:             JWSHeader header = new JWSInput(token).getHeader();",
          "86:             ClientRepresentation rep = new ClientRepresentation();",
          "87:             ClientRepresentation created = reg.create(rep);",
          "",
          "[Removed Lines]",
          "84:             assertEquals(Algorithm.HS256, header.getAlgorithm().name());",
          "",
          "[Added Lines]",
          "85:             assertEquals(Constants.INTERNAL_SIGNATURE_ALGORITHM, header.getAlgorithm().name());",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/LoginTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/LoginTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/LoginTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/LoginTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: import org.keycloak.jose.jws.JWSInputException;",
          "43: import org.keycloak.models.BrowserSecurityHeaders;",
          "44: import org.keycloak.models.ClientScopeModel;",
          "45: import org.keycloak.models.UserModel.RequiredAction;",
          "46: import org.keycloak.models.utils.SessionTimeoutHelper;",
          "47: import org.keycloak.protocol.oidc.OIDCLoginProtocol;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import org.keycloak.models.Constants;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: import org.keycloak.representations.idm.EventRepresentation;",
          "52: import org.keycloak.representations.idm.RealmRepresentation;",
          "53: import org.keycloak.representations.idm.UserRepresentation;",
          "55: import org.keycloak.testsuite.AbstractTestRealmKeycloakTest;",
          "56: import org.keycloak.testsuite.AssertEvents;",
          "57: import org.keycloak.testsuite.ProfileAssume;",
          "",
          "[Removed Lines]",
          "54: import org.keycloak.services.managers.AuthenticationSessionManager;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "463:         String algorithm = new JWSInput(keycloakIdentity).getHeader().getAlgorithm().name();",
          "466:         try {",
          "467:             TokenSignatureUtil.changeRealmTokenSignatureProvider(adminClient, Algorithm.ES256);",
          "",
          "[Removed Lines]",
          "464:         assertEquals(\"HS256\", algorithm);",
          "",
          "[Added Lines]",
          "464:         assertEquals(Constants.INTERNAL_SIGNATURE_ALGORITHM, algorithm);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "476:             algorithm = new JWSInput(keycloakIdentity).getHeader().getAlgorithm().name();",
          "480:             oauth.openLoginForm();",
          "",
          "[Removed Lines]",
          "477:             assertEquals(\"HS256\", algorithm);",
          "",
          "[Added Lines]",
          "477:             assertEquals(Constants.INTERNAL_SIGNATURE_ALGORITHM, algorithm);",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.keycloak.testsuite.forms;",
          "20: import org.jboss.arquillian.graphene.page.Page;",
          "21: import org.junit.Rule;",
          "22: import org.junit.Test;",
          "23: import org.keycloak.events.Details;",
          "24: import org.keycloak.events.Errors;",
          "25: import org.keycloak.jose.jws.JWSBuilder;",
          "26: import org.keycloak.models.KeyManager;",
          "27: import org.keycloak.models.KeycloakSession;",
          "28: import org.keycloak.models.RealmModel;",
          "29: import org.keycloak.protocol.RestartLoginCookie;",
          "30: import org.keycloak.representations.idm.RealmRepresentation;",
          "31: import org.keycloak.testsuite.AbstractTestRealmKeycloakTest;",
          "32: import org.keycloak.testsuite.Assert;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import jakarta.ws.rs.core.Response;",
          "21: import java.io.IOException;",
          "25: import org.keycloak.common.util.MultivaluedHashMap;",
          "26: import org.keycloak.crypto.Algorithm;",
          "30: import org.keycloak.keys.Attributes;",
          "31: import org.keycloak.keys.GeneratedHmacKeyProviderFactory;",
          "32: import org.keycloak.keys.KeyProvider;",
          "36: import org.keycloak.models.utils.DefaultKeyProviders;",
          "38: import org.keycloak.representations.idm.ComponentRepresentation;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: import org.keycloak.testsuite.pages.LoginPage;",
          "35: import org.openqa.selenium.Cookie;",
          "",
          "[Removed Lines]",
          "37: import java.io.IOException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:     public void configureTestRealm(RealmRepresentation testRealm) {",
          "75:     }",
          "79:     @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:     @Override",
          "84:     protected void afterAbstractKeycloakTestRealmImport() {",
          "86:         ComponentRepresentation rep = new ComponentRepresentation();",
          "87:         rep.setName(GeneratedHmacKeyProviderFactory.ID + \"-256\");",
          "88:         rep.setParentId(testRealm().toRepresentation().getId());",
          "89:         rep.setProviderId(GeneratedHmacKeyProviderFactory.ID);",
          "90:         rep.setProviderType(KeyProvider.class.getName());",
          "92:         MultivaluedHashMap<String, String> config = new MultivaluedHashMap<>();",
          "93:         config.addFirst(Attributes.PRIORITY_KEY, DefaultKeyProviders.DEFAULT_PRIORITY);",
          "94:         config.addFirst(Attributes.ALGORITHM_KEY, Algorithm.HS256);",
          "95:         rep.setConfig(config);",
          "97:         try (Response res = testRealm().components().add(rep)) {",
          "98:             Assert.assertEquals(Response.Status.CREATED.getStatusCode(), res.getStatus());",
          "99:         }",
          "100:     }",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import org.junit.Test;",
          "23: import org.keycloak.OAuth2Constants;",
          "24: import org.keycloak.crypto.Algorithm;",
          "25: import org.keycloak.representations.idm.ComponentRepresentation;",
          "26: import org.keycloak.representations.idm.RealmRepresentation;",
          "27: import org.keycloak.testsuite.AbstractKeycloakTest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import org.keycloak.models.Constants;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:         Assert.assertEquals(AppPage.RequestType.AUTH_RESPONSE, appPage.getRequestType());",
          "83:         providers = realmsResouce().realm(\"test\").components().query(realmId, \"org.keycloak.keys.KeyProvider\");",
          "85:     }",
          "87:     @Test",
          "",
          "[Removed Lines]",
          "84:         assertProviders(providers, \"fallback-RS256\", \"fallback-HS256\");",
          "",
          "[Added Lines]",
          "85:         assertProviders(providers, \"fallback-RS256\", \"fallback-\" + Constants.INTERNAL_SIGNATURE_ALGORITHM);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:         List<String> expected = new LinkedList<>();",
          "119:         expected.add(\"rsa-generated\");",
          "120:         expected.add(\"rsa-enc-generated\");",
          "122:         expected.add(\"aes-generated\");",
          "124:         for (String a : algorithmsToTest) {",
          "",
          "[Removed Lines]",
          "121:         expected.add(\"hmac-generated\");",
          "",
          "[Added Lines]",
          "122:         expected.add(\"hmac-generated-hs512\");",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/GeneratedHmacKeyProviderTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/GeneratedHmacKeyProviderTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/GeneratedHmacKeyProviderTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/GeneratedHmacKeyProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:         assertEquals(priority, key.getProviderPriority());",
          "97:         ComponentRepresentation component = testingClient.server(\"test\").fetch(RunHelpers.internalComponent(id));",
          "99:     }",
          "101:     @Test",
          "",
          "[Removed Lines]",
          "98:         assertEquals(64, Base64Url.decode(component.getConfig().getFirst(\"secret\")).length);",
          "",
          "[Added Lines]",
          "98:         assertEquals(GeneratedHmacKeyProviderFactory.DEFAULT_HMAC_KEY_SIZE, Base64Url.decode(component.getConfig().getFirst(\"secret\")).length);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:         response.close();",
          "148:         ComponentRepresentation component = testingClient.server(\"test\").fetch(RunHelpers.internalComponent(id));",
          "151:         ComponentRepresentation createdRep = adminClient.realm(\"test\").components().component(id).toRepresentation();",
          "152:         createdRep.getConfig().putSingle(\"secretSize\", \"512\");",
          "",
          "[Removed Lines]",
          "149:         assertEquals(64, Base64Url.decode(component.getConfig().getFirst(\"secret\")).length);",
          "",
          "[Added Lines]",
          "149:         assertEquals(GeneratedHmacKeyProviderFactory.DEFAULT_HMAC_KEY_SIZE, Base64Url.decode(component.getConfig().getFirst(\"secret\")).length);",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/KeyRotationTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/KeyRotationTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/KeyRotationTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/KeyRotationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import org.keycloak.keys.GeneratedHmacKeyProviderFactory;",
          "36: import org.keycloak.keys.KeyProvider;",
          "37: import org.keycloak.keys.ImportedRsaKeyProviderFactory;",
          "38: import org.keycloak.representations.idm.ClientInitialAccessCreatePresentation;",
          "39: import org.keycloak.representations.idm.ClientInitialAccessPresentation;",
          "40: import org.keycloak.representations.idm.ClientRepresentation;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import org.keycloak.models.Constants;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:         OAuthClient.AccessTokenResponse response = oauth.doAccessTokenRequest(oauth.getCurrentQuery().get(\"code\"), \"password\");",
          "132:         assertEquals(200, response.getStatusCode());",
          "133:         assertTokenKid(keys1.get(Algorithm.RS256), response.getAccessToken());",
          "137:         ClientInitialAccessCreatePresentation initialToken = new ClientInitialAccessCreatePresentation();",
          "",
          "[Removed Lines]",
          "134:         assertTokenKid(keys1.get(Algorithm.HS256), response.getRefreshToken());",
          "",
          "[Added Lines]",
          "135:         assertTokenKid(keys1.get(Constants.INTERNAL_SIGNATURE_ALGORITHM), response.getRefreshToken());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "158:         Map<String, String> keys2 = createKeys2();",
          "160:         assertNotEquals(keys1.get(Algorithm.RS256), keys2.get(Algorithm.RS256));",
          "164:         response = oauth.doRefreshTokenRequest(response.getRefreshToken(), \"password\");",
          "165:         assertEquals(200, response.getStatusCode());",
          "166:         assertTokenKid(keys2.get(Algorithm.RS256), response.getAccessToken());",
          "170:         assertUserInfo(response.getAccessToken(), 200);",
          "",
          "[Removed Lines]",
          "161:         assertNotEquals(keys1.get(Algorithm.HS256), keys2.get(Algorithm.HS512));",
          "167:         assertTokenKid(keys2.get(Algorithm.HS256), response.getRefreshToken());",
          "",
          "[Added Lines]",
          "162:         assertNotEquals(keys1.get(Constants.INTERNAL_SIGNATURE_ALGORITHM), keys2.get(Algorithm.HS512));",
          "168:         assertTokenKid(keys2.get(Constants.INTERNAL_SIGNATURE_ALGORITHM), response.getRefreshToken());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "183:         response = oauth.doRefreshTokenRequest(response.getRefreshToken(), \"password\");",
          "185:         assertTokenKid(keys2.get(Algorithm.RS256), response.getAccessToken());",
          "189:         assertUserInfo(response.getAccessToken(), 200);",
          "",
          "[Removed Lines]",
          "186:         assertTokenKid(keys2.get(Algorithm.HS256), response.getRefreshToken());",
          "",
          "[Added Lines]",
          "187:         assertTokenKid(keys2.get(Constants.INTERNAL_SIGNATURE_ALGORITHM), response.getRefreshToken());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "279:         rep.setProviderId(ImportedRsaKeyProviderFactory.ID);",
          "280:         rep.setProviderType(KeyProvider.class.getName());",
          "283:         config.addFirst(\"priority\", priority);",
          "284:         config.addFirst(Attributes.PRIVATE_KEY_KEY, privateKeyPem);",
          "285:         rep.setConfig(config);",
          "",
          "[Removed Lines]",
          "282:         org.keycloak.common.util.MultivaluedHashMap config = new org.keycloak.common.util.MultivaluedHashMap();",
          "",
          "[Added Lines]",
          "283:         org.keycloak.common.util.MultivaluedHashMap<String, String> config = new org.keycloak.common.util.MultivaluedHashMap<>();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "293:         rep.setProviderId(GeneratedHmacKeyProviderFactory.ID);",
          "294:         rep.setProviderType(KeyProvider.class.getName());",
          "298:         rep.setConfig(config);",
          "300:         response = adminClient.realm(\"test\").components().add(rep);",
          "",
          "[Removed Lines]",
          "296:         config = new org.keycloak.common.util.MultivaluedHashMap();",
          "297:         config.addFirst(\"priority\", priority);",
          "",
          "[Added Lines]",
          "297:         config = new org.keycloak.common.util.MultivaluedHashMap<>();",
          "298:         config.addFirst(Attributes.PRIORITY_KEY, priority);",
          "299:         config.addFirst(Attributes.ALGORITHM_KEY, Constants.INTERNAL_SIGNATURE_ALGORITHM);",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/migration/AbstractMigrationTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/migration/AbstractMigrationTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/migration/AbstractMigrationTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/migration/AbstractMigrationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import org.keycloak.common.constants.KerberosConstants;",
          "35: import org.keycloak.common.util.MultivaluedHashMap;",
          "36: import org.keycloak.component.PrioritizedComponentModel;",
          "37: import org.keycloak.keys.KeyProvider;",
          "38: import org.keycloak.models.AccountRoles;",
          "39: import org.keycloak.models.AdminRoles;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import org.keycloak.crypto.Algorithm;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: import org.keycloak.representations.idm.ClientRepresentation;",
          "56: import org.keycloak.representations.idm.ClientScopeRepresentation;",
          "57: import org.keycloak.representations.idm.ComponentRepresentation;",
          "58: import org.keycloak.representations.idm.MappingsRepresentation;",
          "59: import org.keycloak.representations.idm.ProtocolMapperRepresentation;",
          "60: import org.keycloak.representations.idm.RealmRepresentation;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: import org.keycloak.representations.idm.KeysMetadataRepresentation;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "405:             testUnmanagedAttributePolicySet(migrationRealm, UnmanagedAttributePolicy.ENABLED);",
          "406:             testUserProfileEnabledByDefault(migrationRealm2);",
          "407:             testUnmanagedAttributePolicySet(migrationRealm2, null);",
          "408:         }",
          "409:         if (testLdapUseTruststoreSpiMigration) {",
          "410:             testLdapUseTruststoreSpiMigration(migrationRealm2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410:             testHS512KeyCreated(migrationRealm);",
          "411:             testHS512KeyCreated(migrationRealm2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "670:         ComponentRepresentation component = testingClient.server(MIGRATION).fetch(RunHelpers.internalComponent(components.get(0).getId()));",
          "671:         assertEquals(expectedMigrationRealmKey, component.getConfig().getFirst(\"privateKey\"));",
          "674:         assertEquals(1, components.size());",
          "675:     }",
          "",
          "[Removed Lines]",
          "673:         components = migrationRealm.components().query(realmId, KeyProvider.class.getName(), \"hmac-generated\");",
          "",
          "[Added Lines]",
          "677:         components = migrationRealm.components().query(realmId, KeyProvider.class.getName(), \"hmac-generated-hs512\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1237:         assertNotNull(config);",
          "1238:         assertThat(config.getFirst(LDAPConstants.USE_TRUSTSTORE_SPI), equalTo(LDAPConstants.USE_TRUSTSTORE_ALWAYS));",
          "1239:     }",
          "1240: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1245:     private void testHS512KeyCreated(RealmResource realm) {",
          "1246:         List<ComponentRepresentation> keyProviders = realm.components().query(realm.toRepresentation().getId(), KeyProvider.class.getName());",
          "1247:         Assert.assertTrue(\"Old HS256 key provider does not exists\",",
          "1248:                 keyProviders.stream().anyMatch(c -> \"hmac-generated\".equals(c.getProviderId())",
          "1249:                         && c.getConfig().getFirst(\"algorithm\").equals(Algorithm.HS256)));",
          "1250:         Assert.assertTrue(\"New HS512 key provider does not exists\",",
          "1251:                 keyProviders.stream().anyMatch(c -> \"hmac-generated\".equals(c.getProviderId())",
          "1252:                         && c.getConfig().getFirst(\"algorithm\").equals(Algorithm.HS512)));",
          "1253:         KeysMetadataRepresentation keysMetadata = realm.keys().getKeyMetadata();",
          "1254:         Assert.assertNotNull(\"Old HS256 key does not exist\", keysMetadata.getActive().get(Algorithm.HS256));",
          "1255:         Assert.assertNotNull(\"New HS256 key does not exist\", keysMetadata.getActive().get(Algorithm.HS512));",
          "1256:     }",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/AccessTokenTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/AccessTokenTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/AccessTokenTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/AccessTokenTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: import org.keycloak.jose.jws.JWSHeader;",
          "49: import org.keycloak.jose.jws.JWSInput;",
          "50: import org.keycloak.jose.jws.JWSInputException;",
          "51: import org.keycloak.models.ProtocolMapperModel;",
          "52: import org.keycloak.models.UserModel;",
          "53: import org.keycloak.models.utils.KeycloakModelUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: import org.keycloak.models.Constants;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "214:         assertNull(header.getContentType());",
          "216:         header = new JWSInput(response.getRefreshToken()).getHeader();",
          "218:         assertEquals(\"JWT\", header.getType());",
          "219:         assertNull(header.getContentType());",
          "",
          "[Removed Lines]",
          "217:         assertEquals(\"HS256\", header.getAlgorithm().name());",
          "",
          "[Added Lines]",
          "218:         assertEquals(Constants.INTERNAL_SIGNATURE_ALGORITHM, header.getAlgorithm().name());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1273:     @Test",
          "1274:     public void accessTokenRequest_ClientPS384_RealmRS256() throws Exception {",
          "1276:     }",
          "1278:     @Test",
          "1279:     public void accessTokenRequest_ClientPS256_RealmPS256() throws Exception {",
          "1281:     }",
          "1283:     @Test",
          "1284:     public void accessTokenRequest_ClientPS512_RealmPS256() throws Exception {",
          "1286:     }",
          "1288:     @Test",
          "1289:     public void accessTokenRequest_ClientRS384_RealmRS256() throws Exception {",
          "1291:     }",
          "1293:     @Test",
          "1294:     public void accessTokenRequest_ClientRS512_RealmRS512() throws Exception {",
          "1296:     }",
          "1298:     @Test",
          "1299:     public void accessTokenRequest_ClientES256_RealmPS256() throws Exception {",
          "1301:     }",
          "1303:     @Test",
          "1304:     public void accessTokenRequest_ClientES384_RealmES384() throws Exception {",
          "1306:     }",
          "1308:     @Test",
          "1309:     public void accessTokenRequest_ClientES512_RealmRS256() throws Exception {",
          "1311:     }",
          "1313:     @Test",
          "1314:     public void accessTokenRequest_ClientEdDSA_RealmES256() throws Exception {",
          "1316:     }",
          "1318:     @Test",
          "1319:     public void accessTokenRequest_ClientEdDSA_RealmEdDSA() throws Exception {",
          "1321:     }",
          "1323:     @Test",
          "",
          "[Removed Lines]",
          "1275:         conductAccessTokenRequest(Algorithm.HS256, Algorithm.PS384, Algorithm.RS256);",
          "1280:         conductAccessTokenRequest(Algorithm.HS256, Algorithm.PS256, Algorithm.PS256);",
          "1285:         conductAccessTokenRequest(Algorithm.HS256, Algorithm.PS512, Algorithm.PS256);",
          "1290:         conductAccessTokenRequest(Algorithm.HS256, Algorithm.RS384, Algorithm.RS256);",
          "1295:         conductAccessTokenRequest(Algorithm.HS256, Algorithm.RS512, Algorithm.RS512);",
          "1300:         conductAccessTokenRequest(Algorithm.HS256, Algorithm.ES256, Algorithm.PS256);",
          "1305:         conductAccessTokenRequest(Algorithm.HS256, Algorithm.ES384, Algorithm.ES384);",
          "1310:         conductAccessTokenRequest(Algorithm.HS256, Algorithm.ES512, Algorithm.RS256);",
          "1315:         conductAccessTokenRequest(Algorithm.HS256, Algorithm.EdDSA, Algorithm.ES256);",
          "1320:         conductAccessTokenRequest(Algorithm.HS256, Algorithm.EdDSA, Algorithm.EdDSA);",
          "",
          "[Added Lines]",
          "1276:         conductAccessTokenRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.PS384, Algorithm.RS256);",
          "1281:         conductAccessTokenRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.PS256, Algorithm.PS256);",
          "1286:         conductAccessTokenRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.PS512, Algorithm.PS256);",
          "1291:         conductAccessTokenRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.RS384, Algorithm.RS256);",
          "1296:         conductAccessTokenRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.RS512, Algorithm.RS512);",
          "1301:         conductAccessTokenRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.ES256, Algorithm.PS256);",
          "1306:         conductAccessTokenRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.ES384, Algorithm.ES384);",
          "1311:         conductAccessTokenRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.ES512, Algorithm.RS256);",
          "1316:         conductAccessTokenRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.EdDSA, Algorithm.ES256);",
          "1321:         conductAccessTokenRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.EdDSA, Algorithm.EdDSA);",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LogoutTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LogoutTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LogoutTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LogoutTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import org.keycloak.events.Details;",
          "32: import org.keycloak.jose.jws.JWSHeader;",
          "33: import org.keycloak.jose.jws.JWSInput;",
          "34: import org.keycloak.protocol.oidc.OIDCConfigAttributes;",
          "35: import org.keycloak.protocol.oidc.OIDCLoginProtocol;",
          "36: import org.keycloak.representations.LogoutToken;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import org.keycloak.models.Constants;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:         try {",
          "260:             TokenSignatureUtil.changeRealmTokenSignatureProvider(adminClient, \"RS384\");",
          "261:             TokenSignatureUtil.changeClientAccessTokenSignatureProvider(ApiUtil.findClientByClientId(adminClient.realm(\"test\"), \"test-app\"), \"RS512\");",
          "263:         } finally {",
          "264:             TokenSignatureUtil.changeRealmTokenSignatureProvider(adminClient, \"RS256\");",
          "265:             TokenSignatureUtil.changeClientAccessTokenSignatureProvider(ApiUtil.findClientByClientId(adminClient.realm(\"test\"), \"test-app\"), \"RS256\");",
          "",
          "[Removed Lines]",
          "262:             backchannelLogoutRequest(\"HS256\", \"RS512\", \"RS384\");",
          "",
          "[Added Lines]",
          "263:             backchannelLogoutRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, \"RS512\", \"RS384\");",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthProofKeyForCodeExchangeTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthProofKeyForCodeExchangeTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthProofKeyForCodeExchangeTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthProofKeyForCodeExchangeTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: import org.keycloak.jose.jwk.JWK;",
          "15: import org.keycloak.jose.jws.JWSHeader;",
          "16: import org.keycloak.jose.jws.JWSInput;",
          "17: import org.keycloak.models.utils.KeycloakModelUtils;",
          "18: import org.keycloak.protocol.oidc.OIDCAdvancedConfigWrapper;",
          "19: import org.keycloak.representations.AccessToken;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: import org.keycloak.models.Constants;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "465:         assertNull(header.getContentType());",
          "467:         header = new JWSInput(response.getRefreshToken()).getHeader();",
          "469:         assertEquals(\"JWT\", header.getType());",
          "470:         assertNull(header.getContentType());",
          "",
          "[Removed Lines]",
          "468:         assertEquals(\"HS256\", header.getAlgorithm().name());",
          "",
          "[Added Lines]",
          "469:         assertEquals(Constants.INTERNAL_SIGNATURE_ALGORITHM, header.getAlgorithm().name());",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OfflineTokenTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OfflineTokenTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OfflineTokenTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OfflineTokenTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "823:     @Test",
          "824:     public void offlineTokenRequest_ClientES256_RealmPS256() throws Exception {",
          "826:     }",
          "828:     @Test",
          "829:     public void offlineTokenRequest_ClientPS256_RealmES256() throws Exception {",
          "831:     }",
          "833:     private void conductOfflineTokenRequest(String expectedRefreshAlg, String expectedAccessAlg, String expectedIdTokenAlg) throws Exception {",
          "",
          "[Removed Lines]",
          "825:         conductOfflineTokenRequest(Algorithm.HS256, Algorithm.ES256, Algorithm.PS256);",
          "830:         conductOfflineTokenRequest(Algorithm.HS256, Algorithm.PS256, Algorithm.ES256);",
          "",
          "[Added Lines]",
          "825:         conductOfflineTokenRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.ES256, Algorithm.PS256);",
          "830:         conductOfflineTokenRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.PS256, Algorithm.ES256);",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RefreshTokenTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RefreshTokenTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RefreshTokenTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RefreshTokenTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: import org.keycloak.jose.jws.JWSInput;",
          "43: import org.keycloak.models.AuthenticatedClientSessionModel;",
          "44: import org.keycloak.models.ClientModel;",
          "45: import org.keycloak.models.RealmModel;",
          "46: import org.keycloak.models.UserModel;",
          "47: import org.keycloak.models.UserSessionModel;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import org.keycloak.models.Constants;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1737:     @Test",
          "1738:     public void tokenRefreshRequest_ClientRS384_RealmRS384() throws Exception {",
          "1740:     }",
          "1742:     @Test",
          "1743:     public void tokenRefreshRequest_ClientRS512_RealmRS256() throws Exception {",
          "1745:     }",
          "1747:     @Test",
          "1748:     public void tokenRefreshRequest_ClientES256_RealmRS256() throws Exception {",
          "1750:     }",
          "1752:     @Test",
          "1753:     public void tokenRefreshRequest_ClientES384_RealmES384() throws Exception {",
          "1755:     }",
          "1757:     @Test",
          "1758:     public void tokenRefreshRequest_ClientES512_RealmRS256() throws Exception {",
          "1760:     }",
          "1762:     @Test",
          "1763:     public void tokenRefreshRequest_ClientPS256_RealmRS256() throws Exception {",
          "1765:     }",
          "1767:     @Test",
          "1768:     public void tokenRefreshRequest_ClientPS384_RealmES384() throws Exception {",
          "1770:     }",
          "1772:     @Test",
          "1773:     public void tokenRefreshRequest_ClientPS512_RealmPS256() throws Exception {",
          "1775:     }",
          "1777:     protected Response executeRefreshToken(WebTarget refreshTarget, String refreshToken) {",
          "",
          "[Removed Lines]",
          "1739:         conductTokenRefreshRequest(Algorithm.HS256, Algorithm.RS384, Algorithm.RS384);",
          "1744:         conductTokenRefreshRequest(Algorithm.HS256, Algorithm.RS512, Algorithm.RS256);",
          "1749:         conductTokenRefreshRequest(Algorithm.HS256, Algorithm.ES256, Algorithm.RS256);",
          "1754:         conductTokenRefreshRequest(Algorithm.HS256, Algorithm.ES384, Algorithm.ES384);",
          "1759:         conductTokenRefreshRequest(Algorithm.HS256, Algorithm.ES512, Algorithm.RS256);",
          "1764:         conductTokenRefreshRequest(Algorithm.HS256, Algorithm.PS256, Algorithm.RS256);",
          "1769:         conductTokenRefreshRequest(Algorithm.HS256, Algorithm.PS384, Algorithm.ES384);",
          "1774:         conductTokenRefreshRequest(Algorithm.HS256, Algorithm.PS512, Algorithm.PS256);",
          "",
          "[Added Lines]",
          "1740:         conductTokenRefreshRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.RS384, Algorithm.RS384);",
          "1745:         conductTokenRefreshRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.RS512, Algorithm.RS256);",
          "1750:         conductTokenRefreshRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.ES256, Algorithm.RS256);",
          "1755:         conductTokenRefreshRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.ES384, Algorithm.ES384);",
          "1760:         conductTokenRefreshRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.ES512, Algorithm.RS256);",
          "1765:         conductTokenRefreshRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.PS256, Algorithm.RS256);",
          "1770:         conductTokenRefreshRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.PS384, Algorithm.ES384);",
          "1775:         conductTokenRefreshRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.PS512, Algorithm.PS256);",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/ResourceOwnerPasswordCredentialsGrantTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/ResourceOwnerPasswordCredentialsGrantTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/ResourceOwnerPasswordCredentialsGrantTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/ResourceOwnerPasswordCredentialsGrantTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: import org.keycloak.jose.jws.JWSHeader;",
          "40: import org.keycloak.jose.jws.JWSInput;",
          "41: import org.keycloak.models.ClientScopeModel;",
          "42: import org.keycloak.models.UserModel;",
          "43: import org.keycloak.models.utils.KeycloakModelUtils;",
          "44: import org.keycloak.models.utils.TimeBasedOTP;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: import org.keycloak.models.Constants;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "350:     @Test",
          "351:     public void grantRequest_ClientES256_RealmPS256() throws Exception {",
          "353:     }",
          "355:     @Test",
          "356:     public void grantRequest_ClientPS256_RealmES256() throws Exception {",
          "358:     }",
          "360:     private void conductGrantRequest(String expectedRefreshAlg, String expectedAccessAlg, String realmTokenAlg) throws Exception {",
          "",
          "[Removed Lines]",
          "352:      conductGrantRequest(Algorithm.HS256, Algorithm.ES256, Algorithm.PS256);",
          "357:      conductGrantRequest(Algorithm.HS256, Algorithm.PS256, Algorithm.ES256);",
          "",
          "[Added Lines]",
          "353:         conductGrantRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.ES256, Algorithm.PS256);",
          "358:         conductGrantRequest(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.PS256, Algorithm.ES256);",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/ServiceAccountTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/ServiceAccountTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/ServiceAccountTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/ServiceAccountTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import org.keycloak.events.EventType;",
          "36: import org.keycloak.jose.jws.JWSHeader;",
          "37: import org.keycloak.jose.jws.JWSInput;",
          "38: import org.keycloak.models.utils.KeycloakModelUtils;",
          "39: import org.keycloak.protocol.oidc.OIDCConfigAttributes;",
          "40: import org.keycloak.protocol.oidc.mappers.SHA256PairwiseSubMapper;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import org.keycloak.models.Constants;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "335:     @Test",
          "336:     public void clientCredentialsAuthRequest_ClientES256_RealmPS256() throws Exception {",
          "338:     }",
          "340:     @Test",
          "",
          "[Removed Lines]",
          "337:      conductClientCredentialsAuthRequestWithRefreshToken(Algorithm.HS256, Algorithm.ES256, Algorithm.PS256);",
          "",
          "[Added Lines]",
          "338:         conductClientCredentialsAuthRequestWithRefreshToken(Constants.INTERNAL_SIGNATURE_ALGORITHM, Algorithm.ES256, Algorithm.PS256);",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/hok/HoKTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/hok/HoKTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/hok/HoKTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/hok/HoKTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: import org.keycloak.jose.jws.JWSInput;",
          "47: import org.keycloak.jose.jws.JWSInputException;",
          "48: import org.keycloak.jose.jws.crypto.HashUtils;",
          "49: import org.keycloak.protocol.oidc.OIDCAdvancedConfigWrapper;",
          "50: import org.keycloak.protocol.oidc.utils.OIDCResponseType;",
          "51: import org.keycloak.representations.AccessToken;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: import org.keycloak.models.Constants;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:         assertNull(header.getContentType());",
          "245:         header = new JWSInput(response.getRefreshToken()).getHeader();",
          "247:         assertEquals(\"JWT\", header.getType());",
          "248:         assertNull(header.getContentType());",
          "",
          "[Removed Lines]",
          "246:         assertEquals(\"HS256\", header.getAlgorithm().name());",
          "",
          "[Added Lines]",
          "247:         assertEquals(Constants.INTERNAL_SIGNATURE_ALGORITHM, header.getAlgorithm().name());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee998fee66bc265e05846b1672b6e86d0deae896",
      "candidate_info": {
        "commit_hash": "ee998fee66bc265e05846b1672b6e86d0deae896",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/ee998fee66bc265e05846b1672b6e86d0deae896",
        "files": [
          "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java",
          "services/src/main/resources/keycloak-default-client-profiles.json",
          "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/AbstractFAPITest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/FAPI1Test.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/FAPI2Test.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/FAPICIBATest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/policies/AbstractClientPoliciesTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/policies/ClientPoliciesExtendedEventTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/policies/ClientPoliciesLoadUpdateTest.java"
        ],
        "message": "Add FAPI 2.0 security profile as default profile of client policies\n\ncloses #21181",
        "before_after_code_files": [
          "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java||services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java",
          "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java||testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/AbstractFAPITest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/AbstractFAPITest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/FAPI1Test.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/FAPI1Test.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/FAPI2Test.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/FAPI2Test.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/FAPICIBATest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/FAPICIBATest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/policies/AbstractClientPoliciesTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/policies/AbstractClientPoliciesTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/policies/ClientPoliciesExtendedEventTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/policies/ClientPoliciesExtendedEventTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/policies/ClientPoliciesLoadUpdateTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/policies/ClientPoliciesLoadUpdateTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java||testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java"
          ],
          "candidate": [
            "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java||testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java"
          ]
        }
      },
      "candidate_diff": {
        "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java||services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java": [
          "File: services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java -> services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import org.keycloak.services.clientpolicy.ClientPolicyContext;",
          "31: import org.keycloak.services.clientpolicy.ClientPolicyException;",
          "32: import org.keycloak.services.clientpolicy.ClientPolicyVote;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import org.keycloak.services.clientpolicy.context.PreAuthorizationRequestContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:     @Override",
          "69:     public ClientPolicyVote applyPolicy(ClientPolicyContext context) throws ClientPolicyException {",
          "70:         switch (context.getEvent()) {",
          "71:             case AUTHORIZATION_REQUEST:",
          "72:             case TOKEN_REQUEST:",
          "73:             case TOKEN_RESPONSE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:             case PRE_AUTHORIZATION_REQUEST:",
          "73:                 PreAuthorizationRequestContext paContext = (PreAuthorizationRequestContext) context;",
          "74:                 ClientModel client = session.getContext().getRealm().getClientByClientId(paContext.getClientId());",
          "75:                 if (isRolesMatched(client)) return ClientPolicyVote.YES;",
          "76:                 return ClientPolicyVote.NO;",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java||testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java": [
          "File: testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java -> testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1140:     }",
          "1142:     public ParResponse doPushedAuthorizationRequest(String clientId, String clientSecret) throws IOException {",
          "1144:     }",
          "1146:     public ParResponse doPushedAuthorizationRequest(String clientId, String clientSecret, Consumer<CloseableHttpResponse> c) throws IOException {",
          "1148:             HttpPost post = new HttpPost(getParEndpointUrl());",
          "1150:             List<NameValuePair> parameters = new LinkedList<>();",
          "1152:             if (origin != null) {",
          "1153:                 post.addHeader(\"Origin\", origin);",
          "1154:             }",
          "",
          "[Removed Lines]",
          "1143:         return doPushedAuthorizationRequest(clientId, clientSecret, (CloseableHttpResponse c)->{});",
          "1147:         try (CloseableHttpClient client = HttpClientBuilder.create().build()) {",
          "",
          "[Added Lines]",
          "1143:         return doPushedAuthorizationRequest(clientId, clientSecret, (CloseableHttpResponse c)->{}, null);",
          "1144:     }",
          "1146:     public ParResponse doPushedAuthorizationRequest(String clientId, String clientSecret, String signedJwt) throws IOException {",
          "1147:         return doPushedAuthorizationRequest(clientId, clientSecret, (CloseableHttpResponse c)->{}, signedJwt);",
          "1151:         return doPushedAuthorizationRequest(clientId, clientSecret, c, null);",
          "1152:     }",
          "1154:     public ParResponse doPushedAuthorizationRequest(String clientId, String clientSecret, Consumer<CloseableHttpResponse> c, String signedJwt) throws IOException {",
          "1155:         try (CloseableHttpClient client = httpClient.get()) {",
          "1160:             if (signedJwt != null) {",
          "1161:                 parameters.add(new BasicNameValuePair(OAuth2Constants.CLIENT_ASSERTION_TYPE, OAuth2Constants.CLIENT_ASSERTION_TYPE_JWT));",
          "1162:                 parameters.add(new BasicNameValuePair(OAuth2Constants.CLIENT_ASSERTION, signedJwt));",
          "1163:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1161:             if (clientId != null && clientSecret != null) {",
          "1162:                 String authorization = BasicAuthHelper.createHeader(clientId, clientSecret);",
          "1163:                 post.setHeader(\"Authorization\", authorization);",
          "1164:                 parameters.add(new BasicNameValuePair(OAuth2Constants.CLIENT_ID, clientId));",
          "1165:             }",
          "1166:             if (redirectUri != null) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1177:             }",
          "1178:             if (clientId != null) {",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/AbstractFAPITest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/AbstractFAPITest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/AbstractFAPITest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/AbstractFAPITest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.keycloak.testsuite.client;",
          "20: import static org.junit.Assert.assertEquals;",
          "21: import static org.keycloak.testsuite.admin.AbstractAdminTest.loadJson;",
          "23: import java.security.KeyPair;",
          "24: import java.security.PrivateKey;",
          "25: import java.security.PublicKey;",
          "26: import java.util.Arrays;",
          "27: import java.util.Collection;",
          "28: import java.util.Collections;",
          "29: import java.util.LinkedList;",
          "30: import java.util.List;",
          "31: import java.util.Map;",
          "32: import java.util.function.Supplier;",
          "34: import org.apache.http.NameValuePair;",
          "35: import org.apache.http.client.entity.UrlEncodedFormEntity;",
          "36: import org.apache.http.client.methods.CloseableHttpResponse;",
          "37: import org.apache.http.client.methods.HttpPost;",
          "38: import org.apache.http.impl.client.CloseableHttpClient;",
          "39: import org.apache.http.message.BasicNameValuePair;",
          "40: import org.hamcrest.Matchers;",
          "41: import org.jboss.arquillian.graphene.page.Page;",
          "42: import org.junit.Assume;",
          "43: import org.junit.BeforeClass;",
          "44: import org.keycloak.OAuth2Constants;",
          "45: import org.keycloak.admin.client.resource.UserResource;",
          "46: import org.keycloak.models.AdminRoles;",
          "47: import org.keycloak.models.Constants;",
          "48: import org.keycloak.representations.AuthorizationResponseToken;",
          "49: import org.keycloak.representations.IDToken;",
          "50: import org.keycloak.representations.idm.CredentialRepresentation;",
          "51: import org.keycloak.representations.idm.RealmRepresentation;",
          "52: import org.keycloak.representations.idm.UserRepresentation;",
          "53: import org.keycloak.testsuite.Assert;",
          "54: import org.keycloak.testsuite.admin.ApiUtil;",
          "55: import org.keycloak.testsuite.client.policies.AbstractClientPoliciesTest;",
          "56: import org.keycloak.testsuite.client.resources.TestOIDCEndpointsApplicationResource;",
          "57: import org.keycloak.testsuite.pages.AppPage;",
          "58: import org.keycloak.testsuite.pages.ErrorPage;",
          "59: import org.keycloak.testsuite.pages.LoginPage;",
          "60: import org.keycloak.testsuite.pages.OAuthGrantPage;",
          "61: import org.keycloak.testsuite.util.OAuthClient;",
          "62: import org.keycloak.testsuite.util.ServerURLs;",
          "64: public abstract class AbstractFAPITest extends AbstractClientPoliciesTest {",
          "66:     protected final String TEST_USERNAME = \"john\";",
          "67:     protected final String TEST_USERSECRET = \"password\";",
          "69:     @Page",
          "70:     protected ErrorPage errorPage;",
          "72:     @Page",
          "73:     protected LoginPage loginPage;",
          "75:     @Page",
          "76:     protected OAuthGrantPage grantPage;",
          "78:     @Page",
          "79:     protected AppPage appPage;",
          "81:     @BeforeClass",
          "82:     public static void verifySSL() {",
          "84:         Assume.assumeTrue(\"The FAPI test requires SSL to be enabled.\", ServerURLs.AUTH_SERVER_SSL_REQUIRED);",
          "85:     }",
          "87:     @Override",
          "88:     public void addTestRealms(List<RealmRepresentation> testRealms) {",
          "89:         RealmRepresentation realm = loadJson(getClass().getResourceAsStream(\"/testrealm.json\"), RealmRepresentation.class);",
          "91:         List<UserRepresentation> users = realm.getUsers();",
          "93:         LinkedList<CredentialRepresentation> credentials = new LinkedList<>();",
          "94:         CredentialRepresentation password = new CredentialRepresentation();",
          "95:         password.setType(CredentialRepresentation.PASSWORD);",
          "96:         password.setValue(TEST_USERSECRET);",
          "97:         credentials.add(password);",
          "99:         UserRepresentation user = new UserRepresentation();",
          "100:         user.setEnabled(true);",
          "101:         user.setUsername(TEST_USERNAME);",
          "102:         user.setEmail(\"john@keycloak.org\");",
          "103:         user.setFirstName(\"Johny\");",
          "104:         user.setCredentials(credentials);",
          "105:         user.setClientRoles(Collections.singletonMap(Constants.REALM_MANAGEMENT_CLIENT_ID, Arrays.asList(AdminRoles.CREATE_CLIENT, AdminRoles.MANAGE_CLIENTS)));",
          "106:         users.add(user);",
          "108:         realm.setUsers(users);",
          "110:         testRealms.add(realm);",
          "111:     }",
          "114:     public static void assertScopes(String expectedScope, String receivedScope) {",
          "115:         Collection<String> expectedScopes = Arrays.asList(expectedScope.split(\" \"));",
          "116:         Collection<String> receivedScopes = Arrays.asList(receivedScope.split(\" \"));",
          "117:         Assert.assertTrue(\"Not matched. expectedScope: \" + expectedScope + \", receivedScope: \" + receivedScope,",
          "118:                 expectedScopes.containsAll(receivedScopes) && receivedScopes.containsAll(expectedScopes));",
          "119:     }",
          "121:     protected String getParameterFromUrl(String paramName, boolean fragmentExpected) {",
          "122:         return fragmentExpected ? oauth.getCurrentFragment().get(paramName) : oauth.getCurrentQuery().get(paramName);",
          "123:     }",
          "125:     protected String loginUserAndGetCode(String clientId, boolean fragmentResponseModeExpected) {",
          "126:         oauth.clientId(clientId);",
          "127:         oauth.doLogin(TEST_USERNAME, TEST_USERSECRET);",
          "129:         grantPage.assertCurrent();",
          "130:         grantPage.assertGrants(OAuthGrantPage.PROFILE_CONSENT_TEXT, OAuthGrantPage.EMAIL_CONSENT_TEXT, OAuthGrantPage.ROLES_CONSENT_TEXT);",
          "131:         grantPage.accept();",
          "133:         String code = getParameterFromUrl(OAuth2Constants.CODE, fragmentResponseModeExpected);",
          "134:         Assert.assertNotNull(code);",
          "135:         return code;",
          "136:     }",
          "138:     protected String loginUserAndGetCodeInJwtQueryResponseMode(String clientId) {",
          "139:         oauth.clientId(clientId);",
          "140:         oauth.doLogin(TEST_USERNAME, TEST_USERSECRET);",
          "142:         grantPage.assertCurrent();",
          "143:         grantPage.assertGrants(OAuthGrantPage.PROFILE_CONSENT_TEXT, OAuthGrantPage.EMAIL_CONSENT_TEXT, OAuthGrantPage.ROLES_CONSENT_TEXT);",
          "144:         grantPage.accept();",
          "146:         System.out.println(\"KKKKK response = \" + oauth.getCurrentQuery().get(\"response\"));",
          "147:         AuthorizationResponseToken responseToken = oauth.verifyAuthorizationResponseToken(oauth.getCurrentQuery().get(\"response\"));",
          "148:         String code = (String)responseToken.getOtherClaims().get(\"code\");",
          "149:         Assert.assertNotNull(code);",
          "150:         return code;",
          "151:     }",
          "153:     protected void assertSuccessfulTokenResponse(OAuthClient.AccessTokenResponse tokenResponse) {",
          "154:         assertEquals(200, tokenResponse.getStatusCode());",
          "155:         Assert.assertThat(tokenResponse.getIdToken(), Matchers.notNullValue());",
          "156:         Assert.assertThat(tokenResponse.getAccessToken(), Matchers.notNullValue());",
          "159:         Assert.assertNotNull(tokenResponse.getScope());",
          "160:         assertScopes(\"openid profile email\", tokenResponse.getScope());",
          "163:         IDToken idToken = oauth.verifyIDToken(tokenResponse.getIdToken());",
          "164:         Assert.assertNotNull(idToken.getId());",
          "165:         Assert.assertEquals(\"foo\", idToken.getIssuedFor());",
          "166:         Assert.assertEquals(\"john\", idToken.getPreferredUsername());",
          "167:         Assert.assertEquals(\"john@keycloak.org\", idToken.getEmail());",
          "168:         Assert.assertEquals(\"Johny\", idToken.getGivenName());",
          "169:         Assert.assertEquals(idToken.getNonce(), \"123456\");",
          "170:     }",
          "172:     protected void logoutUserAndRevokeConsent(String clientId, String username) {",
          "173:         UserResource user = ApiUtil.findUserByUsernameId(adminClient.realm(REALM_NAME), username);",
          "174:         user.logout();",
          "175:         List<Map<String, Object>> consents = user.getConsents();",
          "176:         org.junit.Assert.assertEquals(1, consents.size());",
          "177:         user.revokeConsent(clientId);",
          "178:     }",
          "180:     protected void assertRedirectedToClientWithError(String expectedError, boolean fragmentExpected, String expectedErrorDescription) {",
          "181:         appPage.assertCurrent();",
          "182:         assertEquals(expectedError, getParameterFromUrl(OAuth2Constants.ERROR, fragmentExpected));",
          "183:         assertEquals(expectedErrorDescription, getParameterFromUrl(OAuth2Constants.ERROR_DESCRIPTION, fragmentExpected));",
          "184:     }",
          "186:     protected void assertBrowserWithError(String expectedError) {",
          "187:         errorPage.assertCurrent();",
          "188:         Assert.assertEquals(expectedError, errorPage.getError());",
          "189:     }",
          "191:     protected OAuthClient.AccessTokenResponse doAccessTokenRequestWithClientSignedJWT(String code, String signedJwt, String codeVerifier, Supplier<CloseableHttpClient> httpClientSupplier) {",
          "192:         try {",
          "193:             List<NameValuePair> parameters = new LinkedList<>();",
          "194:             parameters.add(new BasicNameValuePair(OAuth2Constants.GRANT_TYPE, OAuth2Constants.AUTHORIZATION_CODE));",
          "195:             parameters.add(new BasicNameValuePair(OAuth2Constants.CODE, code));",
          "196:             parameters.add(new BasicNameValuePair(OAuth2Constants.CODE_VERIFIER, codeVerifier));",
          "197:             parameters.add(new BasicNameValuePair(OAuth2Constants.REDIRECT_URI, oauth.getRedirectUri()));",
          "198:             parameters.add(new BasicNameValuePair(OAuth2Constants.CLIENT_ASSERTION_TYPE, OAuth2Constants.CLIENT_ASSERTION_TYPE_JWT));",
          "199:             parameters.add(new BasicNameValuePair(OAuth2Constants.CLIENT_ASSERTION, signedJwt));",
          "201:             CloseableHttpResponse response = sendRequest(oauth.getAccessTokenUrl(), parameters, httpClientSupplier);",
          "202:             return new OAuthClient.AccessTokenResponse(response);",
          "203:         } catch (Exception e) {",
          "204:             throw new RuntimeException(e);",
          "205:         }",
          "206:     }",
          "208:     protected String createSignedRequestToken(String clientId, String algorithm) throws Exception {",
          "209:         TestOIDCEndpointsApplicationResource oidcClientEndpointsResource = testingClient.testApp().oidcClientEndpoints();",
          "210:         Map<String, String> generatedKeys = oidcClientEndpointsResource.getKeysAsBase64();",
          "211:         KeyPair keyPair = getKeyPairFromGeneratedBase64(generatedKeys, algorithm);",
          "212:         PrivateKey privateKey = keyPair.getPrivate();",
          "213:         PublicKey publicKey = keyPair.getPublic();",
          "214:         return createSignedRequestToken(clientId, privateKey, publicKey, algorithm);",
          "215:     }",
          "217:     protected CloseableHttpResponse sendRequest(String requestUrl, List<NameValuePair> parameters, Supplier<CloseableHttpClient> httpClientSupplier) throws Exception {",
          "218:         CloseableHttpClient client = httpClientSupplier.get();",
          "219:         try {",
          "220:             HttpPost post = new HttpPost(requestUrl);",
          "221:             UrlEncodedFormEntity formEntity = new UrlEncodedFormEntity(parameters, \"UTF-8\");",
          "222:             post.setEntity(formEntity);",
          "223:             return client.execute(post);",
          "224:         } finally {",
          "225:             oauth.closeClient(client);",
          "226:         }",
          "227:     }",
          "228: }",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/FAPI1Test.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/FAPI1Test.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/FAPI1Test.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/FAPI1Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.keycloak.testsuite.client;",
          "26: import org.apache.http.impl.client.DefaultHttpClient;",
          "32: import org.junit.Test;",
          "33: import org.keycloak.OAuth2Constants;",
          "34: import org.keycloak.OAuthErrorException;",
          "35: import org.keycloak.admin.client.resource.ClientResource;",
          "37: import org.keycloak.authentication.authenticators.client.ClientIdAndSecretAuthenticator;",
          "38: import org.keycloak.authentication.authenticators.client.JWTClientAuthenticator;",
          "39: import org.keycloak.authentication.authenticators.client.JWTClientSecretAuthenticator;",
          "",
          "[Removed Lines]",
          "21: import org.apache.http.NameValuePair;",
          "22: import org.apache.http.client.entity.UrlEncodedFormEntity;",
          "23: import org.apache.http.client.methods.CloseableHttpResponse;",
          "24: import org.apache.http.client.methods.HttpPost;",
          "25: import org.apache.http.impl.client.CloseableHttpClient;",
          "27: import org.apache.http.message.BasicNameValuePair;",
          "28: import org.hamcrest.Matchers;",
          "29: import org.jboss.arquillian.graphene.page.Page;",
          "30: import org.junit.Assume;",
          "31: import org.junit.BeforeClass;",
          "36: import org.keycloak.admin.client.resource.UserResource;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: import org.keycloak.constants.ServiceUrlConstants;",
          "45: import org.keycloak.crypto.Algorithm;",
          "46: import org.keycloak.jose.jws.crypto.HashUtils;",
          "49: import org.keycloak.protocol.oidc.OIDCAdvancedConfigWrapper;",
          "50: import org.keycloak.protocol.oidc.OIDCConfigAttributes;",
          "51: import org.keycloak.protocol.oidc.OIDCLoginProtocol;",
          "",
          "[Removed Lines]",
          "47: import org.keycloak.models.AdminRoles;",
          "48: import org.keycloak.models.Constants;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: import org.keycloak.representations.AccessToken;",
          "55: import org.keycloak.representations.IDToken;",
          "56: import org.keycloak.representations.idm.ClientRepresentation;",
          "60: import org.keycloak.representations.oidc.OIDCClientRepresentation;",
          "61: import org.keycloak.services.clientpolicy.ClientPolicyException;",
          "62: import org.keycloak.services.clientpolicy.condition.AnyClientConditionFactory;",
          "63: import org.keycloak.services.clientpolicy.condition.ClientUpdaterContextConditionFactory;",
          "64: import org.keycloak.testsuite.Assert;",
          "66: import org.keycloak.testsuite.client.resources.TestApplicationResourceUrls;",
          "67: import org.keycloak.testsuite.client.resources.TestOIDCEndpointsApplicationResource;",
          "72: import org.keycloak.testsuite.rest.resource.TestingOIDCEndpointsApplicationResource;",
          "73: import org.keycloak.testsuite.util.MutualTLSUtils;",
          "74: import org.keycloak.testsuite.util.OAuthClient;",
          "78: import java.security.KeyPair;",
          "79: import java.security.PrivateKey;",
          "80: import java.security.PublicKey;",
          "81: import java.util.Arrays;",
          "83: import java.util.Collections;",
          "86: import java.util.Map;",
          "87: import java.util.function.Function;",
          "90: import static org.junit.Assert.assertEquals;",
          "92: import static org.junit.Assert.fail;",
          "94: import static org.keycloak.testsuite.util.ClientPoliciesUtil.ClientPoliciesBuilder;",
          "95: import static org.keycloak.testsuite.util.ClientPoliciesUtil.ClientPolicyBuilder;",
          "96: import static org.keycloak.testsuite.util.ClientPoliciesUtil.createAnyClientConditionConfig;",
          "",
          "[Removed Lines]",
          "57: import org.keycloak.representations.idm.CredentialRepresentation;",
          "58: import org.keycloak.representations.idm.RealmRepresentation;",
          "59: import org.keycloak.representations.idm.UserRepresentation;",
          "65: import org.keycloak.testsuite.admin.ApiUtil;",
          "68: import org.keycloak.testsuite.pages.AppPage;",
          "69: import org.keycloak.testsuite.pages.ErrorPage;",
          "70: import org.keycloak.testsuite.pages.LoginPage;",
          "71: import org.keycloak.testsuite.pages.OAuthGrantPage;",
          "75: import org.keycloak.testsuite.util.ServerURLs;",
          "76: import org.keycloak.testsuite.client.policies.AbstractClientPoliciesTest;",
          "82: import java.util.Collection;",
          "84: import java.util.LinkedList;",
          "85: import java.util.List;",
          "88: import java.util.function.Supplier;",
          "91: import static org.hamcrest.MatcherAssert.assertThat;",
          "93: import static org.keycloak.testsuite.admin.AbstractAdminTest.loadJson;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "155:     @Test",
          "156:     public void testFAPIBaselineClientAuthenticator() throws Exception {",
          "",
          "[Removed Lines]",
          "108: public class FAPI1Test extends AbstractClientPoliciesTest {",
          "110:     @Page",
          "111:     protected ErrorPage errorPage;",
          "113:     @Page",
          "114:     protected LoginPage loginPage;",
          "116:     @Page",
          "117:     protected OAuthGrantPage grantPage;",
          "119:     @Page",
          "120:     protected AppPage appPage;",
          "122:     @BeforeClass",
          "123:     public static void verifySSL() {",
          "125:         Assume.assumeTrue(\"The FAPI test requires SSL to be enabled.\", ServerURLs.AUTH_SERVER_SSL_REQUIRED);",
          "126:     }",
          "128:     @Override",
          "129:     public void addTestRealms(List<RealmRepresentation> testRealms) {",
          "130:         RealmRepresentation realm = loadJson(getClass().getResourceAsStream(\"/testrealm.json\"), RealmRepresentation.class);",
          "132:         List<UserRepresentation> users = realm.getUsers();",
          "134:         LinkedList<CredentialRepresentation> credentials = new LinkedList<>();",
          "135:         CredentialRepresentation password = new CredentialRepresentation();",
          "136:         password.setType(CredentialRepresentation.PASSWORD);",
          "137:         password.setValue(\"password\");",
          "138:         credentials.add(password);",
          "140:         UserRepresentation user = new UserRepresentation();",
          "141:         user.setEnabled(true);",
          "142:         user.setUsername(\"john\");",
          "143:         user.setEmail(\"john@keycloak.org\");",
          "144:         user.setFirstName(\"Johny\");",
          "145:         user.setCredentials(credentials);",
          "146:         user.setClientRoles(Collections.singletonMap(Constants.REALM_MANAGEMENT_CLIENT_ID, Arrays.asList(AdminRoles.CREATE_CLIENT, AdminRoles.MANAGE_CLIENTS)));",
          "147:         users.add(user);",
          "149:         realm.setUsers(users);",
          "151:         testRealms.add(realm);",
          "152:     }",
          "",
          "[Added Lines]",
          "79: public class FAPI1Test extends AbstractFAPITest {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "336:         checkRedirectUriForCurrentClientDuringLogin();",
          "340:             String signedJwt = getClientSecretSignedJWT(\"atleast-14chars-password\", Algorithm.HS256);",
          "341:             return doAccessTokenRequestWithClientSignedJWT(code, signedJwt, codeVerifier, DefaultHttpClient::new);",
          "342:         });",
          "",
          "[Removed Lines]",
          "339:         successfulLoginAndLogout(\"foo\", false, (String code) -> {",
          "",
          "[Added Lines]",
          "265:         successfulLoginAndLogout(\"foo\", TEST_USERNAME, false, (String code) -> {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "366:         checkRedirectUriForCurrentClientDuringLogin();",
          "370:             oauth.codeVerifier(codeVerifier);",
          "371:             return oauth.doAccessTokenRequest(code, null);",
          "372:         });",
          "",
          "[Removed Lines]",
          "369:         successfulLoginAndLogout(\"foo\", false, (String code) -> {",
          "",
          "[Added Lines]",
          "295:         successfulLoginAndLogout(\"foo\", TEST_USERNAME, false, (String code) -> {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "458:         oauth.codeChallengeMethod(OAuth2Constants.PKCE_METHOD_S256);",
          "462:             oauth.codeVerifier(codeVerifier);",
          "463:             return oauth.doAccessTokenRequest(code, null);",
          "464:         });",
          "",
          "[Removed Lines]",
          "461:         successfulLoginAndLogout(\"foo\", false, (String code) -> {",
          "",
          "[Added Lines]",
          "387:         successfulLoginAndLogout(\"foo\", TEST_USERNAME, false, (String code) -> {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "603:         Assert.assertNotNull(accessToken.getConfirmation().getCertThumbprint());",
          "607:     }",
          "609:     @Test",
          "",
          "[Removed Lines]",
          "606:         logoutUserAndRevokeConsent(\"foo\");",
          "",
          "[Added Lines]",
          "532:         logoutUserAndRevokeConsent(\"foo\", TEST_USERNAME);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "657:         Assert.assertNotNull(accessToken.getConfirmation().getCertThumbprint());",
          "661:     }",
          "665:     private void checkPKCEWithS256RequiredDuringLogin(String clientId) {",
          "667:         oauth.clientId(clientId);",
          "",
          "[Removed Lines]",
          "660:         logoutUserAndRevokeConsent(\"foo\");",
          "",
          "[Added Lines]",
          "586:         logoutUserAndRevokeConsent(\"foo\", TEST_USERNAME);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "698:         oauth.openid(true);",
          "699:         oauth.redirectUri(null);",
          "700:         oauth.openLoginForm();",
          "705:         oauth.redirectUri(origRedirectUri);",
          "",
          "[Removed Lines]",
          "701:         errorPage.assertCurrent();",
          "702:         Assert.assertEquals(\"Invalid parameter: redirect_uri\", errorPage.getError());",
          "",
          "[Added Lines]",
          "625:         assertBrowserWithError(\"Invalid parameter: redirect_uri\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "743:     }",
          "747:         String code = loginUserAndGetCode(clientId, fragmentResponseModeExpected);",
          "749:         OAuthClient.AccessTokenResponse tokenResponse = codeToTokenExchanger.apply(code);",
          "",
          "[Removed Lines]",
          "746:     private void successfulLoginAndLogout(String clientId, boolean fragmentResponseModeExpected, Function<String, OAuthClient.AccessTokenResponse> codeToTokenExchanger) throws Exception {",
          "",
          "[Added Lines]",
          "669:     private void successfulLoginAndLogout(String clientId, String username, boolean fragmentResponseModeExpected, Function<String, OAuthClient.AccessTokenResponse> codeToTokenExchanger) throws Exception {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "751:         assertSuccessfulTokenResponse(tokenResponse);",
          "786:     }",
          "788:     private void assertIDTokenAsDetachedSignature(String idTokenParam, String code) {",
          "",
          "[Removed Lines]",
          "754:         logoutUserAndRevokeConsent(clientId);",
          "755:     }",
          "757:     private String loginUserAndGetCode(String clientId, boolean fragmentResponseModeExpected) {",
          "758:         oauth.clientId(clientId);",
          "759:         oauth.doLogin(\"john\", \"password\");",
          "761:         grantPage.assertCurrent();",
          "762:         grantPage.assertGrants(OAuthGrantPage.PROFILE_CONSENT_TEXT, OAuthGrantPage.EMAIL_CONSENT_TEXT, OAuthGrantPage.ROLES_CONSENT_TEXT);",
          "763:         grantPage.accept();",
          "764:         String code = getParameterFromUrl(OAuth2Constants.CODE, fragmentResponseModeExpected);",
          "765:         Assert.assertNotNull(code);",
          "766:         return code;",
          "767:     }",
          "769:     private void assertSuccessfulTokenResponse(OAuthClient.AccessTokenResponse tokenResponse) {",
          "770:         assertEquals(200, tokenResponse.getStatusCode());",
          "771:         assertThat(tokenResponse.getIdToken(), Matchers.notNullValue());",
          "772:         assertThat(tokenResponse.getAccessToken(), Matchers.notNullValue());",
          "775:         Assert.assertNotNull(tokenResponse.getScope());",
          "776:         assertScopes(\"openid profile email\", tokenResponse.getScope());",
          "779:         IDToken idToken = oauth.verifyIDToken(tokenResponse.getIdToken());",
          "780:         Assert.assertNotNull(idToken.getId());",
          "781:         Assert.assertEquals(\"foo\", idToken.getIssuedFor());",
          "782:         Assert.assertEquals(\"john\", idToken.getPreferredUsername());",
          "783:         Assert.assertEquals(\"john@keycloak.org\", idToken.getEmail());",
          "784:         Assert.assertEquals(\"Johny\", idToken.getGivenName());",
          "785:         Assert.assertEquals(idToken.getNonce(), \"123456\");",
          "",
          "[Added Lines]",
          "677:         logoutUserAndRevokeConsent(clientId, username);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "811:         String authServerBaseUrl = UriUtils.getOrigin(oauth.getRedirectUri()) + \"/auth\";",
          "812:         return KeycloakUriBuilder.fromUri(authServerBaseUrl).path(ServiceUrlConstants.REALM_INFO_PATH).build(\"test\").toString();",
          "813:     }",
          "869: }",
          "",
          "[Removed Lines]",
          "815:     private OAuthClient.AccessTokenResponse doAccessTokenRequestWithClientSignedJWT(String code, String signedJwt, String codeVerifier, Supplier<CloseableHttpClient> httpClientSupplier) {",
          "816:         try {",
          "817:             List<NameValuePair> parameters = new LinkedList<>();",
          "818:             parameters.add(new BasicNameValuePair(OAuth2Constants.GRANT_TYPE, OAuth2Constants.AUTHORIZATION_CODE));",
          "819:             parameters.add(new BasicNameValuePair(OAuth2Constants.CODE, code));",
          "820:             parameters.add(new BasicNameValuePair(OAuth2Constants.CODE_VERIFIER, codeVerifier));",
          "821:             parameters.add(new BasicNameValuePair(OAuth2Constants.REDIRECT_URI, oauth.getRedirectUri()));",
          "822:             parameters.add(new BasicNameValuePair(OAuth2Constants.CLIENT_ASSERTION_TYPE, OAuth2Constants.CLIENT_ASSERTION_TYPE_JWT));",
          "823:             parameters.add(new BasicNameValuePair(OAuth2Constants.CLIENT_ASSERTION, signedJwt));",
          "825:             CloseableHttpResponse response = sendRequest(oauth.getAccessTokenUrl(), parameters, httpClientSupplier);",
          "826:             return new OAuthClient.AccessTokenResponse(response);",
          "827:         } catch (Exception e) {",
          "828:             throw new RuntimeException(e);",
          "829:         }",
          "830:     }",
          "832:     private CloseableHttpResponse sendRequest(String requestUrl, List<NameValuePair> parameters, Supplier<CloseableHttpClient> httpClientSupplier) throws Exception {",
          "833:         CloseableHttpClient client = httpClientSupplier.get();",
          "834:         try {",
          "835:             HttpPost post = new HttpPost(requestUrl);",
          "836:             UrlEncodedFormEntity formEntity = new UrlEncodedFormEntity(parameters, \"UTF-8\");",
          "837:             post.setEntity(formEntity);",
          "838:             return client.execute(post);",
          "839:         } finally {",
          "840:             oauth.closeClient(client);",
          "841:         }",
          "842:     }",
          "844:     public static void assertScopes(String expectedScope, String receivedScope) {",
          "845:         Collection<String> expectedScopes = Arrays.asList(expectedScope.split(\" \"));",
          "846:         Collection<String> receivedScopes = Arrays.asList(receivedScope.split(\" \"));",
          "847:         Assert.assertTrue(\"Not matched. expectedScope: \" + expectedScope + \", receivedScope: \" + receivedScope,",
          "848:                 expectedScopes.containsAll(receivedScopes) && receivedScopes.containsAll(expectedScopes));",
          "849:     }",
          "852:     private void assertRedirectedToClientWithError(String expectedError, boolean fragmentExpected, String expectedErrorDescription) {",
          "853:         appPage.assertCurrent();",
          "854:         assertEquals(expectedError, getParameterFromUrl(OAuth2Constants.ERROR, fragmentExpected));",
          "855:         assertEquals(expectedErrorDescription, getParameterFromUrl(OAuth2Constants.ERROR_DESCRIPTION, fragmentExpected));",
          "856:     }",
          "858:     private String getParameterFromUrl(String paramName, boolean fragmentExpected) {",
          "859:         return fragmentExpected ? oauth.getCurrentFragment().get(paramName) : oauth.getCurrentQuery().get(paramName);",
          "860:     }",
          "862:     private void logoutUserAndRevokeConsent(String clientId) {",
          "863:         UserResource user = ApiUtil.findUserByUsernameId(adminClient.realm(REALM_NAME), \"john\");",
          "864:         user.logout();",
          "865:         List<Map<String, Object>> consents = user.getConsents();",
          "866:         org.junit.Assert.assertEquals(1, consents.size());",
          "867:         user.revokeConsent(clientId);",
          "868:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/FAPI2Test.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/FAPI2Test.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/FAPI2Test.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/FAPI2Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.keycloak.testsuite.client;",
          "20: import static org.junit.Assert.assertEquals;",
          "21: import static org.junit.Assert.fail;",
          "22: import static org.keycloak.testsuite.util.ClientPoliciesUtil.createAnyClientConditionConfig;",
          "24: import java.util.Collections;",
          "26: import org.junit.Test;",
          "27: import org.keycloak.OAuth2Constants;",
          "28: import org.keycloak.OAuthErrorException;",
          "29: import org.keycloak.admin.client.resource.ClientResource;",
          "30: import org.keycloak.authentication.authenticators.client.ClientIdAndSecretAuthenticator;",
          "31: import org.keycloak.authentication.authenticators.client.JWTClientAuthenticator;",
          "32: import org.keycloak.authentication.authenticators.client.JWTClientSecretAuthenticator;",
          "33: import org.keycloak.authentication.authenticators.client.X509ClientAuthenticator;",
          "34: import org.keycloak.client.registration.ClientRegistrationException;",
          "35: import org.keycloak.crypto.Algorithm;",
          "36: import org.keycloak.protocol.oidc.OIDCAdvancedConfigWrapper;",
          "37: import org.keycloak.protocol.oidc.OIDCConfigAttributes;",
          "38: import org.keycloak.protocol.oidc.OIDCLoginProtocol;",
          "39: import org.keycloak.protocol.oidc.utils.OIDCResponseMode;",
          "40: import org.keycloak.protocol.oidc.utils.OIDCResponseType;",
          "41: import org.keycloak.representations.AccessToken;",
          "42: import org.keycloak.representations.idm.ClientRepresentation;",
          "43: import org.keycloak.representations.oidc.OIDCClientRepresentation;",
          "44: import org.keycloak.services.clientpolicy.ClientPolicyException;",
          "45: import org.keycloak.services.clientpolicy.condition.AnyClientConditionFactory;",
          "46: import org.keycloak.testsuite.Assert;",
          "47: import org.keycloak.testsuite.client.resources.TestApplicationResourceUrls;",
          "48: import org.keycloak.testsuite.rest.resource.TestingOIDCEndpointsApplicationResource;",
          "49: import org.keycloak.testsuite.util.MutualTLSUtils;",
          "50: import org.keycloak.testsuite.util.OAuthClient;",
          "51: import org.keycloak.testsuite.util.ClientPoliciesUtil.ClientPoliciesBuilder;",
          "52: import org.keycloak.testsuite.util.ClientPoliciesUtil.ClientPolicyBuilder;",
          "53: import org.keycloak.testsuite.util.OAuthClient.ParResponse;",
          "64: public class FAPI2Test extends AbstractFAPITest {",
          "66:     private static final String clientId = \"foo\";",
          "68:     @Test",
          "69:     public void testFAPI2SecurityProfileClientRegistration() throws Exception {",
          "70:         testFAPI2ClientRegistration(FAPI2_SECURITY_PROFILE_NAME);",
          "71:     }",
          "73:     @Test",
          "74:     public void testFAPI2SecurityProfileOIDCClientRegistration() throws Exception {",
          "75:         testFAPI2OIDCClientRegistration(FAPI2_SECURITY_PROFILE_NAME);",
          "76:     }",
          "78:     @Test",
          "79:     public void testFAPI2SecurityProfileSignatureAlgorithms(String profile) throws Exception {",
          "80:         testFAPI2SignatureAlgorithms(FAPI2_SECURITY_PROFILE_NAME);",
          "81:     }",
          "83:     @Test",
          "84:     public void testFAPI2SecurityProfileLoginWithPrivateKeyJWT() throws Exception {",
          "86:         setupPolicyFAPI2ForAllClient(FAPI2_SECURITY_PROFILE_NAME);",
          "89:         String clientUUID = createClientByAdmin(clientId, (ClientRepresentation clientRep) -> {",
          "90:             clientRep.setClientAuthenticatorType(JWTClientAuthenticator.PROVIDER_ID);",
          "91:             OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setRequestUris(Collections.singletonList(TestApplicationResourceUrls.clientRequestUri()));",
          "92:         });",
          "93:         ClientResource clientResource = adminClient.realm(REALM_NAME).clients().get(clientUUID);",
          "94:         ClientRepresentation client = clientResource.toRepresentation();",
          "95:         assertEquals(JWTClientAuthenticator.PROVIDER_ID, client.getClientAuthenticatorType());",
          "96:         assertEquals(Algorithm.PS256, OIDCAdvancedConfigWrapper.fromClientRepresentation(client).getTokenEndpointAuthSigningAlg());",
          "97:         assertEquals(false, client.isImplicitFlowEnabled());",
          "98:         assertEquals(OAuth2Constants.PKCE_METHOD_S256, OIDCAdvancedConfigWrapper.fromClientRepresentation(client).getPkceCodeChallengeMethod());",
          "99:         assertEquals(true, OIDCAdvancedConfigWrapper.fromClientRepresentation(client).isUseMtlsHokToken());",
          "100:         assertEquals(false, client.isFullScopeAllowed());",
          "101:         assertEquals(true, client.isConsentRequired());",
          "104:         oauth.clientId(clientId);",
          "105:         String codeVerifier = \"1234567890123456789012345678901234567890123\"; // 43",
          "106:         String codeChallenge = generateS256CodeChallenge(codeVerifier);",
          "108:         TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject = createValidRequestObjectForSecureRequestObjectExecutor(clientId);",
          "109:         requestObject.setNonce(\"123456\");",
          "110:         requestObject.setCodeChallenge(codeChallenge);",
          "111:         requestObject.setCodeChallengeMethod(OAuth2Constants.PKCE_METHOD_S256);",
          "112:         registerRequestObject(requestObject, clientId, Algorithm.PS256, false);",
          "114:         String signedJwt = createSignedRequestToken(clientId, Algorithm.PS256);",
          "115:         ParResponse pResp = oauth.doPushedAuthorizationRequest(clientId, null, signedJwt);",
          "116:         assertEquals(201, pResp.getStatusCode());",
          "117:         String requestUri = pResp.getRequestUri();",
          "118:         oauth.requestUri(requestUri);",
          "119:         oauth.request(null);",
          "122:         String code = loginUserAndGetCode(clientId, false);",
          "125:         signedJwt = createSignedRequestToken(clientId, Algorithm.PS256);",
          "126:         OAuthClient.AccessTokenResponse tokenResponse = doAccessTokenRequestWithClientSignedJWT(code, signedJwt, codeVerifier, () -> MutualTLSUtils.newCloseableHttpClientWithDefaultKeyStoreAndTrustStore());",
          "127:         assertSuccessfulTokenResponse(tokenResponse);",
          "130:         AccessToken accessToken = oauth.verifyToken(tokenResponse.getAccessToken());",
          "131:         Assert.assertNotNull(accessToken.getConfirmation().getCertThumbprint());",
          "134:         logoutUserAndRevokeConsent(clientId, TEST_USERNAME);",
          "135:     }",
          "137:     @Test",
          "138:     public void testFAPI2SecurityProfileLoginWithMTLS() throws Exception {",
          "140:         setupPolicyFAPI2ForAllClient(FAPI2_SECURITY_PROFILE_NAME);",
          "144:         String clientUUID = createClientByAdmin(clientId, (ClientRepresentation clientRep) -> {",
          "145:             clientRep.setClientAuthenticatorType(X509ClientAuthenticator.PROVIDER_ID);",
          "146:             OIDCAdvancedConfigWrapper clientConfig = OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep);",
          "147:             clientConfig.setRequestUris(Collections.singletonList(TestApplicationResourceUrls.clientRequestUri()));",
          "148:             clientConfig.setTlsClientAuthSubjectDn(MutualTLSUtils.DEFAULT_KEYSTORE_SUBJECT_DN);",
          "149:             clientConfig.setAllowRegexPatternComparison(false);",
          "150:         });",
          "151:         ClientResource clientResource = adminClient.realm(REALM_NAME).clients().get(clientUUID);",
          "152:         ClientRepresentation client = clientResource.toRepresentation();",
          "153:         assertEquals(X509ClientAuthenticator.PROVIDER_ID, client.getClientAuthenticatorType());",
          "154:         assertEquals(Algorithm.PS256, OIDCAdvancedConfigWrapper.fromClientRepresentation(client).getTokenEndpointAuthSigningAlg());",
          "155:         assertEquals(false, client.isImplicitFlowEnabled());",
          "156:         assertEquals(OAuth2Constants.PKCE_METHOD_S256, OIDCAdvancedConfigWrapper.fromClientRepresentation(client).getPkceCodeChallengeMethod());",
          "157:         assertEquals(true, OIDCAdvancedConfigWrapper.fromClientRepresentation(client).isUseMtlsHokToken());",
          "158:         assertEquals(false, client.isFullScopeAllowed());",
          "159:         assertEquals(true, client.isConsentRequired());",
          "161:         oauth.clientId(clientId);",
          "164:         oauth.openLoginForm();",
          "165:         assertBrowserWithError(\"request_uri not included.\");",
          "167:         String codeVerifier = \"1234567890123456789012345678901234567890123\"; // 43",
          "168:         String codeChallenge = generateS256CodeChallenge(codeVerifier);",
          "169:         oauth.codeChallenge(codeChallenge);",
          "170:         oauth.codeChallengeMethod(OAuth2Constants.PKCE_METHOD_S256);",
          "171:         oauth.stateParamHardcoded(null);",
          "172:         oauth.nonce(\"123456\");",
          "175:         oauth.responseType(OIDCResponseType.CODE + \" \" + OIDCResponseType.ID_TOKEN + \" \" + OIDCResponseType.TOKEN);",
          "176:         ParResponse pResp = oauth.doPushedAuthorizationRequest(clientId, null);",
          "177:         assertEquals(401, pResp.getStatusCode());",
          "178:         assertEquals(OAuthErrorException.UNAUTHORIZED_CLIENT, pResp.getError());",
          "181:         oauth.responseType(OIDCResponseType.CODE);",
          "182:         pResp = oauth.doPushedAuthorizationRequest(clientId, null);",
          "183:         assertEquals(201, pResp.getStatusCode());",
          "184:         String requestUri = pResp.getRequestUri();",
          "185:         oauth.responseType(OIDCResponseType.CODE + \" \" + OIDCResponseType.ID_TOKEN + \" \" + OIDCResponseType.TOKEN);",
          "186:         oauth.requestUri(requestUri);",
          "187:         oauth.openLoginForm();",
          "188:         assertRedirectedToClientWithError(OAuthErrorException.INVALID_REQUEST, false, \"Parameter response_type does not match\");",
          "190:         oauth.responseType(OIDCResponseType.CODE);",
          "193:         oauth.requestUri(null);",
          "194:         pResp = oauth.doPushedAuthorizationRequest(clientId, null);",
          "195:         assertEquals(201, pResp.getStatusCode());",
          "196:         requestUri = pResp.getRequestUri();",
          "197:         oauth.stateParamRandom();",
          "198:         oauth.requestUri(requestUri);",
          "199:         oauth.openLoginForm();",
          "200:         assertBrowserWithError(\"PAR request did not include necessary parameters\");",
          "203:         oauth.openLoginForm();",
          "204:         assertBrowserWithError(\"PAR not found. not issued or used multiple times.\");",
          "207:         oauth.stateParamHardcoded(null);",
          "208:         oauth.requestUri(null);",
          "209:         pResp = oauth.doPushedAuthorizationRequest(clientId, null);",
          "210:         assertEquals(201, pResp.getStatusCode());",
          "211:         requestUri = pResp.getRequestUri();",
          "214:         oauth.requestUri(requestUri);",
          "215:         String code = loginUserAndGetCode(clientId, false);",
          "218:         oauth.codeVerifier(codeVerifier);",
          "219:         OAuthClient.AccessTokenResponse tokenResponse = oauth.doAccessTokenRequest(code, null);",
          "222:         assertSuccessfulTokenResponse(tokenResponse);",
          "223:         AccessToken accessToken = oauth.verifyToken(tokenResponse.getAccessToken());",
          "224:         Assert.assertNotNull(accessToken.getConfirmation().getCertThumbprint());",
          "227:         logoutUserAndRevokeConsent(clientId, TEST_USERNAME);",
          "228:     }",
          "230:     @Test",
          "231:     public void testFAPI2MessageSigningClientRegistration() throws Exception {",
          "232:         testFAPI2ClientRegistration(FAPI2_MESSAGE_SIGNING_PROFILE_NAME);",
          "233:     }",
          "235:     @Test",
          "236:     public void testFAPI2MessageSigningOIDCClientRegistration() throws Exception {",
          "237:         testFAPI2OIDCClientRegistration(FAPI2_MESSAGE_SIGNING_PROFILE_NAME);",
          "238:     }",
          "240:     @Test",
          "241:     public void testFAPI2MessageSigningSignatureAlgorithms(String profile) throws Exception {",
          "242:         testFAPI2SignatureAlgorithms(FAPI2_MESSAGE_SIGNING_PROFILE_NAME);",
          "243:     }",
          "246:     @Test",
          "247:     public void testFAPI2MessageSigningLoginWithMTLS() throws Exception {",
          "249:         setupPolicyFAPI2ForAllClient(FAPI2_MESSAGE_SIGNING_PROFILE_NAME);",
          "253:         String clientUUID = createClientByAdmin(clientId, (ClientRepresentation clientRep) -> {",
          "254:             clientRep.setClientAuthenticatorType(X509ClientAuthenticator.PROVIDER_ID);",
          "255:             OIDCAdvancedConfigWrapper clientConfig = OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep);",
          "256:             clientConfig.setRequestUris(Collections.singletonList(TestApplicationResourceUrls.clientRequestUri()));",
          "257:             clientConfig.setTlsClientAuthSubjectDn(MutualTLSUtils.DEFAULT_KEYSTORE_SUBJECT_DN);",
          "258:             clientConfig.setAllowRegexPatternComparison(false);",
          "259:             clientConfig.setRequestObjectRequired(\"request or request_uri\");",
          "260:             clientConfig.setAuthorizationSignedResponseAlg(Algorithm.PS256);",
          "261:         });",
          "262:         ClientResource clientResource = adminClient.realm(REALM_NAME).clients().get(clientUUID);",
          "263:         ClientRepresentation client = clientResource.toRepresentation();",
          "264:         assertEquals(X509ClientAuthenticator.PROVIDER_ID, client.getClientAuthenticatorType());",
          "265:         assertEquals(Algorithm.PS256, OIDCAdvancedConfigWrapper.fromClientRepresentation(client).getTokenEndpointAuthSigningAlg());",
          "266:         assertEquals(false, client.isImplicitFlowEnabled());",
          "267:         assertEquals(OAuth2Constants.PKCE_METHOD_S256, OIDCAdvancedConfigWrapper.fromClientRepresentation(client).getPkceCodeChallengeMethod());",
          "268:         assertEquals(true, OIDCAdvancedConfigWrapper.fromClientRepresentation(client).isUseMtlsHokToken());",
          "269:         assertEquals(false, client.isFullScopeAllowed());",
          "270:         assertEquals(true, client.isConsentRequired());",
          "271:         assertEquals(Algorithm.PS256, OIDCAdvancedConfigWrapper.fromClientRepresentation(client).getRequestObjectSignatureAlg());",
          "274:         oauth.clientId(clientId);",
          "275:         oauth.stateParamHardcoded(null);",
          "276:         String codeVerifier = \"1234567890123456789012345678901234567890123\"; // 43",
          "277:         String codeChallenge = generateS256CodeChallenge(codeVerifier);",
          "278:         TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject = createValidRequestObjectForSecureRequestObjectExecutor(clientId);",
          "279:         requestObject.setNonce(\"123456\");",
          "280:         requestObject.setResponseType(OIDCResponseType.CODE);",
          "281:         requestObject.setResponseMode(OIDCResponseMode.QUERY_JWT.value());",
          "282:         requestObject.setCodeChallenge(codeChallenge);",
          "283:         requestObject.setCodeChallengeMethod(OAuth2Constants.PKCE_METHOD_S256);",
          "284:         registerRequestObject(requestObject, clientId, Algorithm.PS256, false);",
          "287:         ParResponse pResp = oauth.doPushedAuthorizationRequest(clientId, null);",
          "288:         assertEquals(201, pResp.getStatusCode());",
          "289:         String requestUri = pResp.getRequestUri();",
          "292:         oauth.codeChallenge(codeChallenge);",
          "293:         oauth.codeChallengeMethod(OAuth2Constants.PKCE_METHOD_S256);",
          "294:         oauth.nonce(\"123456\");",
          "295:         oauth.responseType(OIDCResponseType.CODE);",
          "296:         oauth.responseMode(OIDCResponseMode.QUERY_JWT.value());",
          "297:         oauth.requestUri(requestUri);",
          "298:         oauth.request(null);",
          "299:         String code = loginUserAndGetCodeInJwtQueryResponseMode(clientId);",
          "302:         oauth.codeVerifier(codeVerifier);",
          "303:         OAuthClient.AccessTokenResponse tokenResponse = oauth.doAccessTokenRequest(code, null);",
          "306:         assertSuccessfulTokenResponse(tokenResponse);",
          "307:         AccessToken accessToken = oauth.verifyToken(tokenResponse.getAccessToken());",
          "308:         Assert.assertNotNull(accessToken.getConfirmation().getCertThumbprint());",
          "311:         logoutUserAndRevokeConsent(clientId, TEST_USERNAME);",
          "312:     }",
          "314:     @Test",
          "315:     public void testFAPI2MessageSigningLoginWithPrivateKeyJWT() throws Exception {",
          "317:         setupPolicyFAPI2ForAllClient(FAPI2_MESSAGE_SIGNING_PROFILE_NAME);",
          "321:         String clientUUID = createClientByAdmin(clientId, (ClientRepresentation clientRep) -> {",
          "322:             clientRep.setClientAuthenticatorType(JWTClientAuthenticator.PROVIDER_ID);",
          "323:             OIDCAdvancedConfigWrapper clientConfig = OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep);",
          "324:             clientConfig.setRequestUris(Collections.singletonList(TestApplicationResourceUrls.clientRequestUri()));",
          "325:             clientConfig.setRequestObjectRequired(\"request or request_uri\");",
          "326:             OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationSignedResponseAlg(Algorithm.PS256);",
          "327:         });",
          "328:         ClientResource clientResource = adminClient.realm(REALM_NAME).clients().get(clientUUID);",
          "329:         ClientRepresentation client = clientResource.toRepresentation();",
          "330:         assertEquals(JWTClientAuthenticator.PROVIDER_ID, client.getClientAuthenticatorType());",
          "331:         assertEquals(Algorithm.PS256, OIDCAdvancedConfigWrapper.fromClientRepresentation(client).getTokenEndpointAuthSigningAlg());",
          "332:         assertEquals(Algorithm.PS256, OIDCAdvancedConfigWrapper.fromClientRepresentation(client).getRequestObjectSignatureAlg());",
          "333:         assertEquals(false, client.isImplicitFlowEnabled());",
          "334:         assertEquals(OAuth2Constants.PKCE_METHOD_S256, OIDCAdvancedConfigWrapper.fromClientRepresentation(client).getPkceCodeChallengeMethod());",
          "335:         assertEquals(true, OIDCAdvancedConfigWrapper.fromClientRepresentation(client).isUseMtlsHokToken());",
          "336:         assertEquals(false, client.isFullScopeAllowed());",
          "337:         assertEquals(true, client.isConsentRequired());",
          "339:         oauth.clientId(clientId);",
          "340:         oauth.stateParamHardcoded(null);",
          "341:         String codeVerifier = \"1234567890123456789012345678901234567890123\"; // 43",
          "342:         String codeChallenge = generateS256CodeChallenge(codeVerifier);",
          "345:         oauth.codeChallenge(codeChallenge);",
          "346:         oauth.codeChallengeMethod(OAuth2Constants.PKCE_METHOD_S256);",
          "347:         oauth.stateParamHardcoded(null);",
          "348:         oauth.nonce(\"123456\");",
          "349:         oauth.responseType(OIDCResponseType.CODE);",
          "350:         TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject = createValidRequestObjectForSecureRequestObjectExecutor(clientId);",
          "351:         registerRequestObject(requestObject, clientId, Algorithm.PS256, true);",
          "352:         oauth.requestUri(null);",
          "353:         oauth.request(null);",
          "354:         String signedJwt = createSignedRequestToken(clientId, Algorithm.PS256);",
          "355:         ParResponse pResp = oauth.doPushedAuthorizationRequest(clientId, null, signedJwt);",
          "356:         assertEquals(400, pResp.getStatusCode());",
          "357:         assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT, pResp.getError());",
          "360:         requestObject = createValidRequestObjectForSecureRequestObjectExecutor(clientId);",
          "361:         requestObject.setNonce(\"123456\");",
          "362:         requestObject.setResponseType(OIDCResponseType.CODE);",
          "363:         requestObject.setResponseMode(OIDCResponseMode.QUERY_JWT.value());",
          "364:         requestObject.setCodeChallenge(codeChallenge);",
          "365:         requestObject.setCodeChallengeMethod(OAuth2Constants.PKCE_METHOD_S256);",
          "366:         registerRequestObject(requestObject, clientId, Algorithm.PS256, false);",
          "369:         signedJwt = createSignedRequestToken(clientId, Algorithm.PS256);",
          "370:         pResp = oauth.doPushedAuthorizationRequest(clientId, null, signedJwt);",
          "371:         assertEquals(201, pResp.getStatusCode());",
          "372:         String requestUri = pResp.getRequestUri();",
          "375:         oauth.requestUri(requestUri);",
          "376:         oauth.request(null);",
          "377:         String code = loginUserAndGetCodeInJwtQueryResponseMode(clientId);",
          "380:         signedJwt = createSignedRequestToken(clientId, Algorithm.PS256);",
          "381:         OAuthClient.AccessTokenResponse tokenResponse = doAccessTokenRequestWithClientSignedJWT(code, signedJwt, codeVerifier, () -> MutualTLSUtils.newCloseableHttpClientWithDefaultKeyStoreAndTrustStore());",
          "382:         assertSuccessfulTokenResponse(tokenResponse);",
          "385:         assertSuccessfulTokenResponse(tokenResponse);",
          "386:         AccessToken accessToken = oauth.verifyToken(tokenResponse.getAccessToken());",
          "387:         Assert.assertNotNull(accessToken.getConfirmation().getCertThumbprint());",
          "390:         logoutUserAndRevokeConsent(clientId, TEST_USERNAME);",
          "391:     }",
          "393:     private void testFAPI2ClientRegistration(String profile) throws Exception {",
          "394:         setupPolicyFAPI2ForAllClient(profile);",
          "397:         try {",
          "398:             createClientByAdmin(\"invalid\", (ClientRepresentation clientRep) -> {",
          "399:                 clientRep.setClientAuthenticatorType(ClientIdAndSecretAuthenticator.PROVIDER_ID);",
          "400:             });",
          "401:             fail();",
          "402:         } catch (ClientPolicyException e) {",
          "403:             assertEquals(OAuthErrorException.INVALID_CLIENT_METADATA, e.getMessage());",
          "404:         }",
          "407:         try {",
          "408:             createClientByAdmin(\"invalid\", (ClientRepresentation clientRep) -> {",
          "409:                 clientRep.setClientAuthenticatorType(JWTClientSecretAuthenticator.PROVIDER_ID);",
          "410:             });",
          "411:             fail();",
          "412:         } catch (ClientPolicyException e) {",
          "413:             assertEquals(OAuthErrorException.INVALID_CLIENT_METADATA, e.getMessage());",
          "414:         }",
          "417:         try {",
          "418:             createClientByAdmin(\"invalid\", (ClientRepresentation clientRep) -> {",
          "419:                 clientRep.setClientAuthenticatorType(JWTClientAuthenticator.PROVIDER_ID);",
          "420:                 clientRep.setRedirectUris(Collections.singletonList(\"http://foo\"));",
          "421:             });",
          "422:             fail();",
          "423:         } catch (ClientPolicyException e) {",
          "424:             assertEquals(OAuthErrorException.INVALID_CLIENT_METADATA, e.getMessage());",
          "425:         }",
          "428:         String clientUUID = createClientByAdmin(\"client-jwt\", (ClientRepresentation clientRep) -> {",
          "429:             clientRep.setClientAuthenticatorType(JWTClientAuthenticator.PROVIDER_ID);",
          "430:         });",
          "431:         ClientRepresentation client = getClientByAdmin(clientUUID);",
          "432:         Assert.assertEquals(JWTClientAuthenticator.PROVIDER_ID, client.getClientAuthenticatorType());",
          "435:         clientUUID = createClientByAdmin(\"client-x509\", (ClientRepresentation clientRep) -> {",
          "436:             clientRep.setClientAuthenticatorType(X509ClientAuthenticator.PROVIDER_ID);",
          "437:         });",
          "438:         client = getClientByAdmin(clientUUID);",
          "439:         Assert.assertEquals(X509ClientAuthenticator.PROVIDER_ID, client.getClientAuthenticatorType());",
          "442:         clientUUID = createClientByAdmin(\"client-jwt-2\", (ClientRepresentation clientRep) -> {",
          "443:         });",
          "444:         client = getClientByAdmin(clientUUID);",
          "445:         Assert.assertEquals(JWTClientAuthenticator.PROVIDER_ID, client.getClientAuthenticatorType());",
          "448:         Assert.assertTrue(client.isConsentRequired());",
          "449:         OIDCAdvancedConfigWrapper clientConfig = OIDCAdvancedConfigWrapper.fromClientRepresentation(client);",
          "450:         Assert.assertTrue(clientConfig.isUseMtlsHokToken());",
          "451:         Assert.assertEquals(Algorithm.PS256, clientConfig.getIdTokenSignedResponseAlg());",
          "452:         Assert.assertEquals(Algorithm.PS256, clientConfig.getRequestObjectSignatureAlg());",
          "453:         Assert.assertFalse(client.isFullScopeAllowed());",
          "454:     }",
          "456:     private void testFAPI2OIDCClientRegistration(String profile) throws Exception {",
          "457:         setupPolicyFAPI2ForAllClient(profile);",
          "460:         try {",
          "461:             createClientDynamically(generateSuffixedName(clientId), (OIDCClientRepresentation clientRep) -> {",
          "462:                 clientRep.setTokenEndpointAuthMethod(OIDCLoginProtocol.CLIENT_SECRET_BASIC);",
          "463:             });",
          "464:             fail();",
          "465:         } catch (ClientRegistrationException e) {",
          "466:             assertEquals(ERR_MSG_CLIENT_REG_FAIL, e.getMessage());",
          "467:         }",
          "470:         String clientUUID = createClientDynamically(\"client-jwt\", (OIDCClientRepresentation clientRep) -> {",
          "471:             clientRep.setTokenEndpointAuthMethod(OIDCLoginProtocol.PRIVATE_KEY_JWT);",
          "472:             clientRep.setJwksUri(\"https://foo\");",
          "473:         });",
          "474:         ClientRepresentation client = getClientByAdmin(clientUUID);",
          "475:         Assert.assertEquals(JWTClientAuthenticator.PROVIDER_ID, client.getClientAuthenticatorType());",
          "476:         Assert.assertFalse(client.isFullScopeAllowed());",
          "479:         setInitialAccessTokenForDynamicClientRegistration();",
          "482:         clientUUID = createClientDynamically(\"client-x509\", (OIDCClientRepresentation clientRep) -> {",
          "483:             clientRep.setTokenEndpointAuthMethod(OIDCLoginProtocol.TLS_CLIENT_AUTH);",
          "484:         });",
          "485:         client = getClientByAdmin(clientUUID);",
          "486:         Assert.assertEquals(X509ClientAuthenticator.PROVIDER_ID, client.getClientAuthenticatorType());",
          "489:         Assert.assertTrue(client.isConsentRequired());",
          "490:         Assert.assertEquals(OAuth2Constants.PKCE_METHOD_S256, OIDCAdvancedConfigWrapper.fromClientRepresentation(client).getPkceCodeChallengeMethod());",
          "492:     }",
          "494:     private void testFAPI2SignatureAlgorithms(String profile) throws Exception {",
          "495:         setupPolicyFAPI2ForAllClient(profile);",
          "498:         try {",
          "499:             createClientByAdmin(\"invalid\", (ClientRepresentation clientRep) -> {",
          "500:                 clientRep.setClientAuthenticatorType(JWTClientAuthenticator.PROVIDER_ID);",
          "501:                 OIDCAdvancedConfigWrapper clientConfig = OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep);",
          "502:                 clientConfig.setIdTokenSignedResponseAlg(Algorithm.RS256);",
          "503:             });",
          "504:             fail();",
          "505:         } catch (ClientPolicyException e) {",
          "506:             assertEquals(OAuthErrorException.INVALID_REQUEST, e.getMessage());",
          "507:         }",
          "510:         String clientUUID = createClientByAdmin(\"client-jwt\", (ClientRepresentation clientRep) -> {",
          "511:             clientRep.setClientAuthenticatorType(JWTClientAuthenticator.PROVIDER_ID);",
          "512:             OIDCAdvancedConfigWrapper clientCfg = OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep);",
          "513:             clientCfg.setIdTokenSignedResponseAlg(Algorithm.ES256);",
          "514:         });",
          "515:         ClientRepresentation client = getClientByAdmin(clientUUID);",
          "516:         OIDCAdvancedConfigWrapper clientConfig = OIDCAdvancedConfigWrapper.fromClientRepresentation(client);",
          "517:         Assert.assertEquals(Algorithm.ES256, clientConfig.getIdTokenSignedResponseAlg());",
          "518:         Assert.assertEquals(Algorithm.PS256, clientConfig.getRequestObjectSignatureAlg());",
          "521:         clientUUID = createClientByAdmin(\"client-jwt-default-alg\", (ClientRepresentation clientRep) -> {",
          "522:             clientRep.setClientAuthenticatorType(JWTClientAuthenticator.PROVIDER_ID);",
          "523:         });",
          "524:         client = getClientByAdmin(clientUUID);",
          "525:         clientConfig = OIDCAdvancedConfigWrapper.fromClientRepresentation(client);",
          "526:         Assert.assertEquals(Algorithm.PS256, clientConfig.getIdTokenSignedResponseAlg());",
          "527:         Assert.assertEquals(Algorithm.PS256, clientConfig.getRequestObjectSignatureAlg().toString());",
          "528:         Assert.assertEquals(Algorithm.PS256, clientConfig.getUserInfoSignedResponseAlg());",
          "529:         Assert.assertEquals(Algorithm.PS256, clientConfig.getTokenEndpointAuthSigningAlg());",
          "530:         Assert.assertEquals(Algorithm.PS256, client.getAttributes().get(OIDCConfigAttributes.ACCESS_TOKEN_SIGNED_RESPONSE_ALG));",
          "532:     }",
          "534:     private void setupPolicyFAPI2ForAllClient(String profile) throws Exception {",
          "535:         String json = (new ClientPoliciesBuilder()).addPolicy(",
          "536:                 (new ClientPolicyBuilder()).createPolicy(\"MyPolicy\", \"Policy for enable FAPI 2.0 Security Profile for all clients\", Boolean.TRUE)",
          "537:                         .addCondition(AnyClientConditionFactory.PROVIDER_ID,",
          "538:                                 createAnyClientConditionConfig())",
          "539:                         .addProfile(profile)",
          "540:                         .toRepresentation()",
          "541:         ).toString();",
          "542:         updatePolicies(json);",
          "543:     }",
          "545: }",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/FAPICIBATest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/FAPICIBATest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/FAPICIBATest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/FAPICIBATest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:     private final String clientId = \"foo\";",
          "116:     private final String bindingMessage = \"bbbbmmmm\";",
          "151:     @Test",
          "152:     public void testFAPIAdvancedClientRegistration() throws Exception {",
          "",
          "[Removed Lines]",
          "113: public class FAPICIBATest extends AbstractClientPoliciesTest {",
          "117:     private final String username = \"john\";",
          "119:     @BeforeClass",
          "120:     public static void verifySSL() {",
          "122:         Assume.assumeTrue(\"The FAPI test requires SSL to be enabled.\", ServerURLs.AUTH_SERVER_SSL_REQUIRED);",
          "123:     }",
          "125:     @Override",
          "126:     public void addTestRealms(List<RealmRepresentation> testRealms) {",
          "127:         RealmRepresentation realm = loadJson(getClass().getResourceAsStream(\"/testrealm.json\"), RealmRepresentation.class);",
          "129:         List<UserRepresentation> users = realm.getUsers();",
          "131:         LinkedList<CredentialRepresentation> credentials = new LinkedList<>();",
          "132:         CredentialRepresentation password = new CredentialRepresentation();",
          "133:         password.setType(CredentialRepresentation.PASSWORD);",
          "134:         password.setValue(\"password\");",
          "135:         credentials.add(password);",
          "137:         UserRepresentation user = new UserRepresentation();",
          "138:         user.setEnabled(true);",
          "139:         user.setUsername(\"john\");",
          "140:         user.setEmail(\"john@keycloak.org\");",
          "141:         user.setFirstName(\"Johny\");",
          "142:         user.setCredentials(credentials);",
          "143:         user.setClientRoles(Collections.singletonMap(Constants.REALM_MANAGEMENT_CLIENT_ID, Arrays.asList(AdminRoles.CREATE_CLIENT, AdminRoles.MANAGE_CLIENTS)));",
          "144:         users.add(user);",
          "146:         realm.setUsers(users);",
          "148:         testRealms.add(realm);",
          "149:     }",
          "",
          "[Added Lines]",
          "113: public class FAPICIBATest extends AbstractFAPITest {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "272:         assertEquals(JWTClientAuthenticator.PROVIDER_ID, client.getClientAuthenticatorType());",
          "276:         String encodedRequestObject = registerSharedAuthenticationRequest(requestObject, clientId, Algorithm.PS256);",
          "",
          "[Removed Lines]",
          "275:         AuthorizationEndpointRequestObject requestObject = createFAPIValidAuthorizationEndpointRequestObject(username, bindingMessage);",
          "",
          "[Added Lines]",
          "242:         AuthorizationEndpointRequestObject requestObject = createFAPIValidAuthorizationEndpointRequestObject(TEST_USERNAME, bindingMessage);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "304:         OAuthClient.AccessTokenResponse tokenRes = doBackchannelAuthenticationTokenRequestWithClientSignedJWT(",
          "305:                 signedJwt2, response.getAuthReqId(), () -> MutualTLSUtils.newCloseableHttpClientWithDefaultKeyStoreAndTrustStore());",
          "310:     }",
          "312:     @Test",
          "",
          "[Removed Lines]",
          "306:         verifyBackchannelAuthenticationTokenRequest(tokenRes, clientId, username);",
          "309:         logoutUserAndRevokeConsent(clientId, username);",
          "",
          "[Added Lines]",
          "273:         verifyBackchannelAuthenticationTokenRequest(tokenRes, clientId, TEST_USERNAME);",
          "276:         logoutUserAndRevokeConsent(clientId, TEST_USERNAME);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "325:         assertEquals(JWTClientAuthenticator.PROVIDER_ID, client.getClientAuthenticatorType());",
          "329:         String encodedRequestObject = registerSharedAuthenticationRequest(requestObject, clientId, Algorithm.PS256);",
          "",
          "[Removed Lines]",
          "328:         AuthorizationEndpointRequestObject requestObject = createFAPIValidAuthorizationEndpointRequestObject(username, bindingMessage);",
          "",
          "[Added Lines]",
          "295:         AuthorizationEndpointRequestObject requestObject = createFAPIValidAuthorizationEndpointRequestObject(TEST_USERNAME, bindingMessage);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "379:         assertEquals(X509ClientAuthenticator.PROVIDER_ID, client.getClientAuthenticatorType());",
          "383:         String encodedRequestObject = registerSharedAuthenticationRequest(requestObject, clientId, Algorithm.PS256);",
          "",
          "[Removed Lines]",
          "382:         AuthorizationEndpointRequestObject requestObject = createFAPIValidAuthorizationEndpointRequestObject(username, bindingMessage);",
          "",
          "[Added Lines]",
          "349:         AuthorizationEndpointRequestObject requestObject = createFAPIValidAuthorizationEndpointRequestObject(TEST_USERNAME, bindingMessage);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "400:         OAuthClient.AccessTokenResponse tokenRes = doBackchannelAuthenticationTokenRequestWithMTLS(",
          "401:                 clientId, response.getAuthReqId(), () -> MutualTLSUtils.newCloseableHttpClientWithDefaultKeyStoreAndTrustStore());",
          "406:     }",
          "408:     @Test",
          "",
          "[Removed Lines]",
          "402:         verifyBackchannelAuthenticationTokenRequest(tokenRes, clientId, username);",
          "405:         logoutUserAndRevokeConsent(clientId, username);",
          "",
          "[Added Lines]",
          "369:         verifyBackchannelAuthenticationTokenRequest(tokenRes, clientId, TEST_USERNAME);",
          "372:         logoutUserAndRevokeConsent(clientId, TEST_USERNAME);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "423:         assertEquals(X509ClientAuthenticator.PROVIDER_ID, client.getClientAuthenticatorType());",
          "428:         String encodedRequestObject = registerSharedAuthenticationRequest(requestObject, clientId, Algorithm.PS256);",
          "",
          "[Removed Lines]",
          "426:         AuthorizationEndpointRequestObject requestObject = createFAPIValidAuthorizationEndpointRequestObject(username, null);",
          "",
          "[Added Lines]",
          "393:         AuthorizationEndpointRequestObject requestObject = createFAPIValidAuthorizationEndpointRequestObject(TEST_USERNAME, null);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "452:         ClientRepresentation client = clientResource.toRepresentation();",
          "453:         assertEquals(X509ClientAuthenticator.PROVIDER_ID, client.getClientAuthenticatorType());",
          "456:         assertThat(response.getStatusCode(), is(equalTo(400)));",
          "457:         assertThat(response.getError(), is(equalTo(OAuthErrorException.INVALID_REQUEST)));",
          "458:         assertThat(response.getErrorDescription(), is(equalTo(\"Missing parameter: 'request' or 'request_uri'\")));",
          "",
          "[Removed Lines]",
          "455:         AuthenticationRequestAcknowledgement response = doInvalidBackchannelAuthenticationRequestWithMTLS(clientId, username, bindingMessage, () -> MutualTLSUtils.newCloseableHttpClientWithDefaultKeyStoreAndTrustStore());",
          "",
          "[Added Lines]",
          "422:         AuthenticationRequestAcknowledgement response = doInvalidBackchannelAuthenticationRequestWithMTLS(clientId, TEST_USERNAME, bindingMessage, () -> MutualTLSUtils.newCloseableHttpClientWithDefaultKeyStoreAndTrustStore());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "639:         assertThat(idToken.getAudience()[0], is(equalTo(idToken.getIssuedFor())));",
          "640:     }",
          "661: }",
          "",
          "[Removed Lines]",
          "642:     private void logoutUserAndRevokeConsent(String clientId, String username) {",
          "643:         UserResource user = ApiUtil.findUserByUsernameId(adminClient.realm(REALM_NAME), username);",
          "644:         user.logout();",
          "645:         List<Map<String, Object>> consents = user.getConsents();",
          "646:         org.junit.Assert.assertEquals(1, consents.size());",
          "647:         user.revokeConsent(clientId);",
          "648:     }",
          "650:     private CloseableHttpResponse sendRequest(String requestUrl, List<NameValuePair> parameters, Supplier<CloseableHttpClient> httpClientSupplier) throws Exception {",
          "651:         CloseableHttpClient client = httpClientSupplier.get();",
          "652:         try {",
          "653:             HttpPost post = new HttpPost(requestUrl);",
          "654:             UrlEncodedFormEntity formEntity = new UrlEncodedFormEntity(parameters, \"UTF-8\");",
          "655:             post.setEntity(formEntity);",
          "656:             return client.execute(post);",
          "657:         } finally {",
          "658:             oauth.closeClient(client);",
          "659:         }",
          "660:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/policies/AbstractClientPoliciesTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/policies/AbstractClientPoliciesTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/policies/AbstractClientPoliciesTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/policies/AbstractClientPoliciesTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:     protected static final String FAPI1_BASELINE_PROFILE_NAME = \"fapi-1-baseline\";",
          "201:     protected static final String FAPI1_ADVANCED_PROFILE_NAME = \"fapi-1-advanced\";",
          "202:     protected static final String FAPI_CIBA_PROFILE_NAME = \"fapi-ciba\";",
          "204:     protected static final String ERR_MSG_MISSING_NONCE = \"Missing parameter: nonce\";",
          "205:     protected static final String ERR_MSG_MISSING_STATE = \"Missing parameter: state\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:     protected static final String FAPI2_SECURITY_PROFILE_NAME = \"fapi-2-security-profile\";",
          "204:     protected static final String FAPI2_MESSAGE_SIGNING_PROFILE_NAME = \"fapi-2-message-signing\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "334:         ClientProfilesRepresentation actualProfilesRep = getProfilesWithGlobals();",
          "340:         ClientProfileRepresentation actualProfileRep =  getProfileRepresentation(actualProfilesRep, FAPI1_BASELINE_PROFILE_NAME, true);",
          "",
          "[Removed Lines]",
          "337:         assertExpectedProfiles(actualProfilesRep, Arrays.asList(FAPI1_BASELINE_PROFILE_NAME, FAPI1_ADVANCED_PROFILE_NAME, FAPI_CIBA_PROFILE_NAME), Arrays.asList(\"ordinal-test-profile\", \"lack-of-builtin-field-test-profile\"));",
          "",
          "[Added Lines]",
          "339:         assertExpectedProfiles(actualProfilesRep, Arrays.asList(FAPI1_BASELINE_PROFILE_NAME, FAPI1_ADVANCED_PROFILE_NAME, FAPI_CIBA_PROFILE_NAME, FAPI2_SECURITY_PROFILE_NAME, FAPI2_MESSAGE_SIGNING_PROFILE_NAME), Arrays.asList(\"ordinal-test-profile\", \"lack-of-builtin-field-test-profile\"));",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/policies/ClientPoliciesExtendedEventTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/policies/ClientPoliciesExtendedEventTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/policies/ClientPoliciesExtendedEventTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/policies/ClientPoliciesExtendedEventTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:         ).toString();",
          "585:         updateProfiles(json);",
          "588:         json = (new ClientPoliciesBuilder()).addPolicy(",
          "591:                         .addProfile(PROFILE_NAME)",
          "592:                         .toRepresentation()",
          "593:         ).toString();",
          "",
          "[Removed Lines]",
          "589:                 (new ClientPolicyBuilder()).createPolicy(POLICY_NAME, \"La Premiere Politique\", Boolean.TRUE)",
          "590:                         .addCondition(AnyClientConditionFactory.PROVIDER_ID, createAnyClientConditionConfig())",
          "",
          "[Added Lines]",
          "587:         String clientId = generateSuffixedName(CLIENT_NAME);",
          "588:         String clientSecret = \"secret\";",
          "589:         String cid = createClientByAdmin(clientId, (ClientRepresentation clientRep) -> {",
          "590:             clientRep.setSecret(clientSecret);",
          "591:         });",
          "592:         adminClient.realm(REALM_NAME).clients().get(cid).roles().create(RoleBuilder.create().name(SAMPLE_CLIENT_ROLE).build());",
          "596:                 (new ClientPolicyBuilder()).createPolicy(POLICY_NAME, \"Dei Eischt Politik\", Boolean.TRUE)",
          "597:                         .addCondition(ClientRolesConditionFactory.PROVIDER_ID,",
          "598:                                 createClientRolesConditionConfig(Arrays.asList(SAMPLE_CLIENT_ROLE)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "597:         oauth.realm(REALM_NAME);",
          "599:         oauth.openLoginForm();",
          "600:         assertTrue(errorPage.isCurrent());",
          "601:         assertEquals(\"Exception thrown intentionally\", errorPage.getError());",
          "",
          "[Removed Lines]",
          "598:         oauth.clientId(\"foo\");",
          "",
          "[Added Lines]",
          "606:         oauth.clientId(clientId);",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/policies/ClientPoliciesLoadUpdateTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/policies/ClientPoliciesLoadUpdateTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/policies/ClientPoliciesLoadUpdateTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/policies/ClientPoliciesLoadUpdateTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:         ClientProfilesRepresentation actualProfilesRep = getProfilesWithGlobals();",
          "90:         ClientProfileRepresentation actualProfileRep =  getProfileRepresentation(actualProfilesRep, FAPI1_BASELINE_PROFILE_NAME, true);",
          "",
          "[Removed Lines]",
          "87:         assertExpectedProfiles(actualProfilesRep, Arrays.asList(FAPI1_BASELINE_PROFILE_NAME, FAPI1_ADVANCED_PROFILE_NAME, FAPI_CIBA_PROFILE_NAME), Collections.emptyList());",
          "",
          "[Added Lines]",
          "87:         assertExpectedProfiles(actualProfilesRep, Arrays.asList(FAPI1_BASELINE_PROFILE_NAME, FAPI1_ADVANCED_PROFILE_NAME, FAPI_CIBA_PROFILE_NAME, FAPI2_SECURITY_PROFILE_NAME, FAPI2_MESSAGE_SIGNING_PROFILE_NAME), Collections.emptyList());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d5e82356f90893ca3b308a7e10020103e402369a",
      "candidate_info": {
        "commit_hash": "d5e82356f90893ca3b308a7e10020103e402369a",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/d5e82356f90893ca3b308a7e10020103e402369a",
        "files": [
          "docs/documentation/release_notes/index.adoc",
          "docs/documentation/release_notes/topics/24_0_5.adoc",
          "services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java",
          "services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java",
          "services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java",
          "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java"
        ],
        "message": "Encrypted KC_RESTART cookie and removed sensitive notes\n\nCloses #keycloak/keycloak-private#162\n\nSigned-off-by: Giuseppe Graziano <g.graziano94@gmail.com>",
        "before_after_code_files": [
          "services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java||services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java",
          "services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java||services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java",
          "services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java||services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java",
          "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java||testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java||services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java",
            "services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java||services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java",
            "services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java||services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java",
            "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java||testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java"
          ],
          "candidate": [
            "services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java||services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java",
            "services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java||services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java",
            "services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java||services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java",
            "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java||testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java"
          ]
        }
      },
      "candidate_diff": {
        "services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java||services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java": [
          "File: services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java -> services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:     public String cekManagementAlgorithm(TokenCategory category) {",
          "284:         if (category == null) return null;",
          "285:         switch (category) {",
          "286:             case ID:",
          "287:             case LOGOUT:",
          "288:                 return getCekManagementAlgorithm(OIDCConfigAttributes.ID_TOKEN_ENCRYPTED_RESPONSE_ALG);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286:             case INTERNAL:",
          "287:                 return Algorithm.AES;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310:         switch (category) {",
          "311:             case ID:",
          "312:                 return getEncryptAlgorithm(OIDCConfigAttributes.ID_TOKEN_ENCRYPTED_RESPONSE_ENC, JWEConstants.A128CBC_HS256);",
          "313:             case LOGOUT:",
          "314:                 return getEncryptAlgorithm(OIDCConfigAttributes.ID_TOKEN_ENCRYPTED_RESPONSE_ENC);",
          "315:             case AUTHORIZATION_RESPONSE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "315:             case INTERNAL:",
          "316:                 return JWEConstants.A128CBC_HS256;",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java||services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java": [
          "File: services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java -> services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import org.keycloak.TokenCategory;",
          "24: import org.keycloak.cookie.CookieProvider;",
          "25: import org.keycloak.cookie.CookieType;",
          "26: import org.keycloak.models.ClientModel;",
          "27: import org.keycloak.models.KeycloakSession;",
          "28: import org.keycloak.models.RealmModel;",
          "29: import org.keycloak.services.managers.AuthenticationSessionManager;",
          "30: import org.keycloak.sessions.AuthenticationSessionModel;",
          "31: import org.keycloak.sessions.RootAuthenticationSessionModel;",
          "33: import java.util.HashMap;",
          "34: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import org.keycloak.crypto.KeyUse;",
          "33: import org.keycloak.util.TokenUtil;",
          "35: import javax.crypto.SecretKey;",
          "36: import java.nio.charset.StandardCharsets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:     public static void setRestartCookie(KeycloakSession session, AuthenticationSessionModel authSession) {",
          "120:         RestartLoginCookie restart = new RestartLoginCookie(authSession);",
          "122:         session.getProvider(CookieProvider.class).set(CookieType.AUTH_RESTART, encoded);",
          "123:     }",
          "",
          "[Removed Lines]",
          "121:         String encoded = session.tokens().encode(restart);",
          "",
          "[Added Lines]",
          "125:         String encoded = encodeAndEncrypt(session, restart);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:     public static AuthenticationSessionModel restartSession(KeycloakSession session, RealmModel realm,",
          "139:                                                             RootAuthenticationSessionModel rootSession, String expectedClientId,",
          "140:                                                             String encodedCookie) throws Exception {",
          "142:         if (cookie == null) {",
          "143:             logger.debug(\"Failed to verify encoded RestartLoginCookie\");",
          "144:             return null;",
          "",
          "[Removed Lines]",
          "141:         RestartLoginCookie cookie = session.tokens().decode(encodedCookie, RestartLoginCookie.class);",
          "",
          "[Added Lines]",
          "145:         RestartLoginCookie cookie = decryptAndDecode(session, encodedCookie);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "169:         return authSession;",
          "170:     }",
          "172:     @Override",
          "173:     public TokenCategory getCategory() {",
          "174:         return TokenCategory.INTERNAL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "176:     private static RestartLoginCookie decryptAndDecode(KeycloakSession session, String encodedToken) {",
          "177:         try {",
          "178:             String sigAlgorithm = session.tokens().signatureAlgorithm(TokenCategory.INTERNAL);",
          "179:             String algAlgorithm = session.tokens().cekManagementAlgorithm(TokenCategory.INTERNAL);",
          "180:             SecretKey encKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.ENC, algAlgorithm).getSecretKey();",
          "181:             SecretKey signKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.SIG, sigAlgorithm).getSecretKey();",
          "183:             byte[] contentBytes = TokenUtil.jweDirectVerifyAndDecode(encKey, signKey, encodedToken);",
          "184:             String jwt = new String(contentBytes, StandardCharsets.UTF_8);",
          "185:             return session.tokens().decode(jwt, RestartLoginCookie.class);",
          "186:         } catch (Exception e) {",
          "188:             return session.tokens().decode(encodedToken, RestartLoginCookie.class);",
          "189:         }",
          "190:     }",
          "192:     private static String encodeAndEncrypt(KeycloakSession session, RestartLoginCookie cookie) {",
          "193:         try {",
          "194:             String sigAlgorithm = session.tokens().signatureAlgorithm(cookie.getCategory());",
          "195:             String algAlgorithm = session.tokens().cekManagementAlgorithm(cookie.getCategory());",
          "196:             SecretKey encKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.ENC, algAlgorithm).getSecretKey();",
          "197:             SecretKey signKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.SIG, sigAlgorithm).getSecretKey();",
          "199:             String encodedJwt = session.tokens().encode(cookie);",
          "200:             return TokenUtil.jweDirectEncode(encKey, signKey, encodedJwt.getBytes(StandardCharsets.UTF_8));",
          "201:         } catch (Exception e) {",
          "202:             throw new RuntimeException(\"Error encoding cookie.\", e);",
          "203:         }",
          "204:     }",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java||services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java": [
          "File: services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java -> services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:         KNOWN_REQ_PARAMS.add(OIDCLoginProtocol.CODE_CHALLENGE_PARAM);",
          "75:         KNOWN_REQ_PARAMS.add(OIDCLoginProtocol.CODE_CHALLENGE_METHOD_PARAM);",
          "76:     }",
          "78:     public void parseRequest(AuthorizationEndpointRequest request) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:         KNOWN_REQ_PARAMS.add(OAuth2Constants.CLIENT_ASSERTION_TYPE);",
          "79:         KNOWN_REQ_PARAMS.add(OAuth2Constants.CLIENT_ASSERTION);",
          "80:         KNOWN_REQ_PARAMS.add(OAuth2Constants.CLIENT_SECRET);",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java||testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java": [
          "File: testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java -> testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1202:                 parameters.add(new BasicNameValuePair(OIDCLoginProtocol.RESPONSE_MODE_PARAM, responseMode));",
          "1203:             }",
          "1204:             if (clientId != null && clientSecret != null) {",
          "1207:             }",
          "1209:                 parameters.add(new BasicNameValuePair(OAuth2Constants.CLIENT_ID, clientId));",
          "1210:             }",
          "1211:             if (redirectUri != null) {",
          "",
          "[Removed Lines]",
          "1205:                 String authorization = BasicAuthHelper.createHeader(clientId, clientSecret);",
          "1206:                 post.setHeader(\"Authorization\", authorization);",
          "1208:             if (clientId != null) {",
          "",
          "[Added Lines]",
          "1205:                 parameters.add(new BasicNameValuePair(OAuth2Constants.CLIENT_ID, clientId));",
          "1206:                 parameters.add(new BasicNameValuePair(OAuth2Constants.CLIENT_SECRET, clientSecret));",
          "1208:             else if (clientId != null) {",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.keycloak.testsuite.forms;",
          "20: import jakarta.ws.rs.core.Response;",
          "21: import java.io.IOException;",
          "22: import org.jboss.arquillian.graphene.page.Page;",
          "23: import org.junit.Rule;",
          "24: import org.junit.Test;",
          "25: import org.keycloak.common.util.MultivaluedHashMap;",
          "26: import org.keycloak.crypto.Algorithm;",
          "27: import org.keycloak.events.Details;",
          "28: import org.keycloak.events.Errors;",
          "29: import org.keycloak.jose.jws.JWSBuilder;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.nio.charset.StandardCharsets;",
          "24: import java.util.HashSet;",
          "25: import java.util.Set;",
          "30: import org.keycloak.OAuth2Constants;",
          "31: import org.keycloak.TokenCategory;",
          "34: import org.keycloak.crypto.KeyUse;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: import org.keycloak.keys.KeyProvider;",
          "33: import org.keycloak.models.KeyManager;",
          "34: import org.keycloak.models.KeycloakSession;",
          "35: import org.keycloak.models.RealmModel;",
          "36: import org.keycloak.models.utils.DefaultKeyProviders;",
          "37: import org.keycloak.protocol.RestartLoginCookie;",
          "38: import org.keycloak.representations.idm.ComponentRepresentation;",
          "39: import org.keycloak.representations.idm.RealmRepresentation;",
          "40: import org.keycloak.testsuite.AbstractTestRealmKeycloakTest;",
          "41: import org.keycloak.testsuite.Assert;",
          "42: import org.keycloak.testsuite.AssertEvents;",
          "43: import org.keycloak.testsuite.pages.LoginPage;",
          "44: import org.openqa.selenium.Cookie;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import org.keycloak.models.ParConfig;",
          "47: import org.keycloak.protocol.oidc.endpoints.AuthorizationEndpoint;",
          "54: import org.keycloak.testsuite.util.ClientBuilder;",
          "55: import org.keycloak.testsuite.util.OAuthClient;",
          "56: import org.keycloak.util.TokenUtil;",
          "59: import javax.crypto.SecretKey;",
          "61: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:             \"  }\\n\" +",
          "77:             \"}\";",
          "79:     @Override",
          "80:     public void configureTestRealm(RealmRepresentation testRealm) {",
          "81:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     public static final Set<String> sensitiveNotes = new HashSet<>();",
          "97:     static {",
          "98:         sensitiveNotes.add(OAuth2Constants.CLIENT_ASSERTION_TYPE);",
          "99:         sensitiveNotes.add(OAuth2Constants.CLIENT_ASSERTION);",
          "100:         sensitiveNotes.add(OAuth2Constants.CLIENT_SECRET);",
          "101:         sensitiveNotes.add(AuthorizationEndpoint.LOGIN_SESSION_NOTE_ADDITIONAL_REQ_PARAMS_PREFIX + OAuth2Constants.CLIENT_ASSERTION_TYPE);",
          "102:         sensitiveNotes.add(AuthorizationEndpoint.LOGIN_SESSION_NOTE_ADDITIONAL_REQ_PARAMS_PREFIX + OAuth2Constants.CLIENT_ASSERTION);",
          "103:         sensitiveNotes.add(AuthorizationEndpoint.LOGIN_SESSION_NOTE_ADDITIONAL_REQ_PARAMS_PREFIX + OAuth2Constants.CLIENT_SECRET);",
          "104:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "99:         }",
          "100:     }",
          "103:     @Test",
          "104:     public void testRestartCookieBackwardsCompatible_Keycloak25() throws IOException {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:     @Test",
          "130:     public void testRestartCookie() {",
          "131:         loginPage.open();",
          "132:         String restartCookie = loginPage.getDriver().manage().getCookieNamed(RestartLoginCookie.KC_RESTART).getValue();",
          "133:         assertRestartCookie(restartCookie);",
          "134:     }",
          "136:     @Test",
          "137:     public void testRestartCookieWithPar() {",
          "138:         String clientId = \"par-confidential-client\";",
          "139:         adminClient.realm(\"test\").clients().create(ClientBuilder.create()",
          "140:                 .clientId(\"par-confidential-client\")",
          "141:                 .secret(\"secret\")",
          "142:                 .redirectUris(oauth.getRedirectUri() + \"/*\")",
          "143:                 .attribute(ParConfig.REQUIRE_PUSHED_AUTHORIZATION_REQUESTS, \"true\")",
          "144:                 .build());",
          "146:         oauth.clientId(clientId);",
          "147:         String requestUri = null;",
          "148:         try {",
          "149:             OAuthClient.ParResponse pResp = oauth.doPushedAuthorizationRequest(clientId, \"secret\");",
          "150:             assertEquals(201, pResp.getStatusCode());",
          "151:             requestUri = pResp.getRequestUri();",
          "152:         }",
          "153:         catch (Exception e) {",
          "154:             Assert.fail();",
          "155:         }",
          "157:         oauth.redirectUri(null);",
          "158:         oauth.scope(null);",
          "159:         oauth.responseType(null);",
          "160:         oauth.requestUri(requestUri);",
          "161:         String state = oauth.stateParamRandom().getState();",
          "162:         oauth.stateParamHardcoded(state);",
          "164:         oauth.openLoginForm();",
          "165:         String restartCookie = loginPage.getDriver().manage().getCookieNamed(RestartLoginCookie.KC_RESTART).getValue();",
          "166:         assertRestartCookie(restartCookie);",
          "167:     }",
          "169:     private void assertRestartCookie(String restartCookie) {",
          "170:         getTestingClient()",
          "171:                 .server(TEST_REALM_NAME)",
          "172:                 .run(session ->",
          "173:                 {",
          "174:                     try {",
          "175:                         String sigAlgorithm = session.tokens().signatureAlgorithm(TokenCategory.INTERNAL);",
          "176:                         String encAlgorithm = session.tokens().cekManagementAlgorithm(TokenCategory.INTERNAL);",
          "177:                         SecretKey encKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.ENC, encAlgorithm).getSecretKey();",
          "178:                         SecretKey signKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.SIG, sigAlgorithm).getSecretKey();",
          "180:                         byte[] contentBytes = TokenUtil.jweDirectVerifyAndDecode(encKey, signKey, restartCookie);",
          "181:                         String jwt = new String(contentBytes, StandardCharsets.UTF_8);",
          "182:                         RestartLoginCookie restartLoginCookie = session.tokens().decode(jwt, RestartLoginCookie.class);",
          "183:                         Assert.assertFalse(restartLoginCookie.getNotes().keySet().stream().anyMatch(sensitiveNotes::contains));",
          "184:                     } catch (Exception e) {",
          "185:                         Assert.fail();",
          "186:                     }",
          "187:                 });",
          "188:     }",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:         Assert.assertEquals(AppPage.RequestType.AUTH_RESPONSE, appPage.getRequestType());",
          "84:         providers = realmsResouce().realm(\"test\").components().query(realmId, \"org.keycloak.keys.KeyProvider\");",
          "86:     }",
          "88:     @Test",
          "",
          "[Removed Lines]",
          "85:         assertProviders(providers, \"fallback-RS256\", \"fallback-\" + Constants.INTERNAL_SIGNATURE_ALGORITHM);",
          "",
          "[Added Lines]",
          "85:         assertProviders(providers, \"fallback-RS256\", \"fallback-AES\", \"fallback-\" + Constants.INTERNAL_SIGNATURE_ALGORITHM);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5756cc244cbe4a0e309f7bb629a6ec2ba02ce448",
      "candidate_info": {
        "commit_hash": "5756cc244cbe4a0e309f7bb629a6ec2ba02ce448",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/5756cc244cbe4a0e309f7bb629a6ec2ba02ce448",
        "files": [
          "docs/documentation/release_notes/index.adoc",
          "docs/documentation/release_notes/topics/22_0_11.adoc",
          "services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java",
          "services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java",
          "services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java",
          "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java"
        ],
        "message": "Encrypted KC_RESTART cookie and removed sensitive notes (#168)\n\nCloses #keycloak/keycloak-private#162\n\nSigned-off-by: Giuseppe Graziano <g.graziano94@gmail.com>",
        "before_after_code_files": [
          "services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java||services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java",
          "services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java||services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java",
          "services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java||services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java",
          "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java||testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java||services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java",
            "services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java||services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java",
            "services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java||services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java",
            "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java||testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java"
          ],
          "candidate": [
            "services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java||services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java",
            "services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java||services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java",
            "services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java||services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java",
            "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java||testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java"
          ]
        }
      },
      "candidate_diff": {
        "services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java||services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java": [
          "File: services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java -> services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:     public String cekManagementAlgorithm(TokenCategory category) {",
          "274:         if (category == null) return null;",
          "275:         switch (category) {",
          "276:             case ID:",
          "277:             case LOGOUT:",
          "278:                 return getCekManagementAlgorithm(OIDCConfigAttributes.ID_TOKEN_ENCRYPTED_RESPONSE_ALG);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:             case INTERNAL:",
          "277:                 return Algorithm.AES;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300:         switch (category) {",
          "301:             case ID:",
          "302:                 return getEncryptAlgorithm(OIDCConfigAttributes.ID_TOKEN_ENCRYPTED_RESPONSE_ENC, JWEConstants.A128CBC_HS256);",
          "303:             case LOGOUT:",
          "304:                 return getEncryptAlgorithm(OIDCConfigAttributes.ID_TOKEN_ENCRYPTED_RESPONSE_ENC);",
          "305:             case AUTHORIZATION_RESPONSE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "305:             case INTERNAL:",
          "306:                 return JWEConstants.A128CBC_HS256;",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java||services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java": [
          "File: services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java -> services/src/main/java/org/keycloak/protocol/RestartLoginCookie.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import org.keycloak.Token;",
          "23: import org.keycloak.TokenCategory;",
          "24: import org.keycloak.common.ClientConnection;",
          "25: import org.keycloak.models.ClientModel;",
          "26: import org.keycloak.models.KeycloakContext;",
          "27: import org.keycloak.models.KeycloakSession;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import org.keycloak.crypto.KeyUse;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: import jakarta.ws.rs.core.Cookie;",
          "36: import jakarta.ws.rs.core.UriInfo;",
          "37: import java.util.HashMap;",
          "38: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import org.keycloak.util.TokenUtil;",
          "40: import javax.crypto.SecretKey;",
          "41: import java.nio.charset.StandardCharsets;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:     public static void setRestartCookie(KeycloakSession session, RealmModel realm, ClientConnection connection, UriInfo uriInfo, AuthenticationSessionModel authSession) {",
          "124:         RestartLoginCookie restart = new RestartLoginCookie(authSession);",
          "126:         String path = AuthenticationManager.getRealmCookiePath(realm, uriInfo);",
          "127:         boolean secureOnly = realm.getSslRequired().isRequired(connection);",
          "128:         CookieHelper.addCookie(KC_RESTART, encoded, path, null, null, -1, secureOnly, true, session);",
          "",
          "[Removed Lines]",
          "125:         String encoded = session.tokens().encode(restart);",
          "",
          "[Added Lines]",
          "130:         String encoded = encodeAndEncrypt(session, restart);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "152:         String encodedCookie = cook.getValue();",
          "155:         if (cookie == null) {",
          "156:             logger.debug(\"Failed to verify encoded RestartLoginCookie\");",
          "157:             return null;",
          "",
          "[Removed Lines]",
          "154:         RestartLoginCookie cookie = session.tokens().decode(encodedCookie, RestartLoginCookie.class);",
          "",
          "[Added Lines]",
          "159:         RestartLoginCookie cookie = decryptAndDecode(session, encodedCookie);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "182:         return authSession;",
          "183:     }",
          "185:     @Override",
          "186:     public TokenCategory getCategory() {",
          "187:         return TokenCategory.INTERNAL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:     private static RestartLoginCookie decryptAndDecode(KeycloakSession session, String encodedToken) {",
          "191:         try {",
          "192:             String sigAlgorithm = session.tokens().signatureAlgorithm(TokenCategory.INTERNAL);",
          "193:             String algAlgorithm = session.tokens().cekManagementAlgorithm(TokenCategory.INTERNAL);",
          "194:             SecretKey encKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.ENC, algAlgorithm).getSecretKey();",
          "195:             SecretKey signKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.SIG, sigAlgorithm).getSecretKey();",
          "197:             byte[] contentBytes = TokenUtil.jweDirectVerifyAndDecode(encKey, signKey, encodedToken);",
          "198:             String jwt = new String(contentBytes, StandardCharsets.UTF_8);",
          "199:             return session.tokens().decode(jwt, RestartLoginCookie.class);",
          "200:         } catch (Exception e) {",
          "202:             return session.tokens().decode(encodedToken, RestartLoginCookie.class);",
          "203:         }",
          "204:     }",
          "206:     private static String encodeAndEncrypt(KeycloakSession session, RestartLoginCookie cookie) {",
          "207:         try {",
          "208:             String sigAlgorithm = session.tokens().signatureAlgorithm(cookie.getCategory());",
          "209:             String algAlgorithm = session.tokens().cekManagementAlgorithm(cookie.getCategory());",
          "210:             SecretKey encKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.ENC, algAlgorithm).getSecretKey();",
          "211:             SecretKey signKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.SIG, sigAlgorithm).getSecretKey();",
          "213:             String encodedJwt = session.tokens().encode(cookie);",
          "214:             return TokenUtil.jweDirectEncode(encKey, signKey, encodedJwt.getBytes(StandardCharsets.UTF_8));",
          "215:         } catch (Exception e) {",
          "216:             throw new RuntimeException(\"Error encoding cookie.\", e);",
          "217:         }",
          "218:     }",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java||services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java": [
          "File: services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java -> services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:         KNOWN_REQ_PARAMS.add(OIDCLoginProtocol.CODE_CHALLENGE_PARAM);",
          "75:         KNOWN_REQ_PARAMS.add(OIDCLoginProtocol.CODE_CHALLENGE_METHOD_PARAM);",
          "76:     }",
          "78:     public void parseRequest(AuthorizationEndpointRequest request) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:         KNOWN_REQ_PARAMS.add(OAuth2Constants.CLIENT_ASSERTION_TYPE);",
          "79:         KNOWN_REQ_PARAMS.add(OAuth2Constants.CLIENT_ASSERTION);",
          "80:         KNOWN_REQ_PARAMS.add(OAuth2Constants.CLIENT_SECRET);",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java||testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java": [
          "File: testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java -> testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1149:                 parameters.add(new BasicNameValuePair(OIDCLoginProtocol.RESPONSE_MODE_PARAM, responseMode));",
          "1150:             }",
          "1151:             if (clientId != null && clientSecret != null) {",
          "1154:                 parameters.add(new BasicNameValuePair(OAuth2Constants.CLIENT_ID, clientId));",
          "1155:             }",
          "1156:             if (redirectUri != null) {",
          "",
          "[Removed Lines]",
          "1152:                 String authorization = BasicAuthHelper.createHeader(clientId, clientSecret);",
          "1153:                 post.setHeader(\"Authorization\", authorization);",
          "",
          "[Added Lines]",
          "1152:                 parameters.add(new BasicNameValuePair(OAuth2Constants.CLIENT_ID, clientId));",
          "1153:                 parameters.add(new BasicNameValuePair(OAuth2Constants.CLIENT_SECRET, clientSecret));",
          "1154:             } else if (clientId != null) {",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/RestartCookieTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.keycloak.testsuite.forms;",
          "20: import org.jboss.arquillian.graphene.page.Page;",
          "21: import org.junit.Rule;",
          "22: import org.junit.Test;",
          "23: import org.keycloak.events.Details;",
          "24: import org.keycloak.events.Errors;",
          "25: import org.keycloak.jose.jws.JWSBuilder;",
          "26: import org.keycloak.models.KeyManager;",
          "27: import org.keycloak.models.KeycloakSession;",
          "28: import org.keycloak.models.RealmModel;",
          "29: import org.keycloak.protocol.RestartLoginCookie;",
          "30: import org.keycloak.representations.idm.RealmRepresentation;",
          "31: import org.keycloak.testsuite.AbstractTestRealmKeycloakTest;",
          "32: import org.keycloak.testsuite.Assert;",
          "33: import org.keycloak.testsuite.AssertEvents;",
          "34: import org.keycloak.testsuite.pages.LoginPage;",
          "35: import org.openqa.selenium.Cookie;",
          "",
          "[Removed Lines]",
          "37: import java.io.IOException;",
          "",
          "[Added Lines]",
          "19: import java.io.IOException;",
          "20: import java.nio.charset.StandardCharsets;",
          "21: import java.util.HashSet;",
          "22: import java.util.Set;",
          "27: import org.keycloak.OAuth2Constants;",
          "28: import org.keycloak.TokenCategory;",
          "29: import org.keycloak.crypto.KeyUse;",
          "35: import org.keycloak.models.ParConfig;",
          "38: import org.keycloak.protocol.oidc.endpoints.AuthorizationEndpoint;",
          "44: import org.keycloak.testsuite.util.ClientBuilder;",
          "45: import org.keycloak.testsuite.util.OAuthClient;",
          "46: import org.keycloak.util.TokenUtil;",
          "49: import javax.crypto.SecretKey;",
          "51: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:             \"  }\\n\" +",
          "71:             \"}\";",
          "73:     @Override",
          "74:     public void configureTestRealm(RealmRepresentation testRealm) {",
          "75:     }",
          "79:     @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:     public static final Set<String> sensitiveNotes = new HashSet<>();",
          "87:     static {",
          "88:         sensitiveNotes.add(OAuth2Constants.CLIENT_ASSERTION_TYPE);",
          "89:         sensitiveNotes.add(OAuth2Constants.CLIENT_ASSERTION);",
          "90:         sensitiveNotes.add(OAuth2Constants.CLIENT_SECRET);",
          "91:         sensitiveNotes.add(AuthorizationEndpoint.LOGIN_SESSION_NOTE_ADDITIONAL_REQ_PARAMS_PREFIX + OAuth2Constants.CLIENT_ASSERTION_TYPE);",
          "92:         sensitiveNotes.add(AuthorizationEndpoint.LOGIN_SESSION_NOTE_ADDITIONAL_REQ_PARAMS_PREFIX + OAuth2Constants.CLIENT_ASSERTION);",
          "93:         sensitiveNotes.add(AuthorizationEndpoint.LOGIN_SESSION_NOTE_ADDITIONAL_REQ_PARAMS_PREFIX + OAuth2Constants.CLIENT_SECRET);",
          "94:     }",
          "100:     @Test",
          "101:     public void testRestartCookie() {",
          "102:         loginPage.open();",
          "103:         String restartCookie = loginPage.getDriver().manage().getCookieNamed(RestartLoginCookie.KC_RESTART).getValue();",
          "104:         assertRestartCookie(restartCookie);",
          "105:     }",
          "107:     @Test",
          "108:     public void testRestartCookieWithPar() {",
          "109:         String clientId = \"par-confidential-client\";",
          "110:         adminClient.realm(\"test\").clients().create(ClientBuilder.create()",
          "111:                 .clientId(\"par-confidential-client\")",
          "112:                 .secret(\"secret\")",
          "113:                 .redirectUris(oauth.getRedirectUri() + \"/*\")",
          "114:                 .attribute(ParConfig.REQUIRE_PUSHED_AUTHORIZATION_REQUESTS, \"true\")",
          "115:                 .build());",
          "117:         oauth.clientId(clientId);",
          "118:         String requestUri = null;",
          "119:         try {",
          "120:             OAuthClient.ParResponse pResp = oauth.doPushedAuthorizationRequest(clientId, \"secret\");",
          "121:             assertEquals(201, pResp.getStatusCode());",
          "122:             requestUri = pResp.getRequestUri();",
          "123:         }",
          "124:         catch (Exception e) {",
          "125:             Assert.fail();",
          "126:         }",
          "128:         oauth.redirectUri(null);",
          "129:         oauth.scope(null);",
          "130:         oauth.responseType(null);",
          "131:         oauth.requestUri(requestUri);",
          "132:         String state = oauth.stateParamRandom().getState();",
          "133:         oauth.stateParamHardcoded(state);",
          "135:         oauth.openLoginForm();",
          "136:         String restartCookie = loginPage.getDriver().manage().getCookieNamed(RestartLoginCookie.KC_RESTART).getValue();",
          "137:         assertRestartCookie(restartCookie);",
          "138:     }",
          "140:     private void assertRestartCookie(String restartCookie) {",
          "141:         getTestingClient()",
          "142:                 .server(TEST_REALM_NAME)",
          "143:                 .run(session ->",
          "144:                 {",
          "145:                     try {",
          "146:                         String sigAlgorithm = session.tokens().signatureAlgorithm(TokenCategory.INTERNAL);",
          "147:                         String encAlgorithm = session.tokens().cekManagementAlgorithm(TokenCategory.INTERNAL);",
          "148:                         SecretKey encKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.ENC, encAlgorithm).getSecretKey();",
          "149:                         SecretKey signKey = session.keys().getActiveKey(session.getContext().getRealm(), KeyUse.SIG, sigAlgorithm).getSecretKey();",
          "151:                         byte[] contentBytes = TokenUtil.jweDirectVerifyAndDecode(encKey, signKey, restartCookie);",
          "152:                         String jwt = new String(contentBytes, StandardCharsets.UTF_8);",
          "153:                         RestartLoginCookie restartLoginCookie = session.tokens().decode(jwt, RestartLoginCookie.class);",
          "154:                         Assert.assertFalse(restartLoginCookie.getNotes().keySet().stream().anyMatch(sensitiveNotes::contains));",
          "155:                     } catch (Exception e) {",
          "156:                         Assert.fail();",
          "157:                     }",
          "158:                 });",
          "159:     }",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/keys/FallbackKeyProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:         Assert.assertEquals(AppPage.RequestType.AUTH_RESPONSE, appPage.getRequestType());",
          "83:         providers = realmsResouce().realm(\"test\").components().query(realmId, \"org.keycloak.keys.KeyProvider\");",
          "85:     }",
          "87:     @Test",
          "",
          "[Removed Lines]",
          "84:         assertProviders(providers, \"fallback-RS256\", \"fallback-HS256\");",
          "",
          "[Added Lines]",
          "84:         assertProviders(providers, \"fallback-RS256\", \"fallback-AES\", \"fallback-\" + Algorithm.HS256);",
          "",
          "---------------"
        ]
      }
    }
  ]
}