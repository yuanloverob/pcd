{
  "cve_id": "CVE-2014-6633",
  "cve_desc": "The safe_eval function in trytond in Tryton before 2.4.15, 2.6.x before 2.6.14, 2.8.x before 2.8.11, 3.0.x before 3.0.7, and 3.2.x before 3.2.3 allows remote authenticated users to execute arbitrary commands via shell metacharacters in (1) the collection.domain in the webdav module or (2) the formula field in the price_list module.",
  "repo": "tryton/trytond",
  "patch_hash": "3e4c2b7e8c7b3358597a0d484fa98f45483ee92a",
  "patch_info": {
    "commit_hash": "3e4c2b7e8c7b3358597a0d484fa98f45483ee92a",
    "repo": "tryton/trytond",
    "commit_url": "https://github.com/tryton/trytond/commit/3e4c2b7e8c7b3358597a0d484fa98f45483ee92a",
    "files": [
      "CHANGELOG",
      "trytond/tests/test_tools.py",
      "trytond/tools/misc.py"
    ],
    "message": "Prevent double underscore in safe_eval\n\nCVE-2014-6633\nissue4155\nreview5601002",
    "before_after_code_files": [
      "trytond/tests/test_tools.py||trytond/tests/test_tools.py",
      "trytond/tools/misc.py||trytond/tools/misc.py"
    ]
  },
  "patch_diff": {
    "trytond/tests/test_tools.py||trytond/tests/test_tools.py": [
      "File: trytond/tests/test_tools.py -> trytond/tests/test_tools.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "65:     def test0061safe_eval_getattr(self):",
      "66:         'Attempt to get arround direct attr access'",
      "69:     def test0062safe_eval_func_globals(self):",
      "70:         'Attempt to access global enviroment where fun was defined'",
      "",
      "[Removed Lines]",
      "67:         self.assertRaises(NameError, safe_eval, \"getattr(int, '__abs__')\")",
      "",
      "[Added Lines]",
      "67:         self.assertRaises(NameError, safe_eval, \"getattr(int, 'real')\")",
      "",
      "---------------"
    ],
    "trytond/tools/misc.py||trytond/tools/misc.py": [
      "File: trytond/tools/misc.py -> trytond/tools/misc.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "371: def safe_eval(source, data=None):",
      "375:     comp = _compile_source(source)",
      "376:     return eval(comp, {'__builtins__': {",
      "",
      "[Removed Lines]",
      "372:     if '__subclasses__' in source:",
      "373:         raise ValueError('__subclasses__ not allowed')",
      "",
      "[Added Lines]",
      "372:     if '__' in source:",
      "373:         raise ValueError('Double underscores not allowed')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "49ef0c135ca1b870a8c227ca21fdf09c93403306",
      "candidate_info": {
        "commit_hash": "49ef0c135ca1b870a8c227ca21fdf09c93403306",
        "repo": "tryton/trytond",
        "commit_url": "https://github.com/tryton/trytond/commit/49ef0c135ca1b870a8c227ca21fdf09c93403306",
        "files": [
          "trytond/tests/test_access.py",
          "trytond/tests/test_fields.py",
          "trytond/tests/test_sequence.py",
          "trytond/tests/test_tools.py",
          "trytond/tests/test_trigger.py",
          "trytond/tests/test_tryton.py"
        ],
        "message": "Use more fine grained exceptions on tests\n\nissue3973\nreview8431002",
        "before_after_code_files": [
          "trytond/tests/test_access.py||trytond/tests/test_access.py",
          "trytond/tests/test_fields.py||trytond/tests/test_fields.py",
          "trytond/tests/test_sequence.py||trytond/tests/test_sequence.py",
          "trytond/tests/test_tools.py||trytond/tests/test_tools.py",
          "trytond/tests/test_trigger.py||trytond/tests/test_trigger.py",
          "trytond/tests/test_tryton.py||trytond/tests/test_tryton.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trytond/tests/test_tools.py||trytond/tests/test_tools.py"
          ],
          "candidate": [
            "trytond/tests/test_tools.py||trytond/tests/test_tools.py"
          ]
        }
      },
      "candidate_diff": {
        "trytond/tests/test_access.py||trytond/tests/test_access.py": [
          "File: trytond/tests/test_access.py -> trytond/tests/test_access.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: from trytond.tests.test_tryton import POOL, DB_NAME, USER, CONTEXT, \\",
          "6:         install_module",
          "7: from trytond.transaction import Transaction",
          "10: class ModelAccessTestCase(unittest.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: from trytond.exceptions import UserError",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:             self.model_access.write([model_access_wo_group], {",
          "43:                     'perm_read': False,",
          "44:                     })",
          "47:             # Two access rules with one group allowed",
          "48:             group, = self.group.search([('users', '=', USER)])",
          "",
          "[Removed Lines]",
          "45:             self.assertRaises(Exception, self.test_access.read, [test.id])",
          "",
          "[Added Lines]",
          "46:             self.assertRaises(UserError, self.test_access.read, [test.id])",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:             self.model_access.write([model_access_wo_group], {",
          "71:                     'perm_read': False,",
          "72:                     })",
          "75:             # One access disallowed for one group",
          "76:             self.model_access.delete([model_access_wo_group])",
          "79:             # One access allowed for one group",
          "80:             self.model_access.write([model_access_w_group], {",
          "",
          "[Removed Lines]",
          "73:             self.assertRaises(Exception, self.test_access.read, [test.id])",
          "77:             self.assertRaises(Exception, self.test_access.read, [test.id])",
          "",
          "[Added Lines]",
          "74:             self.assertRaises(UserError, self.test_access.read, [test.id])",
          "78:             self.assertRaises(UserError, self.test_access.read, [test.id])",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "123:             self.model_access.write([model_access_wo_group], {",
          "124:                     'perm_write': False,",
          "125:                     })",
          "128:             # Two access rules with one group allowed",
          "129:             group, = self.group.search([('users', '=', USER)])",
          "",
          "[Removed Lines]",
          "126:             self.assertRaises(Exception, self.test_access.write, [test], {})",
          "",
          "[Added Lines]",
          "127:             self.assertRaises(UserError, self.test_access.write, [test], {})",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "150:             self.model_access.write([model_access_wo_group], {",
          "151:                     'perm_write': False,",
          "152:                     })",
          "155:             # One access disallowed for one group",
          "156:             self.model_access.delete([model_access_wo_group])",
          "159:             # One access allowed for one group",
          "160:             self.model_access.write([model_access_w_group], {",
          "",
          "[Removed Lines]",
          "153:             self.assertRaises(Exception, self.test_access.write, [test], {})",
          "157:             self.assertRaises(Exception, self.test_access.write, [test], {})",
          "",
          "[Added Lines]",
          "154:             self.assertRaises(UserError, self.test_access.write, [test], {})",
          "158:             self.assertRaises(UserError, self.test_access.write, [test], {})",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "201:             self.model_access.write([model_access_wo_group], {",
          "202:                     'perm_create': False,",
          "203:                     })",
          "206:             # Two access rules with one group allowed",
          "207:             group, = self.group.search([('users', '=', USER)])",
          "",
          "[Removed Lines]",
          "204:             self.assertRaises(Exception, self.test_access.create, {})",
          "",
          "[Added Lines]",
          "205:             self.assertRaises(UserError, self.test_access.create, {})",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "229:             self.model_access.write([model_access_wo_group], {",
          "230:                     'perm_create': False,",
          "231:                     })",
          "234:             # One access disallowed for one group",
          "235:             self.model_access.delete([model_access_wo_group])",
          "238:             # One access allowed for one group",
          "239:             self.model_access.write([model_access_w_group], {",
          "",
          "[Removed Lines]",
          "232:             self.assertRaises(Exception, self.test_access.create, [{}])",
          "236:             self.assertRaises(Exception, self.test_access.create, [{}])",
          "",
          "[Added Lines]",
          "233:             self.assertRaises(UserError, self.test_access.create, [{}])",
          "237:             self.assertRaises(UserError, self.test_access.create, [{}])",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "282:             self.model_access.write([model_access_wo_group], {",
          "283:                     'perm_delete': False,",
          "284:                     })",
          "286:                 [tests.pop()])",
          "288:             # Two access rules with one group allowed",
          "",
          "[Removed Lines]",
          "285:             self.assertRaises(Exception, self.test_access.delete,",
          "",
          "[Added Lines]",
          "286:             self.assertRaises(UserError, self.test_access.delete,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "311:             self.model_access.write([model_access_wo_group], {",
          "312:                     'perm_delete': False,",
          "313:                     })",
          "315:                 [tests.pop()])",
          "317:             # One access disallowed for one group",
          "318:             self.model_access.delete([model_access_wo_group])",
          "320:                 [tests.pop()])",
          "322:             # One access allowed for one group",
          "",
          "[Removed Lines]",
          "314:             self.assertRaises(Exception, self.test_access.delete,",
          "319:             self.assertRaises(Exception, self.test_access.delete,",
          "",
          "[Added Lines]",
          "315:             self.assertRaises(UserError, self.test_access.delete,",
          "320:             self.assertRaises(UserError, self.test_access.delete,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "400:                     'perm_read': False,",
          "401:                     })",
          "404:                 ['field1'])",
          "405:             self.test_access.read([test.id], ['field2'])",
          "408:             test.field2",
          "409:             transaction.cursor.cache.clear()",
          "410:             test = self.test_access(test.id)",
          "",
          "[Removed Lines]",
          "403:             self.assertRaises(Exception, self.test_access.read, [test.id],",
          "406:             self.assertRaises(Exception, self.test_access.read, [test.id])",
          "407:             self.assertRaises(Exception, getattr, test, 'field1')",
          "",
          "[Added Lines]",
          "404:             self.assertRaises(UserError, self.test_access.read, [test.id],",
          "407:             self.assertRaises(UserError, self.test_access.read, [test.id])",
          "408:             self.assertRaises(UserError, getattr, test, 'field1')",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "453:             self.field_access.write([field_access_wo_group], {",
          "454:                 'perm_read': False,",
          "455:                 })",
          "457:                 ['field1'])",
          "458:             self.test_access.read([test.id], ['field2'])",
          "461:             test.field2",
          "462:             transaction.cursor.cache.clear()",
          "463:             test = self.test_access(test.id)",
          "465:             # One access disallowed for one group",
          "466:             self.field_access.delete([field_access_wo_group])",
          "468:                 ['field1'])",
          "469:             self.test_access.read([test.id], ['field2'])",
          "472:             test.field2",
          "473:             transaction.cursor.cache.clear()",
          "474:             test = self.test_access(test.id)",
          "",
          "[Removed Lines]",
          "456:             self.assertRaises(Exception, self.test_access.read, [test.id],",
          "459:             self.assertRaises(Exception, self.test_access.read, [test.id])",
          "460:             self.assertRaises(Exception, getattr, test, 'field1')",
          "467:             self.assertRaises(Exception, self.test_access.read, [test.id],",
          "470:             self.assertRaises(Exception, self.test_access.read, [test.id])",
          "471:             self.assertRaises(Exception, getattr, test, 'field1')",
          "",
          "[Added Lines]",
          "457:             self.assertRaises(UserError, self.test_access.read, [test.id],",
          "460:             self.assertRaises(UserError, self.test_access.read, [test.id])",
          "461:             self.assertRaises(UserError, getattr, test, 'field1')",
          "468:             self.assertRaises(UserError, self.test_access.read, [test.id],",
          "471:             self.assertRaises(UserError, self.test_access.read, [test.id])",
          "472:             self.assertRaises(UserError, getattr, test, 'field1')",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "537:                 'perm_read': False,",
          "538:                 })",
          "539:             self.test_access.read([test.id], ['field1'])",
          "541:                 ['field2'])",
          "543:             test.field1",
          "545:             transaction.cursor.cache.clear()",
          "546:             test = self.test_access(test.id)",
          "",
          "[Removed Lines]",
          "540:             self.assertRaises(Exception, self.test_access.read, [test.id],",
          "542:             self.assertRaises(Exception, self.test_access.read, [test.id])",
          "544:             self.assertRaises(Exception, getattr, test, 'field2')",
          "",
          "[Added Lines]",
          "541:             self.assertRaises(UserError, self.test_access.read, [test.id],",
          "543:             self.assertRaises(UserError, self.test_access.read, [test.id])",
          "545:             self.assertRaises(UserError, getattr, test, 'field2')",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "549:             self.field_access.write([field_access1], {",
          "550:                     'perm_read': False,",
          "551:                     })",
          "553:                 ['field1'])",
          "555:                 ['field2'])",
          "559:             transaction.cursor.cache.clear()",
          "560:             test = self.test_access(test.id)",
          "",
          "[Removed Lines]",
          "552:             self.assertRaises(Exception, self.test_access.read, [test.id],",
          "554:             self.assertRaises(Exception, self.test_access.read, [test.id],",
          "556:             self.assertRaises(Exception, self.test_access.read, [test.id])",
          "557:             self.assertRaises(Exception, getattr, test, 'field1')",
          "558:             self.assertRaises(Exception, getattr, test, 'field2')",
          "",
          "[Added Lines]",
          "553:             self.assertRaises(UserError, self.test_access.read, [test.id],",
          "555:             self.assertRaises(UserError, self.test_access.read, [test.id],",
          "557:             self.assertRaises(UserError, self.test_access.read, [test.id])",
          "558:             self.assertRaises(UserError, getattr, test, 'field1')",
          "559:             self.assertRaises(UserError, getattr, test, 'field2')",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "607:                     })",
          "609:             self.test_access.write([test], {})",
          "611:                 {'field1': 'ham'})",
          "612:             self.test_access.write([test], {'field2': 'spam'})",
          "614:                     'field1': 'ham',",
          "615:                     'field2': 'spam',",
          "616:                     })",
          "",
          "[Removed Lines]",
          "610:             self.assertRaises(Exception, self.test_access.write, [test],",
          "613:             self.assertRaises(Exception, self.test_access.write, [test], {",
          "",
          "[Added Lines]",
          "611:             self.assertRaises(UserError, self.test_access.write, [test],",
          "614:             self.assertRaises(UserError, self.test_access.write, [test], {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "660:                     'perm_write': False,",
          "661:                     })",
          "662:             self.test_access.write([test], {})",
          "664:                 {'field1': 'ham'})",
          "665:             self.test_access.write([test], {'field2': 'spam'})",
          "667:                     'field1': 'ham',",
          "668:                     'field2': 'spam',",
          "669:                     })",
          "",
          "[Removed Lines]",
          "663:             self.assertRaises(Exception, self.test_access.write, [test],",
          "666:             self.assertRaises(Exception, self.test_access.write, [test], {",
          "",
          "[Added Lines]",
          "664:             self.assertRaises(UserError, self.test_access.write, [test],",
          "667:             self.assertRaises(UserError, self.test_access.write, [test], {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "671:             # One access disallowed for one group",
          "672:             self.field_access.delete([field_access_wo_group])",
          "673:             self.test_access.write([test], {})",
          "675:                 {'field1': 'ham'})",
          "676:             self.test_access.write([test], {'field2': 'ham'})",
          "678:                     'field1': 'ham',",
          "679:                     'field2': 'spam',",
          "680:                     })",
          "",
          "[Removed Lines]",
          "674:             self.assertRaises(Exception, self.test_access.write, [test],",
          "677:             self.assertRaises(Exception, self.test_access.write, [test], {",
          "",
          "[Added Lines]",
          "675:             self.assertRaises(UserError, self.test_access.write, [test],",
          "678:             self.assertRaises(UserError, self.test_access.write, [test], {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "744:                     })",
          "745:             self.test_access.write([test], {})",
          "746:             self.test_access.write([test], {'field1': 'ham'})",
          "748:                     'field2': 'spam'})",
          "750:                     'field1': 'ham',",
          "751:                     'field2': 'spam',",
          "752:                     })",
          "",
          "[Removed Lines]",
          "747:             self.assertRaises(Exception, self.test_access.write, [test], {",
          "749:             self.assertRaises(Exception, self.test_access.write, [test], {",
          "",
          "[Added Lines]",
          "748:             self.assertRaises(UserError, self.test_access.write, [test], {",
          "750:             self.assertRaises(UserError, self.test_access.write, [test], {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "756:                     'perm_write': False,",
          "757:                     })",
          "758:             self.test_access.write([test], {})",
          "760:                     'field1': 'ham'})",
          "762:                     'field2': 'spam'})",
          "764:                     'field1': 'ham',",
          "765:                     'field2': 'spam',",
          "766:                     })",
          "",
          "[Removed Lines]",
          "759:             self.assertRaises(Exception, self.test_access.write, [test], {",
          "761:             self.assertRaises(Exception, self.test_access.write, [test], {",
          "763:             self.assertRaises(Exception, self.test_access.write, [test], {",
          "",
          "[Added Lines]",
          "760:             self.assertRaises(UserError, self.test_access.write, [test], {",
          "762:             self.assertRaises(UserError, self.test_access.write, [test], {",
          "764:             self.assertRaises(UserError, self.test_access.write, [test], {",
          "",
          "---------------"
        ],
        "trytond/tests/test_fields.py||trytond/tests/test_fields.py": [
          "File: trytond/tests/test_fields.py -> trytond/tests/test_fields.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "567:                     'float': 'test',",
          "568:                     })",
          "571:             transaction.cursor.rollback()",
          "573:             float5, = self.float_required.create([{",
          "",
          "[Removed Lines]",
          "570:             self.assertRaises(Exception, self.float_required.create, [{}])",
          "",
          "[Added Lines]",
          "570:             self.assertRaises(UserError, self.float_required.create, [{}])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "581:                         }])",
          "582:             self.assert_(float6)",
          "585:                         'digits': 1,",
          "586:                         'float': 1.11,",
          "587:                         }])",
          "590:                 [float6], {",
          "591:                     'float': 1.11,",
          "592:                     })",
          "595:                 [float6], {",
          "596:                     'digits': 0,",
          "597:                     })",
          "",
          "[Removed Lines]",
          "584:             self.assertRaises(Exception, self.float_digits.create, [{",
          "589:             self.assertRaises(Exception, self.float_digits.write,",
          "594:             self.assertRaises(Exception, self.float_digits.write,",
          "",
          "[Added Lines]",
          "584:             self.assertRaises(UserError, self.float_digits.create, [{",
          "589:             self.assertRaises(UserError, self.float_digits.write,",
          "594:             self.assertRaises(UserError, self.float_digits.write,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "806:                     'numeric': 'test',",
          "807:                     })",
          "810:             transaction.cursor.rollback()",
          "812:             numeric5, = self.numeric_required.create([{",
          "",
          "[Removed Lines]",
          "809:             self.assertRaises(Exception, self.numeric_required.create, [{}])",
          "",
          "[Added Lines]",
          "809:             self.assertRaises(UserError, self.numeric_required.create, [{}])",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "820:                         }])",
          "821:             self.assert_(numeric6)",
          "824:                         'digits': 1,",
          "825:                         'numeric': Decimal('1.11'),",
          "826:                         }])",
          "829:                 [numeric6], {",
          "830:                     'numeric': Decimal('1.11'),",
          "831:                     })",
          "834:                 [numeric6], {",
          "835:                     'numeric': Decimal('0.10000000000000001'),",
          "836:                     })",
          "839:                 [numeric6], {",
          "840:                     'digits': 0,",
          "841:                     })",
          "",
          "[Removed Lines]",
          "823:             self.assertRaises(Exception, self.numeric_digits.create, [{",
          "828:             self.assertRaises(Exception, self.numeric_digits.write,",
          "833:             self.assertRaises(Exception, self.numeric_digits.write,",
          "838:             self.assertRaises(Exception, self.numeric_digits.write,",
          "",
          "[Added Lines]",
          "823:             self.assertRaises(UserError, self.numeric_digits.create, [{",
          "828:             self.assertRaises(UserError, self.numeric_digits.write,",
          "833:             self.assertRaises(UserError, self.numeric_digits.write,",
          "838:             self.assertRaises(UserError, self.numeric_digits.write,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1061:                     })",
          "1062:             self.assertEqual(char2.char, 'Test')",
          "1065:             transaction.cursor.rollback()",
          "1068:                     'char': '',",
          "1069:                     }])",
          "1070:             transaction.cursor.rollback()",
          "",
          "[Removed Lines]",
          "1064:             self.assertRaises(Exception, self.char_required.create, [{}])",
          "1067:             self.assertRaises(Exception, self.char_required.create, [{",
          "",
          "[Added Lines]",
          "1064:             self.assertRaises(UserError, self.char_required.create, [{}])",
          "1067:             self.assertRaises(UserError, self.char_required.create, [{",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1311:                     })",
          "1312:             self.assertEqual(text2.text, 'Test')",
          "1315:             transaction.cursor.rollback()",
          "1317:             text5, = self.text_required.create([{",
          "",
          "[Removed Lines]",
          "1314:             self.assertRaises(Exception, self.text_required.create, [{}])",
          "",
          "[Added Lines]",
          "1314:             self.assertRaises(UserError, self.text_required.create, [{}])",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1324:                         }])",
          "1325:             self.assert_(text6)",
          "1328:                         'text': 'foobar',",
          "1329:                         }])",
          "1332:                     'text': 'foobar',",
          "1333:                     })",
          "",
          "[Removed Lines]",
          "1327:             self.assertRaises(Exception, self.text_size.create, [{",
          "1331:             self.assertRaises(Exception, self.text_size.write, [text6], {",
          "",
          "[Added Lines]",
          "1327:             self.assertRaises(UserError, self.text_size.create, [{",
          "1331:             self.assertRaises(UserError, self.text_size.write, [text6], {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1582:             self.assert_(date5)",
          "1583:             self.assertEqual(date5.date, datetime.date(2009, 1, 1))",
          "1586:             transaction.cursor.rollback()",
          "1588:             date6, = self.date_required.create([{",
          "",
          "[Removed Lines]",
          "1585:             self.assertRaises(Exception, self.date_required.create, [{}])",
          "",
          "[Added Lines]",
          "1585:             self.assertRaises(UserError, self.date_required.create, [{}])",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1834:             self.assertEqual(datetime5.datetime,",
          "1835:                 datetime.datetime(2009, 1, 1, 12, 0, 0))",
          "1838:             transaction.cursor.rollback()",
          "1840:             datetime6, = self.datetime_required.create([{",
          "",
          "[Removed Lines]",
          "1837:             self.assertRaises(Exception, self.datetime_required.create, [{}])",
          "",
          "[Added Lines]",
          "1837:             self.assertRaises(UserError, self.datetime_required.create, [{}])",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1862:             self.assert_(self.datetime_format.create([{",
          "1863:                             'datetime': datetime.datetime(2009, 1, 1, 12, 30),",
          "1864:                             }]))",
          "1866:                         'datetime': datetime.datetime(2009, 1, 1, 12, 30, 25),",
          "1867:                         }])",
          "",
          "[Removed Lines]",
          "1865:             self.assertRaises(Exception, self.datetime_format.create, [{",
          "",
          "[Added Lines]",
          "1865:             self.assertRaises(UserError, self.datetime_format.create, [{",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2081:             self.assert_(time5)",
          "2082:             self.assertEqual(time5.time, datetime.time(12, 0))",
          "2085:             transaction.cursor.rollback()",
          "2087:             time6, = self.time_required.create([{",
          "",
          "[Removed Lines]",
          "2084:             self.assertRaises(Exception, self.time_required.create, [{}])",
          "",
          "[Added Lines]",
          "2084:             self.assertRaises(UserError, self.time_required.create, [{}])",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2104:             self.assert_(self.time_format.create([{",
          "2105:                         'time': datetime.time(12, 30),",
          "2106:                         }]))",
          "2108:                     'time': datetime.time(12, 30, 25),",
          "2109:                     }])",
          "",
          "[Removed Lines]",
          "2107:             self.assertRaises(Exception, self.time_format.create, [{",
          "",
          "[Added Lines]",
          "2107:             self.assertRaises(UserError, self.time_format.create, [{",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2191:                     })",
          "2192:             self.assertEqual(one2one2.one2one, None)",
          "2195:                         'name': 'one2one3',",
          "2196:                         'one2one': target1.id,",
          "2197:                         }])",
          "2198:             transaction.cursor.rollback()",
          "2201:                     'one2one': target1.id,",
          "2202:                     })",
          "2203:             transaction.cursor.rollback()",
          "2206:                         'name': 'one2one3',",
          "2207:                         }])",
          "2208:             transaction.cursor.rollback()",
          "",
          "[Removed Lines]",
          "2194:             self.assertRaises(Exception, self.one2one.create, [{",
          "2200:             self.assertRaises(Exception, self.one2one.write, [one2one2], {",
          "2205:             self.assertRaises(Exception, self.one2one_required.create, [{",
          "",
          "[Added Lines]",
          "2194:             self.assertRaises(UserError, self.one2one.create, [{",
          "2200:             self.assertRaises(UserError, self.one2one.write, [one2one2], {",
          "2205:             self.assertRaises(UserError, self.one2one_required.create, [{",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2220:             target4, = self.one2one_target.create([{",
          "2221:                         'name': 'target4',",
          "2222:                         }])",
          "2224:                         'name': 'one2one4',",
          "2225:                         'one2one': target4.id,",
          "2226:                         }])",
          "",
          "[Removed Lines]",
          "2223:             self.assertRaises(Exception, self.one2one_domain.create, [{",
          "",
          "[Added Lines]",
          "2223:             self.assertRaises(UserError, self.one2one_domain.create, [{",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2404:                 transaction.cursor.rollback()",
          "2407:                         'name': 'origin3',",
          "2408:                         }])",
          "2409:             transaction.cursor.rollback()",
          "",
          "[Removed Lines]",
          "2406:             self.assertRaises(Exception, self.one2many_required.create, [{",
          "",
          "[Added Lines]",
          "2406:             self.assertRaises(UserError, self.one2many_required.create, [{",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2421:             self.one2many_size.create([{",
          "2422:                         'targets': [('create', [{}])] * 3,",
          "2423:                         }])",
          "2425:                         'targets': [('create', [{}])] * 4,",
          "2426:                         }])",
          "2427:             self.one2many_size_pyson.create([{",
          "2428:                         'limit': 4,",
          "2429:                         'targets': [('create', [{}])] * 4,",
          "2430:                         }])",
          "2432:                         'limit': 2,",
          "2433:                         'targets': [('create', [{}])] * 4,",
          "2434:                         }])",
          "",
          "[Removed Lines]",
          "2424:             self.assertRaises(Exception, self.one2many_size.create, [{",
          "2431:             self.assertRaises(Exception, self.one2many_size_pyson.create, [{",
          "",
          "[Added Lines]",
          "2424:             self.assertRaises(UserError, self.one2many_size.create, [{",
          "2431:             self.assertRaises(UserError, self.one2many_size_pyson.create, [{",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2598:                 transaction.cursor.rollback()",
          "2601:                         'name': 'origin3',",
          "2602:                         }])",
          "2603:             transaction.cursor.rollback()",
          "",
          "[Removed Lines]",
          "2600:             self.assertRaises(Exception, self.many2many_required.create, [{",
          "",
          "[Added Lines]",
          "2600:             self.assertRaises(UserError, self.many2many_required.create, [{",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2733:                         }])",
          "2734:             self.assert_(reference3)",
          "2737:                         'name': 'reference4',",
          "2738:                         }])",
          "2739:             transaction.cursor.rollback()",
          "",
          "[Removed Lines]",
          "2736:             self.assertRaises(Exception, self.reference_required.create, [{",
          "",
          "[Added Lines]",
          "2736:             self.assertRaises(UserError, self.reference_required.create, [{",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3029:             self.assert_(selection2)",
          "3030:             self.assertEqual(selection2.select, None)",
          "3033:                 [{'select': 'chinese'}])",
          "3035:             selection3, = self.selection.create(",
          "",
          "[Removed Lines]",
          "3032:             self.assertRaises(Exception, self.selection.create,",
          "",
          "[Added Lines]",
          "3032:             self.assertRaises(UserError, self.selection.create,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3050:             self.assertEqual(selection5.select, 'hexa')",
          "3051:             self.assertEqual(selection5.dyn_select, None)",
          "3054:                 [{'select': 'arabic', 'dyn_select': '0x3'}])",
          "3056:                 [{'select': 'hexa', 'dyn_select': '3'}])",
          "3059:             transaction.cursor.rollback()",
          "3062:                 [{'select': None}])",
          "3063:             transaction.cursor.rollback()",
          "",
          "[Removed Lines]",
          "3053:             self.assertRaises(Exception, self.selection.create,",
          "3055:             self.assertRaises(Exception, self.selection.create,",
          "3058:             self.assertRaises(Exception, self.selection_required.create, [{}])",
          "3061:             self.assertRaises(Exception, self.selection_required.create,",
          "",
          "[Added Lines]",
          "3053:             self.assertRaises(UserError, self.selection.create,",
          "3055:             self.assertRaises(UserError, self.selection.create,",
          "3058:             self.assertRaises(UserError, self.selection_required.create, [{}])",
          "3061:             self.assertRaises(UserError, self.selection_required.create,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3084:             dict3, = self.dict_default.create([{}])",
          "3085:             self.assert_(dict3.dico == {'a': 1})",
          "3088:             transaction.cursor.rollback()",
          "3090:             dict4, = self.dict_required.create([{'dico': dict(a=1)}])",
          "3091:             self.assert_(dict4.dico == {'a': 1})",
          "3094:                 [{'dico': {}}])",
          "3095:             transaction.cursor.rollback()",
          "",
          "[Removed Lines]",
          "3087:             self.assertRaises(Exception, self.dict_required.create, [{}])",
          "3093:             self.assertRaises(Exception, self.dict_required.create,",
          "",
          "[Added Lines]",
          "3087:             self.assertRaises(UserError, self.dict_required.create, [{}])",
          "3093:             self.assertRaises(UserError, self.dict_required.create,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3117:             bin3, = self.binary_default.create([{}])",
          "3118:             self.assert_(bin3.binary == buffer('default'))",
          "3121:             transaction.cursor.rollback()",
          "3123:             bin4, = self.binary_required.create([{'binary': buffer('baz')}])",
          "3124:             self.assert_(bin4.binary == buffer('baz'))",
          "3127:                 [{'binary': buffer('')}])",
          "3129:             transaction.cursor.rollback()",
          "",
          "[Removed Lines]",
          "3120:             self.assertRaises(Exception, self.binary_required.create, [{}])",
          "3126:             self.assertRaises(Exception, self.binary_required.create,",
          "",
          "[Added Lines]",
          "3120:             self.assertRaises(UserError, self.binary_required.create, [{}])",
          "3126:             self.assertRaises(UserError, self.binary_required.create,",
          "",
          "---------------"
        ],
        "trytond/tests/test_sequence.py||trytond/tests/test_sequence.py": [
          "File: trytond/tests/test_sequence.py -> trytond/tests/test_sequence.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: from trytond.tests.test_tryton import POOL, DB_NAME, USER, CONTEXT, \\",
          "7:         install_module",
          "8: from trytond.transaction import Transaction",
          "11: class SequenceTestCase(unittest.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: from trytond.exceptions import UserError",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:             self.assertNotEqual(self.sequence.get_id(sequence), timestamp)",
          "60:             next_timestamp = self.sequence._timestamp(sequence)",
          "62:                     'last_timestamp': next_timestamp + 100,",
          "63:                     })",
          "",
          "[Removed Lines]",
          "61:             self.assertRaises(Exception, self.sequence.write, [sequence], {",
          "",
          "[Added Lines]",
          "62:             self.assertRaises(UserError, self.sequence.write, [sequence], {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82:             self.assertNotEqual(self.sequence.get_id(sequence), timestamp)",
          "84:             next_timestamp = self.sequence._timestamp(sequence)",
          "86:                     'last_timestamp': next_timestamp + 100,",
          "87:                     })",
          "",
          "[Removed Lines]",
          "85:             self.assertRaises(Exception, self.sequence.write, [sequence], {",
          "",
          "[Added Lines]",
          "86:             self.assertRaises(UserError, self.sequence.write, [sequence], {",
          "",
          "---------------"
        ],
        "trytond/tests/test_tools.py||trytond/tests/test_tools.py": [
          "File: trytond/tests/test_tools.py -> trytond/tests/test_tools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     def test0060safe_eval_builtin(self):",
          "62:         'Attempt to access a unsafe builtin'",
          "65:     def test0061safe_eval_getattr(self):",
          "66:         'Attempt to get arround direct attr access'",
          "69:     def test0062safe_eval_func_globals(self):",
          "70:         'Attempt to access global enviroment where fun was defined'",
          "72:                 \"def x(): pass; print x.func_globals\")",
          "74:     def test0063safe_eval_lowlevel(self):",
          "75:         \"Lowlevel tricks to access 'object'\"",
          "77:                 \"().__class__.mro()[1].__subclasses__()\")",
          "79:     def test0070datetime_strftime(self):",
          "",
          "[Removed Lines]",
          "63:         self.assertRaises(Exception, safe_eval, \"open('test.txt', 'w')\")",
          "67:         self.assertRaises(Exception, safe_eval, \"getattr(int, '__abs__')\")",
          "71:         self.assertRaises(Exception, safe_eval,",
          "76:         self.assertRaises(Exception, safe_eval,",
          "",
          "[Added Lines]",
          "63:         self.assertRaises(NameError, safe_eval, \"open('test.txt', 'w')\")",
          "67:         self.assertRaises(NameError, safe_eval, \"getattr(int, '__abs__')\")",
          "71:         self.assertRaises(SyntaxError, safe_eval,",
          "76:         self.assertRaises(ValueError, safe_eval,",
          "",
          "---------------"
        ],
        "trytond/tests/test_trigger.py||trytond/tests/test_trigger.py": [
          "File: trytond/tests/test_trigger.py -> trytond/tests/test_trigger.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:         install_module",
          "11: from trytond.tests.trigger import TRIGGER_LOGS",
          "12: from trytond.transaction import Transaction",
          "15: class TriggerTestCase(unittest.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: from trytond.exceptions import UserError",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:                     combination_values = values.copy()",
          "51:                     for mode in combination:",
          "52:                         combination_values['on_%s' % mode] = True",
          "54:                         [combination_values])",
          "56:             # check_condition",
          "57:             condition_values = values.copy()",
          "58:             condition_values['condition'] = '='",
          "60:                 [condition_values])",
          "62:             # Restart the cache on the get_triggers method of ir.trigger",
          "",
          "[Removed Lines]",
          "53:                     self.assertRaises(Exception, self.trigger.create,",
          "59:             self.assertRaises(Exception, self.trigger.create,",
          "",
          "[Added Lines]",
          "54:                     self.assertRaises(UserError, self.trigger.create,",
          "60:             self.assertRaises(UserError, self.trigger.create,",
          "",
          "---------------"
        ],
        "trytond/tests/test_tryton.py||trytond/tests/test_tryton.py": [
          "File: trytond/tests/test_tryton.py -> trytond/tests/test_tryton.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: from trytond.protocols.dispatcher import create",
          "14: from trytond.transaction import Transaction",
          "15: from trytond.pyson import PYSONEncoder, Eval",
          "17: __all__ = ['POOL', 'DB_NAME', 'USER', 'USER_PASSWORD', 'CONTEXT',",
          "18:     'install_module', 'test_view', 'test_depends', 'doctest_dropdb',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: from trytond.exceptions import UserError",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:     def test0000test(self):",
          "40:         'Test test'",
          "44:     def test0010ir(self):",
          "45:         'Test ir'",
          "",
          "[Removed Lines]",
          "41:         self.assertRaises(Exception, install_module, 'nosuchmodule')",
          "42:         self.assertRaises(Exception, test_view, 'nosuchmodule')",
          "",
          "[Added Lines]",
          "42:         self.assertRaises(UserError, install_module, 'nosuchmodule')",
          "43:         self.assertRaises(UserError, test_view, 'nosuchmodule')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "755fec183cf17816c0ded2b8e5cda89e527744b6",
      "candidate_info": {
        "commit_hash": "755fec183cf17816c0ded2b8e5cda89e527744b6",
        "repo": "tryton/trytond",
        "commit_url": "https://github.com/tryton/trytond/commit/755fec183cf17816c0ded2b8e5cda89e527744b6",
        "files": [
          "CHANGELOG",
          "trytond/tests/test_tools.py",
          "trytond/tools/misc.py"
        ],
        "message": "Prevent double underscore in safe_eval\n\nCVE-2014-6633\nissue4155\nreview5601002\n(grafted from 3db7377f9429ac4419721e86fc46c8e2b2f341f2)\n\n--HG--\nbranch : 2.6",
        "before_after_code_files": [
          "trytond/tests/test_tools.py||trytond/tests/test_tools.py",
          "trytond/tools/misc.py||trytond/tools/misc.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "trytond/tests/test_tools.py||trytond/tests/test_tools.py",
            "trytond/tools/misc.py||trytond/tools/misc.py"
          ],
          "candidate": [
            "trytond/tests/test_tools.py||trytond/tests/test_tools.py",
            "trytond/tools/misc.py||trytond/tools/misc.py"
          ]
        }
      },
      "candidate_diff": {
        "trytond/tests/test_tools.py||trytond/tests/test_tools.py": [
          "File: trytond/tests/test_tools.py -> trytond/tests/test_tools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:         self.assertRaises(Exception, safe_eval, \"open('test.txt', 'w')\")",
          "80:     def test0061safe_eval_getattr(self):",
          "86:     def test0062safe_eval_func_globals(self):",
          "87:         '''",
          "",
          "[Removed Lines]",
          "81:         '''",
          "82:         Attempt to get arround direct attr access.",
          "83:         '''",
          "84:         self.assertRaises(Exception, safe_eval, \"getattr(int, '__abs__')\")",
          "",
          "[Added Lines]",
          "81:         'Attempt to get arround direct attr access'",
          "82:         self.assertRaises(NameError, safe_eval, \"getattr(int, 'real')\")",
          "",
          "---------------"
        ],
        "trytond/tools/misc.py||trytond/tools/misc.py": [
          "File: trytond/tools/misc.py -> trytond/tools/misc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "404: def safe_eval(source, data=None):",
          "408:     comp = _compile_source(source)",
          "409:     return eval(comp, {'__builtins__': {",
          "",
          "[Removed Lines]",
          "405:     if '__subclasses__' in source:",
          "406:         raise ValueError('__subclasses__ not allowed')",
          "",
          "[Added Lines]",
          "405:     if '__' in source:",
          "406:         raise ValueError('Double underscores not allowed')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13b9fce7296a6301343ab67fab2f1a1af61e4bb0",
      "candidate_info": {
        "commit_hash": "13b9fce7296a6301343ab67fab2f1a1af61e4bb0",
        "repo": "tryton/trytond",
        "commit_url": "https://github.com/tryton/trytond/commit/13b9fce7296a6301343ab67fab2f1a1af61e4bb0",
        "files": [
          "CHANGELOG",
          "trytond/tests/test_tools.py",
          "trytond/tools/misc.py"
        ],
        "message": "Prevent double underscore in safe_eval\n\nCVE-2014-6633\nissue4155\nreview5601002\n(grafted from 3db7377f9429ac4419721e86fc46c8e2b2f341f2)\n\n--HG--\nbranch : 3.2",
        "before_after_code_files": [
          "trytond/tests/test_tools.py||trytond/tests/test_tools.py",
          "trytond/tools/misc.py||trytond/tools/misc.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "trytond/tests/test_tools.py||trytond/tests/test_tools.py",
            "trytond/tools/misc.py||trytond/tools/misc.py"
          ],
          "candidate": [
            "trytond/tests/test_tools.py||trytond/tests/test_tools.py",
            "trytond/tools/misc.py||trytond/tools/misc.py"
          ]
        }
      },
      "candidate_diff": {
        "trytond/tests/test_tools.py||trytond/tests/test_tools.py": [
          "File: trytond/tests/test_tools.py -> trytond/tests/test_tools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     def test0061safe_eval_getattr(self):",
          "66:         'Attempt to get arround direct attr access'",
          "69:     def test0062safe_eval_func_globals(self):",
          "70:         'Attempt to access global enviroment where fun was defined'",
          "",
          "[Removed Lines]",
          "67:         self.assertRaises(Exception, safe_eval, \"getattr(int, '__abs__')\")",
          "",
          "[Added Lines]",
          "67:         self.assertRaises(NameError, safe_eval, \"getattr(int, 'real')\")",
          "",
          "---------------"
        ],
        "trytond/tools/misc.py||trytond/tools/misc.py": [
          "File: trytond/tools/misc.py -> trytond/tools/misc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "398: def safe_eval(source, data=None):",
          "402:     comp = _compile_source(source)",
          "403:     return eval(comp, {'__builtins__': {",
          "",
          "[Removed Lines]",
          "399:     if '__subclasses__' in source:",
          "400:         raise ValueError('__subclasses__ not allowed')",
          "",
          "[Added Lines]",
          "399:     if '__' in source:",
          "400:         raise ValueError('Double underscores not allowed')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5781ddbc5a4383a937f9d1c56344b81933f86977",
      "candidate_info": {
        "commit_hash": "5781ddbc5a4383a937f9d1c56344b81933f86977",
        "repo": "tryton/trytond",
        "commit_url": "https://github.com/tryton/trytond/commit/5781ddbc5a4383a937f9d1c56344b81933f86977",
        "files": [
          "CHANGELOG",
          "trytond/tests/test_tools.py",
          "trytond/tools/misc.py"
        ],
        "message": "Prevent double underscore in safe_eval\n\nCVE-2014-6633\nissue4155\nreview5601002\n(grafted from 3db7377f9429ac4419721e86fc46c8e2b2f341f2)\n\n--HG--\nbranch : 2.8",
        "before_after_code_files": [
          "trytond/tests/test_tools.py||trytond/tests/test_tools.py",
          "trytond/tools/misc.py||trytond/tools/misc.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "trytond/tests/test_tools.py||trytond/tests/test_tools.py",
            "trytond/tools/misc.py||trytond/tools/misc.py"
          ],
          "candidate": [
            "trytond/tests/test_tools.py||trytond/tests/test_tools.py",
            "trytond/tools/misc.py||trytond/tools/misc.py"
          ]
        }
      },
      "candidate_diff": {
        "trytond/tests/test_tools.py||trytond/tests/test_tools.py": [
          "File: trytond/tests/test_tools.py -> trytond/tests/test_tools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:         self.assertRaises(Exception, safe_eval, \"open('test.txt', 'w')\")",
          "80:     def test0061safe_eval_getattr(self):",
          "86:     def test0062safe_eval_func_globals(self):",
          "87:         '''",
          "",
          "[Removed Lines]",
          "81:         '''",
          "82:         Attempt to get arround direct attr access.",
          "83:         '''",
          "84:         self.assertRaises(Exception, safe_eval, \"getattr(int, '__abs__')\")",
          "",
          "[Added Lines]",
          "81:         'Attempt to get arround direct attr access'",
          "82:         self.assertRaises(NameError, safe_eval, \"getattr(int, 'real')\")",
          "",
          "---------------"
        ],
        "trytond/tools/misc.py||trytond/tools/misc.py": [
          "File: trytond/tools/misc.py -> trytond/tools/misc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "405: def safe_eval(source, data=None):",
          "409:     comp = _compile_source(source)",
          "410:     return eval(comp, {'__builtins__': {",
          "",
          "[Removed Lines]",
          "406:     if '__subclasses__' in source:",
          "407:         raise ValueError('__subclasses__ not allowed')",
          "",
          "[Added Lines]",
          "406:     if '__' in source:",
          "407:         raise ValueError('Double underscores not allowed')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd0dc77c928e012497cf7a231858b5794a7b0b49",
      "candidate_info": {
        "commit_hash": "dd0dc77c928e012497cf7a231858b5794a7b0b49",
        "repo": "tryton/trytond",
        "commit_url": "https://github.com/tryton/trytond/commit/dd0dc77c928e012497cf7a231858b5794a7b0b49",
        "files": [
          "CHANGELOG",
          "trytond/tests/test_tools.py",
          "trytond/tools/misc.py"
        ],
        "message": "Prevent double underscore in safe_eval\n\nCVE-2014-6633\nissue4155\nreview5601002\n(grafted from 3db7377f9429ac4419721e86fc46c8e2b2f341f2)\n\n--HG--\nbranch : 2.4",
        "before_after_code_files": [
          "trytond/tests/test_tools.py||trytond/tests/test_tools.py",
          "trytond/tools/misc.py||trytond/tools/misc.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "trytond/tests/test_tools.py||trytond/tests/test_tools.py",
            "trytond/tools/misc.py||trytond/tools/misc.py"
          ],
          "candidate": [
            "trytond/tests/test_tools.py||trytond/tests/test_tools.py",
            "trytond/tools/misc.py||trytond/tools/misc.py"
          ]
        }
      },
      "candidate_diff": {
        "trytond/tests/test_tools.py||trytond/tests/test_tools.py": [
          "File: trytond/tests/test_tools.py -> trytond/tests/test_tools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:         self.assertRaises(Exception, safe_eval, \"open('test.txt', 'w')\")",
          "80:     def test0061safe_eval_getattr(self):",
          "86:     def test0062safe_eval_func_globals(self):",
          "87:         '''",
          "",
          "[Removed Lines]",
          "81:         '''",
          "82:         Attempt to get arround direct attr access.",
          "83:         '''",
          "84:         self.assertRaises(Exception, safe_eval, \"getattr(int, '__abs__')\")",
          "",
          "[Added Lines]",
          "81:         'Attempt to get arround direct attr access'",
          "82:         self.assertRaises(NameError, safe_eval, \"getattr(int, 'real')\")",
          "",
          "---------------"
        ],
        "trytond/tools/misc.py||trytond/tools/misc.py": [
          "File: trytond/tools/misc.py -> trytond/tools/misc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "404: def safe_eval(source, data=None):",
          "408:     comp = _compile_source(source)",
          "409:     return eval(comp, {'__builtins__': {",
          "",
          "[Removed Lines]",
          "405:     if '__subclasses__' in source:",
          "406:         raise ValueError('__subclasses__ not allowed')",
          "",
          "[Added Lines]",
          "405:     if '__' in source:",
          "406:         raise ValueError('Double underscores not allowed')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92838f6da258ad9f7344c5eb1d10951decc115a5",
      "candidate_info": {
        "commit_hash": "92838f6da258ad9f7344c5eb1d10951decc115a5",
        "repo": "tryton/trytond",
        "commit_url": "https://github.com/tryton/trytond/commit/92838f6da258ad9f7344c5eb1d10951decc115a5",
        "files": [
          "CHANGELOG",
          "trytond/tests/test_tools.py",
          "trytond/tools/misc.py"
        ],
        "message": "Prevent double underscore in safe_eval\n\nCVE-2014-6633\nissue4155\nreview5601002\n(grafted from 3db7377f9429ac4419721e86fc46c8e2b2f341f2)\n\n--HG--\nbranch : 3.0",
        "before_after_code_files": [
          "trytond/tests/test_tools.py||trytond/tests/test_tools.py",
          "trytond/tools/misc.py||trytond/tools/misc.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "trytond/tests/test_tools.py||trytond/tests/test_tools.py",
            "trytond/tools/misc.py||trytond/tools/misc.py"
          ],
          "candidate": [
            "trytond/tests/test_tools.py||trytond/tests/test_tools.py",
            "trytond/tools/misc.py||trytond/tools/misc.py"
          ]
        }
      },
      "candidate_diff": {
        "trytond/tests/test_tools.py||trytond/tests/test_tools.py": [
          "File: trytond/tests/test_tools.py -> trytond/tests/test_tools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:         self.assertRaises(Exception, safe_eval, \"open('test.txt', 'w')\")",
          "84:     def test0061safe_eval_getattr(self):",
          "90:     def test0062safe_eval_func_globals(self):",
          "91:         '''",
          "",
          "[Removed Lines]",
          "85:         '''",
          "86:         Attempt to get arround direct attr access.",
          "87:         '''",
          "88:         self.assertRaises(Exception, safe_eval, \"getattr(int, '__abs__')\")",
          "",
          "[Added Lines]",
          "85:         'Attempt to get arround direct attr access'",
          "86:         self.assertRaises(NameError, safe_eval, \"getattr(int, 'real')\")",
          "",
          "---------------"
        ],
        "trytond/tools/misc.py||trytond/tools/misc.py": [
          "File: trytond/tools/misc.py -> trytond/tools/misc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "398: def safe_eval(source, data=None):",
          "402:     comp = _compile_source(source)",
          "403:     return eval(comp, {'__builtins__': {",
          "",
          "[Removed Lines]",
          "399:     if '__subclasses__' in source:",
          "400:         raise ValueError('__subclasses__ not allowed')",
          "",
          "[Added Lines]",
          "399:     if '__' in source:",
          "400:         raise ValueError('Double underscores not allowed')",
          "",
          "---------------"
        ]
      }
    }
  ]
}