{
  "cve_id": "CVE-2022-45690",
  "cve_desc": "A stack overflow in the org.json.JSONTokener.nextValue::JSONTokener.java component of hutool-json v5.8.10 allows attackers to cause a Denial of Service (DoS) via crafted JSON or XML data.",
  "repo": "stleary/JSON-java",
  "patch_hash": "7a124d857dc8da1165c87fa788e53359a317d0f7",
  "patch_info": {
    "commit_hash": "7a124d857dc8da1165c87fa788e53359a317d0f7",
    "repo": "stleary/JSON-java",
    "commit_url": "https://github.com/stleary/JSON-java/commit/7a124d857dc8da1165c87fa788e53359a317d0f7",
    "files": [
      "build.gradle",
      "src/main/java/org/json/JSONObject.java",
      "src/main/java/org/json/JSONTokener.java",
      "src/test/java/org/json/junit/CDLTest.java",
      "src/test/java/org/json/junit/JSONArrayTest.java",
      "src/test/java/org/json/junit/JSONObjectTest.java",
      "src/test/resources/Issue654WellFormedArray.json",
      "src/test/resources/Issue654WellFormedObject.json"
    ],
    "message": "Add test cases for invalid input",
    "before_after_code_files": [
      "build.gradle||build.gradle",
      "src/main/java/org/json/JSONObject.java||src/main/java/org/json/JSONObject.java",
      "src/main/java/org/json/JSONTokener.java||src/main/java/org/json/JSONTokener.java",
      "src/test/java/org/json/junit/CDLTest.java||src/test/java/org/json/junit/CDLTest.java",
      "src/test/java/org/json/junit/JSONArrayTest.java||src/test/java/org/json/junit/JSONArrayTest.java",
      "src/test/java/org/json/junit/JSONObjectTest.java||src/test/java/org/json/junit/JSONObjectTest.java"
    ]
  },
  "patch_diff": {
    "build.gradle||build.gradle": [
      "File: build.gradle -> build.gradle",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: }",
      "32: group = 'org.json'",
      "34: description = 'JSON in Java'",
      "35: sourceCompatibility = '1.7'",
      "",
      "[Removed Lines]",
      "33: version = 'v20200429-SNAPSHOT'",
      "",
      "[Added Lines]",
      "33: version = 'v20211205-SNAPSHOT'",
      "",
      "---------------"
    ],
    "src/main/java/org/json/JSONObject.java||src/main/java/org/json/JSONObject.java": [
      "File: src/main/java/org/json/JSONObject.java -> src/main/java/org/json/JSONObject.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "225:             throw x.syntaxError(\"A JSONObject text must begin with '{'\");",
      "226:         }",
      "227:         for (;;) {",
      "228:             c = x.nextClean();",
      "229:             switch (c) {",
      "230:             case 0:",
      "231:                 throw x.syntaxError(\"A JSONObject text must end with '}'\");",
      "232:             case '}':",
      "233:                 return;",
      "234:             default:",
      "235:                 x.back();",
      "236:                 key = x.nextValue().toString();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "228:             char prev = x.getPrevious();",
      "235:             case '{':",
      "236:             case '[':",
      "237:                 if(prev=='{') {",
      "238:                     throw x.syntaxError(\"A JSON Object can not directly nest another JSON Object or JSON Array.\");",
      "239:                 }",
      "",
      "---------------"
    ],
    "src/main/java/org/json/JSONTokener.java||src/main/java/org/json/JSONTokener.java": [
      "File: src/main/java/org/json/JSONTokener.java -> src/main/java/org/json/JSONTokener.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "209:         this.previous = (char) c;",
      "210:         return this.previous;",
      "211:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "217:     protected char getPrevious() { return this.previous;}",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "428:             return this.nextString(c);",
      "429:         case '{':",
      "430:             this.back();",
      "432:         case '[':",
      "433:             this.back();",
      "435:         }",
      "",
      "[Removed Lines]",
      "431:             return new JSONObject(this);",
      "434:             return new JSONArray(this);",
      "",
      "[Added Lines]",
      "437:             try {",
      "438:                 return new JSONObject(this);",
      "439:             } catch (StackOverflowError e) {",
      "440:                 throw new JSONException(\"JSON Array or Object depth too large to process.\", e);",
      "441:             }",
      "444:             try {",
      "445:                 return new JSONArray(this);",
      "446:             } catch (StackOverflowError e) {",
      "447:                 throw new JSONException(\"JSON Array or Object depth too large to process.\", e);",
      "448:             }",
      "",
      "---------------"
    ],
    "src/test/java/org/json/junit/CDLTest.java||src/test/java/org/json/junit/CDLTest.java": [
      "File: src/test/java/org/json/junit/CDLTest.java -> src/test/java/org/json/junit/CDLTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "190:                    CDL.toJSONArray(badLine);",
      "191:                    fail(\"Expecting an exception\");",
      "192:                } catch (JSONException e) {",
      "194:                    assertEquals(\"Expecting an exception message\",",
      "195:                            \"Bad character 'V' (86). at 20 [character 9 line 2]\",",
      "196:                            e.getMessage());",
      "",
      "[Removed Lines]",
      "193:                 System.out.println(\"Message\" + e.getMessage());",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/test/java/org/json/junit/JSONArrayTest.java||src/test/java/org/json/junit/JSONArrayTest.java": [
      "File: src/test/java/org/json/junit/JSONArrayTest.java -> src/test/java/org/json/junit/JSONArrayTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: import static org.junit.Assert.assertNotNull;",
      "30: import static org.junit.Assert.assertNull;",
      "31: import static org.junit.Assert.assertTrue;",
      "33: import java.io.IOException;",
      "34: import java.io.StringWriter;",
      "35: import java.math.BigDecimal;",
      "36: import java.math.BigInteger;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32: import static org.junit.Assert.fail;",
      "35: import java.io.InputStream;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47: import org.json.JSONException;",
      "48: import org.json.JSONObject;",
      "49: import org.json.JSONPointerException;",
      "50: import org.junit.Test;",
      "52: import com.jayway.jsonpath.Configuration;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52: import org.json.JSONTokener;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1282:   assertTrue(\"expected jsonArray.length() == 0\", jsonArray.length() == 0); //Check if its length is 0",
      "1283:   jsonArray.getInt(0); //Should throws org.json.JSONException: JSONArray[0] not found",
      "1284:  }",
      "1285: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1292:     @Test(expected = JSONException.class)",
      "1293:     public void issue654StackOverflowInputWellFormed() {",
      "1295:         final InputStream resourceAsStream = JSONObjectTest.class.getClassLoader().getResourceAsStream(\"Issue654WellFormedArray.json\");",
      "1296:         JSONTokener tokener = new JSONTokener(resourceAsStream);",
      "1297:         JSONArray json_input = new JSONArray(tokener);",
      "1298:         assertNotNull(json_input);",
      "1299:         fail(\"Excepected Exception.\");",
      "1300:     }",
      "",
      "---------------"
    ],
    "src/test/java/org/json/junit/JSONObjectTest.java||src/test/java/org/json/junit/JSONObjectTest.java": [
      "File: src/test/java/org/json/junit/JSONObjectTest.java -> src/test/java/org/json/junit/JSONObjectTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: import static org.mockito.Mockito.when;",
      "37: import java.io.IOException;",
      "38: import java.io.Reader;",
      "39: import java.io.StringReader;",
      "40: import java.io.StringWriter;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38: import java.io.InputStream;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3351:         assertTrue(\"expected jsonObject.length() == 0\", jsonObject.length() == 0); //Check if its length is 0",
      "3352:         jsonObject.getInt(\"key1\"); //Should throws org.json.JSONException: JSONObject[\"asd\"] not found",
      "3353:     }",
      "3354: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3359:     @Test(expected = JSONException.class)",
      "3360:     public void issue654StackOverflowInput() {",
      "3363:         String input = \"{\\\"GZ\\\":[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{  {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0)0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{   {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{    {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0)0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{   {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{  {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0)0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{   {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{    {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0)0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0)0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{   {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{    {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0)0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{   {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{  {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0)0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{   {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{    {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0)0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{   {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{{{{{{{{{{{{{{{{{{{{[-0-0,{{{{{{{{{{s{{{{{{{\";",
      "3364:         JSONObject json_input = new JSONObject(input);",
      "3365:         assertNotNull(json_input);",
      "3366:         fail(\"Excepected Exception.\");",
      "3367:     }",
      "3372:     @Test(expected = JSONException.class)",
      "3373:     public void issue654IncorrectNestingNoKey1() {",
      "3374:         JSONObject json_input = new JSONObject(\"{{\\\"a\\\":0}}\");",
      "3375:         assertNotNull(json_input);",
      "3376:         fail(\"Excepected Exception.\");",
      "3377:     }",
      "3382:     @Test(expected = JSONException.class)",
      "3383:     public void issue654IncorrectNestingNoKey2() {",
      "3384:         JSONObject json_input = new JSONObject(\"{[\\\"a\\\"]}\");",
      "3385:         assertNotNull(json_input);",
      "3386:         fail(\"Excepected Exception.\");",
      "3387:     }",
      "3392:     @Test(expected = JSONException.class)",
      "3393:     public void issue654StackOverflowInputWellFormed() {",
      "3395:         final InputStream resourceAsStream = JSONObjectTest.class.getClassLoader().getResourceAsStream(\"Issue654WellFormedObject.json\");",
      "3396:         JSONTokener tokener = new JSONTokener(resourceAsStream);",
      "3397:         JSONObject json_input = new JSONObject(tokener);",
      "3398:         assertNotNull(json_input);",
      "3399:         fail(\"Excepected Exception.\");",
      "3400:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e0534b3ec75fb6dbaddb3c16b0fd6c0aabd6d6ee",
      "candidate_info": {
        "commit_hash": "e0534b3ec75fb6dbaddb3c16b0fd6c0aabd6d6ee",
        "repo": "stleary/JSON-java",
        "commit_url": "https://github.com/stleary/JSON-java/commit/e0534b3ec75fb6dbaddb3c16b0fd6c0aabd6d6ee",
        "files": [
          "src/main/java/org/json/JSONObject.java",
          "src/test/java/org/json/junit/JSONArrayTest.java",
          "src/test/java/org/json/junit/JSONObjectTest.java",
          "src/test/java/org/json/junit/Util.java"
        ],
        "message": "initial attempt to test for inconsistent map types in JSONObject",
        "before_after_code_files": [
          "src/main/java/org/json/JSONObject.java||src/main/java/org/json/JSONObject.java",
          "src/test/java/org/json/junit/JSONArrayTest.java||src/test/java/org/json/junit/JSONArrayTest.java",
          "src/test/java/org/json/junit/JSONObjectTest.java||src/test/java/org/json/junit/JSONObjectTest.java",
          "src/test/java/org/json/junit/Util.java||src/test/java/org/json/junit/Util.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/org/json/JSONObject.java||src/main/java/org/json/JSONObject.java",
            "src/test/java/org/json/junit/JSONArrayTest.java||src/test/java/org/json/junit/JSONArrayTest.java",
            "src/test/java/org/json/junit/JSONObjectTest.java||src/test/java/org/json/junit/JSONObjectTest.java"
          ],
          "candidate": [
            "src/main/java/org/json/JSONObject.java||src/main/java/org/json/JSONObject.java",
            "src/test/java/org/json/junit/JSONArrayTest.java||src/test/java/org/json/junit/JSONArrayTest.java",
            "src/test/java/org/json/junit/JSONObjectTest.java||src/test/java/org/json/junit/JSONObjectTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/json/JSONObject.java||src/main/java/org/json/JSONObject.java": [
          "File: src/main/java/org/json/JSONObject.java -> src/main/java/org/json/JSONObject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:     private final Map<String, Object> map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:     public Class<? extends Map> getMapType() {",
          "170:         return map.getClass();",
          "171:     }",
          "",
          "---------------"
        ],
        "src/test/java/org/json/junit/JSONArrayTest.java||src/test/java/org/json/junit/JSONArrayTest.java": [
          "File: src/test/java/org/json/junit/JSONArrayTest.java -> src/test/java/org/json/junit/JSONArrayTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:         assertTrue(",
          "238:                 \"The RAW Collection should give me the same as the Typed Collection\",",
          "239:                 expected.similar(jaObj));",
          "240:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:         Util.checkJSONArrayMaps(expected);",
          "241:         Util.checkJSONArrayMaps(jaObj);",
          "242:         Util.checkJSONArrayMaps(jaRaw);",
          "243:         Util.checkJSONArrayMaps(jaInt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "275:                          myList.get(i),",
          "276:                          jsonArray.getString(myInts.length + i));",
          "277:         }",
          "278:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:         Util.checkJSONArrayMaps(jsonArray);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "308:         assertTrue(",
          "309:                 \"The RAW Collection should give me the same as the Typed Collection\",",
          "310:                 expected.similar(jaInt));",
          "311:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "316:         Util.checkJSONArraysMaps(new ArrayList<JSONArray>(Arrays.asList(",
          "317:                 jaRaw, jaObj, jaInt",
          "318:         )));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "351:         assertTrue(",
          "352:                 \"The RAW Collection should give me the same as the Typed Collection\",",
          "353:                 expected.similar(jaObjObj));",
          "354:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "362:         Util.checkJSONArraysMaps(new ArrayList<JSONArray>(Arrays.asList(",
          "363:                 expected, jaRaw, jaStrObj, jaStrInt, jaObjObj",
          "364:         )));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "397:                 new Long(-1).equals(jsonArray.getLong(12)));",
          "399:         assertTrue(\"Array value null\", jsonArray.isNull(-1));",
          "400:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "411:         Util.checkJSONArrayMaps(jsonArray);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "463:             assertEquals(\"Expected an exception message\",",
          "464:                     \"JSONArray[5] is not a String (class java.math.BigDecimal : 0.002345).\",e.getMessage());",
          "465:         }",
          "466:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "478:         Util.checkJSONArrayMaps(jsonArray);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "499:         assertTrue(\"expected value4\", \"value4\".equals(jsonArray.query(\"/10/key4\")));",
          "500:         assertTrue(\"expected 0\", Integer.valueOf(0).equals(jsonArray.query(\"/11\")));",
          "501:         assertTrue(\"expected \\\"-1\\\"\", \"-1\".equals(jsonArray.query(\"/12\")));",
          "502:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "515:         Util.checkJSONArrayMaps(jsonArray);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "512:         assertTrue(\"expected JSONArray length 13. instead found \"+jsonArray.length(), jsonArray.length() == 13);",
          "513:         JSONArray nestedJsonArray = jsonArray.getJSONArray(9);",
          "514:         assertTrue(\"expected JSONArray length 1\", nestedJsonArray.length() == 1);",
          "515:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "529:         Util.checkJSONArraysMaps(new ArrayList<JSONArray>(Arrays.asList(",
          "530:                 jsonArray, nestedJsonArray",
          "531:         )));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "587:                 \"hello\".equals(jsonArray.optString(4)));",
          "588:         assertTrue(\"Array opt string default implicit\",",
          "589:                 \"\".equals(jsonArray.optString(-1)));",
          "590:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "607:         Util.checkJSONArraysMaps(new ArrayList<JSONArray>(Arrays.asList(",
          "608:                 jsonArray, nestedJsonArray",
          "609:         )));",
          "610:         Util.checkJSONObjectMaps(nestedJsonObject);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "601:         assertTrue(\"unexpected optLong value\",ja.optLong(0,0)==123);",
          "602:         assertTrue(\"unexpected optDouble value\",ja.optDouble(0,0.0)==123.0);",
          "603:         assertTrue(\"unexpected optBigInteger value\",ja.optBigInteger(0,BigInteger.ZERO).compareTo(new BigInteger(\"123\"))==0);",
          "",
          "[Removed Lines]",
          "604:         assertTrue(\"unexpected optBigDecimal value\",ja.optBigDecimal(0,BigDecimal.ZERO).compareTo(new BigDecimal(\"123\"))==0);    }",
          "",
          "[Added Lines]",
          "625:         assertTrue(\"unexpected optBigDecimal value\",ja.optBigDecimal(0,BigDecimal.ZERO).compareTo(new BigDecimal(\"123\"))==0);",
          "626:         Util.checkJSONArrayMaps(ja);",
          "627:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "677:         assertTrue(\"expected 2 items in [9]\", ((List<?>)(JsonPath.read(doc, \"$[9]\"))).size() == 2);",
          "678:         assertTrue(\"expected 1\", Integer.valueOf(1).equals(jsonArray.query(\"/9/0\")));",
          "679:         assertTrue(\"expected 2\", Integer.valueOf(2).equals(jsonArray.query(\"/9/1\")));",
          "680:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:         Util.checkJSONArrayMaps(jsonArray);",
          "704:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "756:         assertTrue(\"expected 2\", Integer.valueOf(2).equals(jsonArray.query(\"/9/1\")));",
          "757:         assertTrue(\"expected 1 item in [10]\", ((Map<?,?>)(JsonPath.read(doc, \"$[10]\"))).size() == 1);",
          "758:         assertTrue(\"expected v1\", \"v1\".equals(jsonArray.query(\"/10/k1\")));",
          "759:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "784:         Util.checkJSONObjectMaps(jsonObject);",
          "785:         Util.checkJSONArrayMaps(jsonArray);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "772:         jsonArray.remove(0);",
          "773:         assertTrue(\"array should be empty\", null == jsonArray.remove(5));",
          "774:         assertTrue(\"jsonArray should be empty\", jsonArray.isEmpty());",
          "775:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "802:         Util.checkJSONArrayMaps(jsonArray);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "811:         otherJsonArray.put(\"world\");",
          "812:         assertTrue(\"arrays values differ\",",
          "813:                 !jsonArray.similar(otherJsonArray));",
          "814:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "842:         Util.checkJSONArraysMaps(new ArrayList<JSONArray>(Arrays.asList(",
          "843:                 jsonArray, otherJsonArray",
          "844:         )));",
          "845:         Util.checkJSONObjectsMaps(new ArrayList<JSONObject>(Arrays.asList(",
          "846:                 jsonObject, otherJsonObject",
          "847:         )));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "894:         for (String s : jsonArray4Strs) {",
          "895:             list.contains(s);",
          "896:         }",
          "897:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "931:         Util.checkJSONArrayMaps(jsonArray);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "905:         JSONArray jsonArray = new JSONArray();",
          "906:         assertTrue(\"toJSONObject should return null\",",
          "907:                 null == jsonArray.toJSONObject(names));",
          "908:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "943:         Util.checkJSONArraysMaps(new ArrayList<JSONArray>(Arrays.asList(",
          "944:                 names, jsonArray",
          "945:         )));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "926:         assertTrue(\"expected 5\", Integer.valueOf(5).equals(jsonArray.query(\"/4\")));",
          "927:         assertTrue(\"expected 6\", Integer.valueOf(6).equals(jsonArray.query(\"/5\")));",
          "928:         assertTrue(\"expected 7\", Integer.valueOf(7).equals(jsonArray.query(\"/6\")));",
          "929:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "967:         Util.checkJSONArrayMaps(jsonArray);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "968:         assertTrue(\"Array value string long\",",
          "969:                 new Long(-1).equals(Long.parseLong((String) it.next())));",
          "970:         assertTrue(\"should be at end of array\", !it.hasNext());",
          "971:     }",
          "973:     @Test(expected = JSONPointerException.class)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1010:         Util.checkJSONArraysMaps(new ArrayList<JSONArray>(Arrays.asList(",
          "1011:                 jsonArray, nestedJsonArray",
          "1012:         )));",
          "1013:         Util.checkJSONObjectMaps(nestedJsonObject);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1010:         } finally {",
          "1011:             stringWriter.close();",
          "1012:         }",
          "1013:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1056:         Util.checkJSONArrayMaps(jsonArray);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1069:                 && actualStr.contains(\"\\\"key2\\\": false\")",
          "1070:                 && actualStr.contains(\"\\\"key3\\\": 3.14\")",
          "1071:             );",
          "1072:         } finally {",
          "1073:             stringWriter.close();",
          "1074:         }",
          "1075:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1116:             Util.checkJSONArrayMaps(finalArray);",
          "1120:         Util.checkJSONArrayMaps(jsonArray);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1183:         assertTrue(\"Removing an entry should succeed\", list.remove(2) != null);",
          "1184:         assertTrue(\"List should have 2 elements\", list.size() == 2);",
          "1185:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1231:         Util.checkJSONArrayMaps(jsonArray);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1191:     @Test",
          "1192:     public void testJSONArrayInt() {",
          "1198:         try {",
          "1200:         } catch (JSONException e) {",
          "1201:             assertEquals(\"Expected an exception message\",",
          "1202:                     \"JSONArray initial capacity cannot be negative.\",",
          "",
          "[Removed Lines]",
          "1193:      assertNotNull(new JSONArray(0));",
          "1194:      assertNotNull(new JSONArray(5));",
          "1197:      assertEquals(0l, new JSONArray(10).length());",
          "1199:          assertNotNull(\"Should throw an exception\", new JSONArray(-1));",
          "",
          "[Added Lines]",
          "1240:         assertNotNull(new JSONArray(0));",
          "1241:         assertNotNull(new JSONArray(5));",
          "1246:             assertNotNull(\"Should throw an exception\", new JSONArray(-1));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1223:         ((Collection<Object>)o).add(\"test\");",
          "1224:         ((Collection<Object>)o).add(false);",
          "1225:         try {",
          "1228:         } catch (JSONException ex) {",
          "1229:         }",
          "",
          "[Removed Lines]",
          "1226:             a = new JSONArray(o);",
          "1227:             assertNull(\"Should error\", a);",
          "",
          "[Added Lines]",
          "1273:             JSONArray a0 = new JSONArray(o);",
          "1274:             assertNull(\"Should error\", a0);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1233:         o = a;",
          "1234:         try {",
          "1237:         } catch (JSONException ex) {",
          "1238:         }",
          "1239:     }",
          "",
          "[Removed Lines]",
          "1235:             a = new JSONArray(o);",
          "1236:             assertNull(\"Should error\", a);",
          "",
          "[Added Lines]",
          "1282:             JSONArray a1 = new JSONArray(o);",
          "1283:             assertNull(\"Should error\", a1);",
          "1286:         Util.checkJSONArrayMaps(a);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1252:         for(int i = 0; i < a1.length(); i++) {",
          "1253:             assertEquals(\"index \" + i + \" are equal\", a1.get(i), a2.get(i));",
          "1254:         }",
          "1255:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1303:         Util.checkJSONArraysMaps(new ArrayList<JSONArray>(Arrays.asList(",
          "1304:                 a1, a2",
          "1305:         )));",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1269:         for(int i = 0; i < a1.length(); i++) {",
          "1270:             assertEquals(\"index \" + i + \" are equal\", a1.get(i), a2.get(i));",
          "1271:         }",
          "1272:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1323:         Util.checkJSONArraysMaps(new ArrayList<JSONArray>(Arrays.asList(",
          "1324:                 a1, a2",
          "1325:         )));",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1284:   jsonArray.clear(); //Clears the JSONArray",
          "1285:   assertTrue(\"expected jsonArray.length() == 0\", jsonArray.length() == 0); //Check if its length is 0",
          "1286:   jsonArray.getInt(0); //Should throws org.json.JSONException: JSONArray[0] not found",
          "1287:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1341:         Util.checkJSONArrayMaps(jsonArray);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1297:         JSONArray json_input = new JSONArray(tokener);",
          "1298:         assertNotNull(json_input);",
          "1299:         fail(\"Excepected Exception.\");",
          "1300:     }",
          "1301: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1355:         Util.checkJSONArrayMaps(json_input);",
          "",
          "---------------"
        ],
        "src/test/java/org/json/junit/JSONObjectTest.java||src/test/java/org/json/junit/JSONObjectTest.java": [
          "File: src/test/java/org/json/junit/JSONObjectTest.java -> src/test/java/org/json/junit/JSONObjectTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: import java.io.StringWriter;",
          "42: import java.math.BigDecimal;",
          "43: import java.math.BigInteger;",
          "52: import java.util.concurrent.atomic.AtomicInteger;",
          "53: import java.util.regex.Pattern;",
          "",
          "[Removed Lines]",
          "44: import java.util.ArrayList;",
          "45: import java.util.Arrays;",
          "46: import java.util.Collection;",
          "47: import java.util.Collections;",
          "48: import java.util.HashMap;",
          "49: import java.util.List;",
          "50: import java.util.Locale;",
          "51: import java.util.Map;",
          "",
          "[Added Lines]",
          "44: import java.util.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80: import org.json.junit.data.SingletonEnum;",
          "81: import org.json.junit.data.WeirdList;",
          "82: import org.junit.Test;",
          "84: import com.jayway.jsonpath.Configuration;",
          "85: import com.jayway.jsonpath.JsonPath;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: import org.json.junit.Util;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140:         JSONObject first = new JSONObject(\"{\\\"a\\\": 1, \\\"b\\\": 2, \\\"c\\\": 3}\");",
          "141:         JSONObject second = new JSONObject(\"{\\\"a\\\": 1, \\\"b\\\": 2.0, \\\"c\\\": 4}\");",
          "142:         assertFalse(\"first-second should eval to false\", first.similar(second));",
          "143:     }",
          "145:     @Test",
          "146:     public void timeNumberParsing() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:         List<JSONObject> jsonObjects = new ArrayList<JSONObject>(",
          "138:                 Arrays.asList(obj1, obj2, obj3, obj4, obj5)",
          "139:         );",
          "140:         Util.checkJSONObjectsMaps(jsonObjects);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "215:     @Test(expected=NullPointerException.class)",
          "216:     public void jsonObjectByNullBean() {",
          "218:     }",
          "",
          "[Removed Lines]",
          "217:         assertNull(\"Expected an exception\",new JSONObject((MyBean)null));",
          "",
          "[Added Lines]",
          "215:         JSONObject jsonObject = new JSONObject((MyBean)null);",
          "216:         assertNull(\"Expected an exception\", jsonObject);",
          "217:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "232:         assertTrue(\"expected value1\", textStr.contains(\"\\\"value1\\\"\"));",
          "233:         assertTrue(\"expected key2\", textStr.contains(\"\\\"key2\\\"\"));",
          "234:         assertTrue(\"expected 42\", textStr.contains(\"42\"));",
          "235:     }",
          "237:     @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "252:         final String actualString = json.optString(\"key\");",
          "253:         assert str.equals(actualString) : \"Incorrect key value. Got \"",
          "254:                 + actualString + \" expected \" + str;",
          "255:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "256:         Util.checkJSONObjectMaps(json);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "261:     public void emptyJsonObject() {",
          "262:         JSONObject jsonObject = new JSONObject();",
          "263:         assertTrue(\"jsonObject should be empty\", jsonObject.isEmpty());",
          "264:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "291:         assertTrue(\"expected \\\"nullKey\\\":null\", JSONObject.NULL.equals(jsonObjectByName.query(\"/nullKey\")));",
          "292:         assertTrue(\"expected \\\"stringKey\\\":\\\"hello world!\\\"\", \"hello world!\".equals(jsonObjectByName.query(\"/stringKey\")));",
          "293:         assertTrue(\"expected \\\"doubleKey\\\":-23.45e67\", new BigDecimal(\"-23.45e67\").equals(jsonObjectByName.query(\"/doubleKey\")));",
          "294:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297:         Util.checkJSONObjectsMaps(new ArrayList<JSONObject>(Arrays.asList(jsonObject, jsonObjectByName)));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "304:         Map<String, Object> map = null;",
          "305:         JSONObject jsonObject = new JSONObject(map);",
          "306:         assertTrue(\"jsonObject should be empty\", jsonObject.isEmpty());",
          "307:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "329:         assertTrue(\"expected \\\"stringKey\\\":\\\"hello world!\\\"\", \"hello world!\".equals(jsonObject.query(\"/stringKey\")));",
          "330:         assertTrue(\"expected \\\"escapeStringKey\\\":\\\"h\\be\\tllo w\\u1234orld!\\\"\", \"h\\be\\tllo w\\u1234orld!\".equals(jsonObject.query(\"/escapeStringKey\")));",
          "331:         assertTrue(\"expected \\\"doubleKey\\\":-23.45e67\", Double.valueOf(\"-23.45e67\").equals(jsonObject.query(\"/doubleKey\")));",
          "332:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "337:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "367:         assertTrue(",
          "368:                 \"The RAW Collection should give me the same as the Typed Collection\",",
          "369:                 expected.similar(jaObjObj));",
          "370:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "376:         Util.checkJSONObjectsMaps(new ArrayList<JSONObject>(",
          "377:                 Arrays.asList(jaRaw, jaStrObj, jaStrInt, jaObjObj))",
          "378:         );",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "389:         String expected = \"{\\\"myNumber\\\":{\\\"number\\\":42}}\";",
          "390:         assertEquals(\"Equal\", expected , actual);",
          "",
          "[Removed Lines]",
          "387:         JSONObject jsonObject = new JSONObject(new MyNumberContainer());",
          "388:         String actual = jsonObject.toString();",
          "",
          "[Added Lines]",
          "396:         JSONObject jsonObject0 = new JSONObject(new MyNumberContainer());",
          "397:         String actual = jsonObject0.toString();",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "403:         expected = \"{\\\"myNumber\\\":42}\";",
          "404:         assertEquals(\"Equal\", expected , actual);",
          "",
          "[Removed Lines]",
          "400:         jsonObject = new JSONObject();",
          "401:         jsonObject.put(\"myNumber\", new MyNumber());",
          "402:         actual = jsonObject.toString();",
          "",
          "[Added Lines]",
          "409:         JSONObject jsonObject1 = new JSONObject();",
          "410:         jsonObject1.put(\"myNumber\", new MyNumber());",
          "411:         actual = jsonObject1.toString();",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "416:         expected = \"{\\\"myNumber\\\":\\\"42\\\"}\";",
          "417:         assertEquals(\"Equal\", expected , actual);",
          "",
          "[Removed Lines]",
          "414:         jsonObject = new JSONObject(Collections.singletonMap(\"myNumber\", new AtomicInteger(42)));",
          "415:         actual = jsonObject.toString();",
          "",
          "[Added Lines]",
          "423:         JSONObject jsonObject2 = new JSONObject(Collections.singletonMap(\"myNumber\", new AtomicInteger(42)));",
          "424:         actual = jsonObject2.toString();",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "428:         expected = \"{\\\"myNumber\\\":42}\";",
          "429:         assertEquals(\"Equal\", expected , actual);",
          "",
          "[Removed Lines]",
          "425:         jsonObject = new JSONObject();",
          "426:         jsonObject.put(\"myNumber\", new AtomicInteger(42));",
          "427:         actual = jsonObject.toString();",
          "",
          "[Added Lines]",
          "434:         JSONObject jsonObject3 = new JSONObject();",
          "435:         jsonObject3.put(\"myNumber\", new AtomicInteger(42));",
          "436:         actual = jsonObject3.toString();",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "438:         jsonObject = new JSONObject(Collections.singletonMap(\"myNumber\", new Fraction(4,2)));",
          "439:         assertEquals(1, jsonObject.length());",
          "440:         assertEquals(2, ((JSONObject)(jsonObject.get(\"myNumber\"))).length());",
          "441:         assertEquals(\"Numerator\", BigInteger.valueOf(4) , jsonObject.query(\"/myNumber/numerator\"));",
          "442:         assertEquals(\"Denominator\", BigInteger.valueOf(2) , jsonObject.query(\"/myNumber/denominator\"));",
          "",
          "[Added Lines]",
          "447:         JSONObject jsonObject4 = new JSONObject(Collections.singletonMap(\"myNumber\", new Fraction(4,2)));",
          "448:         assertEquals(1, jsonObject4.length());",
          "449:         assertEquals(2, ((JSONObject)(jsonObject4.get(\"myNumber\"))).length());",
          "450:         assertEquals(\"Numerator\", BigInteger.valueOf(4) , jsonObject4.query(\"/myNumber/numerator\"));",
          "451:         assertEquals(\"Denominator\", BigInteger.valueOf(2) , jsonObject4.query(\"/myNumber/denominator\"));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "455:         expected = \"{\\\"myNumber\\\":\\\"4/2\\\"}\"; // valid JSON, bug fixed",
          "456:         assertEquals(\"Equal\", expected , actual);",
          "457:     }",
          "",
          "[Removed Lines]",
          "452:         jsonObject = new JSONObject();",
          "453:         jsonObject.put(\"myNumber\", new Fraction(4,2));",
          "454:         actual = jsonObject.toString();",
          "",
          "[Added Lines]",
          "461:         JSONObject jsonObject5 = new JSONObject();",
          "462:         jsonObject5.put(\"myNumber\", new Fraction(4,2));",
          "463:         actual = jsonObject5.toString();",
          "467:         Util.checkJSONObjectsMaps(new ArrayList<JSONObject>(Arrays.asList(",
          "468:                 jsonObject0, jsonObject1, jsonObject2, jsonObject3, jsonObject4, jsonObject5",
          "469:         )));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "488:         assertTrue(",
          "489:                 \"The RAW Collection should give me the same as the Typed Collection\",",
          "490:                 expected.similar(jaInt));",
          "491:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "505:         Util.checkJSONObjectsMaps(new ArrayList<JSONObject>(Arrays.asList(",
          "506:                 jaRaw, jaObj, jaInt",
          "507:         )));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "531:         assertTrue(",
          "532:                 \"The RAW Collection should give me the same as the Typed Collection\",",
          "533:                 expected.similar(jaObjObj));",
          "534:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "552:         Util.checkJSONObjectsMaps(new ArrayList<JSONObject>(Arrays.asList(",
          "553:                 jaRaw, jaStrObj, jaStrInt, jaStrObj",
          "554:         )));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "553:         assertTrue(\"expected 2 top level items\", ((Map<?,?>)(JsonPath.read(doc, \"$\"))).size() == 2);",
          "554:         assertTrue(\"expected 0 key1 items\", ((Map<?,?>)(JsonPath.read(doc, \"$.key1\"))).size() == 0);",
          "555:         assertTrue(\"expected \\\"key2\\\":java.lang.Exception\",\"java.lang.Exception\".equals(jsonObject.query(\"/key2\")));",
          "556:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "577:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "580:         assertTrue(\"expected \\\"escapeStringKey\\\":\\\"h\\be\\tllo w\\u1234orld!\\\"\", \"h\\be\\tllo w\\u1234orld!\".equals(jsonObject.query(\"/escapeStringKey\")));",
          "581:         assertTrue(\"expected \\\"intKey\\\":42\", Long.valueOf(\"42\").equals(jsonObject.query(\"/intKey\")));",
          "582:         assertTrue(\"expected \\\"doubleKey\\\":-23.45e67\", Double.valueOf(\"-23.45e67\").equals(jsonObject.query(\"/doubleKey\")));",
          "583:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "605:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "620:         assertTrue(\"expected 2 callbacks items\", ((List<?>)(JsonPath.read(doc, \"$.callbacks\"))).size() == 2);",
          "621:         assertTrue(\"expected 0 handler items\", ((Map<?,?>)(JsonPath.read(doc, \"$.callbacks[0].handler\"))).size() == 0);",
          "622:         assertTrue(\"expected 0 callbacks[1] items\", ((Map<?,?>)(JsonPath.read(doc, \"$.callbacks[1]\"))).size() == 0);",
          "623:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "646:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "656:         assertTrue(\"Overridden String field name (InterfaceField) should have been found\",",
          "657:                 jsonObject.has(\"InterfaceField\"));",
          "658:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "682:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "706:         assertTrue(\"Overridden boolean field name (Getable) should have been found\",",
          "707:                 jsonObject.has(\"Getable\"));",
          "708:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "733:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "725:         assertTrue(\"expected 2 top level items\", ((Map<?,?>)(JsonPath.read(doc, \"$\"))).size() == 2);",
          "726:         assertTrue(\"expected \\\"publicString\\\":\\\"abc\\\"\", \"abc\".equals(jsonObject.query(\"/publicString\")));",
          "727:         assertTrue(\"expected \\\"publicInt\\\":42\", Integer.valueOf(42).equals(jsonObject.query(\"/publicInt\")));",
          "728:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "746:         assertTrue(\"expected 2 farewells items\", ((Map<?,?>)(JsonPath.read(doc, \"$.farewells\"))).size() == 2);",
          "747:         assertTrue(\"expected \\\"later\\\":\\\"Later, \\\"\", \"Later, \".equals(jsonObject.query(\"/farewells/later\")));",
          "748:         assertTrue(\"expected \\\"world\\\":\\\"World!\\\"\", \"Alligator!\".equals(jsonObject.query(\"/farewells/gator\")));",
          "749:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "776:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "778:         assertTrue(\"expected h\\be\\tllo w\\u1234orld!\", \"h\\be\\tllo w\\u1234orld!\".equals(jsonObject.query(\"/myArray/3\")));",
          "779:         assertTrue(\"expected 42\", Integer.valueOf(42).equals(jsonObject.query(\"/myArray/4\")));",
          "780:         assertTrue(\"expected -23.45e7\", Double.valueOf(-23.45e7).equals(jsonObject.query(\"/myArray/5\")));",
          "781:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "809:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "809:         assertTrue(\"expected h\\be\\tllo w\\u1234orld!\", \"h\\be\\tllo w\\u1234orld!\".equals(jsonObject.query(\"/myArray/3\")));",
          "810:         assertTrue(\"expected 42\", Integer.valueOf(42).equals(jsonObject.query(\"/myArray/4\")));",
          "811:         assertTrue(\"expected -23.45e7\", Double.valueOf(-23.45e7).equals(jsonObject.query(\"/myArray/5\")));",
          "812:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "841:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "944:         JSONObject jsonObjectInner = jsonObject.getJSONObject(\"objectKey\");",
          "945:         assertTrue(\"objectKey should be JSONObject\",",
          "946:                 jsonObjectInner.get(\"myKey\").equals(\"myVal\"));",
          "947:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "977:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1006:         obj = jsonObject.get( \"largeExponent\" );",
          "1007:         assertTrue(\"largeExponent should evaluate as a BigDecimal\",",
          "1008:                 new BigDecimal(\"-23.45e2327\").equals(obj));",
          "1009:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1040:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1054:                 jsonObject.get(\"floatIdentifier\").equals(Double.valueOf(0.1)));",
          "1055:         assertTrue(\"doubleIdentifier currently evaluates to double 0.1\",",
          "1056:                 jsonObject.get(\"doubleIdentifier\").equals(Double.valueOf(0.1)));",
          "1057:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1089:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1205:                     \"JSONObject[\\\"stringKey\\\"] is not a JSONObject (class java.lang.String : hello world!).\",",
          "1206:                     e.getMessage());",
          "1207:         }",
          "1208:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1241:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1232:         assertTrue(\"3.0 can still be interpreted as a double\",",
          "1233:                 deserialized.getDouble(key30) == 3.0);",
          "1234:         assertTrue(\"3.1 remains a double\", deserialized.getDouble(key31) == 3.1);",
          "1235:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1269:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1249:         BigInteger bigInteger = new BigInteger(\"123456789012345678901234567890\");",
          "1253:         assertTrue(\"JSONObject parses BigInteger as the Integer lowestBitSet\",",
          "1254:                 obj instanceof Integer);",
          "1255:         assertTrue(\"this bigInteger lowestBitSet happens to be 1\",",
          "",
          "[Removed Lines]",
          "1250:         JSONObject jsonObject = new JSONObject(bigInteger);",
          "1251:         Object obj = jsonObject.get(\"lowestSetBit\");",
          "1252:         assertTrue(\"JSONObject only has 1 value\", jsonObject.length() == 1);",
          "",
          "[Added Lines]",
          "1285:         JSONObject jsonObject0 = new JSONObject(bigInteger);",
          "1286:         Object obj = jsonObject0.get(\"lowestSetBit\");",
          "1287:         assertTrue(\"JSONObject only has 1 value\", jsonObject0.length() == 1);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1263:         BigDecimal bigDecimal = new BigDecimal(",
          "1264:                 \"123456789012345678901234567890.12345678901234567890123456789\");",
          "1274:         assertTrue(\"jsonObject.put() handles bigInt correctly\",",
          "1276:         assertTrue(\"jsonObject.getBigInteger() handles bigInt correctly\",",
          "1278:         assertTrue(\"jsonObject.optBigInteger() handles bigInt correctly\",",
          "1280:         assertTrue(\"jsonObject serializes bigInt correctly\",",
          "1282:         assertTrue(\"BigInteger as BigDecimal\",",
          "1288:         assertTrue(\"jsonObject.put() handles bigDec correctly\",",
          "1290:         assertTrue(\"jsonObject.getBigDecimal() handles bigDec correctly\",",
          "1292:         assertTrue(\"jsonObject.optBigDecimal() handles bigDec correctly\",",
          "1294:         assertTrue(\"jsonObject serializes bigDec correctly\",",
          "1296:                 \"{\\\"bigDec\\\":123456789012345678901234567890.12345678901234567890123456789}\"));",
          "1298:         assertTrue(\"BigDecimal as BigInteger\",",
          "1303:         try {",
          "1306:             fail(\"expected an exeption\");",
          "1307:         } catch (JSONException ignored) {}",
          "1309:         assertTrue(\"expected BigDecimal\", obj.equals(BigDecimal.ONE));",
          "1311:         try {",
          "1313:             fail(\"expected an exeption\");",
          "1314:         } catch (JSONException ignored) {}",
          "1316:         assertTrue(\"expected BigInteger\", obj instanceof BigInteger);",
          "1317:         assertEquals(bigDecimal.toBigInteger(), obj);",
          "",
          "[Removed Lines]",
          "1265:         jsonObject = new JSONObject(bigDecimal);",
          "1266:         assertTrue(\"large bigDecimal is not stored\", jsonObject.isEmpty());",
          "1272:         jsonObject = new JSONObject();",
          "1273:         jsonObject.put(\"bigInt\", bigInteger);",
          "1275:                 jsonObject.get(\"bigInt\").equals(bigInteger));",
          "1277:                 jsonObject.getBigInteger(\"bigInt\").equals(bigInteger));",
          "1279:                 jsonObject.optBigInteger(\"bigInt\", BigInteger.ONE).equals(bigInteger));",
          "1281:                 jsonObject.toString().equals(\"{\\\"bigInt\\\":123456789012345678901234567890}\"));",
          "1283:                 jsonObject.getBigDecimal(\"bigInt\").equals(new BigDecimal(bigInteger)));",
          "1286:         jsonObject = new JSONObject();",
          "1287:         jsonObject.put(\"bigDec\", bigDecimal);",
          "1289:                 jsonObject.get(\"bigDec\").equals(bigDecimal));",
          "1291:                 jsonObject.getBigDecimal(\"bigDec\").equals(bigDecimal));",
          "1293:                 jsonObject.optBigDecimal(\"bigDec\", BigDecimal.ONE).equals(bigDecimal));",
          "1295:                 jsonObject.toString().equals(",
          "1299:                 jsonObject.getBigInteger(\"bigDec\").equals(bigDecimal.toBigInteger()));",
          "1305:             jsonObject.getBigDecimal(\"bigInt\");",
          "1308:         obj = jsonObject.optBigDecimal(\"bigInt\", BigDecimal.ONE);",
          "1310:         jsonObject.put(\"stringKey\",  \"abc\");",
          "1312:             jsonObject.getBigDecimal(\"stringKey\");",
          "1315:         obj = jsonObject.optBigInteger(\"bigDec\", BigInteger.ONE);",
          "",
          "[Added Lines]",
          "1300:         JSONObject jsonObject1 = new JSONObject(bigDecimal);",
          "1301:         assertTrue(\"large bigDecimal is not stored\", jsonObject1.isEmpty());",
          "1307:         JSONObject jsonObject2 = new JSONObject();",
          "1308:         jsonObject2.put(\"bigInt\", bigInteger);",
          "1310:                 jsonObject2.get(\"bigInt\").equals(bigInteger));",
          "1312:                 jsonObject2.getBigInteger(\"bigInt\").equals(bigInteger));",
          "1314:                 jsonObject2.optBigInteger(\"bigInt\", BigInteger.ONE).equals(bigInteger));",
          "1316:                 jsonObject2.toString().equals(\"{\\\"bigInt\\\":123456789012345678901234567890}\"));",
          "1318:                 jsonObject2.getBigDecimal(\"bigInt\").equals(new BigDecimal(bigInteger)));",
          "1321:         JSONObject jsonObject3 = new JSONObject();",
          "1322:         jsonObject3.put(\"bigDec\", bigDecimal);",
          "1324:                 jsonObject3.get(\"bigDec\").equals(bigDecimal));",
          "1326:                 jsonObject3.getBigDecimal(\"bigDec\").equals(bigDecimal));",
          "1328:                 jsonObject3.optBigDecimal(\"bigDec\", BigDecimal.ONE).equals(bigDecimal));",
          "1330:                 jsonObject3.toString().equals(",
          "1334:                 jsonObject3.getBigInteger(\"bigDec\").equals(bigDecimal.toBigInteger()));",
          "1340:             jsonObject3.getBigDecimal(\"bigInt\");",
          "1343:         obj = jsonObject3.optBigDecimal(\"bigInt\", BigDecimal.ONE);",
          "1345:         jsonObject3.put(\"stringKey\",  \"abc\");",
          "1347:             jsonObject3.getBigDecimal(\"stringKey\");",
          "1350:         obj = jsonObject3.optBigInteger(\"bigDec\", BigInteger.ONE);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1346:         Map<String, Object> map = new HashMap<String, Object>();",
          "1347:         map.put(\"bigInt\", bigInteger);",
          "1350:         assertTrue(\"bigInt in map (or array or bean) is a string\",",
          "1351:                 actualFromMapStr.equals(",
          "1352:                 \"{\\\"bigInt\\\":123456789012345678901234567890}\"));",
          "1357:         assertTrue(\"bigInt from put is a number\",",
          "1358:                 actualFromPutStr.equals(",
          "1359:                 \"{\\\"bigInt\\\":123456789012345678901234567890}\"));",
          "1361:         map = new HashMap<String, Object>();",
          "1362:         map.put(\"bigDec\", bigDecimal);",
          "1365:         assertTrue(\"bigDec in map (or array or bean) is a bigDec\",",
          "1366:                 actualFromMapStr.equals(",
          "1367:                 \"{\\\"bigDec\\\":123456789012345678901234567890.12345678901234567890123456789}\"));",
          "1372:         assertTrue(\"bigDec from put is a number\",",
          "1373:                 actualFromPutStr.equals(",
          "1374:                 \"{\\\"bigDec\\\":123456789012345678901234567890.12345678901234567890123456789}\"));",
          "1380:         assertTrue(\"bigInt, bigDec from put is a number\",",
          "1381:                 actualFromPutStr.equals(",
          "1382:                 \"[123456789012345678901234567890,123456789012345678901234567890.12345678901234567890123456789]\"));",
          "1388:         try {",
          "1390:             fail(\"should not be able to get big int\");",
          "1391:         } catch (Exception ignored) {}",
          "1392:         try {",
          "1394:             fail(\"should not be able to get big dec\");",
          "1395:         } catch (Exception ignored) {}",
          "1400:         List<Object> list = new ArrayList<Object>();",
          "1401:         list.add(bigInteger);",
          "1402:         list.add(bigDecimal);",
          "1405:         assertTrue(\"bigInt, bigDec in list is a bigInt, bigDec\",",
          "1406:                 actualFromListStr.equals(",
          "1407:                 \"[123456789012345678901234567890,123456789012345678901234567890.12345678901234567890123456789]\"));",
          "1409:         MyBigNumberBean myBigNumberBean = mock(MyBigNumberBean.class);",
          "1410:         when(myBigNumberBean.getBigInteger()).thenReturn(new BigInteger(\"123456789012345678901234567890\"));",
          "1414:         assertTrue(\"bigInt from bean ctor is a bigInt\",",
          "1415:                 actualFromBeanStr.contains(\"123456789012345678901234567890\"));",
          "1417:         myBigNumberBean = mock(MyBigNumberBean.class);",
          "1418:         when(myBigNumberBean.getBigDecimal()).thenReturn(new BigDecimal(\"123456789012345678901234567890.12345678901234567890123456789\"));",
          "1422:         assertTrue(\"bigDec from bean ctor is a bigDec\",",
          "1423:                 actualFromBeanStr.contains(\"123456789012345678901234567890.12345678901234567890123456789\"));",
          "",
          "[Removed Lines]",
          "1348:         jsonObject = new JSONObject(map);",
          "1349:         String actualFromMapStr = jsonObject.toString();",
          "1354:         jsonObject = new JSONObject();",
          "1355:         jsonObject.put(\"bigInt\", bigInteger);",
          "1356:         String actualFromPutStr = jsonObject.toString();",
          "1363:         jsonObject = new JSONObject(map);",
          "1364:         actualFromMapStr = jsonObject.toString();",
          "1369:         jsonObject = new JSONObject();",
          "1370:         jsonObject.put(\"bigDec\", bigDecimal);",
          "1371:         actualFromPutStr = jsonObject.toString();",
          "1376:         JSONArray jsonArray = new JSONArray();",
          "1377:         jsonArray.put(bigInteger);",
          "1378:         jsonArray.put(bigDecimal);",
          "1379:         actualFromPutStr = jsonArray.toString();",
          "1383:         assertTrue(\"getBigInt is bigInt\", jsonArray.getBigInteger(0).equals(bigInteger));",
          "1384:         assertTrue(\"getBigDec is bigDec\", jsonArray.getBigDecimal(1).equals(bigDecimal));",
          "1385:         assertTrue(\"optBigInt is bigInt\", jsonArray.optBigInteger(0, BigInteger.ONE).equals(bigInteger));",
          "1386:         assertTrue(\"optBigDec is bigDec\", jsonArray.optBigDecimal(1, BigDecimal.ONE).equals(bigDecimal));",
          "1387:         jsonArray.put(Boolean.TRUE);",
          "1389:             jsonArray.getBigInteger(2);",
          "1393:             jsonArray.getBigDecimal(2);",
          "1396:         assertTrue(\"optBigInt is default\", jsonArray.optBigInteger(2, BigInteger.ONE).equals(BigInteger.ONE));",
          "1397:         assertTrue(\"optBigDec is default\", jsonArray.optBigDecimal(2, BigDecimal.ONE).equals(BigDecimal.ONE));",
          "1403:         jsonArray = new JSONArray(list);",
          "1404:         String actualFromListStr = jsonArray.toString();",
          "1411:         jsonObject = new JSONObject(myBigNumberBean);",
          "1412:         String actualFromBeanStr = jsonObject.toString();",
          "1419:         jsonObject = new JSONObject(myBigNumberBean);",
          "1420:         actualFromBeanStr = jsonObject.toString();",
          "",
          "[Added Lines]",
          "1383:         JSONObject jsonObject4 = new JSONObject(map);",
          "1384:         String actualFromMapStr = jsonObject4.toString();",
          "1389:         JSONObject jsonObject5 = new JSONObject();",
          "1390:         jsonObject5.put(\"bigInt\", bigInteger);",
          "1391:         String actualFromPutStr = jsonObject5.toString();",
          "1398:         JSONObject jsonObject6 = new JSONObject(map);",
          "1399:         actualFromMapStr = jsonObject6.toString();",
          "1404:         JSONObject jsonObject7 = new JSONObject();",
          "1405:         jsonObject7.put(\"bigDec\", bigDecimal);",
          "1406:         actualFromPutStr = jsonObject7.toString();",
          "1411:         JSONArray jsonArray0 = new JSONArray();",
          "1412:         jsonArray0.put(bigInteger);",
          "1413:         jsonArray0.put(bigDecimal);",
          "1414:         actualFromPutStr = jsonArray0.toString();",
          "1418:         assertTrue(\"getBigInt is bigInt\", jsonArray0.getBigInteger(0).equals(bigInteger));",
          "1419:         assertTrue(\"getBigDec is bigDec\", jsonArray0.getBigDecimal(1).equals(bigDecimal));",
          "1420:         assertTrue(\"optBigInt is bigInt\", jsonArray0.optBigInteger(0, BigInteger.ONE).equals(bigInteger));",
          "1421:         assertTrue(\"optBigDec is bigDec\", jsonArray0.optBigDecimal(1, BigDecimal.ONE).equals(bigDecimal));",
          "1422:         jsonArray0.put(Boolean.TRUE);",
          "1424:             jsonArray0.getBigInteger(2);",
          "1428:             jsonArray0.getBigDecimal(2);",
          "1431:         assertTrue(\"optBigInt is default\", jsonArray0.optBigInteger(2, BigInteger.ONE).equals(BigInteger.ONE));",
          "1432:         assertTrue(\"optBigDec is default\", jsonArray0.optBigDecimal(2, BigDecimal.ONE).equals(BigDecimal.ONE));",
          "1438:         JSONArray jsonArray1 = new JSONArray(list);",
          "1439:         String actualFromListStr = jsonArray1.toString();",
          "1446:         JSONObject jsonObject8 = new JSONObject(myBigNumberBean);",
          "1447:         String actualFromBeanStr = jsonObject8.toString();",
          "1454:         jsonObject8 = new JSONObject(myBigNumberBean);",
          "1455:         actualFromBeanStr = jsonObject8.toString();",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1426:         assertTrue(\"wrap() returns big num\",obj.equals(bigInteger));",
          "1427:         obj = JSONObject.wrap(bigDecimal);",
          "1428:         assertTrue(\"wrap() returns string\",obj.equals(bigDecimal));",
          "1430:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1464:         Util.checkJSONObjectsMaps(new ArrayList<JSONObject>(Arrays.asList(",
          "1465:                 jsonObject0, jsonObject1, jsonObject2, jsonObject3, jsonObject4,",
          "1466:                 jsonObject5, jsonObject6, jsonObject7, jsonObject8",
          "1467:         )));",
          "1468:         Util.checkJSONArrayMaps(jsonArray0, jsonObject0.getMapType());",
          "1469:         Util.checkJSONArrayMaps(jsonArray1, jsonObject0.getMapType());",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1439:     @Test",
          "1440:     public void jsonObjectNames() {",
          "1444:         assertTrue(\"null names from null Object\",",
          "",
          "[Removed Lines]",
          "1441:         JSONObject jsonObject;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1449:                 null == JSONObject.getNames(new MyJsonString()));",
          "1454:         assertTrue(\"names should be null\", names == null);",
          "1458:         String emptyStr = \"{}\";",
          "1460:         assertTrue(\"empty JSONObject should have null names\",",
          "1464:         String str =",
          "",
          "[Removed Lines]",
          "1452:         jsonObject = new JSONObject();",
          "1453:         String [] names = JSONObject.getNames(jsonObject);",
          "1459:         jsonObject = new JSONObject(emptyStr);",
          "1461:                 null == JSONObject.getNames(jsonObject));",
          "",
          "[Added Lines]",
          "1491:         JSONObject jsonObject0 = new JSONObject();",
          "1492:         String [] names = JSONObject.getNames(jsonObject0);",
          "1498:         JSONObject jsonObject1 = new JSONObject(emptyStr);",
          "1500:                 null == JSONObject.getNames(jsonObject1));",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1467:                 \"\\\"falseKey\\\":false,\"+",
          "1468:                 \"\\\"stringKey\\\":\\\"hello world!\\\",\"+",
          "1469:             \"}\";",
          "1475:         Object doc = Configuration.defaultConfiguration().jsonProvider()",
          "1477:         List<?> docList = JsonPath.read(doc, \"$\");",
          "1478:         assertTrue(\"expected 3 items\", docList.size() == 3);",
          "1479:         assertTrue(",
          "",
          "[Removed Lines]",
          "1470:         jsonObject = new JSONObject(str);",
          "1471:         names = JSONObject.getNames(jsonObject);",
          "1472:         JSONArray jsonArray = new JSONArray(names);",
          "1476:                 .parse(jsonArray.toString());",
          "",
          "[Added Lines]",
          "1509:         JSONObject jsonObject2 = new JSONObject(str);",
          "1510:         names = JSONObject.getNames(jsonObject2);",
          "1511:         JSONArray jsonArray0 = new JSONArray(names);",
          "1515:                 .parse(jsonArray0.toString());",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1494:         names = JSONObject.getNames(myEnumField);",
          "1498:         doc = Configuration.defaultConfiguration().jsonProvider()",
          "1500:         docList = JsonPath.read(doc, \"$\");",
          "1501:         assertTrue(\"expected 3 items\", docList.size() == 3);",
          "1502:         assertTrue(",
          "",
          "[Removed Lines]",
          "1497:         jsonArray = new JSONArray(names);",
          "1499:                 .parse(jsonArray.toString());",
          "",
          "[Added Lines]",
          "1536:         JSONArray jsonArray1 = new JSONArray(names);",
          "1538:                 .parse(jsonArray1.toString());",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1518:         names = JSONObject.getNames(myPublicClass);",
          "1522:         doc = Configuration.defaultConfiguration().jsonProvider()",
          "1524:         docList = JsonPath.read(doc, \"$\");",
          "1525:         assertTrue(\"expected 2 items\", docList.size() == 2);",
          "1526:         assertTrue(",
          "",
          "[Removed Lines]",
          "1521:         jsonArray = new JSONArray(names);",
          "1523:                 .parse(jsonArray.toString());",
          "",
          "[Added Lines]",
          "1560:         JSONArray jsonArray2 = new JSONArray(names);",
          "1562:                 .parse(jsonArray2.toString());",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1529:         assertTrue(",
          "1530:                 \"expected to find publicInt\",",
          "1531:                 ((List<?>) JsonPath.read(doc, \"$[?(@=='publicInt')]\")).size() == 1);",
          "1532:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1571:         Util.checkJSONObjectsMaps(new ArrayList<JSONObject>(Arrays.asList(",
          "1572:                 jsonObject0, jsonObject1, jsonObject2",
          "1573:         )));",
          "1574:         Util.checkJSONArrayMaps(jsonArray0, jsonObject0.getMapType());",
          "1575:         Util.checkJSONArrayMaps(jsonArray1, jsonObject0.getMapType());",
          "1576:         Util.checkJSONArrayMaps(jsonArray2, jsonObject0.getMapType());",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1540:         JSONObject jsonObject = new JSONObject();",
          "1541:         JSONArray jsonArray = jsonObject.names();",
          "1542:         assertTrue(\"jsonArray should be null\", jsonArray == null);",
          "1543:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1588:         Util.checkJSONObjectMaps(jsonObject);",
          "1589:         Util.checkJSONArrayMaps(jsonArray, jsonObject.getMapType());",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1564:         assertTrue(\"expected to find trueKey\", ((List<?>) JsonPath.read(doc, \"$[?(@=='trueKey')]\")).size() == 1);",
          "1565:         assertTrue(\"expected to find falseKey\", ((List<?>) JsonPath.read(doc, \"$[?(@=='falseKey')]\")).size() == 1);",
          "1566:         assertTrue(\"expected to find stringKey\", ((List<?>) JsonPath.read(doc, \"$[?(@=='stringKey')]\")).size() == 1);",
          "1567:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1614:         Util.checkJSONObjectMaps(jsonObject);",
          "1615:         Util.checkJSONArrayMaps(jsonArray, jsonObject.getMapType());",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1686:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1734:         Util.checkJSONObjectsMaps(new ArrayList<JSONObject>(Arrays.asList(",
          "1735:                 jsonObject, inc",
          "1736:         )));",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1780:         JSONObject bCompareArrayJsonObject = new JSONObject(bCompareArrayStr);",
          "1781:         assertTrue(\"different nested JSONArrays should not be similar\",",
          "1782:                 !aCompareArrayJsonObject.similar(bCompareArrayJsonObject));",
          "1783:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1834:         Util.checkJSONObjectsMaps(new ArrayList<JSONObject>(Arrays.asList(",
          "1835:                 jsonObject, expectedJsonObject, aCompareValueJsonObject,",
          "1836:                 aCompareArrayJsonObject, aCompareObjectJsonObject, aCompareArrayJsonObject,",
          "1837:                 bCompareValueJsonObject, bCompareArrayJsonObject, bCompareObjectJsonObject,",
          "1838:                 bCompareArrayJsonObject",
          "1839:         )));",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1815:         assertTrue(\"expected myVal2\", \"myVal2\".equals(jsonObject.query(\"/objectKey/myKey2\")));",
          "1816:         assertTrue(\"expected myVal3\", \"myVal3\".equals(jsonObject.query(\"/objectKey/myKey3\")));",
          "1817:         assertTrue(\"expected myVal4\", \"myVal4\".equals(jsonObject.query(\"/objectKey/myKey4\")));",
          "1818:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1875:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1889:         JSONObject jo = new JSONObject().put(\"TABLE\", new JSONObject().put(\"yhoo\", new JSONObject()));",
          "1890:         assertEquals(\"toString(2)\",\"{\\\"TABLE\\\": {\\\"yhoo\\\": {}}}\", jo.toString(2));",
          "1891:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1949:         Util.checkJSONObjectsMaps(new ArrayList<JSONObject>(Arrays.asList(",
          "1950:                 jsonObject, jo",
          "1951:         )));",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1909:         assertTrue(\"expected 1 top level item\", ((Map<?,?>)(JsonPath.read(doc, \"$\"))).size() == 1);",
          "1910:         assertTrue(\"expected 1 key item\", ((Map<?,?>)(JsonPath.read(doc, \"$.key\"))).size() == 1);",
          "1911:         assertTrue(\"expected def\", \"def\".equals(jsonObject.query(\"/key/abc\")));",
          "1912:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1973:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1931:         assertTrue(\"expected 1 top level item\", ((Map<?,?>)(JsonPath.read(doc, \"$\"))).size() == 1);",
          "1932:         assertTrue(\"expected 1 key item\", ((List<?>)(JsonPath.read(doc, \"$.key\"))).size() == 1);",
          "1933:         assertTrue(\"expected abc\", \"abc\".equals(jsonObject.query(\"/key/0\")));",
          "1934:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1996:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1978:                 jsonArray.toString().equals(JSONObject.valueToString(collection)));",
          "1979:         Integer[] array = { new Integer(1), new Integer(2), new Integer(3) };",
          "1980:         assertTrue(\"array valueToString() incorrect\",",
          "1982:     }",
          "",
          "[Removed Lines]",
          "1981:                 jsonArray.toString().equals(JSONObject.valueToString(array)));",
          "",
          "[Added Lines]",
          "2044:                 jsonArray.toString().equals(JSONObject.valueToString(array)));",
          "2045:         Util.checkJSONObjectMaps(jsonObject);",
          "2046:         Util.checkJSONArrayMaps(jsonArray, jsonObject.getMapType());",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2082:         assertTrue(\"expected val1\", \"val1\".equals(mapJsonObject.query(\"/key1\")));",
          "2083:         assertTrue(\"expected val2\", \"val2\".equals(mapJsonObject.query(\"/key2\")));",
          "2084:         assertTrue(\"expected val3\", \"val3\".equals(mapJsonObject.query(\"/key3\")));",
          "2085:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2150:         Util.checkJSONObjectsMaps(new ArrayList<JSONObject>(Arrays.asList(",
          "2151:                 jsonObject, mapJsonObject",
          "2152:         )));",
          "2153:         Util.checkJSONArrayMaps(jsonArray, jsonObject.getMapType());",
          "2154:         Util.checkJSONArrayMaps(integerArrayJsonArray, jsonObject.getMapType());",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2096:             try {",
          "2097:                 JSONObject jo = new JSONObject(source);",
          "2098:                 assertTrue(\"Expected \"+charString+\"(\"+i+\") in the JSON Object but did not find it.\",charString.equals(jo.getString(\"key\")));",
          "2099:             } catch (JSONException ex) {",
          "2100:                 assertTrue(\"Only \\\\0 (U+0000), \\\\n (U+000A), and \\\\r (U+000D) should cause an error. Instead \"+charString+\"(\"+i+\") caused an error\",",
          "2101:                         i=='\\0' || i=='\\n' || i=='\\r'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2169:                 Util.checkJSONObjectMaps(jo);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2395:         assertTrue(\"jsonObject should be empty\", jsonObject.isEmpty());",
          "2396:         jsonObject.putOnce(null, \"\");",
          "2397:         assertTrue(\"jsonObject should be empty\", jsonObject.isEmpty());",
          "2398:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2469:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2430:                 42l == jsonObject.optNumber(\"myKey\", Long.valueOf(42)).longValue());",
          "2431:         assertTrue(\"optString() should return default string\",",
          "2432:                 \"hi\".equals(jsonObject.optString(\"hiKey\", \"hi\")));",
          "2433:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2505:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2466:                  42l == jsonObject.optNumber(\"myKey\", Long.valueOf(42)).longValue());",
          "2467:          assertTrue(\"optString() should return default string\",",
          "2468:                  \"hi\".equals(jsonObject.optString(\"hiKey\", \"hi\")));",
          "2469:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2542:          Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2484:         assertTrue(\"unexpected optBigDecimal value\",jo.optBigDecimal(\"int\",BigDecimal.ZERO).compareTo(new BigDecimal(\"123\"))==0);",
          "2485:         assertTrue(\"unexpected optBigDecimal value\",jo.optBigDecimal(\"int\",BigDecimal.ZERO).compareTo(new BigDecimal(\"123\"))==0);",
          "2486:         assertTrue(\"unexpected optNumber value\",jo.optNumber(\"int\",BigInteger.ZERO).longValue()==123l);",
          "2487:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2561:         Util.checkJSONObjectMaps(jo);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2518:         assertNotEquals((int)Double.parseDouble(\"19007199254740993.35481234487103587486413587843213584\"), jo.optInt(\"largeNumberStr\"));",
          "2519:         assertEquals(19007199254740992l, (long)Double.parseDouble(\"19007199254740993.35481234487103587486413587843213584\"));",
          "2520:         assertEquals(2147483647, (int)Double.parseDouble(\"19007199254740993.35481234487103587486413587843213584\"));",
          "2521:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2596:         Util.checkJSONObjectMaps(jo);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2540:         assertNull(jo.optBigDecimal(\"nullVal\", null));",
          "2541:         assertEquals(jo.optBigDecimal(\"float\", null),jo.getBigDecimal(\"float\"));",
          "2542:         assertEquals(jo.optBigDecimal(\"double\", null),jo.getBigDecimal(\"double\"));",
          "2543:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2619:         Util.checkJSONObjectMaps(jo);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2560:         assertEquals(new BigInteger(\"1234\"),jo.optBigInteger(\"bigInteger\", null));",
          "2561:         assertEquals(new BigInteger(\"1234\"),jo.optBigInteger(\"bigDecimal\", null));",
          "2562:         assertNull(jo.optBigDecimal(\"nullVal\", null));",
          "2563:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2640:         Util.checkJSONObjectMaps(jo);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2577:         JSONObject jsonObjectPutNull = new JSONObject(str);",
          "2578:         jsonObjectPutNull.put(\"myKey\", (Object) null);",
          "2579:         assertTrue(\"jsonObject should be empty\", jsonObjectPutNull.isEmpty());",
          "2582:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2658:         Util.checkJSONObjectsMaps(new ArrayList<JSONObject>(Arrays.asList(",
          "2659:                 jsonObjectRemove, jsonObjectPutNull",
          "2660:         )));",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2663:         } finally {",
          "2664:             stringWriter.close();",
          "2665:         }",
          "2666:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2745:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2745:                 writer.close();",
          "2746:             } catch (Exception e) {}",
          "2747:         }",
          "2749:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2828:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2813:                 stringWriter.close();",
          "2814:             } catch (Exception e) {}",
          "2815:         }",
          "2816:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2896:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2855:         JSONObject aJsonObject = new JSONObject(str);",
          "2856:         assertTrue(\"Same JSONObject should be equal to itself\",",
          "2857:                 aJsonObject.equals(aJsonObject));",
          "2858:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2939:         Util.checkJSONObjectMaps(aJsonObject);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2940:                 \"<key>null</key>\".equals(sJONull));",
          "2941:         String sNull = XML.toString(jsonObjectNull);",
          "2942:         assertTrue(\"null should emit an empty string\", \"\".equals(sNull));",
          "2943:     }",
          "2945:     @Test(expected = JSONPointerException.class)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3025:         Util.checkJSONObjectsMaps(new ArrayList<JSONObject>(Arrays.asList(",
          "3026:                 jsonObjectJONull, jsonObjectNull",
          "3027:         )));",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "3038:         assertTrue(\"Removing a key should succeed\", map.remove(\"key3\") != null);",
          "3039:         assertTrue(\"Map should have 2 elements\", map.size() == 2);",
          "3040:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3125:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "3062:         assertEquals(0, jo.get(\"someInt\"));",
          "3063:         assertEquals(null, jo.opt(\"someString\"));",
          "3064:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3150:         Util.checkJSONObjectsMaps(new ArrayList<JSONObject>(Arrays.asList(",
          "3151:                 jo, jo2",
          "3152:         )));",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "3086:         assertEquals(0, jo.get(\"someInt\"));",
          "3087:         assertEquals(null, jo.opt(\"someString\"));",
          "3088:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3177:         Util.checkJSONObjectsMaps(new ArrayList<JSONObject>(Arrays.asList(",
          "3178:                 jo, jo2",
          "3179:         )));",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "3100:         assertEquals(\"Expected the getter to only be called once\",",
          "3101:                 1, bean.genericGetCounter);",
          "3102:         assertEquals(0, bean.genericSetCounter);",
          "3103:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3195:         Util.checkJSONObjectMaps(jo);",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "3115:         assertEquals(\"Expected the getter to only be called once\",",
          "3116:                 1, bean.genericGetCounter);",
          "3117:         assertEquals(0, bean.genericSetCounter);",
          "3118:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3211:         Util.checkJSONObjectMaps(jo);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "3133:         assertEquals(\"Expected 1 key to be mapped. Instead found: \"+jo.keySet().toString(),",
          "3134:                 1, jo.length());",
          "3135:         assertNotNull(jo.get(\"ALL\"));",
          "3136:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3230:         Util.checkJSONObjectMaps(jo);",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "3150:         BigDecimal wantedValue = BigDecimal.valueOf(value);",
          "3152:         assertEquals(current, wantedValue);",
          "3153:      }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3248:         Util.checkJSONObjectMaps(jsonObject);",
          "3249:         Util.checkJSONArrayMaps(array, jsonObject.getMapType());",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "3163:                 1, jo.length());",
          "3164:         assertTrue(jo.get(\"closeable\") instanceof JSONObject);",
          "3165:         assertTrue(jo.getJSONObject(\"closeable\").has(\"string\"));",
          "3166:     }",
          "3168:     @Test(expected=NullPointerException.class)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3263:         Util.checkJSONObjectMaps(jo);",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "3289:         ObjC.setRef(ObjA);",
          "3290:         ObjB.setRef(ObjA);",
          "3291:         ObjB.setRef2(ObjA);",
          "3295:     }",
          "3296:     @Test",
          "3297:     public void testLongRepeatObjectNotRecursive() {",
          "",
          "[Removed Lines]",
          "3292:         new JSONObject(ObjC);",
          "3293:         new JSONObject(ObjB);",
          "3294:         new JSONObject(ObjA);",
          "",
          "[Added Lines]",
          "3390:         JSONObject j0 = new JSONObject(ObjC);",
          "3391:         JSONObject j1 = new JSONObject(ObjB);",
          "3392:         JSONObject j2 = new JSONObject(ObjA);",
          "3393:         Util.checkJSONObjectsMaps(new ArrayList<JSONObject>(Arrays.asList(",
          "3394:                 j0, j1, j2",
          "3395:         )));",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "3307:         ObjB.setRef2(ObjD);",
          "3308:         ObjA.setRef(ObjD);",
          "3309:         ObjD.setRef(ObjE);",
          "3315:     }",
          "3316:     @Test(expected=JSONException.class)",
          "3317:     public void testRecursiveEquals() {",
          "3318:         RecursiveBeanEquals a = new RecursiveBeanEquals(\"same\");",
          "3319:         a.setRef(a);",
          "3321:     }",
          "3322:     @Test",
          "3323:     public void testNotRecursiveEquals() {",
          "",
          "[Removed Lines]",
          "3310:         new JSONObject(ObjC);",
          "3311:         new JSONObject(ObjB);",
          "3312:         new JSONObject(ObjA);",
          "3313:         new JSONObject(ObjD);",
          "3314:         new JSONObject(ObjE);",
          "3320:         new JSONObject(a);",
          "",
          "[Added Lines]",
          "3411:         JSONObject j0 = new JSONObject(ObjC);",
          "3412:         JSONObject j1 = new JSONObject(ObjB);",
          "3413:         JSONObject j2 = new JSONObject(ObjA);",
          "3414:         JSONObject j3 = new JSONObject(ObjD);",
          "3415:         JSONObject j4 = new JSONObject(ObjE);",
          "3416:         Util.checkJSONObjectsMaps(new ArrayList<JSONObject>(Arrays.asList(",
          "3417:                 j0, j1, j2, j3, j4",
          "3418:         )));",
          "3424:         JSONObject j0 = new JSONObject(a);",
          "3425:         Util.checkJSONObjectMaps(j0);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "3326:         RecursiveBeanEquals c = new RecursiveBeanEquals(\"same\");",
          "3327:         a.setRef(b);",
          "3328:         b.setRef(c);",
          "3330:     }",
          "",
          "[Removed Lines]",
          "3329:         new JSONObject(a);",
          "",
          "[Added Lines]",
          "3434:         JSONObject j0 = new JSONObject(a);",
          "3435:         Util.checkJSONObjectMaps(j0);",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "3336:         assertTrue(\"missing expected key 'empty_json_array'\", jsonObject.has(\"empty_json_array\"));",
          "3337:         assertNotNull(\"'empty_json_array' should be an array\", jsonObject.getJSONArray(\"empty_json_array\"));",
          "3338:         assertEquals(\"'empty_json_array' should have a length of 0\", 0, jsonObject.getJSONArray(\"empty_json_array\").length());",
          "3339:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3445:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "3351:         jsonObject.clear(); //Clears the JSONObject",
          "3352:         assertTrue(\"expected jsonObject.length() == 0\", jsonObject.length() == 0); //Check if its length is 0",
          "3353:         jsonObject.getInt(\"key1\"); //Should throws org.json.JSONException: JSONObject[\"asd\"] not found",
          "3354:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3461:         Util.checkJSONObjectMaps(jsonObject);",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "3364:         JSONObject json_input = new JSONObject(input);",
          "3365:         assertNotNull(json_input);",
          "3366:         fail(\"Excepected Exception.\");",
          "3367:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3475:         Util.checkJSONObjectMaps(json_input);",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "3373:     public void issue654IncorrectNestingNoKey1() {",
          "3374:         JSONObject json_input = new JSONObject(\"{{\\\"a\\\":0}}\");",
          "3375:         assertNotNull(json_input);",
          "3377:     }",
          "",
          "[Removed Lines]",
          "3376:         fail(\"Excepected Exception.\");",
          "",
          "[Added Lines]",
          "3485:         fail(\"Expected Exception.\");",
          "",
          "---------------"
        ],
        "src/test/java/org/json/junit/Util.java||src/test/java/org/json/junit/Util.java": [
          "File: src/test/java/org/json/junit/Util.java -> src/test/java/org/json/junit/Util.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:             );",
          "118:         }",
          "119:     }",
          "120: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:     public static void checkJSONObjectsMaps(List<JSONObject> jsonObjects) {",
          "125:         if (jsonObjects == null || jsonObjects.size() == 0) {",
          "126:             return;",
          "127:         }",
          "128:         Class<? extends Map> mapType = new JSONObject().getMapType();",
          "129:         for (JSONObject jsonObject : jsonObjects) {",
          "130:             if (jsonObject != null) {",
          "131:                 assertTrue(mapType == jsonObject.getMapType());",
          "132:                 checkJSONObjectMaps(jsonObject, mapType);",
          "133:             }",
          "134:         }",
          "135:     }",
          "141:     public static void checkJSONObjectMaps(JSONObject jsonObject) {",
          "142:         if (jsonObject != null) {",
          "143:             checkJSONObjectMaps(jsonObject, jsonObject.getMapType());",
          "144:         }",
          "145:     }",
          "152:     public static void checkJSONObjectMaps(JSONObject jsonObject, Class<? extends Map> mapType) {",
          "153:         if (mapType == null) {",
          "154:             mapType = new JSONObject().getMapType();",
          "155:         }",
          "156:         Set<String> keys = jsonObject.keySet();",
          "157:         for (String key : keys) {",
          "158:             Object val = jsonObject.get(key);",
          "159:             if (val instanceof JSONObject) {",
          "160:                 JSONObject jsonObjectVal = (JSONObject) val;",
          "161:                 assertTrue(mapType == ((JSONObject) val).getMapType());",
          "162:                 checkJSONObjectMaps(jsonObjectVal, mapType);",
          "163:             } else if (val instanceof JSONArray) {",
          "164:                 JSONArray jsonArrayVal = (JSONArray)val;",
          "165:                 checkJSONArrayMaps(jsonArrayVal, mapType);",
          "166:             }",
          "167:         }",
          "168:     }",
          "174:     public static void checkJSONArraysMaps(List<JSONArray> jsonArrays) {",
          "175:         if (jsonArrays == null || jsonArrays.size() == 0) {",
          "176:             return;",
          "177:         }",
          "178:         Class<? extends Map> mapType = new JSONObject().getMapType();",
          "179:         for (JSONArray jsonArray : jsonArrays) {",
          "180:             if (jsonArray != null) {",
          "181:                 checkJSONArrayMaps(jsonArray, mapType);",
          "182:             }",
          "183:         }",
          "184:     }",
          "191:     public static void checkJSONArrayMaps(JSONArray jsonArray, Class<? extends Map> mapType) {",
          "192:         if (jsonArray == null) {",
          "193:             return;",
          "194:         }",
          "195:         if (mapType == null) {",
          "196:             mapType = new JSONObject().getMapType();",
          "197:         }",
          "198:         Iterator<Object> it = jsonArray.iterator();",
          "199:         while (it.hasNext()) {",
          "200:             Object val = it.next();",
          "201:             if (val instanceof JSONObject) {",
          "202:                 JSONObject jsonObjectVal = (JSONObject)val;",
          "203:                 checkJSONObjectMaps(jsonObjectVal, mapType);",
          "204:             } else if (val instanceof JSONArray) {",
          "205:                 JSONArray jsonArrayVal = (JSONArray)val;",
          "206:                 checkJSONArrayMaps(jsonArrayVal, mapType);",
          "207:             }",
          "208:         }",
          "209:     }",
          "216:     public static void checkJSONArrayMaps(JSONArray jsonArray) {",
          "217:         if (jsonArray != null) {",
          "218:             checkJSONArrayMaps(jsonArray, null);",
          "219:         }",
          "220:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}