{
  "cve_id": "CVE-2024-12678",
  "cve_desc": "Nomad Community and Nomad Enterprise (\"Nomad\") allocations are vulnerable to privilege escalation within a namespace through unredacted workload identity tokens. This vulnerability, identified as CVE-2024-12678, is fixed in Nomad Community Edition 1.9.4 and Nomad Enterprise 1.9.4, 1.8.8, and 1.7.16.",
  "repo": "hashicorp/nomad",
  "patch_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
  "patch_info": {
    "commit_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "files": [
      ".changelog/24683.txt",
      "command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go",
      "nomad/structs/structs.go"
    ],
    "message": "Backport of sec: fix alloc workload identity namespace permission into release/1.9.x (#24685)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
    "before_after_code_files": [
      "command/agent/node_endpoint.go||command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go",
      "nomad/structs/structs.go||nomad/structs/structs.go"
    ]
  },
  "patch_diff": {
    "command/agent/node_endpoint.go||command/agent/node_endpoint.go": [
      "File: command/agent/node_endpoint.go -> command/agent/node_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   out.Allocs = make([]*structs.Allocation, 0)",
      "106:  }",
      "107:  for _, alloc := range out.Allocs {",
      "108:   alloc.SetEventDisplayMessages()",
      "109:  }",
      "110:  return out.Allocs, nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   alloc = alloc.Sanitize()",
      "",
      "---------------"
    ],
    "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go": [
      "File: nomad/alloc_endpoint.go -> nomad/alloc_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    }",
      "176:    if out != nil {",
      "178:     if !aclObj.AllowClientOp() && !allowNsOp(aclObj, out.Namespace) {",
      "179:      return structs.NewErrUnknownAllocation(args.AllocID)",
      "",
      "[Removed Lines]",
      "175:    reply.Alloc = out",
      "",
      "[Added Lines]",
      "176:     out = out.Sanitize()",
      "177:     reply.Alloc = out",
      "",
      "---------------"
    ],
    "nomad/structs/structs.go||nomad/structs/structs.go": [
      "File: nomad/structs/structs.go -> nomad/structs/structs.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11199:  return a.ID",
      "11200: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11205: func (a *Allocation) Sanitize() *Allocation {",
      "11206:  if a == nil {",
      "11207:   return nil",
      "11208:  }",
      "11210:  if a.SignedIdentities == nil {",
      "11211:   return a",
      "11212:  }",
      "11214:  clean := a.Copy()",
      "11215:  clean.SignedIdentities = nil",
      "11216:  return clean",
      "11217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5170ba843db75c50a6db50a15cdc2d97552bdb4f",
      "candidate_info": {
        "commit_hash": "5170ba843db75c50a6db50a15cdc2d97552bdb4f",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/5170ba843db75c50a6db50a15cdc2d97552bdb4f",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "Backport of chore(deps): bump github.com/miekg/dns from 1.1.56 to 1.1.62 into release/1.9.x (#24632)\n\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:  github.com/kr/pretty v0.3.1",
          "94:  github.com/kr/text v0.2.0",
          "95:  github.com/mattn/go-colorable v0.1.13",
          "97:  github.com/mitchellh/cli v1.1.5",
          "98:  github.com/mitchellh/colorstring v0.0.0-20150917214807-8631ce90f286",
          "99:  github.com/mitchellh/copystructure v1.2.0",
          "",
          "[Removed Lines]",
          "96:  github.com/miekg/dns v1.1.56",
          "",
          "[Added Lines]",
          "96:  github.com/miekg/dns v1.1.62",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "861: github.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=",
          "862: github.com/miekg/dns v1.0.14/go.mod h1:W1PPwlIAgtquWBMBEV9nkV9Cazfe8ScdGz/Lj7v3Nrg=",
          "863: github.com/miekg/dns v1.1.41/go.mod h1:p6aan82bvRIyn+zDIv9xYNUpwa73JcSh9BKwknJysuI=",
          "866: github.com/mitchellh/cli v1.0.0/go.mod h1:hNIlj7HEI86fIcpObd7a0FcrxTWetlwJDGcceTlRvqc=",
          "867: github.com/mitchellh/cli v1.1.5 h1:OxRIeJXpAMztws/XHlN2vu6imG5Dpq+j61AzAX5fLng=",
          "868: github.com/mitchellh/cli v1.1.5/go.mod h1:v8+iFts2sPIKUV1ltktPXMCC8fumSKFItNcD2cLtRR4=",
          "",
          "[Removed Lines]",
          "864: github.com/miekg/dns v1.1.56 h1:5imZaSeoRNvpM9SzWNhEcP9QliKiz20/dA2QabIGVnE=",
          "865: github.com/miekg/dns v1.1.56/go.mod h1:cRm6Oo2C8TY9ZS/TqsSrseAcncm74lfK5G+ikN2SWWY=",
          "",
          "[Added Lines]",
          "864: github.com/miekg/dns v1.1.62 h1:cN8OuEF1/x5Rq6Np+h1epln8OiyPWV+lROx9LxcGgIQ=",
          "865: github.com/miekg/dns v1.1.62/go.mod h1:mvDlcItzm+br7MToIKqkglaGhlFMHJ9DTNNWONWXbNQ=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40fe6cbc87309932bf3b502d5801c5b906c953d0",
      "candidate_info": {
        "commit_hash": "40fe6cbc87309932bf3b502d5801c5b906c953d0",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/40fe6cbc87309932bf3b502d5801c5b906c953d0",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "backport of commit 63e2c6aaecb110e12e205bf20436c14e2474c8e9 (#24654)\n\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:  github.com/zclconf/go-cty-yaml v1.1.0",
          "129:  go.etcd.io/bbolt v1.3.9",
          "130:  go.uber.org/goleak v1.2.1",
          "132:  golang.org/x/mod v0.21.0",
          "135:  golang.org/x/time v0.3.0",
          "136:  google.golang.org/grpc v1.68.0",
          "137:  google.golang.org/protobuf v1.34.2",
          "",
          "[Removed Lines]",
          "131:  golang.org/x/crypto v0.27.0",
          "133:  golang.org/x/sync v0.9.0",
          "134:  golang.org/x/sys v0.27.0",
          "",
          "[Added Lines]",
          "131:  golang.org/x/crypto v0.31.0",
          "133:  golang.org/x/sync v0.10.0",
          "134:  golang.org/x/sys v0.28.0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "299:  golang.org/x/exp v0.0.0-20240613232115-7f521ea00fb8 // indirect",
          "300:  golang.org/x/net v0.29.0 // indirect",
          "301:  golang.org/x/oauth2 v0.23.0 // indirect",
          "304:  golang.org/x/tools v0.22.0 // indirect",
          "305:  golang.org/x/xerrors v0.0.0-20220907171357-04be3eba64a2 // indirect",
          "306:  google.golang.org/api v0.128.0 // indirect",
          "",
          "[Removed Lines]",
          "302:  golang.org/x/term v0.24.0 // indirect",
          "303:  golang.org/x/text v0.18.0 // indirect",
          "",
          "[Added Lines]",
          "302:  golang.org/x/term v0.27.0 // indirect",
          "303:  golang.org/x/text v0.21.0 // indirect",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "1160: golang.org/x/crypto v0.3.0/go.mod h1:hebNnKkNXi2UzZN1eVRvBB7co0a+JxK6XbPiWVs/3J4=",
          "1161: golang.org/x/crypto v0.6.0/go.mod h1:OFC/31mSvZgRz0V1QTNCzfAI1aIRzbiufJtkMIlEp58=",
          "1162: golang.org/x/crypto v0.19.0/go.mod h1:Iy9bg/ha4yyC70EfRS8jz+B6ybOBKMaSxLj6P6oBDfU=",
          "1165: golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=",
          "1166: golang.org/x/exp v0.0.0-20190306152737-a1d7652674e8/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=",
          "1167: golang.org/x/exp v0.0.0-20190510132918-efd6b22b2522/go.mod h1:ZjyILWgesfNpC6sMxTJOJm9Kp84zZh5NQWvqDGG3Qr8=",
          "",
          "[Removed Lines]",
          "1163: golang.org/x/crypto v0.27.0 h1:GXm2NjJrPaiv/h1tb2UH8QfgC/hOf/+z0p6PT8o1w7A=",
          "1164: golang.org/x/crypto v0.27.0/go.mod h1:1Xngt8kV6Dvbssa53Ziq6Eqn0HqbZi5Z6R0ZpwQzt70=",
          "",
          "[Added Lines]",
          "1163: golang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=",
          "1164: golang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1307: golang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=",
          "1308: golang.org/x/sync v0.0.0-20220929204114-8fcdb60fdcc0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=",
          "1309: golang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=",
          "1312: golang.org/x/sys v0.0.0-20170830134202-bb24a47a89ea/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=",
          "1313: golang.org/x/sys v0.0.0-20180823144017-11551d06cbcc/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=",
          "1314: golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=",
          "",
          "[Removed Lines]",
          "1310: golang.org/x/sync v0.9.0 h1:fEo0HyrW1GIgZdpbhCRO0PkJajUS5H9IFUztCgEo2jQ=",
          "1311: golang.org/x/sync v0.9.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=",
          "",
          "[Added Lines]",
          "1310: golang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=",
          "1311: golang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1407: golang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "1408: golang.org/x/sys v0.11.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "1409: golang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=",
          "1412: golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=",
          "1413: golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=",
          "1414: golang.org/x/term v0.1.0/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=",
          "",
          "[Removed Lines]",
          "1410: golang.org/x/sys v0.27.0 h1:wBqf8DvsY9Y/2P8gAfPDEYNuS30J4lPHJxXSb/nJZ+s=",
          "1411: golang.org/x/sys v0.27.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=",
          "",
          "[Added Lines]",
          "1410: golang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=",
          "1411: golang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1416: golang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=",
          "1417: golang.org/x/term v0.8.0/go.mod h1:xPskH00ivmX89bAKVGSKKtLOWNx2+17Eiy94tnKShWo=",
          "1418: golang.org/x/term v0.17.0/go.mod h1:lLRBjIVuehSbZlaOtGMbcMncT+aqLLLmKrsjNrUguwk=",
          "1421: golang.org/x/text v0.0.0-20160726164857-2910a502d2bf/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=",
          "1422: golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=",
          "1423: golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=",
          "",
          "[Removed Lines]",
          "1419: golang.org/x/term v0.24.0 h1:Mh5cbb+Zk2hqqXNO7S1iTjEphVL+jb8ZWaqh/g+JWkM=",
          "1420: golang.org/x/term v0.24.0/go.mod h1:lOBK/LVxemqiMij05LGJ0tzNr8xlmwBRJ81PX6wVLH8=",
          "",
          "[Added Lines]",
          "1419: golang.org/x/term v0.27.0 h1:WP60Sv1nlK1T6SupCHbXzSaN0b9wUmsPoRS9b61A23Q=",
          "1420: golang.org/x/term v0.27.0/go.mod h1:iMsnZpn0cago0GOrHO2+Y7u7JPn5AylBrcoWkElMTSM=",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1433: golang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=",
          "1434: golang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=",
          "1435: golang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=",
          "1438: golang.org/x/time v0.0.0-20181108054448-85acf8d2951c/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=",
          "1439: golang.org/x/time v0.0.0-20190308202827-9d24e82272b4/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=",
          "1440: golang.org/x/time v0.0.0-20191024005414-555d28b269f0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=",
          "",
          "[Removed Lines]",
          "1436: golang.org/x/text v0.18.0 h1:XvMDiNzPAl0jr17s6W9lcaIhGUfUORdGCNsuLmPG224=",
          "1437: golang.org/x/text v0.18.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=",
          "",
          "[Added Lines]",
          "1436: golang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=",
          "1437: golang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8e5ecee183eac4fbfeffbd662c60e16bdbcf844",
      "candidate_info": {
        "commit_hash": "f8e5ecee183eac4fbfeffbd662c60e16bdbcf844",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/f8e5ecee183eac4fbfeffbd662c60e16bdbcf844",
        "files": [
          ".changelog/24329.txt",
          "nomad/structs/services.go",
          "nomad/structs/services_test.go"
        ],
        "message": "backport of commit 202baa1cfc0e517dc0a755800e0e3693efb98b71 (#24331)\n\nCo-authored-by: James Oulman <oulman@users.noreply.github.com>",
        "before_after_code_files": [
          "nomad/structs/services.go||nomad/structs/services.go",
          "nomad/structs/services_test.go||nomad/structs/services_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "nomad/structs/services.go||nomad/structs/services.go": [
          "File: nomad/structs/services.go -> nomad/structs/services.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "877:   if s.Connect.IsNative() && len(s.TaskName) == 0 {",
          "878:    mErr.Errors = append(mErr.Errors, fmt.Errorf(\"Service %s is Connect Native and requires setting the task\", s.Name))",
          "879:   }",
          "880:  }",
          "881: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "882:   if s.Connect.IsNative() && s.PortLabel == \"\" {",
          "883:    mErr.Errors = append(mErr.Errors, fmt.Errorf(\"Service %s is Connect Native and requires setting the port\", s.Name))",
          "884:   }",
          "",
          "---------------"
        ],
        "nomad/structs/services_test.go||nomad/structs/services_test.go": [
          "File: nomad/structs/services_test.go -> nomad/structs/services_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1889:   {",
          "1890:    name: \"Native Connect without task name\",",
          "1891:    input: &Service{",
          "1893:     Connect: &ConsulConnect{",
          "1894:      Native: true,",
          "1895:     },",
          "",
          "[Removed Lines]",
          "1892:     Name: \"testservice\",",
          "",
          "[Added Lines]",
          "1892:     Name:      \"testservice\",",
          "1893:     PortLabel: \"8080\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1898:   },",
          "1899:   {",
          "1900:    name: \"Native Connect with task name\",",
          "1901:    input: &Service{",
          "1902:     Name:     \"testservice\",",
          "1903:     TaskName: \"testtask\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1902:    input: &Service{",
          "1903:     Name:      \"testservice\",",
          "1904:     PortLabel: \"8080\",",
          "1905:     TaskName:  \"testtask\",",
          "1906:     Connect: &ConsulConnect{",
          "1907:      Native: true,",
          "1908:     },",
          "1909:    },",
          "1910:    expErr: false,",
          "1911:   },",
          "1912:   {",
          "1913:    name: \"Native Connect without port\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1905:      Native: true,",
          "1906:     },",
          "1907:    },",
          "1908:    expErr: false,",
          "1909:   },",
          "1910:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1921:    expErr:    true,",
          "1922:    expErrStr: \"Service testservice is Connect Native and requires setting the port\",",
          "1923:   },",
          "1924:   {",
          "1925:    name: \"Native Connect with port\",",
          "1926:    input: &Service{",
          "1927:     Name:      \"testservice\",",
          "1928:     TaskName:  \"testtask\",",
          "1929:     PortLabel: \"8080\",",
          "1930:     Connect: &ConsulConnect{",
          "1931:      Native: true,",
          "1932:     },",
          "1933:    },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1996:   {",
          "1997:    name: \"provider consul with notes too long\",",
          "1998:    input: &Service{",
          "2001:     PortLabel: \"port\",",
          "2002:     Checks: []*ServiceCheck{",
          "2003:      {",
          "",
          "[Removed Lines]",
          "1999:     Name:     \"testservice\",",
          "2000:     Provider: \"consul\",",
          "",
          "[Added Lines]",
          "2025:     Name:      \"testservice\",",
          "2026:     Provider:  \"consul\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2006:       Path:     \"/\",",
          "2007:       Interval: 1 * time.Second,",
          "2008:       Timeout:  3 * time.Second,",
          "2010:      },",
          "2011:     },",
          "2012:    },",
          "",
          "[Removed Lines]",
          "2009:       Notes: strings.Repeat(\"A\", 256),",
          "",
          "[Added Lines]",
          "2035:       Notes:    strings.Repeat(\"A\", 256),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90384341dac660a52e2611f6880b9a33cda2ec97",
      "candidate_info": {
        "commit_hash": "90384341dac660a52e2611f6880b9a33cda2ec97",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/90384341dac660a52e2611f6880b9a33cda2ec97",
        "files": [
          "command/agent/command.go",
          "command/agent/command_test.go",
          "command/agent/log_file.go",
          "command/agent/log_file_test.go",
          "command/agent/log_levels.go",
          "command/agent/log_levels_test.go",
          "go.mod",
          "go.sum"
        ],
        "message": "agent: remove unused log filter and unrequired library (#24885)\n\nbackport of commit 753f752cdd95d881ffa3bf5fb3a01b7b5d8a77c3\n\nCo-authored-by: James Rasell <jrasell@users.noreply.github.com>",
        "before_after_code_files": [
          "command/agent/command.go||command/agent/command.go",
          "command/agent/command_test.go||command/agent/command_test.go",
          "command/agent/log_file.go||command/agent/log_file.go",
          "command/agent/log_file_test.go||command/agent/log_file_test.go",
          "command/agent/log_levels.go||command/agent/log_levels.go",
          "command/agent/log_levels_test.go||command/agent/log_levels_test.go",
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "command/agent/command.go||command/agent/command.go": [
          "File: command/agent/command.go -> command/agent/command.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  discover \"github.com/hashicorp/go-discover\"",
          "29:  hclog \"github.com/hashicorp/go-hclog\"",
          "30:  gsyslog \"github.com/hashicorp/go-syslog\"",
          "32:  \"github.com/hashicorp/nomad/helper\"",
          "33:  flaghelper \"github.com/hashicorp/nomad/helper/flags\"",
          "34:  gatedwriter \"github.com/hashicorp/nomad/helper/gated-writer\"",
          "",
          "[Removed Lines]",
          "31:  \"github.com/hashicorp/logutils\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:  args           []string",
          "56:  agent          *Agent",
          "57:  httpServers    []*HTTPServer",
          "60:  retryJoinErrCh chan struct{}",
          "61: }",
          "",
          "[Removed Lines]",
          "58:  logFilter      *logutils.LevelFilter",
          "59:  logOutput      io.Writer",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "550:  return true",
          "551: }",
          "566:   ui.Error(fmt.Sprintf(",
          "567:    \"Invalid log level: %s. Valid log levels are: %v\",",
          "570:  }",
          "575:  if logLevel == \"OFF\" {",
          "576:   config.EnableSyslog = false",
          "577:  }",
          "",
          "[Removed Lines]",
          "554: func SetupLoggers(ui cli.Ui, config *Config) (*logutils.LevelFilter, *gatedwriter.Writer, io.Writer) {",
          "558:  logGate := &gatedwriter.Writer{",
          "559:   Writer: &cli.UiWriter{Ui: ui},",
          "560:  }",
          "562:  logFilter := LevelFilter()",
          "563:  logFilter.MinLevel = logutils.LogLevel(strings.ToUpper(config.LogLevel))",
          "564:  logFilter.Writer = logGate",
          "565:  if !ValidateLevelFilter(logFilter.MinLevel, logFilter) {",
          "568:    logFilter.MinLevel, logFilter.Levels))",
          "569:   return nil, nil, nil",
          "573:  writers := []io.Writer{logFilter}",
          "574:  logLevel := strings.ToUpper(config.LogLevel)",
          "",
          "[Added Lines]",
          "551: func setupLoggers(ui cli.Ui, config *Config) (*gatedwriter.Writer, io.Writer) {",
          "556:  logLevel := strings.ToUpper(config.LogLevel)",
          "558:  if !isLogLevelValid(logLevel) {",
          "561:    logLevel, validLogLevels.Slice()))",
          "562:   return nil, nil",
          "567:  logGate := &gatedwriter.Writer{",
          "568:   Writer: &cli.UiWriter{Ui: ui},",
          "569:  }",
          "573:  writers := []io.Writer{logGate}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "581:   l, err := gsyslog.NewLogger(getSysLogPriority(logLevel), config.SyslogFacility, \"nomad\")",
          "582:   if err != nil {",
          "583:    ui.Error(fmt.Sprintf(\"Syslog setup failed: %v\", err))",
          "585:   }",
          "586:   writers = append(writers, newSyslogWriter(l, config.LogJson))",
          "587:  }",
          "",
          "[Removed Lines]",
          "584:    return nil, nil, nil",
          "",
          "[Added Lines]",
          "584:    return nil, nil",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "601:    duration, err := time.ParseDuration(config.LogRotateDuration)",
          "602:    if err != nil {",
          "603:     ui.Error(fmt.Sprintf(\"Failed to parse log rotation duration: %v\", err))",
          "605:    }",
          "606:    logRotateDuration = duration",
          "607:   } else {",
          "",
          "[Removed Lines]",
          "604:     return nil, nil, nil",
          "",
          "[Added Lines]",
          "604:     return nil, nil",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "610:   }",
          "612:   logFile := &logFile{",
          "619:   }",
          "621:   writers = append(writers, logFile)",
          "622:  }",
          "624:  logOutput := io.MultiWriter(writers...)",
          "626: }",
          "",
          "[Removed Lines]",
          "613:    logFilter: logFilter,",
          "614:    fileName:  fileName,",
          "615:    logPath:   dir,",
          "616:    duration:  logRotateDuration,",
          "617:    MaxBytes:  config.LogRotateBytes,",
          "618:    MaxFiles:  config.LogRotateMaxFiles,",
          "625:  return logFilter, logGate, logOutput",
          "",
          "[Added Lines]",
          "613:    fileName: fileName,",
          "614:    logPath:  dir,",
          "615:    duration: logRotateDuration,",
          "616:    MaxBytes: config.LogRotateBytes,",
          "617:    MaxFiles: config.LogRotateMaxFiles,",
          "624:  return logGate, logOutput",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "798:   }",
          "799:  }",
          "805:  if logGate == nil {",
          "806:   return 1",
          "807:  }",
          "",
          "[Removed Lines]",
          "802:  logFilter, logGate, logOutput := SetupLoggers(c.Ui, config)",
          "803:  c.logFilter = logFilter",
          "804:  c.logOutput = logOutput",
          "",
          "[Added Lines]",
          "801:  logGate, logOutput := setupLoggers(c.Ui, config)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1113:  }",
          "1120:   c.Ui.Error(fmt.Sprintf(",
          "1121:    \"Invalid log level: %s. Valid log levels are: %v\",",
          "1125:   newConf.LogLevel = c.agent.GetConfig().LogLevel",
          "",
          "[Removed Lines]",
          "1116:  minLevel := logutils.LogLevel(strings.ToUpper(newConf.LogLevel))",
          "1117:  if ValidateLevelFilter(minLevel, c.logFilter) {",
          "1118:   c.logFilter.SetMinLevel(minLevel)",
          "1119:  } else {",
          "1122:    minLevel, c.logFilter.Levels))",
          "",
          "[Added Lines]",
          "1113:  minLevel := strings.ToUpper(newConf.LogLevel)",
          "1115:  if !isLogLevelValid(minLevel) {",
          "1118:    minLevel, validLogLevels.Slice()))",
          "",
          "---------------"
        ],
        "command/agent/command_test.go||command/agent/command_test.go": [
          "File: command/agent/command_test.go -> command/agent/command_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  \"testing\"",
          "14:  \"github.com/hashicorp/cli\"",
          "15:  \"github.com/hashicorp/nomad/ci\"",
          "16:  \"github.com/hashicorp/nomad/helper/pointer\"",
          "21:  \"github.com/hashicorp/nomad/nomad/structs\"",
          "22:  \"github.com/hashicorp/nomad/nomad/structs/config\"",
          "23:  \"github.com/hashicorp/nomad/version\"",
          "24: )",
          "26: func TestCommand_Implements(t *testing.T) {",
          "",
          "[Removed Lines]",
          "17:  \"github.com/shoenig/test/must\"",
          "18:  \"github.com/stretchr/testify/assert\"",
          "19:  \"github.com/stretchr/testify/require\"",
          "",
          "[Added Lines]",
          "15:  \"github.com/hashicorp/go-hclog\"",
          "21:  \"github.com/shoenig/test/must\"",
          "22:  \"github.com/stretchr/testify/assert\"",
          "23:  \"github.com/stretchr/testify/require\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "625:   })",
          "626:  }",
          "627: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "629: func Test_setupLoggers_logFile(t *testing.T) {",
          "632:  mockUI := cli.NewMockUi()",
          "633:  logFile := filepath.Join(t.TempDir(), \"nomad.log\")",
          "636:  cfg := &Config{",
          "637:   LogFile:  logFile,",
          "638:   LogLevel: \"warning\",",
          "639:  }",
          "642:  gatedWriter, writer := setupLoggers(mockUI, cfg)",
          "643:  must.Nil(t, gatedWriter)",
          "644:  must.Nil(t, writer)",
          "645:  must.StrContains(t, mockUI.ErrorWriter.String(), \"Invalid log level: WARNING\")",
          "647:  mockUI.ErrorWriter.Reset()",
          "648:  mockUI.OutputWriter.Reset()",
          "652:  cfg.LogLevel = \"warn\"",
          "653:  gatedWriter, writer = setupLoggers(mockUI, cfg)",
          "654:  must.NotNil(t, gatedWriter)",
          "655:  must.NotNil(t, writer)",
          "658:  testLogger := hclog.NewInterceptLogger(&hclog.LoggerOptions{",
          "659:   Name:   \"agent\",",
          "660:   Level:  hclog.LevelFromString(cfg.LogLevel),",
          "661:   Output: writer,",
          "662:  })",
          "665:  gatedWriter.Flush()",
          "666:  testLogger.Error(\"error log entry\")",
          "667:  testLogger.Warn(\"warn log entry\")",
          "668:  testLogger.Info(\"info log entry\")",
          "669:  testLogger.Debug(\"debug log entry\")",
          "670:  testLogger.Trace(\"trace log entry\")",
          "674:  fileContents, err := os.ReadFile(logFile)",
          "675:  must.NoError(t, err)",
          "677:  fileContentsStr := string(fileContents)",
          "678:  must.StrContains(t, fileContentsStr, \"error log entry\")",
          "679:  must.StrContains(t, fileContentsStr, \"warn log entry\")",
          "680:  must.StrNotContains(t, fileContentsStr, \"info log entry\")",
          "681:  must.StrNotContains(t, fileContentsStr, \"debug log entry\")",
          "682:  must.StrNotContains(t, fileContentsStr, \"trace log entry\")",
          "683: }",
          "",
          "---------------"
        ],
        "command/agent/log_file.go||command/agent/log_file.go": [
          "File: command/agent/log_file.go -> command/agent/log_file.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  \"strings\"",
          "13:  \"sync\"",
          "14:  \"time\"",
          "17: )",
          "19: var (",
          "",
          "[Removed Lines]",
          "16:  \"github.com/hashicorp/logutils\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: type logFile struct {",
          "29:  fileName string",
          "",
          "[Removed Lines]",
          "26:  logFilter *logutils.LevelFilter",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "135:  return nil",
          "136: }",
          "139: func (l *logFile) Write(b []byte) (int, error) {",
          "145:  l.acquire.Lock()",
          "146:  defer l.acquire.Unlock()",
          "148:  if l.FileInfo == nil {",
          "149:   if err := l.openNew(); err != nil {",
          "",
          "[Removed Lines]",
          "141:  if !l.logFilter.Check(b) {",
          "142:   return 0, nil",
          "143:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "command/agent/log_file_test.go||command/agent/log_file_test.go": [
          "File: command/agent/log_file_test.go -> command/agent/log_file_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  \"testing\"",
          "10:  \"time\"",
          "13:  \"github.com/hashicorp/nomad/ci\"",
          "15: )",
          "17: const (",
          "",
          "[Removed Lines]",
          "12:  \"github.com/hashicorp/logutils\"",
          "14:  \"github.com/stretchr/testify/require\"",
          "",
          "[Added Lines]",
          "13:  \"github.com/shoenig/test/must\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:  tempDir := t.TempDir()",
          "29:  logFile := logFile{",
          "34:  }",
          "36:  time.Sleep(2 * time.Second)",
          "42: }",
          "44: func TestLogFile_openNew(t *testing.T) {",
          "45:  ci.Parallel(t)",
          "48:  tempDir := t.TempDir()",
          "52:  logFile := logFile{",
          "58:  }",
          "61:  _, err := os.ReadFile(logFile.FileInfo.Name())",
          "68:  bytesWritten, err := logFile.Write([]byte(\"test\"))",
          "71:  time.Sleep(2 * time.Second)",
          "74:  timeDelta := time.Now().Sub(logFile.LastCreated)",
          "77: }",
          "79: func TestLogFile_byteRotation(t *testing.T) {",
          "80:  ci.Parallel(t)",
          "83:  tempDir := t.TempDir()",
          "107:  logFile := logFile{",
          "113:  }",
          "120: }",
          "122: func TestLogFile_deleteArchives(t *testing.T) {",
          "123:  ci.Parallel(t)",
          "126:  tempDir := t.TempDir()",
          "130:  logFile := logFile{",
          "137:  }",
          "146:  for _, tempFile := range tempFiles {",
          "157:  }",
          "158: }",
          "160: func TestLogFile_deleteArchivesDisabled(t *testing.T) {",
          "161:  ci.Parallel(t)",
          "164:  tempDir := t.TempDir()",
          "168:  logFile := logFile{",
          "175:  }",
          "182: }",
          "",
          "[Removed Lines]",
          "28:  filt := LevelFilter()",
          "30:   logFilter: filt,",
          "31:   fileName:  testFileName,",
          "32:   logPath:   tempDir,",
          "33:   duration:  testDuration,",
          "35:  logFile.Write([]byte(\"Hello World\"))",
          "37:  logFile.Write([]byte(\"Second File\"))",
          "38:  want := 2",
          "39:  if got, _ := os.ReadDir(tempDir); len(got) != want {",
          "40:   t.Errorf(\"Expected %d files, got %v file(s)\", want, len(got))",
          "41:  }",
          "46:  require := require.New(t)",
          "50:  filt := LevelFilter()",
          "51:  filt.MinLevel = logutils.LogLevel(\"INFO\")",
          "53:   logFilter: filt,",
          "54:   fileName:  testFileName,",
          "55:   logPath:   tempDir,",
          "56:   MaxBytes:  testBytes,",
          "57:   duration:  24 * time.Hour,",
          "59:  require.NoError(logFile.openNew())",
          "62:  require.NoError(err)",
          "64:  require.Equal(logFile.FileInfo.Name(), filepath.Join(tempDir, testFileName))",
          "69:  require.NoError(err)",
          "72:  require.NoError(logFile.openNew())",
          "75:  require.GreaterOrEqual(timeDelta, 2*time.Second)",
          "76:  require.Equal(logFile.BytesWritten, int64(bytesWritten))",
          "81:  require := require.New(t)",
          "85:  filt := LevelFilter()",
          "86:  filt.MinLevel = logutils.LogLevel(\"INFO\")",
          "87:  logFile := logFile{",
          "88:   logFilter: filt,",
          "89:   fileName:  testFileName,",
          "90:   logPath:   tempDir,",
          "91:   MaxBytes:  testBytes,",
          "92:   duration:  24 * time.Hour,",
          "93:  }",
          "94:  logFile.Write([]byte(\"Hello World\"))",
          "95:  logFile.Write([]byte(\"Second File\"))",
          "96:  want := 2",
          "97:  tempFiles, _ := os.ReadDir(tempDir)",
          "98:  require.Equal(want, len(tempFiles))",
          "99: }",
          "101: func TestLogFile_logLevelFiltering(t *testing.T) {",
          "102:  ci.Parallel(t)",
          "103:  require := require.New(t)",
          "105:  tempDir := t.TempDir()",
          "106:  filt := LevelFilter()",
          "108:   logFilter: filt,",
          "109:   fileName:  testFileName,",
          "110:   logPath:   tempDir,",
          "111:   MaxBytes:  testBytes,",
          "112:   duration:  testDuration,",
          "114:  logFile.Write([]byte(\"[INFO] This is an info message\"))",
          "115:  logFile.Write([]byte(\"[DEBUG] This is a debug message\"))",
          "116:  logFile.Write([]byte(\"[ERR] This is an error message\"))",
          "117:  want := 2",
          "118:  tempFiles, _ := os.ReadDir(tempDir)",
          "119:  require.Equal(want, len(tempFiles))",
          "124:  require := require.New(t)",
          "128:  filt := LevelFilter()",
          "129:  filt.MinLevel = logutils.LogLevel(\"INFO\")",
          "131:   logFilter: filt,",
          "132:   fileName:  testFileName,",
          "133:   logPath:   tempDir,",
          "134:   MaxBytes:  testBytes,",
          "135:   duration:  24 * time.Hour,",
          "136:   MaxFiles:  1,",
          "138:  logFile.Write([]byte(\"[INFO] Hello World\"))",
          "139:  logFile.Write([]byte(\"[INFO] Second File\"))",
          "140:  logFile.Write([]byte(\"[INFO] Third File\"))",
          "141:  want := 2",
          "142:  tempFiles, _ := os.ReadDir(tempDir)",
          "144:  require.Equal(want, len(tempFiles))",
          "147:   var bytes []byte",
          "148:   var err error",
          "149:   path := filepath.Join(tempDir, tempFile.Name())",
          "150:   if bytes, err = os.ReadFile(path); err != nil {",
          "151:    t.Errorf(err.Error())",
          "152:    return",
          "153:   }",
          "154:   contents := string(bytes)",
          "156:   require.NotEqual(\"[INFO] Hello World\", contents, \"oldest log should have been deleted\")",
          "163:  require := require.New(t)",
          "166:  filt := LevelFilter()",
          "167:  filt.MinLevel = logutils.LogLevel(\"INFO\")",
          "169:   logFilter: filt,",
          "170:   fileName:  testFileName,",
          "171:   logPath:   tempDir,",
          "172:   MaxBytes:  testBytes,",
          "173:   duration:  24 * time.Hour,",
          "174:   MaxFiles:  0,",
          "176:  logFile.Write([]byte(\"[INFO] Hello World\"))",
          "177:  logFile.Write([]byte(\"[INFO] Second File\"))",
          "178:  logFile.Write([]byte(\"[INFO] Third File\"))",
          "179:  want := 3",
          "180:  tempFiles, _ := os.ReadDir(tempDir)",
          "181:  require.Equal(want, len(tempFiles))",
          "",
          "[Added Lines]",
          "28:   fileName: testFileName,",
          "29:   logPath:  tempDir,",
          "30:   duration: testDuration,",
          "33:  _, err := logFile.Write([]byte(\"Hello World\"))",
          "34:  must.NoError(t, err)",
          "36:  _, err = logFile.Write([]byte(\"Second File\"))",
          "37:  must.NoError(t, err)",
          "39:  numEntries, err := os.ReadDir(tempDir)",
          "40:  must.NoError(t, err)",
          "41:  must.Len(t, 2, numEntries)",
          "50:   fileName: testFileName,",
          "51:   logPath:  tempDir,",
          "52:   MaxBytes: testBytes,",
          "53:   duration: 24 * time.Hour,",
          "55:  must.NoError(t, logFile.openNew())",
          "58:  must.NoError(t, err)",
          "60:  must.Eq(t, logFile.FileInfo.Name(), filepath.Join(tempDir, testFileName))",
          "65:  must.NoError(t, err)",
          "68:  must.NoError(t, err)",
          "71:  must.Greater(t, 2*time.Second, timeDelta)",
          "72:  must.Eq(t, logFile.BytesWritten, int64(bytesWritten))",
          "81:   fileName: testFileName,",
          "82:   logPath:  tempDir,",
          "83:   MaxBytes: testBytes,",
          "84:   duration: 24 * time.Hour,",
          "86:  _, err := logFile.Write([]byte(\"Hello World\"))",
          "87:  must.NoError(t, err)",
          "88:  _, err = logFile.Write([]byte(\"Second File\"))",
          "89:  must.NoError(t, err)",
          "91:  tempFiles, err := os.ReadDir(tempDir)",
          "92:  must.NoError(t, err)",
          "93:  must.Len(t, 2, tempFiles)",
          "102:   fileName: testFileName,",
          "103:   logPath:  tempDir,",
          "104:   MaxBytes: testBytes,",
          "105:   duration: 24 * time.Hour,",
          "106:   MaxFiles: 1,",
          "108:  _, err := logFile.Write([]byte(\"[INFO] Hello World\"))",
          "109:  must.NoError(t, err)",
          "110:  _, err = logFile.Write([]byte(\"[INFO] Second File\"))",
          "111:  must.NoError(t, err)",
          "112:  _, err = logFile.Write([]byte(\"[INFO] Third File\"))",
          "113:  must.NoError(t, err)",
          "115:  tempFiles, err := os.ReadDir(tempDir)",
          "116:  must.NoError(t, err)",
          "117:  must.Len(t, 2, tempFiles)",
          "120:   bytes, err := os.ReadFile(filepath.Join(tempDir, tempFile.Name()))",
          "121:   must.NoError(t, err)",
          "122:   must.StrNotEqFold(t, \"[INFO] Hello World\", string(bytes))",
          "132:   fileName: testFileName,",
          "133:   logPath:  tempDir,",
          "134:   MaxBytes: testBytes,",
          "135:   duration: 24 * time.Hour,",
          "136:   MaxFiles: 0,",
          "138:  _, err := logFile.Write([]byte(\"[INFO] Hello World\"))",
          "139:  must.NoError(t, err)",
          "140:  _, err = logFile.Write([]byte(\"[INFO] Second File\"))",
          "141:  must.NoError(t, err)",
          "142:  _, err = logFile.Write([]byte(\"[INFO] Third File\"))",
          "143:  must.NoError(t, err)",
          "145:  tempFiles, err := os.ReadDir(tempDir)",
          "146:  must.NoError(t, err)",
          "147:  must.Len(t, 3, tempFiles)",
          "",
          "---------------"
        ],
        "command/agent/log_levels.go||command/agent/log_levels.go": [
          "File: command/agent/log_levels.go -> command/agent/log_levels.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: package agent",
          "6: import (",
          "10: )",
          "",
          "[Removed Lines]",
          "7:  \"io\"",
          "9:  \"github.com/hashicorp/logutils\"",
          "14: func LevelFilter() *logutils.LevelFilter {",
          "15:  return &logutils.LevelFilter{",
          "16:   Levels:   []logutils.LogLevel{\"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\"},",
          "17:   MinLevel: \"INFO\",",
          "18:   Writer:   io.Discard,",
          "19:  }",
          "20: }",
          "24: func ValidateLevelFilter(minLevel logutils.LogLevel, filter *logutils.LevelFilter) bool {",
          "25:  for _, level := range filter.Levels {",
          "26:   if level == minLevel {",
          "27:    return true",
          "28:   }",
          "29:  }",
          "30:  return false",
          "31: }",
          "",
          "[Added Lines]",
          "7:  \"github.com/hashicorp/go-set/v3\"",
          "12: var validLogLevels = set.From([]string{\"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\"})",
          "15: func isLogLevelValid(level string) bool { return validLogLevels.Contains(level) }",
          "",
          "---------------"
        ],
        "command/agent/log_levels_test.go||command/agent/log_levels_test.go": [
          "File: command/agent/log_levels_test.go -> command/agent/log_levels_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import (",
          "7:  \"testing\"",
          "10:  \"github.com/hashicorp/nomad/ci\"",
          "11: )",
          "14:  ci.Parallel(t)",
          "23:  }",
          "30:  }",
          "31: }",
          "",
          "[Removed Lines]",
          "9:  \"github.com/hashicorp/logutils\"",
          "13: func TestLevelFilter(t *testing.T) {",
          "16:  filt := LevelFilter()",
          "17:  filt.Levels = []logutils.LogLevel{\"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERR\"}",
          "18:  level := logutils.LogLevel(\"INFO\")",
          "21:  if !ValidateLevelFilter(level, filt) {",
          "22:   t.Fatalf(\"expected valid LogLevel, %s was invalid\", level)",
          "25:  level = logutils.LogLevel(\"FOO\")",
          "28:  if ValidateLevelFilter(level, filt) {",
          "29:   t.Fatalf(\"expected invalid LogLevel, %s was valid\", level)",
          "",
          "[Added Lines]",
          "10:  \"github.com/shoenig/test/must\"",
          "13: func Test_isLogLevelValid(t *testing.T) {",
          "16:  testCases := []struct {",
          "17:   name           string",
          "18:   inputLevel     string",
          "19:   expectedOutput bool",
          "20:  }{",
          "21:   {",
          "22:    name:           \"trace\",",
          "23:    inputLevel:     \"TRACE\",",
          "24:    expectedOutput: true,",
          "25:   },",
          "26:   {",
          "27:    name:           \"debug\",",
          "28:    inputLevel:     \"DEBUG\",",
          "29:    expectedOutput: true,",
          "30:   },",
          "31:   {",
          "32:    name:           \"info\",",
          "33:    inputLevel:     \"INFO\",",
          "34:    expectedOutput: true,",
          "35:   },",
          "36:   {",
          "37:    name:           \"warn\",",
          "38:    inputLevel:     \"WARN\",",
          "39:    expectedOutput: true,",
          "40:   },",
          "41:   {",
          "42:    name:           \"error\",",
          "43:    inputLevel:     \"ERROR\",",
          "44:    expectedOutput: true,",
          "45:   },",
          "46:   {",
          "47:    name:           \"off\",",
          "48:    inputLevel:     \"OFF\",",
          "49:    expectedOutput: true,",
          "50:   },",
          "51:   {",
          "52:    name:           \"invalid\",",
          "53:    inputLevel:     \"INVALID\",",
          "54:    expectedOutput: false,",
          "55:   },",
          "58:  for _, tc := range testCases {",
          "59:   t.Run(tc.name, func(t *testing.T) {",
          "60:    must.Eq(t, tc.expectedOutput, isLogLevelValid(tc.inputLevel))",
          "61:   })",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:  github.com/hashicorp/hcl v1.0.1-vault-3",
          "84:  github.com/hashicorp/hcl/v2 v2.20.2-0.20240517235513-55d9c02d147d",
          "85:  github.com/hashicorp/hil v0.0.0-20210521165536-27a72121fd40",
          "87:  github.com/hashicorp/memberlist v0.5.1",
          "88:  github.com/hashicorp/net-rpc-msgpackrpc/v2 v2.0.0",
          "89:  github.com/hashicorp/nomad/api v0.0.0-20230103221135-ce00d683f9be",
          "",
          "[Removed Lines]",
          "86:  github.com/hashicorp/logutils v1.0.0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "769: github.com/hashicorp/hcl/v2 v2.20.2-0.20240517235513-55d9c02d147d/go.mod h1:62ZYHrXgPoX8xBnzl8QzbWq4dyDsDtfCRgIq1rbJEvA=",
          "770: github.com/hashicorp/hil v0.0.0-20210521165536-27a72121fd40 h1:ExwaL+hUy1ys2AWDbsbh/lxQS2EVCYxuj0LoyLTdB3Y=",
          "771: github.com/hashicorp/hil v0.0.0-20210521165536-27a72121fd40/go.mod h1:n2TSygSNwsLJ76m8qFXTSc7beTb+auJxYdqrnoqwZWE=",
          "774: github.com/hashicorp/mdns v1.0.1/go.mod h1:4gW7WsVCke5TE7EPeYliwHlRUyBtfCwuFwuMg2DmyNY=",
          "775: github.com/hashicorp/mdns v1.0.4 h1:sY0CMhFmjIPDMlTB+HfymFHCaYLhgifZ0QhjaYKD/UQ=",
          "776: github.com/hashicorp/mdns v1.0.4/go.mod h1:mtBihi+LeNXGtG8L9dX59gAEa12BDtBQSp4v/YAJqrc=",
          "",
          "[Removed Lines]",
          "772: github.com/hashicorp/logutils v1.0.0 h1:dLEQVugN8vlakKOUE3ihGLTZJRB4j+M2cdTm/ORI65Y=",
          "773: github.com/hashicorp/logutils v1.0.0/go.mod h1:QIAnNjmIWmVIIkWDTG1z5v++HQmx9WQRO+LraFDTW64=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "98d7557a091b0e80ac6108a01a94951bdf14b633",
      "candidate_info": {
        "commit_hash": "98d7557a091b0e80ac6108a01a94951bdf14b633",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/98d7557a091b0e80ac6108a01a94951bdf14b633",
        "files": [
          ".release/ci.hcl",
          "client/structs/structs.generated.go",
          "nomad/structs/structs.generated.go",
          "version/version.go"
        ],
        "message": "Prepare for next release",
        "before_after_code_files": [
          ".release/ci.hcl||.release/ci.hcl",
          "client/structs/structs.generated.go||client/structs/structs.generated.go",
          "nomad/structs/structs.generated.go||nomad/structs/structs.generated.go",
          "version/version.go||version/version.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        ".release/ci.hcl||.release/ci.hcl": [
          "File: .release/ci.hcl -> .release/ci.hcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   team = \"nomad\"",
          "9:   slack {",
          "11:   }",
          "13:   github {",
          "",
          "[Removed Lines]",
          "10:     notification_channel = \"CUYKT2A73\"",
          "",
          "[Added Lines]",
          "10:     notification_channel = \"C03B5EWFW01\"",
          "",
          "---------------"
        ],
        "client/structs/structs.generated.go||client/structs/structs.generated.go": [
          "File: client/structs/structs.generated.go -> client/structs/structs.generated.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "nomad/structs/structs.generated.go||nomad/structs/structs.generated.go": [
          "File: nomad/structs/structs.generated.go -> nomad/structs/structs.generated.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "version/version.go||version/version.go": [
          "File: version/version.go -> version/version.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  GitDescribe string",
          "30:  VersionMetadata = \"\"",
          "",
          "[Removed Lines]",
          "22:  Version = \"1.9.1\"",
          "27:  VersionPrerelease = \"\"",
          "",
          "[Added Lines]",
          "22:  Version = \"1.9.2\"",
          "27:  VersionPrerelease = \"dev\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}