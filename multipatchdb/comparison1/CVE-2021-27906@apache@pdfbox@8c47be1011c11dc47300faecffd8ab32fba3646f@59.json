{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "52c4005c34a5fc91b9b0721fec2aa19799e4f9ac",
      "candidate_info": {
        "commit_hash": "52c4005c34a5fc91b9b0721fec2aa19799e4f9ac",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/52c4005c34a5fc91b9b0721fec2aa19799e4f9ac",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java"
        ],
        "message": "PDFBOX-4914: use domain values to extend shading\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882406 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:                     if (extend[0])",
          "205:                     {",
          "207:                     }",
          "208:                     else",
          "209:                     {",
          "",
          "[Removed Lines]",
          "206:                         inputValue = 0;",
          "",
          "[Added Lines]",
          "206:                         inputValue = domain[0];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:                     if (extend[1])",
          "222:                     {",
          "224:                     }",
          "225:                     else",
          "226:                     {",
          "",
          "[Removed Lines]",
          "223:                         inputValue = 1;",
          "",
          "[Added Lines]",
          "223:                         inputValue = domain[1];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df4a33dd98814b874c3542722de23816efbd8a08",
      "candidate_info": {
        "commit_hash": "df4a33dd98814b874c3542722de23816efbd8a08",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/df4a33dd98814b874c3542722de23816efbd8a08",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java"
        ],
        "message": "PDFBOX-5224: Sonar fix\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891036 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "447:                 int read = (int) IOUtils.populateBuffer(iis, buff);",
          "448:                 if (y >= starty && y % currentSubsampling == 0)",
          "449:                 {",
          "451:                     {",
          "452:                         int value = (buff[r] ^ invert) << (24 + (x & 7));",
          "453:                         for (int count = Math.min(8 - (x & 7), endX - x); count > 0; x++, count--)",
          "",
          "[Removed Lines]",
          "450:                     for (int x = startx, r = x / 8; r < stride && r < read; r++)",
          "",
          "[Added Lines]",
          "450:                     int x = startx;",
          "451:                     for (int r = x / 8; r < stride && r < read; r++)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c8a5b179f9f721430d9af4b3a44ffba52f8d59bc",
      "candidate_info": {
        "commit_hash": "c8a5b179f9f721430d9af4b3a44ffba52f8d59bc",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/c8a5b179f9f721430d9af4b3a44ffba52f8d59bc",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/text/PDFMarkedContentExtractor.java"
        ],
        "message": "PDFBOX-4892: simplify code, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890475 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/text/PDFMarkedContentExtractor.java||pdfbox/src/main/java/org/apache/pdfbox/text/PDFMarkedContentExtractor.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/text/PDFMarkedContentExtractor.java||pdfbox/src/main/java/org/apache/pdfbox/text/PDFMarkedContentExtractor.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/text/PDFMarkedContentExtractor.java -> pdfbox/src/main/java/org/apache/pdfbox/text/PDFMarkedContentExtractor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:             float tolerance = (text.getWidth()/textCharacter.length())/3.0f;",
          "179:             for (TextPosition sameTextCharacter : sameTextCharacters)",
          "180:             {",
          "186:                 if( charCharacter != null &&",
          "",
          "[Removed Lines]",
          "181:                 TextPosition character = sameTextCharacter;",
          "182:                 String charCharacter = character.getUnicode();",
          "183:                 float charX = character.getX();",
          "184:                 float charY = character.getY();",
          "",
          "[Added Lines]",
          "181:                 String charCharacter = sameTextCharacter.getUnicode();",
          "182:                 float charX = sameTextCharacter.getX();",
          "183:                 float charY = sameTextCharacter.getY();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ffb7867a33d2082f6fc508f0c8c93da968c0df56",
      "candidate_info": {
        "commit_hash": "ffb7867a33d2082f6fc508f0c8c93da968c0df56",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/ffb7867a33d2082f6fc508f0c8c93da968c0df56",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/SetField.java"
        ],
        "message": "PDFBOX-5086: don't write to a loaded pdf document which is still open\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1885877 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/SetField.java||examples/src/main/java/org/apache/pdfbox/examples/interactive/form/SetField.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/SetField.java||examples/src/main/java/org/apache/pdfbox/examples/interactive/form/SetField.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/interactive/form/SetField.java -> examples/src/main/java/org/apache/pdfbox/examples/interactive/form/SetField.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:                 SetField example = new SetField();",
          "117:                 pdf = PDDocument.load(new File(args[0]));",
          "118:                 example.setField(pdf, args[1], args[2]);",
          "120:             }",
          "121:         }",
          "122:         finally",
          "",
          "[Removed Lines]",
          "119:                 pdf.save(args[0]);",
          "",
          "[Added Lines]",
          "119:                 pdf.save(calculateOutputFilename(args[0]));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:         }",
          "129:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:     private static String calculateOutputFilename(String filename)",
          "132:     {",
          "133:         String outputFilename;",
          "134:         if (filename.toLowerCase().endsWith(\".pdf\"))",
          "135:         {",
          "136:             outputFilename = filename.substring(0, filename.length() - 4);",
          "137:         }",
          "138:         else",
          "139:         {",
          "140:             outputFilename = filename;",
          "141:         }",
          "142:         outputFilename += \"_filled.pdf\";",
          "143:         return outputFilename;",
          "144:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e81262b3ed516e8c942113a8d0de266dc2f236aa",
      "candidate_info": {
        "commit_hash": "e81262b3ed516e8c942113a8d0de266dc2f236aa",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/e81262b3ed516e8c942113a8d0de266dc2f236aa",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AcroFormDefaultFixup.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java"
        ],
        "message": "PDFBOX-3891: handle adding nested fields; move handling decision from processor to fixup\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1883031 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AcroFormDefaultFixup.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AcroFormDefaultFixup.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AcroFormDefaultFixup.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AcroFormDefaultFixup.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AcroFormDefaultFixup.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AcroFormDefaultFixup.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import org.apache.pdfbox.pdmodel.fixup.processor.AcroFormDefaultsProcessor;",
          "21: import org.apache.pdfbox.pdmodel.fixup.processor.AcroFormGenerateAppearancesProcessor;",
          "22: import org.apache.pdfbox.pdmodel.fixup.processor.AcroFormOrphanWidgetsProcessor;",
          "24: public class AcroFormDefaultFixup extends AbstractFixup",
          "25: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     @Override",
          "32:     public void apply() {",
          "34:         new AcroFormDefaultsProcessor(document).process();",
          "36:     }",
          "37: }",
          "",
          "[Removed Lines]",
          "33:         new AcroFormOrphanWidgetsProcessor(document).process();",
          "35:         new AcroFormGenerateAppearancesProcessor(document).process();",
          "",
          "[Added Lines]",
          "43:         PDAcroForm acroForm = document.getDocumentCatalog().getAcroForm(null);",
          "47:         if (acroForm != null && acroForm.getNeedAppearances())",
          "48:         {",
          "49:             if (acroForm.getFields().isEmpty())",
          "50:             {",
          "51:                 new AcroFormOrphanWidgetsProcessor(document).process();",
          "52:             }",
          "56:             new AcroFormGenerateAppearancesProcessor(document).process();",
          "57:         }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.pdmodel.fixup.processor;",
          "19: import java.io.IOException;",
          "20: import java.util.List;",
          "22: import org.apache.commons.logging.Log;",
          "23: import org.apache.commons.logging.LogFactory;",
          "24: import org.apache.fontbox.ttf.TrueTypeFont;",
          "25: import org.apache.pdfbox.cos.COSName;",
          "26: import org.apache.pdfbox.pdmodel.PDDocument;",
          "27: import org.apache.pdfbox.pdmodel.PDPage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.util.HashMap;",
          "22: import java.util.Map;",
          "27: import org.apache.pdfbox.cos.COSDictionary;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:         PDAcroForm acroForm = document.getDocumentCatalog().getAcroForm(null);",
          "69:         {",
          "70:             resolveFieldsFromWidgets(acroForm);",
          "71:         }",
          "",
          "[Removed Lines]",
          "68:         if (acroForm != null && acroForm.getNeedAppearances() && acroForm.getFields().isEmpty())",
          "",
          "[Added Lines]",
          "69:         if (acroForm != null)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:     private void resolveFieldsFromWidgets(PDAcroForm acroForm)",
          "75:     {",
          "76:         LOG.debug(\"rebuilding fields from widgets\");",
          "77:         List<PDField> fields = acroForm.getFields();",
          "78:         for (PDPage page : document.getPages())",
          "79:         {",
          "80:             try",
          "81:             {",
          "95:             }",
          "96:             catch (IOException ioe)",
          "97:             {",
          "98:                 LOG.debug(\"couldn't read annotations for page \" + ioe.getMessage());",
          "99:             }",
          "100:         }",
          "101:         acroForm.setFields(fields);",
          "102:     }",
          "",
          "[Removed Lines]",
          "82:                 List<PDAnnotation> annots = page.getAnnotations();",
          "83:                 for (PDAnnotation annot : annots)",
          "84:                 {",
          "85:                     if (annot instanceof PDAnnotationWidget)",
          "86:                     {",
          "87:                         PDField field = PDFieldFactory.createField(acroForm, annot.getCOSObject(), null);",
          "88:                         if (field instanceof PDVariableText)",
          "89:                         {",
          "90:                             ensureFontResources(acroForm.getDefaultResources(), (PDVariableText) field);",
          "91:                         }",
          "92:                         fields.add(field);",
          "93:                     }",
          "94:                 }",
          "",
          "[Added Lines]",
          "77:         Map<String, PDField> nonTerminalFieldsMap = new HashMap<String, PDField>();",
          "85:                 handleAnnotations(acroForm, fields, page.getAnnotations(), nonTerminalFieldsMap);",
          "96:         for (PDField field : acroForm.getFieldTree())",
          "97:         {",
          "98:             if (field instanceof PDVariableText)",
          "99:             {",
          "100:                 ensureFontResources(acroForm.getDefaultResources(), (PDVariableText) field);",
          "101:             }",
          "102:         }",
          "103:     }",
          "105:     private void handleAnnotations(PDAcroForm acroForm, List<PDField> fields, List<PDAnnotation> annotations, Map<String, PDField> nonTerminalFieldsMap)",
          "106:     {",
          "107:         for (PDAnnotation annot : annotations)",
          "108:         {",
          "109:             if (annot instanceof PDAnnotationWidget)",
          "110:             {",
          "111:                 if (annot.getCOSObject().containsKey(COSName.PARENT))",
          "112:                 {",
          "113:                     PDField resolvedField = resolveNonRootField(acroForm, (PDAnnotationWidget) annot, nonTerminalFieldsMap);",
          "114:                     if (resolvedField != null)",
          "115:                     {",
          "116:                         fields.add(resolvedField);",
          "117:                     }",
          "118:                 }",
          "119:                 else",
          "120:                 {",
          "121:                     fields.add(PDFieldFactory.createField(acroForm, annot.getCOSObject(), null));",
          "122:                 }",
          "123:             }",
          "124:         }",
          "125:     }",
          "131:     private PDField resolveNonRootField(PDAcroForm acroForm, PDAnnotationWidget widget, Map<String, PDField> nonTerminalFieldsMap)",
          "132:     {",
          "133:         COSDictionary parent = widget.getCOSObject().getCOSDictionary(COSName.PARENT);",
          "134:         while (parent.containsKey(COSName.PARENT))",
          "135:         {",
          "136:             parent = parent.getCOSDictionary(COSName.PARENT);",
          "137:         }",
          "139:         if (nonTerminalFieldsMap.get(parent.getString(COSName.T)) == null)",
          "140:         {",
          "141:             PDField field = PDFieldFactory.createField(acroForm, parent, null);",
          "142:             nonTerminalFieldsMap.put(field.getFullyQualifiedName(),field);",
          "144:             return field;",
          "145:         }",
          "148:         return null;",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.pdmodel.interactive.form;",
          "19: import static org.junit.Assert.assertEquals;",
          "21: import java.io.IOException;",
          "22: import java.net.URL;",
          "24: import org.apache.pdfbox.cos.COSArray;",
          "25: import org.apache.pdfbox.cos.COSDictionary;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import static org.junit.Assert.assertNotNull;",
          "24: import java.util.HashMap;",
          "25: import java.util.Map;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import org.apache.pdfbox.io.IOUtils;",
          "28: import org.apache.pdfbox.pdmodel.PDDocument;",
          "29: import org.apache.pdfbox.pdmodel.PDDocumentCatalog;",
          "30: import org.apache.pdfbox.pdmodel.fixup.AcroFormDefaultFixup;",
          "31: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import org.apache.pdfbox.pdmodel.fixup.AbstractFixup;",
          "35: import org.apache.pdfbox.pdmodel.fixup.processor.AcroFormOrphanWidgetsProcessor;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161:             IOUtils.closeQuietly(testPdf);",
          "162:         }",
          "163:     }",
          "164: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:     @Test",
          "178:     public void testFromAnnots3891DontCreateFields() throws IOException",
          "179:     {",
          "181:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/12881055/merge-test.pdf\";",
          "183:         PDDocument testPdf = null;",
          "184:         try",
          "185:         {",
          "186:             testPdf = PDDocument.load(new URL(sourceUrl).openStream());",
          "187:             PDDocumentCatalog catalog = testPdf.getDocumentCatalog();",
          "189:             COSDictionary cosAcroForm = (COSDictionary) catalog.getCOSObject().getDictionaryObject(COSName.ACRO_FORM);",
          "190:             COSArray cosFields = (COSArray) cosAcroForm.getDictionaryObject(COSName.FIELDS);",
          "191:             assertEquals(\"Initially there shall be 0 fields\", 0, cosFields.size());",
          "192:             PDAcroForm acroForm = catalog.getAcroForm();",
          "193:             assertEquals(\"After call with default correction there shall be 0 fields\", 0, acroForm.getFields().size());",
          "194:         }",
          "195:         finally",
          "196:         {",
          "197:             IOUtils.closeQuietly(testPdf);",
          "198:         }",
          "199:     }",
          "208:     @Test",
          "209:     public void testFromAnnots3891CreateFields() throws IOException",
          "210:     {",
          "212:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/12881055/merge-test.pdf\";",
          "213:         String acrobatSourceUrl = \"https://issues.apache.org/jira/secure/attachment/13014447/merge-test-na-acrobat.pdf\";",
          "215:         int numFormFieldsByAcrobat = 0;",
          "218:         Map<String, PDField> fieldsByName = new HashMap<String, PDField>();",
          "220:         PDDocument testPdf = null;",
          "221:         try",
          "222:         {",
          "223:             testPdf = PDDocument.load(new URL(acrobatSourceUrl).openStream());",
          "224:             PDDocumentCatalog catalog = testPdf.getDocumentCatalog();",
          "225:             PDAcroForm acroForm = catalog.getAcroForm(null);",
          "226:             numFormFieldsByAcrobat = acroForm.getFields().size();",
          "227:             for (PDField field : acroForm.getFieldTree())",
          "228:             {",
          "229:                 fieldsByName.put(field.getFullyQualifiedName(), field);",
          "230:             }",
          "231:         }",
          "232:         finally",
          "233:         {",
          "234:             IOUtils.closeQuietly(testPdf);",
          "235:         }",
          "237:         try",
          "238:         {",
          "239:             testPdf = PDDocument.load(new URL(sourceUrl).openStream());",
          "240:             PDDocumentCatalog catalog = testPdf.getDocumentCatalog();",
          "242:             COSDictionary cosAcroForm = (COSDictionary) catalog.getCOSObject().getDictionaryObject(COSName.ACRO_FORM);",
          "243:             COSArray cosFields = (COSArray) cosAcroForm.getDictionaryObject(COSName.FIELDS);",
          "244:             assertEquals(\"Initially there shall be 0 fields\", 0, cosFields.size());",
          "245:             PDAcroForm acroForm = catalog.getAcroForm(new CreateFieldsFixup(testPdf));",
          "246:             assertEquals(\"After rebuild there shall be \" + numFormFieldsByAcrobat + \" fields\", numFormFieldsByAcrobat, acroForm.getFields().size());",
          "249:             for (PDField field : acroForm.getFieldTree())",
          "250:             {",
          "251:                 assertNotNull(fieldsByName.get(field.getFullyQualifiedName()));",
          "252:             }",
          "255:             for (String fieldName : fieldsByName.keySet())",
          "256:             {",
          "257:                 assertNotNull(acroForm.getField(fieldName));",
          "258:             }",
          "259:         }",
          "260:         finally",
          "261:         {",
          "262:             IOUtils.closeQuietly(testPdf);",
          "263:         }",
          "264:     }",
          "269:     class CreateFieldsFixup extends AbstractFixup",
          "270:     {",
          "271:         CreateFieldsFixup(PDDocument document)",
          "272:         {",
          "273:             super(document);",
          "274:         }",
          "276:         @Override",
          "277:         public void apply() {",
          "278:             new AcroFormOrphanWidgetsProcessor(document).process();",
          "280:         }",
          "281:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}