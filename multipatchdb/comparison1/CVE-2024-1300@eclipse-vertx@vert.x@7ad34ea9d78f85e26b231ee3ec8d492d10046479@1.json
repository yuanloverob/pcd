{
  "cve_id": "CVE-2024-1300",
  "cve_desc": "A vulnerability in the Eclipse Vert.x toolkit causes a memory leak in TCP servers configured with TLS and SNI support. When processing an unknown SNI server name assigned the default certificate instead of a mapped certificate, the SSL context is erroneously cached in the server name map, leading to memory exhaustion. This flaw allows attackers to send TLS client hello messages with fake server names, triggering a JVM out-of-memory error.",
  "repo": "eclipse-vertx/vert.x",
  "patch_hash": "7ad34ea9d78f85e26b231ee3ec8d492d10046479",
  "patch_info": {
    "commit_hash": "7ad34ea9d78f85e26b231ee3ec8d492d10046479",
    "repo": "eclipse-vertx/vert.x",
    "commit_url": "https://github.com/eclipse-vertx/vert.x/commit/7ad34ea9d78f85e26b231ee3ec8d492d10046479",
    "files": [
      "src/main/java/io/vertx/core/net/impl/SSLHelper.java",
      "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
      "src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
      "src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
      "src/test/java/io/vertx/core/net/NetTest.java"
    ],
    "message": "The SslChannelProvider class maintains a map of server name to Netty SslContext that is filled when a client provides a server name. When a server name does not resolve to a KeyManagerFactory or TrustManagerFactory, the default factories are used and the entry is stored in the map. Instead no specific factory is resolved the default Netty SslContext is used, since this can lead to a a memory leak when a client specifies spurious SNI server names. This affects only a TCP server when SNI is set in the HttpServerOptions.",
    "before_after_code_files": [
      "src/main/java/io/vertx/core/net/impl/SSLHelper.java||src/main/java/io/vertx/core/net/impl/SSLHelper.java",
      "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
      "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
      "src/main/java/io/vertx/core/net/impl/TCPServerBase.java||src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
      "src/test/java/io/vertx/core/net/NetTest.java||src/test/java/io/vertx/core/net/NetTest.java"
    ]
  },
  "patch_diff": {
    "src/main/java/io/vertx/core/net/impl/SSLHelper.java||src/main/java/io/vertx/core/net/impl/SSLHelper.java": [
      "File: src/main/java/io/vertx/core/net/impl/SSLHelper.java -> src/main/java/io/vertx/core/net/impl/SSLHelper.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "126:     this.applicationProtocols = applicationProtocols;",
      "127:   }",
      "129:   private static class CachedProvider {",
      "130:     final SSLOptions options;",
      "131:     final long id;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "129:   public synchronized int sniEntrySize() {",
      "130:     CachedProvider res = cachedProvider.result();",
      "131:     if (res != null) {",
      "132:       return res.sslChannelProvider.sniEntrySize();",
      "133:     }",
      "134:     return 0;",
      "135:   }",
      "",
      "---------------"
    ],
    "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java": [
      "File: src/main/java/io/vertx/core/net/impl/SslChannelProvider.java -> src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "65:     this.sslContextProvider = sslContextProvider;",
      "66:   }",
      "68:   public SslContextProvider sslContextProvider() {",
      "69:     return sslContextProvider;",
      "70:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "68:   public int sniEntrySize() {",
      "69:     return sslContextMaps[0].size() + sslContextMaps[1].size();",
      "70:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84:   public SslContext sslContext(String serverName, boolean useAlpn, boolean server, boolean trustAll) throws Exception {",
      "85:     int idx = idx(useAlpn);",
      "93:       KeyManagerFactory kmf = sslContextProvider.resolveKeyManagerFactory(serverName);",
      "94:       TrustManager[] trustManagers = trustAll ? null : sslContextProvider.resolveTrustManagers(serverName);",
      "96:     }",
      "97:   }",
      "99:   public SslContext sslServerContext(boolean useAlpn) {",
      "",
      "[Removed Lines]",
      "86:     if (serverName == null) {",
      "87:       if (sslContexts[idx] == null) {",
      "88:         SslContext context = sslContextProvider.createContext(server, null, null, null, useAlpn, trustAll);",
      "89:         sslContexts[idx] = context;",
      "90:       }",
      "91:       return sslContexts[idx];",
      "92:     } else {",
      "95:       return sslContextMaps[idx].computeIfAbsent(serverName, s -> sslContextProvider.createContext(server, kmf, trustManagers, s, useAlpn, trustAll));",
      "",
      "[Added Lines]",
      "90:     if (serverName != null) {",
      "93:       if (kmf != null || trustManagers != null || !server) {",
      "94:         return sslContextMaps[idx].computeIfAbsent(serverName, s -> sslContextProvider.createContext(server, kmf, trustManagers, s, useAlpn, trustAll));",
      "95:       }",
      "96:     }",
      "97:     if (sslContexts[idx] == null) {",
      "98:       SslContext context = sslContextProvider.createContext(server, null, null, serverName, useAlpn, trustAll);",
      "99:       sslContexts[idx] = context;",
      "101:     return sslContexts[idx];",
      "",
      "---------------"
    ],
    "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java": [
      "File: src/main/java/io/vertx/core/net/impl/SslContextProvider.java -> src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "154:     }",
      "155:   }",
      "164:   public TrustManager[] defaultTrustManagers() {",
      "165:     return trustManagerFactory != null ? trustManagerFactory.getTrustManagers() : null;",
      "166:   }",
      "",
      "[Removed Lines]",
      "157:   public KeyManagerFactory loadKeyManagerFactory(String serverName) throws Exception {",
      "158:     if (keyManagerFactoryMapper != null) {",
      "159:       return keyManagerFactoryMapper.apply(serverName);",
      "160:     }",
      "161:     return null;",
      "162:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "186:   public KeyManagerFactory resolveKeyManagerFactory(String serverName) throws Exception {",
      "197:     }",
      "198:     return null;",
      "199:   }",
      "",
      "[Removed Lines]",
      "187:     KeyManagerFactory kmf = loadKeyManagerFactory(serverName);",
      "188:     if (kmf == null) {",
      "189:       kmf = keyManagerFactory;",
      "190:     }",
      "191:     return kmf;",
      "192:   }",
      "194:   public TrustManager[] loadTrustManagers(String serverName) throws Exception {",
      "195:     if (trustManagerMapper != null) {",
      "196:       return trustManagerMapper.apply(serverName);",
      "",
      "[Added Lines]",
      "179:     if (keyManagerFactoryMapper != null) {",
      "180:       return keyManagerFactoryMapper.apply(serverName);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "211:   public TrustManager[] resolveTrustManagers(String serverName) throws Exception {",
      "215:     }",
      "217:   }",
      "219:   private VertxTrustManagerFactory buildVertxTrustManagerFactory(TrustManager[] mgrs) {",
      "",
      "[Removed Lines]",
      "212:     TrustManager[] trustManagers = loadTrustManagers(serverName);",
      "213:     if (trustManagers == null && trustManagerFactory != null) {",
      "214:       trustManagers = trustManagerFactory.getTrustManagers();",
      "216:     return trustManagers;",
      "",
      "[Added Lines]",
      "195:     if (trustManagerMapper != null) {",
      "196:       return trustManagerMapper.apply(serverName);",
      "198:     return null;",
      "",
      "---------------"
    ],
    "src/main/java/io/vertx/core/net/impl/TCPServerBase.java||src/main/java/io/vertx/core/net/impl/TCPServerBase.java": [
      "File: src/main/java/io/vertx/core/net/impl/TCPServerBase.java -> src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "125:     return trafficShapingHandler;",
      "126:   }",
      "128:   public Future<Boolean> updateSSLOptions(SSLOptions options, boolean force) {",
      "129:     TCPServerBase server = actualServer;",
      "130:     if (server != null && server != this) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "128:   public int sniEntrySize() {",
      "129:     return sslHelper.sniEntrySize();",
      "130:   }",
      "",
      "---------------"
    ],
    "src/test/java/io/vertx/core/net/NetTest.java||src/test/java/io/vertx/core/net/NetTest.java": [
      "File: src/test/java/io/vertx/core/net/NetTest.java -> src/test/java/io/vertx/core/net/NetTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "58: import io.vertx.core.impl.logging.LoggerFactory;",
      "59: import io.vertx.core.json.JsonArray;",
      "60: import io.vertx.core.json.JsonObject;",
      "65: import io.vertx.core.spi.tls.SslContextFactory;",
      "66: import io.vertx.core.streams.ReadStream;",
      "67: import io.vertx.test.core.CheckingSender;",
      "",
      "[Removed Lines]",
      "61: import io.vertx.core.net.impl.HAProxyMessageCompletionHandler;",
      "62: import io.vertx.core.net.impl.NetServerImpl;",
      "63: import io.vertx.core.net.impl.NetSocketInternal;",
      "64: import io.vertx.core.net.impl.VertxHandler;",
      "",
      "[Added Lines]",
      "61: import io.vertx.core.net.impl.*;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1538:       receivedServerNames.add(so.indicatedServerName());",
      "1539:     });",
      "1540:     startServer();",
      "1542:     client = vertx.createNetClient(new NetClientOptions().setSsl(true).setTrustAll(true));",
      "1543:     for (String serverName : serverNames) {",
      "1544:       NetSocket so = client.connect(testAddress, serverName).toCompletionStage().toCompletableFuture().get();",
      "1545:       String host = cnOf(so.peerCertificates().get(0));",
      "1547:     }",
      "1549:     assertEquals(receivedServerNames, serverNames);",
      "1550:   }",
      "",
      "[Removed Lines]",
      "1541:     List<String> serverNames = Arrays.asList(\"host1\", \"host2.com\");",
      "1546:       assertEquals(serverName, host);",
      "1548:     assertWaitUntil(() -> receivedServerNames.size() == 2);",
      "",
      "[Added Lines]",
      "1538:     List<String> serverNames = Arrays.asList(\"host1\", \"host2.com\", \"fake\");",
      "1539:     List<String> cns = new ArrayList<>();",
      "1544:       cns.add(host);",
      "1546:     assertEquals(Arrays.asList(\"host1\", \"host2.com\", \"localhost\"), cns);",
      "1547:     assertEquals(2, ((TCPServerBase)server).sniEntrySize());",
      "1548:     assertWaitUntil(() -> receivedServerNames.size() == 3);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "07c7ecc66595742ca5f0e394b07bfd260b653ed7",
      "candidate_info": {
        "commit_hash": "07c7ecc66595742ca5f0e394b07bfd260b653ed7",
        "repo": "eclipse-vertx/vert.x",
        "commit_url": "https://github.com/eclipse-vertx/vert.x/commit/07c7ecc66595742ca5f0e394b07bfd260b653ed7",
        "files": [
          "src/main/java/io/vertx/core/net/impl/SSLHelper.java",
          "src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
          "src/test/java/io/vertx/core/net/NetTest.java"
        ],
        "message": "The SSLHelper class maintains a map of server name to Netty SslContext that is filled when a client provides a server name. When a server name does not resolve to a KeyManagerFactory or TrustManagerFactory, the default factories are used and the entry is stored in the map. Instead no specific factory is resolved the default Netty SslContext is used, since this can lead to a a memory leak when a client specifies spurious SNI server names. This affects only a TCP server when SNI is set in the HttpServerOptions.",
        "before_after_code_files": [
          "src/main/java/io/vertx/core/net/impl/SSLHelper.java||src/main/java/io/vertx/core/net/impl/SSLHelper.java",
          "src/main/java/io/vertx/core/net/impl/TCPServerBase.java||src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
          "src/test/java/io/vertx/core/net/NetTest.java||src/test/java/io/vertx/core/net/NetTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/io/vertx/core/net/impl/SSLHelper.java||src/main/java/io/vertx/core/net/impl/SSLHelper.java",
            "src/main/java/io/vertx/core/net/impl/TCPServerBase.java||src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
            "src/test/java/io/vertx/core/net/NetTest.java||src/test/java/io/vertx/core/net/NetTest.java"
          ],
          "candidate": [
            "src/main/java/io/vertx/core/net/impl/SSLHelper.java||src/main/java/io/vertx/core/net/impl/SSLHelper.java",
            "src/main/java/io/vertx/core/net/impl/TCPServerBase.java||src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
            "src/test/java/io/vertx/core/net/NetTest.java||src/test/java/io/vertx/core/net/NetTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/io/vertx/core/net/impl/SSLHelper.java||src/main/java/io/vertx/core/net/impl/SSLHelper.java": [
          "File: src/main/java/io/vertx/core/net/impl/SSLHelper.java -> src/main/java/io/vertx/core/net/impl/SSLHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import io.netty.handler.ssl.SslHandler;",
          "21: import io.netty.handler.ssl.SslProvider;",
          "22: import io.netty.util.AsyncMapping;",
          "24: import io.netty.util.concurrent.ImmediateExecutor;",
          "25: import io.vertx.core.Future;",
          "26: import io.vertx.core.Promise;",
          "",
          "[Removed Lines]",
          "23: import io.netty.util.Mapping;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:     this.useWorkerPool = sslEngineOptions == null ? SSLEngineOptions.DEFAULT_USE_WORKER_POOL : sslEngineOptions.getUseWorkerThread();",
          "165:   }",
          "167:   public boolean isSSL() {",
          "168:     return ssl;",
          "169:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:   public synchronized int sniEntrySize() {",
          "167:     return sslContextMaps[0].size() + sslContextMaps[1].size();",
          "168:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "206:         ctx.<Void>executeBlockingInternal(p -> {",
          "207:           KeyManagerFactory kmf;",
          "208:           try {",
          "211:           } catch (Exception e) {",
          "212:             p.fail(e);",
          "213:             return;",
          "",
          "[Removed Lines]",
          "209:             getTrustMgrFactory(ctx.owner(), null, false);",
          "210:             kmf = getKeyMgrFactory(ctx.owner());",
          "",
          "[Added Lines]",
          "212:             TrustManager[] mgrs = getTrustManagers(ctx.owner(), null);",
          "213:             if (mgrs == null) {",
          "214:               mgrs = getDefaultTrustManager(ctx.owner());",
          "215:             }",
          "216:             getTrustMgrFactory(ctx.owner(), mgrs);",
          "217:             kmf = getDefaultKeyMgrFactory(ctx.owner());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "241:   public AsyncMapping<? super String, ? extends SslContext> serverNameMapper(ContextInternal ctx) {",
          "242:     return (serverName, promise) -> {",
          "243:       ctx.<SslContext>executeBlockingInternal(p -> {",
          "245:         if (sslContext != null) {",
          "246:           sslContext = new DelegatingSslContext(sslContext) {",
          "247:             @Override",
          "",
          "[Removed Lines]",
          "244:         SslContext sslContext = createContext(ctx.owner(), serverName, useAlpn, client, trustAll);",
          "",
          "[Added Lines]",
          "251:         SslContext sslContext;",
          "252:         try {",
          "253:           sslContext = createContext(ctx.owner(), serverName, useAlpn, client, trustAll);",
          "254:         } catch (Exception e) {",
          "255:           p.fail(e);",
          "256:           return;",
          "257:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "263:   }",
          "265:   public SSLEngine createEngine(VertxInternal vertx) {",
          "267:     configureEngine(engine, null);",
          "268:     return engine;",
          "269:   }",
          "271:   public SslContext createContext(VertxInternal vertx) {",
          "273:   }",
          "276:     int idx = useAlpn ? 0 : 1;",
          "280:       }",
          "284:     }",
          "285:   }",
          "289:     return new DelegatingSslContext(context) {",
          "290:       @Override",
          "291:       protected void initEngine(SSLEngine engine) {",
          "",
          "[Removed Lines]",
          "266:     SSLEngine engine = createContext(vertx).newEngine(ByteBufAllocator.DEFAULT);",
          "272:     return createContext(vertx, null, useAlpn, client, trustAll);",
          "275:   public SslContext createContext(VertxInternal vertx, String serverName, boolean useAlpn, boolean client, boolean trustAll) {",
          "277:     if (serverName == null) {",
          "278:       if (sslContexts[idx] == null) {",
          "279:         sslContexts[idx] = createContext2(vertx, serverName, useAlpn, client, trustAll);",
          "281:       return sslContexts[idx];",
          "282:     } else {",
          "283:       return sslContextMaps[idx].computeIfAbsent(serverName, s -> createContext2(vertx, serverName, useAlpn, client, trustAll));",
          "287:   public SslContext sslContext(VertxInternal vertx, String serverName, boolean useAlpn) {",
          "288:     SslContext context = createContext(vertx, null, useAlpn, client, trustAll);",
          "",
          "[Added Lines]",
          "279:     SSLEngine engine = null;",
          "280:     try {",
          "281:       engine = createContext(vertx).newEngine(ByteBufAllocator.DEFAULT);",
          "282:     } catch (Exception e) {",
          "283:       if (e instanceof RuntimeException) {",
          "284:         throw ((RuntimeException)e);",
          "285:       } else {",
          "286:         throw new VertxException(e);",
          "287:       }",
          "288:     }",
          "294:     try {",
          "295:       return createContext(vertx, null, useAlpn, client, trustAll);",
          "296:     } catch (Exception e) {",
          "297:       if (e instanceof RuntimeException) {",
          "298:         throw (RuntimeException)e;",
          "299:       } else {",
          "300:         throw new VertxException(e);",
          "301:       }",
          "302:     }",
          "305:   private SslContext createContext(VertxInternal vertx, String serverName, boolean useAlpn, boolean client, boolean trustAll) throws Exception {",
          "306:     TrustManager[] mgrs = getTrustManagers(vertx, serverName);",
          "307:     KeyManagerFactory kmf = getKeyMgrFactory(vertx, serverName);",
          "309:     if (serverName != null && (client || mgrs != null || kmf != null)) {",
          "310:       if (mgrs == null) {",
          "311:         if (trustAll) {",
          "312:           mgrs = getTrustAllTrustManager();",
          "313:         } else {",
          "314:           mgrs = getDefaultTrustManager(vertx);",
          "315:         }",
          "317:       KeyManagerFactory kmf2 = kmf == null ? getDefaultKeyMgrFactory(vertx) : kmf;",
          "318:       TrustManagerFactory tmf = mgrs != null ? getTrustMgrFactory(vertx, mgrs) : null;",
          "319:       return sslContextMaps[idx].computeIfAbsent(serverName, s -> createContext2(kmf2, tmf, serverName, useAlpn, client));",
          "321:     return createDefaultContext(vertx, trustAll);",
          "324:   private SslContext createDefaultContext(VertxInternal vertx, boolean trustAll) throws Exception {",
          "325:     KeyManagerFactory kmf = getDefaultKeyMgrFactory(vertx);",
          "326:     TrustManager[] mgrs = trustAll ? getTrustAllTrustManager() : getDefaultTrustManager(vertx);",
          "327:     TrustManagerFactory tmf = mgrs != null ? getTrustMgrFactory(vertx, mgrs) : null;",
          "328:     int idx = useAlpn ? 0 : 1;",
          "329:     if (sslContexts[idx] == null) {",
          "330:       sslContexts[idx] = createContext2(kmf, tmf, null, useAlpn, client);",
          "331:     }",
          "332:     return sslContexts[idx];",
          "333:   }",
          "335:   public SslContext sslContext(VertxInternal vertx, String serverName, boolean useAlpn) throws Exception {",
          "336:     SslContext context = createContext(vertx, serverName, useAlpn, client, trustAll);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "294:     };",
          "295:   }",
          "298:     try {",
          "301:       SslContextFactory factory = sslProvider.result().get()",
          "302:         .useAlpn(useAlpn)",
          "303:         .forClient(client)",
          "",
          "[Removed Lines]",
          "297:   private SslContext createContext2(VertxInternal vertx, String serverName, boolean useAlpn, boolean client, boolean trustAll) {",
          "299:       TrustManagerFactory tmf = getTrustMgrFactory(vertx, serverName, trustAll);",
          "300:       KeyManagerFactory kmf = getKeyMgrFactory(vertx, serverName);",
          "",
          "[Added Lines]",
          "345:   private TrustManager[] getTrustManagers(VertxInternal vertx, String serverName) {",
          "346:     try {",
          "347:       TrustManager[] mgrs = null;",
          "348:       if (trustOptions != null) {",
          "349:         if (serverName != null) {",
          "350:           Function<String, TrustManager[]> mapper = trustOptions.trustManagerMapper(vertx);",
          "351:           if (mapper != null) {",
          "352:             mgrs = mapper.apply(serverName);",
          "353:           }",
          "354:           if (mgrs == null) {",
          "355:             TrustManagerFactory fact = trustOptions.getTrustManagerFactory(vertx);",
          "356:             if (fact != null) {",
          "357:               mgrs = fact.getTrustManagers();",
          "358:             }",
          "359:           }",
          "360:         }",
          "361:       }",
          "362:       return mgrs;",
          "363:     } catch (Exception e) {",
          "364:       if (e instanceof RuntimeException) {",
          "365:         throw (RuntimeException)e;",
          "366:       } else {",
          "367:         throw new VertxException(e);",
          "368:       }",
          "369:     }",
          "370:   }",
          "372:   private TrustManager[] getTrustAllTrustManager() {",
          "373:     return new TrustManager[]{createTrustAllTrustManager()};",
          "374:   }",
          "376:   private TrustManager[] getDefaultTrustManager(VertxInternal vertx) {",
          "377:     try {",
          "378:       if (trustOptions != null) {",
          "379:         TrustManagerFactory fact = trustOptions.getTrustManagerFactory(vertx);",
          "380:         if (fact != null) {",
          "381:           return fact.getTrustManagers();",
          "382:         }",
          "383:       }",
          "384:       return null;",
          "385:     } catch (Exception e) {",
          "386:       if (e instanceof RuntimeException) {",
          "387:         throw (RuntimeException)e;",
          "388:       } else {",
          "389:         throw new VertxException(e);",
          "390:       }",
          "391:     }",
          "392:   }",
          "394:   private SslContext createContext2(KeyManagerFactory kmf, TrustManagerFactory tmf, String serverName, boolean useAlpn, boolean client) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "326:   }",
          "328:   public SslHandler createSslHandler(VertxInternal vertx, SocketAddress remoteAddress, String serverName) {",
          "330:   }",
          "332:   public SslHandler createSslHandler(VertxInternal vertx, SocketAddress remoteAddress, String serverName, boolean useAlpn) {",
          "334:     SslHandler sslHandler;",
          "335:     Executor delegatedTaskExec = useWorkerPool ? vertx.getInternalWorkerPool().executor() : ImmediateExecutor.INSTANCE;",
          "336:     if (remoteAddress == null || remoteAddress.isDomainSocket()) {",
          "",
          "[Removed Lines]",
          "329:     return createSslHandler(vertx, remoteAddress, serverName, useAlpn);",
          "333:     SslContext sslContext = sslContext(vertx, serverName, useAlpn);",
          "",
          "[Added Lines]",
          "424:     try {",
          "425:       return createSslHandler(vertx, remoteAddress, serverName, useAlpn);",
          "426:     } catch (Exception e) {",
          "427:       if (e instanceof RuntimeException) {",
          "428:         throw (RuntimeException)e;",
          "429:       } else {",
          "430:         throw new VertxException(e);",
          "431:       }",
          "432:     }",
          "436:     SslContext sslContext = null;",
          "437:     try {",
          "438:       sslContext = sslContext(vertx, serverName, useAlpn);",
          "439:     } catch (Exception e) {",
          "440:       if (e instanceof RuntimeException) {",
          "441:         throw (RuntimeException)e;",
          "442:       } else {",
          "443:         throw new VertxException(e);",
          "444:       }",
          "445:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "358:   private KeyManagerFactory getKeyMgrFactory(VertxInternal vertx, String serverName) throws Exception {",
          "359:     KeyManagerFactory kmf = null;",
          "370:       }",
          "371:     }",
          "375:     return kmf;",
          "376:   }",
          "379:     return keyCertOptions == null ? null : keyCertOptions.getKeyManagerFactory(vertx);",
          "380:   }",
          "408:     if (crlPaths != null && crlValues != null && (crlPaths.size() > 0 || crlValues.size() > 0)) {",
          "409:       Stream<Buffer> tmp = crlPaths.",
          "410:         stream().",
          "",
          "[Removed Lines]",
          "360:     if (serverName != null) {",
          "361:       X509KeyManager mgr = keyCertOptions.keyManagerMapper(vertx).apply(serverName);",
          "362:       if (mgr != null) {",
          "363:         String keyStoreType = KeyStore.getDefaultType();",
          "364:         KeyStore ks = KeyStore.getInstance(keyStoreType);",
          "365:         ks.load(null, null);",
          "366:         ks.setKeyEntry(\"key\", mgr.getPrivateKey(null), new char[0], mgr.getCertificateChain(null));",
          "367:         String keyAlgorithm = KeyManagerFactory.getDefaultAlgorithm();",
          "368:         kmf = KeyManagerFactory.getInstance(keyAlgorithm);",
          "369:         kmf.init(ks, new char[0]);",
          "372:     if (kmf == null) {",
          "373:       kmf = getKeyMgrFactory(vertx);",
          "374:     }",
          "378:   private KeyManagerFactory getKeyMgrFactory(VertxInternal vertx) throws Exception {",
          "382:   private TrustManagerFactory getTrustMgrFactory(VertxInternal vertx, String serverName, boolean trustAll) throws Exception {",
          "383:     TrustManager[] mgrs = null;",
          "384:     if (trustAll) {",
          "385:       mgrs = new TrustManager[]{createTrustAllTrustManager()};",
          "386:     } else if (trustOptions != null) {",
          "387:       if (serverName != null) {",
          "388:         Function<String, TrustManager[]> mapper = trustOptions.trustManagerMapper(vertx);",
          "389:         if (mapper != null) {",
          "390:           mgrs = mapper.apply(serverName);",
          "391:         }",
          "392:         if (mgrs == null) {",
          "393:           TrustManagerFactory fact = trustOptions.getTrustManagerFactory(vertx);",
          "394:           if (fact != null) {",
          "395:             mgrs = fact.getTrustManagers();",
          "396:           }",
          "397:         }",
          "398:       } else {",
          "399:         TrustManagerFactory fact = trustOptions.getTrustManagerFactory(vertx);",
          "400:         if (fact != null) {",
          "401:           mgrs = fact.getTrustManagers();",
          "402:         }",
          "403:       }",
          "404:     }",
          "405:     if (mgrs == null) {",
          "406:       return null;",
          "407:     }",
          "",
          "[Added Lines]",
          "472:     if (keyCertOptions != null) {",
          "473:       if (serverName != null) {",
          "474:         X509KeyManager mgr = keyCertOptions.keyManagerMapper(vertx).apply(serverName);",
          "475:         if (mgr != null) {",
          "476:           String keyStoreType = KeyStore.getDefaultType();",
          "477:           KeyStore ks = KeyStore.getInstance(keyStoreType);",
          "478:           ks.load(null, null);",
          "479:           ks.setKeyEntry(\"key\", mgr.getPrivateKey(null), new char[0], mgr.getCertificateChain(null));",
          "480:           String keyAlgorithm = KeyManagerFactory.getDefaultAlgorithm();",
          "481:           kmf = KeyManagerFactory.getInstance(keyAlgorithm);",
          "482:           kmf.init(ks, new char[0]);",
          "483:         }",
          "489:   private KeyManagerFactory getDefaultKeyMgrFactory(VertxInternal vertx) throws Exception {",
          "493:   private TrustManagerFactory getTrustMgrFactory(VertxInternal vertx, TrustManager[] mgrs) throws Exception {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "429:     trustMgrs = trustMgrs.clone();",
          "430:     for (int i = 0;i < trustMgrs.length;i++) {",
          "431:       TrustManager trustMgr = trustMgrs[i];",
          "433:         X509TrustManager x509TrustManager = (X509TrustManager) trustMgr;",
          "434:         trustMgrs[i] = new X509TrustManager() {",
          "435:           @Override",
          "",
          "[Removed Lines]",
          "432:       if (trustMgr instanceof X509TrustManager) {",
          "",
          "[Added Lines]",
          "518:       if (trustMgr instanceof  X509TrustManager) {",
          "",
          "---------------"
        ],
        "src/main/java/io/vertx/core/net/impl/TCPServerBase.java||src/main/java/io/vertx/core/net/impl/TCPServerBase.java": [
          "File: src/main/java/io/vertx/core/net/impl/TCPServerBase.java -> src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "286:   public abstract Future<Void> close();",
          "288: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "288:   public int sniEntrySize() {",
          "289:     return sslHelper.sniEntrySize();",
          "290:   }",
          "",
          "---------------"
        ],
        "src/test/java/io/vertx/core/net/NetTest.java||src/test/java/io/vertx/core/net/NetTest.java": [
          "File: src/test/java/io/vertx/core/net/NetTest.java -> src/test/java/io/vertx/core/net/NetTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: import io.vertx.core.impl.logging.LoggerFactory;",
          "40: import io.vertx.core.json.JsonArray;",
          "41: import io.vertx.core.json.JsonObject;",
          "46: import io.vertx.core.spi.tls.SslContextFactory;",
          "47: import io.vertx.core.streams.ReadStream;",
          "48: import io.vertx.test.core.CheckingSender;",
          "",
          "[Removed Lines]",
          "42: import io.vertx.core.net.impl.HAProxyMessageCompletionHandler;",
          "43: import io.vertx.core.net.impl.NetServerImpl;",
          "44: import io.vertx.core.net.impl.NetSocketInternal;",
          "45: import io.vertx.core.net.impl.VertxHandler;",
          "",
          "[Added Lines]",
          "42: import io.vertx.core.net.impl.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77: import java.security.KeyStore;",
          "78: import java.security.cert.Certificate;",
          "79: import java.util.*;",
          "81: import java.util.concurrent.atomic.AtomicBoolean;",
          "82: import java.util.concurrent.atomic.AtomicInteger;",
          "83: import java.util.concurrent.atomic.AtomicLong;",
          "",
          "[Removed Lines]",
          "80: import java.util.concurrent.*;",
          "",
          "[Added Lines]",
          "77: import java.util.concurrent.CompletableFuture;",
          "78: import java.util.concurrent.ConcurrentHashMap;",
          "79: import java.util.concurrent.CountDownLatch;",
          "80: import java.util.concurrent.ExecutorService;",
          "81: import java.util.concurrent.Executors;",
          "82: import java.util.concurrent.TimeUnit;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1501:     assertEquals(\"host2.com\", cnOf(test.clientPeerCert()));",
          "1502:   }",
          "1504:   @Test",
          "1506:   public void testSniWithUnknownServer1() throws Exception {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1506:   @Test",
          "1507:   public void testClientSniMultipleServerName() throws Exception {",
          "1508:     List<String> receivedServerNames = Collections.synchronizedList(new ArrayList<>());",
          "1509:     server = vertx.createNetServer(new NetServerOptions()",
          "1510:       .setSni(true)",
          "1511:       .setSsl(true)",
          "1512:       .setKeyCertOptions(Cert.SNI_JKS.get())",
          "1513:     ).connectHandler(so -> {",
          "1514:       receivedServerNames.add(so.indicatedServerName());",
          "1515:     });",
          "1516:     startServer();",
          "1517:     List<String> serverNames = Arrays.asList(\"host1\", \"host2.com\", \"fake\");",
          "1518:     client = vertx.createNetClient(new NetClientOptions().setSsl(true).setTrustAll(true));",
          "1519:     List<String> cns = new ArrayList<>();",
          "1520:     for (String serverName : serverNames) {",
          "1521:       NetSocket so = client.connect(testAddress, serverName).toCompletionStage().toCompletableFuture().get();",
          "1522:       String host = cnOf(so.peerCertificates().get(0));",
          "1523:       cns.add(host);",
          "1524:     }",
          "1525:     assertEquals(Arrays.asList(\"host1\", \"host2.com\", \"localhost\"), cns);",
          "1526:     assertEquals(2, ((TCPServerBase)server).sniEntrySize());",
          "1527:     assertWaitUntil(() -> receivedServerNames.size() == 3);",
          "1528:     assertEquals(receivedServerNames, serverNames);",
          "1529:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}