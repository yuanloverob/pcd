{
  "cve_id": "CVE-2024-10451",
  "cve_desc": "A flaw was found in Keycloak. This issue occurs because sensitive runtime values, such as passwords, may be captured during the Keycloak build process and embedded as default values in bytecode, leading to unintended information disclosure. In Keycloak 26, sensitive data specified directly in environment variables during the build process is also stored as a default values, making it accessible during runtime. Indirect usage of environment variables for SPI options and Quarkus properties is also vulnerable due to unconditional expansion by PropertyMapper logic, capturing sensitive data as default values in all Keycloak versions up to 26.0.2.",
  "repo": "keycloak/keycloak",
  "patch_hash": "198214310eb45b86707f823ccb5a2d65c814b528",
  "patch_info": {
    "commit_hash": "198214310eb45b86707f823ccb5a2d65c814b528",
    "repo": "keycloak/keycloak",
    "commit_url": "https://github.com/keycloak/keycloak/commit/198214310eb45b86707f823ccb5a2d65c814b528",
    "files": [
      "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
      "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java",
      "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java"
    ],
    "message": "fix: ensures that properties are runtime properties are filtered (#35246)\n\ncloses: #CVE-2024-10451\n\nSigned-off-by: Steve Hawkins <shawkins@redhat.com>",
    "before_after_code_files": [
      "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
      "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java",
      "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java"
    ]
  },
  "patch_diff": {
    "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java": [
      "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: import org.keycloak.config.DeprecatedMetadata;",
      "43: import org.keycloak.config.Option;",
      "45: import org.keycloak.config.OptionCategory;",
      "46: import org.keycloak.quarkus.runtime.cli.PropertyException;",
      "47: import org.keycloak.quarkus.runtime.cli.ShortErrorMessageHandler;",
      "",
      "[Removed Lines]",
      "44: import org.keycloak.config.OptionBuilder;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56: public class PropertyMapper<T> {",
      "78:     private final Option<T> option;",
      "79:     private final String to;",
      "80:     private BooleanSupplier enabled;",
      "",
      "[Removed Lines]",
      "58:     static PropertyMapper<?> IDENTITY = new PropertyMapper<>(",
      "59:             new OptionBuilder<>(null, String.class).build(),",
      "60:             null,",
      "61:             () -> false,",
      "62:             \"\",",
      "63:             null,",
      "64:             null,",
      "65:             null,",
      "66:             null,",
      "67:             false,",
      "68:             null,",
      "69:             null,",
      "70:             () -> false,",
      "71:             \"\") {",
      "72:         @Override",
      "73:         public ConfigValue getConfigValue(String name, ConfigSourceInterceptorContext context) {",
      "74:             return context.proceed(name);",
      "75:         }",
      "76:     };",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java": [
      "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: import org.keycloak.quarkus.runtime.cli.command.Build;",
      "15: import org.keycloak.quarkus.runtime.cli.command.ShowConfig;",
      "16: import org.keycloak.quarkus.runtime.configuration.DisabledMappersInterceptor;",
      "17: import org.keycloak.quarkus.runtime.configuration.PersistedConfigSource;",
      "19: import java.util.ArrayList;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import org.keycloak.quarkus.runtime.configuration.MicroProfileConfigProvider;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:     }",
      "76:     public static ConfigValue getValue(ConfigSourceInterceptorContext context, String name) {",
      "78:     }",
      "80:     public static boolean isSpiBuildTimeProperty(String name) {",
      "81:         return name.startsWith(KC_SPI_PREFIX) && (name.endsWith(\"-provider\") || name.endsWith(\"-enabled\") || name.endsWith(\"-provider-default\"));",
      "82:     }",
      "84:     public static Map<OptionCategory, List<PropertyMapper<?>>> getRuntimeMappers() {",
      "85:         return MAPPERS.getRuntimeMappers();",
      "86:     }",
      "",
      "[Removed Lines]",
      "77:         return getMapperOrDefault(name, PropertyMapper.IDENTITY).getConfigValue(name, context);",
      "",
      "[Added Lines]",
      "78:         PropertyMapper<?> mapper = getMapper(name);",
      "80:         if ((isRebuild() || Environment.isRebuildCheck()) && isKeycloakRuntime(name, mapper)) {",
      "81:             return ConfigValue.builder().withName(name).build();",
      "82:         }",
      "83:         if (mapper == null) {",
      "84:             return context.proceed(name);",
      "85:         }",
      "86:         return mapper.getConfigValue(name, context);",
      "93:     private static boolean isKeycloakRuntime(String name, PropertyMapper<?> mapper) {",
      "94:         if (mapper == null) {",
      "95:             return name.startsWith(MicroProfileConfigProvider.NS_KEYCLOAK) && !isSpiBuildTimeProperty(name);",
      "96:         }",
      "97:         return mapper.isRunTime();",
      "98:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "150:         };",
      "151:     }",
      "157:     public static PropertyMapper<?> getMapper(String property, OptionCategory category) {",
      "158:         return getMapperOrDefault(property, null, category);",
      "159:     }",
      "",
      "[Removed Lines]",
      "153:     private static PropertyMapper<?> getMapperOrDefault(String property, PropertyMapper<?> defaultMapper) {",
      "154:         return getMapperOrDefault(property, defaultMapper, null);",
      "155:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "172:     }",
      "174:     public static Optional<PropertyMapper<?>> getDisabledMapper(String property) {",
      "177:         PropertyMapper<?> mapper = getDisabledBuildTimeMappers().get(property);",
      "178:         if (mapper == null) {",
      "",
      "[Removed Lines]",
      "175:         if (property == null) return Optional.empty();",
      "",
      "[Added Lines]",
      "187:         if (property == null) {",
      "188:             return Optional.empty();",
      "189:         }",
      "",
      "---------------"
    ],
    "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java": [
      "File: quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java -> quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "247:         cliResult.assertError(\"File specified via '--config-file' or '-cf' option does not exist.\");",
      "248:         cliResult.assertError(String.format(\"Try '%s --help' for more information on the available options.\", KeycloakDistribution.SCRIPT_CMD));",
      "249:     }",
      "250: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "251:     @RawDistOnly(reason = \"Containers are immutable\")",
      "252:     @Test",
      "253:     void testRuntimeValuesAreNotCaptured(KeycloakDistribution dist) {",
      "256:         CLIResult cliResult = dist.run(\"start\", \"--spi-events-listener-jboss-logging-success-level=invalid\", \"--http-enabled\", \"true\", \"--hostname-strict\", \"false\");",
      "257:         cliResult.assertError(\"Failed to start quarkus\");",
      "260:         if (!cliResult.getOutput().contains(\"Server configuration updated and persisted\")) {",
      "261:             cliResult = dist.run(\"build\", \"--spi-events-listener-jboss-logging-success-level=invalid\");",
      "262:             cliResult.assertBuild();",
      "263:         }",
      "266:         cliResult = dist.run(\"start\", \"--http-enabled\", \"true\", \"--hostname-strict\", \"false\");",
      "267:         cliResult.assertNoBuild();",
      "268:         cliResult.assertStarted();",
      "269:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fe39d1b5ebba9d489c330f61d7e2d4d95a695d5f",
      "candidate_info": {
        "commit_hash": "fe39d1b5ebba9d489c330f61d7e2d4d95a695d5f",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/fe39d1b5ebba9d489c330f61d7e2d4d95a695d5f",
        "files": [
          "quarkus/config-api/src/main/java/org/keycloak/config/DatabaseOptions.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/FeatureOptions.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/HttpOptions.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/LoggingOptions.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/MultiOption.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/Option.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/OptionBuilder.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/SecurityOptions.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/TruststoreOptions.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/PropertyMapperParameterConsumer.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/FeaturePropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/FeaturePropertyMappersTest.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/OptionValidationTest.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/LoggingDistTest.java",
          "quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java",
          "quarkus/tests/junit5/src/main/java/org/keycloak/it/junit5/extension/CLITestExtension.java"
        ],
        "message": "fix: provide better error messages for list options (#25918)\n\ncloses: #25235\n\nSigned-off-by: Steve Hawkins <shawkins@redhat.com>",
        "before_after_code_files": [
          "quarkus/config-api/src/main/java/org/keycloak/config/DatabaseOptions.java||quarkus/config-api/src/main/java/org/keycloak/config/DatabaseOptions.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/FeatureOptions.java||quarkus/config-api/src/main/java/org/keycloak/config/FeatureOptions.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/HttpOptions.java||quarkus/config-api/src/main/java/org/keycloak/config/HttpOptions.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/LoggingOptions.java||quarkus/config-api/src/main/java/org/keycloak/config/LoggingOptions.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/MultiOption.java||quarkus/config-api/src/main/java/org/keycloak/config/MultiOption.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/Option.java||quarkus/config-api/src/main/java/org/keycloak/config/Option.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/OptionBuilder.java||quarkus/config-api/src/main/java/org/keycloak/config/OptionBuilder.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/SecurityOptions.java||quarkus/config-api/src/main/java/org/keycloak/config/SecurityOptions.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/TruststoreOptions.java||quarkus/config-api/src/main/java/org/keycloak/config/TruststoreOptions.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/PropertyMapperParameterConsumer.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/PropertyMapperParameterConsumer.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/FeaturePropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/FeaturePropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/FeaturePropertyMappersTest.java||quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/FeaturePropertyMappersTest.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/OptionValidationTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/OptionValidationTest.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/LoggingDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/LoggingDistTest.java",
          "quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java||quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java",
          "quarkus/tests/junit5/src/main/java/org/keycloak/it/junit5/extension/CLITestExtension.java||quarkus/tests/junit5/src/main/java/org/keycloak/it/junit5/extension/CLITestExtension.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java"
          ],
          "candidate": [
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java"
          ]
        }
      },
      "candidate_diff": {
        "quarkus/config-api/src/main/java/org/keycloak/config/DatabaseOptions.java||quarkus/config-api/src/main/java/org/keycloak/config/DatabaseOptions.java": [
          "File: quarkus/config-api/src/main/java/org/keycloak/config/DatabaseOptions.java -> quarkus/config-api/src/main/java/org/keycloak/config/DatabaseOptions.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:             .category(OptionCategory.DATABASE)",
          "20:             .description(\"The database vendor.\")",
          "21:             .defaultValue(\"dev-file\")",
          "23:             .buildTime(true)",
          "24:             .build();",
          "",
          "[Removed Lines]",
          "22:             .expectedValues(Database::getDatabaseAliases)",
          "",
          "[Added Lines]",
          "22:             .expectedValues(Database.getDatabaseAliases())",
          "",
          "---------------"
        ],
        "quarkus/config-api/src/main/java/org/keycloak/config/FeatureOptions.java||quarkus/config-api/src/main/java/org/keycloak/config/FeatureOptions.java": [
          "File: quarkus/config-api/src/main/java/org/keycloak/config/FeatureOptions.java -> quarkus/config-api/src/main/java/org/keycloak/config/FeatureOptions.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: public class FeatureOptions {",
          "14:             .category(OptionCategory.FEATURE)",
          "15:             .description(\"Enables a set of one or more features.\")",
          "16:             .defaultValue(Optional.empty())",
          "18:             .buildTime(true)",
          "19:             .build();",
          "22:             .category(OptionCategory.FEATURE)",
          "23:             .description(\"Disables a set of one or more features.\")",
          "25:             .buildTime(true)",
          "26:             .build();",
          "",
          "[Removed Lines]",
          "13:     public static final Option<List> FEATURES = new OptionBuilder(\"features\", List.class, Profile.Feature.class)",
          "17:             .expectedValues(() -> getFeatureValues(true))",
          "21:     public static final Option<List> FEATURES_DISABLED = new OptionBuilder(\"features-disabled\", List.class, Profile.Feature.class)",
          "24:             .expectedValues(() -> getFeatureValues(false))",
          "",
          "[Added Lines]",
          "13:     public static final Option<List<String>> FEATURES = OptionBuilder.listOptionBuilder(\"features\", String.class)",
          "17:             .expectedValues(getFeatureValues(true))",
          "21:     public static final Option<List<String>> FEATURES_DISABLED = OptionBuilder.listOptionBuilder(\"features-disabled\", String.class)",
          "24:             .expectedValues(getFeatureValues(false))",
          "",
          "---------------"
        ],
        "quarkus/config-api/src/main/java/org/keycloak/config/HttpOptions.java||quarkus/config-api/src/main/java/org/keycloak/config/HttpOptions.java": [
          "File: quarkus/config-api/src/main/java/org/keycloak/config/HttpOptions.java -> quarkus/config-api/src/main/java/org/keycloak/config/HttpOptions.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.keycloak.config;",
          "3: import java.io.File;",
          "4: import org.keycloak.common.crypto.FipsMode;",
          "6: public class HttpOptions {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import java.util.Arrays;",
          "5: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:             .description(\"The cipher suites to use. If none is given, a reasonable default is selected.\")",
          "55:             .build();",
          "58:             .category(OptionCategory.HTTP)",
          "59:             .description(\"The list of protocols to explicitly enable.\")",
          "61:             .build();",
          "63:     public static final Option<File> HTTPS_CERTIFICATE_FILE = new OptionBuilder<>(\"https-certificate-file\", File.class)",
          "",
          "[Removed Lines]",
          "57:     public static final Option<String> HTTPS_PROTOCOLS = new OptionBuilder<>(\"https-protocols\", String.class)",
          "60:             .defaultValue(\"TLSv1.3,TLSv1.2\")",
          "",
          "[Added Lines]",
          "60:     public static final Option<List<String>> HTTPS_PROTOCOLS = OptionBuilder.listOptionBuilder(\"https-protocols\", String.class)",
          "63:             .defaultValue(Arrays.asList(\"TLSv1.3,TLSv1.2\"))",
          "",
          "---------------"
        ],
        "quarkus/config-api/src/main/java/org/keycloak/config/LoggingOptions.java||quarkus/config-api/src/main/java/org/keycloak/config/LoggingOptions.java": [
          "File: quarkus/config-api/src/main/java/org/keycloak/config/LoggingOptions.java -> quarkus/config-api/src/main/java/org/keycloak/config/LoggingOptions.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:                 .toList();",
          "31:     }",
          "34:             .category(OptionCategory.LOGGING)",
          "35:             .description(\"Enable one or more log handlers in a comma-separated list.\")",
          "38:             .build();",
          "40:     public enum Level {",
          "",
          "[Removed Lines]",
          "33:     public static final Option<List> LOG = new OptionBuilder(\"log\", List.class, Handler.class)",
          "36:             .expectedValues(() -> getAvailableHandlerNames())",
          "37:             .defaultValue(DEFAULT_LOG_HANDLER)",
          "",
          "[Added Lines]",
          "33:     public static final Option<List<Handler>> LOG = OptionBuilder.listOptionBuilder(\"log\", Handler.class)",
          "36:             .expectedValues(getAvailableHandlerNames())",
          "37:             .defaultValue(Arrays.asList(DEFAULT_LOG_HANDLER))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:         }",
          "54:     }",
          "57:             .category(OptionCategory.LOGGING)",
          "59:             .description(\"The log level of the root category or a comma-separated list of individual categories and their levels. For the root category, you don't need to specify a category.\")",
          "60:             .build();",
          "",
          "[Removed Lines]",
          "56:     public static final Option<String> LOG_LEVEL = new OptionBuilder<>(\"log-level\", String.class)",
          "58:             .defaultValue(DEFAULT_LOG_LEVEL.toString())",
          "",
          "[Added Lines]",
          "56:     public static final Option<List<String>> LOG_LEVEL = OptionBuilder.listOptionBuilder(\"log-level\", String.class)",
          "58:             .defaultValue(Arrays.asList(DEFAULT_LOG_LEVEL.toString()))",
          "",
          "---------------"
        ],
        "quarkus/config-api/src/main/java/org/keycloak/config/MultiOption.java||quarkus/config-api/src/main/java/org/keycloak/config/MultiOption.java": [
          "File: quarkus/config-api/src/main/java/org/keycloak/config/MultiOption.java -> quarkus/config-api/src/main/java/org/keycloak/config/MultiOption.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "quarkus/config-api/src/main/java/org/keycloak/config/Option.java||quarkus/config-api/src/main/java/org/keycloak/config/Option.java": [
          "File: quarkus/config-api/src/main/java/org/keycloak/config/Option.java -> quarkus/config-api/src/main/java/org/keycloak/config/Option.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import java.util.List;",
          "4: import java.util.Optional;",
          "7: public class Option<T> {",
          "",
          "[Removed Lines]",
          "5: import java.util.function.Supplier;",
          "",
          "[Added Lines]",
          "5: import java.util.stream.Collectors;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:     private final boolean buildTime;",
          "14:     private final String description;",
          "15:     private final Optional<T> defaultValue;",
          "17:     private final DeprecatedMetadata deprecatedMetadata;",
          "20:         this.type = type;",
          "21:         this.key = key;",
          "22:         this.category = category;",
          "",
          "[Removed Lines]",
          "16:     private final Supplier<List<String>> expectedValues;",
          "19:     public Option(Class<T> type, String key, OptionCategory category, boolean hidden, boolean buildTime, String description, Optional<T> defaultValue, Supplier<List<String>> expectedValues, DeprecatedMetadata deprecatedMetadata) {",
          "",
          "[Added Lines]",
          "16:     private final List<String> expectedValues;",
          "19:     public Option(Class<T> type, String key, OptionCategory category, boolean hidden, boolean buildTime, String description, Optional<T> defaultValue, List<String> expectedValues, DeprecatedMetadata deprecatedMetadata) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:     }",
          "55:     public List<String> getExpectedValues() {",
          "57:     }",
          "59:     public Optional<DeprecatedMetadata> getDeprecatedMetadata() {",
          "",
          "[Removed Lines]",
          "56:         return expectedValues.get();",
          "",
          "[Added Lines]",
          "56:         return expectedValues;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "91:         return description;",
          "92:     }",
          "93: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:     public static String getDefaultValueString(Object value) {",
          "95:         if (value == null) {",
          "96:             return null;",
          "97:         }",
          "98:         if (value instanceof List) {",
          "99:             return ((List<?>) value).stream().map(String::valueOf).collect(Collectors.joining(\",\"));",
          "100:         }",
          "101:         return String.valueOf(value);",
          "102:     }",
          "",
          "---------------"
        ],
        "quarkus/config-api/src/main/java/org/keycloak/config/OptionBuilder.java||quarkus/config-api/src/main/java/org/keycloak/config/OptionBuilder.java": [
          "File: quarkus/config-api/src/main/java/org/keycloak/config/OptionBuilder.java -> quarkus/config-api/src/main/java/org/keycloak/config/OptionBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.keycloak.config;",
          "3: import java.util.List;",
          "4: import java.util.Optional;",
          "5: import java.util.Set;",
          "7: import java.util.stream.Collectors;",
          "9: public class OptionBuilder<T> {",
          "21:     private final Class<T> type;",
          "23:     private final String key;",
          "24:     private OptionCategory category;",
          "25:     private boolean hidden;",
          "26:     private boolean build;",
          "27:     private String description;",
          "28:     private Optional<T> defaultValue;",
          "30:     private DeprecatedMetadata deprecatedMetadata;",
          "32:     public OptionBuilder(String key, Class<T> type) {",
          "33:         this(key, type, null);",
          "34:     }",
          "37:         this.type = type;",
          "39:         this.key = key;",
          "40:         category = OptionCategory.GENERAL;",
          "41:         hidden = false;",
          "42:         build = false;",
          "43:         description = null;",
          "48:         }",
          "51:         }",
          "54:         }",
          "55:     }",
          "",
          "[Removed Lines]",
          "6: import java.util.function.Supplier;",
          "11:     private  static final Supplier<List<String>> EMPTY_VALUES_SUPPLIER = List::of;",
          "12:     private  static final Supplier<List<String>> BOOLEAN_TYPE_VALUES = new Supplier<List<String>>() {",
          "13:         List<String> values = List.of(Boolean.TRUE.toString(), Boolean.FALSE.toString());",
          "15:         @Override",
          "16:         public List<String> get() {",
          "17:             return values;",
          "18:         }",
          "19:     };",
          "22:     private final Class<T> auxiliaryType;",
          "29:     private Supplier<List<String>> expectedValues;",
          "36:     public OptionBuilder(String key, Class<T> type, Class<T> auxiliaryType) {",
          "38:         this.auxiliaryType = auxiliaryType;",
          "44:         defaultValue = Boolean.class.equals(type) ? Optional.of((T) Boolean.FALSE) : Optional.empty();",
          "45:         expectedValues = EMPTY_VALUES_SUPPLIER;",
          "46:         if (Boolean.class.equals(type)) {",
          "47:             expectedValues(BOOLEAN_TYPE_VALUES);",
          "49:         if (Enum.class.isAssignableFrom(type)) {",
          "50:             expectedValues((Class<? extends Enum>) type);",
          "52:         if (auxiliaryType != null && Enum.class.isAssignableFrom(auxiliaryType)) {",
          "53:             expectedValues((Class<? extends Enum>) auxiliaryType);",
          "",
          "[Added Lines]",
          "3: import java.util.Collection;",
          "5: import java.util.Map;",
          "12:     private static final List<String> BOOLEAN_TYPE_VALUES = List.of(Boolean.TRUE.toString(), Boolean.FALSE.toString());",
          "21:     private List<String> expectedValues = List.of();",
          "24:     public static <A> OptionBuilder<List<A>> listOptionBuilder(String key, Class<A> type) {",
          "25:         return new OptionBuilder(key, List.class, type);",
          "26:     }",
          "32:     private OptionBuilder(String key, Class<T> type, Class<?> auxiliaryType) {",
          "34:         if (type.isArray() || ((Collection.class.isAssignableFrom(type) || Map.class.isAssignableFrom(type)) && type != java.util.List.class)) {",
          "35:             throw new IllegalArgumentException(\"Non-List multi-valued options are not yet supported\");",
          "36:         }",
          "42:         Class<?> expected = type;",
          "43:         if (auxiliaryType != null) {",
          "44:             expected = auxiliaryType;",
          "46:         defaultValue = Boolean.class.equals(expected) ? Optional.of((T) Boolean.FALSE) : Optional.empty();",
          "47:         if (Boolean.class.equals(expected)) {",
          "48:             expectedValues(BOOLEAN_TYPE_VALUES);",
          "50:         if (Enum.class.isAssignableFrom(expected)) {",
          "51:             expectedValues((Class<? extends Enum>) expected);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:         return this;",
          "85:     }",
          "88:         this.expectedValues = expected;",
          "89:         return this;",
          "90:     }",
          "92:     public OptionBuilder<T> expectedValues(Class<? extends Enum> expected) {",
          "101:         return this;",
          "102:     }",
          "104:     public OptionBuilder<T> expectedValues(T ... expected) {",
          "113:         return this;",
          "114:     }",
          "",
          "[Removed Lines]",
          "87:     public OptionBuilder<T> expectedValues(Supplier<List<String>> expected) {",
          "93:         this.expectedValues = new Supplier<>() {",
          "94:             List<String> values = List.of(expected.getEnumConstants()).stream().map(Object::toString).collect(Collectors.toList());",
          "96:             @Override",
          "97:             public List<String> get() {",
          "98:                 return values;",
          "99:             }",
          "100:         };",
          "105:         this.expectedValues = new Supplier<>() {",
          "106:             List<String> values = List.of(expected).stream().map(v -> v.toString()).collect(Collectors.toList());",
          "108:             @Override",
          "109:             public List<String> get() {",
          "110:                 return values;",
          "111:             }",
          "112:         };",
          "",
          "[Added Lines]",
          "85:     public OptionBuilder<T> expectedValues(List<String> expected) {",
          "91:         this.expectedValues = List.of(expected.getEnumConstants()).stream().map(Object::toString).collect(Collectors.toList());",
          "96:         this.expectedValues = List.of(expected).stream().map(v -> v.toString()).collect(Collectors.toList());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:     public Option<T> build() {",
          "143:     }",
          "145: }",
          "",
          "[Removed Lines]",
          "138:         if (auxiliaryType != null) {",
          "139:             return new MultiOption<T>(type, auxiliaryType, key, category, hidden, build, description, defaultValue, expectedValues, deprecatedMetadata);",
          "140:         } else {",
          "141:             return new Option<T>(type, key, category, hidden, build, description, defaultValue, expectedValues, deprecatedMetadata);",
          "142:         }",
          "",
          "[Added Lines]",
          "122:         return new Option<T>(type, key, category, hidden, build, description, defaultValue, expectedValues, deprecatedMetadata);",
          "",
          "---------------"
        ],
        "quarkus/config-api/src/main/java/org/keycloak/config/SecurityOptions.java||quarkus/config-api/src/main/java/org/keycloak/config/SecurityOptions.java": [
          "File: quarkus/config-api/src/main/java/org/keycloak/config/SecurityOptions.java -> quarkus/config-api/src/main/java/org/keycloak/config/SecurityOptions.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:     public static final Option<FipsMode> FIPS_MODE = new OptionBuilder<>(\"fips-mode\", FipsMode.class)",
          "12:             .category(OptionCategory.SECURITY)",
          "14:             .buildTime(true)",
          "15:             .description(\"Sets the FIPS mode. If '\" + FipsMode.NON_STRICT + \"' is set, FIPS is enabled but on non-approved mode. For full FIPS compliance, set '\" + FipsMode.STRICT + \"' to run on approved mode. \"",
          "16:                     + \"This option defaults to '\" + FipsMode.DISABLED + \"' when '\" + Profile.Feature.FIPS.getKey() + \"' feature is disabled, which is by default. \"",
          "",
          "[Removed Lines]",
          "13:             .expectedValues(SecurityOptions::getFipsModeValues)",
          "",
          "[Added Lines]",
          "13:             .expectedValues(getFipsModeValues())",
          "",
          "---------------"
        ],
        "quarkus/config-api/src/main/java/org/keycloak/config/TruststoreOptions.java||quarkus/config-api/src/main/java/org/keycloak/config/TruststoreOptions.java": [
          "File: quarkus/config-api/src/main/java/org/keycloak/config/TruststoreOptions.java -> quarkus/config-api/src/main/java/org/keycloak/config/TruststoreOptions.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import org.keycloak.common.enums.HostnameVerificationPolicy;",
          "5: public class TruststoreOptions {",
          "8:             .category(OptionCategory.TRUSTSTORE)",
          "9:             .description(\"List of pkcs12 (p12 or pfx file extensions), PEM files, or directories containing those files that will be used as a system truststore.\")",
          "10:             .build();",
          "",
          "[Removed Lines]",
          "7:     public static final Option<String> TRUSTSTORE_PATHS = new OptionBuilder<>(\"truststore-paths\", String.class)",
          "",
          "[Added Lines]",
          "5: import java.util.List;",
          "9:     public static final Option<List<String>> TRUSTSTORE_PATHS = OptionBuilder.listOptionBuilder(\"truststore-paths\", String.class)",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: import org.eclipse.microprofile.config.spi.ConfigSource;",
          "57: import org.jboss.logging.Logger;",
          "58: import org.keycloak.config.DeprecatedMetadata;",
          "60: import org.keycloak.config.OptionCategory;",
          "61: import org.keycloak.quarkus.runtime.cli.command.AbstractCommand;",
          "62: import org.keycloak.quarkus.runtime.cli.command.Build;",
          "",
          "[Removed Lines]",
          "59: import org.keycloak.config.MultiOption;",
          "",
          "[Added Lines]",
          "59: import org.keycloak.config.Option;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "399:             if (runtimeValue == null && isNotBlank(persistedValue)) {",
          "400:                 PropertyMapper<?> mapper = PropertyMappers.getMapper(propertyName);",
          "404:                     continue;",
          "405:                 }",
          "",
          "[Removed Lines]",
          "402:                 if (mapper != null && persistedValue.equals(mapper.getDefaultValue().map(Object::toString).orElse(null))) {",
          "",
          "[Added Lines]",
          "402:                 if (mapper != null && persistedValue.equals(Option.getDefaultValueString(mapper.getDefaultValue().orElse(null)))) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "608:                         .hidden(mapper.isHidden());",
          "610:                 if (mapper.getDefaultValue().isPresent()) {",
          "612:                 }",
          "614:                 if (mapper.getType() != null) {",
          "615:                     optBuilder.type(mapper.getType());",
          "619:                 } else {",
          "620:                     optBuilder.type(String.class);",
          "621:                 }",
          "",
          "[Removed Lines]",
          "611:                     optBuilder.defaultValue(mapper.getDefaultValue().get().toString());",
          "616:                     if (mapper.getOption() instanceof MultiOption) {",
          "617:                         optBuilder.auxiliaryTypes(((MultiOption<?>) mapper.getOption()).getAuxiliaryType());",
          "618:                     }",
          "",
          "[Added Lines]",
          "611:                     optBuilder.defaultValue(Option.getDefaultValueString(mapper.getDefaultValue().get()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "639:         }",
          "641:         mapper.getDefaultValue()",
          "643:                 .map(d -> \" Default: \" + d + \".\")",
          "644:                 .ifPresent(transformedDesc::append);",
          "",
          "[Removed Lines]",
          "642:                 .map(d -> d.toString().replaceAll(\"%\", \"%%\")) // escape formats",
          "",
          "[Added Lines]",
          "639:                 .map(d -> Option.getDefaultValueString(d).replaceAll(\"%\", \"%%\")) // escape formats",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/PropertyMapperParameterConsumer.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/PropertyMapperParameterConsumer.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/PropertyMapperParameterConsumer.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/PropertyMapperParameterConsumer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import static org.keycloak.quarkus.runtime.cli.Picocli.ARG_PREFIX;",
          "23: import java.util.Stack;",
          "27: import picocli.CommandLine;",
          "28: import picocli.CommandLine.Model.ArgSpec;",
          "29: import picocli.CommandLine.Model.CommandSpec;",
          "",
          "[Removed Lines]",
          "22: import java.util.Collection;",
          "25: import org.keycloak.utils.StringUtil;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:         CommandLine commandLine = commandSpec.commandLine();",
          "54:         if (args.isEmpty() || !isOptionValue(args.peek())) {",
          "57:         }",
          "60:         args.pop();",
          "62:         if (!args.isEmpty() && isOptionValue(args.peek())) {",
          "65:         }",
          "66:     }",
          "70:     }",
          "72:     private boolean isOptionValue(String arg) {",
          "",
          "[Removed Lines]",
          "55:             throw new ParameterException(",
          "56:                     commandLine, \"Missing required value for option '\" + name + \"' (\" + argSpec.paramLabel() + \").\" + getExpectedValuesMessage(argSpec.completionCandidates(), option.completionCandidates()));",
          "63:             throw new ParameterException(",
          "64:                     commandLine, \"Option '\" + name + \"' expects a single value (\" + argSpec.paramLabel() + \")\" + getExpectedValuesMessage(argSpec.completionCandidates(), option.completionCandidates()));",
          "68:     public static String getErrorMessage(String name, String value, Iterable<String> specCandidates, Iterable<String> optionCandidates) {",
          "69:         return \"Invalid value for option '\" + name + \"': \" + value + \".\" + getExpectedValuesMessage(specCandidates, optionCandidates);",
          "",
          "[Added Lines]",
          "52:             throw new ParameterException(commandLine,",
          "53:                     \"Missing required value. \" + getExpectedMessage(argSpec, option, name));",
          "60:             throw new ParameterException(commandLine, getExpectedMessage(argSpec, option, name));",
          "64:     private String getExpectedMessage(ArgSpec argSpec, OptionSpec option, String name) {",
          "65:         return String.format(\"Option '%s' (%s) expects %s.%s\", name, argSpec.paramLabel(),",
          "66:                 option.typeInfo().isMultiValue() ? \"one or more comma separated values without whitespace\": \"a single value\",",
          "67:                 getExpectedValuesMessage(argSpec.completionCandidates(), option.completionCandidates()));",
          "68:     }",
          "70:     public static String getErrorMessage(String name, String value, Iterable<String> expected) {",
          "71:         return String.format(\"Invalid value for option '%s': %s.%s\", name, value,",
          "72:                 getExpectedValuesMessage(expected, expected));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:         return optionCandidates.iterator().hasNext() ? \" Expected values are: \" + String.join(\", \", specCandidates) : \"\";",
          "78:     }",
          "98: }",
          "",
          "[Removed Lines]",
          "80:     public static boolean isExpectedValue(Collection<String> expectedValues, String value) {",
          "81:         if (expectedValues.isEmpty()) {",
          "83:             return true;",
          "84:         }",
          "86:         if (StringUtil.isBlank(value)) {",
          "87:             return false;",
          "88:         }",
          "90:         for (String v : value.split(\",\")) {",
          "91:             if (!expectedValues.contains(v)) {",
          "92:                 return false;",
          "93:             }",
          "94:         }",
          "96:         return true;",
          "97:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/FeaturePropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/FeaturePropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/FeaturePropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/FeaturePropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import java.util.regex.Matcher;",
          "10: import java.util.regex.Pattern;",
          "11: import java.util.stream.Collectors;",
          "14: import static org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper.fromOption;",
          "",
          "[Removed Lines]",
          "12: import java.util.stream.Stream;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:         return new PropertyMapper[] {",
          "25:                 fromOption(FeatureOptions.FEATURES)",
          "26:                         .paramLabel(\"feature\")",
          "28:                         .build(),",
          "29:                 fromOption(FeatureOptions.FEATURES_DISABLED)",
          "30:                         .paramLabel(\"feature\")",
          "",
          "[Removed Lines]",
          "27:                         .validator((mapper, value) -> validateEnabledFeatures(value.getValue()))",
          "",
          "[Added Lines]",
          "26:                         .validator((mapper, value) -> mapper.validateExpectedValues(value,",
          "27:                                 (c, v) -> validateEnabledFeature(v)))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "32:         };",
          "33:     }",
          "39:             }",
          "66:     }",
          "67: }",
          "",
          "[Removed Lines]",
          "35:     public static void validateEnabledFeatures(String s) {",
          "36:         Stream.of(s.split(\",\")).forEach(feature -> {",
          "37:             if (!Profile.getFeatureVersions(feature).isEmpty()) {",
          "38:                 return;",
          "40:             if (feature.equals(Profile.Feature.Type.PREVIEW.name().toLowerCase())) {",
          "41:                 return;",
          "42:             }",
          "43:             Matcher matcher = VERSIONED_PATTERN.matcher(feature);",
          "44:             if (!matcher.matches()) {",
          "45:                 if (feature.contains(\":\")) {",
          "46:                     throw new PropertyException(String.format(",
          "47:                             \"%s has an invalid format for enabling a feature, expected format is feature:v{version}, e.g. docker:v1\",",
          "48:                             feature));",
          "49:                 }",
          "50:                 throw new PropertyException(String.format(\"%s is an unrecognized feature, it should be one of %s\", feature,",
          "51:                         FeatureOptions.getFeatureValues(false)));",
          "52:             }",
          "53:             String unversionedFeature = matcher.group(1);",
          "54:             Set<Feature> featureVersions = Profile.getFeatureVersions(unversionedFeature);",
          "55:             if (featureVersions.isEmpty()) {",
          "56:                 throw new PropertyException(String.format(\"%s has an unrecognized feature, it should be one of %s\",",
          "57:                         feature, FeatureOptions.getFeatureValues(false)));",
          "58:             }",
          "59:             int version = Integer.parseInt(matcher.group(2));",
          "60:             if (featureVersions.stream().noneMatch(f -> f.getVersion() == version)) {",
          "61:                 throw new PropertyException(",
          "62:                         String.format(\"%s has an unrecognized feature version, it should be one of %s\", feature,",
          "63:                                 featureVersions.stream().map(Feature::getVersion).map(String::valueOf).collect(Collectors.toList())));",
          "64:             }",
          "65:         });",
          "",
          "[Added Lines]",
          "35:     public static void validateEnabledFeature(String feature) {",
          "36:         if (!Profile.getFeatureVersions(feature).isEmpty()) {",
          "37:             return;",
          "38:         }",
          "39:         if (feature.equals(Profile.Feature.Type.PREVIEW.name().toLowerCase())) {",
          "40:             return;",
          "41:         }",
          "42:         Matcher matcher = VERSIONED_PATTERN.matcher(feature);",
          "43:         if (!matcher.matches()) {",
          "44:             if (feature.contains(\":\")) {",
          "45:                 throw new PropertyException(String.format(",
          "46:                         \"%s has an invalid format for enabling a feature, expected format is feature:v{version}, e.g. docker:v1\",",
          "47:                         feature));",
          "49:             throw new PropertyException(String.format(\"%s is an unrecognized feature, it should be one of %s\", feature,",
          "50:                     FeatureOptions.getFeatureValues(false)));",
          "51:         }",
          "52:         String unversionedFeature = matcher.group(1);",
          "53:         Set<Feature> featureVersions = Profile.getFeatureVersions(unversionedFeature);",
          "54:         if (featureVersions.isEmpty()) {",
          "55:             throw new PropertyException(String.format(\"%s has an unrecognized feature, it should be one of %s\",",
          "56:                     feature, FeatureOptions.getFeatureValues(false)));",
          "57:         }",
          "58:         int version = Integer.parseInt(matcher.group(2));",
          "59:         if (!featureVersions.stream().anyMatch(f -> f.getVersion() == version)) {",
          "60:             throw new PropertyException(",
          "61:                     String.format(\"%s has an unrecognized feature version, it should be one of %s\", feature,",
          "62:                             featureVersions.stream().map(Feature::getVersion).map(String::valueOf).collect(Collectors.toList())));",
          "63:         }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import static org.keycloak.quarkus.runtime.configuration.Configuration.toEnvVarFormat;",
          "26: import java.util.List;",
          "28: import java.util.Optional;",
          "29: import java.util.function.BiConsumer;",
          "30: import java.util.function.BiFunction;",
          "",
          "[Removed Lines]",
          "27: import java.util.Objects;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: import io.smallrye.config.ConfigSourceInterceptorContext;",
          "33: import io.smallrye.config.ConfigValue;",
          "36: import org.keycloak.config.DeprecatedMetadata;",
          "37: import org.keycloak.config.Option;",
          "38: import org.keycloak.config.OptionBuilder;",
          "",
          "[Removed Lines]",
          "35: import org.jboss.logging.Logger;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:     private String cliFormat;",
          "70:     private BiConsumer<PropertyMapper<T>, ConfigValue> validator;",
          "74:     PropertyMapper(Option<T> option, String to, BiFunction<Optional<String>, ConfigSourceInterceptorContext, Optional<String>> mapper,",
          "75:                    String mapFrom, String paramLabel, boolean mask, BiConsumer<PropertyMapper<T>, ConfigValue> validator) {",
          "76:         this.option = option;",
          "",
          "[Removed Lines]",
          "72:     private static final Logger logger = Logger.getLogger(PropertyMapper.class);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119:                     PropertyMapper<?> parentMapper = PropertyMappers.getMapper(parentKey);",
          "121:                     if (parentMapper != null && parentMapper.getDefaultValue().isPresent()) {",
          "123:                     }",
          "124:                 }",
          "126:                 return transformValue(name, ofNullable(parentValue == null ? null : parentValue.getValue()), context, null);",
          "127:             }",
          "131:             if (defaultValue != null) {",
          "132:                 return defaultValue;",
          "",
          "[Removed Lines]",
          "122:                         parentValue = ConfigValue.builder().withValue(parentMapper.getDefaultValue().get().toString()).build();",
          "129:             ConfigValue defaultValue = transformValue(name, this.option.getDefaultValue().map(Objects::toString), context, null);",
          "",
          "[Added Lines]",
          "118:                         parentValue = ConfigValue.builder().withValue(Option.getDefaultValueString(parentMapper.getDefaultValue().get())).build();",
          "125:             ConfigValue defaultValue = transformValue(name, this.option.getDefaultValue().map(Option::getDefaultValueString), context, null);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "242:         private String mapFrom = null;",
          "243:         private boolean isMasked = false;",
          "244:         private String paramLabel;",
          "247:         public Builder(Option<T> option) {",
          "248:             this.option = option;",
          "",
          "[Removed Lines]",
          "245:         private BiConsumer<PropertyMapper<T>, ConfigValue> validator = (mapper, value) -> mapper.validateExpectedValues(value);",
          "",
          "[Added Lines]",
          "241:         private BiConsumer<PropertyMapper<T>, ConfigValue> validator = (mapper, value) -> mapper.validateExpectedValues(value, (c, v) -> mapper.validateSingleValue(c, v));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "296:         }",
          "297:     }",
          "302:         }",
          "308:     }",
          "310: }",
          "",
          "[Removed Lines]",
          "299:     public void validateExpectedValues(ConfigValue value) {",
          "300:         if (PropertyMapperParameterConsumer.isExpectedValue(getExpectedValues(), value.getValue())) {",
          "301:             return;",
          "303:         boolean cli = Optional.ofNullable(value.getConfigSourceName()).filter(name -> name.contains(ConfigArgsConfigSource.NAME)).isPresent();",
          "304:         throw new PropertyException(",
          "305:                 PropertyMapperParameterConsumer.getErrorMessage(cli ? this.getCliFormat() : getFrom(),",
          "306:                         value.getValue(), getExpectedValues(), getExpectedValues())",
          "307:                         + (cli ? \"\" : \". From ConfigSource \" + value.getConfigSourceName()));",
          "",
          "[Added Lines]",
          "295:     public void validateExpectedValues(ConfigValue configValue, BiConsumer<ConfigValue, String> singleValidator) {",
          "296:         String value = configValue.getValue();",
          "298:         boolean multiValued = getOption().getType() == java.util.List.class;",
          "300:         String[] values = multiValued ? value.split(\",\") : new String[] { value };",
          "301:         for (String v : values) {",
          "302:             boolean cli = isCliOption(configValue);",
          "303:             if (multiValued && !v.trim().equals(v)) {",
          "304:                 throw new PropertyException(\"Invalid value for multivalued option '\" + (cli ? this.getCliFormat() : getFrom())",
          "305:                         + \"': list value '\" + v + \"' should not have leading nor trailing whitespace\"",
          "306:                         + getConfigSourceMessage(configValue, cli));",
          "307:             }",
          "308:             singleValidator.accept(configValue, v);",
          "310:     }",
          "312:     private boolean isCliOption(ConfigValue configValue) {",
          "313:         return Optional.ofNullable(configValue.getConfigSourceName()).filter(name -> name.contains(ConfigArgsConfigSource.NAME)).isPresent();",
          "314:     }",
          "316:     void validateSingleValue(ConfigValue configValue, String v) {",
          "317:         List<String> expectedValues = getExpectedValues();",
          "318:         if (!expectedValues.isEmpty() && !expectedValues.contains(v)) {",
          "319:             boolean cli = isCliOption(configValue);",
          "320:             throw new PropertyException(",
          "321:                     PropertyMapperParameterConsumer.getErrorMessage(cli ? this.getCliFormat() : getFrom(), v,",
          "322:                             expectedValues) + getConfigSourceMessage(configValue, cli));",
          "323:         }",
          "324:     }",
          "326:     String getConfigSourceMessage(ConfigValue configValue, boolean cli) {",
          "327:         return cli ? \"\" : \". From ConfigSource \" + configValue.getConfigSourceName();",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/FeaturePropertyMappersTest.java||quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/FeaturePropertyMappersTest.java": [
          "File: quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/FeaturePropertyMappersTest.java -> quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/FeaturePropertyMappersTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     @Test",
          "30:     public void testInvalidFeatureFormat() {",
          "32:     }",
          "34:     @Test",
          "35:     public void testInvalidFeature() {",
          "37:     }",
          "39:     @Test",
          "40:     public void testInvalidVersionedFeature() {",
          "42:     }",
          "44:     @Test",
          "45:     public void testInvalidFeatureVersion() {",
          "47:     }",
          "49:     @Test",
          "50:     public void testValidFeatures() {",
          "53:     }",
          "55: }",
          "",
          "[Removed Lines]",
          "31:         assertThrows(PropertyException.class, () -> FeaturePropertyMappers.validateEnabledFeatures(\"invalid:\"));",
          "36:         assertThrows(PropertyException.class, () -> FeaturePropertyMappers.validateEnabledFeatures(\"invalid\"));",
          "41:         assertThrows(PropertyException.class, () -> FeaturePropertyMappers.validateEnabledFeatures(\"invalid:v1\"));",
          "46:         assertThrows(PropertyException.class, () -> FeaturePropertyMappers.validateEnabledFeatures(Feature.DOCKER.getUnversionedKey() + \":v0\"));",
          "51:         FeaturePropertyMappers.validateEnabledFeatures(",
          "52:                 Feature.DOCKER.getUnversionedKey() + \",\" + \"preview\" + \",\" + Feature.ACCOUNT2.getVersionedKey());",
          "",
          "[Added Lines]",
          "31:         assertThrows(PropertyException.class, () -> FeaturePropertyMappers.validateEnabledFeature(\"invalid:\"));",
          "36:         assertThrows(PropertyException.class, () -> FeaturePropertyMappers.validateEnabledFeature(\"invalid\"));",
          "41:         assertThrows(PropertyException.class, () -> FeaturePropertyMappers.validateEnabledFeature(\"invalid:v1\"));",
          "46:         assertThrows(PropertyException.class, () -> FeaturePropertyMappers.validateEnabledFeature(Feature.DOCKER.getUnversionedKey() + \":v0\"));",
          "51:         FeaturePropertyMappers.validateEnabledFeature(\"preview\");",
          "52:         FeaturePropertyMappers.validateEnabledFeature(Feature.ACCOUNT2.getVersionedKey());",
          "",
          "---------------"
        ],
        "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/OptionValidationTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/OptionValidationTest.java": [
          "File: quarkus/tests/integration/src/test/java/org/keycloak/it/cli/OptionValidationTest.java -> quarkus/tests/integration/src/test/java/org/keycloak/it/cli/OptionValidationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     @Launch({\"build\", \"--db\"})",
          "37:     public void failMissingOptionValue(LaunchResult result) {",
          "38:         CLIResult cliResult = (CLIResult) result;",
          "40:     }",
          "42:     @Test",
          "43:     @Launch({\"build\", \"--db\", \"foo\", \"bar\"})",
          "44:     public void failMultipleOptionValue(LaunchResult result) {",
          "45:         CLIResult cliResult = (CLIResult) result;",
          "47:     }",
          "49:     @Test",
          "",
          "[Removed Lines]",
          "39:         assertThat(cliResult.getErrorOutput(), containsString(\"Missing required value for option '--db' (vendor). Expected values are: dev-file, dev-mem, mariadb, mssql, mysql, oracle, postgres\"));",
          "46:         assertThat(cliResult.getErrorOutput(), containsString(\"Option '--db' expects a single value (vendor) Expected values are: dev-file, dev-mem, mariadb, mssql, mysql, oracle, postgres\"));",
          "",
          "[Added Lines]",
          "39:         assertThat(cliResult.getErrorOutput(), containsString(\"Missing required value. Option '--db' (vendor) expects a single value. Expected values are: dev-file, dev-mem, mariadb, mssql, mysql, oracle, postgres\"));",
          "46:         assertThat(cliResult.getErrorOutput(), containsString(\"Option '--db' (vendor) expects a single value. Expected values are: dev-file, dev-mem, mariadb, mssql, mysql, oracle, postgres\"));",
          "47:     }",
          "49:     @Test",
          "50:     @Launch({\"build\", \"--features\", \"account2\", \"account3\"})",
          "51:     public void failMultipleMultiOptionValue(LaunchResult result) {",
          "52:         CLIResult cliResult = (CLIResult) result;",
          "53:         assertThat(cliResult.getErrorOutput(), containsString(\"Option '--features' (feature) expects one or more comma separated values without whitespace. Expected values are: \"));",
          "54:     }",
          "56:     @Test",
          "57:     @Launch({\"build\", \"--features\", \"xyz,account2\"})",
          "58:     public void failInvalidMultiOptionValue(LaunchResult result) {",
          "59:         CLIResult cliResult = (CLIResult) result;",
          "60:         assertThat(cliResult.getErrorOutput(), containsString(\"xyz is an unrecognized feature, it should be one of\"));",
          "",
          "---------------"
        ],
        "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/LoggingDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/LoggingDistTest.java": [
          "File: quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/LoggingDistTest.java -> quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/LoggingDistTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:     void failUnknownHandlersInConfFile(KeycloakDistribution dist) {",
          "146:         dist.copyOrReplaceFileFromClasspath(\"/logging/keycloak.conf\", Paths.get(\"conf\", \"keycloak.conf\"));",
          "147:         CLIResult cliResult = dist.run(\"start-dev\");",
          "149:     }",
          "151:     @Test",
          "",
          "[Removed Lines]",
          "148:         cliResult.assertError(\"Invalid value for option 'kc.log': foo,console. Expected values are: console, file, gelf.\");",
          "",
          "[Added Lines]",
          "148:         cliResult.assertError(\"Invalid value for option 'kc.log': foo. Expected values are: console, file, gelf.\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:     @Launch({ \"start-dev\",\"--log=foo,bar\" })",
          "160:     void failUnknownHandlersInCliCommand(LaunchResult result) {",
          "161:         CLIResult cliResult = (CLIResult) result;",
          "163:     }",
          "165:     @Test",
          "",
          "[Removed Lines]",
          "162:         cliResult.assertError(\"Invalid value for option '--log': foo,bar\");",
          "",
          "[Added Lines]",
          "162:         cliResult.assertError(\"Invalid value for option '--log': foo\");",
          "",
          "---------------"
        ],
        "quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java||quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java": [
          "File: quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java -> quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import org.eclipse.microprofile.config.spi.ConfigProviderResolver;",
          "29: import org.keycloak.common.Version;",
          "30: import org.keycloak.common.crypto.FipsMode;",
          "32: import org.keycloak.config.HttpOptions;",
          "33: import org.keycloak.config.LoggingOptions;",
          "34: import org.keycloak.config.Option;",
          "",
          "[Removed Lines]",
          "31: import org.keycloak.config.DatabaseOptions;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:             addOptionIfNotSet(args, HttpOptions.HTTP_PORT);",
          "118:             addOptionIfNotSet(args, HttpOptions.HTTPS_PORT);",
          "122:             if (isFipsEnabled) {",
          "123:                 String logLevel = getOptionValue(args, LoggingOptions.LOG_LEVEL);",
          "",
          "[Removed Lines]",
          "120:             boolean isFipsEnabled = ofNullable(getOptionValue(args, SecurityOptions.FIPS_MODE)).orElse(FipsMode.DISABLED).isFipsEnabled();",
          "",
          "[Added Lines]",
          "119:             boolean isFipsEnabled = ofNullable(getOptionValue(args, SecurityOptions.FIPS_MODE)).map(FipsMode::valueOf).orElse(FipsMode.DISABLED).isFipsEnabled();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "135:         }",
          "137:         private <T> void addOptionIfNotSet(List<String> args, Option<T> option, T defaultValue) {",
          "140:             if (value == null) {",
          "141:                 defaultValue = ofNullable(defaultValue).orElseGet(option.getDefaultValue()::get);",
          "143:             }",
          "144:         }",
          "147:             for (String arg : args) {",
          "148:                 if (arg.contains(option.getKey())) {",
          "149:                     if (arg.endsWith(option.getKey())) {",
          "150:                         throw new IllegalArgumentException(\"Option '\" + arg + \"' value must be set using '=' as a separator\");",
          "151:                     }",
          "173:                 }",
          "174:             }",
          "",
          "[Removed Lines]",
          "138:             T value = getOptionValue(args, option);",
          "142:                 args.add(Configuration.toCliFormat(option.getKey()) + \"=\" + defaultValue);",
          "146:         private <T> T getOptionValue(List<String> args, Option<T> option) {",
          "153:                     String value = arg.substring(Picocli.ARG_PREFIX.length() + option.getKey().length() + 1);",
          "154:                     Class<T> type = option.getType();",
          "156:                     if (type.equals(String.class)) {",
          "157:                         return (T) value;",
          "158:                     }",
          "160:                     if (type.isEnum()) {",
          "161:                         return (T) Enum.valueOf((Class<Enum>) type, value);",
          "162:                     }",
          "164:                     if (Integer.class.isAssignableFrom(type)) {",
          "165:                         return (T) Integer.valueOf(value);",
          "166:                     }",
          "168:                     if (Boolean.class.isAssignableFrom(type)) {",
          "169:                         return (T) Boolean.valueOf(value);",
          "170:                     }",
          "172:                     throw new RuntimeException(\"Unsupported option type '\" + type + \"'\");",
          "",
          "[Added Lines]",
          "137:             String value = getOptionValue(args, option);",
          "141:                 args.add(Configuration.toCliFormat(option.getKey()) + \"=\" + Option.getDefaultValueString(defaultValue));",
          "145:         private String getOptionValue(List<String> args, Option<?> option) {",
          "152:                     return arg.substring(Picocli.ARG_PREFIX.length() + option.getKey().length() + 1);",
          "",
          "---------------"
        ],
        "quarkus/tests/junit5/src/main/java/org/keycloak/it/junit5/extension/CLITestExtension.java||quarkus/tests/junit5/src/main/java/org/keycloak/it/junit5/extension/CLITestExtension.java": [
          "File: quarkus/tests/junit5/src/main/java/org/keycloak/it/junit5/extension/CLITestExtension.java -> quarkus/tests/junit5/src/main/java/org/keycloak/it/junit5/extension/CLITestExtension.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import io.quarkus.test.junit.QuarkusMainTestExtension;",
          "23: import io.quarkus.test.junit.main.Launch;",
          "24: import io.quarkus.test.junit.main.LaunchResult;",
          "25: import org.junit.jupiter.api.extension.ExtensionContext;",
          "26: import org.junit.jupiter.api.extension.ParameterContext;",
          "27: import org.junit.jupiter.api.extension.ParameterResolutionException;",
          "28: import org.junit.jupiter.api.extension.ReflectiveInvocationContext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.junit.jupiter.api.extension.ExtensionContext.Namespace;",
          "28: import org.junit.jupiter.api.extension.ExtensionContext.Store;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: import org.keycloak.quarkus.runtime.configuration.KeycloakPropertiesConfigSource;",
          "36: import org.keycloak.quarkus.runtime.configuration.test.TestConfigArgsConfigSource;",
          "37: import org.keycloak.quarkus.runtime.integration.QuarkusPlatform;",
          "40: import java.io.IOException;",
          "41: import java.lang.annotation.Annotation;",
          "42: import java.lang.reflect.Method;",
          "43: import java.util.Arrays;",
          "44: import java.util.Collections;",
          "46: import java.util.List;",
          "48: import java.util.regex.Pattern;",
          "49: import java.util.stream.Collectors;",
          "50: import java.util.stream.Stream;",
          "52: import static org.keycloak.it.junit5.extension.DistributionTest.ReInstall.BEFORE_ALL;",
          "53: import static org.keycloak.it.junit5.extension.DistributionType.RAW;",
          "54: import static org.keycloak.quarkus.runtime.Environment.forceTestLaunchMode;",
          "",
          "[Removed Lines]",
          "38: import org.testcontainers.containers.GenericContainer;",
          "45: import java.util.HashSet;",
          "47: import java.util.Set;",
          "",
          "[Added Lines]",
          "47: import java.util.HashMap;",
          "49: import java.util.Properties;",
          "54: import static java.lang.System.setProperty;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58: public class CLITestExtension extends QuarkusMainTestExtension {",
          "60:     private static final String KEY_VALUE_SEPARATOR = \"[= ]\";",
          "61:     private KeycloakDistribution dist;",
          "63:     private DatabaseContainer databaseContainer;",
          "64:     private InfinispanContainer infinispanContainer;",
          "65:     private CLIResult result;",
          "",
          "[Removed Lines]",
          "62:     private final Set<String> testSysProps = new HashSet<>();",
          "",
          "[Added Lines]",
          "63:     private static final String SYS_PROPS = \"sys-props\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "68:     public void beforeEach(ExtensionContext context) throws Exception {",
          "69:         DistributionTest distConfig = getDistributionConfig(context);",
          "70:         Launch launch = context.getRequiredTestMethod().getAnnotation(Launch.class);",
          "72:         if (launch != null) {",
          "73:             for (String arg : launch.value()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:         getStore(context).put(SYS_PROPS, new HashMap<>(System.getProperties()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "117:         }",
          "118:     }",
          "120:     private static LegacyStore getLegacyStoreConfig(ExtensionContext context) {",
          "121:         return context.getTestClass().get().getDeclaredAnnotation(LegacyStore.class);",
          "122:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:     private Store getStore(ExtensionContext context) {",
          "125:         return context.getStore(Namespace.create(context.getRequiredTestClass(), context.getRequiredTestMethod()));",
          "126:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "180:         }",
          "182:         super.afterEach(context);",
          "184:     }",
          "187:         QuarkusConfigFactory.setConfig(null);",
          "191:         TestConfigArgsConfigSource.setCliArgs(new String[0]);",
          "195:         if (databaseContainer != null && databaseContainer.isRunning()) {",
          "196:             databaseContainer.stop();",
          "197:             databaseContainer = null;",
          "",
          "[Removed Lines]",
          "183:         reset(distConfig);",
          "186:     private void reset(DistributionTest distConfig) {",
          "189:         System.getProperties().remove(Environment.PROFILE);",
          "190:         System.getProperties().remove(\"quarkus.profile\");",
          "192:         for (String property : testSysProps) {",
          "193:             System.getProperties().remove(property);",
          "194:         }",
          "",
          "[Added Lines]",
          "191:         reset(distConfig, context);",
          "194:     private void reset(DistributionTest distConfig, ExtensionContext context) {",
          "196:         HashMap props = getStore(context).remove(SYS_PROPS, HashMap.class);",
          "197:         System.getProperties().clear();",
          "198:         System.getProperties().putAll(props);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "367:         }",
          "368:     }",
          "375:     private List<String> getCliArgs(ExtensionContext context) {",
          "376:         Launch annotation = context.getRequiredTestMethod().getAnnotation(Launch.class);",
          "",
          "[Removed Lines]",
          "370:     private void setProperty(String name, String value) {",
          "371:         System.setProperty(name, value);",
          "372:         testSysProps.add(name);",
          "373:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "667ce4be9e233737b2279685eaff6dd3e189bb4f",
      "candidate_info": {
        "commit_hash": "667ce4be9e233737b2279685eaff6dd3e189bb4f",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/667ce4be9e233737b2279685eaff6dd3e189bb4f",
        "files": [
          "common/src/main/java/org/keycloak/common/Profile.java",
          "common/src/main/java/org/keycloak/common/profile/CommaSeparatedListProfileConfigResolver.java",
          "common/src/main/java/org/keycloak/common/profile/ProfileConfigResolver.java",
          "common/src/main/java/org/keycloak/common/profile/PropertiesFileProfileConfigResolver.java",
          "common/src/main/java/org/keycloak/common/profile/PropertiesProfileConfigResolver.java",
          "common/src/test/java/org/keycloak/common/ProfileTest.java",
          "docs/documentation/release_notes/topics/24_0_0.adoc",
          "docs/documentation/upgrading/topics/keycloak/changes-24_0_0.adoc",
          "docs/guides/server/features.adoc",
          "quarkus/config-api/src/main/java/org/keycloak/config/FeatureOptions.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/Option.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/Environment.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/KeycloakMain.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/QuarkusProfileConfigResolver.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/PropertyMapperParameterConsumer.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/AbstractCommand.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/AbstractStartCommand.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/Build.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PropertyMappingInterceptor.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/FeaturePropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/FeaturePropertyMappersTest.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/FeaturesDistTest.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/FipsDistTest.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/QuarkusPropertiesDistTest.java",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testBuildHelp.unix.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testBuildHelp.windows.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testExportHelp.unix.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testExportHelpAll.unix.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testImportHelp.unix.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testImportHelpAll.unix.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.unix.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.windows.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelpAll.unix.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelpAll.windows.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelp.unix.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelp.windows.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelpAll.unix.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelpAll.windows.approved.txt",
          "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java"
        ],
        "message": "enhance: supporting versioned features (#24811)\n\nalso adding a common PropertyMapper validation method\n\ncloses #24668\n\nCo-authored-by: V\u00e1clav Muzik\u00e1\u0159 <vaclav@muzikari.cz>\nCo-authored-by: Martin Barto\u0161 <mabartos@redhat.com>",
        "before_after_code_files": [
          "common/src/main/java/org/keycloak/common/Profile.java||common/src/main/java/org/keycloak/common/Profile.java",
          "common/src/main/java/org/keycloak/common/profile/CommaSeparatedListProfileConfigResolver.java||common/src/main/java/org/keycloak/common/profile/CommaSeparatedListProfileConfigResolver.java",
          "common/src/main/java/org/keycloak/common/profile/ProfileConfigResolver.java||common/src/main/java/org/keycloak/common/profile/ProfileConfigResolver.java",
          "common/src/main/java/org/keycloak/common/profile/PropertiesFileProfileConfigResolver.java||common/src/main/java/org/keycloak/common/profile/PropertiesFileProfileConfigResolver.java",
          "common/src/main/java/org/keycloak/common/profile/PropertiesProfileConfigResolver.java||common/src/main/java/org/keycloak/common/profile/PropertiesProfileConfigResolver.java",
          "common/src/test/java/org/keycloak/common/ProfileTest.java||common/src/test/java/org/keycloak/common/ProfileTest.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/FeatureOptions.java||quarkus/config-api/src/main/java/org/keycloak/config/FeatureOptions.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/Option.java||quarkus/config-api/src/main/java/org/keycloak/config/Option.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/Environment.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/Environment.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/KeycloakMain.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/KeycloakMain.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/QuarkusProfileConfigResolver.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/QuarkusProfileConfigResolver.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/PropertyMapperParameterConsumer.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/PropertyMapperParameterConsumer.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/AbstractCommand.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/AbstractCommand.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/AbstractStartCommand.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/AbstractStartCommand.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/Build.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/Build.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PropertyMappingInterceptor.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PropertyMappingInterceptor.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/FeaturePropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/FeaturePropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/FeaturePropertyMappersTest.java||quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/FeaturePropertyMappersTest.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/FeaturesDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/FeaturesDistTest.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/FipsDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/FipsDistTest.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/QuarkusPropertiesDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/QuarkusPropertiesDistTest.java",
          "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java||testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java"
          ],
          "candidate": [
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java"
          ]
        }
      },
      "candidate_diff": {
        "common/src/main/java/org/keycloak/common/Profile.java||common/src/main/java/org/keycloak/common/Profile.java": [
          "File: common/src/main/java/org/keycloak/common/Profile.java -> common/src/main/java/org/keycloak/common/Profile.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.keycloak.common;",
          "20: import org.jboss.logging.Logger;",
          "21: import org.keycloak.common.profile.ProfileConfigResolver;",
          "22: import org.keycloak.common.profile.ProfileException;",
          "25: import org.keycloak.common.util.KerberosJdkProvider;",
          "27: import java.util.Arrays;",
          "28: import java.util.Collections;",
          "31: import java.util.Map;",
          "32: import java.util.Objects;",
          "33: import java.util.Set;",
          "34: import java.util.stream.Collectors;",
          "35: import java.util.stream.Stream;",
          "",
          "[Removed Lines]",
          "23: import org.keycloak.common.profile.PropertiesFileProfileConfigResolver;",
          "24: import org.keycloak.common.profile.PropertiesProfileConfigResolver;",
          "29: import java.util.LinkedList;",
          "30: import java.util.List;",
          "",
          "[Added Lines]",
          "21: import org.keycloak.common.Profile.Feature.Type;",
          "23: import org.keycloak.common.profile.ProfileConfigResolver.FeatureConfig;",
          "29: import java.util.Comparator;",
          "30: import java.util.HashMap;",
          "31: import java.util.LinkedHashMap;",
          "35: import java.util.TreeSet;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: public class Profile {",
          "43:     public enum Feature {",
          "44:         AUTHORIZATION(\"Authorization Service\", Type.DEFAULT),",
          "46:         ACCOUNT_API(\"Account Management REST API\", Type.DEFAULT),",
          "50:         ADMIN_FINE_GRAINED_AUTHZ(\"Fine-Grained Admin Permissions\", Type.PREVIEW),",
          "",
          "[Removed Lines]",
          "47:         ACCOUNT2(\"Account Management Console version 2\", Type.DEFAULT, Feature.ACCOUNT_API),",
          "48:         ACCOUNT3(\"Account Management Console version 3\", Type.PREVIEW, Feature.ACCOUNT_API),",
          "",
          "[Added Lines]",
          "45:     private static volatile Map<String, TreeSet<Feature>> FEATURES;",
          "51:         ACCOUNT2(\"Account Management Console 2\", Type.DEFAULT, Feature.ACCOUNT_API),",
          "52:         ACCOUNT3(\"Account Management Console 3\", Type.PREVIEW, Feature.ACCOUNT_API),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:         private final String label;",
          "105:         private Set<Feature> dependencies;",
          "111:         Feature(String label, Type type, Feature... dependencies) {",
          "112:             this.label = label;",
          "113:             this.type = type;",
          "114:             this.dependencies = Arrays.stream(dependencies).collect(Collectors.toSet());",
          "115:         }",
          "117:         public String getKey() {",
          "118:             return name().toLowerCase().replaceAll(\"_\", \"-\");",
          "119:         }",
          "121:         public String getLabel() {",
          "122:             return label;",
          "123:         }",
          "",
          "[Removed Lines]",
          "106:         Feature(String label, Type type) {",
          "107:             this.label = label;",
          "108:             this.type = type;",
          "109:         }",
          "",
          "[Added Lines]",
          "110:         private int version;",
          "113:             this(label, type, 1, dependencies);",
          "114:         }",
          "119:         Feature(String label, Type type, int version, Feature... dependencies) {",
          "122:             this.version = version;",
          "123:             if (this.version > 1 && !this.name().endsWith(\"_V\" + version)) {",
          "124:                 throw new IllegalStateException(\"It is expected that the enum name ends with the version\");",
          "125:             }",
          "143:         public String getUnversionedKey() {",
          "144:             String key = getKey();",
          "145:             if (version == 1) {",
          "146:                 return key;",
          "147:             }",
          "148:             return key.substring(0, key.length() - (String.valueOf(version).length() + 2));",
          "149:         }",
          "154:         public String getVersionedKey() {",
          "155:             return getUnversionedKey() + \":v\" + version;",
          "156:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "130:             return dependencies;",
          "131:         }",
          "133:         public enum Type {",
          "134:             DEFAULT(\"Default\"),",
          "135:             DISABLED_BY_DEFAULT(\"Disabled by default\"),",
          "136:             PREVIEW(\"Preview\"),",
          "137:             PREVIEW_DISABLED_BY_DEFAULT(\"Preview disabled by default\"), // Preview features, which are not automatically enabled even with enabled preview profile (Needs to be enabled explicitly)",
          "141:             private final String label;",
          "",
          "[Removed Lines]",
          "138:             EXPERIMENTAL(\"Experimental\"),",
          "139:             DEPRECATED(\"Deprecated\");",
          "",
          "[Added Lines]",
          "170:         public int getVersion() {",
          "171:             return version;",
          "172:         }",
          "178:             DEPRECATED(\"Deprecated\"),",
          "181:             EXPERIMENTAL(\"Experimental\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:     private static final Logger logger = Logger.getLogger(Profile.class);",
          "161:     private static Profile CURRENT;",
          "163:     private final ProfileName profileName;",
          "",
          "[Removed Lines]",
          "155:     private static final List<ProfileConfigResolver> DEFAULT_RESOLVERS = new LinkedList<>();",
          "156:     static {",
          "157:         DEFAULT_RESOLVERS.add(new PropertiesProfileConfigResolver(System.getProperties()));",
          "158:         DEFAULT_RESOLVERS.add(new PropertiesFileProfileConfigResolver());",
          "159:     };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "171:     public static Profile configure(ProfileConfigResolver... resolvers) {",
          "172:         ProfileName profile = Arrays.stream(resolvers).map(ProfileConfigResolver::getProfileName).filter(Objects::nonNull).findFirst().orElse(ProfileName.DEFAULT);",
          "174:         verifyConfig(features);",
          "176:         CURRENT = new Profile(profile, features);",
          "177:         return CURRENT;",
          "178:     }",
          "180:     public static Profile init(ProfileName profileName, Map<Feature, Boolean> features) {",
          "181:         CURRENT = new Profile(profileName, features);",
          "182:         return CURRENT;",
          "",
          "[Removed Lines]",
          "173:         Map<Feature, Boolean> features = Arrays.stream(Feature.values()).collect(Collectors.toMap(f -> f, f -> isFeatureEnabled(profile, f, resolvers)));",
          "",
          "[Added Lines]",
          "210:         Map<Feature, Boolean> features = new LinkedHashMap<>();",
          "212:         for (Map.Entry<String, TreeSet<Feature>> entry : getOrderedFeatures().entrySet()) {",
          "215:             String unversionedFeature = entry.getKey();",
          "216:             ProfileConfigResolver.FeatureConfig unversionedConfig = getFeatureConfig(unversionedFeature, resolvers);",
          "217:             Feature enabledFeature = null;",
          "218:             if (unversionedConfig == FeatureConfig.ENABLED) {",
          "219:                 enabledFeature = entry.getValue().iterator().next();",
          "220:             }",
          "223:             boolean isExplicitlyEnabledFeature = false;",
          "224:             for (Feature f : entry.getValue()) {",
          "225:                 ProfileConfigResolver.FeatureConfig configuration = getFeatureConfig(f.getVersionedKey(), resolvers);",
          "227:                 if (configuration != FeatureConfig.UNCONFIGURED && unversionedConfig != FeatureConfig.UNCONFIGURED) {",
          "228:                     throw new ProfileException(\"Versioned feature \" + f.getVersionedKey() + \" is not expected as \" + unversionedFeature + \" is already \" + unversionedConfig.name().toLowerCase());",
          "229:                 }",
          "231:                 switch (configuration) {",
          "232:                 case ENABLED:",
          "233:                     if (isExplicitlyEnabledFeature) {",
          "234:                         throw new ProfileException(",
          "235:                                 String.format(\"Multiple versions of the same feature %s, %s should not be enabled.\",",
          "236:                                         enabledFeature.getVersionedKey(), f.getVersionedKey()));",
          "237:                     }",
          "239:                     enabledFeature = f;",
          "240:                     isExplicitlyEnabledFeature = true;",
          "241:                     break;",
          "242:                 case DISABLED:",
          "243:                     throw new ProfileException(\"Feature \" + f.getVersionedKey() + \" should not be disabled using a versioned key.\");",
          "244:                 default:",
          "245:                     if (unversionedConfig == FeatureConfig.UNCONFIGURED && enabledFeature == null && isEnabledByDefault(profile, f)) {",
          "246:                         enabledFeature = f;",
          "247:                     }",
          "248:                     break;",
          "249:                 }",
          "250:             }",
          "251:             for (Feature f : entry.getValue()) {",
          "252:                 features.put(f, f == enabledFeature);",
          "253:             }",
          "254:         }",
          "262:     private static boolean isEnabledByDefault(ProfileName profile, Feature f) {",
          "263:         switch (f.getType()) {",
          "264:         case DEFAULT:",
          "265:             return true;",
          "266:         case PREVIEW:",
          "267:             return profile.equals(ProfileName.PREVIEW);",
          "268:         default:",
          "269:             return false;",
          "270:         }",
          "271:     }",
          "273:     private static ProfileConfigResolver.FeatureConfig getFeatureConfig(String unversionedFeature,",
          "274:             ProfileConfigResolver... resolvers) {",
          "275:         ProfileConfigResolver.FeatureConfig configuration = Arrays.stream(resolvers).map(r -> r.getFeatureConfig(unversionedFeature))",
          "276:                 .filter(r -> !r.equals(ProfileConfigResolver.FeatureConfig.UNCONFIGURED))",
          "277:                 .findFirst()",
          "278:                 .orElse(ProfileConfigResolver.FeatureConfig.UNCONFIGURED);",
          "279:         return configuration;",
          "280:     }",
          "295:     private static Map<String, TreeSet<Feature>> getOrderedFeatures() {",
          "296:         if (FEATURES == null) {",
          "298:             Comparator<Feature> comparator = Comparator.comparing(Feature::getType).thenComparingInt(Feature::getVersion);",
          "300:             HashMap<String, TreeSet<Feature>> features = new HashMap<>();",
          "301:             Stream.of(Feature.values()).forEach(f -> features.compute(f.getUnversionedKey(), (k, v) -> {",
          "302:                 if (v == null) {",
          "303:                     v = new TreeSet<>(comparator.reversed()); // we want the highest priority first",
          "304:                 }",
          "305:                 v.add(f);",
          "306:                 return v;",
          "307:             }));",
          "308:             FEATURES = features;",
          "309:         }",
          "310:         return FEATURES;",
          "311:     }",
          "313:     public static Set<String> getAllUnversionedFeatureNames() {",
          "314:         return Collections.unmodifiableSet(getOrderedFeatures().keySet());",
          "315:     }",
          "322:     public static Set<Feature> getFeatureVersions(String feature) {",
          "323:         TreeSet<Feature> versions = getOrderedFeatures().get(feature);",
          "324:         if (versions == null) {",
          "325:             return Collections.emptySet();",
          "326:         }",
          "327:         return Collections.unmodifiableSet(versions);",
          "328:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "238:         PREVIEW",
          "239:     }",
          "263:     private static void verifyConfig(Map<Feature, Boolean> features) {",
          "264:         for (Feature f : features.keySet()) {",
          "265:             if (features.get(f) && f.getDependencies() != null) {",
          "",
          "[Removed Lines]",
          "241:     private static Boolean isFeatureEnabled(ProfileName profile, Feature feature, ProfileConfigResolver... resolvers) {",
          "242:         ProfileConfigResolver.FeatureConfig configuration = Arrays.stream(resolvers).map(r -> r.getFeatureConfig(feature))",
          "243:                 .filter(r -> !r.equals(ProfileConfigResolver.FeatureConfig.UNCONFIGURED))",
          "244:                 .findFirst()",
          "245:                 .orElse(ProfileConfigResolver.FeatureConfig.UNCONFIGURED);",
          "246:         switch (configuration) {",
          "247:             case ENABLED:",
          "248:                 return true;",
          "249:             case DISABLED:",
          "250:                 return false;",
          "251:             default:",
          "252:                 switch (feature.getType()) {",
          "253:                     case DEFAULT:",
          "254:                         return true;",
          "255:                     case PREVIEW:",
          "256:                         return profile.equals(ProfileName.PREVIEW);",
          "257:                     default:",
          "258:                         return false;",
          "259:                 }",
          "260:         }",
          "261:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "286:         String enabledFeaturesOfType = features.entrySet().stream()",
          "287:                 .filter(e -> e.getValue() && checkedFeatureTypes.contains(e.getKey().getType()))",
          "290:         if (!enabledFeaturesOfType.isEmpty()) {",
          "291:             logger.logv(level, \"{0} features enabled: {1}\", type.getLabel(), enabledFeaturesOfType);",
          "",
          "[Removed Lines]",
          "288:                 .map(e -> e.getKey().getKey()).sorted().collect(Collectors.joining(\", \"));",
          "",
          "[Added Lines]",
          "416:                 .map(e -> e.getKey().getVersionedKey()).sorted().collect(Collectors.joining(\", \"));",
          "",
          "---------------"
        ],
        "common/src/main/java/org/keycloak/common/profile/CommaSeparatedListProfileConfigResolver.java||common/src/main/java/org/keycloak/common/profile/CommaSeparatedListProfileConfigResolver.java": [
          "File: common/src/main/java/org/keycloak/common/profile/CommaSeparatedListProfileConfigResolver.java -> common/src/main/java/org/keycloak/common/profile/CommaSeparatedListProfileConfigResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import org.keycloak.common.Profile;",
          "5: import java.util.Arrays;",
          "6: import java.util.Set;",
          "9: public class CommaSeparatedListProfileConfigResolver implements ProfileConfigResolver {",
          "",
          "[Removed Lines]",
          "7: import java.util.stream.Collectors;",
          "",
          "[Added Lines]",
          "6: import java.util.HashSet;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:     public CommaSeparatedListProfileConfigResolver(String enabledFeatures, String disabledFeatures) {",
          "15:         if (enabledFeatures != null) {",
          "17:         }",
          "18:         if (disabledFeatures != null) {",
          "20:         }",
          "21:     }",
          "",
          "[Removed Lines]",
          "16:             this.enabledFeatures = Arrays.stream(enabledFeatures.split(\",\")).collect(Collectors.toSet());",
          "19:             this.disabledFeatures = Arrays.stream(disabledFeatures.split(\",\")).collect(Collectors.toSet());",
          "",
          "[Added Lines]",
          "16:             this.enabledFeatures = new HashSet<>(Arrays.asList(enabledFeatures.split(\",\")));",
          "19:             this.disabledFeatures = new HashSet<>(Arrays.asList(disabledFeatures.split(\",\")));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "29:     }",
          "31:     @Override",
          "35:             return FeatureConfig.ENABLED;",
          "37:             return FeatureConfig.DISABLED;",
          "38:         }",
          "39:         return FeatureConfig.UNCONFIGURED;",
          "",
          "[Removed Lines]",
          "32:     public FeatureConfig getFeatureConfig(Profile.Feature feature) {",
          "33:         String key = feature.getKey();",
          "34:         if (enabledFeatures != null && enabledFeatures.contains(key)) {",
          "36:         } else if (disabledFeatures != null && disabledFeatures.contains(key)) {",
          "",
          "[Added Lines]",
          "32:     public FeatureConfig getFeatureConfig(String feature) {",
          "33:         if (enabledFeatures != null && enabledFeatures.contains(feature)) {",
          "34:             if (disabledFeatures != null && disabledFeatures.contains(feature)) {",
          "35:                 throw new ProfileException(feature + \" is in both the enabled and disabled feature lists.\");",
          "36:             }",
          "38:         }",
          "39:         if (disabledFeatures != null && disabledFeatures.contains(feature)) {",
          "",
          "---------------"
        ],
        "common/src/main/java/org/keycloak/common/profile/ProfileConfigResolver.java||common/src/main/java/org/keycloak/common/profile/ProfileConfigResolver.java": [
          "File: common/src/main/java/org/keycloak/common/profile/ProfileConfigResolver.java -> common/src/main/java/org/keycloak/common/profile/ProfileConfigResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     Profile.ProfileName getProfileName();",
          "11:     public enum FeatureConfig {",
          "12:         ENABLED,",
          "",
          "[Removed Lines]",
          "9:     FeatureConfig getFeatureConfig(Profile.Feature feature);",
          "",
          "[Added Lines]",
          "9:     FeatureConfig getFeatureConfig(String feature);",
          "",
          "---------------"
        ],
        "common/src/main/java/org/keycloak/common/profile/PropertiesFileProfileConfigResolver.java||common/src/main/java/org/keycloak/common/profile/PropertiesFileProfileConfigResolver.java": [
          "File: common/src/main/java/org/keycloak/common/profile/PropertiesFileProfileConfigResolver.java -> common/src/main/java/org/keycloak/common/profile/PropertiesFileProfileConfigResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.keycloak.common.profile;",
          "5: import java.io.File;",
          "6: import java.io.FileInputStream;",
          "7: import java.io.IOException;",
          "8: import java.util.Properties;",
          "14:     public PropertiesFileProfileConfigResolver() {",
          "15:         try {",
          "16:             String jbossServerConfigDir = System.getProperty(\"jboss.server.config.dir\");",
          "17:             if (jbossServerConfigDir != null) {",
          "18:                 File file = new File(jbossServerConfigDir, \"profile.properties\");",
          "19:                 if (file.isFile()) {",
          "20:                     try (FileInputStream is = new FileInputStream(file)) {",
          "22:                         properties.load(is);",
          "23:                     }",
          "24:                 }",
          "",
          "[Removed Lines]",
          "3: import org.keycloak.common.Profile;",
          "10: public class PropertiesFileProfileConfigResolver implements ProfileConfigResolver {",
          "12:     private Properties properties;",
          "21:                         properties = new Properties();",
          "",
          "[Added Lines]",
          "8: public class PropertiesFileProfileConfigResolver extends PropertiesProfileConfigResolver {",
          "11:         super(loadProperties());",
          "12:     }",
          "14:     private static Properties loadProperties() {",
          "15:         Properties properties = new Properties();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:         } catch (IOException e) {",
          "27:             throw new ProfileException(\"Failed to load profile propeties file\", e);",
          "28:         }",
          "29:     }",
          "59: }",
          "",
          "[Removed Lines]",
          "31:     @Override",
          "32:     public Profile.ProfileName getProfileName() {",
          "33:         if (properties != null) {",
          "34:             String profile = properties.getProperty(\"profile\");",
          "35:             if (profile != null) {",
          "36:                 return Profile.ProfileName.valueOf(profile.toUpperCase());",
          "37:             }",
          "38:         }",
          "39:         return null;",
          "40:     }",
          "42:     @Override",
          "43:     public FeatureConfig getFeatureConfig(Profile.Feature feature) {",
          "44:         if (properties != null) {",
          "45:             String config = properties.getProperty(\"feature.\" + feature.name().toLowerCase());",
          "46:             if (config != null) {",
          "47:                 switch (config) {",
          "48:                     case \"enabled\":",
          "49:                         return FeatureConfig.ENABLED;",
          "50:                     case \"disabled\":",
          "51:                         return FeatureConfig.DISABLED;",
          "52:                     default:",
          "53:                         throw new ProfileException(\"Invalid config value '\" + config + \"' for feature \" + feature.getKey());",
          "54:                 }",
          "55:             }",
          "56:         }",
          "57:         return FeatureConfig.UNCONFIGURED;",
          "58:     }",
          "",
          "[Added Lines]",
          "29:         return properties;",
          "",
          "---------------"
        ],
        "common/src/main/java/org/keycloak/common/profile/PropertiesProfileConfigResolver.java||common/src/main/java/org/keycloak/common/profile/PropertiesProfileConfigResolver.java": [
          "File: common/src/main/java/org/keycloak/common/profile/PropertiesProfileConfigResolver.java -> common/src/main/java/org/keycloak/common/profile/PropertiesProfileConfigResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.keycloak.common.profile;",
          "3: import org.keycloak.common.Profile;",
          "5: import java.util.Properties;",
          "7: public class PropertiesProfileConfigResolver implements ProfileConfigResolver {",
          "11:     public PropertiesProfileConfigResolver(Properties properties) {",
          "13:     }",
          "15:     @Override",
          "16:     public Profile.ProfileName getProfileName() {",
          "18:         return profile != null ? Profile.ProfileName.valueOf(profile.toUpperCase()) : null;",
          "19:     }",
          "21:     @Override",
          "24:         if (config != null) {",
          "25:             switch (config) {",
          "26:                 case \"enabled\":",
          "",
          "[Removed Lines]",
          "9:     private Properties properties;",
          "12:         this.properties = properties;",
          "17:         String profile = properties.getProperty(\"keycloak.profile\");",
          "22:     public FeatureConfig getFeatureConfig(Profile.Feature feature) {",
          "23:         String config = properties.getProperty(\"keycloak.profile.feature.\" + feature.name().toLowerCase());",
          "",
          "[Added Lines]",
          "4: import org.keycloak.common.Profile.Feature;",
          "7: import java.util.function.UnaryOperator;",
          "11:     private UnaryOperator<String> getter;",
          "14:         this(properties::getProperty);",
          "15:     }",
          "17:     public PropertiesProfileConfigResolver(UnaryOperator<String> getter) {",
          "18:         this.getter = getter;",
          "23:         String profile = getter.apply(\"keycloak.profile\");",
          "28:     public FeatureConfig getFeatureConfig(String feature) {",
          "29:         String key = getPropertyKey(feature);",
          "30:         String config = getter.apply(key);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:                 case \"disabled\":",
          "29:                     return FeatureConfig.DISABLED;",
          "30:                 default:",
          "32:             }",
          "33:         }",
          "34:         return FeatureConfig.UNCONFIGURED;",
          "35:     }",
          "36: }",
          "",
          "[Removed Lines]",
          "31:                     throw new ProfileException(\"Invalid config value '\" + config + \"' for feature \" + feature.getKey());",
          "",
          "[Added Lines]",
          "38:                     throw new ProfileException(\"Invalid config value '\" + config + \"' for feature key \" + key);",
          "44:     public static String getPropertyKey(Feature feature) {",
          "45:         return getPropertyKey(feature.getKey());",
          "46:     }",
          "48:     public static String getPropertyKey(String feature) {",
          "49:         return \"keycloak.profile.feature.\" + feature.replaceAll(\"-\", \"_\");",
          "50:     }",
          "",
          "---------------"
        ],
        "common/src/test/java/org/keycloak/common/ProfileTest.java||common/src/test/java/org/keycloak/common/ProfileTest.java": [
          "File: common/src/test/java/org/keycloak/common/ProfileTest.java -> common/src/test/java/org/keycloak/common/ProfileTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import org.junit.rules.TemporaryFolder;",
          "9: import org.keycloak.common.profile.CommaSeparatedListProfileConfigResolver;",
          "10: import org.keycloak.common.profile.ProfileException;",
          "12: import org.keycloak.common.profile.PropertiesProfileConfigResolver;",
          "18: import java.util.Arrays;",
          "19: import java.util.Collection;",
          "20: import java.util.Comparator;",
          "",
          "[Removed Lines]",
          "11: import org.keycloak.common.profile.PropertiesFileProfileConfigResolver;",
          "14: import java.io.IOException;",
          "15: import java.io.OutputStream;",
          "16: import java.nio.file.Files;",
          "17: import java.nio.file.Path;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: import java.util.Properties;",
          "23: import java.util.Set;",
          "25: public class ProfileTest {",
          "27:     private static final Profile.Feature DEFAULT_FEATURE = Profile.Feature.AUTHORIZATION;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import static org.junit.Assert.assertThrows;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:         try {",
          "127:             Profile.configure(new PropertiesProfileConfigResolver(properties));",
          "128:         } catch (ProfileException e) {",
          "130:         }",
          "131:     }",
          "",
          "[Removed Lines]",
          "129:             Assert.assertEquals(\"Invalid config value 'invalid' for feature account-api\", e.getMessage());",
          "",
          "[Added Lines]",
          "126:             Assert.assertEquals(\"Invalid config value 'invalid' for feature key keycloak.profile.feature.account_api\", e.getMessage());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "148:         Assert.assertTrue(Profile.isFeatureEnabled(PREVIEW_FEATURE));",
          "149:     }",
          "175:     @Test",
          "176:     public void configWithCommaSeparatedList() {",
          "177:         String enabledFeatures = DISABLED_BY_DEFAULT_FEATURE.getKey() + \",\" + PREVIEW_FEATURE.getKey() + \",\" + EXPERIMENTAL_FEATURE.getKey();",
          "",
          "[Removed Lines]",
          "151:     @Test",
          "152:     public void enablePreviewWithPropertiesFile() throws IOException {",
          "153:         Properties properties = new Properties();",
          "154:         properties.setProperty(\"profile\", \"preview\");",
          "156:         Path tempDirectory = Files.createTempDirectory(\"jboss-config\");",
          "157:         System.setProperty(\"jboss.server.config.dir\", tempDirectory.toString());",
          "159:         Path profileProperties = tempDirectory.resolve(\"profile.properties\");",
          "161:         try(OutputStream out = Files.newOutputStream(profileProperties.toFile().toPath())) {",
          "162:             properties.store(out, \"\");",
          "163:         }",
          "165:         Profile.configure(new PropertiesFileProfileConfigResolver());",
          "167:         Assert.assertEquals(Profile.ProfileName.PREVIEW, Profile.getInstance().getName());",
          "168:         Assert.assertTrue(Profile.isFeatureEnabled(PREVIEW_FEATURE));",
          "170:         Files.delete(profileProperties);",
          "171:         Files.delete(tempDirectory);",
          "172:         System.getProperties().remove(\"jboss.server.config.dir\");",
          "173:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "192:     }",
          "194:     @Test",
          "201:         if (DEPRECATED_FEATURE != null) {",
          "203:         }",
          "207:         Assert.assertFalse(Profile.isFeatureEnabled(DEFAULT_FEATURE));",
          "208:         Assert.assertTrue(Profile.isFeatureEnabled(DISABLED_BY_DEFAULT_FEATURE));",
          "",
          "[Removed Lines]",
          "195:     public void configWithProperties() {",
          "196:         Properties properties = new Properties();",
          "197:         properties.setProperty(\"keycloak.profile.feature.\" + DEFAULT_FEATURE.name().toLowerCase(), \"disabled\");",
          "198:         properties.setProperty(\"keycloak.profile.feature.\" + DISABLED_BY_DEFAULT_FEATURE.name().toLowerCase(), \"enabled\");",
          "199:         properties.setProperty(\"keycloak.profile.feature.\" + PREVIEW_FEATURE.name().toLowerCase(), \"enabled\");",
          "200:         properties.setProperty(\"keycloak.profile.feature.\" + EXPERIMENTAL_FEATURE.name().toLowerCase(), \"enabled\");",
          "202:             properties.setProperty(\"keycloak.profile.feature.\" + DEPRECATED_FEATURE.name().toLowerCase(), \"enabled\");",
          "205:         Profile.configure(new PropertiesProfileConfigResolver(properties));",
          "",
          "[Added Lines]",
          "168:     public void testKeys() {",
          "169:         Assert.assertEquals(\"account2\", Profile.Feature.ACCOUNT2.getKey());",
          "170:         Assert.assertEquals(\"account2\", Profile.Feature.ACCOUNT2.getUnversionedKey());",
          "171:         Assert.assertEquals(\"account2:v1\", Profile.Feature.ACCOUNT2.getVersionedKey());",
          "172:     }",
          "174:     @Test",
          "175:     public void configWithCommaSeparatedVersionedList() {",
          "176:         String enabledFeatures = DISABLED_BY_DEFAULT_FEATURE.getVersionedKey() + \",\" + PREVIEW_FEATURE.getVersionedKey() + \",\" + EXPERIMENTAL_FEATURE.getVersionedKey();",
          "178:             enabledFeatures += \",\" + DEPRECATED_FEATURE.getVersionedKey();",
          "181:         String disabledFeatures = DEFAULT_FEATURE.getUnversionedKey();",
          "182:         Profile.configure(new CommaSeparatedListProfileConfigResolver(enabledFeatures, disabledFeatures));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "214:     }",
          "216:     @Test",
          "234:         }",
          "238:         Assert.assertFalse(Profile.isFeatureEnabled(DEFAULT_FEATURE));",
          "239:         Assert.assertTrue(Profile.isFeatureEnabled(DISABLED_BY_DEFAULT_FEATURE));",
          "",
          "[Removed Lines]",
          "217:     public void configWithPropertiesFile() throws IOException {",
          "218:         Properties properties = new Properties();",
          "219:         properties.setProperty(\"feature.\" + DEFAULT_FEATURE.name().toLowerCase(), \"disabled\");",
          "220:         properties.setProperty(\"feature.\" + DISABLED_BY_DEFAULT_FEATURE.name().toLowerCase(), \"enabled\");",
          "221:         properties.setProperty(\"feature.\" + PREVIEW_FEATURE.name().toLowerCase(), \"enabled\");",
          "222:         properties.setProperty(\"feature.\" + EXPERIMENTAL_FEATURE.name().toLowerCase(), \"enabled\");",
          "223:         if (DEPRECATED_FEATURE != null) {",
          "224:             properties.setProperty(\"feature.\" + DEPRECATED_FEATURE.name().toLowerCase(), \"enabled\");",
          "225:         }",
          "227:         Path tempDirectory = Files.createTempDirectory(\"jboss-config\");",
          "228:         System.setProperty(\"jboss.server.config.dir\", tempDirectory.toString());",
          "230:         Path profileProperties = tempDirectory.resolve(\"profile.properties\");",
          "232:         try(OutputStream out = Files.newOutputStream(profileProperties.toFile().toPath())) {",
          "233:             properties.store(out, \"\");",
          "236:         Profile.configure(new PropertiesFileProfileConfigResolver());",
          "",
          "[Added Lines]",
          "194:     public void configWithCommaSeparatedInvalidDisabled() {",
          "195:         String disabledFeatures = DEFAULT_FEATURE.getVersionedKey();",
          "196:         CommaSeparatedListProfileConfigResolver resolver = new CommaSeparatedListProfileConfigResolver(null, disabledFeatures);",
          "197:         assertThrows(ProfileException.class, () -> Profile.configure(resolver));",
          "198:     }",
          "200:     @Test",
          "201:     public void commaSeparatedVersionedConflict() {",
          "202:         String enabledFeatures = DEFAULT_FEATURE.getVersionedKey();",
          "203:         String disabledFeatures = DEFAULT_FEATURE.getVersionedKey();",
          "204:         CommaSeparatedListProfileConfigResolver resolver = new CommaSeparatedListProfileConfigResolver(enabledFeatures, disabledFeatures);",
          "205:         assertThrows(ProfileException.class, () -> Profile.configure(resolver));",
          "206:     }",
          "208:     @Test",
          "209:     public void commaSeparatedDuplicateEnabled() {",
          "210:         String enabledFeatures = DEFAULT_FEATURE.getVersionedKey() + \",\" + DEFAULT_FEATURE.getUnversionedKey();",
          "211:         CommaSeparatedListProfileConfigResolver resolver = new CommaSeparatedListProfileConfigResolver(enabledFeatures, null);",
          "212:         assertThrows(ProfileException.class, () -> Profile.configure(resolver));",
          "213:     }",
          "215:     @Test",
          "216:     public void configWithProperties() {",
          "217:         Properties properties = new Properties();",
          "218:         properties.setProperty(PropertiesProfileConfigResolver.getPropertyKey(DEFAULT_FEATURE), \"disabled\");",
          "219:         properties.setProperty(PropertiesProfileConfigResolver.getPropertyKey(DISABLED_BY_DEFAULT_FEATURE), \"enabled\");",
          "220:         properties.setProperty(PropertiesProfileConfigResolver.getPropertyKey(PREVIEW_FEATURE), \"enabled\");",
          "221:         properties.setProperty(PropertiesProfileConfigResolver.getPropertyKey(EXPERIMENTAL_FEATURE), \"enabled\");",
          "222:         if (DEPRECATED_FEATURE != null) {",
          "223:             properties.setProperty(PropertiesProfileConfigResolver.getPropertyKey(DEPRECATED_FEATURE), \"enabled\");",
          "226:         Profile.configure(new PropertiesProfileConfigResolver(properties));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "242:         if (DEPRECATED_FEATURE != null) {",
          "243:             Assert.assertTrue(Profile.isFeatureEnabled(DEPRECATED_FEATURE));",
          "244:         }",
          "249:     }",
          "251:     @Test",
          "252:     public void configWithMultipleResolvers() {",
          "253:         Properties properties = new Properties();",
          "256:         Profile.configure(new CommaSeparatedListProfileConfigResolver(DISABLED_BY_DEFAULT_FEATURE.getKey(), \"\"), new PropertiesProfileConfigResolver(properties));",
          "",
          "[Removed Lines]",
          "246:         Files.delete(profileProperties);",
          "247:         Files.delete(tempDirectory);",
          "248:         System.getProperties().remove(\"jboss.server.config.dir\");",
          "254:         properties.setProperty(\"keycloak.profile.feature.\" + PREVIEW_FEATURE.name().toLowerCase(), \"enabled\");",
          "",
          "[Added Lines]",
          "240:         properties.setProperty(PropertiesProfileConfigResolver.getPropertyKey(PREVIEW_FEATURE), \"enabled\");",
          "",
          "---------------"
        ],
        "quarkus/config-api/src/main/java/org/keycloak/config/FeatureOptions.java||quarkus/config-api/src/main/java/org/keycloak/config/FeatureOptions.java": [
          "File: quarkus/config-api/src/main/java/org/keycloak/config/FeatureOptions.java -> quarkus/config-api/src/main/java/org/keycloak/config/FeatureOptions.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import java.util.Collections;",
          "7: import java.util.List;",
          "8: import java.util.Optional;",
          "10: public class FeatureOptions {",
          "12:     public static final Option<List> FEATURES = new OptionBuilder(\"features\", List.class, Profile.Feature.class)",
          "13:             .category(OptionCategory.FEATURE)",
          "14:             .description(\"Enables a set of one or more features.\")",
          "16:             .defaultValue(Optional.empty())",
          "17:             .buildTime(true)",
          "18:             .build();",
          "20:     public static final Option FEATURES_DISABLED = new OptionBuilder(\"features-disabled\", List.class, Profile.Feature.class)",
          "21:             .category(OptionCategory.FEATURE)",
          "22:             .description(\"Disables a set of one or more features.\")",
          "24:             .buildTime(true)",
          "25:             .build();",
          "28:         List<String> features = new ArrayList<>();",
          "32:         }",
          "34:         features.add(Profile.Feature.Type.PREVIEW.name().toLowerCase());",
          "",
          "[Removed Lines]",
          "15:             .expectedValues(FeatureOptions::getFeatureValues)",
          "23:             .expectedValues(FeatureOptions::getFeatureValues)",
          "27:     private static List<String> getFeatureValues() {",
          "30:         for (Profile.Feature value : Profile.Feature.values()) {",
          "31:             features.add(value.getKey());",
          "",
          "[Added Lines]",
          "9: import java.util.stream.Collectors;",
          "17:             .expectedValues(() -> getFeatureValues(true))",
          "24:             .expectedValues(() -> getFeatureValues(false))",
          "28:     public static List<String> getFeatureValues(boolean includeVersions) {",
          "31:         if (includeVersions) {",
          "32:             Profile.getAllUnversionedFeatureNames().forEach(f -> {",
          "33:                 features.add(f + \"[:\" + Profile.getFeatureVersions(f).stream().sorted().map(v -> \"v\" + v.getVersion())",
          "34:                         .collect(Collectors.joining(\",\")) + \"]\");",
          "35:             });",
          "36:         } else {",
          "37:             features.addAll(Profile.getAllUnversionedFeatureNames());",
          "",
          "---------------"
        ],
        "quarkus/config-api/src/main/java/org/keycloak/config/Option.java||quarkus/config-api/src/main/java/org/keycloak/config/Option.java": [
          "File: quarkus/config-api/src/main/java/org/keycloak/config/Option.java -> quarkus/config-api/src/main/java/org/keycloak/config/Option.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:         this.category = category;",
          "23:         this.hidden = hidden;",
          "24:         this.buildTime = buildTime;",
          "26:         this.defaultValue = defaultValue;",
          "27:         this.expectedValues = expectedValues;",
          "28:         this.deprecatedMetadata = deprecatedMetadata;",
          "",
          "[Removed Lines]",
          "25:         this.description = getDescriptionByCategorySupportLevel(description);",
          "",
          "[Added Lines]",
          "25:         this.description = getDescriptionByCategorySupportLevel(description, category);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:         );",
          "75:     }",
          "83:             case PREVIEW:",
          "84:                 description = \"Preview: \" + description;",
          "85:                 break;",
          "",
          "[Removed Lines]",
          "77:     private String getDescriptionByCategorySupportLevel(String description) {",
          "78:         if(description == null || description.isBlank()) {",
          "79:             return description;",
          "80:         }",
          "82:         switch(this.getCategory().getSupportLevel()) {",
          "",
          "[Added Lines]",
          "77:     private static String getDescriptionByCategorySupportLevel(String description, OptionCategory category) {",
          "78:         if (description != null && !description.isBlank()) {",
          "79:             switch (category.getSupportLevel()) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:                 description = \"Experimental: \" + description;",
          "88:                 break;",
          "89:             default:",
          "91:         }",
          "93:         return description;",
          "",
          "[Removed Lines]",
          "90:                 description = description;",
          "",
          "[Added Lines]",
          "87:                 break;",
          "88:             }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/Environment.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/Environment.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/Environment.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/Environment.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: import org.apache.commons.lang3.SystemUtils;",
          "38: import org.keycloak.common.Profile;",
          "39: import org.keycloak.common.profile.PropertiesFileProfileConfigResolver;",
          "40: import org.keycloak.quarkus.runtime.configuration.PersistedConfigSource;",
          "42: public final class Environment {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: import org.keycloak.common.profile.PropertiesProfileConfigResolver;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "249:         Profile profile = Profile.getInstance();",
          "251:         if (profile == null) {",
          "253:         }",
          "255:         return profile;",
          "",
          "[Removed Lines]",
          "252:             profile = Profile.configure(new QuarkusProfileConfigResolver(), new PropertiesFileProfileConfigResolver());",
          "",
          "[Added Lines]",
          "253:             profile = Profile.configure(new QuarkusProfileConfigResolver(), new PropertiesProfileConfigResolver(QuarkusProfileConfigResolver::getConfig), new PropertiesFileProfileConfigResolver());",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/KeycloakMain.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/KeycloakMain.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/KeycloakMain.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/KeycloakMain.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:             }",
          "93:             try {",
          "95:             } catch (PropertyException e) {",
          "96:                 errorHandler.error(errStream, e.getMessage(), null);",
          "97:                 System.exit(ExitCode.USAGE);",
          "",
          "[Removed Lines]",
          "94:                 Picocli.validateNonCliConfig(cliArgs, new Start(), new PrintWriter(System.out, true));",
          "",
          "[Added Lines]",
          "94:                 Picocli.validateConfig(cliArgs, new Start(), new PrintWriter(System.out, true));",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/QuarkusProfileConfigResolver.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/QuarkusProfileConfigResolver.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/QuarkusProfileConfigResolver.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/QuarkusProfileConfigResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:         super(getConfig(\"kc.features\"), getConfig(\"kc.features-disabled\"));",
          "10:     }",
          "13:         return Configuration.getRawPersistedProperty(key)",
          "14:                 .orElse(Configuration.getRawValue(key));",
          "15:     }",
          "",
          "[Removed Lines]",
          "12:     private static String getConfig(String key) {",
          "",
          "[Added Lines]",
          "12:     static String getConfig(String key) {",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: import org.keycloak.quarkus.runtime.configuration.ConfigArgsConfigSource;",
          "69: import org.keycloak.quarkus.runtime.configuration.Configuration;",
          "70: import org.keycloak.quarkus.runtime.configuration.PersistedConfigSource;",
          "71: import org.keycloak.quarkus.runtime.configuration.QuarkusPropertiesConfigSource;",
          "72: import org.keycloak.quarkus.runtime.configuration.mappers.PropertyMappers;",
          "73: import org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: import org.keycloak.quarkus.runtime.configuration.PropertyMappingInterceptor;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:     }",
          "270:         IncludeOptions options = getIncludeOptions(cliArgs, abstractCommand, abstractCommand.getName());",
          "272:         if (!options.includeBuildTime && !options.includeRuntime) {",
          "273:             return;",
          "274:         }",
          "290:                     }",
          "295:                     }",
          "309:                 }",
          "342:             }",
          "343:         }",
          "351:         }",
          "355:         }",
          "356:     }",
          "358:     private static void outputIgnoredProperties(List<String> properties, boolean build, Logger logger) {",
          "",
          "[Removed Lines]",
          "269:     public static void validateNonCliConfig(List<String> cliArgs, AbstractCommand abstractCommand, PrintWriter out) {",
          "276:         List<String> ignoredBuildTime = new ArrayList<>();",
          "277:         List<String> ignoredRunTime = new ArrayList<>();",
          "278:         Set<String> deprecatedInUse = new HashSet<>();",
          "279:         for (OptionCategory category : abstractCommand.getOptionCategories()) {",
          "280:             List<PropertyMapper> mappers = new ArrayList<>();",
          "281:             Optional.ofNullable(PropertyMappers.getRuntimeMappers().get(category)).ifPresent(mappers::addAll);",
          "282:             Optional.ofNullable(PropertyMappers.getBuildTimeMappers().get(category)).ifPresent(mappers::addAll);",
          "283:             for (PropertyMapper mapper : mappers) {",
          "285:                 String value = null;",
          "286:                 ConfigSource configSource = null;",
          "287:                 for (ConfigSource cs : getConfig().getConfigSources()) {",
          "288:                     if (cs.getOrdinal() < 300) {",
          "289:                         break; // don't consider anything below standard env properties",
          "291:                     value = cs.getValue(mapper.getFrom());",
          "292:                     if (value != null) {",
          "293:                         configSource = cs;",
          "294:                         break;",
          "296:                 }",
          "298:                 if (value == null) {",
          "299:                     continue;",
          "300:                 }",
          "302:                 if (mapper.isBuildTime() && !options.includeBuildTime) {",
          "303:                     ignoredBuildTime.add(mapper.getFrom());",
          "304:                     continue;",
          "305:                 }",
          "306:                 if (mapper.isRunTime() && !options.includeRuntime) {",
          "307:                     ignoredRunTime.add(mapper.getFrom());",
          "308:                     continue;",
          "311:                 if (!PropertyMapperParameterConsumer.isExpectedValue(mapper.getExpectedValues(), value)) {",
          "312:                     throw new PropertyException(PropertyMapperParameterConsumer.getErrorMessage(mapper.getFrom(),",
          "313:                             value, mapper.getExpectedValues(), mapper.getExpectedValues()) + \". From ConfigSource \" + configSource.getName());",
          "314:                 }",
          "316:                 mapper.getDeprecatedMetadata().ifPresent(d -> {",
          "317:                     DeprecatedMetadata metadata = (DeprecatedMetadata) d;",
          "318:                     String optionName = mapper.getFrom();",
          "319:                     if (optionName.startsWith(NS_KEYCLOAK_PREFIX)) {",
          "320:                         optionName = optionName.substring(NS_KEYCLOAK_PREFIX.length());",
          "321:                     }",
          "323:                     StringBuilder sb = new StringBuilder(\"\\t- \");",
          "324:                     sb.append(optionName);",
          "325:                     if (metadata.getNote() != null || !metadata.getNewOptionsKeys().isEmpty()) {",
          "326:                         sb.append(\":\");",
          "327:                     }",
          "328:                     if (metadata.getNote() != null) {",
          "329:                         sb.append(\" \");",
          "330:                         sb.append(metadata.getNote());",
          "331:                         if (!metadata.getNote().endsWith(\".\")) {",
          "332:                             sb.append(\".\");",
          "333:                         }",
          "334:                     }",
          "335:                     if (!metadata.getNewOptionsKeys().isEmpty()) {",
          "336:                         sb.append(\" Use \");",
          "337:                         sb.append(String.join(\", \", metadata.getNewOptionsKeys()));",
          "338:                         sb.append(\".\");",
          "339:                     }",
          "340:                     deprecatedInUse.add(sb.toString());",
          "341:                 });",
          "345:         Logger logger = Logger.getLogger(Picocli.class); // logger can't be instantiated in a class field",
          "347:         if (!ignoredBuildTime.isEmpty()) {",
          "348:             outputIgnoredProperties(ignoredBuildTime, true, logger);",
          "349:         } else if (!ignoredRunTime.isEmpty()) {",
          "350:             outputIgnoredProperties(ignoredRunTime, false, logger);",
          "353:         if (!deprecatedInUse.isEmpty()) {",
          "354:             logger.warn(\"The following used options are DEPRECATED and will be removed in a future release:\\n\" + String.join(\"\\n\", deprecatedInUse));",
          "",
          "[Added Lines]",
          "270:     public static void validateConfig(List<String> cliArgs, AbstractCommand abstractCommand, PrintWriter out) {",
          "277:         try {",
          "278:             PropertyMappingInterceptor.disable(); // we don't want the mapped / transformed properties, we want what the user effectively supplied",
          "279:             List<String> ignoredBuildTime = new ArrayList<>();",
          "280:             List<String> ignoredRunTime = new ArrayList<>();",
          "281:             Set<String> deprecatedInUse = new HashSet<>();",
          "282:             for (OptionCategory category : abstractCommand.getOptionCategories()) {",
          "283:                 List<PropertyMapper> mappers = new ArrayList<>();",
          "284:                 Optional.ofNullable(PropertyMappers.getRuntimeMappers().get(category)).ifPresent(mappers::addAll);",
          "285:                 Optional.ofNullable(PropertyMappers.getBuildTimeMappers().get(category)).ifPresent(mappers::addAll);",
          "286:                 for (PropertyMapper<?> mapper : mappers) {",
          "287:                     ConfigValue configValue = Configuration.getConfigValue(mapper.getFrom());",
          "290:                     if (configValue.getValue() == null || configValue.getConfigSourceOrdinal() < 300) {",
          "291:                         continue;",
          "294:                     if (mapper.isBuildTime() && !options.includeBuildTime) {",
          "295:                         ignoredBuildTime.add(mapper.getFrom());",
          "296:                         continue;",
          "297:                     }",
          "298:                     if (mapper.isRunTime() && !options.includeRuntime) {",
          "299:                         ignoredRunTime.add(mapper.getFrom());",
          "300:                         continue;",
          "303:                     mapper.validate(configValue);",
          "305:                     mapper.getDeprecatedMetadata().ifPresent(metadata -> {",
          "306:                         handleDeprecated(deprecatedInUse, mapper, metadata);",
          "307:                     });",
          "309:             }",
          "311:             Logger logger = Logger.getLogger(Picocli.class); // logger can't be instantiated in a class field",
          "313:             if (!ignoredBuildTime.isEmpty()) {",
          "314:                 outputIgnoredProperties(ignoredBuildTime, true, logger);",
          "315:             } else if (!ignoredRunTime.isEmpty()) {",
          "316:                 outputIgnoredProperties(ignoredRunTime, false, logger);",
          "317:             }",
          "319:             if (!deprecatedInUse.isEmpty()) {",
          "320:                 logger.warn(\"The following used options are DEPRECATED and will be removed in a future release:\\n\" + String.join(\"\\n\", deprecatedInUse));",
          "322:         } finally {",
          "323:             PropertyMappingInterceptor.enable();",
          "325:     }",
          "327:     private static void handleDeprecated(Set<String> deprecatedInUse, PropertyMapper<?> mapper,",
          "328:             DeprecatedMetadata metadata) {",
          "329:         String optionName = mapper.getFrom();",
          "330:         if (optionName.startsWith(NS_KEYCLOAK_PREFIX)) {",
          "331:             optionName = optionName.substring(NS_KEYCLOAK_PREFIX.length());",
          "334:         StringBuilder sb = new StringBuilder(\"\\t- \");",
          "335:         sb.append(optionName);",
          "336:         if (metadata.getNote() != null || !metadata.getNewOptionsKeys().isEmpty()) {",
          "337:             sb.append(\":\");",
          "338:         }",
          "339:         if (metadata.getNote() != null) {",
          "340:             sb.append(\" \");",
          "341:             sb.append(metadata.getNote());",
          "342:             if (!metadata.getNote().endsWith(\".\")) {",
          "343:                 sb.append(\".\");",
          "344:             }",
          "345:         }",
          "346:         if (!metadata.getNewOptionsKeys().isEmpty()) {",
          "347:             sb.append(\" Use \");",
          "348:             sb.append(String.join(\", \", metadata.getNewOptionsKeys()));",
          "349:             sb.append(\".\");",
          "351:         deprecatedInUse.add(sb.toString());",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/PropertyMapperParameterConsumer.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/PropertyMapperParameterConsumer.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/PropertyMapperParameterConsumer.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/PropertyMapperParameterConsumer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.Collection;",
          "23: import java.util.Stack;",
          "27: import org.keycloak.utils.StringUtil;",
          "",
          "[Removed Lines]",
          "24: import java.util.stream.Collectors;",
          "25: import java.util.stream.StreamSupport;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:                     commandLine, \"Missing required value for option '\" + name + \"' (\" + argSpec.paramLabel() + \").\" + getExpectedValuesMessage(argSpec.completionCandidates(), option.completionCandidates()));",
          "59:         }",
          "64:         if (!args.isEmpty() && isOptionValue(args.peek())) {",
          "65:             throw new ParameterException(",
          "66:                     commandLine, \"Option '\" + name + \"' expects a single value (\" + argSpec.paramLabel() + \")\" + getExpectedValuesMessage(argSpec.completionCandidates(), option.completionCandidates()));",
          "67:         }",
          "74:     }",
          "77:         return \"Invalid value for option '\" + name + \"': \" + value + \".\" + getExpectedValuesMessage(specCandidates, optionCandidates);",
          "78:     }",
          "",
          "[Removed Lines]",
          "62:         String value = args.pop();",
          "69:         if (isExpectedValue(StreamSupport.stream(option.completionCandidates().spliterator(), false).collect(Collectors.toList()), value)) {",
          "70:             return;",
          "71:         }",
          "73:         throw new ParameterException(commandLine, getErrorMessage(name, value, argSpec.completionCandidates(), option.completionCandidates()));",
          "76:     static String getErrorMessage(String name, String value, Iterable<String> specCandidates, Iterable<String> optionCandidates) {",
          "",
          "[Added Lines]",
          "60:         args.pop();",
          "68:     public static String getErrorMessage(String name, String value, Iterable<String> specCandidates, Iterable<String> optionCandidates) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:         return optionCandidates.iterator().hasNext() ? \" Expected values are: \" + String.join(\", \", specCandidates) : \"\";",
          "86:     }",
          "89:         if (expectedValues.isEmpty()) {",
          "91:             return true;",
          "",
          "[Removed Lines]",
          "88:     static boolean isExpectedValue(Collection<String> expectedValues, String value) {",
          "",
          "[Added Lines]",
          "80:     public static boolean isExpectedValue(Collection<String> expectedValues, String value) {",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/AbstractCommand.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/AbstractCommand.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/AbstractCommand.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/AbstractCommand.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:         return Arrays.asList(OptionCategory.values());",
          "65:     }",
          "69:     }",
          "71:     public abstract String getName();",
          "",
          "[Removed Lines]",
          "67:     protected void validateNonCliConfig() {",
          "68:         Picocli.validateNonCliConfig(ConfigArgsConfigSource.getAllCliArgs(), this, spec.commandLine().getOut());",
          "",
          "[Added Lines]",
          "67:     protected void validateConfig() {",
          "68:         Picocli.validateConfig(ConfigArgsConfigSource.getAllCliArgs(), this, spec.commandLine().getOut());",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/AbstractStartCommand.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/AbstractStartCommand.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/AbstractStartCommand.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/AbstractStartCommand.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     public void run() {",
          "30:         doBeforeRun();",
          "31:         CommandLine cmd = spec.commandLine();",
          "33:         KeycloakMain.start((ExecutionExceptionHandler) cmd.getExecutionExceptionHandler(), cmd.getErr(), cmd.getParseResult().originalArgs().toArray(new String[0]));",
          "34:     }",
          "",
          "[Removed Lines]",
          "32:         validateNonCliConfig();",
          "",
          "[Added Lines]",
          "32:         validateConfig();",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/Build.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/Build.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/Build.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/Build.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:         exitWithErrorIfDevProfileIsSetAndNotStartDev();",
          "76:         System.setProperty(\"quarkus.launch.rebuild\", \"true\");",
          "79:         println(spec.commandLine(), \"Updating the configuration and installing your custom providers, if any. Please wait.\");",
          "",
          "[Removed Lines]",
          "77:         validateNonCliConfig();",
          "",
          "[Added Lines]",
          "77:         validateConfig();",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PropertyMappingInterceptor.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PropertyMappingInterceptor.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PropertyMappingInterceptor.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PropertyMappingInterceptor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: public class PropertyMappingInterceptor implements ConfigSourceInterceptor {",
          "49:     <T> Iterator<T> filterRuntime(Iterator<T> iter, Function<T, String> nameFunc) {",
          "50:         if (!isRebuild() && !Environment.isRebuildCheck()) {",
          "51:             return iter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     private static ThreadLocal<Boolean> disable = new ThreadLocal<>();",
          "51:     public static void disable() {",
          "52:         disable.set(true);",
          "53:     }",
          "55:     public static void enable() {",
          "56:         disable.remove();",
          "57:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:     @Override",
          "72:     public ConfigValue getValue(ConfigSourceInterceptorContext context, String name) {",
          "73:         ConfigValue value = PropertyMappers.getValue(context, name);",
          "75:         if (value == null || value.getValue() == null) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:         if (Boolean.TRUE.equals(disable.get())) {",
          "84:             return context.proceed(name);",
          "85:         }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/FeaturePropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/FeaturePropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/FeaturePropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/FeaturePropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.keycloak.quarkus.runtime.configuration.mappers;",
          "3: import org.keycloak.config.FeatureOptions;",
          "5: import static org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper.fromOption;",
          "9:     private FeaturePropertyMappers() {",
          "10:     }",
          "",
          "[Removed Lines]",
          "7: final class FeaturePropertyMappers {",
          "",
          "[Added Lines]",
          "3: import org.keycloak.common.Profile;",
          "4: import org.keycloak.common.Profile.Feature;",
          "6: import org.keycloak.quarkus.runtime.cli.PropertyException;",
          "8: import java.util.Set;",
          "9: import java.util.regex.Matcher;",
          "10: import java.util.regex.Pattern;",
          "11: import java.util.stream.Collectors;",
          "12: import java.util.stream.Stream;",
          "16: public final class FeaturePropertyMappers {",
          "18:     private static Pattern VERSIONED_PATTERN = Pattern.compile(\"([^:]+):v(\\\\d+)\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:         return new PropertyMapper[] {",
          "14:                 fromOption(FeatureOptions.FEATURES)",
          "15:                         .paramLabel(\"feature\")",
          "16:                         .build(),",
          "17:                 fromOption(FeatureOptions.FEATURES_DISABLED)",
          "18:                         .paramLabel(\"feature\")",
          "19:                         .build()",
          "20:         };",
          "21:     }",
          "22: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:                         .validator((mapper, value) -> validateEnabledFeatures(value.getValue()))",
          "35:     public static void validateEnabledFeatures(String s) {",
          "36:         Stream.of(s.split(\",\")).forEach(feature -> {",
          "37:             if (!Profile.getFeatureVersions(feature).isEmpty()) {",
          "38:                 return;",
          "39:             }",
          "40:             if (feature.equals(Profile.Feature.Type.PREVIEW.name().toLowerCase())) {",
          "41:                 return;",
          "42:             }",
          "43:             Matcher matcher = VERSIONED_PATTERN.matcher(feature);",
          "44:             if (!matcher.matches()) {",
          "45:                 if (feature.contains(\":\")) {",
          "46:                     throw new PropertyException(String.format(",
          "47:                             \"%s has an invalid format for enabling a feature, expected format is feature:v{version}, e.g. docker:v1\",",
          "48:                             feature));",
          "49:                 }",
          "50:                 throw new PropertyException(String.format(\"%s is an unrecognized feature, it should be one of %s\", feature,",
          "51:                         FeatureOptions.getFeatureValues(false)));",
          "52:             }",
          "53:             String unversionedFeature = matcher.group(1);",
          "54:             Set<Feature> featureVersions = Profile.getFeatureVersions(unversionedFeature);",
          "55:             if (featureVersions.isEmpty()) {",
          "56:                 throw new PropertyException(String.format(\"%s has an unrecognized feature, it should be one of %s\",",
          "57:                         feature, FeatureOptions.getFeatureValues(false)));",
          "58:             }",
          "59:             int version = Integer.parseInt(matcher.group(2));",
          "60:             if (!featureVersions.stream().anyMatch(f -> f.getVersion() == version)) {",
          "61:                 throw new PropertyException(",
          "62:                         String.format(\"%s has an unrecognized feature version, it should be one of %s\", feature,",
          "63:                                 featureVersions.stream().map(Feature::getVersion).map(String::valueOf).collect(Collectors.toList())));",
          "64:             }",
          "65:         });",
          "66:     }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import java.util.List;",
          "27: import java.util.Objects;",
          "28: import java.util.Optional;",
          "29: import java.util.function.BiFunction;",
          "31: import io.smallrye.config.ConfigSourceInterceptorContext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import java.util.function.BiConsumer;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: import org.keycloak.config.Option;",
          "37: import org.keycloak.config.OptionBuilder;",
          "38: import org.keycloak.config.OptionCategory;",
          "39: import org.keycloak.quarkus.runtime.Environment;",
          "40: import org.keycloak.quarkus.runtime.configuration.MicroProfileConfigProvider;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: import org.keycloak.quarkus.runtime.cli.PropertyException;",
          "41: import org.keycloak.quarkus.runtime.cli.PropertyMapperParameterConsumer;",
          "42: import org.keycloak.quarkus.runtime.configuration.ConfigArgsConfigSource;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:             null,",
          "48:             null,",
          "49:             null,",
          "51:         @Override",
          "52:         public ConfigValue getConfigValue(String name, ConfigSourceInterceptorContext context) {",
          "53:             return context.proceed(name);",
          "",
          "[Removed Lines]",
          "50:             false) {",
          "",
          "[Added Lines]",
          "54:             false,",
          "55:             null) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:     private final String paramLabel;",
          "63:     private final String envVarFormat;",
          "64:     private String cliFormat;",
          "66:     private static final Logger logger = Logger.getLogger(PropertyMapper.class);",
          "68:     PropertyMapper(Option<T> option, String to, BiFunction<Optional<String>, ConfigSourceInterceptorContext, Optional<String>> mapper,",
          "70:         this.option = option;",
          "71:         this.to = to == null ? getFrom() : to;",
          "72:         this.mapper = mapper == null ? PropertyMapper::defaultTransformer : mapper;",
          "",
          "[Removed Lines]",
          "69:                    String mapFrom, String paramLabel, boolean mask) {",
          "",
          "[Added Lines]",
          "70:     private BiConsumer<PropertyMapper<T>, ConfigValue> validator;",
          "75:                    String mapFrom, String paramLabel, boolean mask, BiConsumer<PropertyMapper<T>, ConfigValue> validator) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "75:         this.mask = mask;",
          "76:         this.cliFormat = toCliFormat(option.getKey());",
          "77:         this.envVarFormat = toEnvVarFormat(getFrom());",
          "78:     }",
          "80:     private static Optional<String> defaultTransformer(Optional<String> value, ConfigSourceInterceptorContext context) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:         this.validator = validator;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "235:         private String mapFrom = null;",
          "236:         private boolean isMasked = false;",
          "237:         private String paramLabel;",
          "239:         public Builder(Option<T> option) {",
          "240:             this.option = option;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "245:         private BiConsumer<PropertyMapper<T>, ConfigValue> validator = (mapper, value) -> mapper.validateExpectedValues(value);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "265:             return this;",
          "266:         }",
          "268:         public PropertyMapper<T> build() {",
          "269:             if (paramLabel == null && Boolean.class.equals(option.getType())) {",
          "270:                 paramLabel = Boolean.TRUE + \"|\" + Boolean.FALSE;",
          "271:             }",
          "273:         }",
          "274:     }",
          "",
          "[Removed Lines]",
          "272:             return new PropertyMapper<T>(option, to, mapper, mapFrom, paramLabel, isMasked);",
          "",
          "[Added Lines]",
          "276:         public Builder<T> validator(BiConsumer<PropertyMapper<T>, ConfigValue> validator) {",
          "277:             this.validator = validator;",
          "278:             return this;",
          "279:         }",
          "285:             return new PropertyMapper<T>(option, to, mapper, mapFrom, paramLabel, isMasked, validator);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "277:         return new PropertyMapper.Builder<>(opt);",
          "278:     }",
          "280: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293:     public void validate(ConfigValue value) {",
          "294:         if (validator != null) {",
          "295:             validator.accept(this, value);",
          "296:         }",
          "297:     }",
          "299:     public void validateExpectedValues(ConfigValue value) {",
          "300:         if (PropertyMapperParameterConsumer.isExpectedValue(getExpectedValues(), value.getValue())) {",
          "301:             return;",
          "302:         }",
          "303:         boolean cli = Optional.ofNullable(value.getConfigSourceName()).filter(name -> name.contains(ConfigArgsConfigSource.NAME)).isPresent();",
          "304:         throw new PropertyException(",
          "305:                 PropertyMapperParameterConsumer.getErrorMessage(cli ? this.getCliFormat() : getFrom(),",
          "306:                         value.getValue(), getExpectedValues(), getExpectedValues())",
          "307:                         + (cli ? \"\" : \". From ConfigSource \" + value.getConfigSourceName()));",
          "308:     }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/FeaturePropertyMappersTest.java||quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/FeaturePropertyMappersTest.java": [
          "File: quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/FeaturePropertyMappersTest.java -> quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/FeaturePropertyMappersTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.keycloak.quarkus.runtime.configuration.test;",
          "20: import org.junit.Test;",
          "21: import org.keycloak.common.Profile.Feature;",
          "22: import org.keycloak.quarkus.runtime.cli.PropertyException;",
          "23: import org.keycloak.quarkus.runtime.configuration.mappers.FeaturePropertyMappers;",
          "25: import static org.junit.Assert.assertThrows;",
          "27: public class FeaturePropertyMappersTest {",
          "29:     @Test",
          "30:     public void testInvalidFeatureFormat() {",
          "31:         assertThrows(PropertyException.class, () -> FeaturePropertyMappers.validateEnabledFeatures(\"invalid:\"));",
          "32:     }",
          "34:     @Test",
          "35:     public void testInvalidFeature() {",
          "36:         assertThrows(PropertyException.class, () -> FeaturePropertyMappers.validateEnabledFeatures(\"invalid\"));",
          "37:     }",
          "39:     @Test",
          "40:     public void testInvalidVersionedFeature() {",
          "41:         assertThrows(PropertyException.class, () -> FeaturePropertyMappers.validateEnabledFeatures(\"invalid:v1\"));",
          "42:     }",
          "44:     @Test",
          "45:     public void testInvalidFeatureVersion() {",
          "46:         assertThrows(PropertyException.class, () -> FeaturePropertyMappers.validateEnabledFeatures(Feature.DOCKER.getUnversionedKey() + \":v0\"));",
          "47:     }",
          "49:     @Test",
          "50:     public void testValidFeatures() {",
          "51:         FeaturePropertyMappers.validateEnabledFeatures(",
          "52:                 Feature.DOCKER.getUnversionedKey() + \",\" + \"preview\" + \",\" + Feature.ACCOUNT2.getVersionedKey());",
          "53:     }",
          "55: }",
          "",
          "---------------"
        ],
        "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/FeaturesDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/FeaturesDistTest.java": [
          "File: quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/FeaturesDistTest.java -> quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/FeaturesDistTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: @LegacyStore",
          "29: public class FeaturesDistTest {",
          "33:     @Test",
          "34:     public void testEnableOnBuild(KeycloakDistribution dist) {",
          "",
          "[Removed Lines]",
          "31:     private static final String PREVIEW_FEATURES_EXPECTED_LOG = \"Preview features enabled: account3, admin-fine-grained-authz, client-secret-rotation, declarative-user-profile, dpop, multi-site, recovery-codes, scripts, token-exchange, update-email\";",
          "",
          "[Added Lines]",
          "31:     private static final String PREVIEW_FEATURES_EXPECTED_LOG = \"Preview features enabled: account3:v1, admin-fine-grained-authz:v1, client-secret-rotation:v1, declarative-user-profile:v1, dpop:v1, multi-site:v1, recovery-codes:v1, scripts:v1, token-exchange:v1, update-email:v1\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:     @Test",
          "71:     @Launch({StartDev.NAME, \"--features=token-exchange\", \"--features-disabled=token-exchange\"})",
          "73:         CLIResult cliResult = (CLIResult) result;",
          "76:     }",
          "78:     @Test",
          "",
          "[Removed Lines]",
          "72:     public void testEnablePrecedenceOverDisable(LaunchResult result) {",
          "74:         cliResult.assertStartedDevMode();",
          "75:         assertThat(cliResult.getOutput(), containsString(\"Preview features enabled: token-exchange\"));",
          "",
          "[Added Lines]",
          "72:     public void testEnableDisableConflict(LaunchResult result) {",
          "74:         cliResult.assertError(\"token-exchange is in both the enabled and disabled feature lists\");",
          "75:     }",
          "77:     @Test",
          "78:     @Launch({StartDev.NAME, \"--features=token-exchange:v1\", \"--features-disabled=token-exchange\"})",
          "79:     public void testEnableDisableConflictUsingVersioned(LaunchResult result) {",
          "80:         CLIResult cliResult = (CLIResult) result;",
          "81:         cliResult.assertError(\"Versioned feature token-exchange:v1 is not expected as token-exchange is already disabled\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82:         CLIResult cliResult = (CLIResult) result;",
          "83:         cliResult.assertStartedDevMode();",
          "84:         assertThat(cliResult.getOutput(), CoreMatchers.allOf(",
          "86:         assertFalse(cliResult.getOutput().contains(\"declarative-user-profile\"));",
          "87:     }",
          "",
          "[Removed Lines]",
          "85:                 containsString(\"Preview features enabled: admin-fine-grained-authz, token-exchange\")));",
          "",
          "[Added Lines]",
          "91:                 containsString(\"Preview features enabled: admin-fine-grained-authz:v1, token-exchange:v1\")));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "93:         CLIResult cliResult = (CLIResult) result;",
          "94:         cliResult.assertStartedDevMode();",
          "95:         assertThat(cliResult.getOutput(), CoreMatchers.allOf(",
          "97:         assertFalse(cliResult.getOutput().contains(\"declarative-user-profile\"));",
          "98:     }",
          "",
          "[Removed Lines]",
          "96:                 containsString(\"Preview features enabled: admin-fine-grained-authz, token-exchange\")));",
          "",
          "[Added Lines]",
          "102:                 containsString(\"Preview features enabled: admin-fine-grained-authz:v1, token-exchange:v1\")));",
          "",
          "---------------"
        ],
        "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/FipsDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/FipsDistTest.java": [
          "File: quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/FipsDistTest.java -> quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/FipsDistTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:             CLIResult cliResult = dist.run(\"start\");",
          "40:             cliResult.assertStarted();",
          "43:             cliResult.assertMessage(\"Java security providers: [ \\n\"",
          "44:                     + \" KC(BCFIPS version 1.000203, FIPS-JVM: \" + KeycloakFipsSecurityProvider.isSystemFipsEnabled() + \") version 1.0 - class org.keycloak.crypto.fips.KeycloakFipsSecurityProvider\");",
          "45:         });",
          "",
          "[Removed Lines]",
          "42:             cliResult.assertMessageWasShownExactlyNumberOfTimes(\"Preview features enabled: fips\", 0);",
          "",
          "[Added Lines]",
          "42:             cliResult.assertMessageWasShownExactlyNumberOfTimes(\"Preview features enabled: fips:v1\", 0);",
          "",
          "---------------"
        ],
        "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/QuarkusPropertiesDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/QuarkusPropertiesDistTest.java": [
          "File: quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/QuarkusPropertiesDistTest.java -> quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/QuarkusPropertiesDistTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import static org.junit.jupiter.api.Assertions.assertTrue;",
          "24: import static org.keycloak.quarkus.runtime.cli.command.AbstractStartCommand.OPTIMIZED_BUILD_OPTION_LONG;",
          "26: import java.util.function.Consumer;",
          "28: import org.junit.jupiter.api.Disabled;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import java.util.Optional;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:     @Order(9)",
          "132:     void testMissingSmallRyeKeyStorePasswordProperty(LaunchResult result) {",
          "133:         CLIResult cliResult = (CLIResult) result;",
          "135:     }",
          "137:     @Disabled(\"Ensuring config-keystore is used only at runtime removes proactive validation of the path when only the keystore is used\")",
          "",
          "[Removed Lines]",
          "134:         cliResult.assertError(\"config-keystore-password must be specified\");",
          "",
          "[Added Lines]",
          "135:         assertTrue(",
          "136:                 Optional.of(cliResult.getErrorOutput())",
          "137:                         .filter(s -> s.contains(\"config-keystore-password must be specified\")",
          "138:                                 || s.contains(\"is required but it could not be found in any config source\"))",
          "139:                         .isPresent(),",
          "140:                 () -> \"The Error Output:\\n \" + cliResult.getErrorOutput() + \" doesn't warn about the missing password\");",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java||testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java": [
          "File: testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java -> testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.keycloak.http.HttpRequest;",
          "25: import org.keycloak.Config;",
          "26: import org.keycloak.common.Profile;",
          "27: import org.keycloak.common.enums.HostnameVerificationPolicy;",
          "28: import org.keycloak.common.util.HtmlUtils;",
          "29: import org.keycloak.common.util.Time;",
          "30: import org.keycloak.component.ComponentModel;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.keycloak.common.Profile.Feature;",
          "29: import org.keycloak.common.profile.PropertiesProfileConfigResolver;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115: import java.lang.reflect.Method;",
          "116: import java.text.ParseException;",
          "117: import java.text.SimpleDateFormat;",
          "118: import java.util.Collections;",
          "119: import java.util.Date;",
          "120: import java.util.HashMap;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120: import java.util.Arrays;",
          "121: import java.util.Collection;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "870:     private void setFeatureInProfileFile(File file, Profile.Feature featureProfile, String newState) {",
          "871:         doWithProperties(file, props -> {",
          "873:         });",
          "874:     }",
          "876:     private void unsetFeatureInProfileFile(File file, Profile.Feature featureProfile) {",
          "877:         doWithProperties(file, props -> {",
          "879:         });",
          "880:     }",
          "",
          "[Removed Lines]",
          "872:             props.setProperty(\"feature.\" + featureProfile.toString().toLowerCase(), newState);",
          "878:             props.remove(\"feature.\" + featureProfile.toString().toLowerCase());",
          "",
          "[Added Lines]",
          "876:             props.setProperty(PropertiesProfileConfigResolver.getPropertyKey(featureProfile), newState);",
          "882:             props.remove(PropertiesProfileConfigResolver.getPropertyKey(featureProfile));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "951:     }",
          "953:     private Set<Profile.Feature> updateFeature(String featureKey, boolean shouldEnable) {",
          "956:         try {",
          "958:         } catch (IllegalArgumentException e) {",
          "959:             System.err.printf(\"Feature '%s' doesn't exist!!\\n\", featureKey);",
          "960:             throw new BadRequestException();",
          "961:         }",
          "984:             }",
          "985:         }",
          "",
          "[Removed Lines]",
          "954:         Profile.Feature feature;",
          "957:             feature = Profile.Feature.valueOf(featureKey);",
          "963:         if (Profile.getInstance().getFeatures().get(feature) != shouldEnable) {",
          "964:             FeatureDeployerUtil.initBeforeChangeFeature(feature);",
          "966:             String jbossServerConfigDir = System.getProperty(\"jboss.server.config.dir\");",
          "968:             if (jbossServerConfigDir != null) {",
          "969:                 setFeatureInProfileFile(new File(jbossServerConfigDir, \"profile.properties\"), feature, shouldEnable ? \"enabled\" : \"disabled\");",
          "970:             }",
          "972:             Profile current = Profile.getInstance();",
          "974:             Map<Profile.Feature, Boolean> updatedFeatures = new HashMap<>();",
          "975:             updatedFeatures.putAll(current.getFeatures());",
          "976:             updatedFeatures.put(feature, shouldEnable);",
          "978:             Profile.init(current.getName(), updatedFeatures);",
          "980:             if (shouldEnable) {",
          "981:                 FeatureDeployerUtil.deployFactoriesAfterFeatureEnabled(feature);",
          "982:             } else {",
          "983:                 FeatureDeployerUtil.undeployFactoriesAfterFeatureDisabled(feature);",
          "",
          "[Added Lines]",
          "958:         Collection<Profile.Feature> features = null;",
          "961:             features = Arrays.asList(Profile.Feature.valueOf(featureKey));",
          "963:             Set<Feature> featureVersions = Profile.getFeatureVersions(featureKey);",
          "964:             if (!shouldEnable) {",
          "965:                 features = featureVersions;",
          "966:             } else if (!featureVersions.isEmpty()) {",
          "968:                 features = Arrays.asList(featureVersions.iterator().next());",
          "969:             }",
          "970:         }",
          "972:         if (features == null || features.isEmpty()) {",
          "977:         for (Feature feature : features) {",
          "978:             if (Profile.getInstance().getFeatures().get(feature) != shouldEnable) {",
          "979:                 FeatureDeployerUtil.initBeforeChangeFeature(feature);",
          "981:                 String jbossServerConfigDir = System.getProperty(\"jboss.server.config.dir\");",
          "983:                 if (jbossServerConfigDir != null) {",
          "984:                     setFeatureInProfileFile(new File(jbossServerConfigDir, \"profile.properties\"), feature, shouldEnable ? \"enabled\" : \"disabled\");",
          "985:                 }",
          "987:                 Profile current = Profile.getInstance();",
          "989:                 Map<Profile.Feature, Boolean> updatedFeatures = new HashMap<>();",
          "990:                 updatedFeatures.putAll(current.getFeatures());",
          "991:                 updatedFeatures.put(feature, shouldEnable);",
          "993:                 Profile.init(current.getName(), updatedFeatures);",
          "995:                 if (shouldEnable) {",
          "996:                     FeatureDeployerUtil.deployFactoriesAfterFeatureEnabled(feature);",
          "997:                 } else {",
          "998:                     FeatureDeployerUtil.undeployFactoriesAfterFeatureDisabled(feature);",
          "999:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4c348e99e536e81cc314659f484918ca60eee9d",
      "candidate_info": {
        "commit_hash": "e4c348e99e536e81cc314659f484918ca60eee9d",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/e4c348e99e536e81cc314659f484918ca60eee9d",
        "files": [
          "docs/documentation/release_notes/topics/24_0_0.adoc",
          "docs/documentation/upgrading/topics/keycloak/changes-24_0_0.adoc",
          "docs/guides/server/hostname.adoc",
          "docs/guides/server/reverseproxy.adoc",
          "docs/guides/templates/options.adoc",
          "docs/maven-plugin/src/main/java/org/keycloak/guides/maven/Options.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/DeprecatedMetadata.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/HttpOptions.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/MultiOption.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/Option.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/OptionBuilder.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/ProxyOptions.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/OptionRenderer.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ProxyPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/hostname/DefaultHostnameProvider.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/HostnameDistTest.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/ProxyDistTest.java",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.unix.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.windows.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelpAll.unix.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelpAll.windows.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelp.unix.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelp.windows.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelpAll.unix.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelpAll.windows.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartOptimizedHelp.unix.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartOptimizedHelp.windows.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartOptimizedHelpAll.unix.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartOptimizedHelpAll.windows.approved.txt",
          "services/src/main/java/org/keycloak/truststore/FileTruststoreProviderFactory.java"
        ],
        "message": "Add new `--proxy-headers` option (#25178)\n\n* Add new `--proxy-headers` option\n\nCloses #23431\n\nSigned-off-by: V\u00e1clav Muzik\u00e1\u0159 <vmuzikar@redhat.com>\n\nCo-authored-by: Martin Barto\u0161 <mabartos@redhat.com>\nCo-authored-by: Alexander Schwartz <aschwart@redhat.com>\n\n* Address review comments vol. 03\n\nSigned-off-by: V\u00e1clav Muzik\u00e1\u0159 <vmuzikar@redhat.com>\n\n* Address review comments vol. 04\n\nSigned-off-by: V\u00e1clav Muzik\u00e1\u0159 <vmuzikar@redhat.com>\n\n---------\n\nSigned-off-by: V\u00e1clav Muzik\u00e1\u0159 <vmuzikar@redhat.com>\nCo-authored-by: Martin Barto\u0161 <mabartos@redhat.com>\nCo-authored-by: Alexander Schwartz <aschwart@redhat.com>",
        "before_after_code_files": [
          "quarkus/config-api/src/main/java/org/keycloak/config/DeprecatedMetadata.java||quarkus/config-api/src/main/java/org/keycloak/config/DeprecatedMetadata.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/HttpOptions.java||quarkus/config-api/src/main/java/org/keycloak/config/HttpOptions.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/MultiOption.java||quarkus/config-api/src/main/java/org/keycloak/config/MultiOption.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/Option.java||quarkus/config-api/src/main/java/org/keycloak/config/Option.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/OptionBuilder.java||quarkus/config-api/src/main/java/org/keycloak/config/OptionBuilder.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/ProxyOptions.java||quarkus/config-api/src/main/java/org/keycloak/config/ProxyOptions.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/OptionRenderer.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/OptionRenderer.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ProxyPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ProxyPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/hostname/DefaultHostnameProvider.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/hostname/DefaultHostnameProvider.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/HostnameDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/HostnameDistTest.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/ProxyDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/ProxyDistTest.java",
          "services/src/main/java/org/keycloak/truststore/FileTruststoreProviderFactory.java||services/src/main/java/org/keycloak/truststore/FileTruststoreProviderFactory.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java"
          ],
          "candidate": [
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java"
          ]
        }
      },
      "candidate_diff": {
        "quarkus/config-api/src/main/java/org/keycloak/config/DeprecatedMetadata.java||quarkus/config-api/src/main/java/org/keycloak/config/DeprecatedMetadata.java": [
          "File: quarkus/config-api/src/main/java/org/keycloak/config/DeprecatedMetadata.java -> quarkus/config-api/src/main/java/org/keycloak/config/DeprecatedMetadata.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.keycloak.config;",
          "20: import java.util.Collections;",
          "21: import java.util.List;",
          "22: import java.util.Set;",
          "27: public class DeprecatedMetadata {",
          "28:     private final Set<String> newOptionsKeys;",
          "29:     private final String note;",
          "31:     public DeprecatedMetadata() {",
          "32:         newOptionsKeys = Collections.emptySet();",
          "33:         note = null;",
          "34:     }",
          "36:     public DeprecatedMetadata(Set<String> newOptionsKeys, String note) {",
          "37:         this.newOptionsKeys = newOptionsKeys == null ? Collections.emptySet() : Collections.unmodifiableSet(newOptionsKeys);",
          "38:         this.note = note;",
          "39:     }",
          "41:     public Set<String> getNewOptionsKeys() {",
          "42:         return newOptionsKeys;",
          "43:     }",
          "45:     public String getNote() {",
          "46:         return note;",
          "47:     }",
          "48: }",
          "",
          "---------------"
        ],
        "quarkus/config-api/src/main/java/org/keycloak/config/HttpOptions.java||quarkus/config-api/src/main/java/org/keycloak/config/HttpOptions.java": [
          "File: quarkus/config-api/src/main/java/org/keycloak/config/HttpOptions.java -> quarkus/config-api/src/main/java/org/keycloak/config/HttpOptions.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:     public static final Option HTTPS_TRUST_STORE_FILE = new OptionBuilder<>(\"https-trust-store-file\", File.class)",
          "91:             .category(OptionCategory.HTTP)",
          "93:             .build();",
          "95:     public static final Option HTTPS_TRUST_STORE_PASSWORD = new OptionBuilder<>(\"https-trust-store-password\", String.class)",
          "96:             .category(OptionCategory.HTTP)",
          "98:             .build();",
          "100:     public static final Option<String> HTTPS_TRUST_STORE_TYPE = new OptionBuilder<>(\"https-trust-store-type\", String.class)",
          "101:             .category(OptionCategory.HTTP)",
          "103:                     \"If not given, the type is automatically detected based on the file name. \" +",
          "104:                     \"If '\" + SecurityOptions.FIPS_MODE.getKey() + \"' is set to '\" + FipsMode.STRICT + \"' and no value is set, it defaults to 'BCFKS'.\")",
          "105:             .build();",
          "107:     public static final Option<Boolean> HTTP_SERVER_ENABLED = new OptionBuilder<>(\"http-server-enabled\", Boolean.class)",
          "",
          "[Removed Lines]",
          "92:             .description(\"DEPRECATED: The trust store which holds the certificate information of the certificates to trust.\")",
          "97:             .description(\"DEPRECATED: The password of the trust store file.\")",
          "102:             .description(\"DEPRECATED: The type of the trust store file. \" +",
          "",
          "[Added Lines]",
          "92:             .description(\"The trust store which holds the certificate information of the certificates to trust.\")",
          "93:             .deprecated(\"Use the System Truststore instead, see the docs for details.\")",
          "98:             .description(\"The password of the trust store file.\")",
          "99:             .deprecated(\"Use the System Truststore instead, see the docs for details.\")",
          "104:             .description(\"The type of the trust store file. \" +",
          "107:             .deprecated(\"Use the System Truststore instead, see the docs for details.\")",
          "",
          "---------------"
        ],
        "quarkus/config-api/src/main/java/org/keycloak/config/MultiOption.java||quarkus/config-api/src/main/java/org/keycloak/config/MultiOption.java": [
          "File: quarkus/config-api/src/main/java/org/keycloak/config/MultiOption.java -> quarkus/config-api/src/main/java/org/keycloak/config/MultiOption.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:     private final Class auxiliaryType;",
          "13:         this.auxiliaryType = auxiliaryType;",
          "14:     }",
          "",
          "[Removed Lines]",
          "11:     public MultiOption(Class type, Class auxiliaryType, String key, OptionCategory category, boolean hidden, boolean buildTime, String description, Optional defaultValue, Supplier<List<String>> expectedValues) {",
          "12:         super(type, key, category, hidden, buildTime, description, defaultValue, expectedValues);",
          "",
          "[Added Lines]",
          "11:     public MultiOption(Class type, Class auxiliaryType, String key, OptionCategory category, boolean hidden, boolean buildTime, String description, Optional defaultValue, Supplier<List<String>> expectedValues, DeprecatedMetadata deprecatedMetadata) {",
          "12:         super(type, key, category, hidden, buildTime, description, defaultValue, expectedValues, deprecatedMetadata);",
          "",
          "---------------"
        ],
        "quarkus/config-api/src/main/java/org/keycloak/config/Option.java||quarkus/config-api/src/main/java/org/keycloak/config/Option.java": [
          "File: quarkus/config-api/src/main/java/org/keycloak/config/Option.java -> quarkus/config-api/src/main/java/org/keycloak/config/Option.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     private final String description;",
          "15:     private final Optional<T> defaultValue;",
          "16:     private final Supplier<List<String>> expectedValues;",
          "19:         this.type = type;",
          "20:         this.key = key;",
          "21:         this.category = category;",
          "",
          "[Removed Lines]",
          "18:     public Option(Class<T> type, String key, OptionCategory category, boolean hidden, boolean buildTime, String description, Optional<T> defaultValue, Supplier<List<String>> expectedValues) {",
          "",
          "[Added Lines]",
          "17:     private final DeprecatedMetadata deprecatedMetadata;",
          "19:     public Option(Class<T> type, String key, OptionCategory category, boolean hidden, boolean buildTime, String description, Optional<T> defaultValue, Supplier<List<String>> expectedValues, DeprecatedMetadata deprecatedMetadata) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:         this.description = getDescriptionByCategorySupportLevel(description);",
          "25:         this.defaultValue = defaultValue;",
          "26:         this.expectedValues = expectedValues;",
          "27:     }",
          "29:     public Class<T> getType() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28:         this.deprecatedMetadata = deprecatedMetadata;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:         return expectedValues.get();",
          "55:     }",
          "57:     public Option<T> withRuntimeSpecificDefault(T defaultValue) {",
          "58:         return new Option<T>(",
          "59:             this.type,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:     public Optional<DeprecatedMetadata> getDeprecatedMetadata() {",
          "60:         return Optional.ofNullable(deprecatedMetadata);",
          "61:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "63:             this.buildTime,",
          "64:             this.description,",
          "65:             Optional.ofNullable(defaultValue),",
          "67:         );",
          "68:     }",
          "",
          "[Removed Lines]",
          "66:             this.expectedValues",
          "",
          "[Added Lines]",
          "72:             this.expectedValues,",
          "73:             this.deprecatedMetadata",
          "",
          "---------------"
        ],
        "quarkus/config-api/src/main/java/org/keycloak/config/OptionBuilder.java||quarkus/config-api/src/main/java/org/keycloak/config/OptionBuilder.java": [
          "File: quarkus/config-api/src/main/java/org/keycloak/config/OptionBuilder.java -> quarkus/config-api/src/main/java/org/keycloak/config/OptionBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import java.util.List;",
          "4: import java.util.Optional;",
          "5: import java.util.function.Supplier;",
          "6: import java.util.stream.Collectors;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import java.util.Set;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:     private String description;",
          "27:     private Optional<T> defaultValue;",
          "28:     private Supplier<List<String>> expectedValues;",
          "30:     public OptionBuilder(String key, Class<T> type) {",
          "31:         this(key, type, null);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:     private DeprecatedMetadata deprecatedMetadata;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:         return this;",
          "112:     }",
          "115:     public Option<T> build() {",
          "116:         if (auxiliaryType != null) {",
          "118:         } else {",
          "120:         }",
          "121:     }",
          "",
          "[Removed Lines]",
          "117:             return new MultiOption<T>(type, auxiliaryType, key, category, hidden, build, description, defaultValue, expectedValues);",
          "119:             return new Option<T>(type, key, category, hidden, build, description, defaultValue, expectedValues);",
          "",
          "[Added Lines]",
          "116:     public OptionBuilder<T> deprecated() {",
          "117:         this.deprecatedMetadata = new DeprecatedMetadata();",
          "118:         return this;",
          "119:     }",
          "121:     public OptionBuilder<T> deprecated(String note) {",
          "122:         this.deprecatedMetadata = new DeprecatedMetadata(null, note);",
          "123:         return this;",
          "124:     }",
          "126:     public OptionBuilder<T> deprecated(Set<String> newOptionsKeys) {",
          "127:         this.deprecatedMetadata = new DeprecatedMetadata(newOptionsKeys, null);",
          "128:         return this;",
          "129:     }",
          "131:     public OptionBuilder<T> deprecated(String note, Set<String> newOptionsKeys) {",
          "132:         this.deprecatedMetadata = new DeprecatedMetadata(newOptionsKeys, note);",
          "133:         return this;",
          "134:     }",
          "139:             return new MultiOption<T>(type, auxiliaryType, key, category, hidden, build, description, defaultValue, expectedValues, deprecatedMetadata);",
          "141:             return new Option<T>(type, key, category, hidden, build, description, defaultValue, expectedValues, deprecatedMetadata);",
          "",
          "---------------"
        ],
        "quarkus/config-api/src/main/java/org/keycloak/config/ProxyOptions.java||quarkus/config-api/src/main/java/org/keycloak/config/ProxyOptions.java": [
          "File: quarkus/config-api/src/main/java/org/keycloak/config/ProxyOptions.java -> quarkus/config-api/src/main/java/org/keycloak/config/ProxyOptions.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.keycloak.config;",
          "3: public class ProxyOptions {",
          "5:     public enum Mode {",
          "6:         none(false),",
          "7:         edge,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import java.util.Set;",
          "7:     public enum Headers {",
          "8:         forwarded,",
          "9:         xforwarded",
          "10:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:         }",
          "24:     }",
          "26:     public static final Option<Mode> PROXY = new OptionBuilder<>(\"proxy\", Mode.class)",
          "27:             .category(OptionCategory.PROXY)",
          "28:             .description(\"The proxy address forwarding mode if the server is behind a reverse proxy.\")",
          "29:             .defaultValue(Mode.none)",
          "30:             .build();",
          "32:     public static final Option<Boolean> PROXY_FORWARDED_HOST = new OptionBuilder<>(\"proxy-forwarded-host\", Boolean.class)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:     public static final Option<Headers> PROXY_HEADERS = new OptionBuilder<>(\"proxy-headers\", Headers.class)",
          "34:             .category(OptionCategory.PROXY)",
          "35:             .description(\"The proxy headers that should be accepted by the server. Misconfiguration might leave the server exposed to security vulnerabilities. Takes precedence over the deprecated proxy option.\")",
          "36:             .build();",
          "42:             .deprecated(Set.of(PROXY_HEADERS.getKey()))",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/OptionRenderer.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/OptionRenderer.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/OptionRenderer.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/OptionRenderer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:         Text shortName = names.length > 1 ? scheme.optionText(names[0]) : EMPTY_TEXT;",
          "48:         Text longName = createLongName(option, scheme);",
          "49:         Text[][] result = new Text[1][];",
          "55:             throw new CommandLine.PicocliException(\"Option[\" + option + \"] description should have a single line.\");",
          "56:         }",
          "60:         if (EMPTY_TEXT.equals(shortName)) {",
          "61:             result[0] = new Text[] { longName, description };",
          "62:         } else {",
          "",
          "[Removed Lines]",
          "50:         String[] descriptions = option.description();",
          "54:         if (descriptions.length > 1) {",
          "58:         Text description = formatDescription(descriptions, option, scheme);",
          "",
          "[Added Lines]",
          "50:         Text description = scheme.text(option.description()[0]);",
          "54:         if (option.description().length > 1) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:         return result;",
          "67:     }",
          "89:     private Text createLongName(OptionSpec option, ColorScheme scheme) {",
          "90:         Text name = scheme.optionText(option.longestName());",
          "91:         String paramLabel = formatParamLabel(option);",
          "",
          "[Removed Lines]",
          "69:     private Text formatDescription(String[] descriptions, OptionSpec option, ColorScheme scheme) {",
          "70:         String description = descriptions[0];",
          "71:         String defaultValue = option.defaultValue();",
          "72:         Iterable<String> completionCandidates = option.completionCandidates();",
          "74:         if (!option.type().equals(Boolean.class) && completionCandidates != null) {",
          "75:             List<String> expectedValues = StreamSupport.stream(completionCandidates.spliterator(), false).collect(Collectors.toList());",
          "77:             if (!expectedValues.isEmpty()) {",
          "78:                 description = description + \" Possible values are: \" + String.join(\", \", expectedValues) + \".\";",
          "79:             }",
          "80:         }",
          "82:         if (defaultValue != null) {",
          "83:             description = description + \" Default: \" + defaultValue + \".\";",
          "84:         }",
          "86:         return scheme.text(description);",
          "87:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import static org.keycloak.quarkus.runtime.configuration.Configuration.getCurrentBuiltTimeProperty;",
          "31: import static org.keycloak.quarkus.runtime.configuration.Configuration.getRawPersistedProperty;",
          "32: import static org.keycloak.quarkus.runtime.configuration.Configuration.getRuntimeProperty;",
          "33: import static org.keycloak.quarkus.runtime.configuration.mappers.PropertyMappers.formatValue;",
          "34: import static org.keycloak.quarkus.runtime.configuration.mappers.PropertyMappers.isBuildTimeProperty;",
          "35: import static org.keycloak.utils.StringUtil.isNotBlank;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import static org.keycloak.quarkus.runtime.configuration.MicroProfileConfigProvider.NS_KEYCLOAK_PREFIX;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: import java.util.Collections;",
          "42: import java.util.EnumMap;",
          "43: import java.util.HashMap;",
          "44: import java.util.Iterator;",
          "45: import java.util.List;",
          "46: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import java.util.HashSet;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52: import java.util.stream.Collectors;",
          "54: import org.eclipse.microprofile.config.spi.ConfigSource;",
          "55: import org.keycloak.config.MultiOption;",
          "56: import org.keycloak.config.OptionCategory;",
          "57: import org.keycloak.quarkus.runtime.cli.command.AbstractCommand;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: import org.jboss.logging.Logger;",
          "58: import org.keycloak.config.DeprecatedMetadata;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "272:         List<String> ignoredBuildTime = new ArrayList<>();",
          "273:         List<String> ignoredRunTime = new ArrayList<>();",
          "274:         for (OptionCategory category : abstractCommand.getOptionCategories()) {",
          "275:             List<PropertyMapper> mappers = new ArrayList<>();",
          "276:             Optional.ofNullable(PropertyMappers.getRuntimeMappers().get(category)).ifPresent(mappers::addAll);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278:         Set<String> deprecatedInUse = new HashSet<>();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "307:                     throw new PropertyException(PropertyMapperParameterConsumer.getErrorMessage(mapper.getFrom(),",
          "308:                             value, mapper.getExpectedValues(), mapper.getExpectedValues()) + \". From ConfigSource \" + configSource.getName());",
          "309:                 }",
          "310:             }",
          "311:         }",
          "313:         if (!ignoredBuildTime.isEmpty()) {",
          "315:         } else if (!ignoredRunTime.isEmpty()) {",
          "317:         }",
          "318:     }",
          "322:                 build ? \"build\" : \"run\", build ? \"run\" : \"build\",",
          "323:                 properties.stream().collect(Collectors.joining(\", \"))));",
          "325:     }",
          "327:     private static boolean hasConfigChanges(CommandLine cmdCommand) {",
          "",
          "[Removed Lines]",
          "314:             outputIgnoredProperties(ignoredBuildTime, true, out);",
          "316:             outputIgnoredProperties(ignoredRunTime, false, out);",
          "320:     private static void outputIgnoredProperties(List<String> properties, boolean build, PrintWriter out) {",
          "321:         out.write(String.format(\"The following %s time non-cli properties were found, but will be ignored during %s time: %s\\n\",",
          "324:         out.flush();",
          "",
          "[Added Lines]",
          "316:                 mapper.getDeprecatedMetadata().ifPresent(d -> {",
          "317:                     DeprecatedMetadata metadata = (DeprecatedMetadata) d;",
          "318:                     String optionName = mapper.getFrom();",
          "319:                     if (optionName.startsWith(NS_KEYCLOAK_PREFIX)) {",
          "320:                         optionName = optionName.substring(NS_KEYCLOAK_PREFIX.length());",
          "321:                     }",
          "323:                     StringBuilder sb = new StringBuilder(\"\\t- \");",
          "324:                     sb.append(optionName);",
          "325:                     if (metadata.getNote() != null || !metadata.getNewOptionsKeys().isEmpty()) {",
          "326:                         sb.append(\":\");",
          "327:                     }",
          "328:                     if (metadata.getNote() != null) {",
          "329:                         sb.append(\" \");",
          "330:                         sb.append(metadata.getNote());",
          "331:                         if (!metadata.getNote().endsWith(\".\")) {",
          "332:                             sb.append(\".\");",
          "333:                         }",
          "334:                     }",
          "335:                     if (!metadata.getNewOptionsKeys().isEmpty()) {",
          "336:                         sb.append(\" Use \");",
          "337:                         sb.append(String.join(\", \", metadata.getNewOptionsKeys()));",
          "338:                         sb.append(\".\");",
          "339:                     }",
          "340:                     deprecatedInUse.add(sb.toString());",
          "341:                 });",
          "345:         Logger logger = Logger.getLogger(Picocli.class); // logger can't be instantiated in a class field",
          "348:             outputIgnoredProperties(ignoredBuildTime, true, logger);",
          "350:             outputIgnoredProperties(ignoredRunTime, false, logger);",
          "351:         }",
          "353:         if (!deprecatedInUse.isEmpty()) {",
          "354:             logger.warn(\"The following used options are DEPRECATED and will be removed in a future release:\\n\" + String.join(\"\\n\", deprecatedInUse));",
          "358:     private static void outputIgnoredProperties(List<String> properties, boolean build, Logger logger) {",
          "359:         logger.warn(String.format(\"The following %s time non-cli options were found, but will be ignored during %s time: %s\\n\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "563:                 }",
          "565:                 OptionSpec.Builder optBuilder = OptionSpec.builder(name)",
          "567:                         .paramLabel(mapper.getParamLabel())",
          "568:                         .completionCandidates(new Iterable<String>() {",
          "569:                             @Override",
          "",
          "[Removed Lines]",
          "566:                         .description(description)",
          "",
          "[Added Lines]",
          "603:                         .description(getDecoratedOptionDescription(mapper))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "598:         }",
          "599:     }",
          "601:     public static void println(CommandLine cmd, String message) {",
          "602:         cmd.getOut().println(message);",
          "603:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "638:     private static String getDecoratedOptionDescription(PropertyMapper<?> mapper) {",
          "639:         StringBuilder transformedDesc = new StringBuilder(mapper.getDescription());",
          "641:         if (mapper.getType() != Boolean.class && !mapper.getExpectedValues().isEmpty()) {",
          "642:             transformedDesc.append(\" Possible values are: \" + String.join(\", \", mapper.getExpectedValues()) + \".\");",
          "643:         }",
          "645:         mapper.getDefaultValue().map(d -> \" Default: \" + d + \".\").ifPresent(transformedDesc::append);",
          "647:         mapper.getDeprecatedMetadata().ifPresent(deprecatedMetadata -> {",
          "648:             List<String> deprecatedDetails = new ArrayList<>();",
          "649:             String note = deprecatedMetadata.getNote();",
          "650:             if (note != null) {",
          "651:                 if (!note.endsWith(\".\")) {",
          "652:                     note += \".\";",
          "653:                 }",
          "654:                 deprecatedDetails.add(note);",
          "655:             }",
          "656:             if (!deprecatedMetadata.getNewOptionsKeys().isEmpty()) {",
          "657:                 String s = deprecatedMetadata.getNewOptionsKeys().size() > 1 ? \"s\" : \"\";",
          "658:                 deprecatedDetails.add(\"Use the following option\" + s + \" instead: \" + String.join(\", \", deprecatedMetadata.getNewOptionsKeys()) + \".\");",
          "659:             }",
          "661:             transformedDesc.insert(0, \"@|bold DEPRECATED.|@ \");",
          "662:             if (!deprecatedDetails.isEmpty()) {",
          "663:                 transformedDesc",
          "664:                         .append(\" @|bold \")",
          "665:                         .append(String.join(\" \", deprecatedDetails))",
          "666:                         .append(\"|@\");",
          "667:             }",
          "668:         });",
          "670:         return transformedDesc.toString();",
          "671:     }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import io.smallrye.config.ConfigSourceInterceptorContext;",
          "32: import io.smallrye.config.ConfigValue;",
          "34: import org.keycloak.config.Option;",
          "35: import org.keycloak.config.OptionBuilder;",
          "36: import org.keycloak.config.OptionCategory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import org.jboss.logging.Logger;",
          "35: import org.keycloak.config.DeprecatedMetadata;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     private final String envVarFormat;",
          "61:     private String cliFormat;",
          "63:     PropertyMapper(Option<T> option, String to, BiFunction<Optional<String>, ConfigSourceInterceptorContext, Optional<String>> mapper,",
          "64:                    String mapFrom, String paramLabel, boolean mask) {",
          "65:         this.option = option;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:     private static final Logger logger = Logger.getLogger(PropertyMapper.class);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "190:         return mask;",
          "191:     }",
          "193:     private ConfigValue transformValue(String name, Optional<String> value, ConfigSourceInterceptorContext context, String configSourceName) {",
          "194:         if (value == null) {",
          "195:             return null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:     public Optional<DeprecatedMetadata> getDeprecatedMetadata() {",
          "198:         return option.getDeprecatedMetadata();",
          "199:     }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ProxyPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ProxyPropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ProxyPropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ProxyPropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.keycloak.quarkus.runtime.configuration.mappers;",
          "3: import io.smallrye.config.ConfigSourceInterceptorContext;",
          "5: import java.util.Optional;",
          "7: import static org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper.fromOption;",
          "13: final class ProxyPropertyMappers {",
          "",
          "[Removed Lines]",
          "8: import static org.keycloak.quarkus.runtime.integration.QuarkusPlatform.addInitializationException;",
          "10: import org.keycloak.config.ProxyOptions;",
          "11: import org.keycloak.quarkus.runtime.Messages;",
          "",
          "[Added Lines]",
          "4: import io.smallrye.config.ConfigValue;",
          "5: import org.keycloak.config.ProxyOptions;",
          "9: import static org.keycloak.quarkus.runtime.configuration.MicroProfileConfigProvider.NS_KEYCLOAK_PREFIX;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:     public static PropertyMapper[] getProxyPropertyMappers() {",
          "18:         return new PropertyMapper[] {",
          "20:                         .to(\"quarkus.http.proxy.proxy-address-forwarding\")",
          "22:                         .paramLabel(\"mode\")",
          "23:                         .build(),",
          "24:                 fromOption(ProxyOptions.PROXY_FORWARDED_HOST)",
          "25:                         .to(\"quarkus.http.proxy.enable-forwarded-host\")",
          "28:                         .build(),",
          "29:                 fromOption(ProxyOptions.PROXY_FORWARDED_HEADER_ENABLED)",
          "30:                         .to(\"quarkus.http.proxy.allow-forwarded\")",
          "33:                         .build(),",
          "34:                 fromOption(ProxyOptions.PROXY_X_FORWARDED_HEADER_ENABLED)",
          "35:                         .to(\"quarkus.http.proxy.allow-x-forwarded\")",
          "38:                         .build()",
          "39:         };",
          "40:     }",
          "48:         }",
          "49:     }",
          "51: }",
          "",
          "[Removed Lines]",
          "19:                 fromOption(ProxyOptions.PROXY)",
          "21:                         .transformer(ProxyPropertyMappers::isProxyHeadersEnabled)",
          "26:                         .mapFrom(\"proxy\")",
          "27:                         .transformer(ProxyPropertyMappers::isProxyHeadersEnabled)",
          "31:                         .mapFrom(\"proxy\")",
          "32:                         .transformer(ProxyPropertyMappers::isProxyHeadersEnabled)",
          "36:                         .mapFrom(\"proxy\")",
          "37:                         .transformer(ProxyPropertyMappers::isProxyHeadersEnabled)",
          "42:     private static Optional<String> isProxyHeadersEnabled(Optional<String> value, ConfigSourceInterceptorContext context) {",
          "43:         try {",
          "44:             return Optional.of(String.valueOf(ProxyOptions.Mode.valueOf(value.get()).isProxyHeadersEnabled()));",
          "45:         } catch (IllegalArgumentException iae) {",
          "46:             addInitializationException(Messages.invalidProxyMode(value.get()));",
          "47:             return Optional.of(Boolean.FALSE.toString());",
          "",
          "[Added Lines]",
          "18:                 fromOption(ProxyOptions.PROXY_HEADERS)",
          "20:                         .transformer((v, c) -> proxyEnabled(null, v, c))",
          "21:                         .paramLabel(\"headers\")",
          "22:                         .build(),",
          "23:                 fromOption(ProxyOptions.PROXY)",
          "28:                         .mapFrom(\"proxy-headers\")",
          "29:                         .transformer((v, c) -> proxyEnabled(null, v, c))",
          "33:                         .mapFrom(\"proxy-headers\")",
          "34:                         .transformer((v, c) -> proxyEnabled(ProxyOptions.Headers.forwarded, v, c))",
          "38:                         .mapFrom(\"proxy-headers\")",
          "39:                         .transformer((v, c) -> proxyEnabled(ProxyOptions.Headers.xforwarded, v, c))",
          "44:     private static Optional<String> proxyEnabled(ProxyOptions.Headers testHeader, Optional<String> value, ConfigSourceInterceptorContext context) {",
          "45:         boolean enabled;",
          "47:         if (value.isPresent()) { // proxy-headers explicitly configured",
          "48:             if (testHeader != null) {",
          "49:                 enabled = ProxyOptions.Headers.valueOf(value.get()).equals(testHeader);",
          "50:             } else {",
          "51:                 enabled = true;",
          "52:             }",
          "53:         } else { // fallback to the deprecated proxy option",
          "54:             String proxyKey = NS_KEYCLOAK_PREFIX + ProxyOptions.PROXY.getKey();",
          "55:             ConfigValue proxyOptionConfigValue = context.proceed(proxyKey);",
          "57:             ProxyOptions.Mode proxyMode;",
          "58:             if (proxyOptionConfigValue == null) { // neither proxy-headers nor proxy options are configured, falling back to default proxy value which is \"none\"",
          "59:                 proxyMode = (ProxyOptions.Mode) PropertyMappers.getMapper(proxyKey).getDefaultValue().orElseThrow();",
          "60:             } else {",
          "61:                 proxyMode = ProxyOptions.Mode.valueOf(proxyOptionConfigValue.getValue());",
          "62:             }",
          "64:             enabled = proxyMode.isProxyHeadersEnabled();",
          "67:         return Optional.of(String.valueOf(enabled));",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/hostname/DefaultHostnameProvider.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/hostname/DefaultHostnameProvider.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/hostname/DefaultHostnameProvider.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/hostname/DefaultHostnameProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import static org.keycloak.common.util.UriUtils.checkUrl;",
          "21: import static org.keycloak.config.ProxyOptions.PROXY;",
          "22: import static org.keycloak.quarkus.runtime.configuration.Configuration.getConfigValue;",
          "23: import static org.keycloak.quarkus.runtime.configuration.Configuration.getKcConfigValue;",
          "24: import static org.keycloak.urls.UrlType.ADMIN;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import static org.keycloak.config.ProxyOptions.PROXY_HEADERS;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "289:         }",
          "291:         defaultPath = config.get(\"path\", frontEndBaseUri == null ? null : frontEndBaseUri.getPath());",
          "293:         defaultTlsPort = Integer.parseInt(httpsPort);",
          "295:         if (defaultTlsPort == DEFAULT_HTTPS_PORT_VALUE) {",
          "",
          "[Removed Lines]",
          "292:         noProxy = Mode.none.equals(ProxyOptions.Mode.valueOf(getKcConfigValue(PROXY.getKey()).getValue()));",
          "",
          "[Added Lines]",
          "294:         if (getKcConfigValue(PROXY_HEADERS.getKey()).getValue() != null) { // proxy-headers option was explicitly configured",
          "295:             noProxy = false;",
          "296:         } else { // falling back to proxy option",
          "297:             noProxy = Mode.none.equals(ProxyOptions.Mode.valueOf(getKcConfigValue(PROXY.getKey()).getValue()));",
          "298:         }",
          "",
          "---------------"
        ],
        "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/HostnameDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/HostnameDistTest.java": [
          "File: quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/HostnameDistTest.java -> quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/HostnameDistTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:         assertFrontEndUrl(\"https://mykeycloak.org:8443\", \"https://mykeycloak.org/\");",
          "73:     }",
          "75:     @Test",
          "76:     @Launch({ \"start\", \"--hostname=mykeycloak.org\", \"--proxy=edge\", \"--hostname-strict-https=false\" })",
          "77:     public void testUseDefaultPortsWhenProxyIsSetNoStrictHttps() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:     @Test",
          "76:     @Launch({ \"start\", \"--hostname=mykeycloak.org\", \"--proxy-headers=forwarded\" })",
          "77:     public void testUseDefaultPortsWhenProxyHeadersIsSet() {",
          "78:         assertFrontEndUrl(\"http://mykeycloak.org:8080\", \"https://mykeycloak.org/\");",
          "79:         assertFrontEndUrl(\"https://mykeycloak.org:8443\", \"https://mykeycloak.org/\");",
          "80:     }",
          "",
          "---------------"
        ],
        "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/ProxyDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/ProxyDistTest.java": [
          "File: quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/ProxyDistTest.java -> quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/ProxyDistTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:         assertFrontEndUrl(\"http://mykeycloak.org:8080\", \"http://mykeycloak.org:8080/\");",
          "47:         assertFrontEndUrl(\"http://localhost:8080\", \"http://mykeycloak.org:8080/\");",
          "48:         assertFrontEndUrl(\"https://localhost:8443\", \"https://mykeycloak.org:8443/\");",
          "50:     }",
          "52:     @Test",
          "",
          "[Removed Lines]",
          "49:         given().header(\"X-Forwarded-Host\", \"test\").when().get(\"http://localhost:8080\").then().body(containsString(\"http://localhost:8080/admin\"));",
          "",
          "[Added Lines]",
          "49:         assertForwardedHeaderIsIgnored();",
          "50:         assertXForwardedHeadersAreIgnored();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     @Test",
          "59:     @Launch({ \"start-dev\", \"--hostname=mykeycloak.org\", \"--proxy=edge\" })",
          "60:     public void testForwardedHeadersWithEdge() {",
          "62:     }",
          "64:     @Test",
          "",
          "[Removed Lines]",
          "61:         given().header(\"Forwarded\", \"for=12.34.56.78;host=test:1234;proto=https, for=23.45.67.89\").when().get(\"http://mykeycloak.org:8080\").then().body(containsString(\"https://test:1234/admin\"));",
          "",
          "[Added Lines]",
          "62:         assertForwardedHeader();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:         assertXForwardedHeaders();",
          "68:     }",
          "70:     @Test",
          "71:     @Launch({ \"start-dev\", \"--hostname-url=http://mykeycloak.org:1234\", \"--hostname-admin-url=http://mykeycloakadmin.127.0.0.1.nip.io:1234\", \"--proxy=edge\" })",
          "72:     public void testIgnoreForwardedHeadersWhenFrontendUrlSet() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:     @Test",
          "72:     @Launch({ \"start-dev\", \"--hostname=mykeycloak.org\", \"--proxy=passthrough\" })",
          "73:     public void testProxyHeadersIgnoredWithPassthrough() {",
          "74:         assertForwardedHeaderIsIgnored();",
          "75:         assertXForwardedHeadersAreIgnored();",
          "76:     }",
          "78:     @Test",
          "79:     @Launch({ \"start-dev\", \"--hostname=mykeycloak.org\", \"--proxy-headers=forwarded\" })",
          "80:     public void testForwardedProxyHeaders() {",
          "81:         assertForwardedHeader();",
          "82:         assertXForwardedHeadersAreIgnored();",
          "83:     }",
          "85:     @Test",
          "86:     @Launch({ \"start-dev\", \"--hostname=mykeycloak.org\", \"--proxy-headers=xforwarded\" })",
          "87:     public void testXForwardedProxyHeaders() {",
          "88:         assertForwardedHeaderIsIgnored();",
          "89:         assertXForwardedHeaders();",
          "90:     }",
          "92:     @Test",
          "93:     @Launch({ \"start-dev\", \"--hostname=mykeycloak.org\", \"--proxy-headers=xforwarded\", \"--proxy=reencrypt\" })",
          "94:     public void testProxyHeadersTakePrecedenceOverProxyReencryptOption() {",
          "95:         assertForwardedHeaderIsIgnored();",
          "96:         assertXForwardedHeaders();",
          "97:     }",
          "99:     @Test",
          "100:     @Launch({ \"start-dev\", \"--hostname=mykeycloak.org\", \"--proxy-headers=xforwarded\", \"--proxy=none\" })",
          "101:     public void testProxyHeadersTakePrecedenceOverProxyNoneOption() {",
          "102:         assertForwardedHeaderIsIgnored();",
          "103:         assertXForwardedHeaders();",
          "104:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74:         given().header(\"X-Forwarded-Proto\", \"https\").when().get(\"http://localhost:8080\").then().body(containsString(\"http://mykeycloakadmin.127.0.0.1.nip.io:1234/admin\"));",
          "75:     }",
          "77:     private void assertXForwardedHeaders() {",
          "78:         given().header(\"X-Forwarded-Host\", \"test\").when().get(\"http://mykeycloak.org:8080\").then().body(containsString(\"http://test:8080/admin\"));",
          "79:         given().header(\"X-Forwarded-Host\", \"test\").when().get(\"http://localhost:8080\").then().body(containsString(\"http://test:8080/admin\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:     private void assertForwardedHeader() {",
          "114:         given().header(\"Forwarded\", \"for=12.34.56.78;host=test:1234;proto=https, for=23.45.67.89\").when().get(\"http://mykeycloak.org:8080\").then().body(containsString(\"https://test:1234/admin\"));",
          "115:     }",
          "117:     private void assertForwardedHeaderIsIgnored() {",
          "118:         given().header(\"Forwarded\", \"for=12.34.56.78;host=test:1234;proto=https, for=23.45.67.89\").when().get(\"http://localhost:8080\").then().body(containsString(\"http://localhost:8080\"));",
          "119:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "83:         given().header(\"X-Forwarded-Proto\", \"https\").header(\"X-Forwarded-Port\", \"8443\").when().get(\"http://localhost:8080\").then().body(containsString(\"https://localhost:8443/admin\"));",
          "84:     }",
          "86:     private OIDCConfigurationRepresentation getServerMetadata(String baseUrl) {",
          "87:         return when().get(baseUrl + \"/realms/master/.well-known/openid-configuration\").as(OIDCConfigurationRepresentation.class);",
          "88:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:     private void assertXForwardedHeadersAreIgnored() {",
          "131:         given().header(\"X-Forwarded-Host\", \"test\").when().get(\"http://mykeycloak.org:8080\").then().body(containsString(\"http://mykeycloak.org:8080/admin\"));",
          "132:         given().header(\"X-Forwarded-Host\", \"test\").when().get(\"http://localhost:8080\").then().body(containsString(\"http://localhost:8080/admin\"));",
          "133:         given().header(\"X-Forwarded-Host\", \"test\").when().get(\"https://localhost:8443\").then().body(containsString(\"https://localhost:8443/admin\"));",
          "134:         given().header(\"X-Forwarded-Proto\", \"https\").when().get(\"http://localhost:8080\").then().body(containsString(\"http://localhost:8080/admin\"));",
          "135:         given().header(\"X-Forwarded-Proto\", \"https\").header(\"X-Forwarded-Port\", \"8443\").when().get(\"http://localhost:8080\").then().body(containsString(\"http://localhost:8080/admin\"));",
          "136:     }",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/truststore/FileTruststoreProviderFactory.java||services/src/main/java/org/keycloak/truststore/FileTruststoreProviderFactory.java": [
          "File: services/src/main/java/org/keycloak/truststore/FileTruststoreProviderFactory.java -> services/src/main/java/org/keycloak/truststore/FileTruststoreProviderFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:         String policy = config.get(HOSTNAME_VERIFICATION_POLICY);",
          "78:         String configuredType = config.get(\"type\");",
          "80:         HostnameVerificationPolicy verificationPolicy = null;",
          "81:         KeyStore truststore = null;",
          "82:         boolean system = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:         if (storepath != null || pass != null || configuredType != null) {",
          "81:             log.warn(\"Using deprecated 'spi-truststore-file-*' options. Consider using 'truststore-paths' option.\");",
          "82:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2dd783c9c60d6bb922b36d29d00b9bf15d4e9d69",
      "candidate_info": {
        "commit_hash": "2dd783c9c60d6bb922b36d29d00b9bf15d4e9d69",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/2dd783c9c60d6bb922b36d29d00b9bf15d4e9d69",
        "files": [
          "quarkus/config-api/src/main/java/org/keycloak/config/Option.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/ConfigArgsConfigSource.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/Configuration.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/IgnoredArtifacts.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KcEnvConfigSource.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KeycloakPropertiesConfigSource.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/NestedPropertyMappingInterceptor.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PropertyMappingInterceptor.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ConfigKeystorePropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/LoggingPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/WildcardPropertyMapper.java",
          "quarkus/runtime/src/main/resources/META-INF/services/io.smallrye.config.ConfigSourceInterceptor",
          "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/AbstractConfigurationTest.java",
          "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java",
          "quarkus/runtime/src/test/resources/META-INF/keycloak.conf",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/FipsDistTest.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartDevCommandDistTest.java"
        ],
        "message": "refinement of propertymapperinterceptor names (#37504)\n\n* fix: generalizing the reporting of names by property mapping\n\ncloses: #37503 #37781 #37780\n\nSigned-off-by: Steve Hawkins <shawkins@redhat.com>\n\n* Update quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/NestedPropertyMappingInterceptor.java\n\nCo-authored-by: V\u00e1clav Muzik\u00e1\u0159 <vaclav@muzikari.cz>\nSigned-off-by: Steven Hawkins <shawkins@redhat.com>\n\n* adding more explanation of going from a parent to wildcard values\n\nSigned-off-by: Steve Hawkins <shawkins@redhat.com>\n\n* refining the nested logic and comments\n\nSigned-off-by: Steve Hawkins <shawkins@redhat.com>\n\n* preventing nested expressions from always resolving the mapped value\n\nSigned-off-by: Steve Hawkins <shawkins@redhat.com>\n\n---------\n\nSigned-off-by: Steve Hawkins <shawkins@redhat.com>\nSigned-off-by: Steven Hawkins <shawkins@redhat.com>\nCo-authored-by: V\u00e1clav Muzik\u00e1\u0159 <vaclav@muzikari.cz>",
        "before_after_code_files": [
          "quarkus/config-api/src/main/java/org/keycloak/config/Option.java||quarkus/config-api/src/main/java/org/keycloak/config/Option.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/ConfigArgsConfigSource.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/ConfigArgsConfigSource.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/Configuration.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/Configuration.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/IgnoredArtifacts.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/IgnoredArtifacts.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KcEnvConfigSource.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KcEnvConfigSource.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KeycloakPropertiesConfigSource.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KeycloakPropertiesConfigSource.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/NestedPropertyMappingInterceptor.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/NestedPropertyMappingInterceptor.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PropertyMappingInterceptor.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PropertyMappingInterceptor.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ConfigKeystorePropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ConfigKeystorePropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/LoggingPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/LoggingPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/WildcardPropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/WildcardPropertyMapper.java",
          "quarkus/runtime/src/main/resources/META-INF/services/io.smallrye.config.ConfigSourceInterceptor||quarkus/runtime/src/main/resources/META-INF/services/io.smallrye.config.ConfigSourceInterceptor",
          "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/AbstractConfigurationTest.java||quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/AbstractConfigurationTest.java",
          "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java||quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java",
          "quarkus/runtime/src/test/resources/META-INF/keycloak.conf||quarkus/runtime/src/test/resources/META-INF/keycloak.conf",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/FipsDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/FipsDistTest.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartDevCommandDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartDevCommandDistTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java"
          ],
          "candidate": [
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java"
          ]
        }
      },
      "candidate_diff": {
        "quarkus/config-api/src/main/java/org/keycloak/config/Option.java||quarkus/config-api/src/main/java/org/keycloak/config/Option.java": [
          "File: quarkus/config-api/src/main/java/org/keycloak/config/Option.java -> quarkus/config-api/src/main/java/org/keycloak/config/Option.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import java.util.List;",
          "4: import java.util.Optional;",
          "6: import java.util.regex.Pattern;",
          "7: import java.util.stream.Collectors;",
          "",
          "[Removed Lines]",
          "5: import java.util.regex.Matcher;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: import java.util.HashSet;",
          "40: import java.util.List;",
          "41: import java.util.Map;",
          "43: import java.util.Optional;",
          "44: import java.util.Properties;",
          "45: import java.util.Set;",
          "",
          "[Removed Lines]",
          "42: import java.util.Objects;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "382:             }",
          "383:             if (options.includeRuntime) {",
          "384:                 disabledMappers.addAll(PropertyMappers.getDisabledRuntimeMappers().values());",
          "387:             }",
          "436:                 }",
          "437:             }",
          "",
          "[Removed Lines]",
          "385:             } else {",
          "386:                 checkRuntimeSpiOptions(options, ignoredRunTime);",
          "389:             for (OptionCategory category : abstractCommand.getOptionCategories()) {",
          "390:                 List<PropertyMapper<?>> mappers = new ArrayList<>(disabledMappers);",
          "391:                 Optional.ofNullable(PropertyMappers.getRuntimeMappers().get(category)).ifPresent(mappers::addAll);",
          "392:                 Optional.ofNullable(PropertyMappers.getBuildTimeMappers().get(category)).ifPresent(mappers::addAll);",
          "393:                 for (PropertyMapper<?> mapper : mappers) {",
          "394:                     mapper.getKcConfigValues().forEach(configValue -> {",
          "395:                         String configValueStr = configValue.getValue();",
          "398:                         if (configValueStr != null && !isUserModifiable(configValue)) {",
          "399:                             return;",
          "400:                         }",
          "402:                         if (disabledMappers.contains(mapper)) {",
          "403:                             if (!PropertyMappers.isDisabledMapper(mapper.getFrom())) {",
          "404:                                 return; // we found enabled mapper with the same name",
          "405:                             }",
          "408:                             if (configValueStr != null && (!mapper.isRunTime() || !isRebuild())) {",
          "409:                                 if (PropertyMapper.isCliOption(configValue)) {",
          "410:                                     throw new KcUnmatchedArgumentException(abstractCommand.getCommandLine().orElseThrow(), List.of(mapper.getCliFormat()));",
          "411:                                 } else {",
          "412:                                     handleDisabled(mapper.isRunTime() ? disabledRunTime : disabledBuildTime, mapper);",
          "413:                                 }",
          "414:                             }",
          "415:                             return;",
          "416:                         }",
          "418:                         if (mapper.isRunTime() && !options.includeRuntime) {",
          "419:                             if (configValueStr != null) {",
          "420:                                 ignoredRunTime.add(mapper.getFrom());",
          "421:                             }",
          "422:                             return;",
          "423:                         }",
          "425:                         if (configValueStr == null) {",
          "426:                             if (mapper.isRequired()) {",
          "427:                                 handleRequired(missingOption, mapper);",
          "428:                             }",
          "429:                             return;",
          "430:                         }",
          "432:                         mapper.validate(configValue);",
          "434:                         mapper.getDeprecatedMetadata().ifPresent(metadata -> handleDeprecated(deprecatedInUse, mapper, configValueStr, metadata));",
          "435:                     });",
          "",
          "[Added Lines]",
          "386:             var categories = new HashSet<>(abstractCommand.getOptionCategories());",
          "390:             Configuration.getConfig().getPropertyNames().forEach(name -> {",
          "391:                 if (!options.includeRuntime) {",
          "392:                     checkRuntimeSpiOptions(name, ignoredRunTime);",
          "393:                 }",
          "394:                 PropertyMapper<?> mapper = PropertyMappers.getMapper(name);",
          "395:                 if (mapper == null) {",
          "396:                     return; // TODO: need to look for disabled Wildcard mappers",
          "397:                 }",
          "398:                 if (!categories.contains(mapper.getCategory())) {",
          "399:                     return; // not of interest to this command",
          "402:                 }",
          "403:                 String from = mapper.getFrom();",
          "404:                 if (!mapper.hasWildcard()) {",
          "405:                     return; // non-wildcard options will be validated in the next pass",
          "406:                 }",
          "407:                 from = mapper.forKey(name).getFrom();",
          "408:                 validateProperty(abstractCommand, options, ignoredRunTime, disabledBuildTime, disabledRunTime,",
          "409:                         deprecatedInUse, missingOption, disabledMappers, mapper, from);",
          "410:             });",
          "414:             List<PropertyMapper<?>> mappers = new ArrayList<>(disabledMappers);",
          "415:             for (OptionCategory category : categories) {",
          "416:                 Optional.ofNullable(PropertyMappers.getRuntimeMappers().get(category)).ifPresent(mappers::addAll);",
          "417:                 Optional.ofNullable(PropertyMappers.getBuildTimeMappers().get(category)).ifPresent(mappers::addAll);",
          "418:             }",
          "420:             for (PropertyMapper<?> mapper : mappers) {",
          "421:                 if (!mapper.hasWildcard()) {",
          "422:                     validateProperty(abstractCommand, options, ignoredRunTime, disabledBuildTime, disabledRunTime,",
          "423:                             deprecatedInUse, missingOption, disabledMappers, mapper, mapper.getFrom());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "462:         }",
          "463:     }",
          "465:     private static boolean isUserModifiable(ConfigValue configValue) {",
          "468:         return configValue.getConfigSourceOrdinal() >= KeycloakPropertiesConfigSource.PROPERTIES_FILE_ORDINAL;",
          "469:     }",
          "486:             }",
          "487:         }",
          "488:     }",
          "",
          "[Removed Lines]",
          "471:     private static void checkRuntimeSpiOptions(IncludeOptions options, final List<String> ignoredRunTime) {",
          "472:         for (String key : Configuration.getConfig().getPropertyNames()) {",
          "473:             if (!key.startsWith(PropertyMappers.KC_SPI_PREFIX)) {",
          "474:                 continue;",
          "475:             }",
          "476:             boolean buildTimeOption = PropertyMappers.isSpiBuildTimeProperty(key);",
          "478:             if (!buildTimeOption) {",
          "479:                 ConfigValue configValue = Configuration.getConfigValue(key);",
          "480:                 String configValueStr = configValue.getValue();",
          "483:                 if (configValueStr != null && isUserModifiable(configValue)) {",
          "484:                     ignoredRunTime.add(key);",
          "485:                 }",
          "",
          "[Added Lines]",
          "453:     private void validateProperty(AbstractCommand abstractCommand, IncludeOptions options,",
          "454:             final List<String> ignoredRunTime, final Set<String> disabledBuildTime, final Set<String> disabledRunTime,",
          "455:             final Set<String> deprecatedInUse, final Set<String> missingOption,",
          "456:             final Set<PropertyMapper<?>> disabledMappers, PropertyMapper<?> mapper, String from) {",
          "457:         ConfigValue configValue = Configuration.getConfigValue(from);",
          "458:         String configValueStr = configValue.getValue();",
          "461:         if (configValueStr != null && !isUserModifiable(configValue)) {",
          "462:             return;",
          "463:         }",
          "465:         if (disabledMappers.contains(mapper)) {",
          "466:             if (!PropertyMappers.isDisabledMapper(from)) {",
          "467:                 return; // we found enabled mapper with the same name",
          "468:             }",
          "471:             if (configValueStr != null && (!mapper.isRunTime() || !isRebuild())) {",
          "472:                 if (PropertyMapper.isCliOption(configValue)) {",
          "473:                     throw new KcUnmatchedArgumentException(abstractCommand.getCommandLine().orElseThrow(), List.of(mapper.getCliFormat()));",
          "474:                 } else {",
          "475:                     handleDisabled(mapper.isRunTime() ? disabledRunTime : disabledBuildTime, mapper);",
          "476:                 }",
          "477:             }",
          "478:             return;",
          "479:         }",
          "481:         if (mapper.isRunTime() && !options.includeRuntime) {",
          "482:             if (configValueStr != null) {",
          "483:                 ignoredRunTime.add(mapper.getFrom());",
          "484:             }",
          "485:             return;",
          "486:         }",
          "488:         if (configValueStr == null) {",
          "489:             if (mapper.isRequired()) {",
          "490:                 handleRequired(missingOption, mapper);",
          "491:             }",
          "492:             return;",
          "493:         }",
          "495:         mapper.validate(configValue);",
          "497:         mapper.getDeprecatedMetadata().ifPresent(metadata -> handleDeprecated(deprecatedInUse, mapper, configValueStr, metadata));",
          "498:     }",
          "506:     private static void checkRuntimeSpiOptions(String key, final List<String> ignoredRunTime) {",
          "507:         if (!key.startsWith(PropertyMappers.KC_SPI_PREFIX)) {",
          "508:             return;",
          "509:         }",
          "510:         boolean buildTimeOption = PropertyMappers.isSpiBuildTimeProperty(key);",
          "512:         if (!buildTimeOption) {",
          "513:             ConfigValue configValue = Configuration.getConfigValue(key);",
          "514:             String configValueStr = configValue.getValue();",
          "517:             if (configValueStr != null && isUserModifiable(configValue)) {",
          "518:                 ignoredRunTime.add(key);",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/ConfigArgsConfigSource.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/ConfigArgsConfigSource.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/ConfigArgsConfigSource.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/ConfigArgsConfigSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:                 key = NS_KEYCLOAK_PREFIX + key.substring(2);",
          "127:                 properties.put(key, value);",
          "142:             }",
          "143:         }, ignored -> {});",
          "",
          "[Removed Lines]",
          "129:                 PropertyMapper<?> mapper = PropertyMappers.getMapper(key);",
          "131:                 if (mapper != null) {",
          "132:                     mapper = mapper.forKey(key);",
          "134:                     String to = mapper.getTo();",
          "136:                     if (to != null) {",
          "137:                         properties.put(mapper.getTo(), value);",
          "138:                     }",
          "140:                     properties.put(mapper.getFrom(), value);",
          "141:                 }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/Configuration.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/Configuration.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/Configuration.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/Configuration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import io.smallrye.config.SmallRyeConfig;",
          "30: import org.keycloak.config.Option;",
          "33: import org.keycloak.utils.StringUtil;",
          "35: import static org.keycloak.quarkus.runtime.configuration.MicroProfileConfigProvider.NS_KEYCLOAK_PREFIX;",
          "",
          "[Removed Lines]",
          "31: import org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper;",
          "32: import org.keycloak.quarkus.runtime.configuration.mappers.PropertyMappers;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:         return getConfig().getOptionalValue(NS_KEYCLOAK_PREFIX.concat(propertyName), Integer.class);",
          "154:     }",
          "167:     public static String toEnvVarFormat(String key) {",
          "168:         return replaceNonAlphanumericByUnderscores(key).toUpperCase();",
          "169:     }",
          "",
          "[Removed Lines]",
          "156:     public static String getMappedPropertyName(String key) {",
          "157:         PropertyMapper<?> mapper = PropertyMappers.getMapper(key);",
          "159:         if (mapper == null) {",
          "160:             return key;",
          "161:         }",
          "164:         return mapper.getTo() == null ? mapper.getFrom() : mapper.getTo();",
          "165:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/IgnoredArtifacts.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/IgnoredArtifacts.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/IgnoredArtifacts.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/IgnoredArtifacts.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:             }",
          "131:         });",
          "138:         final Set<String> jdbcArtifacts = vendorsOfAllDatasources.stream()",
          "139:                 .map(vendor -> switch (vendor) {",
          "140:                     case H2 -> JDBC_H2;",
          "",
          "[Removed Lines]",
          "134:         Configuration.getOptionalValue(\"quarkus.datasource.db-kind\")",
          "135:             .flatMap(Database::getVendor)",
          "136:             .ifPresent(vendorsOfAllDatasources::add);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KcEnvConfigSource.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KcEnvConfigSource.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KcEnvConfigSource.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KcEnvConfigSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:                 PropertyMapper<?> mapper = PropertyMappers.getMapper(key);",
          "52:                 if (mapper != null) {",
          "61:                     properties.put(mapper.getFrom(), value);",
          "62:                 }",
          "",
          "[Removed Lines]",
          "53:                     mapper = mapper.forEnvKey(key);",
          "55:                     String to = mapper.getTo();",
          "57:                     if (to != null) {",
          "58:                         properties.put(to, value);",
          "59:                     }",
          "",
          "[Added Lines]",
          "54:                     mapper = mapper.forKey(key);",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KeycloakPropertiesConfigSource.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KeycloakPropertiesConfigSource.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KeycloakPropertiesConfigSource.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KeycloakPropertiesConfigSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.keycloak.quarkus.runtime.configuration;",
          "20: import java.io.File;",
          "21: import java.io.IOException;",
          "22: import java.net.URI;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import static org.keycloak.quarkus.runtime.configuration.MicroProfileConfigProvider.NS_KEYCLOAK;",
          "21: import static org.keycloak.quarkus.runtime.configuration.MicroProfileConfigProvider.NS_KEYCLOAK_PREFIX;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: import org.eclipse.microprofile.config.spi.ConfigSource;",
          "34: import org.eclipse.microprofile.config.spi.ConfigSourceProvider;",
          "35: import org.keycloak.quarkus.runtime.Environment;",
          "39: import io.smallrye.config.AbstractLocationConfigSourceLoader;",
          "40: import io.smallrye.config.PropertiesConfigSource;",
          "41: import io.smallrye.config.common.utils.ConfigSourceUtil;",
          "51: public class KeycloakPropertiesConfigSource extends AbstractLocationConfigSourceLoader {",
          "53:     public static final int PROPERTIES_FILE_ORDINAL = 475;",
          "55:     private static final Pattern DOT_SPLIT = Pattern.compile(\"\\\\.\");",
          "",
          "[Removed Lines]",
          "36: import org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper;",
          "37: import org.keycloak.quarkus.runtime.configuration.mappers.PropertyMappers;",
          "43: import static org.keycloak.quarkus.runtime.configuration.Configuration.getMappedPropertyName;",
          "44: import static org.keycloak.quarkus.runtime.configuration.MicroProfileConfigProvider.NS_KEYCLOAK;",
          "45: import static org.keycloak.quarkus.runtime.configuration.MicroProfileConfigProvider.NS_KEYCLOAK_PREFIX;",
          "46: import static org.keycloak.quarkus.runtime.configuration.MicroProfileConfigProvider.NS_QUARKUS;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:         public Path getConfigurationFile() {",
          "123:             String filePath = System.getProperty(KEYCLOAK_CONFIG_FILE_PROP);",
          "126:                 filePath = System.getenv(KEYCLOAK_CONFIG_FILE_ENV);",
          "128:             if (filePath == null) {",
          "129:                 String homeDir = Environment.getHomeDir();",
          "",
          "[Removed Lines]",
          "125:             if (filePath == null)",
          "",
          "[Added Lines]",
          "121:             if (filePath == null) {",
          "123:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "148:     private static Map<String, String> transform(Map<String, String> properties) {",
          "149:         Map<String, String> result = new HashMap<>(properties.size());",
          "166:         });",
          "168:         return result;",
          "",
          "[Removed Lines]",
          "150:         properties.keySet().forEach(k -> {",
          "151:             String key = transformKey(k);",
          "152:             PropertyMapper<?> mapper = PropertyMappers.getMapper(key);",
          "155:             if (mapper != null",
          "156:                     || key.contains(NS_KEYCLOAK_PREFIX + \"spi\")",
          "157:                     || key.contains(NS_KEYCLOAK_PREFIX + \"feature\")) {",
          "158:                 String value = properties.get(k);",
          "160:                 result.put(key, value);",
          "162:                 if (mapper != null && key.charAt(0) != '%') {",
          "163:                     result.put(getMappedPropertyName(key), value);",
          "164:                 }",
          "165:             }",
          "",
          "[Added Lines]",
          "148:         properties.entrySet().forEach(entry -> {",
          "149:             String key = transformKey(entry.getKey());",
          "150:             result.put(key, entry.getValue());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "178:     private static String transformKey(String key) {",
          "180:         String[] keyParts = DOT_SPLIT.split(key);",
          "181:         String extension = keyParts[0];",
          "182:         String profile = \"\";",
          "",
          "[Removed Lines]",
          "179:         String namespace;",
          "",
          "[Added Lines]",
          "164:         String namespace = NS_KEYCLOAK;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "188:             transformed = key.substring(key.indexOf('.') + 1);",
          "189:         }",
          "197:         return profile + namespace + \".\" + transformed;",
          "199:     }",
          "",
          "[Removed Lines]",
          "191:         if (extension.equalsIgnoreCase(NS_QUARKUS)) {",
          "192:             return key;",
          "193:         } else {",
          "194:             namespace = NS_KEYCLOAK;",
          "195:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/NestedPropertyMappingInterceptor.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/NestedPropertyMappingInterceptor.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/NestedPropertyMappingInterceptor.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/NestedPropertyMappingInterceptor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.keycloak.quarkus.runtime.configuration;",
          "19: import java.util.LinkedHashSet;",
          "20: import java.util.Optional;",
          "21: import java.util.function.Function;",
          "23: import org.keycloak.quarkus.runtime.configuration.mappers.PropertyMappers;",
          "25: import io.smallrye.config.ConfigSourceInterceptor;",
          "26: import io.smallrye.config.ConfigSourceInterceptorContext;",
          "27: import io.smallrye.config.ConfigValue;",
          "28: import io.smallrye.config.Priorities;",
          "29: import jakarta.annotation.Priority;",
          "38: @Priority(Priorities.LIBRARY + 299)",
          "39: public class NestedPropertyMappingInterceptor implements ConfigSourceInterceptor {",
          "41:     static final ThreadLocal<LinkedHashSet<String>> recursions = new ThreadLocal<>();",
          "43:     @Override",
          "44:     public ConfigValue getValue(ConfigSourceInterceptorContext context, String name) {",
          "46:         if (Character.isUpperCase(name.charAt(0))) {",
          "47:             return context.proceed(name);",
          "48:         }",
          "49:         return resolve(context::restart, context::proceed, name, false);",
          "50:     }",
          "52:     private static <T> T resolve(Function<String, T> resolver, Function<String, T> nonRecursiveResolver, String name, boolean startNew) {",
          "53:         LinkedHashSet<String> recursing = recursions.get();",
          "54:         if (recursing == null && startNew) {",
          "55:             recursing = new LinkedHashSet<String>();",
          "56:             recursions.set(recursing);",
          "57:         }",
          "58:         if (recursing != null && recursing.add(name)) {",
          "59:             try {",
          "60:                 return resolver.apply(name);",
          "61:             } finally {",
          "62:                 recursing.remove(name);",
          "63:                 if (recursing.isEmpty()) {",
          "64:                     recursions.set(null);",
          "65:                 }",
          "66:             }",
          "67:         }",
          "68:         return nonRecursiveResolver.apply(name);",
          "69:     }",
          "71:     public static Optional<String> getResolvingRoot() {",
          "72:         return Optional.ofNullable(recursions.get()).filter(s -> !s.isEmpty()).map(s -> s.iterator().next());",
          "73:     }",
          "75:     public static ConfigValue getValueFromPropertyMappers(ConfigSourceInterceptorContext context, String name) {",
          "76:         Function<String, ConfigValue> resolver = (n) -> PropertyMappers.getValue(context, n);",
          "77:         return resolve(resolver, resolver, name, true);",
          "78:     }",
          "80: }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PropertyMappingInterceptor.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PropertyMappingInterceptor.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PropertyMappingInterceptor.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PropertyMappingInterceptor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.keycloak.quarkus.runtime.configuration;",
          "25: import org.apache.commons.collections4.IteratorUtils;",
          "27: import org.keycloak.quarkus.runtime.Environment;",
          "28: import org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper;",
          "29: import org.keycloak.quarkus.runtime.configuration.mappers.PropertyMappers;",
          "",
          "[Removed Lines]",
          "19: import io.smallrye.config.ConfigSourceInterceptor;",
          "20: import io.smallrye.config.ConfigSourceInterceptorContext;",
          "21: import io.smallrye.config.ConfigValue;",
          "23: import io.smallrye.config.Priorities;",
          "24: import jakarta.annotation.Priority;",
          "26: import org.apache.commons.collections4.iterators.FilterIterator;",
          "30: import org.keycloak.quarkus.runtime.configuration.mappers.WildcardPropertyMapper;",
          "32: import java.util.Iterator;",
          "33: import java.util.List;",
          "34: import java.util.Set;",
          "36: import static org.keycloak.quarkus.runtime.Environment.isRebuild;",
          "",
          "[Added Lines]",
          "19: import static org.keycloak.quarkus.runtime.Environment.isRebuild;",
          "21: import java.util.Iterator;",
          "22: import java.util.Objects;",
          "23: import java.util.Set;",
          "24: import java.util.stream.Stream;",
          "25: import java.util.stream.StreamSupport;",
          "28: import org.keycloak.config.OptionCategory;",
          "33: import io.smallrye.config.ConfigSourceInterceptor;",
          "34: import io.smallrye.config.ConfigSourceInterceptorContext;",
          "35: import io.smallrye.config.ConfigValue;",
          "36: import io.smallrye.config.Priorities;",
          "37: import jakarta.annotation.Priority;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: public class PropertyMappingInterceptor implements ConfigSourceInterceptor {",
          "56:     private static final ThreadLocal<Boolean> disable = new ThreadLocal<>();",
          "59:     public static void disable() {",
          "60:         disable.set(true);",
          "",
          "[Removed Lines]",
          "57:     private static final ThreadLocal<Boolean> disableAdditionalNames = new ThreadLocal<>();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:         disable.remove();",
          "65:     }",
          "79:     @Override",
          "80:     public Iterator<String> iterateNames(ConfigSourceInterceptorContext context) {",
          "96:             }",
          "101:     }",
          "103:     @Override",
          "",
          "[Removed Lines]",
          "67:     static Iterator<String> filterRuntime(Iterator<String> iter) {",
          "68:         if (!isRebuild() && !Environment.isRebuildCheck()) {",
          "69:             return iter;",
          "70:         }",
          "71:         return new FilterIterator<>(iter, item -> !isRuntime(item));",
          "72:     }",
          "74:     static boolean isRuntime(String name) {",
          "75:         PropertyMapper<?> mapper = PropertyMappers.getMapper(name);",
          "76:         return mapper != null && mapper.isRunTime();",
          "77:     }",
          "86:         List<String> mappedWildcardNames = List.of();",
          "87:         if (!Boolean.TRUE.equals(disableAdditionalNames.get())) {",
          "88:             disableAdditionalNames.set(true);",
          "89:             try {",
          "90:                 mappedWildcardNames = PropertyMappers.getWildcardMappers().stream()",
          "91:                         .map(WildcardPropertyMapper::getToWithWildcards)",
          "92:                         .flatMap(Set::stream)",
          "93:                         .toList();",
          "94:             } finally {",
          "95:                 disableAdditionalNames.remove();",
          "97:         }",
          "100:         return filterRuntime(IteratorUtils.chainedIterator(mappedWildcardNames.iterator(), context.iterateNames()));",
          "",
          "[Added Lines]",
          "84:         Iterable<String> iterable = () -> context.iterateNames();",
          "86:         final Set<PropertyMapper<?>> allMappers = PropertyMappers.getMappers();",
          "92:         boolean filterRuntime = isRebuild() || Environment.isRebuildCheck();",
          "94:         var baseStream = StreamSupport.stream(iterable.spliterator(), false).flatMap(name -> {",
          "95:             PropertyMapper<?> mapper = PropertyMappers.getMapper(name);",
          "97:             if (mapper == null) {",
          "98:                 return Stream.of(name);",
          "100:             if (filterRuntime && mapper.getCategory() == OptionCategory.CONFIG) {",
          "101:                 return Stream.of(); // advertising the keystore type causes the keystore to be used early",
          "102:             }",
          "103:             allMappers.remove(mapper);",
          "105:             if (!mapper.hasWildcard()) {",
          "108:                 var wildCard = PropertyMappers.getWildcardMappedFrom(mapper.getOption());",
          "109:                 if (wildCard != null) {",
          "110:                     ConfigValue value = context.proceed(name);",
          "111:                     if (value != null && value.getValue() != null) {",
          "112:                         return Stream.concat(Stream.of(name), wildCard.getToFromWildcardTransformer(value.getValue()));",
          "113:                     }",
          "114:                 }",
          "115:             }",
          "117:             mapper = mapper.forKey(name);",
          "121:             return toDistinctStream(name, mapper.getTo());",
          "122:         });",
          "125:         var defaultStream = allMappers.stream()",
          "126:                 .filter(m -> !m.getDefaultValue().isEmpty() && !m.hasWildcard()",
          "127:                         && m.getCategory() != OptionCategory.CONFIG) // advertising the keystore type causes the keystore to be used early",
          "128:                 .flatMap(m -> toDistinctStream(m.getTo()));",
          "130:         return IteratorUtils.chainedIterator(baseStream.iterator(), defaultStream.iterator());",
          "131:     }",
          "133:     private static Stream<String> toDistinctStream(String... values) {",
          "134:         return Stream.of(values).filter(Objects::nonNull).distinct();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:         if (Boolean.TRUE.equals(disable.get())) {",
          "106:             return context.proceed(name);",
          "107:         }",
          "109:     }",
          "110: }",
          "",
          "[Removed Lines]",
          "108:         return PropertyMappers.getValue(context, name);",
          "",
          "[Added Lines]",
          "144:         return NestedPropertyMappingInterceptor.getValueFromPropertyMappers(context, name);",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ConfigKeystorePropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ConfigKeystorePropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ConfigKeystorePropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ConfigKeystorePropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.keycloak.quarkus.runtime.configuration.mappers;",
          "3: import io.smallrye.config.ConfigSourceInterceptorContext;",
          "5: import org.keycloak.config.ConfigKeystoreOptions;",
          "7: import java.nio.file.Files;",
          "8: import java.nio.file.Path;",
          "10: import static org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper.fromOption;",
          "13:     private static final String SMALLRYE_KEYSTORE_PATH = \"smallrye.config.source.keystore.kc-default.path\";",
          "14:     private static final String SMALLRYE_KEYSTORE_PASSWORD = \"smallrye.config.source.keystore.kc-default.password\";",
          "",
          "[Removed Lines]",
          "4: import io.smallrye.config.ConfigValue;",
          "12: final class ConfigKeystorePropertyMappers {",
          "",
          "[Added Lines]",
          "5: import org.keycloak.quarkus.runtime.configuration.MicroProfileConfigProvider;",
          "12: public final class ConfigKeystorePropertyMappers {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     }",
          "40:     private static String validatePath(String option, ConfigSourceInterceptorContext context) {",
          "46:         }",
          "48:         if (!isPasswordDefined) {",
          "49:             throw new IllegalArgumentException(\"config-keystore-password must be specified\");",
          "50:         }",
          "53:         if (!Files.exists(realPath)) {",
          "54:             throw new IllegalArgumentException(\"config-keystore path does not exist: \" + realPath);",
          "55:         }",
          "",
          "[Removed Lines]",
          "41:         ConfigValue path = context.proceed(SMALLRYE_KEYSTORE_PATH);",
          "42:         boolean isPasswordDefined = context.proceed(SMALLRYE_KEYSTORE_PASSWORD) != null;",
          "44:         if (path == null) {",
          "45:             throw new IllegalArgumentException(\"config-keystore must be specified\");",
          "52:         final Path realPath = Path.of(path.getValue()).toAbsolutePath().normalize();",
          "",
          "[Added Lines]",
          "41:         if (option == null) {",
          "42:             return null;",
          "44:         boolean isPasswordDefined = context.proceed(MicroProfileConfigProvider.NS_KEYCLOAK_PREFIX + ConfigKeystoreOptions.CONFIG_KEYSTORE_PASSWORD.getKey()) != null;",
          "50:         final Path realPath = Path.of(option).toAbsolutePath().normalize();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:     }",
          "60:     private static String validatePassword(String option, ConfigSourceInterceptorContext context) {",
          "66:         }",
          "68:         if (!isPathDefined) {",
          "69:             throw new IllegalArgumentException(\"config-keystore must be specified\");",
          "",
          "[Removed Lines]",
          "61:         boolean isPasswordDefined = context.proceed(SMALLRYE_KEYSTORE_PASSWORD).getValue() != null;",
          "62:         boolean isPathDefined = context.proceed(SMALLRYE_KEYSTORE_PATH) != null;",
          "64:         if (!isPasswordDefined) {",
          "65:             throw new IllegalArgumentException(\"config-keystore-password must be specified\");",
          "",
          "[Added Lines]",
          "59:         if (option == null) {",
          "60:             return null;",
          "62:         boolean isPathDefined = context.proceed(MicroProfileConfigProvider.NS_KEYCLOAK_PREFIX + ConfigKeystoreOptions.CONFIG_KEYSTORE.getKey()) != null;",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/LoggingPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/LoggingPropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/LoggingPropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/LoggingPropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:                         .to(\"quarkus.log.category.\\\"<categories>\\\".level\")",
          "128:                         .validator(LoggingPropertyMappers::validateCategoryLogLevel)",
          "129:                         .wildcardKeysTransformer(LoggingPropertyMappers::getConfiguredLogCategories)",
          "131:                         .wildcardMapFrom(LoggingOptions.LOG_LEVEL, LoggingPropertyMappers::resolveCategoryLogLevelFromParentLogLevelOption) // a fallback to log-level",
          "132:                         .paramLabel(\"level\")",
          "133:                         .build(),",
          "",
          "[Removed Lines]",
          "130:                         .transformer((v,c) -> toLevel(v).getName())",
          "",
          "[Added Lines]",
          "130:                         .transformer((v,c) -> v == null ? null : toLevel(v).getName())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:         return DEFAULT_ROOT_LOG_LEVEL; // defaults are not resolved in the mapper if transformer is present, so doing it explicitly here",
          "268:     }",
          "272:             if (categoryLevel.category != null) {",
          "273:                 categories.add(categoryLevel.category);",
          "274:             }",
          "",
          "[Removed Lines]",
          "270:     private static Set<String> getConfiguredLogCategories(Set<String> categories) {",
          "271:         for (CategoryLevel categoryLevel : parseRootLogLevel(null)) {",
          "",
          "[Added Lines]",
          "270:     private static Set<String> getConfiguredLogCategories(String value, Set<String> categories) {",
          "271:         for (CategoryLevel categoryLevel : parseRootLogLevel(value)) {",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import static java.util.Optional.ofNullable;",
          "20: import static org.keycloak.config.Option.WILDCARD_PLACEHOLDER_PATTERN;",
          "22: import static org.keycloak.quarkus.runtime.configuration.Configuration.OPTION_PART_SEPARATOR;",
          "23: import static org.keycloak.quarkus.runtime.configuration.Configuration.OPTION_PART_SEPARATOR_CHAR;",
          "24: import static org.keycloak.quarkus.runtime.configuration.Configuration.toCliFormat;",
          "",
          "[Removed Lines]",
          "21: import static org.keycloak.quarkus.runtime.Environment.isRebuild;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: import java.util.function.BiFunction;",
          "35: import java.util.function.BooleanSupplier;",
          "36: import java.util.function.Consumer;",
          "38: import java.util.stream.Stream;",
          "40: import io.smallrye.config.ConfigSourceInterceptorContext;",
          "",
          "[Removed Lines]",
          "37: import java.util.function.Function;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45: import org.keycloak.config.DeprecatedMetadata;",
          "46: import org.keycloak.config.Option;",
          "47: import org.keycloak.config.OptionCategory;",
          "49: import org.keycloak.quarkus.runtime.cli.PropertyException;",
          "50: import org.keycloak.quarkus.runtime.cli.ShortErrorMessageHandler;",
          "51: import org.keycloak.quarkus.runtime.configuration.ConfigArgsConfigSource;",
          "53: import org.keycloak.quarkus.runtime.configuration.KcEnvConfigSource;",
          "54: import org.keycloak.quarkus.runtime.configuration.KeycloakConfigSourceProvider;",
          "56: import org.keycloak.utils.StringUtil;",
          "58: public class PropertyMapper<T> {",
          "",
          "[Removed Lines]",
          "48: import org.keycloak.quarkus.runtime.Environment;",
          "52: import org.keycloak.quarkus.runtime.configuration.Configuration;",
          "55: import org.keycloak.quarkus.runtime.configuration.MicroProfileConfigProvider;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:         this.parentMapper = parentMapper;",
          "104:     }",
          "110:     ConfigValue getConfigValue(String name, ConfigSourceInterceptorContext context) {",
          "111:         String from = getFrom();",
          "",
          "[Removed Lines]",
          "106:     ConfigValue getConfigValue(ConfigSourceInterceptorContext context) {",
          "107:         return getConfigValue(to, context);",
          "108:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "125:             String mapFromWithPrefix = NS_KEYCLOAK_PREFIX + mapFrom;",
          "127:             parentValue = true;",
          "128:         }",
          "",
          "[Removed Lines]",
          "126:             config = PropertyMappers.getMapper(mapFromWithPrefix).getConfigValue(mapFromWithPrefix, context);",
          "",
          "[Added Lines]",
          "117:             config = context.restart(mapFromWithPrefix);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "293:         String map(String name, String value, ConfigSourceInterceptorContext context);",
          "294:     }",
          "297:         private final ConfigSourceInterceptorContext context;",
          "298:         private final ConfigValue value;",
          "",
          "[Removed Lines]",
          "296:     private final class ContextWrapper implements ConfigSourceInterceptorContext {",
          "",
          "[Added Lines]",
          "287:     private static final class ContextWrapper implements ConfigSourceInterceptorContext {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "336:         private String description;",
          "337:         private BooleanSupplier isRequired = () -> false;",
          "338:         private String requiredWhen = \"\";",
          "340:         private ValueMapper wildcardMapFrom;",
          "342:         public Builder(Option<T> option) {",
          "",
          "[Removed Lines]",
          "339:         private Function<Set<String>, Set<String>> wildcardKeysTransformer;",
          "",
          "[Added Lines]",
          "330:         private BiFunction<String, Set<String>, Set<String>> wildcardKeysTransformer;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "462:             return this;",
          "463:         }",
          "466:             this.wildcardKeysTransformer = wildcardValuesTransformer;",
          "467:             return this;",
          "468:         }",
          "",
          "[Removed Lines]",
          "465:         public Builder<T> wildcardKeysTransformer(Function<Set<String>, Set<String>> wildcardValuesTransformer) {",
          "",
          "[Added Lines]",
          "456:         public Builder<T> wildcardKeysTransformer(BiFunction<String, Set<String>, Set<String>> wildcardValuesTransformer) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "567:                 KeycloakConfigSourceProvider.getConfigSourceDisplayName(configValue.getConfigSourceName()));",
          "568:     }",
          "",
          "[Removed Lines]",
          "576:     public List<ConfigValue> getKcConfigValues() {",
          "577:         return List.of(Configuration.getConfigValue(getFrom()));",
          "578:     }",
          "585:     public PropertyMapper<?> forEnvKey(String key) {",
          "586:         return this;",
          "587:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "595:         return this;",
          "596:     }",
          "598: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "570:     String getMapFrom() {",
          "571:         return mapFrom;",
          "572:     }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import org.jboss.logging.Logger;",
          "8: import org.keycloak.common.util.CollectionUtil;",
          "9: import org.keycloak.config.ConfigSupportLevel;",
          "10: import org.keycloak.config.OptionCategory;",
          "11: import org.keycloak.quarkus.runtime.Environment;",
          "12: import org.keycloak.quarkus.runtime.cli.PropertyException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: import org.keycloak.config.Option;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: import org.keycloak.quarkus.runtime.cli.command.ShowConfig;",
          "16: import org.keycloak.quarkus.runtime.configuration.DisabledMappersInterceptor;",
          "17: import org.keycloak.quarkus.runtime.configuration.MicroProfileConfigProvider;",
          "18: import org.keycloak.quarkus.runtime.configuration.PersistedConfigSource;",
          "20: import java.util.ArrayList;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import org.keycloak.quarkus.runtime.configuration.NestedPropertyMappingInterceptor;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "24: import java.util.EnumSet;",
          "25: import java.util.HashMap;",
          "26: import java.util.HashSet;",
          "27: import java.util.List;",
          "28: import java.util.Map;",
          "29: import java.util.Optional;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import java.util.LinkedHashSet;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "79:         name = removeProfilePrefixIfNeeded(name);",
          "80:         PropertyMapper<?> mapper = getMapper(name);",
          "88:             return ConfigValue.builder().withName(name).build();",
          "89:         }",
          "",
          "[Removed Lines]",
          "87:         if ((isRebuild() || Environment.isRebuildCheck()) && isKeycloakRuntime(name, mapper) && !name.startsWith(\"quarkus.log.\")) {",
          "",
          "[Added Lines]",
          "90:         if ((isRebuild() || Environment.isRebuildCheck()) && isKeycloakRuntime(name, mapper)",
          "91:                 && !NestedPropertyMappingInterceptor.getResolvingRoot().orElse(name).startsWith(\"quarkus.log.\")) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "182:         return getMapper(property, null);",
          "183:     }",
          "185:     public static Set<PropertyMapper<?>> getMappers() {",
          "187:     }",
          "189:     public static Set<WildcardPropertyMapper<?>> getWildcardMappers() {",
          "190:         return MAPPERS.getWildcardMappers();",
          "191:     }",
          "193:     public static boolean isSupported(PropertyMapper<?> mapper) {",
          "194:         ConfigSupportLevel supportLevel = mapper.getCategory().getSupportLevel();",
          "195:         return supportLevel.equals(ConfigSupportLevel.SUPPORTED) || supportLevel.equals(ConfigSupportLevel.DEPRECATED);",
          "",
          "[Removed Lines]",
          "186:         return MAPPERS.values().stream().flatMap(Collection::stream).collect(Collectors.toSet());",
          "",
          "[Added Lines]",
          "193:         return MAPPERS.values().stream().flatMap(Collection::stream).collect(Collectors.toCollection(LinkedHashSet::new));",
          "200:     public static WildcardPropertyMapper<?> getWildcardMappedFrom(Option<?> from) {",
          "201:         return MAPPERS.wildcardMapFrom.get(from.getKey());",
          "202:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "233:         private final Map<String, PropertyMapper<?>> disabledBuildTimeMappers = new HashMap<>();",
          "234:         private final Map<String, PropertyMapper<?>> disabledRuntimeMappers = new HashMap<>();",
          "235:         private final Set<WildcardPropertyMapper<?>> wildcardMappers = new HashSet<>();",
          "237:         public void addAll(PropertyMapper<?>[] mappers) {",
          "238:             for (PropertyMapper<?> mapper : mappers) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:         private final Map<String, WildcardPropertyMapper<?>> wildcardMapFrom = new HashMap<>();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "253:         public void addMapper(PropertyMapper<?> mapper) {",
          "254:             if (mapper.hasWildcard()) {",
          "255:                 wildcardMappers.add((WildcardPropertyMapper<?>)mapper);",
          "256:             }",
          "258:         }",
          "260:         public void removeMapper(PropertyMapper<?> mapper) {",
          "262:             handleMapper(mapper, this::remove);",
          "263:         }",
          "",
          "[Removed Lines]",
          "257:             handleMapper(mapper, this::add);",
          "261:             wildcardMappers.remove(mapper);",
          "",
          "[Added Lines]",
          "268:                 if (mapper.getMapFrom() != null) {",
          "269:                     wildcardMapFrom.put(mapper.getMapFrom(), (WildcardPropertyMapper<?>) mapper);",
          "270:                 }",
          "272:             } else {",
          "273:                 handleMapper(mapper, this::add);",
          "278:             if (mapper.hasWildcard()) {",
          "279:                 wildcardMappers.remove(mapper);",
          "280:                 if (mapper.getFrom() != null) {",
          "281:                     wildcardMapFrom.remove(mapper.getMapFrom());",
          "282:                 }",
          "283:             }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "272:         @Override",
          "273:         @SuppressWarnings({\"rawtypes\", \"unchecked\"})",
          "274:         public List<PropertyMapper<?>> get(Object key) {",
          "276:             String strKey = (String) key;",
          "278:                     .filter(m -> m.matchesWildcardOptionName(strKey))",
          "279:                     .toList();",
          "280:             if (!ret.isEmpty()) {",
          "281:                 return ret;",
          "282:             }",
          "286:         }",
          "288:         @Override",
          "",
          "[Removed Lines]",
          "277:             List ret = wildcardMappers.stream()",
          "285:             return super.get(key);",
          "",
          "[Added Lines]",
          "300:             List ret = super.get(key);",
          "301:             if (ret != null) {",
          "302:                 return ret;",
          "303:             }",
          "306:             ret = wildcardMappers.stream()",
          "313:             return null;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "295:         }",
          "297:         public void sanitizeDisabledMappers() {",
          "300:             DisabledMappersInterceptor.runWithDisabled(() -> { // We need to have the whole configuration available",
          "",
          "[Removed Lines]",
          "298:             if (Environment.getParsedCommand().isEmpty()) return; // do not sanitize when no command is present",
          "",
          "[Added Lines]",
          "326:             if (Environment.getParsedCommand().isEmpty()) {",
          "327:                 return; // do not sanitize when no command is present",
          "328:             }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/WildcardPropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/WildcardPropertyMapper.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/WildcardPropertyMapper.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/WildcardPropertyMapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import static org.keycloak.config.Option.WILDCARD_PLACEHOLDER_PATTERN;",
          "4: import static org.keycloak.quarkus.runtime.cli.Picocli.ARG_PREFIX;",
          "7: import java.util.Optional;",
          "8: import java.util.Set;",
          "9: import java.util.function.BiConsumer;",
          "10: import java.util.function.BiFunction;",
          "11: import java.util.function.BooleanSupplier;",
          "13: import java.util.regex.Matcher;",
          "14: import java.util.regex.Pattern;",
          "18: import org.keycloak.config.Option;",
          "20: import org.keycloak.quarkus.runtime.configuration.MicroProfileConfigProvider;",
          "22: import io.smallrye.config.ConfigSourceInterceptorContext;",
          "",
          "[Removed Lines]",
          "6: import java.util.List;",
          "12: import java.util.function.Function;",
          "15: import java.util.stream.Collectors;",
          "16: import java.util.stream.StreamSupport;",
          "19: import org.keycloak.quarkus.runtime.configuration.Configuration;",
          "",
          "[Added Lines]",
          "6: import java.util.HashSet;",
          "14: import java.util.stream.Stream;",
          "17: import org.keycloak.quarkus.runtime.cli.Picocli;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:     private final Pattern envVarNameWildcardPattern;",
          "30:     private Matcher toWildcardMatcher;",
          "31:     private Pattern toWildcardPattern;",
          "33:     private final ValueMapper wildcardMapFrom;",
          "35:     public WildcardPropertyMapper(Option<T> option, String to, BooleanSupplier enabled, String enabledWhen,",
          "36:             BiFunction<String, ConfigSourceInterceptorContext, String> mapper,",
          "37:             String mapFrom, BiFunction<String, ConfigSourceInterceptorContext, String> parentMapper,",
          "38:             String paramLabel, boolean mask, BiConsumer<PropertyMapper<T>, ConfigValue> validator,",
          "40:         super(option, to, enabled, enabledWhen, mapper, mapFrom, parentMapper, paramLabel, mask, validator, description, required, requiredWhen, null);",
          "41:         this.wildcardMapFrom = wildcardMapFrom;",
          "42:         this.fromWildcardMatcher = fromWildcardMatcher;",
          "",
          "[Removed Lines]",
          "32:     private final Function<Set<String>, Set<String>> wildcardKeysTransformer;",
          "39:             String description, BooleanSupplier required, String requiredWhen, Matcher fromWildcardMatcher, Function<Set<String>, Set<String>> wildcardKeysTransformer, ValueMapper wildcardMapFrom) {",
          "",
          "[Added Lines]",
          "30:     private final BiFunction<String, Set<String>, Set<String>> wildcardKeysTransformer;",
          "37:             String description, BooleanSupplier required, String requiredWhen, Matcher fromWildcardMatcher, BiFunction<String, Set<String>, Set<String>> wildcardKeysTransformer, ValueMapper wildcardMapFrom) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:         return MicroProfileConfigProvider.NS_KEYCLOAK_PREFIX + fromWildcardMatcher.replaceFirst(wildcardKey);",
          "73:     }",
          "91:         }",
          "94:     }",
          "",
          "[Removed Lines]",
          "75:     @Override",
          "76:     public List<ConfigValue> getKcConfigValues() {",
          "77:         return this.getWildcardKeys().stream().map(v -> Configuration.getConfigValue(getFrom(v))).toList();",
          "78:     }",
          "80:     public Set<String> getWildcardKeys() {",
          "83:         Set<String> values = StreamSupport.stream(Configuration.getPropertyNames().spliterator(), false)",
          "84:                 .map(n -> getMappedKey(n, false))",
          "85:                 .filter(Optional::isPresent)",
          "86:                 .map(Optional::get)",
          "87:                 .collect(Collectors.toSet());",
          "89:         if (wildcardKeysTransformer != null) {",
          "90:             return wildcardKeysTransformer.apply(values);",
          "93:         return values;",
          "",
          "[Added Lines]",
          "73:     public Stream<String> getToFromWildcardTransformer(String value) {",
          "74:         if (wildcardKeysTransformer == null) {",
          "75:             return Stream.empty();",
          "77:         return wildcardKeysTransformer.apply(value, new HashSet<String>()).stream().map(toWildcardMatcher::replaceFirst);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:         }",
          "109:             matcher = toWildcardPattern.matcher(originalKey);",
          "110:             if (matcher.matches()) {",
          "112:             }",
          "113:         }",
          "121:         }",
          "126:     }",
          "",
          "[Removed Lines]",
          "102:     private Optional<String> getMappedKey(String originalKey, boolean tryTo) {",
          "103:         Matcher matcher = fromWildcardPattern.matcher(originalKey);",
          "104:         if (matcher.matches()) {",
          "105:             return Optional.of(matcher.group(1));",
          "108:         if (tryTo && toWildcardPattern != null) {",
          "111:                 return Optional.of(matcher.group(1));",
          "115:         return Optional.empty();",
          "116:     }",
          "118:     public Set<String> getToWithWildcards() {",
          "119:         if (toWildcardMatcher == null) {",
          "120:             return Set.of();",
          "123:         return getWildcardKeys().stream()",
          "124:                 .map(v -> toWildcardMatcher.replaceFirst(v))",
          "125:                 .collect(Collectors.toSet());",
          "",
          "[Added Lines]",
          "86:     private Optional<String> getMappedKey(String originalKey) {",
          "87:         Matcher matcher = null;",
          "88:         if (originalKey.startsWith(Picocli.ARG_PREFIX) || originalKey.startsWith(MicroProfileConfigProvider.NS_KEYCLOAK_PREFIX)) {",
          "89:             matcher = fromWildcardPattern.matcher(originalKey);",
          "90:             if (matcher.matches()) {",
          "91:                 return Optional.of(matcher).map(m -> m.group(1));",
          "92:             }",
          "95:         if (toWildcardPattern != null) {",
          "98:                 return Optional.of(matcher).map(m -> m.group(1));",
          "102:         if (originalKey.startsWith(\"KC_\")) {",
          "103:             matcher = envVarNameWildcardPattern.matcher(originalKey);",
          "104:             if (matcher.matches()) {",
          "106:                 return Optional.of(matcher).map(m -> m.group(1).toLowerCase().replace(\"_\", \".\"));",
          "107:             }",
          "110:         return Optional.empty();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "132:     public boolean matchesWildcardOptionName(String name) {",
          "146:     }",
          "148:     private PropertyMapper<?> forWildcardValue(final String wildcardValue) {",
          "",
          "[Removed Lines]",
          "133:         return fromWildcardPattern.matcher(name).matches() || envVarNameWildcardPattern.matcher(name).matches()",
          "134:                 || (toWildcardPattern != null && toWildcardPattern.matcher(name).matches());",
          "135:     }",
          "137:     @Override",
          "138:     public PropertyMapper<?> forEnvKey(String key) {",
          "139:         Matcher matcher = envVarNameWildcardPattern.matcher(key);",
          "140:         if (!matcher.matches()) {",
          "141:             throw new IllegalStateException(\"Env var '\" + key + \"' does not match the expected pattern '\" + envVarNameWildcardPattern + \"'\");",
          "142:         }",
          "143:         String value = matcher.group(1);",
          "144:         final String wildcardValue = value.toLowerCase().replace(\"_\", \".\"); // we opiniotatedly convert env var names to CLI format with dots",
          "145:         return forWildcardValue(wildcardValue);",
          "",
          "[Added Lines]",
          "118:         return getMappedKey(name).isPresent();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "154:     @Override",
          "155:     public PropertyMapper<?> forKey(String key) {",
          "158:     }",
          "160: }",
          "",
          "[Removed Lines]",
          "156:         final String wildcardValue = getMappedKey(key, true).orElseThrow();",
          "157:         return forWildcardValue(wildcardValue);",
          "",
          "[Added Lines]",
          "129:         return getMappedKey(key).map(this::forWildcardValue).orElseThrow();",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/resources/META-INF/services/io.smallrye.config.ConfigSourceInterceptor||quarkus/runtime/src/main/resources/META-INF/services/io.smallrye.config.ConfigSourceInterceptor": [
          "File: quarkus/runtime/src/main/resources/META-INF/services/io.smallrye.config.ConfigSourceInterceptor -> quarkus/runtime/src/main/resources/META-INF/services/io.smallrye.config.ConfigSourceInterceptor",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #",
          "18: org.keycloak.quarkus.runtime.configuration.PropertyMappingInterceptor",
          "19: org.keycloak.quarkus.runtime.configuration.DisabledMappersInterceptor",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: org.keycloak.quarkus.runtime.configuration.NestedPropertyMappingInterceptor",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/AbstractConfigurationTest.java||quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/AbstractConfigurationTest.java": [
          "File: quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/AbstractConfigurationTest.java -> quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/AbstractConfigurationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:         try {",
          "56:             field = env.getClass().getDeclaredField(\"m\");",
          "57:             field.setAccessible(true);",
          "59:         } catch (Exception cause) {",
          "60:             throw new RuntimeException(\"Failed to update environment variables\", cause);",
          "61:         } finally {",
          "",
          "[Removed Lines]",
          "58:             ((Map<String, String>) field.get(env)).put(name, value);",
          "",
          "[Added Lines]",
          "58:             if (value == null) {",
          "59:                 ((Map<String, String>) field.get(env)).remove(name);",
          "60:             } else {",
          "61:                 ((Map<String, String>) field.get(env)).put(name, value);",
          "62:             }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java||quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java": [
          "File: quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java -> quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.keycloak.quarkus.runtime.configuration.test;",
          "20: import static org.junit.Assert.assertEquals;",
          "21: import static org.junit.Assert.assertNull;",
          "22: import static org.junit.Assert.assertTrue;",
          "23: import static org.keycloak.quarkus.runtime.Environment.isWindows;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertNotNull;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:         assertEquals(\"http://c.jwk.url\", initConfig(\"client-registration\", \"openid-connect\").get(\"static-jwk-url\"));",
          "150:     }",
          "152:     @Test",
          "153:     public void testResolveTransformedValue() {",
          "154:         ConfigArgsConfigSource.setCliArgs(\"\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:     @Test",
          "154:     public void testExpressionEnvValue() {",
          "155:         putEnvVar(\"KC_HOSTNAME_STRICT\", \"false\");",
          "156:         putEnvVar(\"MY_EXPRESSION\", \"${KC_HOSTNAME_STRICT}\");",
          "157:         ConfigArgsConfigSource.setCliArgs(\"\");",
          "158:         var config = createConfig();",
          "160:         assertEquals(\"false\", config.getConfigValue(\"KC_HOSTNAME_STRICT\").getValue());",
          "161:         assertEquals(\"false\", config.getConfigValue(\"MY_EXPRESSION\").getValue());",
          "164:         putEnvVar(\"KC_HOSTNAME_STRICT\", null);",
          "165:         ConfigArgsConfigSource.setCliArgs(\"\");",
          "166:         config = createConfig();",
          "168:         assertEquals(\"true\", config.getConfigValue(\"kc.hostname-strict\").getValue());",
          "170:         assertNull(config.getConfigValue(\"MY_EXPRESSION\").getValue());",
          "172:         assertEquals(\"true\", config.getConfigValue(\"KC_HOSTNAME_STRICT\").getValue());",
          "173:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "479:     @Test",
          "480:     public void testKeystoreConfigSourcePropertyMapping() {",
          "486:         assertEquals(config.getConfigValue(\"smallrye.config.source.keystore.kc-default.password\").getValue(),config.getConfigValue(\"kc.config-keystore-password\").getValue());",
          "488:         ConfigValue secret = config.getConfigValue(\"my.secret\");",
          "",
          "[Removed Lines]",
          "481:         SmallRyeConfig config = new SmallRyeConfigBuilder()",
          "482:                 .addDefaultInterceptors()",
          "483:                 .addDiscoveredSources()",
          "484:                 .build();",
          "",
          "[Added Lines]",
          "504:         SmallRyeConfig config = createConfig();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "540:             assertEquals(Integer.toString(maxCount), config.getConfigValue(prop).getValue());",
          "541:         }",
          "542:     }",
          "543: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563:     @Test",
          "564:     public void testDirectWildcardTo() {",
          "566:         ConfigArgsConfigSource.setCliArgs(\"\");",
          "567:         SmallRyeConfig config = createConfig();",
          "568:         assertNull(config.getConfigValue(\"quarkus.log.category.\\\"<categories>\\\".level\").getValue());",
          "569:     }",
          "571:     @Test",
          "572:     public void testKeycloakConfQuarkusPropertyNotUsed() {",
          "573:         ConfigArgsConfigSource.setCliArgs(\"\");",
          "574:         SmallRyeConfig config = createConfig();",
          "575:         assertNull(config.getConfigValue(\"quarkus.management.ssl.cipher-suites\").getValue());",
          "576:         assertNotNull(config.getConfigValue(\"kc.quarkus.management.ssl.cipher-suites\").getValue());",
          "577:     }",
          "579:     @Test",
          "580:     public void testQuarkusLogPropDependentUponKeycloak() {",
          "581:         Environment.setRebuildCheck(); // will be reset by the system properties logic",
          "582:         ConfigArgsConfigSource.setCliArgs(\"--log-level=debug\");",
          "583:         SmallRyeConfig config = createConfig();",
          "584:         assertEquals(\"DEBUG\", config.getConfigValue(\"quarkus.log.category.\\\"something\\\".level\").getValue());",
          "585:     }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/test/resources/META-INF/keycloak.conf||quarkus/runtime/src/test/resources/META-INF/keycloak.conf": [
          "File: quarkus/runtime/src/test/resources/META-INF/keycloak.conf -> quarkus/runtime/src/test/resources/META-INF/keycloak.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: config-keystore=src/test/resources/keystore",
          "7: config-keystore-password=secret",
          "",
          "[Removed Lines]",
          "9: quarkus.log.file.path=random/path",
          "",
          "[Added Lines]",
          "10: quarkus.management.ssl.cipher-suites=foo",
          "",
          "---------------"
        ],
        "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/FipsDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/FipsDistTest.java": [
          "File: quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/FipsDistTest.java -> quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/FipsDistTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import org.keycloak.it.utils.RawKeycloakDistribution;",
          "31: import io.quarkus.test.junit.main.Launch;",
          "34: @DistributionTest(keepAlive = true, defaultOptions = { \"--db=dev-file\", \"--features=fips\", \"--http-enabled=true\", \"--hostname-strict=false\", \"--log-level=org.keycloak.common.crypto.CryptoIntegration:trace\" })",
          "35: @RawDistOnly(reason = \"Containers are immutable\")",
          "",
          "[Removed Lines]",
          "32: import io.quarkus.test.junit.main.LaunchResult;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartDevCommandDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartDevCommandDistTest.java": [
          "File: quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartDevCommandDistTest.java -> quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartDevCommandDistTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import org.junit.jupiter.api.Tag;",
          "23: import org.junit.jupiter.api.Test;",
          "24: import org.junit.jupiter.api.TestMethodOrder;",
          "26: import org.junit.jupiter.api.condition.OS;",
          "27: import org.keycloak.it.junit5.extension.CLIResult;",
          "28: import org.keycloak.it.junit5.extension.DistributionTest;",
          "",
          "[Removed Lines]",
          "25: import org.junit.jupiter.api.condition.DisabledOnOs;",
          "",
          "[Added Lines]",
          "25: import org.junit.jupiter.api.condition.EnabledOnOs;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:         cliResult.assertMessageWasShownExactlyNumberOfTimes(\"Listening for transport dt_socket at address:\", 2);",
          "63:         cliResult.assertStartedDevMode();",
          "64:         cliResult.assertMessage(\"passkeys\");",
          "65:     }",
          "67:     @DryRun",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:         cliResult.assertNoMessage(\"Build time property cannot\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:     }",
          "82:     @Test",
          "84:     void testConfigKeystoreAbsolutePath(KeycloakDistribution dist) {",
          "85:         CLIResult cliResult = dist.run(\"start-dev\", \"--config-keystore=\" + Paths.get(\"src/test/resources/keystore\").toAbsolutePath().normalize(),",
          "86:                 \"--config-keystore-password=secret\");",
          "",
          "[Removed Lines]",
          "83:     @DisabledOnOs(value = { OS.LINUX, OS.MAC }, disabledReason = \"A drive letter in URI can cause a problem.\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13833fd221e6201a72e9e63372ad9964955b0c34",
      "candidate_info": {
        "commit_hash": "13833fd221e6201a72e9e63372ad9964955b0c34",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/13833fd221e6201a72e9e63372ad9964955b0c34",
        "files": [
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/Build.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java"
        ],
        "message": "fix: ensures that properties are runtime properties are filtered (#209)\n\ncloses: #CVE-2024-10451\n\nSigned-off-by: Steve Hawkins <shawkins@redhat.com>",
        "before_after_code_files": [
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/Build.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/Build.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java",
            "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java"
          ],
          "candidate": [
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java",
            "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java"
          ]
        }
      },
      "candidate_diff": {
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:             }",
          "170:             if (currentSpec != null) {",
          "171:                 addCommandOptions(cliArgs, currentSpec.commandLine());",
          "172:             }",
          "174:             if (isRebuildCheck()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:                 CommandLine commandLine = currentSpec.commandLine();",
          "174:                 if (commandLine != null && commandLine.getCommand() instanceof AbstractCommand ac) {",
          "176:                     Environment.setParsedCommand(ac);",
          "177:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "719:     }",
          "721:     private static void addCommandOptions(List<String> cliArgs, CommandLine command) {",
          "723:             IncludeOptions options = getIncludeOptions(cliArgs, command.getCommand(), command.getCommandName());",
          "728:             if (!options.includeBuildTime && !options.includeRuntime) {",
          "729:                 return;",
          "730:             }",
          "",
          "[Removed Lines]",
          "722:         if (command != null && command.getCommand() instanceof AbstractCommand ac) {",
          "726:             Environment.setParsedCommand(ac);",
          "",
          "[Added Lines]",
          "728:         if (command != null && command.getCommand() instanceof AbstractCommand) {",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/Build.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/Build.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/Build.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/Build.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import static org.keycloak.quarkus.runtime.Environment.getHomePath;",
          "22: import static org.keycloak.quarkus.runtime.Environment.isDevProfile;",
          "23: import static org.keycloak.quarkus.runtime.cli.Picocli.println;",
          "26: import io.quarkus.runtime.LaunchMode;",
          "27: import org.keycloak.config.OptionCategory;",
          "",
          "[Removed Lines]",
          "24: import static org.keycloak.quarkus.runtime.configuration.ConfigArgsConfigSource.getAllCliArgs;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:     }",
          "113:     private void exitWithErrorIfDevProfileIsSetAndNotStartDev() {",
          "116:         }",
          "117:     }",
          "",
          "[Removed Lines]",
          "114:         if (Environment.isDevProfile() && !getAllCliArgs().contains(StartDev.NAME)) {",
          "115:             executionError(spec.commandLine(), Messages.devProfileNotAllowedError(NAME));",
          "",
          "[Added Lines]",
          "113:         if (Environment.isDevProfile()) {",
          "114:             String cmd = Environment.getParsedCommand().map(AbstractCommand::getName).orElse(getName());",
          "117:             if (Start.NAME.equals(cmd) || Build.NAME.equals(cmd)) {",
          "118:                 executionError(spec.commandLine(), Messages.devProfileNotAllowedError(cmd));",
          "119:             }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: import org.keycloak.config.DeprecatedMetadata;",
          "39: import org.keycloak.config.Option;",
          "41: import org.keycloak.config.OptionCategory;",
          "42: import org.keycloak.quarkus.runtime.cli.PropertyException;",
          "43: import org.keycloak.quarkus.runtime.cli.ShortErrorMessageHandler;",
          "",
          "[Removed Lines]",
          "40: import org.keycloak.config.OptionBuilder;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: public class PropertyMapper<T> {",
          "70:     private final Option<T> option;",
          "71:     private final String to;",
          "72:     private BooleanSupplier enabled;",
          "",
          "[Removed Lines]",
          "53:     static PropertyMapper<?> IDENTITY = new PropertyMapper<>(",
          "54:             new OptionBuilder<>(null, String.class).build(),",
          "55:             null,",
          "56:             () -> false,",
          "57:             \"\",",
          "58:             null,",
          "59:             null,",
          "60:             null,",
          "61:             false,",
          "62:             null,",
          "63:             null) {",
          "64:         @Override",
          "65:         public ConfigValue getConfigValue(String name, ConfigSourceInterceptorContext context) {",
          "66:             return context.proceed(name);",
          "67:         }",
          "68:     };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: import org.keycloak.quarkus.runtime.cli.command.AbstractCommand;",
          "14: import org.keycloak.quarkus.runtime.cli.command.Build;",
          "15: import org.keycloak.quarkus.runtime.cli.command.ShowConfig;",
          "17: import org.keycloak.quarkus.runtime.configuration.DisabledMappersInterceptor;",
          "18: import org.keycloak.quarkus.runtime.configuration.PersistedConfigSource;",
          "20: import java.util.ArrayList;",
          "",
          "[Removed Lines]",
          "16: import org.keycloak.quarkus.runtime.configuration.ConfigArgsConfigSource;",
          "",
          "[Added Lines]",
          "17: import org.keycloak.quarkus.runtime.configuration.MicroProfileConfigProvider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:     }",
          "76:     public static ConfigValue getValue(ConfigSourceInterceptorContext context, String name) {",
          "78:     }",
          "80:     public static boolean isBuildTimeProperty(String name) {",
          "",
          "[Removed Lines]",
          "77:         return getMapperOrDefault(name, PropertyMapper.IDENTITY).getConfigValue(name, context);",
          "",
          "[Added Lines]",
          "77:         PropertyMapper<?> mapper = getMapper(name);",
          "79:         if ((isRebuild() || Environment.isRebuildCheck()) && isKeycloakRuntime(name, mapper)) {",
          "80:             return ConfigValue.builder().withName(name).build();",
          "81:         }",
          "82:         if (mapper == null) {",
          "83:             return context.proceed(name);",
          "84:         }",
          "85:         return mapper.getConfigValue(name, context);",
          "86:     }",
          "88:     private static boolean isKeycloakRuntime(String name, PropertyMapper<?> mapper) {",
          "89:         if (mapper == null) {",
          "90:             return name.startsWith(MicroProfileConfigProvider.NS_KEYCLOAK) && !isSpiBuildTimeProperty(name);",
          "91:         }",
          "92:         return mapper.isRunTime();",
          "",
          "---------------"
        ],
        "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java": [
          "File: quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java -> quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:         cliResult.assertError(\"File specified via '--config-file' or '-cf' option does not exist.\");",
          "239:         cliResult.assertError(String.format(\"Try '%s --help' for more information on the available options.\", KeycloakDistribution.SCRIPT_CMD));",
          "240:     }",
          "241: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:     @RawDistOnly(reason = \"Containers are immutable\")",
          "243:     @Test",
          "244:     void testRuntimeValuesAreNotCaptured(KeycloakDistribution dist) {",
          "247:         CLIResult cliResult = dist.run(\"start\", \"--spi-events-listener-jboss-logging-success-level=invalid\", \"--http-enabled\", \"true\", \"--hostname-strict\", \"false\");",
          "248:         cliResult.assertError(\"Failed to start quarkus\");",
          "251:         if (!cliResult.getOutput().contains(\"Server configuration updated and persisted\")) {",
          "252:             cliResult = dist.run(\"build\", \"--spi-events-listener-jboss-logging-success-level=invalid\");",
          "253:             cliResult.assertBuild();",
          "254:         }",
          "257:         cliResult = dist.run(\"start\", \"--http-enabled\", \"true\", \"--hostname-strict\", \"false\");",
          "258:         cliResult.assertNoBuild();",
          "259:         cliResult.assertStarted();",
          "260:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}