{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "74d801e99a58f5cb7d0bf6176fe1af19a1f4e8e8",
      "candidate_info": {
        "commit_hash": "74d801e99a58f5cb7d0bf6176fe1af19a1f4e8e8",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/74d801e99a58f5cb7d0bf6176fe1af19a1f4e8e8",
        "files": [
          "ambari-web/app/templates/common/configs/config_versions_control.hbs",
          "ambari-web/app/views/common/configs/config_versions_control_view.js"
        ],
        "message": "AMBARI-24635. Web Client Chooses Wrong Version When Reverting Configs (akovalenko)",
        "before_after_code_files": [
          "ambari-web/app/templates/common/configs/config_versions_control.hbs||ambari-web/app/templates/common/configs/config_versions_control.hbs",
          "ambari-web/app/views/common/configs/config_versions_control_view.js||ambari-web/app/views/common/configs/config_versions_control_view.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/templates/common/configs/config_versions_control.hbs||ambari-web/app/templates/common/configs/config_versions_control.hbs": [
          "File: ambari-web/app/templates/common/configs/config_versions_control.hbs -> ambari-web/app/templates/common/configs/config_versions_control.hbs",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:   {{else}}",
          "35:     {{view App.ConfigVersionsDropdownView serviceVersionsBinding=\"view.serviceVersions\"}}",
          "36:     {{#unless view.displayedServiceVersion.isCurrent}}",
          "38:         {{t dashboard.configHistory.info-bar.revert.button}}",
          "39:       </button>",
          "40:     {{/unless}}",
          "",
          "[Removed Lines]",
          "37:       <button class=\"btn btn-secondary make-current\" {{action makeCurrent view.displayedServiceVersion target=\"view\"}}>",
          "",
          "[Added Lines]",
          "37:       <button class=\"btn btn-secondary make-current\" {{action makeCurrent target=\"view\"}}>",
          "",
          "---------------"
        ],
        "ambari-web/app/views/common/configs/config_versions_control_view.js||ambari-web/app/views/common/configs/config_versions_control_view.js": [
          "File: ambari-web/app/views/common/configs/config_versions_control_view.js -> ambari-web/app/views/common/configs/config_versions_control_view.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:     const self = this;",
          "161:     const versionText = serviceConfigVersion.get('versionText');",
          "162:     return App.ModalPopup.show({",
          "163:       header: Em.I18n.t('dashboard.configHistory.info-bar.makeCurrent.popup.title'),",
          "",
          "[Removed Lines]",
          "158:   makeCurrent: function (event) {",
          "160:     const serviceConfigVersion = event.contexts[0];",
          "",
          "[Added Lines]",
          "158:   makeCurrent: function () {",
          "160:     const serviceConfigVersion = this.get('displayedServiceVersion');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b0030ed6d8a1a1f123b29d6b36088be8d49ff6f9",
      "candidate_info": {
        "commit_hash": "b0030ed6d8a1a1f123b29d6b36088be8d49ff6f9",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/b0030ed6d8a1a1f123b29d6b36088be8d49ff6f9",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java",
          "ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/PrivilegeEventCreatorTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/RepositoryVersionEventCreatorTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ViewPrivilegeEventCreatorTest.java"
        ],
        "message": "[AMBARI-25124] ambari-audit.log entries span multiple lines (apappu)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java",
          "ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java||ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/PrivilegeEventCreatorTest.java||ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/PrivilegeEventCreatorTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/RepositoryVersionEventCreatorTest.java||ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/RepositoryVersionEventCreatorTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ViewPrivilegeEventCreatorTest.java||ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ViewPrivilegeEventCreatorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     protected void buildAuditMessage(StringBuilder builder) {",
          "63:       super.buildAuditMessage(builder);",
          "67:       if (roles != null && !roles.isEmpty()) {",
          "68:         List<String> lines = new LinkedList<>();",
          "69:         for (Map.Entry<String, List<String>> entry : roles.entrySet()) {",
          "71:         }",
          "74:       }",
          "75:       builder.append(\"), Status(\")",
          "76:         .append(reasonOfFailure == null ? \"Success\" : \"Failed\");",
          "",
          "[Removed Lines]",
          "65:       builder.append(\", Operation(User login), Roles(\").append(System.lineSeparator());",
          "70:           lines.add(\"    \" + entry.getKey() + \": \" + StringUtils.join(entry.getValue(), \", \"));",
          "72:         builder.append(StringUtils.join(lines, System.lineSeparator()));",
          "73:         builder.append(System.lineSeparator());",
          "",
          "[Added Lines]",
          "65:       builder.append(\", Operation(User login), Roles(\");",
          "70:           lines.add(\"(\" + \"    \" + entry.getKey() + \": \" + StringUtils.join(entry.getValue(), \", \") + \")\");",
          "72:         builder.append(StringUtils.join(lines, \")\"));",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:         .append(repoVersion)",
          "89:         .append(\"), Repositories(\");",
          "95:       for (Map.Entry<String, List<Map<String, String>>> repo : repos.entrySet()) {",
          "96:         builder.append(\"Operating system: \").append(repo.getKey());",
          "98:         for (Map<String, String> properties : repo.getValue()) {",
          "99:           builder.append(\"    Repository ID(\").append(properties.get(\"repo_id\"));",
          "100:           builder.append(\"), Repository name(\").append(properties.get(\"repo_name\"));",
          "101:           builder.append(\"), Base url(\").append(properties.get(\"base_url\")).append(\")\");",
          "103:         }",
          "104:       }",
          "",
          "[Removed Lines]",
          "91:       if (!repos.isEmpty()) {",
          "92:         builder.append(System.lineSeparator());",
          "93:       }",
          "97:         builder.append(System.lineSeparator());",
          "102:           builder.append(System.lineSeparator());",
          "",
          "[Added Lines]",
          "94:         builder.append(\"(\");",
          "99:           builder.append(\")\");",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:         .append(repoVersion)",
          "90:         .append(\"), Repositories(\");",
          "96:       for (Map.Entry<String, List<Map<String, String>>> repo : repos.entrySet()) {",
          "97:         builder.append(\"Operating system: \").append(repo.getKey());",
          "99:         for (Map<String, String> properties : repo.getValue()) {",
          "100:           builder.append(\"    Repository ID(\").append(properties.get(\"repo_id\"));",
          "101:           builder.append(\"), Repository name(\").append(properties.get(\"repo_name\"));",
          "102:           builder.append(\"), Base url(\").append(properties.get(\"base_url\")).append(\")\");",
          "104:         }",
          "105:       }",
          "",
          "[Removed Lines]",
          "92:       if (!repos.isEmpty()) {",
          "93:         builder.append(System.lineSeparator());",
          "94:       }",
          "98:         builder.append(System.lineSeparator());",
          "103:           builder.append(System.lineSeparator());",
          "",
          "[Added Lines]",
          "96:         builder.append(\"(\");",
          "101:           builder.append(\")\");",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:       roleSet.addAll(roles.keySet());",
          "82:       builder.append(\", Roles(\");",
          "87:       List<String> lines = new LinkedList<>();",
          "89:       for (String role : roleSet) {",
          "91:         if (users.get(role) != null && !users.get(role).isEmpty()) {",
          "93:         }",
          "94:         if (groups.get(role) != null && !groups.get(role).isEmpty()) {",
          "96:         }",
          "97:         if (roles.get(role) != null && !roles.get(role).isEmpty()) {",
          "99:         }",
          "100:       }",
          "104:       builder.append(\")\");",
          "105:     }",
          "107:     public ClusterPrivilegeChangeRequestAuditEventBuilder withUsers(Map<String, List<String>> users) {",
          "",
          "[Removed Lines]",
          "83:       if (!users.isEmpty() || !groups.isEmpty()|| !roles.isEmpty()) {",
          "84:         builder.append(System.lineSeparator());",
          "85:       }",
          "90:         lines.add(role + \": \");",
          "92:           lines.add(\"  Users: \" + StringUtils.join(users.get(role), \", \"));",
          "95:           lines.add(\"  Groups: \" + StringUtils.join(groups.get(role), \", \"));",
          "98:           lines.add(\"  Roles: \" + StringUtils.join(roles.get(role), \", \"));",
          "102:       builder.append(StringUtils.join(lines, System.lineSeparator()));",
          "",
          "[Added Lines]",
          "86:       List<String> tmpLines = null;",
          "90:         tmpLines = new LinkedList<>();",
          "91:         lines.add(role + \": [\");",
          "93:           tmpLines.add(\"  Users: \" + StringUtils.join(users.get(role), \", \"));",
          "96:           tmpLines.add(\"  Groups: \" + StringUtils.join(groups.get(role), \", \"));",
          "99:           tmpLines.add(\"  Roles: \" + StringUtils.join(roles.get(role), \", \"));",
          "101:         lines.add(StringUtils.join(tmpLines, \";\"));",
          "102:         lines.add(\"] \");",
          "105:       builder.append(StringUtils.join(lines, \"\"));",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:       roleSet.addAll(roles.keySet());",
          "103:       builder.append(\", Permissions(\");",
          "108:       List<String> lines = new LinkedList<>();",
          "110:       for (String role : roleSet) {",
          "112:         if (users.get(role) != null && !users.get(role).isEmpty()) {",
          "114:         }",
          "115:         if (groups.get(role) != null && !groups.get(role).isEmpty()) {",
          "117:         }",
          "118:         if (roles.get(role) != null && !roles.get(role).isEmpty()) {",
          "120:         }",
          "121:       }",
          "125:       builder.append(\")\");",
          "126:     }",
          "",
          "[Removed Lines]",
          "104:       if (!users.isEmpty() || !groups.isEmpty() || !roles.isEmpty()) {",
          "105:         builder.append(System.lineSeparator());",
          "106:       }",
          "111:         lines.add(role + \": \");",
          "113:           lines.add(\"  Users: \" + StringUtils.join(users.get(role), \", \"));",
          "116:           lines.add(\"  Groups: \" + StringUtils.join(groups.get(role), \", \"));",
          "119:           lines.add(\"  Roles: \" + StringUtils.join(roles.get(role), \", \"));",
          "123:       builder.append(StringUtils.join(lines, System.lineSeparator()));",
          "",
          "[Added Lines]",
          "106:       List<String> tmpLines = null;",
          "109:         tmpLines = new LinkedList<>();",
          "110:         lines.add(role + \": [\");",
          "112:           tmpLines.add(\"  Users: \" + StringUtils.join(users.get(role), \", \"));",
          "115:           tmpLines.add(\"  Groups: \" + StringUtils.join(groups.get(role), \", \"));",
          "118:           tmpLines.add(\"  Roles: \" + StringUtils.join(roles.get(role), \", \"));",
          "120:         lines.add(StringUtils.join(tmpLines, \";\"));",
          "121:         lines.add(\"] \");",
          "124:       builder.append(StringUtils.join(lines, \"\"));",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java||ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java -> ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     String actualAuditMessage = evnt.getAuditMessage();",
          "61:     String expectedAuditMessage = String.format(\"User(%s), RemoteIp(%s), Operation(User login), Roles(%s), Status(Success)\",",
          "",
          "[Removed Lines]",
          "58:     String roleMessage = System.lineSeparator() + \"    a: r1, r2, r3\" + System.lineSeparator();",
          "",
          "[Added Lines]",
          "58:     String roleMessage = \"(\" + \"    a: r1, r2, r3\" + \")\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     actualAuditMessage = evnt.getAuditMessage();",
          "80:     expectedAuditMessage = String.format(\"User(%s), RemoteIp(%s), ProxyUser(%s), Operation(User login), Roles(%s), Status(Success)\",",
          "",
          "[Removed Lines]",
          "77:     roleMessage = System.lineSeparator() + \"    a: r1, r2, r3\" + System.lineSeparator();",
          "",
          "[Added Lines]",
          "77:     roleMessage = \"(\" + \"    a: r1, r2, r3\" +  \")\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110:     String actualAuditMessage = evnt.getAuditMessage();",
          "115:     String expectedAuditMessage = String.format(\"User(%s), RemoteIp(%s), Operation(User login), Roles(%s), Status(Failed), Reason(%s), Consecutive failures(%d)\",",
          "",
          "[Removed Lines]",
          "112:     String roleMessage = System.lineSeparator() + \"    a: r1, r2, r3\" + System.lineSeparator();",
          "",
          "[Added Lines]",
          "112:     String roleMessage = \"(\" + \"    a: r1, r2, r3\" +  \")\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131:     actualAuditMessage = evnt.getAuditMessage();",
          "136:     expectedAuditMessage = String.format(\"User(%s), RemoteIp(%s), ProxyUser(%s), Operation(User login), Roles(%s), Status(Failed), Reason(%s), Consecutive failures(%d)\",",
          "",
          "[Removed Lines]",
          "133:     roleMessage = System.lineSeparator() + \"    a: r1, r2, r3\" + System.lineSeparator();",
          "",
          "[Added Lines]",
          "133:     roleMessage = \"(\" + \"    a: r1, r2, r3\" +  \")\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "165:     String actualAuditMessage = evnt.getAuditMessage();",
          "170:     String expectedAuditMessage = String.format(\"User(%s), RemoteIp(%s), Operation(User login), Roles(%s), Status(Failed), Reason(%s), Consecutive failures(UNKNOWN USER)\",",
          "",
          "[Removed Lines]",
          "167:     String roleMessage = System.lineSeparator() + \"    a: r1, r2, r3\" + System.lineSeparator();",
          "",
          "[Added Lines]",
          "167:     String roleMessage = \"(\" + \"    a: r1, r2, r3\" +  \")\";",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "186:     actualAuditMessage = evnt.getAuditMessage();",
          "191:     expectedAuditMessage = String.format(\"User(%s), RemoteIp(%s), ProxyUser(%s), Operation(User login), Roles(%s), Status(Failed), Reason(%s), Consecutive failures(UNKNOWN USER)\",",
          "",
          "[Removed Lines]",
          "188:     roleMessage = System.lineSeparator() + \"    a: r1, r2, r3\" + System.lineSeparator();",
          "",
          "[Added Lines]",
          "188:     roleMessage =  \"(\" + \"    a: r1, r2, r3\" +  \")\";",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/PrivilegeEventCreatorTest.java||ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/PrivilegeEventCreatorTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/PrivilegeEventCreatorTest.java -> ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/PrivilegeEventCreatorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     AuditEvent event = AuditEventCreatorTestHelper.getEvent(creator, request, result);",
          "98:     String actual = event.getAuditMessage();",
          "106:     Assert.assertTrue(\"Class mismatch\", event instanceof ClusterPrivilegeChangeRequestAuditEvent);",
          "107:     Assert.assertEquals(expected, actual);",
          "",
          "[Removed Lines]",
          "99:     String expected = \"User(\" + userName + \"), RemoteIp(1.2.3.4), Operation(Role change), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Roles(\\n\" +",
          "100:       \"Permission1: \\n\" +",
          "101:       \"  Users: \" + userName + \"\\n\" +",
          "102:       \"  Groups: testgroup\\n\" +",
          "103:       \"Permission2: \\n\" +",
          "104:       \"  Users: \" + userName + \"2)\";",
          "",
          "[Added Lines]",
          "99:     String expected = \"User(\" + userName + \"), RemoteIp(1.2.3.4), Operation(Role change), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Roles(\" +",
          "100:       \"Permission1: [\" +",
          "101:       \"  Users: \" + userName + \";\" +",
          "102:       \"  Groups: testgroup]\" +",
          "103:       \" Permission2: [\" +",
          "104:       \"  Users: \" + userName + \"2] )\";",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/RepositoryVersionEventCreatorTest.java||ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/RepositoryVersionEventCreatorTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/RepositoryVersionEventCreatorTest.java -> ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/RepositoryVersionEventCreatorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     AuditEvent event = AuditEventCreatorTestHelper.getEvent(creator, request, result);",
          "61:     String actual = event.getAuditMessage();",
          "67:       \")\";",
          "69:     Assert.assertTrue(\"Class mismatch\", event instanceof AddRepositoryVersionRequestAuditEvent);",
          "",
          "[Removed Lines]",
          "62:     String expected = \"User(\" + userName + \"), RemoteIp(1.2.3.4), Operation(Repository version addition), RequestType(POST), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Stack(StackName), Stack version(1.9), Display name(MyStack), Repo version(1.2-56), Repositories(\\n\" +",
          "63:       \"Operating system: redhat6\\n\" +",
          "64:       \"    Repository ID(2), Repository name(MyRepo6), Base url(http://example6.com)\\n\" +",
          "65:       \"Operating system: redhat7\\n\" +",
          "66:       \"    Repository ID(1), Repository name(MyRepo), Base url(http://example.com)\\n\" +",
          "",
          "[Added Lines]",
          "62:     String expected = \"User(\" + userName + \"), RemoteIp(1.2.3.4), Operation(Repository version addition), RequestType(POST), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Stack(StackName), Stack version(1.9), Display name(MyStack), Repo version(1.2-56), Repositories(\" +",
          "63:       \"Operating system: redhat6(\" +",
          "64:       \"    Repository ID(2), Repository name(MyRepo6), Base url(http://example6.com))\" +",
          "65:       \"Operating system: redhat7(\" +",
          "66:       \"    Repository ID(1), Repository name(MyRepo), Base url(http://example.com))\" +",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:     AuditEvent event = AuditEventCreatorTestHelper.getEvent(creator, request, result);",
          "91:     String actual = event.getAuditMessage();",
          "97:       \")\";",
          "99:     Assert.assertTrue(\"Class mismatch\", event instanceof ChangeRepositoryVersionRequestAuditEvent);",
          "",
          "[Removed Lines]",
          "92:     String expected = \"User(\" + userName + \"), RemoteIp(1.2.3.4), Operation(Repository version change), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Stack(StackName), Stack version(1.9), Display name(MyStack), Repo version(1.2-56), Repositories(\\n\" +",
          "93:       \"Operating system: redhat6\\n\" +",
          "94:       \"    Repository ID(2), Repository name(MyRepo6), Base url(http://example6.com)\\n\" +",
          "95:       \"Operating system: redhat7\\n\" +",
          "96:       \"    Repository ID(1), Repository name(MyRepo), Base url(http://example.com)\\n\" +",
          "",
          "[Added Lines]",
          "92:     String expected = \"User(\" + userName + \"), RemoteIp(1.2.3.4), Operation(Repository version change), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Stack(StackName), Stack version(1.9), Display name(MyStack), Repo version(1.2-56), Repositories(\" +",
          "93:       \"Operating system: redhat6(\" +",
          "94:       \"    Repository ID(2), Repository name(MyRepo6), Base url(http://example6.com))\" +",
          "95:       \"Operating system: redhat7(\" +",
          "96:       \"    Repository ID(1), Repository name(MyRepo), Base url(http://example.com))\" +",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ViewPrivilegeEventCreatorTest.java||ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ViewPrivilegeEventCreatorTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ViewPrivilegeEventCreatorTest.java -> ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ViewPrivilegeEventCreatorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     AuditEvent event = AuditEventCreatorTestHelper.getEvent(creator, request, result);",
          "76:     String actual = event.getAuditMessage();",
          "84:     Assert.assertTrue(\"Class mismatch\", event instanceof ViewPrivilegeChangeRequestAuditEvent);",
          "85:     Assert.assertEquals(expected, actual);",
          "",
          "[Removed Lines]",
          "77:     String expected = \"User(\" + userName + \"), RemoteIp(1.2.3.4), Operation(View permission change), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Type(MyView), Version(MyView), Name(MyView), Permissions(\\n\" +",
          "78:       \"Permission1: \\n\" +",
          "79:       \"  Users: testuser\\n\" +",
          "80:       \"  Groups: testgroup\\n\" +",
          "81:       \"Permission2: \\n\" +",
          "82:       \"  Users: testuser2)\";",
          "",
          "[Added Lines]",
          "77:     String expected = \"User(\" + userName + \"), RemoteIp(1.2.3.4), Operation(View permission change), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Type(MyView), Version(MyView), Name(MyView), Permissions(\" +",
          "78:       \"Permission1: [\" +",
          "79:       \"  Users: testuser;\" +",
          "80:       \"  Groups: testgroup]\" +",
          "81:       \" Permission2: [\" +",
          "82:       \"  Users: testuser2] )\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec9ac6670be53c77920ae9c40948ad6596f6f78b",
      "candidate_info": {
        "commit_hash": "ec9ac6670be53c77920ae9c40948ad6596f6f78b",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/ec9ac6670be53c77920ae9c40948ad6596f6f78b",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CleanupServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/FinalizeKerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerActionTest.java",
          "ambari-web/app/controllers/main/host/details.js",
          "ambari-web/app/utils/ajax/ajax.js"
        ],
        "message": "[AMBARI-24319] Multiple alerts after HDFS service only regenerate keytabs, as keytabs are out of sync",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java||ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CleanupServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CleanupServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/FinalizeKerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/FinalizeKerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerActionTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerActionTest.java",
          "ambari-web/app/controllers/main/host/details.js||ambari-web/app/controllers/main/host/details.js",
          "ambari-web/app/utils/ajax/ajax.js||ambari-web/app/utils/ajax/ajax.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java||ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "321:     }",
          "323:     @Override",
          "325:       return null;",
          "326:     }",
          "327:   }",
          "",
          "[Removed Lines]",
          "324:     protected CommandReport processIdentity(ResolvedKerberosPrincipal resolvedPrincipal, KerberosOperationHandler operationHandler, Map<String, String> kerberosConfiguration, Map<String, Object> requestSharedDataContext) throws AmbariException {",
          "",
          "[Added Lines]",
          "324:     protected CommandReport processIdentity(ResolvedKerberosPrincipal resolvedPrincipal, KerberosOperationHandler operationHandler, Map<String, String> kerberosConfiguration, boolean includedInFilter, Map<String, Object> requestSharedDataContext) throws AmbariException {",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "139: import com.google.common.collect.ImmutableMap;",
          "140: import com.google.common.collect.ImmutableSet;",
          "142: import com.google.common.collect.Sets;",
          "143: import com.google.gson.JsonArray;",
          "144: import com.google.gson.JsonObject;",
          "",
          "[Removed Lines]",
          "141: import com.google.common.collect.Lists;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1868:                   String uniqueKey = String.format(\"%s|%s\", principal, (keytabFile == null) ? \"\" : keytabFile);",
          "1871:                     KerberosPrincipalType principalType = principalDescriptor.getType();",
          "",
          "[Removed Lines]",
          "1870:                   if (!hostActiveIdentities.containsKey(uniqueKey)) {",
          "",
          "[Added Lines]",
          "1869:                   if (!hostActiveIdentities.containsKey(uniqueKey) ||",
          "1870:                       (StringUtils.isNotBlank(hostActiveIdentities.get(uniqueKey).getReference()) && StringUtils.isBlank(identity.getReference()))) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2468:       handler.createStages(cluster,",
          "2469:         clusterHostInfoJson, hostParamsJson, event, roleCommandOrder, kerberosDetails,",
          "2470:         dataDirectory, requestStageContainer, serviceComponentHostsToProcess,",
          "2475:       handler.addFinalizeOperationStage(cluster, clusterHostInfoJson, hostParamsJson, event,",
          "",
          "[Removed Lines]",
          "2471:         Collections.singletonMap(\"KERBEROS\", Lists.newArrayList(\"KERBEROS_CLIENT\")),",
          "2472:         null, Sets.newHashSet(principal), hostsWithValidKerberosClient);",
          "",
          "[Added Lines]",
          "2471:         null, null, Sets.newHashSet(principal), hostsWithValidKerberosClient);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   private ConfigHelper configHelper;",
          "74:   @Override",
          "76:     throw new UnsupportedOperationException();",
          "77:   }",
          "",
          "[Removed Lines]",
          "75:   protected CommandReport processIdentity(ResolvedKerberosPrincipal resolvedPrincipal, KerberosOperationHandler operationHandler, Map<String, String> kerberosConfiguration, Map<String, Object> requestSharedDataContext) throws AmbariException {",
          "",
          "[Added Lines]",
          "75:   protected CommandReport processIdentity(ResolvedKerberosPrincipal resolvedPrincipal, KerberosOperationHandler operationHandler, Map<String, String> kerberosConfiguration, boolean includedInFilter, Map<String, Object> requestSharedDataContext) throws AmbariException {",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CleanupServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CleanupServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CleanupServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CleanupServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:   protected CommandReport processIdentity(ResolvedKerberosPrincipal resolvedPrincipal,",
          "74:                                           KerberosOperationHandler operationHandler,",
          "75:                                           Map<String, String> kerberosConfiguration,",
          "76:                                           Map<String, Object> requestSharedDataContext)",
          "77:       throws AmbariException {",
          "78:     return null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:                                           boolean includedInFilter,",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:   protected CommandReport processIdentity(ResolvedKerberosPrincipal resolvedPrincipal,",
          "118:                                           KerberosOperationHandler operationHandler,",
          "119:                                           Map<String, String> kerberosConfiguration,",
          "120:                                           Map<String, Object> requestSharedDataContext)",
          "121:       throws AmbariException {",
          "122:     CommandReport commandReport = null;",
          "125:       final String hostName = resolvedPrincipal.getHostName();",
          "126:       final String dataDirectory = getDataDirectoryPath();",
          "127:       for (Map.Entry<String, String> serviceMappingEntry : resolvedPrincipal.getServiceMapping().entries()) {",
          "",
          "[Removed Lines]",
          "124:     if (resolvedPrincipal != null && StageUtils.getHostName().equals(resolvedPrincipal.getHostName())) {",
          "",
          "[Added Lines]",
          "122:                                           boolean includedInFilter,",
          "127:     if (includedInFilter && resolvedPrincipal != null && StageUtils.getHostName().equals(resolvedPrincipal.getHostName())) {",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:   protected CommandReport processIdentity(ResolvedKerberosPrincipal resolvedPrincipal,",
          "143:                                           KerberosOperationHandler operationHandler,",
          "144:                                           Map<String, String> kerberosConfiguration,",
          "145:                                           Map<String, Object> requestSharedDataContext)",
          "146:       throws AmbariException {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:                                           boolean includedInFilter,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "207:                 boolean regenerateKeytabs = getOperationType(getCommandParameters()) == OperationType.RECREATE_ALL;",
          "209:                 KerberosPrincipalEntity principalEntity = kerberosPrincipalDAO.find(resolvedPrincipal.getPrincipal());",
          "210:                 String cachedKeytabPath = (principalEntity == null) ? null : principalEntity.getCachedKeytabPath();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:                 if(!includedInFilter) {",
          "214:                   regenerateKeytabs = false;",
          "215:                 }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:   protected CommandReport processIdentity(ResolvedKerberosPrincipal resolvedPrincipal,",
          "119:                                           KerberosOperationHandler operationHandler,",
          "120:                                           Map<String, String> kerberosConfiguration,",
          "121:                                           Map<String, Object> requestSharedDataContext)",
          "122:       throws AmbariException {",
          "123:     CommandReport commandReport = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:                                           boolean includedInFilter,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:       boolean regenerateKeytabs = getOperationType(getCommandParameters()) == OperationType.RECREATE_ALL;",
          "135:       boolean servicePrincipal = resolvedPrincipal.isService();",
          "136:       if (regenerateKeytabs) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:       if(!includedInFilter) {",
          "142:         regenerateKeytabs = false;",
          "143:       }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:   protected CommandReport processIdentity(ResolvedKerberosPrincipal resolvedPrincipal,",
          "107:                                           KerberosOperationHandler operationHandler,",
          "108:                                           Map<String, String> kerberosConfiguration,",
          "109:                                           Map<String, Object> requestSharedDataContext)",
          "110:       throws AmbariException {",
          "113:     if (!seenPrincipals.contains(resolvedPrincipal.getPrincipal())) {",
          "114:       seenPrincipals.add(resolvedPrincipal.getPrincipal());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:                                           boolean includedInFilter,",
          "115:     if(!includedInFilter) {",
          "117:       return null;",
          "118:     }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/FinalizeKerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/FinalizeKerberosServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/FinalizeKerberosServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/FinalizeKerberosServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:   protected CommandReport processIdentity(ResolvedKerberosPrincipal resolvedPrincipal,",
          "69:                                           KerberosOperationHandler operationHandler,",
          "70:                                           Map<String, String> kerberosConfiguration,",
          "71:                                           Map<String, Object> requestSharedDataContext)",
          "72:       throws AmbariException {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:                                           boolean includedInFilter,",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.io.File;",
          "22: import java.io.IOException;",
          "23: import java.lang.reflect.Type;",
          "24: import java.util.Collection;",
          "25: import java.util.HashMap;",
          "26: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.util.ArrayList;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: import org.apache.ambari.server.serveraction.kerberos.stageutils.ResolvedKerberosPrincipal;",
          "42: import org.apache.ambari.server.state.Cluster;",
          "43: import org.apache.ambari.server.state.Clusters;",
          "44: import org.apache.ambari.server.utils.StageUtils;",
          "45: import org.apache.commons.io.FileUtils;",
          "46: import org.apache.commons.lang.StringUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:   @Inject",
          "178:   private KerberosOperationHandlerFactory kerberosOperationHandlerFactory;",
          "",
          "[Removed Lines]",
          "183:   @Inject",
          "184:   private KerberosIdentityDataFileReaderFactory kerberosIdentityDataFileReaderFactory;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "455:       }",
          "457:       try {",
          "459:           for (ResolvedKerberosPrincipal principal : rkk.getPrincipals()) {",
          "463:             if (commandReport != null) {",
          "464:               break;",
          "465:             }",
          "",
          "[Removed Lines]",
          "458:         for (ResolvedKerberosKeytab rkk : kerberosKeytabController.getFilteredKeytabs((Map<String, Collection<String>>) getServiceComponentFilter(), getHostFilter(), getIdentityFilter())) {",
          "460:             commandReport = processIdentity(principal, handler, kerberosConfiguration, requestSharedDataContext);",
          "",
          "[Added Lines]",
          "454:         final Map<String, Collection<String>> serviceComponentFilter = (Map<String, Collection<String>>) getServiceComponentFilter();",
          "455:         final Collection<KerberosIdentityDescriptor> serviceIdentities = serviceComponentFilter == null ? null : calculateServiceIdentities(getClusterName(), serviceComponentFilter);",
          "456:         for (ResolvedKerberosKeytab rkk : kerberosKeytabController.getFilteredKeytabs(serviceComponentFilter, getHostFilter(), getIdentityFilter())) {",
          "458:             commandReport = processIdentity(principal, handler, kerberosConfiguration, isRelevantIdentity(serviceIdentities, principal), requestSharedDataContext);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "487:         : commandReport;",
          "488:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "488:   private boolean isRelevantIdentity(Collection<KerberosIdentityDescriptor> serviceIdentities, ResolvedKerberosPrincipal principal) {",
          "489:     if (serviceIdentities != null) {",
          "490:       boolean hasValidIdentity = false;",
          "491:       for (KerberosIdentityDescriptor serviceIdentity : serviceIdentities) {",
          "492:         if (principal.getPrincipal().equals(serviceIdentity.getPrincipalDescriptor().getName()) && StringUtils.isBlank(serviceIdentity.getReference())) {",
          "493:           hasValidIdentity = true;",
          "494:           break;",
          "495:         }",
          "496:       }",
          "497:       return hasValidIdentity;",
          "498:     }",
          "500:     return true;",
          "501:   }",
          "503:   private Collection<KerberosIdentityDescriptor> calculateServiceIdentities(String clusterName, Map<String, Collection<String>> serviceComponentFilter)",
          "504:       throws AmbariException {",
          "505:     final Collection<KerberosIdentityDescriptor> serviceIdentities = new ArrayList<>();",
          "506:     for (String service : serviceComponentFilter.keySet()) {",
          "507:       for (Collection<KerberosIdentityDescriptor> activeIdentities : kerberosHelper.getActiveIdentities(clusterName, null, service, null, true).values()) {",
          "508:         serviceIdentities.addAll(activeIdentities);",
          "509:       }",
          "510:     }",
          "511:     return serviceIdentities;",
          "512:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "507:   protected abstract CommandReport processIdentity(ResolvedKerberosPrincipal resolvedPrincipal,",
          "508:                                                    KerberosOperationHandler operationHandler,",
          "509:                                                    Map<String, String> kerberosConfiguration,",
          "510:                                                    Map<String, Object> requestSharedDataContext)",
          "511:       throws AmbariException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "536:                                                    boolean includedInFilter,",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   }",
          "136:   @Override",
          "138:     throw new UnsupportedOperationException();",
          "139:   }",
          "140: }",
          "",
          "[Removed Lines]",
          "137:   protected CommandReport processIdentity(ResolvedKerberosPrincipal resolvedPrincipal, KerberosOperationHandler operationHandler, Map<String, String> kerberosConfiguration, Map<String, Object> requestSharedDataContext) throws AmbariException {",
          "",
          "[Added Lines]",
          "137:   protected CommandReport processIdentity(ResolvedKerberosPrincipal resolvedPrincipal, KerberosOperationHandler operationHandler, Map<String, String> kerberosConfiguration, boolean includedInFilter, Map<String, Object> requestSharedDataContext) throws AmbariException {",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerActionTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerActionTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerActionTest.java -> ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerActionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:       protected CommandReport processIdentity(ResolvedKerberosPrincipal resolvedPrincipal,",
          "97:                                               KerberosOperationHandler operationHandler,",
          "98:                                               Map<String, String> kerberosConfiguration,",
          "99:                                               Map<String, Object> requestSharedDataContext)",
          "100:           throws AmbariException {",
          "101:         Assert.assertNotNull(requestSharedDataContext);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:                                               boolean includedInFilter,",
          "",
          "---------------"
        ],
        "ambari-web/app/controllers/main/host/details.js||ambari-web/app/controllers/main/host/details.js": [
          "File: ambari-web/app/controllers/main/host/details.js -> ambari-web/app/controllers/main/host/details.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3142:         \"RequestBodyInfo\": {",
          "3143:           \"RequestInfo\": {",
          "3144:             context: Em.I18n.t('hosts.host.recover.regenerateKeytabs.context'),",
          "3146:           },",
          "3147:           \"Body\": {",
          "3148:             Clusters: {",
          "",
          "[Removed Lines]",
          "3145:             query: \"regenerate_keytabs=all&regenerate_hosts=\" + hostName + \"&ignore_config_updates=true\",",
          "",
          "[Added Lines]",
          "3145:             query: \"regenerate_keytabs=all&regenerate_hosts=\" + hostName + \"&config_update_policy=none\",",
          "",
          "---------------"
        ],
        "ambari-web/app/utils/ajax/ajax.js||ambari-web/app/utils/ajax/ajax.js": [
          "File: ambari-web/app/utils/ajax/ajax.js -> ambari-web/app/utils/ajax/ajax.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1946:   },",
          "1948:   'admin.kerberos_security.regenerate_keytabs.service' : {",
          "1950:     'mock': '',",
          "1951:     'type': 'PUT',",
          "1952:     'format': function (data) {",
          "",
          "[Removed Lines]",
          "1949:     'real': '/clusters/{clusterName}?regenerate_keytabs=all&regenerate_components={serviceName}',",
          "",
          "[Added Lines]",
          "1949:     'real': '/clusters/{clusterName}?regenerate_keytabs=all&regenerate_components={serviceName}&config_update_policy=none',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1961:   },",
          "1963:   'admin.kerberos_security.regenerate_keytabs.host' : {",
          "1965:     'mock': '',",
          "1966:     'type': 'PUT',",
          "1967:     'format': function (data) {",
          "",
          "[Removed Lines]",
          "1964:     'real': '/clusters/{clusterName}?regenerate_keytabs=all&regenerate_hosts={hostName}',",
          "",
          "[Added Lines]",
          "1964:     'real': '/clusters/{clusterName}?regenerate_keytabs=all&regenerate_hosts={hostName}&config_update_policy=none',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9cecd2a04db2103d057e09eab42b90a5218f9478",
      "candidate_info": {
        "commit_hash": "9cecd2a04db2103d057e09eab42b90a5218f9478",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/9cecd2a04db2103d057e09eab42b90a5218f9478",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java"
        ],
        "message": "AMBARI-24592 fix handling of stack defaults in blueprints (benyoka) (#2242)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: import java.util.regex.Matcher;",
          "41: import java.util.regex.Pattern;",
          "43: import org.apache.ambari.server.AmbariException;",
          "44: import org.apache.ambari.server.state.Cluster;",
          "45: import org.apache.ambari.server.state.ConfigHelper;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import javax.annotation.Nullable;",
          "44: import javax.validation.constraints.NotNull;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3381:     throws ConfigurationTopologyException {",
          "3382:     ConfigHelper configHelper = clusterTopology.getAmbariContext().getConfigHelper();",
          "3383:     Stack stack = clusterTopology.getBlueprint().getStack();",
          "",
          "[Removed Lines]",
          "3380:   private void setStackToolsAndFeatures(Configuration configuration, Set<String> configTypesUpdated)",
          "",
          "[Added Lines]",
          "3383:   protected void setStackToolsAndFeatures(Configuration configuration, Set<String> configTypesUpdated)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3387:     StackId stackId = new StackId(stackName, stackVersion);",
          "3391:       ConfigHelper.CLUSTER_ENV_STACK_FEATURES_PROPERTY,",
          "3392:       ConfigHelper.CLUSTER_ENV_STACK_PACKAGES_PROPERTY);",
          "",
          "[Removed Lines]",
          "3389:     Set<String> properties = Sets.newHashSet(ConfigHelper.CLUSTER_ENV_STACK_NAME_PROPERTY,",
          "3390:       ConfigHelper.CLUSTER_ENV_STACK_ROOT_PROPERTY, ConfigHelper.CLUSTER_ENV_STACK_TOOLS_PROPERTY,",
          "",
          "[Added Lines]",
          "3392:     Set<String> properties = Sets.newHashSet(",
          "3393:       ConfigHelper.CLUSTER_ENV_STACK_NAME_PROPERTY,",
          "3394:       ConfigHelper.CLUSTER_ENV_STACK_ROOT_PROPERTY,",
          "3395:       ConfigHelper.CLUSTER_ENV_STACK_TOOLS_PROPERTY,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3398:       for( String property : properties ){",
          "3399:         if (clusterEnvDefaultProperties.containsKey(property)) {",
          "3405:         }",
          "3406:       }",
          "3407:     } catch( AmbariException ambariException ){",
          "",
          "[Removed Lines]",
          "3400:           configuration.setProperty(CLUSTER_ENV_CONFIG_TYPE_NAME, property,",
          "3401:             clusterEnvDefaultProperties.get(property));",
          "3404:           configTypesUpdated.add(CLUSTER_ENV_CONFIG_TYPE_NAME);",
          "",
          "[Added Lines]",
          "3405:           String newValue = clusterEnvDefaultProperties.get(property);",
          "3406:           String previous = configuration.setProperty(CLUSTER_ENV_CONFIG_TYPE_NAME, property, newValue);",
          "3407:           if (!Objects.equals(",
          "3408:             trimValue(previous, stack, CLUSTER_ENV_CONFIG_TYPE_NAME, property),",
          "3409:             trimValue(newValue, stack, CLUSTER_ENV_CONFIG_TYPE_NAME, property))) {",
          "3411:             configTypesUpdated.add(CLUSTER_ENV_CONFIG_TYPE_NAME);",
          "3412:           }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3410:     }",
          "3411:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3421:   private @Nullable String trimValue(@Nullable String value,",
          "3422:                                      @NotNull Stack stack,",
          "3423:                                      @NotNull String configType,",
          "3424:                                      @NotNull String propertyName) {",
          "3425:     if (null == value) {",
          "3426:       return null;",
          "3427:     }",
          "3428:     else {",
          "3429:       TrimmingStrategy trimmingStrategy =",
          "3430:         PropertyValueTrimmingStrategyDefiner.defineTrimmingStrategy(stack, propertyName, configType);",
          "3431:       return trimmingStrategy.trim(value);",
          "3432:     }",
          "3433:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import static java.util.Collections.emptyMap;",
          "24: import static java.util.stream.Collectors.toList;",
          "25: import static java.util.stream.Collectors.toSet;",
          "26: import static org.easymock.EasyMock.anyObject;",
          "27: import static org.easymock.EasyMock.expect;",
          "28: import static org.easymock.EasyMock.replay;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import static org.apache.ambari.server.state.ConfigHelper.CLUSTER_ENV_STACK_FEATURES_PROPERTY;",
          "27: import static org.apache.ambari.server.state.ConfigHelper.CLUSTER_ENV_STACK_NAME_PROPERTY;",
          "28: import static org.apache.ambari.server.state.ConfigHelper.CLUSTER_ENV_STACK_PACKAGES_PROPERTY;",
          "29: import static org.apache.ambari.server.state.ConfigHelper.CLUSTER_ENV_STACK_ROOT_PROPERTY;",
          "30: import static org.apache.ambari.server.state.ConfigHelper.CLUSTER_ENV_STACK_TOOLS_PROPERTY;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:   private static final Configuration EMPTY_CONFIG = new Configuration(emptyMap(), emptyMap());",
          "108:   private final Map<String, Collection<String>> serviceComponents = new HashMap<>();",
          "110:   private final Map<String, String> defaultClusterEnvProperties = new HashMap<>();",
          "112:   private final String STACK_NAME = \"testStack\";",
          "113:   private final String STACK_VERSION = \"1\";",
          "115:   @Rule",
          "116:   public EasyMockRule mocks = new EasyMockRule(this);",
          "",
          "[Removed Lines]",
          "109:   private final Map<String, Map<String, String>> stackProperties = new HashMap<>();",
          "",
          "[Added Lines]",
          "119:   private final String CLUSTER_ENV_PROP = \"cluster-env\";",
          "121:   private final Map<String, Map<String, String>> stackProperties = new HashMap<>();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6520:       expectedHostNameTwo, clusterEnv.get(\"dfs_ha_initial_namenode_standby\"));",
          "6521:   }",
          "6523:   @Test",
          "6524:   public void testParseNameServices() throws Exception {",
          "6525:     Map<String, String> hdfsSiteConfigMap =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6531:   private Map<String, String> defaultStackProps() {",
          "6532:     return Maps.newHashMap(ImmutableMap.of(",
          "6533:       CLUSTER_ENV_STACK_NAME_PROPERTY, STACK_NAME,",
          "6534:       CLUSTER_ENV_STACK_ROOT_PROPERTY, \"/usr/\" + STACK_NAME,",
          "6535:       CLUSTER_ENV_STACK_TOOLS_PROPERTY, \"{ some tools... }\",",
          "6536:       CLUSTER_ENV_STACK_FEATURES_PROPERTY, \"{ some features... }\",",
          "6537:       CLUSTER_ENV_STACK_PACKAGES_PROPERTY, \"{ some packages... }\"",
          "6538:     ));",
          "6539:   }",
          "6541:   @Test",
          "6542:   public void testSetStackToolsAndFeatures_ClusterEnvDidNotChange() throws Exception {",
          "6543:     defaultClusterEnvProperties.putAll(defaultStackProps());",
          "6544:     Map<String, Map<String, String>> blueprintProps = Maps.newHashMap(ImmutableMap.of(",
          "6545:       \"cluster-env\", defaultStackProps()",
          "6546:     ));",
          "6547:     Configuration clusterConfig = new Configuration(blueprintProps, emptyMap());",
          "6549:     TestHostGroup group = new TestHostGroup(\"groups1\", Sets.newHashSet(\"NAMENODE\"), ImmutableSet.of(\"host1\"));",
          "6550:     ClusterTopology topology = createClusterTopology(bp, clusterConfig, ImmutableSet.of(group));",
          "6552:     BlueprintConfigurationProcessor updater = new BlueprintConfigurationProcessor(topology);",
          "6554:     Set<String> configTypesUpdated = Sets.newHashSet();",
          "6555:     updater.setStackToolsAndFeatures(clusterConfig, configTypesUpdated);",
          "6556:     assertEquals(\"cluster-env should NOT have been updated\", ImmutableSet.of(), configTypesUpdated);",
          "6557:   }",
          "6560:   @Test",
          "6561:   public void testSetStackToolsAndFeatures_ClusterEnvChanged() throws Exception {",
          "6562:     defaultClusterEnvProperties.putAll(defaultStackProps());",
          "6563:     Map<String, String> blueprintClusterEnv = defaultStackProps();",
          "6565:     blueprintClusterEnv.put(CLUSTER_ENV_STACK_ROOT_PROPERTY, \"/opt/\" + STACK_NAME);",
          "6567:     Map<String, Map<String, String>> blueprintProps = Maps.newHashMap(ImmutableMap.of(",
          "6568:       \"cluster-env\", blueprintClusterEnv",
          "6569:     ));",
          "6570:     Configuration clusterConfig = new Configuration(blueprintProps, emptyMap());",
          "6572:     TestHostGroup group = new TestHostGroup(\"groups1\", Sets.newHashSet(\"NAMENODE\"), ImmutableSet.of(\"host1\"));",
          "6573:     ClusterTopology topology = createClusterTopology(bp, clusterConfig, ImmutableSet.of(group));",
          "6575:     BlueprintConfigurationProcessor updater = new BlueprintConfigurationProcessor(topology);",
          "6577:     Set<String> configTypesUpdated = Sets.newHashSet();",
          "6578:     updater.setStackToolsAndFeatures(clusterConfig, configTypesUpdated);",
          "6579:     assertEquals(\"cluster-env should have been updated\", ImmutableSet.of(\"cluster-env\"), configTypesUpdated);",
          "6580:   }",
          "6582:   @Test",
          "6583:   public void testSetStackToolsAndFeatures_ClusterEnvChanged_TrimmedValuesEqual() throws Exception {",
          "6584:     defaultClusterEnvProperties.putAll(defaultStackProps());",
          "6585:     Map<String, String> blueprintClusterEnv = defaultStackProps();",
          "6587:     blueprintClusterEnv.put(",
          "6588:       CLUSTER_ENV_STACK_ROOT_PROPERTY,",
          "6589:       blueprintClusterEnv.get(CLUSTER_ENV_STACK_ROOT_PROPERTY) + \"       \\n\");",
          "6591:     Map<String, Map<String, String>> blueprintProps = Maps.newHashMap(ImmutableMap.of(",
          "6592:       \"cluster-env\", blueprintClusterEnv",
          "6593:     ));",
          "6594:     Configuration clusterConfig = new Configuration(blueprintProps, emptyMap());",
          "6596:     TestHostGroup group = new TestHostGroup(\"groups1\", Sets.newHashSet(\"NAMENODE\"), ImmutableSet.of(\"host1\"));",
          "6597:     ClusterTopology topology = createClusterTopology(bp, clusterConfig, ImmutableSet.of(group));",
          "6599:     BlueprintConfigurationProcessor updater = new BlueprintConfigurationProcessor(topology);",
          "6601:     Set<String> configTypesUpdated = Sets.newHashSet();",
          "6602:     updater.setStackToolsAndFeatures(clusterConfig, configTypesUpdated);",
          "6603:     assertEquals(\"cluster-env should NOT have been updated\", ImmutableSet.of(), configTypesUpdated);",
          "6604:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c69aa741611bfb5bd23bbf4391f6ad75932750a7",
      "candidate_info": {
        "commit_hash": "c69aa741611bfb5bd23bbf4391f6ad75932750a7",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/c69aa741611bfb5bd23bbf4391f6ad75932750a7",
        "files": [
          "ambari-web/app/controllers/main/admin/highAvailability/resourceManager/step3_controller.js",
          "ambari-web/app/data/configs/wizards/rm_ha_properties.js",
          "ambari-web/app/utils/configs/move_rm_config_initializer.js",
          "ambari-web/app/utils/configs/rm_ha_config_initializer.js"
        ],
        "message": "[AMBARI-24791] Node Managers fail to start after RM is moved to a different host as 'resource-tracker.address' config is not updated.",
        "before_after_code_files": [
          "ambari-web/app/controllers/main/admin/highAvailability/resourceManager/step3_controller.js||ambari-web/app/controllers/main/admin/highAvailability/resourceManager/step3_controller.js",
          "ambari-web/app/data/configs/wizards/rm_ha_properties.js||ambari-web/app/data/configs/wizards/rm_ha_properties.js",
          "ambari-web/app/utils/configs/move_rm_config_initializer.js||ambari-web/app/utils/configs/move_rm_config_initializer.js",
          "ambari-web/app/utils/configs/rm_ha_config_initializer.js||ambari-web/app/utils/configs/rm_ha_config_initializer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/main/admin/highAvailability/resourceManager/step3_controller.js||ambari-web/app/controllers/main/admin/highAvailability/resourceManager/step3_controller.js": [
          "File: ambari-web/app/controllers/main/admin/highAvailability/resourceManager/step3_controller.js -> ambari-web/app/controllers/main/admin/highAvailability/resourceManager/step3_controller.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:     var portValue = zooCfg && Em.get(zooCfg, 'properties.clientPort');",
          "127:     var webAddressPort = yarnSite && yarnSite.properties ? yarnSite.properties['yarn.resourcemanager.webapp.address'] : '';",
          "128:     var httpsWebAddressPort = yarnSite && yarnSite.properties ? yarnSite. properties['yarn.resourcemanager.webapp.https.address'] : '';",
          "130:     ret.webAddressPort = webAddressPort && webAddressPort.contains(':') ? webAddressPort.split(':')[1] : '8088';",
          "131:     ret.httpsWebAddressPort = httpsWebAddressPort && httpsWebAddressPort.contains(':') ? httpsWebAddressPort.split(':')[1] : '8090';",
          "132:     ret.zkClientPort = portValue ? portValue : '2181';",
          "133:     return ret;",
          "134:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:     const trackerAddressPort = yarnSite && yarnSite.properties ? yarnSite.properties['yarn.resourcemanager.resource-tracker.address'] : '';",
          "133:     ret.trackerAddressPort = trackerAddressPort && trackerAddressPort.contains(':') ? trackerAddressPort.split(':')[1]: '8025';",
          "",
          "---------------"
        ],
        "ambari-web/app/data/configs/wizards/rm_ha_properties.js||ambari-web/app/data/configs/wizards/rm_ha_properties.js": [
          "File: ambari-web/app/data/configs/wizards/rm_ha_properties.js -> ambari-web/app/data/configs/wizards/rm_ha_properties.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:         \"filename\": \"yarn-site\",",
          "64:         serviceName: 'MISC'",
          "65:       },",
          "67:       {",
          "68:         \"name\": \"yarn.resourcemanager.webapp.address.rm1\",",
          "69:         \"displayName\": \"yarn.resourcemanager.webapp.address.rm1\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:       {",
          "67:         \"name\": \"yarn.resourcemanager.resource-tracker.address.rm1\",",
          "68:         \"displayName\": \"yarn.resourcemanager.resource-tracker.address.rm1\",",
          "69:         \"isReconfigurable\": false,",
          "70:         \"recommendedValue\": \"\",",
          "71:         \"isOverridable\": false,",
          "72:         \"value\": \"\",",
          "73:         \"category\": \"YARN\",",
          "74:         \"filename\": \"yarn-site\",",
          "75:         serviceName: 'MISC'",
          "76:       },",
          "77:       {",
          "78:         \"name\": \"yarn.resourcemanager.resource-tracker.address.rm2\",",
          "79:         \"displayName\": \"yarn.resourcemanager.resource-tracker.address.rm2\",",
          "80:         \"isReconfigurable\": false,",
          "81:         \"recommendedValue\": \"\",",
          "82:         \"isOverridable\": false,",
          "83:         \"value\": \"\",",
          "84:         \"category\": \"YARN\",",
          "85:         \"filename\": \"yarn-site\",",
          "86:         serviceName: 'MISC'",
          "87:       },",
          "",
          "---------------"
        ],
        "ambari-web/app/utils/configs/move_rm_config_initializer.js||ambari-web/app/utils/configs/move_rm_config_initializer.js": [
          "File: ambari-web/app/utils/configs/move_rm_config_initializer.js -> ambari-web/app/utils/configs/move_rm_config_initializer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     'yarn.resourcemanager.hostname.{{suffix}}': getRmHaDependedConfig(true),",
          "58:     'yarn.resourcemanager.webapp.address.{{suffix}}': getRmHaDependedConfig(true),",
          "59:     'yarn.resourcemanager.webapp.https.address.{{suffix}}': getRmHaDependedConfig(true),",
          "60:     'yarn.resourcemanager.ha': getRmHaHawqConfig(true),",
          "61:     'yarn.resourcemanager.scheduler.ha': getRmHaHawqConfig(true)",
          "62:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:     'yarn.resourcemanager.resource-tracker.address.{{suffix}}': getRmHaDependedConfig(true),",
          "",
          "---------------"
        ],
        "ambari-web/app/utils/configs/rm_ha_config_initializer.js||ambari-web/app/utils/configs/rm_ha_config_initializer.js": [
          "File: ambari-web/app/utils/configs/rm_ha_config_initializer.js -> ambari-web/app/utils/configs/rm_ha_config_initializer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:       'yarn.resourcemanager.hostname.rm1': this.getHostWithPortConfig('RESOURCEMANAGER', true, '', '', ''),",
          "48:       'yarn.resourcemanager.hostname.rm2': this.getHostWithPortConfig('RESOURCEMANAGER', false,'', '', ''),",
          "49:       'yarn.resourcemanager.zk-address': this.getHostsWithPortConfig('ZOOKEEPER_SERVER', '', '', ',', 'zkClientPort', true),",
          "50:       'yarn.resourcemanager.webapp.address.rm1': this.getHostWithPortConfig('RESOURCEMANAGER', true, '', '', 'webAddressPort', true),",
          "51:       'yarn.resourcemanager.webapp.address.rm2': this.getHostWithPortConfig('RESOURCEMANAGER', false, '', '', 'webAddressPort', true),",
          "52:       'yarn.resourcemanager.webapp.https.address.rm1': this.getHostWithPortConfig('RESOURCEMANAGER', true, '', '', 'httpsWebAddressPort', true),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:       'yarn.resourcemanager.resource-tracker.address.rm1': this.getHostWithPortConfig('RESOURCEMANAGER', true, '', '', 'trackerAddressPort', true),",
          "51:       'yarn.resourcemanager.resource-tracker.address.rm2': this.getHostWithPortConfig('RESOURCEMANAGER', false, '', '', 'trackerAddressPort', true),",
          "",
          "---------------"
        ]
      }
    }
  ]
}