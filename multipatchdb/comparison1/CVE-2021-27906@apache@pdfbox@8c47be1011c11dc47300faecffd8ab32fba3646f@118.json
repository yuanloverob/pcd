{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "13c22a088319df95f62f1aa7d5d69ab6d9467852",
      "candidate_info": {
        "commit_hash": "13c22a088319df95f62f1aa7d5d69ab6d9467852",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/13c22a088319df95f62f1aa7d5d69ab6d9467852",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSObjectKey.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java"
        ],
        "message": "PDFBOX-5151: deprecate fixGeneration to ensure an immutable hashcode as proposed by Roland Meub\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889404 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSObjectKey.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSObjectKey.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/cos/COSObjectKey.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSObjectKey.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/cos/COSObjectKey.java -> pdfbox/src/main/java/org/apache/pdfbox/cos/COSObjectKey.java"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1447:         {",
          "1448:             return true;",
          "1449:         }",
          "1450:         for (Entry<COSObjectKey, Long> objectEntry : xrefOffset.entrySet())",
          "1451:         {",
          "1452:             COSObjectKey objectKey = objectEntry.getKey();",
          "1453:             Long objectOffset = objectEntry.getValue();",
          "1458:             {",
          "1462:             }",
          "1463:         }",
          "1464:         return true;",
          "1465:     }",
          "",
          "[Removed Lines]",
          "1456:             if (objectOffset != null && objectOffset >= 0",
          "1457:                     && !checkObjectKey(objectKey, objectOffset))",
          "1459:                 LOG.debug(\"Stop checking xref offsets as at least one (\" + objectKey",
          "1460:                         + \") couldn't be dereferenced\");",
          "1461:                 return false;",
          "",
          "[Added Lines]",
          "1450:         Map<COSObjectKey, COSObjectKey> correctedKeys = new HashMap<COSObjectKey, COSObjectKey>();",
          "1457:             if (objectOffset != null && objectOffset >= 0)",
          "1459:                 COSObjectKey foundObjectKey = findObjectKey(objectKey, objectOffset);",
          "1460:                 if (foundObjectKey == null)",
          "1461:                 {",
          "1462:                     LOG.debug(\"Stop checking xref offsets as at least one (\" + objectKey",
          "1463:                             + \") couldn't be dereferenced\");",
          "1464:                     return false;",
          "1465:                 }",
          "1466:                 else if (foundObjectKey != objectKey)",
          "1467:                 {",
          "1469:                     correctedKeys.put(objectKey, foundObjectKey);",
          "1470:                 }",
          "1473:         for (Entry<COSObjectKey, COSObjectKey> correctedKeyEntry : correctedKeys.entrySet())",
          "1474:         {",
          "1475:             xrefOffset.put(correctedKeyEntry.getValue(),",
          "1476:                     xrefOffset.remove(correctedKeyEntry.getKey()));",
          "1477:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1490:     }",
          "1501:     {",
          "1503:         if (offset < MINIMUM_SEARCH_OFFSET)",
          "1504:         {",
          "1506:         }",
          "1508:         try",
          "1509:         {",
          "1510:             source.seek(offset);",
          "",
          "[Removed Lines]",
          "1500:     private boolean checkObjectKey(COSObjectKey objectKey, long offset) throws IOException",
          "1505:             return false;",
          "1507:         boolean objectKeyFound = false;",
          "",
          "[Added Lines]",
          "1516:     private COSObjectKey findObjectKey(COSObjectKey objectKey, long offset) throws IOException",
          "1521:             return null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1512:             if (objectKey.getNumber() == readObjectNumber())",
          "1513:             {",
          "1514:                 int genNumber = readGenerationNumber();",
          "1515:                 if (genNumber == objectKey.getGeneration())",
          "1516:                 {",
          "1520:                 }",
          "1521:                 else if (isLenient && genNumber > objectKey.getGeneration())",
          "1522:                 {",
          "1527:                 }",
          "1528:             }",
          "1529:         }",
          "1530:         catch (IOException exception)",
          "1531:         {",
          "1533:         }",
          "1536:     }",
          "",
          "[Removed Lines]",
          "1518:                     readExpectedString(OBJ_MARKER, true);",
          "1519:                     objectKeyFound = true;",
          "1524:                     readExpectedString(OBJ_MARKER, true);",
          "1525:                     objectKeyFound = true;",
          "1526:                     objectKey.fixGeneration(genNumber);",
          "1535:         return objectKeyFound;",
          "",
          "[Added Lines]",
          "1531:                 readExpectedString(OBJ_MARKER, true);",
          "1534:                     return objectKey;",
          "1538:                     return new COSObjectKey(objectKey.getNumber(), genNumber);",
          "1545:             LOG.debug(\"No valid object at given location \" + offset + \" - ignoring\", exception);",
          "1547:         return null;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c805f9ad4e93f55a200861b4e15765c018b891d1",
      "candidate_info": {
        "commit_hash": "c805f9ad4e93f55a200861b4e15765c018b891d1",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/c805f9ad4e93f55a200861b4e15765c018b891d1",
        "files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverterTest.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/ValidateXImage.java"
        ],
        "message": "PDFBOX-4847: convert non sRGB images to sRGB and enable testImageConversionRGB16BitICC, by Emmeran Seehuber\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881063 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverterTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverterTest.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/ValidateXImage.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/ValidateXImage.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverterTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverterTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverterTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.pdmodel.graphics.image;",
          "19: import java.awt.Color;",
          "20: import java.awt.color.ICC_Profile;",
          "21: import java.awt.image.BufferedImage;",
          "22: import java.io.ByteArrayInputStream;",
          "23: import java.io.File;",
          "24: import java.io.IOException;",
          "25: import java.util.ArrayList;",
          "26: import java.util.Arrays;",
          "27: import java.util.Collections;",
          "28: import javax.imageio.ImageIO;",
          "30: import org.apache.pdfbox.cos.COSName;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.awt.color.ICC_ColorSpace;",
          "23: import java.awt.image.ColorModel;",
          "24: import java.awt.image.ComponentColorModel;",
          "25: import java.awt.image.WritableRaster;",
          "32: import java.util.Hashtable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: import static org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent;",
          "38: import static org.junit.Assert.assertEquals;",
          "39: import static org.junit.Assert.assertFalse;",
          "40: import static org.junit.Assert.assertNull;",
          "41: import static org.junit.Assert.assertTrue;",
          "42: import org.junit.Before;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import static org.junit.Assert.assertNotNull;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:         checkImageConvert(\"png_rgb_gamma.png\");",
          "88:     }",
          "91:     public void testImageConversionRGB16BitICC() throws IOException",
          "92:     {",
          "93:         checkImageConvert(\"png_rgb_romm_16bit.png\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     @Test",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "165:         PDDocument doc = new PDDocument();",
          "166:         byte[] imageBytes = IOUtils.toByteArray(PNGConverterTest.class.getResourceAsStream(name));",
          "167:         PDImageXObject pdImageXObject = PNGConverter.convertPNGImage(doc, imageBytes);",
          "168:         if (pdImageXObject.getColorSpace() instanceof PDICCBased)",
          "169:         {",
          "171:             PDICCBased iccColorSpace = (PDICCBased) pdImageXObject.getColorSpace();",
          "173:         }",
          "174:         PDPage page = new PDPage();",
          "175:         doc.addPage(page);",
          "",
          "[Removed Lines]",
          "172:             ICC_Profile.getInstance(iccColorSpace.getPDStream().toByteArray());",
          "",
          "[Added Lines]",
          "174:         assertNotNull(pdImageXObject);",
          "176:         ICC_Profile imageProfile = null;",
          "181:             imageProfile = ICC_Profile.getInstance(iccColorSpace.getPDStream().toByteArray());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "183:         contentStream.close();",
          "184:         doc.save(new File(parentDir, name + \".pdf\"));",
          "185:         BufferedImage image = pdImageXObject.getImage();",
          "187:         doc.close();",
          "188:     }",
          "190:     @Test",
          "191:     public void testCheckConverterState()",
          "192:     {",
          "",
          "[Removed Lines]",
          "186:         checkIdent(ImageIO.read(new ByteArrayInputStream(imageBytes)), image);",
          "",
          "[Added Lines]",
          "196:         BufferedImage expectedImage = ImageIO.read(new ByteArrayInputStream(imageBytes));",
          "197:         if (imageProfile != null && expectedImage.getColorModel().getColorSpace().isCS_sRGB())",
          "198:         {",
          "201:             expectedImage = getImageWithProfileData(expectedImage, imageProfile);",
          "202:         }",
          "204:         checkIdent(expectedImage, image);",
          "209:     public static BufferedImage getImageWithProfileData(BufferedImage sourceImage,",
          "210:              ICC_Profile realProfile)",
          "211:     {",
          "212:         Hashtable<String, Object> properties = new Hashtable<String, Object>();",
          "213:         String[] propertyNames = sourceImage.getPropertyNames();",
          "214:         if (propertyNames != null)",
          "215:         {",
          "216:             for (String propertyName : propertyNames)",
          "217:             {",
          "218:                 properties.put(propertyName, sourceImage.getProperty(propertyName));",
          "219:             }",
          "220:         }",
          "221:         ComponentColorModel oldColorModel = (ComponentColorModel) sourceImage.getColorModel();",
          "222:         boolean hasAlpha = oldColorModel.hasAlpha();",
          "223:         int transparency = oldColorModel.getTransparency();",
          "224:         boolean alphaPremultiplied = oldColorModel.isAlphaPremultiplied();",
          "225:         WritableRaster raster = sourceImage.getRaster();",
          "226:         int dataType = raster.getDataBuffer().getDataType();",
          "227:         int[] componentSize = oldColorModel.getComponentSize();",
          "228:         final ColorModel colorModel = new ComponentColorModel(new ICC_ColorSpace(realProfile),",
          "229:                 componentSize, hasAlpha, alphaPremultiplied, transparency, dataType);",
          "230:         return new BufferedImage(colorModel, raster, sourceImage.isAlphaPremultiplied(),",
          "231:                 properties);",
          "232:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/ValidateXImage.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/ValidateXImage.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/ValidateXImage.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/ValidateXImage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package org.apache.pdfbox.pdmodel.graphics.image;",
          "18: import java.awt.image.BufferedImage;",
          "19: import java.io.File;",
          "20: import java.io.IOException;",
          "21: import java.io.OutputStream;",
          "22: import java.util.HashSet;",
          "23: import java.util.Set;",
          "24: import javax.imageio.ImageIO;",
          "25: import javax.imageio.ImageWriter;",
          "26: import javax.imageio.spi.ImageWriterSpi;",
          "27: import org.apache.pdfbox.cos.COSName;",
          "28: import org.apache.pdfbox.cos.COSStream;",
          "29: import org.apache.pdfbox.pdmodel.PDDocument;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: import java.awt.Point;",
          "19: import java.awt.color.ColorSpace;",
          "21: import java.awt.image.ColorConvertOp;",
          "22: import java.awt.image.DataBuffer;",
          "23: import java.awt.image.DirectColorModel;",
          "24: import java.awt.image.Raster;",
          "25: import java.awt.image.WritableRaster;",
          "30: import java.util.Hashtable;",
          "35: import static junit.framework.TestCase.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: import org.apache.pdfbox.rendering.PDFRenderer;",
          "33: import org.apache.pdfbox.pdmodel.PDPageContentStream.AppendMode;",
          "36: import static junit.framework.TestCase.assertNotNull;",
          "37: import static junit.framework.TestCase.assertTrue;",
          "",
          "[Removed Lines]",
          "35: import static junit.framework.TestCase.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:     {",
          "156:         String errMsg = \"\";",
          "158:         int w = expectedImage.getWidth();",
          "159:         int h = expectedImage.getHeight();",
          "160:         assertEquals(w, actualImage.getWidth());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:         expectedImage = convertToSRGB(expectedImage);",
          "167:         actualImage = convertToSRGB(actualImage);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "171:             }",
          "172:         }",
          "173:     }",
          "177: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:     public static BufferedImage convertToSRGB(BufferedImage image)",
          "187:     {",
          "189:         if (image.getColorModel().getColorSpace().isCS_sRGB())",
          "190:         {",
          "191:             return image;",
          "192:         }",
          "194:         if (image.getRaster().getDataBuffer().getDataType() == DataBuffer.TYPE_USHORT)",
          "195:         {",
          "196:             final int width = image.getWidth();",
          "197:             final boolean hasAlpha = image.getColorModel().hasAlpha();",
          "199:             final DirectColorModel colorModel = new DirectColorModel(",
          "200:                     image.getColorModel().getColorSpace(), 32, 0xFF, 0xFF00, 0xFF0000, 0xFF000000,",
          "201:                     false, DataBuffer.TYPE_INT);",
          "202:             WritableRaster targetRaster = Raster",
          "203:                     .createPackedRaster(DataBuffer.TYPE_INT, image.getWidth(), image.getHeight(),",
          "204:                             colorModel.getMasks(), new Point(0, 0));",
          "206:             BufferedImage image8Bit = new BufferedImage(colorModel, targetRaster, false,",
          "207:                     new Hashtable<String, Object>());",
          "209:             WritableRaster sourceRaster = image.getRaster();",
          "211:             final int numShortPixelElements = hasAlpha ? 3 : 4;",
          "213:             short[] pixelShort = new short[numShortPixelElements * width];",
          "215:             int[] pixelInt = new int[width];",
          "216:             for (int y = 0; y < image.getHeight(); y++)",
          "217:             {",
          "218:                 sourceRaster.getDataElements(0, y, width, 1, pixelShort);",
          "219:                 int ptrShort = 0;",
          "220:                 for (int x = 0; x < width; x++)",
          "221:                 {",
          "222:                     int r = pixelShort[ptrShort++] & 0xFFFF;",
          "223:                     int g = pixelShort[ptrShort++] & 0xFFFF;",
          "224:                     int b = pixelShort[ptrShort++] & 0xFFFF;",
          "225:                     if (hasAlpha)",
          "226:                         ptrShort++;",
          "230:                     int r8bit = convert16To8Bit(r);",
          "231:                     int g8bit = convert16To8Bit(g);",
          "232:                     int b8bit = convert16To8Bit(b);",
          "233:                     int v = r8bit | (g8bit << 8) | (b8bit << 16) | 0xFF000000;",
          "234:                     pixelInt[x] = v;",
          "235:                 }",
          "236:                 targetRaster.setDataElements(0, y, width, 1, pixelInt);",
          "238:             }",
          "239:             image = image8Bit;",
          "241:         }",
          "243:         BufferedImage destination = new BufferedImage(image.getWidth(), image.getHeight(),",
          "244:                 BufferedImage.TYPE_INT_RGB);",
          "245:         ColorConvertOp op = new ColorConvertOp(ColorSpace.getInstance(ColorSpace.CS_sRGB), null);",
          "246:         return op.filter(image, destination);",
          "247:     }",
          "249:     private static int convert16To8Bit(int v)",
          "250:     {",
          "251:         float output = (float) v / (float) 0xFFFF;",
          "252:         return Math.round(output * 0xFF);",
          "253:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e6f5fb1730e1c7fc88414e8bf2a68f5b876ab6c",
      "candidate_info": {
        "commit_hash": "4e6f5fb1730e1c7fc88414e8bf2a68f5b876ab6c",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/4e6f5fb1730e1c7fc88414e8bf2a68f5b876ab6c",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CRLVerifier.java"
        ],
        "message": "PDFBOX-3017: remove diamond syntax\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882769 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CRLVerifier.java||examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CRLVerifier.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CRLVerifier.java||examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CRLVerifier.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CRLVerifier.java -> examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CRLVerifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:             LOG.warn(\"CRL distribution points for certificate subject \" +",
          "318:                     cert.getSubjectX500Principal().getName() +",
          "319:                     \" should be an octet string, but is \" + derObjCrlDP);",
          "321:         }",
          "322:         ASN1OctetString dosCrlDP = (ASN1OctetString) derObjCrlDP;",
          "323:         byte[] crldpExtOctets = dosCrlDP.getOctets();",
          "",
          "[Removed Lines]",
          "320:             return new ArrayList<>();",
          "",
          "[Added Lines]",
          "320:             return new ArrayList<String>();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c153a3f1e02247070c0d99c851df1137e8207168",
      "candidate_info": {
        "commit_hash": "c153a3f1e02247070c0d99c851df1137e8207168",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/c153a3f1e02247070c0d99c851df1137e8207168",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CertificateVerifier.java"
        ],
        "message": "PDFBOX-3017: need to check all certs for remote issuer certs, not just the first one\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882925 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CertificateVerifier.java||examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CertificateVerifier.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CertificateVerifier.java||examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CertificateVerifier.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CertificateVerifier.java -> examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CertificateVerifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:             Set<X509Certificate> certsToTrySet = new HashSet<X509Certificate>();",
          "123:             certsToTrySet.add(cert);",
          "124:             int downloadSize = 0;",
          "125:             while (!certsToTrySet.isEmpty())",
          "126:             {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:             certsToTrySet.addAll(additionalCerts);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc9c05a884ec9fa1b1bc4e0013f0945e5d174bd2",
      "candidate_info": {
        "commit_hash": "cc9c05a884ec9fa1b1bc4e0013f0945e5d174bd2",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/cc9c05a884ec9fa1b1bc4e0013f0945e5d174bd2",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java"
        ],
        "message": "PDFBOX-5056: remove JVM bug related workaround that is no longer needed, as suggested by Andreas Lehmk\u00fchler\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884898 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     public static final PDDeviceRGB INSTANCE = new PDDeviceRGB();",
          "38:     private final PDColor initialColor = new PDColor(new float[] { 0, 0, 0 }, this);",
          "41:     private PDDeviceRGB()",
          "42:     {",
          "43:     }",
          "74:     @Override",
          "75:     public String getName()",
          "",
          "[Removed Lines]",
          "39:     private volatile boolean initDone = false;",
          "48:     private void init()",
          "49:     {",
          "51:         if (initDone)",
          "52:         {",
          "53:             return;",
          "54:         }",
          "56:         synchronized (this)",
          "57:         {",
          "59:             if (initDone)",
          "60:             {",
          "61:                 return;",
          "62:             }",
          "67:             ColorSpace.getInstance(ColorSpace.CS_sRGB).toRGB(new float[] { 0, 0, 0, 0 });",
          "70:             initDone = true;",
          "71:         }",
          "72:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:     @Override",
          "108:     public BufferedImage toRGBImage(WritableRaster raster) throws IOException",
          "109:     {",
          "",
          "[Removed Lines]",
          "110:         init();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}