{
  "cve_id": "CVE-2022-39386",
  "cve_desc": "@fastify/websocket provides WebSocket support for Fastify. Any application using @fastify/websocket could crash if a specific, malformed packet is sent. All versions of fastify-websocket are also impacted. That module is deprecated, so it will not be patched. This has been patched in version 7.1.1 (fastify v4) and version 5.0.1 (fastify v3). There are currently no known workarounds. However, it should be possible to attach the error handler manually. The recommended path is upgrading to the patched versions.",
  "repo": "fastify/fastify-websocket",
  "patch_hash": "7e8c41a51c101c3d5ce88caee4f71d9c29eb2863",
  "patch_info": {
    "commit_hash": "7e8c41a51c101c3d5ce88caee4f71d9c29eb2863",
    "repo": "fastify/fastify-websocket",
    "commit_url": "https://github.com/fastify/fastify-websocket/commit/7e8c41a51c101c3d5ce88caee4f71d9c29eb2863",
    "files": [
      "index.js",
      "test/base.js"
    ],
    "message": "fix/ws-error-handler - Handle WebSocket errors to avoid Node.js crashes (#228)",
    "before_after_code_files": [
      "index.js||index.js",
      "test/base.js||test/base.js"
    ]
  },
  "patch_diff": {
    "index.js||index.js": [
      "File: index.js -> index.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "61:       const connection = WebSocket.createWebSocketStream(socket, opts.connectionOptions)",
      "62:       connection.socket = socket",
      "64:       connection.socket.on('newListener', event => {",
      "65:         if (event === 'message') {",
      "66:           connection.resume()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "64:       connection.on('error', (error) => {",
      "65:         fastify.log.error(error)",
      "66:       })",
      "",
      "---------------"
    ],
    "test/base.js||test/base.js": [
      "File: test/base.js -> test/base.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: const Fastify = require('fastify')",
      "8: const fastifyWebsocket = require('..')",
      "9: const WebSocket = require('ws')",
      "11: test('Should expose a websocket', (t) => {",
      "12:   t.plan(3)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: const { once } = require('events')",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "594:     t.error(err)",
      "595:   })",
      "596: })",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "599: test('Should Handle WebSocket errors to avoid Node.js crashes', async t => {",
      "600:   t.plan(1)",
      "602:   const fastify = Fastify()",
      "603:   await fastify.register(fastifyWebsocket)",
      "605:   fastify.get('/', { websocket: true }, ({ socket }) => {",
      "606:     socket.on('error', err => {",
      "607:       t.equal(err.code, 'WS_ERR_UNEXPECTED_RSV_2_3')",
      "608:     })",
      "609:   })",
      "611:   await fastify.listen({ port: 0 })",
      "613:   const client = new WebSocket('ws://localhost:' + fastify.server.address().port)",
      "614:   await once(client, 'open')",
      "616:   client._socket.write(Buffer.from([0xa2, 0x00]))",
      "618:   await fastify.close()",
      "619: })",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c24adeb3efd57a18b2f287c35d029e88b5a47194",
      "candidate_info": {
        "commit_hash": "c24adeb3efd57a18b2f287c35d029e88b5a47194",
        "repo": "fastify/fastify-websocket",
        "commit_url": "https://github.com/fastify/fastify-websocket/commit/c24adeb3efd57a18b2f287c35d029e88b5a47194",
        "files": [
          "index.js",
          "test/base.js"
        ],
        "message": "fix/ws-error-handler - Handle WebSocket errors to avoid Node.js crashes (#228)",
        "before_after_code_files": [
          "index.js||index.js",
          "test/base.js||test/base.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "index.js||index.js",
            "test/base.js||test/base.js"
          ],
          "candidate": [
            "index.js||index.js",
            "test/base.js||test/base.js"
          ]
        }
      },
      "candidate_diff": {
        "index.js||index.js": [
          "File: index.js -> index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:       const connection = WebSocket.createWebSocketStream(socket, opts.connectionOptions)",
          "62:       connection.socket = socket",
          "64:       connection.socket.on('newListener', event => {",
          "65:         if (event === 'message') {",
          "66:           connection.resume()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:       connection.on('error', (error) => {",
          "65:         fastify.log.error(error)",
          "66:       })",
          "",
          "---------------"
        ],
        "test/base.js||test/base.js": [
          "File: test/base.js -> test/base.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "564:     t.error(err)",
          "565:   })",
          "566: })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "568: test('Should Handle WebSocket errors to avoid Node.js crashes', async t => {",
          "569:   t.plan(1)",
          "571:   const fastify = Fastify()",
          "572:   await fastify.register(fastifyWebsocket)",
          "574:   fastify.get('/', { websocket: true }, ({ socket }) => {",
          "575:     socket.on('error', err => {",
          "576:       t.equal(err.code, 'WS_ERR_UNEXPECTED_RSV_2_3')",
          "577:     })",
          "578:   })",
          "580:   await fastify.listen({ port: 0 })",
          "582:   const client = new WebSocket('ws://localhost:' + fastify.server.address().port)",
          "583:   await once(client, 'open')",
          "585:   client._socket.write(Buffer.from([0xa2, 0x00]))",
          "587:   await fastify.close()",
          "588: })",
          "",
          "---------------"
        ]
      }
    }
  ]
}