{
  "cve_id": "CVE-2020-26149",
  "cve_desc": "NATS nats.js before 2.0.0-209, nats.ws before 1.0.0-111, and nats.deno before 1.0.0-9 allow credential disclosure from a client to a server.",
  "repo": "nats-io/nats.ws",
  "patch_hash": "0a37ac2a411ff63f0707cda69a268c5fc4079eb7",
  "patch_info": {
    "commit_hash": "0a37ac2a411ff63f0707cda69a268c5fc4079eb7",
    "repo": "nats-io/nats.ws",
    "commit_url": "https://github.com/nats-io/nats.ws/commit/0a37ac2a411ff63f0707cda69a268c5fc4079eb7",
    "files": [
      ".github/workflows/natsws.yml",
      "package.json",
      "src/nats-base-client.ts",
      "src/ws_transport.ts"
    ],
    "message": "[update] [security] updated nats-base-client to v1.0.0-9 (#47)\n\n* [update] [security] updated nats-base-client to v1.0.0-9\n\n* bumped package version",
    "before_after_code_files": [
      "src/nats-base-client.ts||src/nats-base-client.ts",
      "src/ws_transport.ts||src/ws_transport.ts"
    ]
  },
  "patch_diff": {
    "src/nats-base-client.ts||src/nats-base-client.ts": [
      "File: src/nats-base-client.ts -> src/nats-base-client.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-8/nats-base-client/internal_mod.ts\";",
      "",
      "[Added Lines]",
      "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-9/nats-base-client/internal_mod.ts\";",
      "",
      "---------------"
    ],
    "src/ws_transport.ts||src/ws_transport.ts": [
      "File: src/ws_transport.ts -> src/ws_transport.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "26:   delay,",
      "27: } from \"./nats-base-client.ts\";",
      "30: const LANG = \"nats.ws\";",
      "32: export class WsTransport implements Transport {",
      "",
      "[Removed Lines]",
      "29: const VERSION = \"1.0.0-110\";",
      "",
      "[Added Lines]",
      "29: const VERSION = \"1.0.0-111\";",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b4a9e80cf7c08de00457ef44ae8167f45c8a46ef",
      "candidate_info": {
        "commit_hash": "b4a9e80cf7c08de00457ef44ae8167f45c8a46ef",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/b4a9e80cf7c08de00457ef44ae8167f45c8a46ef",
        "files": [
          ".github/workflows/natsws.yml",
          "README.md",
          "examples/nontls.conf",
          "package-lock.json",
          "src/connect.ts",
          "src/mod.ts",
          "src/nats-base-client.ts",
          "src/ws_transport.ts",
          "test/auth.js",
          "test/basics.js",
          "test/index.d.ts"
        ],
        "message": "ngs ci test (#71)\n\n* simple ngs test for ci\n* ngs connection test\n* added test connecting to ngs for CI\n* fix the name of the env secret",
        "before_after_code_files": [
          "examples/nontls.conf||examples/nontls.conf",
          "src/connect.ts||src/connect.ts",
          "src/mod.ts||src/mod.ts",
          "src/nats-base-client.ts||src/nats-base-client.ts",
          "src/ws_transport.ts||src/ws_transport.ts",
          "test/auth.js||test/auth.js",
          "test/basics.js||test/basics.js",
          "test/index.d.ts||test/index.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "examples/nontls.conf||examples/nontls.conf": [
          "File: examples/nontls.conf -> examples/nontls.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: websocket: {",
          "3:   port: 9222",
          "4:   no_tls: true",
          "5: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5:   compression: true",
          "",
          "---------------"
        ],
        "src/connect.ts||src/connect.ts": [
          "File: src/connect.ts -> src/connect.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   setTransportFactory,",
          "20:   setUrlParseFn,",
          "21:   Transport,",
          "24: import { WsTransport } from \"./ws_transport.ts\";",
          "",
          "[Removed Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-13/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/main/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/mod.ts||src/mod.ts": [
          "File: src/mod.ts -> src/mod.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: export { connect } from \"./connect.ts\";",
          "",
          "[Removed Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-13/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/main/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/nats-base-client.ts||src/nats-base-client.ts": [
          "File: src/nats-base-client.ts -> src/nats-base-client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "16: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-13/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "16: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/main/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:   Server,",
          "19:   ServerInfo,",
          "20:   Transport,",
          "22: import {",
          "23:   checkOptions,",
          "24:   DataBuffer,",
          "",
          "[Removed Lines]",
          "21: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-13/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "21: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/main/nats-base-client/internal_mod.ts\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:   INFO,",
          "30:   NatsError,",
          "31:   render,",
          "35: const LANG = \"nats.ws\";",
          "37: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "32: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-13/nats-base-client/internal_mod.ts\";",
          "34: const VERSION = \"1.0.0-117\";",
          "",
          "[Added Lines]",
          "32: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/main/nats-base-client/internal_mod.ts\";",
          "34: const VERSION = \"1.0.0-118\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:     this.socket.onerror = (e: ErrorEvent | Event): void => {",
          "134:       const evt = e as ErrorEvent;",
          "136:       if (!connected) {",
          "137:         connLock.reject(err);",
          "138:       } else {",
          "",
          "[Removed Lines]",
          "135:       const err = new NatsError(evt.message, ErrorCode.UNKNOWN);",
          "",
          "[Added Lines]",
          "135:       const err = new NatsError(",
          "136:         evt.message,",
          "137:         ErrorCode.UNKNOWN,",
          "138:         new Error(evt.error),",
          "139:       );",
          "",
          "---------------"
        ],
        "test/auth.js||test/auth.js": [
          "File: test/auth.js -> test/auth.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:   jwtAuthenticator,",
          "21:   nkeyAuthenticator,",
          "22:   credsAuthenticator,",
          "23: } = require(",
          "24:   \"./index\",",
          "25: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:   StringCodec,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "315:   });",
          "316:   await ns.stop();",
          "317: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "320: test(\"auth - ngs\", async (t) => {",
          "321:   t.plan(1);",
          "322:   const token = process.env.WS_NGS_CI_USER || \"\";",
          "323:   if (token.length === 0) {",
          "324:     t.log(\"test skipped - no WS_NGS_CI_USER defined in the environment\");",
          "325:     t.pass();",
          "326:     return;",
          "327:   } else {",
          "328:     t.log(\"token.len\", token.length);",
          "329:   }",
          "330:   const sc = StringCodec();",
          "331:   const authenticator = jwtAuthenticator(token);",
          "332:   const nc1 = await connect({",
          "333:     servers: \"wss://connect.ngs.global\",",
          "334:     authenticator: authenticator,",
          "335:   });",
          "336:   const nc2 = await connect({",
          "337:     servers: \"wss://connect.ngs.global\",",
          "338:     authenticator: authenticator,",
          "339:   });",
          "340:   nc1.subscribe(\"hello.ngs\", {",
          "341:     callback: (err, msg) => {",
          "342:       msg.respond(sc.encode(\"hi!\"));",
          "343:     },",
          "344:     max: 1,",
          "345:   });",
          "347:   await nc1.flush();",
          "348:   const m = await nc2.request(\"hello.ngs\");",
          "349:   t.is(sc.decode(m.data), \"hi!\");",
          "350:   await nc1.close();",
          "351:   await nc2.close();",
          "352: });",
          "",
          "---------------"
        ],
        "test/basics.js||test/basics.js": [
          "File: test/basics.js -> test/basics.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "681:   try {",
          "682:     await connect({ servers: `wss://127.0.0.1:${ns.websocket}`, tls: {} });",
          "683:     t.fail(`should have failed with ${ErrorCode.INVALID_OPTION}`);",
          "686:   }",
          "687:   await ns.stop();",
          "688:   t.pass();",
          "",
          "[Removed Lines]",
          "684:   } catch(err) {",
          "685:     t.is(err.code, ErrorCode.INVALID_OPTION)",
          "",
          "[Added Lines]",
          "683:   } catch (err) {",
          "684:     t.is(err.code, ErrorCode.INVALID_OPTION);",
          "",
          "---------------"
        ],
        "test/index.d.ts||test/index.d.ts": [
          "File: test/index.d.ts -> test/index.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: export interface NatsConnection {",
          "18:   info?: ServerInfo;",
          "",
          "[Removed Lines]",
          "15: export declare function connect(opts?: ConnectionOptions): Promise<NatsConnection>;",
          "",
          "[Added Lines]",
          "15: export declare function connect(",
          "16:   opts?: ConnectionOptions,",
          "17: ): Promise<NatsConnection>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:   close(): Promise<void>;",
          "21:   publish(subject: string, data?: Uint8Array, options?: PublishOptions): void;",
          "22:   subscribe(subject: string, opts?: SubscriptionOptions): Subscription;",
          "24:   flush(): Promise<void>;",
          "25:   drain(): Promise<void>;",
          "26:   isClosed(): boolean;",
          "",
          "[Removed Lines]",
          "23:   request(subject: string, data?: Uint8Array, opts?: RequestOptions): Promise<Msg>;",
          "",
          "[Added Lines]",
          "25:   request(",
          "26:     subject: string,",
          "27:     data?: Uint8Array,",
          "28:     opts?: RequestOptions,",
          "29:   ): Promise<Msg>;",
          "",
          "---------------"
        ]
      }
    }
  ]
}