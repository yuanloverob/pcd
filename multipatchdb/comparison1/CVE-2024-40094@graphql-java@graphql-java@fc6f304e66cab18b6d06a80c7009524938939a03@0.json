{
  "cve_id": "CVE-2024-40094",
  "cve_desc": "GraphQL Java (aka graphql-java) before 21.5 does not properly consider ExecutableNormalizedFields (ENFs) as part of preventing denial of service via introspection queries. 20.9 and 19.11 are also fixed versions.",
  "repo": "graphql-java/graphql-java",
  "patch_hash": "fc6f304e66cab18b6d06a80c7009524938939a03",
  "patch_info": {
    "commit_hash": "fc6f304e66cab18b6d06a80c7009524938939a03",
    "repo": "graphql-java/graphql-java",
    "commit_url": "https://github.com/graphql-java/graphql-java/commit/fc6f304e66cab18b6d06a80c7009524938939a03",
    "files": [
      "src/main/java/graphql/execution/ExecutionContext.java",
      "src/main/java/graphql/introspection/GoodFaithIntrospection.java",
      "src/main/java/graphql/introspection/Introspection.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
      "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
      "src/test/groovy/graphql/UnionTest.groovy",
      "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
      "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
      "src/test/java/benchmark/BenchmarkUtils.java",
      "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
    ],
    "message": "Cherry pick ENF introspection and make ExecutableNormalizedOperationFactory closer to structure on master",
    "before_after_code_files": [
      "src/main/java/graphql/execution/ExecutionContext.java||src/main/java/graphql/execution/ExecutionContext.java",
      "src/main/java/graphql/introspection/GoodFaithIntrospection.java||src/main/java/graphql/introspection/GoodFaithIntrospection.java",
      "src/main/java/graphql/introspection/Introspection.java||src/main/java/graphql/introspection/Introspection.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
      "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
      "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy",
      "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
      "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
      "src/test/java/benchmark/BenchmarkUtils.java||src/test/java/benchmark/BenchmarkUtils.java",
      "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
    ]
  },
  "patch_diff": {
    "src/main/java/graphql/execution/ExecutionContext.java||src/main/java/graphql/execution/ExecutionContext.java": [
      "File: src/main/java/graphql/execution/ExecutionContext.java -> src/main/java/graphql/execution/ExecutionContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "80:         this.errors.set(builder.errors);",
      "81:         this.localContext = builder.localContext;",
      "82:         this.executionInput = builder.executionInput;",
      "84:     }",
      "",
      "[Removed Lines]",
      "83:         queryTree = FpKit.interThreadMemoize(() -> ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, operationDefinition, fragmentsByName, coercedVariables));",
      "",
      "[Added Lines]",
      "83:         this.queryTree = FpKit.interThreadMemoize(() -> ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, operationDefinition, fragmentsByName, coercedVariables));",
      "",
      "---------------"
    ],
    "src/main/java/graphql/introspection/GoodFaithIntrospection.java||src/main/java/graphql/introspection/GoodFaithIntrospection.java": [
      "File: src/main/java/graphql/introspection/GoodFaithIntrospection.java -> src/main/java/graphql/introspection/GoodFaithIntrospection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: import java.util.Optional;",
      "19: import java.util.concurrent.atomic.AtomicBoolean;",
      "21: import static graphql.schema.FieldCoordinates.coordinates;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: import static graphql.normalized.ExecutableNormalizedOperationFactory.Options;",
      "22: import static graphql.normalized.ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "44:     public static final String GOOD_FAITH_INTROSPECTION_DISABLED = \"GOOD_FAITH_INTROSPECTION_DISABLED\";",
      "46:     private static final AtomicBoolean ENABLED_STATE = new AtomicBoolean(true);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52:     public static final int GOOD_FAITH_MAX_FIELDS_COUNT = 500;",
      "56:     public static final int GOOD_FAITH_MAX_DEPTH_COUNT = 20;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "76:     public static Optional<ExecutionResult> checkIntrospection(ExecutionContext executionContext) {",
      "77:         if (isIntrospectionEnabled(executionContext.getGraphQLContext())) {",
      "79:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToENFs = operation.getCoordinatesToNormalizedFields();",
      "80:             for (Map.Entry<FieldCoordinates, Integer> entry : ALLOWED_FIELD_INSTANCES.entrySet()) {",
      "81:                 FieldCoordinates coordinates = entry.getKey();",
      "",
      "[Removed Lines]",
      "78:             ExecutableNormalizedOperation operation = executionContext.getNormalizedQueryTree().get();",
      "",
      "[Added Lines]",
      "88:             ExecutableNormalizedOperation operation = mkOperation(executionContext);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "90:         return Optional.empty();",
      "91:     }",
      "93:     private static boolean isIntrospectionEnabled(GraphQLContext graphQlContext) {",
      "94:         if (!isEnabledJvmWide()) {",
      "95:             return false;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "111:     private static ExecutableNormalizedOperation mkOperation(ExecutionContext executionContext) {",
      "112:         Options options = Options.defaultOptions()",
      "113:                 .maxFieldsCount(GOOD_FAITH_MAX_FIELDS_COUNT)",
      "114:                 .maxChildrenDepth(GOOD_FAITH_MAX_DEPTH_COUNT)",
      "115:                 .locale(executionContext.getLocale())",
      "116:                 .graphQLContext(executionContext.getGraphQLContext());",
      "118:         return createExecutableNormalizedOperation(executionContext.getGraphQLSchema(),",
      "119:                 executionContext.getOperationDefinition(),",
      "120:                 executionContext.getFragmentsByName(),",
      "121:                 executionContext.getCoercedVariables(),",
      "122:                 options);",
      "124:     }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/introspection/Introspection.java||src/main/java/graphql/introspection/Introspection.java": [
      "File: src/main/java/graphql/introspection/Introspection.java -> src/main/java/graphql/introspection/Introspection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "116:     public static Optional<ExecutionResult> isIntrospectionSensible(MergedSelectionSet mergedSelectionSet, ExecutionContext executionContext) {",
      "117:         GraphQLContext graphQLContext = executionContext.getGraphQLContext();",
      "128:             }",
      "129:         }",
      "132:             return GoodFaithIntrospection.checkIntrospection(executionContext);",
      "133:         }",
      "134:         return Optional.empty();",
      "",
      "[Removed Lines]",
      "118:         MergedField schemaField = mergedSelectionSet.getSubField(SchemaMetaFieldDef.getName());",
      "119:         if (schemaField != null) {",
      "120:             if (!isIntrospectionEnabled(graphQLContext)) {",
      "121:                 return mkDisabledError(schemaField);",
      "122:             }",
      "123:         }",
      "124:         MergedField typeField = mergedSelectionSet.getSubField(TypeMetaFieldDef.getName());",
      "125:         if (typeField != null) {",
      "126:             if (!isIntrospectionEnabled(graphQLContext)) {",
      "127:                 return mkDisabledError(typeField);",
      "130:         if (schemaField != null || typeField != null)",
      "131:         {",
      "",
      "[Added Lines]",
      "119:         boolean isIntrospection = false;",
      "120:         for (String key : mergedSelectionSet.getKeys()) {",
      "121:             String fieldName = mergedSelectionSet.getSubField(key).getName();",
      "122:             if (fieldName.equals(SchemaMetaFieldDef.getName())",
      "123:                     || fieldName.equals(TypeMetaFieldDef.getName())) {",
      "124:                 if (!isIntrospectionEnabled(graphQLContext)) {",
      "125:                     return mkDisabledError(mergedSelectionSet.getSubField(key));",
      "126:                 }",
      "127:                 isIntrospection = true;",
      "128:                 break;",
      "131:         if (isIntrospection) {",
      "",
      "---------------"
    ],
    "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java": [
      "File: src/main/java/graphql/normalized/ExecutableNormalizedOperation.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "31:     private final Map<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField;",
      "32:     private final Map<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives;",
      "33:     private final ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields;",
      "35:     public ExecutableNormalizedOperation(",
      "36:             OperationDefinition.Operation operation,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34:     private final int operationFieldCount;",
      "35:     private final int operationDepth;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39:             ImmutableListMultimap<Field, ExecutableNormalizedField> fieldToNormalizedField,",
      "40:             Map<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField,",
      "41:             Map<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives,",
      "44:         this.operation = operation;",
      "45:         this.operationName = operationName;",
      "46:         this.topLevelFields = topLevelFields;",
      "",
      "[Removed Lines]",
      "42:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields",
      "43:     ) {",
      "",
      "[Added Lines]",
      "44:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields,",
      "45:             int operationFieldCount,",
      "46:             int operationDepth) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "48:         this.normalizedFieldToMergedField = normalizedFieldToMergedField;",
      "49:         this.normalizedFieldToQueryDirectives = normalizedFieldToQueryDirectives;",
      "50:         this.coordinatesToNormalizedFields = coordinatesToNormalizedFields;",
      "51:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:         this.operationFieldCount = operationFieldCount;",
      "55:         this.operationDepth = operationDepth;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "64:         return operationName;",
      "65:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "75:     public int getOperationFieldCount() {",
      "76:         return operationFieldCount;",
      "77:     }",
      "82:     public int getOperationDepth() {",
      "83:         return operationDepth;",
      "84:     }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java": [
      "File: src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: import graphql.schema.GraphQLObjectType;",
      "35: import graphql.schema.GraphQLSchema;",
      "36: import graphql.schema.GraphQLType;",
      "38: import graphql.schema.GraphQLUnionType;",
      "39: import graphql.schema.GraphQLUnmodifiedType;",
      "40: import graphql.schema.impl.SchemaUtil;",
      "",
      "[Removed Lines]",
      "37: import graphql.schema.GraphQLTypeUtil;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47: import java.util.Locale;",
      "48: import java.util.Map;",
      "49: import java.util.Set;",
      "52: import static graphql.Assert.assertNotNull;",
      "53: import static graphql.Assert.assertShouldNeverHappen;",
      "",
      "[Removed Lines]",
      "50: import java.util.function.BiConsumer;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "66: @PublicApi",
      "67: public class ExecutableNormalizedOperationFactory {",
      "68:     public static class Options {",
      "69:         private final GraphQLContext graphQLContext;",
      "70:         private final Locale locale;",
      "71:         private final int maxChildrenDepth;",
      "73:         private Options(GraphQLContext graphQLContext,",
      "74:                         Locale locale,",
      "76:             this.graphQLContext = graphQLContext;",
      "77:             this.locale = locale;",
      "78:             this.maxChildrenDepth = maxChildrenDepth;",
      "79:         }",
      "81:         public static Options defaultOptions() {",
      "82:             return new Options(",
      "83:                     GraphQLContext.getDefault(),",
      "84:                     Locale.getDefault(),",
      "86:         }",
      "",
      "[Removed Lines]",
      "75:                         int maxChildrenDepth) {",
      "85:                     Integer.MAX_VALUE);",
      "",
      "[Added Lines]",
      "71:         private final int maxFieldsCount;",
      "73:         private final boolean deferSupport;",
      "77:                         int maxChildrenDepth,",
      "78:                         int maxFieldsCount,",
      "79:                         boolean deferSupport) {",
      "83:             this.deferSupport = deferSupport;",
      "84:             this.maxFieldsCount = maxFieldsCount;",
      "91:                     Integer.MAX_VALUE,",
      "92:                     Integer.MAX_VALUE,",
      "93:                     false);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "96:         public Options locale(Locale locale) {",
      "98:         }",
      "",
      "[Removed Lines]",
      "97:             return new Options(this.graphQLContext, locale, this.maxChildrenDepth);",
      "",
      "[Added Lines]",
      "106:             return new Options(this.graphQLContext, locale, this.maxChildrenDepth, this.maxFieldsCount, this.deferSupport);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "108:         public Options graphQLContext(GraphQLContext graphQLContext) {",
      "110:         }",
      "",
      "[Removed Lines]",
      "109:             return new Options(graphQLContext, this.locale, this.maxChildrenDepth);",
      "",
      "[Added Lines]",
      "119:             return new Options(graphQLContext, this.locale, this.maxChildrenDepth, this.maxFieldsCount, this.deferSupport);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "119:         public Options maxChildrenDepth(int maxChildrenDepth) {",
      "121:         }",
      "127:         public GraphQLContext getGraphQLContext() {",
      "",
      "[Removed Lines]",
      "120:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth);",
      "",
      "[Added Lines]",
      "131:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, this.maxFieldsCount, this.deferSupport);",
      "132:         }",
      "142:         public Options maxFieldsCount(int maxFieldsCount) {",
      "143:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, maxFieldsCount, this.deferSupport);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "143:         public int getMaxChildrenDepth() {",
      "144:             return maxChildrenDepth;",
      "145:         }",
      "146:     }",
      "",
      "[Removed Lines]",
      "148:     private final ConditionalNodes conditionalNodes = new ConditionalNodes();",
      "",
      "[Added Lines]",
      "173:         public int getMaxFieldsCount() {",
      "174:             return maxFieldsCount;",
      "175:         }",
      "179:     private static final ConditionalNodes conditionalNodes = new ConditionalNodes();",
      "181:     private ExecutableNormalizedOperationFactory() {",
      "183:     }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "163:             Document document,",
      "164:             String operationName,",
      "165:             CoercedVariables coercedVariableValues",
      "166:     ) {",
      "167:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
      "169:                 getOperationResult.operationDefinition,",
      "170:                 getOperationResult.fragmentsByName,",
      "171:                 coercedVariableValues,",
      "172:                 null,",
      "174:     }",
      "",
      "[Removed Lines]",
      "168:         return new ExecutableNormalizedOperationFactory().createNormalizedQueryImpl(graphQLSchema,",
      "173:                 Options.defaultOptions());",
      "",
      "[Added Lines]",
      "201:     ) {",
      "202:         return createExecutableNormalizedOperation(",
      "203:                 graphQLSchema,",
      "204:                 document,",
      "205:                 operationName,",
      "206:                 coercedVariableValues,",
      "207:                 Options.defaultOptions());",
      "208:     }",
      "222:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(",
      "223:             GraphQLSchema graphQLSchema,",
      "224:             Document document,",
      "225:             String operationName,",
      "226:             CoercedVariables coercedVariableValues,",
      "227:             Options options",
      "231:         return new ExecutableNormalizedOperationFactoryImpl(",
      "232:                 graphQLSchema,",
      "237:                 options",
      "238:         ).createNormalizedQueryImpl();",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "188:                                                                                     OperationDefinition operationDefinition,",
      "189:                                                                                     Map<String, FragmentDefinition> fragments,",
      "190:                                                                                     CoercedVariables coercedVariableValues) {",
      "192:                 operationDefinition,",
      "193:                 fragments,",
      "194:                 coercedVariableValues,",
      "196:                 Options.defaultOptions());",
      "197:     }",
      "",
      "[Removed Lines]",
      "191:         return new ExecutableNormalizedOperationFactory().createNormalizedQueryImpl(graphQLSchema,",
      "195:                 null,",
      "",
      "[Added Lines]",
      "256:         return createExecutableNormalizedOperation(graphQLSchema,",
      "274:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(GraphQLSchema graphQLSchema,",
      "275:                                                                                     OperationDefinition operationDefinition,",
      "276:                                                                                     Map<String, FragmentDefinition> fragments,",
      "277:                                                                                     CoercedVariables coercedVariableValues,",
      "278:                                                                                     Options options) {",
      "279:         return new ExecutableNormalizedOperationFactoryImpl(",
      "280:                 graphQLSchema,",
      "281:                 operationDefinition,",
      "282:                 fragments,",
      "283:                 coercedVariableValues,",
      "284:                 null,",
      "285:                 options",
      "286:         ).createNormalizedQueryImpl();",
      "287:     }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "267:                                                                                                     RawVariables rawVariables,",
      "268:                                                                                                     Options options) {",
      "269:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
      "284:         List<VariableDefinition> variableDefinitions = operationDefinition.getVariableDefinitions();",
      "285:         CoercedVariables coercedVariableValues = ValuesResolver.coerceVariableValues(graphQLSchema,",
      "286:                 variableDefinitions,",
      "",
      "[Removed Lines]",
      "271:         return new ExecutableNormalizedOperationFactory().createExecutableNormalizedOperationImplWithRawVariables(graphQLSchema,",
      "272:                 getOperationResult.operationDefinition,",
      "273:                 getOperationResult.fragmentsByName,",
      "274:                 rawVariables,",
      "275:                 options",
      "276:         );",
      "277:     }",
      "279:     private ExecutableNormalizedOperation createExecutableNormalizedOperationImplWithRawVariables(GraphQLSchema graphQLSchema,",
      "280:                                                                                                   OperationDefinition operationDefinition,",
      "281:                                                                                                   Map<String, FragmentDefinition> fragments,",
      "282:                                                                                                   RawVariables rawVariables,",
      "283:                                                                                                   Options options) {",
      "",
      "[Added Lines]",
      "360:         OperationDefinition operationDefinition = getOperationResult.operationDefinition;",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "292:                 rawVariables,",
      "293:                 options.getGraphQLContext(),",
      "294:                 options.getLocale());",
      "296:                 operationDefinition,",
      "298:                 coercedVariableValues,",
      "299:                 normalizedVariableValues,",
      "368:     }",
      "381:         }",
      "415:         }",
      "422:         }",
      "455:         }",
      "461:             }",
      "470:         }",
      "484:         }",
      "519:                 }",
      "522:                 }",
      "527:             }",
      "528:         }",
      "584:         }",
      "602:             }",
      "603:         }",
      "619:         }",
      "623:         }",
      "659:         }",
      "667:         }",
      "682:         }",
      "686:         }",
      "697:         }",
      "710:             }",
      "711:         }",
      "726:         }",
      "727:     }",
      "",
      "[Removed Lines]",
      "295:         return createNormalizedQueryImpl(graphQLSchema,",
      "297:                 fragments,",
      "300:                 options);",
      "301:     }",
      "306:     private ExecutableNormalizedOperation createNormalizedQueryImpl(GraphQLSchema graphQLSchema,",
      "307:                                                                     OperationDefinition operationDefinition,",
      "308:                                                                     Map<String, FragmentDefinition> fragments,",
      "309:                                                                     CoercedVariables coercedVariableValues,",
      "310:                                                                     @Nullable Map<String, NormalizedInputValue> normalizedVariableValues,",
      "311:                                                                     Options options) {",
      "312:         FieldCollectorNormalizedQueryParams parameters = FieldCollectorNormalizedQueryParams",
      "313:                 .newParameters()",
      "314:                 .fragments(fragments)",
      "315:                 .schema(graphQLSchema)",
      "316:                 .coercedVariables(coercedVariableValues.toMap())",
      "317:                 .normalizedVariables(normalizedVariableValues)",
      "318:                 .build();",
      "320:         GraphQLObjectType rootType = SchemaUtil.getOperationRootType(graphQLSchema, operationDefinition);",
      "322:         CollectNFResult collectFromOperationResult = collectFromOperation(parameters, operationDefinition, rootType);",
      "324:         ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField = ImmutableListMultimap.builder();",
      "325:         ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField = ImmutableMap.builder();",
      "326:         ImmutableMap.Builder<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives = ImmutableMap.builder();",
      "327:         ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
      "329:         BiConsumer<ExecutableNormalizedField, MergedField> captureMergedField = (enf, mergedFld) -> {",
      "331:             QueryDirectives queryDirectives = new QueryDirectivesImpl(mergedFld, graphQLSchema, coercedVariableValues.toMap(), options.getGraphQLContext(), options.getLocale());",
      "332:             normalizedFieldToQueryDirectives.put(enf, queryDirectives);",
      "333:             normalizedFieldToMergedField.put(enf, mergedFld);",
      "334:         };",
      "336:         for (ExecutableNormalizedField topLevel : collectFromOperationResult.children) {",
      "337:             ImmutableList<FieldAndAstParent> fieldAndAstParents = collectFromOperationResult.normalizedFieldToAstFields.get(topLevel);",
      "338:             MergedField mergedField = newMergedField(fieldAndAstParents);",
      "340:             captureMergedField.accept(topLevel, mergedField);",
      "342:             updateFieldToNFMap(topLevel, fieldAndAstParents, fieldToNormalizedField);",
      "343:             updateCoordinatedToNFMap(coordinatesToNormalizedFields, topLevel);",
      "345:             buildFieldWithChildren(",
      "346:                     topLevel,",
      "347:                     fieldAndAstParents,",
      "348:                     parameters,",
      "349:                     fieldToNormalizedField,",
      "350:                     captureMergedField,",
      "351:                     coordinatesToNormalizedFields,",
      "352:                     1,",
      "353:                     options.getMaxChildrenDepth());",
      "354:         }",
      "355:         for (FieldCollectorNormalizedQueryParams.PossibleMerger possibleMerger : parameters.getPossibleMergerList()) {",
      "356:             List<ExecutableNormalizedField> childrenWithSameResultKey = possibleMerger.parent.getChildrenWithSameResultKey(possibleMerger.resultKey);",
      "357:             ENFMerger.merge(possibleMerger.parent, childrenWithSameResultKey, graphQLSchema);",
      "358:         }",
      "359:         return new ExecutableNormalizedOperation(",
      "360:                 operationDefinition.getOperation(),",
      "361:                 operationDefinition.getName(),",
      "362:                 new ArrayList<>(collectFromOperationResult.children),",
      "363:                 fieldToNormalizedField.build(),",
      "364:                 normalizedFieldToMergedField.build(),",
      "365:                 normalizedFieldToQueryDirectives.build(),",
      "366:                 coordinatesToNormalizedFields.build()",
      "367:         );",
      "371:     private void buildFieldWithChildren(ExecutableNormalizedField executableNormalizedField,",
      "372:                                         ImmutableList<FieldAndAstParent> fieldAndAstParents,",
      "373:                                         FieldCollectorNormalizedQueryParams fieldCollectorNormalizedQueryParams,",
      "374:                                         ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldNormalizedField,",
      "375:                                         BiConsumer<ExecutableNormalizedField, MergedField> captureMergedField,",
      "376:                                         ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields,",
      "377:                                         int curLevel,",
      "378:                                         int maxLevel) {",
      "379:         if (curLevel > maxLevel) {",
      "380:             throw new AbortExecutionException(\"Maximum query depth exceeded \" + curLevel + \" > \" + maxLevel);",
      "383:         CollectNFResult nextLevel = collectFromMergedField(fieldCollectorNormalizedQueryParams, executableNormalizedField, fieldAndAstParents, curLevel + 1);",
      "385:         for (ExecutableNormalizedField childENF : nextLevel.children) {",
      "386:             executableNormalizedField.addChild(childENF);",
      "387:             ImmutableList<FieldAndAstParent> childFieldAndAstParents = nextLevel.normalizedFieldToAstFields.get(childENF);",
      "389:             MergedField mergedField = newMergedField(childFieldAndAstParents);",
      "390:             captureMergedField.accept(childENF, mergedField);",
      "392:             updateFieldToNFMap(childENF, childFieldAndAstParents, fieldNormalizedField);",
      "393:             updateCoordinatedToNFMap(coordinatesToNormalizedFields, childENF);",
      "395:             buildFieldWithChildren(childENF,",
      "396:                     childFieldAndAstParents,",
      "397:                     fieldCollectorNormalizedQueryParams,",
      "398:                     fieldNormalizedField,",
      "399:                     captureMergedField,",
      "400:                     coordinatesToNormalizedFields,",
      "401:                     curLevel + 1,",
      "402:                     maxLevel);",
      "403:         }",
      "404:     }",
      "406:     private static MergedField newMergedField(ImmutableList<FieldAndAstParent> fieldAndAstParents) {",
      "407:         return MergedField.newMergedField(map(fieldAndAstParents, fieldAndAstParent -> fieldAndAstParent.field)).build();",
      "408:     }",
      "410:     private void updateFieldToNFMap(ExecutableNormalizedField executableNormalizedField,",
      "411:                                     ImmutableList<FieldAndAstParent> mergedField,",
      "412:                                     ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField) {",
      "413:         for (FieldAndAstParent astField : mergedField) {",
      "414:             fieldToNormalizedField.put(astField.field, executableNormalizedField);",
      "416:     }",
      "418:     private void updateCoordinatedToNFMap(ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields, ExecutableNormalizedField topLevel) {",
      "419:         for (String objectType : topLevel.getObjectTypeNames()) {",
      "420:             FieldCoordinates coordinates = FieldCoordinates.coordinates(objectType, topLevel.getFieldName());",
      "421:             coordinatesToNormalizedFields.put(coordinates, topLevel);",
      "423:     }",
      "425:     private static class FieldAndAstParent {",
      "426:         final Field field;",
      "427:         final GraphQLCompositeType astParentType;",
      "429:         private FieldAndAstParent(Field field, GraphQLCompositeType astParentType) {",
      "430:             this.field = field;",
      "431:             this.astParentType = astParentType;",
      "432:         }",
      "433:     }",
      "436:     public static class CollectNFResult {",
      "437:         private final Collection<ExecutableNormalizedField> children;",
      "438:         private final ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields;",
      "440:         public CollectNFResult(Collection<ExecutableNormalizedField> children, ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields) {",
      "441:             this.children = children;",
      "442:             this.normalizedFieldToAstFields = normalizedFieldToAstFields;",
      "443:         }",
      "444:     }",
      "447:     public CollectNFResult collectFromMergedField(FieldCollectorNormalizedQueryParams parameters,",
      "448:                                                   ExecutableNormalizedField executableNormalizedField,",
      "449:                                                   ImmutableList<FieldAndAstParent> mergedField,",
      "450:                                                   int level) {",
      "451:         List<GraphQLFieldDefinition> fieldDefs = executableNormalizedField.getFieldDefinitions(parameters.getGraphQLSchema());",
      "452:         Set<GraphQLObjectType> possibleObjects = resolvePossibleObjects(fieldDefs, parameters.getGraphQLSchema());",
      "453:         if (possibleObjects.isEmpty()) {",
      "454:             return new CollectNFResult(ImmutableKit.emptyList(), ImmutableListMultimap.of());",
      "457:         List<CollectedField> collectedFields = new ArrayList<>();",
      "458:         for (FieldAndAstParent fieldAndAstParent : mergedField) {",
      "459:             if (fieldAndAstParent.field.getSelectionSet() == null) {",
      "460:                 continue;",
      "462:             GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(parameters.getGraphQLSchema(), fieldAndAstParent.astParentType, fieldAndAstParent.field.getName());",
      "463:             GraphQLUnmodifiedType astParentType = unwrapAll(fieldDefinition.getType());",
      "464:             this.collectFromSelectionSet(parameters,",
      "465:                     fieldAndAstParent.field.getSelectionSet(),",
      "466:                     collectedFields,",
      "467:                     (GraphQLCompositeType) astParentType,",
      "468:                     possibleObjects",
      "469:             );",
      "471:         Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
      "472:         ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
      "473:         ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
      "475:         createNFs(resultNFs, parameters, fieldsByName, normalizedFieldToAstFields, level, executableNormalizedField);",
      "477:         return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
      "478:     }",
      "480:     private Map<String, List<CollectedField>> fieldsByResultKey(List<CollectedField> collectedFields) {",
      "481:         Map<String, List<CollectedField>> fieldsByName = new LinkedHashMap<>();",
      "482:         for (CollectedField collectedField : collectedFields) {",
      "483:             fieldsByName.computeIfAbsent(collectedField.field.getResultKey(), ignored -> new ArrayList<>()).add(collectedField);",
      "485:         return fieldsByName;",
      "486:     }",
      "488:     public CollectNFResult collectFromOperation(FieldCollectorNormalizedQueryParams parameters,",
      "489:                                                 OperationDefinition operationDefinition,",
      "490:                                                 GraphQLObjectType rootType) {",
      "493:         Set<GraphQLObjectType> possibleObjects = ImmutableSet.of(rootType);",
      "494:         List<CollectedField> collectedFields = new ArrayList<>();",
      "495:         collectFromSelectionSet(parameters, operationDefinition.getSelectionSet(), collectedFields, rootType, possibleObjects);",
      "497:         Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
      "498:         ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
      "499:         ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
      "501:         createNFs(resultNFs, parameters, fieldsByName, normalizedFieldToAstFields, 1, null);",
      "503:         return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
      "504:     }",
      "506:     private void createNFs(ImmutableList.Builder<ExecutableNormalizedField> nfListBuilder,",
      "507:                            FieldCollectorNormalizedQueryParams parameters,",
      "508:                            Map<String, List<CollectedField>> fieldsByName,",
      "509:                            ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields,",
      "510:                            int level,",
      "511:                            ExecutableNormalizedField parent) {",
      "512:         for (String resultKey : fieldsByName.keySet()) {",
      "513:             List<CollectedField> fieldsWithSameResultKey = fieldsByName.get(resultKey);",
      "514:             List<CollectedFieldGroup> commonParentsGroups = groupByCommonParents(fieldsWithSameResultKey);",
      "515:             for (CollectedFieldGroup fieldGroup : commonParentsGroups) {",
      "516:                 ExecutableNormalizedField nf = createNF(parameters, fieldGroup, level, parent);",
      "517:                 if (nf == null) {",
      "518:                     continue;",
      "520:                 for (CollectedField collectedField : fieldGroup.fields) {",
      "521:                     normalizedFieldToAstFields.put(nf, new FieldAndAstParent(collectedField.field, collectedField.astTypeCondition));",
      "523:                 nfListBuilder.add(nf);",
      "524:             }",
      "525:             if (commonParentsGroups.size() > 1) {",
      "526:                 parameters.addPossibleMergers(parent, resultKey);",
      "529:     }",
      "531:     private ExecutableNormalizedField createNF(FieldCollectorNormalizedQueryParams parameters,",
      "532:                                                CollectedFieldGroup collectedFieldGroup,",
      "533:                                                int level,",
      "534:                                                ExecutableNormalizedField parent) {",
      "535:         Field field;",
      "536:         Set<GraphQLObjectType> objectTypes = collectedFieldGroup.objectTypes;",
      "537:         field = collectedFieldGroup.fields.iterator().next().field;",
      "538:         String fieldName = field.getName();",
      "539:         GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(parameters.getGraphQLSchema(), objectTypes.iterator().next(), fieldName);",
      "541:         Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(fieldDefinition.getArguments(), field.getArguments(), CoercedVariables.of(parameters.getCoercedVariableValues()), parameters.getGraphQLContext(), parameters.getLocale());",
      "542:         Map<String, NormalizedInputValue> normalizedArgumentValues = null;",
      "543:         if (parameters.getNormalizedVariableValues() != null) {",
      "544:             normalizedArgumentValues = ValuesResolver.getNormalizedArgumentValues(fieldDefinition.getArguments(), field.getArguments(), parameters.getNormalizedVariableValues());",
      "545:         }",
      "546:         ImmutableList<String> objectTypeNames = map(objectTypes, GraphQLObjectType::getName);",
      "548:         return ExecutableNormalizedField.newNormalizedField()",
      "549:                 .alias(field.getAlias())",
      "550:                 .resolvedArguments(argumentValues)",
      "551:                 .normalizedArguments(normalizedArgumentValues)",
      "552:                 .astArguments(field.getArguments())",
      "553:                 .objectTypeNames(objectTypeNames)",
      "554:                 .fieldName(fieldName)",
      "555:                 .level(level)",
      "556:                 .parent(parent)",
      "557:                 .build();",
      "558:     }",
      "560:     private static class CollectedFieldGroup {",
      "561:         Set<GraphQLObjectType> objectTypes;",
      "562:         Set<CollectedField> fields;",
      "564:         public CollectedFieldGroup(Set<CollectedField> fields, Set<GraphQLObjectType> objectTypes) {",
      "565:             this.fields = fields;",
      "566:             this.objectTypes = objectTypes;",
      "567:         }",
      "568:     }",
      "570:     private List<CollectedFieldGroup> groupByCommonParents(Collection<CollectedField> fields) {",
      "571:         ImmutableSet.Builder<GraphQLObjectType> objectTypes = ImmutableSet.builder();",
      "572:         for (CollectedField collectedField : fields) {",
      "573:             objectTypes.addAll(collectedField.objectTypes);",
      "574:         }",
      "575:         Set<GraphQLObjectType> allRelevantObjects = objectTypes.build();",
      "576:         Map<GraphQLType, ImmutableList<CollectedField>> groupByAstParent = groupingBy(fields, fieldAndType -> fieldAndType.astTypeCondition);",
      "577:         if (groupByAstParent.size() == 1) {",
      "578:             return singletonList(new CollectedFieldGroup(ImmutableSet.copyOf(fields), allRelevantObjects));",
      "579:         }",
      "580:         ImmutableList.Builder<CollectedFieldGroup> result = ImmutableList.builder();",
      "581:         for (GraphQLObjectType objectType : allRelevantObjects) {",
      "582:             Set<CollectedField> relevantFields = filterSet(fields, field -> field.objectTypes.contains(objectType));",
      "583:             result.add(new CollectedFieldGroup(relevantFields, singleton(objectType)));",
      "585:         return result.build();",
      "586:     }",
      "589:     private void collectFromSelectionSet(FieldCollectorNormalizedQueryParams parameters,",
      "590:                                          SelectionSet selectionSet,",
      "591:                                          List<CollectedField> result,",
      "592:                                          GraphQLCompositeType astTypeCondition,",
      "593:                                          Set<GraphQLObjectType> possibleObjects",
      "594:     ) {",
      "595:         for (Selection<?> selection : selectionSet.getSelections()) {",
      "596:             if (selection instanceof Field) {",
      "597:                 collectField(parameters, result, (Field) selection, possibleObjects, astTypeCondition);",
      "598:             } else if (selection instanceof InlineFragment) {",
      "599:                 collectInlineFragment(parameters, result, (InlineFragment) selection, possibleObjects, astTypeCondition);",
      "600:             } else if (selection instanceof FragmentSpread) {",
      "601:                 collectFragmentSpread(parameters, result, (FragmentSpread) selection, possibleObjects);",
      "604:     }",
      "606:     private static class CollectedField {",
      "607:         Field field;",
      "608:         Set<GraphQLObjectType> objectTypes;",
      "609:         GraphQLCompositeType astTypeCondition;",
      "611:         public CollectedField(Field field, Set<GraphQLObjectType> objectTypes, GraphQLCompositeType astTypeCondition) {",
      "612:             this.field = field;",
      "613:             this.objectTypes = objectTypes;",
      "614:             this.astTypeCondition = astTypeCondition;",
      "615:         }",
      "617:         public boolean isAbstract() {",
      "618:             return GraphQLTypeUtil.isInterfaceOrUnion(astTypeCondition);",
      "621:         public boolean isConcrete() {",
      "622:             return GraphQLTypeUtil.isObjectType(astTypeCondition);",
      "624:     }",
      "626:     private void collectFragmentSpread(FieldCollectorNormalizedQueryParams parameters,",
      "627:                                        List<CollectedField> result,",
      "628:                                        FragmentSpread fragmentSpread,",
      "629:                                        Set<GraphQLObjectType> possibleObjects",
      "630:     ) {",
      "631:         if (!conditionalNodes.shouldInclude(fragmentSpread,",
      "632:                 parameters.getCoercedVariableValues(),",
      "633:                 parameters.getGraphQLSchema(),",
      "634:                 parameters.getGraphQLContext())) {",
      "635:             return;",
      "636:         }",
      "637:         FragmentDefinition fragmentDefinition = assertNotNull(parameters.getFragmentsByName().get(fragmentSpread.getName()));",
      "639:         if (!conditionalNodes.shouldInclude(fragmentDefinition,",
      "640:                 parameters.getCoercedVariableValues(),",
      "641:                 parameters.getGraphQLSchema(),",
      "642:                 parameters.getGraphQLContext())) {",
      "643:             return;",
      "644:         }",
      "645:         GraphQLCompositeType newAstTypeCondition = (GraphQLCompositeType) assertNotNull(parameters.getGraphQLSchema().getType(fragmentDefinition.getTypeCondition().getName()));",
      "646:         Set<GraphQLObjectType> newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition, parameters.getGraphQLSchema());",
      "647:         collectFromSelectionSet(parameters, fragmentDefinition.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
      "648:     }",
      "651:     private void collectInlineFragment(FieldCollectorNormalizedQueryParams parameters,",
      "652:                                        List<CollectedField> result,",
      "653:                                        InlineFragment inlineFragment,",
      "654:                                        Set<GraphQLObjectType> possibleObjects,",
      "655:                                        GraphQLCompositeType astTypeCondition",
      "656:     ) {",
      "657:         if (!conditionalNodes.shouldInclude(inlineFragment, parameters.getCoercedVariableValues(), parameters.getGraphQLSchema(), parameters.getGraphQLContext())) {",
      "658:             return;",
      "660:         Set<GraphQLObjectType> newPossibleObjects = possibleObjects;",
      "661:         GraphQLCompositeType newAstTypeCondition = astTypeCondition;",
      "663:         if (inlineFragment.getTypeCondition() != null) {",
      "664:             newAstTypeCondition = (GraphQLCompositeType) parameters.getGraphQLSchema().getType(inlineFragment.getTypeCondition().getName());",
      "665:             newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition, parameters.getGraphQLSchema());",
      "668:         collectFromSelectionSet(parameters, inlineFragment.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
      "669:     }",
      "671:     private void collectField(FieldCollectorNormalizedQueryParams parameters,",
      "672:                               List<CollectedField> result,",
      "673:                               Field field,",
      "674:                               Set<GraphQLObjectType> possibleObjectTypes,",
      "675:                               GraphQLCompositeType astTypeCondition",
      "676:     ) {",
      "677:         if (!conditionalNodes.shouldInclude(field,",
      "678:                 parameters.getCoercedVariableValues(),",
      "679:                 parameters.getGraphQLSchema(),",
      "680:                 parameters.getGraphQLContext())) {",
      "681:             return;",
      "684:         if (possibleObjectTypes.isEmpty()) {",
      "685:             return;",
      "687:         result.add(new CollectedField(field, possibleObjectTypes, astTypeCondition));",
      "688:     }",
      "690:     private Set<GraphQLObjectType> narrowDownPossibleObjects(Set<GraphQLObjectType> currentOnes,",
      "691:                                                              GraphQLCompositeType typeCondition,",
      "692:                                                              GraphQLSchema graphQLSchema) {",
      "694:         ImmutableSet<GraphQLObjectType> resolvedTypeCondition = resolvePossibleObjects(typeCondition, graphQLSchema);",
      "695:         if (currentOnes.isEmpty()) {",
      "696:             return resolvedTypeCondition;",
      "700:         return intersection(currentOnes, resolvedTypeCondition);",
      "701:     }",
      "703:     private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(List<GraphQLFieldDefinition> defs, GraphQLSchema graphQLSchema) {",
      "704:         ImmutableSet.Builder<GraphQLObjectType> builder = ImmutableSet.builder();",
      "706:         for (GraphQLFieldDefinition def : defs) {",
      "707:             GraphQLUnmodifiedType outputType = unwrapAll(def.getType());",
      "708:             if (outputType instanceof GraphQLCompositeType) {",
      "709:                 builder.addAll(resolvePossibleObjects((GraphQLCompositeType) outputType, graphQLSchema));",
      "713:         return builder.build();",
      "714:     }",
      "716:     private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(GraphQLCompositeType type, GraphQLSchema graphQLSchema) {",
      "717:         if (type instanceof GraphQLObjectType) {",
      "718:             return ImmutableSet.of((GraphQLObjectType) type);",
      "719:         } else if (type instanceof GraphQLInterfaceType) {",
      "720:             return ImmutableSet.copyOf(graphQLSchema.getImplementations((GraphQLInterfaceType) type));",
      "721:         } else if (type instanceof GraphQLUnionType) {",
      "722:             List<GraphQLNamedOutputType> unionTypes = ((GraphQLUnionType) type).getTypes();",
      "723:             return ImmutableSet.copyOf(ImmutableKit.map(unionTypes, GraphQLObjectType.class::cast));",
      "724:         } else {",
      "725:             return assertShouldNeverHappen();",
      "728: }",
      "",
      "[Added Lines]",
      "374:         return new ExecutableNormalizedOperationFactoryImpl(",
      "375:                 graphQLSchema,",
      "377:                 getOperationResult.fragmentsByName,",
      "380:                 options",
      "381:         ).createNormalizedQueryImpl();",
      "385:     private static class ExecutableNormalizedOperationFactoryImpl {",
      "386:         private final GraphQLSchema graphQLSchema;",
      "387:         private final OperationDefinition operationDefinition;",
      "388:         private final Map<String, FragmentDefinition> fragments;",
      "389:         private final CoercedVariables coercedVariableValues;",
      "390:         private final @Nullable Map<String, NormalizedInputValue> normalizedVariableValues;",
      "391:         private final Options options;",
      "393:         private final List<PossibleMerger> possibleMergerList = new ArrayList<>();",
      "395:         private final ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField = ImmutableListMultimap.builder();",
      "396:         private final ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField = ImmutableMap.builder();",
      "397:         private final ImmutableMap.Builder<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives = ImmutableMap.builder();",
      "398:         private final ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
      "399:         private int fieldCount = 0;",
      "400:         private int maxDepthSeen = 0;",
      "402:         private ExecutableNormalizedOperationFactoryImpl(",
      "403:                 GraphQLSchema graphQLSchema,",
      "404:                 OperationDefinition operationDefinition,",
      "405:                 Map<String, FragmentDefinition> fragments,",
      "406:                 CoercedVariables coercedVariableValues,",
      "407:                 @Nullable Map<String, NormalizedInputValue> normalizedVariableValues,",
      "408:                 Options options",
      "409:         ) {",
      "410:             this.graphQLSchema = graphQLSchema;",
      "411:             this.operationDefinition = operationDefinition;",
      "412:             this.fragments = fragments;",
      "413:             this.coercedVariableValues = coercedVariableValues;",
      "414:             this.normalizedVariableValues = normalizedVariableValues;",
      "415:             this.options = options;",
      "421:         private ExecutableNormalizedOperation createNormalizedQueryImpl() {",
      "422:             GraphQLObjectType rootType = SchemaUtil.getOperationRootType(graphQLSchema, operationDefinition);",
      "424:             CollectNFResult collectFromOperationResult = collectFromOperation(rootType);",
      "426:             for (ExecutableNormalizedField topLevel : collectFromOperationResult.children) {",
      "427:                 ImmutableList<FieldAndAstParent> fieldAndAstParents = collectFromOperationResult.normalizedFieldToAstFields.get(topLevel);",
      "428:                 MergedField mergedField = newMergedField(fieldAndAstParents);",
      "430:                 captureMergedField(topLevel, mergedField);",
      "432:                 updateFieldToNFMap(topLevel, fieldAndAstParents);",
      "433:                 updateCoordinatedToNFMap(topLevel);",
      "435:                 int depthSeen = buildFieldWithChildren(",
      "436:                         topLevel,",
      "437:                         fieldAndAstParents,",
      "438:                         1);",
      "439:                 maxDepthSeen = Math.max(maxDepthSeen,depthSeen);",
      "440:             }",
      "442:             for (PossibleMerger possibleMerger : possibleMergerList) {",
      "443:                 List<ExecutableNormalizedField> childrenWithSameResultKey = possibleMerger.parent.getChildrenWithSameResultKey(possibleMerger.resultKey);",
      "444:                 ENFMerger.merge(possibleMerger.parent, childrenWithSameResultKey, graphQLSchema);",
      "445:             }",
      "446:             return new ExecutableNormalizedOperation(",
      "447:                     operationDefinition.getOperation(),",
      "448:                     operationDefinition.getName(),",
      "449:                     new ArrayList<>(collectFromOperationResult.children),",
      "450:                     fieldToNormalizedField.build(),",
      "451:                     normalizedFieldToMergedField.build(),",
      "452:                     normalizedFieldToQueryDirectives.build(),",
      "453:                     coordinatesToNormalizedFields.build(),",
      "454:                     fieldCount,",
      "455:                     maxDepthSeen",
      "456:             );",
      "459:         private void captureMergedField(ExecutableNormalizedField enf, MergedField mergedFld) {",
      "461:             QueryDirectives queryDirectives = new QueryDirectivesImpl(mergedFld, graphQLSchema, coercedVariableValues.toMap(), options.getGraphQLContext(), options.getLocale());",
      "462:             normalizedFieldToQueryDirectives.put(enf, queryDirectives);",
      "463:             normalizedFieldToMergedField.put(enf, mergedFld);",
      "466:         private int buildFieldWithChildren(ExecutableNormalizedField executableNormalizedField,",
      "467:                                            ImmutableList<FieldAndAstParent> fieldAndAstParents,",
      "468:                                            int curLevel) {",
      "469:             checkMaxDepthExceeded(curLevel);",
      "471:             CollectNFResult nextLevel = collectFromMergedField(executableNormalizedField, fieldAndAstParents, curLevel + 1);",
      "473:             int maxDepthSeen = curLevel;",
      "474:             for (ExecutableNormalizedField childENF : nextLevel.children) {",
      "475:                 executableNormalizedField.addChild(childENF);",
      "476:                 ImmutableList<FieldAndAstParent> childFieldAndAstParents = nextLevel.normalizedFieldToAstFields.get(childENF);",
      "478:                 MergedField mergedField = newMergedField(childFieldAndAstParents);",
      "479:                 captureMergedField(childENF, mergedField);",
      "481:                 updateFieldToNFMap(childENF, childFieldAndAstParents);",
      "482:                 updateCoordinatedToNFMap(childENF);",
      "484:                 int depthSeen = buildFieldWithChildren(childENF,",
      "485:                         childFieldAndAstParents,",
      "486:                         curLevel + 1);",
      "487:                 maxDepthSeen = Math.max(maxDepthSeen,depthSeen);",
      "489:                 checkMaxDepthExceeded(maxDepthSeen);",
      "490:             }",
      "491:             return maxDepthSeen;",
      "494:         private void checkMaxDepthExceeded(int depthSeen) {",
      "495:             if (depthSeen > this.options.getMaxChildrenDepth()) {",
      "496:                 throw new AbortExecutionException(\"Maximum query depth exceeded. \" + depthSeen + \" > \" + this.options.getMaxChildrenDepth());",
      "500:         private static MergedField newMergedField(ImmutableList<FieldAndAstParent> fieldAndAstParents) {",
      "501:             return MergedField.newMergedField(map(fieldAndAstParents, fieldAndAstParent -> fieldAndAstParent.field)).build();",
      "502:         }",
      "504:         private void updateFieldToNFMap(ExecutableNormalizedField executableNormalizedField,",
      "505:                                         ImmutableList<FieldAndAstParent> mergedField) {",
      "506:             for (FieldAndAstParent astField : mergedField) {",
      "507:                 fieldToNormalizedField.put(astField.field, executableNormalizedField);",
      "508:             }",
      "511:         private void updateCoordinatedToNFMap(ExecutableNormalizedField topLevel) {",
      "512:             for (String objectType : topLevel.getObjectTypeNames()) {",
      "513:                 FieldCoordinates coordinates = FieldCoordinates.coordinates(objectType, topLevel.getFieldName());",
      "514:                 coordinatesToNormalizedFields.put(coordinates, topLevel);",
      "515:             }",
      "516:         }",
      "518:         public CollectNFResult collectFromMergedField(ExecutableNormalizedField executableNormalizedField,",
      "519:                                                       ImmutableList<FieldAndAstParent> mergedField,",
      "520:                                                       int level) {",
      "521:             List<GraphQLFieldDefinition> fieldDefs = executableNormalizedField.getFieldDefinitions(graphQLSchema);",
      "522:             Set<GraphQLObjectType> possibleObjects = resolvePossibleObjects(fieldDefs);",
      "523:             if (possibleObjects.isEmpty()) {",
      "524:                 return new CollectNFResult(ImmutableKit.emptyList(), ImmutableListMultimap.of());",
      "525:             }",
      "527:             List<CollectedField> collectedFields = new ArrayList<>();",
      "528:             for (FieldAndAstParent fieldAndAstParent : mergedField) {",
      "529:                 if (fieldAndAstParent.field.getSelectionSet() == null) {",
      "530:                     continue;",
      "531:                 }",
      "532:                 GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(graphQLSchema, fieldAndAstParent.astParentType, fieldAndAstParent.field.getName());",
      "533:                 GraphQLUnmodifiedType astParentType = unwrapAll(fieldDefinition.getType());",
      "534:                 this.collectFromSelectionSet(fieldAndAstParent.field.getSelectionSet(),",
      "535:                         collectedFields,",
      "536:                         (GraphQLCompositeType) astParentType,",
      "537:                         possibleObjects",
      "538:                 );",
      "539:             }",
      "540:             Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
      "541:             ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
      "542:             ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
      "544:             createNFs(resultNFs, fieldsByName, normalizedFieldToAstFields, level, executableNormalizedField);",
      "546:             return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
      "547:         }",
      "549:         private Map<String, List<CollectedField>> fieldsByResultKey(List<CollectedField> collectedFields) {",
      "550:             Map<String, List<CollectedField>> fieldsByName = new LinkedHashMap<>();",
      "551:             for (CollectedField collectedField : collectedFields) {",
      "552:                 fieldsByName.computeIfAbsent(collectedField.field.getResultKey(), ignored -> new ArrayList<>()).add(collectedField);",
      "553:             }",
      "554:             return fieldsByName;",
      "555:         }",
      "557:         public CollectNFResult collectFromOperation(GraphQLObjectType rootType) {",
      "560:             Set<GraphQLObjectType> possibleObjects = ImmutableSet.of(rootType);",
      "561:             List<CollectedField> collectedFields = new ArrayList<>();",
      "562:             collectFromSelectionSet(operationDefinition.getSelectionSet(), collectedFields, rootType, possibleObjects);",
      "564:             Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
      "565:             ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
      "566:             ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
      "568:             createNFs(resultNFs, fieldsByName, normalizedFieldToAstFields, 1, null);",
      "570:             return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
      "571:         }",
      "573:         private void createNFs(ImmutableList.Builder<ExecutableNormalizedField> nfListBuilder,",
      "574:                                Map<String, List<CollectedField>> fieldsByName,",
      "575:                                ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields,",
      "576:                                int level,",
      "577:                                ExecutableNormalizedField parent) {",
      "578:             for (String resultKey : fieldsByName.keySet()) {",
      "579:                 List<CollectedField> fieldsWithSameResultKey = fieldsByName.get(resultKey);",
      "580:                 List<CollectedFieldGroup> commonParentsGroups = groupByCommonParents(fieldsWithSameResultKey);",
      "581:                 for (CollectedFieldGroup fieldGroup : commonParentsGroups) {",
      "582:                     ExecutableNormalizedField nf = createNF(fieldGroup, level, parent);",
      "583:                     if (nf == null) {",
      "584:                         continue;",
      "585:                     }",
      "586:                     for (CollectedField collectedField : fieldGroup.fields) {",
      "587:                         normalizedFieldToAstFields.put(nf, new FieldAndAstParent(collectedField.field, collectedField.astTypeCondition));",
      "588:                     }",
      "589:                     nfListBuilder.add(nf);",
      "591:                 if (commonParentsGroups.size() > 1) {",
      "592:                     possibleMergerList.add(new PossibleMerger(parent, resultKey));",
      "597:         private ExecutableNormalizedField createNF(CollectedFieldGroup collectedFieldGroup,",
      "598:                                                    int level,",
      "599:                                                    ExecutableNormalizedField parent) {",
      "601:             this.fieldCount++;",
      "602:             if (this.fieldCount > this.options.getMaxFieldsCount()) {",
      "603:                 throw new AbortExecutionException(\"Maximum field count exceeded. \" + this.fieldCount + \" > \" + this.options.getMaxFieldsCount());",
      "604:             }",
      "605:             Field field;",
      "606:             Set<GraphQLObjectType> objectTypes = collectedFieldGroup.objectTypes;",
      "607:             field = collectedFieldGroup.fields.iterator().next().field;",
      "608:             String fieldName = field.getName();",
      "609:             GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(graphQLSchema, objectTypes.iterator().next(), fieldName);",
      "611:             Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(fieldDefinition.getArguments(), field.getArguments(), CoercedVariables.of(this.coercedVariableValues.toMap()), this.options.graphQLContext, this.options.locale);",
      "612:             Map<String, NormalizedInputValue> normalizedArgumentValues = null;",
      "613:             if (this.normalizedVariableValues != null) {",
      "614:                 normalizedArgumentValues = ValuesResolver.getNormalizedArgumentValues(fieldDefinition.getArguments(), field.getArguments(), this.normalizedVariableValues);",
      "615:             }",
      "616:             ImmutableList<String> objectTypeNames = map(objectTypes, GraphQLObjectType::getName);",
      "617:             return ExecutableNormalizedField.newNormalizedField()",
      "618:                     .alias(field.getAlias())",
      "619:                     .resolvedArguments(argumentValues)",
      "620:                     .normalizedArguments(normalizedArgumentValues)",
      "621:                     .astArguments(field.getArguments())",
      "622:                     .objectTypeNames(objectTypeNames)",
      "623:                     .fieldName(fieldName)",
      "624:                     .level(level)",
      "625:                     .parent(parent)",
      "626:                     .build();",
      "627:         }",
      "629:         private List<CollectedFieldGroup> groupByCommonParents(Collection<CollectedField> fields) {",
      "630:             return groupByCommonParentsNoDeferSupport(fields);",
      "631:         }",
      "633:         private List<CollectedFieldGroup> groupByCommonParentsNoDeferSupport(Collection<CollectedField> fields) {",
      "634:             ImmutableSet.Builder<GraphQLObjectType> objectTypes = ImmutableSet.builder();",
      "635:             for (CollectedField collectedField : fields) {",
      "636:                 objectTypes.addAll(collectedField.objectTypes);",
      "637:             }",
      "638:             Set<GraphQLObjectType> allRelevantObjects = objectTypes.build();",
      "639:             Map<GraphQLType, ImmutableList<CollectedField>> groupByAstParent = groupingBy(fields, fieldAndType -> fieldAndType.astTypeCondition);",
      "640:             if (groupByAstParent.size() == 1) {",
      "641:                 return singletonList(new CollectedFieldGroup(ImmutableSet.copyOf(fields), allRelevantObjects));",
      "642:             }",
      "643:             ImmutableList.Builder<CollectedFieldGroup> result = ImmutableList.builder();",
      "644:             for (GraphQLObjectType objectType : allRelevantObjects) {",
      "645:                 Set<CollectedField> relevantFields = filterSet(fields, field -> field.objectTypes.contains(objectType));",
      "646:                 result.add(new CollectedFieldGroup(relevantFields, singleton(objectType)));",
      "647:             }",
      "648:             return result.build();",
      "649:         }",
      "651:         private void collectFromSelectionSet(SelectionSet selectionSet,",
      "652:                                              List<CollectedField> result,",
      "653:                                              GraphQLCompositeType astTypeCondition,",
      "654:                                              Set<GraphQLObjectType> possibleObjects",
      "655:         ) {",
      "656:             for (Selection<?> selection : selectionSet.getSelections()) {",
      "657:                 if (selection instanceof Field) {",
      "658:                     collectField(result, (Field) selection, possibleObjects, astTypeCondition);",
      "659:                 } else if (selection instanceof InlineFragment) {",
      "660:                     collectInlineFragment(result, (InlineFragment) selection, possibleObjects, astTypeCondition);",
      "661:                 } else if (selection instanceof FragmentSpread) {",
      "662:                     collectFragmentSpread(result, (FragmentSpread) selection, possibleObjects);",
      "663:                 }",
      "664:             }",
      "667:         private void collectFragmentSpread(List<CollectedField> result,",
      "668:                                            FragmentSpread fragmentSpread,",
      "669:                                            Set<GraphQLObjectType> possibleObjects",
      "670:         ) {",
      "671:             if (!conditionalNodes.shouldInclude(fragmentSpread,",
      "672:                     this.coercedVariableValues.toMap(),",
      "673:                     this.graphQLSchema,",
      "674:                     this.options.graphQLContext)) {",
      "675:                 return;",
      "676:             }",
      "677:             FragmentDefinition fragmentDefinition = assertNotNull(this.fragments.get(fragmentSpread.getName()));",
      "679:             if (!conditionalNodes.shouldInclude(fragmentDefinition,",
      "680:                     this.coercedVariableValues.toMap(),",
      "681:                     this.graphQLSchema,",
      "682:                     this.options.graphQLContext)) {",
      "683:                 return;",
      "685:             GraphQLCompositeType newAstTypeCondition = (GraphQLCompositeType) assertNotNull(this.graphQLSchema.getType(fragmentDefinition.getTypeCondition().getName()));",
      "686:             Set<GraphQLObjectType> newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition);",
      "688:             collectFromSelectionSet(fragmentDefinition.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
      "691:         private void collectInlineFragment(List<CollectedField> result,",
      "692:                                            InlineFragment inlineFragment,",
      "693:                                            Set<GraphQLObjectType> possibleObjects,",
      "694:                                            GraphQLCompositeType astTypeCondition",
      "695:         ) {",
      "696:             if (!conditionalNodes.shouldInclude(inlineFragment, this.coercedVariableValues.toMap(), this.graphQLSchema, this.options.graphQLContext)) {",
      "697:                 return;",
      "698:             }",
      "699:             Set<GraphQLObjectType> newPossibleObjects = possibleObjects;",
      "700:             GraphQLCompositeType newAstTypeCondition = astTypeCondition;",
      "702:             if (inlineFragment.getTypeCondition() != null) {",
      "703:                 newAstTypeCondition = (GraphQLCompositeType) this.graphQLSchema.getType(inlineFragment.getTypeCondition().getName());",
      "704:                 newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition);",
      "706:             }",
      "708:             collectFromSelectionSet(inlineFragment.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
      "711:         private void collectField(List<CollectedField> result,",
      "712:                                   Field field,",
      "713:                                   Set<GraphQLObjectType> possibleObjectTypes,",
      "714:                                   GraphQLCompositeType astTypeCondition",
      "715:         ) {",
      "716:             if (!conditionalNodes.shouldInclude(field,",
      "717:                     this.coercedVariableValues.toMap(),",
      "718:                     this.graphQLSchema,",
      "719:                     this.options.graphQLContext)) {",
      "720:                 return;",
      "721:             }",
      "723:             if (possibleObjectTypes.isEmpty()) {",
      "724:                 return;",
      "725:             }",
      "726:             result.add(new CollectedField(field, possibleObjectTypes, astTypeCondition));",
      "729:         private Set<GraphQLObjectType> narrowDownPossibleObjects(Set<GraphQLObjectType> currentOnes,",
      "730:                                                                  GraphQLCompositeType typeCondition) {",
      "732:             ImmutableSet<GraphQLObjectType> resolvedTypeCondition = resolvePossibleObjects(typeCondition);",
      "733:             if (currentOnes.isEmpty()) {",
      "734:                 return resolvedTypeCondition;",
      "735:             }",
      "738:             return intersection(currentOnes, resolvedTypeCondition);",
      "741:         private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(List<GraphQLFieldDefinition> defs) {",
      "742:             ImmutableSet.Builder<GraphQLObjectType> builder = ImmutableSet.builder();",
      "744:             for (GraphQLFieldDefinition def : defs) {",
      "745:                 GraphQLUnmodifiedType outputType = unwrapAll(def.getType());",
      "746:                 if (outputType instanceof GraphQLCompositeType) {",
      "747:                     builder.addAll(resolvePossibleObjects((GraphQLCompositeType) outputType));",
      "748:                 }",
      "749:             }",
      "751:             return builder.build();",
      "754:         private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(GraphQLCompositeType type) {",
      "755:             if (type instanceof GraphQLObjectType) {",
      "756:                 return ImmutableSet.of((GraphQLObjectType) type);",
      "757:             } else if (type instanceof GraphQLInterfaceType) {",
      "758:                 return ImmutableSet.copyOf(graphQLSchema.getImplementations((GraphQLInterfaceType) type));",
      "759:             } else if (type instanceof GraphQLUnionType) {",
      "760:                 List<GraphQLNamedOutputType> unionTypes = ((GraphQLUnionType) type).getTypes();",
      "761:                 return ImmutableSet.copyOf(ImmutableKit.map(unionTypes, GraphQLObjectType.class::cast));",
      "762:             } else {",
      "763:                 return assertShouldNeverHappen();",
      "764:             }",
      "767:         private static class PossibleMerger {",
      "768:             ExecutableNormalizedField parent;",
      "769:             String resultKey;",
      "771:             public PossibleMerger(ExecutableNormalizedField parent, String resultKey) {",
      "772:                 this.parent = parent;",
      "773:                 this.resultKey = resultKey;",
      "774:             }",
      "777:         private static class CollectedField {",
      "778:             Field field;",
      "779:             Set<GraphQLObjectType> objectTypes;",
      "780:             GraphQLCompositeType astTypeCondition;",
      "782:             public CollectedField(Field field, Set<GraphQLObjectType> objectTypes, GraphQLCompositeType astTypeCondition) {",
      "783:                 this.field = field;",
      "784:                 this.objectTypes = objectTypes;",
      "785:                 this.astTypeCondition = astTypeCondition;",
      "786:             }",
      "789:         public static class CollectNFResult {",
      "790:             private final Collection<ExecutableNormalizedField> children;",
      "791:             private final ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields;",
      "793:             public CollectNFResult(Collection<ExecutableNormalizedField> children, ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields) {",
      "794:                 this.children = children;",
      "795:                 this.normalizedFieldToAstFields = normalizedFieldToAstFields;",
      "796:             }",
      "797:         }",
      "799:         private static class FieldAndAstParent {",
      "800:             final Field field;",
      "801:             final GraphQLCompositeType astParentType;",
      "803:             private FieldAndAstParent(Field field, GraphQLCompositeType astParentType) {",
      "804:                 this.field = field;",
      "805:                 this.astParentType = astParentType;",
      "809:         private static class CollectedFieldGroup {",
      "810:             Set<GraphQLObjectType> objectTypes;",
      "811:             Set<CollectedField> fields;",
      "813:             public CollectedFieldGroup(Set<CollectedField> fields, Set<GraphQLObjectType> objectTypes) {",
      "814:                 this.fields = fields;",
      "815:                 this.objectTypes = objectTypes;",
      "816:             }",
      "820: }",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy": [
      "File: src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy -> src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "893:         given:",
      "894:         def graphQLSchema = createComplexSchema()",
      "896:         when:",
      "898:             {",
      "899:                 nodeType: __type(name: \"Node\") {",
      "900:                     possibleTypes {",
      "",
      "[Removed Lines]",
      "897:         def result = GraphQL.newGraphQL(graphQLSchema).build().execute(\"\"\"",
      "",
      "[Added Lines]",
      "896:         GraphQL graphQL = GraphQL.newGraphQL(graphQLSchema).build()",
      "899:         String query = \"\"\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "902:                         name",
      "903:                     }",
      "904:                 }",
      "906:                     possibleTypes {",
      "907:                         kind",
      "908:                         name",
      "",
      "[Removed Lines]",
      "905:                 resourceType: __type(name: \"Resource\") {",
      "",
      "[Added Lines]",
      "907:             }",
      "908:         \"\"\"",
      "909:         def result = graphQL.execute(query)",
      "911:         then:",
      "912:         !result.errors",
      "913:         result.data == [",
      "914:                 nodeType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']]],",
      "915:         ]",
      "917:         when:",
      "918:         query = \"\"\"",
      "919:         {",
      "920:             resourceType: __type(name: \"Resource\") {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "911:                         kind",
      "912:                         name",
      "913:                     }",
      "916:                     interfaces {",
      "917:                         kind",
      "918:                         name",
      "919:                     }",
      "920:                 }",
      "924:         then:",
      "925:         !result.errors",
      "926:         result.data == [",
      "928:                 imageType   : [interfaces: [[kind: 'INTERFACE', name: 'Resource'], [kind: 'INTERFACE', name: 'Node']]],",
      "930:         ]",
      "931:     }",
      "",
      "[Removed Lines]",
      "914:                 }",
      "915:                 imageType: __type(name: \"Image\") {",
      "921:             }",
      "922:         \"\"\")",
      "927:                 nodeType    : [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']]],",
      "929:                 resourceType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']], interfaces: [[kind: 'INTERFACE', name: 'Node']]]",
      "",
      "[Added Lines]",
      "929:                 }",
      "930:         }",
      "931:         \"\"\"",
      "932:         result = graphQL.execute(query)",
      "934:         then:",
      "935:         !result.errors",
      "936:         result.data == [",
      "937:                 resourceType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']], interfaces: [[kind: 'INTERFACE', name: 'Node']]]",
      "938:         ]",
      "940:         when:",
      "942:         query = \"\"\"",
      "943:         {",
      "944:             imageType: __type(name: \"Image\") {",
      "950:         }",
      "951:         \"\"\"",
      "952:         result = graphQL.execute(query)",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy": [
      "File: src/test/groovy/graphql/UnionTest.groovy -> src/test/groovy/graphql/UnionTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: class UnionTest extends Specification {",
      "8:         def query = \"\"\"",
      "9:             {",
      "10:                 Named: __type(name: \"Named\") {",
      "",
      "[Removed Lines]",
      "7:     def \"can introspect on union and intersection types\"() {",
      "",
      "[Added Lines]",
      "7:     def \"can introspect on union types\"() {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "15:                   possibleTypes { name }",
      "16:                   enumValues { name }",
      "17:                   inputFields { name }",
      "27:                 }",
      "28:             }",
      "29:             \"\"\"",
      "",
      "[Removed Lines]",
      "18:             }",
      "19:                 Pet: __type(name: \"Pet\") {",
      "20:                   kind",
      "21:                   name",
      "22:                   fields { name }",
      "23:                   interfaces { name }",
      "24:                   possibleTypes { name }",
      "25:                   enumValues { name }",
      "26:                   inputFields { name }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "42:                 ],",
      "43:                 enumValues   : null,",
      "44:                 inputFields  : null",
      "47:                                       kind         : 'UNION',",
      "48:                                       name         : 'Pet',",
      "49:                                       fields       : null,",
      "",
      "[Removed Lines]",
      "45:         ],",
      "46:                               Pet  : [",
      "",
      "[Added Lines]",
      "36:         ]]",
      "37:         when:",
      "38:         def executionResult = GraphQL.newGraphQL(GarfieldSchema.GarfieldSchema).build().execute(query)",
      "40:         then:",
      "41:         executionResult.data == expectedResult",
      "44:     }",
      "46:     def \"can introspect on intersection types\"() {",
      "47:         def query = \"\"\"",
      "48:             {",
      "49:                 Pet: __type(name: \"Pet\") {",
      "50:                   kind",
      "51:                   name",
      "52:                   fields { name }",
      "53:                   interfaces { name }",
      "54:                   possibleTypes { name }",
      "55:                   enumValues { name }",
      "56:                   inputFields { name }",
      "57:                 }",
      "58:             }",
      "59:             \"\"\"",
      "61:         def expectedResult = [Pet  : [",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy": [
      "File: src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy -> src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import graphql.ExecutionInput",
      "4: import graphql.ExecutionResult",
      "5: import graphql.TestUtil",
      "6: import spock.lang.Specification",
      "8: class GoodFaithIntrospectionInstrumentationTest extends Specification {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: import graphql.execution.AbortExecutionException",
      "7: import graphql.execution.CoercedVariables",
      "8: import graphql.language.Document",
      "9: import graphql.normalized.ExecutableNormalizedOperationFactory",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "12:     def setup() {",
      "13:         GoodFaithIntrospection.enabledJvmWide(true)",
      "14:     }",
      "15:     def cleanup() {",
      "16:         GoodFaithIntrospection.enabledJvmWide(true)",
      "17:     }",
      "19:     def \"test asking for introspection in good faith\"() {",
      "21:         when:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24:     def \"standard introspection query is inside limits just in general\"() {",
      "26:         when:",
      "27:         Document document = TestUtil.toDocument(IntrospectionQuery.INTROSPECTION_QUERY)",
      "28:         def eno = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphql.getGraphQLSchema(), document,",
      "29:                 \"IntrospectionQuery\", CoercedVariables.emptyVariables())",
      "31:         then:",
      "32:         eno.getOperationFieldCount() < GoodFaithIntrospection.GOOD_FAITH_MAX_FIELDS_COUNT  // currently 189",
      "33:         eno.getOperationDepth() < GoodFaithIntrospection.GOOD_FAITH_MAX_DEPTH_COUNT  // currently 13",
      "34:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "69:                 alias1 :  __type(name : \"t1\") { name }",
      "70:             }",
      "71:         \"\"\"                                                                                           | _",
      "73:         \"\"\" query badActor {",
      "74:                 __schema { types { name} }",
      "75:                 alias1 : __schema { types { name} }",
      "76:             }",
      "77:         \"\"\"                                                                                           | _",
      "78:     }",
      "80:     def \"mixed general queries and introspections will be stopped anyway\"() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "90:         \"\"\" query badActor {",
      "91:                 a1: __type(name : \"t\") { name }",
      "92:                 a2 :  __type(name : \"t1\") { name }",
      "93:             }",
      "94:         \"\"\"                                                                                           | _",
      "102:         \"\"\" query badActor {",
      "103:                 a1: __schema { types { name} }",
      "104:                 a2 : __schema { types { name} }",
      "105:             }",
      "106:         \"\"\"                                                                                           | _",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "133:         !er.errors.isEmpty()",
      "134:         er.errors[0] instanceof GoodFaithIntrospection.BadFaithIntrospectionError",
      "135:     }",
      "136: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "167:     def \"can stop deep queries\"() {",
      "169:         when:",
      "170:         def query = createDeepQuery(depth)",
      "171:         def then = System.currentTimeMillis()",
      "172:         ExecutionResult er = graphql.execute(query)",
      "173:         def ms = System.currentTimeMillis()-then",
      "175:         then:",
      "176:         !er.errors.isEmpty()",
      "177:         er.errors[0].class == targetError",
      "178:         er.data == null // it stopped hard - it did not continue to normal business",
      "179:         println \"Took \" + ms + \"ms\"",
      "181:         where:",
      "182:         depth | targetError",
      "183:         2     | GoodFaithIntrospection.BadFaithIntrospectionError.class",
      "184:         10    | AbortExecutionException.class",
      "185:         15    | AbortExecutionException.class",
      "186:         20    | AbortExecutionException.class",
      "187:         25    | AbortExecutionException.class",
      "188:         50    | AbortExecutionException.class",
      "189:         100    | AbortExecutionException.class",
      "190:     }",
      "192:     String createDeepQuery(int depth = 25) {",
      "193:         def result = \"\"\"",
      "194: query test {",
      "195:   __schema {",
      "196:     types {",
      "197:       ...F1",
      "198:     }",
      "199:   }",
      "200: }",
      "201: \"\"\"",
      "202:         for (int i = 1; i < depth; i++) {",
      "203:             result += \"\"\"",
      "204:         fragment F$i on __Type {",
      "205:           fields {",
      "206:             type {",
      "207:               ...F${i + 1}",
      "208:             }",
      "209:           }",
      "211:   ofType {",
      "212:     ...F${i + 1}",
      "213:   }",
      "214: }",
      "217: \"\"\"",
      "218:         }",
      "219:         result += \"\"\"",
      "220:         fragment F$depth on __Type {",
      "221:           fields {",
      "222:             type {",
      "223: name",
      "224:             }",
      "225:           }",
      "226: }",
      "229: \"\"\"",
      "230:         return result",
      "231:     }",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy": [
      "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import graphql.ExecutionInput",
      "4: import graphql.GraphQL",
      "5: import graphql.TestUtil",
      "6: import graphql.execution.CoercedVariables",
      "7: import graphql.execution.MergedField",
      "8: import graphql.execution.RawVariables",
      "9: import graphql.execution.directives.QueryAppliedDirective",
      "10: import graphql.language.Document",
      "11: import graphql.language.Field",
      "12: import graphql.language.FragmentDefinition",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: import graphql.execution.AbortExecutionException",
      "11: import graphql.introspection.IntrospectionQuery",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2875:         then:",
      "2876:         noExceptionThrown()",
      "2877:     }",
      "2878: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2881:     def \"big query exceeding fields count\"() {",
      "2882:         String schema = \"\"\"",
      "2883:         type Query {",
      "2884:             animal: Animal",
      "2885:         }",
      "2886:         interface Animal {",
      "2887:             name: String",
      "2888:             friends: [Friend]",
      "2889:         }",
      "2890:         union Pet = Dog | Cat",
      "2891:         type Friend {",
      "2892:             name: String",
      "2893:             isBirdOwner: Boolean",
      "2894:             isCatOwner: Boolean",
      "2895:             pets: [Pet]",
      "2896:         }",
      "2897:         type Bird implements Animal {",
      "2898:             name: String",
      "2899:             friends: [Friend]",
      "2900:         }",
      "2901:         type Cat implements Animal {",
      "2902:             name: String",
      "2903:             friends: [Friend]",
      "2904:             breed: String",
      "2905:         }",
      "2906:         type Dog implements Animal {",
      "2907:             name: String",
      "2908:             breed: String",
      "2909:             friends: [Friend]",
      "2910:         }",
      "2911:         \"\"\"",
      "2913:         def garbageFields = IntStream.range(0, 1000)",
      "2914:                 .mapToObj {",
      "2915:                     \"\"\"test_$it: friends { name }\"\"\"",
      "2916:                 }",
      "2917:                 .collect(Collectors.joining(\"\\n\"))",
      "2919:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2921:         String query = \"\"\"",
      "2922:         {",
      "2923:             animal {",
      "2924:                 name",
      "2925:                 otherName: name",
      "2926:                 ... on Animal {",
      "2927:                     name",
      "2928:                 }",
      "2929:                 ... on Cat {",
      "2930:                     name",
      "2931:                     friends {",
      "2932:                         ... on Friend {",
      "2933:                             isCatOwner",
      "2934:                             pets {",
      "2935:                                 ... on Dog {",
      "2936:                                     name",
      "2937:                                 }",
      "2938:                             }",
      "2939:                         }",
      "2940:                     }",
      "2941:                 }",
      "2942:                 ... on Bird {",
      "2943:                     friends {",
      "2944:                         isBirdOwner",
      "2945:                     }",
      "2946:                     friends {",
      "2947:                         name",
      "2948:                         pets {",
      "2949:                             ... on Cat {",
      "2950:                                 breed",
      "2951:                             }",
      "2952:                         }",
      "2953:                     }",
      "2954:                 }",
      "2955:                 ... on Dog {",
      "2956:                     name",
      "2957:                 }",
      "2958:                 $garbageFields",
      "2959:             }",
      "2960:         }",
      "2961:         \"\"\"",
      "2963:         assertValidQuery(graphQLSchema, query)",
      "2965:         Document document = TestUtil.parseQuery(query)",
      "2967:         when:",
      "2968:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "2969:                 graphQLSchema,",
      "2970:                 document,",
      "2971:                 null,",
      "2972:                 RawVariables.emptyVariables(),",
      "2973:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(2013))",
      "2975:         then:",
      "2976:         def e = thrown(AbortExecutionException)",
      "2977:         e.message == \"Maximum field count exceeded. 2014 > 2013\"",
      "2978:     }",
      "2980:     def \"small query exceeding fields count\"() {",
      "2981:         String schema = \"\"\"",
      "2982:         type Query {",
      "2983:             hello: String",
      "2984:         }",
      "2985:         \"\"\"",
      "2987:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2989:         String query = \"\"\" {hello a1: hello}\"\"\"",
      "2991:         assertValidQuery(graphQLSchema, query)",
      "2993:         Document document = TestUtil.parseQuery(query)",
      "2995:         when:",
      "2996:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "2997:                 graphQLSchema,",
      "2998:                 document,",
      "2999:                 null,",
      "3000:                 RawVariables.emptyVariables(),",
      "3001:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(1))",
      "3003:         then:",
      "3004:         def e = thrown(AbortExecutionException)",
      "3005:         e.message == \"Maximum field count exceeded. 2 > 1\"",
      "3008:     }",
      "3010:     def \"query not exceeding fields count\"() {",
      "3011:         String schema = \"\"\"",
      "3012:         type Query {",
      "3013:             dogs: [Dog]",
      "3014:         }",
      "3015:         type Dog {",
      "3016:             name: String",
      "3017:             breed: String",
      "3018:         }",
      "3019:         \"\"\"",
      "3021:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "3023:         String query = \"\"\" {dogs{name breed }}\"\"\"",
      "3025:         assertValidQuery(graphQLSchema, query)",
      "3027:         Document document = TestUtil.parseQuery(query)",
      "3029:         when:",
      "3030:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3031:                 graphQLSchema,",
      "3032:                 document,",
      "3033:                 null,",
      "3034:                 RawVariables.emptyVariables(),",
      "3035:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(3))",
      "3037:         then:",
      "3038:         notThrown(AbortExecutionException)",
      "3041:     }",
      "3043:     def \"query with meta fields exceeding fields count\"() {",
      "3044:         String schema = \"\"\"",
      "3045:         type Query {",
      "3046:             hello: String",
      "3047:         }",
      "3048:         \"\"\"",
      "3050:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "3052:         String query = IntrospectionQuery.INTROSPECTION_QUERY",
      "3054:         assertValidQuery(graphQLSchema, query)",
      "3056:         Document document = TestUtil.parseQuery(query)",
      "3058:         when:",
      "3059:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3060:                 graphQLSchema,",
      "3061:                 document,",
      "3062:                 null,",
      "3063:                 RawVariables.emptyVariables(),",
      "3064:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(188))",
      "3065:         println result.normalizedFieldToMergedField.size()",
      "3067:         then:",
      "3068:         def e = thrown(AbortExecutionException)",
      "3069:         e.message == \"Maximum field count exceeded. 189 > 188\"",
      "3070:     }",
      "3072:     def \"can capture depth and field count\"() {",
      "3073:         String schema = \"\"\"",
      "3074:         type Query {",
      "3075:             foo: Foo",
      "3076:         }",
      "3078:         type Foo {",
      "3079:             stop : String",
      "3080:             bar : Bar",
      "3081:         }",
      "3083:         type Bar {",
      "3084:             stop : String",
      "3085:             foo : Foo",
      "3086:         }",
      "3087:         \"\"\"",
      "3089:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "3091:         String query = \"{ foo { bar { foo { bar { foo { stop bar { stop }}}}}}}\"",
      "3093:         assertValidQuery(graphQLSchema, query)",
      "3095:         Document document = TestUtil.parseQuery(query)",
      "3097:         when:",
      "3098:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3099:                 graphQLSchema,",
      "3100:                 document,",
      "3101:                 null,",
      "3102:                 RawVariables.emptyVariables()",
      "3103:                 )",
      "3105:         then:",
      "3106:         result.getOperationDepth() == 7",
      "3107:         result.getOperationFieldCount() == 8",
      "3108:     }",
      "3110:     private static ExecutableNormalizedOperation localCreateExecutableNormalizedOperation(",
      "3111:             GraphQLSchema graphQLSchema,",
      "3112:             Document document,",
      "3113:             String operationName,",
      "3114:             CoercedVariables coercedVariableValues",
      "3115:     ) {",
      "3117:         def options = ExecutableNormalizedOperationFactory.Options.defaultOptions()",
      "3119:         return ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, operationName, coercedVariableValues, options)",
      "3120:     }",
      "3122:     private static ExecutableNormalizedOperation localCreateExecutableNormalizedOperationWithRawVariables(",
      "3123:             GraphQLSchema graphQLSchema,",
      "3124:             Document document,",
      "3125:             String operationName,",
      "3126:             RawVariables rawVariables",
      "3127:     ) {",
      "3129:         def options = ExecutableNormalizedOperationFactory.Options.defaultOptions()",
      "3131:         return ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3132:                 graphQLSchema,",
      "3133:                 document,",
      "3134:                 operationName,",
      "3135:                 rawVariables,",
      "3136:                 options",
      "3137:         )",
      "3138:     }",
      "",
      "---------------"
    ],
    "src/test/java/benchmark/BenchmarkUtils.java||src/test/java/benchmark/BenchmarkUtils.java": [
      "File: src/test/java/benchmark/BenchmarkUtils.java -> src/test/java/benchmark/BenchmarkUtils.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package benchmark;",
      "7: import java.net.URL;",
      "8: import java.nio.charset.Charset;",
      "9: import java.util.concurrent.Callable;",
      "11: public class BenchmarkUtils {",
      "",
      "[Removed Lines]",
      "3: import com.google.common.io.Files;",
      "4: import graphql.Assert;",
      "6: import java.io.File;",
      "",
      "[Added Lines]",
      "3: import java.io.BufferedReader;",
      "4: import java.io.IOException;",
      "5: import java.io.InputStream;",
      "6: import java.io.InputStreamReader;",
      "9: import java.time.LocalDateTime;",
      "10: import java.time.format.DateTimeFormatter;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "17:             if (resource == null) {",
      "18:                 throw new IllegalArgumentException(\"missing resource: \" + name);",
      "19:             }",
      "21:         });",
      "22:     }",
      "",
      "[Removed Lines]",
      "20:             return String.join(\"\\n\", Files.readLines(new File(resource.toURI()), Charset.defaultCharset()));",
      "",
      "[Added Lines]",
      "22:             byte[] bytes;",
      "23:             try (InputStream inputStream = resource.openStream()) {",
      "24:                 bytes = inputStream.readAllBytes();",
      "25:             }",
      "26:             return new String(bytes, Charset.defaultCharset());",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "29:         }",
      "30:     }",
      "",
      "[Removed Lines]",
      "32: }",
      "",
      "[Added Lines]",
      "38:     public static void runInToolingForSomeTimeThenExit(Runnable setup, Runnable r, Runnable tearDown) {",
      "39:         int runForMillis = getRunForMillis();",
      "40:         if (runForMillis <= 0) {",
      "41:             System.out.print(\"'runForMillis' environment var is not set - continuing  \\n\");",
      "42:             return;",
      "43:         }",
      "44:         System.out.printf(\"Running initial code in some tooling - runForMillis=%d  \\n\", runForMillis);",
      "45:         System.out.print(\"Get your tooling in order and press enter...\");",
      "46:         readLine();",
      "47:         System.out.print(\"Lets go...\\n\");",
      "48:         setup.run();",
      "50:         DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"HH:mm:ss\");",
      "51:         long now, then = System.currentTimeMillis();",
      "52:         do {",
      "53:             now = System.currentTimeMillis();",
      "54:             long msLeft = runForMillis - (now - then);",
      "55:             System.out.printf(\"\\t%s Running in loop... %s ms left\\n\", dtf.format(LocalDateTime.now()), msLeft);",
      "56:             r.run();",
      "57:             now = System.currentTimeMillis();",
      "58:         } while ((now - then) < runForMillis);",
      "60:         tearDown.run();",
      "62:         System.out.printf(\"This ran for %d millis.  Exiting...\\n\", System.currentTimeMillis() - then);",
      "63:         System.exit(0);",
      "64:     }",
      "66:     private static void readLine() {",
      "67:         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));",
      "68:         try {",
      "69:             br.readLine();",
      "70:         } catch (IOException e) {",
      "71:             throw new RuntimeException(e);",
      "72:         }",
      "73:     }",
      "75:     private static int getRunForMillis() {",
      "76:         String runFor = System.getenv(\"runForMillis\");",
      "77:         try {",
      "78:             return Integer.parseInt(runFor);",
      "79:         } catch (NumberFormatException e) {",
      "80:             return -1;",
      "81:         }",
      "82:     }",
      "84: }",
      "",
      "---------------"
    ],
    "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java": [
      "File: src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java -> src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package benchmark;",
      "3: import graphql.execution.CoercedVariables;",
      "4: import graphql.language.Document;",
      "5: import graphql.normalized.ExecutableNormalizedOperation;",
      "6: import graphql.normalized.ExecutableNormalizedOperationFactory;",
      "7: import graphql.parser.Parser;",
      "8: import graphql.schema.GraphQLSchema;",
      "9: import graphql.schema.idl.SchemaGenerator;",
      "10: import org.openjdk.jmh.annotations.Benchmark;",
      "11: import org.openjdk.jmh.annotations.BenchmarkMode;",
      "12: import org.openjdk.jmh.annotations.Fork;",
      "13: import org.openjdk.jmh.annotations.Level;",
      "14: import org.openjdk.jmh.annotations.Measurement;",
      "15: import org.openjdk.jmh.annotations.Mode;",
      "16: import org.openjdk.jmh.annotations.OutputTimeUnit;",
      "17: import org.openjdk.jmh.annotations.Param;",
      "18: import org.openjdk.jmh.annotations.Scope;",
      "19: import org.openjdk.jmh.annotations.Setup;",
      "20: import org.openjdk.jmh.annotations.State;",
      "21: import org.openjdk.jmh.annotations.Warmup;",
      "22: import org.openjdk.jmh.runner.Runner;",
      "23: import org.openjdk.jmh.runner.RunnerException;",
      "24: import org.openjdk.jmh.runner.options.Options;",
      "25: import org.openjdk.jmh.runner.options.OptionsBuilder;",
      "27: import java.util.concurrent.TimeUnit;",
      "29: import static graphql.normalized.ExecutableNormalizedOperationFactory.*;",
      "31: @State(Scope.Benchmark)",
      "32: @Warmup(iterations = 2, time = 5)",
      "33: @Measurement(iterations = 3, time = 5)",
      "34: @Fork(2)",
      "35: public class ENFBenchmarkDeepIntrospection {",
      "37:     @Param({\"2\", \"10\", \"20\"})",
      "38:     int howDeep = 2;",
      "40:     String query = \"\";",
      "42:     GraphQLSchema schema;",
      "43:     Document document;",
      "45:     @Setup(Level.Trial)",
      "46:     public void setUp() {",
      "47:         String schemaString = BenchmarkUtils.loadResource(\"large-schema-2.graphqls\");",
      "48:         schema = SchemaGenerator.createdMockedSchema(schemaString);",
      "50:         query = createDeepQuery(howDeep);",
      "51:         document = Parser.parse(query);",
      "52:     }",
      "53:     @Benchmark",
      "54:     @BenchmarkMode(Mode.AverageTime)",
      "55:     @OutputTimeUnit(TimeUnit.MILLISECONDS)",
      "56:     public ExecutableNormalizedOperation benchMarkAvgTime() {",
      "57:         ExecutableNormalizedOperationFactory.Options options  = ExecutableNormalizedOperationFactory.Options.defaultOptions();",
      "58:         ExecutableNormalizedOperation executableNormalizedOperation = createExecutableNormalizedOperation(schema,",
      "59:                 document,",
      "60:                 null,",
      "61:                 CoercedVariables.emptyVariables(),",
      "62:                 options);",
      "63:         return executableNormalizedOperation;",
      "64:     }",
      "66:     public static void main(String[] args) throws RunnerException {",
      "67:         runAtStartup();",
      "69:         Options opt = new OptionsBuilder()",
      "70:                 .include(\"benchmark.ENFBenchmarkDeepIntrospection\")",
      "71:                 .build();",
      "73:         new Runner(opt).run();",
      "74:     }",
      "76:     private static void runAtStartup() {",
      "78:         ENFBenchmarkDeepIntrospection benchmarkIntrospection = new ENFBenchmarkDeepIntrospection();",
      "79:         benchmarkIntrospection.howDeep = 2;",
      "81:         BenchmarkUtils.runInToolingForSomeTimeThenExit(",
      "82:                 benchmarkIntrospection::setUp,",
      "83:                 () -> { while (true) { benchmarkIntrospection.benchMarkAvgTime(); }},",
      "84:                 () ->{}",
      "85:         );",
      "86:     }",
      "90:     private static String createDeepQuery(int depth) {",
      "91:         String result = \"query test {\\n\" +",
      "92:                 \"  __schema {\\n\" +",
      "93:                 \"    types {\\n\" +",
      "94:                 \"      ...F1\\n\" +",
      "95:                 \"    }\\n\" +",
      "96:                 \"  }\\n\" +",
      "97:                 \"}\\n\";",
      "99:         for (int i = 1; i < depth; i++) {",
      "100:             result += \"        fragment F\" + i + \" on __Type {\\n\" +",
      "101:                     \"          fields {\\n\" +",
      "102:                     \"            type {\\n\" +",
      "103:                     \"              ...F\" + (i + 1) +\"\\n\" +",
      "104:                     \"            }\\n\" +",
      "105:                     \"          }\\n\" +",
      "106:                     \"\\n\" +",
      "107:                     \"          ofType {\\n\" +",
      "108:                     \"            ...F\"+ (i + 1) + \"\\n\" +",
      "109:                     \"          }\\n\" +",
      "110:                     \"        }\\n\";",
      "111:         }",
      "112:         result += \"        fragment F\" + depth + \" on __Type {\\n\" +",
      "113:                 \"          fields {\\n\" +",
      "114:                 \"            type {\\n\" +",
      "115:                 \"name\\n\" +",
      "116:                 \"            }\\n\" +",
      "117:                 \"          }\\n\" +",
      "118:                 \"}\\n\";",
      "119:         return result;",
      "120:     }",
      "122: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "117fa4135122738181cd608c201569c3a6cfa49f",
      "candidate_info": {
        "commit_hash": "117fa4135122738181cd608c201569c3a6cfa49f",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/117fa4135122738181cd608c201569c3a6cfa49f",
        "files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
        ],
        "message": "The ability to get query directives in ENF land - tweaks and more tests",
        "before_after_code_files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
            "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
          ],
          "candidate": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
            "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java": [
          "File: src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:                                                                     OperationDefinition operationDefinition,",
          "116:                                                                     Map<String, FragmentDefinition> fragments,",
          "117:                                                                     CoercedVariables coercedVariableValues,",
          "119:         FieldCollectorNormalizedQueryParams parameters = FieldCollectorNormalizedQueryParams",
          "120:                 .newParameters()",
          "121:                 .fragments(fragments)",
          "",
          "[Removed Lines]",
          "118:                                                                     @Nullable Map<String, NormalizedInputValue> normalizedVariableValues) {",
          "",
          "[Added Lines]",
          "118:                                                                     @Nullable Map<String, NormalizedInputValue> normalizedVariableValues,",
          "119:                                                                     GraphQLContext graphQLContext, Locale locale) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:         BiConsumer<ExecutableNormalizedField, MergedField> captureMergedField = (enf, mergedFld) -> {",
          "139:             normalizedFieldToQueryDirectives.put(enf, queryDirectives);",
          "140:             normalizedFieldToMergedField.put(enf, mergedFld);",
          "141:         };",
          "",
          "[Removed Lines]",
          "138:             QueryDirectives queryDirectives = new QueryDirectivesImpl(mergedFld, graphQLSchema, coercedVariableValues.toMap(), graphqlContext, locale);",
          "",
          "[Added Lines]",
          "139:             QueryDirectives queryDirectives = new QueryDirectivesImpl(mergedFld, graphQLSchema, coercedVariableValues.toMap(), graphQLContext, locale);",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy": [
          "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "909:                 def fieldDetails = queryExecutionField.printDetails()",
          "910:                 if (queryDirectives != null) {",
          "911:                     def appliedDirectivesByName = queryDirectives.getImmediateAppliedDirectivesByName()",
          "914:                 }",
          "915:                 result << fieldDetails",
          "916:                 return TraversalControl.CONTINUE",
          "",
          "[Removed Lines]",
          "913:                     fieldDetails += \" \" + printDirectives(appliedDirectivesByName)",
          "",
          "[Added Lines]",
          "912:                     if (!appliedDirectivesByName.isEmpty()) {",
          "913:                         fieldDetails += \" \" + printDirectives(appliedDirectivesByName)",
          "914:                     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "920:                 String s = stringListMap.collect { entry ->",
          "921:                     entry.value.collect {",
          "922:                         \" @\" + it.name + \"(\" + it.getArguments().collect {",
          "924:                         }.join(\",\") + \")\"",
          "925:                     }.join(' ')",
          "926:                 }.join(\" \")",
          "",
          "[Removed Lines]",
          "923:                             it.name + it.value",
          "",
          "[Added Lines]",
          "924:                             it.name + \" : \" + '\"' + it.value + '\"'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2423:         given:",
          "2424:         String schema = \"\"\"",
          "2425:         directive @fieldDirective(target : String!) on FIELD",
          "2427:         type Query {",
          "2428:           pets: Pet",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2427:         directive @fieldXDirective(target : String!) on FIELD",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2446:                     cName : name @fieldDirective(target : \"Cat.name\")",
          "2447:               }",
          "2448:                 ... on Dog {",
          "2450:               }",
          "2451:               ... on Pet {",
          "2452:                     pName : name @fieldDirective(target : \"Pet.name\")",
          "",
          "[Removed Lines]",
          "2449:                     dName : name @fieldDirective(target : \"Dog.name\")",
          "",
          "[Added Lines]",
          "2451:                     dName : name @fieldDirective(target : \"Dog.name\") @fieldXDirective(target : \"Dog.name\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2465:         then:",
          "2466:         printedTree == ['Query.pets',",
          "2471:         ]",
          "2472:     }",
          "",
          "[Removed Lines]",
          "2467:                         'cName: Cat.name  @fieldDirective(targetCat.name)',",
          "2468:                         'dName: Dog.name  @fieldDirective(targetDog.name)',",
          "2469:                         'pName: [Cat, Dog].name  @fieldDirective(targetPet.name)',",
          "",
          "[Added Lines]",
          "2469:                         'cName: Cat.name  @fieldDirective(target : \"Cat.name\")',",
          "2470:                         'dName: Dog.name  @fieldDirective(target : \"Dog.name\")  @fieldXDirective(target : \"Dog.name\")',",
          "2471:                         'pName: [Cat, Dog].name  @fieldDirective(target : \"Pet.name\")',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "247df24471aac68cb79c3d0e80efcd8bf5052159",
      "candidate_info": {
        "commit_hash": "247df24471aac68cb79c3d0e80efcd8bf5052159",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/247df24471aac68cb79c3d0e80efcd8bf5052159",
        "files": [
          "src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java",
          "src/main/java/graphql/analysis/QueryTransformer.java",
          "src/main/java/graphql/analysis/QueryTraversalContext.java",
          "src/main/java/graphql/analysis/QueryTraverser.java",
          "src/main/java/graphql/execution/ConditionalNodes.java",
          "src/main/java/graphql/execution/Execution.java",
          "src/main/java/graphql/execution/FieldCollector.java",
          "src/main/java/graphql/execution/FieldCollectorParameters.java",
          "src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java",
          "src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java",
          "src/main/java/graphql/execution/conditional/ConditionalNodes.java",
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/test/groovy/graphql/execution/ConditionalNodesTest.groovy"
        ],
        "message": "Allow pluggable conditional node support",
        "before_after_code_files": [
          "src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java||src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java",
          "src/main/java/graphql/analysis/QueryTransformer.java||src/main/java/graphql/analysis/QueryTransformer.java",
          "src/main/java/graphql/analysis/QueryTraversalContext.java||src/main/java/graphql/analysis/QueryTraversalContext.java",
          "src/main/java/graphql/analysis/QueryTraverser.java||src/main/java/graphql/analysis/QueryTraverser.java",
          "src/main/java/graphql/execution/ConditionalNodes.java||src/main/java/graphql/execution/ConditionalNodes.java",
          "src/main/java/graphql/execution/Execution.java||src/main/java/graphql/execution/Execution.java",
          "src/main/java/graphql/execution/FieldCollector.java||src/main/java/graphql/execution/FieldCollector.java",
          "src/main/java/graphql/execution/FieldCollectorParameters.java||src/main/java/graphql/execution/FieldCollectorParameters.java",
          "src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java||src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java",
          "src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java||src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java",
          "src/main/java/graphql/execution/conditional/ConditionalNodes.java||src/main/java/graphql/execution/conditional/ConditionalNodes.java",
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/test/groovy/graphql/execution/ConditionalNodesTest.groovy||src/test/groovy/graphql/execution/ConditionalNodesTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java"
          ],
          "candidate": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java||src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java": [
          "File: src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java -> src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import graphql.GraphQLContext;",
          "4: import graphql.Internal;",
          "5: import graphql.execution.CoercedVariables;",
          "7: import graphql.execution.ValuesResolver;",
          "8: import graphql.introspection.Introspection;",
          "9: import graphql.language.Argument;",
          "10: import graphql.language.Directive;",
          "",
          "[Removed Lines]",
          "6: import graphql.execution.ConditionalNodes;",
          "",
          "[Added Lines]",
          "7: import graphql.execution.conditional.ConditionalNodes;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:     @Override",
          "70:     public TraversalControl visitInlineFragment(InlineFragment inlineFragment, TraverserContext<Node> context) {",
          "72:             return TraversalControl.ABORT;",
          "73:         }",
          "",
          "[Removed Lines]",
          "71:         if (!conditionalNodes.shouldInclude(variables, inlineFragment.getDirectives())) {",
          "",
          "[Added Lines]",
          "71:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
          "72:         GraphQLContext graphQLContext = parentEnv.getGraphQLContext();",
          "73:         if (!conditionalNodes.shouldInclude(variables, inlineFragment, graphQLContext)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82:         preOrderCallback.visitInlineFragment(inlineFragmentEnvironment);",
          "87:         GraphQLCompositeType fragmentCondition;",
          "88:         if (inlineFragment.getTypeCondition() != null) {",
          "",
          "[Removed Lines]",
          "85:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "92:             fragmentCondition = parentEnv.getUnwrappedOutputType();",
          "93:         }",
          "96:         return TraversalControl.CONTINUE;",
          "97:     }",
          "99:     @Override",
          "102:             return TraversalControl.ABORT;",
          "103:         }",
          "107:         if (context.getPhase() == LEAVE) {",
          "108:             postOrderCallback.visitFragmentDefinition(fragmentEnvironment);",
          "",
          "[Removed Lines]",
          "95:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(fragmentCondition, parentEnv.getEnvironment(), inlineFragment));",
          "100:     public TraversalControl visitFragmentDefinition(FragmentDefinition node, TraverserContext<Node> context) {",
          "101:         if (!conditionalNodes.shouldInclude(variables, node.getDirectives())) {",
          "105:         QueryVisitorFragmentDefinitionEnvironment fragmentEnvironment = new QueryVisitorFragmentDefinitionEnvironmentImpl(node, context, schema);",
          "",
          "[Added Lines]",
          "96:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(fragmentCondition, parentEnv.getEnvironment(), inlineFragment, graphQLContext));",
          "101:     public TraversalControl visitFragmentDefinition(FragmentDefinition fragmentDefinition, TraverserContext<Node> context) {",
          "102:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
          "103:         GraphQLContext graphQLContext = parentEnv.getGraphQLContext();",
          "104:         if (!conditionalNodes.shouldInclude(variables, fragmentDefinition, graphQLContext)) {",
          "108:         QueryVisitorFragmentDefinitionEnvironment fragmentEnvironment = new QueryVisitorFragmentDefinitionEnvironmentImpl(fragmentDefinition, context, schema);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "110:         }",
          "111:         preOrderCallback.visitFragmentDefinition(fragmentEnvironment);",
          "116:         return TraversalControl.CONTINUE;",
          "117:     }",
          "119:     @Override",
          "120:     public TraversalControl visitFragmentSpread(FragmentSpread fragmentSpread, TraverserContext<Node> context) {",
          "122:             return TraversalControl.ABORT;",
          "123:         }",
          "125:         FragmentDefinition fragmentDefinition = fragmentsByName.get(fragmentSpread.getName());",
          "127:             return TraversalControl.ABORT;",
          "128:         }",
          "",
          "[Removed Lines]",
          "113:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
          "114:         GraphQLCompositeType typeCondition = (GraphQLCompositeType) schema.getType(node.getTypeCondition().getName());",
          "115:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(typeCondition, parentEnv.getEnvironment(), node));",
          "121:         if (!conditionalNodes.shouldInclude(variables, fragmentSpread.getDirectives())) {",
          "126:         if (!conditionalNodes.shouldInclude(variables, fragmentDefinition.getDirectives())) {",
          "",
          "[Added Lines]",
          "116:         GraphQLCompositeType typeCondition = (GraphQLCompositeType) schema.getType(fragmentDefinition.getTypeCondition().getName());",
          "117:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(typeCondition, parentEnv.getEnvironment(), fragmentDefinition, graphQLContext));",
          "123:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
          "124:         GraphQLContext graphQLContext = parentEnv.getGraphQLContext();",
          "125:         if (!conditionalNodes.shouldInclude(variables, fragmentSpread, graphQLContext)) {",
          "130:         if (!conditionalNodes.shouldInclude(variables, fragmentDefinition, graphQLContext)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "136:         preOrderCallback.visitFragmentSpread(fragmentSpreadEnvironment);",
          "140:         GraphQLCompositeType typeCondition = (GraphQLCompositeType) schema.getType(fragmentDefinition.getTypeCondition().getName());",
          "141:         assertNotNull(typeCondition,",
          "142:                 () -> format(\"Invalid type condition '%s' in fragment '%s'\", fragmentDefinition.getTypeCondition().getName(),",
          "143:                         fragmentDefinition.getName()));",
          "145:         return TraversalControl.CONTINUE;",
          "146:     }",
          "148:     @Override",
          "149:     public TraversalControl visitField(Field field, TraverserContext<Node> context) {",
          "150:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
          "152:         GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(schema, (GraphQLCompositeType) unwrapAll(parentEnv.getOutputType()), field.getName());",
          "153:         boolean isTypeNameIntrospectionField = fieldDefinition == schema.getIntrospectionTypenameFieldDefinition();",
          "",
          "[Removed Lines]",
          "138:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
          "144:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(typeCondition, parentEnv.getEnvironment(), fragmentDefinition));",
          "",
          "[Added Lines]",
          "147:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(typeCondition, parentEnv.getEnvironment(), fragmentDefinition, graphQLContext));",
          "154:         GraphQLContext graphQLContext = parentEnv.getGraphQLContext();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "174:             return TraversalControl.CONTINUE;",
          "175:         }",
          "178:             return TraversalControl.ABORT;",
          "179:         }",
          "",
          "[Removed Lines]",
          "177:         if (!conditionalNodes.shouldInclude(variables, field.getDirectives())) {",
          "",
          "[Added Lines]",
          "181:         if (!conditionalNodes.shouldInclude(variables, field, graphQLContext)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "183:         GraphQLUnmodifiedType unmodifiedType = unwrapAll(fieldDefinition.getType());",
          "184:         QueryTraversalContext fieldEnv = (unmodifiedType instanceof GraphQLCompositeType)",
          "189:         context.setVar(QueryTraversalContext.class, fieldEnv);",
          "",
          "[Removed Lines]",
          "185:                 ? new QueryTraversalContext(fieldDefinition.getType(), environment, field)",
          "186:                 : new QueryTraversalContext(null, environment, field);// Terminal (scalar) node, EMPTY FRAME",
          "",
          "[Added Lines]",
          "189:                 ? new QueryTraversalContext(fieldDefinition.getType(), environment, field, graphQLContext)",
          "190:                 : new QueryTraversalContext(null, environment, field, graphQLContext);// Terminal (scalar) node, EMPTY FRAME",
          "",
          "---------------"
        ],
        "src/main/java/graphql/analysis/QueryTransformer.java||src/main/java/graphql/analysis/QueryTransformer.java": [
          "File: src/main/java/graphql/analysis/QueryTransformer.java -> src/main/java/graphql/analysis/QueryTransformer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package graphql.analysis;",
          "3: import graphql.PublicApi;",
          "4: import graphql.language.FragmentDefinition;",
          "5: import graphql.language.Node;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import graphql.GraphQLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:         NodeVisitorWithTypeTracking nodeVisitor = new NodeVisitorWithTypeTracking(queryVisitor, noOp, variables, schema, fragmentsByName);",
          "69:         Map<Class<?>, Object> rootVars = new LinkedHashMap<>();",
          "72:         TraverserVisitor<Node> nodeTraverserVisitor = new TraverserVisitor<Node>() {",
          "",
          "[Removed Lines]",
          "70:         rootVars.put(QueryTraversalContext.class, new QueryTraversalContext(rootParentType, null, null));",
          "",
          "[Added Lines]",
          "71:         rootVars.put(QueryTraversalContext.class, new QueryTraversalContext(rootParentType, null, null, GraphQLContext.getDefault()));",
          "",
          "---------------"
        ],
        "src/main/java/graphql/analysis/QueryTraversalContext.java||src/main/java/graphql/analysis/QueryTraversalContext.java": [
          "File: src/main/java/graphql/analysis/QueryTraversalContext.java -> src/main/java/graphql/analysis/QueryTraversalContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package graphql.analysis;",
          "3: import graphql.Internal;",
          "4: import graphql.language.SelectionSetContainer;",
          "5: import graphql.schema.GraphQLCompositeType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import graphql.GraphQLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:     private final GraphQLOutputType outputType;",
          "18:     private final QueryVisitorFieldEnvironment environment;",
          "21:     QueryTraversalContext(GraphQLOutputType outputType,",
          "22:                           QueryVisitorFieldEnvironment environment,",
          "24:         this.outputType = outputType;",
          "25:         this.environment = environment;",
          "26:         this.selectionSetContainer = selectionSetContainer;",
          "27:     }",
          "29:     public GraphQLOutputType getOutputType() {",
          "",
          "[Removed Lines]",
          "19:     private final SelectionSetContainer selectionSetContainer;",
          "23:                           SelectionSetContainer selectionSetContainer) {",
          "",
          "[Added Lines]",
          "20:     private final SelectionSetContainer<?> selectionSetContainer;",
          "21:     private final GraphQLContext graphQLContext;",
          "25:                           SelectionSetContainer<?> selectionSetContainer,",
          "26:                           GraphQLContext graphQLContext) {",
          "30:         this.graphQLContext = graphQLContext;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "34:         return (GraphQLCompositeType) GraphQLTypeUtil.unwrapAll(outputType);",
          "35:     }",
          "38:     public QueryVisitorFieldEnvironment getEnvironment() {",
          "39:         return environment;",
          "40:     }",
          "44:         return selectionSetContainer;",
          "45:     }",
          "46: }",
          "",
          "[Removed Lines]",
          "42:     public SelectionSetContainer getSelectionSetContainer() {",
          "",
          "[Added Lines]",
          "45:     public SelectionSetContainer<?> getSelectionSetContainer() {",
          "49:     public GraphQLContext getGraphQLContext() {",
          "50:         return graphQLContext;",
          "51:     }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/analysis/QueryTraverser.java||src/main/java/graphql/analysis/QueryTraverser.java": [
          "File: src/main/java/graphql/analysis/QueryTraverser.java -> src/main/java/graphql/analysis/QueryTraverser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:     private Object visitImpl(QueryVisitor visitFieldCallback, Boolean preOrder) {",
          "179:         Map<Class<?>, Object> rootVars = new LinkedHashMap<>();",
          "182:         QueryVisitor preOrderCallback;",
          "183:         QueryVisitor postOrderCallback;",
          "",
          "[Removed Lines]",
          "180:         rootVars.put(QueryTraversalContext.class, new QueryTraversalContext(rootParentType, null, null));",
          "",
          "[Added Lines]",
          "180:         rootVars.put(QueryTraversalContext.class, new QueryTraversalContext(rootParentType, null, null, GraphQLContext.getDefault()));",
          "",
          "---------------"
        ],
        "src/main/java/graphql/execution/ConditionalNodes.java||src/main/java/graphql/execution/ConditionalNodes.java": [
          "File: src/main/java/graphql/execution/ConditionalNodes.java -> src/main/java/graphql/execution/ConditionalNodes.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main/java/graphql/execution/Execution.java||src/main/java/graphql/execution/Execution.java": [
          "File: src/main/java/graphql/execution/Execution.java -> src/main/java/graphql/execution/Execution.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:                 .schema(executionContext.getGraphQLSchema())",
          "135:                 .objectType(operationRootType)",
          "136:                 .fragments(executionContext.getFragmentsByName())",
          "138:                 .build();",
          "140:         MergedSelectionSet fields = fieldCollector.collectFields(collectorParameters, operationDefinition.getSelectionSet());",
          "",
          "[Removed Lines]",
          "137:                 .variables(executionContext.getVariables())",
          "",
          "[Added Lines]",
          "137:                 .variables(executionContext.getCoercedVariables().toMap())",
          "138:                 .graphQLContext(graphQLContext)",
          "",
          "---------------"
        ],
        "src/main/java/graphql/execution/FieldCollector.java||src/main/java/graphql/execution/FieldCollector.java": [
          "File: src/main/java/graphql/execution/FieldCollector.java -> src/main/java/graphql/execution/FieldCollector.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import graphql.Internal;",
          "5: import graphql.language.Field;",
          "6: import graphql.language.FragmentDefinition;",
          "7: import graphql.language.FragmentSpread;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import graphql.execution.conditional.ConditionalNodes;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:         if (visitedFragments.contains(fragmentSpread.getName())) {",
          "77:             return;",
          "78:         }",
          "80:             return;",
          "81:         }",
          "82:         visitedFragments.add(fragmentSpread.getName());",
          "83:         FragmentDefinition fragmentDefinition = parameters.getFragmentsByName().get(fragmentSpread.getName());",
          "86:             return;",
          "87:         }",
          "88:         if (!doesFragmentConditionMatch(parameters, fragmentDefinition)) {",
          "",
          "[Removed Lines]",
          "79:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), fragmentSpread.getDirectives())) {",
          "85:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), fragmentDefinition.getDirectives())) {",
          "",
          "[Added Lines]",
          "80:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), fragmentSpread, parameters.getGraphQLContext())) {",
          "86:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), fragmentDefinition, parameters.getGraphQLContext())) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:     }",
          "94:     private void collectInlineFragment(FieldCollectorParameters parameters, Set<String> visitedFragments, Map<String, MergedField> fields, InlineFragment inlineFragment) {",
          "96:                 !doesFragmentConditionMatch(parameters, inlineFragment)) {",
          "97:             return;",
          "98:         }",
          "",
          "[Removed Lines]",
          "95:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), inlineFragment.getDirectives()) ||",
          "",
          "[Added Lines]",
          "96:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), inlineFragment, parameters.getGraphQLContext()) ||",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:     }",
          "102:     private void collectField(FieldCollectorParameters parameters, Map<String, MergedField> fields, Field field) {",
          "104:             return;",
          "105:         }",
          "106:         String name = field.getResultKey();",
          "",
          "[Removed Lines]",
          "103:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), field.getDirectives())) {",
          "",
          "[Added Lines]",
          "104:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), field, parameters.getGraphQLContext())) {",
          "",
          "---------------"
        ],
        "src/main/java/graphql/execution/FieldCollectorParameters.java||src/main/java/graphql/execution/FieldCollectorParameters.java": [
          "File: src/main/java/graphql/execution/FieldCollectorParameters.java -> src/main/java/graphql/execution/FieldCollectorParameters.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package graphql.execution;",
          "3: import graphql.Assert;",
          "4: import graphql.Internal;",
          "5: import graphql.language.FragmentDefinition;",
          "6: import graphql.schema.GraphQLObjectType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import graphql.GraphQLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:     private final Map<String, FragmentDefinition> fragmentsByName;",
          "18:     private final Map<String, Object> variables;",
          "19:     private final GraphQLObjectType objectType;",
          "21:     public GraphQLSchema getGraphQLSchema() {",
          "22:         return graphQLSchema;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:     private final GraphQLContext graphQLContext;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "34:         return objectType;",
          "35:     }",
          "42:     }",
          "44:     public static Builder newParameters() {",
          "",
          "[Removed Lines]",
          "37:     private FieldCollectorParameters(GraphQLSchema graphQLSchema, Map<String, Object> variables, Map<String, FragmentDefinition> fragmentsByName, GraphQLObjectType objectType) {",
          "38:         this.fragmentsByName = fragmentsByName;",
          "39:         this.graphQLSchema = graphQLSchema;",
          "40:         this.variables = variables;",
          "41:         this.objectType = objectType;",
          "",
          "[Added Lines]",
          "39:     public GraphQLContext getGraphQLContext() {",
          "40:         return graphQLContext;",
          "41:     }",
          "43:     private FieldCollectorParameters(Builder builder) {",
          "44:         this.fragmentsByName = builder.fragmentsByName;",
          "45:         this.graphQLSchema = builder.graphQLSchema;",
          "46:         this.variables = builder.variables;",
          "47:         this.objectType = builder.objectType;",
          "48:         this.graphQLContext = builder.graphQLContext;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "50:         private Map<String, FragmentDefinition> fragmentsByName;",
          "51:         private Map<String, Object> variables;",
          "52:         private GraphQLObjectType objectType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:         private GraphQLContext graphQLContext = GraphQLContext.getDefault();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "68:             return this;",
          "69:         }",
          "71:         public Builder fragments(Map<String, FragmentDefinition> fragmentsByName) {",
          "72:             this.fragmentsByName = fragmentsByName;",
          "73:             return this;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:         public Builder graphQLContext(GraphQLContext graphQLContext) {",
          "80:             this.graphQLContext = graphQLContext;",
          "81:             return this;",
          "82:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "81:         public FieldCollectorParameters build() {",
          "82:             Assert.assertNotNull(graphQLSchema, () -> \"You must provide a schema\");",
          "84:         }",
          "86:     }",
          "",
          "[Removed Lines]",
          "83:             return new FieldCollectorParameters(graphQLSchema, variables, fragmentsByName, objectType);",
          "",
          "[Added Lines]",
          "96:             return new FieldCollectorParameters(this);",
          "",
          "---------------"
        ],
        "src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java||src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java": [
          "File: src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java -> src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package graphql.execution.conditional;",
          "3: import graphql.ExperimentalApi;",
          "11: @ExperimentalApi",
          "12: public interface ConditionalNodeDecision {",
          "21:     boolean shouldInclude(ConditionalNodeDecisionEnvironment decisionEnv);",
          "22: }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java||src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java": [
          "File: src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java -> src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package graphql.execution.conditional;",
          "3: import graphql.GraphQLContext;",
          "4: import graphql.execution.CoercedVariables;",
          "5: import graphql.language.Directive;",
          "6: import graphql.language.DirectivesContainer;",
          "8: import java.util.List;",
          "13: public interface ConditionalNodeDecisionEnvironment {",
          "23:     DirectivesContainer<?> getDirectivesContainer();",
          "28:     default List<Directive> getDirectives() {",
          "29:         return getDirectivesContainer().getDirectives();",
          "30:     }",
          "35:     CoercedVariables getVariables();",
          "40:     GraphQLContext getGraphQLContext();",
          "41: }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/execution/conditional/ConditionalNodes.java||src/main/java/graphql/execution/conditional/ConditionalNodes.java": [
          "File: src/main/java/graphql/execution/conditional/ConditionalNodes.java -> src/main/java/graphql/execution/conditional/ConditionalNodes.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package graphql.execution.conditional;",
          "3: import graphql.Assert;",
          "4: import graphql.GraphQLContext;",
          "5: import graphql.Internal;",
          "6: import graphql.execution.CoercedVariables;",
          "7: import graphql.execution.ValuesResolver;",
          "8: import graphql.language.Directive;",
          "9: import graphql.language.DirectivesContainer;",
          "10: import graphql.language.NodeUtil;",
          "12: import java.util.List;",
          "13: import java.util.Locale;",
          "14: import java.util.Map;",
          "16: import static graphql.Directives.IncludeDirective;",
          "17: import static graphql.Directives.SkipDirective;",
          "19: @Internal",
          "20: public class ConditionalNodes {",
          "23:     public boolean shouldInclude(Map<String, Object> variables, DirectivesContainer<?> element, GraphQLContext graphQLContext) {",
          "26:         if (!shouldInclude(variables, element.getDirectives())) {",
          "27:             return false;",
          "28:         }",
          "32:         if (graphQLContext != null) {",
          "33:             ConditionalNodeDecision conditionalDecision = graphQLContext.get(ConditionalNodeDecision.class);",
          "34:             if (conditionalDecision != null) {",
          "35:                 return customShouldInclude(variables, element, graphQLContext, conditionalDecision);",
          "36:             }",
          "37:         }",
          "39:         return true;",
          "40:     }",
          "42:     private boolean customShouldInclude(Map<String, Object> variables,",
          "43:                                         DirectivesContainer<?> element,",
          "44:                                         GraphQLContext graphQLContext,",
          "45:                                         ConditionalNodeDecision conditionalDecision",
          "46:     ) {",
          "47:         CoercedVariables coercedVariables = CoercedVariables.of(variables);",
          "48:         return conditionalDecision.shouldInclude(new ConditionalNodeDecisionEnvironment() {",
          "49:             @Override",
          "50:             public DirectivesContainer<?> getDirectivesContainer() {",
          "51:                 return element;",
          "52:             }",
          "54:             @Override",
          "55:             public CoercedVariables getVariables() {",
          "56:                 return coercedVariables;",
          "57:             }",
          "59:             @Override",
          "60:             public GraphQLContext getGraphQLContext() {",
          "61:                 return graphQLContext;",
          "62:             }",
          "63:         });",
          "64:     }",
          "67:     private boolean shouldInclude(Map<String, Object> variables, List<Directive> directives) {",
          "69:         if (directives.isEmpty()) {",
          "70:             return true;",
          "71:         }",
          "72:         boolean skip = getDirectiveResult(variables, directives, SkipDirective.getName(), false);",
          "73:         if (skip) {",
          "74:             return false;",
          "75:         }",
          "77:         return getDirectiveResult(variables, directives, IncludeDirective.getName(), true);",
          "78:     }",
          "80:     private boolean getDirectiveResult(Map<String, Object> variables, List<Directive> directives, String directiveName, boolean defaultValue) {",
          "81:         Directive foundDirective = NodeUtil.findNodeByName(directives, directiveName);",
          "82:         if (foundDirective != null) {",
          "83:             Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(SkipDirective.getArguments(), foundDirective.getArguments(), CoercedVariables.of(variables), GraphQLContext.getDefault(), Locale.getDefault());",
          "84:             Object flag = argumentValues.get(\"if\");",
          "85:             Assert.assertTrue(flag instanceof Boolean, () -> String.format(\"The '%s' directive MUST have a value for the 'if' argument\", directiveName));",
          "86:             return (Boolean) flag;",
          "87:         }",
          "88:         return defaultValue;",
          "89:     }",
          "91: }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java": [
          "File: src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import graphql.PublicApi;",
          "9: import graphql.collect.ImmutableKit;",
          "10: import graphql.execution.CoercedVariables;",
          "12: import graphql.execution.MergedField;",
          "13: import graphql.execution.RawVariables;",
          "14: import graphql.execution.ValuesResolver;",
          "15: import graphql.execution.directives.QueryDirectives;",
          "16: import graphql.execution.directives.QueryDirectivesImpl;",
          "17: import graphql.introspection.Introspection;",
          "",
          "[Removed Lines]",
          "11: import graphql.execution.ConditionalNodes;",
          "",
          "[Added Lines]",
          "14: import graphql.execution.conditional.ConditionalNodes;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "520:                                        FragmentSpread fragmentSpread,",
          "521:                                        Set<GraphQLObjectType> possibleObjects",
          "522:     ) {",
          "524:             return;",
          "525:         }",
          "526:         FragmentDefinition fragmentDefinition = assertNotNull(parameters.getFragmentsByName().get(fragmentSpread.getName()));",
          "529:             return;",
          "530:         }",
          "531:         GraphQLCompositeType newAstTypeCondition = (GraphQLCompositeType) assertNotNull(parameters.getGraphQLSchema().getType(fragmentDefinition.getTypeCondition().getName()));",
          "",
          "[Removed Lines]",
          "523:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), fragmentSpread.getDirectives())) {",
          "528:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), fragmentDefinition.getDirectives())) {",
          "",
          "[Added Lines]",
          "523:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), fragmentSpread, parameters.getGraphQLContext())) {",
          "528:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), fragmentDefinition, parameters.getGraphQLContext())) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "540:                                        Set<GraphQLObjectType> possibleObjects,",
          "541:                                        GraphQLCompositeType astTypeCondition",
          "542:     ) {",
          "544:             return;",
          "545:         }",
          "546:         Set<GraphQLObjectType> newPossibleObjects = possibleObjects;",
          "",
          "[Removed Lines]",
          "543:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), inlineFragment.getDirectives())) {",
          "",
          "[Added Lines]",
          "543:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), inlineFragment, parameters.getGraphQLContext())) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "560:                               Set<GraphQLObjectType> possibleObjectTypes,",
          "561:                               GraphQLCompositeType astTypeCondition",
          "562:     ) {",
          "564:             return;",
          "565:         }",
          "",
          "[Removed Lines]",
          "563:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), field.getDirectives())) {",
          "",
          "[Added Lines]",
          "563:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), field, parameters.getGraphQLContext())) {",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/execution/ConditionalNodesTest.groovy||src/test/groovy/graphql/execution/ConditionalNodesTest.groovy": [
          "File: src/test/groovy/graphql/execution/ConditionalNodesTest.groovy -> src/test/groovy/graphql/execution/ConditionalNodesTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package graphql.execution",
          "4: import graphql.language.Argument",
          "5: import graphql.language.BooleanValue",
          "6: import graphql.language.Directive",
          "7: import spock.lang.Specification",
          "9: class ConditionalNodesTest extends Specification {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import graphql.ExecutionInput",
          "4: import graphql.GraphQLContext",
          "5: import graphql.TestUtil",
          "6: import graphql.execution.conditional.ConditionalNodeDecision",
          "7: import graphql.execution.conditional.ConditionalNodeDecisionEnvironment",
          "8: import graphql.execution.conditional.ConditionalNodes",
          "12: import graphql.language.Field",
          "13: import graphql.language.NodeUtil",
          "14: import graphql.schema.DataFetcher",
          "15: import graphql.schema.DataFetchingEnvironment",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:         def variables = new LinkedHashMap<String, Object>()",
          "14:         ConditionalNodes conditionalNodes = new ConditionalNodes()",
          "19:         expect:",
          "21:     }",
          "23:     def \"no directives means include\"() {",
          "",
          "[Removed Lines]",
          "16:         def argument = Argument.newArgument(\"if\", new BooleanValue(true)).build()",
          "17:         def directives = [Directive.newDirective().name(\"skip\").arguments([argument]).build()]",
          "20:         !conditionalNodes.shouldInclude(variables, directives)",
          "",
          "[Added Lines]",
          "25:         def directives = directive(\"skip\", ifArg(true))",
          "27:         expect:",
          "28:         !conditionalNodes.shouldInclude(variables, mkField(directives), GraphQLContext.getDefault())",
          "29:     }",
          "31:     def \"should include true for skip = false\"() {",
          "32:         given:",
          "33:         def variables = new LinkedHashMap<String, Object>()",
          "34:         ConditionalNodes conditionalNodes = new ConditionalNodes()",
          "36:         def directives = directive(\"skip\", ifArg(false))",
          "38:         expect:",
          "39:         conditionalNodes.shouldInclude(variables, mkField(directives), GraphQLContext.getDefault())",
          "40:     }",
          "42:     def \"should include false for include = false\"() {",
          "43:         given:",
          "44:         def variables = new LinkedHashMap<String, Object>()",
          "45:         ConditionalNodes conditionalNodes = new ConditionalNodes()",
          "47:         def directives = directive(\"include\", ifArg(false))",
          "49:         expect:",
          "50:         !conditionalNodes.shouldInclude(variables, mkField(directives), GraphQLContext.getDefault())",
          "51:     }",
          "53:     def \"should include true for include = true\"() {",
          "54:         given:",
          "55:         def variables = new LinkedHashMap<String, Object>()",
          "56:         ConditionalNodes conditionalNodes = new ConditionalNodes()",
          "58:         def directives = directive(\"include\", ifArg(true))",
          "61:         conditionalNodes.shouldInclude(variables, mkField(directives), GraphQLContext.getDefault())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "26:         ConditionalNodes conditionalNodes = new ConditionalNodes()",
          "28:         expect:",
          "30:     }",
          "31: }",
          "",
          "[Removed Lines]",
          "29:         conditionalNodes.shouldInclude(variables, [])",
          "",
          "[Added Lines]",
          "70:         conditionalNodes.shouldInclude(variables, mkField([]), GraphQLContext.getDefault())",
          "71:     }",
          "74:     def \"allows a custom implementation to check conditional nodes\"() {",
          "75:         given:",
          "76:         def variables = [\"x\": \"y\"]",
          "77:         ConditionalNodes conditionalNodes = new ConditionalNodes()",
          "79:         def graphQLContext = GraphQLContext.getDefault()",
          "81:         def directives = directive(\"featureFlag\", ifArg(true))",
          "82:         def field = mkField(directives)",
          "84:         def called = false",
          "85:         ConditionalNodeDecision conditionalDecision = new ConditionalNodeDecision() {",
          "86:             @Override",
          "87:             boolean shouldInclude(ConditionalNodeDecisionEnvironment decisionEnvironment) {",
          "88:                 called = true",
          "89:                 assert decisionEnvironment.variables.toMap() == variables",
          "90:                 assert decisionEnvironment.directivesContainer == field",
          "91:                 assert decisionEnvironment.graphQLContext.get(\"assert\") != null",
          "92:                 return false",
          "93:             }",
          "94:         }",
          "95:         graphQLContext.put(ConditionalNodeDecision.class, conditionalDecision)",
          "96:         graphQLContext.put(\"assert\", true)",
          "97:         expect:",
          "99:         !conditionalNodes.shouldInclude(variables, field, graphQLContext)",
          "100:         called == true",
          "102:     }",
          "104:     def \"integration test showing conditional nodes can be custom included\"() {",
          "106:         def sdl = \"\"\"",
          "108:             directive @featureFlag(flagName: String!) repeatable on FIELD",
          "110:             type Query {",
          "111:                 in : String",
          "112:                 out : String",
          "113:             }",
          "114:         \"\"\"",
          "115:         DataFetcher df = { DataFetchingEnvironment env -> env.getFieldDefinition().name }",
          "116:         def graphQL = TestUtil.graphQL(sdl, [Query: [\"in\": df, \"out\": df]]).build()",
          "117:         def schema = graphQL.getGraphQLSchema()",
          "119:         ConditionalNodeDecision customDecision = new ConditionalNodeDecision() {",
          "120:             @Override",
          "121:             boolean shouldInclude(ConditionalNodeDecisionEnvironment env) {",
          "123:                 Directive foundDirective = NodeUtil.findNodeByName(env.getDirectives(), \"featureFlag\")",
          "124:                 if (foundDirective != null) {",
          "126:                     def arguments = schema.getDirective(\"featureFlag\")",
          "127:                             .getArguments()",
          "128:                     Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(",
          "129:                             arguments, foundDirective.getArguments(),",
          "130:                             env.variables, env.graphQLContext, Locale.getDefault())",
          "131:                     Object flagName = argumentValues.get(\"flagName\")",
          "132:                     return String.valueOf(flagName) == \"ON\"",
          "133:                 }",
          "134:                 return true",
          "135:             }",
          "136:         }",
          "138:         def contextMap = [:]",
          "139:         contextMap.put(ConditionalNodeDecision.class, customDecision)",
          "141:         when:",
          "142:         def ei = ExecutionInput.newExecutionInput()",
          "143:                 .graphQLContext(contextMap)",
          "144:                 .query(\"\"\"",
          "145:             query q {",
          "146:                 in",
          "147:                 out @featureFlag(flagName : \"OFF\")",
          "148:             }",
          "149:         \"\"\"",
          "150:                 ).build()",
          "151:         def er = graphQL.execute(ei)",
          "153:         then:",
          "154:         er[\"data\"] == [\"in\": \"in\"]",
          "156:         when:",
          "157:         ei = ExecutionInput.newExecutionInput()",
          "158:                 .graphQLContext(contextMap)",
          "159:                 .query(\"\"\"",
          "160:             query q {",
          "161:                 in",
          "162:                 out @featureFlag(flagName : \"ON\")",
          "163:             }",
          "164:         \"\"\"",
          "165:                 ).build()",
          "166:         er = graphQL.execute(ei)",
          "168:         then:",
          "169:         er[\"data\"] == [\"in\": \"in\", \"out\": \"out\"]",
          "171:         when:",
          "172:         ei = ExecutionInput.newExecutionInput()",
          "173:                 .graphQLContext(contextMap)",
          "174:                 .query('''",
          "175:             query vars_should_work($v : String!) {",
          "176:                 in",
          "177:                 out @featureFlag(flagName : $v)",
          "178:             }",
          "179:         '''",
          "180:                 )",
          "181:                 .variables([v: \"ON\"])",
          "182:                 .build()",
          "183:         er = graphQL.execute(ei)",
          "185:         then:",
          "186:         er[\"data\"] == [\"in\": \"in\", \"out\": \"out\"]",
          "187:     }",
          "189:     private ArrayList<Directive> directive(String name, Argument argument) {",
          "190:         [Directive.newDirective().name(name).arguments([argument]).build()]",
          "191:     }",
          "193:     private Argument ifArg(Boolean b) {",
          "194:         Argument.newArgument(\"if\", new BooleanValue(b)).build()",
          "195:     }",
          "197:     Field mkField(List<Directive> directives) {",
          "198:         return Field.newField(\"name\").directives(directives).build()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee4e67c08c6dbfb37d23326e2ef9a64aad4d721a",
      "candidate_info": {
        "commit_hash": "ee4e67c08c6dbfb37d23326e2ef9a64aad4d721a",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/ee4e67c08c6dbfb37d23326e2ef9a64aad4d721a",
        "files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedField.java",
          "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationToAstCompiler.java",
          "src/main/java/graphql/normalized/NormalizedInputValue.java",
          "src/main/java/graphql/normalized/VariablePredicate.java"
        ],
        "message": "This makes the ENF code public",
        "before_after_code_files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedField.java||src/main/java/graphql/normalized/ExecutableNormalizedField.java",
          "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationToAstCompiler.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationToAstCompiler.java",
          "src/main/java/graphql/normalized/NormalizedInputValue.java||src/main/java/graphql/normalized/NormalizedInputValue.java",
          "src/main/java/graphql/normalized/VariablePredicate.java||src/main/java/graphql/normalized/VariablePredicate.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java"
          ],
          "candidate": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/graphql/normalized/ExecutableNormalizedField.java||src/main/java/graphql/normalized/ExecutableNormalizedField.java": [
          "File: src/main/java/graphql/normalized/ExecutableNormalizedField.java -> src/main/java/graphql/normalized/ExecutableNormalizedField.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import graphql.Assert;",
          "6: import graphql.Internal;",
          "7: import graphql.Mutable;",
          "8: import graphql.collect.ImmutableKit;",
          "9: import graphql.introspection.Introspection;",
          "10: import graphql.language.Argument;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: import graphql.PublicApi;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: import static java.util.stream.Collectors.toSet;",
          "44: @Mutable",
          "45: public class ExecutableNormalizedField {",
          "46:     private final String alias;",
          "",
          "[Removed Lines]",
          "43: @Internal",
          "",
          "[Added Lines]",
          "48: @PublicApi",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:         return null;",
          "233:     }",
          "235:     public void addObjectTypeNames(Collection<String> objectTypeNames) {",
          "236:         this.objectTypeNames.addAll(objectTypeNames);",
          "237:     }",
          "239:     public void setObjectTypeNames(Collection<String> objectTypeNames) {",
          "240:         this.objectTypeNames.clear();",
          "241:         this.objectTypeNames.addAll(objectTypeNames);",
          "242:     }",
          "244:     public void addChild(ExecutableNormalizedField executableNormalizedField) {",
          "245:         this.children.add(executableNormalizedField);",
          "246:     }",
          "248:     public void clearChildren() {",
          "249:         this.children.clear();",
          "250:     }",
          "259:     public String getName() {",
          "260:         return getFieldName();",
          "261:     }",
          "269:     public String getResultKey() {",
          "270:         if (alias != null) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:     @Internal",
          "245:     @Internal",
          "251:     @Internal",
          "256:     @Internal",
          "281:     public String getFieldName() {",
          "282:         return fieldName;",
          "283:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "273:         return getName();",
          "274:     }",
          "276:     public String getAlias() {",
          "277:         return alias;",
          "278:     }",
          "280:     public ImmutableList<Argument> getAstArguments() {",
          "281:         return astArguments;",
          "282:     }",
          "284:     public NormalizedInputValue getNormalizedArgument(String name) {",
          "285:         return normalizedArguments.get(name);",
          "286:     }",
          "288:     public ImmutableMap<String, NormalizedInputValue> getNormalizedArguments() {",
          "289:         return normalizedArguments;",
          "290:     }",
          "292:     public LinkedHashMap<String, Object> getResolvedArguments() {",
          "293:         return resolvedArguments;",
          "294:     }",
          "317:     public Set<String> getObjectTypeNames() {",
          "318:         return objectTypeNames;",
          "319:     }",
          "321:     public String getSingleObjectTypeName() {",
          "322:         return objectTypeNames.iterator().next();",
          "323:     }",
          "326:     public String printDetails() {",
          "327:         StringBuilder result = new StringBuilder();",
          "328:         if (getAlias() != null) {",
          "",
          "[Removed Lines]",
          "297:     public static Builder newNormalizedField() {",
          "298:         return new Builder();",
          "299:     }",
          "302:     public String getFieldName() {",
          "303:         return fieldName;",
          "304:     }",
          "307:     public ExecutableNormalizedField transform(Consumer<Builder> builderConsumer) {",
          "308:         Builder builder = new Builder(this);",
          "309:         builderConsumer.accept(builder);",
          "310:         return builder.build();",
          "311:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "380:                 .collect(toList());",
          "381:     }",
          "383:     public int getLevel() {",
          "384:         return level;",
          "385:     }",
          "387:     public ExecutableNormalizedField getParent() {",
          "388:         return parent;",
          "389:     }",
          "391:     public void replaceParent(ExecutableNormalizedField newParent) {",
          "392:         this.parent = newParent;",
          "393:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "467:     @Internal",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "423:         });",
          "424:     }",
          "426:     public static class Builder {",
          "427:         private LinkedHashSet<String> objectTypeNames = new LinkedHashSet<>();",
          "428:         private String fieldName;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "511:     public static Builder newNormalizedField() {",
          "512:         return new Builder();",
          "513:     }",
          "523:     public ExecutableNormalizedField transform(Consumer<Builder> builderConsumer) {",
          "524:         Builder builder = new Builder(this);",
          "525:         builderConsumer.accept(builder);",
          "526:         return builder.build();",
          "527:     }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java": [
          "File: src/main/java/graphql/normalized/ExecutableNormalizedOperation.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import com.google.common.collect.ImmutableListMultimap;",
          "4: import graphql.Assert;",
          "6: import graphql.execution.MergedField;",
          "7: import graphql.execution.ResultPath;",
          "8: import graphql.language.Field;",
          "",
          "[Removed Lines]",
          "5: import graphql.Internal;",
          "",
          "[Added Lines]",
          "5: import graphql.PublicApi;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13: import java.util.List;",
          "14: import java.util.Map;",
          "17: public class ExecutableNormalizedOperation {",
          "18:     private final OperationDefinition.Operation operation;",
          "19:     private final String operationName;",
          "",
          "[Removed Lines]",
          "16: @Internal",
          "",
          "[Added Lines]",
          "24: @PublicApi",
          "",
          "---------------"
        ],
        "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java": [
          "File: src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import com.google.common.collect.ImmutableMap;",
          "6: import com.google.common.collect.ImmutableSet;",
          "7: import graphql.GraphQLContext;",
          "9: import graphql.collect.ImmutableKit;",
          "10: import graphql.execution.CoercedVariables;",
          "11: import graphql.execution.ConditionalNodes;",
          "",
          "[Removed Lines]",
          "8: import graphql.Internal;",
          "",
          "[Added Lines]",
          "8: import graphql.PublicApi;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: import static java.util.Collections.singleton;",
          "56: import static java.util.Collections.singletonList;",
          "59: public class ExecutableNormalizedOperationFactory {",
          "61:     private final ConditionalNodes conditionalNodes = new ConditionalNodes();",
          "67:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
          "68:         return new ExecutableNormalizedOperationFactory().createNormalizedQueryImpl(graphQLSchema, getOperationResult.operationDefinition, getOperationResult.fragmentsByName, coercedVariableValues, null);",
          "69:     }",
          "75:         return new ExecutableNormalizedOperationFactory().createNormalizedQueryImpl(graphQLSchema, operationDefinition, fragments, coercedVariableValues, null);",
          "76:     }",
          "82:         return createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, operationName, rawVariables, GraphQLContext.getDefault(), Locale.getDefault());",
          "83:     }",
          "91:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
          "92:         return new ExecutableNormalizedOperationFactory().createExecutableNormalizedOperationImplWithRawVariables(graphQLSchema, getOperationResult.operationDefinition, getOperationResult.fragmentsByName, rawVariables, graphQLContext, locale);",
          "93:     }",
          "",
          "[Removed Lines]",
          "58: @Internal",
          "63:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(GraphQLSchema graphQLSchema,",
          "64:                                                                                     Document document,",
          "65:                                                                                     String operationName,",
          "66:                                                                                     CoercedVariables coercedVariableValues) {",
          "71:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(GraphQLSchema graphQLSchema,",
          "72:                                                                                     OperationDefinition operationDefinition,",
          "73:                                                                                     Map<String, FragmentDefinition> fragments,",
          "74:                                                                                     CoercedVariables coercedVariableValues) {",
          "78:     public static ExecutableNormalizedOperation createExecutableNormalizedOperationWithRawVariables(GraphQLSchema graphQLSchema,",
          "79:                                                                                                     Document document,",
          "80:                                                                                                     String operationName,",
          "81:                                                                                                     RawVariables rawVariables) {",
          "85:     public static ExecutableNormalizedOperation createExecutableNormalizedOperationWithRawVariables(GraphQLSchema graphQLSchema,",
          "86:                                                                                                     Document document,",
          "87:                                                                                                     String operationName,",
          "88:                                                                                                     RawVariables rawVariables,",
          "89:                                                                                                     GraphQLContext graphQLContext,",
          "90:                                                                                                     Locale locale) {",
          "",
          "[Added Lines]",
          "62: @PublicApi",
          "78:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(",
          "79:             GraphQLSchema graphQLSchema,",
          "80:             Document document,",
          "81:             String operationName,",
          "82:             CoercedVariables coercedVariableValues",
          "83:     ) {",
          "99:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(",
          "100:             GraphQLSchema graphQLSchema,",
          "101:             OperationDefinition operationDefinition,",
          "102:             Map<String, FragmentDefinition> fragments,",
          "103:             CoercedVariables coercedVariableValues",
          "104:     ) {",
          "119:     public static ExecutableNormalizedOperation createExecutableNormalizedOperationWithRawVariables(",
          "120:             GraphQLSchema graphQLSchema,",
          "121:             Document document,",
          "122:             String operationName,",
          "123:             RawVariables rawVariables",
          "124:     ) {",
          "141:     public static ExecutableNormalizedOperation createExecutableNormalizedOperationWithRawVariables(",
          "142:             GraphQLSchema graphQLSchema,",
          "143:             Document document,",
          "144:             String operationName,",
          "145:             RawVariables rawVariables,",
          "146:             GraphQLContext graphQLContext,",
          "147:             Locale locale",
          "148:     ) {",
          "",
          "---------------"
        ],
        "src/main/java/graphql/normalized/ExecutableNormalizedOperationToAstCompiler.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationToAstCompiler.java": [
          "File: src/main/java/graphql/normalized/ExecutableNormalizedOperationToAstCompiler.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperationToAstCompiler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import com.google.common.collect.ImmutableList;",
          "4: import com.google.common.collect.ImmutableMap;",
          "5: import graphql.Assert;",
          "7: import graphql.introspection.Introspection;",
          "8: import graphql.language.Argument;",
          "9: import graphql.language.ArrayValue;",
          "",
          "[Removed Lines]",
          "6: import graphql.Internal;",
          "",
          "[Added Lines]",
          "6: import graphql.PublicApi;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: import static graphql.language.TypeName.newTypeName;",
          "41: import static graphql.schema.GraphQLTypeUtil.unwrapAll;",
          "44: public class ExecutableNormalizedOperationToAstCompiler {",
          "46:     public static class CompilerResult {",
          "47:         private final Document document;",
          "48:         private final Map<String, Object> variables;",
          "",
          "[Removed Lines]",
          "43: @Internal",
          "",
          "[Added Lines]",
          "55: @PublicApi",
          "",
          "---------------"
        ],
        "src/main/java/graphql/normalized/NormalizedInputValue.java||src/main/java/graphql/normalized/NormalizedInputValue.java": [
          "File: src/main/java/graphql/normalized/NormalizedInputValue.java -> src/main/java/graphql/normalized/NormalizedInputValue.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package graphql.normalized;",
          "3: import graphql.language.Value;",
          "5: import java.util.Objects;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import graphql.PublicApi;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: import static graphql.language.AstPrinter.printAst;",
          "15: public class NormalizedInputValue {",
          "16:     private final String typeName;",
          "17:     private final Object value;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: @PublicApi",
          "",
          "---------------"
        ],
        "src/main/java/graphql/normalized/VariablePredicate.java||src/main/java/graphql/normalized/VariablePredicate.java": [
          "File: src/main/java/graphql/normalized/VariablePredicate.java -> src/main/java/graphql/normalized/VariablePredicate.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package graphql.normalized;",
          "9: public interface VariablePredicate {",
          "",
          "[Removed Lines]",
          "3: import graphql.Internal;",
          "8: @Internal",
          "",
          "[Added Lines]",
          "3: import graphql.PublicSpi;",
          "9: @PublicSpi",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f1c4069b582b9363ffe3a666bc6a162734a2d833",
      "candidate_info": {
        "commit_hash": "f1c4069b582b9363ffe3a666bc6a162734a2d833",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/f1c4069b582b9363ffe3a666bc6a162734a2d833",
        "files": [
          "src/main/java/graphql/execution/AsyncExecutionStrategy.java",
          "src/main/java/graphql/execution/AsyncSerialExecutionStrategy.java",
          "src/main/java/graphql/introspection/Introspection.java",
          "src/main/java/graphql/introspection/IntrospectionDisabledError.java",
          "src/main/java/graphql/schema/visibility/NoIntrospectionGraphqlFieldVisibility.java",
          "src/test/groovy/graphql/introspection/IntrospectionTest.groovy"
        ],
        "message": "Backport PR 3526 with minor adjustments",
        "before_after_code_files": [
          "src/main/java/graphql/execution/AsyncExecutionStrategy.java||src/main/java/graphql/execution/AsyncExecutionStrategy.java",
          "src/main/java/graphql/execution/AsyncSerialExecutionStrategy.java||src/main/java/graphql/execution/AsyncSerialExecutionStrategy.java",
          "src/main/java/graphql/introspection/Introspection.java||src/main/java/graphql/introspection/Introspection.java",
          "src/main/java/graphql/introspection/IntrospectionDisabledError.java||src/main/java/graphql/introspection/IntrospectionDisabledError.java",
          "src/main/java/graphql/schema/visibility/NoIntrospectionGraphqlFieldVisibility.java||src/main/java/graphql/schema/visibility/NoIntrospectionGraphqlFieldVisibility.java",
          "src/test/groovy/graphql/introspection/IntrospectionTest.groovy||src/test/groovy/graphql/introspection/IntrospectionTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/graphql/introspection/Introspection.java||src/main/java/graphql/introspection/Introspection.java"
          ],
          "candidate": [
            "src/main/java/graphql/introspection/Introspection.java||src/main/java/graphql/introspection/Introspection.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/graphql/execution/AsyncExecutionStrategy.java||src/main/java/graphql/execution/AsyncExecutionStrategy.java": [
          "File: src/main/java/graphql/execution/AsyncExecutionStrategy.java -> src/main/java/graphql/execution/AsyncExecutionStrategy.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import graphql.execution.instrumentation.ExecutionStrategyInstrumentationContext;",
          "6: import graphql.execution.instrumentation.Instrumentation;",
          "7: import graphql.execution.instrumentation.parameters.InstrumentationExecutionStrategyParameters;",
          "9: import java.util.List;",
          "10: import java.util.concurrent.CompletableFuture;",
          "11: import java.util.function.BiConsumer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: import graphql.introspection.Introspection;",
          "11: import java.util.Optional;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:         MergedSelectionSet fields = parameters.getFields();",
          "46:         List<String> fieldNames = fields.getKeys();",
          "47:         Async.CombinedBuilder<FieldValueInfo> futures = Async.ofExpectedSize(fields.size());",
          "48:         for (String fieldName : fieldNames) {",
          "49:             MergedField currentField = fields.getSubField(fieldName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:         Optional<ExecutionResult> isNotSensible = Introspection.isIntrospectionSensible(executionContext.getGraphQLContext(),fields);",
          "51:         if (isNotSensible.isPresent()) {",
          "52:             return CompletableFuture.completedFuture(isNotSensible.get());",
          "53:         }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/execution/AsyncSerialExecutionStrategy.java||src/main/java/graphql/execution/AsyncSerialExecutionStrategy.java": [
          "File: src/main/java/graphql/execution/AsyncSerialExecutionStrategy.java -> src/main/java/graphql/execution/AsyncSerialExecutionStrategy.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import graphql.execution.instrumentation.Instrumentation;",
          "7: import graphql.execution.instrumentation.InstrumentationContext;",
          "8: import graphql.execution.instrumentation.parameters.InstrumentationExecutionStrategyParameters;",
          "10: import java.util.List;",
          "11: import java.util.concurrent.CompletableFuture;",
          "13: import static graphql.execution.instrumentation.SimpleInstrumentationContext.nonNullCtx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: import graphql.introspection.Introspection;",
          "12: import java.util.Optional;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:         MergedSelectionSet fields = parameters.getFields();",
          "40:         ImmutableList<String> fieldNames = ImmutableList.copyOf(fields.keySet());",
          "42:         CompletableFuture<List<ExecutionResult>> resultsFuture = Async.eachSequentially(fieldNames, (fieldName, prevResults) -> {",
          "43:             MergedField currentField = fields.getSubField(fieldName);",
          "44:             ResultPath fieldPath = parameters.getPath().segment(mkNameForPath(currentField));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:         Optional<ExecutionResult> isNotSensible = Introspection.isIntrospectionSensible(executionContext.getGraphQLContext(), fields);",
          "47:         if (isNotSensible.isPresent()) {",
          "48:             return CompletableFuture.completedFuture(isNotSensible.get());",
          "49:         }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/introspection/Introspection.java||src/main/java/graphql/introspection/Introspection.java": [
          "File: src/main/java/graphql/introspection/Introspection.java -> src/main/java/graphql/introspection/Introspection.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import com.google.common.collect.ImmutableSet;",
          "5: import graphql.Assert;",
          "6: import graphql.GraphQLContext;",
          "7: import graphql.Internal;",
          "8: import graphql.PublicApi;",
          "9: import graphql.execution.ValuesResolver;",
          "10: import graphql.language.AstPrinter;",
          "11: import graphql.schema.FieldCoordinates;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import graphql.ExecutionResult;",
          "10: import graphql.execution.MergedField;",
          "11: import graphql.execution.MergedSelectionSet;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: import graphql.schema.GraphQLSchema;",
          "33: import graphql.schema.GraphQLUnionType;",
          "34: import graphql.schema.InputValueWithState;",
          "36: import java.util.ArrayList;",
          "37: import java.util.HashSet;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import org.jetbrains.annotations.NotNull;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "39: import java.util.List;",
          "40: import java.util.Locale;",
          "41: import java.util.Map;",
          "42: import java.util.Set;",
          "43: import java.util.function.Function;",
          "44: import java.util.stream.Collectors;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: import java.util.Optional;",
          "48: import java.util.concurrent.atomic.AtomicBoolean;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "58: import static graphql.schema.GraphQLTypeUtil.unwrapAllAs;",
          "59: import static graphql.schema.GraphQLTypeUtil.unwrapOne;",
          "61: @PublicApi",
          "62: public class Introspection {",
          "63:     private static final Map<FieldCoordinates, IntrospectionDataFetcher<?>> introspectionDataFetchers = new LinkedHashMap<>();",
          "65:     private static void register(GraphQLFieldsContainer parentType, String fieldName, IntrospectionDataFetcher<?> introspectionDataFetcher) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:     public static final String INTROSPECTION_DISABLED = \"INTROSPECTION_DISABLED\";",
          "85:     private static final AtomicBoolean INTROSPECTION_ENABLED_STATE = new AtomicBoolean(true);",
          "94:     public static boolean enabledJvmWide(boolean enabled) {",
          "95:         return INTROSPECTION_ENABLED_STATE.getAndSet(enabled);",
          "96:     }",
          "101:     public static boolean isEnabledJvmWide() {",
          "102:         return INTROSPECTION_ENABLED_STATE.get();",
          "103:     }",
          "114:     public static Optional<ExecutionResult> isIntrospectionSensible(GraphQLContext graphQLContext, MergedSelectionSet mergedSelectionSet) {",
          "115:         MergedField schemaField = mergedSelectionSet.getSubField(SchemaMetaFieldDef.getName());",
          "116:         if (schemaField != null) {",
          "117:             if (!isIntrospectionEnabled(graphQLContext)) {",
          "118:                 return mkDisabledError(schemaField);",
          "119:             }",
          "120:         }",
          "121:         MergedField typeField = mergedSelectionSet.getSubField(TypeMetaFieldDef.getName());",
          "122:         if (typeField != null) {",
          "123:             if (!isIntrospectionEnabled(graphQLContext)) {",
          "124:                 return mkDisabledError(typeField);",
          "125:             }",
          "126:         }",
          "128:         return Optional.empty();",
          "129:     }",
          "131:     @NotNull",
          "132:     private static Optional<ExecutionResult> mkDisabledError(MergedField schemaField) {",
          "133:         IntrospectionDisabledError error = new IntrospectionDisabledError(schemaField.getSingleField().getSourceLocation());",
          "134:         return Optional.of(ExecutionResult.newExecutionResult().addError(error).build());",
          "135:     }",
          "137:     private static boolean isIntrospectionEnabled(GraphQLContext graphQlContext) {",
          "138:         if (!isEnabledJvmWide()) {",
          "139:             return false;",
          "140:         }",
          "141:         return !graphQlContext.getOrDefault(INTROSPECTION_DISABLED, false);",
          "142:     }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/introspection/IntrospectionDisabledError.java||src/main/java/graphql/introspection/IntrospectionDisabledError.java": [
          "File: src/main/java/graphql/introspection/IntrospectionDisabledError.java -> src/main/java/graphql/introspection/IntrospectionDisabledError.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package graphql.introspection;",
          "3: import graphql.ErrorClassification;",
          "4: import graphql.ErrorType;",
          "5: import graphql.GraphQLError;",
          "6: import graphql.Internal;",
          "7: import graphql.language.SourceLocation;",
          "9: import java.util.Collections;",
          "10: import java.util.List;",
          "12: @Internal",
          "13: public class IntrospectionDisabledError implements GraphQLError {",
          "15:     private final List<SourceLocation> locations;",
          "17:     public IntrospectionDisabledError(SourceLocation sourceLocation) {",
          "18:         locations = sourceLocation == null ? Collections.emptyList() : Collections.singletonList(sourceLocation);",
          "19:     }",
          "21:     @Override",
          "22:     public String getMessage() {",
          "23:         return \"Introspection has been disabled for this request\";",
          "24:     }",
          "26:     @Override",
          "27:     public List<SourceLocation> getLocations() {",
          "28:         return locations;",
          "29:     }",
          "31:     @Override",
          "32:     public ErrorClassification getErrorType() {",
          "33:         return ErrorClassification.errorClassification(\"IntrospectionDisabled\");",
          "34:     }",
          "35: }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/schema/visibility/NoIntrospectionGraphqlFieldVisibility.java||src/main/java/graphql/schema/visibility/NoIntrospectionGraphqlFieldVisibility.java": [
          "File: src/main/java/graphql/schema/visibility/NoIntrospectionGraphqlFieldVisibility.java -> src/main/java/graphql/schema/visibility/NoIntrospectionGraphqlFieldVisibility.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: @PublicApi",
          "17: public class NoIntrospectionGraphqlFieldVisibility implements GraphqlFieldVisibility {",
          "19:     public static NoIntrospectionGraphqlFieldVisibility NO_INTROSPECTION_FIELD_VISIBILITY = new NoIntrospectionGraphqlFieldVisibility();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: @Deprecated(since = \"2024-03-16\")",
          "23:     @Deprecated(since = \"2024-03-16\")",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/introspection/IntrospectionTest.groovy||src/test/groovy/graphql/introspection/IntrospectionTest.groovy": [
          "File: src/test/groovy/graphql/introspection/IntrospectionTest.groovy -> src/test/groovy/graphql/introspection/IntrospectionTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package graphql.introspection",
          "4: import graphql.TestUtil",
          "5: import graphql.schema.DataFetcher",
          "6: import graphql.schema.FieldCoordinates",
          "7: import graphql.schema.GraphQLCodeRegistry",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import graphql.ExecutionInput",
          "5: import graphql.execution.AsyncSerialExecutionStrategy",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: class IntrospectionTest extends Specification {",
          "25:     def \"bug 1186 - introspection depth check\"() {",
          "26:         def spec = '''",
          "27:             type Query {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:     def setup() {",
          "27:         Introspection.enabledJvmWide(true)",
          "28:     }",
          "30:     def cleanup() {",
          "31:         Introspection.enabledJvmWide(true)",
          "32:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "544:         def newIntrospectionQuery = IntrospectionQuery.INTROSPECTION_QUERY",
          "546:         then:",
          "549:     }",
          "551:     def \"test parameterized introspection queries\"() {",
          "",
          "[Removed Lines]",
          "547:         oldIntrospectionQuery.replaceAll(\"\\\\s+\", \"\") ==",
          "548:                 newIntrospectionQuery.replaceAll(\"\\\\s+\", \"\")",
          "",
          "[Added Lines]",
          "556:         def oldQuery = oldIntrospectionQuery.replaceAll(\"\\\\s+\", \"\")",
          "557:         def newQuery = newIntrospectionQuery.replaceAll(\"\\\\s+\", \"\")",
          "558:         oldQuery == newQuery",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "644:         arg['name'] == \"arg\"",
          "645:         arg['defaultValue'] == \"null\" // printed AST",
          "646:     }",
          "647: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "658:     def \"jvm wide enablement\"() {",
          "659:         def graphQL = TestUtil.graphQL(\"type Query { f : String } \").build()",
          "661:         when:",
          "662:         def er = graphQL.execute(IntrospectionQuery.INTROSPECTION_QUERY)",
          "664:         then:",
          "665:         er.errors.isEmpty()",
          "667:         when:",
          "668:         Introspection.enabledJvmWide(false)",
          "669:         er = graphQL.execute(IntrospectionQuery.INTROSPECTION_QUERY)",
          "671:         then:",
          "672:         er.errors[0] instanceof IntrospectionDisabledError",
          "673:         er.errors[0].getErrorType().toString() == \"IntrospectionDisabled\"",
          "675:         when:",
          "676:         Introspection.enabledJvmWide(true)",
          "677:         er = graphQL.execute(IntrospectionQuery.INTROSPECTION_QUERY)",
          "679:         then:",
          "680:         er.errors.isEmpty()",
          "681:     }",
          "683:     def \"per request enablement\"() {",
          "684:         def graphQL = TestUtil.graphQL(\"type Query { f : String } \").build()",
          "686:         when:",
          "688:         def ei = ExecutionInput.newExecutionInput(IntrospectionQuery.INTROSPECTION_QUERY)",
          "689:                 .build()",
          "690:         def er = graphQL.execute(ei)",
          "692:         then:",
          "693:         er.errors.isEmpty()",
          "695:         when:",
          "696:         ei = ExecutionInput.newExecutionInput(IntrospectionQuery.INTROSPECTION_QUERY)",
          "697:                 .graphQLContext(Map.of(Introspection.INTROSPECTION_DISABLED, false)).build()",
          "698:         er = graphQL.execute(ei)",
          "700:         then:",
          "701:         er.errors.isEmpty()",
          "703:         when:",
          "704:         ei = ExecutionInput.newExecutionInput(IntrospectionQuery.INTROSPECTION_QUERY)",
          "705:                 .graphQLContext(Map.of(Introspection.INTROSPECTION_DISABLED, true)).build()",
          "706:         er = graphQL.execute(ei)",
          "708:         then:",
          "709:         er.errors[0] instanceof IntrospectionDisabledError",
          "710:         er.errors[0].getErrorType().toString() == \"IntrospectionDisabled\"",
          "711:     }",
          "713:     def \"mixed schema and other fields stop early\"() {",
          "714:         def graphQL = TestUtil.graphQL(\"type Query { normalField : String } \").build()",
          "716:         def query = \"\"\"",
          "717:             query goodAndBad {",
          "718:                 normalField",
          "719:                 __schema{ types{ fields { name }}}",
          "720:             }",
          "721:         \"\"\"",
          "723:         when:",
          "724:         def er = graphQL.execute(query)",
          "726:         then:",
          "727:         er.errors.isEmpty()",
          "729:         when:",
          "730:         Introspection.enabledJvmWide(false)",
          "731:         er = graphQL.execute(query)",
          "733:         then:",
          "734:         er.errors[0] instanceof IntrospectionDisabledError",
          "735:         er.errors[0].getErrorType().toString() == \"IntrospectionDisabled\"",
          "736:         er.data == null // stops hard",
          "737:     }",
          "739:     def \"AsyncSerialExecutionStrategy with jvm wide enablement\"() {",
          "740:         def graphQL = TestUtil.graphQL(\"type Query { f : String } \")",
          "741:                 .queryExecutionStrategy(new AsyncSerialExecutionStrategy()).build()",
          "743:         when:",
          "744:         def er = graphQL.execute(IntrospectionQuery.INTROSPECTION_QUERY)",
          "746:         then:",
          "747:         er.errors.isEmpty()",
          "749:         when:",
          "750:         Introspection.enabledJvmWide(false)",
          "751:         er = graphQL.execute(IntrospectionQuery.INTROSPECTION_QUERY)",
          "753:         then:",
          "754:         er.errors[0] instanceof IntrospectionDisabledError",
          "755:         er.errors[0].getErrorType().toString() == \"IntrospectionDisabled\"",
          "757:         when:",
          "758:         Introspection.enabledJvmWide(true)",
          "759:         er = graphQL.execute(IntrospectionQuery.INTROSPECTION_QUERY)",
          "761:         then:",
          "762:         er.errors.isEmpty()",
          "763:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4407299d73a10fd1efcfae6c363ff382aa43479",
      "candidate_info": {
        "commit_hash": "b4407299d73a10fd1efcfae6c363ff382aa43479",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/b4407299d73a10fd1efcfae6c363ff382aa43479",
        "files": [
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
        ],
        "message": "Making tests consistent with approach in v19 and v20 backports",
        "before_after_code_files": [
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
          ],
          "candidate": [
            "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
          ]
        }
      },
      "candidate_diff": {
        "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy": [
          "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:         Document document = TestUtil.parseQuery(query)",
          "119:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "121:         expect:",
          "",
          "[Removed Lines]",
          "117:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "118:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "118:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "201:         Document document = TestUtil.parseQuery(query)",
          "205:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "207:         expect:",
          "",
          "[Removed Lines]",
          "203:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "204:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "203:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281:         Document document = TestUtil.parseQuery(query)",
          "285:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "287:         expect:",
          "",
          "[Removed Lines]",
          "283:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "284:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "282:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "332:         Document document = TestUtil.parseQuery(query)",
          "336:         def printedTree = printTree(tree)",
          "338:         expect:",
          "",
          "[Removed Lines]",
          "334:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "335:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "333:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "375:         Document document = TestUtil.parseQuery(query)",
          "379:         def printedTree = printTree(tree)",
          "381:         expect:",
          "",
          "[Removed Lines]",
          "377:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "378:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "376:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "425:         Document document = TestUtil.parseQuery(query)",
          "429:         def printedTree = printTree(tree)",
          "431:         expect:",
          "",
          "[Removed Lines]",
          "427:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "428:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "426:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "488:         Document document = TestUtil.parseQuery(query)",
          "492:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "494:         expect:",
          "",
          "[Removed Lines]",
          "490:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "491:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "489:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "534:         Document document = TestUtil.parseQuery(query)",
          "538:         def printedTree = printTree(tree)",
          "540:         expect:",
          "",
          "[Removed Lines]",
          "536:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "537:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "535:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "578:         Document document = TestUtil.parseQuery(query)",
          "582:         def printedTree = printTree(tree)",
          "584:         expect:",
          "",
          "[Removed Lines]",
          "580:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "581:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "579:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "622:         Document document = TestUtil.parseQuery(query)",
          "626:         def printedTree = printTree(tree)",
          "628:         expect:",
          "",
          "[Removed Lines]",
          "624:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "625:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "623:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "654:         Document document = TestUtil.parseQuery(query)",
          "658:         def printedTree = printTree(tree)",
          "660:         expect:",
          "",
          "[Removed Lines]",
          "656:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "657:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "655:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "705:         Document document = TestUtil.parseQuery(query)",
          "709:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "711:         expect:",
          "",
          "[Removed Lines]",
          "707:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "708:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "706:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "755:         Document document = TestUtil.parseQuery(query)",
          "759:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "761:         expect:",
          "",
          "[Removed Lines]",
          "757:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "758:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "756:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "794:         Document document = TestUtil.parseQuery(query)",
          "798:         def printedTree = printTree(tree)",
          "800:         expect:",
          "",
          "[Removed Lines]",
          "796:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "797:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "795:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "838:         Document document = TestUtil.parseQuery(query)",
          "842:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "844:         expect:",
          "",
          "[Removed Lines]",
          "840:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "841:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "839:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "878:         Document document = TestUtil.parseQuery(query)",
          "882:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "884:         expect:",
          "",
          "[Removed Lines]",
          "880:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "881:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "879:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "926:         Document document = TestUtil.parseQuery(query)",
          "930:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "932:         expect:",
          "",
          "[Removed Lines]",
          "928:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "929:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "927:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1028:         Document document = TestUtil.parseQuery(query)",
          "1029:         def subFooField = (document.getDefinitions()[1] as FragmentDefinition).getSelectionSet().getSelections()[0] as Field",
          "1033:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
          "1035:         expect:",
          "",
          "[Removed Lines]",
          "1031:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1032:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1030:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1071:         def petsField = (document.getDefinitions()[0] as OperationDefinition).getSelectionSet().getSelections()[0] as Field",
          "1072:         def idField = petsField.getSelectionSet().getSelections()[0] as Field",
          "1076:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
          "",
          "[Removed Lines]",
          "1074:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1075:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1073:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1120:         def schemaField = selections[2] as Field",
          "1121:         def typeField = selections[3] as Field",
          "1125:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
          "1127:         expect:",
          "",
          "[Removed Lines]",
          "1123:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1124:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1122:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1178:         Document document = TestUtil.parseQuery(query)",
          "1182:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "1184:         expect:",
          "",
          "[Removed Lines]",
          "1180:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1181:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1179:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1221:         Document document = TestUtil.parseQuery(query)",
          "1225:         def printedTree = printTree(tree)",
          "1227:         expect:",
          "",
          "[Removed Lines]",
          "1223:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1224:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1222:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1249:         Document document = TestUtil.parseQuery(query)",
          "1253:         def normalizedFieldToMergedField = tree.getNormalizedFieldToMergedField()",
          "1254:         Traverser<ExecutableNormalizedField> traverser = Traverser.depthFirst({ it.getChildren() })",
          "1255:         List<MergedField> result = new ArrayList<>()",
          "",
          "[Removed Lines]",
          "1251:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1252:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1250:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1287:         Document document = TestUtil.parseQuery(query)",
          "1291:         when:",
          "1293:         def coordinatesToNormalizedFields = tree.coordinatesToNormalizedFields",
          "1295:         then:",
          "",
          "[Removed Lines]",
          "1289:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1292:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1289:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1388:         Document document = TestUtil.parseQuery(mutation)",
          "1392:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "1394:         expect:",
          "",
          "[Removed Lines]",
          "1390:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1391:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1388:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1438:         assertValidQuery(graphQLSchema, query)",
          "1439:         Document document = TestUtil.parseQuery(query)",
          "1441:         def variables = [",
          "1442:                 var1: [bar: 123],",
          "1443:                 var2: [foo: \"foo\", input2: [bar: 123]]",
          "",
          "[Removed Lines]",
          "1440:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1446:         def expectedNormalizedArgValue = [foo: new NormalizedInputValue(\"String\", parseValue('\"foo\"')), input2: new NormalizedInputValue(\"Input2\", [bar: new NormalizedInputValue(\"Int\", parseValue(\"123\"))])]",
          "1447:         when:",
          "1449:         def topLevelField = tree.getTopLevelFields().get(0)",
          "1450:         def secondField = topLevelField.getChildren().get(0)",
          "1451:         def arg1 = secondField.getNormalizedArgument(\"arg1\")",
          "",
          "[Removed Lines]",
          "1448:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "1445:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1485:         assertValidQuery(graphQLSchema, query)",
          "1486:         def document = TestUtil.parseQuery(query)",
          "1488:         when:",
          "1491:         then:",
          "1492:         def topLevelField = tree.getTopLevelFields().get(0)",
          "",
          "[Removed Lines]",
          "1487:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1489:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1486:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1520:         assertValidQuery(graphQLSchema, query)",
          "1521:         def document = TestUtil.parseQuery(query)",
          "1523:         def variables = [",
          "1524:                 varIds  : null,",
          "1525:                 otherVar: null,",
          "1526:         ]",
          "1527:         when:",
          "1530:         then:",
          "1531:         def topLevelField = tree.getTopLevelFields().get(0)",
          "",
          "[Removed Lines]",
          "1522:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1528:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "1525:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1575:         ]",
          "1576:         assertValidQuery(graphQLSchema, query, variables)",
          "1577:         Document document = TestUtil.parseQuery(query)",
          "1579:         when:",
          "1581:         def topLevelField = tree.getTopLevelFields().get(0)",
          "1582:         def arg1 = topLevelField.getNormalizedArgument(\"arg1\")",
          "1583:         def arg2 = topLevelField.getNormalizedArgument(\"arg2\")",
          "",
          "[Removed Lines]",
          "1578:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1580:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "1577:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1628:         ]",
          "1629:         assertValidQuery(graphQLSchema, query, variables)",
          "1630:         Document document = TestUtil.parseQuery(query)",
          "1632:         when:",
          "1634:         def topLevelField = tree.getTopLevelFields().get(0)",
          "1635:         def arg1 = topLevelField.getNormalizedArgument(\"arg1\")",
          "1636:         def arg2 = topLevelField.getNormalizedArgument(\"arg2\")",
          "",
          "[Removed Lines]",
          "1631:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1633:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "1630:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1683:         '''",
          "1684:         assertValidQuery(graphQLSchema, query)",
          "1685:         Document document = TestUtil.parseQuery(query)",
          "1687:         when:",
          "1690:         then:",
          "1691:         tree.normalizedFieldToMergedField.size() == 3",
          "",
          "[Removed Lines]",
          "1686:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1688:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1685:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1741:         '''",
          "1742:         assertValidQuery(graphQLSchema, query)",
          "1743:         Document document = TestUtil.parseQuery(query)",
          "1745:         when:",
          "1747:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "1749:         then:",
          "",
          "[Removed Lines]",
          "1744:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1746:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1743:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1789:         '''",
          "1790:         assertValidQuery(graphQLSchema, query)",
          "1791:         Document document = TestUtil.parseQuery(query)",
          "1793:         when:",
          "1795:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "1797:         then:",
          "",
          "[Removed Lines]",
          "1792:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1794:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1791:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1865:         '''",
          "1866:         assertValidQuery(schema, query)",
          "1867:         Document document = TestUtil.parseQuery(query)",
          "1869:         when:",
          "1871:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "1873:         then:",
          "",
          "[Removed Lines]",
          "1868:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1870:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1867:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1929:         '''",
          "1930:         assertValidQuery(schema, query)",
          "1931:         Document document = TestUtil.parseQuery(query)",
          "1933:         when:",
          "1935:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "1937:         then:",
          "",
          "[Removed Lines]",
          "1932:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1934:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1931:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1986:         '''",
          "1987:         assertValidQuery(schema, query)",
          "1988:         Document document = TestUtil.parseQuery(query)",
          "1990:         when:",
          "1992:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "1994:         then:",
          "",
          "[Removed Lines]",
          "1989:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1991:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1988:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2061:         '''",
          "2062:         assertValidQuery(schema, query)",
          "2063:         Document document = TestUtil.parseQuery(query)",
          "2065:         when:",
          "2067:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2069:         then:",
          "",
          "[Removed Lines]",
          "2064:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2066:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2063:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2123:         '''",
          "2124:         assertValidQuery(schema, query)",
          "2125:         Document document = TestUtil.parseQuery(query)",
          "2127:         when:",
          "2129:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2131:         then:",
          "",
          "[Removed Lines]",
          "2126:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2128:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2125:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2165:         '''",
          "2166:         assertValidQuery(schema, query)",
          "2167:         Document document = TestUtil.parseQuery(query)",
          "2169:         when:",
          "2171:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2173:         then:",
          "",
          "[Removed Lines]",
          "2168:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2170:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2167:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2208:         '''",
          "2209:         assertValidQuery(schema, query)",
          "2210:         Document document = TestUtil.parseQuery(query)",
          "2212:         when:",
          "2214:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2216:         then:",
          "",
          "[Removed Lines]",
          "2211:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2213:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2210:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2251:         '''",
          "2252:         assertValidQuery(schema, query)",
          "2253:         Document document = TestUtil.parseQuery(query)",
          "2255:         when:",
          "2257:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2259:         then:",
          "",
          "[Removed Lines]",
          "2254:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2256:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2253:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2326:         '''",
          "2327:         assertValidQuery(schema, query)",
          "2328:         Document document = TestUtil.parseQuery(query)",
          "2330:         when:",
          "2332:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2334:         then:",
          "",
          "[Removed Lines]",
          "2329:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2331:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2328:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2402:         '''",
          "2403:         assertValidQuery(schema, query)",
          "2404:         Document document = TestUtil.parseQuery(query)",
          "2406:         when:",
          "2408:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2410:         then:",
          "",
          "[Removed Lines]",
          "2405:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2407:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2404:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2464:         def variables = [\"true\": Boolean.TRUE, \"false\": Boolean.FALSE]",
          "2465:         assertValidQuery(graphQLSchema, query, variables)",
          "2466:         Document document = TestUtil.parseQuery(query)",
          "2468:         when:",
          "2470:         println String.join(\"\\n\", printTree(tree))",
          "2471:         def printedTree = printTree(tree)",
          "",
          "[Removed Lines]",
          "2467:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2469:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "2466:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2521:         def variables = [:]",
          "2522:         assertValidQuery(graphQLSchema, query, variables)",
          "2523:         Document document = TestUtil.parseQuery(query)",
          "2525:         when:",
          "2527:         def printedTree = printTreeAndDirectives(tree)",
          "2529:         then:",
          "",
          "[Removed Lines]",
          "2524:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2526:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "2523:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2587:         Document document = TestUtil.parseQuery(query)",
          "2591:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "2593:         expect:",
          "",
          "[Removed Lines]",
          "2589:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2590:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2587:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2640:         Document document = TestUtil.parseQuery(query)",
          "2644:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "2646:         expect:",
          "",
          "[Removed Lines]",
          "2642:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2643:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2640:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2687:         Document document = TestUtil.parseQuery(query)",
          "2691:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "2693:         expect:",
          "",
          "[Removed Lines]",
          "2689:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2690:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2687:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3100:                 document,",
          "3101:                 null,",
          "3102:                 RawVariables.emptyVariables()",
          "3105:         then:",
          "3106:         result.getOperationDepth() == 7",
          "",
          "[Removed Lines]",
          "3103:                 )",
          "",
          "[Added Lines]",
          "3100:         )",
          "",
          "---------------"
        ]
      }
    }
  ]
}