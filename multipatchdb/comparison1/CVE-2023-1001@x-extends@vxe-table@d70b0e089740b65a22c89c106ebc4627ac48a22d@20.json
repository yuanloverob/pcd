{
  "cve_id": "CVE-2023-1001",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in xuliangzhan vxe-table up to 3.7.9. This issue affects the function export of the file packages/textarea/src/textarea.js of the component vxe-textarea. The manipulation of the argument inputValue leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 3.7.10 is able to address this issue. The patch is named d70b0e089740b65a22c89c106ebc4627ac48a22d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-266123.",
  "repo": "x-extends/vxe-table",
  "patch_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
  "patch_info": {
    "commit_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "repo": "x-extends/vxe-table",
    "commit_url": "https://github.com/x-extends/vxe-table/commit/d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "files": [
      "packages/table/src/body.js",
      "packages/textarea/src/textarea.js"
    ],
    "message": "textarea \u4fee\u590d\u6ce8\u5165xss\u95ee\u9898 #I8O21R",
    "before_after_code_files": [
      "packages/table/src/body.js||packages/table/src/body.js",
      "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js"
    ]
  },
  "patch_diff": {
    "packages/table/src/body.js||packages/table/src/body.js": [
      "File: packages/table/src/body.js -> packages/table/src/body.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "499:     elemStore[`${prefix}xSpace`] = $refs.xSpace",
      "500:     elemStore[`${prefix}ySpace`] = $refs.ySpace",
      "501:     elemStore[`${prefix}emptyBlock`] = $refs.emptyBlock",
      "504:   },",
      "505:   beforeDestroy () {",
      "506:     clearTimeout(this.wheelTime)",
      "",
      "[Removed Lines]",
      "502:     this.$el.onscroll = this.scrollEvent",
      "503:     this.$el._onscroll = this.scrollEvent",
      "",
      "[Added Lines]",
      "502:     if (this.$el) {",
      "503:       this.$el.onscroll = this.scrollEvent",
      "504:       this.$el._onscroll = this.scrollEvent",
      "505:     }",
      "",
      "---------------"
    ],
    "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js": [
      "File: packages/textarea/src/textarea.js -> packages/textarea/src/textarea.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:         autoTxtElem.className = ['vxe-textarea--autosize', size ? `size--${size}` : ''].join(' ')",
      "189:         autoTxtElem.style.width = `${textElem.clientWidth}px`",
      "190:         autoTxtElem.style.padding = textStyle.padding",
      "192:       }",
      "193:     },",
      "194:     handleResize () {",
      "",
      "[Removed Lines]",
      "191:         autoTxtElem.innerHTML = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "[Added Lines]",
      "191:         autoTxtElem.innerText = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c461e1d465acfacf4b65da03182d95b55020684f",
      "candidate_info": {
        "commit_hash": "c461e1d465acfacf4b65da03182d95b55020684f",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/c461e1d465acfacf4b65da03182d95b55020684f",
        "files": [
          "packages/table/src/columnInfo.js",
          "packages/table/src/methods.js",
          "styles/pager.scss",
          "types/table.d.ts"
        ],
        "message": "\u4fee\u590dpager\u6837\u5f0f",
        "before_after_code_files": [
          "packages/table/src/columnInfo.js||packages/table/src/columnInfo.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "styles/pager.scss||styles/pager.scss",
          "types/table.d.ts||types/table.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/columnInfo.js||packages/table/src/columnInfo.js": [
          "File: packages/table/src/columnInfo.js -> packages/table/src/columnInfo.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:       halfVisible: false,",
          "105:       defaultVisible: visible,",
          "106:       checked: false,",
          "107:       halfChecked: false,",
          "108:       disabled: false,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:       defaultFixed: _vm.fixed,",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1414:       this.handleDefaultSort()",
          "1415:     }",
          "1416:   },",
          "1420:   hideColumn (fieldOrColumn) {",
          "1421:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "1423:       column.visible = false",
          "1424:     }",
          "1426:   },",
          "1430:   showColumn (fieldOrColumn) {",
          "1431:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "1433:       column.visible = true",
          "1434:     }",
          "1436:   },",
          "1437:   setColumnWidth (fieldOrColumn, width) {",
          "1438:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "",
          "[Removed Lines]",
          "1422:     if (column) {",
          "1425:     return this.handleCustom()",
          "1432:     if (column) {",
          "1435:     return this.handleCustom()",
          "",
          "[Added Lines]",
          "1420:   setColumnFixed (fieldOrColumn, fixed) {",
          "1421:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "1422:     if (column && column.fixed !== fixed) {",
          "1423:       XEUtils.eachTree([column], (column) => {",
          "1424:         column.fixed = fixed",
          "1425:       })",
          "1426:       this.saveCustomFixed()",
          "1427:       return this.refreshColumn()",
          "1428:     }",
          "1429:     return this.$nextTick()",
          "1430:   },",
          "1434:   clearColumnFixed (fieldOrColumn) {",
          "1435:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "1436:     if (column && column.fixed) {",
          "1437:       XEUtils.eachTree([column], (column) => {",
          "1438:         column.fixed = null",
          "1439:       })",
          "1440:       this.saveCustomFixed()",
          "1441:       return this.refreshColumn()",
          "1442:     }",
          "1443:     return this.$nextTick()",
          "1444:   },",
          "1450:     if (column && column.visible) {",
          "1452:       return this.handleCustom()",
          "1454:     return this.$nextTick()",
          "1461:     if (column & !column.visible) {",
          "1463:       return this.handleCustom()",
          "1465:     return this.$nextTick()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1512:       if (isCustomFixed) {",
          "1513:         const columnFixedStorage = getCustomStorageMap(fixedStorageKey)[id]",
          "1514:         if (columnFixedStorage) {",
          "1516:         }",
          "1517:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1545:           const colFixeds = columnFixedStorage.split(',')",
          "1546:           colFixeds.forEach((fixConf) => {",
          "1547:             const [field, fixed] = fixConf.split('|')",
          "1548:             if (customMap[field]) {",
          "1549:               customMap[field].fixed = fixed",
          "1550:             } else {",
          "1551:               customMap[field] = { field, fixed }",
          "1552:             }",
          "1553:           })",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1551:           keyMap[colKey] = column",
          "1552:         }",
          "1553:       })",
          "1555:         const column = keyMap[field]",
          "1556:         if (column) {",
          "1557:           if (XEUtils.isNumber(resizeWidth)) {",
          "",
          "[Removed Lines]",
          "1554:       XEUtils.each(customMap, ({ visible, resizeWidth }, field) => {",
          "",
          "[Added Lines]",
          "1592:       XEUtils.each(customMap, ({ visible, resizeWidth, fixed }, field) => {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1560:           if (XEUtils.isBoolean(visible)) {",
          "1561:             column.visible = visible",
          "1562:           }",
          "1563:         }",
          "1564:       })",
          "1565:     }",
          "1566:   },",
          "1567:   saveCustomVisible () {",
          "1568:     const { id, collectColumn, customConfig, customOpts } = this",
          "1569:     const { checkMethod, storage } = customOpts",
          "1570:     const isAllStorage = customOpts.storage === true",
          "1573:       const columnVisibleStorageMap = getCustomStorageMap(visibleStorageKey)",
          "1574:       const colHides = []",
          "1575:       const colShows = []",
          "",
          "[Removed Lines]",
          "1571:     const isVisible = isAllStorage || (storage && storage.visible)",
          "1572:     if (customConfig && isVisible) {",
          "",
          "[Added Lines]",
          "1601:           if (fixed) {",
          "1602:             column.fixed = fixed",
          "1603:           }",
          "1608:   saveCustomFixed () {",
          "1609:     const { id, collectColumn, customConfig, customOpts } = this",
          "1610:     const { storage } = customOpts",
          "1611:     const isAllStorage = customOpts.storage === true",
          "1612:     const isCustomFixed = isAllStorage || (storage && storage.fixed)",
          "1613:     if (customConfig && isCustomFixed) {",
          "1614:       const columnFixedStorageMap = getCustomStorageMap(fixedStorageKey)",
          "1615:       const colFixeds = []",
          "1616:       if (!id) {",
          "1617:         errLog('vxe.error.reqProp', ['id'])",
          "1618:         return",
          "1619:       }",
          "1620:       XEUtils.eachTree(collectColumn, (column) => {",
          "1621:         if (column.fixed && column.fixed !== column.defaultFixed) {",
          "1622:           const colKey = column.getKey()",
          "1623:           if (colKey) {",
          "1624:             colFixeds.push(`${colKey}|${column.fixed}`)",
          "1625:           }",
          "1626:         }",
          "1627:       })",
          "1628:       columnFixedStorageMap[id] = colFixeds.join(',') || undefined",
          "1629:       localStorage.setItem(fixedStorageKey, XEUtils.toJSONString(columnFixedStorageMap))",
          "1630:     }",
          "1631:   },",
          "1636:     const isCustomVisible = isAllStorage || (storage && storage.visible)",
          "1637:     if (customConfig && isCustomVisible) {",
          "",
          "---------------"
        ],
        "styles/pager.scss||styles/pager.scss": [
          "File: styles/pager.scss -> styles/pager.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     outline: 0;",
          "42:     padding: 0;",
          "43:     border: 1px solid transparent;",
          "44:     &:not(.is--disabled) {",
          "45:       &:focus {",
          "46:         box-shadow: 0 0 0.25em 0 $vxe-primary-color;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:     font-size: inherit;",
          "",
          "---------------"
        ],
        "types/table.d.ts||types/table.d.ts": [
          "File: types/table.d.ts -> types/table.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "463:     footerData: any[][];",
          "464:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "470:   setColumnFixed(column: ColumnInfo, fixed: string): Promise<void>",
          "475:   clearColumnFixed(column: ColumnInfo): Promise<void>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "81a3468babe7dff58da7b61528c0b10f12399d5d",
      "candidate_info": {
        "commit_hash": "81a3468babe7dff58da7b61528c0b10f12399d5d",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/81a3468babe7dff58da7b61528c0b10f12399d5d",
        "files": [
          "package.json",
          "packages/grid/src/grid.ts",
          "packages/table/module/custom/mixin.ts",
          "packages/table/module/custom/panel.ts",
          "packages/table/module/export/export-panel.ts",
          "packages/table/src/methods.ts",
          "styles/components/table-module/custom.scss"
        ],
        "message": "releases 3.10.5",
        "before_after_code_files": [
          "packages/grid/src/grid.ts||packages/grid/src/grid.ts",
          "packages/table/module/custom/mixin.ts||packages/table/module/custom/mixin.ts",
          "packages/table/module/custom/panel.ts||packages/table/module/custom/panel.ts",
          "packages/table/module/export/export-panel.ts||packages/table/module/export/export-panel.ts",
          "packages/table/src/methods.ts||packages/table/src/methods.ts",
          "styles/components/table-module/custom.scss||styles/components/table-module/custom.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/grid/src/grid.ts||packages/grid/src/grid.ts": [
          "File: packages/grid/src/grid.ts -> packages/grid/src/grid.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "684:           this.openExport(btnParams)",
          "685:           break",
          "686:         case 'reset_custom':",
          "688:           break",
          "689:         case '_init':",
          "690:         case 'reload':",
          "",
          "[Removed Lines]",
          "687:           this.resetColumn(true)",
          "",
          "[Added Lines]",
          "687:           this.resetCustom(true)",
          "",
          "---------------"
        ],
        "packages/table/module/custom/mixin.ts||packages/table/module/custom/mixin.ts": [
          "File: packages/table/module/custom/mixin.ts -> packages/table/module/custom/mixin.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:       }",
          "37:       return this.$nextTick()",
          "38:     },",
          "39:     calcMaxHeight  () {",
          "40:       const { $el, customStore } = this",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:     _saveCustom () {",
          "40:       const $xeTable = this",
          "42:       const { customOpts, customColumnList } = this",
          "43:       const { allowVisible, allowSort, allowFixed, allowResizable } = customOpts",
          "44:       XEUtils.eachTree(customColumnList, (column, index, items, path, parent) => {",
          "45:         if (parent) {",
          "47:           column.fixed = parent.fixed",
          "48:         } else {",
          "49:           if (allowSort) {",
          "50:             const sortIndex = index + 1",
          "51:             column.renderSortNumber = sortIndex",
          "52:           }",
          "53:           if (allowFixed) {",
          "54:             column.fixed = column.renderFixed",
          "55:           }",
          "56:         }",
          "57:         if (allowResizable) {",
          "58:           if (column.renderVisible && (!column.children || column.children.length)) {",
          "59:             if (column.renderResizeWidth !== column.renderWidth) {",
          "60:               column.resizeWidth = column.renderResizeWidth",
          "61:               column.renderWidth = column.renderResizeWidth",
          "62:             }",
          "63:           }",
          "64:         }",
          "65:         if (allowVisible) {",
          "66:           column.visible = column.renderVisible",
          "67:         }",
          "68:       })",
          "69:       $xeTable.closeCustom()",
          "70:       return $xeTable.saveCustomStore('confirm')",
          "71:     },",
          "72:     _cancelCustom () {",
          "73:       const $xeTable = this",
          "75:       const { customStore, customOpts, customColumnList } = $xeTable",
          "76:       const { oldSortMaps, oldFixedMaps, oldVisibleMaps } = customStore",
          "77:       const { allowVisible, allowSort, allowFixed, allowResizable } = customOpts",
          "78:       XEUtils.eachTree(customColumnList, column => {",
          "79:         const colid = column.getKey()",
          "80:         const visible = !!oldVisibleMaps[colid]",
          "81:         const fixed = oldFixedMaps[colid] || ''",
          "82:         if (allowVisible) {",
          "83:           column.renderVisible = visible",
          "84:           column.visible = visible",
          "85:         }",
          "86:         if (allowFixed) {",
          "87:           column.renderFixed = fixed",
          "88:           column.fixed = fixed",
          "89:         }",
          "90:         if (allowSort) {",
          "91:           column.renderSortNumber = oldSortMaps[colid] || 0",
          "92:         }",
          "93:         if (allowResizable) {",
          "94:           column.renderResizeWidth = column.renderWidth",
          "95:         }",
          "96:       }, { children: 'children' })",
          "97:       return $xeTable.$nextTick()",
          "98:     },",
          "99:     _resetCustom (options: any) {",
          "100:       const { collectColumn, customOpts } = this",
          "101:       const { checkMethod } = customOpts",
          "102:       const opts = Object.assign({",
          "103:         visible: true,",
          "104:         resizable: options === true,",
          "105:         fixed: options === true,",
          "106:         sort: options === true",
          "107:       }, options)",
          "108:       XEUtils.eachTree(collectColumn, (column) => {",
          "109:         if (opts.resizable) {",
          "110:           column.resizeWidth = 0",
          "111:         }",
          "112:         if (opts.fixed) {",
          "113:           column.fixed = column.defaultFixed",
          "114:         }",
          "115:         if (opts.sort) {",
          "116:           column.renderSortNumber = column.sortNumber",
          "117:         }",
          "118:         if (!checkMethod || checkMethod({ column })) {",
          "119:           column.visible = column.defaultVisible",
          "120:         }",
          "121:         column.renderResizeWidth = column.renderWidth",
          "122:       })",
          "123:       this.saveCustomStore('reset')",
          "124:       return this.handleCustom()",
          "125:     },",
          "126:     _toggleCustomAllCheckbox () {",
          "127:       const { customStore } = this",
          "128:       const isAll = !customStore.isAll",
          "129:       return this.setCustomAllCheckbox(isAll)",
          "130:     },",
          "131:     _setCustomAllCheckbox (checked: boolean) {",
          "132:       const $xeTable = this",
          "134:       const { customStore } = this",
          "135:       const { customColumnList, customOpts } = this",
          "136:       const { checkMethod, visibleMethod } = customOpts",
          "137:       const isAll = !!checked",
          "138:       if (customOpts.immediate) {",
          "139:         XEUtils.eachTree(customColumnList, (column) => {",
          "140:           if (visibleMethod && !visibleMethod({ column })) {",
          "141:             return",
          "142:           }",
          "143:           if (checkMethod && !checkMethod({ column })) {",
          "144:             return",
          "145:           }",
          "146:           column.visible = isAll",
          "147:           column.renderVisible = isAll",
          "148:           column.halfVisible = false",
          "149:         })",
          "150:         customStore.isAll = isAll",
          "151:         $xeTable.handleCustom()",
          "152:         $xeTable.saveCustomStore('update:visible')",
          "153:       } else {",
          "154:         XEUtils.eachTree(customColumnList, (column) => {",
          "155:           if (visibleMethod && !visibleMethod({ column })) {",
          "156:             return",
          "157:           }",
          "158:           if (checkMethod && !checkMethod({ column })) {",
          "159:             return",
          "160:           }",
          "161:           column.renderVisible = isAll",
          "162:           column.halfVisible = false",
          "163:         })",
          "164:         customStore.isAll = isAll",
          "165:       }",
          "166:       $xeTable.checkCustomStatus()",
          "167:     },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:       if ($el) {",
          "44:         tableHeight = $el.clientHeight - 28",
          "45:       }",
          "47:     },",
          "48:     checkCustomStatus () {",
          "49:       const { customStore, collectColumn, customOpts } = this",
          "",
          "[Removed Lines]",
          "46:       customStore.maxHeight = Math.max(4, tableHeight)",
          "",
          "[Added Lines]",
          "175:       customStore.maxHeight = Math.max(88, tableHeight)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:         this.emitCustomEvent('open', evnt)",
          "76:       }",
          "77:     },",
          "79:       const { customStore } = this",
          "80:       if (customStore.visible) {",
          "81:         customStore.activeBtn = false",
          "",
          "[Removed Lines]",
          "78:     customColseEvent (evnt: any) {",
          "",
          "[Added Lines]",
          "207:     customCloseEvent (evnt: any) {",
          "",
          "---------------"
        ],
        "packages/table/module/custom/panel.ts||packages/table/module/custom/panel.ts": [
          "File: packages/table/module/custom/panel.ts -> packages/table/module/custom/panel.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: const renderSimplePanel = (h: CreateElement, _vm: any) => {",
          "29:   const VxeUIButtonComponent = VxeUI.getComponent<VxeButtonComponent>('VxeButton')",
          "33:   const { maxHeight } = customStore",
          "34:   const { checkMethod, visibleMethod, allowVisible, allowSort, allowFixed, trigger, placement } = customOpts",
          "35:   const colVNs: any[] = []",
          "36:   const customWrapperOns: any = {}",
          "",
          "[Removed Lines]",
          "31:   const { _e, $xetable, customStore, dragColumn } = _vm",
          "32:   const { customColumnList, customOpts, isMaxFixedColumn } = $xetable",
          "",
          "[Added Lines]",
          "31:   const $xeTable = _vm.$xeTable",
          "32:   const { _e, customStore, dragColumn } = _vm",
          "33:   const { customColumnList, customOpts, isMaxFixedColumn } = $xeTable",
          "36:   const slots = customOpts.slots || {}",
          "37:   const headerSlot = slots.header",
          "38:   const topSlot = slots.top",
          "39:   const bottomSlot = slots.bottom",
          "40:   const defaultSlot = slots.default",
          "41:   const footerSlot = slots.footer",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:     customWrapperOns.mouseenter = _vm.handleWrapperMouseenterEvent",
          "40:     customWrapperOns.mouseleave = _vm.handleWrapperMouseleaveEvent",
          "41:   }",
          "42:   XEUtils.eachTree(customColumnList, (column, index, items, path, parent) => {",
          "43:     const isVisible = visibleMethod ? visibleMethod({ column }) : true",
          "44:     if (isVisible) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:   const isAllChecked = customStore.isAll",
          "50:   const isAllIndeterminate = customStore.isIndeterminate",
          "51:   const params = {",
          "52:     $table: $xeTable,",
          "53:     $grid: $xeTable.xegrid,",
          "54:     columns: customColumnList,",
          "55:     isAllChecked,",
          "56:     isAllIndeterminate",
          "57:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "164:       )",
          "165:     }",
          "166:   })",
          "169:   return h('div', {",
          "170:     key: 'simple',",
          "171:     class: ['vxe-table-custom-wrapper', `placement--${placement}`, {",
          "",
          "[Removed Lines]",
          "167:   const isAllChecked = customStore.isAll",
          "168:   const isAllIndeterminate = customStore.isIndeterminate",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "178:       : {}",
          "179:   }, customStore.visible",
          "180:     ? [",
          "182:           class: 'vxe-table-custom--header'",
          "199:               }, [",
          "206:               ])",
          "212:         h('div', {",
          "213:           ref: 'bodyElemRef',",
          "215:         }, [",
          "224:           h('div', {",
          "225:             ref: 'dragHintElemRef',",
          "226:             class: 'vxe-table-custom-popup--drag-hint'",
          "",
          "[Removed Lines]",
          "181:         h('ul', {",
          "183:         }, [",
          "184:           h('li', {",
          "185:             class: 'vxe-table-custom--option'",
          "186:           }, [",
          "187:             allowVisible",
          "188:               ? h('div', {",
          "189:                 class: ['vxe-table-custom--checkbox-option', {",
          "190:                   'is--checked': isAllChecked,",
          "191:                   'is--indeterminate': isAllIndeterminate",
          "192:                 }],",
          "193:                 attrs: {",
          "194:                   title: getI18n('vxe.table.allTitle')",
          "195:                 },",
          "196:                 on: {",
          "197:                   click: _vm.allOptionEvent",
          "198:                 }",
          "200:                 h('span', {",
          "201:                   class: ['vxe-checkbox--icon', isAllIndeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]",
          "202:                 }),",
          "203:                 h('span', {",
          "204:                   class: 'vxe-checkbox--label'",
          "205:                 }, getI18n('vxe.toolbar.customAll'))",
          "207:               : h('span', {",
          "208:                 class: 'vxe-checkbox--label'",
          "209:               }, getI18n('vxe.table.customTitle'))",
          "210:           ])",
          "211:         ]),",
          "214:           class: 'vxe-table-custom--list-wrapper'",
          "216:           h('transition-group', {",
          "217:             class: 'vxe-table-custom--body',",
          "218:             props: {",
          "219:               name: 'vxe-table-custom--list',",
          "220:               tag: 'ul'",
          "221:             },",
          "222:             on: customWrapperOns",
          "223:           }, colVNs),",
          "",
          "[Added Lines]",
          "195:         h('div', {",
          "197:         }, headerSlot",
          "198:           ? $xeTable.callSlot(headerSlot, params, h)",
          "199:           : [",
          "200:               h('ul', {",
          "201:                 class: 'vxe-table-custom--panel-list'",
          "203:                 h('li', {",
          "204:                   class: 'vxe-table-custom--option'",
          "205:                 }, [",
          "206:                   allowVisible",
          "207:                     ? h('div', {",
          "208:                       class: ['vxe-table-custom--checkbox-option', {",
          "209:                         'is--checked': isAllChecked,",
          "210:                         'is--indeterminate': isAllIndeterminate",
          "211:                       }],",
          "212:                       attrs: {",
          "213:                         title: getI18n('vxe.table.allTitle')",
          "214:                       },",
          "215:                       on: {",
          "216:                         click: _vm.allOptionEvent",
          "217:                       }",
          "218:                     }, [",
          "219:                       h('span', {",
          "220:                         class: ['vxe-checkbox--icon', isAllIndeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]",
          "221:                       }),",
          "222:                       h('span', {",
          "223:                         class: 'vxe-checkbox--label'",
          "224:                       }, getI18n('vxe.toolbar.customAll'))",
          "225:                     ])",
          "226:                     : h('span', {",
          "227:                       class: 'vxe-checkbox--label'",
          "228:                     }, getI18n('vxe.table.customTitle'))",
          "229:                 ])",
          "231:             ]),",
          "234:           class: 'vxe-table-custom--body'",
          "236:           topSlot",
          "237:             ? h('div', {",
          "238:               class: 'vxe-table-custom--panel-top'",
          "239:             }, $xeTable.callSlot(topSlot, params, h))",
          "240:             : renderEmptyElement($xeTable),",
          "241:           defaultSlot",
          "242:             ? h('div', {",
          "243:               class: 'vxe-table-custom--panel-body'",
          "244:             }, $xeTable.callSlot(defaultSlot, params, h))",
          "245:             : h('transition-group', {",
          "246:               class: 'vxe-table-custom--panel-list',",
          "247:               props: {",
          "248:                 name: 'vxe-table-custom--list',",
          "249:                 tag: 'ul'",
          "250:               },",
          "251:               on: customWrapperOns",
          "252:             }, colVNs),",
          "253:           bottomSlot",
          "254:             ? h('div', {",
          "255:               class: 'vxe-table-custom--panel-bottom'",
          "256:             }, $xeTable.callSlot(bottomSlot, params, h))",
          "257:             : renderEmptyElement($xeTable),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "229:         customOpts.showFooter",
          "230:           ? h('div', {",
          "231:             class: 'vxe-table-custom--footer'",
          "274:           : null",
          "275:       ]",
          "276:     : [])",
          "",
          "[Removed Lines]",
          "232:           }, [",
          "233:             h(VxeUIButtonComponent, {",
          "234:               props: {",
          "235:                 mode: 'text',",
          "236:                 content: customOpts.resetButtonText || getI18n('vxe.table.customRestore')",
          "237:               },",
          "238:               on: {",
          "239:                 click: _vm.resetCustomEvent",
          "240:               }",
          "241:             }),",
          "242:             customOpts.immediate",
          "243:               ? h(VxeUIButtonComponent, {",
          "244:                 props: {",
          "245:                   mode: 'text',",
          "246:                   content: customOpts.closeButtonText || getI18n('vxe.table.customClose')",
          "247:                 },",
          "248:                 on: {",
          "249:                   click: _vm.cancelCloseEvent",
          "250:                 }",
          "251:               })",
          "252:               : h(VxeUIButtonComponent, {",
          "253:                 props: {",
          "254:                   mode: 'text',",
          "255:                   content: customOpts.resetButtonText || getI18n('vxe.table.customCancel')",
          "256:                 },",
          "257:                 on: {",
          "258:                   click: _vm.cancelCustomEvent",
          "259:                 }",
          "260:               }),",
          "261:             customOpts.immediate",
          "262:               ? _e()",
          "263:               : h(VxeUIButtonComponent, {",
          "264:                 props: {",
          "265:                   mode: 'text',",
          "266:                   status: 'primary',",
          "267:                   content: customOpts.confirmButtonText || getI18n('vxe.table.customConfirm')",
          "268:                 },",
          "269:                 on: {",
          "270:                   click: _vm.confirmCustomEvent",
          "271:                 }",
          "272:               })",
          "273:           ])",
          "",
          "[Added Lines]",
          "266:           }, footerSlot",
          "267:             ? $xeTable.callSlot(footerSlot, params, h)",
          "268:             : [",
          "269:                 h('div', {",
          "270:                   class: 'vxe-table-custom--footer-buttons'",
          "271:                 }, [",
          "272:                   h(VxeUIButtonComponent, {",
          "273:                     props: {",
          "274:                       mode: 'text',",
          "275:                       content: customOpts.resetButtonText || getI18n('vxe.table.customRestore')",
          "276:                     },",
          "277:                     on: {",
          "278:                       click: _vm.resetCustomEvent",
          "279:                     }",
          "280:                   }),",
          "281:                   customOpts.immediate",
          "282:                     ? h(VxeUIButtonComponent, {",
          "283:                       props: {",
          "284:                         mode: 'text',",
          "285:                         content: customOpts.closeButtonText || getI18n('vxe.table.customClose')",
          "286:                       },",
          "287:                       on: {",
          "288:                         click: _vm.cancelCloseEvent",
          "289:                       }",
          "290:                     })",
          "291:                     : h(VxeUIButtonComponent, {",
          "292:                       props: {",
          "293:                         mode: 'text',",
          "294:                         content: customOpts.resetButtonText || getI18n('vxe.table.customCancel')",
          "295:                       },",
          "296:                       on: {",
          "297:                         click: _vm.cancelCustomEvent",
          "298:                       }",
          "299:                     }),",
          "300:                   customOpts.immediate",
          "301:                     ? _e()",
          "302:                     : h(VxeUIButtonComponent, {",
          "303:                       props: {",
          "304:                         mode: 'text',",
          "305:                         status: 'primary',",
          "306:                         content: customOpts.confirmButtonText || getI18n('vxe.table.customConfirm')",
          "307:                       },",
          "308:                       on: {",
          "309:                         click: _vm.confirmCustomEvent",
          "310:                       }",
          "311:                     })",
          "312:                 ])",
          "313:               ])",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "283:   const VxeUITooltipComponent = VxeUI.getComponent<VxeTooltipComponent>('VxeTooltip')",
          "284:   const $xeTableCustomPanel = _vm",
          "288:   const { modalOptions, allowVisible, allowSort, allowFixed, allowResizable, checkMethod, visibleMethod } = customOpts",
          "289:   const { maxFixedSize } = columnOpts",
          "290:   const modalOpts = Object.assign({}, modalOptions)",
          "291:   const trVNs: VNode[] = []",
          "292:   XEUtils.eachTree(customColumnList, (column, index, items, path, parent) => {",
          "293:     const isVisible = visibleMethod ? visibleMethod({ column }) : true",
          "294:     if (isVisible) {",
          "",
          "[Removed Lines]",
          "286:   const { _e, $xetable, customStore } = _vm",
          "287:   const { customOpts, customColumnList, columnOpts, isMaxFixedColumn } = $xetable",
          "",
          "[Added Lines]",
          "326:   const $xeTable = _vm.$xeTable",
          "327:   const { _e, customStore } = _vm",
          "328:   const { customOpts, customColumnList, columnOpts, isMaxFixedColumn } = $xeTable",
          "332:   const slots = customOpts.slots || {}",
          "333:   const headerSlot = slots.header",
          "334:   const topSlot = slots.top",
          "335:   const bottomSlot = slots.bottom",
          "336:   const defaultSlot = slots.default",
          "337:   const footerSlot = slots.footer",
          "339:   const isAllChecked = customStore.isAll",
          "340:   const isAllIndeterminate = customStore.isIndeterminate",
          "341:   const params = {",
          "342:     $table: $xeTable,",
          "343:     $grid: $xeTable.xegrid,",
          "344:     columns: customColumnList,",
          "345:     isAllChecked,",
          "346:     isAllIndeterminate",
          "347:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "438:       )",
          "439:     }",
          "440:   })",
          "443:   return VxeUIModalComponent",
          "444:     ? h(VxeUIModalComponent, {",
          "445:       key: 'modal',",
          "",
          "[Removed Lines]",
          "441:   const isAllChecked = customStore.isAll",
          "442:   const isAllIndeterminate = customStore.isIndeterminate",
          "",
          "[Added Lines]",
          "497:   const scopedSlots: Record<string, any> = {",
          "498:     default: () => {",
          "499:       if (defaultSlot) {",
          "500:         return $xeTable.callSlot(defaultSlot, params, h)",
          "501:       }",
          "502:       return h('div', {",
          "503:         ref: 'bodyElemRef',",
          "504:         class: 'vxe-table-custom-popup--body'",
          "505:       }, [",
          "506:         topSlot",
          "507:           ? h('div', {",
          "508:             class: 'vxe-table-custom-popup--table-top'",
          "509:           }, $xeTable.callSlot(topSlot, params, h))",
          "510:           : renderEmptyElement($xeTable),",
          "511:         h('div', {",
          "512:           class: 'vxe-table-custom-popup--table-wrapper'",
          "513:         }, [",
          "514:           h('table', {}, [",
          "515:             h('colgroup', {}, [",
          "516:               allowVisible",
          "517:                 ? h('col', {",
          "518:                   class: 'vxe-table-custom-popup--table-col-seq'",
          "519:                 })",
          "520:                 : _e(),",
          "521:               allowSort",
          "522:                 ? h('col', {",
          "523:                   class: 'vxe-table-custom-popup--table-col-sort'",
          "524:                 })",
          "525:                 : _e(),",
          "526:               h('col', {",
          "527:                 class: 'vxe-table-custom-popup--table-col-title'",
          "528:               }),",
          "529:               allowResizable",
          "530:                 ? h('col', {",
          "531:                   class: 'vxe-table-custom-popup--table-col-width'",
          "532:                 })",
          "533:                 : _e(),",
          "534:               allowFixed",
          "535:                 ? h('col', {",
          "536:                   class: 'vxe-table-custom-popup--table-col-fixed'",
          "537:                 })",
          "538:                 : _e()",
          "539:             ]),",
          "540:             h('thead', {}, [",
          "541:               h('tr', {}, [",
          "542:                 allowVisible",
          "543:                   ? h('th', {}, [",
          "544:                     h('div', {",
          "545:                       class: ['vxe-table-custom--checkbox-option', {",
          "546:                         'is--checked': isAllChecked,",
          "547:                         'is--indeterminate': isAllIndeterminate",
          "548:                       }],",
          "549:                       attrs: {",
          "550:                         title: getI18n('vxe.table.allTitle')",
          "551:                       },",
          "552:                       on: {",
          "553:                         click: _vm.allOptionEvent",
          "554:                       }",
          "556:                     }, [",
          "557:                       h('span', {",
          "558:                         class: ['vxe-checkbox--icon', isAllIndeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]",
          "559:                       }),",
          "560:                       h('span', {",
          "561:                         class: 'vxe-checkbox--label'",
          "562:                       }, getI18n('vxe.toolbar.customAll'))",
          "563:                     ])",
          "564:                   ])",
          "565:                   : _e(),",
          "566:                 allowSort",
          "567:                   ? h('th', {}, [",
          "568:                     h('span', {",
          "569:                       class: 'vxe-table-custom-popup--table-sort-help-title'",
          "570:                     }, getI18n('vxe.custom.setting.colSort')),",
          "571:                     VxeUITooltipComponent",
          "572:                       ? h(VxeUITooltipComponent, {",
          "573:                         props: {",
          "574:                           enterable: true,",
          "575:                           content: getI18n('vxe.custom.setting.sortHelpTip'),",
          "576:                           popupClassName: 'vxe-table--ignore-clear'",
          "577:                         },",
          "578:                         scopedSlots: {",
          "579:                           default: () => {",
          "580:                             return h('i', {",
          "581:                               class: 'vxe-table-custom-popup--table-sort-help-icon vxe-icon-question-circle-fill'",
          "582:                             })",
          "583:                           }",
          "584:                         }",
          "585:                       })",
          "586:                       : renderEmptyElement($xeTableCustomPanel)",
          "587:                   ])",
          "588:                   : _e(),",
          "589:                 h('th', {}, getI18n('vxe.custom.setting.colTitle')),",
          "590:                 allowResizable",
          "591:                   ? h('th', {}, getI18n('vxe.custom.setting.colResizable'))",
          "592:                   : _e(),",
          "593:                 allowFixed",
          "594:                   ? h('th', {}, getI18n(`vxe.custom.setting.${maxFixedSize ? 'colFixedMax' : 'colFixed'}`, [maxFixedSize]))",
          "595:                   : _e()",
          "596:               ])",
          "597:             ]),",
          "598:             h('transition-group', {",
          "599:               class: 'vxe-table-custom--panel-list',",
          "600:               props: {",
          "601:                 tag: 'tbody',",
          "602:                 name: 'vxe-table-custom--list'",
          "603:               }",
          "604:             }, trVNs)",
          "605:           ])",
          "606:         ]),",
          "607:         bottomSlot",
          "608:           ? h('div', {",
          "609:             class: 'vxe-table-custom-popup--table-bottom'",
          "610:           }, $xeTable.callSlot(bottomSlot, params, h))",
          "611:           : renderEmptyElement($xeTable),",
          "612:         h('div', {",
          "613:           ref: 'dragHintElemRef',",
          "614:           class: 'vxe-table-custom-popup--drag-hint'",
          "615:         }, getI18n('vxe.custom.cstmDragTarget', [_vm.dragColumn ? _vm.dragColumn.getTitle() : '']))",
          "616:       ])",
          "617:     },",
          "618:     footer: () => {",
          "619:       if (footerSlot) {",
          "620:         return $xeTable.callSlot(footerSlot, params, h)",
          "621:       }",
          "622:       return h('div', {",
          "623:         class: 'vxe-table-custom-popup--footer'",
          "624:       }, [",
          "625:         h(VxeUIButtonComponent, {",
          "626:           props: {",
          "627:             content: customOpts.resetButtonText || getI18n('vxe.custom.cstmRestore')",
          "628:           },",
          "629:           on: {",
          "630:             click: _vm.resetCustomEvent",
          "631:           }",
          "632:         }),",
          "633:         h(VxeUIButtonComponent, {",
          "634:           props: {",
          "635:             content: customOpts.resetButtonText || getI18n('vxe.custom.cstmCancel')",
          "636:           },",
          "637:           on: {",
          "638:             click: _vm.cancelCustomEvent",
          "639:           }",
          "640:         }),",
          "641:         h(VxeUIButtonComponent, {",
          "642:           props: {",
          "643:             status: 'primary',",
          "644:             content: customOpts.confirmButtonText || getI18n('vxe.custom.cstmConfirm')",
          "645:           },",
          "646:           on: {",
          "647:             click: _vm.confirmCustomEvent",
          "648:           }",
          "649:         })",
          "650:       ])",
          "651:     }",
          "652:   }",
          "653:   if (headerSlot) {",
          "654:     scopedSlots.header = () => $xeTable.callSlot(headerSlot, params, h)",
          "655:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "451:         minWidth: modalOpts.minWidth || 700,",
          "452:         height: modalOpts.height || Math.min(680, document.documentElement.clientHeight),",
          "453:         minHeight: modalOpts.minHeight || 400,",
          "458:         escClosable: !!modalOpts.escClosable,",
          "459:         destroyOnClose: true,",
          "460:         showFooter: true",
          "",
          "[Removed Lines]",
          "454:         showZoom: !!modalOpts.showZoom,",
          "455:         mask: !!modalOpts.mask,",
          "456:         lockView: !!modalOpts.lockView,",
          "457:         resize: !!modalOpts.resize,",
          "",
          "[Added Lines]",
          "667:         showZoom: modalOpts.showZoom,",
          "668:         showMaximize: modalOpts.showMaximize,",
          "669:         showMinimize: modalOpts.showMinimize,",
          "670:         mask: modalOpts.mask,",
          "671:         lockView: modalOpts.lockView,",
          "672:         resize: modalOpts.resize,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "464:           customStore.visible = value",
          "465:         }",
          "466:       },",
          "617:     })",
          "618:     : renderEmptyElement($xeTableCustomPanel)",
          "619: }",
          "",
          "[Removed Lines]",
          "467:       scopedSlots: {",
          "468:         default: () => {",
          "469:           return h('div', {",
          "470:             ref: 'bodyElemRef',",
          "471:             class: 'vxe-table-custom-popup--body'",
          "472:           }, [",
          "473:             h('div', {",
          "474:               class: 'vxe-table-custom-popup--table-wrapper'",
          "475:             }, [",
          "476:               h('table', {}, [",
          "477:                 h('colgroup', {}, [",
          "478:                   allowVisible",
          "479:                     ? h('col', {",
          "480:                       style: {",
          "481:                         width: '80px'",
          "482:                       }",
          "483:                     })",
          "484:                     : _e(),",
          "485:                   allowSort",
          "486:                     ? h('col', {",
          "487:                       style: {",
          "488:                         width: '80px'",
          "489:                       }",
          "490:                     })",
          "491:                     : _e(),",
          "492:                   h('col', {",
          "493:                     style: {",
          "494:                       minWidth: '120px'",
          "495:                     }",
          "496:                   }),",
          "497:                   allowResizable",
          "498:                     ? h('col', {",
          "499:                       style: {",
          "500:                         width: '140px'",
          "501:                       }",
          "502:                     })",
          "503:                     : _e(),",
          "504:                   allowFixed",
          "505:                     ? h('col', {",
          "506:                       style: {",
          "507:                         width: '200px'",
          "508:                       }",
          "509:                     })",
          "510:                     : _e()",
          "511:                 ]),",
          "512:                 h('thead', {}, [",
          "513:                   h('tr', {}, [",
          "514:                     allowVisible",
          "515:                       ? h('th', {}, [",
          "516:                         h('div', {",
          "517:                           class: ['vxe-table-custom--checkbox-option', {",
          "518:                             'is--checked': isAllChecked,",
          "519:                             'is--indeterminate': isAllIndeterminate",
          "520:                           }],",
          "521:                           attrs: {",
          "522:                             title: getI18n('vxe.table.allTitle')",
          "523:                           },",
          "524:                           on: {",
          "525:                             click: _vm.allOptionEvent",
          "526:                           }",
          "528:                         }, [",
          "529:                           h('span', {",
          "530:                             class: ['vxe-checkbox--icon', isAllIndeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]",
          "531:                           }),",
          "532:                           h('span', {",
          "533:                             class: 'vxe-checkbox--label'",
          "534:                           }, getI18n('vxe.toolbar.customAll'))",
          "535:                         ])",
          "536:                       ])",
          "537:                       : _e(),",
          "538:                     allowSort",
          "539:                       ? h('th', {}, [",
          "540:                         h('span', {",
          "541:                           class: 'vxe-table-custom-popup--table-sort-help-title'",
          "542:                         }, getI18n('vxe.custom.setting.colSort')),",
          "543:                         VxeUITooltipComponent",
          "544:                           ? h(VxeUITooltipComponent, {",
          "545:                             props: {",
          "546:                               enterable: true,",
          "547:                               content: getI18n('vxe.custom.setting.sortHelpTip'),",
          "548:                               popupClassName: 'vxe-table--ignore-clear'",
          "549:                             },",
          "550:                             scopedSlots: {",
          "551:                               default: () => {",
          "552:                                 return h('i', {",
          "553:                                   class: 'vxe-table-custom-popup--table-sort-help-icon vxe-icon-question-circle-fill'",
          "554:                                 })",
          "555:                               }",
          "556:                             }",
          "557:                           })",
          "558:                           : renderEmptyElement($xeTableCustomPanel)",
          "559:                       ])",
          "560:                       : _e(),",
          "561:                     h('th', {}, getI18n('vxe.custom.setting.colTitle')),",
          "562:                     allowResizable",
          "563:                       ? h('th', {}, getI18n('vxe.custom.setting.colResizable'))",
          "564:                       : _e(),",
          "565:                     allowFixed",
          "566:                       ? h('th', {}, getI18n(`vxe.custom.setting.${maxFixedSize ? 'colFixedMax' : 'colFixed'}`, [maxFixedSize]))",
          "567:                       : _e()",
          "568:                   ])",
          "569:                 ]),",
          "570:                 h('transition-group', {",
          "571:                   class: 'vxe-table-custom--body',",
          "572:                   props: {",
          "573:                     tag: 'tbody',",
          "574:                     name: 'vxe-table-custom--list'",
          "575:                   }",
          "576:                 }, trVNs)",
          "577:               ])",
          "578:             ]),",
          "579:             h('div', {",
          "580:               ref: 'dragHintElemRef',",
          "581:               class: 'vxe-table-custom-popup--drag-hint'",
          "582:             }, getI18n('vxe.custom.cstmDragTarget', [_vm.dragColumn ? _vm.dragColumn.getTitle() : '']))",
          "583:           ])",
          "584:         },",
          "585:         footer: () => {",
          "586:           return h('div', {",
          "587:             class: 'vxe-table-custom-popup--footer'",
          "588:           }, [",
          "589:             h(VxeUIButtonComponent, {",
          "590:               props: {",
          "591:                 content: customOpts.resetButtonText || getI18n('vxe.custom.cstmRestore')",
          "592:               },",
          "593:               on: {",
          "594:                 click: _vm.resetCustomEvent",
          "595:               }",
          "596:             }),",
          "597:             h(VxeUIButtonComponent, {",
          "598:               props: {",
          "599:                 content: customOpts.resetButtonText || getI18n('vxe.custom.cstmCancel')",
          "600:               },",
          "601:               on: {",
          "602:                 click: _vm.cancelCustomEvent",
          "603:               }",
          "604:             }),",
          "605:             h(VxeUIButtonComponent, {",
          "606:               props: {",
          "607:                 status: 'primary',",
          "608:                 content: customOpts.confirmButtonText || getI18n('vxe.custom.cstmConfirm')",
          "609:               },",
          "610:               on: {",
          "611:                 click: _vm.confirmCustomEvent",
          "612:               }",
          "613:             })",
          "614:           ])",
          "615:         }",
          "616:       }",
          "",
          "[Added Lines]",
          "682:       scopedSlots",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "627:     }",
          "628:   },",
          "629:   inject: {",
          "630:     $xetable: {",
          "631:       default: null",
          "632:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "696:     $xeTable: {",
          "697:       default: null",
          "698:     },",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "691:       customStore.activeWrapper = false",
          "692:       setTimeout(() => {",
          "693:         if (!customStore.activeBtn && !customStore.activeWrapper) {",
          "695:         }",
          "696:       }, 300)",
          "697:     },",
          "698:     getStoreData () {",
          "699:       return {}",
          "700:     },",
          "733:     },",
          "734:     cancelCloseEvent ({ $event }: any) {",
          "738:     },",
          "765:     },",
          "766:     handleResetCustomEvent (evnt: any) {",
          "767:       const { $xetable } = this",
          "769:       $xetable.closeCustom()",
          "770:       $xetable.emitCustomEvent('reset', evnt)",
          "771:     },",
          "",
          "[Removed Lines]",
          "694:           $xetable.customColseEvent(evnt)",
          "701:     confirmCustomEvent  (evnt: any) {",
          "702:       const { $xetable } = this",
          "703:       const { customOpts, customColumnList } = $xetable",
          "704:       const { allowVisible, allowSort, allowFixed, allowResizable } = customOpts",
          "705:       XEUtils.eachTree(customColumnList, (column, index, items, path, parent) => {",
          "706:         if (parent) {",
          "708:           column.fixed = parent.fixed",
          "709:         } else {",
          "710:           if (allowSort) {",
          "711:             const sortIndex = index + 1",
          "712:             column.renderSortNumber = sortIndex",
          "713:           }",
          "714:           if (allowFixed) {",
          "715:             column.fixed = column.renderFixed",
          "716:           }",
          "717:         }",
          "718:         if (allowResizable) {",
          "719:           if (column.renderVisible && (!column.children || column.children.length)) {",
          "720:             if (column.renderResizeWidth !== column.renderWidth) {",
          "721:               column.resizeWidth = column.renderResizeWidth",
          "722:               column.renderWidth = column.renderResizeWidth",
          "723:             }",
          "724:           }",
          "725:         }",
          "726:         if (allowVisible) {",
          "727:           column.visible = column.renderVisible",
          "728:         }",
          "729:       })",
          "730:       $xetable.closeCustom()",
          "731:       $xetable.emitCustomEvent('confirm', evnt)",
          "732:       $xetable.saveCustomStore('confirm')",
          "735:       const { $xetable } = this",
          "736:       $xetable.closeCustom()",
          "737:       $xetable.emitCustomEvent('cancel', $event)",
          "739:     cancelCustomEvent  (evnt: any) {",
          "740:       const { $xetable } = this",
          "741:       const { customStore, customOpts, customColumnList } = $xetable",
          "742:       const { oldSortMaps, oldFixedMaps, oldVisibleMaps } = customStore",
          "743:       const { allowVisible, allowSort, allowFixed, allowResizable } = customOpts",
          "744:       XEUtils.eachTree(customColumnList, column => {",
          "745:         const colid = column.getKey()",
          "746:         const visible = !!oldVisibleMaps[colid]",
          "747:         const fixed = oldFixedMaps[colid] || ''",
          "748:         if (allowVisible) {",
          "749:           column.renderVisible = visible",
          "750:           column.visible = visible",
          "751:         }",
          "752:         if (allowFixed) {",
          "753:           column.renderFixed = fixed",
          "754:           column.fixed = fixed",
          "755:         }",
          "756:         if (allowSort) {",
          "757:           column.renderSortNumber = oldSortMaps[colid] || 0",
          "758:         }",
          "759:         if (allowResizable) {",
          "760:           column.renderResizeWidth = column.renderWidth",
          "761:         }",
          "762:       }, { children: 'children' })",
          "763:       $xetable.closeCustom()",
          "764:       $xetable.emitCustomEvent('cancel', evnt)",
          "768:       $xetable.resetColumn(true)",
          "",
          "[Added Lines]",
          "763:           $xetable.customCloseEvent(evnt)",
          "770:     confirmCustomEvent ({ $event }: any) {",
          "771:       const $xeTable = this.$xeTable",
          "773:       $xeTable.saveCustom()",
          "774:       $xeTable.closeCustom()",
          "775:       $xeTable.emitCustomEvent('confirm', $event)",
          "778:       const $xeTable = this.$xeTable",
          "780:       $xeTable.closeCustom()",
          "781:       $xeTable.emitCustomEvent('close', $event)",
          "783:     cancelCustomEvent ({ $event }: any) {",
          "784:       const $xeTable = this.$xeTable",
          "786:       $xeTable.cancelCustom()",
          "787:       $xeTable.closeCustom()",
          "788:       $xeTable.emitCustomEvent('cancel', $event)",
          "792:       $xetable.resetCustom(true)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "867:       }",
          "868:     },",
          "869:     allOptionEvent () {",
          "903:     },",
          "904:     sortMousedownEvent (evnt: MouseEvent) {",
          "905:       const { $xetable } = this",
          "",
          "[Removed Lines]",
          "870:       const { $xetable, customStore } = this",
          "871:       const { customColumnList, customOpts } = $xetable",
          "872:       const { checkMethod, visibleMethod } = customOpts",
          "873:       const isAll = !customStore.isAll",
          "874:       if (customOpts.immediate) {",
          "875:         XEUtils.eachTree(customColumnList, (column) => {",
          "876:           if (visibleMethod && !visibleMethod({ column })) {",
          "877:             return",
          "878:           }",
          "879:           if (checkMethod && !checkMethod({ column })) {",
          "880:             return",
          "881:           }",
          "882:           column.visible = isAll",
          "883:           column.renderVisible = isAll",
          "884:           column.halfVisible = false",
          "885:         })",
          "886:         customStore.isAll = isAll",
          "887:         $xetable.handleCustom()",
          "888:         $xetable.saveCustomStore('update:visible')",
          "889:       } else {",
          "890:         XEUtils.eachTree(customColumnList, (column) => {",
          "891:           if (visibleMethod && !visibleMethod({ column })) {",
          "892:             return",
          "893:           }",
          "894:           if (checkMethod && !checkMethod({ column })) {",
          "895:             return",
          "896:           }",
          "897:           column.renderVisible = isAll",
          "898:           column.halfVisible = false",
          "899:         })",
          "900:         customStore.isAll = isAll",
          "901:       }",
          "902:       $xetable.checkCustomStatus()",
          "",
          "[Added Lines]",
          "894:       const { $xetable } = this",
          "896:       $xetable.toggleCustomAllCheckbox()",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "911:       trEl.draggable = true",
          "912:       this.dragColumn = column",
          "913:       addClass(trEl, 'active--drag-origin')",
          "914:     },",
          "915:     sortMouseupEvent  (evnt: MouseEvent) {",
          "916:       const btnEl = evnt.currentTarget as HTMLElement",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "908:       updateDropHint(this, evnt)",
          "",
          "---------------"
        ],
        "packages/table/module/export/export-panel.ts||packages/table/module/export/export-panel.ts": [
          "File: packages/table/module/export/export-panel.ts -> packages/table/module/export/export-panel.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "311:                             ? h('td', [",
          "312:                               h('div', {",
          "313:                                 class: 'vxe-table-export--panel-option-row'",
          "315:                             ])",
          "316:                             : h('td', [",
          "317:                               h('div', {",
          "",
          "[Removed Lines]",
          "314:                               }, $xeTable.callSlot(parameterSlot, params))",
          "",
          "[Added Lines]",
          "314:                               }, $xeTable.callSlot(parameterSlot, params, h))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "437:           return h('div', {",
          "438:             class: 'vxe-table-export--panel-footer'",
          "439:           }, footerSlot",
          "441:             : [",
          "442:                 h('div', {",
          "443:                   class: 'vxe-table-export--panel-btns'",
          "",
          "[Removed Lines]",
          "440:             ? $xeTable.callSlot(footerSlot, params)",
          "",
          "[Added Lines]",
          "440:             ? $xeTable.callSlot(footerSlot, params, h)",
          "",
          "---------------"
        ],
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1864:   resetColumn (options: any) {",
          "1890:   },",
          "1891:   handleCustom () {",
          "1892:     const { mouseConfig } = this",
          "",
          "[Removed Lines]",
          "1865:     const { collectColumn, customOpts } = this",
          "1866:     const { checkMethod } = customOpts",
          "1867:     const opts = Object.assign({",
          "1868:       visible: true,",
          "1869:       resizable: options === true,",
          "1870:       fixed: options === true,",
          "1871:       sort: options === true",
          "1872:     }, options)",
          "1873:     XEUtils.eachTree(collectColumn, (column) => {",
          "1874:       if (opts.resizable) {",
          "1875:         column.resizeWidth = 0",
          "1876:       }",
          "1877:       if (opts.fixed) {",
          "1878:         column.fixed = column.defaultFixed",
          "1879:       }",
          "1880:       if (opts.sort) {",
          "1881:         column.renderSortNumber = column.sortNumber",
          "1882:       }",
          "1883:       if (!checkMethod || checkMethod({ column })) {",
          "1884:         column.visible = column.defaultVisible",
          "1885:       }",
          "1886:       column.renderResizeWidth = column.renderWidth",
          "1887:     })",
          "1888:     this.saveCustomStore('reset')",
          "1889:     return this.handleCustom()",
          "",
          "[Added Lines]",
          "1865:     warnLog('vxe.error.delFunc', ['resetColumn', 'resetCustom'])",
          "1866:     return this.resetCustom(options)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5319:         Promise.resolve(",
          "5320:           loadMethod({ $table: $xeTable, row })",
          "5321:         ).then((childRecords: any) => {",
          "5323:           if (treeExpandLazyLoadedMaps[rowid]) {",
          "5324:             delete treeExpandLazyLoadedMaps[rowid]",
          "5325:           }",
          "",
          "[Removed Lines]",
          "5322:           rowRest.treeLoaded = true",
          "",
          "[Added Lines]",
          "5299:           if (rowRest) {",
          "5300:             rowRest.treeLoaded = true",
          "5301:           }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5345:           }",
          "5346:         }).catch(() => {",
          "5347:           const { treeExpandLazyLoadedMaps } = this",
          "5349:           if (treeExpandLazyLoadedMaps[rowid]) {",
          "5350:             delete treeExpandLazyLoadedMaps[rowid]",
          "5351:           }",
          "",
          "[Removed Lines]",
          "5348:           rowRest.treeLoaded = false",
          "",
          "[Added Lines]",
          "5327:           if (rowRest) {",
          "5328:             rowRest.treeLoaded = false",
          "5329:           }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6192: } as any",
          "6197: funcs.forEach(name => {",
          "6198:   Methods[name] = function (...args: any[]) {",
          "",
          "[Removed Lines]",
          "6195: const funcs = 'setFilter,openFilter,clearFilter,getCheckedFilters,updateFilterOptionStatus,closeMenu,setActiveCellArea,getActiveCellArea,getCellAreas,clearCellAreas,copyCellArea,cutCellArea,pasteCellArea,getCopyCellArea,getCopyCellAreas,clearCopyCellArea,setCellAreas,openFNR,openFind,openReplace,closeFNR,getSelectedCell,clearSelected,insert,insertAt,insertNextAt,remove,removeCheckboxRow,removeRadioRow,removeCurrentRow,getRecordset,getInsertRecords,getRemoveRecords,getUpdateRecords,clearEdit,clearActived,getEditRecord,getActiveRecord,isEditByRow,isActiveByRow,setEditRow,setActiveRow,setEditCell,setActiveCell,setSelectCell,clearValidate,fullValidate,validate,openExport,closeExport,openPrint,closePrint,getPrintHtml,exportData,openImport,closeImport,importData,saveFile,readFile,importByFile,print,openCustom,closeCustom'.split(',')",
          "",
          "[Added Lines]",
          "6176: const funcs = 'setFilter,openFilter,clearFilter,getCheckedFilters,updateFilterOptionStatus,closeMenu,setActiveCellArea,getActiveCellArea,getCellAreas,clearCellAreas,copyCellArea,cutCellArea,pasteCellArea,getCopyCellArea,getCopyCellAreas,clearCopyCellArea,setCellAreas,openFNR,openFind,openReplace,closeFNR,getSelectedCell,clearSelected,insert,insertAt,insertNextAt,remove,removeCheckboxRow,removeRadioRow,removeCurrentRow,getRecordset,getInsertRecords,getRemoveRecords,getUpdateRecords,clearEdit,clearActived,getEditRecord,getActiveRecord,isEditByRow,isActiveByRow,setEditRow,setActiveRow,setEditCell,setActiveCell,setSelectCell,clearValidate,fullValidate,validate,openExport,closeExport,openPrint,closePrint,getPrintHtml,exportData,openImport,closeImport,importData,saveFile,readFile,importByFile,print,openCustom,closeCustom,saveCustom,cancelCustom,resetCustom,toggleCustomAllCheckbox,setCustomAllCheckbox'.split(',')",
          "",
          "---------------"
        ],
        "styles/components/table-module/custom.scss||styles/components/table-module/custom.scss": [
          "File: styles/components/table-module/custom.scss -> styles/components/table-module/custom.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:   }",
          "95: }",
          "98:   display: block;",
          "99:   flex-grow: 1;",
          "100:   overflow-x: hidden;",
          "101:   overflow-y: auto;",
          "102: }",
          "106:   list-style-type: none;",
          "107:   margin: 0;",
          "108:   padding: 0;",
          "",
          "[Removed Lines]",
          "97: .vxe-table-custom--list-wrapper {",
          "104: .vxe-table-custom--header,",
          "105: .vxe-table-custom--body {",
          "",
          "[Added Lines]",
          "97: .vxe-table-custom--body {",
          "104: .vxe-table-custom--panel-list {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:   user-select: none;",
          "131: }",
          "134:   padding: 0.2em 0;",
          "135:   .vxe-table-custom--checkbox-option {",
          "136:     &:hover {",
          "",
          "[Removed Lines]",
          "133: .vxe-table-custom--body {",
          "",
          "[Added Lines]",
          "132: .vxe-table-custom--panel-list {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "139:   }",
          "140: }",
          "143:   display: flex;",
          "144:   flex-direction: row;",
          "145:   flex-shrink: 0;",
          "",
          "[Removed Lines]",
          "142: .vxe-table-custom--footer {",
          "",
          "[Added Lines]",
          "141: .vxe-table-custom--footer-buttons {",
          "142:   width: 100%;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "390:   margin-left: 5px;",
          "391:   cursor: help;",
          "392: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "394: .vxe-table-custom-popup--table-col-seq {",
          "395:   width: 80px;",
          "396: }",
          "397: .vxe-table-custom-popup--table-col-sort {",
          "398:   width: 80px;",
          "399: }",
          "400: .vxe-table-custom-popup--table-col-title {",
          "401:   min-width: 120px;",
          "402: }",
          "403: .vxe-table-custom-popup--table-col-width {",
          "404:   width: 140px;",
          "405: }",
          "406: .vxe-table-custom-popup--table-col-fixed {",
          "407:   width: 200px;",
          "408: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b525b99dcf64aca96e1f91cbca5fb7a90fd27b44",
      "candidate_info": {
        "commit_hash": "b525b99dcf64aca96e1f91cbca5fb7a90fd27b44",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/b525b99dcf64aca96e1f91cbca5fb7a90fd27b44",
        "files": [
          "package.json",
          "packages/table/src/methods.ts"
        ],
        "message": "releases 3.10.6",
        "before_after_code_files": [
          "packages/table/src/methods.ts||packages/table/src/methods.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5393:         const rowid = getRowid(this, row)",
          "5394:         if (!treeTempExpandedMaps[rowid]) {",
          "5395:           const rowRest = fullAllDataRowIdData[rowid]",
          "5403:             }",
          "5404:           }",
          "5405:         }",
          "",
          "[Removed Lines]",
          "5396:           const isLoad = lazy && row[hasChildField] && !rowRest.treeLoaded && !treeExpandLazyLoadedMaps[rowid]",
          "5398:           if (isLoad) {",
          "5399:             result.push(this.handleAsyncTreeExpandChilds(row))",
          "5400:           } else {",
          "5401:             if (row[childrenField] && row[childrenField].length) {",
          "5402:               treeTempExpandedMaps[rowid] = row",
          "",
          "[Added Lines]",
          "5396:           if (rowRest) {",
          "5397:             const isLoad = lazy && row[hasChildField] && !rowRest.treeLoaded && !treeExpandLazyLoadedMaps[rowid]",
          "5399:             if (isLoad) {",
          "5400:               result.push(this.handleAsyncTreeExpandChilds(row))",
          "5401:             } else {",
          "5402:               if (row[childrenField] && row[childrenField].length) {",
          "5403:                 treeTempExpandedMaps[rowid] = row",
          "5404:               }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5b039594abb3fb49160b5dca76ef9db95792b192",
      "candidate_info": {
        "commit_hash": "5b039594abb3fb49160b5dca76ef9db95792b192",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/5b039594abb3fb49160b5dca76ef9db95792b192",
        "files": [
          "package.json",
          "packages/export/src/mixin.js",
          "packages/table/src/methods.js"
        ],
        "message": "add getPrintHtml",
        "before_after_code_files": [
          "packages/export/src/mixin.js||packages/export/src/mixin.js",
          "packages/table/src/methods.js||packages/table/src/methods.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/export/src/mixin.js||packages/export/src/mixin.js": [
          "File: packages/export/src/mixin.js -> packages/export/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1399:         }",
          "1400:       })",
          "1401:     },",
          "1402:     _openImport (options) {",
          "1403:       const defOpts = Object.assign({ mode: 'insert', message: true, types: VXETable.globalConfs.importTypes }, options, this.importOpts)",
          "1404:       const { types } = defOpts",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1402:     _getPrintHtml (options) {",
          "1403:       const { printOpts } = this",
          "1404:       const opts = Object.assign({",
          "1405:         original: false",
          "1407:       }, printOpts, options, {",
          "1408:         type: 'html',",
          "1409:         download: false,",
          "1410:         remote: false,",
          "1411:         print: true",
          "1412:       })",
          "1413:       return this.exportData(opts).then(({ content }) => {",
          "1414:         return {",
          "1415:           html: content",
          "1416:         }",
          "1417:       })",
          "1418:     },",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "5421: }",
          "5426: funcs.forEach(name => {",
          "5427:   Methods[name] = function (...args) {",
          "",
          "[Removed Lines]",
          "5424: const funcs = 'setFilter,openFilter,clearFilter,getCheckedFilters,closeMenu,setActiveCellArea,getActiveCellArea,getCellAreas,clearCellAreas,copyCellArea,cutCellArea,pasteCellArea,getCopyCellArea,getCopyCellAreas,clearCopyCellArea,setCellAreas,openFNR,openFind,openReplace,closeFNR,getSelectedCell,clearSelected,insert,insertAt,insertNextAt,remove,removeCheckboxRow,removeRadioRow,removeCurrentRow,getRecordset,getInsertRecords,getRemoveRecords,getUpdateRecords,clearEdit,clearActived,getEditRecord,getActiveRecord,isEditByRow,isActiveByRow,setEditRow,setActiveRow,setEditCell,setActiveCell,setSelectCell,clearValidate,fullValidate,validate,openExport,openPrint,exportData,openImport,importData,saveFile,readFile,importByFile,print,openCustom,closeCustom'.split(',')",
          "",
          "[Added Lines]",
          "5424: const funcs = 'setFilter,openFilter,clearFilter,getCheckedFilters,closeMenu,setActiveCellArea,getActiveCellArea,getCellAreas,clearCellAreas,copyCellArea,cutCellArea,pasteCellArea,getCopyCellArea,getCopyCellAreas,clearCopyCellArea,setCellAreas,openFNR,openFind,openReplace,closeFNR,getSelectedCell,clearSelected,insert,insertAt,insertNextAt,remove,removeCheckboxRow,removeRadioRow,removeCurrentRow,getRecordset,getInsertRecords,getRemoveRecords,getUpdateRecords,clearEdit,clearActived,getEditRecord,getActiveRecord,isEditByRow,isActiveByRow,setEditRow,setActiveRow,setEditCell,setActiveCell,setSelectCell,clearValidate,fullValidate,validate,openExport,openPrint,getPrintHtml,exportData,openImport,importData,saveFile,readFile,importByFile,print,openCustom,closeCustom'.split(',')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bca3fbc28d4670b319c570b58052239bb2bbdb69",
      "candidate_info": {
        "commit_hash": "bca3fbc28d4670b319c570b58052239bb2bbdb69",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/bca3fbc28d4670b319c570b58052239bb2bbdb69",
        "files": [
          "packages/validator/src/mixin.js"
        ],
        "message": "fix:\u4fee\u590d _clearValidate\u65b9\u6cd5\u4e2d\u8bfb\u53d6\u4e0d\u5230visible\u5c5e\u6027\u95ee\u9898",
        "before_after_code_files": [
          "packages/validator/src/mixin.js||packages/validator/src/mixin.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/validator/src/mixin.js||packages/validator/src/mixin.js": [
          "File: packages/validator/src/mixin.js -> packages/validator/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "365:       const rowList = XEUtils.isArray(rows) ? rows : (rows ? [rows] : [])",
          "366:       const colList = (XEUtils.isArray(fieldOrColumn) ? fieldOrColumn : (fieldOrColumn ? [fieldOrColumn] : []).map(column => handleFieldOrColumn(this, column)))",
          "367:       let validErrMaps = {}",
          "369:         validTip.close()",
          "370:       }",
          "",
          "[Removed Lines]",
          "368:       if (validTip && validTip.reactData.visible) {",
          "",
          "[Added Lines]",
          "368:       if (validTip && validTip.visible) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}