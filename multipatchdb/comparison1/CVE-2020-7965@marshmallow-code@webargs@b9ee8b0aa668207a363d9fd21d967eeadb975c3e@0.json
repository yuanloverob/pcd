{
  "cve_id": "CVE-2020-7965",
  "cve_desc": "flaskparser.py in Webargs 5.x through 5.5.2 doesn't check that the Content-Type header is application/json when receiving JSON input. If the request body is valid JSON, it will accept it even if the content type is application/x-www-form-urlencoded. This allows for JSON POST requests to be made across domains, leading to CSRF.",
  "repo": "marshmallow-code/webargs",
  "patch_hash": "b9ee8b0aa668207a363d9fd21d967eeadb975c3e",
  "patch_info": {
    "commit_hash": "b9ee8b0aa668207a363d9fd21d967eeadb975c3e",
    "repo": "marshmallow-code/webargs",
    "commit_url": "https://github.com/marshmallow-code/webargs/commit/b9ee8b0aa668207a363d9fd21d967eeadb975c3e",
    "files": [
      "CHANGELOG.rst",
      "src/webargs/bottleparser.py",
      "src/webargs/testing.py",
      "src/webargs/webapp2parser.py",
      "tests/apps/bottle_app.py",
      "tests/apps/django_app/echo/views.py",
      "tests/apps/falcon_app.py",
      "tests/apps/flask_app.py",
      "tests/apps/pyramid_app.py",
      "tests/test_webapp2parser.py"
    ],
    "message": "Skip JSON parsing if Content-Type is mismatched",
    "before_after_code_files": [
      "src/webargs/bottleparser.py||src/webargs/bottleparser.py",
      "src/webargs/testing.py||src/webargs/testing.py",
      "src/webargs/webapp2parser.py||src/webargs/webapp2parser.py",
      "tests/apps/bottle_app.py||tests/apps/bottle_app.py",
      "tests/apps/django_app/echo/views.py||tests/apps/django_app/echo/views.py",
      "tests/apps/falcon_app.py||tests/apps/falcon_app.py",
      "tests/apps/flask_app.py||tests/apps/flask_app.py",
      "tests/apps/pyramid_app.py||tests/apps/pyramid_app.py",
      "tests/test_webapp2parser.py||tests/test_webapp2parser.py"
    ]
  },
  "patch_diff": {
    "src/webargs/bottleparser.py||src/webargs/bottleparser.py": [
      "File: src/webargs/bottleparser.py -> src/webargs/bottleparser.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "55:     def load_form(self, req, schema):",
      "56:         \"\"\"Return form values from the request as a MultiDictProxy.\"\"\"",
      "57:         return MultiDictProxy(req.forms, schema)",
      "59:     def load_headers(self, req, schema):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57:         # For consistency with other parsers' behavior, don't attempt to",
      "58:         #  parse if content-type is mismatched.",
      "59:         #  TODO: Make this check more specific",
      "60:         if core.is_json(req.content_type):",
      "61:             return core.missing",
      "",
      "---------------"
    ],
    "src/webargs/testing.py||src/webargs/testing.py": [
      "File: src/webargs/testing.py -> src/webargs/testing.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "253:         )",
      "254:         assert res.status_code == 400",
      "255:         assert res.json == {\"json\": [\"Invalid JSON body.\"]}",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "257:     @pytest.mark.parametrize(",
      "258:         (\"path\", \"payload\", \"content_type\"),",
      "259:         [",
      "260:             (",
      "261:                 \"/echo_json\",",
      "262:                 json.dumps({\"name\": \"foo\"}),",
      "263:                 \"application/x-www-form-urlencoded\",",
      "264:             ),",
      "265:             (\"/echo_form\", {\"name\": \"foo\"}, \"application/json\"),",
      "266:         ],",
      "267:     )",
      "268:     def test_content_type_mismatch(self, testapp, path, payload, content_type):",
      "269:         res = testapp.post(path, payload, headers={\"Content-Type\": content_type})",
      "270:         assert res.json == {\"name\": \"World\"}",
      "",
      "---------------"
    ],
    "src/webargs/webapp2parser.py||src/webargs/webapp2parser.py": [
      "File: src/webargs/webapp2parser.py -> src/webargs/webapp2parser.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "37:     \"\"\"webapp2 request argument parser.\"\"\"",
      "39:     def _raw_load_json(self, req):",
      "42:         return core.parse_json(req.body)",
      "44:     def load_querystring(self, req, schema):",
      "",
      "[Removed Lines]",
      "40:         \"\"\"Return a json payload from the request for the core parser's",
      "41:         load_json\"\"\"",
      "",
      "[Added Lines]",
      "40:         \"\"\"Return a json payload from the request for the core parser's load_json.\"\"\"",
      "41:         if not core.is_json(req.content_type):",
      "42:             return core.missing",
      "",
      "---------------"
    ],
    "tests/apps/bottle_app.py||tests/apps/bottle_app.py": [
      "File: tests/apps/bottle_app.py -> tests/apps/bottle_app.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: @app.route(\"/echo_json\", method=[\"POST\"])",
      "43: def echo_json():",
      "47: @app.route(\"/echo_json_or_form\", method=[\"POST\"])",
      "",
      "[Removed Lines]",
      "44:     return parser.parse(hello_args)",
      "",
      "[Added Lines]",
      "44:     return parser.parse(hello_args, location=\"json\")",
      "",
      "---------------"
    ],
    "tests/apps/django_app/echo/views.py||tests/apps/django_app/echo/views.py": [
      "File: tests/apps/django_app/echo/views.py -> tests/apps/django_app/echo/views.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "55: @handle_view_errors",
      "56: def echo_json(request):",
      "60: @handle_view_errors",
      "",
      "[Removed Lines]",
      "57:     return json_response(parser.parse(hello_args, request))",
      "",
      "[Added Lines]",
      "57:     return json_response(parser.parse(hello_args, request, location=\"json\"))",
      "",
      "---------------"
    ],
    "tests/apps/falcon_app.py||tests/apps/falcon_app.py": [
      "File: tests/apps/falcon_app.py -> tests/apps/falcon_app.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: class EchoJSON:",
      "38:     def on_post(self, req, resp):",
      "40:         resp.body = json.dumps(parsed)",
      "",
      "[Removed Lines]",
      "39:         parsed = parser.parse(hello_args, req)",
      "",
      "[Added Lines]",
      "39:         parsed = parser.parse(hello_args, req, location=\"json\")",
      "",
      "---------------"
    ],
    "tests/apps/flask_app.py||tests/apps/flask_app.py": [
      "File: tests/apps/flask_app.py -> tests/apps/flask_app.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "46: @app.route(\"/echo_json\", methods=[\"POST\"])",
      "47: def echo_json():",
      "51: @app.route(\"/echo_json_or_form\", methods=[\"POST\"])",
      "",
      "[Removed Lines]",
      "48:     return J(parser.parse(hello_args))",
      "",
      "[Added Lines]",
      "48:     return J(parser.parse(hello_args, location=\"json\"))",
      "",
      "---------------"
    ],
    "tests/apps/pyramid_app.py||tests/apps/pyramid_app.py": [
      "File: tests/apps/pyramid_app.py -> tests/apps/pyramid_app.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: def echo_json(request):",
      "38:     try:",
      "40:     except json.JSONDecodeError:",
      "41:         error = HTTPBadRequest()",
      "42:         error.body = json.dumps([\"Invalid JSON.\"]).encode(\"utf-8\")",
      "",
      "[Removed Lines]",
      "39:         return parser.parse(hello_args, request)",
      "",
      "[Added Lines]",
      "39:         return parser.parse(hello_args, request, location=\"json\")",
      "",
      "---------------"
    ],
    "tests/test_webapp2parser.py||tests/test_webapp2parser.py": [
      "File: tests/test_webapp2parser.py -> tests/test_webapp2parser.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "70:     assert parser.parse(hello_args, req=request) == expected",
      "73: def test_parse_invalid_json():",
      "74:     request = webapp2.Request.blank(",
      "75:         \"/echo\", POST='{\"foo\": \"bar\", }', headers={\"content-type\": \"application/json\"}",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "73: def test_parse_json_content_type_mismatch():",
      "74:     request = webapp2.Request.blank(",
      "75:         \"/echo_json\",",
      "76:         POST=json.dumps({\"name\": \"foo\"}),",
      "77:         headers={\"content-type\": \"application/x-www-form-urlencoded\"},",
      "78:     )",
      "79:     assert parser.parse(hello_args, req=request) == {\"name\": \"World\"}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b2ce55771aead2f36a0b4cc57f9e1f95cc16f902",
      "candidate_info": {
        "commit_hash": "b2ce55771aead2f36a0b4cc57f9e1f95cc16f902",
        "repo": "marshmallow-code/webargs",
        "commit_url": "https://github.com/marshmallow-code/webargs/commit/b2ce55771aead2f36a0b4cc57f9e1f95cc16f902",
        "files": [
          "src/webargs/core.py",
          "src/webargs/falconparser.py",
          "src/webargs/pyramidparser.py",
          "src/webargs/tornadoparser.py",
          "src/webargs/webapp2parser.py",
          "tests/apps/falcon_app.py",
          "tests/apps/pyramid_app.py",
          "tests/test_falconparser.py",
          "tests/test_tornadoparser.py",
          "tests/test_webapp2parser.py"
        ],
        "message": "Convert remaining parsers for v6\n\nUpdates falconparser, webapp2parser, tornadoparser, and pyramidparser.\n\nFor the most part, this was a matter of\n- Convert parse_* to load_* methods, using MultiDictProxy\n- Update tests and test apps\n\nThere are pecularities for Falcon and Tornado.\n\n- Some notes inline in falconparser about use of MultiDictProxy and\n  handling of headers and cookies, as Falcon does not provide a\n  high-level multidict representation of these things. (Webargs\n  *could* provide one with great effort if it's ever wanted.)\n\n- In the case of Tornado, some custom multidict classes are needed to\n  customize the handling of data.",
        "before_after_code_files": [
          "src/webargs/core.py||src/webargs/core.py",
          "src/webargs/falconparser.py||src/webargs/falconparser.py",
          "src/webargs/pyramidparser.py||src/webargs/pyramidparser.py",
          "src/webargs/tornadoparser.py||src/webargs/tornadoparser.py",
          "src/webargs/webapp2parser.py||src/webargs/webapp2parser.py",
          "tests/apps/falcon_app.py||tests/apps/falcon_app.py",
          "tests/apps/pyramid_app.py||tests/apps/pyramid_app.py",
          "tests/test_falconparser.py||tests/test_falconparser.py",
          "tests/test_tornadoparser.py||tests/test_tornadoparser.py",
          "tests/test_webapp2parser.py||tests/test_webapp2parser.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/webargs/webapp2parser.py||src/webargs/webapp2parser.py",
            "tests/apps/falcon_app.py||tests/apps/falcon_app.py",
            "tests/apps/pyramid_app.py||tests/apps/pyramid_app.py",
            "tests/test_webapp2parser.py||tests/test_webapp2parser.py"
          ],
          "candidate": [
            "src/webargs/webapp2parser.py||src/webargs/webapp2parser.py",
            "tests/apps/falcon_app.py||tests/apps/falcon_app.py",
            "tests/apps/pyramid_app.py||tests/apps/pyramid_app.py",
            "tests/test_webapp2parser.py||tests/test_webapp2parser.py"
          ]
        }
      },
      "candidate_diff": {
        "src/webargs/core.py||src/webargs/core.py": [
          "File: src/webargs/core.py -> src/webargs/core.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "459:         \"\"\"Load JSON from a request object or return `missing` if no value can",
          "460:         be found.",
          "461:         \"\"\"",
          "463:         # several of the parsers in webargs, it relies on the internal hooks",
          "464:         # `_handle_invalid_json_error` and `_raw_load_json`",
          "465:         # these methods are not part of the public API and are used to simplify",
          "",
          "[Removed Lines]",
          "462:         # NOTE: althought this implementation is real/concrete and used by",
          "",
          "[Added Lines]",
          "462:         # NOTE: although this implementation is real/concrete and used by",
          "",
          "---------------"
        ],
        "src/webargs/falconparser.py||src/webargs/falconparser.py": [
          "File: src/webargs/falconparser.py -> src/webargs/falconparser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: from falcon.util.uri import parse_query_string",
          "7: from webargs import core",
          "9: from webargs.multidictproxy import MultiDictProxy",
          "11: HTTP_422 = \"422 Unprocessable Entity\"",
          "",
          "[Removed Lines]",
          "8: from webargs.core import json",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     return content_type and core.is_json(content_type)",
          "51: # NOTE: Adapted from falcon.request.Request._parse_form_urlencoded",
          "52: def parse_form_body(req):",
          "53:     if (",
          "",
          "[Removed Lines]",
          "34: def parse_json_body(req):",
          "35:     if req.content_length in (None, 0):",
          "36:         # Nothing to do",
          "37:         return {}",
          "38:     if is_json_request(req):",
          "39:         body = req.stream.read()",
          "40:         if body:",
          "41:             try:",
          "42:                 return core.parse_json(body)",
          "43:             except json.JSONDecodeError as e:",
          "44:                 if e.doc == \"\":",
          "45:                     return core.missing",
          "46:                 else:",
          "47:                     raise",
          "48:     return {}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93: class FalconParser(core.Parser):",
          "94:     \"\"\"Falcon request argument parser.\"\"\"",
          "103:         .. note::",
          "",
          "[Removed Lines]",
          "96:     def parse_querystring(self, req, name, field):",
          "97:         \"\"\"Pull a querystring value from the request.\"\"\"",
          "98:         return core.get_value(req.params, name, field)",
          "100:     def location_load_form(self, req, schema):",
          "101:         \"\"\"Pull a form value from the request.",
          "",
          "[Added Lines]",
          "78:     # Note on the use of MultiDictProxy throughout:",
          "79:     # Falcon parses query strings and form values into ordinary dicts, but with",
          "80:     # the values listified where appropriate",
          "81:     # it is still therefore necessary in these cases to wrap them in",
          "82:     # MultiDictProxy because we need to use the schema to determine when single",
          "83:     # values should be wrapped in lists due to the type of the destination",
          "84:     # field",
          "86:     def load_querystring(self, req, schema):",
          "87:         \"\"\"Return query params from the request as a MultiDictProxy.\"\"\"",
          "88:         return MultiDictProxy(req.params, schema)",
          "90:     def load_form(self, req, schema):",
          "91:         \"\"\"Return form values from the request as a MultiDictProxy",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:             return form",
          "112:         return MultiDictProxy(form, schema)",
          "141:     def get_request_from_view_args(self, view, args, kwargs):",
          "142:         \"\"\"Get request from a resource method's arguments. Assumes that",
          "143:         request is the second argument.",
          "144:         \"\"\"",
          "145:         req = args[1]",
          "147:         return req",
          "150:         raise NotImplementedError(",
          "151:             \"Parsing files not yet supported by {0}\".format(self.__class__.__name__)",
          "152:         )",
          "",
          "[Removed Lines]",
          "114:     def parse_json(self, req, name, field):",
          "115:         \"\"\"Pull a JSON body value from the request.",
          "117:         .. note::",
          "119:             The request stream will be read and left at EOF.",
          "120:         \"\"\"",
          "121:         json_data = self._cache.get(\"json_data\")",
          "122:         if json_data is None:",
          "123:             try:",
          "124:                 self._cache[\"json_data\"] = json_data = parse_json_body(req)",
          "125:             except json.JSONDecodeError as e:",
          "126:                 return self.handle_invalid_json_error(e, req)",
          "127:         return core.get_value(json_data, name, field, allow_many_nested=True)",
          "129:     def parse_headers(self, req, name, field):",
          "130:         \"\"\"Pull a header value from the request.\"\"\"",
          "131:         # Use req.get_headers rather than req.headers for performance",
          "132:         return req.get_header(name, required=False) or core.missing",
          "134:     def parse_cookies(self, req, name, field):",
          "135:         \"\"\"Pull a cookie value from the request.\"\"\"",
          "136:         cookies = self._cache.get(\"cookies\")",
          "137:         if cookies is None:",
          "138:             self._cache[\"cookies\"] = cookies = req.cookies",
          "139:         return core.get_value(cookies, name, field)",
          "146:         assert isinstance(req, falcon.Request), \"Argument is not a falcon.Request\"",
          "149:     def parse_files(self, req, name, field):",
          "",
          "[Added Lines]",
          "104:     def _raw_load_json(self, req):",
          "105:         \"\"\"Return a json payload from the request for the core parser's load_json",
          "107:         Checks the input mimetype and may return 'missing' if the mimetype is",
          "108:         non-json, even if the request body is parseable as json.\"\"\"",
          "109:         if not is_json_request(req) or req.content_length in (None, 0):",
          "110:             return core.missing",
          "111:         body = req.stream.read()",
          "112:         if body:",
          "113:             return core.parse_json(body)",
          "114:         else:",
          "115:             return core.missing",
          "117:     def load_headers(self, req, schema):",
          "118:         \"\"\"Return headers from the request.\"\"\"",
          "119:         # Falcon only exposes headers as a dict (not multidict)",
          "120:         return req.headers",
          "122:     def load_cookies(self, req, schema):",
          "123:         \"\"\"Return cookies from the request.\"\"\"",
          "124:         # Cookies are expressed in Falcon as a dict, but the possibility of",
          "125:         # multiple values for a cookie is preserved internally -- if desired in",
          "126:         # the future, webargs could add a MultiDict type for Cookies here built",
          "127:         # from (req, schema), but Falcon does not provide one out of the box",
          "128:         return req.cookies",
          "135:         if not isinstance(req, falcon.Request):",
          "136:             raise TypeError(\"Argument is not a falcon.Request\")",
          "139:     def load_files(self, req, schema):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "158:             raise LookupError(\"Status code {0} not supported\".format(error_status_code))",
          "159:         raise HTTPError(status, errors=error.messages, headers=error_headers)",
          "162:         status = status_map[400]",
          "163:         messages = {\"json\": [\"Invalid JSON body.\"]}",
          "164:         raise HTTPError(status, errors=messages)",
          "",
          "[Removed Lines]",
          "161:     def handle_invalid_json_error(self, error, req, *args, **kwargs):",
          "",
          "[Added Lines]",
          "151:     def _handle_invalid_json_error(self, error, req, *args, **kwargs):",
          "",
          "---------------"
        ],
        "src/webargs/pyramidparser.py||src/webargs/pyramidparser.py": [
          "File: src/webargs/pyramidparser.py -> src/webargs/pyramidparser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: from webargs import core",
          "35: from webargs.core import json",
          "36: from webargs.compat import text_type",
          "39: class PyramidParser(core.Parser):",
          "40:     \"\"\"Pyramid request argument parser.\"\"\"",
          "42:     __location_map__ = dict(",
          "46:     )",
          "81:         files = ((k, v) for k, v in req.POST.items() if hasattr(v, \"file\"))",
          "88:     def handle_error(self, error, req, schema, error_status_code, error_headers):",
          "89:         \"\"\"Handles errors during parsing. Aborts the current HTTP request and",
          "",
          "[Removed Lines]",
          "43:         matchdict=\"parse_matchdict\",",
          "44:         path=\"parse_matchdict\",",
          "48:     def parse_querystring(self, req, name, field):",
          "49:         \"\"\"Pull a querystring value from the request.\"\"\"",
          "50:         return core.get_value(req.GET, name, field)",
          "52:     def parse_form(self, req, name, field):",
          "53:         \"\"\"Pull a form value from the request.\"\"\"",
          "54:         return core.get_value(req.POST, name, field)",
          "56:     def parse_json(self, req, name, field):",
          "57:         \"\"\"Pull a json value from the request.\"\"\"",
          "58:         json_data = self._cache.get(\"json\")",
          "59:         if json_data is None:",
          "60:             try:",
          "61:                 self._cache[\"json\"] = json_data = core.parse_json(req.body, req.charset)",
          "62:             except json.JSONDecodeError as e:",
          "63:                 if e.doc == \"\":",
          "64:                     return core.missing",
          "65:                 else:",
          "66:                     return self.handle_invalid_json_error(e, req)",
          "67:             if json_data is None:",
          "68:                 return core.missing",
          "69:         return core.get_value(json_data, name, field, allow_many_nested=True)",
          "71:     def parse_cookies(self, req, name, field):",
          "72:         \"\"\"Pull the value from the cookiejar.\"\"\"",
          "73:         return core.get_value(req.cookies, name, field)",
          "75:     def parse_headers(self, req, name, field):",
          "76:         \"\"\"Pull a value from the header data.\"\"\"",
          "77:         return core.get_value(req.headers, name, field)",
          "79:     def parse_files(self, req, name, field):",
          "80:         \"\"\"Pull a file from the request.\"\"\"",
          "82:         return core.get_value(MultiDict(files), name, field)",
          "84:     def parse_matchdict(self, req, name, field):",
          "85:         \"\"\"Pull a value from the request's `matchdict`.\"\"\"",
          "86:         return core.get_value(req.matchdict, name, field)",
          "",
          "[Added Lines]",
          "37: from webargs.multidictproxy import MultiDictProxy",
          "44:         matchdict=\"load_matchdict\",",
          "45:         path=\"load_matchdict\",",
          "49:     def _raw_load_json(self, req):",
          "50:         \"\"\"Return a json payload from the request for the core parser's",
          "51:         load_json\"\"\"",
          "52:         return core.parse_json(req.body, req.charset)",
          "54:     def load_querystring(self, req, schema):",
          "55:         \"\"\"Return query params from the request as a MultiDictProxy.\"\"\"",
          "56:         return MultiDictProxy(req.GET, schema)",
          "58:     def load_form(self, req, schema):",
          "59:         \"\"\"Return form values from the request as a MultiDictProxy.\"\"\"",
          "60:         return MultiDictProxy(req.POST, schema)",
          "62:     def load_cookies(self, req, schema):",
          "63:         \"\"\"Return cookies from the request as a MultiDictProxy.\"\"\"",
          "64:         return MultiDictProxy(req.cookies, schema)",
          "66:     def load_headers(self, req, schema):",
          "67:         \"\"\"Return headers from the request as a MultiDictProxy.\"\"\"",
          "68:         return MultiDictProxy(req.headers, schema)",
          "70:     def load_files(self, req, schema):",
          "71:         \"\"\"Return files from the request as a MultiDictProxy.\"\"\"",
          "73:         return MultiDictProxy(MultiDict(files), schema)",
          "75:     def load_matchdict(self, req, schema):",
          "76:         \"\"\"Return the request's ``matchdict`` as a MultiDictProxy.\"\"\"",
          "77:         return MultiDictProxy(req.matchdict, schema)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:         response.body = body.encode(\"utf-8\") if isinstance(body, text_type) else body",
          "101:         raise response",
          "104:         messages = {\"json\": [\"Invalid JSON body.\"]}",
          "105:         response = exception_response(",
          "106:             400, detail=text_type(messages), content_type=\"application/json\"",
          "",
          "[Removed Lines]",
          "103:     def handle_invalid_json_error(self, error, req, *args, **kwargs):",
          "",
          "[Added Lines]",
          "94:     def _handle_invalid_json_error(self, error, req, *args, **kwargs):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:         self,",
          "114:         argmap,",
          "115:         req=None,",
          "117:         as_kwargs=False,",
          "118:         validate=None,",
          "119:         error_status_code=None,",
          "",
          "[Removed Lines]",
          "116:         locations=core.Parser.DEFAULT_LOCATIONS,",
          "",
          "[Added Lines]",
          "107:         location=core.Parser.DEFAULT_LOCATION,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "127:             of argname -> `marshmallow.fields.Field` pairs, or a callable",
          "128:             which accepts a request and returns a `marshmallow.Schema`.",
          "129:         :param req: The request object to parse. Pulled off of the view by default.",
          "131:         :param bool as_kwargs: Whether to insert arguments as keyword arguments.",
          "132:         :param callable validate: Validation function that receives the dictionary",
          "133:             of parsed arguments. If the function returns ``False``, the parser",
          "",
          "[Removed Lines]",
          "130:         :param tuple locations: Where on the request to search for values.",
          "",
          "[Added Lines]",
          "121:         :param str location: Where on the request to load values.",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "137:         :param dict error_headers: Headers passed to error handler functions when a",
          "138:             a `ValidationError` is raised.",
          "139:         \"\"\"",
          "141:         # Optimization: If argmap is passed as a dictionary, we only need",
          "142:         # to generate a Schema once",
          "143:         if isinstance(argmap, collections.Mapping):",
          "",
          "[Removed Lines]",
          "140:         locations = locations or self.locations",
          "",
          "[Added Lines]",
          "131:         location = location or self.location",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "155:                 parsed_args = self.parse(",
          "156:                     argmap,",
          "157:                     req=request,",
          "159:                     validate=validate,",
          "160:                     error_status_code=error_status_code,",
          "161:                     error_headers=error_headers,",
          "",
          "[Removed Lines]",
          "158:                     locations=locations,",
          "",
          "[Added Lines]",
          "149:                     location=location,",
          "",
          "---------------"
        ],
        "src/webargs/tornadoparser.py||src/webargs/tornadoparser.py": [
          "File: src/webargs/tornadoparser.py -> src/webargs/tornadoparser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:             self.write(response)",
          "16: \"\"\"",
          "17: import tornado.web",
          "18: from tornado.escape import _unicode",
          "20: from webargs import core",
          "21: from webargs.compat import basestring",
          "25: class HTTPError(tornado.web.HTTPError):",
          "",
          "[Removed Lines]",
          "22: from webargs.core import json",
          "",
          "[Added Lines]",
          "18: import tornado.concurrent",
          "23: from webargs.multidictproxy import MultiDictProxy",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:         super(HTTPError, self).__init__(*args, **kwargs)",
          "36:     content_type = req.headers.get(\"Content-Type\")",
          "53:     \"\"\"",
          "64:     \"\"\"",
          "82: class TornadoParser(core.Parser):",
          "83:     \"\"\"Tornado request argument parser.\"\"\"",
          "122:     def handle_error(self, error, req, schema, error_status_code, error_headers):",
          "123:         \"\"\"Handles errors during parsing. Raises a `tornado.web.HTTPError`",
          "",
          "[Removed Lines]",
          "34: def parse_json_body(req):",
          "35:     \"\"\"Return the decoded JSON body from the request.\"\"\"",
          "37:     if content_type and core.is_json(content_type):",
          "38:         try:",
          "39:             return core.parse_json(req.body)",
          "40:         except TypeError:",
          "41:             pass",
          "42:         except json.JSONDecodeError as e:",
          "43:             if e.doc == \"\":",
          "44:                 return core.missing",
          "45:             else:",
          "46:                 raise",
          "47:     return {}",
          "50: # From tornado.web.RequestHandler.decode_argument",
          "51: def decode_argument(value, name=None):",
          "52:     \"\"\"Decodes an argument from the request.",
          "54:     try:",
          "55:         return _unicode(value)",
          "56:     except UnicodeDecodeError:",
          "57:         raise HTTPError(400, \"Invalid unicode in %s: %r\" % (name or \"url\", value[:40]))",
          "60: def get_value(d, name, field):",
          "61:     \"\"\"Handle gets from 'multidicts' made of lists",
          "63:     It handles cases: ``{\"key\": [value]}`` and ``{\"key\": value}``",
          "65:     multiple = core.is_multiple(field)",
          "66:     value = d.get(name, core.missing)",
          "67:     if value is core.missing:",
          "68:         return core.missing",
          "69:     if multiple and value is not core.missing:",
          "70:         return [",
          "71:             decode_argument(v, name) if isinstance(v, basestring) else v for v in value",
          "72:         ]",
          "73:     ret = value",
          "74:     if value and isinstance(value, (list, tuple)):",
          "75:         ret = value[0]",
          "76:     if isinstance(ret, basestring):",
          "77:         return decode_argument(ret, name)",
          "78:     else:",
          "79:         return ret",
          "85:     def parse_json(self, req, name, field):",
          "86:         \"\"\"Pull a json value from the request.\"\"\"",
          "87:         json_data = self._cache.get(\"json\")",
          "88:         if json_data is None:",
          "89:             try:",
          "90:                 self._cache[\"json\"] = json_data = parse_json_body(req)",
          "91:             except json.JSONDecodeError as e:",
          "92:                 return self.handle_invalid_json_error(e, req)",
          "93:             if json_data is None:",
          "94:                 return core.missing",
          "95:         return core.get_value(json_data, name, field, allow_many_nested=True)",
          "97:     def parse_querystring(self, req, name, field):",
          "98:         \"\"\"Pull a querystring value from the request.\"\"\"",
          "99:         return get_value(req.query_arguments, name, field)",
          "101:     def parse_form(self, req, name, field):",
          "102:         \"\"\"Pull a form value from the request.\"\"\"",
          "103:         return get_value(req.body_arguments, name, field)",
          "105:     def parse_headers(self, req, name, field):",
          "106:         \"\"\"Pull a value from the header data.\"\"\"",
          "107:         return get_value(req.headers, name, field)",
          "109:     def parse_cookies(self, req, name, field):",
          "110:         \"\"\"Pull a value from the header data.\"\"\"",
          "111:         cookie = req.cookies.get(name)",
          "113:         if cookie is not None:",
          "114:             return [cookie.value] if core.is_multiple(field) else cookie.value",
          "115:         else:",
          "116:             return [] if core.is_multiple(field) else None",
          "118:     def parse_files(self, req, name, field):",
          "119:         \"\"\"Pull a file from the request.\"\"\"",
          "120:         return get_value(req.files, name, field)",
          "",
          "[Added Lines]",
          "35: def is_json_request(req):",
          "37:     return content_type is not None and core.is_json(content_type)",
          "40: class WebArgsTornadoMultiDictProxy(MultiDictProxy):",
          "41:     \"\"\"",
          "42:     Override class for Tornado multidicts, handles argument decoding",
          "43:     requirements.",
          "46:     def __getitem__(self, key):",
          "47:         try:",
          "48:             value = self.data.get(key, core.missing)",
          "49:             if value is core.missing:",
          "50:                 return core.missing",
          "51:             elif key in self.multiple_keys:",
          "52:                 return [_unicode(v) if isinstance(v, basestring) else v for v in value]",
          "53:             elif value and isinstance(value, (list, tuple)):",
          "54:                 value = value[0]",
          "56:             if isinstance(value, basestring):",
          "57:                 return _unicode(value)",
          "58:             else:",
          "59:                 return value",
          "60:         # based on tornado.web.RequestHandler.decode_argument",
          "61:         except UnicodeDecodeError:",
          "62:             raise HTTPError(400, \"Invalid unicode in %s: %r\" % (key, value[:40]))",
          "65: class WebArgsTornadoCookiesMultiDictProxy(MultiDictProxy):",
          "67:     And a special override for cookies because they come back as objects with a",
          "68:     `value` attribute we need to extract.",
          "69:     Also, does not use the `_unicode` decoding step",
          "70:     \"\"\"",
          "72:     def __getitem__(self, key):",
          "73:         cookie = self.data.get(key, core.missing)",
          "74:         if cookie is core.missing:",
          "75:             return core.missing",
          "76:         elif key in self.multiple_keys:",
          "77:             return [cookie.value]",
          "78:         else:",
          "79:             return cookie.value",
          "85:     def _raw_load_json(self, req):",
          "86:         \"\"\"Return a json payload from the request for the core parser's load_json",
          "88:         Checks the input mimetype and may return 'missing' if the mimetype is",
          "89:         non-json, even if the request body is parseable as json.\"\"\"",
          "90:         if not is_json_request(req):",
          "91:             return core.missing",
          "93:         # request.body may be a concurrent.Future on streaming requests",
          "94:         # this would cause a TypeError if we try to parse it",
          "95:         if isinstance(req.body, tornado.concurrent.Future):",
          "96:             return core.missing",
          "98:         return core.parse_json(req.body)",
          "100:     def load_querystring(self, req, schema):",
          "101:         \"\"\"Return query params from the request as a MultiDictProxy.\"\"\"",
          "102:         return WebArgsTornadoMultiDictProxy(req.query_arguments, schema)",
          "104:     def load_form(self, req, schema):",
          "105:         \"\"\"Return form values from the request as a MultiDictProxy.\"\"\"",
          "106:         return WebArgsTornadoMultiDictProxy(req.body_arguments, schema)",
          "108:     def load_headers(self, req, schema):",
          "109:         \"\"\"Return headers from the request as a MultiDictProxy.\"\"\"",
          "110:         return WebArgsTornadoMultiDictProxy(req.headers, schema)",
          "112:     def load_cookies(self, req, schema):",
          "113:         \"\"\"Return cookies from the request as a MultiDictProxy.\"\"\"",
          "114:         # use the specialized subclass specifically for handling Tornado",
          "115:         # cookies",
          "116:         return WebArgsTornadoCookiesMultiDictProxy(req.cookies, schema)",
          "118:     def load_files(self, req, schema):",
          "119:         \"\"\"Return files from the request as a MultiDictProxy.\"\"\"",
          "120:         return WebArgsTornadoMultiDictProxy(req.files, schema)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:             headers=error_headers,",
          "137:         )",
          "140:         raise HTTPError(",
          "141:             400,",
          "142:             log_message=\"Invalid JSON body.\",",
          "",
          "[Removed Lines]",
          "139:     def handle_invalid_json_error(self, error, req, *args, **kwargs):",
          "",
          "[Added Lines]",
          "139:     def _handle_invalid_json_error(self, error, req, *args, **kwargs):",
          "",
          "---------------"
        ],
        "src/webargs/webapp2parser.py||src/webargs/webapp2parser.py": [
          "File: src/webargs/webapp2parser.py -> src/webargs/webapp2parser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import webob.multidict",
          "33: from webargs import core",
          "37: class Webapp2Parser(core.Parser):",
          "38:     \"\"\"webapp2 request argument parser.\"\"\"",
          "71:         files = ((k, v) for k, v in req.POST.items() if hasattr(v, \"file\"))",
          "74:     def get_default_request(self):",
          "75:         return webapp2.get_request()",
          "",
          "[Removed Lines]",
          "34: from webargs.core import json",
          "40:     def parse_json(self, req, name, field):",
          "41:         \"\"\"Pull a json value from the request.\"\"\"",
          "42:         json_data = self._cache.get(\"json\")",
          "43:         if json_data is None:",
          "44:             try:",
          "45:                 self._cache[\"json\"] = json_data = core.parse_json(req.body)",
          "46:             except json.JSONDecodeError as e:",
          "47:                 if e.doc == \"\":",
          "48:                     return core.missing",
          "49:                 else:",
          "50:                     raise",
          "51:         return core.get_value(json_data, name, field, allow_many_nested=True)",
          "53:     def parse_querystring(self, req, name, field):",
          "54:         \"\"\"Pull a querystring value from the request.\"\"\"",
          "55:         return core.get_value(req.GET, name, field)",
          "57:     def parse_form(self, req, name, field):",
          "58:         \"\"\"Pull a form value from the request.\"\"\"",
          "59:         return core.get_value(req.POST, name, field)",
          "61:     def parse_cookies(self, req, name, field):",
          "62:         \"\"\"Pull the value from the cookiejar.\"\"\"",
          "63:         return core.get_value(req.cookies, name, field)",
          "65:     def parse_headers(self, req, name, field):",
          "66:         \"\"\"Pull a value from the header data.\"\"\"",
          "67:         return core.get_value(req.headers, name, field)",
          "69:     def parse_files(self, req, name, field):",
          "70:         \"\"\"Pull a file from the request.\"\"\"",
          "72:         return core.get_value(webob.multidict.MultiDict(files), name, field)",
          "",
          "[Added Lines]",
          "34: from webargs.multidictproxy import MultiDictProxy",
          "40:     def _raw_load_json(self, req):",
          "41:         \"\"\"Return a json payload from the request for the core parser's",
          "42:         load_json\"\"\"",
          "43:         return core.parse_json(req.body)",
          "45:     def load_querystring(self, req, schema):",
          "46:         \"\"\"Return query params from the request as a MultiDictProxy.\"\"\"",
          "47:         return MultiDictProxy(req.GET, schema)",
          "49:     def load_form(self, req, schema):",
          "50:         \"\"\"Return form values from the request as a MultiDictProxy.\"\"\"",
          "51:         return MultiDictProxy(req.POST, schema)",
          "53:     def load_cookies(self, req, schema):",
          "54:         \"\"\"Return cookies from the request as a MultiDictProxy.\"\"\"",
          "55:         return MultiDictProxy(req.cookies, schema)",
          "57:     def load_headers(self, req, schema):",
          "58:         \"\"\"Return headers from the request as a MultiDictProxy.\"\"\"",
          "59:         return MultiDictProxy(req.headers, schema)",
          "61:     def load_files(self, req, schema):",
          "62:         \"\"\"Return files from the request as a MultiDictProxy.\"\"\"",
          "64:         return MultiDictProxy(webob.multidict.MultiDict(files), schema)",
          "",
          "---------------"
        ],
        "tests/apps/falcon_app.py||tests/apps/falcon_app.py": [
          "File: tests/apps/falcon_app.py -> tests/apps/falcon_app.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import falcon",
          "4: import marshmallow as ma",
          "5: from webargs import fields",
          "6: from webargs.falconparser import parser, use_args, use_kwargs",
          "9: hello_args = {\"name\": fields.Str(missing=\"World\", validate=lambda n: len(n) >= 3)}",
          "10: hello_multiple = {\"name\": fields.List(fields.Str())}",
          "",
          "[Removed Lines]",
          "1: from webargs.core import json",
          "7: from webargs.core import MARSHMALLOW_VERSION_INFO",
          "",
          "[Added Lines]",
          "4: from webargs.core import MARSHMALLOW_VERSION_INFO, json",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: strict_kwargs = {\"strict\": True} if MARSHMALLOW_VERSION_INFO[0] < 3 else {}",
          "18: hello_many_schema = HelloSchema(many=True, **strict_kwargs)",
          "21: class Echo(object):",
          "22:     def on_get(self, req, resp):",
          "37:         resp.body = json.dumps(parsed)",
          "40: class EchoUseArgs(object):",
          "42:     def on_get(self, req, resp, args):",
          "43:         resp.body = json.dumps(args)",
          "48: class EchoUseKwargs(object):",
          "50:     def on_get(self, req, resp, name):",
          "51:         resp.body = json.dumps({\"name\": name})",
          "56: class EchoUseArgsValidated(object):",
          "59:         resp.body = json.dumps(args)",
          "64: class EchoMulti(object):",
          "65:     def on_get(self, req, resp):",
          "80: class EchoUseArgsWithPathParam(object):",
          "82:     def on_get(self, req, resp, args, name):",
          "83:         resp.body = json.dumps(args)",
          "86: class EchoUseKwargsWithPathParam(object):",
          "88:     def on_get(self, req, resp, value, name):",
          "89:         resp.body = json.dumps({\"value\": value})",
          "",
          "[Removed Lines]",
          "23:         try:",
          "24:             parsed = parser.parse(hello_args, req)",
          "25:         except json.JSONDecodeError:",
          "26:             resp.body = json.dumps([\"Invalid JSON.\"])",
          "27:             resp.status = falcon.HTTP_400",
          "28:         else:",
          "29:             resp.body = json.dumps(parsed)",
          "31:     on_post = on_get",
          "34: class EchoQuery(object):",
          "35:     def on_get(self, req, resp):",
          "36:         parsed = parser.parse(hello_args, req, locations=(\"query\",))",
          "41:     @use_args(hello_args)",
          "45:     on_post = on_get",
          "49:     @use_kwargs(hello_args)",
          "53:     on_post = on_get",
          "57:     @use_args({\"value\": fields.Int()}, validate=lambda args: args[\"value\"] > 42)",
          "58:     def on_get(self, req, resp, args):",
          "61:     on_post = on_get",
          "66:         resp.body = json.dumps(parser.parse(hello_multiple, req))",
          "68:     on_post = on_get",
          "71: class EchoManySchema(object):",
          "72:     def on_get(self, req, resp):",
          "73:         resp.body = json.dumps(",
          "74:             parser.parse(hello_many_schema, req, locations=(\"json\",))",
          "75:         )",
          "77:     on_post = on_get",
          "81:     @use_args({\"value\": fields.Int()})",
          "87:     @use_kwargs({\"value\": fields.Int()})",
          "",
          "[Added Lines]",
          "18: # variant which ignores unknown fields",
          "19: exclude_kwargs = (",
          "20:     {\"strict\": True} if MARSHMALLOW_VERSION_INFO[0] < 3 else {\"unknown\": ma.EXCLUDE}",
          "21: )",
          "22: hello_exclude_schema = HelloSchema(**exclude_kwargs)",
          "27:         parsed = parser.parse(hello_args, req, location=\"query\")",
          "28:         resp.body = json.dumps(parsed)",
          "31: class EchoForm(object):",
          "32:     def on_post(self, req, resp):",
          "33:         parsed = parser.parse(hello_args, req, location=\"form\")",
          "34:         resp.body = json.dumps(parsed)",
          "37: class EchoJSON(object):",
          "38:     def on_post(self, req, resp):",
          "39:         parsed = parser.parse(hello_args, req)",
          "44:     @use_args(hello_args, location=\"query\")",
          "50:     @use_kwargs(hello_args, location=\"query\")",
          "56:     @use_args(",
          "57:         {\"value\": fields.Int()},",
          "58:         validate=lambda args: args[\"value\"] > 42,",
          "59:         location=\"form\",",
          "60:     )",
          "61:     def on_post(self, req, resp, args):",
          "65: class EchoJSONIgnoreExtraData(object):",
          "66:     def on_post(self, req, resp):",
          "67:         resp.body = json.dumps(parser.parse(hello_exclude_schema, req))",
          "72:         resp.body = json.dumps(parser.parse(hello_multiple, req, location=\"query\"))",
          "75: class EchoMultiForm(object):",
          "76:     def on_post(self, req, resp):",
          "77:         resp.body = json.dumps(parser.parse(hello_multiple, req, location=\"form\"))",
          "80: class EchoMultiJSON(object):",
          "81:     def on_post(self, req, resp):",
          "82:         resp.body = json.dumps(parser.parse(hello_multiple, req))",
          "85: class EchoManySchema(object):",
          "86:     def on_post(self, req, resp):",
          "87:         resp.body = json.dumps(parser.parse(hello_many_schema, req))",
          "91:     @use_args({\"value\": fields.Int()}, location=\"query\")",
          "97:     @use_kwargs({\"value\": fields.Int()}, location=\"query\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103: class EchoHeaders(object):",
          "104:     def on_get(self, req, resp):",
          "108: class EchoCookie(object):",
          "109:     def on_get(self, req, resp):",
          "113: class EchoNested(object):",
          "",
          "[Removed Lines]",
          "105:         resp.body = json.dumps(parser.parse(hello_args, req, locations=(\"headers\",)))",
          "110:         resp.body = json.dumps(parser.parse(hello_args, req, locations=(\"cookies\",)))",
          "",
          "[Added Lines]",
          "115:         class HeaderSchema(ma.Schema):",
          "116:             NAME = fields.Str(missing=\"World\")",
          "118:         resp.body = json.dumps(",
          "119:             parser.parse(HeaderSchema(**exclude_kwargs), req, location=\"headers\")",
          "120:         )",
          "125:         resp.body = json.dumps(parser.parse(hello_args, req, location=\"cookies\"))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "134:     return hook",
          "138: class EchoUseArgsHook(object):",
          "139:     def on_get(self, req, resp):",
          "140:         resp.body = json.dumps(req.context[\"args\"])",
          "",
          "[Removed Lines]",
          "137: @falcon.before(use_args_hook(hello_args))",
          "",
          "[Added Lines]",
          "152: @falcon.before(use_args_hook(hello_args, location=\"query\"))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "143: def create_app():",
          "144:     app = falcon.API()",
          "145:     app.add_route(\"/echo\", Echo())",
          "147:     app.add_route(\"/echo_use_args\", EchoUseArgs())",
          "148:     app.add_route(\"/echo_use_kwargs\", EchoUseKwargs())",
          "149:     app.add_route(\"/echo_use_args_validated\", EchoUseArgsValidated())",
          "150:     app.add_route(\"/echo_multi\", EchoMulti())",
          "151:     app.add_route(\"/echo_many_schema\", EchoManySchema())",
          "152:     app.add_route(\"/echo_use_args_with_path_param/{name}\", EchoUseArgsWithPathParam())",
          "153:     app.add_route(",
          "",
          "[Removed Lines]",
          "146:     app.add_route(\"/echo_query\", EchoQuery())",
          "",
          "[Added Lines]",
          "161:     app.add_route(\"/echo_form\", EchoForm())",
          "162:     app.add_route(\"/echo_json\", EchoJSON())",
          "166:     app.add_route(\"/echo_ignoring_extra_data\", EchoJSONIgnoreExtraData())",
          "168:     app.add_route(\"/echo_multi_form\", EchoMultiForm())",
          "169:     app.add_route(\"/echo_multi_json\", EchoMultiJSON())",
          "",
          "---------------"
        ],
        "tests/apps/pyramid_app.py||tests/apps/pyramid_app.py": [
          "File: tests/apps/pyramid_app.py -> tests/apps/pyramid_app.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: strict_kwargs = {\"strict\": True} if MARSHMALLOW_VERSION_INFO[0] < 3 else {}",
          "20: hello_many_schema = HelloSchema(many=True, **strict_kwargs)",
          "23: def echo(request):",
          "24:     try:",
          "25:         return parser.parse(hello_args, request)",
          "26:     except json.JSONDecodeError:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: # variant which ignores unknown fields",
          "23: exclude_kwargs = (",
          "24:     {\"strict\": True} if MARSHMALLOW_VERSION_INFO[0] < 3 else {\"unknown\": ma.EXCLUDE}",
          "25: )",
          "26: hello_exclude_schema = HelloSchema(**exclude_kwargs)",
          "30:     return parser.parse(hello_args, request, location=\"query\")",
          "33: def echo_form(request):",
          "34:     return parser.parse(hello_args, request, location=\"form\")",
          "37: def echo_json(request):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:         raise error",
          "33: def echo_query(request):",
          "38: def echo_use_args(request, args):",
          "39:     return args",
          "43: def echo_use_args_validated(request, args):",
          "44:     return args",
          "48: def echo_use_kwargs(request, name):",
          "49:     return {\"name\": name}",
          "52: def echo_multi(request):",
          "53:     return parser.parse(hello_multiple, request)",
          "56: def echo_many_schema(request):",
          "61: def echo_use_args_with_path_param(request, args):",
          "62:     return args",
          "66: def echo_use_kwargs_with_path_param(request, value):",
          "67:     return {\"value\": value}",
          "",
          "[Removed Lines]",
          "34:     return parser.parse(hello_args, request, locations=(\"query\",))",
          "37: @use_args(hello_args)",
          "42: @use_args({\"value\": fields.Int()}, validate=lambda args: args[\"value\"] > 42)",
          "47: @use_kwargs(hello_args)",
          "57:     return parser.parse(hello_many_schema, request, locations=(\"json\",))",
          "60: @use_args({\"value\": fields.Int()})",
          "65: @use_kwargs({\"value\": fields.Int()})",
          "",
          "[Added Lines]",
          "47: def echo_json_ignore_extra_data(request):",
          "48:     try:",
          "49:         return parser.parse(hello_exclude_schema, request)",
          "50:     except json.JSONDecodeError:",
          "51:         error = HTTPBadRequest()",
          "52:         error.body = json.dumps([\"Invalid JSON.\"]).encode(\"utf-8\")",
          "53:         error.content_type = \"application/json\"",
          "54:         raise error",
          "58:     return parser.parse(hello_args, request, location=\"query\")",
          "61: @use_args(hello_args, location=\"query\")",
          "66: @use_args(",
          "67:     {\"value\": fields.Int()}, validate=lambda args: args[\"value\"] > 42, location=\"form\"",
          "68: )",
          "73: @use_kwargs(hello_args, location=\"query\")",
          "79:     return parser.parse(hello_multiple, request, location=\"query\")",
          "82: def echo_multi_form(request):",
          "83:     return parser.parse(hello_multiple, request, location=\"form\")",
          "86: def echo_multi_json(request):",
          "91:     return parser.parse(hello_many_schema, request)",
          "94: @use_args({\"value\": fields.Int()}, location=\"query\")",
          "99: @use_kwargs({\"value\": fields.Int()}, location=\"query\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78: def echo_headers(request):",
          "82: def echo_cookie(request):",
          "86: def echo_file(request):",
          "87:     args = {\"myfile\": fields.Field()}",
          "89:     myfile = result[\"myfile\"]",
          "90:     content = myfile.file.read().decode(\"utf8\")",
          "91:     return {\"myfile\": content}",
          "",
          "[Removed Lines]",
          "79:     return parser.parse(hello_args, request, locations=(\"headers\",))",
          "83:     return parser.parse(hello_args, request, locations=(\"cookies\",))",
          "88:     result = parser.parse(args, request, locations=(\"files\",))",
          "",
          "[Added Lines]",
          "113:     return parser.parse(hello_exclude_schema, request, location=\"headers\")",
          "117:     return parser.parse(hello_args, request, location=\"cookies\")",
          "122:     result = parser.parse(args, request, location=\"files\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106: def echo_matchdict(request):",
          "110: class EchoCallable(object):",
          "111:     def __init__(self, request):",
          "112:         self.request = request",
          "115:     def __call__(self, args):",
          "116:         return args",
          "",
          "[Removed Lines]",
          "107:     return parser.parse({\"mymatch\": fields.Int()}, request, locations=(\"matchdict\",))",
          "114:     @use_args({\"value\": fields.Int()})",
          "",
          "[Added Lines]",
          "141:     return parser.parse({\"mymatch\": fields.Int()}, request, location=\"matchdict\")",
          "148:     @use_args({\"value\": fields.Int()}, location=\"query\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "127:     config = Configurator()",
          "129:     add_route(config, \"/echo\", echo)",
          "130:     add_route(config, \"/echo_query\", echo_query)",
          "131:     add_route(config, \"/echo_use_args\", echo_use_args)",
          "132:     add_route(config, \"/echo_use_args_validated\", echo_use_args_validated)",
          "133:     add_route(config, \"/echo_use_kwargs\", echo_use_kwargs)",
          "134:     add_route(config, \"/echo_multi\", echo_multi)",
          "135:     add_route(config, \"/echo_many_schema\", echo_many_schema)",
          "136:     add_route(",
          "137:         config, \"/echo_use_args_with_path_param/{name}\", echo_use_args_with_path_param",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:     add_route(config, \"/echo_form\", echo_form)",
          "165:     add_route(config, \"/echo_json\", echo_json)",
          "167:     add_route(config, \"/echo_ignoring_extra_data\", echo_json_ignore_extra_data)",
          "172:     add_route(config, \"/echo_multi_form\", echo_multi_form)",
          "173:     add_route(config, \"/echo_multi_json\", echo_multi_json)",
          "",
          "---------------"
        ],
        "tests/test_falconparser.py||tests/test_falconparser.py": [
          "File: tests/test_falconparser.py -> tests/test_falconparser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     # https://github.com/marshmallow-code/webargs/issues/427",
          "20:     def test_parse_json_with_nonutf8_chars(self, testapp):",
          "21:         res = testapp.post(",
          "23:             b\"\\xfe\",",
          "24:             headers={\"Accept\": \"application/json\", \"Content-Type\": \"application/json\"},",
          "25:             expect_errors=True,",
          "",
          "[Removed Lines]",
          "22:             \"/echo\",",
          "",
          "[Added Lines]",
          "22:             \"/echo_json\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     # https://github.com/sloria/webargs/issues/329",
          "32:     def test_invalid_json(self, testapp):",
          "33:         res = testapp.post(",
          "35:             '{\"foo\": \"bar\", }',",
          "36:             headers={\"Accept\": \"application/json\", \"Content-Type\": \"application/json\"},",
          "37:             expect_errors=True,",
          "38:         )",
          "39:         assert res.status_code == 400",
          "40:         assert res.json[\"errors\"] == {\"json\": [\"Invalid JSON body.\"]}",
          "",
          "[Removed Lines]",
          "34:             \"/echo\",",
          "",
          "[Added Lines]",
          "34:             \"/echo_json\",",
          "42:     # Falcon converts headers to all-caps",
          "43:     def test_parsing_headers(self, testapp):",
          "44:         res = testapp.get(\"/echo_headers\", headers={\"name\": \"Fred\"})",
          "45:         assert res.json == {\"NAME\": \"Fred\"}",
          "",
          "---------------"
        ],
        "tests/test_tornadoparser.py||tests/test_tornadoparser.py": [
          "File: tests/test_tornadoparser.py -> tests/test_tornadoparser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # -*- coding: utf-8 -*-",
          "5: try:",
          "6:     from urllib.parse import urlencode",
          "7: except ImportError:  # PY2",
          "8:     from urllib import urlencode  # type: ignore",
          "40: class TestQueryArgs(object):",
          "",
          "[Removed Lines]",
          "3: from webargs.core import json",
          "10: import mock",
          "11: import pytest",
          "13: import marshmallow as ma",
          "15: import tornado.web",
          "16: import tornado.httputil",
          "17: import tornado.httpserver",
          "18: import tornado.http1connection",
          "19: import tornado.concurrent",
          "20: import tornado.ioloop",
          "21: from tornado.testing import AsyncHTTPTestCase",
          "23: from webargs import fields, missing",
          "24: from webargs.tornadoparser import parser, use_args, use_kwargs, get_value",
          "25: from webargs.core import parse_json",
          "27: name = \"name\"",
          "28: value = \"value\"",
          "31: def test_get_value_basic():",
          "32:     field, multifield = fields.Field(), fields.List(fields.Str())",
          "33:     assert get_value({\"foo\": 42}, \"foo\", field) == 42",
          "34:     assert get_value({\"foo\": 42}, \"bar\", field) is missing",
          "35:     assert get_value({\"foos\": [\"a\", \"b\"]}, \"foos\", multifield) == [\"a\", \"b\"]",
          "36:     # https://github.com/marshmallow-code/webargs/pull/30",
          "37:     assert get_value({\"foos\": [\"a\", \"b\"]}, \"bar\", multifield) is missing",
          "",
          "[Added Lines]",
          "3: import marshmallow as ma",
          "4: import mock",
          "5: import pytest",
          "6: import tornado.concurrent",
          "7: import tornado.http1connection",
          "8: import tornado.httpserver",
          "9: import tornado.httputil",
          "10: import tornado.ioloop",
          "11: import tornado.web",
          "12: from tornado.testing import AsyncHTTPTestCase",
          "13: from webargs import fields, missing",
          "14: from webargs.core import MARSHMALLOW_VERSION_INFO, json, parse_json",
          "15: from webargs.tornadoparser import (",
          "16:     WebArgsTornadoMultiDictProxy,",
          "17:     parser,",
          "18:     use_args,",
          "19:     use_kwargs,",
          "20: )",
          "28: name = \"name\"",
          "29: value = \"value\"",
          "32: class AuthorSchema(ma.Schema):",
          "33:     name = fields.Str(missing=\"World\", validate=lambda n: len(n) >= 3)",
          "34:     works = fields.List(fields.Str())",
          "37: strict_kwargs = {\"strict\": True} if MARSHMALLOW_VERSION_INFO[0] < 3 else {}",
          "38: author_schema = AuthorSchema(**strict_kwargs)",
          "41: def test_tornado_multidictproxy():",
          "42:     for dictval, fieldname, expected in (",
          "43:         ({\"name\": \"Sophocles\"}, \"name\", \"Sophocles\"),",
          "44:         ({\"name\": \"Sophocles\"}, \"works\", missing),",
          "45:         ({\"works\": [\"Antigone\", \"Oedipus Rex\"]}, \"works\", [\"Antigone\", \"Oedipus Rex\"]),",
          "46:         ({\"works\": [\"Antigone\", \"Oedipus at Colonus\"]}, \"name\", missing),",
          "47:     ):",
          "48:         proxy = WebArgsTornadoMultiDictProxy(dictval, author_schema)",
          "49:         assert proxy.get(fieldname) == expected",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:         parser.clear_cache()",
          "44:     def test_it_should_get_single_values(self):",
          "47:         request = make_get_request(query)",
          "53:     def test_it_should_get_multiple_values(self):",
          "56:         request = make_get_request(query)",
          "62:     def test_it_should_return_missing_if_not_present(self):",
          "63:         query = []",
          "77:         request = make_get_request(query)",
          "84: class TestFormArgs:",
          "",
          "[Removed Lines]",
          "45:         query = [(name, value)]",
          "46:         field = fields.Field()",
          "49:         result = parser.parse_querystring(request, name, field)",
          "51:         assert result == value",
          "54:         query = [(name, value), (name, value)]",
          "55:         field = fields.List(fields.Field())",
          "58:         result = parser.parse_querystring(request, name, field)",
          "60:         assert result == [value, value]",
          "64:         field = fields.Field()",
          "65:         field2 = fields.List(fields.Int())",
          "66:         request = make_get_request(query)",
          "68:         result = parser.parse_querystring(request, name, field)",
          "69:         result2 = parser.parse_querystring(request, name, field2)",
          "71:         assert result is missing",
          "72:         assert result2 is missing",
          "74:     def test_it_should_return_empty_list_if_multiple_and_not_present(self):",
          "75:         query = []",
          "76:         field = fields.List(fields.Field())",
          "79:         result = parser.parse_querystring(request, name, field)",
          "81:         assert result is missing",
          "",
          "[Added Lines]",
          "57:         query = [(\"name\", \"Aeschylus\")]",
          "59:         result = parser.load_querystring(request, author_schema)",
          "60:         assert result[\"name\"] == \"Aeschylus\"",
          "63:         query = [(\"works\", \"Agamemnon\"), (\"works\", \"Nereids\")]",
          "65:         result = parser.load_querystring(request, author_schema)",
          "66:         assert result[\"works\"] == [\"Agamemnon\", \"Nereids\"]",
          "71:         result = parser.load_querystring(request, author_schema)",
          "72:         assert result[\"name\"] is missing",
          "73:         assert result[\"works\"] is missing",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:         parser.clear_cache()",
          "88:     def test_it_should_get_single_values(self):",
          "91:         request = make_form_request(query)",
          "97:     def test_it_should_get_multiple_values(self):",
          "100:         request = make_form_request(query)",
          "106:     def test_it_should_return_missing_if_not_present(self):",
          "107:         query = []",
          "109:         request = make_form_request(query)",
          "125: class TestJSONArgs(object):",
          "",
          "[Removed Lines]",
          "89:         query = [(name, value)]",
          "90:         field = fields.Field()",
          "93:         result = parser.parse_form(request, name, field)",
          "95:         assert result == value",
          "98:         query = [(name, value), (name, value)]",
          "99:         field = fields.List(fields.Field())",
          "102:         result = parser.parse_form(request, name, field)",
          "104:         assert result == [value, value]",
          "108:         field = fields.Field()",
          "111:         result = parser.parse_form(request, name, field)",
          "113:         assert result is missing",
          "115:     def test_it_should_return_empty_list_if_multiple_and_not_present(self):",
          "116:         query = []",
          "117:         field = fields.List(fields.Field())",
          "118:         request = make_form_request(query)",
          "120:         result = parser.parse_form(request, name, field)",
          "122:         assert result is missing",
          "",
          "[Added Lines]",
          "81:         query = [(\"name\", \"Aristophanes\")]",
          "83:         result = parser.load_form(request, author_schema)",
          "84:         assert result[\"name\"] == \"Aristophanes\"",
          "87:         query = [(\"works\", \"The Wasps\"), (\"works\", \"The Frogs\")]",
          "89:         result = parser.load_form(request, author_schema)",
          "90:         assert result[\"works\"] == [\"The Wasps\", \"The Frogs\"]",
          "95:         result = parser.load_form(request, author_schema)",
          "96:         assert result[\"name\"] is missing",
          "97:         assert result[\"works\"] is missing",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "127:         parser.clear_cache()",
          "129:     def test_it_should_get_single_values(self):",
          "132:         request = make_json_request(query)",
          "137:     def test_parsing_request_with_vendor_content_type(self):",
          "140:         request = make_json_request(",
          "141:             query, content_type=\"application/vnd.api+json; charset=UTF-8\"",
          "142:         )",
          "147:     def test_it_should_get_multiple_values(self):",
          "150:         request = make_json_request(query)",
          "155:     def test_it_should_get_multiple_nested_values(self):",
          "167:         request = make_json_request(query)",
          "173:         query = {}",
          "175:         request = make_json_request(query)",
          "182:         request = make_request(",
          "184:         )",
          "187:         assert result is missing",
          "189:     def test_it_should_handle_value_error_on_parse_json(self):",
          "191:         request = make_request(\"this is json not\")",
          "194:         assert result is missing",
          "",
          "[Removed Lines]",
          "130:         query = {name: value}",
          "131:         field = fields.Field()",
          "133:         result = parser.parse_json(request, name, field)",
          "135:         assert result == value",
          "138:         query = {name: value}",
          "139:         field = fields.Field()",
          "143:         result = parser.parse_json(request, name, field)",
          "145:         assert result == value",
          "148:         query = {name: [value, value]}",
          "149:         field = fields.List(fields.Field())",
          "151:         result = parser.parse_json(request, name, field)",
          "153:         assert result == [value, value]",
          "156:         query = {name: [{\"id\": 1, \"name\": \"foo\"}, {\"id\": 2, \"name\": \"bar\"}]}",
          "157:         field = fields.List(",
          "158:             fields.Nested({\"id\": fields.Field(), \"name\": fields.Field()})",
          "159:         )",
          "160:         request = make_json_request(query)",
          "161:         result = parser.parse_json(request, name, field)",
          "162:         assert result == [{\"id\": 1, \"name\": \"foo\"}, {\"id\": 2, \"name\": \"bar\"}]",
          "164:     def test_it_should_return_missing_if_not_present(self):",
          "165:         query = {}",
          "166:         field = fields.Field()",
          "168:         result = parser.parse_json(request, name, field)",
          "170:         assert result is missing",
          "172:     def test_it_should_return_empty_list_if_multiple_and_not_present(self):",
          "174:         field = fields.List(fields.Field())",
          "176:         result = parser.parse_json(request, name, field)",
          "178:         assert result is missing",
          "180:     def test_it_should_handle_type_error_on_parse_json(self):",
          "181:         field = fields.Field()",
          "183:             body=tornado.concurrent.Future, headers={\"Content-Type\": \"application/json\"}",
          "185:         result = parser.parse_json(request, name, field)",
          "186:         assert parser._cache[\"json\"] == {}",
          "190:         field = fields.Field()",
          "192:         result = parser.parse_json(request, name, field)",
          "193:         assert parser._cache[\"json\"] == {}",
          "",
          "[Added Lines]",
          "105:         query = {\"name\": \"Euripides\"}",
          "107:         result = parser.load_json(request, author_schema)",
          "108:         assert result[\"name\"] == \"Euripides\"",
          "111:         query = {\"name\": \"Euripides\"}",
          "115:         result = parser.load_json(request, author_schema)",
          "116:         assert result[\"name\"] == \"Euripides\"",
          "119:         query = {\"works\": [\"Medea\", \"Electra\"]}",
          "121:         result = parser.load_json(request, author_schema)",
          "122:         assert result[\"works\"] == [\"Medea\", \"Electra\"]",
          "125:         class CustomSchema(ma.Schema):",
          "126:             works = fields.List(",
          "127:                 fields.Nested({\"author\": fields.Str(), \"workname\": fields.Str()})",
          "128:             )",
          "130:         custom_schema = CustomSchema(**strict_kwargs)",
          "132:         query = {",
          "133:             \"works\": [",
          "134:                 {\"author\": \"Euripides\", \"workname\": \"Hecuba\"},",
          "135:                 {\"author\": \"Aristophanes\", \"workname\": \"The Birds\"},",
          "136:             ]",
          "137:         }",
          "139:         result = parser.load_json(request, custom_schema)",
          "140:         assert result[\"works\"] == [",
          "141:             {\"author\": \"Euripides\", \"workname\": \"Hecuba\"},",
          "142:             {\"author\": \"Aristophanes\", \"workname\": \"The Birds\"},",
          "143:         ]",
          "145:     def test_it_should_not_include_fieldnames_if_not_present(self):",
          "148:         result = parser.load_json(request, author_schema)",
          "149:         assert result == {}",
          "151:     def test_it_should_handle_type_error_on_load_json(self):",
          "152:         # but this is different from the test above where the payload was valid",
          "153:         # and empty -- missing vs {}",
          "155:             body=tornado.concurrent.Future(),",
          "156:             headers={\"Content-Type\": \"application/json\"},",
          "158:         result = parser.load_json(request, author_schema)",
          "163:         result = parser.load_json(request, author_schema)",
          "164:         assert parser._cache.get(\"json\", {}) == {}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "199:         parser.clear_cache()",
          "201:     def test_it_should_get_single_values(self):",
          "204:         request = make_request(headers=query)",
          "210:     def test_it_should_get_multiple_values(self):",
          "213:         request = make_request(headers=query)",
          "219:     def test_it_should_return_missing_if_not_present(self):",
          "221:         request = make_request()",
          "237: class TestFilesArgs(object):",
          "",
          "[Removed Lines]",
          "202:         query = {name: value}",
          "203:         field = fields.Field()",
          "206:         result = parser.parse_headers(request, name, field)",
          "208:         assert result == value",
          "211:         query = {name: [value, value]}",
          "212:         field = fields.List(fields.Field())",
          "215:         result = parser.parse_headers(request, name, field)",
          "217:         assert result == [value, value]",
          "220:         field = fields.Field(multiple=False)",
          "223:         result = parser.parse_headers(request, name, field)",
          "225:         assert result is missing",
          "227:     def test_it_should_return_empty_list_if_multiple_and_not_present(self):",
          "228:         query = {}",
          "229:         field = fields.List(fields.Field())",
          "230:         request = make_request(headers=query)",
          "232:         result = parser.parse_headers(request, name, field)",
          "234:         assert result is missing",
          "",
          "[Added Lines]",
          "173:         query = {\"name\": \"Euphorion\"}",
          "175:         result = parser.load_headers(request, author_schema)",
          "176:         assert result[\"name\"] == \"Euphorion\"",
          "179:         query = {\"works\": [\"Prometheus Bound\", \"Prometheus Unbound\"]}",
          "181:         result = parser.load_headers(request, author_schema)",
          "182:         assert result[\"works\"] == [\"Prometheus Bound\", \"Prometheus Unbound\"]",
          "186:         result = parser.load_headers(request, author_schema)",
          "187:         assert result[\"name\"] is missing",
          "188:         assert result[\"works\"] is missing",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "239:         parser.clear_cache()",
          "241:     def test_it_should_get_single_values(self):",
          "244:         request = make_files_request(query)",
          "250:     def test_it_should_get_multiple_values(self):",
          "253:         request = make_files_request(query)",
          "259:     def test_it_should_return_missing_if_not_present(self):",
          "260:         query = []",
          "271:         request = make_files_request(query)",
          "278: class TestErrorHandler(object):",
          "",
          "[Removed Lines]",
          "242:         query = [(name, value)]",
          "243:         field = fields.Field()",
          "246:         result = parser.parse_files(request, name, field)",
          "248:         assert result == value",
          "251:         query = [(name, value), (name, value)]",
          "252:         field = fields.List(fields.Field())",
          "255:         result = parser.parse_files(request, name, field)",
          "257:         assert result == [value, value]",
          "261:         field = fields.Field()",
          "262:         request = make_files_request(query)",
          "264:         result = parser.parse_files(request, name, field)",
          "266:         assert result is missing",
          "268:     def test_it_should_return_empty_list_if_multiple_and_not_present(self):",
          "269:         query = []",
          "270:         field = fields.List(fields.Field())",
          "273:         result = parser.parse_files(request, name, field)",
          "275:         assert result is missing",
          "",
          "[Added Lines]",
          "196:         query = [(\"name\", \"Sappho\")]",
          "198:         result = parser.load_files(request, author_schema)",
          "199:         assert result[\"name\"] == \"Sappho\"",
          "202:         query = [(\"works\", \"Sappho 31\"), (\"works\", \"Ode to Aphrodite\")]",
          "204:         result = parser.load_files(request, author_schema)",
          "205:         assert result[\"works\"] == [\"Sappho 31\", \"Ode to Aphrodite\"]",
          "210:         result = parser.load_files(request, author_schema)",
          "211:         assert result[\"name\"] is missing",
          "212:         assert result[\"works\"] is missing",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "293:             [(\"string\", \"value\"), (\"integer\", \"1\"), (\"integer\", \"2\")]",
          "294:         )",
          "298:         assert parsed[\"integer\"] == [1, 2]",
          "299:         assert parsed[\"string\"] == value",
          "",
          "[Removed Lines]",
          "296:         parsed = parser.parse(attrs, request)",
          "",
          "[Added Lines]",
          "233:         parsed = parser.parse(attrs, request, location=\"query\")",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "305:             [(\"string\", \"value\"), (\"integer\", \"1\"), (\"integer\", \"2\")]",
          "306:         )",
          "310:         assert parsed[\"integer\"] == [1, 2]",
          "311:         assert parsed[\"string\"] == value",
          "",
          "[Removed Lines]",
          "308:         parsed = parser.parse(attrs, request)",
          "",
          "[Added Lines]",
          "245:         parsed = parser.parse(attrs, request, location=\"form\")",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "338:         request = make_request(headers={\"string\": \"value\", \"integer\": [\"1\", \"2\"]})",
          "342:         assert parsed[\"string\"] == value",
          "343:         assert parsed[\"integer\"] == [1, 2]",
          "",
          "[Removed Lines]",
          "340:         parsed = parser.parse(attrs, request, locations=[\"headers\"])",
          "",
          "[Added Lines]",
          "277:         parsed = parser.parse(attrs, request, location=\"headers\")",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "349:             [(\"string\", \"value\"), (\"integer\", \"1\"), (\"integer\", \"2\")]",
          "350:         )",
          "354:         assert parsed[\"string\"] == value",
          "355:         assert parsed[\"integer\"] == [2]",
          "",
          "[Removed Lines]",
          "352:         parsed = parser.parse(attrs, request, locations=[\"cookies\"])",
          "",
          "[Added Lines]",
          "289:         parsed = parser.parse(attrs, request, location=\"cookies\")",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "361:             [(\"string\", \"value\"), (\"integer\", \"1\"), (\"integer\", \"2\")]",
          "362:         )",
          "366:         assert parsed[\"string\"] == value",
          "367:         assert parsed[\"integer\"] == [1, 2]",
          "",
          "[Removed Lines]",
          "364:         parsed = parser.parse(attrs, request, locations=[\"files\"])",
          "",
          "[Added Lines]",
          "301:         parsed = parser.parse(attrs, request, location=\"files\")",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "509: class EchoHandler(tornado.web.RequestHandler):",
          "510:     ARGS = {\"name\": fields.Str()}",
          "513:     def get(self, args):",
          "514:         self.write(args)",
          "516:     @use_args(ARGS)",
          "517:     def post(self, args):",
          "518:         self.write(args)",
          "",
          "[Removed Lines]",
          "512:     @use_args(ARGS)",
          "",
          "[Added Lines]",
          "449:     @use_args(ARGS, location=\"query\")",
          "454: class EchoFormHandler(tornado.web.RequestHandler):",
          "455:     ARGS = {\"name\": fields.Str()}",
          "457:     @use_args(ARGS, location=\"form\")",
          "458:     def post(self, args):",
          "459:         self.write(args)",
          "462: class EchoJSONHandler(tornado.web.RequestHandler):",
          "463:     ARGS = {\"name\": fields.Str()}",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "521: class EchoWithParamHandler(tornado.web.RequestHandler):",
          "522:     ARGS = {\"name\": fields.Str()}",
          "525:     def get(self, id, args):",
          "526:         self.write(args)",
          "529: echo_app = tornado.web.Application(",
          "531: )",
          "",
          "[Removed Lines]",
          "524:     @use_args(ARGS)",
          "530:     [(r\"/echo\", EchoHandler), (r\"/echo_with_param/(\\d+)\", EchoWithParamHandler)]",
          "",
          "[Added Lines]",
          "473:     @use_args(ARGS, location=\"query\")",
          "479:     [",
          "480:         (r\"/echo\", EchoHandler),",
          "481:         (r\"/echo_form\", EchoFormHandler),",
          "482:         (r\"/echo_json\", EchoJSONHandler),",
          "483:         (r\"/echo_with_param/(\\d+)\", EchoWithParamHandler),",
          "484:     ]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "538:     def test_post(self):",
          "539:         res = self.fetch(",
          "541:             method=\"POST\",",
          "542:             headers={\"Content-Type\": \"application/json\"},",
          "543:             body=json.dumps({\"name\": \"Steve\"}),",
          "",
          "[Removed Lines]",
          "540:             \"/echo\",",
          "",
          "[Added Lines]",
          "494:             \"/echo_json\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "545:         json_body = parse_json(res.body)",
          "546:         assert json_body[\"name\"] == \"Steve\"",
          "547:         res = self.fetch(",
          "549:             method=\"POST\",",
          "550:             headers={\"Content-Type\": \"application/json\"},",
          "551:             body=json.dumps({}),",
          "",
          "[Removed Lines]",
          "548:             \"/echo\",",
          "",
          "[Added Lines]",
          "502:             \"/echo_json\",",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "577:     def post(self, args):",
          "578:         self.write(args)",
          "581:     def get(self, name):",
          "582:         self.write({\"status\": \"success\"})",
          "",
          "[Removed Lines]",
          "580:     @use_kwargs(ARGS)",
          "",
          "[Added Lines]",
          "534:     @use_kwargs(ARGS, location=\"query\")",
          "",
          "---------------"
        ],
        "tests/test_webapp2parser.py||tests/test_webapp2parser.py": [
          "File: tests/test_webapp2parser.py -> tests/test_webapp2parser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: from webargs.core import json",
          "9: import pytest",
          "10: from marshmallow import fields, ValidationError",
          "12: import webtest",
          "13: import webapp2",
          "14: from webargs.webapp2parser import parser",
          "16: hello_args = {\"name\": fields.Str(missing=\"World\")}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: import marshmallow as ma",
          "16: from webargs.core import MARSHMALLOW_VERSION_INFO",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: }",
          "28: def test_parse_querystring_args():",
          "29:     request = webapp2.Request.blank(\"/echo?name=Fred\")",
          "33: def test_parse_querystring_multiple():",
          "34:     expected = {\"name\": [\"steve\", \"Loria\"]}",
          "35:     request = webapp2.Request.blank(\"/echomulti?name=steve&name=Loria\")",
          "39: def test_parse_form():",
          "40:     expected = {\"name\": \"Joe\"}",
          "41:     request = webapp2.Request.blank(\"/echo\", POST=expected)",
          "45: def test_parse_form_multiple():",
          "46:     expected = {\"name\": [\"steve\", \"Loria\"]}",
          "47:     request = webapp2.Request.blank(\"/echo\", POST=urlencode(expected, doseq=True))",
          "51: def test_parsing_form_default():",
          "52:     request = webapp2.Request.blank(\"/echo\", POST=\"\")",
          "56: def test_parse_json():",
          "",
          "[Removed Lines]",
          "30:     assert parser.parse(hello_args, req=request) == {\"name\": \"Fred\"}",
          "36:     assert parser.parse(hello_multiple, req=request) == expected",
          "42:     assert parser.parse(hello_args, req=request) == expected",
          "48:     assert parser.parse(hello_multiple, req=request) == expected",
          "53:     assert parser.parse(hello_args, req=request) == {\"name\": \"World\"}",
          "",
          "[Added Lines]",
          "30: class HelloSchema(ma.Schema):",
          "31:     name = fields.Str(missing=\"World\", validate=lambda n: len(n) >= 3)",
          "34: # variant which ignores unknown fields",
          "35: exclude_kwargs = (",
          "36:     {\"strict\": True} if MARSHMALLOW_VERSION_INFO[0] < 3 else {\"unknown\": ma.EXCLUDE}",
          "37: )",
          "38: hello_exclude_schema = HelloSchema(**exclude_kwargs)",
          "43:     assert parser.parse(hello_args, req=request, location=\"query\") == {\"name\": \"Fred\"}",
          "49:     assert parser.parse(hello_multiple, req=request, location=\"query\") == expected",
          "55:     assert parser.parse(hello_args, req=request, location=\"form\") == expected",
          "61:     assert parser.parse(hello_multiple, req=request, location=\"form\") == expected",
          "66:     assert parser.parse(hello_args, req=request, location=\"form\") == {\"name\": \"World\"}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:     request = webapp2.Request.blank(",
          "96:         \"/\", headers={\"Cookie\": response.headers[\"Set-Cookie\"]}",
          "97:     )",
          "101: def test_parsing_headers():",
          "102:     expected = {\"name\": \"Fred\"}",
          "103:     request = webapp2.Request.blank(\"/\", headers=expected)",
          "107: def test_parse_files():",
          "",
          "[Removed Lines]",
          "98:     assert parser.parse(hello_args, req=request, locations=(\"cookies\",)) == expected",
          "104:     assert parser.parse(hello_args, req=request, locations=(\"headers\",)) == expected",
          "",
          "[Added Lines]",
          "111:     assert parser.parse(hello_args, req=request, location=\"cookies\") == expected",
          "117:     assert (",
          "118:         parser.parse(hello_exclude_schema, req=request, location=\"headers\") == expected",
          "119:     )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "110:     \"\"\"",
          "112:     class Handler(webapp2.RequestHandler):",
          "114:         def post(self, args):",
          "115:             self.response.content_type = \"application/json\"",
          "",
          "[Removed Lines]",
          "113:         @parser.use_args({\"myfile\": fields.List(fields.Field())}, locations=(\"files\",))",
          "",
          "[Added Lines]",
          "128:         @parser.use_args({\"myfile\": fields.List(fields.Field())}, location=\"files\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "130: def test_exception_on_validation_error():",
          "131:     request = webapp2.Request.blank(\"/\", POST={\"num\": \"3\"})",
          "132:     with pytest.raises(ValidationError):",
          "136: def test_validation_error_with_message():",
          "137:     request = webapp2.Request.blank(\"/\", POST={\"num\": \"3\"})",
          "138:     with pytest.raises(ValidationError) as exc:",
          "140:         assert \"Houston, we've had a problem.\" in exc.value",
          "",
          "[Removed Lines]",
          "133:         parser.parse(hello_validate, req=request)",
          "139:         parser.parse(hello_validate, req=request)",
          "",
          "[Added Lines]",
          "148:         parser.parse(hello_validate, req=request, location=\"form\")",
          "154:         parser.parse(hello_validate, req=request, location=\"form\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "148:     request = webapp2.Request.blank(\"/echo\", POST=expected)",
          "149:     app = webapp2.WSGIApplication([])",
          "150:     app.set_globals(app, request)",
          "",
          "[Removed Lines]",
          "151:     assert parser.parse(hello_args) == expected",
          "",
          "[Added Lines]",
          "166:     assert parser.parse(hello_args, location=\"form\") == expected",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70f3f9098636740e564a09cd5bb39a831860ef08",
      "candidate_info": {
        "commit_hash": "70f3f9098636740e564a09cd5bb39a831860ef08",
        "repo": "marshmallow-code/webargs",
        "commit_url": "https://github.com/marshmallow-code/webargs/commit/70f3f9098636740e564a09cd5bb39a831860ef08",
        "files": [
          "src/webargs/bottleparser.py",
          "src/webargs/core.py",
          "src/webargs/djangoparser.py",
          "src/webargs/flaskparser.py",
          "src/webargs/testing.py",
          "tests/apps/bottle_app.py",
          "tests/apps/django_app/base/settings.py",
          "tests/apps/django_app/base/urls.py",
          "tests/apps/django_app/echo/views.py",
          "tests/test_core.py",
          "tests/test_djangoparser.py",
          "tests/test_flaskparser.py"
        ],
        "message": "Update bottleparser, djangoparser for v6\n\n- Convert parse_* funcs to load_* funcs\n- Update test apps to work with testsuite changes\n- The django test app now decorates all view funcs so that validation\n  errors get caught and translated to 422s (simplifies the test app)\n\nTo support these changes, add a \"concrete\" implementation of `load_json`\nto the core parser.\n\nBecause the whole point of the explicit error handling is to try to make\nthe behavior of webargs more uniform, it makes sense to provide a couple\nof hook points for sending data into the main load_json method.\nThe public interface is still the existence of load_json and users who\nwant to customize parser behavior should simply override that. However,\nwithin webargs we can have some private hooks, `_raw_load_json` which\ndoesn't deal with decode errors and `_handle_invalid_json_error` which\nprocesses errors.\n\nAs a result, bottleparser, flaskparser, and djangoparser can all share\ncode for this purpose. Presumably all of the other parsers will be able\nto share as well, but it remains to be seen.\n\nPer code review, update docstrings on all load_* methods returning\nMultiDictProxy objects in core and flaskparser as well.",
        "before_after_code_files": [
          "src/webargs/bottleparser.py||src/webargs/bottleparser.py",
          "src/webargs/core.py||src/webargs/core.py",
          "src/webargs/djangoparser.py||src/webargs/djangoparser.py",
          "src/webargs/flaskparser.py||src/webargs/flaskparser.py",
          "src/webargs/testing.py||src/webargs/testing.py",
          "tests/apps/bottle_app.py||tests/apps/bottle_app.py",
          "tests/apps/django_app/base/settings.py||tests/apps/django_app/base/settings.py",
          "tests/apps/django_app/base/urls.py||tests/apps/django_app/base/urls.py",
          "tests/apps/django_app/echo/views.py||tests/apps/django_app/echo/views.py",
          "tests/test_core.py||tests/test_core.py",
          "tests/test_djangoparser.py||tests/test_djangoparser.py",
          "tests/test_flaskparser.py||tests/test_flaskparser.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/webargs/bottleparser.py||src/webargs/bottleparser.py",
            "src/webargs/testing.py||src/webargs/testing.py",
            "tests/apps/bottle_app.py||tests/apps/bottle_app.py",
            "tests/apps/django_app/echo/views.py||tests/apps/django_app/echo/views.py"
          ],
          "candidate": [
            "src/webargs/bottleparser.py||src/webargs/bottleparser.py",
            "src/webargs/testing.py||src/webargs/testing.py",
            "tests/apps/bottle_app.py||tests/apps/bottle_app.py",
            "tests/apps/django_app/echo/views.py||tests/apps/django_app/echo/views.py"
          ]
        }
      },
      "candidate_diff": {
        "src/webargs/bottleparser.py||src/webargs/bottleparser.py": [
          "File: src/webargs/bottleparser.py -> src/webargs/bottleparser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import bottle",
          "22: from webargs import core",
          "26: class BottleParser(core.Parser):",
          "27:     \"\"\"Bottle.py request argument parser.\"\"\"",
          "69:     def handle_error(self, error, req, schema, error_status_code, error_headers):",
          "70:         \"\"\"Handles errors during parsing. Aborts the current request with a",
          "",
          "[Removed Lines]",
          "23: from webargs.core import json",
          "29:     def parse_querystring(self, req, name, field):",
          "30:         \"\"\"Pull a querystring value from the request.\"\"\"",
          "31:         return core.get_value(req.query, name, field)",
          "33:     def parse_form(self, req, name, field):",
          "34:         \"\"\"Pull a form value from the request.\"\"\"",
          "35:         return core.get_value(req.forms, name, field)",
          "37:     def parse_json(self, req, name, field):",
          "38:         \"\"\"Pull a json value from the request.\"\"\"",
          "39:         json_data = self._cache.get(\"json\")",
          "40:         if json_data is None:",
          "41:             try:",
          "42:                 self._cache[\"json\"] = json_data = req.json",
          "43:             except AttributeError:",
          "44:                 return core.missing",
          "45:             except json.JSONDecodeError as e:",
          "46:                 if e.doc == \"\":",
          "47:                     return core.missing",
          "48:                 else:",
          "49:                     return self.handle_invalid_json_error(e, req)",
          "50:             except UnicodeDecodeError as e:",
          "51:                 return self.handle_invalid_json_error(e, req)",
          "53:             if json_data is None:",
          "54:                 return core.missing",
          "55:         return core.get_value(json_data, name, field, allow_many_nested=True)",
          "57:     def parse_headers(self, req, name, field):",
          "58:         \"\"\"Pull a value from the header data.\"\"\"",
          "59:         return core.get_value(req.headers, name, field)",
          "61:     def parse_cookies(self, req, name, field):",
          "62:         \"\"\"Pull a value from the cookiejar.\"\"\"",
          "63:         return req.get_cookie(name)",
          "65:     def parse_files(self, req, name, field):",
          "66:         \"\"\"Pull a file from the request.\"\"\"",
          "67:         return core.get_value(req.files, name, field)",
          "",
          "[Added Lines]",
          "23: from webargs.multidictproxy import MultiDictProxy",
          "29:     def _handle_invalid_json_error(self, error, req, *args, **kwargs):",
          "30:         raise bottle.HTTPError(",
          "31:             status=400, body={\"json\": [\"Invalid JSON body.\"]}, exception=error",
          "32:         )",
          "34:     def _raw_load_json(self, req):",
          "35:         \"\"\"Read a json payload from the request.\"\"\"",
          "36:         try:",
          "37:             data = req.json",
          "38:         except AttributeError:",
          "39:             return core.missing",
          "41:         # unfortunately, bottle does not distinguish between an emtpy body, \"\",",
          "42:         # and a body containing the valid JSON value null, \"null\"",
          "43:         # so these can't be properly disambiguated",
          "44:         # as our best-effort solution, treat None as missing and ignore the",
          "45:         # (admittedly unusual) \"null\" case",
          "46:         # see: https://github.com/bottlepy/bottle/issues/1160",
          "47:         if data is None:",
          "48:             return core.missing",
          "49:         else:",
          "50:             return data",
          "52:     def load_querystring(self, req, schema):",
          "53:         \"\"\"Return query params from the request as a MultiDictProxy.\"\"\"",
          "54:         return MultiDictProxy(req.query, schema)",
          "56:     def load_form(self, req, schema):",
          "57:         \"\"\"Return form values from the request as a MultiDictProxy.\"\"\"",
          "58:         return MultiDictProxy(req.forms, schema)",
          "60:     def load_headers(self, req, schema):",
          "61:         \"\"\"Return headers from the request as a MultiDictProxy.\"\"\"",
          "62:         return MultiDictProxy(req.headers, schema)",
          "64:     def load_cookies(self, req, schema):",
          "65:         \"\"\"Return cookies from the request.\"\"\"",
          "66:         return req.cookies",
          "68:     def load_files(self, req, schema):",
          "69:         \"\"\"Return files from the request as a MultiDictProxy.\"\"\"",
          "70:         return MultiDictProxy(req.files, schema)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:             exception=error,",
          "79:         )",
          "86:     def get_default_request(self):",
          "87:         \"\"\"Override to use bottle's thread-local request object by default.\"\"\"",
          "88:         return bottle.request",
          "",
          "[Removed Lines]",
          "81:     def handle_invalid_json_error(self, error, req, *args, **kwargs):",
          "82:         raise bottle.HTTPError(",
          "83:             status=400, body={\"json\": [\"Invalid JSON body.\"]}, exception=error",
          "84:         )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/webargs/core.py||src/webargs/core.py": [
          "File: src/webargs/core.py -> src/webargs/core.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "445:         self.error_callback = func",
          "446:         return func",
          "450:     def load_json(self, req, schema):",
          "451:         \"\"\"Load JSON from a request object or return `missing` if no value can",
          "452:         be found.",
          "453:         \"\"\"",
          "454:         return missing",
          "456:     def load_querystring(self, req, schema):",
          "",
          "[Removed Lines]",
          "448:     # Abstract Methods",
          "",
          "[Added Lines]",
          "448:     def _handle_invalid_json_error(self, error, req, *args, **kwargs):",
          "449:         \"\"\"Internal hook for overriding treatment of JSONDecodeErrors.",
          "451:         Invoked by default `load_json` implementation.",
          "453:         External parsers can just implement their own behavior for load_json ,",
          "454:         so this is not part of the public parser API.",
          "455:         \"\"\"",
          "456:         raise error",
          "462:         # NOTE: althought this implementation is real/concrete and used by",
          "463:         # several of the parsers in webargs, it relies on the internal hooks",
          "464:         # `_handle_invalid_json_error` and `_raw_load_json`",
          "465:         # these methods are not part of the public API and are used to simplify",
          "466:         # code sharing amongst the built-in webargs parsers",
          "467:         json_data = self._cache.get(\"json\")",
          "468:         if json_data is None:",
          "469:             try:",
          "470:                 json_data = self._raw_load_json(req)",
          "471:                 if json_data is missing:",
          "472:                     return missing",
          "473:                 self._cache[\"json\"] = json_data",
          "474:             except json.JSONDecodeError as e:",
          "475:                 if e.doc == \"\":",
          "476:                     return missing",
          "477:                 else:",
          "478:                     return self._handle_invalid_json_error(e, req)",
          "479:             except UnicodeDecodeError as e:",
          "480:                 return self._handle_invalid_json_error(e, req)",
          "482:         return json_data",
          "484:     # Abstract Methods",
          "486:     def _raw_load_json(self, req):",
          "487:         \"\"\"Internal hook method for implementing load_json()",
          "489:         Get a request body for feeding in to `load_json`, and parse it either",
          "490:         using core.parse_json() or similar utilities which raise",
          "491:         JSONDecodeErrors.",
          "492:         Ensure consistent behavior when encountering decoding errors.",
          "494:         The default implementation here simply returns `missing`, and the default",
          "495:         implementation of `load_json` above will pass that value through.",
          "496:         However, by implementing a \"mostly concrete\" version of load_json with",
          "497:         this as a hook for getting data, we consolidate the logic for handling",
          "498:         those JSONDecodeErrors.",
          "499:         \"\"\"",
          "",
          "---------------"
        ],
        "src/webargs/djangoparser.py||src/webargs/djangoparser.py": [
          "File: src/webargs/djangoparser.py -> src/webargs/djangoparser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:             return HttpResponse('Hello ' + args['name'])",
          "20: \"\"\"",
          "21: from webargs import core",
          "25: class DjangoParser(core.Parser):",
          "",
          "[Removed Lines]",
          "22: from webargs.core import json",
          "",
          "[Added Lines]",
          "22: from webargs.multidictproxy import MultiDictProxy",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:         the parser and returning the appropriate `HTTPResponse`.",
          "34:     \"\"\"",
          "64:         raise NotImplementedError(",
          "65:             \"Header parsing not supported by {0}\".format(self.__class__.__name__)",
          "66:         )",
          "72:     def get_request_from_view_args(self, view, args, kwargs):",
          "73:         # The first argument is either `self` or `request`",
          "",
          "[Removed Lines]",
          "36:     def parse_querystring(self, req, name, field):",
          "37:         \"\"\"Pull the querystring value from the request.\"\"\"",
          "38:         return core.get_value(req.GET, name, field)",
          "40:     def parse_form(self, req, name, field):",
          "41:         \"\"\"Pull the form value from the request.\"\"\"",
          "42:         return core.get_value(req.POST, name, field)",
          "44:     def parse_json(self, req, name, field):",
          "45:         \"\"\"Pull a json value from the request body.\"\"\"",
          "46:         json_data = self._cache.get(\"json\")",
          "47:         if json_data is None:",
          "48:             try:",
          "49:                 self._cache[\"json\"] = json_data = core.parse_json(req.body)",
          "50:             except AttributeError:",
          "51:                 return core.missing",
          "52:             except json.JSONDecodeError as e:",
          "53:                 if e.doc == \"\":",
          "54:                     return core.missing",
          "55:                 else:",
          "56:                     return self.handle_invalid_json_error(e, req)",
          "57:         return core.get_value(json_data, name, field, allow_many_nested=True)",
          "59:     def parse_cookies(self, req, name, field):",
          "60:         \"\"\"Pull the value from the cookiejar.\"\"\"",
          "61:         return core.get_value(req.COOKIES, name, field)",
          "63:     def parse_headers(self, req, name, field):",
          "68:     def parse_files(self, req, name, field):",
          "69:         \"\"\"Pull a file from the request.\"\"\"",
          "70:         return core.get_value(req.FILES, name, field)",
          "",
          "[Added Lines]",
          "36:     def _raw_load_json(self, req):",
          "37:         \"\"\"Read a json payload from the request for the core parser's load_json\"\"\"",
          "38:         return core.parse_json(req.body)",
          "40:     def load_querystring(self, req, schema):",
          "41:         \"\"\"Return query params from the request as a MultiDictProxy.\"\"\"",
          "42:         return MultiDictProxy(req.GET, schema)",
          "44:     def load_form(self, req, schema):",
          "45:         \"\"\"Return form values from the request as a MultiDictProxy.\"\"\"",
          "46:         return MultiDictProxy(req.POST, schema)",
          "48:     def load_cookies(self, req, schema):",
          "49:         \"\"\"Return cookies from the request.\"\"\"",
          "50:         return req.COOKIES",
          "52:     def load_headers(self, req, schema):",
          "57:     def load_files(self, req, schema):",
          "58:         \"\"\"Return files from the request as a MultiDictProxy.\"\"\"",
          "59:         return MultiDictProxy(req.FILES, schema)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:         except AttributeError:  # first arg is request",
          "77:             return args[0]",
          "83: parser = DjangoParser()",
          "84: use_args = parser.use_args",
          "",
          "[Removed Lines]",
          "79:     def handle_invalid_json_error(self, error, req, *args, **kwargs):",
          "80:         raise error",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/webargs/flaskparser.py||src/webargs/flaskparser.py": [
          "File: src/webargs/flaskparser.py -> src/webargs/flaskparser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: from werkzeug.exceptions import HTTPException",
          "25: from webargs import core",
          "27: from webargs.multidictproxy import MultiDictProxy",
          "",
          "[Removed Lines]",
          "26: from webargs.core import json",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:     )",
          "64:         Checks the input mimetype and may return 'missing' if the mimetype is",
          "65:         non-json, even if the request body is parseable as json.\"\"\"",
          "66:         if not is_json_request(req):",
          "67:             return core.missing",
          "89:         return MultiDictProxy(req.args, schema)",
          "91:     def load_form(self, req, schema):",
          "95:         return MultiDictProxy(req.form, schema)",
          "97:     def load_headers(self, req, schema):",
          "101:         return MultiDictProxy(req.headers, schema)",
          "103:     def load_cookies(self, req, schema):",
          "105:         return req.cookies",
          "107:     def load_files(self, req, schema):",
          "111:         return MultiDictProxy(req.files, schema)",
          "113:     def handle_error(self, error, req, schema, error_status_code, error_headers):",
          "",
          "[Removed Lines]",
          "57:     def load_view_args(self, req, schema):",
          "58:         \"\"\"Read the request's ``view_args`` or ``missing`` if there are none.\"\"\"",
          "59:         return req.view_args or core.missing",
          "61:     def load_json(self, req, schema):",
          "62:         \"\"\"Read a json payload from the request.",
          "69:         json_data = self._cache.get(\"json\")",
          "70:         if json_data is None:",
          "71:             # We decode the json manually here instead of",
          "72:             # using req.get_json() so that we can handle",
          "73:             # JSONDecodeErrors consistently",
          "74:             data = req.get_data(cache=True)",
          "75:             try:",
          "76:                 self._cache[\"json\"] = json_data = core.parse_json(data)",
          "77:             except json.JSONDecodeError as e:",
          "78:                 if e.doc == \"\":",
          "79:                     return core.missing",
          "80:                 else:",
          "81:                     return self.handle_invalid_json_error(e, req)",
          "83:         return json_data",
          "85:     def load_querystring(self, req, schema):",
          "86:         \"\"\"Read query params from the request.",
          "88:         Is a multidict.\"\"\"",
          "92:         \"\"\"Read form values from the request.",
          "94:         Is a multidict.\"\"\"",
          "98:         \"\"\"Read headers from the request.",
          "100:         Is a multidict.\"\"\"",
          "104:         \"\"\"Read cookies from the request.\"\"\"",
          "108:         \"\"\"Read files from the request.",
          "110:         Is a multidict.\"\"\"",
          "",
          "[Added Lines]",
          "56:     def _raw_load_json(self, req):",
          "57:         \"\"\"Return a json payload from the request for the core parser's load_json",
          "64:         return core.parse_json(req.get_data(cache=True))",
          "66:     def _handle_invalid_json_error(self, error, req, *args, **kwargs):",
          "67:         abort(400, exc=error, messages={\"json\": [\"Invalid JSON body.\"]})",
          "69:     def load_view_args(self, req, schema):",
          "70:         \"\"\"Return the request's ``view_args`` or ``missing`` if there are none.\"\"\"",
          "71:         return req.view_args or core.missing",
          "73:     def load_querystring(self, req, schema):",
          "74:         \"\"\"Return query params from the request as a MultiDictProxy.\"\"\"",
          "78:         \"\"\"Return form values from the request as a MultiDictProxy.\"\"\"",
          "82:         \"\"\"Return headers from the request as a MultiDictProxy.\"\"\"",
          "86:         \"\"\"Return cookies from the request.\"\"\"",
          "90:         \"\"\"Return files from the request as a MultiDictProxy.\"\"\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:             headers=error_headers,",
          "124:         )",
          "129:     def get_default_request(self):",
          "130:         \"\"\"Override to use Flask's thread-local request objec by default\"\"\"",
          "131:         return flask.request",
          "",
          "[Removed Lines]",
          "126:     def handle_invalid_json_error(self, error, req, *args, **kwargs):",
          "127:         abort(400, exc=error, messages={\"json\": [\"Invalid JSON body.\"]})",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/webargs/testing.py||src/webargs/testing.py": [
          "File: src/webargs/testing.py -> src/webargs/testing.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:     # https://github.com/marshmallow-code/webargs/issues/427",
          "136:     def test_parse_json_with_nonutf8_chars(self, testapp):",
          "137:         res = testapp.post(",
          "139:             b\"\\xfe\",",
          "140:             headers={\"Accept\": \"application/json\", \"Content-Type\": \"application/json\"},",
          "141:             expect_errors=True,",
          "",
          "[Removed Lines]",
          "138:             \"/echo\",",
          "",
          "[Added Lines]",
          "138:             \"/echo_json\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:         assert res.json == {\"json\": [\"Invalid JSON body.\"]}",
          "147:     def test_validation_error_returns_422_response(self, testapp):",
          "149:         assert res.status_code == 422",
          "151:     def test_user_validation_error_returns_422_response_by_default(self, testapp):",
          "",
          "[Removed Lines]",
          "148:         res = testapp.post(\"/echo_json\", {\"name\": \"b\"}, expect_errors=True)",
          "",
          "[Added Lines]",
          "148:         res = testapp.post_json(\"/echo_json\", {\"name\": \"b\"}, expect_errors=True)",
          "",
          "---------------"
        ],
        "tests/apps/bottle_app.py||tests/apps/bottle_app.py": [
          "File: tests/apps/bottle_app.py -> tests/apps/bottle_app.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from bottle import Bottle, HTTPResponse, debug, request, response",
          "4: import marshmallow as ma",
          "6: from webargs.bottleparser import parser, use_args, use_kwargs",
          "7: from webargs.core import MARSHMALLOW_VERSION_INFO",
          "13: class HelloSchema(ma.Schema):",
          "14:     name = fields.Str(missing=\"World\", validate=lambda n: len(n) >= 3)",
          "21: app = Bottle()",
          "22: debug(True)",
          "26: def echo():",
          "46: @app.route(",
          "47:     \"/echo_use_args_validated\",",
          "50: )",
          "51: def echo_use_args_validated(args):",
          "52:     return args",
          "56: def echo_multi():",
          "61: def echo_many_schema():",
          "63:     return HTTPResponse(body=json.dumps(arguments), content_type=\"application/json\")",
          "66: @app.route(",
          "68: )",
          "69: def echo_use_args_with_path_param(args, name):",
          "70:     return args",
          "73: @app.route(",
          "75: )",
          "76: def echo_use_kwargs_with_path_param(name, value):",
          "77:     return {\"value\": value}",
          "",
          "[Removed Lines]",
          "5: from webargs import fields",
          "9: hello_args = {\"name\": fields.Str(missing=\"World\", validate=lambda n: len(n) >= 3)}",
          "10: hello_multiple = {\"name\": fields.List(fields.Str())}",
          "17: strict_kwargs = {\"strict\": True} if MARSHMALLOW_VERSION_INFO[0] < 3 else {}",
          "18: hello_many_schema = HelloSchema(many=True, **strict_kwargs)",
          "25: @app.route(\"/echo\", method=[\"GET\", \"POST\"])",
          "27:     return parser.parse(hello_args, request)",
          "30: @app.route(\"/echo_query\")",
          "31: def echo_query():",
          "32:     return parser.parse(hello_args, request, locations=(\"query\",))",
          "35: @app.route(\"/echo_use_args\", method=[\"GET\", \"POST\"])",
          "36: @use_args(hello_args)",
          "37: def echo_use_args(args):",
          "38:     return args",
          "41: @app.route(\"/echo_use_kwargs\", method=[\"GET\", \"POST\"], apply=use_kwargs(hello_args))",
          "42: def echo_use_kwargs(name):",
          "43:     return {\"name\": name}",
          "48:     method=[\"GET\", \"POST\"],",
          "49:     apply=use_args({\"value\": fields.Int()}, validate=lambda args: args[\"value\"] > 42),",
          "55: @app.route(\"/echo_multi\", method=[\"GET\", \"POST\"])",
          "57:     return parser.parse(hello_multiple, request)",
          "60: @app.route(\"/echo_many_schema\", method=[\"GET\", \"POST\"])",
          "62:     arguments = parser.parse(hello_many_schema, request, locations=(\"json\",))",
          "67:     \"/echo_use_args_with_path_param/<name>\", apply=use_args({\"value\": fields.Int()})",
          "74:     \"/echo_use_kwargs_with_path_param/<name>\", apply=use_kwargs({\"value\": fields.Int()})",
          "",
          "[Added Lines]",
          "5: from webargs import fields, dict2schema",
          "9: if MARSHMALLOW_VERSION_INFO[0] < 3:",
          "10:     schema_kwargs = {\"strict\": True}",
          "11: else:",
          "12:     schema_kwargs = {\"unknown\": ma.EXCLUDE}",
          "15: hello_args = dict2schema(",
          "16:     {\"name\": fields.Str(missing=\"World\", validate=lambda n: len(n) >= 3)}",
          "17: )(**schema_kwargs)",
          "18: hello_multiple = dict2schema({\"name\": fields.List(fields.Str())})(**schema_kwargs)",
          "25: hello_many_schema = HelloSchema(many=True, **schema_kwargs)",
          "32: @app.route(\"/echo\", method=[\"GET\"])",
          "34:     return parser.parse(hello_args, request, location=\"query\")",
          "37: @app.route(\"/echo_form\", method=[\"POST\"])",
          "38: def echo_form():",
          "39:     return parser.parse(hello_args, location=\"form\")",
          "42: @app.route(\"/echo_json\", method=[\"POST\"])",
          "43: def echo_json():",
          "44:     return parser.parse(hello_args)",
          "47: @app.route(\"/echo_use_args\", method=[\"GET\"])",
          "48: @use_args(hello_args, location=\"query\")",
          "49: def echo_use_args(args):",
          "50:     return args",
          "55:     method=[\"POST\"],",
          "56:     apply=use_args(",
          "57:         {\"value\": fields.Int()},",
          "58:         validate=lambda args: args[\"value\"] > 42,",
          "59:         location=\"form\",",
          "60:     ),",
          "66: @app.route(",
          "67:     \"/echo_use_kwargs\", method=[\"GET\"], apply=use_kwargs(hello_args, location=\"query\")",
          "68: )",
          "69: def echo_use_kwargs(name):",
          "70:     return {\"name\": name}",
          "73: @app.route(\"/echo_multi\", method=[\"GET\"])",
          "75:     return parser.parse(hello_multiple, request, location=\"query\")",
          "78: @app.route(\"/echo_multi_form\", method=[\"POST\"])",
          "79: def multi_form():",
          "80:     return parser.parse(hello_multiple, location=\"form\")",
          "83: @app.route(\"/echo_multi_json\", method=[\"POST\"])",
          "84: def multi_json():",
          "85:     return parser.parse(hello_multiple)",
          "88: @app.route(\"/echo_many_schema\", method=[\"POST\"])",
          "90:     arguments = parser.parse(hello_many_schema, request)",
          "95:     \"/echo_use_args_with_path_param/<name>\",",
          "96:     apply=use_args({\"value\": fields.Int()}, location=\"query\"),",
          "103:     \"/echo_use_kwargs_with_path_param/<name>\",",
          "104:     apply=use_kwargs({\"value\": fields.Int()}, location=\"query\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89: @app.route(\"/echo_headers\")",
          "90: def echo_headers():",
          "94: @app.route(\"/echo_cookie\")",
          "95: def echo_cookie():",
          "99: @app.route(\"/echo_file\", method=[\"POST\"])",
          "100: def echo_file():",
          "101:     args = {\"myfile\": fields.Field()}",
          "103:     myfile = result[\"myfile\"]",
          "104:     content = myfile.file.read().decode(\"utf8\")",
          "105:     return {\"myfile\": content}",
          "",
          "[Removed Lines]",
          "91:     return parser.parse(hello_args, request, locations=(\"headers\",))",
          "96:     return parser.parse(hello_args, request, locations=(\"cookies\",))",
          "102:     result = parser.parse(args, locations=(\"files\",))",
          "",
          "[Added Lines]",
          "121:     return parser.parse(hello_args, request, location=\"headers\")",
          "126:     return parser.parse(hello_args, request, location=\"cookies\")",
          "132:     result = parser.parse(args, location=\"files\")",
          "",
          "---------------"
        ],
        "tests/apps/django_app/base/settings.py||tests/apps/django_app/base/settings.py": [
          "File: tests/apps/django_app/base/settings.py -> tests/apps/django_app/base/settings.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: TEMPLATE_DEBUG = True",
          "11: # Application definition",
          "13: INSTALLED_APPS = (\"django.contrib.contenttypes\",)",
          "",
          "[Removed Lines]",
          "10: ALLOWED_HOSTS = []",
          "",
          "[Added Lines]",
          "10: ALLOWED_HOSTS = [\"*\"]",
          "",
          "---------------"
        ],
        "tests/apps/django_app/base/urls.py||tests/apps/django_app/base/urls.py": [
          "File: tests/apps/django_app/base/urls.py -> tests/apps/django_app/base/urls.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from tests.apps.django_app.echo import views",
          "5: urlpatterns = [",
          "6:     url(r\"^echo$\", views.echo),",
          "8:     url(r\"^echo_use_args$\", views.echo_use_args),",
          "9:     url(r\"^echo_use_kwargs$\", views.echo_use_kwargs),",
          "10:     url(r\"^echo_multi$\", views.echo_multi),",
          "11:     url(r\"^echo_many_schema$\", views.echo_many_schema),",
          "12:     url(",
          "13:         r\"^echo_use_args_with_path_param/(?P<name>\\w+)$\",",
          "",
          "[Removed Lines]",
          "7:     url(r\"^echo_query$\", views.echo_query),",
          "",
          "[Added Lines]",
          "8:     url(r\"^echo_form$\", views.echo_form),",
          "9:     url(r\"^echo_json$\", views.echo_json),",
          "11:     url(r\"^echo_use_args_validated$\", views.echo_use_args_validated),",
          "14:     url(r\"^echo_multi_form$\", views.echo_multi_form),",
          "15:     url(r\"^echo_multi_json$\", views.echo_multi_json),",
          "",
          "---------------"
        ],
        "tests/apps/django_app/echo/views.py||tests/apps/django_app/echo/views.py": [
          "File: tests/apps/django_app/echo/views.py -> tests/apps/django_app/echo/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from django.views.generic import View",
          "5: import marshmallow as ma",
          "7: from webargs.djangoparser import parser, use_args, use_kwargs",
          "8: from webargs.core import MARSHMALLOW_VERSION_INFO",
          "14: class HelloSchema(ma.Schema):",
          "15:     name = fields.Str(missing=\"World\", validate=lambda n: len(n) >= 3)",
          "22: def json_response(data, **kwargs):",
          "23:     return HttpResponse(json.dumps(data), content_type=\"application/json\", **kwargs)",
          "26: def echo(request):",
          "41: def echo_use_args(request, args):",
          "42:     return json_response(args)",
          "46: def echo_use_kwargs(request, name):",
          "47:     return json_response({\"name\": name})",
          "50: def echo_multi(request):",
          "51:     return json_response(parser.parse(hello_multiple, request))",
          "54: def echo_many_schema(request):",
          "64: def echo_use_args_with_path_param(request, args, name):",
          "65:     return json_response(args)",
          "69: def echo_use_kwargs_with_path_param(request, value, name):",
          "70:     return json_response({\"value\": value})",
          "73: def always_error(request):",
          "74:     def always_fail(value):",
          "75:         raise ma.ValidationError(\"something went wrong\")",
          "77:     argmap = {\"text\": fields.Str(validate=always_fail)}",
          "84: def echo_headers(request):",
          "88: def echo_cookie(request):",
          "92: def echo_file(request):",
          "93:     args = {\"myfile\": fields.Field()}",
          "95:     myfile = result[\"myfile\"]",
          "96:     content = myfile.read().decode(\"utf8\")",
          "97:     return json_response({\"myfile\": content})",
          "100: def echo_nested(request):",
          "101:     argmap = {\"name\": fields.Nested({\"first\": fields.Str(), \"last\": fields.Str()})}",
          "102:     return json_response(parser.parse(argmap, request))",
          "105: def echo_nested_many(request):",
          "106:     argmap = {",
          "107:         \"users\": fields.Nested({\"id\": fields.Int(), \"name\": fields.Str()}, many=True)",
          "",
          "[Removed Lines]",
          "6: from webargs import fields",
          "10: hello_args = {\"name\": fields.Str(missing=\"World\", validate=lambda n: len(n) >= 3)}",
          "11: hello_multiple = {\"name\": fields.List(fields.Str())}",
          "18: strict_kwargs = {\"strict\": True} if MARSHMALLOW_VERSION_INFO[0] < 3 else {}",
          "19: hello_many_schema = HelloSchema(many=True, **strict_kwargs)",
          "27:     try:",
          "28:         args = parser.parse(hello_args, request)",
          "29:     except ma.ValidationError as err:",
          "30:         return json_response(err.messages, status=parser.DEFAULT_VALIDATION_STATUS)",
          "31:     except json.JSONDecodeError:",
          "32:         return json_response({\"json\": [\"Invalid JSON body.\"]}, status=400)",
          "33:     return json_response(args)",
          "36: def echo_query(request):",
          "37:     return json_response(parser.parse(hello_args, request, locations=(\"query\",)))",
          "40: @use_args(hello_args)",
          "45: @use_kwargs(hello_args)",
          "55:     try:",
          "56:         return json_response(",
          "57:             parser.parse(hello_many_schema, request, locations=(\"json\",))",
          "58:         )",
          "59:     except ma.ValidationError as err:",
          "60:         return json_response(err.messages, status=parser.DEFAULT_VALIDATION_STATUS)",
          "63: @use_args({\"value\": fields.Int()})",
          "68: @use_kwargs({\"value\": fields.Int()})",
          "78:     try:",
          "79:         return parser.parse(argmap, request)",
          "80:     except ma.ValidationError as err:",
          "81:         return json_response(err.messages, status=parser.DEFAULT_VALIDATION_STATUS)",
          "85:     return json_response(parser.parse(hello_args, request, locations=(\"headers\",)))",
          "89:     return json_response(parser.parse(hello_args, request, locations=(\"cookies\",)))",
          "94:     result = parser.parse(args, request, locations=(\"files\",))",
          "",
          "[Added Lines]",
          "6: from webargs import fields, dict2schema",
          "10: if MARSHMALLOW_VERSION_INFO[0] < 3:",
          "11:     schema_kwargs = {\"strict\": True}",
          "12: else:",
          "13:     schema_kwargs = {\"unknown\": ma.EXCLUDE}",
          "15: hello_args = dict2schema(",
          "16:     {\"name\": fields.Str(missing=\"World\", validate=lambda n: len(n) >= 3)}",
          "17: )(**schema_kwargs)",
          "18: hello_multiple = dict2schema({\"name\": fields.List(fields.Str())})(**schema_kwargs)",
          "25: hello_many_schema = HelloSchema(many=True, **schema_kwargs)",
          "32: def handle_view_errors(f):",
          "33:     def wrapped(*args, **kwargs):",
          "34:         try:",
          "35:             return f(*args, **kwargs)",
          "36:         except ma.ValidationError as err:",
          "37:             return json_response(err.messages, status=422)",
          "38:         except json.JSONDecodeError:",
          "39:             return json_response({\"json\": [\"Invalid JSON body.\"]}, status=400)",
          "41:     return wrapped",
          "44: @handle_view_errors",
          "46:     return json_response(parser.parse(hello_args, request, location=\"query\"))",
          "49: @handle_view_errors",
          "50: def echo_form(request):",
          "51:     return json_response(parser.parse(hello_args, request, location=\"form\"))",
          "54: @handle_view_errors",
          "55: def echo_json(request):",
          "56:     return json_response(parser.parse(hello_args, request))",
          "59: @handle_view_errors",
          "60: @use_args(hello_args, location=\"query\")",
          "65: @handle_view_errors",
          "66: @use_args(",
          "67:     {\"value\": fields.Int()}, validate=lambda args: args[\"value\"] > 42, location=\"form\"",
          "68: )",
          "69: def echo_use_args_validated(args):",
          "70:     return json_response(args)",
          "73: @handle_view_errors",
          "74: @use_kwargs(hello_args, location=\"query\")",
          "79: @handle_view_errors",
          "81:     return json_response(parser.parse(hello_multiple, request, location=\"query\"))",
          "84: @handle_view_errors",
          "85: def echo_multi_form(request):",
          "86:     return json_response(parser.parse(hello_multiple, request, location=\"form\"))",
          "89: @handle_view_errors",
          "90: def echo_multi_json(request):",
          "94: @handle_view_errors",
          "96:     return json_response(parser.parse(hello_many_schema, request))",
          "99: @handle_view_errors",
          "100: @use_args({\"value\": fields.Int()}, location=\"query\")",
          "105: @handle_view_errors",
          "106: @use_kwargs({\"value\": fields.Int()}, location=\"query\")",
          "111: @handle_view_errors",
          "117:     return parser.parse(argmap, request)",
          "120: @handle_view_errors",
          "122:     return json_response(parser.parse(hello_args, request, location=\"headers\"))",
          "125: @handle_view_errors",
          "127:     return json_response(parser.parse(hello_args, request, location=\"cookies\"))",
          "130: @handle_view_errors",
          "133:     result = parser.parse(args, request, location=\"files\")",
          "139: @handle_view_errors",
          "145: @handle_view_errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112: class EchoCBV(View):",
          "113:     def get(self, request):",
          "120:     post = get",
          "123: class EchoUseArgsCBV(View):",
          "125:     def get(self, request, args):",
          "126:         return json_response(args)",
          "131: class EchoUseArgsWithParamCBV(View):",
          "133:     def get(self, request, args, pid):",
          "134:         return json_response(args)",
          "",
          "[Removed Lines]",
          "114:         try:",
          "115:             args = parser.parse(hello_args, self.request)",
          "116:         except ma.ValidationError as err:",
          "117:             return json_response(err.messages, status=parser.DEFAULT_VALIDATION_STATUS)",
          "118:         return json_response(args)",
          "124:     @use_args(hello_args)",
          "128:     post = get",
          "132:     @use_args(hello_args)",
          "136:     post = get",
          "",
          "[Added Lines]",
          "154:     @handle_view_errors",
          "156:         location_kwarg = {} if request.method == \"POST\" else {\"location\": \"query\"}",
          "157:         return json_response(parser.parse(hello_args, self.request, **location_kwarg))",
          "163:     @handle_view_errors",
          "164:     @use_args(hello_args, location=\"query\")",
          "168:     @handle_view_errors",
          "169:     @use_args(hello_args)",
          "170:     def post(self, request, args):",
          "171:         return json_response(args)",
          "175:     @handle_view_errors",
          "176:     @use_args(hello_args, location=\"query\")",
          "180:     @handle_view_errors",
          "181:     @use_args(hello_args)",
          "182:     def post(self, request, args, pid):",
          "183:         return json_response(args)",
          "",
          "---------------"
        ],
        "tests/test_core.py||tests/test_core.py": [
          "File: tests/test_core.py -> tests/test_core.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     MARSHMALLOW_VERSION_INFO[0] < 3, reason=\"unknown=EXCLUDE added in marshmallow3\"",
          "105: )",
          "106: def test_parse_with_excluding_schema(parser, web_request):",
          "111:     from marshmallow import EXCLUDE",
          "113:     web_request.json = {\"username\": 42, \"password\": 42, \"fjords\": 42}",
          "",
          "[Removed Lines]",
          "107:     \"\"\"",
          "108:     This is new in webargs 6.x ; it's the way you can \"get back\" the behavior",
          "109:     of webargs 5.x in which extra args are ignored",
          "110:     \"\"\"",
          "",
          "[Added Lines]",
          "107:     # This is new in webargs 6.x ; it's the way you can \"get back\" the behavior",
          "108:     # of webargs 5.x in which extra args are ignored",
          "",
          "---------------"
        ],
        "tests/test_djangoparser.py||tests/test_djangoparser.py": [
          "File: tests/test_djangoparser.py -> tests/test_djangoparser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     def test_parsing_in_class_based_view(self, testapp):",
          "25:         assert testapp.get(\"/echo_cbv?name=Fred\").json == {\"name\": \"Fred\"}",
          "28:     def test_use_args_in_class_based_view(self, testapp):",
          "29:         res = testapp.get(\"/echo_use_args_cbv?name=Fred\")",
          "30:         assert res.json == {\"name\": \"Fred\"}",
          "32:         assert res.json == {\"name\": \"Fred\"}",
          "34:     def test_use_args_in_class_based_view_with_path_param(self, testapp):",
          "",
          "[Removed Lines]",
          "26:         assert testapp.post(\"/echo_cbv\", {\"name\": \"Fred\"}).json == {\"name\": \"Fred\"}",
          "31:         res = testapp.post(\"/echo_use_args_cbv\", {\"name\": \"Fred\"})",
          "",
          "[Added Lines]",
          "26:         assert testapp.post_json(\"/echo_cbv\", {\"name\": \"Fred\"}).json == {\"name\": \"Fred\"}",
          "31:         res = testapp.post_json(\"/echo_use_args_cbv\", {\"name\": \"Fred\"})",
          "",
          "---------------"
        ],
        "tests/test_flaskparser.py||tests/test_flaskparser.py": [
          "File: tests/test_flaskparser.py -> tests/test_flaskparser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:             \"/echo_nested_many_data_key\",",
          "51:             {\"x_field\": [{\"id\": 42}]},",
          "52:         )",
          "54:         if MARSHMALLOW_VERSION_INFO[0] < 3:",
          "55:             res = testapp.post_json(*post_with_raw_fieldname_args)",
          "56:             assert res.json == {\"x_field\": [{\"id\": 42}]}",
          "",
          "[Removed Lines]",
          "53:         # under marhsmallow2 this is allowed and works",
          "",
          "[Added Lines]",
          "53:         # under marshmallow 2 this is allowed and works",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "74fada601a31b03dca0e4ae34c7d40246dcef598",
      "candidate_info": {
        "commit_hash": "74fada601a31b03dca0e4ae34c7d40246dcef598",
        "repo": "marshmallow-code/webargs",
        "commit_url": "https://github.com/marshmallow-code/webargs/commit/74fada601a31b03dca0e4ae34c7d40246dcef598",
        "files": [
          "CHANGELOG.rst",
          "src/webargs/bottleparser.py",
          "src/webargs/djangoparser.py",
          "src/webargs/flaskparser.py",
          "src/webargs/pyramidparser.py",
          "src/webargs/testing.py",
          "src/webargs/webapp2parser.py",
          "tests/apps/aiohttp_app.py",
          "tests/apps/bottle_app.py",
          "tests/apps/django_app/base/urls.py",
          "tests/apps/django_app/echo/views.py",
          "tests/apps/falcon_app.py",
          "tests/apps/flask_app.py",
          "tests/apps/pyramid_app.py",
          "tests/test_webapp2parser.py"
        ],
        "message": "Skip JSON parsing if Content-Type is mismatched",
        "before_after_code_files": [
          "src/webargs/bottleparser.py||src/webargs/bottleparser.py",
          "src/webargs/djangoparser.py||src/webargs/djangoparser.py",
          "src/webargs/flaskparser.py||src/webargs/flaskparser.py",
          "src/webargs/pyramidparser.py||src/webargs/pyramidparser.py",
          "src/webargs/testing.py||src/webargs/testing.py",
          "src/webargs/webapp2parser.py||src/webargs/webapp2parser.py",
          "tests/apps/aiohttp_app.py||tests/apps/aiohttp_app.py",
          "tests/apps/bottle_app.py||tests/apps/bottle_app.py",
          "tests/apps/django_app/base/urls.py||tests/apps/django_app/base/urls.py",
          "tests/apps/django_app/echo/views.py||tests/apps/django_app/echo/views.py",
          "tests/apps/falcon_app.py||tests/apps/falcon_app.py",
          "tests/apps/flask_app.py||tests/apps/flask_app.py",
          "tests/apps/pyramid_app.py||tests/apps/pyramid_app.py",
          "tests/test_webapp2parser.py||tests/test_webapp2parser.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/webargs/bottleparser.py||src/webargs/bottleparser.py",
            "src/webargs/testing.py||src/webargs/testing.py",
            "src/webargs/webapp2parser.py||src/webargs/webapp2parser.py",
            "tests/apps/bottle_app.py||tests/apps/bottle_app.py",
            "tests/apps/django_app/echo/views.py||tests/apps/django_app/echo/views.py",
            "tests/apps/falcon_app.py||tests/apps/falcon_app.py",
            "tests/apps/flask_app.py||tests/apps/flask_app.py",
            "tests/apps/pyramid_app.py||tests/apps/pyramid_app.py",
            "tests/test_webapp2parser.py||tests/test_webapp2parser.py"
          ],
          "candidate": [
            "src/webargs/bottleparser.py||src/webargs/bottleparser.py",
            "src/webargs/testing.py||src/webargs/testing.py",
            "src/webargs/webapp2parser.py||src/webargs/webapp2parser.py",
            "tests/apps/bottle_app.py||tests/apps/bottle_app.py",
            "tests/apps/django_app/echo/views.py||tests/apps/django_app/echo/views.py",
            "tests/apps/falcon_app.py||tests/apps/falcon_app.py",
            "tests/apps/flask_app.py||tests/apps/flask_app.py",
            "tests/apps/pyramid_app.py||tests/apps/pyramid_app.py",
            "tests/test_webapp2parser.py||tests/test_webapp2parser.py"
          ]
        }
      },
      "candidate_diff": {
        "src/webargs/bottleparser.py||src/webargs/bottleparser.py": [
          "File: src/webargs/bottleparser.py -> src/webargs/bottleparser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     def parse_form(self, req, name, field):",
          "34:         \"\"\"Pull a form value from the request.\"\"\"",
          "35:         return core.get_value(req.forms, name, field)",
          "37:     def parse_json(self, req, name, field):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:         # For consistency with other parsers' behavior, don't attempt to",
          "36:         #  parse if content-type is mismatched.",
          "37:         #  TODO: Make this check more specific",
          "38:         if core.is_json(req.content_type):",
          "39:             return core.missing",
          "",
          "---------------"
        ],
        "src/webargs/djangoparser.py||src/webargs/djangoparser.py": [
          "File: src/webargs/djangoparser.py -> src/webargs/djangoparser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:         \"\"\"Pull a json value from the request body.\"\"\"",
          "46:         json_data = self._cache.get(\"json\")",
          "47:         if json_data is None:",
          "48:             try:",
          "49:                 self._cache[\"json\"] = json_data = core.parse_json(req.body)",
          "50:             except AttributeError:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:             if not core.is_json(req.content_type):",
          "49:                 return core.missing",
          "",
          "---------------"
        ],
        "src/webargs/flaskparser.py||src/webargs/flaskparser.py": [
          "File: src/webargs/flaskparser.py -> src/webargs/flaskparser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:         \"\"\"Pull a json value from the request.\"\"\"",
          "62:         json_data = self._cache.get(\"json\")",
          "63:         if json_data is None:",
          "64:             # We decode the json manually here instead of",
          "65:             # using req.get_json() so that we can handle",
          "66:             # JSONDecodeErrors consistently",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:             if not is_json_request(req):",
          "65:                 return core.missing",
          "",
          "---------------"
        ],
        "src/webargs/pyramidparser.py||src/webargs/pyramidparser.py": [
          "File: src/webargs/pyramidparser.py -> src/webargs/pyramidparser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:         \"\"\"Pull a json value from the request.\"\"\"",
          "58:         json_data = self._cache.get(\"json\")",
          "59:         if json_data is None:",
          "60:             try:",
          "61:                 self._cache[\"json\"] = json_data = core.parse_json(req.body, req.charset)",
          "62:             except json.JSONDecodeError as e:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:             if not core.is_json(req.content_type):",
          "61:                 return core.missing",
          "",
          "---------------"
        ],
        "src/webargs/testing.py||src/webargs/testing.py": [
          "File: src/webargs/testing.py -> src/webargs/testing.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:         )",
          "218:         assert res.status_code == 400",
          "219:         assert res.json == {\"json\": [\"Invalid JSON body.\"]}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:     @pytest.mark.parametrize(",
          "222:         (\"path\", \"payload\", \"content_type\"),",
          "223:         [",
          "224:             (",
          "225:                 \"/echo_json\",",
          "226:                 json.dumps({\"name\": \"foo\"}),",
          "227:                 \"application/x-www-form-urlencoded\",",
          "228:             ),",
          "229:             (\"/echo_form\", {\"name\": \"foo\"}, \"application/json\"),",
          "230:         ],",
          "231:     )",
          "232:     def test_content_type_mismatch(self, testapp, path, payload, content_type):",
          "233:         res = testapp.post(path, payload, headers={\"Content-Type\": content_type})",
          "234:         assert res.json == {\"name\": \"World\"}",
          "",
          "---------------"
        ],
        "src/webargs/webapp2parser.py||src/webargs/webapp2parser.py": [
          "File: src/webargs/webapp2parser.py -> src/webargs/webapp2parser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         \"\"\"Pull a json value from the request.\"\"\"",
          "42:         json_data = self._cache.get(\"json\")",
          "43:         if json_data is None:",
          "44:             try:",
          "45:                 self._cache[\"json\"] = json_data = core.parse_json(req.body)",
          "46:             except json.JSONDecodeError as e:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:             if not core.is_json(req.content_type):",
          "45:                 return core.missing",
          "",
          "---------------"
        ],
        "tests/apps/aiohttp_app.py||tests/apps/aiohttp_app.py": [
          "File: tests/apps/aiohttp_app.py -> tests/apps/aiohttp_app.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     return json_response(parsed)",
          "47: @use_args(hello_args)",
          "48: async def echo_use_args(request, args):",
          "49:     return json_response(args)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: async def echo_json(request):",
          "48:     parsed = await parser.parse(hello_args, request, locations=(\"json\",))",
          "49:     return json_response(parsed)",
          "52: async def echo_form(request):",
          "53:     parsed = await parser.parse(hello_args, request, locations=(\"form\",))",
          "54:     return json_response(parsed)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:     add_route(app, [\"GET\", \"POST\"], \"/echo\", echo)",
          "172:     add_route(app, [\"GET\"], \"/echo_query\", echo_query)",
          "173:     add_route(app, [\"GET\", \"POST\"], \"/echo_use_args\", echo_use_args)",
          "174:     add_route(app, [\"GET\", \"POST\"], \"/echo_use_kwargs\", echo_use_kwargs)",
          "175:     add_route(app, [\"GET\", \"POST\"], \"/echo_use_args_validated\", echo_use_args_validated)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:     add_route(app, [\"POST\"], \"/echo_json\", echo_json)",
          "184:     add_route(app, [\"POST\"], \"/echo_form\", echo_form)",
          "",
          "---------------"
        ],
        "tests/apps/bottle_app.py||tests/apps/bottle_app.py": [
          "File: tests/apps/bottle_app.py -> tests/apps/bottle_app.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     return parser.parse(hello_args, request, locations=(\"query\",))",
          "35: @app.route(\"/echo_use_args\", method=[\"GET\", \"POST\"])",
          "36: @use_args(hello_args)",
          "37: def echo_use_args(args):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: @app.route(\"/echo_json\", method=[\"POST\"])",
          "36: def echo_json():",
          "37:     return parser.parse(hello_args, request, locations=(\"json\",))",
          "40: @app.route(\"/echo_form\", method=[\"POST\"])",
          "41: def echo_form():",
          "42:     return parser.parse(hello_args, request, locations=(\"form\",))",
          "",
          "---------------"
        ],
        "tests/apps/django_app/base/urls.py||tests/apps/django_app/base/urls.py": [
          "File: tests/apps/django_app/base/urls.py -> tests/apps/django_app/base/urls.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: urlpatterns = [",
          "6:     url(r\"^echo$\", views.echo),",
          "7:     url(r\"^echo_query$\", views.echo_query),",
          "8:     url(r\"^echo_use_args$\", views.echo_use_args),",
          "9:     url(r\"^echo_use_kwargs$\", views.echo_use_kwargs),",
          "10:     url(r\"^echo_multi$\", views.echo_multi),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:     url(r\"^echo_json$\", views.echo_json),",
          "9:     url(r\"^echo_form$\", views.echo_form),",
          "",
          "---------------"
        ],
        "tests/apps/django_app/echo/views.py||tests/apps/django_app/echo/views.py": [
          "File: tests/apps/django_app/echo/views.py -> tests/apps/django_app/echo/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     return json_response(parser.parse(hello_args, request, locations=(\"query\",)))",
          "40: @use_args(hello_args)",
          "41: def echo_use_args(request, args):",
          "42:     return json_response(args)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: def echo_json(request):",
          "41:     return json_response(parser.parse(hello_args, request, locations=(\"json\",)))",
          "44: def echo_form(request):",
          "45:     return json_response(parser.parse(hello_args, request, locations=(\"form\",)))",
          "",
          "---------------"
        ],
        "tests/apps/falcon_app.py||tests/apps/falcon_app.py": [
          "File: tests/apps/falcon_app.py -> tests/apps/falcon_app.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:         resp.body = json.dumps(parsed)",
          "40: class EchoUseArgs(object):",
          "41:     @use_args(hello_args)",
          "42:     def on_get(self, req, resp, args):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: class EchoJSON(object):",
          "41:     def on_post(self, req, resp):",
          "42:         parsed = parser.parse(hello_args, req, locations=(\"json\",))",
          "43:         resp.body = json.dumps(parsed)",
          "46: class EchoForm(object):",
          "47:     def on_post(self, req, resp):",
          "48:         parsed = parser.parse(hello_args, req, locations=(\"form\",))",
          "49:         resp.body = json.dumps(parsed)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:     app = falcon.API()",
          "145:     app.add_route(\"/echo\", Echo())",
          "146:     app.add_route(\"/echo_query\", EchoQuery())",
          "147:     app.add_route(\"/echo_use_args\", EchoUseArgs())",
          "148:     app.add_route(\"/echo_use_kwargs\", EchoUseKwargs())",
          "149:     app.add_route(\"/echo_use_args_validated\", EchoUseArgsValidated())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:     app.add_route(\"/echo_json\", EchoJSON())",
          "160:     app.add_route(\"/echo_form\", EchoForm())",
          "",
          "---------------"
        ],
        "tests/apps/flask_app.py||tests/apps/flask_app.py": [
          "File: tests/apps/flask_app.py -> tests/apps/flask_app.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     return J(parser.parse(hello_args, request, locations=(\"query\",)))",
          "40: @app.route(\"/echo_use_args\", methods=[\"GET\", \"POST\"])",
          "41: @use_args(hello_args)",
          "42: def echo_use_args(args):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: @app.route(\"/echo_json\", methods=[\"POST\"])",
          "41: def echo_json():",
          "42:     return J(parser.parse(hello_args, request, locations=(\"json\",)))",
          "45: @app.route(\"/echo_form\", methods=[\"POST\"])",
          "46: def echo_form():",
          "47:     return J(parser.parse(hello_args, request, locations=(\"form\",)))",
          "",
          "---------------"
        ],
        "tests/apps/pyramid_app.py||tests/apps/pyramid_app.py": [
          "File: tests/apps/pyramid_app.py -> tests/apps/pyramid_app.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:     return parser.parse(hello_args, request, locations=(\"query\",))",
          "37: @use_args(hello_args)",
          "38: def echo_use_args(request, args):",
          "39:     return args",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: def echo_json(request):",
          "38:     return parser.parse(hello_args, request, locations=(\"json\",))",
          "41: def echo_form(request):",
          "42:     return parser.parse(hello_args, request, locations=(\"form\",))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129:     add_route(config, \"/echo\", echo)",
          "130:     add_route(config, \"/echo_query\", echo_query)",
          "131:     add_route(config, \"/echo_use_args\", echo_use_args)",
          "132:     add_route(config, \"/echo_use_args_validated\", echo_use_args_validated)",
          "133:     add_route(config, \"/echo_use_kwargs\", echo_use_kwargs)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139:     add_route(config, \"/echo_json\", echo_json)",
          "140:     add_route(config, \"/echo_form\", echo_form)",
          "",
          "---------------"
        ],
        "tests/test_webapp2parser.py||tests/test_webapp2parser.py": [
          "File: tests/test_webapp2parser.py -> tests/test_webapp2parser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     assert parser.parse(hello_args, req=request) == expected",
          "64: def test_parse_invalid_json():",
          "65:     request = webapp2.Request.blank(",
          "66:         \"/echo\", POST='{\"foo\": \"bar\", }', headers={\"content-type\": \"application/json\"}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64: def test_parse_json_content_type_mismatch():",
          "65:     request = webapp2.Request.blank(",
          "66:         \"/echo_json\",",
          "67:         POST=json.dumps({\"name\": \"foo\"}),",
          "68:         headers={\"content-type\": \"application/x-www-form-urlencoded\"},",
          "69:     )",
          "70:     assert parser.parse(hello_args, req=request) == {\"name\": \"World\"}",
          "",
          "---------------"
        ]
      }
    }
  ]
}