{
  "cve_id": "CVE-2023-42780",
  "cve_desc": "Apache Airflow, versions prior to 2.7.2, contains a security vulnerability that allows authenticated users of Airflow to list warnings for all DAGs, even if the user had no permission to see those DAGs. It would reveal the dag_ids and the stack-traces of import errors for those DAGs with import errors.\nUsers of Apache Airflow are advised to upgrade to version 2.7.2 or newer to mitigate the risk associated with this vulnerability.\n\n",
  "repo": "apache/airflow",
  "patch_hash": "cf4eb3fb9b5cf4a8369b890e39523d4c05eed161",
  "patch_info": {
    "commit_hash": "cf4eb3fb9b5cf4a8369b890e39523d4c05eed161",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/cf4eb3fb9b5cf4a8369b890e39523d4c05eed161",
    "files": [
      "airflow/api_connexion/endpoints/dag_warning_endpoint.py",
      "tests/api_connexion/endpoints/test_dag_warning_endpoint.py"
    ],
    "message": "Fix dag warning endpoint permissions (#34355)\n\n* Fix dag warning endpoint permissions\n\n* update the query to have an accurate result for total entries and pagination\n\n* add unit tests\n\n* Update test_dag_warning_endpoint.py\n\nCo-authored-by: Tzu-ping Chung <uranusjr@gmail.com>\n\n---------\n\nCo-authored-by: Tzu-ping Chung <uranusjr@gmail.com>\n(cherry picked from commit 3570bbfbea69e2965f91b9964ce28bc268c68129)",
    "before_after_code_files": [
      "airflow/api_connexion/endpoints/dag_warning_endpoint.py||airflow/api_connexion/endpoints/dag_warning_endpoint.py",
      "tests/api_connexion/endpoints/test_dag_warning_endpoint.py||tests/api_connexion/endpoints/test_dag_warning_endpoint.py"
    ]
  },
  "patch_diff": {
    "airflow/api_connexion/endpoints/dag_warning_endpoint.py||airflow/api_connexion/endpoints/dag_warning_endpoint.py": [
      "File: airflow/api_connexion/endpoints/dag_warning_endpoint.py -> airflow/api_connexion/endpoints/dag_warning_endpoint.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: # under the License.",
      "17: from __future__ import annotations",
      "19: from sqlalchemy import select",
      "20: from sqlalchemy.orm import Session",
      "22: from airflow.api_connexion import security",
      "23: from airflow.api_connexion.parameters import apply_sorting, check_limit, format_parameters",
      "24: from airflow.api_connexion.schemas.dag_warning_schema import (",
      "25:     DagWarningCollection,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: from flask import g",
      "24: from airflow.api_connexion.exceptions import PermissionDenied",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "28: from airflow.api_connexion.types import APIResponse",
      "29: from airflow.models.dagwarning import DagWarning as DagWarningModel",
      "30: from airflow.security import permissions",
      "31: from airflow.utils.db import get_query_count",
      "32: from airflow.utils.session import NEW_SESSION, provide_session",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: from airflow.utils.airflow_flask_app import get_airflow_app",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "52:     allowed_filter_attrs = [\"dag_id\", \"warning_type\", \"message\", \"timestamp\"]",
      "53:     query = select(DagWarningModel)",
      "54:     if dag_id:",
      "55:         query = query.where(DagWarningModel.dag_id == dag_id)",
      "56:     if warning_type:",
      "57:         query = query.where(DagWarningModel.warning_type == warning_type)",
      "58:     total_entries = get_query_count(query, session=session)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "58:         if not get_airflow_app().appbuilder.sm.can_read_dag(dag_id, g.user):",
      "59:             raise PermissionDenied(detail=f\"User not allowed to access this DAG: {dag_id}\")",
      "61:     else:",
      "62:         readable_dags = get_airflow_app().appbuilder.sm.get_accessible_dag_ids(g.user)",
      "63:         query = query.where(DagWarningModel.dag_id.in_(readable_dags))",
      "",
      "---------------"
    ],
    "tests/api_connexion/endpoints/test_dag_warning_endpoint.py||tests/api_connexion/endpoints/test_dag_warning_endpoint.py": [
      "File: tests/api_connexion/endpoints/test_dag_warning_endpoint.py -> tests/api_connexion/endpoints/test_dag_warning_endpoint.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "35:         app,  # type:ignore",
      "36:         username=\"test\",",
      "37:         role_name=\"Test\",",
      "39:     )",
      "40:     create_user(app, username=\"test_no_permissions\", role_name=\"TestNoPermissions\")  # type: ignore",
      "42:     yield minimal_app_for_api",
      "44:     delete_user(app, username=\"test\")  # type: ignore",
      "45:     delete_user(app, username=\"test_no_permissions\")  # type: ignore",
      "48: class TestBaseDagWarning:",
      "",
      "[Removed Lines]",
      "38:         permissions=[(permissions.ACTION_CAN_READ, permissions.RESOURCE_DAG_WARNING)],  # type: ignore",
      "",
      "[Added Lines]",
      "38:         permissions=[",
      "39:             (permissions.ACTION_CAN_READ, permissions.RESOURCE_DAG_WARNING),",
      "40:             (permissions.ACTION_CAN_READ, permissions.RESOURCE_DAG),",
      "41:         ],  # type: ignore",
      "44:     create_user(",
      "45:         app,  # type:ignore",
      "46:         username=\"test_with_dag2_read\",",
      "47:         role_name=\"TestWithDag2Read\",",
      "48:         permissions=[",
      "49:             (permissions.ACTION_CAN_READ, permissions.RESOURCE_DAG_WARNING),",
      "50:             (permissions.ACTION_CAN_READ, f\"{permissions.RESOURCE_DAG_PREFIX}dag2\"),",
      "51:         ],  # type: ignore",
      "52:     )",
      "58:     delete_user(app, username=\"test_with_dag2_read\")  # type: ignore",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "147:             \"/api/v1/dagWarnings\", environ_overrides={\"REMOTE_USER\": \"test_no_permissions\"}",
      "148:         )",
      "149:         assert response.status_code == 403",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "164:     def test_should_raise_403_forbidden_when_user_has_no_dag_read_permission(self):",
      "165:         response = self.client.get(",
      "166:             \"/api/v1/dagWarnings\",",
      "167:             environ_overrides={\"REMOTE_USER\": \"test_with_dag2_read\"},",
      "168:             query_string={\"dag_id\": \"dag1\"},",
      "169:         )",
      "170:         assert response.status_code == 403",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3570bbfbea69e2965f91b9964ce28bc268c68129",
      "candidate_info": {
        "commit_hash": "3570bbfbea69e2965f91b9964ce28bc268c68129",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/3570bbfbea69e2965f91b9964ce28bc268c68129",
        "files": [
          "airflow/api_connexion/endpoints/dag_warning_endpoint.py",
          "tests/api_connexion/endpoints/test_dag_warning_endpoint.py"
        ],
        "message": "Fix dag warning endpoint permissions (#34355)\n\n* Fix dag warning endpoint permissions\n\n* update the query to have an accurate result for total entries and pagination\n\n* add unit tests\n\n* Update test_dag_warning_endpoint.py\n\nCo-authored-by: Tzu-ping Chung <uranusjr@gmail.com>\n\n---------\n\nCo-authored-by: Tzu-ping Chung <uranusjr@gmail.com>",
        "before_after_code_files": [
          "airflow/api_connexion/endpoints/dag_warning_endpoint.py||airflow/api_connexion/endpoints/dag_warning_endpoint.py",
          "tests/api_connexion/endpoints/test_dag_warning_endpoint.py||tests/api_connexion/endpoints/test_dag_warning_endpoint.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "airflow/api_connexion/endpoints/dag_warning_endpoint.py||airflow/api_connexion/endpoints/dag_warning_endpoint.py",
            "tests/api_connexion/endpoints/test_dag_warning_endpoint.py||tests/api_connexion/endpoints/test_dag_warning_endpoint.py"
          ],
          "candidate": [
            "airflow/api_connexion/endpoints/dag_warning_endpoint.py||airflow/api_connexion/endpoints/dag_warning_endpoint.py",
            "tests/api_connexion/endpoints/test_dag_warning_endpoint.py||tests/api_connexion/endpoints/test_dag_warning_endpoint.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/api_connexion/endpoints/dag_warning_endpoint.py||airflow/api_connexion/endpoints/dag_warning_endpoint.py": [
          "File: airflow/api_connexion/endpoints/dag_warning_endpoint.py -> airflow/api_connexion/endpoints/dag_warning_endpoint.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: from typing import TYPE_CHECKING",
          "21: from sqlalchemy import select",
          "23: from airflow.api_connexion import security",
          "24: from airflow.api_connexion.parameters import apply_sorting, check_limit, format_parameters",
          "25: from airflow.api_connexion.schemas.dag_warning_schema import (",
          "26:     DagWarningCollection,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: from flask import g",
          "25: from airflow.api_connexion.exceptions import PermissionDenied",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: )",
          "29: from airflow.models.dagwarning import DagWarning as DagWarningModel",
          "30: from airflow.security import permissions",
          "31: from airflow.utils.db import get_query_count",
          "32: from airflow.utils.session import NEW_SESSION, provide_session",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: from airflow.utils.airflow_flask_app import get_airflow_app",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:     allowed_filter_attrs = [\"dag_id\", \"warning_type\", \"message\", \"timestamp\"]",
          "58:     query = select(DagWarningModel)",
          "59:     if dag_id:",
          "60:         query = query.where(DagWarningModel.dag_id == dag_id)",
          "61:     if warning_type:",
          "62:         query = query.where(DagWarningModel.warning_type == warning_type)",
          "63:     total_entries = get_query_count(query, session=session)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:         if not get_airflow_app().appbuilder.sm.can_read_dag(dag_id, g.user):",
          "64:             raise PermissionDenied(detail=f\"User not allowed to access this DAG: {dag_id}\")",
          "66:     else:",
          "67:         readable_dags = get_airflow_app().appbuilder.sm.get_accessible_dag_ids(g.user)",
          "68:         query = query.where(DagWarningModel.dag_id.in_(readable_dags))",
          "",
          "---------------"
        ],
        "tests/api_connexion/endpoints/test_dag_warning_endpoint.py||tests/api_connexion/endpoints/test_dag_warning_endpoint.py": [
          "File: tests/api_connexion/endpoints/test_dag_warning_endpoint.py -> tests/api_connexion/endpoints/test_dag_warning_endpoint.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:         app,  # type:ignore",
          "36:         username=\"test\",",
          "37:         role_name=\"Test\",",
          "39:     )",
          "40:     create_user(app, username=\"test_no_permissions\", role_name=\"TestNoPermissions\")  # type: ignore",
          "42:     yield minimal_app_for_api",
          "44:     delete_user(app, username=\"test\")  # type: ignore",
          "45:     delete_user(app, username=\"test_no_permissions\")  # type: ignore",
          "48: class TestBaseDagWarning:",
          "",
          "[Removed Lines]",
          "38:         permissions=[(permissions.ACTION_CAN_READ, permissions.RESOURCE_DAG_WARNING)],  # type: ignore",
          "",
          "[Added Lines]",
          "38:         permissions=[",
          "39:             (permissions.ACTION_CAN_READ, permissions.RESOURCE_DAG_WARNING),",
          "40:             (permissions.ACTION_CAN_READ, permissions.RESOURCE_DAG),",
          "41:         ],  # type: ignore",
          "44:     create_user(",
          "45:         app,  # type:ignore",
          "46:         username=\"test_with_dag2_read\",",
          "47:         role_name=\"TestWithDag2Read\",",
          "48:         permissions=[",
          "49:             (permissions.ACTION_CAN_READ, permissions.RESOURCE_DAG_WARNING),",
          "50:             (permissions.ACTION_CAN_READ, f\"{permissions.RESOURCE_DAG_PREFIX}dag2\"),",
          "51:         ],  # type: ignore",
          "52:     )",
          "58:     delete_user(app, username=\"test_with_dag2_read\")  # type: ignore",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:             \"/api/v1/dagWarnings\", environ_overrides={\"REMOTE_USER\": \"test_no_permissions\"}",
          "148:         )",
          "149:         assert response.status_code == 403",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:     def test_should_raise_403_forbidden_when_user_has_no_dag_read_permission(self):",
          "165:         response = self.client.get(",
          "166:             \"/api/v1/dagWarnings\",",
          "167:             environ_overrides={\"REMOTE_USER\": \"test_with_dag2_read\"},",
          "168:             query_string={\"dag_id\": \"dag1\"},",
          "169:         )",
          "170:         assert response.status_code == 403",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf8e8b9c8f2819cb7b3cce4a454a7a08a62b26c9",
      "candidate_info": {
        "commit_hash": "cf8e8b9c8f2819cb7b3cce4a454a7a08a62b26c9",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/cf8e8b9c8f2819cb7b3cce4a454a7a08a62b26c9",
        "files": [
          "airflow/contrib/hooks/__init__.py",
          "airflow/contrib/operators/__init__.py",
          "airflow/contrib/secrets/__init__.py",
          "airflow/contrib/sensors/__init__.py",
          "airflow/contrib/task_runner/__init__.py",
          "airflow/contrib/utils/__init__.py",
          "airflow/contrib/utils/log/__init__.py",
          "airflow/operators/__init__.py",
          "airflow/sensors/__init__.py",
          "airflow/utils/log/__init__.py"
        ],
        "message": "Replace single quotes by double quotes in all Airflow modules (#33766)\n\n(cherry picked from commit cfa5477aa4a987f79345c96f5fedc472f14e6f7a)",
        "before_after_code_files": [
          "airflow/contrib/hooks/__init__.py||airflow/contrib/hooks/__init__.py",
          "airflow/contrib/operators/__init__.py||airflow/contrib/operators/__init__.py",
          "airflow/contrib/secrets/__init__.py||airflow/contrib/secrets/__init__.py",
          "airflow/contrib/sensors/__init__.py||airflow/contrib/sensors/__init__.py",
          "airflow/contrib/task_runner/__init__.py||airflow/contrib/task_runner/__init__.py",
          "airflow/contrib/utils/__init__.py||airflow/contrib/utils/__init__.py",
          "airflow/contrib/utils/log/__init__.py||airflow/contrib/utils/log/__init__.py",
          "airflow/operators/__init__.py||airflow/operators/__init__.py",
          "airflow/sensors/__init__.py||airflow/sensors/__init__.py",
          "airflow/utils/log/__init__.py||airflow/utils/log/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/34775"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/contrib/hooks/__init__.py||airflow/contrib/hooks/__init__.py": [
          "File: airflow/contrib/hooks/__init__.py -> airflow/contrib/hooks/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: )",
          "32: __deprecated_classes = {",
          "35:     },",
          "38:     },",
          "41:     },",
          "44:     },",
          "47:     },",
          "53:     },",
          "56:     },",
          "59:     },",
          "62:     },",
          "66:     },",
          "70:         ),",
          "71:     },",
          "75:         ),",
          "76:     },",
          "80:         ),",
          "81:     },",
          "114:         ),",
          "117:     },",
          "120:     },",
          "123:     },",
          "127:     },",
          "130:     },",
          "133:     },",
          "136:     },",
          "140:     },",
          "144:     },",
          "147:     },",
          "150:     },",
          "154:     },",
          "158:     },",
          "162:     },",
          "166:     },",
          "170:     },",
          "174:     },",
          "178:     },",
          "181:     },",
          "185:         ),",
          "186:     },",
          "190:     },",
          "194:     },",
          "198:     },",
          "204:     },",
          "207:     },",
          "211:     },",
          "215:         ),",
          "218:         ),",
          "219:     },",
          "222:     },",
          "226:         ),",
          "227:     },",
          "230:     },",
          "234:     },",
          "237:     },",
          "240:     },",
          "245:     },",
          "248:     },",
          "251:     },",
          "254:     },",
          "259:     },",
          "262:     },",
          "265:     },",
          "269:     },",
          "272:     },",
          "275:     },",
          "278:     },",
          "281:     },",
          "289:         ),",
          "292:         ),",
          "293:     },",
          "297:     },",
          "301:     },",
          "304:     },",
          "307:     },",
          "310:     },",
          "313:     },",
          "316:     },",
          "319:     },",
          "322:     },",
          "325:     },",
          "328:     },",
          "331:     },",
          "334:     },",
          "335: }",
          "",
          "[Removed Lines]",
          "33:     'aws_athena_hook': {",
          "34:         'AWSAthenaHook': 'airflow.providers.amazon.aws.hooks.athena.AthenaHook',",
          "36:     'aws_datasync_hook': {",
          "37:         'AWSDataSyncHook': 'airflow.providers.amazon.aws.hooks.datasync.DataSyncHook',",
          "39:     'aws_dynamodb_hook': {",
          "40:         'AwsDynamoDBHook': 'airflow.providers.amazon.aws.hooks.dynamodb.DynamoDBHook',",
          "42:     'aws_firehose_hook': {",
          "43:         'FirehoseHook': 'airflow.providers.amazon.aws.hooks.kinesis.FirehoseHook',",
          "45:     'aws_glue_catalog_hook': {",
          "46:         'AwsGlueCatalogHook': 'airflow.providers.amazon.aws.hooks.glue_catalog.GlueCatalogHook',",
          "48:     'aws_hook': {",
          "49:         'AwsBaseHook': 'airflow.providers.amazon.aws.hooks.base_aws.AwsBaseHook',",
          "50:         '_parse_s3_config': 'airflow.providers.amazon.aws.hooks.base_aws._parse_s3_config',",
          "51:         'boto3': 'airflow.providers.amazon.aws.hooks.base_aws.boto3',",
          "52:         'AwsHook': 'airflow.providers.amazon.aws.hooks.base_aws.AwsBaseHook',",
          "54:     'aws_lambda_hook': {",
          "55:         'AwsLambdaHook': 'airflow.providers.amazon.aws.hooks.lambda_function.LambdaHook',",
          "57:     'aws_logs_hook': {",
          "58:         'AwsLogsHook': 'airflow.providers.amazon.aws.hooks.logs.AwsLogsHook',",
          "60:     'aws_sns_hook': {",
          "61:         'AwsSnsHook': 'airflow.providers.amazon.aws.hooks.sns.SnsHook',",
          "63:     'aws_sqs_hook': {",
          "64:         'SqsHook': 'airflow.providers.amazon.aws.hooks.sqs.SqsHook',",
          "65:         'SQSHook': 'airflow.providers.amazon.aws.hooks.sqs.SqsHook',",
          "67:     'azure_container_instance_hook': {",
          "68:         'AzureContainerInstanceHook': (",
          "69:             'airflow.providers.microsoft.azure.hooks.container_instance.AzureContainerInstanceHook'",
          "72:     'azure_container_registry_hook': {",
          "73:         'AzureContainerRegistryHook': (",
          "74:             'airflow.providers.microsoft.azure.hooks.container_registry.AzureContainerRegistryHook'",
          "77:     'azure_container_volume_hook': {",
          "78:         'AzureContainerVolumeHook': (",
          "79:             'airflow.providers.microsoft.azure.hooks.container_volume.AzureContainerVolumeHook'",
          "82:     'azure_cosmos_hook': {",
          "83:         'AzureCosmosDBHook': 'airflow.providers.microsoft.azure.hooks.cosmos.AzureCosmosDBHook',",
          "84:     },",
          "85:     'azure_data_lake_hook': {",
          "86:         'AzureDataLakeHook': 'airflow.providers.microsoft.azure.hooks.data_lake.AzureDataLakeHook',",
          "87:     },",
          "88:     'azure_fileshare_hook': {",
          "89:         'AzureFileShareHook': 'airflow.providers.microsoft.azure.hooks.fileshare.AzureFileShareHook',",
          "90:     },",
          "91:     'bigquery_hook': {",
          "92:         'BigQueryBaseCursor': 'airflow.providers.google.cloud.hooks.bigquery.BigQueryBaseCursor',",
          "93:         'BigQueryConnection': 'airflow.providers.google.cloud.hooks.bigquery.BigQueryConnection',",
          "94:         'BigQueryCursor': 'airflow.providers.google.cloud.hooks.bigquery.BigQueryCursor',",
          "95:         'BigQueryHook': 'airflow.providers.google.cloud.hooks.bigquery.BigQueryHook',",
          "96:         'GbqConnector': 'airflow.providers.google.cloud.hooks.bigquery.GbqConnector',",
          "97:     },",
          "98:     'cassandra_hook': {",
          "99:         'CassandraHook': 'airflow.providers.apache.cassandra.hooks.cassandra.CassandraHook',",
          "100:     },",
          "101:     'cloudant_hook': {",
          "102:         'CloudantHook': 'airflow.providers.cloudant.hooks.cloudant.CloudantHook',",
          "103:     },",
          "104:     'databricks_hook': {",
          "105:         'CANCEL_RUN_ENDPOINT': 'airflow.providers.databricks.hooks.databricks.CANCEL_RUN_ENDPOINT',",
          "106:         'GET_RUN_ENDPOINT': 'airflow.providers.databricks.hooks.databricks.GET_RUN_ENDPOINT',",
          "107:         'RESTART_CLUSTER_ENDPOINT': 'airflow.providers.databricks.hooks.databricks.RESTART_CLUSTER_ENDPOINT',",
          "108:         'RUN_LIFE_CYCLE_STATES': 'airflow.providers.databricks.hooks.databricks.RUN_LIFE_CYCLE_STATES',",
          "109:         'RUN_NOW_ENDPOINT': 'airflow.providers.databricks.hooks.databricks.RUN_NOW_ENDPOINT',",
          "110:         'START_CLUSTER_ENDPOINT': 'airflow.providers.databricks.hooks.databricks.START_CLUSTER_ENDPOINT',",
          "111:         'SUBMIT_RUN_ENDPOINT': 'airflow.providers.databricks.hooks.databricks.SUBMIT_RUN_ENDPOINT',",
          "112:         'TERMINATE_CLUSTER_ENDPOINT': (",
          "113:             'airflow.providers.databricks.hooks.databricks.TERMINATE_CLUSTER_ENDPOINT'",
          "115:         'DatabricksHook': 'airflow.providers.databricks.hooks.databricks.DatabricksHook',",
          "116:         'RunState': 'airflow.providers.databricks.hooks.databricks.RunState',",
          "118:     'datadog_hook': {",
          "119:         'DatadogHook': 'airflow.providers.datadog.hooks.datadog.DatadogHook',",
          "121:     'datastore_hook': {",
          "122:         'DatastoreHook': 'airflow.providers.google.cloud.hooks.datastore.DatastoreHook',",
          "124:     'dingding_hook': {",
          "125:         'DingdingHook': 'airflow.providers.dingding.hooks.dingding.DingdingHook',",
          "126:         'requests': 'airflow.providers.dingding.hooks.dingding.requests',",
          "128:     'discord_webhook_hook': {",
          "129:         'DiscordWebhookHook': 'airflow.providers.discord.hooks.discord_webhook.DiscordWebhookHook',",
          "131:     'emr_hook': {",
          "132:         'EmrHook': 'airflow.providers.amazon.aws.hooks.emr.EmrHook',",
          "134:     'fs_hook': {",
          "135:         'FSHook': 'airflow.hooks.filesystem.FSHook',",
          "137:     'ftp_hook': {",
          "138:         'FTPHook': 'airflow.providers.ftp.hooks.ftp.FTPHook',",
          "139:         'FTPSHook': 'airflow.providers.ftp.hooks.ftp.FTPSHook',",
          "141:     'gcp_api_base_hook': {",
          "142:         'GoogleBaseHook': 'airflow.providers.google.common.hooks.base_google.GoogleBaseHook',",
          "143:         'GoogleCloudBaseHook': 'airflow.providers.google.common.hooks.base_google.GoogleBaseHook',",
          "145:     'gcp_bigtable_hook': {",
          "146:         'BigtableHook': 'airflow.providers.google.cloud.hooks.bigtable.BigtableHook',",
          "148:     'gcp_cloud_build_hook': {",
          "149:         'CloudBuildHook': 'airflow.providers.google.cloud.hooks.cloud_build.CloudBuildHook',",
          "151:     'gcp_compute_hook': {",
          "152:         'ComputeEngineHook': 'airflow.providers.google.cloud.hooks.compute.ComputeEngineHook',",
          "153:         'GceHook': 'airflow.providers.google.cloud.hooks.compute.ComputeEngineHook',",
          "155:     'gcp_container_hook': {",
          "156:         'GKEHook': 'airflow.providers.google.cloud.hooks.kubernetes_engine.GKEHook',",
          "157:         'GKEClusterHook': 'airflow.providers.google.cloud.hooks.kubernetes_engine.GKEHook',",
          "159:     'gcp_dataflow_hook': {",
          "160:         'DataflowHook': 'airflow.providers.google.cloud.hooks.dataflow.DataflowHook',",
          "161:         'DataFlowHook': 'airflow.providers.google.cloud.hooks.dataflow.DataflowHook',",
          "163:     'gcp_dataproc_hook': {",
          "164:         'DataprocHook': 'airflow.providers.google.cloud.hooks.dataproc.DataprocHook',",
          "165:         'DataProcHook': 'airflow.providers.google.cloud.hooks.dataproc.DataprocHook',",
          "167:     'gcp_dlp_hook': {",
          "168:         'CloudDLPHook': 'airflow.providers.google.cloud.hooks.dlp.CloudDLPHook',",
          "169:         'DlpJob': 'airflow.providers.google.cloud.hooks.dlp.DlpJob',",
          "171:     'gcp_function_hook': {",
          "172:         'CloudFunctionsHook': 'airflow.providers.google.cloud.hooks.functions.CloudFunctionsHook',",
          "173:         'GcfHook': 'airflow.providers.google.cloud.hooks.functions.CloudFunctionsHook',",
          "175:     'gcp_kms_hook': {",
          "176:         'CloudKMSHook': 'airflow.providers.google.cloud.hooks.kms.CloudKMSHook',",
          "177:         'GoogleCloudKMSHook': 'airflow.providers.google.cloud.hooks.kms.CloudKMSHook',",
          "179:     'gcp_mlengine_hook': {",
          "180:         'MLEngineHook': 'airflow.providers.google.cloud.hooks.mlengine.MLEngineHook',",
          "182:     'gcp_natural_language_hook': {",
          "183:         'CloudNaturalLanguageHook': (",
          "184:             'airflow.providers.google.cloud.hooks.natural_language.CloudNaturalLanguageHook'",
          "187:     'gcp_pubsub_hook': {",
          "188:         'PubSubException': 'airflow.providers.google.cloud.hooks.pubsub.PubSubException',",
          "189:         'PubSubHook': 'airflow.providers.google.cloud.hooks.pubsub.PubSubHook',",
          "191:     'gcp_spanner_hook': {",
          "192:         'SpannerHook': 'airflow.providers.google.cloud.hooks.spanner.SpannerHook',",
          "193:         'CloudSpannerHook': 'airflow.providers.google.cloud.hooks.spanner.SpannerHook',",
          "195:     'gcp_speech_to_text_hook': {",
          "196:         'CloudSpeechToTextHook': 'airflow.providers.google.cloud.hooks.speech_to_text.CloudSpeechToTextHook',",
          "197:         'GCPSpeechToTextHook': 'airflow.providers.google.cloud.hooks.speech_to_text.CloudSpeechToTextHook',",
          "199:     'gcp_sql_hook': {",
          "200:         'CloudSQLDatabaseHook': 'airflow.providers.google.cloud.hooks.cloud_sql.CloudSQLDatabaseHook',",
          "201:         'CloudSQLHook': 'airflow.providers.google.cloud.hooks.cloud_sql.CloudSQLHook',",
          "202:         'CloudSqlDatabaseHook': 'airflow.providers.google.cloud.hooks.cloud_sql.CloudSQLDatabaseHook',",
          "203:         'CloudSqlHook': 'airflow.providers.google.cloud.hooks.cloud_sql.CloudSQLHook',",
          "205:     'gcp_tasks_hook': {",
          "206:         'CloudTasksHook': 'airflow.providers.google.cloud.hooks.tasks.CloudTasksHook',",
          "208:     'gcp_text_to_speech_hook': {",
          "209:         'CloudTextToSpeechHook': 'airflow.providers.google.cloud.hooks.text_to_speech.CloudTextToSpeechHook',",
          "210:         'GCPTextToSpeechHook': 'airflow.providers.google.cloud.hooks.text_to_speech.CloudTextToSpeechHook',",
          "212:     'gcp_transfer_hook': {",
          "213:         'CloudDataTransferServiceHook': (",
          "214:             'airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.CloudDataTransferServiceHook'",
          "216:         'GCPTransferServiceHook': (",
          "217:             'airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.CloudDataTransferServiceHook'",
          "220:     'gcp_translate_hook': {",
          "221:         'CloudTranslateHook': 'airflow.providers.google.cloud.hooks.translate.CloudTranslateHook',",
          "223:     'gcp_video_intelligence_hook': {",
          "224:         'CloudVideoIntelligenceHook': (",
          "225:             'airflow.providers.google.cloud.hooks.video_intelligence.CloudVideoIntelligenceHook'",
          "228:     'gcp_vision_hook': {",
          "229:         'CloudVisionHook': 'airflow.providers.google.cloud.hooks.vision.CloudVisionHook',",
          "231:     'gcs_hook': {",
          "232:         'GCSHook': 'airflow.providers.google.cloud.hooks.gcs.GCSHook',",
          "233:         'GoogleCloudStorageHook': 'airflow.providers.google.cloud.hooks.gcs.GCSHook',",
          "235:     'gdrive_hook': {",
          "236:         'GoogleDriveHook': 'airflow.providers.google.suite.hooks.drive.GoogleDriveHook',",
          "238:     'grpc_hook': {",
          "239:         'GrpcHook': 'airflow.providers.grpc.hooks.grpc.GrpcHook',",
          "241:     'imap_hook': {",
          "242:         'ImapHook': 'airflow.providers.imap.hooks.imap.ImapHook',",
          "243:         'Mail': 'airflow.providers.imap.hooks.imap.Mail',",
          "244:         'MailPart': 'airflow.providers.imap.hooks.imap.MailPart',",
          "246:     'jenkins_hook': {",
          "247:         'JenkinsHook': 'airflow.providers.jenkins.hooks.jenkins.JenkinsHook',",
          "249:     'jira_hook': {",
          "250:         'JiraHook': 'airflow.providers.atlassian.jira.hooks.jira.JiraHook',",
          "252:     'mongo_hook': {",
          "253:         'MongoHook': 'airflow.providers.mongo.hooks.mongo.MongoHook',",
          "255:     'openfaas_hook': {",
          "256:         'OK_STATUS_CODE': 'airflow.providers.openfaas.hooks.openfaas.OK_STATUS_CODE',",
          "257:         'OpenFaasHook': 'airflow.providers.openfaas.hooks.openfaas.OpenFaasHook',",
          "258:         'requests': 'airflow.providers.openfaas.hooks.openfaas.requests',",
          "260:     'opsgenie_alert_hook': {",
          "261:         'OpsgenieAlertHook': 'airflow.providers.opsgenie.hooks.opsgenie.OpsgenieAlertHook',",
          "263:     'pagerduty_hook': {",
          "264:         'PagerdutyHook': 'airflow.providers.pagerduty.hooks.pagerduty.PagerdutyHook',",
          "266:     'pinot_hook': {",
          "267:         'PinotAdminHook': 'airflow.providers.apache.pinot.hooks.pinot.PinotAdminHook',",
          "268:         'PinotDbApiHook': 'airflow.providers.apache.pinot.hooks.pinot.PinotDbApiHook',",
          "270:     'qubole_check_hook': {",
          "271:         'QuboleCheckHook': 'airflow.providers.qubole.hooks.qubole_check.QuboleCheckHook',",
          "273:     'qubole_hook': {",
          "274:         'QuboleHook': 'airflow.providers.qubole.hooks.qubole.QuboleHook',",
          "276:     'redis_hook': {",
          "277:         'RedisHook': 'airflow.providers.redis.hooks.redis.RedisHook',",
          "279:     'redshift_hook': {",
          "280:         'RedshiftHook': 'airflow.providers.amazon.aws.hooks.redshift_cluster.RedshiftHook',",
          "282:     'sagemaker_hook': {",
          "283:         'LogState': 'airflow.providers.amazon.aws.hooks.sagemaker.LogState',",
          "284:         'Position': 'airflow.providers.amazon.aws.hooks.sagemaker.Position',",
          "285:         'SageMakerHook': 'airflow.providers.amazon.aws.hooks.sagemaker.SageMakerHook',",
          "286:         'argmin': 'airflow.providers.amazon.aws.hooks.sagemaker.argmin',",
          "287:         'secondary_training_status_changed': (",
          "288:             'airflow.providers.amazon.aws.hooks.sagemaker.secondary_training_status_changed'",
          "290:         'secondary_training_status_message': (",
          "291:             'airflow.providers.amazon.aws.hooks.sagemaker.secondary_training_status_message'",
          "294:     'salesforce_hook': {",
          "295:         'SalesforceHook': 'airflow.providers.salesforce.hooks.salesforce.SalesforceHook',",
          "296:         'pd': 'airflow.providers.salesforce.hooks.salesforce.pd',",
          "298:     'segment_hook': {",
          "299:         'SegmentHook': 'airflow.providers.segment.hooks.segment.SegmentHook',",
          "300:         'analytics': 'airflow.providers.segment.hooks.segment.analytics',",
          "302:     'sftp_hook': {",
          "303:         'SFTPHook': 'airflow.providers.sftp.hooks.sftp.SFTPHook',",
          "305:     'slack_webhook_hook': {",
          "306:         'SlackWebhookHook': 'airflow.providers.slack.hooks.slack_webhook.SlackWebhookHook',",
          "308:     'snowflake_hook': {",
          "309:         'SnowflakeHook': 'airflow.providers.snowflake.hooks.snowflake.SnowflakeHook',",
          "311:     'spark_jdbc_hook': {",
          "312:         'SparkJDBCHook': 'airflow.providers.apache.spark.hooks.spark_jdbc.SparkJDBCHook',",
          "314:     'spark_sql_hook': {",
          "315:         'SparkSqlHook': 'airflow.providers.apache.spark.hooks.spark_sql.SparkSqlHook',",
          "317:     'spark_submit_hook': {",
          "318:         'SparkSubmitHook': 'airflow.providers.apache.spark.hooks.spark_submit.SparkSubmitHook',",
          "320:     'sqoop_hook': {",
          "321:         'SqoopHook': 'airflow.providers.apache.sqoop.hooks.sqoop.SqoopHook',",
          "323:     'ssh_hook': {",
          "324:         'SSHHook': 'airflow.providers.ssh.hooks.ssh.SSHHook',",
          "326:     'vertica_hook': {",
          "327:         'VerticaHook': 'airflow.providers.vertica.hooks.vertica.VerticaHook',",
          "329:     'wasb_hook': {",
          "330:         'WasbHook': 'airflow.providers.microsoft.azure.hooks.wasb.WasbHook',",
          "332:     'winrm_hook': {",
          "333:         'WinRMHook': 'airflow.providers.microsoft.winrm.hooks.winrm.WinRMHook',",
          "",
          "[Added Lines]",
          "33:     \"aws_athena_hook\": {",
          "34:         \"AWSAthenaHook\": \"airflow.providers.amazon.aws.hooks.athena.AthenaHook\",",
          "36:     \"aws_datasync_hook\": {",
          "37:         \"AWSDataSyncHook\": \"airflow.providers.amazon.aws.hooks.datasync.DataSyncHook\",",
          "39:     \"aws_dynamodb_hook\": {",
          "40:         \"AwsDynamoDBHook\": \"airflow.providers.amazon.aws.hooks.dynamodb.DynamoDBHook\",",
          "42:     \"aws_firehose_hook\": {",
          "43:         \"FirehoseHook\": \"airflow.providers.amazon.aws.hooks.kinesis.FirehoseHook\",",
          "45:     \"aws_glue_catalog_hook\": {",
          "46:         \"AwsGlueCatalogHook\": \"airflow.providers.amazon.aws.hooks.glue_catalog.GlueCatalogHook\",",
          "48:     \"aws_hook\": {",
          "49:         \"AwsBaseHook\": \"airflow.providers.amazon.aws.hooks.base_aws.AwsBaseHook\",",
          "50:         \"_parse_s3_config\": \"airflow.providers.amazon.aws.hooks.base_aws._parse_s3_config\",",
          "51:         \"boto3\": \"airflow.providers.amazon.aws.hooks.base_aws.boto3\",",
          "52:         \"AwsHook\": \"airflow.providers.amazon.aws.hooks.base_aws.AwsBaseHook\",",
          "54:     \"aws_lambda_hook\": {",
          "55:         \"AwsLambdaHook\": \"airflow.providers.amazon.aws.hooks.lambda_function.LambdaHook\",",
          "57:     \"aws_logs_hook\": {",
          "58:         \"AwsLogsHook\": \"airflow.providers.amazon.aws.hooks.logs.AwsLogsHook\",",
          "60:     \"aws_sns_hook\": {",
          "61:         \"AwsSnsHook\": \"airflow.providers.amazon.aws.hooks.sns.SnsHook\",",
          "63:     \"aws_sqs_hook\": {",
          "64:         \"SqsHook\": \"airflow.providers.amazon.aws.hooks.sqs.SqsHook\",",
          "65:         \"SQSHook\": \"airflow.providers.amazon.aws.hooks.sqs.SqsHook\",",
          "67:     \"azure_container_instance_hook\": {",
          "68:         \"AzureContainerInstanceHook\": (",
          "69:             \"airflow.providers.microsoft.azure.hooks.container_instance.AzureContainerInstanceHook\"",
          "72:     \"azure_container_registry_hook\": {",
          "73:         \"AzureContainerRegistryHook\": (",
          "74:             \"airflow.providers.microsoft.azure.hooks.container_registry.AzureContainerRegistryHook\"",
          "77:     \"azure_container_volume_hook\": {",
          "78:         \"AzureContainerVolumeHook\": (",
          "79:             \"airflow.providers.microsoft.azure.hooks.container_volume.AzureContainerVolumeHook\"",
          "82:     \"azure_cosmos_hook\": {",
          "83:         \"AzureCosmosDBHook\": \"airflow.providers.microsoft.azure.hooks.cosmos.AzureCosmosDBHook\",",
          "84:     },",
          "85:     \"azure_data_lake_hook\": {",
          "86:         \"AzureDataLakeHook\": \"airflow.providers.microsoft.azure.hooks.data_lake.AzureDataLakeHook\",",
          "87:     },",
          "88:     \"azure_fileshare_hook\": {",
          "89:         \"AzureFileShareHook\": \"airflow.providers.microsoft.azure.hooks.fileshare.AzureFileShareHook\",",
          "90:     },",
          "91:     \"bigquery_hook\": {",
          "92:         \"BigQueryBaseCursor\": \"airflow.providers.google.cloud.hooks.bigquery.BigQueryBaseCursor\",",
          "93:         \"BigQueryConnection\": \"airflow.providers.google.cloud.hooks.bigquery.BigQueryConnection\",",
          "94:         \"BigQueryCursor\": \"airflow.providers.google.cloud.hooks.bigquery.BigQueryCursor\",",
          "95:         \"BigQueryHook\": \"airflow.providers.google.cloud.hooks.bigquery.BigQueryHook\",",
          "96:         \"GbqConnector\": \"airflow.providers.google.cloud.hooks.bigquery.GbqConnector\",",
          "97:     },",
          "98:     \"cassandra_hook\": {",
          "99:         \"CassandraHook\": \"airflow.providers.apache.cassandra.hooks.cassandra.CassandraHook\",",
          "100:     },",
          "101:     \"cloudant_hook\": {",
          "102:         \"CloudantHook\": \"airflow.providers.cloudant.hooks.cloudant.CloudantHook\",",
          "103:     },",
          "104:     \"databricks_hook\": {",
          "105:         \"CANCEL_RUN_ENDPOINT\": \"airflow.providers.databricks.hooks.databricks.CANCEL_RUN_ENDPOINT\",",
          "106:         \"GET_RUN_ENDPOINT\": \"airflow.providers.databricks.hooks.databricks.GET_RUN_ENDPOINT\",",
          "107:         \"RESTART_CLUSTER_ENDPOINT\": \"airflow.providers.databricks.hooks.databricks.RESTART_CLUSTER_ENDPOINT\",",
          "108:         \"RUN_LIFE_CYCLE_STATES\": \"airflow.providers.databricks.hooks.databricks.RUN_LIFE_CYCLE_STATES\",",
          "109:         \"RUN_NOW_ENDPOINT\": \"airflow.providers.databricks.hooks.databricks.RUN_NOW_ENDPOINT\",",
          "110:         \"START_CLUSTER_ENDPOINT\": \"airflow.providers.databricks.hooks.databricks.START_CLUSTER_ENDPOINT\",",
          "111:         \"SUBMIT_RUN_ENDPOINT\": \"airflow.providers.databricks.hooks.databricks.SUBMIT_RUN_ENDPOINT\",",
          "112:         \"TERMINATE_CLUSTER_ENDPOINT\": (",
          "113:             \"airflow.providers.databricks.hooks.databricks.TERMINATE_CLUSTER_ENDPOINT\"",
          "115:         \"DatabricksHook\": \"airflow.providers.databricks.hooks.databricks.DatabricksHook\",",
          "116:         \"RunState\": \"airflow.providers.databricks.hooks.databricks.RunState\",",
          "118:     \"datadog_hook\": {",
          "119:         \"DatadogHook\": \"airflow.providers.datadog.hooks.datadog.DatadogHook\",",
          "121:     \"datastore_hook\": {",
          "122:         \"DatastoreHook\": \"airflow.providers.google.cloud.hooks.datastore.DatastoreHook\",",
          "124:     \"dingding_hook\": {",
          "125:         \"DingdingHook\": \"airflow.providers.dingding.hooks.dingding.DingdingHook\",",
          "126:         \"requests\": \"airflow.providers.dingding.hooks.dingding.requests\",",
          "128:     \"discord_webhook_hook\": {",
          "129:         \"DiscordWebhookHook\": \"airflow.providers.discord.hooks.discord_webhook.DiscordWebhookHook\",",
          "131:     \"emr_hook\": {",
          "132:         \"EmrHook\": \"airflow.providers.amazon.aws.hooks.emr.EmrHook\",",
          "134:     \"fs_hook\": {",
          "135:         \"FSHook\": \"airflow.hooks.filesystem.FSHook\",",
          "137:     \"ftp_hook\": {",
          "138:         \"FTPHook\": \"airflow.providers.ftp.hooks.ftp.FTPHook\",",
          "139:         \"FTPSHook\": \"airflow.providers.ftp.hooks.ftp.FTPSHook\",",
          "141:     \"gcp_api_base_hook\": {",
          "142:         \"GoogleBaseHook\": \"airflow.providers.google.common.hooks.base_google.GoogleBaseHook\",",
          "143:         \"GoogleCloudBaseHook\": \"airflow.providers.google.common.hooks.base_google.GoogleBaseHook\",",
          "145:     \"gcp_bigtable_hook\": {",
          "146:         \"BigtableHook\": \"airflow.providers.google.cloud.hooks.bigtable.BigtableHook\",",
          "148:     \"gcp_cloud_build_hook\": {",
          "149:         \"CloudBuildHook\": \"airflow.providers.google.cloud.hooks.cloud_build.CloudBuildHook\",",
          "151:     \"gcp_compute_hook\": {",
          "152:         \"ComputeEngineHook\": \"airflow.providers.google.cloud.hooks.compute.ComputeEngineHook\",",
          "153:         \"GceHook\": \"airflow.providers.google.cloud.hooks.compute.ComputeEngineHook\",",
          "155:     \"gcp_container_hook\": {",
          "156:         \"GKEHook\": \"airflow.providers.google.cloud.hooks.kubernetes_engine.GKEHook\",",
          "157:         \"GKEClusterHook\": \"airflow.providers.google.cloud.hooks.kubernetes_engine.GKEHook\",",
          "159:     \"gcp_dataflow_hook\": {",
          "160:         \"DataflowHook\": \"airflow.providers.google.cloud.hooks.dataflow.DataflowHook\",",
          "161:         \"DataFlowHook\": \"airflow.providers.google.cloud.hooks.dataflow.DataflowHook\",",
          "163:     \"gcp_dataproc_hook\": {",
          "164:         \"DataprocHook\": \"airflow.providers.google.cloud.hooks.dataproc.DataprocHook\",",
          "165:         \"DataProcHook\": \"airflow.providers.google.cloud.hooks.dataproc.DataprocHook\",",
          "167:     \"gcp_dlp_hook\": {",
          "168:         \"CloudDLPHook\": \"airflow.providers.google.cloud.hooks.dlp.CloudDLPHook\",",
          "169:         \"DlpJob\": \"airflow.providers.google.cloud.hooks.dlp.DlpJob\",",
          "171:     \"gcp_function_hook\": {",
          "172:         \"CloudFunctionsHook\": \"airflow.providers.google.cloud.hooks.functions.CloudFunctionsHook\",",
          "173:         \"GcfHook\": \"airflow.providers.google.cloud.hooks.functions.CloudFunctionsHook\",",
          "175:     \"gcp_kms_hook\": {",
          "176:         \"CloudKMSHook\": \"airflow.providers.google.cloud.hooks.kms.CloudKMSHook\",",
          "177:         \"GoogleCloudKMSHook\": \"airflow.providers.google.cloud.hooks.kms.CloudKMSHook\",",
          "179:     \"gcp_mlengine_hook\": {",
          "180:         \"MLEngineHook\": \"airflow.providers.google.cloud.hooks.mlengine.MLEngineHook\",",
          "182:     \"gcp_natural_language_hook\": {",
          "183:         \"CloudNaturalLanguageHook\": (",
          "184:             \"airflow.providers.google.cloud.hooks.natural_language.CloudNaturalLanguageHook\"",
          "187:     \"gcp_pubsub_hook\": {",
          "188:         \"PubSubException\": \"airflow.providers.google.cloud.hooks.pubsub.PubSubException\",",
          "189:         \"PubSubHook\": \"airflow.providers.google.cloud.hooks.pubsub.PubSubHook\",",
          "191:     \"gcp_spanner_hook\": {",
          "192:         \"SpannerHook\": \"airflow.providers.google.cloud.hooks.spanner.SpannerHook\",",
          "193:         \"CloudSpannerHook\": \"airflow.providers.google.cloud.hooks.spanner.SpannerHook\",",
          "195:     \"gcp_speech_to_text_hook\": {",
          "196:         \"CloudSpeechToTextHook\": \"airflow.providers.google.cloud.hooks.speech_to_text.CloudSpeechToTextHook\",",
          "197:         \"GCPSpeechToTextHook\": \"airflow.providers.google.cloud.hooks.speech_to_text.CloudSpeechToTextHook\",",
          "199:     \"gcp_sql_hook\": {",
          "200:         \"CloudSQLDatabaseHook\": \"airflow.providers.google.cloud.hooks.cloud_sql.CloudSQLDatabaseHook\",",
          "201:         \"CloudSQLHook\": \"airflow.providers.google.cloud.hooks.cloud_sql.CloudSQLHook\",",
          "202:         \"CloudSqlDatabaseHook\": \"airflow.providers.google.cloud.hooks.cloud_sql.CloudSQLDatabaseHook\",",
          "203:         \"CloudSqlHook\": \"airflow.providers.google.cloud.hooks.cloud_sql.CloudSQLHook\",",
          "205:     \"gcp_tasks_hook\": {",
          "206:         \"CloudTasksHook\": \"airflow.providers.google.cloud.hooks.tasks.CloudTasksHook\",",
          "208:     \"gcp_text_to_speech_hook\": {",
          "209:         \"CloudTextToSpeechHook\": \"airflow.providers.google.cloud.hooks.text_to_speech.CloudTextToSpeechHook\",",
          "210:         \"GCPTextToSpeechHook\": \"airflow.providers.google.cloud.hooks.text_to_speech.CloudTextToSpeechHook\",",
          "212:     \"gcp_transfer_hook\": {",
          "213:         \"CloudDataTransferServiceHook\": (",
          "214:             \"airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.CloudDataTransferServiceHook\"",
          "216:         \"GCPTransferServiceHook\": (",
          "217:             \"airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.CloudDataTransferServiceHook\"",
          "220:     \"gcp_translate_hook\": {",
          "221:         \"CloudTranslateHook\": \"airflow.providers.google.cloud.hooks.translate.CloudTranslateHook\",",
          "223:     \"gcp_video_intelligence_hook\": {",
          "224:         \"CloudVideoIntelligenceHook\": (",
          "225:             \"airflow.providers.google.cloud.hooks.video_intelligence.CloudVideoIntelligenceHook\"",
          "228:     \"gcp_vision_hook\": {",
          "229:         \"CloudVisionHook\": \"airflow.providers.google.cloud.hooks.vision.CloudVisionHook\",",
          "231:     \"gcs_hook\": {",
          "232:         \"GCSHook\": \"airflow.providers.google.cloud.hooks.gcs.GCSHook\",",
          "233:         \"GoogleCloudStorageHook\": \"airflow.providers.google.cloud.hooks.gcs.GCSHook\",",
          "235:     \"gdrive_hook\": {",
          "236:         \"GoogleDriveHook\": \"airflow.providers.google.suite.hooks.drive.GoogleDriveHook\",",
          "238:     \"grpc_hook\": {",
          "239:         \"GrpcHook\": \"airflow.providers.grpc.hooks.grpc.GrpcHook\",",
          "241:     \"imap_hook\": {",
          "242:         \"ImapHook\": \"airflow.providers.imap.hooks.imap.ImapHook\",",
          "243:         \"Mail\": \"airflow.providers.imap.hooks.imap.Mail\",",
          "244:         \"MailPart\": \"airflow.providers.imap.hooks.imap.MailPart\",",
          "246:     \"jenkins_hook\": {",
          "247:         \"JenkinsHook\": \"airflow.providers.jenkins.hooks.jenkins.JenkinsHook\",",
          "249:     \"jira_hook\": {",
          "250:         \"JiraHook\": \"airflow.providers.atlassian.jira.hooks.jira.JiraHook\",",
          "252:     \"mongo_hook\": {",
          "253:         \"MongoHook\": \"airflow.providers.mongo.hooks.mongo.MongoHook\",",
          "255:     \"openfaas_hook\": {",
          "256:         \"OK_STATUS_CODE\": \"airflow.providers.openfaas.hooks.openfaas.OK_STATUS_CODE\",",
          "257:         \"OpenFaasHook\": \"airflow.providers.openfaas.hooks.openfaas.OpenFaasHook\",",
          "258:         \"requests\": \"airflow.providers.openfaas.hooks.openfaas.requests\",",
          "260:     \"opsgenie_alert_hook\": {",
          "261:         \"OpsgenieAlertHook\": \"airflow.providers.opsgenie.hooks.opsgenie.OpsgenieAlertHook\",",
          "263:     \"pagerduty_hook\": {",
          "264:         \"PagerdutyHook\": \"airflow.providers.pagerduty.hooks.pagerduty.PagerdutyHook\",",
          "266:     \"pinot_hook\": {",
          "267:         \"PinotAdminHook\": \"airflow.providers.apache.pinot.hooks.pinot.PinotAdminHook\",",
          "268:         \"PinotDbApiHook\": \"airflow.providers.apache.pinot.hooks.pinot.PinotDbApiHook\",",
          "270:     \"qubole_check_hook\": {",
          "271:         \"QuboleCheckHook\": \"airflow.providers.qubole.hooks.qubole_check.QuboleCheckHook\",",
          "273:     \"qubole_hook\": {",
          "274:         \"QuboleHook\": \"airflow.providers.qubole.hooks.qubole.QuboleHook\",",
          "276:     \"redis_hook\": {",
          "277:         \"RedisHook\": \"airflow.providers.redis.hooks.redis.RedisHook\",",
          "279:     \"redshift_hook\": {",
          "280:         \"RedshiftHook\": \"airflow.providers.amazon.aws.hooks.redshift_cluster.RedshiftHook\",",
          "282:     \"sagemaker_hook\": {",
          "283:         \"LogState\": \"airflow.providers.amazon.aws.hooks.sagemaker.LogState\",",
          "284:         \"Position\": \"airflow.providers.amazon.aws.hooks.sagemaker.Position\",",
          "285:         \"SageMakerHook\": \"airflow.providers.amazon.aws.hooks.sagemaker.SageMakerHook\",",
          "286:         \"argmin\": \"airflow.providers.amazon.aws.hooks.sagemaker.argmin\",",
          "287:         \"secondary_training_status_changed\": (",
          "288:             \"airflow.providers.amazon.aws.hooks.sagemaker.secondary_training_status_changed\"",
          "290:         \"secondary_training_status_message\": (",
          "291:             \"airflow.providers.amazon.aws.hooks.sagemaker.secondary_training_status_message\"",
          "294:     \"salesforce_hook\": {",
          "295:         \"SalesforceHook\": \"airflow.providers.salesforce.hooks.salesforce.SalesforceHook\",",
          "296:         \"pd\": \"airflow.providers.salesforce.hooks.salesforce.pd\",",
          "298:     \"segment_hook\": {",
          "299:         \"SegmentHook\": \"airflow.providers.segment.hooks.segment.SegmentHook\",",
          "300:         \"analytics\": \"airflow.providers.segment.hooks.segment.analytics\",",
          "302:     \"sftp_hook\": {",
          "303:         \"SFTPHook\": \"airflow.providers.sftp.hooks.sftp.SFTPHook\",",
          "305:     \"slack_webhook_hook\": {",
          "306:         \"SlackWebhookHook\": \"airflow.providers.slack.hooks.slack_webhook.SlackWebhookHook\",",
          "308:     \"snowflake_hook\": {",
          "309:         \"SnowflakeHook\": \"airflow.providers.snowflake.hooks.snowflake.SnowflakeHook\",",
          "311:     \"spark_jdbc_hook\": {",
          "312:         \"SparkJDBCHook\": \"airflow.providers.apache.spark.hooks.spark_jdbc.SparkJDBCHook\",",
          "314:     \"spark_sql_hook\": {",
          "315:         \"SparkSqlHook\": \"airflow.providers.apache.spark.hooks.spark_sql.SparkSqlHook\",",
          "317:     \"spark_submit_hook\": {",
          "318:         \"SparkSubmitHook\": \"airflow.providers.apache.spark.hooks.spark_submit.SparkSubmitHook\",",
          "320:     \"sqoop_hook\": {",
          "321:         \"SqoopHook\": \"airflow.providers.apache.sqoop.hooks.sqoop.SqoopHook\",",
          "323:     \"ssh_hook\": {",
          "324:         \"SSHHook\": \"airflow.providers.ssh.hooks.ssh.SSHHook\",",
          "326:     \"vertica_hook\": {",
          "327:         \"VerticaHook\": \"airflow.providers.vertica.hooks.vertica.VerticaHook\",",
          "329:     \"wasb_hook\": {",
          "330:         \"WasbHook\": \"airflow.providers.microsoft.azure.hooks.wasb.WasbHook\",",
          "332:     \"winrm_hook\": {",
          "333:         \"WinRMHook\": \"airflow.providers.microsoft.winrm.hooks.winrm.WinRMHook\",",
          "",
          "---------------"
        ],
        "airflow/contrib/operators/__init__.py||airflow/contrib/operators/__init__.py": [
          "File: airflow/contrib/operators/__init__.py -> airflow/contrib/operators/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: )",
          "32: __deprecated_classes = {",
          "37:         ),",
          "38:     },",
          "43:         ),",
          "44:     },",
          "47:     },",
          "51:     },",
          "56:     },",
          "60:         ),",
          "61:     },",
          "65:         ),",
          "66:     },",
          "71:         ),",
          "74:         ),",
          "75:     },",
          "79:         ),",
          "80:     },",
          "84:         ),",
          "87:         ),",
          "90:         ),",
          "93:         ),",
          "96:         ),",
          "99:         ),",
          "102:         ),",
          "105:         ),",
          "108:         ),",
          "111:         ),",
          "113:     },",
          "117:         ),",
          "120:         ),",
          "121:     },",
          "125:         ),",
          "126:     },",
          "130:         ),",
          "133:         ),",
          "134:     },",
          "138:         ),",
          "139:     },",
          "143:         ),",
          "146:         ),",
          "147:     },",
          "151:         ),",
          "154:         ),",
          "155:     },",
          "159:         ),",
          "162:         ),",
          "165:         ),",
          "168:         ),",
          "171:         ),",
          "174:         ),",
          "175:     },",
          "179:         ),",
          "182:         ),",
          "188:         ),",
          "191:         ),",
          "194:         ),",
          "197:         ),",
          "200:         ),",
          "203:         ),",
          "206:         ),",
          "209:         ),",
          "212:         ),",
          "215:         ),",
          "218:         ),",
          "221:         ),",
          "224:         ),",
          "227:         ),",
          "230:         ),",
          "233:         ),",
          "236:         ),",
          "239:         ),",
          "242:         ),",
          "248:         ),",
          "249:     },",
          "253:         ),",
          "256:         ),",
          "257:     },",
          "261:         ),",
          "264:         ),",
          "265:     },",
          "268:     },",
          "272:         ),",
          "273:     },",
          "276:     },",
          "279:     },",
          "282:     },",
          "287:     },",
          "291:         ),",
          "294:         ),",
          "295:     },",
          "299:         ),",
          "302:         ),",
          "303:     },",
          "307:         ),",
          "310:         ),",
          "313:         ),",
          "316:         ),",
          "319:         ),",
          "322:         ),",
          "325:         ),",
          "328:         ),",
          "331:         ),",
          "334:         ),",
          "337:         ),",
          "340:         ),",
          "341:     },",
          "345:         ),",
          "346:     },",
          "350:         ),",
          "353:         ),",
          "359:         ),",
          "362:         ),",
          "365:         ),",
          "372:         ),",
          "375:         ),",
          "378:         ),",
          "381:         ),",
          "382:     },",
          "386:         ),",
          "389:         ),",
          "392:         ),",
          "395:         ),",
          "398:         ),",
          "400:     },",
          "404:         ),",
          "407:         ),",
          "410:         ),",
          "413:         ),",
          "416:         ),",
          "419:         ),",
          "422:         ),",
          "425:         ),",
          "428:         ),",
          "431:         ),",
          "434:         ),",
          "437:         ),",
          "440:         ),",
          "444:         ),",
          "447:         ),",
          "450:         ),",
          "453:         ),",
          "456:         ),",
          "459:         ),",
          "462:         ),",
          "465:         ),",
          "468:         ),",
          "471:         ),",
          "474:         ),",
          "477:         ),",
          "480:         ),",
          "483:         ),",
          "486:         ),",
          "489:         ),",
          "492:         ),",
          "496:         ),",
          "499:         ),",
          "500:     },",
          "504:         ),",
          "507:         ),",
          "510:         ),",
          "513:         ),",
          "514:     },",
          "540:     },",
          "544:         ),",
          "547:         ),",
          "550:         ),",
          "553:         ),",
          "556:         ),",
          "559:         ),",
          "562:         ),",
          "565:         ),",
          "568:         ),",
          "571:         ),",
          "574:         ),",
          "577:         ),",
          "578:     },",
          "582:         ),",
          "585:         ),",
          "586:     },",
          "591:         ),",
          "594:         ),",
          "597:         ),",
          "600:         ),",
          "603:         ),",
          "606:         ),",
          "609:         ),",
          "612:         ),",
          "615:         ),",
          "619:         ),",
          "622:         ),",
          "625:         ),",
          "628:         ),",
          "631:         ),",
          "634:         ),",
          "637:         ),",
          "640:         ),",
          "643:         ),",
          "644:     },",
          "648:         ),",
          "807:         ),",
          "810:         ),",
          "813:         ),",
          "816:         ),",
          "819:         ),",
          "822:         ),",
          "825:         ),",
          "828:         ),",
          "831:         ),",
          "834:         ),",
          "837:         ),",
          "840:         ),",
          "843:         ),",
          "846:         ),",
          "849:         ),",
          "852:         ),",
          "855:         ),",
          "858:         ),",
          "861:         ),",
          "862:     },",
          "866:         ),",
          "869:         ),",
          "872:         ),",
          "875:         ),",
          "876:     },",
          "881:         ),",
          "882:     },",
          "886:         ),",
          "889:         ),",
          "890:     },",
          "895:         ),",
          "896:     },",
          "901:         ),",
          "902:     },",
          "906:         ),",
          "909:         ),",
          "910:     },",
          "915:         ),",
          "916:     },",
          "920:         ),",
          "921:     },",
          "925:     },",
          "928:     },",
          "932:         ),",
          "933:     },",
          "937:         ),",
          "938:     },",
          "942:         ),",
          "943:     },",
          "946:     },",
          "950:         ),",
          "951:     },",
          "955:         ),",
          "958:         ),",
          "961:         ),",
          "964:         ),",
          "967:         ),",
          "970:         ),",
          "973:         ),",
          "976:         ),",
          "977:     },",
          "980:     },",
          "985:         ),",
          "986:     },",
          "991:         ),",
          "992:     },",
          "996:         ),",
          "998:     },",
          "1003:     },",
          "1007:         ),",
          "1010:         ),",
          "1011:     },",
          "1015:         ),",
          "1018:         ),",
          "1019:     },",
          "1023:         ),",
          "1026:         ),",
          "1029:         ),",
          "1032:         ),",
          "1035:         ),",
          "1038:         ),",
          "1041:         ),",
          "1044:         ),",
          "1047:         ),",
          "1050:         ),",
          "1051:     },",
          "1056:         ),",
          "1057:     },",
          "1060:     },",
          "1063:     },",
          "1066:     },",
          "1071:     },",
          "1074:     },",
          "1078:         ),",
          "1079:     },",
          "1082:     },",
          "1085:     },",
          "1088:     },",
          "1091:     },",
          "1094:     },",
          "1098:     },",
          "1101:     },",
          "1104:     },",
          "1109:         ),",
          "1110:     },",
          "1113:     },",
          "1116:     },",
          "1119:     },",
          "1123:         ),",
          "1126:         ),",
          "1127:     },",
          "1131:     },",
          "1135:         ),",
          "1136:     },",
          "1139:     },",
          "1140: }",
          "",
          "[Removed Lines]",
          "33:     'adls_list_operator': {",
          "34:         'ADLSListOperator': 'airflow.providers.microsoft.azure.operators.adls.ADLSListOperator',",
          "35:         'AzureDataLakeStorageListOperator': (",
          "36:             'airflow.providers.microsoft.azure.operators.adls.ADLSListOperator'",
          "39:     'adls_to_gcs': {",
          "40:         'ADLSToGCSOperator': 'airflow.providers.google.cloud.transfers.adls_to_gcs.ADLSToGCSOperator',",
          "41:         'AdlsToGoogleCloudStorageOperator': (",
          "42:             'airflow.providers.google.cloud.transfers.adls_to_gcs.ADLSToGCSOperator'",
          "45:     'aws_athena_operator': {",
          "46:         'AWSAthenaOperator': 'airflow.providers.amazon.aws.operators.athena.AthenaOperator',",
          "48:     'aws_sqs_publish_operator': {",
          "49:         'SqsPublishOperator': 'airflow.providers.amazon.aws.operators.sqs.SqsPublishOperator',",
          "50:         'SQSPublishOperator': 'airflow.providers.amazon.aws.operators.sqs.SqsPublishOperator',",
          "52:     'awsbatch_operator': {",
          "53:         'BatchProtocol': 'airflow.providers.amazon.aws.hooks.batch_client.BatchProtocol',",
          "54:         'BatchOperator': 'airflow.providers.amazon.aws.operators.batch.BatchOperator',",
          "55:         'AWSBatchOperator': 'airflow.providers.amazon.aws.operators.batch.BatchOperator',",
          "57:     'azure_container_instances_operator': {",
          "58:         'AzureContainerInstancesOperator': (",
          "59:             'airflow.providers.microsoft.azure.operators.container_instances.AzureContainerInstancesOperator'",
          "62:     'azure_cosmos_operator': {",
          "63:         'AzureCosmosInsertDocumentOperator': (",
          "64:             'airflow.providers.microsoft.azure.operators.cosmos.AzureCosmosInsertDocumentOperator'",
          "67:     'bigquery_check_operator': {",
          "68:         'BigQueryCheckOperator': 'airflow.providers.google.cloud.operators.bigquery.BigQueryCheckOperator',",
          "69:         'BigQueryIntervalCheckOperator': (",
          "70:             'airflow.providers.google.cloud.operators.bigquery.BigQueryIntervalCheckOperator'",
          "72:         'BigQueryValueCheckOperator': (",
          "73:             'airflow.providers.google.cloud.operators.bigquery.BigQueryValueCheckOperator'",
          "76:     'bigquery_get_data': {",
          "77:         'BigQueryGetDataOperator': (",
          "78:             'airflow.providers.google.cloud.operators.bigquery.BigQueryGetDataOperator'",
          "81:     'bigquery_operator': {",
          "82:         'BigQueryCreateEmptyDatasetOperator': (",
          "83:             'airflow.providers.google.cloud.operators.bigquery.BigQueryCreateEmptyDatasetOperator'",
          "85:         'BigQueryCreateEmptyTableOperator': (",
          "86:             'airflow.providers.google.cloud.operators.bigquery.BigQueryCreateEmptyTableOperator'",
          "88:         'BigQueryCreateExternalTableOperator': (",
          "89:             'airflow.providers.google.cloud.operators.bigquery.BigQueryCreateExternalTableOperator'",
          "91:         'BigQueryDeleteDatasetOperator': (",
          "92:             'airflow.providers.google.cloud.operators.bigquery.BigQueryDeleteDatasetOperator'",
          "94:         'BigQueryExecuteQueryOperator': (",
          "95:             'airflow.providers.google.cloud.operators.bigquery.BigQueryExecuteQueryOperator'",
          "97:         'BigQueryGetDatasetOperator': (",
          "98:             'airflow.providers.google.cloud.operators.bigquery.BigQueryGetDatasetOperator'",
          "100:         'BigQueryGetDatasetTablesOperator': (",
          "101:             'airflow.providers.google.cloud.operators.bigquery.BigQueryGetDatasetTablesOperator'",
          "103:         'BigQueryPatchDatasetOperator': (",
          "104:             'airflow.providers.google.cloud.operators.bigquery.BigQueryPatchDatasetOperator'",
          "106:         'BigQueryUpdateDatasetOperator': (",
          "107:             'airflow.providers.google.cloud.operators.bigquery.BigQueryUpdateDatasetOperator'",
          "109:         'BigQueryUpsertTableOperator': (",
          "110:             'airflow.providers.google.cloud.operators.bigquery.BigQueryUpsertTableOperator'",
          "112:         'BigQueryOperator': 'airflow.providers.google.cloud.operators.bigquery.BigQueryExecuteQueryOperator',",
          "114:     'bigquery_table_delete_operator': {",
          "115:         'BigQueryDeleteTableOperator': (",
          "116:             'airflow.providers.google.cloud.operators.bigquery.BigQueryDeleteTableOperator'",
          "118:         'BigQueryTableDeleteOperator': (",
          "119:             'airflow.providers.google.cloud.operators.bigquery.BigQueryDeleteTableOperator'",
          "122:     'bigquery_to_bigquery': {",
          "123:         'BigQueryToBigQueryOperator': (",
          "124:             'airflow.providers.google.cloud.transfers.bigquery_to_bigquery.BigQueryToBigQueryOperator'",
          "127:     'bigquery_to_gcs': {",
          "128:         'BigQueryToGCSOperator': (",
          "129:             'airflow.providers.google.cloud.transfers.bigquery_to_gcs.BigQueryToGCSOperator'",
          "131:         'BigQueryToCloudStorageOperator': (",
          "132:             'airflow.providers.google.cloud.transfers.bigquery_to_gcs.BigQueryToGCSOperator'",
          "135:     'bigquery_to_mysql_operator': {",
          "136:         'BigQueryToMySqlOperator': (",
          "137:             'airflow.providers.google.cloud.transfers.bigquery_to_mysql.BigQueryToMySqlOperator'",
          "140:     'cassandra_to_gcs': {",
          "141:         'CassandraToGCSOperator': (",
          "142:             'airflow.providers.google.cloud.transfers.cassandra_to_gcs.CassandraToGCSOperator'",
          "144:         'CassandraToGoogleCloudStorageOperator': (",
          "145:             'airflow.providers.google.cloud.transfers.cassandra_to_gcs.CassandraToGCSOperator'",
          "148:     'databricks_operator': {",
          "149:         'DatabricksRunNowOperator': (",
          "150:             'airflow.providers.databricks.operators.databricks.DatabricksRunNowOperator'",
          "152:         'DatabricksSubmitRunOperator': (",
          "153:             'airflow.providers.databricks.operators.databricks.DatabricksSubmitRunOperator'",
          "156:     'dataflow_operator': {",
          "157:         'DataflowCreateJavaJobOperator': (",
          "158:             'airflow.providers.google.cloud.operators.dataflow.DataflowCreateJavaJobOperator'",
          "160:         'DataflowCreatePythonJobOperator': (",
          "161:             'airflow.providers.google.cloud.operators.dataflow.DataflowCreatePythonJobOperator'",
          "163:         'DataflowTemplatedJobStartOperator': (",
          "164:             'airflow.providers.google.cloud.operators.dataflow.DataflowTemplatedJobStartOperator'",
          "166:         'DataFlowJavaOperator': (",
          "167:             'airflow.providers.google.cloud.operators.dataflow.DataflowCreateJavaJobOperator'",
          "169:         'DataFlowPythonOperator': (",
          "170:             'airflow.providers.google.cloud.operators.dataflow.DataflowCreatePythonJobOperator'",
          "172:         'DataflowTemplateOperator': (",
          "173:             'airflow.providers.google.cloud.operators.dataflow.DataflowTemplatedJobStartOperator'",
          "176:     'dataproc_operator': {",
          "177:         'DataprocCreateClusterOperator': (",
          "178:             'airflow.providers.google.cloud.operators.dataproc.DataprocCreateClusterOperator'",
          "180:         'DataprocDeleteClusterOperator': (",
          "181:             'airflow.providers.google.cloud.operators.dataproc.DataprocDeleteClusterOperator'",
          "183:         'DataprocInstantiateInlineWorkflowTemplateOperator':",
          "184:             'airflow.providers.google.cloud.operators.dataproc.'",
          "185:             'DataprocInstantiateInlineWorkflowTemplateOperator',",
          "186:         'DataprocInstantiateWorkflowTemplateOperator': (",
          "187:             'airflow.providers.google.cloud.operators.dataproc.DataprocInstantiateWorkflowTemplateOperator'",
          "189:         'DataprocJobBaseOperator': (",
          "190:             'airflow.providers.google.cloud.operators.dataproc.DataprocJobBaseOperator'",
          "192:         'DataprocScaleClusterOperator': (",
          "193:             'airflow.providers.google.cloud.operators.dataproc.DataprocScaleClusterOperator'",
          "195:         'DataprocSubmitHadoopJobOperator': (",
          "196:             'airflow.providers.google.cloud.operators.dataproc.DataprocSubmitHadoopJobOperator'",
          "198:         'DataprocSubmitHiveJobOperator': (",
          "199:             'airflow.providers.google.cloud.operators.dataproc.DataprocSubmitHiveJobOperator'",
          "201:         'DataprocSubmitPigJobOperator': (",
          "202:             'airflow.providers.google.cloud.operators.dataproc.DataprocSubmitPigJobOperator'",
          "204:         'DataprocSubmitPySparkJobOperator': (",
          "205:             'airflow.providers.google.cloud.operators.dataproc.DataprocSubmitPySparkJobOperator'",
          "207:         'DataprocSubmitSparkJobOperator': (",
          "208:             'airflow.providers.google.cloud.operators.dataproc.DataprocSubmitSparkJobOperator'",
          "210:         'DataprocSubmitSparkSqlJobOperator': (",
          "211:             'airflow.providers.google.cloud.operators.dataproc.DataprocSubmitSparkSqlJobOperator'",
          "213:         'DataprocClusterCreateOperator': (",
          "214:             'airflow.providers.google.cloud.operators.dataproc.DataprocCreateClusterOperator'",
          "216:         'DataprocClusterDeleteOperator': (",
          "217:             'airflow.providers.google.cloud.operators.dataproc.DataprocDeleteClusterOperator'",
          "219:         'DataprocClusterScaleOperator': (",
          "220:             'airflow.providers.google.cloud.operators.dataproc.DataprocScaleClusterOperator'",
          "222:         'DataProcHadoopOperator': (",
          "223:             'airflow.providers.google.cloud.operators.dataproc.DataprocSubmitHadoopJobOperator'",
          "225:         'DataProcHiveOperator': (",
          "226:             'airflow.providers.google.cloud.operators.dataproc.DataprocSubmitHiveJobOperator'",
          "228:         'DataProcJobBaseOperator': (",
          "229:             'airflow.providers.google.cloud.operators.dataproc.DataprocJobBaseOperator'",
          "231:         'DataProcPigOperator': (",
          "232:             'airflow.providers.google.cloud.operators.dataproc.DataprocSubmitPigJobOperator'",
          "234:         'DataProcPySparkOperator': (",
          "235:             'airflow.providers.google.cloud.operators.dataproc.DataprocSubmitPySparkJobOperator'",
          "237:         'DataProcSparkOperator': (",
          "238:             'airflow.providers.google.cloud.operators.dataproc.DataprocSubmitSparkJobOperator'",
          "240:         'DataProcSparkSqlOperator': (",
          "241:             'airflow.providers.google.cloud.operators.dataproc.DataprocSubmitSparkSqlJobOperator'",
          "243:         'DataprocWorkflowTemplateInstantiateInlineOperator':",
          "244:             'airflow.providers.google.cloud.operators.dataproc.'",
          "245:             'DataprocInstantiateInlineWorkflowTemplateOperator',",
          "246:         'DataprocWorkflowTemplateInstantiateOperator': (",
          "247:             'airflow.providers.google.cloud.operators.dataproc.DataprocInstantiateWorkflowTemplateOperator'",
          "250:     'datastore_export_operator': {",
          "251:         'CloudDatastoreExportEntitiesOperator': (",
          "252:             'airflow.providers.google.cloud.operators.datastore.CloudDatastoreExportEntitiesOperator'",
          "254:         'DatastoreExportOperator': (",
          "255:             'airflow.providers.google.cloud.operators.datastore.CloudDatastoreExportEntitiesOperator'",
          "258:     'datastore_import_operator': {",
          "259:         'CloudDatastoreImportEntitiesOperator': (",
          "260:             'airflow.providers.google.cloud.operators.datastore.CloudDatastoreImportEntitiesOperator'",
          "262:         'DatastoreImportOperator': (",
          "263:             'airflow.providers.google.cloud.operators.datastore.CloudDatastoreImportEntitiesOperator'",
          "266:     'dingding_operator': {",
          "267:         'DingdingOperator': 'airflow.providers.dingding.operators.dingding.DingdingOperator',",
          "269:     'discord_webhook_operator': {",
          "270:         'DiscordWebhookOperator': (",
          "271:             'airflow.providers.discord.operators.discord_webhook.DiscordWebhookOperator'",
          "274:     'docker_swarm_operator': {",
          "275:         'DockerSwarmOperator': 'airflow.providers.docker.operators.docker_swarm.DockerSwarmOperator',",
          "277:     'druid_operator': {",
          "278:         'DruidOperator': 'airflow.providers.apache.druid.operators.druid.DruidOperator',",
          "280:     'dynamodb_to_s3': {",
          "281:         'DynamoDBToS3Operator': 'airflow.providers.amazon.aws.transfers.dynamodb_to_s3.DynamoDBToS3Operator',",
          "283:     'ecs_operator': {",
          "284:         'EcsProtocol': 'airflow.providers.amazon.aws.hooks.ecs.EcsProtocol',",
          "285:         'EcsRunTaskOperator': 'airflow.providers.amazon.aws.operators.ecs.EcsRunTaskOperator',",
          "286:         'EcsOperator': 'airflow.providers.amazon.aws.operators.ecs.EcsRunTaskOperator',",
          "288:     'file_to_gcs': {",
          "289:         'LocalFilesystemToGCSOperator': (",
          "290:             'airflow.providers.google.cloud.transfers.local_to_gcs.LocalFilesystemToGCSOperator'",
          "292:         'FileToGoogleCloudStorageOperator': (",
          "293:             'airflow.providers.google.cloud.transfers.local_to_gcs.LocalFilesystemToGCSOperator'",
          "296:     'file_to_wasb': {",
          "297:         'LocalFilesystemToWasbOperator': (",
          "298:             'airflow.providers.microsoft.azure.transfers.local_to_wasb.LocalFilesystemToWasbOperator'",
          "300:         'FileToWasbOperator': (",
          "301:             'airflow.providers.microsoft.azure.transfers.local_to_wasb.LocalFilesystemToWasbOperator'",
          "304:     'gcp_bigtable_operator': {",
          "305:         'BigtableCreateInstanceOperator': (",
          "306:             'airflow.providers.google.cloud.operators.bigtable.BigtableCreateInstanceOperator'",
          "308:         'BigtableCreateTableOperator': (",
          "309:             'airflow.providers.google.cloud.operators.bigtable.BigtableCreateTableOperator'",
          "311:         'BigtableDeleteInstanceOperator': (",
          "312:             'airflow.providers.google.cloud.operators.bigtable.BigtableDeleteInstanceOperator'",
          "314:         'BigtableDeleteTableOperator': (",
          "315:             'airflow.providers.google.cloud.operators.bigtable.BigtableDeleteTableOperator'",
          "317:         'BigtableUpdateClusterOperator': (",
          "318:             'airflow.providers.google.cloud.operators.bigtable.BigtableUpdateClusterOperator'",
          "320:         'BigtableTableReplicationCompletedSensor': (",
          "321:             'airflow.providers.google.cloud.sensors.bigtable.BigtableTableReplicationCompletedSensor'",
          "323:         'BigtableClusterUpdateOperator': (",
          "324:             'airflow.providers.google.cloud.operators.bigtable.BigtableUpdateClusterOperator'",
          "326:         'BigtableInstanceCreateOperator': (",
          "327:             'airflow.providers.google.cloud.operators.bigtable.BigtableCreateInstanceOperator'",
          "329:         'BigtableInstanceDeleteOperator': (",
          "330:             'airflow.providers.google.cloud.operators.bigtable.BigtableDeleteInstanceOperator'",
          "332:         'BigtableTableCreateOperator': (",
          "333:             'airflow.providers.google.cloud.operators.bigtable.BigtableCreateTableOperator'",
          "335:         'BigtableTableDeleteOperator': (",
          "336:             'airflow.providers.google.cloud.operators.bigtable.BigtableDeleteTableOperator'",
          "338:         'BigtableTableWaitForReplicationSensor': (",
          "339:             'airflow.providers.google.cloud.sensors.bigtable.BigtableTableReplicationCompletedSensor'",
          "342:     'gcp_cloud_build_operator': {",
          "343:         'CloudBuildCreateBuildOperator': (",
          "344:             'airflow.providers.google.cloud.operators.cloud_build.CloudBuildCreateBuildOperator'",
          "347:     'gcp_compute_operator': {",
          "348:         'ComputeEngineBaseOperator': (",
          "349:             'airflow.providers.google.cloud.operators.compute.ComputeEngineBaseOperator'",
          "351:         'ComputeEngineCopyInstanceTemplateOperator': (",
          "352:             'airflow.providers.google.cloud.operators.compute.ComputeEngineCopyInstanceTemplateOperator'",
          "354:         'ComputeEngineInstanceGroupUpdateManagerTemplateOperator':",
          "355:             'airflow.providers.google.cloud.operators.compute.'",
          "356:             'ComputeEngineInstanceGroupUpdateManagerTemplateOperator',",
          "357:         'ComputeEngineSetMachineTypeOperator': (",
          "358:             'airflow.providers.google.cloud.operators.compute.ComputeEngineSetMachineTypeOperator'",
          "360:         'ComputeEngineStartInstanceOperator': (",
          "361:             'airflow.providers.google.cloud.operators.compute.ComputeEngineStartInstanceOperator'",
          "363:         'ComputeEngineStopInstanceOperator': (",
          "364:             'airflow.providers.google.cloud.operators.compute.ComputeEngineStopInstanceOperator'",
          "366:         'GceBaseOperator': 'airflow.providers.google.cloud.operators.compute.ComputeEngineBaseOperator',",
          "367:         'GceInstanceGroupManagerUpdateTemplateOperator':",
          "368:             'airflow.providers.google.cloud.operators.compute.'",
          "369:             'ComputeEngineInstanceGroupUpdateManagerTemplateOperator',",
          "370:         'GceInstanceStartOperator': (",
          "371:             'airflow.providers.google.cloud.operators.compute.ComputeEngineStartInstanceOperator'",
          "373:         'GceInstanceStopOperator': (",
          "374:             'airflow.providers.google.cloud.operators.compute.ComputeEngineStopInstanceOperator'",
          "376:         'GceInstanceTemplateCopyOperator': (",
          "377:             'airflow.providers.google.cloud.operators.compute.ComputeEngineCopyInstanceTemplateOperator'",
          "379:         'GceSetMachineTypeOperator': (",
          "380:             'airflow.providers.google.cloud.operators.compute.ComputeEngineSetMachineTypeOperator'",
          "383:     'gcp_container_operator': {",
          "384:         'GKECreateClusterOperator': (",
          "385:             'airflow.providers.google.cloud.operators.kubernetes_engine.GKECreateClusterOperator'",
          "387:         'GKEDeleteClusterOperator': (",
          "388:             'airflow.providers.google.cloud.operators.kubernetes_engine.GKEDeleteClusterOperator'",
          "390:         'GKEStartPodOperator': (",
          "391:             'airflow.providers.google.cloud.operators.kubernetes_engine.GKEStartPodOperator'",
          "393:         'GKEClusterCreateOperator': (",
          "394:             'airflow.providers.google.cloud.operators.kubernetes_engine.GKECreateClusterOperator'",
          "396:         'GKEClusterDeleteOperator': (",
          "397:             'airflow.providers.google.cloud.operators.kubernetes_engine.GKEDeleteClusterOperator'",
          "399:         'GKEPodOperator': 'airflow.providers.google.cloud.operators.kubernetes_engine.GKEStartPodOperator',",
          "401:     'gcp_dlp_operator': {",
          "402:         'CloudDLPCancelDLPJobOperator': (",
          "403:             'airflow.providers.google.cloud.operators.dlp.CloudDLPCancelDLPJobOperator'",
          "405:         'CloudDLPCreateDeidentifyTemplateOperator': (",
          "406:             'airflow.providers.google.cloud.operators.dlp.CloudDLPCreateDeidentifyTemplateOperator'",
          "408:         'CloudDLPCreateDLPJobOperator': (",
          "409:             'airflow.providers.google.cloud.operators.dlp.CloudDLPCreateDLPJobOperator'",
          "411:         'CloudDLPCreateInspectTemplateOperator': (",
          "412:             'airflow.providers.google.cloud.operators.dlp.CloudDLPCreateInspectTemplateOperator'",
          "414:         'CloudDLPCreateJobTriggerOperator': (",
          "415:             'airflow.providers.google.cloud.operators.dlp.CloudDLPCreateJobTriggerOperator'",
          "417:         'CloudDLPCreateStoredInfoTypeOperator': (",
          "418:             'airflow.providers.google.cloud.operators.dlp.CloudDLPCreateStoredInfoTypeOperator'",
          "420:         'CloudDLPDeidentifyContentOperator': (",
          "421:             'airflow.providers.google.cloud.operators.dlp.CloudDLPDeidentifyContentOperator'",
          "423:         'CloudDLPDeleteDeidentifyTemplateOperator': (",
          "424:             'airflow.providers.google.cloud.operators.dlp.CloudDLPDeleteDeidentifyTemplateOperator'",
          "426:         'CloudDLPDeleteDLPJobOperator': (",
          "427:             'airflow.providers.google.cloud.operators.dlp.CloudDLPDeleteDLPJobOperator'",
          "429:         'CloudDLPDeleteInspectTemplateOperator': (",
          "430:             'airflow.providers.google.cloud.operators.dlp.CloudDLPDeleteInspectTemplateOperator'",
          "432:         'CloudDLPDeleteJobTriggerOperator': (",
          "433:             'airflow.providers.google.cloud.operators.dlp.CloudDLPDeleteJobTriggerOperator'",
          "435:         'CloudDLPDeleteStoredInfoTypeOperator': (",
          "436:             'airflow.providers.google.cloud.operators.dlp.CloudDLPDeleteStoredInfoTypeOperator'",
          "438:         'CloudDLPGetDeidentifyTemplateOperator': (",
          "439:             'airflow.providers.google.cloud.operators.dlp.CloudDLPGetDeidentifyTemplateOperator'",
          "441:         'CloudDLPGetDLPJobOperator': 'airflow.providers.google.cloud.operators.dlp.CloudDLPGetDLPJobOperator',",
          "442:         'CloudDLPGetDLPJobTriggerOperator': (",
          "443:             'airflow.providers.google.cloud.operators.dlp.CloudDLPGetDLPJobTriggerOperator'",
          "445:         'CloudDLPGetInspectTemplateOperator': (",
          "446:             'airflow.providers.google.cloud.operators.dlp.CloudDLPGetInspectTemplateOperator'",
          "448:         'CloudDLPGetStoredInfoTypeOperator': (",
          "449:             'airflow.providers.google.cloud.operators.dlp.CloudDLPGetStoredInfoTypeOperator'",
          "451:         'CloudDLPInspectContentOperator': (",
          "452:             'airflow.providers.google.cloud.operators.dlp.CloudDLPInspectContentOperator'",
          "454:         'CloudDLPListDeidentifyTemplatesOperator': (",
          "455:             'airflow.providers.google.cloud.operators.dlp.CloudDLPListDeidentifyTemplatesOperator'",
          "457:         'CloudDLPListDLPJobsOperator': (",
          "458:             'airflow.providers.google.cloud.operators.dlp.CloudDLPListDLPJobsOperator'",
          "460:         'CloudDLPListInfoTypesOperator': (",
          "461:             'airflow.providers.google.cloud.operators.dlp.CloudDLPListInfoTypesOperator'",
          "463:         'CloudDLPListInspectTemplatesOperator': (",
          "464:             'airflow.providers.google.cloud.operators.dlp.CloudDLPListInspectTemplatesOperator'",
          "466:         'CloudDLPListJobTriggersOperator': (",
          "467:             'airflow.providers.google.cloud.operators.dlp.CloudDLPListJobTriggersOperator'",
          "469:         'CloudDLPListStoredInfoTypesOperator': (",
          "470:             'airflow.providers.google.cloud.operators.dlp.CloudDLPListStoredInfoTypesOperator'",
          "472:         'CloudDLPRedactImageOperator': (",
          "473:             'airflow.providers.google.cloud.operators.dlp.CloudDLPRedactImageOperator'",
          "475:         'CloudDLPReidentifyContentOperator': (",
          "476:             'airflow.providers.google.cloud.operators.dlp.CloudDLPReidentifyContentOperator'",
          "478:         'CloudDLPUpdateDeidentifyTemplateOperator': (",
          "479:             'airflow.providers.google.cloud.operators.dlp.CloudDLPUpdateDeidentifyTemplateOperator'",
          "481:         'CloudDLPUpdateInspectTemplateOperator': (",
          "482:             'airflow.providers.google.cloud.operators.dlp.CloudDLPUpdateInspectTemplateOperator'",
          "484:         'CloudDLPUpdateJobTriggerOperator': (",
          "485:             'airflow.providers.google.cloud.operators.dlp.CloudDLPUpdateJobTriggerOperator'",
          "487:         'CloudDLPUpdateStoredInfoTypeOperator': (",
          "488:             'airflow.providers.google.cloud.operators.dlp.CloudDLPUpdateStoredInfoTypeOperator'",
          "490:         'CloudDLPDeleteDlpJobOperator': (",
          "491:             'airflow.providers.google.cloud.operators.dlp.CloudDLPDeleteDLPJobOperator'",
          "493:         'CloudDLPGetDlpJobOperator': 'airflow.providers.google.cloud.operators.dlp.CloudDLPGetDLPJobOperator',",
          "494:         'CloudDLPGetJobTripperOperator': (",
          "495:             'airflow.providers.google.cloud.operators.dlp.CloudDLPGetDLPJobTriggerOperator'",
          "497:         'CloudDLPListDlpJobsOperator': (",
          "498:             'airflow.providers.google.cloud.operators.dlp.CloudDLPListDLPJobsOperator'",
          "501:     'gcp_function_operator': {",
          "502:         'CloudFunctionDeleteFunctionOperator': (",
          "503:             'airflow.providers.google.cloud.operators.functions.CloudFunctionDeleteFunctionOperator'",
          "505:         'CloudFunctionDeployFunctionOperator': (",
          "506:             'airflow.providers.google.cloud.operators.functions.CloudFunctionDeployFunctionOperator'",
          "508:         'GcfFunctionDeleteOperator': (",
          "509:             'airflow.providers.google.cloud.operators.functions.CloudFunctionDeleteFunctionOperator'",
          "511:         'GcfFunctionDeployOperator': (",
          "512:             'airflow.providers.google.cloud.operators.functions.CloudFunctionDeployFunctionOperator'",
          "515:     'gcp_natural_language_operator': {",
          "516:         'CloudNaturalLanguageAnalyzeEntitiesOperator':",
          "517:             'airflow.providers.google.cloud.operators.natural_language.'",
          "518:             'CloudNaturalLanguageAnalyzeEntitiesOperator',",
          "519:         'CloudNaturalLanguageAnalyzeEntitySentimentOperator':",
          "520:             'airflow.providers.google.cloud.operators.natural_language.'",
          "521:             'CloudNaturalLanguageAnalyzeEntitySentimentOperator',",
          "522:         'CloudNaturalLanguageAnalyzeSentimentOperator':",
          "523:             'airflow.providers.google.cloud.operators.natural_language.'",
          "524:             'CloudNaturalLanguageAnalyzeSentimentOperator',",
          "525:         'CloudNaturalLanguageClassifyTextOperator':",
          "526:             'airflow.providers.google.cloud.operators.natural_language.'",
          "527:             'CloudNaturalLanguageClassifyTextOperator',",
          "528:         'CloudLanguageAnalyzeEntitiesOperator':",
          "529:             'airflow.providers.google.cloud.operators.natural_language.'",
          "530:             'CloudNaturalLanguageAnalyzeEntitiesOperator',",
          "531:         'CloudLanguageAnalyzeEntitySentimentOperator':",
          "532:             'airflow.providers.google.cloud.operators.natural_language.'",
          "533:             'CloudNaturalLanguageAnalyzeEntitySentimentOperator',",
          "534:         'CloudLanguageAnalyzeSentimentOperator':",
          "535:             'airflow.providers.google.cloud.operators.natural_language.'",
          "536:             'CloudNaturalLanguageAnalyzeSentimentOperator',",
          "537:         'CloudLanguageClassifyTextOperator':",
          "538:             'airflow.providers.google.cloud.operators.natural_language.'",
          "539:             'CloudNaturalLanguageClassifyTextOperator',",
          "541:     'gcp_spanner_operator': {",
          "542:         'SpannerDeleteDatabaseInstanceOperator': (",
          "543:             'airflow.providers.google.cloud.operators.spanner.SpannerDeleteDatabaseInstanceOperator'",
          "545:         'SpannerDeleteInstanceOperator': (",
          "546:             'airflow.providers.google.cloud.operators.spanner.SpannerDeleteInstanceOperator'",
          "548:         'SpannerDeployDatabaseInstanceOperator': (",
          "549:             'airflow.providers.google.cloud.operators.spanner.SpannerDeployDatabaseInstanceOperator'",
          "551:         'SpannerDeployInstanceOperator': (",
          "552:             'airflow.providers.google.cloud.operators.spanner.SpannerDeployInstanceOperator'",
          "554:         'SpannerQueryDatabaseInstanceOperator': (",
          "555:             'airflow.providers.google.cloud.operators.spanner.SpannerQueryDatabaseInstanceOperator'",
          "557:         'SpannerUpdateDatabaseInstanceOperator': (",
          "558:             'airflow.providers.google.cloud.operators.spanner.SpannerUpdateDatabaseInstanceOperator'",
          "560:         'CloudSpannerInstanceDatabaseDeleteOperator': (",
          "561:             'airflow.providers.google.cloud.operators.spanner.SpannerDeleteDatabaseInstanceOperator'",
          "563:         'CloudSpannerInstanceDatabaseDeployOperator': (",
          "564:             'airflow.providers.google.cloud.operators.spanner.SpannerDeployDatabaseInstanceOperator'",
          "566:         'CloudSpannerInstanceDatabaseQueryOperator': (",
          "567:             'airflow.providers.google.cloud.operators.spanner.SpannerQueryDatabaseInstanceOperator'",
          "569:         'CloudSpannerInstanceDatabaseUpdateOperator': (",
          "570:             'airflow.providers.google.cloud.operators.spanner.SpannerUpdateDatabaseInstanceOperator'",
          "572:         'CloudSpannerInstanceDeleteOperator': (",
          "573:             'airflow.providers.google.cloud.operators.spanner.SpannerDeleteInstanceOperator'",
          "575:         'CloudSpannerInstanceDeployOperator': (",
          "576:             'airflow.providers.google.cloud.operators.spanner.SpannerDeployInstanceOperator'",
          "579:     'gcp_speech_to_text_operator': {",
          "580:         'CloudSpeechToTextRecognizeSpeechOperator': (",
          "581:             'airflow.providers.google.cloud.operators.speech_to_text.CloudSpeechToTextRecognizeSpeechOperator'",
          "583:         'GcpSpeechToTextRecognizeSpeechOperator': (",
          "584:             'airflow.providers.google.cloud.operators.speech_to_text.CloudSpeechToTextRecognizeSpeechOperator'",
          "587:     'gcp_sql_operator': {",
          "588:         'CloudSQLBaseOperator': 'airflow.providers.google.cloud.operators.cloud_sql.CloudSQLBaseOperator',",
          "589:         'CloudSQLCreateInstanceDatabaseOperator': (",
          "590:             'airflow.providers.google.cloud.operators.cloud_sql.CloudSQLCreateInstanceDatabaseOperator'",
          "592:         'CloudSQLCreateInstanceOperator': (",
          "593:             'airflow.providers.google.cloud.operators.cloud_sql.CloudSQLCreateInstanceOperator'",
          "595:         'CloudSQLDeleteInstanceDatabaseOperator': (",
          "596:             'airflow.providers.google.cloud.operators.cloud_sql.CloudSQLDeleteInstanceDatabaseOperator'",
          "598:         'CloudSQLDeleteInstanceOperator': (",
          "599:             'airflow.providers.google.cloud.operators.cloud_sql.CloudSQLDeleteInstanceOperator'",
          "601:         'CloudSQLExecuteQueryOperator': (",
          "602:             'airflow.providers.google.cloud.operators.cloud_sql.CloudSQLExecuteQueryOperator'",
          "604:         'CloudSQLExportInstanceOperator': (",
          "605:             'airflow.providers.google.cloud.operators.cloud_sql.CloudSQLExportInstanceOperator'",
          "607:         'CloudSQLImportInstanceOperator': (",
          "608:             'airflow.providers.google.cloud.operators.cloud_sql.CloudSQLImportInstanceOperator'",
          "610:         'CloudSQLInstancePatchOperator': (",
          "611:             'airflow.providers.google.cloud.operators.cloud_sql.CloudSQLInstancePatchOperator'",
          "613:         'CloudSQLPatchInstanceDatabaseOperator': (",
          "614:             'airflow.providers.google.cloud.operators.cloud_sql.CloudSQLPatchInstanceDatabaseOperator'",
          "616:         'CloudSqlBaseOperator': 'airflow.providers.google.cloud.operators.cloud_sql.CloudSQLBaseOperator',",
          "617:         'CloudSqlInstanceCreateOperator': (",
          "618:             'airflow.providers.google.cloud.operators.cloud_sql.CloudSQLCreateInstanceOperator'",
          "620:         'CloudSqlInstanceDatabaseCreateOperator': (",
          "621:             'airflow.providers.google.cloud.operators.cloud_sql.CloudSQLCreateInstanceDatabaseOperator'",
          "623:         'CloudSqlInstanceDatabaseDeleteOperator': (",
          "624:             'airflow.providers.google.cloud.operators.cloud_sql.CloudSQLDeleteInstanceDatabaseOperator'",
          "626:         'CloudSqlInstanceDatabasePatchOperator': (",
          "627:             'airflow.providers.google.cloud.operators.cloud_sql.CloudSQLPatchInstanceDatabaseOperator'",
          "629:         'CloudSqlInstanceDeleteOperator': (",
          "630:             'airflow.providers.google.cloud.operators.cloud_sql.CloudSQLDeleteInstanceOperator'",
          "632:         'CloudSqlInstanceExportOperator': (",
          "633:             'airflow.providers.google.cloud.operators.cloud_sql.CloudSQLExportInstanceOperator'",
          "635:         'CloudSqlInstanceImportOperator': (",
          "636:             'airflow.providers.google.cloud.operators.cloud_sql.CloudSQLImportInstanceOperator'",
          "638:         'CloudSqlInstancePatchOperator': (",
          "639:             'airflow.providers.google.cloud.operators.cloud_sql.CloudSQLInstancePatchOperator'",
          "641:         'CloudSqlQueryOperator': (",
          "642:             'airflow.providers.google.cloud.operators.cloud_sql.CloudSQLExecuteQueryOperator'",
          "645:     'gcp_tasks_operator': {",
          "646:         'CloudTasksQueueCreateOperator': (",
          "647:             'airflow.providers.google.cloud.operators.tasks.CloudTasksQueueCreateOperator'",
          "649:         'CloudTasksQueueDeleteOperator': (",
          "650:             'airflow.providers.google.cloud.operators.tasks.CloudTasksQueueDeleteOperator'",
          "651:         ),",
          "652:         'CloudTasksQueueGetOperator': (",
          "653:             'airflow.providers.google.cloud.operators.tasks.CloudTasksQueueGetOperator'",
          "654:         ),",
          "655:         'CloudTasksQueuePauseOperator': (",
          "656:             'airflow.providers.google.cloud.operators.tasks.CloudTasksQueuePauseOperator'",
          "657:         ),",
          "658:         'CloudTasksQueuePurgeOperator': (",
          "659:             'airflow.providers.google.cloud.operators.tasks.CloudTasksQueuePurgeOperator'",
          "660:         ),",
          "661:         'CloudTasksQueueResumeOperator': (",
          "662:             'airflow.providers.google.cloud.operators.tasks.CloudTasksQueueResumeOperator'",
          "663:         ),",
          "664:         'CloudTasksQueuesListOperator': (",
          "665:             'airflow.providers.google.cloud.operators.tasks.CloudTasksQueuesListOperator'",
          "666:         ),",
          "667:         'CloudTasksQueueUpdateOperator': (",
          "668:             'airflow.providers.google.cloud.operators.tasks.CloudTasksQueueUpdateOperator'",
          "669:         ),",
          "670:         'CloudTasksTaskCreateOperator': (",
          "671:             'airflow.providers.google.cloud.operators.tasks.CloudTasksTaskCreateOperator'",
          "672:         ),",
          "673:         'CloudTasksTaskDeleteOperator': (",
          "674:             'airflow.providers.google.cloud.operators.tasks.CloudTasksTaskDeleteOperator'",
          "675:         ),",
          "676:         'CloudTasksTaskGetOperator': (",
          "677:             'airflow.providers.google.cloud.operators.tasks.CloudTasksTaskGetOperator'",
          "678:         ),",
          "679:         'CloudTasksTaskRunOperator': (",
          "680:             'airflow.providers.google.cloud.operators.tasks.CloudTasksTaskRunOperator'",
          "681:         ),",
          "682:         'CloudTasksTasksListOperator': (",
          "683:             'airflow.providers.google.cloud.operators.tasks.CloudTasksTasksListOperator'",
          "684:         ),",
          "685:     },",
          "686:     'gcp_text_to_speech_operator': {",
          "687:         'CloudTextToSpeechSynthesizeOperator': (",
          "688:             'airflow.providers.google.cloud.operators.text_to_speech.CloudTextToSpeechSynthesizeOperator'",
          "689:         ),",
          "690:         'GcpTextToSpeechSynthesizeOperator': (",
          "691:             'airflow.providers.google.cloud.operators.text_to_speech.CloudTextToSpeechSynthesizeOperator'",
          "692:         ),",
          "693:     },",
          "694:     'gcp_transfer_operator': {",
          "695:         'CloudDataTransferServiceCancelOperationOperator':",
          "696:             'airflow.providers.google.cloud.operators.cloud_storage_transfer_service.'",
          "697:             'CloudDataTransferServiceCancelOperationOperator',",
          "698:         'CloudDataTransferServiceCreateJobOperator':",
          "699:             'airflow.providers.google.cloud.operators.cloud_storage_transfer_service.'",
          "700:             'CloudDataTransferServiceCreateJobOperator',",
          "701:         'CloudDataTransferServiceDeleteJobOperator':",
          "702:             'airflow.providers.google.cloud.operators.cloud_storage_transfer_service.'",
          "703:             'CloudDataTransferServiceDeleteJobOperator',",
          "704:         'CloudDataTransferServiceGCSToGCSOperator':",
          "705:             'airflow.providers.google.cloud.operators.cloud_storage_transfer_service.'",
          "706:             'CloudDataTransferServiceGCSToGCSOperator',",
          "707:         'CloudDataTransferServiceGetOperationOperator':",
          "708:             'airflow.providers.google.cloud.operators.cloud_storage_transfer_service.'",
          "709:             'CloudDataTransferServiceGetOperationOperator',",
          "710:         'CloudDataTransferServiceListOperationsOperator':",
          "711:             'airflow.providers.google.cloud.operators.cloud_storage_transfer_service.'",
          "712:             'CloudDataTransferServiceListOperationsOperator',",
          "713:         'CloudDataTransferServicePauseOperationOperator':",
          "714:             'airflow.providers.google.cloud.operators.cloud_storage_transfer_service.'",
          "715:             'CloudDataTransferServicePauseOperationOperator',",
          "716:         'CloudDataTransferServiceResumeOperationOperator':",
          "717:             'airflow.providers.google.cloud.operators.cloud_storage_transfer_service.'",
          "718:             'CloudDataTransferServiceResumeOperationOperator',",
          "719:         'CloudDataTransferServiceS3ToGCSOperator':",
          "720:             'airflow.providers.google.cloud.operators.cloud_storage_transfer_service.'",
          "721:             'CloudDataTransferServiceS3ToGCSOperator',",
          "722:         'CloudDataTransferServiceUpdateJobOperator':",
          "723:             'airflow.providers.google.cloud.operators.cloud_storage_transfer_service.'",
          "724:             'CloudDataTransferServiceUpdateJobOperator',",
          "725:         'GcpTransferServiceJobCreateOperator':",
          "726:             'airflow.providers.google.cloud.operators.cloud_storage_transfer_service.'",
          "727:             'CloudDataTransferServiceCreateJobOperator',",
          "728:         'GcpTransferServiceJobDeleteOperator':",
          "729:             'airflow.providers.google.cloud.operators.cloud_storage_transfer_service.'",
          "730:             'CloudDataTransferServiceDeleteJobOperator',",
          "731:         'GcpTransferServiceJobUpdateOperator':",
          "732:             'airflow.providers.google.cloud.operators.cloud_storage_transfer_service.'",
          "733:             'CloudDataTransferServiceUpdateJobOperator',",
          "734:         'GcpTransferServiceOperationCancelOperator':",
          "735:             'airflow.providers.google.cloud.operators.cloud_storage_transfer_service.'",
          "736:             'CloudDataTransferServiceCancelOperationOperator',",
          "737:         'GcpTransferServiceOperationGetOperator':",
          "738:             'airflow.providers.google.cloud.operators.cloud_storage_transfer_service.'",
          "739:             'CloudDataTransferServiceGetOperationOperator',",
          "740:         'GcpTransferServiceOperationPauseOperator':",
          "741:             'airflow.providers.google.cloud.operators.cloud_storage_transfer_service.'",
          "742:             'CloudDataTransferServicePauseOperationOperator',",
          "743:         'GcpTransferServiceOperationResumeOperator':",
          "744:             'airflow.providers.google.cloud.operators.cloud_storage_transfer_service.'",
          "745:             'CloudDataTransferServiceResumeOperationOperator',",
          "746:         'GcpTransferServiceOperationsListOperator':",
          "747:             'airflow.providers.google.cloud.operators.cloud_storage_transfer_service.'",
          "748:             'CloudDataTransferServiceListOperationsOperator',",
          "749:         'GoogleCloudStorageToGoogleCloudStorageTransferOperator':",
          "750:             'airflow.providers.google.cloud.operators.cloud_storage_transfer_service.'",
          "751:             'CloudDataTransferServiceGCSToGCSOperator',",
          "752:         'S3ToGoogleCloudStorageTransferOperator':",
          "753:             'airflow.providers.google.cloud.operators.cloud_storage_transfer_service.'",
          "754:             'CloudDataTransferServiceS3ToGCSOperator',",
          "755:     },",
          "756:     'gcp_translate_operator': {",
          "757:         'CloudTranslateTextOperator': (",
          "758:             'airflow.providers.google.cloud.operators.translate.CloudTranslateTextOperator'",
          "759:         ),",
          "760:     },",
          "761:     'gcp_translate_speech_operator': {",
          "762:         'CloudTranslateSpeechOperator': (",
          "763:             'airflow.providers.google.cloud.operators.translate_speech.CloudTranslateSpeechOperator'",
          "764:         ),",
          "765:         'GcpTranslateSpeechOperator': (",
          "766:             'airflow.providers.google.cloud.operators.translate_speech.CloudTranslateSpeechOperator'",
          "767:         ),",
          "768:     },",
          "769:     'gcp_video_intelligence_operator': {",
          "770:         'CloudVideoIntelligenceDetectVideoExplicitContentOperator':",
          "771:             'airflow.providers.google.cloud.operators.video_intelligence.'",
          "772:             'CloudVideoIntelligenceDetectVideoExplicitContentOperator',",
          "773:         'CloudVideoIntelligenceDetectVideoLabelsOperator':",
          "774:             'airflow.providers.google.cloud.operators.video_intelligence.'",
          "775:             'CloudVideoIntelligenceDetectVideoLabelsOperator',",
          "776:         'CloudVideoIntelligenceDetectVideoShotsOperator':",
          "777:             'airflow.providers.google.cloud.operators.video_intelligence.'",
          "778:             'CloudVideoIntelligenceDetectVideoShotsOperator',",
          "779:     },",
          "780:     'gcp_vision_operator': {",
          "781:         'CloudVisionAddProductToProductSetOperator': (",
          "782:             'airflow.providers.google.cloud.operators.vision.CloudVisionAddProductToProductSetOperator'",
          "783:         ),",
          "784:         'CloudVisionCreateProductOperator': (",
          "785:             'airflow.providers.google.cloud.operators.vision.CloudVisionCreateProductOperator'",
          "786:         ),",
          "787:         'CloudVisionCreateProductSetOperator': (",
          "788:             'airflow.providers.google.cloud.operators.vision.CloudVisionCreateProductSetOperator'",
          "789:         ),",
          "790:         'CloudVisionCreateReferenceImageOperator': (",
          "791:             'airflow.providers.google.cloud.operators.vision.CloudVisionCreateReferenceImageOperator'",
          "792:         ),",
          "793:         'CloudVisionDeleteProductOperator': (",
          "794:             'airflow.providers.google.cloud.operators.vision.CloudVisionDeleteProductOperator'",
          "795:         ),",
          "796:         'CloudVisionDeleteProductSetOperator': (",
          "797:             'airflow.providers.google.cloud.operators.vision.CloudVisionDeleteProductSetOperator'",
          "798:         ),",
          "799:         'CloudVisionDetectImageLabelsOperator': (",
          "800:             'airflow.providers.google.cloud.operators.vision.CloudVisionDetectImageLabelsOperator'",
          "801:         ),",
          "802:         'CloudVisionDetectImageSafeSearchOperator': (",
          "803:             'airflow.providers.google.cloud.operators.vision.CloudVisionDetectImageSafeSearchOperator'",
          "804:         ),",
          "805:         'CloudVisionDetectTextOperator': (",
          "806:             'airflow.providers.google.cloud.operators.vision.CloudVisionDetectTextOperator'",
          "808:         'CloudVisionGetProductOperator': (",
          "809:             'airflow.providers.google.cloud.operators.vision.CloudVisionGetProductOperator'",
          "811:         'CloudVisionGetProductSetOperator': (",
          "812:             'airflow.providers.google.cloud.operators.vision.CloudVisionGetProductSetOperator'",
          "814:         'CloudVisionImageAnnotateOperator': (",
          "815:             'airflow.providers.google.cloud.operators.vision.CloudVisionImageAnnotateOperator'",
          "817:         'CloudVisionRemoveProductFromProductSetOperator': (",
          "818:             'airflow.providers.google.cloud.operators.vision.CloudVisionRemoveProductFromProductSetOperator'",
          "820:         'CloudVisionTextDetectOperator': (",
          "821:             'airflow.providers.google.cloud.operators.vision.CloudVisionTextDetectOperator'",
          "823:         'CloudVisionUpdateProductOperator': (",
          "824:             'airflow.providers.google.cloud.operators.vision.CloudVisionUpdateProductOperator'",
          "826:         'CloudVisionUpdateProductSetOperator': (",
          "827:             'airflow.providers.google.cloud.operators.vision.CloudVisionUpdateProductSetOperator'",
          "829:         'CloudVisionAnnotateImageOperator': (",
          "830:             'airflow.providers.google.cloud.operators.vision.CloudVisionImageAnnotateOperator'",
          "832:         'CloudVisionDetectDocumentTextOperator': (",
          "833:             'airflow.providers.google.cloud.operators.vision.CloudVisionTextDetectOperator'",
          "835:         'CloudVisionProductCreateOperator': (",
          "836:             'airflow.providers.google.cloud.operators.vision.CloudVisionCreateProductOperator'",
          "838:         'CloudVisionProductDeleteOperator': (",
          "839:             'airflow.providers.google.cloud.operators.vision.CloudVisionDeleteProductOperator'",
          "841:         'CloudVisionProductGetOperator': (",
          "842:             'airflow.providers.google.cloud.operators.vision.CloudVisionGetProductOperator'",
          "844:         'CloudVisionProductSetCreateOperator': (",
          "845:             'airflow.providers.google.cloud.operators.vision.CloudVisionCreateProductSetOperator'",
          "847:         'CloudVisionProductSetDeleteOperator': (",
          "848:             'airflow.providers.google.cloud.operators.vision.CloudVisionDeleteProductSetOperator'",
          "850:         'CloudVisionProductSetGetOperator': (",
          "851:             'airflow.providers.google.cloud.operators.vision.CloudVisionGetProductSetOperator'",
          "853:         'CloudVisionProductSetUpdateOperator': (",
          "854:             'airflow.providers.google.cloud.operators.vision.CloudVisionUpdateProductSetOperator'",
          "856:         'CloudVisionProductUpdateOperator': (",
          "857:             'airflow.providers.google.cloud.operators.vision.CloudVisionUpdateProductOperator'",
          "859:         'CloudVisionReferenceImageCreateOperator': (",
          "860:             'airflow.providers.google.cloud.operators.vision.CloudVisionCreateReferenceImageOperator'",
          "863:     'gcs_acl_operator': {",
          "864:         'GCSBucketCreateAclEntryOperator': (",
          "865:             'airflow.providers.google.cloud.operators.gcs.GCSBucketCreateAclEntryOperator'",
          "867:         'GCSObjectCreateAclEntryOperator': (",
          "868:             'airflow.providers.google.cloud.operators.gcs.GCSObjectCreateAclEntryOperator'",
          "870:         'GoogleCloudStorageBucketCreateAclEntryOperator': (",
          "871:             'airflow.providers.google.cloud.operators.gcs.GCSBucketCreateAclEntryOperator'",
          "873:         'GoogleCloudStorageObjectCreateAclEntryOperator': (",
          "874:             'airflow.providers.google.cloud.operators.gcs.GCSObjectCreateAclEntryOperator'",
          "877:     'gcs_delete_operator': {",
          "878:         'GCSDeleteObjectsOperator': 'airflow.providers.google.cloud.operators.gcs.GCSDeleteObjectsOperator',",
          "879:         'GoogleCloudStorageDeleteOperator': (",
          "880:             'airflow.providers.google.cloud.operators.gcs.GCSDeleteObjectsOperator'",
          "883:     'gcs_download_operator': {",
          "884:         'GCSToLocalFilesystemOperator': (",
          "885:             'airflow.providers.google.cloud.transfers.gcs_to_local.GCSToLocalFilesystemOperator'",
          "887:         'GoogleCloudStorageDownloadOperator': (",
          "888:             'airflow.providers.google.cloud.transfers.gcs_to_local.GCSToLocalFilesystemOperator'",
          "891:     'gcs_list_operator': {",
          "892:         'GCSListObjectsOperator': 'airflow.providers.google.cloud.operators.gcs.GCSListObjectsOperator',",
          "893:         'GoogleCloudStorageListOperator': (",
          "894:             'airflow.providers.google.cloud.operators.gcs.GCSListObjectsOperator'",
          "897:     'gcs_operator': {",
          "898:         'GCSCreateBucketOperator': 'airflow.providers.google.cloud.operators.gcs.GCSCreateBucketOperator',",
          "899:         'GoogleCloudStorageCreateBucketOperator': (",
          "900:             'airflow.providers.google.cloud.operators.gcs.GCSCreateBucketOperator'",
          "903:     'gcs_to_bq': {",
          "904:         'GCSToBigQueryOperator': (",
          "905:             'airflow.providers.google.cloud.transfers.gcs_to_bigquery.GCSToBigQueryOperator'",
          "907:         'GoogleCloudStorageToBigQueryOperator': (",
          "908:             'airflow.providers.google.cloud.transfers.gcs_to_bigquery.GCSToBigQueryOperator'",
          "911:     'gcs_to_gcs': {",
          "912:         'GCSToGCSOperator': 'airflow.providers.google.cloud.transfers.gcs_to_gcs.GCSToGCSOperator',",
          "913:         'GoogleCloudStorageToGoogleCloudStorageOperator': (",
          "914:             'airflow.providers.google.cloud.transfers.gcs_to_gcs.GCSToGCSOperator'",
          "917:     'gcs_to_gdrive_operator': {",
          "918:         'GCSToGoogleDriveOperator': (",
          "919:             'airflow.providers.google.suite.transfers.gcs_to_gdrive.GCSToGoogleDriveOperator'",
          "922:     'gcs_to_s3': {",
          "923:         'GCSToS3Operator': 'airflow.providers.amazon.aws.transfers.gcs_to_s3.GCSToS3Operator',",
          "924:         'GoogleCloudStorageToS3Operator': 'airflow.providers.amazon.aws.transfers.gcs_to_s3.GCSToS3Operator',",
          "926:     'grpc_operator': {",
          "927:         'GrpcOperator': 'airflow.providers.grpc.operators.grpc.GrpcOperator',",
          "929:     'hive_to_dynamodb': {",
          "930:         'HiveToDynamoDBOperator': (",
          "931:             'airflow.providers.amazon.aws.transfers.hive_to_dynamodb.HiveToDynamoDBOperator'",
          "934:     'imap_attachment_to_s3_operator': {",
          "935:         'ImapAttachmentToS3Operator': (",
          "936:             'airflow.providers.amazon.aws.transfers.imap_attachment_to_s3.ImapAttachmentToS3Operator'",
          "939:     'jenkins_job_trigger_operator': {",
          "940:         'JenkinsJobTriggerOperator': (",
          "941:             'airflow.providers.jenkins.operators.jenkins_job_trigger.JenkinsJobTriggerOperator'",
          "944:     'jira_operator': {",
          "945:         'JiraOperator': 'airflow.providers.atlassian.jira.operators.jira.JiraOperator',",
          "947:     'kubernetes_pod_operator': {",
          "948:         'KubernetesPodOperator': (",
          "949:             'airflow.providers.cncf.kubernetes.operators.pod.KubernetesPodOperator'",
          "952:     'mlengine_operator': {",
          "953:         'MLEngineManageModelOperator': (",
          "954:             'airflow.providers.google.cloud.operators.mlengine.MLEngineManageModelOperator'",
          "956:         'MLEngineManageVersionOperator': (",
          "957:             'airflow.providers.google.cloud.operators.mlengine.MLEngineManageVersionOperator'",
          "959:         'MLEngineStartBatchPredictionJobOperator': (",
          "960:             'airflow.providers.google.cloud.operators.mlengine.MLEngineStartBatchPredictionJobOperator'",
          "962:         'MLEngineStartTrainingJobOperator': (",
          "963:             'airflow.providers.google.cloud.operators.mlengine.MLEngineStartTrainingJobOperator'",
          "965:         'MLEngineBatchPredictionOperator': (",
          "966:             'airflow.providers.google.cloud.operators.mlengine.MLEngineStartBatchPredictionJobOperator'",
          "968:         'MLEngineModelOperator': (",
          "969:             'airflow.providers.google.cloud.operators.mlengine.MLEngineManageModelOperator'",
          "971:         'MLEngineTrainingOperator': (",
          "972:             'airflow.providers.google.cloud.operators.mlengine.MLEngineStartTrainingJobOperator'",
          "974:         'MLEngineVersionOperator': (",
          "975:             'airflow.providers.google.cloud.operators.mlengine.MLEngineManageVersionOperator'",
          "978:     'mongo_to_s3': {",
          "979:         'MongoToS3Operator': 'airflow.providers.amazon.aws.transfers.mongo_to_s3.MongoToS3Operator',",
          "981:     'mssql_to_gcs': {",
          "982:         'MSSQLToGCSOperator': 'airflow.providers.google.cloud.transfers.mssql_to_gcs.MSSQLToGCSOperator',",
          "983:         'MsSqlToGoogleCloudStorageOperator': (",
          "984:             'airflow.providers.google.cloud.transfers.mssql_to_gcs.MSSQLToGCSOperator'",
          "987:     'mysql_to_gcs': {",
          "988:         'MySQLToGCSOperator': 'airflow.providers.google.cloud.transfers.mysql_to_gcs.MySQLToGCSOperator',",
          "989:         'MySqlToGoogleCloudStorageOperator': (",
          "990:             'airflow.providers.google.cloud.transfers.mysql_to_gcs.MySQLToGCSOperator'",
          "993:     'opsgenie_alert_operator': {",
          "994:         'OpsgenieCreateAlertOperator': (",
          "995:             'airflow.providers.opsgenie.operators.opsgenie.OpsgenieCreateAlertOperator'",
          "997:         'OpsgenieAlertOperator': 'airflow.providers.opsgenie.operators.opsgenie.OpsgenieCreateAlertOperator',",
          "999:     'oracle_to_azure_data_lake_transfer': {",
          "1000:         'OracleToAzureDataLakeOperator':",
          "1001:             'airflow.providers.microsoft.azure.transfers.'",
          "1002:             'oracle_to_azure_data_lake.OracleToAzureDataLakeOperator',",
          "1004:     'oracle_to_oracle_transfer': {",
          "1005:         'OracleToOracleOperator': (",
          "1006:             'airflow.providers.oracle.transfers.oracle_to_oracle.OracleToOracleOperator'",
          "1008:         'OracleToOracleTransfer': (",
          "1009:             'airflow.providers.oracle.transfers.oracle_to_oracle.OracleToOracleOperator'",
          "1012:     'postgres_to_gcs_operator': {",
          "1013:         'PostgresToGCSOperator': (",
          "1014:             'airflow.providers.google.cloud.transfers.postgres_to_gcs.PostgresToGCSOperator'",
          "1016:         'PostgresToGoogleCloudStorageOperator': (",
          "1017:             'airflow.providers.google.cloud.transfers.postgres_to_gcs.PostgresToGCSOperator'",
          "1020:     'pubsub_operator': {",
          "1021:         'PubSubCreateSubscriptionOperator': (",
          "1022:             'airflow.providers.google.cloud.operators.pubsub.PubSubCreateSubscriptionOperator'",
          "1024:         'PubSubCreateTopicOperator': (",
          "1025:             'airflow.providers.google.cloud.operators.pubsub.PubSubCreateTopicOperator'",
          "1027:         'PubSubDeleteSubscriptionOperator': (",
          "1028:             'airflow.providers.google.cloud.operators.pubsub.PubSubDeleteSubscriptionOperator'",
          "1030:         'PubSubDeleteTopicOperator': (",
          "1031:             'airflow.providers.google.cloud.operators.pubsub.PubSubDeleteTopicOperator'",
          "1033:         'PubSubPublishMessageOperator': (",
          "1034:             'airflow.providers.google.cloud.operators.pubsub.PubSubPublishMessageOperator'",
          "1036:         'PubSubPublishOperator': (",
          "1037:             'airflow.providers.google.cloud.operators.pubsub.PubSubPublishMessageOperator'",
          "1039:         'PubSubSubscriptionCreateOperator': (",
          "1040:             'airflow.providers.google.cloud.operators.pubsub.PubSubCreateSubscriptionOperator'",
          "1042:         'PubSubSubscriptionDeleteOperator': (",
          "1043:             'airflow.providers.google.cloud.operators.pubsub.PubSubDeleteSubscriptionOperator'",
          "1045:         'PubSubTopicCreateOperator': (",
          "1046:             'airflow.providers.google.cloud.operators.pubsub.PubSubCreateTopicOperator'",
          "1048:         'PubSubTopicDeleteOperator': (",
          "1049:             'airflow.providers.google.cloud.operators.pubsub.PubSubDeleteTopicOperator'",
          "1052:     'qubole_check_operator': {",
          "1053:         'QuboleCheckOperator': 'airflow.providers.qubole.operators.qubole_check.QuboleCheckOperator',",
          "1054:         'QuboleValueCheckOperator': (",
          "1055:             'airflow.providers.qubole.operators.qubole_check.QuboleValueCheckOperator'",
          "1058:     'qubole_operator': {",
          "1059:         'QuboleOperator': 'airflow.providers.qubole.operators.qubole.QuboleOperator',",
          "1061:     'redis_publish_operator': {",
          "1062:         'RedisPublishOperator': 'airflow.providers.redis.operators.redis_publish.RedisPublishOperator',",
          "1064:     's3_to_gcs_operator': {",
          "1065:         'S3ToGCSOperator': 'airflow.providers.google.cloud.transfers.s3_to_gcs.S3ToGCSOperator',",
          "1067:     's3_to_gcs_transfer_operator': {",
          "1068:         'CloudDataTransferServiceS3ToGCSOperator':",
          "1069:             'airflow.providers.google.cloud.operators.cloud_storage_transfer_service.'",
          "1070:             'CloudDataTransferServiceS3ToGCSOperator',",
          "1072:     's3_to_sftp_operator': {",
          "1073:         'S3ToSFTPOperator': 'airflow.providers.amazon.aws.transfers.s3_to_sftp.S3ToSFTPOperator',",
          "1075:     'segment_track_event_operator': {",
          "1076:         'SegmentTrackEventOperator': (",
          "1077:             'airflow.providers.segment.operators.segment_track_event.SegmentTrackEventOperator'",
          "1080:     'sftp_operator': {",
          "1081:         'SFTPOperator': 'airflow.providers.sftp.operators.sftp.SFTPOperator',",
          "1083:     'sftp_to_s3_operator': {",
          "1084:         'SFTPToS3Operator': 'airflow.providers.amazon.aws.transfers.sftp_to_s3.SFTPToS3Operator',",
          "1086:     'slack_webhook_operator': {",
          "1087:         'SlackWebhookOperator': 'airflow.providers.slack.operators.slack_webhook.SlackWebhookOperator',",
          "1089:     'snowflake_operator': {",
          "1090:         'SnowflakeOperator': 'airflow.providers.snowflake.operators.snowflake.SnowflakeOperator',",
          "1092:     'sns_publish_operator': {",
          "1093:         'SnsPublishOperator': 'airflow.providers.amazon.aws.operators.sns.SnsPublishOperator',",
          "1095:     'spark_jdbc_operator': {",
          "1096:         'SparkJDBCOperator': 'airflow.providers.apache.spark.operators.spark_jdbc.SparkJDBCOperator',",
          "1097:         'SparkSubmitOperator': 'airflow.providers.apache.spark.operators.spark_jdbc.SparkSubmitOperator',",
          "1099:     'spark_sql_operator': {",
          "1100:         'SparkSqlOperator': 'airflow.providers.apache.spark.operators.spark_sql.SparkSqlOperator',",
          "1102:     'spark_submit_operator': {",
          "1103:         'SparkSubmitOperator': 'airflow.providers.apache.spark.operators.spark_submit.SparkSubmitOperator',",
          "1105:     'sql_to_gcs': {",
          "1106:         'BaseSQLToGCSOperator': 'airflow.providers.google.cloud.transfers.sql_to_gcs.BaseSQLToGCSOperator',",
          "1107:         'BaseSQLToGoogleCloudStorageOperator': (",
          "1108:             'airflow.providers.google.cloud.transfers.sql_to_gcs.BaseSQLToGCSOperator'",
          "1111:     'sqoop_operator': {",
          "1112:         'SqoopOperator': 'airflow.providers.apache.sqoop.operators.sqoop.SqoopOperator',",
          "1114:     'ssh_operator': {",
          "1115:         'SSHOperator': 'airflow.providers.ssh.operators.ssh.SSHOperator',",
          "1117:     'vertica_operator': {",
          "1118:         'VerticaOperator': 'airflow.providers.vertica.operators.vertica.VerticaOperator',",
          "1120:     'vertica_to_hive': {",
          "1121:         'VerticaToHiveOperator': (",
          "1122:             'airflow.providers.apache.hive.transfers.vertica_to_hive.VerticaToHiveOperator'",
          "1124:         'VerticaToHiveTransfer': (",
          "1125:             'airflow.providers.apache.hive.transfers.vertica_to_hive.VerticaToHiveOperator'",
          "1128:     'vertica_to_mysql': {",
          "1129:         'VerticaToMySqlOperator': 'airflow.providers.mysql.transfers.vertica_to_mysql.VerticaToMySqlOperator',",
          "1130:         'VerticaToMySqlTransfer': 'airflow.providers.mysql.transfers.vertica_to_mysql.VerticaToMySqlOperator',",
          "1132:     'wasb_delete_blob_operator': {",
          "1133:         'WasbDeleteBlobOperator': (",
          "1134:             'airflow.providers.microsoft.azure.operators.wasb_delete_blob.WasbDeleteBlobOperator'",
          "1137:     'winrm_operator': {",
          "1138:         'WinRMOperator': 'airflow.providers.microsoft.winrm.operators.winrm.WinRMOperator',",
          "",
          "[Added Lines]",
          "33:     \"adls_list_operator\": {",
          "34:         \"ADLSListOperator\": \"airflow.providers.microsoft.azure.operators.adls.ADLSListOperator\",",
          "35:         \"AzureDataLakeStorageListOperator\": (",
          "36:             \"airflow.providers.microsoft.azure.operators.adls.ADLSListOperator\"",
          "39:     \"adls_to_gcs\": {",
          "40:         \"ADLSToGCSOperator\": \"airflow.providers.google.cloud.transfers.adls_to_gcs.ADLSToGCSOperator\",",
          "41:         \"AdlsToGoogleCloudStorageOperator\": (",
          "42:             \"airflow.providers.google.cloud.transfers.adls_to_gcs.ADLSToGCSOperator\"",
          "45:     \"aws_athena_operator\": {",
          "46:         \"AWSAthenaOperator\": \"airflow.providers.amazon.aws.operators.athena.AthenaOperator\",",
          "48:     \"aws_sqs_publish_operator\": {",
          "49:         \"SqsPublishOperator\": \"airflow.providers.amazon.aws.operators.sqs.SqsPublishOperator\",",
          "50:         \"SQSPublishOperator\": \"airflow.providers.amazon.aws.operators.sqs.SqsPublishOperator\",",
          "52:     \"awsbatch_operator\": {",
          "53:         \"BatchProtocol\": \"airflow.providers.amazon.aws.hooks.batch_client.BatchProtocol\",",
          "54:         \"BatchOperator\": \"airflow.providers.amazon.aws.operators.batch.BatchOperator\",",
          "55:         \"AWSBatchOperator\": \"airflow.providers.amazon.aws.operators.batch.BatchOperator\",",
          "57:     \"azure_container_instances_operator\": {",
          "58:         \"AzureContainerInstancesOperator\": (",
          "59:             \"airflow.providers.microsoft.azure.operators.container_instances.AzureContainerInstancesOperator\"",
          "62:     \"azure_cosmos_operator\": {",
          "63:         \"AzureCosmosInsertDocumentOperator\": (",
          "64:             \"airflow.providers.microsoft.azure.operators.cosmos.AzureCosmosInsertDocumentOperator\"",
          "67:     \"bigquery_check_operator\": {",
          "68:         \"BigQueryCheckOperator\": \"airflow.providers.google.cloud.operators.bigquery.BigQueryCheckOperator\",",
          "69:         \"BigQueryIntervalCheckOperator\": (",
          "70:             \"airflow.providers.google.cloud.operators.bigquery.BigQueryIntervalCheckOperator\"",
          "72:         \"BigQueryValueCheckOperator\": (",
          "73:             \"airflow.providers.google.cloud.operators.bigquery.BigQueryValueCheckOperator\"",
          "76:     \"bigquery_get_data\": {",
          "77:         \"BigQueryGetDataOperator\": (",
          "78:             \"airflow.providers.google.cloud.operators.bigquery.BigQueryGetDataOperator\"",
          "81:     \"bigquery_operator\": {",
          "82:         \"BigQueryCreateEmptyDatasetOperator\": (",
          "83:             \"airflow.providers.google.cloud.operators.bigquery.BigQueryCreateEmptyDatasetOperator\"",
          "85:         \"BigQueryCreateEmptyTableOperator\": (",
          "86:             \"airflow.providers.google.cloud.operators.bigquery.BigQueryCreateEmptyTableOperator\"",
          "88:         \"BigQueryCreateExternalTableOperator\": (",
          "89:             \"airflow.providers.google.cloud.operators.bigquery.BigQueryCreateExternalTableOperator\"",
          "91:         \"BigQueryDeleteDatasetOperator\": (",
          "92:             \"airflow.providers.google.cloud.operators.bigquery.BigQueryDeleteDatasetOperator\"",
          "94:         \"BigQueryExecuteQueryOperator\": (",
          "95:             \"airflow.providers.google.cloud.operators.bigquery.BigQueryExecuteQueryOperator\"",
          "97:         \"BigQueryGetDatasetOperator\": (",
          "98:             \"airflow.providers.google.cloud.operators.bigquery.BigQueryGetDatasetOperator\"",
          "100:         \"BigQueryGetDatasetTablesOperator\": (",
          "101:             \"airflow.providers.google.cloud.operators.bigquery.BigQueryGetDatasetTablesOperator\"",
          "103:         \"BigQueryPatchDatasetOperator\": (",
          "104:             \"airflow.providers.google.cloud.operators.bigquery.BigQueryPatchDatasetOperator\"",
          "106:         \"BigQueryUpdateDatasetOperator\": (",
          "107:             \"airflow.providers.google.cloud.operators.bigquery.BigQueryUpdateDatasetOperator\"",
          "109:         \"BigQueryUpsertTableOperator\": (",
          "110:             \"airflow.providers.google.cloud.operators.bigquery.BigQueryUpsertTableOperator\"",
          "112:         \"BigQueryOperator\": \"airflow.providers.google.cloud.operators.bigquery.BigQueryExecuteQueryOperator\",",
          "114:     \"bigquery_table_delete_operator\": {",
          "115:         \"BigQueryDeleteTableOperator\": (",
          "116:             \"airflow.providers.google.cloud.operators.bigquery.BigQueryDeleteTableOperator\"",
          "118:         \"BigQueryTableDeleteOperator\": (",
          "119:             \"airflow.providers.google.cloud.operators.bigquery.BigQueryDeleteTableOperator\"",
          "122:     \"bigquery_to_bigquery\": {",
          "123:         \"BigQueryToBigQueryOperator\": (",
          "124:             \"airflow.providers.google.cloud.transfers.bigquery_to_bigquery.BigQueryToBigQueryOperator\"",
          "127:     \"bigquery_to_gcs\": {",
          "128:         \"BigQueryToGCSOperator\": (",
          "129:             \"airflow.providers.google.cloud.transfers.bigquery_to_gcs.BigQueryToGCSOperator\"",
          "131:         \"BigQueryToCloudStorageOperator\": (",
          "132:             \"airflow.providers.google.cloud.transfers.bigquery_to_gcs.BigQueryToGCSOperator\"",
          "135:     \"bigquery_to_mysql_operator\": {",
          "136:         \"BigQueryToMySqlOperator\": (",
          "137:             \"airflow.providers.google.cloud.transfers.bigquery_to_mysql.BigQueryToMySqlOperator\"",
          "140:     \"cassandra_to_gcs\": {",
          "141:         \"CassandraToGCSOperator\": (",
          "142:             \"airflow.providers.google.cloud.transfers.cassandra_to_gcs.CassandraToGCSOperator\"",
          "144:         \"CassandraToGoogleCloudStorageOperator\": (",
          "145:             \"airflow.providers.google.cloud.transfers.cassandra_to_gcs.CassandraToGCSOperator\"",
          "148:     \"databricks_operator\": {",
          "149:         \"DatabricksRunNowOperator\": (",
          "150:             \"airflow.providers.databricks.operators.databricks.DatabricksRunNowOperator\"",
          "152:         \"DatabricksSubmitRunOperator\": (",
          "153:             \"airflow.providers.databricks.operators.databricks.DatabricksSubmitRunOperator\"",
          "156:     \"dataflow_operator\": {",
          "157:         \"DataflowCreateJavaJobOperator\": (",
          "158:             \"airflow.providers.google.cloud.operators.dataflow.DataflowCreateJavaJobOperator\"",
          "160:         \"DataflowCreatePythonJobOperator\": (",
          "161:             \"airflow.providers.google.cloud.operators.dataflow.DataflowCreatePythonJobOperator\"",
          "163:         \"DataflowTemplatedJobStartOperator\": (",
          "164:             \"airflow.providers.google.cloud.operators.dataflow.DataflowTemplatedJobStartOperator\"",
          "166:         \"DataFlowJavaOperator\": (",
          "167:             \"airflow.providers.google.cloud.operators.dataflow.DataflowCreateJavaJobOperator\"",
          "169:         \"DataFlowPythonOperator\": (",
          "170:             \"airflow.providers.google.cloud.operators.dataflow.DataflowCreatePythonJobOperator\"",
          "172:         \"DataflowTemplateOperator\": (",
          "173:             \"airflow.providers.google.cloud.operators.dataflow.DataflowTemplatedJobStartOperator\"",
          "176:     \"dataproc_operator\": {",
          "177:         \"DataprocCreateClusterOperator\": (",
          "178:             \"airflow.providers.google.cloud.operators.dataproc.DataprocCreateClusterOperator\"",
          "180:         \"DataprocDeleteClusterOperator\": (",
          "181:             \"airflow.providers.google.cloud.operators.dataproc.DataprocDeleteClusterOperator\"",
          "183:         \"DataprocInstantiateInlineWorkflowTemplateOperator\":",
          "184:             \"airflow.providers.google.cloud.operators.dataproc.\"",
          "185:             \"DataprocInstantiateInlineWorkflowTemplateOperator\",",
          "186:         \"DataprocInstantiateWorkflowTemplateOperator\": (",
          "187:             \"airflow.providers.google.cloud.operators.dataproc.DataprocInstantiateWorkflowTemplateOperator\"",
          "189:         \"DataprocJobBaseOperator\": (",
          "190:             \"airflow.providers.google.cloud.operators.dataproc.DataprocJobBaseOperator\"",
          "192:         \"DataprocScaleClusterOperator\": (",
          "193:             \"airflow.providers.google.cloud.operators.dataproc.DataprocScaleClusterOperator\"",
          "195:         \"DataprocSubmitHadoopJobOperator\": (",
          "196:             \"airflow.providers.google.cloud.operators.dataproc.DataprocSubmitHadoopJobOperator\"",
          "198:         \"DataprocSubmitHiveJobOperator\": (",
          "199:             \"airflow.providers.google.cloud.operators.dataproc.DataprocSubmitHiveJobOperator\"",
          "201:         \"DataprocSubmitPigJobOperator\": (",
          "202:             \"airflow.providers.google.cloud.operators.dataproc.DataprocSubmitPigJobOperator\"",
          "204:         \"DataprocSubmitPySparkJobOperator\": (",
          "205:             \"airflow.providers.google.cloud.operators.dataproc.DataprocSubmitPySparkJobOperator\"",
          "207:         \"DataprocSubmitSparkJobOperator\": (",
          "208:             \"airflow.providers.google.cloud.operators.dataproc.DataprocSubmitSparkJobOperator\"",
          "210:         \"DataprocSubmitSparkSqlJobOperator\": (",
          "211:             \"airflow.providers.google.cloud.operators.dataproc.DataprocSubmitSparkSqlJobOperator\"",
          "213:         \"DataprocClusterCreateOperator\": (",
          "214:             \"airflow.providers.google.cloud.operators.dataproc.DataprocCreateClusterOperator\"",
          "216:         \"DataprocClusterDeleteOperator\": (",
          "217:             \"airflow.providers.google.cloud.operators.dataproc.DataprocDeleteClusterOperator\"",
          "219:         \"DataprocClusterScaleOperator\": (",
          "220:             \"airflow.providers.google.cloud.operators.dataproc.DataprocScaleClusterOperator\"",
          "222:         \"DataProcHadoopOperator\": (",
          "223:             \"airflow.providers.google.cloud.operators.dataproc.DataprocSubmitHadoopJobOperator\"",
          "225:         \"DataProcHiveOperator\": (",
          "226:             \"airflow.providers.google.cloud.operators.dataproc.DataprocSubmitHiveJobOperator\"",
          "228:         \"DataProcJobBaseOperator\": (",
          "229:             \"airflow.providers.google.cloud.operators.dataproc.DataprocJobBaseOperator\"",
          "231:         \"DataProcPigOperator\": (",
          "232:             \"airflow.providers.google.cloud.operators.dataproc.DataprocSubmitPigJobOperator\"",
          "234:         \"DataProcPySparkOperator\": (",
          "235:             \"airflow.providers.google.cloud.operators.dataproc.DataprocSubmitPySparkJobOperator\"",
          "237:         \"DataProcSparkOperator\": (",
          "238:             \"airflow.providers.google.cloud.operators.dataproc.DataprocSubmitSparkJobOperator\"",
          "240:         \"DataProcSparkSqlOperator\": (",
          "241:             \"airflow.providers.google.cloud.operators.dataproc.DataprocSubmitSparkSqlJobOperator\"",
          "243:         \"DataprocWorkflowTemplateInstantiateInlineOperator\":",
          "244:             \"airflow.providers.google.cloud.operators.dataproc.\"",
          "245:             \"DataprocInstantiateInlineWorkflowTemplateOperator\",",
          "246:         \"DataprocWorkflowTemplateInstantiateOperator\": (",
          "247:             \"airflow.providers.google.cloud.operators.dataproc.DataprocInstantiateWorkflowTemplateOperator\"",
          "250:     \"datastore_export_operator\": {",
          "251:         \"CloudDatastoreExportEntitiesOperator\": (",
          "252:             \"airflow.providers.google.cloud.operators.datastore.CloudDatastoreExportEntitiesOperator\"",
          "254:         \"DatastoreExportOperator\": (",
          "255:             \"airflow.providers.google.cloud.operators.datastore.CloudDatastoreExportEntitiesOperator\"",
          "258:     \"datastore_import_operator\": {",
          "259:         \"CloudDatastoreImportEntitiesOperator\": (",
          "260:             \"airflow.providers.google.cloud.operators.datastore.CloudDatastoreImportEntitiesOperator\"",
          "262:         \"DatastoreImportOperator\": (",
          "263:             \"airflow.providers.google.cloud.operators.datastore.CloudDatastoreImportEntitiesOperator\"",
          "266:     \"dingding_operator\": {",
          "267:         \"DingdingOperator\": \"airflow.providers.dingding.operators.dingding.DingdingOperator\",",
          "269:     \"discord_webhook_operator\": {",
          "270:         \"DiscordWebhookOperator\": (",
          "271:             \"airflow.providers.discord.operators.discord_webhook.DiscordWebhookOperator\"",
          "274:     \"docker_swarm_operator\": {",
          "275:         \"DockerSwarmOperator\": \"airflow.providers.docker.operators.docker_swarm.DockerSwarmOperator\",",
          "277:     \"druid_operator\": {",
          "278:         \"DruidOperator\": \"airflow.providers.apache.druid.operators.druid.DruidOperator\",",
          "280:     \"dynamodb_to_s3\": {",
          "281:         \"DynamoDBToS3Operator\": \"airflow.providers.amazon.aws.transfers.dynamodb_to_s3.DynamoDBToS3Operator\",",
          "283:     \"ecs_operator\": {",
          "284:         \"EcsProtocol\": \"airflow.providers.amazon.aws.hooks.ecs.EcsProtocol\",",
          "285:         \"EcsRunTaskOperator\": \"airflow.providers.amazon.aws.operators.ecs.EcsRunTaskOperator\",",
          "286:         \"EcsOperator\": \"airflow.providers.amazon.aws.operators.ecs.EcsRunTaskOperator\",",
          "288:     \"file_to_gcs\": {",
          "289:         \"LocalFilesystemToGCSOperator\": (",
          "290:             \"airflow.providers.google.cloud.transfers.local_to_gcs.LocalFilesystemToGCSOperator\"",
          "292:         \"FileToGoogleCloudStorageOperator\": (",
          "293:             \"airflow.providers.google.cloud.transfers.local_to_gcs.LocalFilesystemToGCSOperator\"",
          "296:     \"file_to_wasb\": {",
          "297:         \"LocalFilesystemToWasbOperator\": (",
          "298:             \"airflow.providers.microsoft.azure.transfers.local_to_wasb.LocalFilesystemToWasbOperator\"",
          "300:         \"FileToWasbOperator\": (",
          "301:             \"airflow.providers.microsoft.azure.transfers.local_to_wasb.LocalFilesystemToWasbOperator\"",
          "304:     \"gcp_bigtable_operator\": {",
          "305:         \"BigtableCreateInstanceOperator\": (",
          "306:             \"airflow.providers.google.cloud.operators.bigtable.BigtableCreateInstanceOperator\"",
          "308:         \"BigtableCreateTableOperator\": (",
          "309:             \"airflow.providers.google.cloud.operators.bigtable.BigtableCreateTableOperator\"",
          "311:         \"BigtableDeleteInstanceOperator\": (",
          "312:             \"airflow.providers.google.cloud.operators.bigtable.BigtableDeleteInstanceOperator\"",
          "314:         \"BigtableDeleteTableOperator\": (",
          "315:             \"airflow.providers.google.cloud.operators.bigtable.BigtableDeleteTableOperator\"",
          "317:         \"BigtableUpdateClusterOperator\": (",
          "318:             \"airflow.providers.google.cloud.operators.bigtable.BigtableUpdateClusterOperator\"",
          "320:         \"BigtableTableReplicationCompletedSensor\": (",
          "321:             \"airflow.providers.google.cloud.sensors.bigtable.BigtableTableReplicationCompletedSensor\"",
          "323:         \"BigtableClusterUpdateOperator\": (",
          "324:             \"airflow.providers.google.cloud.operators.bigtable.BigtableUpdateClusterOperator\"",
          "326:         \"BigtableInstanceCreateOperator\": (",
          "327:             \"airflow.providers.google.cloud.operators.bigtable.BigtableCreateInstanceOperator\"",
          "329:         \"BigtableInstanceDeleteOperator\": (",
          "330:             \"airflow.providers.google.cloud.operators.bigtable.BigtableDeleteInstanceOperator\"",
          "332:         \"BigtableTableCreateOperator\": (",
          "333:             \"airflow.providers.google.cloud.operators.bigtable.BigtableCreateTableOperator\"",
          "335:         \"BigtableTableDeleteOperator\": (",
          "336:             \"airflow.providers.google.cloud.operators.bigtable.BigtableDeleteTableOperator\"",
          "338:         \"BigtableTableWaitForReplicationSensor\": (",
          "339:             \"airflow.providers.google.cloud.sensors.bigtable.BigtableTableReplicationCompletedSensor\"",
          "342:     \"gcp_cloud_build_operator\": {",
          "343:         \"CloudBuildCreateBuildOperator\": (",
          "344:             \"airflow.providers.google.cloud.operators.cloud_build.CloudBuildCreateBuildOperator\"",
          "347:     \"gcp_compute_operator\": {",
          "348:         \"ComputeEngineBaseOperator\": (",
          "349:             \"airflow.providers.google.cloud.operators.compute.ComputeEngineBaseOperator\"",
          "351:         \"ComputeEngineCopyInstanceTemplateOperator\": (",
          "352:             \"airflow.providers.google.cloud.operators.compute.ComputeEngineCopyInstanceTemplateOperator\"",
          "354:         \"ComputeEngineInstanceGroupUpdateManagerTemplateOperator\":",
          "355:             \"airflow.providers.google.cloud.operators.compute.\"",
          "356:             \"ComputeEngineInstanceGroupUpdateManagerTemplateOperator\",",
          "357:         \"ComputeEngineSetMachineTypeOperator\": (",
          "358:             \"airflow.providers.google.cloud.operators.compute.ComputeEngineSetMachineTypeOperator\"",
          "360:         \"ComputeEngineStartInstanceOperator\": (",
          "361:             \"airflow.providers.google.cloud.operators.compute.ComputeEngineStartInstanceOperator\"",
          "363:         \"ComputeEngineStopInstanceOperator\": (",
          "364:             \"airflow.providers.google.cloud.operators.compute.ComputeEngineStopInstanceOperator\"",
          "366:         \"GceBaseOperator\": \"airflow.providers.google.cloud.operators.compute.ComputeEngineBaseOperator\",",
          "367:         \"GceInstanceGroupManagerUpdateTemplateOperator\":",
          "368:             \"airflow.providers.google.cloud.operators.compute.\"",
          "369:             \"ComputeEngineInstanceGroupUpdateManagerTemplateOperator\",",
          "370:         \"GceInstanceStartOperator\": (",
          "371:             \"airflow.providers.google.cloud.operators.compute.ComputeEngineStartInstanceOperator\"",
          "373:         \"GceInstanceStopOperator\": (",
          "374:             \"airflow.providers.google.cloud.operators.compute.ComputeEngineStopInstanceOperator\"",
          "376:         \"GceInstanceTemplateCopyOperator\": (",
          "377:             \"airflow.providers.google.cloud.operators.compute.ComputeEngineCopyInstanceTemplateOperator\"",
          "379:         \"GceSetMachineTypeOperator\": (",
          "380:             \"airflow.providers.google.cloud.operators.compute.ComputeEngineSetMachineTypeOperator\"",
          "383:     \"gcp_container_operator\": {",
          "384:         \"GKECreateClusterOperator\": (",
          "385:             \"airflow.providers.google.cloud.operators.kubernetes_engine.GKECreateClusterOperator\"",
          "387:         \"GKEDeleteClusterOperator\": (",
          "388:             \"airflow.providers.google.cloud.operators.kubernetes_engine.GKEDeleteClusterOperator\"",
          "390:         \"GKEStartPodOperator\": (",
          "391:             \"airflow.providers.google.cloud.operators.kubernetes_engine.GKEStartPodOperator\"",
          "393:         \"GKEClusterCreateOperator\": (",
          "394:             \"airflow.providers.google.cloud.operators.kubernetes_engine.GKECreateClusterOperator\"",
          "396:         \"GKEClusterDeleteOperator\": (",
          "397:             \"airflow.providers.google.cloud.operators.kubernetes_engine.GKEDeleteClusterOperator\"",
          "399:         \"GKEPodOperator\": \"airflow.providers.google.cloud.operators.kubernetes_engine.GKEStartPodOperator\",",
          "401:     \"gcp_dlp_operator\": {",
          "402:         \"CloudDLPCancelDLPJobOperator\": (",
          "403:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPCancelDLPJobOperator\"",
          "405:         \"CloudDLPCreateDeidentifyTemplateOperator\": (",
          "406:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPCreateDeidentifyTemplateOperator\"",
          "408:         \"CloudDLPCreateDLPJobOperator\": (",
          "409:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPCreateDLPJobOperator\"",
          "411:         \"CloudDLPCreateInspectTemplateOperator\": (",
          "412:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPCreateInspectTemplateOperator\"",
          "414:         \"CloudDLPCreateJobTriggerOperator\": (",
          "415:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPCreateJobTriggerOperator\"",
          "417:         \"CloudDLPCreateStoredInfoTypeOperator\": (",
          "418:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPCreateStoredInfoTypeOperator\"",
          "420:         \"CloudDLPDeidentifyContentOperator\": (",
          "421:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPDeidentifyContentOperator\"",
          "423:         \"CloudDLPDeleteDeidentifyTemplateOperator\": (",
          "424:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPDeleteDeidentifyTemplateOperator\"",
          "426:         \"CloudDLPDeleteDLPJobOperator\": (",
          "427:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPDeleteDLPJobOperator\"",
          "429:         \"CloudDLPDeleteInspectTemplateOperator\": (",
          "430:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPDeleteInspectTemplateOperator\"",
          "432:         \"CloudDLPDeleteJobTriggerOperator\": (",
          "433:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPDeleteJobTriggerOperator\"",
          "435:         \"CloudDLPDeleteStoredInfoTypeOperator\": (",
          "436:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPDeleteStoredInfoTypeOperator\"",
          "438:         \"CloudDLPGetDeidentifyTemplateOperator\": (",
          "439:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPGetDeidentifyTemplateOperator\"",
          "441:         \"CloudDLPGetDLPJobOperator\": \"airflow.providers.google.cloud.operators.dlp.CloudDLPGetDLPJobOperator\",",
          "442:         \"CloudDLPGetDLPJobTriggerOperator\": (",
          "443:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPGetDLPJobTriggerOperator\"",
          "445:         \"CloudDLPGetInspectTemplateOperator\": (",
          "446:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPGetInspectTemplateOperator\"",
          "448:         \"CloudDLPGetStoredInfoTypeOperator\": (",
          "449:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPGetStoredInfoTypeOperator\"",
          "451:         \"CloudDLPInspectContentOperator\": (",
          "452:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPInspectContentOperator\"",
          "454:         \"CloudDLPListDeidentifyTemplatesOperator\": (",
          "455:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPListDeidentifyTemplatesOperator\"",
          "457:         \"CloudDLPListDLPJobsOperator\": (",
          "458:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPListDLPJobsOperator\"",
          "460:         \"CloudDLPListInfoTypesOperator\": (",
          "461:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPListInfoTypesOperator\"",
          "463:         \"CloudDLPListInspectTemplatesOperator\": (",
          "464:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPListInspectTemplatesOperator\"",
          "466:         \"CloudDLPListJobTriggersOperator\": (",
          "467:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPListJobTriggersOperator\"",
          "469:         \"CloudDLPListStoredInfoTypesOperator\": (",
          "470:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPListStoredInfoTypesOperator\"",
          "472:         \"CloudDLPRedactImageOperator\": (",
          "473:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPRedactImageOperator\"",
          "475:         \"CloudDLPReidentifyContentOperator\": (",
          "476:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPReidentifyContentOperator\"",
          "478:         \"CloudDLPUpdateDeidentifyTemplateOperator\": (",
          "479:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPUpdateDeidentifyTemplateOperator\"",
          "481:         \"CloudDLPUpdateInspectTemplateOperator\": (",
          "482:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPUpdateInspectTemplateOperator\"",
          "484:         \"CloudDLPUpdateJobTriggerOperator\": (",
          "485:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPUpdateJobTriggerOperator\"",
          "487:         \"CloudDLPUpdateStoredInfoTypeOperator\": (",
          "488:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPUpdateStoredInfoTypeOperator\"",
          "490:         \"CloudDLPDeleteDlpJobOperator\": (",
          "491:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPDeleteDLPJobOperator\"",
          "493:         \"CloudDLPGetDlpJobOperator\": \"airflow.providers.google.cloud.operators.dlp.CloudDLPGetDLPJobOperator\",",
          "494:         \"CloudDLPGetJobTripperOperator\": (",
          "495:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPGetDLPJobTriggerOperator\"",
          "497:         \"CloudDLPListDlpJobsOperator\": (",
          "498:             \"airflow.providers.google.cloud.operators.dlp.CloudDLPListDLPJobsOperator\"",
          "501:     \"gcp_function_operator\": {",
          "502:         \"CloudFunctionDeleteFunctionOperator\": (",
          "503:             \"airflow.providers.google.cloud.operators.functions.CloudFunctionDeleteFunctionOperator\"",
          "505:         \"CloudFunctionDeployFunctionOperator\": (",
          "506:             \"airflow.providers.google.cloud.operators.functions.CloudFunctionDeployFunctionOperator\"",
          "508:         \"GcfFunctionDeleteOperator\": (",
          "509:             \"airflow.providers.google.cloud.operators.functions.CloudFunctionDeleteFunctionOperator\"",
          "511:         \"GcfFunctionDeployOperator\": (",
          "512:             \"airflow.providers.google.cloud.operators.functions.CloudFunctionDeployFunctionOperator\"",
          "515:     \"gcp_natural_language_operator\": {",
          "516:         \"CloudNaturalLanguageAnalyzeEntitiesOperator\":",
          "517:             \"airflow.providers.google.cloud.operators.natural_language.\"",
          "518:             \"CloudNaturalLanguageAnalyzeEntitiesOperator\",",
          "519:         \"CloudNaturalLanguageAnalyzeEntitySentimentOperator\":",
          "520:             \"airflow.providers.google.cloud.operators.natural_language.\"",
          "521:             \"CloudNaturalLanguageAnalyzeEntitySentimentOperator\",",
          "522:         \"CloudNaturalLanguageAnalyzeSentimentOperator\":",
          "523:             \"airflow.providers.google.cloud.operators.natural_language.\"",
          "524:             \"CloudNaturalLanguageAnalyzeSentimentOperator\",",
          "525:         \"CloudNaturalLanguageClassifyTextOperator\":",
          "526:             \"airflow.providers.google.cloud.operators.natural_language.\"",
          "527:             \"CloudNaturalLanguageClassifyTextOperator\",",
          "528:         \"CloudLanguageAnalyzeEntitiesOperator\":",
          "529:             \"airflow.providers.google.cloud.operators.natural_language.\"",
          "530:             \"CloudNaturalLanguageAnalyzeEntitiesOperator\",",
          "531:         \"CloudLanguageAnalyzeEntitySentimentOperator\":",
          "532:             \"airflow.providers.google.cloud.operators.natural_language.\"",
          "533:             \"CloudNaturalLanguageAnalyzeEntitySentimentOperator\",",
          "534:         \"CloudLanguageAnalyzeSentimentOperator\":",
          "535:             \"airflow.providers.google.cloud.operators.natural_language.\"",
          "536:             \"CloudNaturalLanguageAnalyzeSentimentOperator\",",
          "537:         \"CloudLanguageClassifyTextOperator\":",
          "538:             \"airflow.providers.google.cloud.operators.natural_language.\"",
          "539:             \"CloudNaturalLanguageClassifyTextOperator\",",
          "541:     \"gcp_spanner_operator\": {",
          "542:         \"SpannerDeleteDatabaseInstanceOperator\": (",
          "543:             \"airflow.providers.google.cloud.operators.spanner.SpannerDeleteDatabaseInstanceOperator\"",
          "545:         \"SpannerDeleteInstanceOperator\": (",
          "546:             \"airflow.providers.google.cloud.operators.spanner.SpannerDeleteInstanceOperator\"",
          "548:         \"SpannerDeployDatabaseInstanceOperator\": (",
          "549:             \"airflow.providers.google.cloud.operators.spanner.SpannerDeployDatabaseInstanceOperator\"",
          "551:         \"SpannerDeployInstanceOperator\": (",
          "552:             \"airflow.providers.google.cloud.operators.spanner.SpannerDeployInstanceOperator\"",
          "554:         \"SpannerQueryDatabaseInstanceOperator\": (",
          "555:             \"airflow.providers.google.cloud.operators.spanner.SpannerQueryDatabaseInstanceOperator\"",
          "557:         \"SpannerUpdateDatabaseInstanceOperator\": (",
          "558:             \"airflow.providers.google.cloud.operators.spanner.SpannerUpdateDatabaseInstanceOperator\"",
          "560:         \"CloudSpannerInstanceDatabaseDeleteOperator\": (",
          "561:             \"airflow.providers.google.cloud.operators.spanner.SpannerDeleteDatabaseInstanceOperator\"",
          "563:         \"CloudSpannerInstanceDatabaseDeployOperator\": (",
          "564:             \"airflow.providers.google.cloud.operators.spanner.SpannerDeployDatabaseInstanceOperator\"",
          "566:         \"CloudSpannerInstanceDatabaseQueryOperator\": (",
          "567:             \"airflow.providers.google.cloud.operators.spanner.SpannerQueryDatabaseInstanceOperator\"",
          "569:         \"CloudSpannerInstanceDatabaseUpdateOperator\": (",
          "570:             \"airflow.providers.google.cloud.operators.spanner.SpannerUpdateDatabaseInstanceOperator\"",
          "572:         \"CloudSpannerInstanceDeleteOperator\": (",
          "573:             \"airflow.providers.google.cloud.operators.spanner.SpannerDeleteInstanceOperator\"",
          "575:         \"CloudSpannerInstanceDeployOperator\": (",
          "576:             \"airflow.providers.google.cloud.operators.spanner.SpannerDeployInstanceOperator\"",
          "579:     \"gcp_speech_to_text_operator\": {",
          "580:         \"CloudSpeechToTextRecognizeSpeechOperator\": (",
          "581:             \"airflow.providers.google.cloud.operators.speech_to_text.CloudSpeechToTextRecognizeSpeechOperator\"",
          "583:         \"GcpSpeechToTextRecognizeSpeechOperator\": (",
          "584:             \"airflow.providers.google.cloud.operators.speech_to_text.CloudSpeechToTextRecognizeSpeechOperator\"",
          "587:     \"gcp_sql_operator\": {",
          "588:         \"CloudSQLBaseOperator\": \"airflow.providers.google.cloud.operators.cloud_sql.CloudSQLBaseOperator\",",
          "589:         \"CloudSQLCreateInstanceDatabaseOperator\": (",
          "590:             \"airflow.providers.google.cloud.operators.cloud_sql.CloudSQLCreateInstanceDatabaseOperator\"",
          "592:         \"CloudSQLCreateInstanceOperator\": (",
          "593:             \"airflow.providers.google.cloud.operators.cloud_sql.CloudSQLCreateInstanceOperator\"",
          "595:         \"CloudSQLDeleteInstanceDatabaseOperator\": (",
          "596:             \"airflow.providers.google.cloud.operators.cloud_sql.CloudSQLDeleteInstanceDatabaseOperator\"",
          "598:         \"CloudSQLDeleteInstanceOperator\": (",
          "599:             \"airflow.providers.google.cloud.operators.cloud_sql.CloudSQLDeleteInstanceOperator\"",
          "601:         \"CloudSQLExecuteQueryOperator\": (",
          "602:             \"airflow.providers.google.cloud.operators.cloud_sql.CloudSQLExecuteQueryOperator\"",
          "604:         \"CloudSQLExportInstanceOperator\": (",
          "605:             \"airflow.providers.google.cloud.operators.cloud_sql.CloudSQLExportInstanceOperator\"",
          "607:         \"CloudSQLImportInstanceOperator\": (",
          "608:             \"airflow.providers.google.cloud.operators.cloud_sql.CloudSQLImportInstanceOperator\"",
          "610:         \"CloudSQLInstancePatchOperator\": (",
          "611:             \"airflow.providers.google.cloud.operators.cloud_sql.CloudSQLInstancePatchOperator\"",
          "613:         \"CloudSQLPatchInstanceDatabaseOperator\": (",
          "614:             \"airflow.providers.google.cloud.operators.cloud_sql.CloudSQLPatchInstanceDatabaseOperator\"",
          "616:         \"CloudSqlBaseOperator\": \"airflow.providers.google.cloud.operators.cloud_sql.CloudSQLBaseOperator\",",
          "617:         \"CloudSqlInstanceCreateOperator\": (",
          "618:             \"airflow.providers.google.cloud.operators.cloud_sql.CloudSQLCreateInstanceOperator\"",
          "620:         \"CloudSqlInstanceDatabaseCreateOperator\": (",
          "621:             \"airflow.providers.google.cloud.operators.cloud_sql.CloudSQLCreateInstanceDatabaseOperator\"",
          "623:         \"CloudSqlInstanceDatabaseDeleteOperator\": (",
          "624:             \"airflow.providers.google.cloud.operators.cloud_sql.CloudSQLDeleteInstanceDatabaseOperator\"",
          "626:         \"CloudSqlInstanceDatabasePatchOperator\": (",
          "627:             \"airflow.providers.google.cloud.operators.cloud_sql.CloudSQLPatchInstanceDatabaseOperator\"",
          "629:         \"CloudSqlInstanceDeleteOperator\": (",
          "630:             \"airflow.providers.google.cloud.operators.cloud_sql.CloudSQLDeleteInstanceOperator\"",
          "632:         \"CloudSqlInstanceExportOperator\": (",
          "633:             \"airflow.providers.google.cloud.operators.cloud_sql.CloudSQLExportInstanceOperator\"",
          "635:         \"CloudSqlInstanceImportOperator\": (",
          "636:             \"airflow.providers.google.cloud.operators.cloud_sql.CloudSQLImportInstanceOperator\"",
          "638:         \"CloudSqlInstancePatchOperator\": (",
          "639:             \"airflow.providers.google.cloud.operators.cloud_sql.CloudSQLInstancePatchOperator\"",
          "641:         \"CloudSqlQueryOperator\": (",
          "642:             \"airflow.providers.google.cloud.operators.cloud_sql.CloudSQLExecuteQueryOperator\"",
          "645:     \"gcp_tasks_operator\": {",
          "646:         \"CloudTasksQueueCreateOperator\": (",
          "647:             \"airflow.providers.google.cloud.operators.tasks.CloudTasksQueueCreateOperator\"",
          "649:         \"CloudTasksQueueDeleteOperator\": (",
          "650:             \"airflow.providers.google.cloud.operators.tasks.CloudTasksQueueDeleteOperator\"",
          "651:         ),",
          "652:         \"CloudTasksQueueGetOperator\": (",
          "653:             \"airflow.providers.google.cloud.operators.tasks.CloudTasksQueueGetOperator\"",
          "654:         ),",
          "655:         \"CloudTasksQueuePauseOperator\": (",
          "656:             \"airflow.providers.google.cloud.operators.tasks.CloudTasksQueuePauseOperator\"",
          "657:         ),",
          "658:         \"CloudTasksQueuePurgeOperator\": (",
          "659:             \"airflow.providers.google.cloud.operators.tasks.CloudTasksQueuePurgeOperator\"",
          "660:         ),",
          "661:         \"CloudTasksQueueResumeOperator\": (",
          "662:             \"airflow.providers.google.cloud.operators.tasks.CloudTasksQueueResumeOperator\"",
          "663:         ),",
          "664:         \"CloudTasksQueuesListOperator\": (",
          "665:             \"airflow.providers.google.cloud.operators.tasks.CloudTasksQueuesListOperator\"",
          "666:         ),",
          "667:         \"CloudTasksQueueUpdateOperator\": (",
          "668:             \"airflow.providers.google.cloud.operators.tasks.CloudTasksQueueUpdateOperator\"",
          "669:         ),",
          "670:         \"CloudTasksTaskCreateOperator\": (",
          "671:             \"airflow.providers.google.cloud.operators.tasks.CloudTasksTaskCreateOperator\"",
          "672:         ),",
          "673:         \"CloudTasksTaskDeleteOperator\": (",
          "674:             \"airflow.providers.google.cloud.operators.tasks.CloudTasksTaskDeleteOperator\"",
          "675:         ),",
          "676:         \"CloudTasksTaskGetOperator\": (",
          "677:             \"airflow.providers.google.cloud.operators.tasks.CloudTasksTaskGetOperator\"",
          "678:         ),",
          "679:         \"CloudTasksTaskRunOperator\": (",
          "680:             \"airflow.providers.google.cloud.operators.tasks.CloudTasksTaskRunOperator\"",
          "681:         ),",
          "682:         \"CloudTasksTasksListOperator\": (",
          "683:             \"airflow.providers.google.cloud.operators.tasks.CloudTasksTasksListOperator\"",
          "684:         ),",
          "685:     },",
          "686:     \"gcp_text_to_speech_operator\": {",
          "687:         \"CloudTextToSpeechSynthesizeOperator\": (",
          "688:             \"airflow.providers.google.cloud.operators.text_to_speech.CloudTextToSpeechSynthesizeOperator\"",
          "689:         ),",
          "690:         \"GcpTextToSpeechSynthesizeOperator\": (",
          "691:             \"airflow.providers.google.cloud.operators.text_to_speech.CloudTextToSpeechSynthesizeOperator\"",
          "692:         ),",
          "693:     },",
          "694:     \"gcp_transfer_operator\": {",
          "695:         \"CloudDataTransferServiceCancelOperationOperator\":",
          "696:             \"airflow.providers.google.cloud.operators.cloud_storage_transfer_service.\"",
          "697:             \"CloudDataTransferServiceCancelOperationOperator\",",
          "698:         \"CloudDataTransferServiceCreateJobOperator\":",
          "699:             \"airflow.providers.google.cloud.operators.cloud_storage_transfer_service.\"",
          "700:             \"CloudDataTransferServiceCreateJobOperator\",",
          "701:         \"CloudDataTransferServiceDeleteJobOperator\":",
          "702:             \"airflow.providers.google.cloud.operators.cloud_storage_transfer_service.\"",
          "703:             \"CloudDataTransferServiceDeleteJobOperator\",",
          "704:         \"CloudDataTransferServiceGCSToGCSOperator\":",
          "705:             \"airflow.providers.google.cloud.operators.cloud_storage_transfer_service.\"",
          "706:             \"CloudDataTransferServiceGCSToGCSOperator\",",
          "707:         \"CloudDataTransferServiceGetOperationOperator\":",
          "708:             \"airflow.providers.google.cloud.operators.cloud_storage_transfer_service.\"",
          "709:             \"CloudDataTransferServiceGetOperationOperator\",",
          "710:         \"CloudDataTransferServiceListOperationsOperator\":",
          "711:             \"airflow.providers.google.cloud.operators.cloud_storage_transfer_service.\"",
          "712:             \"CloudDataTransferServiceListOperationsOperator\",",
          "713:         \"CloudDataTransferServicePauseOperationOperator\":",
          "714:             \"airflow.providers.google.cloud.operators.cloud_storage_transfer_service.\"",
          "715:             \"CloudDataTransferServicePauseOperationOperator\",",
          "716:         \"CloudDataTransferServiceResumeOperationOperator\":",
          "717:             \"airflow.providers.google.cloud.operators.cloud_storage_transfer_service.\"",
          "718:             \"CloudDataTransferServiceResumeOperationOperator\",",
          "719:         \"CloudDataTransferServiceS3ToGCSOperator\":",
          "720:             \"airflow.providers.google.cloud.operators.cloud_storage_transfer_service.\"",
          "721:             \"CloudDataTransferServiceS3ToGCSOperator\",",
          "722:         \"CloudDataTransferServiceUpdateJobOperator\":",
          "723:             \"airflow.providers.google.cloud.operators.cloud_storage_transfer_service.\"",
          "724:             \"CloudDataTransferServiceUpdateJobOperator\",",
          "725:         \"GcpTransferServiceJobCreateOperator\":",
          "726:             \"airflow.providers.google.cloud.operators.cloud_storage_transfer_service.\"",
          "727:             \"CloudDataTransferServiceCreateJobOperator\",",
          "728:         \"GcpTransferServiceJobDeleteOperator\":",
          "729:             \"airflow.providers.google.cloud.operators.cloud_storage_transfer_service.\"",
          "730:             \"CloudDataTransferServiceDeleteJobOperator\",",
          "731:         \"GcpTransferServiceJobUpdateOperator\":",
          "732:             \"airflow.providers.google.cloud.operators.cloud_storage_transfer_service.\"",
          "733:             \"CloudDataTransferServiceUpdateJobOperator\",",
          "734:         \"GcpTransferServiceOperationCancelOperator\":",
          "735:             \"airflow.providers.google.cloud.operators.cloud_storage_transfer_service.\"",
          "736:             \"CloudDataTransferServiceCancelOperationOperator\",",
          "737:         \"GcpTransferServiceOperationGetOperator\":",
          "738:             \"airflow.providers.google.cloud.operators.cloud_storage_transfer_service.\"",
          "739:             \"CloudDataTransferServiceGetOperationOperator\",",
          "740:         \"GcpTransferServiceOperationPauseOperator\":",
          "741:             \"airflow.providers.google.cloud.operators.cloud_storage_transfer_service.\"",
          "742:             \"CloudDataTransferServicePauseOperationOperator\",",
          "743:         \"GcpTransferServiceOperationResumeOperator\":",
          "744:             \"airflow.providers.google.cloud.operators.cloud_storage_transfer_service.\"",
          "745:             \"CloudDataTransferServiceResumeOperationOperator\",",
          "746:         \"GcpTransferServiceOperationsListOperator\":",
          "747:             \"airflow.providers.google.cloud.operators.cloud_storage_transfer_service.\"",
          "748:             \"CloudDataTransferServiceListOperationsOperator\",",
          "749:         \"GoogleCloudStorageToGoogleCloudStorageTransferOperator\":",
          "750:             \"airflow.providers.google.cloud.operators.cloud_storage_transfer_service.\"",
          "751:             \"CloudDataTransferServiceGCSToGCSOperator\",",
          "752:         \"S3ToGoogleCloudStorageTransferOperator\":",
          "753:             \"airflow.providers.google.cloud.operators.cloud_storage_transfer_service.\"",
          "754:             \"CloudDataTransferServiceS3ToGCSOperator\",",
          "755:     },",
          "756:     \"gcp_translate_operator\": {",
          "757:         \"CloudTranslateTextOperator\": (",
          "758:             \"airflow.providers.google.cloud.operators.translate.CloudTranslateTextOperator\"",
          "759:         ),",
          "760:     },",
          "761:     \"gcp_translate_speech_operator\": {",
          "762:         \"CloudTranslateSpeechOperator\": (",
          "763:             \"airflow.providers.google.cloud.operators.translate_speech.CloudTranslateSpeechOperator\"",
          "764:         ),",
          "765:         \"GcpTranslateSpeechOperator\": (",
          "766:             \"airflow.providers.google.cloud.operators.translate_speech.CloudTranslateSpeechOperator\"",
          "767:         ),",
          "768:     },",
          "769:     \"gcp_video_intelligence_operator\": {",
          "770:         \"CloudVideoIntelligenceDetectVideoExplicitContentOperator\":",
          "771:             \"airflow.providers.google.cloud.operators.video_intelligence.\"",
          "772:             \"CloudVideoIntelligenceDetectVideoExplicitContentOperator\",",
          "773:         \"CloudVideoIntelligenceDetectVideoLabelsOperator\":",
          "774:             \"airflow.providers.google.cloud.operators.video_intelligence.\"",
          "775:             \"CloudVideoIntelligenceDetectVideoLabelsOperator\",",
          "776:         \"CloudVideoIntelligenceDetectVideoShotsOperator\":",
          "777:             \"airflow.providers.google.cloud.operators.video_intelligence.\"",
          "778:             \"CloudVideoIntelligenceDetectVideoShotsOperator\",",
          "779:     },",
          "780:     \"gcp_vision_operator\": {",
          "781:         \"CloudVisionAddProductToProductSetOperator\": (",
          "782:             \"airflow.providers.google.cloud.operators.vision.CloudVisionAddProductToProductSetOperator\"",
          "783:         ),",
          "784:         \"CloudVisionCreateProductOperator\": (",
          "785:             \"airflow.providers.google.cloud.operators.vision.CloudVisionCreateProductOperator\"",
          "786:         ),",
          "787:         \"CloudVisionCreateProductSetOperator\": (",
          "788:             \"airflow.providers.google.cloud.operators.vision.CloudVisionCreateProductSetOperator\"",
          "789:         ),",
          "790:         \"CloudVisionCreateReferenceImageOperator\": (",
          "791:             \"airflow.providers.google.cloud.operators.vision.CloudVisionCreateReferenceImageOperator\"",
          "792:         ),",
          "793:         \"CloudVisionDeleteProductOperator\": (",
          "794:             \"airflow.providers.google.cloud.operators.vision.CloudVisionDeleteProductOperator\"",
          "795:         ),",
          "796:         \"CloudVisionDeleteProductSetOperator\": (",
          "797:             \"airflow.providers.google.cloud.operators.vision.CloudVisionDeleteProductSetOperator\"",
          "798:         ),",
          "799:         \"CloudVisionDetectImageLabelsOperator\": (",
          "800:             \"airflow.providers.google.cloud.operators.vision.CloudVisionDetectImageLabelsOperator\"",
          "801:         ),",
          "802:         \"CloudVisionDetectImageSafeSearchOperator\": (",
          "803:             \"airflow.providers.google.cloud.operators.vision.CloudVisionDetectImageSafeSearchOperator\"",
          "804:         ),",
          "805:         \"CloudVisionDetectTextOperator\": (",
          "806:             \"airflow.providers.google.cloud.operators.vision.CloudVisionDetectTextOperator\"",
          "808:         \"CloudVisionGetProductOperator\": (",
          "809:             \"airflow.providers.google.cloud.operators.vision.CloudVisionGetProductOperator\"",
          "811:         \"CloudVisionGetProductSetOperator\": (",
          "812:             \"airflow.providers.google.cloud.operators.vision.CloudVisionGetProductSetOperator\"",
          "814:         \"CloudVisionImageAnnotateOperator\": (",
          "815:             \"airflow.providers.google.cloud.operators.vision.CloudVisionImageAnnotateOperator\"",
          "817:         \"CloudVisionRemoveProductFromProductSetOperator\": (",
          "818:             \"airflow.providers.google.cloud.operators.vision.CloudVisionRemoveProductFromProductSetOperator\"",
          "820:         \"CloudVisionTextDetectOperator\": (",
          "821:             \"airflow.providers.google.cloud.operators.vision.CloudVisionTextDetectOperator\"",
          "823:         \"CloudVisionUpdateProductOperator\": (",
          "824:             \"airflow.providers.google.cloud.operators.vision.CloudVisionUpdateProductOperator\"",
          "826:         \"CloudVisionUpdateProductSetOperator\": (",
          "827:             \"airflow.providers.google.cloud.operators.vision.CloudVisionUpdateProductSetOperator\"",
          "829:         \"CloudVisionAnnotateImageOperator\": (",
          "830:             \"airflow.providers.google.cloud.operators.vision.CloudVisionImageAnnotateOperator\"",
          "832:         \"CloudVisionDetectDocumentTextOperator\": (",
          "833:             \"airflow.providers.google.cloud.operators.vision.CloudVisionTextDetectOperator\"",
          "835:         \"CloudVisionProductCreateOperator\": (",
          "836:             \"airflow.providers.google.cloud.operators.vision.CloudVisionCreateProductOperator\"",
          "838:         \"CloudVisionProductDeleteOperator\": (",
          "839:             \"airflow.providers.google.cloud.operators.vision.CloudVisionDeleteProductOperator\"",
          "841:         \"CloudVisionProductGetOperator\": (",
          "842:             \"airflow.providers.google.cloud.operators.vision.CloudVisionGetProductOperator\"",
          "844:         \"CloudVisionProductSetCreateOperator\": (",
          "845:             \"airflow.providers.google.cloud.operators.vision.CloudVisionCreateProductSetOperator\"",
          "847:         \"CloudVisionProductSetDeleteOperator\": (",
          "848:             \"airflow.providers.google.cloud.operators.vision.CloudVisionDeleteProductSetOperator\"",
          "850:         \"CloudVisionProductSetGetOperator\": (",
          "851:             \"airflow.providers.google.cloud.operators.vision.CloudVisionGetProductSetOperator\"",
          "853:         \"CloudVisionProductSetUpdateOperator\": (",
          "854:             \"airflow.providers.google.cloud.operators.vision.CloudVisionUpdateProductSetOperator\"",
          "856:         \"CloudVisionProductUpdateOperator\": (",
          "857:             \"airflow.providers.google.cloud.operators.vision.CloudVisionUpdateProductOperator\"",
          "859:         \"CloudVisionReferenceImageCreateOperator\": (",
          "860:             \"airflow.providers.google.cloud.operators.vision.CloudVisionCreateReferenceImageOperator\"",
          "863:     \"gcs_acl_operator\": {",
          "864:         \"GCSBucketCreateAclEntryOperator\": (",
          "865:             \"airflow.providers.google.cloud.operators.gcs.GCSBucketCreateAclEntryOperator\"",
          "867:         \"GCSObjectCreateAclEntryOperator\": (",
          "868:             \"airflow.providers.google.cloud.operators.gcs.GCSObjectCreateAclEntryOperator\"",
          "870:         \"GoogleCloudStorageBucketCreateAclEntryOperator\": (",
          "871:             \"airflow.providers.google.cloud.operators.gcs.GCSBucketCreateAclEntryOperator\"",
          "873:         \"GoogleCloudStorageObjectCreateAclEntryOperator\": (",
          "874:             \"airflow.providers.google.cloud.operators.gcs.GCSObjectCreateAclEntryOperator\"",
          "877:     \"gcs_delete_operator\": {",
          "878:         \"GCSDeleteObjectsOperator\": \"airflow.providers.google.cloud.operators.gcs.GCSDeleteObjectsOperator\",",
          "879:         \"GoogleCloudStorageDeleteOperator\": (",
          "880:             \"airflow.providers.google.cloud.operators.gcs.GCSDeleteObjectsOperator\"",
          "883:     \"gcs_download_operator\": {",
          "884:         \"GCSToLocalFilesystemOperator\": (",
          "885:             \"airflow.providers.google.cloud.transfers.gcs_to_local.GCSToLocalFilesystemOperator\"",
          "887:         \"GoogleCloudStorageDownloadOperator\": (",
          "888:             \"airflow.providers.google.cloud.transfers.gcs_to_local.GCSToLocalFilesystemOperator\"",
          "891:     \"gcs_list_operator\": {",
          "892:         \"GCSListObjectsOperator\": \"airflow.providers.google.cloud.operators.gcs.GCSListObjectsOperator\",",
          "893:         \"GoogleCloudStorageListOperator\": (",
          "894:             \"airflow.providers.google.cloud.operators.gcs.GCSListObjectsOperator\"",
          "897:     \"gcs_operator\": {",
          "898:         \"GCSCreateBucketOperator\": \"airflow.providers.google.cloud.operators.gcs.GCSCreateBucketOperator\",",
          "899:         \"GoogleCloudStorageCreateBucketOperator\": (",
          "900:             \"airflow.providers.google.cloud.operators.gcs.GCSCreateBucketOperator\"",
          "903:     \"gcs_to_bq\": {",
          "904:         \"GCSToBigQueryOperator\": (",
          "905:             \"airflow.providers.google.cloud.transfers.gcs_to_bigquery.GCSToBigQueryOperator\"",
          "907:         \"GoogleCloudStorageToBigQueryOperator\": (",
          "908:             \"airflow.providers.google.cloud.transfers.gcs_to_bigquery.GCSToBigQueryOperator\"",
          "911:     \"gcs_to_gcs\": {",
          "912:         \"GCSToGCSOperator\": \"airflow.providers.google.cloud.transfers.gcs_to_gcs.GCSToGCSOperator\",",
          "913:         \"GoogleCloudStorageToGoogleCloudStorageOperator\": (",
          "914:             \"airflow.providers.google.cloud.transfers.gcs_to_gcs.GCSToGCSOperator\"",
          "917:     \"gcs_to_gdrive_operator\": {",
          "918:         \"GCSToGoogleDriveOperator\": (",
          "919:             \"airflow.providers.google.suite.transfers.gcs_to_gdrive.GCSToGoogleDriveOperator\"",
          "922:     \"gcs_to_s3\": {",
          "923:         \"GCSToS3Operator\": \"airflow.providers.amazon.aws.transfers.gcs_to_s3.GCSToS3Operator\",",
          "924:         \"GoogleCloudStorageToS3Operator\": \"airflow.providers.amazon.aws.transfers.gcs_to_s3.GCSToS3Operator\",",
          "926:     \"grpc_operator\": {",
          "927:         \"GrpcOperator\": \"airflow.providers.grpc.operators.grpc.GrpcOperator\",",
          "929:     \"hive_to_dynamodb\": {",
          "930:         \"HiveToDynamoDBOperator\": (",
          "931:             \"airflow.providers.amazon.aws.transfers.hive_to_dynamodb.HiveToDynamoDBOperator\"",
          "934:     \"imap_attachment_to_s3_operator\": {",
          "935:         \"ImapAttachmentToS3Operator\": (",
          "936:             \"airflow.providers.amazon.aws.transfers.imap_attachment_to_s3.ImapAttachmentToS3Operator\"",
          "939:     \"jenkins_job_trigger_operator\": {",
          "940:         \"JenkinsJobTriggerOperator\": (",
          "941:             \"airflow.providers.jenkins.operators.jenkins_job_trigger.JenkinsJobTriggerOperator\"",
          "944:     \"jira_operator\": {",
          "945:         \"JiraOperator\": \"airflow.providers.atlassian.jira.operators.jira.JiraOperator\",",
          "947:     \"kubernetes_pod_operator\": {",
          "948:         \"KubernetesPodOperator\": (",
          "949:             \"airflow.providers.cncf.kubernetes.operators.pod.KubernetesPodOperator\"",
          "952:     \"mlengine_operator\": {",
          "953:         \"MLEngineManageModelOperator\": (",
          "954:             \"airflow.providers.google.cloud.operators.mlengine.MLEngineManageModelOperator\"",
          "956:         \"MLEngineManageVersionOperator\": (",
          "957:             \"airflow.providers.google.cloud.operators.mlengine.MLEngineManageVersionOperator\"",
          "959:         \"MLEngineStartBatchPredictionJobOperator\": (",
          "960:             \"airflow.providers.google.cloud.operators.mlengine.MLEngineStartBatchPredictionJobOperator\"",
          "962:         \"MLEngineStartTrainingJobOperator\": (",
          "963:             \"airflow.providers.google.cloud.operators.mlengine.MLEngineStartTrainingJobOperator\"",
          "965:         \"MLEngineBatchPredictionOperator\": (",
          "966:             \"airflow.providers.google.cloud.operators.mlengine.MLEngineStartBatchPredictionJobOperator\"",
          "968:         \"MLEngineModelOperator\": (",
          "969:             \"airflow.providers.google.cloud.operators.mlengine.MLEngineManageModelOperator\"",
          "971:         \"MLEngineTrainingOperator\": (",
          "972:             \"airflow.providers.google.cloud.operators.mlengine.MLEngineStartTrainingJobOperator\"",
          "974:         \"MLEngineVersionOperator\": (",
          "975:             \"airflow.providers.google.cloud.operators.mlengine.MLEngineManageVersionOperator\"",
          "978:     \"mongo_to_s3\": {",
          "979:         \"MongoToS3Operator\": \"airflow.providers.amazon.aws.transfers.mongo_to_s3.MongoToS3Operator\",",
          "981:     \"mssql_to_gcs\": {",
          "982:         \"MSSQLToGCSOperator\": \"airflow.providers.google.cloud.transfers.mssql_to_gcs.MSSQLToGCSOperator\",",
          "983:         \"MsSqlToGoogleCloudStorageOperator\": (",
          "984:             \"airflow.providers.google.cloud.transfers.mssql_to_gcs.MSSQLToGCSOperator\"",
          "987:     \"mysql_to_gcs\": {",
          "988:         \"MySQLToGCSOperator\": \"airflow.providers.google.cloud.transfers.mysql_to_gcs.MySQLToGCSOperator\",",
          "989:         \"MySqlToGoogleCloudStorageOperator\": (",
          "990:             \"airflow.providers.google.cloud.transfers.mysql_to_gcs.MySQLToGCSOperator\"",
          "993:     \"opsgenie_alert_operator\": {",
          "994:         \"OpsgenieCreateAlertOperator\": (",
          "995:             \"airflow.providers.opsgenie.operators.opsgenie.OpsgenieCreateAlertOperator\"",
          "997:         \"OpsgenieAlertOperator\": \"airflow.providers.opsgenie.operators.opsgenie.OpsgenieCreateAlertOperator\",",
          "999:     \"oracle_to_azure_data_lake_transfer\": {",
          "1000:         \"OracleToAzureDataLakeOperator\":",
          "1001:             \"airflow.providers.microsoft.azure.transfers.\"",
          "1002:             \"oracle_to_azure_data_lake.OracleToAzureDataLakeOperator\",",
          "1004:     \"oracle_to_oracle_transfer\": {",
          "1005:         \"OracleToOracleOperator\": (",
          "1006:             \"airflow.providers.oracle.transfers.oracle_to_oracle.OracleToOracleOperator\"",
          "1008:         \"OracleToOracleTransfer\": (",
          "1009:             \"airflow.providers.oracle.transfers.oracle_to_oracle.OracleToOracleOperator\"",
          "1012:     \"postgres_to_gcs_operator\": {",
          "1013:         \"PostgresToGCSOperator\": (",
          "1014:             \"airflow.providers.google.cloud.transfers.postgres_to_gcs.PostgresToGCSOperator\"",
          "1016:         \"PostgresToGoogleCloudStorageOperator\": (",
          "1017:             \"airflow.providers.google.cloud.transfers.postgres_to_gcs.PostgresToGCSOperator\"",
          "1020:     \"pubsub_operator\": {",
          "1021:         \"PubSubCreateSubscriptionOperator\": (",
          "1022:             \"airflow.providers.google.cloud.operators.pubsub.PubSubCreateSubscriptionOperator\"",
          "1024:         \"PubSubCreateTopicOperator\": (",
          "1025:             \"airflow.providers.google.cloud.operators.pubsub.PubSubCreateTopicOperator\"",
          "1027:         \"PubSubDeleteSubscriptionOperator\": (",
          "1028:             \"airflow.providers.google.cloud.operators.pubsub.PubSubDeleteSubscriptionOperator\"",
          "1030:         \"PubSubDeleteTopicOperator\": (",
          "1031:             \"airflow.providers.google.cloud.operators.pubsub.PubSubDeleteTopicOperator\"",
          "1033:         \"PubSubPublishMessageOperator\": (",
          "1034:             \"airflow.providers.google.cloud.operators.pubsub.PubSubPublishMessageOperator\"",
          "1036:         \"PubSubPublishOperator\": (",
          "1037:             \"airflow.providers.google.cloud.operators.pubsub.PubSubPublishMessageOperator\"",
          "1039:         \"PubSubSubscriptionCreateOperator\": (",
          "1040:             \"airflow.providers.google.cloud.operators.pubsub.PubSubCreateSubscriptionOperator\"",
          "1042:         \"PubSubSubscriptionDeleteOperator\": (",
          "1043:             \"airflow.providers.google.cloud.operators.pubsub.PubSubDeleteSubscriptionOperator\"",
          "1045:         \"PubSubTopicCreateOperator\": (",
          "1046:             \"airflow.providers.google.cloud.operators.pubsub.PubSubCreateTopicOperator\"",
          "1048:         \"PubSubTopicDeleteOperator\": (",
          "1049:             \"airflow.providers.google.cloud.operators.pubsub.PubSubDeleteTopicOperator\"",
          "1052:     \"qubole_check_operator\": {",
          "1053:         \"QuboleCheckOperator\": \"airflow.providers.qubole.operators.qubole_check.QuboleCheckOperator\",",
          "1054:         \"QuboleValueCheckOperator\": (",
          "1055:             \"airflow.providers.qubole.operators.qubole_check.QuboleValueCheckOperator\"",
          "1058:     \"qubole_operator\": {",
          "1059:         \"QuboleOperator\": \"airflow.providers.qubole.operators.qubole.QuboleOperator\",",
          "1061:     \"redis_publish_operator\": {",
          "1062:         \"RedisPublishOperator\": \"airflow.providers.redis.operators.redis_publish.RedisPublishOperator\",",
          "1064:     \"s3_to_gcs_operator\": {",
          "1065:         \"S3ToGCSOperator\": \"airflow.providers.google.cloud.transfers.s3_to_gcs.S3ToGCSOperator\",",
          "1067:     \"s3_to_gcs_transfer_operator\": {",
          "1068:         \"CloudDataTransferServiceS3ToGCSOperator\":",
          "1069:             \"airflow.providers.google.cloud.operators.cloud_storage_transfer_service.\"",
          "1070:             \"CloudDataTransferServiceS3ToGCSOperator\",",
          "1072:     \"s3_to_sftp_operator\": {",
          "1073:         \"S3ToSFTPOperator\": \"airflow.providers.amazon.aws.transfers.s3_to_sftp.S3ToSFTPOperator\",",
          "1075:     \"segment_track_event_operator\": {",
          "1076:         \"SegmentTrackEventOperator\": (",
          "1077:             \"airflow.providers.segment.operators.segment_track_event.SegmentTrackEventOperator\"",
          "1080:     \"sftp_operator\": {",
          "1081:         \"SFTPOperator\": \"airflow.providers.sftp.operators.sftp.SFTPOperator\",",
          "1083:     \"sftp_to_s3_operator\": {",
          "1084:         \"SFTPToS3Operator\": \"airflow.providers.amazon.aws.transfers.sftp_to_s3.SFTPToS3Operator\",",
          "1086:     \"slack_webhook_operator\": {",
          "1087:         \"SlackWebhookOperator\": \"airflow.providers.slack.operators.slack_webhook.SlackWebhookOperator\",",
          "1089:     \"snowflake_operator\": {",
          "1090:         \"SnowflakeOperator\": \"airflow.providers.snowflake.operators.snowflake.SnowflakeOperator\",",
          "1092:     \"sns_publish_operator\": {",
          "1093:         \"SnsPublishOperator\": \"airflow.providers.amazon.aws.operators.sns.SnsPublishOperator\",",
          "1095:     \"spark_jdbc_operator\": {",
          "1096:         \"SparkJDBCOperator\": \"airflow.providers.apache.spark.operators.spark_jdbc.SparkJDBCOperator\",",
          "1097:         \"SparkSubmitOperator\": \"airflow.providers.apache.spark.operators.spark_jdbc.SparkSubmitOperator\",",
          "1099:     \"spark_sql_operator\": {",
          "1100:         \"SparkSqlOperator\": \"airflow.providers.apache.spark.operators.spark_sql.SparkSqlOperator\",",
          "1102:     \"spark_submit_operator\": {",
          "1103:         \"SparkSubmitOperator\": \"airflow.providers.apache.spark.operators.spark_submit.SparkSubmitOperator\",",
          "1105:     \"sql_to_gcs\": {",
          "1106:         \"BaseSQLToGCSOperator\": \"airflow.providers.google.cloud.transfers.sql_to_gcs.BaseSQLToGCSOperator\",",
          "1107:         \"BaseSQLToGoogleCloudStorageOperator\": (",
          "1108:             \"airflow.providers.google.cloud.transfers.sql_to_gcs.BaseSQLToGCSOperator\"",
          "1111:     \"sqoop_operator\": {",
          "1112:         \"SqoopOperator\": \"airflow.providers.apache.sqoop.operators.sqoop.SqoopOperator\",",
          "1114:     \"ssh_operator\": {",
          "1115:         \"SSHOperator\": \"airflow.providers.ssh.operators.ssh.SSHOperator\",",
          "1117:     \"vertica_operator\": {",
          "1118:         \"VerticaOperator\": \"airflow.providers.vertica.operators.vertica.VerticaOperator\",",
          "1120:     \"vertica_to_hive\": {",
          "1121:         \"VerticaToHiveOperator\": (",
          "1122:             \"airflow.providers.apache.hive.transfers.vertica_to_hive.VerticaToHiveOperator\"",
          "1124:         \"VerticaToHiveTransfer\": (",
          "1125:             \"airflow.providers.apache.hive.transfers.vertica_to_hive.VerticaToHiveOperator\"",
          "1128:     \"vertica_to_mysql\": {",
          "1129:         \"VerticaToMySqlOperator\": \"airflow.providers.mysql.transfers.vertica_to_mysql.VerticaToMySqlOperator\",",
          "1130:         \"VerticaToMySqlTransfer\": \"airflow.providers.mysql.transfers.vertica_to_mysql.VerticaToMySqlOperator\",",
          "1132:     \"wasb_delete_blob_operator\": {",
          "1133:         \"WasbDeleteBlobOperator\": (",
          "1134:             \"airflow.providers.microsoft.azure.operators.wasb_delete_blob.WasbDeleteBlobOperator\"",
          "1137:     \"winrm_operator\": {",
          "1138:         \"WinRMOperator\": \"airflow.providers.microsoft.winrm.operators.winrm.WinRMOperator\",",
          "",
          "---------------"
        ],
        "airflow/contrib/secrets/__init__.py||airflow/contrib/secrets/__init__.py": [
          "File: airflow/contrib/secrets/__init__.py -> airflow/contrib/secrets/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: )",
          "32: __deprecated_classes = {",
          "35:     },",
          "39:         ),",
          "40:     },",
          "43:     },",
          "47:         ),",
          "50:         ),",
          "51:     },",
          "54:     },",
          "55: }",
          "56: add_deprecated_classes(__deprecated_classes, __name__)",
          "",
          "[Removed Lines]",
          "33:     'aws_secrets_manager': {",
          "34:         'SecretsManagerBackend': 'airflow.providers.amazon.aws.secrets.secrets_manager.SecretsManagerBackend',",
          "36:     'aws_systems_manager': {",
          "37:         'SystemsManagerParameterStoreBackend': (",
          "38:             'airflow.providers.amazon.aws.secrets.systems_manager.SystemsManagerParameterStoreBackend'",
          "41:     'azure_key_vault': {",
          "42:         'AzureKeyVaultBackend': 'airflow.providers.microsoft.azure.secrets.key_vault.AzureKeyVaultBackend',",
          "44:     'gcp_secrets_manager': {",
          "45:         'CloudSecretManagerBackend': (",
          "46:             'airflow.providers.google.cloud.secrets.secret_manager.CloudSecretManagerBackend'",
          "48:         'CloudSecretsManagerBackend': (",
          "49:             'airflow.providers.google.cloud.secrets.secret_manager.CloudSecretManagerBackend'",
          "52:     'hashicorp_vault': {",
          "53:         'VaultBackend': 'airflow.providers.hashicorp.secrets.vault.VaultBackend',",
          "",
          "[Added Lines]",
          "33:     \"aws_secrets_manager\": {",
          "34:         \"SecretsManagerBackend\": \"airflow.providers.amazon.aws.secrets.secrets_manager.SecretsManagerBackend\",",
          "36:     \"aws_systems_manager\": {",
          "37:         \"SystemsManagerParameterStoreBackend\": (",
          "38:             \"airflow.providers.amazon.aws.secrets.systems_manager.SystemsManagerParameterStoreBackend\"",
          "41:     \"azure_key_vault\": {",
          "42:         \"AzureKeyVaultBackend\": \"airflow.providers.microsoft.azure.secrets.key_vault.AzureKeyVaultBackend\",",
          "44:     \"gcp_secrets_manager\": {",
          "45:         \"CloudSecretManagerBackend\": (",
          "46:             \"airflow.providers.google.cloud.secrets.secret_manager.CloudSecretManagerBackend\"",
          "48:         \"CloudSecretsManagerBackend\": (",
          "49:             \"airflow.providers.google.cloud.secrets.secret_manager.CloudSecretManagerBackend\"",
          "52:     \"hashicorp_vault\": {",
          "53:         \"VaultBackend\": \"airflow.providers.hashicorp.secrets.vault.VaultBackend\",",
          "",
          "---------------"
        ],
        "airflow/contrib/sensors/__init__.py||airflow/contrib/sensors/__init__.py": [
          "File: airflow/contrib/sensors/__init__.py -> airflow/contrib/sensors/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: )",
          "32: __deprecated_classes = {",
          "35:     },",
          "39:         ),",
          "40:     },",
          "44:         ),",
          "45:     },",
          "49:     },",
          "53:         ),",
          "54:     },",
          "61:     },",
          "65:         ),",
          "67:     },",
          "70:     },",
          "73:     },",
          "76:     },",
          "79:     },",
          "82:     },",
          "86:     },",
          "94:     },",
          "99:         ),",
          "103:         ),",
          "106:         ),",
          "109:         ),",
          "112:         ),",
          "115:         ),",
          "116:     },",
          "119:     },",
          "123:     },",
          "126:     },",
          "129:     },",
          "132:     },",
          "137:     },",
          "140:     },",
          "143:     },",
          "147:     },",
          "150:     },",
          "154:     },",
          "157:     },",
          "158: }",
          "",
          "[Removed Lines]",
          "33:     'aws_athena_sensor': {",
          "34:         'AthenaSensor': 'airflow.providers.amazon.aws.sensors.athena.AthenaSensor',",
          "36:     'aws_glue_catalog_partition_sensor': {",
          "37:         'AwsGlueCatalogPartitionSensor': (",
          "38:             'airflow.providers.amazon.aws.sensors.glue_catalog_partition.GlueCatalogPartitionSensor'",
          "41:     'aws_redshift_cluster_sensor': {",
          "42:         'AwsRedshiftClusterSensor': (",
          "43:             'airflow.providers.amazon.aws.sensors.redshift_cluster.RedshiftClusterSensor'",
          "46:     'aws_sqs_sensor': {",
          "47:         'SqsSensor': 'airflow.providers.amazon.aws.sensors.sqs.SqsSensor',",
          "48:         'SQSSensor': 'airflow.providers.amazon.aws.sensors.sqs.SqsSensor',",
          "50:     'azure_cosmos_sensor': {",
          "51:         'AzureCosmosDocumentSensor': (",
          "52:             'airflow.providers.microsoft.azure.sensors.cosmos.AzureCosmosDocumentSensor'",
          "55:     'bash_sensor': {",
          "56:         'STDOUT': 'airflow.sensors.bash.STDOUT',",
          "57:         'BashSensor': 'airflow.sensors.bash.BashSensor',",
          "58:         'Popen': 'airflow.sensors.bash.Popen',",
          "59:         'TemporaryDirectory': 'airflow.sensors.bash.TemporaryDirectory',",
          "60:         'gettempdir': 'airflow.sensors.bash.gettempdir',",
          "62:     'bigquery_sensor': {",
          "63:         'BigQueryTableExistenceSensor': (",
          "64:             'airflow.providers.google.cloud.sensors.bigquery.BigQueryTableExistenceSensor'",
          "66:         'BigQueryTableSensor': 'airflow.providers.google.cloud.sensors.bigquery.BigQueryTableExistenceSensor',",
          "68:     'cassandra_record_sensor': {",
          "69:         'CassandraRecordSensor': 'airflow.providers.apache.cassandra.sensors.record.CassandraRecordSensor',",
          "71:     'cassandra_table_sensor': {",
          "72:         'CassandraTableSensor': 'airflow.providers.apache.cassandra.sensors.table.CassandraTableSensor',",
          "74:     'celery_queue_sensor': {",
          "75:         'CeleryQueueSensor': 'airflow.providers.celery.sensors.celery_queue.CeleryQueueSensor',",
          "77:     'datadog_sensor': {",
          "78:         'DatadogSensor': 'airflow.providers.datadog.sensors.datadog.DatadogSensor',",
          "80:     'file_sensor': {",
          "81:         'FileSensor': 'airflow.sensors.filesystem.FileSensor',",
          "83:     'ftp_sensor': {",
          "84:         'FTPSensor': 'airflow.providers.ftp.sensors.ftp.FTPSensor',",
          "85:         'FTPSSensor': 'airflow.providers.ftp.sensors.ftp.FTPSSensor',",
          "87:     'gcp_transfer_sensor': {",
          "88:         'CloudDataTransferServiceJobStatusSensor':",
          "89:             'airflow.providers.google.cloud.sensors.cloud_storage_transfer_service.'",
          "90:             'CloudDataTransferServiceJobStatusSensor',",
          "91:         'GCPTransferServiceWaitForJobStatusSensor':",
          "92:             'airflow.providers.google.cloud.sensors.cloud_storage_transfer_service.'",
          "93:             'CloudDataTransferServiceJobStatusSensor',",
          "95:     'gcs_sensor': {",
          "96:         'GCSObjectExistenceSensor': 'airflow.providers.google.cloud.sensors.gcs.GCSObjectExistenceSensor',",
          "97:         'GCSObjectsWithPrefixExistenceSensor': (",
          "98:             'airflow.providers.google.cloud.sensors.gcs.GCSObjectsWithPrefixExistenceSensor'",
          "100:         'GCSObjectUpdateSensor': 'airflow.providers.google.cloud.sensors.gcs.GCSObjectUpdateSensor',",
          "101:         'GCSUploadSessionCompleteSensor': (",
          "102:             'airflow.providers.google.cloud.sensors.gcs.GCSUploadSessionCompleteSensor'",
          "104:         'GoogleCloudStorageObjectSensor': (",
          "105:             'airflow.providers.google.cloud.sensors.gcs.GCSObjectExistenceSensor'",
          "107:         'GoogleCloudStorageObjectUpdatedSensor': (",
          "108:             'airflow.providers.google.cloud.sensors.gcs.GCSObjectUpdateSensor'",
          "110:         'GoogleCloudStoragePrefixSensor': (",
          "111:             'airflow.providers.google.cloud.sensors.gcs.GCSObjectsWithPrefixExistenceSensor'",
          "113:         'GoogleCloudStorageUploadSessionCompleteSensor': (",
          "114:             'airflow.providers.google.cloud.sensors.gcs.GCSUploadSessionCompleteSensor'",
          "117:     'imap_attachment_sensor': {",
          "118:         'ImapAttachmentSensor': 'airflow.providers.imap.sensors.imap_attachment.ImapAttachmentSensor',",
          "120:     'jira_sensor': {",
          "121:         'JiraSensor': 'airflow.providers.atlassian.jira.sensors.jira.JiraSensor',",
          "122:         'JiraTicketSensor': 'airflow.providers.atlassian.jira.sensors.jira.JiraTicketSensor',",
          "124:     'mongo_sensor': {",
          "125:         'MongoSensor': 'airflow.providers.mongo.sensors.mongo.MongoSensor',",
          "127:     'pubsub_sensor': {",
          "128:         'PubSubPullSensor': 'airflow.providers.google.cloud.sensors.pubsub.PubSubPullSensor',",
          "130:     'python_sensor': {",
          "131:         'PythonSensor': 'airflow.sensors.python.PythonSensor',",
          "133:     'qubole_sensor': {",
          "134:         'QuboleFileSensor': 'airflow.providers.qubole.sensors.qubole.QuboleFileSensor',",
          "135:         'QubolePartitionSensor': 'airflow.providers.qubole.sensors.qubole.QubolePartitionSensor',",
          "136:         'QuboleSensor': 'airflow.providers.qubole.sensors.qubole.QuboleSensor',",
          "138:     'redis_key_sensor': {",
          "139:         'RedisKeySensor': 'airflow.providers.redis.sensors.redis_key.RedisKeySensor',",
          "141:     'redis_pub_sub_sensor': {",
          "142:         'RedisPubSubSensor': 'airflow.providers.redis.sensors.redis_pub_sub.RedisPubSubSensor',",
          "144:     'sagemaker_training_sensor': {",
          "145:         'SageMakerHook': 'airflow.providers.amazon.aws.sensors.sagemaker.SageMakerHook',",
          "146:         'SageMakerTrainingSensor': 'airflow.providers.amazon.aws.sensors.sagemaker.SageMakerTrainingSensor',",
          "148:     'sftp_sensor': {",
          "149:         'SFTPSensor': 'airflow.providers.sftp.sensors.sftp.SFTPSensor',",
          "151:     'wasb_sensor': {",
          "152:         'WasbBlobSensor': 'airflow.providers.microsoft.azure.sensors.wasb.WasbBlobSensor',",
          "153:         'WasbPrefixSensor': 'airflow.providers.microsoft.azure.sensors.wasb.WasbPrefixSensor',",
          "155:     'weekday_sensor': {",
          "156:         'DayOfWeekSensor': 'airflow.sensors.weekday.DayOfWeekSensor',",
          "",
          "[Added Lines]",
          "33:     \"aws_athena_sensor\": {",
          "34:         \"AthenaSensor\": \"airflow.providers.amazon.aws.sensors.athena.AthenaSensor\",",
          "36:     \"aws_glue_catalog_partition_sensor\": {",
          "37:         \"AwsGlueCatalogPartitionSensor\": (",
          "38:             \"airflow.providers.amazon.aws.sensors.glue_catalog_partition.GlueCatalogPartitionSensor\"",
          "41:     \"aws_redshift_cluster_sensor\": {",
          "42:         \"AwsRedshiftClusterSensor\": (",
          "43:             \"airflow.providers.amazon.aws.sensors.redshift_cluster.RedshiftClusterSensor\"",
          "46:     \"aws_sqs_sensor\": {",
          "47:         \"SqsSensor\": \"airflow.providers.amazon.aws.sensors.sqs.SqsSensor\",",
          "48:         \"SQSSensor\": \"airflow.providers.amazon.aws.sensors.sqs.SqsSensor\",",
          "50:     \"azure_cosmos_sensor\": {",
          "51:         \"AzureCosmosDocumentSensor\": (",
          "52:             \"airflow.providers.microsoft.azure.sensors.cosmos.AzureCosmosDocumentSensor\"",
          "55:     \"bash_sensor\": {",
          "56:         \"STDOUT\": \"airflow.sensors.bash.STDOUT\",",
          "57:         \"BashSensor\": \"airflow.sensors.bash.BashSensor\",",
          "58:         \"Popen\": \"airflow.sensors.bash.Popen\",",
          "59:         \"TemporaryDirectory\": \"airflow.sensors.bash.TemporaryDirectory\",",
          "60:         \"gettempdir\": \"airflow.sensors.bash.gettempdir\",",
          "62:     \"bigquery_sensor\": {",
          "63:         \"BigQueryTableExistenceSensor\": (",
          "64:             \"airflow.providers.google.cloud.sensors.bigquery.BigQueryTableExistenceSensor\"",
          "66:         \"BigQueryTableSensor\": \"airflow.providers.google.cloud.sensors.bigquery.BigQueryTableExistenceSensor\",",
          "68:     \"cassandra_record_sensor\": {",
          "69:         \"CassandraRecordSensor\": \"airflow.providers.apache.cassandra.sensors.record.CassandraRecordSensor\",",
          "71:     \"cassandra_table_sensor\": {",
          "72:         \"CassandraTableSensor\": \"airflow.providers.apache.cassandra.sensors.table.CassandraTableSensor\",",
          "74:     \"celery_queue_sensor\": {",
          "75:         \"CeleryQueueSensor\": \"airflow.providers.celery.sensors.celery_queue.CeleryQueueSensor\",",
          "77:     \"datadog_sensor\": {",
          "78:         \"DatadogSensor\": \"airflow.providers.datadog.sensors.datadog.DatadogSensor\",",
          "80:     \"file_sensor\": {",
          "81:         \"FileSensor\": \"airflow.sensors.filesystem.FileSensor\",",
          "83:     \"ftp_sensor\": {",
          "84:         \"FTPSensor\": \"airflow.providers.ftp.sensors.ftp.FTPSensor\",",
          "85:         \"FTPSSensor\": \"airflow.providers.ftp.sensors.ftp.FTPSSensor\",",
          "87:     \"gcp_transfer_sensor\": {",
          "88:         \"CloudDataTransferServiceJobStatusSensor\":",
          "89:             \"airflow.providers.google.cloud.sensors.cloud_storage_transfer_service.\"",
          "90:             \"CloudDataTransferServiceJobStatusSensor\",",
          "91:         \"GCPTransferServiceWaitForJobStatusSensor\":",
          "92:             \"airflow.providers.google.cloud.sensors.cloud_storage_transfer_service.\"",
          "93:             \"CloudDataTransferServiceJobStatusSensor\",",
          "95:     \"gcs_sensor\": {",
          "96:         \"GCSObjectExistenceSensor\": \"airflow.providers.google.cloud.sensors.gcs.GCSObjectExistenceSensor\",",
          "97:         \"GCSObjectsWithPrefixExistenceSensor\": (",
          "98:             \"airflow.providers.google.cloud.sensors.gcs.GCSObjectsWithPrefixExistenceSensor\"",
          "100:         \"GCSObjectUpdateSensor\": \"airflow.providers.google.cloud.sensors.gcs.GCSObjectUpdateSensor\",",
          "101:         \"GCSUploadSessionCompleteSensor\": (",
          "102:             \"airflow.providers.google.cloud.sensors.gcs.GCSUploadSessionCompleteSensor\"",
          "104:         \"GoogleCloudStorageObjectSensor\": (",
          "105:             \"airflow.providers.google.cloud.sensors.gcs.GCSObjectExistenceSensor\"",
          "107:         \"GoogleCloudStorageObjectUpdatedSensor\": (",
          "108:             \"airflow.providers.google.cloud.sensors.gcs.GCSObjectUpdateSensor\"",
          "110:         \"GoogleCloudStoragePrefixSensor\": (",
          "111:             \"airflow.providers.google.cloud.sensors.gcs.GCSObjectsWithPrefixExistenceSensor\"",
          "113:         \"GoogleCloudStorageUploadSessionCompleteSensor\": (",
          "114:             \"airflow.providers.google.cloud.sensors.gcs.GCSUploadSessionCompleteSensor\"",
          "117:     \"imap_attachment_sensor\": {",
          "118:         \"ImapAttachmentSensor\": \"airflow.providers.imap.sensors.imap_attachment.ImapAttachmentSensor\",",
          "120:     \"jira_sensor\": {",
          "121:         \"JiraSensor\": \"airflow.providers.atlassian.jira.sensors.jira.JiraSensor\",",
          "122:         \"JiraTicketSensor\": \"airflow.providers.atlassian.jira.sensors.jira.JiraTicketSensor\",",
          "124:     \"mongo_sensor\": {",
          "125:         \"MongoSensor\": \"airflow.providers.mongo.sensors.mongo.MongoSensor\",",
          "127:     \"pubsub_sensor\": {",
          "128:         \"PubSubPullSensor\": \"airflow.providers.google.cloud.sensors.pubsub.PubSubPullSensor\",",
          "130:     \"python_sensor\": {",
          "131:         \"PythonSensor\": \"airflow.sensors.python.PythonSensor\",",
          "133:     \"qubole_sensor\": {",
          "134:         \"QuboleFileSensor\": \"airflow.providers.qubole.sensors.qubole.QuboleFileSensor\",",
          "135:         \"QubolePartitionSensor\": \"airflow.providers.qubole.sensors.qubole.QubolePartitionSensor\",",
          "136:         \"QuboleSensor\": \"airflow.providers.qubole.sensors.qubole.QuboleSensor\",",
          "138:     \"redis_key_sensor\": {",
          "139:         \"RedisKeySensor\": \"airflow.providers.redis.sensors.redis_key.RedisKeySensor\",",
          "141:     \"redis_pub_sub_sensor\": {",
          "142:         \"RedisPubSubSensor\": \"airflow.providers.redis.sensors.redis_pub_sub.RedisPubSubSensor\",",
          "144:     \"sagemaker_training_sensor\": {",
          "145:         \"SageMakerHook\": \"airflow.providers.amazon.aws.sensors.sagemaker.SageMakerHook\",",
          "146:         \"SageMakerTrainingSensor\": \"airflow.providers.amazon.aws.sensors.sagemaker.SageMakerTrainingSensor\",",
          "148:     \"sftp_sensor\": {",
          "149:         \"SFTPSensor\": \"airflow.providers.sftp.sensors.sftp.SFTPSensor\",",
          "151:     \"wasb_sensor\": {",
          "152:         \"WasbBlobSensor\": \"airflow.providers.microsoft.azure.sensors.wasb.WasbBlobSensor\",",
          "153:         \"WasbPrefixSensor\": \"airflow.providers.microsoft.azure.sensors.wasb.WasbPrefixSensor\",",
          "155:     \"weekday_sensor\": {",
          "156:         \"DayOfWeekSensor\": \"airflow.sensors.weekday.DayOfWeekSensor\",",
          "",
          "---------------"
        ],
        "airflow/contrib/task_runner/__init__.py||airflow/contrib/task_runner/__init__.py": [
          "File: airflow/contrib/task_runner/__init__.py -> airflow/contrib/task_runner/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: )",
          "30: __deprecated_classes = {",
          "33:     },",
          "34: }",
          "",
          "[Removed Lines]",
          "31:     'cgroup_task_runner': {",
          "32:         'CgroupTaskRunner': 'airflow.task.task_runner.cgroup_task_runner.CgroupTaskRunner',",
          "",
          "[Added Lines]",
          "31:     \"cgroup_task_runner\": {",
          "32:         \"CgroupTaskRunner\": \"airflow.task.task_runner.cgroup_task_runner.CgroupTaskRunner\",",
          "",
          "---------------"
        ],
        "airflow/contrib/utils/__init__.py||airflow/contrib/utils/__init__.py": [
          "File: airflow/contrib/utils/__init__.py -> airflow/contrib/utils/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: )",
          "32: __deprecated_classes = {",
          "37:         ),",
          "38:     },",
          "43:         ),",
          "46:         ),",
          "47:     },",
          "51:         ),",
          "52:     },",
          "56:     },",
          "59:     },",
          "62:     },",
          "63: }",
          "",
          "[Removed Lines]",
          "33:     'gcp_field_sanitizer': {",
          "34:         'GcpBodyFieldSanitizer': 'airflow.providers.google.cloud.utils.field_sanitizer.GcpBodyFieldSanitizer',",
          "35:         'GcpFieldSanitizerException': (",
          "36:             'airflow.providers.google.cloud.utils.field_sanitizer.GcpFieldSanitizerException'",
          "39:     'gcp_field_validator': {",
          "40:         'GcpBodyFieldValidator': 'airflow.providers.google.cloud.utils.field_validator.GcpBodyFieldValidator',",
          "41:         'GcpFieldValidationException': (",
          "42:             'airflow.providers.google.cloud.utils.field_validator.GcpFieldValidationException'",
          "44:         'GcpValidationSpecificationException': (",
          "45:             'airflow.providers.google.cloud.utils.field_validator.GcpValidationSpecificationException'",
          "48:     'mlengine_operator_utils': {",
          "49:         'create_evaluate_ops': (",
          "50:             'airflow.providers.google.cloud.utils.mlengine_operator_utils.create_evaluate_ops'",
          "53:     'mlengine_prediction_summary': {",
          "54:         'JsonCoder': 'airflow.providers.google.cloud.utils.mlengine_prediction_summary.JsonCoder',",
          "55:         'MakeSummary': 'airflow.providers.google.cloud.utils.mlengine_prediction_summary.MakeSummary',",
          "57:     'sendgrid': {",
          "58:         'import_string': 'airflow.utils.module_loading.import_string',",
          "60:     'weekday': {",
          "61:         'WeekDay': 'airflow.utils.weekday.WeekDay',",
          "",
          "[Added Lines]",
          "33:     \"gcp_field_sanitizer\": {",
          "34:         \"GcpBodyFieldSanitizer\": \"airflow.providers.google.cloud.utils.field_sanitizer.GcpBodyFieldSanitizer\",",
          "35:         \"GcpFieldSanitizerException\": (",
          "36:             \"airflow.providers.google.cloud.utils.field_sanitizer.GcpFieldSanitizerException\"",
          "39:     \"gcp_field_validator\": {",
          "40:         \"GcpBodyFieldValidator\": \"airflow.providers.google.cloud.utils.field_validator.GcpBodyFieldValidator\",",
          "41:         \"GcpFieldValidationException\": (",
          "42:             \"airflow.providers.google.cloud.utils.field_validator.GcpFieldValidationException\"",
          "44:         \"GcpValidationSpecificationException\": (",
          "45:             \"airflow.providers.google.cloud.utils.field_validator.GcpValidationSpecificationException\"",
          "48:     \"mlengine_operator_utils\": {",
          "49:         \"create_evaluate_ops\": (",
          "50:             \"airflow.providers.google.cloud.utils.mlengine_operator_utils.create_evaluate_ops\"",
          "53:     \"mlengine_prediction_summary\": {",
          "54:         \"JsonCoder\": \"airflow.providers.google.cloud.utils.mlengine_prediction_summary.JsonCoder\",",
          "55:         \"MakeSummary\": \"airflow.providers.google.cloud.utils.mlengine_prediction_summary.MakeSummary\",",
          "57:     \"sendgrid\": {",
          "58:         \"import_string\": \"airflow.utils.module_loading.import_string\",",
          "60:     \"weekday\": {",
          "61:         \"WeekDay\": \"airflow.utils.weekday.WeekDay\",",
          "",
          "---------------"
        ],
        "airflow/contrib/utils/log/__init__.py||airflow/contrib/utils/log/__init__.py": [
          "File: airflow/contrib/utils/log/__init__.py -> airflow/contrib/utils/log/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: warnings.warn(\"This module is deprecated. Please use `airflow.utils.log`.\", DeprecationWarning, stacklevel=2)",
          "26: __deprecated_classes = {",
          "30:         ),",
          "31:     },",
          "32: }",
          "",
          "[Removed Lines]",
          "27:     'task_handler_with_custom_formatter': {",
          "28:         'TaskHandlerWithCustomFormatter': (",
          "29:             'airflow.utils.log.task_handler_with_custom_formatter.TaskHandlerWithCustomFormatter'",
          "",
          "[Added Lines]",
          "27:     \"task_handler_with_custom_formatter\": {",
          "28:         \"TaskHandlerWithCustomFormatter\": (",
          "29:             \"airflow.utils.log.task_handler_with_custom_formatter.TaskHandlerWithCustomFormatter\"",
          "",
          "---------------"
        ],
        "airflow/operators/__init__.py||airflow/operators/__init__.py": [
          "File: airflow/operators/__init__.py -> airflow/operators/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: from airflow.utils.deprecation_tools import add_deprecated_classes",
          "24: __deprecated_classes = {",
          "27:     },",
          "30:     },",
          "40:     },",
          "44:     },",
          "47:     },",
          "50:     },",
          "54:     },",
          "58:     },",
          "61:     },",
          "64:     },",
          "68:         ),",
          "71:         ),",
          "72:     },",
          "75:     },",
          "79:         ),",
          "80:     },",
          "84:     },",
          "88:     },",
          "91:     },",
          "94:     },",
          "97:     },",
          "100:     },",
          "103:     },",
          "107:     },",
          "110:     },",
          "114:     },",
          "117:     },",
          "120:     },",
          "123:     },",
          "127:     },",
          "135:     },",
          "139:     },",
          "145:     },",
          "149:     },",
          "153:         ),",
          "154:     },",
          "178:         ),",
          "180:     },",
          "184:     },",
          "187:     },",
          "191:     },",
          "192: }",
          "",
          "[Removed Lines]",
          "25:     'bash_operator': {",
          "26:         'BashOperator': 'airflow.operators.bash.BashOperator',",
          "28:     'branch_operator': {",
          "29:         'BaseBranchOperator': 'airflow.operators.branch.BaseBranchOperator',",
          "31:     'check_operator': {",
          "32:         'SQLCheckOperator': 'airflow.providers.common.sql.operators.sql.SQLCheckOperator',",
          "33:         'SQLIntervalCheckOperator': 'airflow.providers.common.sql.operators.sql.SQLIntervalCheckOperator',",
          "34:         'SQLThresholdCheckOperator': 'airflow.providers.common.sql.operators.sql.SQLThresholdCheckOperator',",
          "35:         'SQLValueCheckOperator': 'airflow.providers.common.sql.operators.sql.SQLValueCheckOperator',",
          "36:         'CheckOperator': 'airflow.providers.common.sql.operators.sql.SQLCheckOperator',",
          "37:         'IntervalCheckOperator': 'airflow.providers.common.sql.operators.sql.SQLIntervalCheckOperator',",
          "38:         'ThresholdCheckOperator': 'airflow.providers.common.sql.operators.sql.SQLThresholdCheckOperator',",
          "39:         'ValueCheckOperator': 'airflow.providers.common.sql.operators.sql.SQLValueCheckOperator',",
          "41:     'dagrun_operator': {",
          "42:         'TriggerDagRunLink': 'airflow.operators.trigger_dagrun.TriggerDagRunLink',",
          "43:         'TriggerDagRunOperator': 'airflow.operators.trigger_dagrun.TriggerDagRunOperator',",
          "45:     'docker_operator': {",
          "46:         'DockerOperator': 'airflow.providers.docker.operators.docker.DockerOperator',",
          "48:     'druid_check_operator': {",
          "49:         'DruidCheckOperator': 'airflow.providers.apache.druid.operators.druid_check.DruidCheckOperator',",
          "51:     'dummy': {",
          "52:         'EmptyOperator': 'airflow.operators.empty.EmptyOperator',",
          "53:         'DummyOperator': 'airflow.operators.empty.EmptyOperator',",
          "55:     'dummy_operator': {",
          "56:         'EmptyOperator': 'airflow.operators.empty.EmptyOperator',",
          "57:         'DummyOperator': 'airflow.operators.empty.EmptyOperator',",
          "59:     'email_operator': {",
          "60:         'EmailOperator': 'airflow.operators.email.EmailOperator',",
          "62:     'gcs_to_s3': {",
          "63:         'GCSToS3Operator': 'airflow.providers.amazon.aws.transfers.gcs_to_s3.GCSToS3Operator',",
          "65:     'google_api_to_s3_transfer': {",
          "66:         'GoogleApiToS3Operator': (",
          "67:             'airflow.providers.amazon.aws.transfers.google_api_to_s3.GoogleApiToS3Operator'",
          "69:         'GoogleApiToS3Transfer': (",
          "70:             'airflow.providers.amazon.aws.transfers.google_api_to_s3.GoogleApiToS3Operator'",
          "73:     'hive_operator': {",
          "74:         'HiveOperator': 'airflow.providers.apache.hive.operators.hive.HiveOperator',",
          "76:     'hive_stats_operator': {",
          "77:         'HiveStatsCollectionOperator': (",
          "78:             'airflow.providers.apache.hive.operators.hive_stats.HiveStatsCollectionOperator'",
          "81:     'hive_to_druid': {",
          "82:         'HiveToDruidOperator': 'airflow.providers.apache.druid.transfers.hive_to_druid.HiveToDruidOperator',",
          "83:         'HiveToDruidTransfer': 'airflow.providers.apache.druid.transfers.hive_to_druid.HiveToDruidOperator',",
          "85:     'hive_to_mysql': {",
          "86:         'HiveToMySqlOperator': 'airflow.providers.apache.hive.transfers.hive_to_mysql.HiveToMySqlOperator',",
          "87:         'HiveToMySqlTransfer': 'airflow.providers.apache.hive.transfers.hive_to_mysql.HiveToMySqlOperator',",
          "89:     'hive_to_samba_operator': {",
          "90:         'HiveToSambaOperator': 'airflow.providers.apache.hive.transfers.hive_to_samba.HiveToSambaOperator',",
          "92:     'http_operator': {",
          "93:         'SimpleHttpOperator': 'airflow.providers.http.operators.http.SimpleHttpOperator',",
          "95:     'jdbc_operator': {",
          "96:         'JdbcOperator': 'airflow.providers.jdbc.operators.jdbc.JdbcOperator',",
          "98:     'latest_only_operator': {",
          "99:         'LatestOnlyOperator': 'airflow.operators.latest_only.LatestOnlyOperator',",
          "101:     'mssql_operator': {",
          "102:         'MsSqlOperator': 'airflow.providers.microsoft.mssql.operators.mssql.MsSqlOperator',",
          "104:     'mssql_to_hive': {",
          "105:         'MsSqlToHiveOperator': 'airflow.providers.apache.hive.transfers.mssql_to_hive.MsSqlToHiveOperator',",
          "106:         'MsSqlToHiveTransfer': 'airflow.providers.apache.hive.transfers.mssql_to_hive.MsSqlToHiveOperator',",
          "108:     'mysql_operator': {",
          "109:         'MySqlOperator': 'airflow.providers.mysql.operators.mysql.MySqlOperator',",
          "111:     'mysql_to_hive': {",
          "112:         'MySqlToHiveOperator': 'airflow.providers.apache.hive.transfers.mysql_to_hive.MySqlToHiveOperator',",
          "113:         'MySqlToHiveTransfer': 'airflow.providers.apache.hive.transfers.mysql_to_hive.MySqlToHiveOperator',",
          "115:     'oracle_operator': {",
          "116:         'OracleOperator': 'airflow.providers.oracle.operators.oracle.OracleOperator',",
          "118:     'papermill_operator': {",
          "119:         'PapermillOperator': 'airflow.providers.papermill.operators.papermill.PapermillOperator',",
          "121:     'pig_operator': {",
          "122:         'PigOperator': 'airflow.providers.apache.pig.operators.pig.PigOperator',",
          "124:     'postgres_operator': {",
          "125:         'Mapping': 'airflow.providers.postgres.operators.postgres.Mapping',",
          "126:         'PostgresOperator': 'airflow.providers.postgres.operators.postgres.PostgresOperator',",
          "128:     'presto_check_operator': {",
          "129:         'SQLCheckOperator': 'airflow.providers.common.sql.operators.sql.SQLCheckOperator',",
          "130:         'SQLIntervalCheckOperator': 'airflow.providers.common.sql.operators.sql.SQLIntervalCheckOperator',",
          "131:         'SQLValueCheckOperator': 'airflow.providers.common.sql.operators.sql.SQLValueCheckOperator',",
          "132:         'PrestoCheckOperator': 'airflow.providers.common.sql.operators.sql.SQLCheckOperator',",
          "133:         'PrestoIntervalCheckOperator': 'airflow.providers.common.sql.operators.sql.SQLIntervalCheckOperator',",
          "134:         'PrestoValueCheckOperator': 'airflow.providers.common.sql.operators.sql.SQLValueCheckOperator',",
          "136:     'presto_to_mysql': {",
          "137:         'PrestoToMySqlOperator': 'airflow.providers.mysql.transfers.presto_to_mysql.PrestoToMySqlOperator',",
          "138:         'PrestoToMySqlTransfer': 'airflow.providers.mysql.transfers.presto_to_mysql.PrestoToMySqlOperator',",
          "140:     'python_operator': {",
          "141:         'BranchPythonOperator': 'airflow.operators.python.BranchPythonOperator',",
          "142:         'PythonOperator': 'airflow.operators.python.PythonOperator',",
          "143:         'PythonVirtualenvOperator': 'airflow.operators.python.PythonVirtualenvOperator',",
          "144:         'ShortCircuitOperator': 'airflow.operators.python.ShortCircuitOperator',",
          "146:     'redshift_to_s3_operator': {",
          "147:         'RedshiftToS3Operator': 'airflow.providers.amazon.aws.transfers.redshift_to_s3.RedshiftToS3Operator',",
          "148:         'RedshiftToS3Transfer': 'airflow.providers.amazon.aws.transfers.redshift_to_s3.RedshiftToS3Operator',",
          "150:     's3_file_transform_operator': {",
          "151:         'S3FileTransformOperator': (",
          "152:             'airflow.providers.amazon.aws.operators.s3_file_transform.S3FileTransformOperator'",
          "155:     's3_to_hive_operator': {",
          "156:         'S3ToHiveOperator': 'airflow.providers.apache.hive.transfers.s3_to_hive.S3ToHiveOperator',",
          "157:         'S3ToHiveTransfer': 'airflow.providers.apache.hive.transfers.s3_to_hive.S3ToHiveOperator',",
          "158:     },",
          "159:     's3_to_redshift_operator': {",
          "160:         'S3ToRedshiftOperator': 'airflow.providers.amazon.aws.transfers.s3_to_redshift.S3ToRedshiftOperator',",
          "161:         'S3ToRedshiftTransfer': 'airflow.providers.amazon.aws.transfers.s3_to_redshift.S3ToRedshiftOperator',",
          "162:     },",
          "163:     'slack_operator': {",
          "164:         'SlackAPIOperator': 'airflow.providers.slack.operators.slack.SlackAPIOperator',",
          "165:         'SlackAPIPostOperator': 'airflow.providers.slack.operators.slack.SlackAPIPostOperator',",
          "166:     },",
          "167:     'sql': {",
          "168:         'BaseSQLOperator': 'airflow.providers.common.sql.operators.sql.BaseSQLOperator',",
          "169:         'BranchSQLOperator': 'airflow.providers.common.sql.operators.sql.BranchSQLOperator',",
          "170:         'SQLCheckOperator': 'airflow.providers.common.sql.operators.sql.SQLCheckOperator',",
          "171:         'SQLColumnCheckOperator': 'airflow.providers.common.sql.operators.sql.SQLColumnCheckOperator',",
          "172:         'SQLIntervalCheckOperator': 'airflow.providers.common.sql.operators.sql.SQLIntervalCheckOperator',",
          "173:         'SQLTableCheckOperator': 'airflow.providers.common.sql.operators.sql.SQLTableCheckOperator',",
          "174:         'SQLThresholdCheckOperator': 'airflow.providers.common.sql.operators.sql.SQLThresholdCheckOperator',",
          "175:         'SQLValueCheckOperator': 'airflow.providers.common.sql.operators.sql.SQLValueCheckOperator',",
          "176:         '_convert_to_float_if_possible': (",
          "177:             'airflow.providers.common.sql.operators.sql._convert_to_float_if_possible'",
          "179:         'parse_boolean': 'airflow.providers.common.sql.operators.sql.parse_boolean',",
          "181:     'sql_branch_operator': {",
          "182:         'BranchSQLOperator': 'airflow.providers.common.sql.operators.sql.BranchSQLOperator',",
          "183:         'BranchSqlOperator': 'airflow.providers.common.sql.operators.sql.BranchSQLOperator',",
          "185:     'sqlite_operator': {",
          "186:         'SqliteOperator': 'airflow.providers.sqlite.operators.sqlite.SqliteOperator',",
          "188:     'subdag_operator': {",
          "189:         'SkippedStatePropagationOptions': 'airflow.operators.subdag.SkippedStatePropagationOptions',",
          "190:         'SubDagOperator': 'airflow.operators.subdag.SubDagOperator',",
          "",
          "[Added Lines]",
          "25:     \"bash_operator\": {",
          "26:         \"BashOperator\": \"airflow.operators.bash.BashOperator\",",
          "28:     \"branch_operator\": {",
          "29:         \"BaseBranchOperator\": \"airflow.operators.branch.BaseBranchOperator\",",
          "31:     \"check_operator\": {",
          "32:         \"SQLCheckOperator\": \"airflow.providers.common.sql.operators.sql.SQLCheckOperator\",",
          "33:         \"SQLIntervalCheckOperator\": \"airflow.providers.common.sql.operators.sql.SQLIntervalCheckOperator\",",
          "34:         \"SQLThresholdCheckOperator\": \"airflow.providers.common.sql.operators.sql.SQLThresholdCheckOperator\",",
          "35:         \"SQLValueCheckOperator\": \"airflow.providers.common.sql.operators.sql.SQLValueCheckOperator\",",
          "36:         \"CheckOperator\": \"airflow.providers.common.sql.operators.sql.SQLCheckOperator\",",
          "37:         \"IntervalCheckOperator\": \"airflow.providers.common.sql.operators.sql.SQLIntervalCheckOperator\",",
          "38:         \"ThresholdCheckOperator\": \"airflow.providers.common.sql.operators.sql.SQLThresholdCheckOperator\",",
          "39:         \"ValueCheckOperator\": \"airflow.providers.common.sql.operators.sql.SQLValueCheckOperator\",",
          "41:     \"dagrun_operator\": {",
          "42:         \"TriggerDagRunLink\": \"airflow.operators.trigger_dagrun.TriggerDagRunLink\",",
          "43:         \"TriggerDagRunOperator\": \"airflow.operators.trigger_dagrun.TriggerDagRunOperator\",",
          "45:     \"docker_operator\": {",
          "46:         \"DockerOperator\": \"airflow.providers.docker.operators.docker.DockerOperator\",",
          "48:     \"druid_check_operator\": {",
          "49:         \"DruidCheckOperator\": \"airflow.providers.apache.druid.operators.druid_check.DruidCheckOperator\",",
          "51:     \"dummy\": {",
          "52:         \"EmptyOperator\": \"airflow.operators.empty.EmptyOperator\",",
          "53:         \"DummyOperator\": \"airflow.operators.empty.EmptyOperator\",",
          "55:     \"dummy_operator\": {",
          "56:         \"EmptyOperator\": \"airflow.operators.empty.EmptyOperator\",",
          "57:         \"DummyOperator\": \"airflow.operators.empty.EmptyOperator\",",
          "59:     \"email_operator\": {",
          "60:         \"EmailOperator\": \"airflow.operators.email.EmailOperator\",",
          "62:     \"gcs_to_s3\": {",
          "63:         \"GCSToS3Operator\": \"airflow.providers.amazon.aws.transfers.gcs_to_s3.GCSToS3Operator\",",
          "65:     \"google_api_to_s3_transfer\": {",
          "66:         \"GoogleApiToS3Operator\": (",
          "67:             \"airflow.providers.amazon.aws.transfers.google_api_to_s3.GoogleApiToS3Operator\"",
          "69:         \"GoogleApiToS3Transfer\": (",
          "70:             \"airflow.providers.amazon.aws.transfers.google_api_to_s3.GoogleApiToS3Operator\"",
          "73:     \"hive_operator\": {",
          "74:         \"HiveOperator\": \"airflow.providers.apache.hive.operators.hive.HiveOperator\",",
          "76:     \"hive_stats_operator\": {",
          "77:         \"HiveStatsCollectionOperator\": (",
          "78:             \"airflow.providers.apache.hive.operators.hive_stats.HiveStatsCollectionOperator\"",
          "81:     \"hive_to_druid\": {",
          "82:         \"HiveToDruidOperator\": \"airflow.providers.apache.druid.transfers.hive_to_druid.HiveToDruidOperator\",",
          "83:         \"HiveToDruidTransfer\": \"airflow.providers.apache.druid.transfers.hive_to_druid.HiveToDruidOperator\",",
          "85:     \"hive_to_mysql\": {",
          "86:         \"HiveToMySqlOperator\": \"airflow.providers.apache.hive.transfers.hive_to_mysql.HiveToMySqlOperator\",",
          "87:         \"HiveToMySqlTransfer\": \"airflow.providers.apache.hive.transfers.hive_to_mysql.HiveToMySqlOperator\",",
          "89:     \"hive_to_samba_operator\": {",
          "90:         \"HiveToSambaOperator\": \"airflow.providers.apache.hive.transfers.hive_to_samba.HiveToSambaOperator\",",
          "92:     \"http_operator\": {",
          "93:         \"SimpleHttpOperator\": \"airflow.providers.http.operators.http.SimpleHttpOperator\",",
          "95:     \"jdbc_operator\": {",
          "96:         \"JdbcOperator\": \"airflow.providers.jdbc.operators.jdbc.JdbcOperator\",",
          "98:     \"latest_only_operator\": {",
          "99:         \"LatestOnlyOperator\": \"airflow.operators.latest_only.LatestOnlyOperator\",",
          "101:     \"mssql_operator\": {",
          "102:         \"MsSqlOperator\": \"airflow.providers.microsoft.mssql.operators.mssql.MsSqlOperator\",",
          "104:     \"mssql_to_hive\": {",
          "105:         \"MsSqlToHiveOperator\": \"airflow.providers.apache.hive.transfers.mssql_to_hive.MsSqlToHiveOperator\",",
          "106:         \"MsSqlToHiveTransfer\": \"airflow.providers.apache.hive.transfers.mssql_to_hive.MsSqlToHiveOperator\",",
          "108:     \"mysql_operator\": {",
          "109:         \"MySqlOperator\": \"airflow.providers.mysql.operators.mysql.MySqlOperator\",",
          "111:     \"mysql_to_hive\": {",
          "112:         \"MySqlToHiveOperator\": \"airflow.providers.apache.hive.transfers.mysql_to_hive.MySqlToHiveOperator\",",
          "113:         \"MySqlToHiveTransfer\": \"airflow.providers.apache.hive.transfers.mysql_to_hive.MySqlToHiveOperator\",",
          "115:     \"oracle_operator\": {",
          "116:         \"OracleOperator\": \"airflow.providers.oracle.operators.oracle.OracleOperator\",",
          "118:     \"papermill_operator\": {",
          "119:         \"PapermillOperator\": \"airflow.providers.papermill.operators.papermill.PapermillOperator\",",
          "121:     \"pig_operator\": {",
          "122:         \"PigOperator\": \"airflow.providers.apache.pig.operators.pig.PigOperator\",",
          "124:     \"postgres_operator\": {",
          "125:         \"Mapping\": \"airflow.providers.postgres.operators.postgres.Mapping\",",
          "126:         \"PostgresOperator\": \"airflow.providers.postgres.operators.postgres.PostgresOperator\",",
          "128:     \"presto_check_operator\": {",
          "129:         \"SQLCheckOperator\": \"airflow.providers.common.sql.operators.sql.SQLCheckOperator\",",
          "130:         \"SQLIntervalCheckOperator\": \"airflow.providers.common.sql.operators.sql.SQLIntervalCheckOperator\",",
          "131:         \"SQLValueCheckOperator\": \"airflow.providers.common.sql.operators.sql.SQLValueCheckOperator\",",
          "132:         \"PrestoCheckOperator\": \"airflow.providers.common.sql.operators.sql.SQLCheckOperator\",",
          "133:         \"PrestoIntervalCheckOperator\": \"airflow.providers.common.sql.operators.sql.SQLIntervalCheckOperator\",",
          "134:         \"PrestoValueCheckOperator\": \"airflow.providers.common.sql.operators.sql.SQLValueCheckOperator\",",
          "136:     \"presto_to_mysql\": {",
          "137:         \"PrestoToMySqlOperator\": \"airflow.providers.mysql.transfers.presto_to_mysql.PrestoToMySqlOperator\",",
          "138:         \"PrestoToMySqlTransfer\": \"airflow.providers.mysql.transfers.presto_to_mysql.PrestoToMySqlOperator\",",
          "140:     \"python_operator\": {",
          "141:         \"BranchPythonOperator\": \"airflow.operators.python.BranchPythonOperator\",",
          "142:         \"PythonOperator\": \"airflow.operators.python.PythonOperator\",",
          "143:         \"PythonVirtualenvOperator\": \"airflow.operators.python.PythonVirtualenvOperator\",",
          "144:         \"ShortCircuitOperator\": \"airflow.operators.python.ShortCircuitOperator\",",
          "146:     \"redshift_to_s3_operator\": {",
          "147:         \"RedshiftToS3Operator\": \"airflow.providers.amazon.aws.transfers.redshift_to_s3.RedshiftToS3Operator\",",
          "148:         \"RedshiftToS3Transfer\": \"airflow.providers.amazon.aws.transfers.redshift_to_s3.RedshiftToS3Operator\",",
          "150:     \"s3_file_transform_operator\": {",
          "151:         \"S3FileTransformOperator\": (",
          "152:             \"airflow.providers.amazon.aws.operators.s3_file_transform.S3FileTransformOperator\"",
          "155:     \"s3_to_hive_operator\": {",
          "156:         \"S3ToHiveOperator\": \"airflow.providers.apache.hive.transfers.s3_to_hive.S3ToHiveOperator\",",
          "157:         \"S3ToHiveTransfer\": \"airflow.providers.apache.hive.transfers.s3_to_hive.S3ToHiveOperator\",",
          "158:     },",
          "159:     \"s3_to_redshift_operator\": {",
          "160:         \"S3ToRedshiftOperator\": \"airflow.providers.amazon.aws.transfers.s3_to_redshift.S3ToRedshiftOperator\",",
          "161:         \"S3ToRedshiftTransfer\": \"airflow.providers.amazon.aws.transfers.s3_to_redshift.S3ToRedshiftOperator\",",
          "162:     },",
          "163:     \"slack_operator\": {",
          "164:         \"SlackAPIOperator\": \"airflow.providers.slack.operators.slack.SlackAPIOperator\",",
          "165:         \"SlackAPIPostOperator\": \"airflow.providers.slack.operators.slack.SlackAPIPostOperator\",",
          "166:     },",
          "167:     \"sql\": {",
          "168:         \"BaseSQLOperator\": \"airflow.providers.common.sql.operators.sql.BaseSQLOperator\",",
          "169:         \"BranchSQLOperator\": \"airflow.providers.common.sql.operators.sql.BranchSQLOperator\",",
          "170:         \"SQLCheckOperator\": \"airflow.providers.common.sql.operators.sql.SQLCheckOperator\",",
          "171:         \"SQLColumnCheckOperator\": \"airflow.providers.common.sql.operators.sql.SQLColumnCheckOperator\",",
          "172:         \"SQLIntervalCheckOperator\": \"airflow.providers.common.sql.operators.sql.SQLIntervalCheckOperator\",",
          "173:         \"SQLTableCheckOperator\": \"airflow.providers.common.sql.operators.sql.SQLTableCheckOperator\",",
          "174:         \"SQLThresholdCheckOperator\": \"airflow.providers.common.sql.operators.sql.SQLThresholdCheckOperator\",",
          "175:         \"SQLValueCheckOperator\": \"airflow.providers.common.sql.operators.sql.SQLValueCheckOperator\",",
          "176:         \"_convert_to_float_if_possible\": (",
          "177:             \"airflow.providers.common.sql.operators.sql._convert_to_float_if_possible\"",
          "179:         \"parse_boolean\": \"airflow.providers.common.sql.operators.sql.parse_boolean\",",
          "181:     \"sql_branch_operator\": {",
          "182:         \"BranchSQLOperator\": \"airflow.providers.common.sql.operators.sql.BranchSQLOperator\",",
          "183:         \"BranchSqlOperator\": \"airflow.providers.common.sql.operators.sql.BranchSQLOperator\",",
          "185:     \"sqlite_operator\": {",
          "186:         \"SqliteOperator\": \"airflow.providers.sqlite.operators.sqlite.SqliteOperator\",",
          "188:     \"subdag_operator\": {",
          "189:         \"SkippedStatePropagationOptions\": \"airflow.operators.subdag.SkippedStatePropagationOptions\",",
          "190:         \"SubDagOperator\": \"airflow.operators.subdag.SubDagOperator\",",
          "",
          "---------------"
        ],
        "airflow/sensors/__init__.py||airflow/sensors/__init__.py": [
          "File: airflow/sensors/__init__.py -> airflow/sensors/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: from airflow.utils.deprecation_tools import add_deprecated_classes",
          "24: __deprecated_classes = {",
          "27:     },",
          "30:     },",
          "35:     },",
          "38:     },",
          "41:     },",
          "45:         ),",
          "46:     },",
          "50:         ),",
          "51:     },",
          "54:     },",
          "57:     },",
          "60:     },",
          "63:     },",
          "66:     },",
          "67: }",
          "",
          "[Removed Lines]",
          "25:     'base_sensor_operator': {",
          "26:         'BaseSensorOperator': 'airflow.sensors.base.BaseSensorOperator',",
          "28:     'date_time_sensor': {",
          "29:         'DateTimeSensor': 'airflow.sensors.date_time.DateTimeSensor',",
          "31:     'external_task_sensor': {",
          "32:         'ExternalTaskMarker': 'airflow.sensors.external_task.ExternalTaskMarker',",
          "33:         'ExternalTaskSensor': 'airflow.sensors.external_task.ExternalTaskSensor',",
          "34:         'ExternalTaskSensorLink': 'airflow.sensors.external_task.ExternalTaskSensorLink',",
          "36:     'hive_partition_sensor': {",
          "37:         'HivePartitionSensor': 'airflow.providers.apache.hive.sensors.hive_partition.HivePartitionSensor',",
          "39:     'http_sensor': {",
          "40:         'HttpSensor': 'airflow.providers.http.sensors.http.HttpSensor',",
          "42:     'metastore_partition_sensor': {",
          "43:         'MetastorePartitionSensor': (",
          "44:             'airflow.providers.apache.hive.sensors.metastore_partition.MetastorePartitionSensor'",
          "47:     'named_hive_partition_sensor': {",
          "48:         'NamedHivePartitionSensor': (",
          "49:             'airflow.providers.apache.hive.sensors.named_hive_partition.NamedHivePartitionSensor'",
          "52:     's3_key_sensor': {",
          "53:         'S3KeySensor': 'airflow.providers.amazon.aws.sensors.s3.S3KeySensor',",
          "55:     'sql': {",
          "56:         'SqlSensor': 'airflow.providers.common.sql.sensors.sql.SqlSensor',",
          "58:     'sql_sensor': {",
          "59:         'SqlSensor': 'airflow.providers.common.sql.sensors.sql.SqlSensor',",
          "61:     'time_delta_sensor': {",
          "62:         'TimeDeltaSensor': 'airflow.sensors.time_delta.TimeDeltaSensor',",
          "64:     'web_hdfs_sensor': {",
          "65:         'WebHdfsSensor': 'airflow.providers.apache.hdfs.sensors.web_hdfs.WebHdfsSensor',",
          "",
          "[Added Lines]",
          "25:     \"base_sensor_operator\": {",
          "26:         \"BaseSensorOperator\": \"airflow.sensors.base.BaseSensorOperator\",",
          "28:     \"date_time_sensor\": {",
          "29:         \"DateTimeSensor\": \"airflow.sensors.date_time.DateTimeSensor\",",
          "31:     \"external_task_sensor\": {",
          "32:         \"ExternalTaskMarker\": \"airflow.sensors.external_task.ExternalTaskMarker\",",
          "33:         \"ExternalTaskSensor\": \"airflow.sensors.external_task.ExternalTaskSensor\",",
          "34:         \"ExternalTaskSensorLink\": \"airflow.sensors.external_task.ExternalTaskSensorLink\",",
          "36:     \"hive_partition_sensor\": {",
          "37:         \"HivePartitionSensor\": \"airflow.providers.apache.hive.sensors.hive_partition.HivePartitionSensor\",",
          "39:     \"http_sensor\": {",
          "40:         \"HttpSensor\": \"airflow.providers.http.sensors.http.HttpSensor\",",
          "42:     \"metastore_partition_sensor\": {",
          "43:         \"MetastorePartitionSensor\": (",
          "44:             \"airflow.providers.apache.hive.sensors.metastore_partition.MetastorePartitionSensor\"",
          "47:     \"named_hive_partition_sensor\": {",
          "48:         \"NamedHivePartitionSensor\": (",
          "49:             \"airflow.providers.apache.hive.sensors.named_hive_partition.NamedHivePartitionSensor\"",
          "52:     \"s3_key_sensor\": {",
          "53:         \"S3KeySensor\": \"airflow.providers.amazon.aws.sensors.s3.S3KeySensor\",",
          "55:     \"sql\": {",
          "56:         \"SqlSensor\": \"airflow.providers.common.sql.sensors.sql.SqlSensor\",",
          "58:     \"sql_sensor\": {",
          "59:         \"SqlSensor\": \"airflow.providers.common.sql.sensors.sql.SqlSensor\",",
          "61:     \"time_delta_sensor\": {",
          "62:         \"TimeDeltaSensor\": \"airflow.sensors.time_delta.TimeDeltaSensor\",",
          "64:     \"web_hdfs_sensor\": {",
          "65:         \"WebHdfsSensor\": \"airflow.providers.apache.hdfs.sensors.web_hdfs.WebHdfsSensor\",",
          "",
          "---------------"
        ],
        "airflow/utils/log/__init__.py||airflow/utils/log/__init__.py": [
          "File: airflow/utils/log/__init__.py -> airflow/utils/log/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: from airflow.utils.deprecation_tools import add_deprecated_classes",
          "23: __deprecated_classes = {",
          "27:         ),",
          "28:     },",
          "32:         ),",
          "33:     },",
          "36:     },",
          "39:     },",
          "43:         ),",
          "44:     },",
          "47:     },",
          "48: }",
          "",
          "[Removed Lines]",
          "24:     'cloudwatch_task_handler': {",
          "25:         'CloudwatchTaskHandler': (",
          "26:             'airflow.providers.amazon.aws.log.cloudwatch_task_handler.CloudwatchTaskHandler'",
          "29:     'es_task_handler': {",
          "30:         'ElasticsearchTaskHandler': (",
          "31:             'airflow.providers.elasticsearch.log.es_task_handler.ElasticsearchTaskHandler'",
          "34:     'gcs_task_handler': {",
          "35:         'GCSTaskHandler': 'airflow.providers.google.cloud.log.gcs_task_handler.GCSTaskHandler',",
          "37:     's3_task_handler': {",
          "38:         'S3TaskHandler': 'airflow.providers.amazon.aws.log.s3_task_handler.S3TaskHandler',",
          "40:     'stackdriver_task_handler': {",
          "41:         'StackdriverTaskHandler': (",
          "42:             'airflow.providers.google.cloud.log.stackdriver_task_handler.StackdriverTaskHandler'",
          "45:     'wasb_task_handler': {",
          "46:         'WasbTaskHandler': 'airflow.providers.microsoft.azure.log.wasb_task_handler.WasbTaskHandler',",
          "",
          "[Added Lines]",
          "24:     \"cloudwatch_task_handler\": {",
          "25:         \"CloudwatchTaskHandler\": (",
          "26:             \"airflow.providers.amazon.aws.log.cloudwatch_task_handler.CloudwatchTaskHandler\"",
          "29:     \"es_task_handler\": {",
          "30:         \"ElasticsearchTaskHandler\": (",
          "31:             \"airflow.providers.elasticsearch.log.es_task_handler.ElasticsearchTaskHandler\"",
          "34:     \"gcs_task_handler\": {",
          "35:         \"GCSTaskHandler\": \"airflow.providers.google.cloud.log.gcs_task_handler.GCSTaskHandler\",",
          "37:     \"s3_task_handler\": {",
          "38:         \"S3TaskHandler\": \"airflow.providers.amazon.aws.log.s3_task_handler.S3TaskHandler\",",
          "40:     \"stackdriver_task_handler\": {",
          "41:         \"StackdriverTaskHandler\": (",
          "42:             \"airflow.providers.google.cloud.log.stackdriver_task_handler.StackdriverTaskHandler\"",
          "45:     \"wasb_task_handler\": {",
          "46:         \"WasbTaskHandler\": \"airflow.providers.microsoft.azure.log.wasb_task_handler.WasbTaskHandler\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "96e4d964911e74ae6df69eb6550e4004c750bde8",
      "candidate_info": {
        "commit_hash": "96e4d964911e74ae6df69eb6550e4004c750bde8",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/96e4d964911e74ae6df69eb6550e4004c750bde8",
        "files": [
          "airflow/www/static/js/dag/details/gantt/Row.tsx",
          "airflow/www/static/js/dag/details/graph/utils.ts",
          "airflow/www/static/js/dag/grid/TaskName.test.tsx",
          "airflow/www/static/js/dag/grid/TaskName.tsx",
          "airflow/www/static/js/dag/grid/ToggleGroups.tsx",
          "airflow/www/static/js/dag/grid/index.test.tsx",
          "airflow/www/static/js/dag/grid/renderTaskRows.tsx",
          "airflow/www/static/js/utils/graph.ts"
        ],
        "message": "Fix for TaskGroup toggles for duplicated labels (#34072)\n\n* Fix for TaskGroup toggles for duplicated labels\n\nWe have been using `_.label` so far to remember which task groups are opened/closed. Unfortunately, this leads to issues when the same label is used twice, which can happen as described in the linked issue.\nWith this change we switch to use `_.id` instead, which must be unique (otherwise parsing the DAG would lead to `DuplicateTaskIdFound`).\n\nFixes #34066\n\n* Fix toggle for Gantt as well\n\n(cherry picked from commit b9acffa81bf61dcf0c5553942c52629c7f75ebe2)",
        "before_after_code_files": [
          "airflow/www/static/js/dag/details/gantt/Row.tsx||airflow/www/static/js/dag/details/gantt/Row.tsx",
          "airflow/www/static/js/dag/details/graph/utils.ts||airflow/www/static/js/dag/details/graph/utils.ts",
          "airflow/www/static/js/dag/grid/TaskName.test.tsx||airflow/www/static/js/dag/grid/TaskName.test.tsx",
          "airflow/www/static/js/dag/grid/TaskName.tsx||airflow/www/static/js/dag/grid/TaskName.tsx",
          "airflow/www/static/js/dag/grid/ToggleGroups.tsx||airflow/www/static/js/dag/grid/ToggleGroups.tsx",
          "airflow/www/static/js/dag/grid/index.test.tsx||airflow/www/static/js/dag/grid/index.test.tsx",
          "airflow/www/static/js/dag/grid/renderTaskRows.tsx||airflow/www/static/js/dag/grid/renderTaskRows.tsx",
          "airflow/www/static/js/utils/graph.ts||airflow/www/static/js/utils/graph.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/34775"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/static/js/dag/details/gantt/Row.tsx||airflow/www/static/js/dag/details/gantt/Row.tsx": [
          "File: airflow/www/static/js/dag/details/gantt/Row.tsx -> airflow/www/static/js/dag/details/gantt/Row.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   const instance = task.instances.find((ti) => ti.runId === runId);",
          "54:   const isSelected = taskId === instance?.taskId;",
          "55:   const hasQueuedDttm = !!instance?.queuedDttm;",
          "59:   const taskDuration = getDuration(instance?.startDate, instance?.endDate);",
          "",
          "[Removed Lines]",
          "56:   const isOpen = openGroupIds.includes(task.label || \"\");",
          "",
          "[Added Lines]",
          "56:   const isOpen = openGroupIds.includes(task.id || \"\");",
          "",
          "---------------"
        ],
        "airflow/www/static/js/dag/details/graph/utils.ts||airflow/www/static/js/dag/details/graph/utils.ts": [
          "File: airflow/www/static/js/dag/details/graph/utils.ts -> airflow/www/static/js/dag/details/graph/utils.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:         onToggleCollapse: () => {",
          "80:           let newGroupIds = [];",
          "81:           if (!node.value.isOpen) {",
          "83:           } else {",
          "85:           }",
          "86:           onToggleGroups(newGroupIds);",
          "87:         },",
          "",
          "[Removed Lines]",
          "82:             newGroupIds = [...openGroupIds, node.value.label];",
          "84:             newGroupIds = openGroupIds.filter((g) => g !== node.value.label);",
          "",
          "[Added Lines]",
          "82:             newGroupIds = [...openGroupIds, node.id];",
          "84:             newGroupIds = openGroupIds.filter((g) => g !== node.id);",
          "",
          "---------------"
        ],
        "airflow/www/static/js/dag/grid/TaskName.test.tsx||airflow/www/static/js/dag/grid/TaskName.test.tsx": [
          "File: airflow/www/static/js/dag/grid/TaskName.test.tsx -> airflow/www/static/js/dag/grid/TaskName.test.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: describe(\"Test TaskName\", () => {",
          "30:   test(\"Displays a normal task name\", () => {",
          "31:     const { getByText } = render(",
          "33:       { wrapper: ChakraWrapper }",
          "34:     );",
          "",
          "[Removed Lines]",
          "32:       <TaskName label=\"test\" onToggle={() => {}} />,",
          "",
          "[Added Lines]",
          "32:       <TaskName label=\"test\" id=\"test\" onToggle={() => {}} />,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:   test(\"Displays a mapped task name\", () => {",
          "40:     const { getByText } = render(",
          "42:       { wrapper: ChakraWrapper }",
          "43:     );",
          "",
          "[Removed Lines]",
          "41:       <TaskName level={0} label=\"test\" isMapped onToggle={() => {}} />,",
          "",
          "[Added Lines]",
          "41:       <TaskName",
          "42:         level={0}",
          "43:         label=\"test\"",
          "44:         id=\"test\"",
          "45:         isMapped",
          "46:         onToggle={() => {}}",
          "47:       />,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:   test(\"Displays a group task name\", () => {",
          "49:     const { getByText, getByTestId } = render(",
          "51:       { wrapper: ChakraWrapper }",
          "52:     );",
          "",
          "[Removed Lines]",
          "50:       <TaskName level={0} label=\"test\" isGroup onToggle={() => {}} />,",
          "",
          "[Added Lines]",
          "56:       <TaskName level={0} label=\"test\" id=\"test\" isGroup onToggle={() => {}} />,",
          "",
          "---------------"
        ],
        "airflow/www/static/js/dag/grid/TaskName.tsx||airflow/www/static/js/dag/grid/TaskName.tsx": [
          "File: airflow/www/static/js/dag/grid/TaskName.tsx -> airflow/www/static/js/dag/grid/TaskName.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:   isOpen?: boolean;",
          "29:   level?: number;",
          "30:   label: string;",
          "31: }",
          "33: const TaskName = ({",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:   id: string;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:   isOpen = false,",
          "38:   level = 0,",
          "39:   label,",
          "40: }: Props) => (",
          "41:   <Flex",
          "42:     as={isGroup ? \"button\" : \"div\"}",
          "43:     onClick={onToggle}",
          "44:     aria-label={label}",
          "45:     title={label}",
          "46:     mr={4}",
          "47:     width=\"100%\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:   id,",
          "47:     data-testid={id}",
          "",
          "---------------"
        ],
        "airflow/www/static/js/dag/grid/ToggleGroups.tsx||airflow/www/static/js/dag/grid/ToggleGroups.tsx": [
          "File: airflow/www/static/js/dag/grid/ToggleGroups.tsx -> airflow/www/static/js/dag/grid/ToggleGroups.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:   const checkTasks = (tasks: Task[]) =>",
          "29:     tasks.forEach((task) => {",
          "30:       if (task.children) {",
          "32:         checkTasks(task.children);",
          "33:       }",
          "34:     });",
          "",
          "[Removed Lines]",
          "31:         groupIds.push(task.label!);",
          "",
          "[Added Lines]",
          "31:         groupIds.push(task.id!);",
          "",
          "---------------"
        ],
        "airflow/www/static/js/dag/grid/index.test.tsx||airflow/www/static/js/dag/grid/index.test.tsx": [
          "File: airflow/www/static/js/dag/grid/index.test.tsx -> airflow/www/static/js/dag/grid/index.test.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:           },",
          "87:         ],",
          "88:       },",
          "89:     ],",
          "90:     instances: [],",
          "91:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:       {",
          "90:         id: \"group_2\",",
          "91:         label: \"group_2\",",
          "92:         instances: [",
          "93:           {",
          "94:             endDate: \"2021-10-26T15:42:03.391939+00:00\",",
          "95:             runId: \"run1\",",
          "96:             startDate: \"2021-10-26T15:42:03.391917+00:00\",",
          "97:             state: \"success\",",
          "98:             taskId: \"group_1\",",
          "99:             tryNumber: 1,",
          "100:           },",
          "101:         ],",
          "102:         children: [",
          "103:           {",
          "104:             id: \"group_2.task_1\",",
          "105:             operator: \"DummyOperator\",",
          "106:             label: \"task_1\",",
          "107:             instances: [",
          "108:               {",
          "109:                 endDate: \"2021-10-26T15:42:03.391939+00:00\",",
          "110:                 runId: \"run1\",",
          "111:                 startDate: \"2021-10-26T15:42:03.391917+00:00\",",
          "112:                 state: \"success\",",
          "113:                 taskId: \"group_1.task_1\",",
          "114:                 tryNumber: 1,",
          "115:               },",
          "116:             ],",
          "117:             children: [",
          "118:               {",
          "119:                 id: \"group_2.task_1.sub_task_1\",",
          "120:                 label: \"sub_task_1\",",
          "121:                 extraLinks: [],",
          "122:                 operator: \"DummyOperator\",",
          "123:                 instances: [",
          "124:                   {",
          "125:                     endDate: \"2021-10-26T15:42:03.391939+00:00\",",
          "126:                     runId: \"run1\",",
          "127:                     startDate: \"2021-10-26T15:42:03.391917+00:00\",",
          "128:                     state: \"success\",",
          "129:                     taskId: \"group_2.task_1.sub_task_1\",",
          "130:                     tryNumber: 1,",
          "131:                   },",
          "132:                 ],",
          "133:               },",
          "134:             ],",
          "135:           },",
          "136:         ],",
          "137:       },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:   });",
          "146:   test(\"Group defaults to closed\", () => {",
          "148:       <Grid openGroupIds={[]} onToggleGroups={() => {}} />,",
          "149:       { wrapper: Wrapper }",
          "150:     );",
          "157:   });",
          "159:   test(\"Buttons are disabled if all groups are expanded or collapsed\", () => {",
          "",
          "[Removed Lines]",
          "147:     const { getByTestId, getByText, getAllByTestId } = render(",
          "152:     const groupName = getByText(\"group_1\");",
          "154:     expect(getAllByTestId(\"task-instance\")).toHaveLength(1);",
          "155:     expect(groupName).toBeInTheDocument();",
          "156:     expect(getByTestId(\"open-group\")).toBeInTheDocument();",
          "",
          "[Added Lines]",
          "196:     const { queryAllByTestId, getByText, getAllByTestId } = render(",
          "201:     const groupName1 = getByText(\"group_1\");",
          "202:     const groupName2 = getByText(\"group_2\");",
          "204:     expect(getAllByTestId(\"task-instance\")).toHaveLength(2);",
          "205:     expect(groupName1).toBeInTheDocument();",
          "206:     expect(groupName2).toBeInTheDocument();",
          "207:     expect(queryAllByTestId(\"open-group\")).toHaveLength(2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168:     expect(collapseButton).toBeDisabled();",
          "170:     const taskElements = queryAllByTestId(\"task-instance\");",
          "173:     fireEvent.click(expandButton);",
          "175:     const newTaskElements = queryAllByTestId(\"task-instance\");",
          "178:     expect(collapseButton).toBeEnabled();",
          "179:     expect(expandButton).toBeDisabled();",
          "",
          "[Removed Lines]",
          "171:     expect(taskElements).toHaveLength(1);",
          "176:     expect(newTaskElements).toHaveLength(3);",
          "",
          "[Added Lines]",
          "222:     expect(taskElements).toHaveLength(2);",
          "227:     expect(newTaskElements).toHaveLength(6);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "188:     const expandButton = getByTitle(EXPAND);",
          "189:     const collapseButton = getByTitle(COLLAPSE);",
          "197:     expect(queryAllByTestId(\"open-group\")).toHaveLength(0);",
          "199:     fireEvent.click(collapseButton);",
          "201:     await waitFor(() =>",
          "203:     );",
          "204:     expect(queryAllByTestId(\"close-group\")).toHaveLength(0);",
          "208:     fireEvent.click(expandButton);",
          "210:     await waitFor(() =>",
          "212:     );",
          "214:     expect(queryAllByTestId(\"open-group\")).toHaveLength(0);",
          "215:   });",
          "217:   test(\"Hovered effect on task state\", async () => {",
          "219:     const { rerender, queryAllByTestId } = render(",
          "220:       <Grid openGroupIds={openGroupIds} onToggleGroups={() => {}} />,",
          "221:       { wrapper: Wrapper }",
          "222:     );",
          "224:     const taskElements = queryAllByTestId(\"task-instance\");",
          "227:     taskElements.forEach((taskElement) => {",
          "228:       expect(taskElement).toHaveStyle(\"opacity: 1\");",
          "",
          "[Removed Lines]",
          "191:     const groupName = getByText(\"group_1\");",
          "193:     expect(queryAllByTestId(\"task-instance\")).toHaveLength(3);",
          "194:     expect(groupName).toBeInTheDocument();",
          "196:     expect(queryAllByTestId(\"close-group\")).toHaveLength(2);",
          "202:       expect(queryAllByTestId(\"task-instance\")).toHaveLength(1)",
          "206:     expect(queryAllByTestId(\"open-group\")).toHaveLength(1);",
          "211:       expect(queryAllByTestId(\"task-instance\")).toHaveLength(3)",
          "213:     expect(queryAllByTestId(\"close-group\")).toHaveLength(2);",
          "218:     const openGroupIds = [\"group_1\", \"task_1\"];",
          "225:     expect(taskElements).toHaveLength(3);",
          "",
          "[Added Lines]",
          "242:     const groupName1 = getByText(\"group_1\");",
          "243:     const groupName2 = getByText(\"group_2\");",
          "245:     expect(queryAllByTestId(\"task-instance\")).toHaveLength(6);",
          "246:     expect(groupName1).toBeInTheDocument();",
          "247:     expect(groupName2).toBeInTheDocument();",
          "249:     expect(queryAllByTestId(\"close-group\")).toHaveLength(4);",
          "255:       expect(queryAllByTestId(\"task-instance\")).toHaveLength(2)",
          "259:     expect(queryAllByTestId(\"open-group\")).toHaveLength(2);",
          "261:     fireEvent.click(expandButton);",
          "263:     await waitFor(() =>",
          "264:       expect(queryAllByTestId(\"task-instance\")).toHaveLength(6)",
          "265:     );",
          "266:     expect(queryAllByTestId(\"close-group\")).toHaveLength(4);",
          "267:     expect(queryAllByTestId(\"open-group\")).toHaveLength(0);",
          "268:   });",
          "270:   test(\"Toggling a group does not affect groups with the same label\", async () => {",
          "271:     const { getByTitle, getByTestId, queryAllByTestId } = render(",
          "272:       <GridWithGroups />,",
          "273:       { wrapper: Wrapper }",
          "274:     );",
          "276:     const expandButton = getByTitle(EXPAND);",
          "281:       expect(queryAllByTestId(\"task-instance\")).toHaveLength(6)",
          "283:     expect(queryAllByTestId(\"close-group\")).toHaveLength(4);",
          "286:     const group2Task1 = getByTestId(\"group_2.task_1\");",
          "288:     fireEvent.click(group2Task1);",
          "291:     await waitFor(() =>",
          "292:       expect(queryAllByTestId(\"task-instance\")).toHaveLength(5)",
          "293:     );",
          "294:     expect(queryAllByTestId(\"close-group\")).toHaveLength(3);",
          "295:     expect(queryAllByTestId(\"open-group\")).toHaveLength(1);",
          "299:     const openGroupIds = [\"group_1\", \"group_1.task_1\"];",
          "306:     expect(taskElements).toHaveLength(4);",
          "",
          "---------------"
        ],
        "airflow/www/static/js/dag/grid/renderTaskRows.tsx||airflow/www/static/js/dag/grid/renderTaskRows.tsx": [
          "File: airflow/www/static/js/dag/grid/renderTaskRows.tsx -> airflow/www/static/js/dag/grid/renderTaskRows.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:   const isGroup = !!task.children;",
          "123:   const isSelected = selected.taskId === task.id;",
          "128:   const memoizedToggle = useCallback(() => {",
          "130:       let newGroupIds = [];",
          "131:       if (!isOpen) {",
          "133:       } else {",
          "135:       }",
          "136:       onToggleGroups(newGroupIds);",
          "137:     }",
          "141:   if (level !== openParentCount) return null;",
          "",
          "[Removed Lines]",
          "125:   const isOpen = openGroupIds.some((g) => g === task.label);",
          "129:     if (isGroup && task.label) {",
          "132:         newGroupIds = [...openGroupIds, task.label];",
          "134:         newGroupIds = openGroupIds.filter((g) => g !== task.label);",
          "138:   }, [isGroup, isOpen, task.label, openGroupIds, onToggleGroups]);",
          "",
          "[Added Lines]",
          "125:   const isOpen = openGroupIds.some((g) => g === task.id);",
          "129:     if (isGroup && task.id) {",
          "132:         newGroupIds = [...openGroupIds, task.id];",
          "134:         newGroupIds = openGroupIds.filter((g) => g !== task.id);",
          "138:   }, [isGroup, isOpen, task.id, openGroupIds, onToggleGroups]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:               isGroup={isGroup}",
          "169:               isMapped={task.isMapped && !isParentMapped}",
          "170:               label={task.label || task.id || \"\"}",
          "171:               isOpen={isOpen}",
          "172:               level={level}",
          "173:             />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:               id={task.id || \"\"}",
          "",
          "---------------"
        ],
        "airflow/www/static/js/utils/graph.ts||airflow/www/static/js/utils/graph.ts": [
          "File: airflow/www/static/js/utils/graph.ts -> airflow/www/static/js/utils/graph.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:     height?: number;",
          "118:   } => {",
          "119:     const { id, value, children } = node;",
          "121:     const childCount =",
          "122:       children?.filter((c: DepNode) => !c.id.includes(\"join_id\")).length || 0;",
          "123:     const childIds = children?.length ? getNestedChildIds(children) : [];",
          "",
          "[Removed Lines]",
          "120:     const isOpen = openGroupIds?.includes(value.label);",
          "",
          "[Added Lines]",
          "120:     const isOpen = openGroupIds?.includes(id);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:           sourceId: childIds.indexOf(e.sourceId) > -1 ? node.id : e.sourceId,",
          "171:           targetId: childIds.indexOf(e.targetId) > -1 ? node.id : e.targetId,",
          "172:         }));",
          "174:     }",
          "175:     return {",
          "176:       id,",
          "",
          "[Removed Lines]",
          "173:       closedGroupIds.push(value.label);",
          "",
          "[Added Lines]",
          "173:       closedGroupIds.push(id);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a68ad56b3bc2355888f595d3e40fdcc509ddd25b",
      "candidate_info": {
        "commit_hash": "a68ad56b3bc2355888f595d3e40fdcc509ddd25b",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/a68ad56b3bc2355888f595d3e40fdcc509ddd25b",
        "files": [
          "Dockerfile.ci",
          "dev/breeze/README.md",
          "dev/breeze/setup.cfg",
          "scripts/ci/install_breeze.sh"
        ],
        "message": "Fix broken breeze by fixing package version (#34701)\n\n(cherry picked from commit 6618c5f90d037d57e9f3bf1e90cd0712426d6caa)",
        "before_after_code_files": [
          "Dockerfile.ci||Dockerfile.ci",
          "dev/breeze/setup.cfg||dev/breeze/setup.cfg",
          "scripts/ci/install_breeze.sh||scripts/ci/install_breeze.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/34775"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Dockerfile.ci||Dockerfile.ci": [
          "File: Dockerfile.ci -> Dockerfile.ci",
          "--- Hunk 1 ---",
          "[Context before]",
          "1242: ARG AIRFLOW_IMAGE_REPOSITORY=\"https://github.com/apache/airflow\"",
          "1244: # By increasing this number we can do force build of all dependencies",
          "1247: # Make sure noninteractive debian install is used and language variables set",
          "1248: ENV PYTHON_BASE_IMAGE=${PYTHON_BASE_IMAGE} \\",
          "",
          "[Removed Lines]",
          "1245: ARG DEPENDENCIES_EPOCH_NUMBER=\"9\"",
          "",
          "[Added Lines]",
          "1245: ARG DEPENDENCIES_EPOCH_NUMBER=\"10\"",
          "",
          "---------------"
        ],
        "dev/breeze/setup.cfg||dev/breeze/setup.cfg": [
          "File: dev/breeze/setup.cfg -> dev/breeze/setup.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     filelock",
          "57:     inputimeout",
          "58:     jinja2",
          "60:     pendulum",
          "61:     pre-commit",
          "62:     psutil",
          "",
          "[Removed Lines]",
          "59:     packaging",
          "",
          "[Added Lines]",
          "59:     packaging==23.1",
          "",
          "---------------"
        ],
        "scripts/ci/install_breeze.sh||scripts/ci/install_breeze.sh": [
          "File: scripts/ci/install_breeze.sh -> scripts/ci/install_breeze.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: cd \"$( dirname \"${BASH_SOURCE[0]}\" )/../../\"",
          "23: python -m pipx install --editable ./dev/breeze/ --force",
          "24: echo '/home/runner/.local/bin' >> \"${GITHUB_PATH}\"",
          "",
          "[Removed Lines]",
          "22: python -m pip install pipx",
          "",
          "[Added Lines]",
          "22: python -m pip install pipx packaging==23.1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6cc73db317d36c522b0716156a9553a02b278169",
      "candidate_info": {
        "commit_hash": "6cc73db317d36c522b0716156a9553a02b278169",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/6cc73db317d36c522b0716156a9553a02b278169",
        "files": [
          "airflow/www/fab_security/manager.py"
        ],
        "message": "Replace type func by isinstance in fab_security manager (#33760)\n\n(cherry picked from commit a44f261fcdd6b452aac0d6faaba8e134d0e6d1fe)",
        "before_after_code_files": [
          "airflow/www/fab_security/manager.py||airflow/www/fab_security/manager.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/34775"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/fab_security/manager.py||airflow/www/fab_security/manager.py": [
          "File: airflow/www/fab_security/manager.py -> airflow/www/fab_security/manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "486:         def wraps(provider, response=None):",
          "487:             ret = f(self, provider, response=response)",
          "488:             # Checks if decorator is well behaved and returns a dict as supposed.",
          "490:                 log.error(\"OAuth user info decorated function did not returned a dict, but: %s\", type(ret))",
          "491:                 return {}",
          "492:             return ret",
          "",
          "[Removed Lines]",
          "489:             if not type(ret) == dict:",
          "",
          "[Added Lines]",
          "489:             if not isinstance(ret, dict):",
          "",
          "---------------"
        ]
      }
    }
  ]
}