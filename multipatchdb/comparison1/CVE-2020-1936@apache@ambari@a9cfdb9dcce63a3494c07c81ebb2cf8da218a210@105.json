{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b5ceae4f84691a9b838da720371e67b81e6adbce",
      "candidate_info": {
        "commit_hash": "b5ceae4f84691a9b838da720371e67b81e6adbce",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/b5ceae4f84691a9b838da720371e67b81e6adbce",
        "files": [
          "ambari-web/app/mixins/common/configs/config_recommendation_parser.js"
        ],
        "message": "[AMBARI-24452] [UI Deploy] LLAP queue is not created/set in YARN configs while enabling HSI.",
        "before_after_code_files": [
          "ambari-web/app/mixins/common/configs/config_recommendation_parser.js||ambari-web/app/mixins/common/configs/config_recommendation_parser.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/mixins/common/configs/config_recommendation_parser.js||ambari-web/app/mixins/common/configs/config_recommendation_parser.js": [
          "File: ambari-web/app/mixins/common/configs/config_recommendation_parser.js -> ambari-web/app/mixins/common/configs/config_recommendation_parser.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:         }",
          "171:       }",
          "174:         allowConfigUpdate = false;",
          "175:       }",
          "181:       if (allowConfigUpdate) {",
          "182:         Em.setProperties(config, {",
          "183:           value: recommendedValue,",
          "",
          "[Removed Lines]",
          "173:       if (prevRecommeneded !== value) {",
          "177:       if (name === \"capacity-scheduler\") {",
          "178:         allowConfigUpdate = this.compareCapacitySchedulerValues(prevRecommeneded, value);",
          "179:       }",
          "",
          "[Added Lines]",
          "173:       if (prevRecommeneded !== value && name !== \"capacity-scheduler\") {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "196:     Em.tryInvoke(config, 'validate');",
          "197:     return config;",
          "198:   },",
          "",
          "[Removed Lines]",
          "210:   compareCapacitySchedulerValues: function (prevRec, value) {",
          "213:     let prevRecArr = prevRec.split(\"\\n\");",
          "214:     let valueArr = value.split(\"\\n\");",
          "217:     if (valueArr[0].includes(\"capacity-scheduler\")) {",
          "218:       valueArr = valueArr.splice(1);",
          "219:     }",
          "221:     if (prevRecArr.length !== valueArr.length) {",
          "222:       return false;",
          "223:     }",
          "224:     if (prevRecArr.length < 2 || valueArr.length < 2) {",
          "225:       return prevRec === value;",
          "226:     }",
          "227:     let strMap = {};",
          "228:     for (var i=0; i <prevRecArr.length; i++) {",
          "229:       strMap[prevRecArr[i]] = true;",
          "230:     }",
          "231:     for (var i=0; i<valueArr.length; i++) {",
          "232:       if (!strMap[valueArr[i]]) {",
          "233:         return false;",
          "234:       }",
          "235:     }",
          "236:     return true;",
          "237:   },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95b51e0603c09d65cc347abebe46236d20d8db02",
      "candidate_info": {
        "commit_hash": "95b51e0603c09d65cc347abebe46236d20d8db02",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/95b51e0603c09d65cc347abebe46236d20d8db02",
        "files": [
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/hive.py"
        ],
        "message": "[AMBARI-24262] - Hive Client Restart Fails When Using A Credential Store (#1705)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/hive.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/hive.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/hive.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/hive.py": [
          "File: ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/hive.py -> ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/hive.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:   params.hive_site_config = update_credential_provider_path(params.hive_site_config,",
          "72:                                                      'hive-site',",
          "74:                                                      params.hive_user,",
          "75:                                                      params.user_group",
          "76:                                                      )",
          "",
          "[Removed Lines]",
          "73:                                                      os.path.join(params.hive_conf_dir, 'hive-site.jceks'),",
          "",
          "[Added Lines]",
          "73:                                                      os.path.join(params.hive_config_dir, 'hive-site.jceks'),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "146ede00d696c3f9afc2e203845d327e9a8057f6",
      "candidate_info": {
        "commit_hash": "146ede00d696c3f9afc2e203845d327e9a8057f6",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/146ede00d696c3f9afc2e203845d327e9a8057f6",
        "files": [
          "ambari-server/pom.xml",
          "ambari-server/src/examples/rack_hosts.yaml",
          "ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java"
        ],
        "message": "[AMBARI-25244] : Rack based parallel restart for Rolling Upgrade (Backport to branch-2.7) (#2997)\n\n* [AMBARI-25244] : Rack based parallel restart for Rolling Upgrade\n\n* minor change\n\n* minor change\n\n* minor changes\n\n* minor changes",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java||ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java||ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java -> ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.ambari.server.state.stack.upgrade;",
          "20: import java.util.ArrayList;",
          "21: import java.util.Collections;",
          "22: import java.util.HashMap;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.io.FileReader;",
          "21: import java.io.IOException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: import org.apache.ambari.server.utils.SetUtils;",
          "41: import org.apache.commons.lang.StringUtils;",
          "43: import com.google.common.base.Objects;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import com.esotericsoftware.yamlbeans.YamlReader;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:     StartGrouping.class, StopGrouping.class, HostOrderGrouping.class })",
          "51: public class Grouping {",
          "53:   @XmlAttribute(name=\"name\")",
          "54:   public String name;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:   private static final String RACKS_YAML_KEY_NAME = \"racks\";",
          "57:   private static final String HOSTS_YAML_KEY_NAME = \"hosts\";",
          "58:   private static final String HOST_GROUPS_YAML_KEY_NAME = \"hostGroups\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "219:       if (tasks == null || tasks.isEmpty() || tasks.get(0).getTasks() == null || tasks.get(0).getTasks().isEmpty()) {",
          "220:         return;",
          "221:       }",
          "",
          "[Removed Lines]",
          "218:     private void addTasksToStageInBatches(List<TaskWrapper> tasks, String verb, UpgradeContext ctx, String service, ProcessingComponent pc, Map<String, String> params) {",
          "",
          "[Added Lines]",
          "225:     private void addTasksToStageInBatches(List<TaskWrapper> tasks, String verb, UpgradeContext ctx, String service,",
          "226:                                           ProcessingComponent pc, Map<String, String> params) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "227:       for (TaskWrapper tw : tasks) {",
          "229:         if (m_grouping.parallelScheduler != null) {",
          "230:           int taskParallelism = m_grouping.parallelScheduler.maxDegreeOfParallelism;",
          "231:           String maxDegreeFromClusterEnv = ctx.getResolver()",
          "",
          "[Removed Lines]",
          "228:         List<Set<String>> hostSets;",
          "",
          "[Added Lines]",
          "236:         List<Set<String>> hostSets = null;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "236:           if (taskParallelism == Integer.MAX_VALUE) {",
          "237:             taskParallelism = ctx.getDefaultMaxDegreeOfParallelism();",
          "238:           }",
          "240:         } else {",
          "241:           hostSets = SetUtils.split(tw.getHosts(), 1);",
          "242:         }",
          "244:         int numBatchesNeeded = hostSets.size();",
          "245:         int batchNum = 0;",
          "246:         for (Set<String> hostSubset : hostSets) {",
          "",
          "[Removed Lines]",
          "239:           hostSets = SetUtils.split(tw.getHosts(), taskParallelism);",
          "",
          "[Added Lines]",
          "247:           final String rackYamlFile =",
          "248:                   ctx.getResolver().getValueFromDesiredConfigurations(ConfigHelper.CLUSTER_ENV, \"rack_yaml_file_path\");",
          "249:           if (StringUtils.isNotEmpty(rackYamlFile)) {",
          "253:             Map<String, Set<String>> hostsByRack = organizeHostsByRack(tw.getHosts(), rackYamlFile);",
          "254:             List<Set<String>> hostSetsForRack;",
          "255:             for (String rack : hostsByRack.keySet()) {",
          "256:               hostSetsForRack = SetUtils.split(hostsByRack.get(rack), taskParallelism);",
          "257:               if (hostSets == null) {",
          "258:                 hostSets = hostSetsForRack;",
          "259:               } else {",
          "260:                 hostSets.addAll(hostSetsForRack);",
          "261:               }",
          "262:             }",
          "263:           } else {",
          "264:             hostSets = SetUtils.split(tw.getHosts(), taskParallelism);",
          "265:           }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "258:       }",
          "259:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294:     private Map<String, Set<String>> organizeHostsByRack(Set<String> hosts, String rackYamlFile) {",
          "295:       try {",
          "296:         Map<String, String> hostToRackMap = getHostToRackMap(rackYamlFile);",
          "297:         Map<String, Set<String>> rackToHostsMap = new HashMap<>();",
          "298:         for (String host : hosts) {",
          "299:           if (hostToRackMap.containsKey(host)) {",
          "300:             String rack = hostToRackMap.get(host);",
          "301:             if (!rackToHostsMap.containsKey(rack)) {",
          "302:               rackToHostsMap.put(rack, new HashSet<>());",
          "303:             }",
          "304:             rackToHostsMap.get(rack).add(host);",
          "305:           } else {",
          "306:             throw new RuntimeException(String.format(\"Rack mapping is not present for host name: %s\", host));",
          "307:           }",
          "308:         }",
          "309:         return rackToHostsMap;",
          "310:       } catch (Exception e) {",
          "311:         throw new RuntimeException(",
          "312:                 String.format(\"Failed to generate Rack to Hosts mapping. filePath: %s\", rackYamlFile), e);",
          "313:       }",
          "314:     }",
          "316:     private static Map<String, String> getHostToRackMap(String rackYamlFile)",
          "317:             throws IOException {",
          "318:       YamlReader yamlReader = new YamlReader(new FileReader(rackYamlFile));",
          "319:       Map rackHostsMap;",
          "320:       try {",
          "321:         rackHostsMap = (Map) yamlReader.read();",
          "322:       } finally {",
          "323:         yamlReader.close();",
          "324:       }",
          "325:       Map racks = (Map) rackHostsMap.get(RACKS_YAML_KEY_NAME);",
          "326:       Map<String, String> hostToRackMap = new HashMap<>();",
          "327:       for (Map.Entry entry : (Set<Map.Entry>) racks.entrySet()) {",
          "328:         Map rackInfoMap = (Map) entry.getValue();",
          "329:         String rackName = (String) entry.getKey();",
          "330:         if (rackInfoMap.containsKey(HOSTS_YAML_KEY_NAME)) {",
          "331:           List<String> hostList = (List<String>) rackInfoMap.get(HOSTS_YAML_KEY_NAME);",
          "332:           for (String host : hostList) {",
          "333:             hostToRackMap.put(host, rackName);",
          "334:           }",
          "335:         }",
          "336:         if (rackInfoMap.containsKey(HOST_GROUPS_YAML_KEY_NAME)) {",
          "337:           List<Map> hostGroups = (List<Map>) rackInfoMap.get(HOST_GROUPS_YAML_KEY_NAME);",
          "338:           for (Map hostGroup : hostGroups) {",
          "339:             if (hostGroup.containsKey(HOSTS_YAML_KEY_NAME)) {",
          "340:               List<String> hostList = (List<String>) hostGroup.get(HOSTS_YAML_KEY_NAME);",
          "341:               for (String host : hostList) {",
          "342:                 hostToRackMap.put(host, rackName);",
          "343:               }",
          "344:             }",
          "345:           }",
          "346:         }",
          "347:       }",
          "348:       return hostToRackMap;",
          "349:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22d49b815f478df2d8b7e7a0a5bbd399f4976e08",
      "candidate_info": {
        "commit_hash": "22d49b815f478df2d8b7e7a0a5bbd399f4976e08",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/22d49b815f478df2d8b7e7a0a5bbd399f4976e08",
        "files": [
          "ambari-server/src/test/python/stacks/2.0.6/HIVE/test_hive_service_check.py"
        ],
        "message": "AMBARI-25357. Hive Service Check fails without proper error message. (mpapirkovskyy) (#3078)\n\nChange-Id: I17724484545ceda00671e682a417b5c56734bfb7",
        "before_after_code_files": [
          "ambari-server/src/test/python/stacks/2.0.6/HIVE/test_hive_service_check.py||ambari-server/src/test/python/stacks/2.0.6/HIVE/test_hive_service_check.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/test/python/stacks/2.0.6/HIVE/test_hive_service_check.py||ambari-server/src/test/python/stacks/2.0.6/HIVE/test_hive_service_check.py": [
          "File: ambari-server/src/test/python/stacks/2.0.6/HIVE/test_hive_service_check.py -> ambari-server/src/test/python/stacks/2.0.6/HIVE/test_hive_service_check.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:                         stack_version = self.STACK_VERSION,",
          "47:                         target = RMFTestCase.TARGET_COMMON_SERVICES",
          "48:     )",
          "50:                               path = ['/bin/', '/usr/bin/', '/usr/lib/hive/bin/', '/usr/sbin/'],",
          "51:                               user = 'ambari-qa',",
          "52:                               timeout = 30,",
          "",
          "[Removed Lines]",
          "49:     self.assertResourceCalled('Execute', \"beeline -u 'jdbc:hive2://c6402.ambari.apache.org:10000/;transportMode=binary;auth=noSasl' -n hive -e ';' 2>&1 | awk '{print}' | grep -i -e 'Connected to:' -e 'Transaction isolation:' -e 'inactive HS2 instance; use service discovery'\",",
          "",
          "[Added Lines]",
          "49:     self.assertResourceCalled('Execute', \"! (beeline -u 'jdbc:hive2://c6402.ambari.apache.org:10000/;transportMode=binary;auth=noSasl' -n hive -e ';' 2>&1 | awk '{print}' | grep -vz -i -e 'Connected to:' -e 'Transaction isolation:' -e 'inactive HS2 instance; use service discovery')\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:     self.assertResourceCalled('Execute', '/usr/bin/kinit -kt /etc/security/keytabs/smokeuser.headless.keytab ambari-qa@EXAMPLE.COM; ',",
          "166:                               user = 'ambari-qa',",
          "167:                               )",
          "169:                               path = ['/bin/', '/usr/bin/', '/usr/lib/hive/bin/', '/usr/sbin/'],",
          "170:                               user = 'ambari-qa',",
          "171:                               timeout = 30,",
          "",
          "[Removed Lines]",
          "168:     self.assertResourceCalled('Execute', \"beeline -u 'jdbc:hive2://c6402.ambari.apache.org:10000/;transportMode=binary;principal=hive/_HOST@EXAMPLE.COM' -n hive -e ';' 2>&1 | awk '{print}' | grep -i -e 'Connected to:' -e 'Transaction isolation:' -e 'inactive HS2 instance; use service discovery'\",",
          "",
          "[Added Lines]",
          "168:     self.assertResourceCalled('Execute', \"! (beeline -u 'jdbc:hive2://c6402.ambari.apache.org:10000/;transportMode=binary;principal=hive/_HOST@EXAMPLE.COM' -n hive -e ';' 2>&1 | awk '{print}' | grep -vz -i -e 'Connected to:' -e 'Transaction isolation:' -e 'inactive HS2 instance; use service discovery')\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "283:       stack_version = self.STACK_VERSION,",
          "284:       target = RMFTestCase.TARGET_COMMON_SERVICES)",
          "287:       path = ['/bin/', '/usr/bin/', '/usr/lib/hive/bin/', '/usr/sbin/'],",
          "288:       timeout = 30,",
          "289:       user = 'ambari-qa',",
          "",
          "[Removed Lines]",
          "286:     self.assertResourceCalled('Execute', \"beeline -u 'jdbc:hive2://c6402.ambari.apache.org:10010/;transportMode=binary' -n hive -e ';' 2>&1 | awk '{print}' | grep -i -e 'Connected to:' -e 'Transaction isolation:' -e 'inactive HS2 instance; use service discovery'\",",
          "",
          "[Added Lines]",
          "286:     self.assertResourceCalled('Execute', \"! (beeline -u 'jdbc:hive2://c6402.ambari.apache.org:10010/;transportMode=binary' -n hive -e ';' 2>&1 | awk '{print}' | grep -vz -i -e 'Connected to:' -e 'Transaction isolation:' -e 'inactive HS2 instance; use service discovery')\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "322:       target = RMFTestCase.TARGET_COMMON_SERVICES)",
          "324:     self.assertResourceCalled('Execute',",
          "326:       path = ['/bin/', '/usr/bin/', '/usr/lib/hive/bin/', '/usr/sbin/'],",
          "327:       timeout = 30,",
          "328:       user = 'ambari-qa',",
          "",
          "[Removed Lines]",
          "325:       \"beeline -u 'jdbc:hive2://c6402.ambari.apache.org:10010/;transportMode=binary' -n hive -e ';' 2>&1 | awk '{print}' | grep -i -e 'Connected to:' -e 'Transaction isolation:' -e 'inactive HS2 instance; use service discovery'\",",
          "",
          "[Added Lines]",
          "325:       \"! (beeline -u 'jdbc:hive2://c6402.ambari.apache.org:10010/;transportMode=binary' -n hive -e ';' 2>&1 | awk '{print}' | grep -vz -i -e 'Connected to:' -e 'Transaction isolation:' -e 'inactive HS2 instance; use service discovery')\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "330:     )",
          "332:     self.assertResourceCalled('Execute',",
          "334:       path = ['/bin/', '/usr/bin/', '/usr/lib/hive/bin/', '/usr/sbin/'],",
          "335:       timeout = 30,",
          "336:       user = 'ambari-qa',",
          "",
          "[Removed Lines]",
          "333:       \"beeline -u 'jdbc:hive2://c6402.ambari.apache.org:10500/;transportMode=binary' -n hive -e ';' 2>&1 | awk '{print}' | grep -i -e 'Connected to:' -e 'Transaction isolation:' -e 'inactive HS2 instance; use service discovery'\",",
          "",
          "[Added Lines]",
          "333:       \"! (beeline -u 'jdbc:hive2://c6402.ambari.apache.org:10500/;transportMode=binary' -n hive -e ';' 2>&1 | awk '{print}' | grep -vz -i -e 'Connected to:' -e 'Transaction isolation:' -e 'inactive HS2 instance; use service discovery')\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d70aed98cc2b92bbe32994203c57400404bf2c89",
      "candidate_info": {
        "commit_hash": "d70aed98cc2b92bbe32994203c57400404bf2c89",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/d70aed98cc2b92bbe32994203c57400404bf2c89",
        "files": [
          "ambari-server/src/main/python/ambari_server/setupMpacks.py"
        ],
        "message": "AMBARI-25338 : FatalException with incorrect argument call (branch-2.7) (#3053)",
        "before_after_code_files": [
          "ambari-server/src/main/python/ambari_server/setupMpacks.py||ambari-server/src/main/python/ambari_server/setupMpacks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/python/ambari_server/setupMpacks.py||ambari-server/src/main/python/ambari_server/setupMpacks.py": [
          "File: ambari-server/src/main/python/ambari_server/setupMpacks.py -> ambari-server/src/main/python/ambari_server/setupMpacks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "830:         hook_script = os.path.join(base_dir, hook.script)",
          "831:         if os.path.exists(hook_script):",
          "832:           print_info_msg(\"Executing {0} hook script : {1}\".format(hook_name, hook_script))",
          "834:           if hook.type == PYTHON_HOOK_TYPE:",
          "835:             command = [\"/usr/bin/ambari-python-wrap\", hook_script]",
          "836:           elif hook.type == SHELL_HOOK_TYPE:",
          "837:             command = [\"/bin/bash\", hook_script]",
          "838:           else:",
          "840:           (returncode, stdoutdata, stderrdata) = run_os_command(command)",
          "841:           if returncode != 0:",
          "842:             msg = \"Failed to execute {0} hook. Failed with error code {0}\".format(hook_name, returncode)",
          "843:             print_error_msg(msg)",
          "844:             print_error_msg(stderrdata)",
          "846:           else:",
          "847:             print_info_msg(stdoutdata)",
          "848:         else:",
          "851: def get_replay_log_file():",
          "852:   \"\"\"",
          "",
          "[Removed Lines]",
          "833:           command = []",
          "839:             raise FatalException(\"Malformed management pack. Unknown hook type for {0} hook script\".format(hook_name))",
          "845:             raise FatalException(msg)",
          "849:           raise FatalException(\"Malformed management pack. Missing {0} hook script {1}\".format(hook_name, hook_script))",
          "",
          "[Added Lines]",
          "839:             raise FatalException(-1, \"Malformed management pack. Unknown hook type for {0} hook script\"",
          "840:                                  .format(hook_name))",
          "846:             raise FatalException(-1, msg)",
          "850:           raise FatalException(-1, \"Malformed management pack. Missing {0} hook script {1}\"",
          "851:                                .format(hook_name, hook_script))",
          "",
          "---------------"
        ]
      }
    }
  ]
}