{
  "cve_id": "CVE-2020-11110",
  "cve_desc": "Grafana through 6.7.1 allows stored XSS due to insufficient input protection in the originalUrl field, which allows an attacker to inject JavaScript code that will be executed after clicking on Open Original Dashboard after visiting the snapshot.",
  "repo": "grafana/grafana",
  "patch_hash": "fb114a75241aaef4c08581b42509c750738b768a",
  "patch_info": {
    "commit_hash": "fb114a75241aaef4c08581b42509c750738b768a",
    "repo": "grafana/grafana",
    "commit_url": "https://github.com/grafana/grafana/commit/fb114a75241aaef4c08581b42509c750738b768a",
    "files": [
      "public/app/features/dashboard/components/DashNav/DashNav.tsx"
    ],
    "message": "Snapshots: Sanitize orignal url (#23254)",
    "before_after_code_files": [
      "public/app/features/dashboard/components/DashNav/DashNav.tsx||public/app/features/dashboard/components/DashNav/DashNav.tsx"
    ]
  },
  "patch_diff": {
    "public/app/features/dashboard/components/DashNav/DashNav.tsx||public/app/features/dashboard/components/DashNav/DashNav.tsx": [
      "File: public/app/features/dashboard/components/DashNav/DashNav.tsx -> public/app/features/dashboard/components/DashNav/DashNav.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: import { CoreEvents, StoreState } from 'app/types';",
      "18: import { ShareModal } from 'app/features/dashboard/components/ShareModal';",
      "19: import { SaveDashboardModalProxy } from 'app/features/dashboard/components/SaveDashboard/SaveDashboardModalProxy';",
      "21: export interface OwnProps {",
      "22:   dashboard: DashboardModel;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: import { sanitizeUrl } from 'app/core/utils/text';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "222:               tooltip=\"Open original dashboard\"",
      "223:               classSuffix=\"snapshot-origin\"",
      "224:               icon=\"gicon gicon-link\"",
      "226:             />",
      "227:           )}",
      "",
      "[Removed Lines]",
      "225:               href={snapshotUrl}",
      "",
      "[Added Lines]",
      "227:               href={sanitizeUrl(snapshotUrl)}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9abfbf18e0e2a3a43e064e17c85d32cf28d1f051",
      "candidate_info": {
        "commit_hash": "9abfbf18e0e2a3a43e064e17c85d32cf28d1f051",
        "repo": "grafana/grafana",
        "commit_url": "https://github.com/grafana/grafana/commit/9abfbf18e0e2a3a43e064e17c85d32cf28d1f051",
        "files": [
          "public/app/features/dashboard/components/DashNav/DashNav.tsx"
        ],
        "message": "Snapshots: Sanitize orignal url (#23254)\n\n(cherry picked from commit fb114a75241aaef4c08581b42509c750738b768a)",
        "before_after_code_files": [
          "public/app/features/dashboard/components/DashNav/DashNav.tsx||public/app/features/dashboard/components/DashNav/DashNav.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "public/app/features/dashboard/components/DashNav/DashNav.tsx||public/app/features/dashboard/components/DashNav/DashNav.tsx"
          ],
          "candidate": [
            "public/app/features/dashboard/components/DashNav/DashNav.tsx||public/app/features/dashboard/components/DashNav/DashNav.tsx"
          ]
        }
      },
      "candidate_diff": {
        "public/app/features/dashboard/components/DashNav/DashNav.tsx||public/app/features/dashboard/components/DashNav/DashNav.tsx": [
          "File: public/app/features/dashboard/components/DashNav/DashNav.tsx -> public/app/features/dashboard/components/DashNav/DashNav.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import { CoreEvents, StoreState } from 'app/types';",
          "18: import { ShareModal } from 'app/features/dashboard/components/ShareModal';",
          "19: import { SaveDashboardModalProxy } from 'app/features/dashboard/components/SaveDashboard/SaveDashboardModalProxy';",
          "21: export interface OwnProps {",
          "22:   dashboard: DashboardModel;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import { sanitizeUrl } from 'app/core/utils/text';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:               tooltip=\"Open original dashboard\"",
          "240:               classSuffix=\"snapshot-origin\"",
          "241:               icon=\"gicon gicon-link\"",
          "243:             />",
          "244:           )}",
          "",
          "[Removed Lines]",
          "242:               href={snapshotUrl}",
          "",
          "[Added Lines]",
          "244:               href={sanitizeUrl(snapshotUrl)}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17c358b1ecbd4ae0e043aee59b9b4386ff8bf98c",
      "candidate_info": {
        "commit_hash": "17c358b1ecbd4ae0e043aee59b9b4386ff8bf98c",
        "repo": "grafana/grafana",
        "commit_url": "https://github.com/grafana/grafana/commit/17c358b1ecbd4ae0e043aee59b9b4386ff8bf98c",
        "files": [
          "public/app/features/dashboard/components/DashNav/DashNav.tsx",
          "public/app/features/dashboard/components/DashNav/DashNavButton.tsx"
        ],
        "message": "DashNav: refactor action buttons and custom content (#23868)\n\n* DashNav: refactor action buttons and custom content\n\n* DashNav: remove code duplication\n\n* DashNav: fix custom element display\n\n* DashNav: fix strictNullChecks",
        "before_after_code_files": [
          "public/app/features/dashboard/components/DashNav/DashNav.tsx||public/app/features/dashboard/components/DashNav/DashNav.tsx",
          "public/app/features/dashboard/components/DashNav/DashNavButton.tsx||public/app/features/dashboard/components/DashNav/DashNavButton.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "public/app/features/dashboard/components/DashNav/DashNav.tsx||public/app/features/dashboard/components/DashNav/DashNav.tsx"
          ],
          "candidate": [
            "public/app/features/dashboard/components/DashNav/DashNav.tsx||public/app/features/dashboard/components/DashNav/DashNav.tsx"
          ]
        }
      },
      "candidate_diff": {
        "public/app/features/dashboard/components/DashNav/DashNav.tsx||public/app/features/dashboard/components/DashNav/DashNav.tsx": [
          "File: public/app/features/dashboard/components/DashNav/DashNav.tsx -> public/app/features/dashboard/components/DashNav/DashNav.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { connect } from 'react-redux';",
          "4: import { css } from 'emotion';",
          "",
          "[Removed Lines]",
          "2: import React, { FC, PureComponent } from 'react';",
          "",
          "[Added Lines]",
          "2: import React, { PureComponent, FC, ReactNode } from 'react';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:   onAddPanel: () => void;",
          "28: }",
          "34: }",
          "36: export interface StateProps {",
          "",
          "[Removed Lines]",
          "30: const customNavbarContent: Array<FC<Partial<OwnProps>>> = [];",
          "32: export function addNavbarContent(content: FC<Partial<OwnProps>>) {",
          "33:   customNavbarContent.push(content);",
          "",
          "[Added Lines]",
          "30: interface DashNavButtonModel {",
          "31:   show: (props: Props) => boolean;",
          "32:   component: FC<Partial<Props>>;",
          "33:   index?: number | 'end';",
          "34: }",
          "36: const customLeftActions: DashNavButtonModel[] = [];",
          "37: const customRightActions: DashNavButtonModel[] = [];",
          "39: export function addCustomLeftAction(content: DashNavButtonModel) {",
          "40:   customLeftActions.push(content);",
          "41: }",
          "43: export function addCustomRightAction(content: DashNavButtonModel) {",
          "44:   customRightActions.push(content);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:     this.forceUpdate();",
          "103:   };",
          "105:   renderDashboardTitleSearchButton() {",
          "106:     const { dashboard, isFullscreen } = this.props;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:   addCustomContent(actions: DashNavButtonModel[], buttons: ReactNode[]) {",
          "117:     actions.map((action, index) => {",
          "118:       const Component = action.component;",
          "119:       const element = <Component {...this.props} key={`button-custom-${index}`} />;",
          "120:       typeof action.index === 'number' ? buttons.splice(action.index, 0, element) : buttons.push(element);",
          "121:     });",
          "122:   }",
          "124:   renderLeftActionsButton() {",
          "125:     const { dashboard } = this.props;",
          "126:     const { canStar, canShare, isStarred } = dashboard.meta;",
          "128:     const buttons: ReactNode[] = [];",
          "129:     if (canStar) {",
          "130:       buttons.push(",
          "131:         <DashNavButton",
          "132:           tooltip=\"Mark as favorite\"",
          "133:           classSuffix=\"star\"",
          "134:           icon={isStarred ? 'favorite' : 'star'}",
          "135:           iconType={isStarred ? 'mono' : 'default'}",
          "136:           iconSize=\"lg\"",
          "137:           noBorder={true}",
          "138:           onClick={this.onStarDashboard}",
          "139:           key=\"button-star\"",
          "140:         />",
          "141:       );",
          "142:     }",
          "144:     if (canShare) {",
          "145:       buttons.push(",
          "146:         <ModalsController key=\"button-share\">",
          "147:           {({ showModal, hideModal }) => (",
          "148:             <DashNavButton",
          "149:               tooltip=\"Share dashboard\"",
          "150:               classSuffix=\"share\"",
          "151:               icon=\"share-alt\"",
          "152:               iconSize=\"lg\"",
          "153:               noBorder={true}",
          "154:               onClick={() => {",
          "155:                 showModal(ShareModal, {",
          "156:                   dashboard,",
          "157:                   onDismiss: hideModal,",
          "158:                 });",
          "159:               }}",
          "160:             />",
          "161:           )}",
          "162:         </ModalsController>",
          "163:       );",
          "164:     }",
          "166:     this.addCustomContent(customLeftActions, buttons);",
          "167:     return buttons;",
          "168:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:             </a>",
          "136:           </div>",
          "137:         </div>",
          "138:         <div className=\"navbar__spacer\" />",
          "139:       </>",
          "140:     );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:         <div className=\"navbar-buttons navbar-buttons--actions\">{this.renderLeftActionsButton()}</div>",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "148:     );",
          "149:   }",
          "154:     const { snapshot } = dashboard;",
          "155:     const snapshotUrl = snapshot && snapshot.originalUrl;",
          "157:     return (",
          "158:       <div className=\"navbar\">",
          "159:         {isFullscreen && this.renderBackButton()}",
          "",
          "[Removed Lines]",
          "151:   render() {",
          "152:     const { dashboard, onAddPanel, location, isFullscreen } = this.props;",
          "153:     const { canStar, canSave, canShare, showSettings, isStarred } = dashboard.meta;",
          "",
          "[Added Lines]",
          "217:   renderRightActionsButton() {",
          "218:     const { dashboard, onAddPanel } = this.props;",
          "219:     const { canSave, showSettings } = dashboard.meta;",
          "223:     const buttons: ReactNode[] = [];",
          "224:     if (canSave) {",
          "225:       buttons.push(",
          "226:         <DashNavButton",
          "227:           classSuffix=\"save\"",
          "228:           tooltip=\"Add panel\"",
          "229:           icon=\"panel-add\"",
          "230:           onClick={onAddPanel}",
          "231:           iconType=\"mono\"",
          "232:           iconSize=\"xl\"",
          "233:           key=\"button-panel-add\"",
          "234:         />",
          "235:       );",
          "236:       buttons.push(",
          "237:         <ModalsController key=\"button-save\">",
          "238:           {({ showModal, hideModal }) => (",
          "239:             <DashNavButton",
          "240:               tooltip=\"Save dashboard\"",
          "241:               classSuffix=\"save\"",
          "242:               icon=\"save\"",
          "243:               onClick={() => {",
          "244:                 showModal(SaveDashboardModalProxy, {",
          "245:                   dashboard,",
          "246:                   onDismiss: hideModal,",
          "247:                 });",
          "248:               }}",
          "249:             />",
          "250:           )}",
          "251:         </ModalsController>",
          "252:       );",
          "253:     }",
          "255:     if (snapshotUrl) {",
          "256:       buttons.push(",
          "257:         <DashNavButton",
          "258:           tooltip=\"Open original dashboard\"",
          "259:           classSuffix=\"snapshot-origin\"",
          "260:           href={textUtil.sanitizeUrl(snapshotUrl)}",
          "261:           icon=\"link\"",
          "262:           key=\"button-snapshot\"",
          "263:         />",
          "264:       );",
          "265:     }",
          "267:     if (showSettings) {",
          "268:       buttons.push(",
          "269:         <DashNavButton",
          "270:           tooltip=\"Dashboard settings\"",
          "271:           classSuffix=\"settings\"",
          "272:           icon=\"cog\"",
          "273:           onClick={this.onOpenSettings}",
          "274:           key=\"button-settings\"",
          "275:         />",
          "276:       );",
          "277:     }",
          "279:     this.addCustomContent(customRightActions, buttons);",
          "280:     return buttons;",
          "281:   }",
          "283:   render() {",
          "284:     const { dashboard, location, isFullscreen } = this.props;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "182:           </div>",
          "183:         )}",
          "266:         <div className=\"navbar-buttons navbar-buttons--tv\">",
          "267:           <DashNavButton tooltip=\"Cycle view mode\" classSuffix=\"tv\" icon=\"monitor\" onClick={this.onToggleTVMode} />",
          "",
          "[Removed Lines]",
          "185:         {customNavbarContent.map((Component, index) => (",
          "186:           <Component {...this.props} key={`navbar-custom-content-${index}`} />",
          "187:         ))}",
          "189:         <div className=\"navbar-buttons navbar-buttons--actions\">",
          "190:           {canSave && (",
          "191:             <DashNavButton",
          "192:               classSuffix=\"save\"",
          "193:               tooltip=\"Add panel\"",
          "194:               icon=\"panel-add\"",
          "195:               onClick={onAddPanel}",
          "196:               iconType=\"mono\"",
          "197:               iconSize=\"xl\"",
          "198:             />",
          "199:           )}",
          "201:           {canStar && (",
          "202:             <DashNavButton",
          "203:               tooltip=\"Mark as favorite\"",
          "204:               classSuffix=\"star\"",
          "205:               icon={isStarred ? 'favorite' : 'star'}",
          "206:               iconType={isStarred ? 'mono' : 'default'}",
          "207:               onClick={this.onStarDashboard}",
          "208:             />",
          "209:           )}",
          "211:           {canShare && (",
          "212:             <ModalsController>",
          "213:               {({ showModal, hideModal }) => (",
          "214:                 <DashNavButton",
          "215:                   tooltip=\"Share dashboard\"",
          "216:                   classSuffix=\"share\"",
          "217:                   icon=\"share-alt\"",
          "218:                   onClick={() => {",
          "219:                     showModal(ShareModal, {",
          "220:                       dashboard,",
          "221:                       onDismiss: hideModal,",
          "222:                     });",
          "223:                   }}",
          "224:                 />",
          "225:               )}",
          "226:             </ModalsController>",
          "227:           )}",
          "229:           {canSave && (",
          "230:             <ModalsController>",
          "231:               {({ showModal, hideModal }) => (",
          "232:                 <DashNavButton",
          "233:                   tooltip=\"Save dashboard\"",
          "234:                   classSuffix=\"save\"",
          "235:                   icon=\"save\"",
          "236:                   onClick={() => {",
          "237:                     showModal(SaveDashboardModalProxy, {",
          "238:                       dashboard,",
          "239:                       onDismiss: hideModal,",
          "240:                     });",
          "241:                   }}",
          "242:                 />",
          "243:               )}",
          "244:             </ModalsController>",
          "245:           )}",
          "247:           {snapshotUrl && (",
          "248:             <DashNavButton",
          "249:               tooltip=\"Open original dashboard\"",
          "250:               classSuffix=\"snapshot-origin\"",
          "251:               href={textUtil.sanitizeUrl(snapshotUrl)}",
          "252:               icon=\"link\"",
          "253:             />",
          "254:           )}",
          "256:           {showSettings && (",
          "257:             <DashNavButton",
          "258:               tooltip=\"Dashboard settings\"",
          "259:               classSuffix=\"settings\"",
          "260:               icon=\"cog\"",
          "261:               onClick={this.onOpenSettings}",
          "262:             />",
          "263:           )}",
          "264:         </div>",
          "",
          "[Added Lines]",
          "314:         <div className=\"navbar-buttons navbar-buttons--actions\">{this.renderRightActionsButton()}</div>",
          "",
          "---------------"
        ],
        "public/app/features/dashboard/components/DashNav/DashNavButton.tsx||public/app/features/dashboard/components/DashNav/DashNavButton.tsx": [
          "File: public/app/features/dashboard/components/DashNav/DashNavButton.tsx -> public/app/features/dashboard/components/DashNav/DashNavButton.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import React, { FunctionComponent } from 'react';",
          "5: import { selectors } from '@grafana/e2e-selectors';",
          "7: interface Props {",
          "8:   icon?: IconName;",
          "",
          "[Removed Lines]",
          "4: import { Icon, IconName, IconSize, IconType, Tooltip } from '@grafana/ui';",
          "",
          "[Added Lines]",
          "3: import { css } from 'emotion';",
          "5: import { Tooltip, Icon, IconName, IconType, IconSize, IconButton, useTheme, stylesFactory } from '@grafana/ui';",
          "7: import { GrafanaTheme } from '@grafana/data';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:   children?: React.ReactNode;",
          "14:   iconType?: IconType;",
          "15:   iconSize?: IconSize;",
          "16: }",
          "18: export const DashNavButton: FunctionComponent<Props> = ({",
          "19:   icon,",
          "20:   iconType,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:   noBorder?: boolean;",
          "21: const getStyles = stylesFactory((theme: GrafanaTheme) => ({",
          "22:   noBorderContainer: css`",
          "23:     padding: 0 ${theme.spacing.xs};",
          "24:     display: flex;",
          "25:   `,",
          "26: }));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "24:   onClick,",
          "25:   href,",
          "26:   children,",
          "27: }) => {",
          "29:     return (",
          "31:         <button",
          "32:           className={`btn navbar-button navbar-button--${classSuffix}`}",
          "33:           onClick={onClick}",
          "",
          "[Removed Lines]",
          "28:   if (onClick) {",
          "30:       <Tooltip content={tooltip} placement=\"bottom\">",
          "",
          "[Added Lines]",
          "37:   noBorder,",
          "39:   const theme = useTheme();",
          "40:   const styles = getStyles(theme);",
          "42:   if (noBorder) {",
          "44:       <div className={styles.noBorderContainer}>",
          "45:         {icon && (",
          "46:           <IconButton",
          "47:             name={icon}",
          "48:             size={iconSize}",
          "49:             iconType={iconType}",
          "50:             tooltip={tooltip}",
          "51:             tooltipPlacement=\"bottom\"",
          "52:             onClick={onClick}",
          "53:           />",
          "54:         )}",
          "55:         {children}",
          "56:       </div>",
          "57:     );",
          "58:   }",
          "59:   return (",
          "60:     <Tooltip content={tooltip} placement=\"bottom\">",
          "61:       {onClick ? (",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "36:           {icon && <Icon name={icon} type={iconType} size={iconSize || 'lg'} />}",
          "37:           {children}",
          "38:         </button>",
          "49:     </Tooltip>",
          "50:   );",
          "51: };",
          "",
          "[Removed Lines]",
          "39:       </Tooltip>",
          "40:     );",
          "41:   }",
          "43:   return (",
          "44:     <Tooltip content={tooltip} placement=\"bottom\">",
          "45:       <a className={`btn navbar-button navbar-button--${classSuffix}`} href={href}>",
          "46:         {icon && <Icon name={icon} type={iconType} size=\"lg\" />}",
          "47:         {children}",
          "48:       </a>",
          "",
          "[Added Lines]",
          "70:       ) : (",
          "71:         <a className={`btn navbar-button navbar-button--${classSuffix}`} href={href}>",
          "72:           {icon && <Icon name={icon} type={iconType} size=\"lg\" />}",
          "73:           {children}",
          "74:         </a>",
          "75:       )}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f455f06540fceeecfd0550548143a4e97daed4ff",
      "candidate_info": {
        "commit_hash": "f455f06540fceeecfd0550548143a4e97daed4ff",
        "repo": "grafana/grafana",
        "commit_url": "https://github.com/grafana/grafana/commit/f455f06540fceeecfd0550548143a4e97daed4ff",
        "files": [
          "public/app/features/dashboard/components/DashNav/DashNav.tsx",
          "public/app/features/dashboard/components/DashNav/DashNavButton.tsx"
        ],
        "message": "DashNav: refactor action buttons and custom content (#23868)\n\n* DashNav: refactor action buttons and custom content\n\n* DashNav: remove code duplication\n\n* DashNav: fix custom element display\n\n* DashNav: fix strictNullChecks",
        "before_after_code_files": [
          "public/app/features/dashboard/components/DashNav/DashNav.tsx||public/app/features/dashboard/components/DashNav/DashNav.tsx",
          "public/app/features/dashboard/components/DashNav/DashNavButton.tsx||public/app/features/dashboard/components/DashNav/DashNavButton.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "public/app/features/dashboard/components/DashNav/DashNav.tsx||public/app/features/dashboard/components/DashNav/DashNav.tsx"
          ],
          "candidate": [
            "public/app/features/dashboard/components/DashNav/DashNav.tsx||public/app/features/dashboard/components/DashNav/DashNav.tsx"
          ]
        }
      },
      "candidate_diff": {
        "public/app/features/dashboard/components/DashNav/DashNav.tsx||public/app/features/dashboard/components/DashNav/DashNav.tsx": [
          "File: public/app/features/dashboard/components/DashNav/DashNav.tsx -> public/app/features/dashboard/components/DashNav/DashNav.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { connect } from 'react-redux';",
          "4: import { css } from 'emotion';",
          "",
          "[Removed Lines]",
          "2: import React, { FC, PureComponent } from 'react';",
          "",
          "[Added Lines]",
          "2: import React, { PureComponent, FC, ReactNode } from 'react';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:   onAddPanel: () => void;",
          "28: }",
          "34: }",
          "36: export interface StateProps {",
          "",
          "[Removed Lines]",
          "30: const customNavbarContent: Array<FC<Partial<OwnProps>>> = [];",
          "32: export function addNavbarContent(content: FC<Partial<OwnProps>>) {",
          "33:   customNavbarContent.push(content);",
          "",
          "[Added Lines]",
          "30: interface DashNavButtonModel {",
          "31:   show: (props: Props) => boolean;",
          "32:   component: FC<Partial<Props>>;",
          "33:   index?: number | 'end';",
          "34: }",
          "36: const customLeftActions: DashNavButtonModel[] = [];",
          "37: const customRightActions: DashNavButtonModel[] = [];",
          "39: export function addCustomLeftAction(content: DashNavButtonModel) {",
          "40:   customLeftActions.push(content);",
          "41: }",
          "43: export function addCustomRightAction(content: DashNavButtonModel) {",
          "44:   customRightActions.push(content);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:     this.forceUpdate();",
          "103:   };",
          "105:   renderDashboardTitleSearchButton() {",
          "106:     const { dashboard, isFullscreen } = this.props;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:   addCustomContent(actions: DashNavButtonModel[], buttons: ReactNode[]) {",
          "117:     actions.map((action, index) => {",
          "118:       const Component = action.component;",
          "119:       const element = <Component {...this.props} key={`button-custom-${index}`} />;",
          "120:       typeof action.index === 'number' ? buttons.splice(action.index, 0, element) : buttons.push(element);",
          "121:     });",
          "122:   }",
          "124:   renderLeftActionsButton() {",
          "125:     const { dashboard } = this.props;",
          "126:     const { canStar, canShare, isStarred } = dashboard.meta;",
          "128:     const buttons: ReactNode[] = [];",
          "129:     if (canStar) {",
          "130:       buttons.push(",
          "131:         <DashNavButton",
          "132:           tooltip=\"Mark as favorite\"",
          "133:           classSuffix=\"star\"",
          "134:           icon={isStarred ? 'favorite' : 'star'}",
          "135:           iconType={isStarred ? 'mono' : 'default'}",
          "136:           iconSize=\"lg\"",
          "137:           noBorder={true}",
          "138:           onClick={this.onStarDashboard}",
          "139:           key=\"button-star\"",
          "140:         />",
          "141:       );",
          "142:     }",
          "144:     if (canShare) {",
          "145:       buttons.push(",
          "146:         <ModalsController key=\"button-share\">",
          "147:           {({ showModal, hideModal }) => (",
          "148:             <DashNavButton",
          "149:               tooltip=\"Share dashboard\"",
          "150:               classSuffix=\"share\"",
          "151:               icon=\"share-alt\"",
          "152:               iconSize=\"lg\"",
          "153:               noBorder={true}",
          "154:               onClick={() => {",
          "155:                 showModal(ShareModal, {",
          "156:                   dashboard,",
          "157:                   onDismiss: hideModal,",
          "158:                 });",
          "159:               }}",
          "160:             />",
          "161:           )}",
          "162:         </ModalsController>",
          "163:       );",
          "164:     }",
          "166:     this.addCustomContent(customLeftActions, buttons);",
          "167:     return buttons;",
          "168:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:             </a>",
          "136:           </div>",
          "137:         </div>",
          "138:         <div className=\"navbar__spacer\" />",
          "139:       </>",
          "140:     );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:         <div className=\"navbar-buttons navbar-buttons--actions\">{this.renderLeftActionsButton()}</div>",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "148:     );",
          "149:   }",
          "154:     const { snapshot } = dashboard;",
          "155:     const snapshotUrl = snapshot && snapshot.originalUrl;",
          "157:     return (",
          "158:       <div className=\"navbar\">",
          "159:         {isFullscreen && this.renderBackButton()}",
          "",
          "[Removed Lines]",
          "151:   render() {",
          "152:     const { dashboard, onAddPanel, location, isFullscreen } = this.props;",
          "153:     const { canStar, canSave, canShare, showSettings, isStarred } = dashboard.meta;",
          "",
          "[Added Lines]",
          "217:   renderRightActionsButton() {",
          "218:     const { dashboard, onAddPanel } = this.props;",
          "219:     const { canSave, showSettings } = dashboard.meta;",
          "223:     const buttons: ReactNode[] = [];",
          "224:     if (canSave) {",
          "225:       buttons.push(",
          "226:         <DashNavButton",
          "227:           classSuffix=\"save\"",
          "228:           tooltip=\"Add panel\"",
          "229:           icon=\"panel-add\"",
          "230:           onClick={onAddPanel}",
          "231:           iconType=\"mono\"",
          "232:           iconSize=\"xl\"",
          "233:           key=\"button-panel-add\"",
          "234:         />",
          "235:       );",
          "236:       buttons.push(",
          "237:         <ModalsController key=\"button-save\">",
          "238:           {({ showModal, hideModal }) => (",
          "239:             <DashNavButton",
          "240:               tooltip=\"Save dashboard\"",
          "241:               classSuffix=\"save\"",
          "242:               icon=\"save\"",
          "243:               onClick={() => {",
          "244:                 showModal(SaveDashboardModalProxy, {",
          "245:                   dashboard,",
          "246:                   onDismiss: hideModal,",
          "247:                 });",
          "248:               }}",
          "249:             />",
          "250:           )}",
          "251:         </ModalsController>",
          "252:       );",
          "253:     }",
          "255:     if (snapshotUrl) {",
          "256:       buttons.push(",
          "257:         <DashNavButton",
          "258:           tooltip=\"Open original dashboard\"",
          "259:           classSuffix=\"snapshot-origin\"",
          "260:           href={textUtil.sanitizeUrl(snapshotUrl)}",
          "261:           icon=\"link\"",
          "262:           key=\"button-snapshot\"",
          "263:         />",
          "264:       );",
          "265:     }",
          "267:     if (showSettings) {",
          "268:       buttons.push(",
          "269:         <DashNavButton",
          "270:           tooltip=\"Dashboard settings\"",
          "271:           classSuffix=\"settings\"",
          "272:           icon=\"cog\"",
          "273:           onClick={this.onOpenSettings}",
          "274:           key=\"button-settings\"",
          "275:         />",
          "276:       );",
          "277:     }",
          "279:     this.addCustomContent(customRightActions, buttons);",
          "280:     return buttons;",
          "281:   }",
          "283:   render() {",
          "284:     const { dashboard, location, isFullscreen } = this.props;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "182:           </div>",
          "183:         )}",
          "266:         <div className=\"navbar-buttons navbar-buttons--tv\">",
          "267:           <DashNavButton tooltip=\"Cycle view mode\" classSuffix=\"tv\" icon=\"monitor\" onClick={this.onToggleTVMode} />",
          "",
          "[Removed Lines]",
          "185:         {customNavbarContent.map((Component, index) => (",
          "186:           <Component {...this.props} key={`navbar-custom-content-${index}`} />",
          "187:         ))}",
          "189:         <div className=\"navbar-buttons navbar-buttons--actions\">",
          "190:           {canSave && (",
          "191:             <DashNavButton",
          "192:               classSuffix=\"save\"",
          "193:               tooltip=\"Add panel\"",
          "194:               icon=\"panel-add\"",
          "195:               onClick={onAddPanel}",
          "196:               iconType=\"mono\"",
          "197:               iconSize=\"xl\"",
          "198:             />",
          "199:           )}",
          "201:           {canStar && (",
          "202:             <DashNavButton",
          "203:               tooltip=\"Mark as favorite\"",
          "204:               classSuffix=\"star\"",
          "205:               icon={isStarred ? 'favorite' : 'star'}",
          "206:               iconType={isStarred ? 'mono' : 'default'}",
          "207:               onClick={this.onStarDashboard}",
          "208:             />",
          "209:           )}",
          "211:           {canShare && (",
          "212:             <ModalsController>",
          "213:               {({ showModal, hideModal }) => (",
          "214:                 <DashNavButton",
          "215:                   tooltip=\"Share dashboard\"",
          "216:                   classSuffix=\"share\"",
          "217:                   icon=\"share-alt\"",
          "218:                   onClick={() => {",
          "219:                     showModal(ShareModal, {",
          "220:                       dashboard,",
          "221:                       onDismiss: hideModal,",
          "222:                     });",
          "223:                   }}",
          "224:                 />",
          "225:               )}",
          "226:             </ModalsController>",
          "227:           )}",
          "229:           {canSave && (",
          "230:             <ModalsController>",
          "231:               {({ showModal, hideModal }) => (",
          "232:                 <DashNavButton",
          "233:                   tooltip=\"Save dashboard\"",
          "234:                   classSuffix=\"save\"",
          "235:                   icon=\"save\"",
          "236:                   onClick={() => {",
          "237:                     showModal(SaveDashboardModalProxy, {",
          "238:                       dashboard,",
          "239:                       onDismiss: hideModal,",
          "240:                     });",
          "241:                   }}",
          "242:                 />",
          "243:               )}",
          "244:             </ModalsController>",
          "245:           )}",
          "247:           {snapshotUrl && (",
          "248:             <DashNavButton",
          "249:               tooltip=\"Open original dashboard\"",
          "250:               classSuffix=\"snapshot-origin\"",
          "251:               href={textUtil.sanitizeUrl(snapshotUrl)}",
          "252:               icon=\"link\"",
          "253:             />",
          "254:           )}",
          "256:           {showSettings && (",
          "257:             <DashNavButton",
          "258:               tooltip=\"Dashboard settings\"",
          "259:               classSuffix=\"settings\"",
          "260:               icon=\"cog\"",
          "261:               onClick={this.onOpenSettings}",
          "262:             />",
          "263:           )}",
          "264:         </div>",
          "",
          "[Added Lines]",
          "314:         <div className=\"navbar-buttons navbar-buttons--actions\">{this.renderRightActionsButton()}</div>",
          "",
          "---------------"
        ],
        "public/app/features/dashboard/components/DashNav/DashNavButton.tsx||public/app/features/dashboard/components/DashNav/DashNavButton.tsx": [
          "File: public/app/features/dashboard/components/DashNav/DashNavButton.tsx -> public/app/features/dashboard/components/DashNav/DashNavButton.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import React, { FunctionComponent } from 'react';",
          "5: import { selectors } from '@grafana/e2e-selectors';",
          "7: interface Props {",
          "8:   icon?: IconName;",
          "",
          "[Removed Lines]",
          "4: import { Icon, IconName, IconSize, IconType, Tooltip } from '@grafana/ui';",
          "",
          "[Added Lines]",
          "3: import { css } from 'emotion';",
          "5: import { Tooltip, Icon, IconName, IconType, IconSize, IconButton, useTheme, stylesFactory } from '@grafana/ui';",
          "7: import { GrafanaTheme } from '@grafana/data';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:   children?: React.ReactNode;",
          "14:   iconType?: IconType;",
          "15:   iconSize?: IconSize;",
          "16: }",
          "18: export const DashNavButton: FunctionComponent<Props> = ({",
          "19:   icon,",
          "20:   iconType,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:   noBorder?: boolean;",
          "21: const getStyles = stylesFactory((theme: GrafanaTheme) => ({",
          "22:   noBorderContainer: css`",
          "23:     padding: 0 ${theme.spacing.xs};",
          "24:     display: flex;",
          "25:   `,",
          "26: }));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "24:   onClick,",
          "25:   href,",
          "26:   children,",
          "27: }) => {",
          "29:     return (",
          "31:         <button",
          "32:           className={`btn navbar-button navbar-button--${classSuffix}`}",
          "33:           onClick={onClick}",
          "",
          "[Removed Lines]",
          "28:   if (onClick) {",
          "30:       <Tooltip content={tooltip} placement=\"bottom\">",
          "",
          "[Added Lines]",
          "37:   noBorder,",
          "39:   const theme = useTheme();",
          "40:   const styles = getStyles(theme);",
          "42:   if (noBorder) {",
          "44:       <div className={styles.noBorderContainer}>",
          "45:         {icon && (",
          "46:           <IconButton",
          "47:             name={icon}",
          "48:             size={iconSize}",
          "49:             iconType={iconType}",
          "50:             tooltip={tooltip}",
          "51:             tooltipPlacement=\"bottom\"",
          "52:             onClick={onClick}",
          "53:           />",
          "54:         )}",
          "55:         {children}",
          "56:       </div>",
          "57:     );",
          "58:   }",
          "59:   return (",
          "60:     <Tooltip content={tooltip} placement=\"bottom\">",
          "61:       {onClick ? (",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "36:           {icon && <Icon name={icon} type={iconType} size={iconSize || 'lg'} />}",
          "37:           {children}",
          "38:         </button>",
          "49:     </Tooltip>",
          "50:   );",
          "51: };",
          "",
          "[Removed Lines]",
          "39:       </Tooltip>",
          "40:     );",
          "41:   }",
          "43:   return (",
          "44:     <Tooltip content={tooltip} placement=\"bottom\">",
          "45:       <a className={`btn navbar-button navbar-button--${classSuffix}`} href={href}>",
          "46:         {icon && <Icon name={icon} type={iconType} size=\"lg\" />}",
          "47:         {children}",
          "48:       </a>",
          "",
          "[Added Lines]",
          "70:       ) : (",
          "71:         <a className={`btn navbar-button navbar-button--${classSuffix}`} href={href}>",
          "72:           {icon && <Icon name={icon} type={iconType} size=\"lg\" />}",
          "73:           {children}",
          "74:         </a>",
          "75:       )}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04d3c3aaed655bfae77c8aeb7f1f28285d3e0d6e",
      "candidate_info": {
        "commit_hash": "04d3c3aaed655bfae77c8aeb7f1f28285d3e0d6e",
        "repo": "grafana/grafana",
        "commit_url": "https://github.com/grafana/grafana/commit/04d3c3aaed655bfae77c8aeb7f1f28285d3e0d6e",
        "files": [
          "public/app/features/dashboard/components/DashNav/DashNav.tsx"
        ],
        "message": "Dashboard: extend dashnav to add custom content (#23433)",
        "before_after_code_files": [
          "public/app/features/dashboard/components/DashNav/DashNav.tsx||public/app/features/dashboard/components/DashNav/DashNav.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "public/app/features/dashboard/components/DashNav/DashNav.tsx||public/app/features/dashboard/components/DashNav/DashNav.tsx"
          ],
          "candidate": [
            "public/app/features/dashboard/components/DashNav/DashNav.tsx||public/app/features/dashboard/components/DashNav/DashNav.tsx"
          ]
        }
      },
      "candidate_diff": {
        "public/app/features/dashboard/components/DashNav/DashNav.tsx||public/app/features/dashboard/components/DashNav/DashNav.tsx": [
          "File: public/app/features/dashboard/components/DashNav/DashNav.tsx -> public/app/features/dashboard/components/DashNav/DashNav.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { connect } from 'react-redux';",
          "4: import { css } from 'emotion';",
          "5: import { e2e } from '@grafana/e2e';",
          "",
          "[Removed Lines]",
          "2: import React, { PureComponent } from 'react';",
          "",
          "[Added Lines]",
          "2: import React, { PureComponent, FC } from 'react';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:   onAddPanel: () => void;",
          "30: }",
          "32: export interface StateProps {",
          "33:   location: any;",
          "34: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: const customNavbarContent: Array<FC<Partial<OwnProps>>> = [];",
          "34: export function addNavbarContent(content: FC<Partial<OwnProps>>) {",
          "35:   customNavbarContent.push(content);",
          "36: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173:           </div>",
          "174:         )}",
          "176:         <div className=\"navbar-buttons navbar-buttons--actions\">",
          "177:           {canSave && (",
          "178:             <DashNavButton",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:         {customNavbarContent.map((Component, index) => (",
          "183:           <Component {...this.props} key={`navbar-custom-content-${index}`} />",
          "184:         ))}",
          "",
          "---------------"
        ]
      }
    }
  ]
}