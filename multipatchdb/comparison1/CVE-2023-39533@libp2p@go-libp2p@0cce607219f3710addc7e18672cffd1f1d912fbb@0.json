{
  "cve_id": "CVE-2023-39533",
  "cve_desc": "go-libp2p is the Go implementation of the libp2p Networking Stack. Prior to versions 0.27.8, 0.28.2, and 0.29.1 malicious peer can use large RSA keys to run a resource exhaustion attack & force a node to spend time doing signature verification of the large key. This vulnerability is present in the core/crypto module of go-libp2p and can occur during the Noise handshake and the libp2p x509 extension verification step. To prevent this attack, go-libp2p versions 0.27.8, 0.28.2, and 0.29.1 restrict RSA keys to <= 8192 bits. To protect one's application, it is necessary to update to these patch releases and to use the updated Go compiler in 1.20.7 or 1.19.12. There are no known workarounds for this issue.",
  "repo": "libp2p/go-libp2p",
  "patch_hash": "0cce607219f3710addc7e18672cffd1f1d912fbb",
  "patch_info": {
    "commit_hash": "0cce607219f3710addc7e18672cffd1f1d912fbb",
    "repo": "libp2p/go-libp2p",
    "commit_url": "https://github.com/libp2p/go-libp2p/commit/0cce607219f3710addc7e18672cffd1f1d912fbb",
    "files": [
      "core/crypto/rsa_common.go",
      "core/crypto/rsa_go.go",
      "core/crypto/rsa_test.go"
    ],
    "message": "core/crypto: restrict RSA keys to <= 8192 bits (#2454)\n\n* Error if RSA key is too big\n\n* Update core/crypto/rsa_common.go\n\nCo-authored-by: Marten Seemann <martenseemann@gmail.com>\n\n* Update core/crypto/rsa_common.go\n\nCo-authored-by: Marten Seemann <martenseemann@gmail.com>\n\n* Fix rename\n\n* Make this var again so the tests work\n\n---------\n\nCo-authored-by: Marten Seemann <martenseemann@gmail.com>",
    "before_after_code_files": [
      "core/crypto/rsa_common.go||core/crypto/rsa_common.go",
      "core/crypto/rsa_go.go||core/crypto/rsa_go.go",
      "core/crypto/rsa_test.go||core/crypto/rsa_test.go"
    ]
  },
  "patch_diff": {
    "core/crypto/rsa_common.go||core/crypto/rsa_common.go": [
      "File: core/crypto/rsa_common.go -> core/crypto/rsa_common.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: var MinRsaKeyBits = 2048",
      "17: var ErrRsaKeyTooSmall error",
      "19: func init() {",
      "20:  if _, ok := os.LookupEnv(WeakRsaKeyEnv); ok {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: var maxRsaKeyBits = 8192",
      "20: var ErrRsaKeyTooBig error = fmt.Errorf(\"rsa keys must be <= %d bits\", maxRsaKeyBits)",
      "",
      "---------------"
    ],
    "core/crypto/rsa_go.go||core/crypto/rsa_go.go": [
      "File: core/crypto/rsa_go.go -> core/crypto/rsa_go.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "31:  if bits < MinRsaKeyBits {",
      "32:   return nil, nil, ErrRsaKeyTooSmall",
      "33:  }",
      "34:  priv, err := rsa.GenerateKey(src, bits)",
      "35:  if err != nil {",
      "36:   return nil, nil, err",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34:  if bits > maxRsaKeyBits {",
      "35:   return nil, nil, ErrRsaKeyTooBig",
      "36:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "124:  if sk.N.BitLen() < MinRsaKeyBits {",
      "125:   return nil, ErrRsaKeyTooSmall",
      "126:  }",
      "127:  return &RsaPrivateKey{sk: *sk}, nil",
      "128: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "130:  if sk.N.BitLen() > maxRsaKeyBits {",
      "131:   return nil, ErrRsaKeyTooBig",
      "132:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "141:  if pk.N.BitLen() < MinRsaKeyBits {",
      "142:   return nil, ErrRsaKeyTooSmall",
      "143:  }",
      "145:  return &RsaPublicKey{k: *pk}, nil",
      "146: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "150:  if pk.N.BitLen() > maxRsaKeyBits {",
      "151:   return nil, ErrRsaKeyTooBig",
      "152:  }",
      "",
      "---------------"
    ],
    "core/crypto/rsa_test.go||core/crypto/rsa_test.go": [
      "File: core/crypto/rsa_test.go -> core/crypto/rsa_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "68:  }",
      "69: }",
      "71: func TestRSASignZero(t *testing.T) {",
      "72:  priv, pub, err := GenerateRSAKeyPair(2048, rand.Reader)",
      "73:  if err != nil {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "71: func TestRSABigKeyFailsToGenerate(t *testing.T) {",
      "72:  _, _, err := GenerateRSAKeyPair(maxRsaKeyBits*2, rand.Reader)",
      "73:  if err != ErrRsaKeyTooBig {",
      "74:   t.Fatal(\"should have refused to create too big RSA key\")",
      "75:  }",
      "76: }",
      "78: func TestRSABigKey(t *testing.T) {",
      "81:  origSize := maxRsaKeyBits",
      "82:  maxRsaKeyBits = 2048",
      "83:  defer func() { maxRsaKeyBits = origSize }() //",
      "85:  maxRsaKeyBits *= 2",
      "86:  badPriv, badPub, err := GenerateRSAKeyPair(maxRsaKeyBits, rand.Reader)",
      "87:  if err != nil {",
      "88:   t.Fatalf(\"should have succeeded, got: %s\", err)",
      "89:  }",
      "90:  pubBytes, err := MarshalPublicKey(badPub)",
      "91:  if err != nil {",
      "92:   t.Fatal(err)",
      "93:  }",
      "94:  privBytes, err := MarshalPrivateKey(badPriv)",
      "95:  if err != nil {",
      "96:   t.Fatal(err)",
      "97:  }",
      "98:  maxRsaKeyBits /= 2",
      "99:  _, err = UnmarshalPublicKey(pubBytes)",
      "100:  if err != ErrRsaKeyTooBig {",
      "101:   t.Fatal(\"should have refused to unmarshal a too big key\")",
      "102:  }",
      "103:  _, err = UnmarshalPrivateKey(privBytes)",
      "104:  if err != ErrRsaKeyTooBig {",
      "105:   t.Fatal(\"should have refused to unmarshal a too big key\")",
      "106:  }",
      "107: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b7ebfaaf4fa133a9e2587809467726b7965e2964",
      "candidate_info": {
        "commit_hash": "b7ebfaaf4fa133a9e2587809467726b7965e2964",
        "repo": "libp2p/go-libp2p",
        "commit_url": "https://github.com/libp2p/go-libp2p/commit/b7ebfaaf4fa133a9e2587809467726b7965e2964",
        "files": [
          "go.mod",
          "go.sum",
          "test-plans/go.mod",
          "test-plans/go.sum"
        ],
        "message": "manually bump qtls dependencies to fix RSA key size vulnerability",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum",
          "test-plans/go.mod||test-plans/go.mod",
          "test-plans/go.sum||test-plans/go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libp2p/go-libp2p/pull/2458"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:  github.com/prometheus/common v0.42.0 // indirect",
          "103:  github.com/prometheus/procfs v0.9.0 // indirect",
          "104:  github.com/quic-go/qpack v0.4.0 // indirect",
          "107:  github.com/spaolacci/murmur3 v1.1.0 // indirect",
          "108:  github.com/syndtr/goleveldb v1.0.0 // indirect",
          "109:  go.uber.org/atomic v1.10.0 // indirect",
          "",
          "[Removed Lines]",
          "105:  github.com/quic-go/qtls-go1-19 v0.3.2 // indirect",
          "106:  github.com/quic-go/qtls-go1-20 v0.2.2 // indirect",
          "",
          "[Added Lines]",
          "105:  github.com/quic-go/qtls-go1-19 v0.3.3 // indirect",
          "106:  github.com/quic-go/qtls-go1-20 v0.2.3 // indirect",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "342: github.com/prometheus/procfs v0.9.0/go.mod h1:+pB4zwohETzFnmlpe6yd2lSc+0/46IYZRB/chUwxUZY=",
          "343: github.com/quic-go/qpack v0.4.0 h1:Cr9BXA1sQS2SmDUWjSofMPNKmvF6IiIfDRmgU0w1ZCo=",
          "344: github.com/quic-go/qpack v0.4.0/go.mod h1:UZVnYIfi5GRk+zI9UMaCPsmZ2xKJP7XBUvVyT1Knj9A=",
          "349: github.com/quic-go/quic-go v0.33.0 h1:ItNoTDN/Fm/zBlq769lLJc8ECe9gYaW40veHCCco7y0=",
          "350: github.com/quic-go/quic-go v0.33.0/go.mod h1:YMuhaAV9/jIu0XclDXwZPAsP/2Kgr5yMYhe9oxhhOFA=",
          "351: github.com/quic-go/webtransport-go v0.5.2 h1:GA6Bl6oZY+g/flt00Pnu0XtivSD8vukOu3lYhJjnGEk=",
          "",
          "[Removed Lines]",
          "345: github.com/quic-go/qtls-go1-19 v0.3.2 h1:tFxjCFcTQzK+oMxG6Zcvp4Dq8dx4yD3dDiIiyc86Z5U=",
          "346: github.com/quic-go/qtls-go1-19 v0.3.2/go.mod h1:ySOI96ew8lnoKPtSqx2BlI5wCpUVPT05RMAlajtnyOI=",
          "347: github.com/quic-go/qtls-go1-20 v0.2.2 h1:WLOPx6OY/hxtTxKV1Zrq20FtXtDEkeY00CGQm8GEa3E=",
          "348: github.com/quic-go/qtls-go1-20 v0.2.2/go.mod h1:JKtK6mjbAVcUTN/9jZpvLbGxvdWIKS8uT7EiStoU1SM=",
          "",
          "[Added Lines]",
          "345: github.com/quic-go/qtls-go1-19 v0.3.3 h1:wznEHvJwd+2X3PqftRha0SUKmGsnb6dfArMhy9PeJVE=",
          "346: github.com/quic-go/qtls-go1-19 v0.3.3/go.mod h1:ySOI96ew8lnoKPtSqx2BlI5wCpUVPT05RMAlajtnyOI=",
          "347: github.com/quic-go/qtls-go1-20 v0.2.3 h1:m575dovXn1y2ATOb1XrRFcrv0F+EQmlowTkoraNkDPI=",
          "348: github.com/quic-go/qtls-go1-20 v0.2.3/go.mod h1:JKtK6mjbAVcUTN/9jZpvLbGxvdWIKS8uT7EiStoU1SM=",
          "",
          "---------------"
        ],
        "test-plans/go.mod||test-plans/go.mod": [
          "File: test-plans/go.mod -> test-plans/go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:  github.com/prometheus/common v0.42.0 // indirect",
          "74:  github.com/prometheus/procfs v0.9.0 // indirect",
          "75:  github.com/quic-go/qpack v0.4.0 // indirect",
          "78:  github.com/quic-go/quic-go v0.33.0 // indirect",
          "79:  github.com/quic-go/webtransport-go v0.5.2 // indirect",
          "80:  github.com/raulk/go-watchdog v1.3.0 // indirect",
          "",
          "[Removed Lines]",
          "76:  github.com/quic-go/qtls-go1-19 v0.3.2 // indirect",
          "77:  github.com/quic-go/qtls-go1-20 v0.2.2 // indirect",
          "",
          "[Added Lines]",
          "76:  github.com/quic-go/qtls-go1-19 v0.3.3 // indirect",
          "77:  github.com/quic-go/qtls-go1-20 v0.2.3 // indirect",
          "",
          "---------------"
        ],
        "test-plans/go.sum||test-plans/go.sum": [
          "File: test-plans/go.sum -> test-plans/go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "277: github.com/prometheus/procfs v0.9.0/go.mod h1:+pB4zwohETzFnmlpe6yd2lSc+0/46IYZRB/chUwxUZY=",
          "278: github.com/quic-go/qpack v0.4.0 h1:Cr9BXA1sQS2SmDUWjSofMPNKmvF6IiIfDRmgU0w1ZCo=",
          "279: github.com/quic-go/qpack v0.4.0/go.mod h1:UZVnYIfi5GRk+zI9UMaCPsmZ2xKJP7XBUvVyT1Knj9A=",
          "284: github.com/quic-go/quic-go v0.33.0 h1:ItNoTDN/Fm/zBlq769lLJc8ECe9gYaW40veHCCco7y0=",
          "285: github.com/quic-go/quic-go v0.33.0/go.mod h1:YMuhaAV9/jIu0XclDXwZPAsP/2Kgr5yMYhe9oxhhOFA=",
          "286: github.com/quic-go/webtransport-go v0.5.2 h1:GA6Bl6oZY+g/flt00Pnu0XtivSD8vukOu3lYhJjnGEk=",
          "",
          "[Removed Lines]",
          "280: github.com/quic-go/qtls-go1-19 v0.3.2 h1:tFxjCFcTQzK+oMxG6Zcvp4Dq8dx4yD3dDiIiyc86Z5U=",
          "281: github.com/quic-go/qtls-go1-19 v0.3.2/go.mod h1:ySOI96ew8lnoKPtSqx2BlI5wCpUVPT05RMAlajtnyOI=",
          "282: github.com/quic-go/qtls-go1-20 v0.2.2 h1:WLOPx6OY/hxtTxKV1Zrq20FtXtDEkeY00CGQm8GEa3E=",
          "283: github.com/quic-go/qtls-go1-20 v0.2.2/go.mod h1:JKtK6mjbAVcUTN/9jZpvLbGxvdWIKS8uT7EiStoU1SM=",
          "",
          "[Added Lines]",
          "280: github.com/quic-go/qtls-go1-19 v0.3.3 h1:wznEHvJwd+2X3PqftRha0SUKmGsnb6dfArMhy9PeJVE=",
          "281: github.com/quic-go/qtls-go1-19 v0.3.3/go.mod h1:ySOI96ew8lnoKPtSqx2BlI5wCpUVPT05RMAlajtnyOI=",
          "282: github.com/quic-go/qtls-go1-20 v0.2.3 h1:m575dovXn1y2ATOb1XrRFcrv0F+EQmlowTkoraNkDPI=",
          "283: github.com/quic-go/qtls-go1-20 v0.2.3/go.mod h1:JKtK6mjbAVcUTN/9jZpvLbGxvdWIKS8uT7EiStoU1SM=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a65fc405e4be195776fcb5f25447849de3c3e46e",
      "candidate_info": {
        "commit_hash": "a65fc405e4be195776fcb5f25447849de3c3e46e",
        "repo": "libp2p/go-libp2p",
        "commit_url": "https://github.com/libp2p/go-libp2p/commit/a65fc405e4be195776fcb5f25447849de3c3e46e",
        "files": [
          "go.mod",
          "go.sum",
          "test-plans/go.mod",
          "test-plans/go.sum"
        ],
        "message": "manually bump qtls dependencies to fix RSA key size vulnerability",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum",
          "test-plans/go.mod||test-plans/go.mod",
          "test-plans/go.sum||test-plans/go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libp2p/go-libp2p/pull/2458"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:  github.com/prometheus/common v0.42.0 // indirect",
          "103:  github.com/prometheus/procfs v0.9.0 // indirect",
          "104:  github.com/quic-go/qpack v0.4.0 // indirect",
          "107:  github.com/spaolacci/murmur3 v1.1.0 // indirect",
          "108:  github.com/syndtr/goleveldb v1.0.0 // indirect",
          "109:  go.uber.org/atomic v1.10.0 // indirect",
          "",
          "[Removed Lines]",
          "105:  github.com/quic-go/qtls-go1-19 v0.3.2 // indirect",
          "106:  github.com/quic-go/qtls-go1-20 v0.2.2 // indirect",
          "",
          "[Added Lines]",
          "105:  github.com/quic-go/qtls-go1-19 v0.3.3 // indirect",
          "106:  github.com/quic-go/qtls-go1-20 v0.2.3 // indirect",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "342: github.com/prometheus/procfs v0.9.0/go.mod h1:+pB4zwohETzFnmlpe6yd2lSc+0/46IYZRB/chUwxUZY=",
          "343: github.com/quic-go/qpack v0.4.0 h1:Cr9BXA1sQS2SmDUWjSofMPNKmvF6IiIfDRmgU0w1ZCo=",
          "344: github.com/quic-go/qpack v0.4.0/go.mod h1:UZVnYIfi5GRk+zI9UMaCPsmZ2xKJP7XBUvVyT1Knj9A=",
          "349: github.com/quic-go/quic-go v0.33.0 h1:ItNoTDN/Fm/zBlq769lLJc8ECe9gYaW40veHCCco7y0=",
          "350: github.com/quic-go/quic-go v0.33.0/go.mod h1:YMuhaAV9/jIu0XclDXwZPAsP/2Kgr5yMYhe9oxhhOFA=",
          "351: github.com/quic-go/webtransport-go v0.5.2 h1:GA6Bl6oZY+g/flt00Pnu0XtivSD8vukOu3lYhJjnGEk=",
          "",
          "[Removed Lines]",
          "345: github.com/quic-go/qtls-go1-19 v0.3.2 h1:tFxjCFcTQzK+oMxG6Zcvp4Dq8dx4yD3dDiIiyc86Z5U=",
          "346: github.com/quic-go/qtls-go1-19 v0.3.2/go.mod h1:ySOI96ew8lnoKPtSqx2BlI5wCpUVPT05RMAlajtnyOI=",
          "347: github.com/quic-go/qtls-go1-20 v0.2.2 h1:WLOPx6OY/hxtTxKV1Zrq20FtXtDEkeY00CGQm8GEa3E=",
          "348: github.com/quic-go/qtls-go1-20 v0.2.2/go.mod h1:JKtK6mjbAVcUTN/9jZpvLbGxvdWIKS8uT7EiStoU1SM=",
          "",
          "[Added Lines]",
          "345: github.com/quic-go/qtls-go1-19 v0.3.3 h1:wznEHvJwd+2X3PqftRha0SUKmGsnb6dfArMhy9PeJVE=",
          "346: github.com/quic-go/qtls-go1-19 v0.3.3/go.mod h1:ySOI96ew8lnoKPtSqx2BlI5wCpUVPT05RMAlajtnyOI=",
          "347: github.com/quic-go/qtls-go1-20 v0.2.3 h1:m575dovXn1y2ATOb1XrRFcrv0F+EQmlowTkoraNkDPI=",
          "348: github.com/quic-go/qtls-go1-20 v0.2.3/go.mod h1:JKtK6mjbAVcUTN/9jZpvLbGxvdWIKS8uT7EiStoU1SM=",
          "",
          "---------------"
        ],
        "test-plans/go.mod||test-plans/go.mod": [
          "File: test-plans/go.mod -> test-plans/go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:  github.com/prometheus/common v0.42.0 // indirect",
          "74:  github.com/prometheus/procfs v0.9.0 // indirect",
          "75:  github.com/quic-go/qpack v0.4.0 // indirect",
          "78:  github.com/quic-go/quic-go v0.33.0 // indirect",
          "79:  github.com/quic-go/webtransport-go v0.5.2 // indirect",
          "80:  github.com/raulk/go-watchdog v1.3.0 // indirect",
          "",
          "[Removed Lines]",
          "76:  github.com/quic-go/qtls-go1-19 v0.3.2 // indirect",
          "77:  github.com/quic-go/qtls-go1-20 v0.2.2 // indirect",
          "",
          "[Added Lines]",
          "76:  github.com/quic-go/qtls-go1-19 v0.3.3 // indirect",
          "77:  github.com/quic-go/qtls-go1-20 v0.2.3 // indirect",
          "",
          "---------------"
        ],
        "test-plans/go.sum||test-plans/go.sum": [
          "File: test-plans/go.sum -> test-plans/go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "277: github.com/prometheus/procfs v0.9.0/go.mod h1:+pB4zwohETzFnmlpe6yd2lSc+0/46IYZRB/chUwxUZY=",
          "278: github.com/quic-go/qpack v0.4.0 h1:Cr9BXA1sQS2SmDUWjSofMPNKmvF6IiIfDRmgU0w1ZCo=",
          "279: github.com/quic-go/qpack v0.4.0/go.mod h1:UZVnYIfi5GRk+zI9UMaCPsmZ2xKJP7XBUvVyT1Knj9A=",
          "284: github.com/quic-go/quic-go v0.33.0 h1:ItNoTDN/Fm/zBlq769lLJc8ECe9gYaW40veHCCco7y0=",
          "285: github.com/quic-go/quic-go v0.33.0/go.mod h1:YMuhaAV9/jIu0XclDXwZPAsP/2Kgr5yMYhe9oxhhOFA=",
          "286: github.com/quic-go/webtransport-go v0.5.2 h1:GA6Bl6oZY+g/flt00Pnu0XtivSD8vukOu3lYhJjnGEk=",
          "",
          "[Removed Lines]",
          "280: github.com/quic-go/qtls-go1-19 v0.3.2 h1:tFxjCFcTQzK+oMxG6Zcvp4Dq8dx4yD3dDiIiyc86Z5U=",
          "281: github.com/quic-go/qtls-go1-19 v0.3.2/go.mod h1:ySOI96ew8lnoKPtSqx2BlI5wCpUVPT05RMAlajtnyOI=",
          "282: github.com/quic-go/qtls-go1-20 v0.2.2 h1:WLOPx6OY/hxtTxKV1Zrq20FtXtDEkeY00CGQm8GEa3E=",
          "283: github.com/quic-go/qtls-go1-20 v0.2.2/go.mod h1:JKtK6mjbAVcUTN/9jZpvLbGxvdWIKS8uT7EiStoU1SM=",
          "",
          "[Added Lines]",
          "280: github.com/quic-go/qtls-go1-19 v0.3.3 h1:wznEHvJwd+2X3PqftRha0SUKmGsnb6dfArMhy9PeJVE=",
          "281: github.com/quic-go/qtls-go1-19 v0.3.3/go.mod h1:ySOI96ew8lnoKPtSqx2BlI5wCpUVPT05RMAlajtnyOI=",
          "282: github.com/quic-go/qtls-go1-20 v0.2.3 h1:m575dovXn1y2ATOb1XrRFcrv0F+EQmlowTkoraNkDPI=",
          "283: github.com/quic-go/qtls-go1-20 v0.2.3/go.mod h1:JKtK6mjbAVcUTN/9jZpvLbGxvdWIKS8uT7EiStoU1SM=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d3332d52a59f4a045ac9d304349ffdbd69f74a4",
      "candidate_info": {
        "commit_hash": "6d3332d52a59f4a045ac9d304349ffdbd69f74a4",
        "repo": "libp2p/go-libp2p",
        "commit_url": "https://github.com/libp2p/go-libp2p/commit/6d3332d52a59f4a045ac9d304349ffdbd69f74a4",
        "files": [
          "p2p/net/swarm/swarm.go",
          "p2p/test/basichost/basic_host_test.go"
        ],
        "message": "swarm: don't open new streams over transient connections (#2450)",
        "before_after_code_files": [
          "p2p/net/swarm/swarm.go||p2p/net/swarm/swarm.go",
          "p2p/test/basichost/basic_host_test.go||p2p/test/basichost/basic_host_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libp2p/go-libp2p/pull/2458"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "p2p/net/swarm/swarm.go||p2p/net/swarm/swarm.go": [
          "File: p2p/net/swarm/swarm.go -> p2p/net/swarm/swarm.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "695:  c.metricsTracer.ClosedConnection(c.dir, time.Since(c.opened), c.ConnState(), c.LocalMultiaddr())",
          "696:  return c.CapableConn.Close()",
          "697: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "699: func (c connWithMetrics) Stat() network.ConnStats {",
          "700:  if cs, ok := c.CapableConn.(network.ConnStat); ok {",
          "701:   return cs.Stat()",
          "702:  }",
          "703:  return network.ConnStats{}",
          "704: }",
          "706: var _ network.ConnStat = connWithMetrics{}",
          "",
          "---------------"
        ],
        "p2p/test/basichost/basic_host_test.go||p2p/test/basichost/basic_host_test.go": [
          "File: p2p/test/basichost/basic_host_test.go -> p2p/test/basichost/basic_host_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package basichost",
          "3: import (",
          "4:  \"context\"",
          "5:  \"fmt\"",
          "6:  \"testing\"",
          "8:  \"github.com/libp2p/go-libp2p\"",
          "9:  \"github.com/libp2p/go-libp2p/core/network\"",
          "10:  \"github.com/libp2p/go-libp2p/core/peer\"",
          "11:  \"github.com/libp2p/go-libp2p/p2p/protocol/circuitv2/client\"",
          "12:  \"github.com/libp2p/go-libp2p/p2p/protocol/circuitv2/relay\"",
          "13:  ma \"github.com/multiformats/go-multiaddr\"",
          "14:  \"github.com/stretchr/testify/require\"",
          "15: )",
          "17: func TestNoStreamOverTransientConnection(t *testing.T) {",
          "18:  h1, err := libp2p.New(",
          "19:   libp2p.NoListenAddrs,",
          "20:   libp2p.EnableRelay(),",
          "21:  )",
          "22:  require.NoError(t, err)",
          "24:  h2, err := libp2p.New(",
          "25:   libp2p.NoListenAddrs,",
          "26:   libp2p.EnableRelay(),",
          "27:  )",
          "28:  require.NoError(t, err)",
          "30:  relay1, err := libp2p.New()",
          "31:  require.NoError(t, err)",
          "33:  _, err = relay.New(relay1)",
          "34:  require.NoError(t, err)",
          "36:  relay1info := peer.AddrInfo{",
          "37:   ID:    relay1.ID(),",
          "38:   Addrs: relay1.Addrs(),",
          "39:  }",
          "40:  err = h1.Connect(context.Background(), relay1info)",
          "41:  require.NoError(t, err)",
          "43:  err = h2.Connect(context.Background(), relay1info)",
          "44:  require.NoError(t, err)",
          "46:  h2.SetStreamHandler(\"/testprotocol\", func(s network.Stream) {",
          "47:   fmt.Println(\"testprotocol\")",
          "50:   s.Close()",
          "51:  })",
          "53:  _, err = client.Reserve(context.Background(), h2, relay1info)",
          "54:  require.NoError(t, err)",
          "56:  relayaddr := ma.StringCast(\"/p2p/\" + relay1info.ID.String() + \"/p2p-circuit/p2p/\" + h2.ID().String())",
          "58:  h2Info := peer.AddrInfo{",
          "59:   ID:    h2.ID(),",
          "60:   Addrs: []ma.Multiaddr{relayaddr},",
          "61:  }",
          "62:  err = h1.Connect(context.Background(), h2Info)",
          "63:  require.NoError(t, err)",
          "65:  ctx := network.WithNoDial(context.Background(), \"test\")",
          "66:  _, err = h1.NewStream(ctx, h2.ID(), \"/testprotocol\")",
          "68:  require.ErrorIs(t, err, network.ErrTransientConn)",
          "70:  _, err = h1.NewStream(network.WithUseTransient(context.Background(), \"test\"), h2.ID(), \"/testprotocol\")",
          "71:  require.NoError(t, err)",
          "72: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69acf8bd0714c73148adee729b39d3a996423de3",
      "candidate_info": {
        "commit_hash": "69acf8bd0714c73148adee729b39d3a996423de3",
        "repo": "libp2p/go-libp2p",
        "commit_url": "https://github.com/libp2p/go-libp2p/commit/69acf8bd0714c73148adee729b39d3a996423de3",
        "files": [
          "p2p/net/swarm/swarm.go",
          "p2p/test/basichost/basic_host_test.go"
        ],
        "message": "swarm: don't open new streams over transient connections (#2450)",
        "before_after_code_files": [
          "p2p/net/swarm/swarm.go||p2p/net/swarm/swarm.go",
          "p2p/test/basichost/basic_host_test.go||p2p/test/basichost/basic_host_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libp2p/go-libp2p/pull/2458"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "p2p/net/swarm/swarm.go||p2p/net/swarm/swarm.go": [
          "File: p2p/net/swarm/swarm.go -> p2p/net/swarm/swarm.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "695:  c.metricsTracer.ClosedConnection(c.dir, time.Since(c.opened), c.ConnState(), c.LocalMultiaddr())",
          "696:  return c.CapableConn.Close()",
          "697: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "699: func (c connWithMetrics) Stat() network.ConnStats {",
          "700:  if cs, ok := c.CapableConn.(network.ConnStat); ok {",
          "701:   return cs.Stat()",
          "702:  }",
          "703:  return network.ConnStats{}",
          "704: }",
          "706: var _ network.ConnStat = connWithMetrics{}",
          "",
          "---------------"
        ],
        "p2p/test/basichost/basic_host_test.go||p2p/test/basichost/basic_host_test.go": [
          "File: p2p/test/basichost/basic_host_test.go -> p2p/test/basichost/basic_host_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package basichost",
          "3: import (",
          "4:  \"context\"",
          "5:  \"fmt\"",
          "6:  \"testing\"",
          "8:  \"github.com/libp2p/go-libp2p\"",
          "9:  \"github.com/libp2p/go-libp2p/core/network\"",
          "10:  \"github.com/libp2p/go-libp2p/core/peer\"",
          "11:  \"github.com/libp2p/go-libp2p/p2p/protocol/circuitv2/client\"",
          "12:  \"github.com/libp2p/go-libp2p/p2p/protocol/circuitv2/relay\"",
          "13:  ma \"github.com/multiformats/go-multiaddr\"",
          "14:  \"github.com/stretchr/testify/require\"",
          "15: )",
          "17: func TestNoStreamOverTransientConnection(t *testing.T) {",
          "18:  h1, err := libp2p.New(",
          "19:   libp2p.NoListenAddrs,",
          "20:   libp2p.EnableRelay(),",
          "21:  )",
          "22:  require.NoError(t, err)",
          "24:  h2, err := libp2p.New(",
          "25:   libp2p.NoListenAddrs,",
          "26:   libp2p.EnableRelay(),",
          "27:  )",
          "28:  require.NoError(t, err)",
          "30:  relay1, err := libp2p.New()",
          "31:  require.NoError(t, err)",
          "33:  _, err = relay.New(relay1)",
          "34:  require.NoError(t, err)",
          "36:  relay1info := peer.AddrInfo{",
          "37:   ID:    relay1.ID(),",
          "38:   Addrs: relay1.Addrs(),",
          "39:  }",
          "40:  err = h1.Connect(context.Background(), relay1info)",
          "41:  require.NoError(t, err)",
          "43:  err = h2.Connect(context.Background(), relay1info)",
          "44:  require.NoError(t, err)",
          "46:  h2.SetStreamHandler(\"/testprotocol\", func(s network.Stream) {",
          "47:   fmt.Println(\"testprotocol\")",
          "50:   s.Close()",
          "51:  })",
          "53:  _, err = client.Reserve(context.Background(), h2, relay1info)",
          "54:  require.NoError(t, err)",
          "56:  relayaddr := ma.StringCast(\"/p2p/\" + relay1info.ID.String() + \"/p2p-circuit/p2p/\" + h2.ID().String())",
          "58:  h2Info := peer.AddrInfo{",
          "59:   ID:    h2.ID(),",
          "60:   Addrs: []ma.Multiaddr{relayaddr},",
          "61:  }",
          "62:  err = h1.Connect(context.Background(), h2Info)",
          "63:  require.NoError(t, err)",
          "65:  ctx := network.WithNoDial(context.Background(), \"test\")",
          "66:  _, err = h1.NewStream(ctx, h2.ID(), \"/testprotocol\")",
          "68:  require.ErrorIs(t, err, network.ErrTransientConn)",
          "70:  _, err = h1.NewStream(network.WithUseTransient(context.Background(), \"test\"), h2.ID(), \"/testprotocol\")",
          "71:  require.NoError(t, err)",
          "72: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b79194a5a301e57f837c3bbe28154933ef325321",
      "candidate_info": {
        "commit_hash": "b79194a5a301e57f837c3bbe28154933ef325321",
        "repo": "libp2p/go-libp2p",
        "commit_url": "https://github.com/libp2p/go-libp2p/commit/b79194a5a301e57f837c3bbe28154933ef325321",
        "files": [
          "core/crypto/rsa_common.go",
          "core/crypto/rsa_go.go",
          "core/crypto/rsa_test.go"
        ],
        "message": "core/crypto: restrict RSA keys to <= 8192 bits (#2454)\n\n* Error if RSA key is too big\n\n* Update core/crypto/rsa_common.go\n\nCo-authored-by: Marten Seemann <martenseemann@gmail.com>\n\n* Update core/crypto/rsa_common.go\n\nCo-authored-by: Marten Seemann <martenseemann@gmail.com>\n\n* Fix rename\n\n* Make this var again so the tests work\n\n---------\n\nCo-authored-by: Marten Seemann <martenseemann@gmail.com>",
        "before_after_code_files": [
          "core/crypto/rsa_common.go||core/crypto/rsa_common.go",
          "core/crypto/rsa_go.go||core/crypto/rsa_go.go",
          "core/crypto/rsa_test.go||core/crypto/rsa_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "core/crypto/rsa_common.go||core/crypto/rsa_common.go",
            "core/crypto/rsa_go.go||core/crypto/rsa_go.go",
            "core/crypto/rsa_test.go||core/crypto/rsa_test.go"
          ],
          "candidate": [
            "core/crypto/rsa_common.go||core/crypto/rsa_common.go",
            "core/crypto/rsa_go.go||core/crypto/rsa_go.go",
            "core/crypto/rsa_test.go||core/crypto/rsa_test.go"
          ]
        }
      },
      "candidate_diff": {
        "core/crypto/rsa_common.go||core/crypto/rsa_common.go": [
          "File: core/crypto/rsa_common.go -> core/crypto/rsa_common.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: var MinRsaKeyBits = 2048",
          "17: var ErrRsaKeyTooSmall error",
          "19: func init() {",
          "20:  if _, ok := os.LookupEnv(WeakRsaKeyEnv); ok {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: var maxRsaKeyBits = 8192",
          "20: var ErrRsaKeyTooBig error = fmt.Errorf(\"rsa keys must be <= %d bits\", maxRsaKeyBits)",
          "",
          "---------------"
        ],
        "core/crypto/rsa_go.go||core/crypto/rsa_go.go": [
          "File: core/crypto/rsa_go.go -> core/crypto/rsa_go.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:  if bits < MinRsaKeyBits {",
          "32:   return nil, nil, ErrRsaKeyTooSmall",
          "33:  }",
          "34:  priv, err := rsa.GenerateKey(src, bits)",
          "35:  if err != nil {",
          "36:   return nil, nil, err",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:  if bits > maxRsaKeyBits {",
          "35:   return nil, nil, ErrRsaKeyTooBig",
          "36:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:  if sk.N.BitLen() < MinRsaKeyBits {",
          "125:   return nil, ErrRsaKeyTooSmall",
          "126:  }",
          "127:  return &RsaPrivateKey{sk: *sk}, nil",
          "128: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:  if sk.N.BitLen() > maxRsaKeyBits {",
          "131:   return nil, ErrRsaKeyTooBig",
          "132:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141:  if pk.N.BitLen() < MinRsaKeyBits {",
          "142:   return nil, ErrRsaKeyTooSmall",
          "143:  }",
          "145:  return &RsaPublicKey{k: *pk}, nil",
          "146: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:  if pk.N.BitLen() > maxRsaKeyBits {",
          "151:   return nil, ErrRsaKeyTooBig",
          "152:  }",
          "",
          "---------------"
        ],
        "core/crypto/rsa_test.go||core/crypto/rsa_test.go": [
          "File: core/crypto/rsa_test.go -> core/crypto/rsa_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:  }",
          "69: }",
          "71: func TestRSASignZero(t *testing.T) {",
          "72:  priv, pub, err := GenerateRSAKeyPair(2048, rand.Reader)",
          "73:  if err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: func TestRSABigKeyFailsToGenerate(t *testing.T) {",
          "72:  _, _, err := GenerateRSAKeyPair(maxRsaKeyBits*2, rand.Reader)",
          "73:  if err != ErrRsaKeyTooBig {",
          "74:   t.Fatal(\"should have refused to create too big RSA key\")",
          "75:  }",
          "76: }",
          "78: func TestRSABigKey(t *testing.T) {",
          "81:  origSize := maxRsaKeyBits",
          "82:  maxRsaKeyBits = 2048",
          "83:  defer func() { maxRsaKeyBits = origSize }() //",
          "85:  maxRsaKeyBits *= 2",
          "86:  badPriv, badPub, err := GenerateRSAKeyPair(maxRsaKeyBits, rand.Reader)",
          "87:  if err != nil {",
          "88:   t.Fatalf(\"should have succeeded, got: %s\", err)",
          "89:  }",
          "90:  pubBytes, err := MarshalPublicKey(badPub)",
          "91:  if err != nil {",
          "92:   t.Fatal(err)",
          "93:  }",
          "94:  privBytes, err := MarshalPrivateKey(badPriv)",
          "95:  if err != nil {",
          "96:   t.Fatal(err)",
          "97:  }",
          "98:  maxRsaKeyBits /= 2",
          "99:  _, err = UnmarshalPublicKey(pubBytes)",
          "100:  if err != ErrRsaKeyTooBig {",
          "101:   t.Fatal(\"should have refused to unmarshal a too big key\")",
          "102:  }",
          "103:  _, err = UnmarshalPrivateKey(privBytes)",
          "104:  if err != ErrRsaKeyTooBig {",
          "105:   t.Fatal(\"should have refused to unmarshal a too big key\")",
          "106:  }",
          "107: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}