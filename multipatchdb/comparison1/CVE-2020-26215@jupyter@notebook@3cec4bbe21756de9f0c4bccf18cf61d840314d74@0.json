{
  "cve_id": "CVE-2020-26215",
  "cve_desc": "Jupyter Notebook before version 6.1.5 has an Open redirect vulnerability. A maliciously crafted link to a notebook server could redirect the browser to a different website. All notebook servers are technically affected, however, these maliciously crafted links can only be reasonably made for known notebook server hosts. A link to your notebook server may appear safe, but ultimately redirect to a spoofed server on the public internet. The issue is patched in version 6.1.5.",
  "repo": "jupyter/notebook",
  "patch_hash": "3cec4bbe21756de9f0c4bccf18cf61d840314d74",
  "patch_info": {
    "commit_hash": "3cec4bbe21756de9f0c4bccf18cf61d840314d74",
    "repo": "jupyter/notebook",
    "commit_url": "https://github.com/jupyter/notebook/commit/3cec4bbe21756de9f0c4bccf18cf61d840314d74",
    "files": [
      "docs/source/changelog.rst",
      "notebook/base/handlers.py",
      "notebook/tests/test_paths.py"
    ],
    "message": "Merge pull request from GHSA-c7vm-f5p4-8fqh\n\n[6.x] Fix GHSA-c7vm-f5p4-8fqh",
    "before_after_code_files": [
      "notebook/base/handlers.py||notebook/base/handlers.py",
      "notebook/tests/test_paths.py||notebook/tests/test_paths.py"
    ]
  },
  "patch_diff": {
    "notebook/base/handlers.py||notebook/base/handlers.py": [
      "File: notebook/base/handlers.py -> notebook/base/handlers.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "855: class TrailingSlashHandler(web.RequestHandler):",
      "856:     \"\"\"Simple redirect handler that strips trailing slashes",
      "858:     This should be the first, highest priority handler.",
      "859:     \"\"\"",
      "861:     def get(self):",
      "864:     post = put = get",
      "",
      "[Removed Lines]",
      "862:         self.redirect(self.request.uri.rstrip('/'))",
      "",
      "[Added Lines]",
      "862:         path, *rest = self.request.uri.partition(\"?\")",
      "863:         # trim trailing *and* leading /",
      "864:         # to avoid misinterpreting repeated '//'",
      "865:         path = \"/\" + path.strip(\"/\")",
      "866:         new_uri = \"\".join([path, *rest])",
      "867:         self.redirect(new_uri)",
      "",
      "---------------"
    ],
    "notebook/tests/test_paths.py||notebook/tests/test_paths.py": [
      "File: notebook/tests/test_paths.py -> notebook/tests/test_paths.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: from nose.tools import assert_regex, assert_not_regex",
      "5: from notebook.base.handlers import path_regex",
      "7: # build regexps that tornado uses:",
      "8: path_pat = re.compile('^' + '/x%s' % path_regex + '$')",
      "10: def test_path_regex():",
      "11:     for path in (",
      "12:         '/x',",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: from notebook.utils import url_path_join",
      "7: from .launchnotebook import NotebookTestBase",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:         '/y/x/foo',",
      "31:     ):",
      "32:         assert_not_regex(path, path_pat)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38: class RedirectTestCase(NotebookTestBase):",
      "39:     def test_trailing_slash(self):",
      "40:         for uri, expected in (",
      "41:             (\"/notebooks/mynotebook/\", \"/notebooks/mynotebook\"),",
      "42:             (\"////foo///\", \"/foo\"),",
      "43:             (\"//example.com/\", \"/example.com\"),",
      "44:             (\"/has/param/?hasparam=true\", \"/has/param?hasparam=true\"),",
      "45:         ):",
      "46:             r = self.request(\"GET\", uri, allow_redirects=False)",
      "47:             print(uri, expected)",
      "48:             assert r.status_code == 302",
      "49:             assert \"Location\" in r.headers",
      "50:             assert r.headers[\"Location\"] == url_path_join(self.url_prefix, expected)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1abd95130c3345accf002805fa7c12c7fcca5286",
      "candidate_info": {
        "commit_hash": "1abd95130c3345accf002805fa7c12c7fcca5286",
        "repo": "jupyter/notebook",
        "commit_url": "https://github.com/jupyter/notebook/commit/1abd95130c3345accf002805fa7c12c7fcca5286",
        "files": [
          "notebook/base/handlers.py",
          "notebook/tests/test_paths.py"
        ],
        "message": "Validate redirect target in TrailingSlashHandler\n\nFixes open redirect vulnerability GHSA-c7vm-f5p4-8fqh",
        "before_after_code_files": [
          "notebook/base/handlers.py||notebook/base/handlers.py",
          "notebook/tests/test_paths.py||notebook/tests/test_paths.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "notebook/base/handlers.py||notebook/base/handlers.py",
            "notebook/tests/test_paths.py||notebook/tests/test_paths.py"
          ],
          "candidate": [
            "notebook/base/handlers.py||notebook/base/handlers.py",
            "notebook/tests/test_paths.py||notebook/tests/test_paths.py"
          ]
        }
      },
      "candidate_diff": {
        "notebook/base/handlers.py||notebook/base/handlers.py": [
          "File: notebook/base/handlers.py -> notebook/base/handlers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "854: class TrailingSlashHandler(web.RequestHandler):",
          "855:     \"\"\"Simple redirect handler that strips trailing slashes",
          "857:     This should be the first, highest priority handler.",
          "858:     \"\"\"",
          "860:     def get(self):",
          "863:     post = put = get",
          "",
          "[Removed Lines]",
          "861:         self.redirect(self.request.uri.rstrip('/'))",
          "",
          "[Added Lines]",
          "861:         path, *rest = self.request.uri.partition(\"?\")",
          "862:         # trim trailing *and* leading /",
          "863:         # to avoid misinterpreting repeated '//'",
          "864:         path = \"/\" + path.strip(\"/\")",
          "865:         new_uri = \"\".join([path, *rest])",
          "866:         self.redirect(new_uri)",
          "",
          "---------------"
        ],
        "notebook/tests/test_paths.py||notebook/tests/test_paths.py": [
          "File: notebook/tests/test_paths.py -> notebook/tests/test_paths.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import re",
          "4: from notebook.base.handlers import path_regex",
          "6: # build regexps that tornado uses:",
          "7: path_pat = re.compile('^' + '/x%s' % path_regex + '$')",
          "9: def test_path_regex():",
          "10:     for path in (",
          "11:         '/x',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: from notebook.utils import url_path_join",
          "6: from .launchnotebook import NotebookTestBase",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:         '/y/x/foo',",
          "30:     ):",
          "31:         assert not re.match(path_pat, path)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: class RedirectTestCase(NotebookTestBase):",
          "38:     def test_trailing_slash(self):",
          "39:         for uri, expected in (",
          "40:             (\"/notebooks/mynotebook/\", \"/notebooks/mynotebook\"),",
          "41:             (\"////foo///\", \"/foo\"),",
          "42:             (\"//example.com/\", \"/example.com\"),",
          "43:             (\"/has/param/?hasparam=true\", \"/has/param?hasparam=true\"),",
          "44:         ):",
          "45:             r = self.request(\"GET\", uri, allow_redirects=False)",
          "46:             print(uri, expected)",
          "47:             assert r.status_code == 302",
          "48:             assert \"Location\" in r.headers",
          "49:             assert r.headers[\"Location\"] == url_path_join(self.url_prefix, expected)",
          "",
          "---------------"
        ]
      }
    }
  ]
}