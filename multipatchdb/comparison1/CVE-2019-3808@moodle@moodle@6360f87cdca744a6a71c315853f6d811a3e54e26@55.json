{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "376a79c242399aa5fce2c17cf547579b83c8ef47",
      "candidate_info": {
        "commit_hash": "376a79c242399aa5fce2c17cf547579b83c8ef47",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/376a79c242399aa5fce2c17cf547579b83c8ef47",
        "files": [
          "lang/en/message.php",
          "lib/classes/event/notification_sent.php",
          "lib/classes/event/notification_viewed.php",
          "lib/classes/message/manager.php",
          "lib/tests/messagelib_test.php",
          "message/classes/api.php",
          "message/tests/events_test.php",
          "mod/assign/tests/locallib_test.php",
          "version.php"
        ],
        "message": "MDL-36941 core: added events for notifications",
        "before_after_code_files": [
          "lang/en/message.php||lang/en/message.php",
          "lib/classes/event/notification_sent.php||lib/classes/event/notification_sent.php",
          "lib/classes/event/notification_viewed.php||lib/classes/event/notification_viewed.php",
          "lib/classes/message/manager.php||lib/classes/message/manager.php",
          "lib/tests/messagelib_test.php||lib/tests/messagelib_test.php",
          "message/classes/api.php||message/classes/api.php",
          "message/tests/events_test.php||message/tests/events_test.php",
          "mod/assign/tests/locallib_test.php||mod/assign/tests/locallib_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lang/en/message.php||lang/en/message.php": [
          "File: lang/en/message.php -> lang/en/message.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: $string['enabled'] = 'Enabled';",
          "46: $string['errorcallingprocessor'] = 'Error calling defined output';",
          "47: $string['errortranslatingdefault'] = 'Error translating default setting provided by plugin, using system defaults instead.';",
          "48: $string['eventmessagecontactadded'] = 'Message contact added';",
          "49: $string['eventmessagecontactblocked'] = 'Message contact blocked';",
          "50: $string['eventmessagecontactremoved'] = 'Message contact removed';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: $string['eventnotificationviewed'] = 'Notification viewed';",
          "49: $string['eventnotificationsent'] = 'Notification sent';",
          "",
          "---------------"
        ],
        "lib/classes/event/notification_sent.php||lib/classes/event/notification_sent.php": [
          "File: lib/classes/event/notification_sent.php -> lib/classes/event/notification_sent.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core\\event;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "42: class notification_sent extends base {",
          "53:     public static function create_from_ids($userfromid, $usertoid, $notificationid, $courseid) {",
          "57:         if (!\\core_user::is_real_user($userfromid)) {",
          "58:             $userfromid = 0;",
          "59:         }",
          "61:         $event = self::create(",
          "62:             [",
          "63:                 'objectid' => $notificationid,",
          "64:                 'userid' => $userfromid,",
          "65:                 'context' => \\context_system::instance(),",
          "66:                 'relateduserid' => $usertoid,",
          "67:                 'other' => [",
          "68:                     'courseid' => $courseid",
          "69:                 ]",
          "70:             ]",
          "71:         );",
          "73:         return $event;",
          "74:     }",
          "79:     protected function init() {",
          "80:         $this->data['objecttable'] = 'notifications';",
          "81:         $this->data['crud'] = 'c';",
          "82:         $this->data['edulevel'] = self::LEVEL_OTHER;",
          "83:     }",
          "90:     public static function get_name() {",
          "91:         return get_string('eventnotificationsent', 'message');",
          "92:     }",
          "99:     public function get_url() {",
          "100:         return new \\moodle_url('/message/output/popup/notifications.php', array('notificationid' => $this->objectid));",
          "101:     }",
          "108:     public function get_description() {",
          "110:         if (\\core_user::is_real_user($this->userid)) {",
          "111:             return \"The user with id '$this->userid' sent a notification to the user with id '$this->relateduserid'.\";",
          "112:         }",
          "114:         return \"A notification was sent by the system to the user with id '$this->relateduserid'.\";",
          "115:     }",
          "123:     protected function validate_data() {",
          "124:         parent::validate_data();",
          "126:         if (!isset($this->relateduserid)) {",
          "127:             throw new \\coding_exception('The \\'relateduserid\\' must be set.');",
          "128:         }",
          "130:         if (!isset($this->other['courseid'])) {",
          "131:             throw new \\coding_exception('The \\'courseid\\' value must be set in other.');",
          "132:         }",
          "133:     }",
          "135:     public static function get_objectid_mapping() {",
          "136:         return array('db' => 'notifications', 'restore' => base::NOT_MAPPED);",
          "137:     }",
          "139:     public static function get_other_mapping() {",
          "140:         $othermapped = array();",
          "141:         $othermapped['courseid'] = array('db' => 'course', 'restore' => base::NOT_MAPPED);",
          "142:         return $othermapped;",
          "143:     }",
          "144: }",
          "",
          "---------------"
        ],
        "lib/classes/event/notification_viewed.php||lib/classes/event/notification_viewed.php": [
          "File: lib/classes/event/notification_viewed.php -> lib/classes/event/notification_viewed.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core\\event;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "36: class notification_viewed extends base {",
          "46:     public static function create_from_ids($userfromid, $usertoid, $notificationid) {",
          "50:         if (!\\core_user::is_real_user($userfromid)) {",
          "51:             $userfromid = 0;",
          "52:         }",
          "55:         $context = \\context_user::instance($usertoid, IGNORE_MISSING);",
          "57:         if ($context === false) {",
          "58:             $context = \\context_system::instance();",
          "59:         }",
          "61:         $event = self::create(",
          "62:             [",
          "63:                 'objectid' => $notificationid,",
          "64:                 'userid' => $usertoid, // Using the user who read the notification as they are the ones performing the action.",
          "65:                 'context' => $context,",
          "66:                 'relateduserid' => $userfromid",
          "67:             ]",
          "68:         );",
          "70:         return $event;",
          "71:     }",
          "76:     protected function init() {",
          "77:         $this->data['objecttable'] = 'notifications';",
          "78:         $this->data['crud'] = 'u';",
          "79:         $this->data['edulevel'] = self::LEVEL_OTHER;",
          "80:     }",
          "87:     public static function get_name() {",
          "88:         return get_string('eventnotificationviewed', 'message');",
          "89:     }",
          "96:     public function get_url() {",
          "97:         return new \\moodle_url('/message/output/popup/notifications.php', array('notificationid' => $this->objectid));",
          "98:     }",
          "105:     public function get_description() {",
          "106:         return \"The user with id '$this->userid' read a notification from the user with id '$this->relateduserid'.\";",
          "107:     }",
          "115:     protected function validate_data() {",
          "116:         parent::validate_data();",
          "118:         if (!isset($this->relateduserid)) {",
          "119:             throw new \\coding_exception('The \\'relateduserid\\' must be set.');",
          "120:         }",
          "121:     }",
          "123:     public static function get_objectid_mapping() {",
          "124:         return array('db' => 'notifications', 'restore' => base::NOT_MAPPED);",
          "125:     }",
          "126: }",
          "",
          "---------------"
        ],
        "lib/classes/message/manager.php||lib/classes/message/manager.php": [
          "File: lib/classes/message/manager.php -> lib/classes/message/manager.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:         require_once($CFG->dirroot.'/message/lib.php'); // This is most probably already included from messagelib.php file.",
          "79:         if (empty($processorlist)) {",
          "82:                 \\core\\event\\message_sent::create_from_ids(",
          "83:                     $eventdata->userfrom->id,",
          "84:                     $eventdata->userto->id,",
          "",
          "[Removed Lines]",
          "81:             if (!$eventdata->notification) {",
          "",
          "[Added Lines]",
          "81:             if ($eventdata->notification) {",
          "82:                 \\core\\event\\notification_sent::create_from_ids(",
          "83:                     $eventdata->userfrom->id,",
          "84:                     $eventdata->userto->id,",
          "85:                     $savemessage->id,",
          "86:                     $eventdata->courseid",
          "87:                 )->trigger();",
          "88:             } else { // Must be a message.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:             }",
          "146:         }",
          "150:             \\core\\event\\message_sent::create_from_ids(",
          "151:                 $eventdata->userfrom->id,",
          "152:                 $eventdata->userto->id,",
          "",
          "[Removed Lines]",
          "149:         if (!$eventdata->notification) {",
          "",
          "[Added Lines]",
          "156:         if ($eventdata->notification) {",
          "157:             \\core\\event\\notification_sent::create_from_ids(",
          "158:                 $eventdata->userfrom->id,",
          "159:                 $eventdata->userto->id,",
          "160:                 $savemessage->id,",
          "161:                 $eventdata->courseid",
          "162:             )->trigger();",
          "163:         } else { // Must be a message.",
          "",
          "---------------"
        ],
        "lib/tests/messagelib_test.php||lib/tests/messagelib_test.php": [
          "File: lib/tests/messagelib_test.php -> lib/tests/messagelib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "483:         $this->assertFalse($DB->record_exists('messages', array()));",
          "484:         $DB->delete_records('notifications', array());",
          "485:         $events = $eventsink->get_events();",
          "487:         $eventsink->clear();",
          "",
          "[Removed Lines]",
          "486:         $this->assertCount(0, $events);",
          "",
          "[Added Lines]",
          "486:         $this->assertCount(2, $events);",
          "487:         $this->assertInstanceOf('\\core\\event\\notification_sent', $events[0]);",
          "488:         $this->assertInstanceOf('\\core\\event\\notification_viewed', $events[1]);",
          "",
          "---------------"
        ],
        "message/classes/api.php||message/classes/api.php": [
          "File: message/classes/api.php -> message/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1105:             $updatenotification->timeread = $timeread;",
          "1107:             $DB->update_record('notifications', $updatenotification);",
          "1108:         }",
          "1109:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1110:             \\core\\event\\notification_viewed::create_from_ids(",
          "1111:                 $notification->useridfrom,",
          "1112:                 $notification->useridto,",
          "1113:                 $notification->id",
          "1114:             )->trigger();",
          "",
          "---------------"
        ],
        "message/tests/events_test.php||message/tests/events_test.php": [
          "File: message/tests/events_test.php -> message/tests/events_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "449:             $i++;",
          "450:         }",
          "451:     }",
          "452: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "456:     public function test_notification_sent() {",
          "458:         $course = $this->getDataGenerator()->create_course();",
          "461:         $user1 = $this->getDataGenerator()->create_user();",
          "462:         $user2 = $this->getDataGenerator()->create_user();",
          "465:         $notificationid = $this->send_fake_message($user1, $user2, 'Hello world!', 1);",
          "468:         $event = \\core\\event\\notification_sent::create_from_ids($user1->id, $user2->id, $notificationid, $course->id);",
          "471:         $sink = $this->redirectEvents();",
          "472:         $event->trigger();",
          "473:         $events = $sink->get_events();",
          "474:         $event = reset($events);",
          "477:         $this->assertInstanceOf('\\core\\event\\notification_sent', $event);",
          "478:         $this->assertEquals($notificationid, $event->objectid);",
          "479:         $this->assertEquals($user1->id, $event->userid);",
          "480:         $this->assertEquals($user2->id, $event->relateduserid);",
          "481:         $this->assertEquals(context_system::instance(), $event->get_context());",
          "482:         $this->assertEquals($course->id, $event->other['courseid']);",
          "483:         $url = new moodle_url('/message/output/popup/notifications.php', array('notificationid' => $event->objectid));",
          "484:         $this->assertEquals($url, $event->get_url());",
          "485:     }",
          "490:     public function test_notification_viewed() {",
          "491:         global $DB;",
          "494:         $user1 = $this->getDataGenerator()->create_user();",
          "495:         $user2 = $this->getDataGenerator()->create_user();",
          "498:         $notificationid = $this->send_fake_message($user1, $user2, 'Hello world!', 1);",
          "501:         $sink = $this->redirectEvents();",
          "502:         $notification = $DB->get_record('notifications', ['id' => $notificationid]);",
          "503:         \\core_message\\api::mark_notification_as_read($notification);",
          "504:         $events = $sink->get_events();",
          "505:         $event = reset($events);",
          "508:         $this->assertInstanceOf('\\core\\event\\notification_viewed', $event);",
          "509:         $this->assertEquals($notificationid, $event->objectid);",
          "510:         $this->assertEquals($user2->id, $event->userid);",
          "511:         $this->assertEquals($user1->id, $event->relateduserid);",
          "512:         $this->assertEquals(context_user::instance($user2->id), $event->get_context());",
          "513:         $url = new moodle_url('/message/output/popup/notifications.php', array('notificationid' => $event->objectid));",
          "514:         $this->assertEquals($url, $event->get_url());",
          "515:     }",
          "",
          "---------------"
        ],
        "mod/assign/tests/locallib_test.php||mod/assign/tests/locallib_test.php": [
          "File: mod/assign/tests/locallib_test.php -> mod/assign/tests/locallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1288:         assign::cron();",
          "1290:         $events = $sink->get_events();",
          "1297:         $event = reset($events);",
          "1299:         $this->assertEquals($assign->get_course()->id, $event->other['courseid']);",
          "1300:         $sink->close();",
          "1301:     }",
          "",
          "[Removed Lines]",
          "1298:         $this->assertInstanceOf('\\core\\event\\message_sent', $event);",
          "",
          "[Added Lines]",
          "1298:         $this->assertInstanceOf('\\core\\event\\notification_sent', $event);",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018032200.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018032200.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a409707794cc6d74063787d27adb42154426c803",
      "candidate_info": {
        "commit_hash": "a409707794cc6d74063787d27adb42154426c803",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/a409707794cc6d74063787d27adb42154426c803",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.5dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '35';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2018012500.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.5dev (Build: 20180125)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2018020100.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.5dev (Build: 20180201)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0dca957716952323bd56089929ac6412136a29f1",
      "candidate_info": {
        "commit_hash": "0dca957716952323bd56089929ac6412136a29f1",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/0dca957716952323bd56089929ac6412136a29f1",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.8dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '38';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019082300.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev (Build: 20190823)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019082400.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev (Build: 20190824)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c128ccc142f3db584e871e1cda32b3b79c1ec953",
      "candidate_info": {
        "commit_hash": "c128ccc142f3db584e871e1cda32b3b79c1ec953",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/c128ccc142f3db584e871e1cda32b3b79c1ec953",
        "files": [
          "course/externallib.php",
          "course/tests/externallib_test.php",
          "course/upgrade.txt",
          "lib/db/services.php",
          "mod/upgrade.txt",
          "version.php"
        ],
        "message": "MDL-57487 course: final deprecation external::get_activities_overview",
        "before_after_code_files": [
          "course/externallib.php||course/externallib.php",
          "course/tests/externallib_test.php||course/tests/externallib_test.php",
          "lib/db/services.php||lib/db/services.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "course/externallib.php||course/externallib.php": [
          "File: course/externallib.php -> course/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2906:         return self::get_course_module_returns();",
          "2907:     }",
          "",
          "[Removed Lines]",
          "2917:     public static function get_activities_overview_parameters() {",
          "2918:         return new external_function_parameters(",
          "2919:             array(",
          "2920:                 'courseids' => new external_multiple_structure(new external_value(PARAM_INT, 'Course id.')),",
          "2921:             )",
          "2922:         );",
          "2923:     }",
          "2935:     public static function get_activities_overview($courseids) {",
          "2936:         global $USER;",
          "2939:         $params = self::validate_parameters(self::get_activities_overview_parameters(), array('courseids' => $courseids));",
          "2940:         $courseoverviews = array();",
          "2942:         list($courses, $warnings) = external_util::validate_courses($params['courseids']);",
          "2944:         if (!empty($courses)) {",
          "2947:             $user = get_complete_user_data('id', $USER->id);",
          "2948:             foreach ($courses as $course) {",
          "2949:                 if (isset($user->lastcourseaccess[$course->id])) {",
          "2950:                     $course->lastaccess = $user->lastcourseaccess[$course->id];",
          "2951:                 } else {",
          "2952:                     $course->lastaccess = 0;",
          "2953:                 }",
          "2954:             }",
          "2956:             $overviews = array();",
          "2957:             if ($modules = get_plugin_list_with_function('mod', 'print_overview')) {",
          "2958:                 foreach ($modules as $fname) {",
          "2959:                     $fname($courses, $overviews);",
          "2960:                 }",
          "2961:             }",
          "2964:             foreach ($overviews as $courseid => $modules) {",
          "2965:                 $courseoverviews[$courseid]['id'] = $courseid;",
          "2966:                 $courseoverviews[$courseid]['overviews'] = array();",
          "2968:                 foreach ($modules as $modname => $overviewtext) {",
          "2969:                     $courseoverviews[$courseid]['overviews'][] = array(",
          "2970:                         'module' => $modname,",
          "2971:                         'overviewtext' => $overviewtext // This text doesn't need formatting.",
          "2972:                     );",
          "2973:                 }",
          "2974:             }",
          "2975:         }",
          "2977:         $result = array(",
          "2978:             'courses' => $courseoverviews,",
          "2979:             'warnings' => $warnings",
          "2980:         );",
          "2981:         return $result;",
          "2982:     }",
          "2992:     public static function get_activities_overview_returns() {",
          "2993:         return new external_single_structure(",
          "2994:             array(",
          "2995:                 'courses' => new external_multiple_structure(",
          "2996:                     new external_single_structure(",
          "2997:                         array(",
          "2998:                             'id' => new external_value(PARAM_INT, 'Course id'),",
          "2999:                             'overviews' => new external_multiple_structure(",
          "3000:                                 new external_single_structure(",
          "3001:                                     array(",
          "3002:                                         'module' => new external_value(PARAM_PLUGIN, 'Module name'),",
          "3003:                                         'overviewtext' => new external_value(PARAM_RAW, 'Overview text'),",
          "3004:                                     )",
          "3005:                                 )",
          "3006:                             )",
          "3007:                         )",
          "3008:                     ), 'List of courses'",
          "3009:                 ),",
          "3010:                 'warnings' => new external_warnings()",
          "3011:             )",
          "3012:         );",
          "3013:     }",
          "3020:     public static function get_activities_overview_is_deprecated() {",
          "3021:         return true;",
          "3022:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "course/tests/externallib_test.php||course/tests/externallib_test.php": [
          "File: course/tests/externallib_test.php -> course/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2195:     }",
          "",
          "[Removed Lines]",
          "2200:     public function test_get_activities_overview() {",
          "2201:         global $USER;",
          "2203:         $this->resetAfterTest();",
          "2204:         $course1 = self::getDataGenerator()->create_course();",
          "2205:         $course2 = self::getDataGenerator()->create_course();",
          "2208:         $viewer = self::getDataGenerator()->create_user((object) array('trackforums' => 1));",
          "2209:         $this->getDataGenerator()->enrol_user($viewer->id, $course1->id);",
          "2210:         $this->getDataGenerator()->enrol_user($viewer->id, $course2->id);",
          "2213:         $record = new stdClass();",
          "2214:         $record->course = $course1->id;",
          "2215:         $forum1 = self::getDataGenerator()->create_module('forum', (object) array('course' => $course1->id));",
          "2216:         $forum2 = self::getDataGenerator()->create_module('forum', (object) array('course' => $course2->id));",
          "2218:         $this->setAdminUser();",
          "2220:         $record = new stdClass();",
          "2221:         $record->course = $course1->id;",
          "2222:         $record->userid = $USER->id;",
          "2223:         $record->forum = $forum1->id;",
          "2224:         $this->getDataGenerator()->get_plugin_generator('mod_forum')->create_discussion($record);",
          "2226:         $this->setUser($viewer->id);",
          "2227:         $courses = array($course1->id , $course2->id);",
          "2229:         $result = core_course_external::get_activities_overview($courses);",
          "2230:         $this->assertDebuggingCalledCount(8);",
          "2231:         $result = external_api::clean_returnvalue(core_course_external::get_activities_overview_returns(), $result);",
          "2234:         $this->assertCount(1, $result['courses']);",
          "2235:         $this->assertEquals($course1->id, $result['courses'][0]['id']);",
          "2237:         $this->assertEquals('forum', $result['courses'][0]['overviews'][0]['module']);",
          "2238:         $this->assertContains('1 total unread', $result['courses'][0]['overviews'][0]['overviewtext']);",
          "2239:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "529:         'type' => 'write',",
          "530:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "531:     ),",
          "541:     'core_course_get_user_navigation_options' => array(",
          "542:         'classname' => 'core_course_external',",
          "543:         'methodname' => 'get_user_navigation_options',",
          "",
          "[Removed Lines]",
          "532:     'core_course_get_activities_overview' => array(",
          "533:         'classname' => 'core_course_external',",
          "534:         'methodname' => 'get_activities_overview',",
          "535:         'classpath' => 'course/externallib.php',",
          "536:         'description' => '** DEPRECATED ** Please do not call this function any more.",
          "537:                           Return activities overview for the given courses.',",
          "538:         'type' => 'read',",
          "539:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "540:     ),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019061400.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019061400.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e77ed805f0a5bf5d60c3b35ff7eafc2198795073",
      "candidate_info": {
        "commit_hash": "e77ed805f0a5bf5d60c3b35ff7eafc2198795073",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/e77ed805f0a5bf5d60c3b35ff7eafc2198795073",
        "files": [
          "version.php"
        ],
        "message": "on-demand release 3.7dev+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019041300.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev+ (Build: 20190413)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019041800.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev+ (Build: 20190418)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    }
  ]
}