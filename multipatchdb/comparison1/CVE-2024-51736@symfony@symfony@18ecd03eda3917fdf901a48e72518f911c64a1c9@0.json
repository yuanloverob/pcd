{
  "cve_id": "CVE-2024-51736",
  "cve_desc": "Symphony process is a module for the Symphony PHP framework which executes commands in sub-processes. On Windows, when an executable file named `cmd.exe` is located in the current working directory it will be called by the `Process` class when preparing command arguments, leading to possible hijacking. This issue has been addressed in release versions 5.4.46, 6.4.14, and 7.1.7. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "symfony/symfony",
  "patch_hash": "18ecd03eda3917fdf901a48e72518f911c64a1c9",
  "patch_info": {
    "commit_hash": "18ecd03eda3917fdf901a48e72518f911c64a1c9",
    "repo": "symfony/symfony",
    "commit_url": "https://github.com/symfony/symfony/commit/18ecd03eda3917fdf901a48e72518f911c64a1c9",
    "files": [
      "src/Symfony/Component/Process/ExecutableFinder.php",
      "src/Symfony/Component/Process/PhpExecutableFinder.php",
      "src/Symfony/Component/Process/Process.php"
    ],
    "message": "[Process] Use %PATH% before %CD% to load the shell on Windows",
    "before_after_code_files": [
      "src/Symfony/Component/Process/ExecutableFinder.php||src/Symfony/Component/Process/ExecutableFinder.php",
      "src/Symfony/Component/Process/PhpExecutableFinder.php||src/Symfony/Component/Process/PhpExecutableFinder.php",
      "src/Symfony/Component/Process/Process.php||src/Symfony/Component/Process/Process.php"
    ]
  },
  "patch_diff": {
    "src/Symfony/Component/Process/ExecutableFinder.php||src/Symfony/Component/Process/ExecutableFinder.php": [
      "File: src/Symfony/Component/Process/ExecutableFinder.php -> src/Symfony/Component/Process/ExecutableFinder.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: class ExecutableFinder",
      "21: {",
      "23:     private const CMD_BUILTINS = [",
      "24:         'assoc', 'break', 'call', 'cd', 'chdir', 'cls', 'color', 'copy', 'date',",
      "25:         'del', 'dir', 'echo', 'endlocal', 'erase', 'exit', 'for', 'ftype', 'goto',",
      "",
      "[Removed Lines]",
      "22:     private $suffixes = ['.exe', '.bat', '.cmd', '.com'];",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "28:         'setlocal', 'shift', 'start', 'time', 'title', 'type', 'ver', 'vol',",
      "29:     ];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30:     private $suffixes = [];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "65:             $extraDirs",
      "66:         );",
      "69:         if ('\\\\' === \\DIRECTORY_SEPARATOR) {",
      "70:             $pathExt = getenv('PATHEXT');",
      "72:         }",
      "73:         foreach ($suffixes as $suffix) {",
      "74:             foreach ($dirs as $dir) {",
      "75:                 if ('' === $dir) {",
      "",
      "[Removed Lines]",
      "68:         $suffixes = [''];",
      "71:             $suffixes = array_merge($pathExt ? explode(\\PATH_SEPARATOR, $pathExt) : $this->suffixes, $suffixes);",
      "",
      "[Added Lines]",
      "69:         $suffixes = [];",
      "72:             $suffixes = $this->suffixes;",
      "73:             $suffixes = array_merge($suffixes, $pathExt ? explode(\\PATH_SEPARATOR, $pathExt) : ['.exe', '.bat', '.cmd', '.com']);",
      "75:         $suffixes = '' !== pathinfo($name, PATHINFO_EXTENSION) ? array_merge([''], $suffixes) : array_merge($suffixes, ['']);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "85:             }",
      "86:         }",
      "89:             return $default;",
      "90:         }",
      "95:         if (($executablePath = substr($execResult, 0, strpos($execResult, \\PHP_EOL) ?: null)) && @is_executable($executablePath)) {",
      "96:             return $executablePath;",
      "",
      "[Removed Lines]",
      "88:         if (!\\function_exists('exec') || \\strlen($name) !== strcspn($name, '/'.\\DIRECTORY_SEPARATOR)) {",
      "92:         $command = '\\\\' === \\DIRECTORY_SEPARATOR ? 'where %s 2> NUL' : 'command -v -- %s';",
      "93:         $execResult = exec(\\sprintf($command, escapeshellarg($name)));",
      "",
      "[Added Lines]",
      "91:         if ('\\\\' === \\DIRECTORY_SEPARATOR || !\\function_exists('exec') || \\strlen($name) !== strcspn($name, '/'.\\DIRECTORY_SEPARATOR)) {",
      "95:         $execResult = exec('command -v -- '.escapeshellarg($name));",
      "",
      "---------------"
    ],
    "src/Symfony/Component/Process/PhpExecutableFinder.php||src/Symfony/Component/Process/PhpExecutableFinder.php": [
      "File: src/Symfony/Component/Process/PhpExecutableFinder.php -> src/Symfony/Component/Process/PhpExecutableFinder.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "34:     public function find(bool $includeArgs = true)",
      "35:     {",
      "36:         if ($php = getenv('PHP_BINARY')) {",
      "50:             }",
      "52:             if (@is_dir($php)) {",
      "",
      "[Removed Lines]",
      "37:             if (!is_executable($php)) {",
      "38:                 if (!\\function_exists('exec') || \\strlen($php) !== strcspn($php, '/'.\\DIRECTORY_SEPARATOR)) {",
      "39:                     return false;",
      "40:                 }",
      "42:                 $command = '\\\\' === \\DIRECTORY_SEPARATOR ? 'where %s 2> NUL' : 'command -v -- %s';",
      "43:                 $execResult = exec(\\sprintf($command, escapeshellarg($php)));",
      "44:                 if (!$php = substr($execResult, 0, strpos($execResult, \\PHP_EOL) ?: null)) {",
      "45:                     return false;",
      "46:                 }",
      "47:                 if (!is_executable($php)) {",
      "48:                     return false;",
      "49:                 }",
      "",
      "[Added Lines]",
      "37:             if (!is_executable($php) && !$php = $this->executableFinder->find($php)) {",
      "38:                 return false;",
      "",
      "---------------"
    ],
    "src/Symfony/Component/Process/Process.php||src/Symfony/Component/Process/Process.php": [
      "File: src/Symfony/Component/Process/Process.php -> src/Symfony/Component/Process/Process.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1592:             $cmd",
      "1593:         );",
      "1596:         foreach ($this->processPipes->getFiles() as $offset => $filename) {",
      "1597:             $cmd .= ' '.$offset.'>\"'.$filename.'\"';",
      "1598:         }",
      "",
      "[Removed Lines]",
      "1595:         $cmd = 'cmd /V:ON /E:ON /D /C ('.str_replace(\"\\n\", ' ', $cmd).')';",
      "",
      "[Added Lines]",
      "1595:         static $comSpec;",
      "1597:         if (!$comSpec && $comSpec = (new ExecutableFinder())->find('cmd.exe')) {",
      "1599:             $comSpec = '\"'.preg_replace('{(\\\\\\\\*+)\"}', '$1$1\\\"', $comSpec) .'\"';",
      "1600:         }",
      "1602:         $cmd = ($comSpec ?? 'cmd').' /V:ON /E:ON /D /C ('.str_replace(\"\\n\", ' ', $cmd).')';",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3b144a3a243aef35365cf578f5ac2875b68dcc48",
      "candidate_info": {
        "commit_hash": "3b144a3a243aef35365cf578f5ac2875b68dcc48",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/3b144a3a243aef35365cf578f5ac2875b68dcc48",
        "files": [
          "src/Symfony/Component/Process/ExecutableFinder.php",
          "src/Symfony/Component/Process/Tests/ExecutableFinderTest.php"
        ],
        "message": "[Process] Return built-in cmd.exe commands directly in ExecutableFinder",
        "before_after_code_files": [
          "src/Symfony/Component/Process/ExecutableFinder.php||src/Symfony/Component/Process/ExecutableFinder.php",
          "src/Symfony/Component/Process/Tests/ExecutableFinderTest.php||src/Symfony/Component/Process/Tests/ExecutableFinderTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/Process/ExecutableFinder.php||src/Symfony/Component/Process/ExecutableFinder.php"
          ],
          "candidate": [
            "src/Symfony/Component/Process/ExecutableFinder.php||src/Symfony/Component/Process/ExecutableFinder.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Component/Process/ExecutableFinder.php||src/Symfony/Component/Process/ExecutableFinder.php": [
          "File: src/Symfony/Component/Process/ExecutableFinder.php -> src/Symfony/Component/Process/ExecutableFinder.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: class ExecutableFinder",
          "21: {",
          "22:     private $suffixes = ['.exe', '.bat', '.cmd', '.com'];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:     private const CMD_BUILTINS = [",
          "24:         'assoc', 'break', 'call', 'cd', 'chdir', 'cls', 'color', 'copy', 'date',",
          "25:         'del', 'dir', 'echo', 'endlocal', 'erase', 'exit', 'for', 'ftype', 'goto',",
          "26:         'help', 'if', 'label', 'md', 'mkdir', 'mklink', 'move', 'path', 'pause',",
          "27:         'popd', 'prompt', 'pushd', 'rd', 'rem', 'ren', 'rename', 'rmdir', 'set',",
          "28:         'setlocal', 'shift', 'start', 'time', 'title', 'type', 'ver', 'vol',",
          "29:     ];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     public function find(string $name, ?string $default = null, array $extraDirs = [])",
          "50:     {",
          "51:         $dirs = array_merge(",
          "52:             explode(\\PATH_SEPARATOR, getenv('PATH') ?: getenv('Path')),",
          "53:             $extraDirs",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:         if ('\\\\' === \\DIRECTORY_SEPARATOR && \\in_array(strtolower($name), self::CMD_BUILTINS, true)) {",
          "60:             return $name;",
          "61:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Process/Tests/ExecutableFinderTest.php||src/Symfony/Component/Process/Tests/ExecutableFinderTest.php": [
          "File: src/Symfony/Component/Process/Tests/ExecutableFinderTest.php -> src/Symfony/Component/Process/Tests/ExecutableFinderTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:         unlink('executable');",
          "160:     }",
          "162:     private function assertSamePath($expected, $tested)",
          "163:     {",
          "164:         if ('\\\\' === \\DIRECTORY_SEPARATOR) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:     public function testFindBuiltInCommandOnWindows()",
          "163:     {",
          "164:         if ('\\\\' !== \\DIRECTORY_SEPARATOR) {",
          "165:             $this->markTestSkipped('Can be only tested on windows');",
          "166:         }",
          "168:         $finder = new ExecutableFinder();",
          "169:         $this->assertSame('rmdir', $finder->find('RMDIR'));",
          "170:         $this->assertSame('cd', $finder->find('cd'));",
          "171:         $this->assertSame('move', $finder->find('MoVe'));",
          "172:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "442476393150211e8766fd2bf07df46c662d9f95",
      "candidate_info": {
        "commit_hash": "442476393150211e8766fd2bf07df46c662d9f95",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/442476393150211e8766fd2bf07df46c662d9f95",
        "files": [
          "src/Symfony/Component/Process/ExecutableFinder.php",
          "src/Symfony/Component/Process/PhpExecutableFinder.php",
          "src/Symfony/Component/Process/Tests/ExecutableFinderTest.php"
        ],
        "message": "[Process] Fix finding executables independently of open_basedir",
        "before_after_code_files": [
          "src/Symfony/Component/Process/ExecutableFinder.php||src/Symfony/Component/Process/ExecutableFinder.php",
          "src/Symfony/Component/Process/PhpExecutableFinder.php||src/Symfony/Component/Process/PhpExecutableFinder.php",
          "src/Symfony/Component/Process/Tests/ExecutableFinderTest.php||src/Symfony/Component/Process/Tests/ExecutableFinderTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/Process/ExecutableFinder.php||src/Symfony/Component/Process/ExecutableFinder.php",
            "src/Symfony/Component/Process/PhpExecutableFinder.php||src/Symfony/Component/Process/PhpExecutableFinder.php"
          ],
          "candidate": [
            "src/Symfony/Component/Process/ExecutableFinder.php||src/Symfony/Component/Process/ExecutableFinder.php",
            "src/Symfony/Component/Process/PhpExecutableFinder.php||src/Symfony/Component/Process/PhpExecutableFinder.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Component/Process/ExecutableFinder.php||src/Symfony/Component/Process/ExecutableFinder.php": [
          "File: src/Symfony/Component/Process/ExecutableFinder.php -> src/Symfony/Component/Process/ExecutableFinder.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     public function find(string $name, ?string $default = null, array $extraDirs = [])",
          "50:     {",
          "71:         $suffixes = [''];",
          "72:         if ('\\\\' === \\DIRECTORY_SEPARATOR) {",
          "",
          "[Removed Lines]",
          "51:         if (\\ini_get('open_basedir')) {",
          "52:             $searchPath = array_merge(explode(\\PATH_SEPARATOR, \\ini_get('open_basedir')), $extraDirs);",
          "53:             $dirs = [];",
          "54:             foreach ($searchPath as $path) {",
          "56:                 if (@is_dir($path)) {",
          "57:                     $dirs[] = $path;",
          "58:                 } else {",
          "59:                     if (basename($path) == $name && @is_executable($path)) {",
          "60:                         return $path;",
          "61:                     }",
          "62:                 }",
          "63:             }",
          "64:         } else {",
          "65:             $dirs = array_merge(",
          "66:                 explode(\\PATH_SEPARATOR, getenv('PATH') ?: getenv('Path')),",
          "67:                 $extraDirs",
          "68:             );",
          "69:         }",
          "",
          "[Added Lines]",
          "51:         $dirs = array_merge(",
          "52:             explode(\\PATH_SEPARATOR, getenv('PATH') ?: getenv('Path')),",
          "53:             $extraDirs",
          "54:         );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:                 if (@is_file($file = $dir.\\DIRECTORY_SEPARATOR.$name.$suffix) && ('\\\\' === \\DIRECTORY_SEPARATOR || @is_executable($file))) {",
          "79:                     return $file;",
          "80:                 }",
          "81:             }",
          "82:         }",
          "84:         return $default;",
          "85:     }",
          "86: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:                 if (!@is_dir($dir) && basename($dir) === $name.$suffix && @is_executable($dir)) {",
          "68:                     return $dir;",
          "69:                 }",
          "73:         $command = '\\\\' === \\DIRECTORY_SEPARATOR ? 'where' : 'command -v --';",
          "74:         if (\\function_exists('exec') && ($executablePath = strtok(@exec($command.' '.escapeshellarg($name)), \\PHP_EOL)) && is_executable($executablePath)) {",
          "75:             return $executablePath;",
          "76:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Process/PhpExecutableFinder.php||src/Symfony/Component/Process/PhpExecutableFinder.php": [
          "File: src/Symfony/Component/Process/PhpExecutableFinder.php -> src/Symfony/Component/Process/PhpExecutableFinder.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:         if ($php = getenv('PHP_BINARY')) {",
          "37:             if (!is_executable($php)) {",
          "38:                 $command = '\\\\' === \\DIRECTORY_SEPARATOR ? 'where' : 'command -v --';",
          "40:                     if (!is_executable($php)) {",
          "41:                         return false;",
          "42:                     }",
          "",
          "[Removed Lines]",
          "39:                 if ($php = strtok(exec($command.' '.escapeshellarg($php)), \\PHP_EOL)) {",
          "",
          "[Added Lines]",
          "39:                 if (\\function_exists('exec') && $php = strtok(exec($command.' '.escapeshellarg($php)), \\PHP_EOL)) {",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Process/Tests/ExecutableFinderTest.php||src/Symfony/Component/Process/Tests/ExecutableFinderTest.php": [
          "File: src/Symfony/Component/Process/Tests/ExecutableFinderTest.php -> src/Symfony/Component/Process/Tests/ExecutableFinderTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: class ExecutableFinderTest extends TestCase",
          "21: {",
          "24:     protected function tearDown(): void",
          "25:     {",
          "36:     }",
          "38:     public function testFind()",
          "",
          "[Removed Lines]",
          "22:     private $path;",
          "26:         if ($this->path) {",
          "28:             putenv('PATH='.$this->path);",
          "29:         }",
          "30:     }",
          "32:     private function setPath($path)",
          "33:     {",
          "34:         $this->path = getenv('PATH');",
          "35:         putenv('PATH='.$path);",
          "",
          "[Added Lines]",
          "24:         putenv('PATH='.($_SERVER['PATH'] ?? $_SERVER['Path']));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:             $this->markTestSkipped('Cannot test when open_basedir is set');",
          "42:         }",
          "46:         $finder = new ExecutableFinder();",
          "47:         $result = $finder->find($this->getPhpBinaryName());",
          "",
          "[Removed Lines]",
          "44:         $this->setPath(\\dirname(\\PHP_BINARY));",
          "",
          "[Added Lines]",
          "33:         putenv('PATH='.\\dirname(\\PHP_BINARY));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:         $expected = 'defaultValue';",
          "62:         $finder = new ExecutableFinder();",
          "63:         $result = $finder->find('foo', $expected);",
          "",
          "[Removed Lines]",
          "60:         $this->setPath('');",
          "",
          "[Added Lines]",
          "49:         putenv('PATH=');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71:             $this->markTestSkipped('Cannot test when open_basedir is set');",
          "72:         }",
          "76:         $finder = new ExecutableFinder();",
          "",
          "[Removed Lines]",
          "74:         $this->setPath('');",
          "",
          "[Added Lines]",
          "63:         putenv('PATH=');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "86:             $this->markTestSkipped('Cannot test when open_basedir is set');",
          "87:         }",
          "91:         $extraDirs = [\\dirname(\\PHP_BINARY)];",
          "",
          "[Removed Lines]",
          "89:         $this->setPath('');",
          "",
          "[Added Lines]",
          "78:         putenv('PATH=');",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "109:             $this->markTestSkipped('Cannot test when open_basedir is set');",
          "110:         }",
          "112:         $initialOpenBaseDir = ini_set('open_basedir', \\dirname(\\PHP_BINARY).\\PATH_SEPARATOR.'/');",
          "114:         try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:         putenv('PATH='.\\dirname(\\PHP_BINARY));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "121:         }",
          "122:     }",
          "150:     public function testFindBatchExecutableOnWindows()",
          "151:     {",
          "152:         if (\\ini_get('open_basedir')) {",
          "",
          "[Removed Lines]",
          "127:     public function testFindProcessInOpenBasedir()",
          "128:     {",
          "129:         if (\\ini_get('open_basedir')) {",
          "130:             $this->markTestSkipped('Cannot test when open_basedir is set');",
          "131:         }",
          "132:         if ('\\\\' === \\DIRECTORY_SEPARATOR) {",
          "133:             $this->markTestSkipped('Cannot run test on windows');",
          "134:         }",
          "136:         $this->setPath('');",
          "138:         $initialOpenBaseDir = ini_set('open_basedir', \\PHP_BINARY.\\PATH_SEPARATOR.'/');",
          "140:         try {",
          "141:             $finder = new ExecutableFinder();",
          "142:             $result = $finder->find($this->getPhpBinaryName(), false);",
          "144:             $this->assertSamePath(\\PHP_BINARY, $result);",
          "145:         } finally {",
          "146:             ini_set('open_basedir', $initialOpenBaseDir);",
          "147:         }",
          "148:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "164:         $this->assertFalse(is_executable($target));",
          "168:         $finder = new ExecutableFinder();",
          "169:         $result = $finder->find(basename($target), false);",
          "",
          "[Removed Lines]",
          "166:         $this->setPath(sys_get_temp_dir());",
          "",
          "[Added Lines]",
          "130:         putenv('PATH='.sys_get_temp_dir());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73140eb44e17b035602b3f6009d219ad9a1248ae",
      "candidate_info": {
        "commit_hash": "73140eb44e17b035602b3f6009d219ad9a1248ae",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/73140eb44e17b035602b3f6009d219ad9a1248ae",
        "files": [
          "src/Symfony/Component/Process/ExecutableFinder.php",
          "src/Symfony/Component/Process/PhpExecutableFinder.php"
        ],
        "message": "[Process] Properly deal with not-found executables on Windows",
        "before_after_code_files": [
          "src/Symfony/Component/Process/ExecutableFinder.php||src/Symfony/Component/Process/ExecutableFinder.php",
          "src/Symfony/Component/Process/PhpExecutableFinder.php||src/Symfony/Component/Process/PhpExecutableFinder.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/Process/ExecutableFinder.php||src/Symfony/Component/Process/ExecutableFinder.php",
            "src/Symfony/Component/Process/PhpExecutableFinder.php||src/Symfony/Component/Process/PhpExecutableFinder.php"
          ],
          "candidate": [
            "src/Symfony/Component/Process/ExecutableFinder.php||src/Symfony/Component/Process/ExecutableFinder.php",
            "src/Symfony/Component/Process/PhpExecutableFinder.php||src/Symfony/Component/Process/PhpExecutableFinder.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Component/Process/ExecutableFinder.php||src/Symfony/Component/Process/ExecutableFinder.php": [
          "File: src/Symfony/Component/Process/ExecutableFinder.php -> src/Symfony/Component/Process/ExecutableFinder.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:             }",
          "71:         }",
          "75:             return $executablePath;",
          "76:         }",
          "",
          "[Removed Lines]",
          "73:         $command = '\\\\' === \\DIRECTORY_SEPARATOR ? 'where' : 'command -v --';",
          "74:         if (\\function_exists('exec') && ($executablePath = strtok(@exec($command.' '.escapeshellarg($name)), \\PHP_EOL)) && @is_executable($executablePath)) {",
          "",
          "[Added Lines]",
          "73:         if (!\\function_exists('exec') || \\strlen($name) !== strcspn($name, '/'.\\DIRECTORY_SEPARATOR)) {",
          "74:             return $default;",
          "75:         }",
          "77:         $command = '\\\\' === \\DIRECTORY_SEPARATOR ? 'where %s 2> NUL' : 'command -v -- %s';",
          "78:         $execResult = exec(\\sprintf($command, escapeshellarg($name)));",
          "80:         if (($executablePath = substr($execResult, 0, strpos($execResult, \\PHP_EOL) ?: null)) && @is_executable($executablePath)) {",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Process/PhpExecutableFinder.php||src/Symfony/Component/Process/PhpExecutableFinder.php": [
          "File: src/Symfony/Component/Process/PhpExecutableFinder.php -> src/Symfony/Component/Process/PhpExecutableFinder.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     {",
          "36:         if ($php = getenv('PHP_BINARY')) {",
          "37:             if (!is_executable($php)) {",
          "44:                     return false;",
          "45:                 }",
          "46:             }",
          "",
          "[Removed Lines]",
          "38:                 $command = '\\\\' === \\DIRECTORY_SEPARATOR ? 'where' : 'command -v --';",
          "39:                 if (\\function_exists('exec') && $php = strtok(exec($command.' '.escapeshellarg($php)), \\PHP_EOL)) {",
          "40:                     if (!is_executable($php)) {",
          "41:                         return false;",
          "42:                     }",
          "43:                 } else {",
          "",
          "[Added Lines]",
          "38:                 if (!\\function_exists('exec') || \\strlen($php) !== strcspn($php, '/'.\\DIRECTORY_SEPARATOR)) {",
          "39:                     return false;",
          "40:                 }",
          "42:                 $command = '\\\\' === \\DIRECTORY_SEPARATOR ? 'where %s 2> NUL' : 'command -v -- %s';",
          "43:                 $execResult = exec(\\sprintf($command, escapeshellarg($php)));",
          "44:                 if (!$php = substr($execResult, 0, strpos($execResult, \\PHP_EOL) ?: null)) {",
          "45:                     return false;",
          "46:                 }",
          "47:                 if (!is_executable($php)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ceaa8ef880225ec63deb618952bec1b650de1f5",
      "candidate_info": {
        "commit_hash": "8ceaa8ef880225ec63deb618952bec1b650de1f5",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/8ceaa8ef880225ec63deb618952bec1b650de1f5",
        "files": [
          "src/Symfony/Component/Process/PhpExecutableFinder.php"
        ],
        "message": "[Process] Fix executable finder when the command starts with a dash",
        "before_after_code_files": [
          "src/Symfony/Component/Process/PhpExecutableFinder.php||src/Symfony/Component/Process/PhpExecutableFinder.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/Process/PhpExecutableFinder.php||src/Symfony/Component/Process/PhpExecutableFinder.php"
          ],
          "candidate": [
            "src/Symfony/Component/Process/PhpExecutableFinder.php||src/Symfony/Component/Process/PhpExecutableFinder.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Component/Process/PhpExecutableFinder.php||src/Symfony/Component/Process/PhpExecutableFinder.php": [
          "File: src/Symfony/Component/Process/PhpExecutableFinder.php -> src/Symfony/Component/Process/PhpExecutableFinder.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     {",
          "36:         if ($php = getenv('PHP_BINARY')) {",
          "37:             if (!is_executable($php)) {",
          "39:                 if ($php = strtok(exec($command.' '.escapeshellarg($php)), \\PHP_EOL)) {",
          "40:                     if (!is_executable($php)) {",
          "41:                         return false;",
          "",
          "[Removed Lines]",
          "38:                 $command = '\\\\' === \\DIRECTORY_SEPARATOR ? 'where' : 'command -v';",
          "",
          "[Added Lines]",
          "38:                 $command = '\\\\' === \\DIRECTORY_SEPARATOR ? 'where' : 'command -v --';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5fd55a08ccb5a10db51d9b232f27912f153888e",
      "candidate_info": {
        "commit_hash": "f5fd55a08ccb5a10db51d9b232f27912f153888e",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/f5fd55a08ccb5a10db51d9b232f27912f153888e",
        "files": [
          "src/Symfony/Component/Process/ExecutableFinder.php"
        ],
        "message": "[Process] minor fix",
        "before_after_code_files": [
          "src/Symfony/Component/Process/ExecutableFinder.php||src/Symfony/Component/Process/ExecutableFinder.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/Process/ExecutableFinder.php||src/Symfony/Component/Process/ExecutableFinder.php"
          ],
          "candidate": [
            "src/Symfony/Component/Process/ExecutableFinder.php||src/Symfony/Component/Process/ExecutableFinder.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Component/Process/ExecutableFinder.php||src/Symfony/Component/Process/ExecutableFinder.php": [
          "File: src/Symfony/Component/Process/ExecutableFinder.php -> src/Symfony/Component/Process/ExecutableFinder.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:         }",
          "73:         $command = '\\\\' === \\DIRECTORY_SEPARATOR ? 'where' : 'command -v --';",
          "75:             return $executablePath;",
          "76:         }",
          "",
          "[Removed Lines]",
          "74:         if (\\function_exists('exec') && ($executablePath = strtok(@exec($command.' '.escapeshellarg($name)), \\PHP_EOL)) && is_executable($executablePath)) {",
          "",
          "[Added Lines]",
          "74:         if (\\function_exists('exec') && ($executablePath = strtok(@exec($command.' '.escapeshellarg($name)), \\PHP_EOL)) && @is_executable($executablePath)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}