{
  "cve_id": "CVE-2019-10642",
  "cve_desc": "Contao 4.7 allows CSRF.",
  "repo": "contao/contao",
  "patch_hash": "ee2c8130c2e68a1d0d2e75bd6b774c4393942b15",
  "patch_info": {
    "commit_hash": "ee2c8130c2e68a1d0d2e75bd6b774c4393942b15",
    "repo": "contao/contao",
    "commit_url": "https://github.com/contao/contao/commit/ee2c8130c2e68a1d0d2e75bd6b774c4393942b15",
    "files": [
      "CHANGELOG.md",
      "core-bundle/src/EventListener/RequestTokenListener.php",
      "core-bundle/src/Framework/ContaoFramework.php",
      "core-bundle/src/Resources/config/listener.yml",
      "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
      "core-bundle/tests/EventListener/RequestTokenListenerTest.php",
      "core-bundle/tests/Framework/ContaoFrameworkTest.php"
    ],
    "message": "Fix the request token check in the front end (see CVE-2019-10642)",
    "before_after_code_files": [
      "core-bundle/src/EventListener/RequestTokenListener.php||core-bundle/src/EventListener/RequestTokenListener.php",
      "core-bundle/src/Framework/ContaoFramework.php||core-bundle/src/Framework/ContaoFramework.php",
      "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
      "core-bundle/tests/EventListener/RequestTokenListenerTest.php||core-bundle/tests/EventListener/RequestTokenListenerTest.php",
      "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php"
    ]
  },
  "patch_diff": {
    "core-bundle/src/EventListener/RequestTokenListener.php||core-bundle/src/EventListener/RequestTokenListener.php": [
      "File: core-bundle/src/EventListener/RequestTokenListener.php -> core-bundle/src/EventListener/RequestTokenListener.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "3: declare(strict_types=1);",
      "13: namespace Contao\\CoreBundle\\EventListener;",
      "15: use Contao\\Config;",
      "16: use Contao\\CoreBundle\\Exception\\InvalidRequestTokenException;",
      "17: use Contao\\CoreBundle\\Framework\\ContaoFramework;",
      "18: use Contao\\CoreBundle\\Routing\\ScopeMatcher;",
      "19: use Symfony\\Component\\HttpKernel\\Event\\GetResponseEvent;",
      "20: use Symfony\\Component\\Security\\Csrf\\CsrfToken;",
      "21: use Symfony\\Component\\Security\\Csrf\\CsrfTokenManagerInterface;",
      "26: class RequestTokenListener",
      "27: {",
      "31:     private $framework;",
      "36:     private $scopeMatcher;",
      "41:     private $csrfTokenManager;",
      "46:     private $csrfTokenName;",
      "48:     public function __construct(ContaoFramework $framework, ScopeMatcher $scopeMatcher, CsrfTokenManagerInterface $csrfTokenManager, string $csrfTokenName)",
      "49:     {",
      "50:         $this->framework = $framework;",
      "51:         $this->scopeMatcher = $scopeMatcher;",
      "52:         $this->csrfTokenManager = $csrfTokenManager;",
      "53:         $this->csrfTokenName = $csrfTokenName;",
      "54:     }",
      "59:     public function onKernelRequest(GetResponseEvent $event): void",
      "60:     {",
      "61:         $request = $event->getRequest();",
      "67:         if (",
      "68:             'POST' !== $request->getRealMethod()",
      "69:             || $request->isXmlHttpRequest()",
      "70:             || false === $request->attributes->get('_token_check')",
      "71:             || (!$request->attributes->has('_token_check') && !$this->scopeMatcher->isContaoRequest($request))",
      "72:         ) {",
      "73:             return;",
      "74:         }",
      "77:         $config = $this->framework->getAdapter(Config::class);",
      "79:         if (\\defined('BYPASS_TOKEN_CHECK')) {",
      "80:             @trigger_error('Defining the BYPASS_TOKEN_CHECK constant has been deprecated and will no longer work in Contao 5.0.', E_USER_DEPRECATED);",
      "82:             return;",
      "83:         }",
      "85:         if ($config->get('disableRefererCheck')) {",
      "86:             @trigger_error('Using the \"disableRefererCheck\" setting has been deprecated and will no longer work in Contao 5.0.', E_USER_DEPRECATED);",
      "88:             return;",
      "89:         }",
      "91:         if ($config->get('requestTokenWhitelist')) {",
      "92:             @trigger_error('Using the \"requestTokenWhitelist\" setting has been deprecated and will no longer work in Contao 5.0.', E_USER_DEPRECATED);",
      "94:             $hostname = gethostbyaddr($request->getClientIp());",
      "96:             foreach ($config->get('requestTokenWhitelist') as $domain) {",
      "97:                 if ($domain === $hostname || preg_match('/\\.' . preg_quote($domain, '/') . '$/', $hostname)) {",
      "98:                     return;",
      "99:                 }",
      "100:             }",
      "101:         }",
      "103:         $token = new CsrfToken($this->csrfTokenName, $request->request->get('REQUEST_TOKEN'));",
      "105:         if ($this->csrfTokenManager->isTokenValid($token)) {",
      "106:             return;",
      "107:         }",
      "109:         throw new InvalidRequestTokenException('Invalid CSRF token. Please reload the page and try again.');",
      "110:     }",
      "111: }",
      "",
      "---------------"
    ],
    "core-bundle/src/Framework/ContaoFramework.php||core-bundle/src/Framework/ContaoFramework.php": [
      "File: core-bundle/src/Framework/ContaoFramework.php -> core-bundle/src/Framework/ContaoFramework.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: use Contao\\ClassLoader;",
      "16: use Contao\\Config;",
      "17: use Contao\\CoreBundle\\Exception\\IncompleteInstallationException;",
      "19: use Contao\\CoreBundle\\Routing\\ScopeMatcher;",
      "20: use Contao\\CoreBundle\\Security\\Authentication\\Token\\TokenChecker;",
      "21: use Contao\\CoreBundle\\Session\\LazySessionAccess;",
      "",
      "[Removed Lines]",
      "18: use Contao\\CoreBundle\\Exception\\InvalidRequestTokenException;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "395:         if (!\\defined('REQUEST_TOKEN')) {",
      "396:             \\define('REQUEST_TOKEN', 'cli' === \\PHP_SAPI ? null : $requestToken->get());",
      "397:         }",
      "404:     }",
      "406:     private function iniSet(string $key, string $value): void",
      "",
      "[Removed Lines]",
      "399:         if ($this->canSkipTokenCheck() || $requestToken->validate($this->request->request->get('REQUEST_TOKEN'))) {",
      "400:             return;",
      "401:         }",
      "403:         throw new InvalidRequestTokenException('Invalid request token. Please reload the page and try again.');",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "419:         return $this->request->getSession();",
      "420:     }",
      "432:     private function registerHookListeners(): void",
      "433:     {",
      "434:         foreach ($this->hookListeners as $hookName => $priorities) {",
      "",
      "[Removed Lines]",
      "422:     private function canSkipTokenCheck(): bool",
      "423:     {",
      "424:         return null === $this->request",
      "425:             || 'POST' !== $this->request->getRealMethod()",
      "426:             || $this->request->isXmlHttpRequest()",
      "427:             || !$this->request->attributes->has('_token_check')",
      "428:             || false === $this->request->attributes->get('_token_check')",
      "429:         ;",
      "430:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php": [
      "File: core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php -> core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "49: use Contao\\CoreBundle\\EventListener\\MergeHttpHeadersListener;",
      "50: use Contao\\CoreBundle\\EventListener\\PrettyErrorScreenListener;",
      "51: use Contao\\CoreBundle\\EventListener\\RefererIdListener;",
      "52: use Contao\\CoreBundle\\EventListener\\ResponseExceptionListener;",
      "53: use Contao\\CoreBundle\\EventListener\\StoreRefererListener;",
      "54: use Contao\\CoreBundle\\EventListener\\SwitchUserListener;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52: use Contao\\CoreBundle\\EventListener\\RequestTokenListener;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "119: use Symfony\\Component\\DependencyInjection\\ParameterBag\\ParameterBag;",
      "120: use Symfony\\Component\\DependencyInjection\\ServiceLocator;",
      "121: use Symfony\\Component\\HttpFoundation\\RequestMatcher;",
      "122: use Symfony\\Component\\Security\\Csrf\\CsrfTokenManager;",
      "124: class ContaoCoreExtensionTest extends TestCase",
      "125: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "123: use Symfony\\Component\\HttpKernel\\EventListener\\AbstractSessionListener;",
      "124: use Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener;",
      "125: use Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener as BaseLocaleListener;",
      "126: use Symfony\\Component\\HttpKernel\\EventListener\\RouterListener;",
      "128: use Symfony\\Component\\Security\\Http\\Firewall;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "161:         $this->assertSame('contao', $extension->getAlias());",
      "162:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "170:     public function testValidatesTheSymfonyListenerPriorities(): void",
      "171:     {",
      "172:         $events = AbstractSessionListener::getSubscribedEvents();",
      "174:         $this->assertSame('onKernelResponse', $events['kernel.response'][0]);",
      "175:         $this->assertSame(-1000, $events['kernel.response'][1]);",
      "177:         $events = BaseLocaleListener::getSubscribedEvents();",
      "179:         $this->assertSame('onKernelRequest', $events['kernel.request'][0][0]);",
      "180:         $this->assertSame(16, $events['kernel.request'][0][1]);",
      "182:         $events = ExceptionListener::getSubscribedEvents();",
      "184:         $this->assertSame('onKernelException', $events['kernel.exception'][1][0]);",
      "185:         $this->assertSame(-128, $events['kernel.exception'][1][1]);",
      "187:         $events = Firewall::getSubscribedEvents();",
      "189:         $this->assertSame('onKernelRequest', $events['kernel.request'][0]);",
      "190:         $this->assertSame(8, $events['kernel.request'][1]);",
      "192:         $events = RouterListener::getSubscribedEvents();",
      "194:         $this->assertSame('onKernelRequest', $events['kernel.request'][0][0]);",
      "195:         $this->assertSame(32, $events['kernel.request'][0][1]);",
      "196:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "508:         $this->assertSame(20, $tags['kernel.event_listener'][0]['priority']);",
      "509:     }",
      "511:     public function testRegistersTheResponseExceptionListener(): void",
      "512:     {",
      "513:         $this->assertTrue($this->container->has('contao.listener.response_exception'));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "545:     public function testRegistersTheRequestTokenListener(): void",
      "546:     {",
      "547:         $this->assertTrue($this->container->has('contao.listener.request_token'));",
      "549:         $definition = $this->container->getDefinition('contao.listener.request_token');",
      "551:         $this->assertSame(RequestTokenListener::class, $definition->getClass());",
      "552:         $this->assertTrue($definition->isPrivate());",
      "553:         $this->assertSame('contao.framework', (string) $definition->getArgument(0));",
      "554:         $this->assertSame('contao.routing.scope_matcher', (string) $definition->getArgument(1));",
      "555:         $this->assertSame('contao.csrf.token_manager', (string) $definition->getArgument(2));",
      "556:         $this->assertSame('%contao.csrf_token_name%', (string) $definition->getArgument(3));",
      "558:         $tags = $definition->getTags();",
      "560:         $this->assertArrayHasKey('kernel.event_listener', $tags);",
      "561:         $this->assertSame('kernel.request', $tags['kernel.event_listener'][0]['event']);",
      "562:         $this->assertSame('onKernelRequest', $tags['kernel.event_listener'][0]['method']);",
      "563:         $this->assertSame(30, $tags['kernel.event_listener'][0]['priority']);",
      "564:     }",
      "",
      "---------------"
    ],
    "core-bundle/tests/EventListener/RequestTokenListenerTest.php||core-bundle/tests/EventListener/RequestTokenListenerTest.php": [
      "File: core-bundle/tests/EventListener/RequestTokenListenerTest.php -> core-bundle/tests/EventListener/RequestTokenListenerTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "3: declare(strict_types=1);",
      "13: namespace Contao\\CoreBundle\\Tests\\EventListener;",
      "15: use Contao\\Config;",
      "16: use Contao\\CoreBundle\\EventListener\\RequestTokenListener;",
      "17: use Contao\\CoreBundle\\Exception\\InvalidRequestTokenException;",
      "18: use Contao\\CoreBundle\\Routing\\ScopeMatcher;",
      "19: use Contao\\CoreBundle\\Tests\\TestCase;",
      "20: use Symfony\\Component\\HttpFoundation\\Request;",
      "21: use Symfony\\Component\\HttpKernel\\Event\\GetResponseEvent;",
      "22: use Symfony\\Component\\Security\\Csrf\\CsrfTokenManagerInterface;",
      "24: class RequestTokenListenerTest extends TestCase",
      "25: {",
      "26:     public function testValidatesTheRequestToken(): void",
      "27:     {",
      "28:         $config = $this->mockConfiguredAdapter(['get' => false]);",
      "29:         $framework = $this->mockContaoFramework([Config::class => $config]);",
      "30:         $scopeMatcher = $this->createMock(ScopeMatcher::class);",
      "32:         $csrfTokenManager = $this->createMock(CsrfTokenManagerInterface::class);",
      "33:         $csrfTokenManager",
      "34:             ->expects($this->once())",
      "35:             ->method('isTokenValid')",
      "36:             ->willReturn(true)",
      "37:         ;",
      "39:         $request = Request::create('/account.html');",
      "40:         $request->setMethod('POST');",
      "41:         $request->attributes->set('_token_check', true);",
      "43:         $event = $this->createMock(GetResponseEvent::class);",
      "44:         $event",
      "45:             ->expects($this->once())",
      "46:             ->method('getRequest')",
      "47:             ->willReturn($request)",
      "48:         ;",
      "50:         $listener = new RequestTokenListener($framework, $scopeMatcher, $csrfTokenManager, 'contao_csrf_token');",
      "51:         $listener->onKernelRequest($event);",
      "52:     }",
      "54:     public function testValidatesTheRequestTokenUponContaoRequests(): void",
      "55:     {",
      "56:         $config = $this->mockConfiguredAdapter(['get' => false]);",
      "57:         $framework = $this->mockContaoFramework([Config::class => $config]);",
      "59:         $scopeMatcher = $this->createMock(ScopeMatcher::class);",
      "60:         $scopeMatcher",
      "61:             ->expects($this->once())",
      "62:             ->method('isContaoRequest')",
      "63:             ->willReturn(true)",
      "64:         ;",
      "66:         $csrfTokenManager = $this->createMock(CsrfTokenManagerInterface::class);",
      "67:         $csrfTokenManager",
      "68:             ->expects($this->once())",
      "69:             ->method('isTokenValid')",
      "70:             ->willReturn(true)",
      "71:         ;",
      "73:         $request = Request::create('/account.html');",
      "74:         $request->setMethod('POST');",
      "76:         $event = $this->createMock(GetResponseEvent::class);",
      "77:         $event",
      "78:             ->expects($this->once())",
      "79:             ->method('getRequest')",
      "80:             ->willReturn($request)",
      "81:         ;",
      "83:         $listener = new RequestTokenListener($framework, $scopeMatcher, $csrfTokenManager, 'contao_csrf_token');",
      "84:         $listener->onKernelRequest($event);",
      "85:     }",
      "87:     public function testFailsIfTheRequestTokenIsInvalid(): void",
      "88:     {",
      "89:         $config = $this->mockConfiguredAdapter(['get' => false]);",
      "90:         $framework = $this->mockContaoFramework([Config::class => $config]);",
      "91:         $scopeMatcher = $this->createMock(ScopeMatcher::class);",
      "93:         $csrfTokenManager = $this->createMock(CsrfTokenManagerInterface::class);",
      "94:         $csrfTokenManager",
      "95:             ->expects($this->once())",
      "96:             ->method('isTokenValid')",
      "97:             ->willReturn(false)",
      "98:         ;",
      "100:         $request = Request::create('/account.html');",
      "101:         $request->setMethod('POST');",
      "102:         $request->attributes->set('_token_check', true);",
      "104:         $event = $this->createMock(GetResponseEvent::class);",
      "105:         $event",
      "106:             ->expects($this->once())",
      "107:             ->method('getRequest')",
      "108:             ->willReturn($request)",
      "109:         ;",
      "111:         $listener = new RequestTokenListener($framework, $scopeMatcher, $csrfTokenManager, 'contao_csrf_token');",
      "113:         $this->expectException(InvalidRequestTokenException::class);",
      "115:         $listener->onKernelRequest($event);",
      "116:     }",
      "118:     public function testDoesNotValidateTheRequestTokenUponNonPostRequests(): void",
      "119:     {",
      "120:         $framework = $this->mockContaoFramework();",
      "121:         $framework",
      "122:             ->expects($this->never())",
      "123:             ->method('getAdapter')",
      "124:         ;",
      "126:         $scopeMatcher = $this->createMock(ScopeMatcher::class);",
      "127:         $csrfTokenManager = $this->createMock(CsrfTokenManagerInterface::class);",
      "129:         $request = Request::create('/account.html');",
      "130:         $request->setMethod('GET');",
      "131:         $request->attributes->set('_token_check', true);",
      "133:         $event = $this->createMock(GetResponseEvent::class);",
      "134:         $event",
      "135:             ->expects($this->once())",
      "136:             ->method('getRequest')",
      "137:             ->willReturn($request)",
      "138:         ;",
      "140:         $listener = new RequestTokenListener($framework, $scopeMatcher, $csrfTokenManager, 'contao_csrf_token');",
      "141:         $listener->onKernelRequest($event);",
      "142:     }",
      "144:     public function testDoesNotValidateTheRequestTokenUponAjaxRequests(): void",
      "145:     {",
      "146:         $framework = $this->mockContaoFramework();",
      "147:         $framework",
      "148:             ->expects($this->never())",
      "149:             ->method('getAdapter')",
      "150:         ;",
      "152:         $scopeMatcher = $this->createMock(ScopeMatcher::class);",
      "153:         $csrfTokenManager = $this->createMock(CsrfTokenManagerInterface::class);",
      "155:         $request = Request::create('/account.html');",
      "156:         $request->setMethod('POST');",
      "157:         $request->attributes->set('_token_check', true);",
      "158:         $request->headers->set('X-Requested-With', 'XMLHttpRequest');",
      "160:         $event = $this->createMock(GetResponseEvent::class);",
      "161:         $event",
      "162:             ->expects($this->once())",
      "163:             ->method('getRequest')",
      "164:             ->willReturn($request)",
      "165:         ;",
      "167:         $listener = new RequestTokenListener($framework, $scopeMatcher, $csrfTokenManager, 'contao_csrf_token');",
      "168:         $listener->onKernelRequest($event);",
      "169:     }",
      "171:     public function testDoesNotValidateTheRequestTokenIfTheRequestAttributeIsFalse(): void",
      "172:     {",
      "173:         $framework = $this->mockContaoFramework();",
      "174:         $framework",
      "175:             ->expects($this->never())",
      "176:             ->method('getAdapter')",
      "177:         ;",
      "179:         $scopeMatcher = $this->createMock(ScopeMatcher::class);",
      "180:         $csrfTokenManager = $this->createMock(CsrfTokenManagerInterface::class);",
      "182:         $request = Request::create('/account.html');",
      "183:         $request->setMethod('POST');",
      "184:         $request->attributes->set('_token_check', false);",
      "186:         $event = $this->createMock(GetResponseEvent::class);",
      "187:         $event",
      "188:             ->expects($this->once())",
      "189:             ->method('getRequest')",
      "190:             ->willReturn($request)",
      "191:         ;",
      "193:         $listener = new RequestTokenListener($framework, $scopeMatcher, $csrfTokenManager, 'contao_csrf_token');",
      "194:         $listener->onKernelRequest($event);",
      "195:     }",
      "197:     public function testDoesNotValidateTheRequestTokenIfNoRequestAttributeAndNotAContaoRequest(): void",
      "198:     {",
      "199:         $framework = $this->mockContaoFramework();",
      "200:         $framework",
      "201:             ->expects($this->never())",
      "202:             ->method('getAdapter')",
      "203:         ;",
      "205:         $scopeMatcher = $this->createMock(ScopeMatcher::class);",
      "206:         $scopeMatcher",
      "207:             ->expects($this->once())",
      "208:             ->method('isContaoRequest')",
      "209:             ->willReturn(false)",
      "210:         ;",
      "212:         $csrfTokenManager = $this->createMock(CsrfTokenManagerInterface::class);",
      "214:         $request = Request::create('/account.html');",
      "215:         $request->setMethod('POST');",
      "217:         $event = $this->createMock(GetResponseEvent::class);",
      "218:         $event",
      "219:             ->expects($this->once())",
      "220:             ->method('getRequest')",
      "221:             ->willReturn($request)",
      "222:         ;",
      "224:         $listener = new RequestTokenListener($framework, $scopeMatcher, $csrfTokenManager, 'contao_csrf_token');",
      "225:         $listener->onKernelRequest($event);",
      "226:     }",
      "227: }",
      "",
      "---------------"
    ],
    "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php": [
      "File: core-bundle/tests/Framework/ContaoFrameworkTest.php -> core-bundle/tests/Framework/ContaoFrameworkTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:         error_reporting($errorReporting);",
      "329:     }",
      "",
      "[Removed Lines]",
      "331:     public function testValidatesTheRequestToken(): void",
      "332:     {",
      "333:         $request = Request::create('/contao/login');",
      "334:         $request->attributes->set('_route', 'dummy');",
      "335:         $request->attributes->set('_token_check', true);",
      "336:         $request->setMethod('POST');",
      "337:         $request->request->set('REQUEST_TOKEN', 'foobar');",
      "339:         $framework = $this->mockFramework($request);",
      "340:         $framework->setContainer($this->mockContainer());",
      "341:         $framework->initialize();",
      "343:         $this->addToAssertionCount(1);  // does not throw an exception",
      "344:     }",
      "350:     public function testFailsIfTheRequestTokenIsInvalid(): void",
      "351:     {",
      "352:         $request = Request::create('/contao/login');",
      "353:         $request->attributes->set('_route', 'dummy');",
      "354:         $request->attributes->set('_token_check', true);",
      "355:         $request->setMethod('POST');",
      "356:         $request->request->set('REQUEST_TOKEN', 'invalid');",
      "358:         $requestStack = new RequestStack();",
      "359:         $requestStack->push($request);",
      "361:         $framework = new ContaoFramework(",
      "362:             $requestStack,",
      "363:             $this->mockScopeMatcher(),",
      "364:             $this->createMock(TokenChecker::class),",
      "365:             $this->getTempDir(),",
      "366:             error_reporting()",
      "367:         );",
      "369:         $framework->setContainer($this->mockContainer());",
      "371:         $adapters = [",
      "372:             Config::class => $this->mockConfigAdapter(),",
      "373:             RequestToken::class => $this->mockRequestTokenAdapter(false),",
      "374:         ];",
      "376:         $ref = new \\ReflectionObject($framework);",
      "377:         $adapterCache = $ref->getProperty('adapterCache');",
      "378:         $adapterCache->setAccessible(true);",
      "379:         $adapterCache->setValue($framework, $adapters);",
      "381:         $this->expectException(InvalidRequestTokenException::class);",
      "383:         $framework->initialize();",
      "384:     }",
      "386:     public function testDoesNotValidateTheRequestTokenUponAjaxRequests(): void",
      "387:     {",
      "388:         $request = Request::create('/contao/login');",
      "389:         $request->attributes->set('_route', 'dummy');",
      "390:         $request->attributes->set('_token_check', true);",
      "391:         $request->setMethod('POST');",
      "392:         $request->headers->set('X-Requested-With', 'XMLHttpRequest');",
      "394:         $requestStack = new RequestStack();",
      "395:         $requestStack->push($request);",
      "397:         $framework = new ContaoFramework(",
      "398:             $requestStack,",
      "399:             $this->mockScopeMatcher(),",
      "400:             $this->createMock(TokenChecker::class),",
      "401:             $this->getTempDir(),",
      "402:             error_reporting()",
      "403:         );",
      "405:         $framework->setContainer($this->mockContainer());",
      "407:         $adapters = [",
      "408:             Config::class => $this->mockConfigAdapter(),",
      "409:             RequestToken::class => $this->mockRequestTokenAdapter(false),",
      "410:         ];",
      "412:         $ref = new \\ReflectionObject($framework);",
      "413:         $adapterCache = $ref->getProperty('adapterCache');",
      "414:         $adapterCache->setAccessible(true);",
      "415:         $adapterCache->setValue($framework, $adapters);",
      "417:         $framework->initialize();",
      "419:         $this->addToAssertionCount(1);  // does not throw an exception",
      "420:     }",
      "422:     public function testDoesNotValidateTheRequestTokenIfTheRequestAttributeIsFalse(): void",
      "423:     {",
      "424:         $request = Request::create('/contao/login');",
      "425:         $request->attributes->set('_route', 'dummy');",
      "426:         $request->attributes->set('_token_check', false);",
      "427:         $request->setMethod('POST');",
      "428:         $request->request->set('REQUEST_TOKEN', 'foobar');",
      "430:         $requestStack = new RequestStack();",
      "431:         $requestStack->push($request);",
      "433:         $framework = new ContaoFramework(",
      "434:             $requestStack,",
      "435:             $this->mockScopeMatcher(),",
      "436:             $this->createMock(TokenChecker::class),",
      "437:             $this->getTempDir(),",
      "438:             error_reporting()",
      "439:         );",
      "441:         $framework->setContainer($this->mockContainer());",
      "443:         $adapter = $this->mockAdapter(['get', 'validate']);",
      "444:         $adapter",
      "445:             ->method('get')",
      "446:             ->willReturn('foobar')",
      "447:         ;",
      "449:         $adapter",
      "450:             ->expects($this->never())",
      "451:             ->method('validate')",
      "452:         ;",
      "454:         $adapters = [",
      "455:             Config::class => $this->mockConfigAdapter(),",
      "456:             RequestToken::class => $adapter,",
      "457:         ];",
      "459:         $ref = new \\ReflectionObject($framework);",
      "460:         $adapterCache = $ref->getProperty('adapterCache');",
      "461:         $adapterCache->setAccessible(true);",
      "462:         $adapterCache->setValue($framework, $adapters);",
      "464:         $framework->initialize();",
      "465:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dd612a714af8d22461eb1659cf0afc72678a5aa2",
      "candidate_info": {
        "commit_hash": "dd612a714af8d22461eb1659cf0afc72678a5aa2",
        "repo": "contao/contao",
        "commit_url": "https://github.com/contao/contao/commit/dd612a714af8d22461eb1659cf0afc72678a5aa2",
        "files": [
          ".php_cs.dist",
          "composer.json",
          "core-bundle/src/Controller/BackendCsvImportController.php",
          "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
          "core-bundle/tests/OptIn/OptInTokenTest.php",
          "core-bundle/tests/Security/Authentication/Token/TokenCheckerTest.php",
          "monorepo.yml"
        ],
        "message": "Fix the unit tests",
        "before_after_code_files": [
          ".php_cs.dist||.php_cs.dist",
          "core-bundle/src/Controller/BackendCsvImportController.php||core-bundle/src/Controller/BackendCsvImportController.php",
          "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
          "core-bundle/tests/OptIn/OptInTokenTest.php||core-bundle/tests/OptIn/OptInTokenTest.php",
          "core-bundle/tests/Security/Authentication/Token/TokenCheckerTest.php||core-bundle/tests/Security/Authentication/Token/TokenCheckerTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php"
          ],
          "candidate": [
            "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php"
          ]
        }
      },
      "candidate_diff": {
        ".php_cs.dist||.php_cs.dist": [
          "File: .php_cs.dist -> .php_cs.dist",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:         'comment_to_phpdoc' => true,",
          "46:         'compact_nullable_typehint' => true,",
          "47:         'escape_implicit_backslashes' => true,",
          "49:         'fully_qualified_strict_types' => true,",
          "50:         'general_phpdoc_annotation_remove' => [",
          "51:             'author',",
          "",
          "[Removed Lines]",
          "48:         'fopen_flags' => false,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core-bundle/src/Controller/BackendCsvImportController.php||core-bundle/src/Controller/BackendCsvImportController.php": [
          "File: core-bundle/src/Controller/BackendCsvImportController.php -> core-bundle/src/Controller/BackendCsvImportController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:         $delimiter = $this->getDelimiter($separator);",
          "209:         foreach ($files as $file) {",
          "212:             while (false !== ($row = fgetcsv($fp, 0, $delimiter))) {",
          "213:                 $data = $callback($data, $row);",
          "",
          "[Removed Lines]",
          "210:             $fp = fopen($file, 'rb');",
          "",
          "[Added Lines]",
          "210:             $fp = fopen($file, 'r');",
          "",
          "---------------"
        ],
        "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php": [
          "File: core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php -> core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:         $this->assertSame('onKernelRequest', $events['kernel.request'][0][0]);",
          "180:         $this->assertSame(16, $events['kernel.request'][0][1]);",
          "183:         $events = ExceptionListener::getSubscribedEvents();",
          "189:         $events = Firewall::getSubscribedEvents();",
          "",
          "[Removed Lines]",
          "185:         $this->assertSame('onKernelException', $events['kernel.exception'][1][0]);",
          "186:         $this->assertSame(-128, $events['kernel.exception'][1][1]);",
          "",
          "[Added Lines]",
          "184:         if (\\is_array($events['kernel.exception'][0])) {",
          "185:             $this->assertSame('onKernelException', $events['kernel.exception'][1][0]);",
          "186:             $this->assertSame(-128, $events['kernel.exception'][1][1]);",
          "187:         } else {",
          "189:             $this->assertSame('onKernelException', $events['kernel.exception'][0]);",
          "190:             $this->assertSame(-128, $events['kernel.exception'][1]);",
          "191:         }",
          "",
          "---------------"
        ],
        "core-bundle/tests/OptIn/OptInTokenTest.php||core-bundle/tests/OptIn/OptInTokenTest.php": [
          "File: core-bundle/tests/OptIn/OptInTokenTest.php -> core-bundle/tests/OptIn/OptInTokenTest.php"
        ],
        "core-bundle/tests/Security/Authentication/Token/TokenCheckerTest.php||core-bundle/tests/Security/Authentication/Token/TokenCheckerTest.php": [
          "File: core-bundle/tests/Security/Authentication/Token/TokenCheckerTest.php -> core-bundle/tests/Security/Authentication/Token/TokenCheckerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:     private function mockUser(string $class): User",
          "205:     {",
          "233:         return $user;",
          "234:     }",
          "",
          "[Removed Lines]",
          "207:         $user = $this->createPartialMock($class, ['__get']);",
          "208:         $user",
          "209:             ->method('__get')",
          "210:             ->willReturnCallback(",
          "211:                 function (string $key) {",
          "212:                     switch ($key) {",
          "213:                         case 'id':",
          "214:                             return 1;",
          "216:                         case 'username':",
          "217:                             return 'foobar';",
          "219:                         case 'password':",
          "220:                         case 'admin':",
          "221:                         case 'disable':",
          "222:                         case 'start':",
          "223:                         case 'stop':",
          "224:                             return '';",
          "226:                         default:",
          "227:                             return null;",
          "228:                     }",
          "229:                 }",
          "230:             )",
          "231:         ;",
          "",
          "[Added Lines]",
          "205:         $user = $this->createPartialMock($class, []);",
          "206:         $user->id = 1;",
          "207:         $user->username = 'foobar';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12895c9a27ebad67efbf0077159ff386f967b318",
      "candidate_info": {
        "commit_hash": "12895c9a27ebad67efbf0077159ff386f967b318",
        "repo": "contao/contao",
        "commit_url": "https://github.com/contao/contao/commit/12895c9a27ebad67efbf0077159ff386f967b318",
        "files": [
          "core-bundle/src/EventListener/RequestTokenListener.php",
          "core-bundle/src/OptIn/OptInToken.php",
          "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
          "core-bundle/tests/Framework/ContaoFrameworkTest.php",
          "core-bundle/tests/OptIn/OptInTokenTest.php",
          "core-bundle/tests/Security/Authentication/Token/TokenCheckerTest.php"
        ],
        "message": "Temporarily disable two failing tests (false positives)",
        "before_after_code_files": [
          "core-bundle/src/EventListener/RequestTokenListener.php||core-bundle/src/EventListener/RequestTokenListener.php",
          "core-bundle/src/OptIn/OptInToken.php||core-bundle/src/OptIn/OptInToken.php",
          "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
          "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php",
          "core-bundle/tests/OptIn/OptInTokenTest.php||core-bundle/tests/OptIn/OptInTokenTest.php",
          "core-bundle/tests/Security/Authentication/Token/TokenCheckerTest.php||core-bundle/tests/Security/Authentication/Token/TokenCheckerTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core-bundle/src/EventListener/RequestTokenListener.php||core-bundle/src/EventListener/RequestTokenListener.php",
            "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
            "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php"
          ],
          "candidate": [
            "core-bundle/src/EventListener/RequestTokenListener.php||core-bundle/src/EventListener/RequestTokenListener.php",
            "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
            "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php"
          ]
        }
      },
      "candidate_diff": {
        "core-bundle/src/EventListener/RequestTokenListener.php||core-bundle/src/EventListener/RequestTokenListener.php": [
          "File: core-bundle/src/EventListener/RequestTokenListener.php -> core-bundle/src/EventListener/RequestTokenListener.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:             $hostname = gethostbyaddr($request->getClientIp());",
          "96:             foreach ($config->get('requestTokenWhitelist') as $domain) {",
          "98:                     return;",
          "99:                 }",
          "100:             }",
          "",
          "[Removed Lines]",
          "97:                 if ($domain === $hostname || preg_match('/\\.' . preg_quote($domain, '/') . '$/', $hostname)) {",
          "",
          "[Added Lines]",
          "97:                 if ($domain === $hostname || preg_match('/\\.'.preg_quote($domain, '/').'$/', $hostname)) {",
          "",
          "---------------"
        ],
        "core-bundle/src/OptIn/OptInToken.php||core-bundle/src/OptIn/OptInToken.php": [
          "File: core-bundle/src/OptIn/OptInToken.php -> core-bundle/src/OptIn/OptInToken.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:                     continue;",
          "103:                 }",
          "108:                 if ($token->getRelatedRecords() !== $related) {",
          "",
          "[Removed Lines]",
          "105:                 $token = new OptInToken($model, $this->framework);",
          "",
          "[Added Lines]",
          "105:                 $token = new self($model, $this->framework);",
          "",
          "---------------"
        ],
        "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php": [
          "File: core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php -> core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php"
        ],
        "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php": [
          "File: core-bundle/tests/Framework/ContaoFrameworkTest.php -> core-bundle/tests/Framework/ContaoFrameworkTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: use Contao\\Config;",
          "16: use Contao\\CoreBundle\\Exception\\IncompleteInstallationException;",
          "18: use Contao\\CoreBundle\\Fixtures\\Adapter\\LegacyClass;",
          "19: use Contao\\CoreBundle\\Fixtures\\Adapter\\LegacySingletonClass;",
          "20: use Contao\\CoreBundle\\Framework\\Adapter;",
          "",
          "[Removed Lines]",
          "17: use Contao\\CoreBundle\\Exception\\InvalidRequestTokenException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core-bundle/tests/OptIn/OptInTokenTest.php||core-bundle/tests/OptIn/OptInTokenTest.php": [
          "File: core-bundle/tests/OptIn/OptInTokenTest.php -> core-bundle/tests/OptIn/OptInTokenTest.php"
        ],
        "core-bundle/tests/Security/Authentication/Token/TokenCheckerTest.php||core-bundle/tests/Security/Authentication/Token/TokenCheckerTest.php": [
          "File: core-bundle/tests/Security/Authentication/Token/TokenCheckerTest.php -> core-bundle/tests/Security/Authentication/Token/TokenCheckerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:                         case 'username':",
          "215:                             return 'foobar';",
          "217:                         case 'admin':",
          "218:                         case 'disable':",
          "219:                             return '';",
          "224:                         default:",
          "225:                             return null;",
          "226:                     }",
          "",
          "[Removed Lines]",
          "221:                         case 'groups':",
          "222:                             return [];",
          "",
          "[Added Lines]",
          "219:                         case 'password':",
          "222:                         case 'start':",
          "223:                         case 'stop':",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d99e339333fd56b844c1b3353809013c375b970a",
      "candidate_info": {
        "commit_hash": "d99e339333fd56b844c1b3353809013c375b970a",
        "repo": "contao/contao",
        "commit_url": "https://github.com/contao/contao/commit/d99e339333fd56b844c1b3353809013c375b970a",
        "files": [
          "core-bundle/src/EventListener/FrameworkRequestListener.php",
          "core-bundle/src/Framework/ContaoFramework.php",
          "core-bundle/src/Resources/config/listener.yml",
          "core-bundle/src/Resources/config/services.yml",
          "core-bundle/src/Resources/contao/library/Contao/Database.php",
          "core-bundle/src/Routing/Enhancer/InputEnhancer.php",
          "core-bundle/src/Routing/Matcher/LegacyMatcher.php",
          "core-bundle/src/Routing/RouteProvider.php",
          "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
          "core-bundle/tests/Framework/ContaoFrameworkTest.php",
          "phpstan.neon.dist"
        ],
        "message": "Routing must always boot the Contao framework (see #276)\n\nDescription\n-----------\n\nTODO\n\n- [x] Test the new `$isFrontend` parameter\n- [x] Test that `TL_SCRIPT` strips request basePath from request pathinfo\n\nCommits\n-------\n\n3b5ee370 Boot the framework and explicitly set the scope from routing\nb01a1a98 Drop the FrameworkRequestListener\n36d23aa9 Do not overwrite the locale if routing has set it\na43a0d5e Do not query Config if we don't need the values\n8b650cea Check for constant before using it\n6cbef1cc Do not require route to generate TL_SCRIPT\n1fa83ca7 Use false for default value of boolean\n89930b42 Revert \"Do not overwrite the locale if routing has set it\"\n\nThis reverts commit 36d23aa9\n68c8a406 Updated some unit tests\n8811af4b Fix the tests\n8e96e403 Adjust the PHPStan configuration\n44df6ad5 $isFrontend does not need to be static",
        "before_after_code_files": [
          "core-bundle/src/EventListener/FrameworkRequestListener.php||core-bundle/src/EventListener/FrameworkRequestListener.php",
          "core-bundle/src/Framework/ContaoFramework.php||core-bundle/src/Framework/ContaoFramework.php",
          "core-bundle/src/Resources/contao/library/Contao/Database.php||core-bundle/src/Resources/contao/library/Contao/Database.php",
          "core-bundle/src/Routing/Enhancer/InputEnhancer.php||core-bundle/src/Routing/Enhancer/InputEnhancer.php",
          "core-bundle/src/Routing/Matcher/LegacyMatcher.php||core-bundle/src/Routing/Matcher/LegacyMatcher.php",
          "core-bundle/src/Routing/RouteProvider.php||core-bundle/src/Routing/RouteProvider.php",
          "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
          "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php",
          "phpstan.neon.dist||phpstan.neon.dist"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core-bundle/src/Framework/ContaoFramework.php||core-bundle/src/Framework/ContaoFramework.php",
            "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
            "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php"
          ],
          "candidate": [
            "core-bundle/src/Framework/ContaoFramework.php||core-bundle/src/Framework/ContaoFramework.php",
            "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
            "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php"
          ]
        }
      },
      "candidate_diff": {
        "core-bundle/src/EventListener/FrameworkRequestListener.php||core-bundle/src/EventListener/FrameworkRequestListener.php": [
          "File: core-bundle/src/EventListener/FrameworkRequestListener.php -> core-bundle/src/EventListener/FrameworkRequestListener.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core-bundle/src/Framework/ContaoFramework.php||core-bundle/src/Framework/ContaoFramework.php": [
          "File: core-bundle/src/Framework/ContaoFramework.php -> core-bundle/src/Framework/ContaoFramework.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: use Symfony\\Component\\DependencyInjection\\ContainerAwareInterface;",
          "26: use Symfony\\Component\\DependencyInjection\\ContainerAwareTrait;",
          "27: use Symfony\\Component\\HttpFoundation\\Request;",
          "",
          "[Removed Lines]",
          "28: use Symfony\\Component\\Routing\\RouterInterface;",
          "",
          "[Added Lines]",
          "28: use Symfony\\Component\\HttpFoundation\\RequestStack;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     private static $initialized = false;",
          "",
          "[Removed Lines]",
          "45:     private $router;",
          "",
          "[Added Lines]",
          "45:     private $requestStack;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:     private $request;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     private $isFrontend = false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75:     private $hookListeners = [];",
          "78:     {",
          "80:         $this->scopeMatcher = $scopeMatcher;",
          "81:         $this->rootDir = $rootDir;",
          "82:         $this->errorLevel = $errorLevel;",
          "",
          "[Removed Lines]",
          "77:     public function __construct(RouterInterface $router, ScopeMatcher $scopeMatcher, string $rootDir, int $errorLevel)",
          "79:         $this->router = $router;",
          "",
          "[Added Lines]",
          "82:     public function __construct(RequestStack $requestStack, ScopeMatcher $scopeMatcher, string $rootDir, int $errorLevel)",
          "84:         $this->requestStack = $requestStack;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "99:     {",
          "100:         if ($this->isInitialized()) {",
          "101:             return;",
          "",
          "[Removed Lines]",
          "98:     public function initialize(): void",
          "",
          "[Added Lines]",
          "103:     public function initialize(bool $isFrontend = false): void",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "108:             throw new \\LogicException('The service container has not been set.');",
          "109:         }",
          "113:         $this->setConstants();",
          "114:         $this->initializeFramework();",
          "",
          "[Removed Lines]",
          "111:         \\define('TL_ROOT', $this->rootDir);",
          "",
          "[Added Lines]",
          "116:         $this->isFrontend = $isFrontend;",
          "117:         $this->request = $this->requestStack->getMasterRequest();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "119:         $this->hookListeners = $hookListeners;",
          "120:     }",
          "",
          "[Removed Lines]",
          "122:     public function setRequest(Request $request): void",
          "123:     {",
          "127:         if (null !== $this->request) {",
          "128:             return;",
          "129:         }",
          "131:         $this->request = $request;",
          "133:         if (!$this->isInitialized()) {",
          "134:             return;",
          "135:         }",
          "137:         $this->setConstants();",
          "138:         $this->initializeLegacySessionAccess();",
          "139:         $this->setDefaultLanguage();",
          "140:         $this->validateInstallation();",
          "141:         $this->handleRequestToken();",
          "142:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "173:     private function setConstants(): void",
          "174:     {",
          "177:         }",
          "185:             \\define('BE_USER_LOGGED_IN', false);",
          "186:             \\define('FE_USER_LOGGED_IN', false);",
          "187:         }",
          "191:     }",
          "194:     {",
          "196:             return 'BE';",
          "197:         }",
          "200:             return 'FE';",
          "201:         }",
          "203:         return null;",
          "204:     }",
          "207:     {",
          "211:             return null;",
          "212:         }",
          "222:             return null;",
          "223:         }",
          "228:             return null;",
          "229:         }",
          "232:     }",
          "234:     private function initializeFramework(): void",
          "",
          "[Removed Lines]",
          "175:         if (null === $this->request) {",
          "176:             return;",
          "179:         \\define('TL_MODE', $this->getMode($this->request));",
          "180:         \\define('TL_REFERER_ID', $this->request->attributes->get('_contao_referer_id', ''));",
          "181:         \\define('TL_SCRIPT', $this->getRoute($this->request));",
          "184:         if (!$this->scopeMatcher->isFrontendRequest($this->request)) {",
          "190:         \\define('TL_PATH', $this->request->getBasePath());",
          "193:     private function getMode(Request $request): ?string",
          "195:         if ($this->scopeMatcher->isBackendRequest($request)) {",
          "199:         if ($this->scopeMatcher->isFrontendRequest($request)) {",
          "206:     private function getRoute(Request $request): ?string",
          "208:         $attributes = $request->attributes;",
          "210:         if (!$attributes->has('_route')) {",
          "214:         try {",
          "215:             $route = $this->router->generate($attributes->get('_route'), $attributes->get('_route_params'));",
          "218:             if (!\\is_string($route)) {",
          "219:                 return null;",
          "220:             }",
          "221:         } catch (\\Exception $e) {",
          "225:         $basePath = $request->getBasePath().'/';",
          "227:         if (0 !== strncmp($route, $basePath, \\strlen($basePath))) {",
          "231:         return substr($route, \\strlen($basePath));",
          "",
          "[Added Lines]",
          "159:         if (!\\defined('TL_MODE')) {",
          "160:             \\define('TL_MODE', $this->getMode());",
          "163:         \\define('TL_START', microtime(true));",
          "164:         \\define('TL_ROOT', $this->rootDir);",
          "165:         \\define('TL_REFERER_ID', $this->getRefererId());",
          "167:         if (!\\defined('TL_SCRIPT')) {",
          "168:             \\define('TL_SCRIPT', $this->getRoute());",
          "169:         }",
          "172:         if (null === $this->request || !$this->scopeMatcher->isFrontendRequest($this->request)) {",
          "178:         \\define('TL_PATH', $this->getPath());",
          "181:     private function getMode(): ?string",
          "183:         if (true === $this->isFrontend) {",
          "184:             return 'FE';",
          "185:         }",
          "187:         if (null === $this->request) {",
          "188:             return null;",
          "189:         }",
          "191:         if ($this->scopeMatcher->isBackendRequest($this->request)) {",
          "195:         if ($this->scopeMatcher->isFrontendRequest($this->request)) {",
          "202:     private function getRefererId(): ?string",
          "204:         if (null === $this->request) {",
          "208:         return $this->request->attributes->get('_contao_referer_id', '');",
          "209:     }",
          "211:     private function getRoute(): ?string",
          "212:     {",
          "213:         if (null === $this->request) {",
          "217:         return substr($this->request->getBaseUrl().$this->request->getPathInfo(), \\strlen($this->request->getBasePath().'/'));",
          "218:     }",
          "220:     private function getPath(): ?string",
          "221:     {",
          "222:         if (null === $this->request) {",
          "226:         return $this->request->getBasePath();",
          "",
          "---------------"
        ],
        "core-bundle/src/Resources/contao/library/Contao/Database.php||core-bundle/src/Resources/contao/library/Contao/Database.php": [
          "File: core-bundle/src/Resources/contao/library/Contao/Database.php -> core-bundle/src/Resources/contao/library/Contao/Database.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:  {",
          "141:   $arrConfig = array();",
          "152:   if (\\is_array($arrCustomConfig))",
          "153:   {",
          "154:    $arrConfig = array_merge($arrDefaultConfig, $arrCustomConfig);",
          "155:   }",
          "",
          "[Removed Lines]",
          "143:   $arrDefaultConfig = array",
          "144:   (",
          "145:    'dbHost'     => Config::get('dbHost'),",
          "146:    'dbPort'     => Config::get('dbPort'),",
          "147:    'dbUser'     => Config::get('dbUser'),",
          "148:    'dbPass'     => Config::get('dbPass'),",
          "149:    'dbDatabase' => Config::get('dbDatabase')",
          "150:   );",
          "",
          "[Added Lines]",
          "145:    $arrDefaultConfig = array",
          "146:    (",
          "147:     'dbHost'     => Config::get('dbHost'),",
          "148:     'dbPort'     => Config::get('dbPort'),",
          "149:     'dbUser'     => Config::get('dbUser'),",
          "150:     'dbPass'     => Config::get('dbPass'),",
          "151:     'dbDatabase' => Config::get('dbDatabase')",
          "152:    );",
          "",
          "---------------"
        ],
        "core-bundle/src/Routing/Enhancer/InputEnhancer.php||core-bundle/src/Routing/Enhancer/InputEnhancer.php": [
          "File: core-bundle/src/Routing/Enhancer/InputEnhancer.php -> core-bundle/src/Routing/Enhancer/InputEnhancer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:             return $defaults;",
          "48:         }",
          "53:         $input = $this->framework->getAdapter(Input::class);",
          "",
          "[Removed Lines]",
          "50:         $this->framework->initialize();",
          "",
          "[Added Lines]",
          "50:         $this->framework->initialize(true);",
          "",
          "---------------"
        ],
        "core-bundle/src/Routing/Matcher/LegacyMatcher.php||core-bundle/src/Routing/Matcher/LegacyMatcher.php": [
          "File: core-bundle/src/Routing/Matcher/LegacyMatcher.php -> core-bundle/src/Routing/Matcher/LegacyMatcher.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     public function matchRequest(Request $request): array",
          "58:     {",
          "61:         if (empty($GLOBALS['TL_HOOKS']['getPageIdFromUrl']) || !\\is_array($GLOBALS['TL_HOOKS']['getPageIdFromUrl'])) {",
          "62:             return $this->requestMatcher->matchRequest($request);",
          "",
          "[Removed Lines]",
          "59:         $this->framework->initialize();",
          "",
          "[Added Lines]",
          "59:         $this->framework->initialize(true);",
          "",
          "---------------"
        ],
        "core-bundle/src/Routing/RouteProvider.php||core-bundle/src/Routing/RouteProvider.php": [
          "File: core-bundle/src/Routing/RouteProvider.php -> core-bundle/src/Routing/RouteProvider.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     public function getRouteCollectionForRequest(Request $request): RouteCollection",
          "63:     {",
          "66:         $pathInfo = rawurldecode($request->getPathInfo());",
          "",
          "[Removed Lines]",
          "64:         $this->framework->initialize();",
          "",
          "[Added Lines]",
          "64:         $this->framework->initialize(true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:     public function getRouteByName($name): Route",
          "99:     {",
          "102:         $ids = $this->getPageIdsFromNames([$name]);",
          "",
          "[Removed Lines]",
          "100:         $this->framework->initialize();",
          "",
          "[Added Lines]",
          "100:         $this->framework->initialize(true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:     public function getRoutesByNames($names): array",
          "127:     {",
          "131:         $pageModel = $this->framework->getAdapter(PageModel::class);",
          "",
          "[Removed Lines]",
          "128:         $this->framework->initialize();",
          "",
          "[Added Lines]",
          "128:         $this->framework->initialize(true);",
          "",
          "---------------"
        ],
        "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php": [
          "File: core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php -> core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "868:         $this->assertSame(ContaoFramework::class, $definition->getClass());",
          "869:         $this->assertTrue($definition->isPublic());",
          "871:         $this->assertSame('contao.routing.scope_matcher', (string) $definition->getArgument(1));",
          "872:         $this->assertSame('%kernel.project_dir%', (string) $definition->getArgument(2));",
          "873:         $this->assertSame('%contao.error_level%', (string) $definition->getArgument(3));",
          "",
          "[Removed Lines]",
          "870:         $this->assertSame('router', (string) $definition->getArgument(0));",
          "",
          "[Added Lines]",
          "870:         $this->assertSame('request_stack', (string) $definition->getArgument(0));",
          "",
          "---------------"
        ],
        "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php": [
          "File: core-bundle/tests/Framework/ContaoFrameworkTest.php -> core-bundle/tests/Framework/ContaoFrameworkTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: use Contao\\CoreBundle\\Tests\\TestCase;",
          "27: use Contao\\RequestToken;",
          "28: use PHPUnit\\Framework\\MockObject\\MockObject;",
          "31: use Symfony\\Component\\HttpFoundation\\Request;",
          "32: use Symfony\\Component\\HttpFoundation\\Session\\Session;",
          "36: class ContaoFrameworkTest extends TestCase",
          "37: {",
          "",
          "[Removed Lines]",
          "29: use Symfony\\Bundle\\FrameworkBundle\\Routing\\Router;",
          "30: use Symfony\\Component\\Config\\Loader\\LoaderInterface;",
          "33: use Symfony\\Component\\Routing\\RouteCollection;",
          "34: use Symfony\\Component\\Routing\\RouterInterface;",
          "",
          "[Added Lines]",
          "30: use Symfony\\Component\\HttpFoundation\\RequestStack;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:         $session->registerBag($feBag);",
          "53:         $session->start();",
          "56:         $request->attributes->set('_route', 'dummy');",
          "57:         $request->attributes->set('_scope', 'frontend');",
          "58:         $request->setSession($session);",
          "61:         $framework->setContainer($this->mockContainer());",
          "62:         $framework->initialize();",
          "64:         $this->assertTrue(\\defined('TL_MODE'));",
          "65:         $this->assertTrue(\\defined('TL_ROOT'));",
          "66:         $this->assertTrue(\\defined('TL_REFERER_ID'));",
          "67:         $this->assertTrue(\\defined('TL_SCRIPT'));",
          "",
          "[Removed Lines]",
          "55:         $request = new Request();",
          "60:         $framework = $this->mockFramework($this->mockRouter('/index.html'), $request);",
          "",
          "[Added Lines]",
          "52:         $request = Request::create('/index.html');",
          "57:         $framework = $this->mockFramework($request);",
          "62:         $this->assertTrue(\\defined('TL_START'));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:     public function testInitializesTheFrameworkWithABackEndRequest(): void",
          "86:     {",
          "88:         $request->attributes->set('_route', 'dummy');",
          "89:         $request->attributes->set('_scope', 'backend');",
          "90:         $request->attributes->set('_contao_referer_id', 'foobar');",
          "91:         $request->setLocale('de');",
          "94:         $framework->setContainer($this->mockContainer());",
          "95:         $framework->initialize();",
          "97:         $this->assertTrue(\\defined('TL_MODE'));",
          "98:         $this->assertTrue(\\defined('TL_ROOT'));",
          "99:         $this->assertTrue(\\defined('TL_REFERER_ID'));",
          "100:         $this->assertTrue(\\defined('TL_SCRIPT'));",
          "",
          "[Removed Lines]",
          "87:         $request = new Request();",
          "93:         $framework = $this->mockFramework($this->mockRouter('/contao/login'), $request);",
          "",
          "[Added Lines]",
          "85:         $request = Request::create('/contao/login');",
          "91:         $framework = $this->mockFramework($request);",
          "96:         $this->assertTrue(\\defined('TL_START'));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116:     public function testInitializesTheFrameworkWithoutARequest(): void",
          "117:     {",
          "119:         $framework->setContainer($this->mockContainer());",
          "",
          "[Removed Lines]",
          "118:         $framework = $this->mockFramework($this->mockRouter('/contao/login'));",
          "",
          "[Added Lines]",
          "117:         $framework = $this->mockFramework();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "128:         $framework->initialize();",
          "130:         $this->assertTrue(\\defined('TL_ROOT'));",
          "137:     }",
          "144:     {",
          "152:         ;",
          "161:         $this->assertTrue(\\defined('TL_MODE'));",
          "162:         $this->assertTrue(\\defined('TL_ROOT'));",
          "163:         $this->assertTrue(\\defined('TL_REFERER_ID'));",
          "164:         $this->assertTrue(\\defined('TL_SCRIPT'));",
          "165:         $this->assertTrue(\\defined('BE_USER_LOGGED_IN'));",
          "166:         $this->assertTrue(\\defined('FE_USER_LOGGED_IN'));",
          "167:         $this->assertTrue(\\defined('TL_PATH'));",
          "169:         $this->assertSame($this->getTempDir(), TL_ROOT);",
          "171:         $this->assertNull(TL_SCRIPT);",
          "174:     }",
          "181:     {",
          "187:         $framework->setContainer($this->mockContainer());",
          "190:         $this->assertTrue(\\defined('TL_MODE'));",
          "191:         $this->assertTrue(\\defined('TL_ROOT'));",
          "192:         $this->assertTrue(\\defined('TL_REFERER_ID'));",
          "193:         $this->assertTrue(\\defined('TL_SCRIPT'));",
          "194:         $this->assertTrue(\\defined('BE_USER_LOGGED_IN'));",
          "195:         $this->assertTrue(\\defined('FE_USER_LOGGED_IN'));",
          "196:         $this->assertTrue(\\defined('TL_PATH'));",
          "198:         $this->assertSame($this->getTempDir(), TL_ROOT);",
          "202:     }",
          "209:     {",
          "224:         $framework->initialize();",
          "237:         $this->assertTrue(\\defined('TL_MODE'));",
          "238:         $this->assertTrue(\\defined('TL_ROOT'));",
          "239:         $this->assertTrue(\\defined('TL_REFERER_ID'));",
          "240:         $this->assertTrue(\\defined('TL_SCRIPT'));",
          "",
          "[Removed Lines]",
          "131:         $this->assertFalse(\\defined('TL_MODE'));",
          "132:         $this->assertFalse(\\defined('TL_REFERER_ID'));",
          "133:         $this->assertFalse(\\defined('TL_SCRIPT'));",
          "134:         $this->assertFalse(\\defined('BE_USER_LOGGED_IN'));",
          "135:         $this->assertFalse(\\defined('FE_USER_LOGGED_IN'));",
          "136:         $this->assertFalse(\\defined('TL_PATH'));",
          "143:     public function testInitializesTheFrameworkWithoutARoute(): void",
          "145:         $request = new Request();",
          "146:         $request->setLocale('de');",
          "148:         $routingLoader = $this->createMock(LoaderInterface::class);",
          "149:         $routingLoader",
          "150:             ->method('load')",
          "151:             ->willReturn(new RouteCollection())",
          "154:         $container = $this->mockContainer();",
          "155:         $container->set('routing.loader', $routingLoader);",
          "157:         $framework = $this->mockFramework(new Router($container, []), $request);",
          "158:         $framework->setContainer($container);",
          "159:         $framework->initialize();",
          "168:         $this->assertNull(TL_MODE);",
          "170:         $this->assertSame('', TL_REFERER_ID);",
          "172:         $this->assertSame('', TL_PATH);",
          "173:         $this->assertSame('de', $GLOBALS['TL_LANGUAGE']);",
          "180:     public function testInitializesTheFrameworkWithoutAScope(): void",
          "182:         $request = new Request();",
          "183:         $request->attributes->set('_route', 'dummy');",
          "184:         $request->attributes->set('_contao_referer_id', 'foobar');",
          "186:         $framework = $this->mockFramework($this->mockRouter('/contao/login'), $request);",
          "188:         $framework->initialize();",
          "197:         $this->assertNull(TL_MODE);",
          "199:         $this->assertSame('foobar', TL_REFERER_ID);",
          "200:         $this->assertSame('contao/login', TL_SCRIPT);",
          "201:         $this->assertSame('', TL_PATH);",
          "208:     public function testInitializesTheFrameworkAfterRequestIsSet(): void",
          "210:         $request = new Request();",
          "211:         $request->setLocale('de');",
          "213:         $routingLoader = $this->createMock(LoaderInterface::class);",
          "214:         $routingLoader",
          "215:             ->method('load')",
          "216:             ->willReturn(new RouteCollection())",
          "217:         ;",
          "219:         $container = $this->mockContainer();",
          "220:         $container->set('routing.loader', $routingLoader);",
          "222:         $framework = $this->mockFramework(new Router($container, []));",
          "223:         $framework->setContainer($container);",
          "226:         $this->assertTrue(\\defined('TL_ROOT'));",
          "227:         $this->assertFalse(\\defined('TL_MODE'));",
          "228:         $this->assertFalse(\\defined('TL_REFERER_ID'));",
          "229:         $this->assertFalse(\\defined('TL_SCRIPT'));",
          "230:         $this->assertFalse(\\defined('BE_USER_LOGGED_IN'));",
          "231:         $this->assertFalse(\\defined('FE_USER_LOGGED_IN'));",
          "232:         $this->assertFalse(\\defined('TL_PATH'));",
          "233:         $this->assertSame($this->getTempDir(), TL_ROOT);",
          "235:         $framework->setRequest($request);",
          "",
          "[Added Lines]",
          "129:         $this->assertTrue(\\defined('TL_MODE'));",
          "130:         $this->assertTrue(\\defined('TL_START'));",
          "132:         $this->assertTrue(\\defined('TL_REFERER_ID'));",
          "133:         $this->assertTrue(\\defined('TL_SCRIPT'));",
          "134:         $this->assertTrue(\\defined('BE_USER_LOGGED_IN'));",
          "135:         $this->assertTrue(\\defined('FE_USER_LOGGED_IN'));",
          "136:         $this->assertTrue(\\defined('TL_PATH'));",
          "137:         $this->assertNull(TL_MODE);",
          "138:         $this->assertSame($this->getTempDir(), TL_ROOT);",
          "139:         $this->assertNull(TL_REFERER_ID);",
          "140:         $this->assertNull(TL_SCRIPT);",
          "141:         $this->assertNull(TL_PATH);",
          "148:     public function testInitializesTheFrameworkWithoutARequestInFrontendMode(): void",
          "150:         $framework = $this->mockFramework();",
          "151:         $framework->setContainer($this->mockContainer());",
          "154:         $config = $framework->getAdapter(Config::class);",
          "155:         $config",
          "156:             ->expects($this->once())",
          "157:             ->method('preload')",
          "160:         $framework->initialize(true);",
          "163:         $this->assertTrue(\\defined('TL_START'));",
          "170:         $this->assertSame('FE', TL_MODE);",
          "172:         $this->assertNull(TL_REFERER_ID);",
          "174:         $this->assertNull(TL_PATH);",
          "181:     public function testInitializesTheFrameworkWithAnInsecurePath(): void",
          "183:         $request = Request::create('/contao4/web/app_dev.php/index.html');",
          "184:         $request->server->set('SCRIPT_FILENAME', '/var/www/contao4/web/app_dev.php');",
          "185:         $request->server->set('SCRIPT_NAME', '/contao4/web/app_dev.php');",
          "187:         $framework = $this->mockFramework($request);",
          "191:         $config = $framework->getAdapter(Config::class);",
          "192:         $config",
          "193:             ->expects($this->once())",
          "194:             ->method('preload')",
          "195:         ;",
          "197:         $framework->initialize(true);",
          "200:         $this->assertTrue(\\defined('TL_START'));",
          "207:         $this->assertSame('FE', TL_MODE);",
          "209:         $this->assertSame('', TL_REFERER_ID);",
          "210:         $this->assertSame('app_dev.php/index.html', TL_SCRIPT);",
          "211:         $this->assertSame('/contao4/web', TL_PATH);",
          "218:     public function testInitializesTheFrameworkWithoutAScope(): void",
          "220:         $request = Request::create('/contao/login');",
          "221:         $request->attributes->set('_route', 'dummy');",
          "222:         $request->attributes->set('_contao_referer_id', 'foobar');",
          "224:         $framework = $this->mockFramework($request);",
          "225:         $framework->setContainer($this->mockContainer());",
          "229:         $this->assertTrue(\\defined('TL_START'));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "243:         $this->assertTrue(\\defined('TL_PATH'));",
          "244:         $this->assertNull(TL_MODE);",
          "245:         $this->assertSame($this->getTempDir(), TL_ROOT);",
          "248:         $this->assertSame('', TL_PATH);",
          "250:     }",
          "",
          "[Removed Lines]",
          "246:         $this->assertSame('', TL_REFERER_ID);",
          "247:         $this->assertNull(TL_SCRIPT);",
          "249:         $this->assertSame('de', $GLOBALS['TL_LANGUAGE']);",
          "",
          "[Added Lines]",
          "238:         $this->assertSame('foobar', TL_REFERER_ID);",
          "239:         $this->assertSame('contao/login', TL_SCRIPT);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "268:             ->willReturn(false)",
          "269:         ;",
          "272:         $framework->setContainer($this->mockContainer());",
          "274:         $framework->initialize();",
          "276:         $this->assertTrue(\\defined('TL_MODE'));",
          "",
          "[Removed Lines]",
          "271:         $framework = $this->mockFramework(null, null, $scopeMatcher);",
          "273:         $framework->setRequest(new Request());",
          "",
          "[Added Lines]",
          "262:         $framework = $this->mockFramework(Request::create('/index.html'), $scopeMatcher);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "284:     public function testOverridesTheErrorLevel(): void",
          "285:     {",
          "287:         $request->attributes->set('_route', 'dummy');",
          "288:         $request->attributes->set('_contao_referer_id', 'foobar');",
          "291:         $framework->setContainer($this->mockContainer());",
          "293:         $errorReporting = error_reporting();",
          "",
          "[Removed Lines]",
          "286:         $request = new Request();",
          "290:         $framework = $this->mockFramework($this->mockRouter('/contao/login'), $request);",
          "",
          "[Added Lines]",
          "276:         $request = Request::create('/contao/login');",
          "280:         $framework = $this->mockFramework($request);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "306:         error_reporting($errorReporting);",
          "307:     }",
          "313:     public function testValidatesTheRequestToken(): void",
          "314:     {",
          "316:         $request->attributes->set('_route', 'dummy');",
          "317:         $request->attributes->set('_token_check', true);",
          "318:         $request->setMethod('POST');",
          "319:         $request->request->set('REQUEST_TOKEN', 'foobar');",
          "322:         $framework->setContainer($this->mockContainer());",
          "323:         $framework->initialize();",
          "",
          "[Removed Lines]",
          "315:         $request = new Request();",
          "321:         $framework = $this->mockFramework($this->mockRouter('/contao/login'), $request);",
          "",
          "[Added Lines]",
          "301:         $request = Request::create('/contao/login');",
          "307:         $framework = $this->mockFramework($request);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "332:     public function testFailsIfTheRequestTokenIsInvalid(): void",
          "333:     {",
          "335:         $request->attributes->set('_route', 'dummy');",
          "336:         $request->attributes->set('_token_check', true);",
          "337:         $request->setMethod('POST');",
          "338:         $request->request->set('REQUEST_TOKEN', 'invalid');",
          "340:         $framework = new ContaoFramework(",
          "342:             $this->mockScopeMatcher(),",
          "343:             $this->getTempDir(),",
          "344:             error_reporting()",
          "345:         );",
          "347:         $framework->setContainer($this->mockContainer());",
          "350:         $adapters = [",
          "351:             Config::class => $this->mockConfigAdapter(),",
          "",
          "[Removed Lines]",
          "334:         $request = new Request();",
          "341:             $this->mockRouter('/contao/login'),",
          "348:         $framework->setRequest($request);",
          "",
          "[Added Lines]",
          "320:         $request = Request::create('/contao/login');",
          "326:         $requestStack = new RequestStack();",
          "327:         $requestStack->push($request);",
          "330:             $requestStack,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "362:         $framework->initialize();",
          "363:     }",
          "369:     public function testDoesNotValidateTheRequestTokenUponAjaxRequests(): void",
          "370:     {",
          "372:         $request->attributes->set('_route', 'dummy');",
          "373:         $request->attributes->set('_token_check', true);",
          "374:         $request->setMethod('POST');",
          "375:         $request->headers->set('X-Requested-With', 'XMLHttpRequest');",
          "377:         $framework = new ContaoFramework(",
          "379:             $this->mockScopeMatcher(),",
          "380:             $this->getTempDir(),",
          "381:             error_reporting()",
          "382:         );",
          "384:         $framework->setContainer($this->mockContainer());",
          "387:         $adapters = [",
          "388:             Config::class => $this->mockConfigAdapter(),",
          "",
          "[Removed Lines]",
          "371:         $request = new Request();",
          "378:             $this->mockRouter('/contao/login'),",
          "385:         $framework->setRequest($request);",
          "",
          "[Added Lines]",
          "355:         $request = Request::create('/contao/login');",
          "361:         $requestStack = new RequestStack();",
          "362:         $requestStack->push($request);",
          "365:             $requestStack,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "399:         $this->addToAssertionCount(1);  // does not throw an exception",
          "400:     }",
          "406:     public function testDoesNotValidateTheRequestTokenIfTheRequestAttributeIsFalse(): void",
          "407:     {",
          "409:         $request->attributes->set('_route', 'dummy');",
          "410:         $request->attributes->set('_token_check', false);",
          "411:         $request->setMethod('POST');",
          "412:         $request->request->set('REQUEST_TOKEN', 'foobar');",
          "414:         $framework = new ContaoFramework(",
          "416:             $this->mockScopeMatcher(),",
          "417:             $this->getTempDir(),",
          "418:             error_reporting()",
          "419:         );",
          "421:         $framework->setContainer($this->mockContainer());",
          "424:         $adapter = $this->mockAdapter(['get', 'validate']);",
          "425:         $adapter",
          "",
          "[Removed Lines]",
          "408:         $request = new Request();",
          "415:             $this->mockRouter('/contao/login'),",
          "422:         $framework->setRequest($request);",
          "",
          "[Added Lines]",
          "390:         $request = Request::create('/contao/login');",
          "396:         $requestStack = new RequestStack();",
          "397:         $requestStack->push($request);",
          "400:             $requestStack,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "452:     public function testFailsIfTheInstallationIsIncomplete(): void",
          "453:     {",
          "455:         $request->attributes->set('_route', 'dummy');",
          "457:         $framework = new ContaoFramework(",
          "459:             $this->mockScopeMatcher(),",
          "460:             $this->getTempDir(),",
          "461:             error_reporting()",
          "462:         );",
          "464:         $framework->setContainer($this->mockContainer());",
          "467:         $adapters = [",
          "468:             Config::class => $this->mockConfigAdapter(false),",
          "",
          "[Removed Lines]",
          "454:         $request = new Request();",
          "458:             $this->mockRouter('/contao/login'),",
          "465:         $framework->setRequest($request);",
          "",
          "[Added Lines]",
          "438:         $request = Request::create('/contao/login');",
          "441:         $requestStack = new RequestStack();",
          "442:         $requestStack->push($request);",
          "445:             $requestStack,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "480:     }",
          "488:     public function testAllowsTheInstallationToBeIncompleteInTheInstallTool(string $route): void",
          "489:     {",
          "491:         $request->attributes->set('_route', $route);",
          "493:         $framework = new ContaoFramework(",
          "495:             $this->mockScopeMatcher(),",
          "496:             $this->getTempDir(),",
          "497:             error_reporting()",
          "498:         );",
          "500:         $framework->setContainer($this->mockContainer());",
          "503:         $adapters = [",
          "504:             Config::class => $this->mockConfigAdapter(false),",
          "",
          "[Removed Lines]",
          "490:         $request = new Request();",
          "494:             $this->mockRouter('/contao/login'),",
          "501:         $framework->setRequest($request);",
          "",
          "[Added Lines]",
          "473:         $request = Request::create('/contao/login');",
          "476:         $requestStack = new RequestStack();",
          "477:         $requestStack->push($request);",
          "480:             $requestStack,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "533:     public function testFailsIfTheContainerIsNotSet(): void",
          "534:     {",
          "537:         $this->expectException('LogicException');",
          "",
          "[Removed Lines]",
          "535:         $framework = $this->mockFramework($this->mockRouter('/contao/login'));",
          "",
          "[Added Lines]",
          "520:         $framework = $this->mockFramework();",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "559:         $session->registerBag($beBag);",
          "560:         $session->registerBag($feBag);",
          "563:         $request->attributes->set('_route', 'dummy');",
          "564:         $request->attributes->set('_scope', 'frontend');",
          "565:         $request->setSession($session);",
          "568:         $framework->setContainer($this->mockContainer());",
          "570:         $framework->initialize();",
          "572:         $this->assertInstanceOf(LazySessionAccess::class, $_SESSION);",
          "",
          "[Removed Lines]",
          "562:         $request = new Request();",
          "567:         $framework = $this->mockFramework($this->mockRouter('/index.html'));",
          "569:         $framework->setRequest($request);",
          "",
          "[Added Lines]",
          "547:         $request = Request::create('/index.html');",
          "552:         $framework = $this->mockFramework($request);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "611:         $this->assertSame(LegacyClass::class, $prop->getValue($adapter));",
          "612:     }",
          "618:     public function testRegistersTheHookServices(): void",
          "619:     {",
          "621:         $request->attributes->set('_route', 'dummy');",
          "622:         $request->attributes->set('_scope', 'backend');",
          "623:         $request->attributes->set('_contao_referer_id', 'foobar');",
          "",
          "[Removed Lines]",
          "620:         $request = new Request();",
          "",
          "[Added Lines]",
          "600:         $request = Request::create('/index.html');",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "671:             ],",
          "672:         ];",
          "675:         $framework->setContainer($container);",
          "677:         $framework->setHookListeners($listeners);",
          "679:         $reflection = new \\ReflectionObject($framework);",
          "",
          "[Removed Lines]",
          "674:         $framework = $this->mockFramework($this->mockRouter('/index.html'));",
          "676:         $framework->setRequest($request);",
          "",
          "[Added Lines]",
          "654:         $framework = $this->mockFramework($request);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "727:         );",
          "728:     }",
          "734:     {",
          "746:         $framework = new ContaoFramework(",
          "748:             $scopeMatcher ?? $this->mockScopeMatcher(),",
          "749:             $this->getTempDir(),",
          "750:             error_reporting()",
          "751:         );",
          "757:         $adapters = [",
          "758:             Config::class => $this->mockConfigAdapter(),",
          "759:             RequestToken::class => $this->mockRequestTokenAdapter(),",
          "",
          "[Removed Lines]",
          "733:     private function mockRouter(string $url): RouterInterface",
          "735:         $router = $this->createMock(RouterInterface::class);",
          "736:         $router",
          "737:             ->method('generate')",
          "738:             ->willReturn($url)",
          "739:         ;",
          "741:         return $router;",
          "742:     }",
          "744:     private function mockFramework(RouterInterface $router = null, Request $request = null, ScopeMatcher $scopeMatcher = null): ContaoFramework",
          "745:     {",
          "747:             $router ?? $this->mockRouter('/'),",
          "753:         if (null !== $request) {",
          "754:             $framework->setRequest($request);",
          "755:         }",
          "",
          "[Added Lines]",
          "709:     private function mockFramework(Request $request = null, ScopeMatcher $scopeMatcher = null): ContaoFramework",
          "711:         $requestStack = new RequestStack();",
          "713:         if (null !== $request) {",
          "714:             $requestStack->push($request);",
          "715:         }",
          "718:             $requestStack,",
          "",
          "---------------"
        ],
        "phpstan.neon.dist||phpstan.neon.dist": [
          "File: phpstan.neon.dist -> phpstan.neon.dist",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:         - %currentWorkingDirectory%/core-bundle/tests/Functional/var/*",
          "22:     ignoreErrors:",
          "27:         - '#Constant TL_SCRIPT not found\\.#'",
          "41:         - '#Call to an undefined method Symfony\\\\Component\\\\Config\\\\Definition\\\\Builder\\\\NodeDefinition::children\\(\\)\\.#'",
          "44:         - '#Call to an undefined method Contao\\\\CoreBundle\\\\Framework\\\\Adapter::missingMethod\\(\\)\\.#'",
          "46:     reportUnmatchedIgnoredErrors: false",
          "",
          "[Removed Lines]",
          "23:         # Missing constants that are defined at runtime",
          "24:         - '#Constant TL_MODE not found\\.#'",
          "25:         - '#Constant TL_REFERER_ID not found\\.#'",
          "26:         - '#Constant TL_PATH not found\\.#'",
          "28:         - '#Constant BE_USER_LOGGED_IN not found\\.#'",
          "29:         - '#Constant FE_USER_LOGGED_IN not found\\.#'",
          "31:         # Undefined properties in Contao fixtures",
          "32:         - '#Access to an undefined property Contao\\\\Fixtures\\\\#'",
          "34:         # Missing classes that are only used in BundleConfig::setLoadAfter()",
          "35:         - '#Class Symfony\\\\Bundle\\\\TwigBundle\\\\TwigBundle not found\\.#'",
          "36:         - '#Class Symfony\\\\Bundle\\\\MonologBundle\\\\MonologBundle not found\\.#'",
          "37:         - '#Class Nelmio\\\\SecurityBundle\\\\NelmioSecurityBundle not found\\.#'",
          "38:         - '#Class Contao\\\\ManagerBundle\\\\ContaoManagerBundle not found\\.#'",
          "40:         # Ignore Symfony Configuration errors",
          "43:         # Ignore missing method test",
          "",
          "[Added Lines]",
          "23:         # Ignore the missing TL_SCRIPT constant in the InitializeController class",
          "26:         # Ignore Symfony configuration errors",
          "29:         # Ignore the Adapter::missingMethod() warning",
          "32:         # Ignore calling ContaoFrameworkInterface::initialize() with a parameter",
          "33:         - '#Method Contao\\\\CoreBundle\\\\Framework\\\\ContaoFrameworkInterface::initialize\\(\\) invoked with 1 parameter, 0 required\\.#'",
          "",
          "---------------"
        ]
      }
    }
  ]
}