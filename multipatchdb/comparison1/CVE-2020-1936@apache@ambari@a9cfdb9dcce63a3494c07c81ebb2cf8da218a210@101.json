{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "40604da75c3d8e741c904cb77c1cd2a622c36534",
      "candidate_info": {
        "commit_hash": "40604da75c3d8e741c904cb77c1cd2a622c36534",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/40604da75c3d8e741c904cb77c1cd2a622c36534",
        "files": [
          "ambari-web/app/utils/date/date.js",
          "ambari-web/app/utils/host_progress_popup.js",
          "ambari-web/test/utils/date/date_test.js"
        ],
        "message": "AMBARI-24339 Background Operations: minor UX changes",
        "before_after_code_files": [
          "ambari-web/app/utils/date/date.js||ambari-web/app/utils/date/date.js",
          "ambari-web/app/utils/host_progress_popup.js||ambari-web/app/utils/host_progress_popup.js",
          "ambari-web/test/utils/date/date_test.js||ambari-web/test/utils/date/date_test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/utils/date/date.js||ambari-web/app/utils/date/date.js": [
          "File: ambari-web/app/utils/date/date.js -> ambari-web/app/utils/date/date.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:     const oneMinMs = 60000;",
          "177:     const oneHourMs = 3600000;",
          "178:     const oneDayMs = 86400000;",
          "181:     [days, time] = this.extractTimeUnit(time, oneDayMs, 'd');",
          "182:     [hours, time] = this.extractTimeUnit(time, oneHourMs, 'h');",
          "",
          "[Removed Lines]",
          "179:     let days, hours, minutes, seconds, milliseconds;",
          "",
          "[Added Lines]",
          "179:     let days, hours, minutes, seconds;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "185:     if (fullTime < oneDayMs) {",
          "186:       [seconds, time] = this.extractTimeUnit(time, oneSecMs, 's');",
          "187:       duration += seconds;",
          "191:       }",
          "192:     }",
          "",
          "[Removed Lines]",
          "188:       if (fullTime < oneMinMs) {",
          "189:         [milliseconds, time] = this.extractTimeUnit(time, 1, 'ms');",
          "190:         duration += milliseconds;",
          "",
          "[Added Lines]",
          "188:       if (fullTime < oneSecMs) {",
          "189:         duration += '1s';",
          "",
          "---------------"
        ],
        "ambari-web/app/utils/host_progress_popup.js||ambari-web/app/utils/host_progress_popup.js": [
          "File: ambari-web/app/utils/host_progress_popup.js -> ambari-web/app/utils/host_progress_popup.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:   abortIcon: Em.View.extend({",
          "194:     tagName: 'a',",
          "196:     template: Em.Handlebars.compile('<span class=\"icon icon-remove-circle\"></span>'),",
          "197:     click: function () {",
          "198:       this.get('controller').abortRequest(this.get('servicesInfo'));",
          "",
          "[Removed Lines]",
          "195:     classNames: ['action', 'abort-icon'],",
          "",
          "[Added Lines]",
          "195:     classNames: ['abort-icon'],",
          "",
          "---------------"
        ],
        "ambari-web/test/utils/date/date_test.js||ambari-web/test/utils/date/date_test.js": [
          "File: ambari-web/test/utils/date/date_test.js -> ambari-web/test/utils/date/date_test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:   describe('#timingFormat', function() {",
          "89:     var tests = Em.A([",
          "90:       {i: '0', e:'0s'},",
          "93:       {i: '1000', e:'1s'},",
          "95:       {i: '60000', e:'1m'},",
          "96:       {i: '61001', e:'1m 1s'},",
          "97:       {i: '3599999', e:'59m 59s'},",
          "",
          "[Removed Lines]",
          "91:       {i: '1', e:'1ms'},",
          "92:       {i: '999', e:'999ms'},",
          "94:       {i: '59999', e:'59s 999ms'},",
          "",
          "[Added Lines]",
          "91:       {i: '1', e:'1s'},",
          "92:       {i: '999', e:'1s'},",
          "94:       {i: '59999', e:'59s'},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97794e6b33519c2a084a205713a3a2cd6013dfac",
      "candidate_info": {
        "commit_hash": "97794e6b33519c2a084a205713a3a2cd6013dfac",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/97794e6b33519c2a084a205713a3a2cd6013dfac",
        "files": [
          "ambari-web/app/controllers/installer.js"
        ],
        "message": "AMBARI-25153. Ambari 2.7.3 web hangs at first step installation wizard",
        "before_after_code_files": [
          "ambari-web/app/controllers/installer.js||ambari-web/app/controllers/installer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/installer.js||ambari-web/app/controllers/installer.js": [
          "File: ambari-web/app/controllers/installer.js -> ambari-web/app/controllers/installer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:         }",
          "306:       }, this);",
          "307:     }",
          "309:     data.items.sortProperty('VersionDefinition.stack_version').reverse().forEach(function (versionDefinition) {",
          "311:       var stackInfo = {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "308:     if (!data.items || !data.items.length) {",
          "309:       this.setSelected(true, params.dfd);",
          "310:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "352:       stacks.sortProperty('id').set('lastObject.isSelected', true);",
          "353:     }",
          "354:     this.set('content.stacks', App.Stack.find());",
          "356:     dfd.resolve();",
          "357:   },",
          "",
          "[Removed Lines]",
          "355:     App.set('currentStackVersion', App.Stack.find().findProperty('isSelected').get('stackNameVersion'));",
          "",
          "[Added Lines]",
          "357:     var selected = App.Stack.find().findProperty('isSelected');",
          "358:     App.set('currentStackVersion', selected ? selected.get('stackNameVersion') : null);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a41f66c19e2c80fce34ca334b3a9a45466d770d0",
      "candidate_info": {
        "commit_hash": "a41f66c19e2c80fce34ca334b3a9a45466d770d0",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/a41f66c19e2c80fce34ca334b3a9a45466d770d0",
        "files": [
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/PhoenixTransactSQL.java"
        ],
        "message": "AMBARI-25415 AMS - metadata table has incorrect primary key (ihorlukianov) (#3128)",
        "before_after_code_files": [
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/PhoenixTransactSQL.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/PhoenixTransactSQL.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/PhoenixTransactSQL.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/PhoenixTransactSQL.java": [
          "File: ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/PhoenixTransactSQL.java -> ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/PhoenixTransactSQL.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:       \"START_TIME UNSIGNED_LONG, \" +",
          "165:       \"SUPPORTS_AGGREGATION BOOLEAN, \" +",
          "166:       \"IS_WHITELISTED BOOLEAN \" +",
          "168:       \"DATA_BLOCK_ENCODING='%s', COMPRESSION='%s'\";",
          "170:   public static final String CREATE_HOSTED_APPS_METADATA_TABLE_SQL =",
          "",
          "[Removed Lines]",
          "167:       \"CONSTRAINT pk PRIMARY KEY (METRIC_NAME, APP_ID)) \" +",
          "",
          "[Added Lines]",
          "167:       \"CONSTRAINT pk PRIMARY KEY (METRIC_NAME, APP_ID, INSTANCE_ID)) \" +",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b82ea02c7623d15ca7146e411513c2b17de28d33",
      "candidate_info": {
        "commit_hash": "b82ea02c7623d15ca7146e411513c2b17de28d33",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/b82ea02c7623d15ca7146e411513c2b17de28d33",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/SingleSignOnInfo.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java"
        ],
        "message": "[AMBARI-24351] Using Predicate based evaluation when determining if SSO is enabled for a service (#1905)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java||ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java||ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/SingleSignOnInfo.java||ambari-server/src/main/java/org/apache/ambari/server/state/SingleSignOnInfo.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "467:         }",
          "468:       });",
          "471:     Map<String, Map<String, String>> updates = getServiceConfigurationUpdates(cluster,",
          "472:       existingConfigurations, installedServices, serviceFilter, previouslyExistingServices, true, true);",
          "",
          "[Removed Lines]",
          "470:     Map<String, Map<String, String>> existingConfigurations = calculateExistingConfigurations(cluster, null);",
          "",
          "[Added Lines]",
          "470:     Map<String, Map<String, String>> existingConfigurations = configHelper.calculateExistingConfigurations(ambariManagementController, cluster, null);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1743:     Map<String, Map<String, String>> calculatedConfigurations = addAdditionalConfigurations(",
          "1744:       cluster,",
          "1746:       hostname,",
          "1747:       (kerberosDescriptor == null) ? null : kerberosDescriptor.getProperties());",
          "",
          "[Removed Lines]",
          "1745:       calculateExistingConfigurations(cluster, hostname),",
          "",
          "[Added Lines]",
          "1745:       configHelper.calculateExistingConfigurations(ambariManagementController, cluster, hostname),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2927:     return identities;",
          "2928:   }",
          "",
          "[Removed Lines]",
          "2938:   private Map<String, Map<String, String>> calculateExistingConfigurations(Cluster cluster, String hostname) throws AmbariException {",
          "2943:     Map<String, Map<String, String>> configurations = new HashMap<>();",
          "2944:     Map<String, Map<String, String>> configurationTags = ambariManagementController.findConfigurationTagsWithOverrides(cluster, hostname);",
          "2946:     Map<String, Map<String, String>> configProperties = configHelper.getEffectiveConfigProperties(cluster, configurationTags);",
          "2950:     for (Map.Entry<String, Map<String, String>> entry : configProperties.entrySet()) {",
          "2951:       String type = entry.getKey();",
          "2952:       Map<String, String> allLevelMergedConfig = entry.getValue();",
          "2953:       Map<String, String> configuration = configurations.get(type);",
          "2955:       if (configuration == null) {",
          "2956:         configuration = new HashMap<>(allLevelMergedConfig);",
          "2957:       } else {",
          "2958:         Map<String, String> mergedConfig = configHelper.getMergedConfig(allLevelMergedConfig, configuration);",
          "2959:         configuration.clear();",
          "2960:         configuration.putAll(mergedConfig);",
          "2961:       }",
          "2963:       configurations.put(type, configuration);",
          "2964:     }",
          "2966:     return configurations;",
          "2967:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java||ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java -> ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2122:     return configurationAttributesTreeMap;",
          "2123:   }",
          "2125: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2135:   public Map<String, Map<String, String>> calculateExistingConfigurations(AmbariManagementController ambariManagementController, Cluster cluster) throws AmbariException {",
          "2136:     final Map<String, Map<String, String>> configurations = new HashMap<>();",
          "2137:     for (Host host : cluster.getHosts()) {",
          "2138:       configurations.putAll(calculateExistingConfigurations(ambariManagementController, cluster, host.getHostName()));",
          "2139:     }",
          "2140:     return configurations;",
          "2141:   }",
          "2152:   public Map<String, Map<String, String>> calculateExistingConfigurations(AmbariManagementController ambariManagementController, Cluster cluster, String hostname) throws AmbariException {",
          "2157:     final Map<String, Map<String, String>> configurations = new HashMap<>();",
          "2158:     final Map<String, Map<String, String>> configurationTags = ambariManagementController.findConfigurationTagsWithOverrides(cluster, hostname);",
          "2159:     final Map<String, Map<String, String>> configProperties = getEffectiveConfigProperties(cluster, configurationTags);",
          "2163:     for (Map.Entry<String, Map<String, String>> entry : configProperties.entrySet()) {",
          "2164:       String type = entry.getKey();",
          "2165:       Map<String, String> allLevelMergedConfig = entry.getValue();",
          "2166:       Map<String, String> configuration = configurations.get(type);",
          "2168:       if (configuration == null) {",
          "2169:         configuration = new HashMap<>(allLevelMergedConfig);",
          "2170:       } else {",
          "2171:         Map<String, String> mergedConfig = getMergedConfig(allLevelMergedConfig, configuration);",
          "2172:         configuration.clear();",
          "2173:         configuration.putAll(mergedConfig);",
          "2174:       }",
          "2176:       configurations.put(type, configuration);",
          "2177:     }",
          "2179:     return configurations;",
          "2180:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import java.util.concurrent.locks.ReentrantLock;",
          "34: import org.apache.ambari.server.AmbariException;",
          "35: import org.apache.ambari.server.ObjectNotFoundException;",
          "36: import org.apache.ambari.server.ServiceComponentNotFoundException;",
          "37: import org.apache.ambari.server.api.services.AmbariMetaInfo;",
          "38: import org.apache.ambari.server.controller.ServiceResponse;",
          "39: import org.apache.ambari.server.controller.internal.AmbariServerSSOConfigurationHandler;",
          "40: import org.apache.ambari.server.controller.internal.DeleteHostComponentStatusMetaData;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import org.apache.ambari.server.AmbariRuntimeException;",
          "39: import org.apache.ambari.server.collections.Predicate;",
          "40: import org.apache.ambari.server.collections.PredicateUtils;",
          "41: import org.apache.ambari.server.controller.AmbariManagementController;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:   private boolean isCredentialStoreSupported;",
          "83:   private boolean isCredentialStoreRequired;",
          "84:   private final boolean ssoIntegrationSupported;",
          "86:   private final boolean ssoRequiresKerberos;",
          "87:   private AmbariMetaInfo ambariMetaInfo;",
          "88:   private AtomicReference<MaintenanceState> maintenanceState = new AtomicReference<>();",
          "",
          "[Removed Lines]",
          "85:   private final String ssoEnabledConfiguration;",
          "",
          "[Added Lines]",
          "89:   private final Predicate ssoEnabledConfiguration;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:   @Inject",
          "91:   private ServiceConfigDAO serviceConfigDAO;",
          "93:   @Inject",
          "94:   private ConfigHelper configHelper;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:   @Inject",
          "98:   private AmbariManagementController ambariManagementController;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150:     isCredentialStoreSupported = sInfo.isCredentialStoreSupported();",
          "151:     isCredentialStoreRequired = sInfo.isCredentialStoreRequired();",
          "152:     ssoIntegrationSupported = sInfo.isSingleSignOnSupported();",
          "154:     ssoRequiresKerberos = sInfo.isKerberosRequiredForSingleSignOnIntegration();",
          "156:     persist(serviceEntity);",
          "157:   }",
          "159:   @AssistedInject",
          "160:   ServiceImpl(@Assisted Cluster cluster, @Assisted ClusterServiceEntity serviceEntity,",
          "161:       ClusterDAO clusterDAO, ClusterServiceDAO clusterServiceDAO,",
          "",
          "[Removed Lines]",
          "153:     ssoEnabledConfiguration = sInfo.getSingleSignOnEnabledConfiguration();",
          "",
          "[Added Lines]",
          "160:     ssoEnabledConfiguration = compileSsoEnabledPredicate(sInfo);",
          "166:   private Predicate compileSsoEnabledPredicate(ServiceInfo sInfo) {",
          "167:     if (StringUtils.isNotBlank(sInfo.getSingleSignOnEnabledTest())) {",
          "168:       if (StringUtils.isNotBlank(sInfo.getSingleSignOnEnabledConfiguration())) {",
          "169:         LOG.warn(\"Both <ssoEnabledTest> and <enabledConfiguration> have been declared within <sso> for {}; using <ssoEnabledTest>\", serviceName);",
          "170:       }",
          "171:       return PredicateUtils.fromJSON(sInfo.getSingleSignOnEnabledTest());",
          "172:     } else if (StringUtils.isNotBlank(sInfo.getSingleSignOnEnabledConfiguration())) {",
          "173:       LOG.warn(\"Only <enabledConfiguration> have been declared  within <sso> for {}; converting its value to an equals predicate\", serviceName);",
          "174:       final String equalsPredicateJson = \"{\\\"equals\\\": [\\\"\" + sInfo.getSingleSignOnEnabledConfiguration() + \"\\\", \\\"true\\\"]}\";",
          "175:       return PredicateUtils.fromJSON(equalsPredicateJson);",
          "176:     }",
          "177:     return null;",
          "178:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "200:     isCredentialStoreRequired = sInfo.isCredentialStoreRequired();",
          "201:     displayName = sInfo.getDisplayName();",
          "202:     ssoIntegrationSupported = sInfo.isSingleSignOnSupported();",
          "204:     ssoRequiresKerberos = sInfo.isKerberosRequiredForSingleSignOnIntegration();",
          "205:   }",
          "",
          "[Removed Lines]",
          "203:     ssoEnabledConfiguration = sInfo.getSingleSignOnEnabledConfiguration();",
          "",
          "[Added Lines]",
          "224:     ssoEnabledConfiguration = compileSsoEnabledPredicate(sInfo);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "713:   }",
          "715:   public boolean isSsoIntegrationEnabled() {",
          "721:   }",
          "723:   private boolean isKerberosRequredForSsoIntegration() {",
          "724:     return ssoRequiresKerberos;",
          "725:   }",
          "732: }",
          "",
          "[Removed Lines]",
          "716:     return ssoIntegrationSupported && ssoEnabledConfigValid() && \"true\".equalsIgnoreCase(ssoEnabledConfigValue());",
          "717:   }",
          "719:   private boolean ssoEnabledConfigValid() {",
          "720:     return ssoEnabledConfiguration != null && ssoEnabledConfiguration.split(\"/\").length == 2;",
          "727:   private String ssoEnabledConfigValue() {",
          "728:     String configType = ssoEnabledConfiguration.split(\"/\")[0];",
          "729:     String propertyName = ssoEnabledConfiguration.split(\"/\")[1];",
          "730:     return configHelper.getValueFromDesiredConfigurations(cluster, configType, propertyName);",
          "731:   }",
          "",
          "[Added Lines]",
          "737:     try {",
          "738:       return ssoIntegrationSupported && ssoEnabledConfiguration != null && ssoEnabledConfiguration.evaluate(configHelper.calculateExistingConfigurations(ambariManagementController, cluster));",
          "739:     } catch (AmbariException e) {",
          "740:       throw new AmbariRuntimeException(\"Error while evaulating if SSO integration is enabled\", e);",
          "741:     }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java||ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java -> ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "653:     return (singleSignOnInfo != null) && singleSignOnInfo.isSupported();",
          "654:   }",
          "656:   public String getSingleSignOnEnabledConfiguration() {",
          "657:     return singleSignOnInfo != null ? singleSignOnInfo.getEnabledConfiguration() : null;",
          "658:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "663:   public String getSingleSignOnEnabledTest() {",
          "664:     return singleSignOnInfo != null ? singleSignOnInfo.getSsoEnabledTest() : null;",
          "665:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/SingleSignOnInfo.java||ambari-server/src/main/java/org/apache/ambari/server/state/SingleSignOnInfo.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/SingleSignOnInfo.java -> ambari-server/src/main/java/org/apache/ambari/server/state/SingleSignOnInfo.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import javax.xml.bind.annotation.XmlAccessorType;",
          "23: import javax.xml.bind.annotation.XmlElement;",
          "25: import com.google.common.base.MoreObjects;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import org.apache.ambari.server.collections.PredicateUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:   @XmlElement(name = \"enabledConfiguration\")",
          "54:   private String enabledConfiguration = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:   @XmlElement(name = \"ssoEnabledTest\")",
          "73:   private String ssoEnabledTest = null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:     this.enabledConfiguration = enabledConfiguration;",
          "127:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158:   public String getSsoEnabledTest() {",
          "159:     return ssoEnabledTest;",
          "160:   }",
          "169:   public void setSsoEnabledTest(String ssoEnabledTest) {",
          "170:     this.ssoEnabledTest = ssoEnabledTest;",
          "171:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150:     return MoreObjects.toStringHelper(this)",
          "151:         .add(\"supported\", supported)",
          "152:         .add(\"enabledConfiguration\", enabledConfiguration)",
          "153:         .add(\"kerberosRequired\", kerberosRequired)",
          "154:         .toString();",
          "155:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:         .add(\"ssoEnabledTest\", ssoEnabledTest)",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3537:           .once();",
          "3539:       final ConfigHelper configHelper = injector.getInstance(ConfigHelper.class);",
          "3541:           .andReturn(new HashMap<String, Map<String, String>>() {",
          "3542:             {",
          "3543:               put(\"cluster-env\", new HashMap<String, String>() {{",
          "",
          "[Removed Lines]",
          "3540:       expect(configHelper.getEffectiveConfigProperties(anyObject(Cluster.class), EasyMock.anyObject()))",
          "",
          "[Added Lines]",
          "3540:       expect(configHelper.calculateExistingConfigurations(eq(ambariManagementController), anyObject(Cluster.class), EasyMock.anyObject()))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3710:         .once();",
          "3712:     final ConfigHelper configHelper = injector.getInstance(ConfigHelper.class);",
          "3714:         .andReturn(new HashMap<String, Map<String, String>>() {",
          "3715:           {",
          "3716:             put(\"cluster-env\", new HashMap<String, String>() {",
          "",
          "[Removed Lines]",
          "3713:     expect(configHelper.getEffectiveConfigProperties(anyObject(Cluster.class), EasyMock.anyObject()))",
          "",
          "[Added Lines]",
          "3713:     expect(configHelper.calculateExistingConfigurations(eq(ambariManagementController), anyObject(Cluster.class), EasyMock.anyObject()))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3927:         .anyTimes();",
          "3929:     final ConfigHelper configHelper = injector.getInstance(ConfigHelper.class);",
          "3931:         .andReturn(new HashMap<String, Map<String, String>>() {",
          "3932:           {",
          "3933:             put(\"cluster-env\", new HashMap<String, String>() {{",
          "",
          "[Removed Lines]",
          "3930:     expect(configHelper.getEffectiveConfigProperties(anyObject(Cluster.class), EasyMock.anyObject()))",
          "",
          "[Added Lines]",
          "3930:     expect(configHelper.calculateExistingConfigurations(eq(ambariManagementController), anyObject(Cluster.class), EasyMock.anyObject()))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3233d009445d524b93255a6a35de186416fb0ba6",
      "candidate_info": {
        "commit_hash": "3233d009445d524b93255a6a35de186416fb0ba6",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/3233d009445d524b93255a6a35de186416fb0ba6",
        "files": [
          "ambari-web/app/controllers/installer.js"
        ],
        "message": "AMBARI-25439. XSS vulnerability for repo check hint",
        "before_after_code_files": [
          "ambari-web/app/controllers/installer.js||ambari-web/app/controllers/installer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/installer.js||ambari-web/app/controllers/installer.js": [
          "File: ambari-web/app/controllers/installer.js -> ambari-web/app/controllers/installer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "921:       var os = selectedStack.get('operatingSystems').findProperty('id', params.osId);",
          "922:       var repo = os.get('repositories').findProperty('repoId', params.repoId);",
          "923:       if (repo) {",
          "924:         repo.setProperties({",
          "925:           validation: 'INVALID',",
          "928:         });",
          "929:       }",
          "930:     }",
          "",
          "[Removed Lines]",
          "926:           errorTitle: request.status + \":\" + request.statusText,",
          "927:           errorContent: $.parseJSON(request.responseText) ? $.parseJSON(request.responseText).message : \"\"",
          "",
          "[Added Lines]",
          "924:         var title = Ember.Handlebars.Utils.escapeExpression(request.status + \":\" + request.statusText);",
          "925:         var content =  Ember.Handlebars.Utils.escapeExpression($.parseJSON(request.responseText) ? $.parseJSON(request.responseText).message : \"\");",
          "928:           errorTitle: title,",
          "929:           errorContent: content",
          "",
          "---------------"
        ]
      }
    }
  ]
}