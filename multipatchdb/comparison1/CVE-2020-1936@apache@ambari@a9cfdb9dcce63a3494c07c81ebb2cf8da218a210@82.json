{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1aeb0ea7fba4b293b297da096cbed1d0ef2a9d10",
      "candidate_info": {
        "commit_hash": "1aeb0ea7fba4b293b297da096cbed1d0ef2a9d10",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/1aeb0ea7fba4b293b297da096cbed1d0ef2a9d10",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java"
        ],
        "message": "Revert \"[AMBARI-25124] ambari-audit.log entries span multiple lines (apappu)\"\n\nThis reverts commit ba58df239c1ee196661c67f309e294d43f93506b.",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     protected void buildAuditMessage(StringBuilder builder) {",
          "63:       super.buildAuditMessage(builder);",
          "67:       if (roles != null && !roles.isEmpty()) {",
          "68:         List<String> lines = new LinkedList<>();",
          "69:         for (Map.Entry<String, List<String>> entry : roles.entrySet()) {",
          "70:           lines.add(\"    \" + entry.getKey() + \": \" + StringUtils.join(entry.getValue(), \", \"));",
          "71:         }",
          "73:       }",
          "74:       builder.append(\"), Status(\")",
          "75:         .append(reasonOfFailure == null ? \"Success\" : \"Failed\");",
          "",
          "[Removed Lines]",
          "65:       builder.append(\", Operation(User login), Roles(\");",
          "72:         builder.append(StringUtils.join(lines, \" , \"));",
          "",
          "[Added Lines]",
          "65:       builder.append(\", Operation(User login), Roles(\").append(System.lineSeparator());",
          "72:         builder.append(StringUtils.join(lines, System.lineSeparator()));",
          "73:         builder.append(System.lineSeparator());",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:         .append(repoVersion)",
          "89:         .append(\"), Repositories(\");",
          "92:       for (Map.Entry<String, List<Map<String, String>>> repo : repos.entrySet()) {",
          "93:         builder.append(\"Operating system: \").append(repo.getKey());",
          "95:         for (Map<String, String> properties : repo.getValue()) {",
          "96:           builder.append(\"    Repository ID(\").append(properties.get(\"repo_id\"));",
          "97:           builder.append(\"), Repository name(\").append(properties.get(\"repo_name\"));",
          "98:           builder.append(\"), Base url(\").append(properties.get(\"base_url\")).append(\")\");",
          "100:         }",
          "101:       }",
          "",
          "[Removed Lines]",
          "94:         builder.append(\" ( \");",
          "99:           builder.append(\" ) \");",
          "",
          "[Added Lines]",
          "91:       if (!repos.isEmpty()) {",
          "92:         builder.append(System.lineSeparator());",
          "93:       }",
          "97:         builder.append(System.lineSeparator());",
          "102:           builder.append(System.lineSeparator());",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:         .append(repoVersion)",
          "90:         .append(\"), Repositories(\");",
          "94:       for (Map.Entry<String, List<Map<String, String>>> repo : repos.entrySet()) {",
          "95:         builder.append(\"Operating system: \").append(repo.getKey());",
          "97:         for (Map<String, String> properties : repo.getValue()) {",
          "98:           builder.append(\"    Repository ID(\").append(properties.get(\"repo_id\"));",
          "99:           builder.append(\"), Repository name(\").append(properties.get(\"repo_name\"));",
          "100:           builder.append(\"), Base url(\").append(properties.get(\"base_url\")).append(\")\");",
          "102:         }",
          "103:       }",
          "",
          "[Removed Lines]",
          "96:         builder.append(\" ( \");",
          "101:           builder.append(\" ) \");",
          "",
          "[Added Lines]",
          "92:       if (!repos.isEmpty()) {",
          "93:         builder.append(System.lineSeparator());",
          "94:       }",
          "98:         builder.append(System.lineSeparator());",
          "103:           builder.append(System.lineSeparator());",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:       roleSet.addAll(roles.keySet());",
          "82:       builder.append(\", Roles(\");",
          "85:       List<String> lines = new LinkedList<>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:       if (!users.isEmpty() || !groups.isEmpty()|| !roles.isEmpty()) {",
          "84:         builder.append(System.lineSeparator());",
          "85:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:         }",
          "98:       }",
          "102:       builder.append(\")\");",
          "103:     }",
          "",
          "[Removed Lines]",
          "100:       builder.append(StringUtils.join(lines, \" , \"));",
          "",
          "[Added Lines]",
          "102:       builder.append(StringUtils.join(lines, System.lineSeparator()));",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:       roleSet.addAll(roles.keySet());",
          "103:       builder.append(\", Permissions(\");",
          "106:       List<String> lines = new LinkedList<>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:       if (!users.isEmpty() || !groups.isEmpty() || !roles.isEmpty()) {",
          "105:         builder.append(System.lineSeparator());",
          "106:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:           lines.add(\"  Roles: \" + StringUtils.join(roles.get(role), \", \"));",
          "118:         }",
          "119:       }",
          "121:       builder.append(\")\");",
          "122:     }",
          "",
          "[Removed Lines]",
          "120:       builder.append(StringUtils.join(lines, \" , \"));",
          "",
          "[Added Lines]",
          "123:       builder.append(StringUtils.join(lines, System.lineSeparator()));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec2072e9e905aaa060452300b68c6a5f272b7d7b",
      "candidate_info": {
        "commit_hash": "ec2072e9e905aaa060452300b68c6a5f272b7d7b",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/ec2072e9e905aaa060452300b68c6a5f272b7d7b",
        "files": [
          "ambari-logsearch/ambari-logsearch-it/pom.xml",
          "ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/Solr.java",
          "ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/SolrDocumentMatcher.java",
          "ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/search/SearchServiceLogsTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/configsets/audit_logs/conf/managed-schema",
          "ambari-logsearch/ambari-logsearch-server/src/main/configsets/hadoop_logs/conf/managed-schema",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractDateRangeFacetQueryConverter.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java",
          "ambari-logsearch/ambari-logsearch-web/src/app/services/logs-filtering-utils.service.ts"
        ],
        "message": "AMBARI-24847 - Logsearch: Cannot search for a term that includes spaces or dashes (#2790)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/Solr.java||ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/Solr.java",
          "ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/SolrDocumentMatcher.java||ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/SolrDocumentMatcher.java",
          "ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/search/SearchServiceLogsTest.java||ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/search/SearchServiceLogsTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractDateRangeFacetQueryConverter.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractDateRangeFacetQueryConverter.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java",
          "ambari-logsearch/ambari-logsearch-web/src/app/services/logs-filtering-utils.service.ts||ambari-logsearch/ambari-logsearch-web/src/app/services/logs-filtering-utils.service.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/Solr.java||ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/Solr.java": [
          "File: ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/Solr.java -> ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/Solr.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.logsearch.solr;",
          "21: import static org.apache.ambari.logsearch.solr.SolrConstants.AuditLogConstants.AUDIT_EVTTIME;",
          "22: import static org.apache.ambari.logsearch.solr.SolrConstants.CommonLogConstants.ID;",
          "23: import static org.apache.ambari.logsearch.solr.SolrConstants.CommonLogConstants.LOG_MESSAGE;",
          "24: import static org.apache.ambari.logsearch.solr.SolrConstants.ServiceLogConstants.LEVEL;",
          "25: import static org.apache.ambari.logsearch.solr.SolrConstants.ServiceLogConstants.LOGTIME;",
          "27: import java.io.File;",
          "28: import java.io.IOException;",
          "29: import java.time.OffsetDateTime;",
          "30: import java.time.format.DateTimeFormatter;",
          "31: import java.util.Date;",
          "32: import java.util.List;",
          "34: import org.apache.commons.io.FileUtils;",
          "35: import org.apache.solr.client.solrj.SolrQuery;",
          "36: import org.apache.solr.client.solrj.SolrServerException;",
          "37: import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;",
          "38: import org.apache.solr.client.solrj.request.CoreAdminRequest;",
          "39: import org.apache.solr.client.solrj.response.PivotField;",
          "40: import org.apache.solr.client.solrj.response.QueryResponse;",
          "41: import org.apache.solr.common.SolrDocumentList;",
          "42: import org.apache.solr.common.SolrInputDocument;",
          "43: import org.apache.solr.common.util.NamedList;",
          "44: import org.apache.solr.core.NodeConfig;",
          "45: import org.apache.solr.core.SolrResourceLoader;",
          "47: public class Solr {",
          "48:   public static final DateTimeFormatter SOLR_DATETIME_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSX\");",
          "50:   public static Solr core(String coreName) throws IOException, SolrServerException {",
          "51:     assert coreName != null;",
          "53:     String targetLocation = Solr.class.getProtectionDomain().getCodeSource().getLocation().getFile() + \"..\";",
          "54:     String logsearchConfigSetDir = targetLocation + \"/../../ambari-logsearch-server/src/main/configsets\";",
          "55:     File targetConfigSetDir = new File(targetLocation + \"/configsets\");",
          "56:     if (targetConfigSetDir.exists())",
          "57:       FileUtils.deleteDirectory(targetConfigSetDir);",
          "58:     FileUtils.copyDirectory(new File(logsearchConfigSetDir), targetConfigSetDir);",
          "59:     String solrHome = targetLocation + \"/solr\";",
          "60:     File solrHomeDir = new File(solrHome);",
          "61:     if (solrHomeDir.exists())",
          "62:       FileUtils.deleteDirectory(solrHomeDir);",
          "63:     solrHomeDir.mkdirs();",
          "65:     SolrResourceLoader solrResourceLoader = new SolrResourceLoader(solrHomeDir.toPath());",
          "67:     NodeConfig config = new NodeConfig.NodeConfigBuilder(\"embeddedSolrServerNode\", solrResourceLoader)",
          "68:             .setConfigSetBaseDirectory(targetConfigSetDir.getAbsolutePath())",
          "69:             .build();",
          "71:     EmbeddedSolrServer embeddedSolrServer = new EmbeddedSolrServer(config, coreName);",
          "73:     CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();",
          "74:     createRequest.setCoreName(coreName);",
          "75:     createRequest.setConfigSet(coreName);",
          "76:     embeddedSolrServer.request(createRequest);",
          "78:     return new Solr(embeddedSolrServer);",
          "79:   }",
          "81:   private final EmbeddedSolrServer server;",
          "83:   private Solr(EmbeddedSolrServer solrServer) {",
          "84:     server = solrServer;",
          "85:   }",
          "87:   public void addDoc(String id, String logMessage) throws SolrServerException, IOException {",
          "88:     SolrInputDocument doc = new SolrInputDocument();",
          "89:     doc.addField(ID, id);",
          "90:     doc.addField(LOGTIME, new Date(OffsetDateTime.now().toInstant().toEpochMilli()));",
          "91:     doc.addField(AUDIT_EVTTIME, new Date(OffsetDateTime.now().toInstant().toEpochMilli()));",
          "92:     doc.addField(LOG_MESSAGE, logMessage);",
          "93:     doc.addField(LEVEL, \"INFO\");",
          "94:     server.add(doc);",
          "95:     server.commit();",
          "96:   }",
          "98:   public SolrDocumentList executeQuery(SolrQuery solrQuery) throws SolrServerException, IOException {",
          "99:     return server.query(solrQuery).getResults();",
          "100:   }",
          "102:   public NamedList<List<PivotField>> executeFacetQuery(SolrQuery solrQuery) throws SolrServerException, IOException {",
          "103:     QueryResponse qResp = server.query(solrQuery);",
          "104:     return qResp.getFacetPivot();",
          "105:   }",
          "107:   public void clear() throws Exception {",
          "108:     server.deleteByQuery(\"*:*\");",
          "109:     server.commit();",
          "110:   }",
          "112:   public void close() throws IOException {",
          "113:     server.close();",
          "114:   }",
          "115: }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/SolrDocumentMatcher.java||ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/SolrDocumentMatcher.java": [
          "File: ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/SolrDocumentMatcher.java -> ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/SolrDocumentMatcher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.logsearch.solr;",
          "21: import org.apache.solr.common.SolrDocument;",
          "22: import org.hamcrest.Description;",
          "23: import org.hamcrest.TypeSafeDiagnosingMatcher;",
          "25: public class SolrDocumentMatcher extends TypeSafeDiagnosingMatcher<SolrDocument> {",
          "27:   public static SolrDocumentMatcher solrDoc(String expectedId) {",
          "28:     return new SolrDocumentMatcher(expectedId);",
          "29:   }",
          "31:   private final String expectedId;",
          "33:   private SolrDocumentMatcher(String expectedId) {",
          "34:     this.expectedId = expectedId;",
          "35:   }",
          "37:   @Override",
          "38:   protected boolean matchesSafely(SolrDocument item, Description mismatchDescription) {",
          "39:     if (!item.containsKey(\"id\")) {",
          "40:       mismatchDescription.appendText(\"SolrDocument without 'id' field.\");",
          "41:       return false;",
          "42:     }",
          "43:     if (!expectedId.equals(item.get(\"id\"))) {",
          "44:       describe(mismatchDescription, item.get(\"id\"));",
          "45:       return false;",
          "46:     }",
          "47:     return true;",
          "48:   }",
          "50:   @Override",
          "51:   public void describeTo(Description description) {",
          "52:     describe(description, expectedId);",
          "53:   }",
          "55:   private void describe(Description description, Object id) {",
          "56:     description.appendText(\"SolrDocument[id=\");",
          "57:     description.appendValue(id);",
          "58:     description.appendText(\"]\");",
          "59:   }",
          "60: }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/search/SearchServiceLogsTest.java||ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/search/SearchServiceLogsTest.java": [
          "File: ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/search/SearchServiceLogsTest.java -> ambari-logsearch/ambari-logsearch-it/src/test/java/org/apache/ambari/logsearch/solr/search/SearchServiceLogsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.logsearch.solr.search;",
          "21: import static org.apache.ambari.logsearch.solr.Solr.SOLR_DATETIME_FORMATTER;",
          "22: import static org.apache.ambari.logsearch.solr.SolrDocumentMatcher.solrDoc;",
          "23: import static org.hamcrest.MatcherAssert.assertThat;",
          "24: import static org.hamcrest.Matchers.hasItem;",
          "25: import static org.hamcrest.Matchers.hasSize;",
          "26: import static org.hamcrest.core.Is.is;",
          "28: import java.io.IOException;",
          "29: import java.time.OffsetDateTime;",
          "30: import java.time.ZoneId;",
          "31: import java.util.ArrayList;",
          "32: import java.util.List;",
          "34: import org.apache.ambari.logsearch.converter.BaseServiceLogRequestQueryConverter;",
          "35: import org.apache.ambari.logsearch.converter.ServiceLogLevelDateRangeRequestQueryConverter;",
          "36: import org.apache.ambari.logsearch.model.request.impl.BaseServiceLogRequest;",
          "37: import org.apache.ambari.logsearch.model.request.impl.ServiceGraphRequest;",
          "38: import org.apache.ambari.logsearch.model.request.impl.query.BaseServiceLogQueryRequest;",
          "39: import org.apache.ambari.logsearch.model.request.impl.query.ServiceGraphQueryRequest;",
          "40: import org.apache.ambari.logsearch.solr.Solr;",
          "41: import org.apache.solr.client.solrj.SolrServerException;",
          "42: import org.apache.solr.client.solrj.response.PivotField;",
          "43: import org.apache.solr.common.SolrDocument;",
          "44: import org.apache.solr.common.SolrDocumentList;",
          "45: import org.apache.solr.common.util.NamedList;",
          "46: import org.junit.After;",
          "47: import org.junit.AfterClass;",
          "48: import org.junit.BeforeClass;",
          "49: import org.junit.Test;",
          "50: import org.springframework.data.solr.core.DefaultQueryParser;",
          "51: import org.springframework.data.solr.core.query.SimpleQuery;",
          "53: public class SearchServiceLogsTest {",
          "54:   private static Solr solr;",
          "56:   private final BaseServiceLogRequestQueryConverter requestQueryConverter = new BaseServiceLogRequestQueryConverter();",
          "58:   @BeforeClass",
          "59:   public static void setUp() throws Exception {",
          "60:     solr = Solr.core(\"hadoop_logs\");",
          "61:   }",
          "63:   @AfterClass",
          "64:   public static void stopSolr() throws Exception {",
          "65:     solr.close();",
          "66:   }",
          "68:   @After",
          "69:   public void tearDown() throws Exception {",
          "70:     solr.clear();",
          "71:   }",
          "73:   @Test",
          "74:   public void testIncludeLogMessageFilter() throws Exception {",
          "75:     solr.addDoc(\"0\", \"Unhandled exception\");",
          "76:     solr.addDoc(\"1\", \"exception occurred\");",
          "77:     solr.addDoc(\"2\", \"exception\");",
          "78:     solr.addDoc(\"3\", \"Unhandled error\");",
          "79:     solr.addDoc(\"4\", \"Error occurred\");",
          "81:     BaseServiceLogRequest request = new BaseServiceLogQueryRequest();",
          "82:     request.setIncludeQuery(\"[{\\\"log_message\\\":\\\"exception\\\"}]\");",
          "83:     ArrayList<SolrDocument> found = executeQuery(request);",
          "85:     assertThat(found, hasSize(3));",
          "86:     assertThat(found, hasItem(solrDoc(\"0\")));",
          "87:     assertThat(found, hasItem(solrDoc(\"1\")));",
          "88:     assertThat(found, hasItem(solrDoc(\"2\")));",
          "89:   }",
          "91:   @Test",
          "92:   public void testIncludeBlankLogMessageFilter() throws Exception {",
          "93:     solr.addDoc(\"0\", \"\");",
          "94:     solr.addDoc(\"1\", \"exception occurred\");",
          "96:     BaseServiceLogRequest request = new BaseServiceLogQueryRequest();",
          "97:     request.setIncludeQuery(\"[{\\\"log_message\\\":\\\"\\\\\\\"\\\\\\\"\\\"}]\");",
          "98:     ArrayList<SolrDocument> found = executeQuery(request);",
          "100:     assertThat(found, hasSize(0));",
          "101:   }",
          "103:   @Test",
          "104:   public void testIncludeQuotedSpaceLogMessageFilter() throws Exception {",
          "105:     solr.addDoc(\"0\", \" \");",
          "106:     solr.addDoc(\"1\", \"exception occurred\");",
          "108:     BaseServiceLogRequest request = new BaseServiceLogQueryRequest();",
          "109:     request.setIncludeQuery(\"[{\\\"log_message\\\":\\\"\\\\\\\" \\\\\\\"\\\"}]\");",
          "110:     ArrayList<SolrDocument> found = executeQuery(request);",
          "112:     assertThat(found, hasSize(0));",
          "113:   }",
          "115:   @Test",
          "116:   public void testIncludeSpaceLogMessageFilter() throws Exception {",
          "117:     solr.addDoc(\"0\", \" \");",
          "118:     solr.addDoc(\"1\", \"exception occurred\");",
          "120:     BaseServiceLogRequest request = new BaseServiceLogQueryRequest();",
          "121:     request.setIncludeQuery(\"[{\\\"log_message\\\":\\\" \\\"}]\");",
          "122:     ArrayList<SolrDocument> found = executeQuery(request);",
          "124:     assertThat(found, hasSize(2));",
          "125:   }",
          "127:   private SolrDocumentList executeQuery(BaseServiceLogRequest request) throws IOException, SolrServerException {",
          "128:     SimpleQuery simpleQuery = requestQueryConverter.convert(request);",
          "129:     assert simpleQuery != null;",
          "130:     return solr.executeQuery(new DefaultQueryParser().doConstructSolrQuery(simpleQuery));",
          "131:   }",
          "134:   @Test",
          "135:   public void testIncludeMultipleLogMessageFilterContainsWildcard() throws Exception {",
          "136:     solr.addDoc(\"0\", \"Unhandled exception\");",
          "137:     solr.addDoc(\"1\", \"exception occurred\");",
          "138:     solr.addDoc(\"2\", \"exception\");",
          "139:     solr.addDoc(\"3\", \"Unhandled error\");",
          "140:     solr.addDoc(\"4\", \"Error occurred\");",
          "142:     BaseServiceLogRequest request = new BaseServiceLogQueryRequest();",
          "143:     request.setIncludeQuery(\"[{\\\"log_message\\\":\\\"exceptio*\\\"},{\\\"log_message\\\":\\\"unha*\\\"}]\");",
          "144:     SolrDocumentList found = executeQuery(request);",
          "146:     assertThat(found, hasSize(1));",
          "147:     assertThat(found, hasItem(solrDoc(\"0\")));",
          "148:   }",
          "150:   @Test",
          "151:   public void testIncludeMultipleTerms() throws Exception {",
          "152:     solr.addDoc(\"0\", \"At line 112 an unhandled exception occurred when\");",
          "153:     solr.addDoc(\"1\", \"exception occurred\");",
          "154:     solr.addDoc(\"2\", \"exception\");",
          "155:     solr.addDoc(\"3\", \"Unhandled error\");",
          "156:     solr.addDoc(\"4\", \"Error occurred\");",
          "158:     BaseServiceLogRequest request = new BaseServiceLogQueryRequest();",
          "159:     request.setIncludeQuery(\"[{\\\"log_message\\\":\\\"\\\\\\\"Unhandled exception\\\\\\\"\\\"}]\");",
          "160:     SolrDocumentList found = executeQuery(request);",
          "162:     assertThat(found, hasSize(1));",
          "163:     assertThat(found, hasItem(solrDoc(\"0\")));",
          "164:   }",
          "166:   @Test",
          "167:   public void testIncludeMultipleTermsDelimitedByDash() throws Exception {",
          "168:     solr.addDoc(\"0\", \"Unhandled exception\");",
          "169:     solr.addDoc(\"1\", \"At line 112 an unhandled-exception occurred when\");",
          "170:     solr.addDoc(\"2\", \"exception occurred\");",
          "171:     solr.addDoc(\"3\", \"exception\");",
          "172:     solr.addDoc(\"4\", \"Unhandled error\");",
          "173:     solr.addDoc(\"5\", \"Error occurred\");",
          "175:     BaseServiceLogRequest request = new BaseServiceLogQueryRequest();",
          "176:     request.setIncludeQuery(\"[{\\\"log_message\\\":\\\"\\\\\\\"Unhandled-exception\\\\\\\"\\\"}]\");",
          "177:     SolrDocumentList found = executeQuery(request);",
          "179:     assertThat(found, hasSize(1));",
          "180:     assertThat(found, hasItem(solrDoc(\"1\")));",
          "181:   }",
          "183:   @Test",
          "184:   public void testIncludeMultipleTermsDelimitedByPlusSign() throws Exception {",
          "185:     solr.addDoc(\"0\", \"Unhandled exception\");",
          "186:     solr.addDoc(\"1\", \"Unhandled+exception\");",
          "187:     solr.addDoc(\"2\", \"Unhandled-exception\");",
          "188:     solr.addDoc(\"3\", \"exception occurred\");",
          "189:     solr.addDoc(\"4\", \"exception\");",
          "190:     solr.addDoc(\"5\", \"Unhandled error\");",
          "191:     solr.addDoc(\"6\", \"Error occurred\");",
          "193:     BaseServiceLogRequest request = new BaseServiceLogQueryRequest();",
          "194:     request.setIncludeQuery(\"[{\\\"log_message\\\":\\\"\\\\\\\"Unhandled+exception\\\\\\\"\\\"}]\");",
          "195:     SolrDocumentList found = executeQuery(request);",
          "197:     assertThat(found, hasSize(1));",
          "198:     assertThat(found, hasItem(solrDoc(\"1\")));",
          "199:   }",
          "201:   @Test",
          "202:   public void testIncludeALongMessage() throws Exception {",
          "203:     solr.addDoc(\"6\", \"[   ] org.apache.solr.cloud.autoscaling.OverseerTriggerThread (OverseerTriggerThread.java:400) - Error in trigger 'index_size_trigger' configuration, trigger config ignored: {\\\\r\\\\n  \\\\\\\"aboveBytes\\\\\\\":53687091200,\\\\r\\\\n  \\\\\\\"aboveOp\\\\\\\":\\\\\\\"SPLITSHARD\\\\\\\",\\\\r\\\\n  \\\\\\\"event\\\\\\\":\\\\\\\"indexSize\\\\\\\",\\\\r\\\\n  \\\\\\\"waitFor\\\\\\\":1,\\\\r\\\\n  \\\\\\\"actions\\\\\\\":[\\\\r\\\\n    {\\\\r\\\\n      \\\\\\\"name\\\\\\\":\\\\\\\"compute_plan\\\\\\\",\\\\r\\\\n      \\\\\\\"class\\\\\\\":\\\\\\\"solr.ComputePlanAction\\\\\\\"},\\\\r\\\\n    {\\\\r\\\\n      \\\\\\\"name\\\\\\\":\\\\\\\"execute_plan\\\\\\\",\\\\r\\\\n      \\\\\\\"class\\\\\\\":\\\\\\\"solr.ExecutePlanAction\\\\\\\"}],\\\\r\\\\n  \\\\\\\"enabled\\\\\\\":true}\\\\r\\\\norg.apache.solr.cloud.autoscaling.TriggerValidationException: null\\\\r\\\\n\\\\tat org.apache.solr.cloud.autoscaling.TriggerBase.configure(TriggerBase.java:118) ~[solr-core-7.5.0.jar:7.5.0 b5bf70b7e32d7ddd9742cc821d471c5fabd4e3df - jimczi - 2018-09-18 13:07:55]\\\\r\\\\n\\\\tat org.apache.solr.cloud.autoscaling.IndexSizeTrigger.configure(IndexSizeTrigger.java:87) ~[solr-core-7.5.0.jar:7.5.0 b5bf70b7e32d7ddd9742cc821d471c5fabd4e3df - jimczi - 2018-09-18 13:07:55]\\\\r\\\\n\\\\tat org.apache.solr.cloud.autoscaling.AutoScaling$TriggerFactoryImpl.create(AutoScaling.java:189) ~[solr-core-7.5.0.jar:7.5.0 b5bf70b7e32d7ddd9742cc821d471c5fabd4e3df - jimczi - 2018-09-18 13:07:55]\\\\r\\\\n\\\\tat org.apache.solr.cloud.autoscaling.OverseerTriggerThread.loadTriggers(OverseerTriggerThread.java:398) [solr-core-7.5.0.jar:7.5.0 b5bf70b7e32d7ddd9742cc821d471c5fabd4e3df - jimczi - 2018-09-18 13:07:55]\\\\r\\\\n\\\\tat org.apache.solr.cloud.autoscaling.OverseerTriggerThread.refreshAutoScalingConf(OverseerTriggerThread.java:335) [solr-core-7.5.0.jar:7.5.0 b5bf70b7e32d7ddd9742cc821d471c5fabd4e3df - jimczi - 2018-09-18 13:07:55]\\\\r\\\\n\\\\tat org.apache.solr.cloud.autoscaling.OverseerTriggerThread.run(OverseerTriggerThread.java:161) [solr-core-7.5.0.jar:7.5.0 b5bf70b7e32d7ddd9742cc821d471c5fabd4e3df - jimczi - 2018-09-18 13:07:55]\\\\r\\\\n\\\\tat java.lang.Thread.run(Thread.java:745) [?:1.8.0_112]\");",
          "204:     solr.addDoc(\"7\", \"[   ] org.apache.solr.cloud.autoscaling.OverseerTriggerThread (OverseerTriggerThread.java:422) - Something else\");",
          "205:     solr.addDoc(\"8\", \"[   ] org.apache.solr.cloud.OverseerTriggerThread (OverseerTriggerThread.java:400) - Different package\");",
          "207:     BaseServiceLogRequest request = new BaseServiceLogQueryRequest();",
          "208:     request.setIncludeQuery(\"[{\\\"log_message\\\":\\\"\\\\\\\"org.apache.solr.cloud.autoscaling.OverseerTriggerThread (OverseerTriggerThread.java:400)\\\\\\\"\\\"}]\");",
          "209:     SolrDocumentList found = executeQuery(request);",
          "211:     assertThat(found, hasSize(1));",
          "212:     assertThat(found, hasItem(solrDoc(\"6\")));",
          "213:   }",
          "215:   @Test",
          "216:   public void testIncludeMultipleWhitespaceDelimitedWords() throws Exception {",
          "217:     solr.addDoc(\"0\", \"At line 112 an unhandled exception occurred when\");",
          "218:     solr.addDoc(\"1\", \"At line 112 an unhandled  exception occurred when\");",
          "219:     solr.addDoc(\"2\", \"At line 112 an unhandled   \\texception occurred when\");",
          "220:     solr.addDoc(\"3\", \"At line 112 an exception occurred when\");",
          "222:     BaseServiceLogRequest request = new BaseServiceLogQueryRequest();",
          "223:     request.setIncludeQuery(\"[{\\\"log_message\\\":\\\"\\\\\\\"Unhandled  exception\\\\\\\"\\\"}]\");",
          "224:     SolrDocumentList found = executeQuery(request);",
          "226:     assertThat(found, hasSize(3));",
          "227:     assertThat(found, hasItem(solrDoc(\"0\")));",
          "228:     assertThat(found, hasItem(solrDoc(\"1\")));",
          "229:     assertThat(found, hasItem(solrDoc(\"2\")));",
          "230:   }",
          "232:   @Test",
          "233:   public void testIncludeEMailAddress() throws Exception {",
          "234:     solr.addDoc(\"0\", \"Email address: john@hortonworks.com\");",
          "235:     solr.addDoc(\"1\", \"Another document\");",
          "237:     BaseServiceLogRequest request = new BaseServiceLogQueryRequest();",
          "238:     request.setIncludeQuery(\"[{\\\"log_message\\\":\\\"john@hortonworks.com\\\"}]\");",
          "239:     SolrDocumentList found = executeQuery(request);",
          "241:     assertThat(found, hasSize(1));",
          "242:     assertThat(found, hasItem(solrDoc(\"0\")));",
          "243:   }",
          "246:   private final ServiceLogLevelDateRangeRequestQueryConverter dateRangeRequestQueryConverter = new ServiceLogLevelDateRangeRequestQueryConverter();",
          "248:   @Test",
          "249:   public void testDateRangeRequestIncludeEMailAddress() throws Exception {",
          "250:     solr.addDoc(\"0\", \"Email address: john@hortonworks.com\");",
          "251:     solr.addDoc(\"1\", \"Another document doe@hortonworks.com\");",
          "253:     ServiceGraphRequest request = serviceGraphRequest(\"[{\\\"log_message\\\":\\\"john@hortonworks.com\\\"}]\");",
          "254:     NamedList<List<PivotField>> found = executeQuery(request);",
          "256:     assertThat(found.size(), is(1));",
          "257:     assertThat(found.get(\"level\").get(0).getCount(), is(1));",
          "258:   }",
          "260:   private ServiceGraphRequest serviceGraphRequest(String includeQuery) {",
          "261:     ServiceGraphRequest request = new ServiceGraphQueryRequest();",
          "262:     request.setFrom(SOLR_DATETIME_FORMATTER.format(OffsetDateTime.now(ZoneId.of(\"UTC\")).minusDays(1)));",
          "263:     request.setTo(SOLR_DATETIME_FORMATTER.format(OffsetDateTime.now(ZoneId.of(\"UTC\")).plusDays(1)));",
          "264:     request.setIncludeQuery(includeQuery);",
          "265:     return request;",
          "266:   }",
          "268:   private NamedList<List<PivotField>> executeQuery(ServiceGraphRequest request) throws IOException, SolrServerException {",
          "269:     return solr.executeFacetQuery(dateRangeRequestQueryConverter.convert(request));",
          "270:   }",
          "272:   @Test",
          "273:   public void testDateRangeRequestIncludeLogMessageFilter() throws Exception {",
          "274:     solr.addDoc(\"0\", \"Unhandled exception\");",
          "275:     solr.addDoc(\"1\", \"exception occurred\");",
          "276:     solr.addDoc(\"2\", \"exception\");",
          "277:     solr.addDoc(\"3\", \"Unhandled error\");",
          "278:     solr.addDoc(\"4\", \"Error occurred\");",
          "280:     ServiceGraphRequest request = serviceGraphRequest(\"[{\\\"log_message\\\":\\\"exception\\\"}]\");",
          "281:     NamedList<List<PivotField>> found = executeQuery(request);",
          "283:     assertThat(found.size(), is(1));",
          "284:     assertThat(found.get(\"level\").get(0).getCount(), is(3));",
          "285:   }",
          "287:   @Test",
          "288:   public void testDateRangeRequestIncludeMultipleLogMessageFilterContainsWildcard() throws Exception {",
          "289:     solr.addDoc(\"0\", \"Unhandled exception\");",
          "290:     solr.addDoc(\"1\", \"exception occurred\");",
          "291:     solr.addDoc(\"2\", \"exception\");",
          "292:     solr.addDoc(\"3\", \"Unhandled error\");",
          "293:     solr.addDoc(\"4\", \"Error occurred\");",
          "295:     ServiceGraphRequest request = serviceGraphRequest(\"[{\\\"log_message\\\":\\\"exceptio*\\\"},{\\\"log_message\\\":\\\"unha*\\\"}]\");",
          "296:     NamedList<List<PivotField>> found = executeQuery(request);",
          "298:     assertThat(found.size(), is(1));",
          "299:     assertThat(found.get(\"level\").get(0).getCount(), is(1));",
          "300:   }",
          "302:   @Test",
          "303:   public void testDateRangeRequestIncludeMultipleTerms() throws Exception {",
          "304:     solr.addDoc(\"0\", \"At line 112 an unhandled exception occurred when\");",
          "305:     solr.addDoc(\"1\", \"exception occurred\");",
          "306:     solr.addDoc(\"2\", \"exception\");",
          "307:     solr.addDoc(\"3\", \"Unhandled error\");",
          "308:     solr.addDoc(\"4\", \"Error occurred\");",
          "310:     ServiceGraphRequest request = serviceGraphRequest(\"[{\\\"log_message\\\":\\\"\\\\\\\"Unhandled exception\\\\\\\"\\\"}]\");",
          "311:     NamedList<List<PivotField>> found = executeQuery(request);",
          "313:     assertThat(found.size(), is(1));",
          "314:     assertThat(found.get(\"level\").get(0).getCount(), is(1));",
          "315:   }",
          "317:   @Test",
          "318:   public void testDateRangeRequestIncludeMultipleTermsDelimitedByDash() throws Exception {",
          "319:     solr.addDoc(\"0\", \"Unhandled exception\");",
          "320:     solr.addDoc(\"1\", \"At line 112 an unhandled-exception occurred when\");",
          "321:     solr.addDoc(\"2\", \"exception occurred\");",
          "322:     solr.addDoc(\"3\", \"exception\");",
          "323:     solr.addDoc(\"4\", \"Unhandled error\");",
          "324:     solr.addDoc(\"5\", \"Error occurred\");",
          "326:     ServiceGraphRequest request = serviceGraphRequest(\"[{\\\"log_message\\\":\\\"\\\\\\\"Unhandled-exception\\\\\\\"\\\"}]\");",
          "327:     NamedList<List<PivotField>> found = executeQuery(request);",
          "329:     assertThat(found.size(), is(1));",
          "330:     assertThat(found.get(\"level\").get(0).getCount(), is(1));",
          "331:   }",
          "333:   @Test",
          "334:   public void testDateRangeRequestIncludeMultipleTermsDelimitedByPlusSign() throws Exception {",
          "335:     solr.addDoc(\"0\", \"Unhandled exception\");",
          "336:     solr.addDoc(\"1\", \"Unhandled+exception\");",
          "337:     solr.addDoc(\"2\", \"Unhandled-exception\");",
          "338:     solr.addDoc(\"3\", \"exception occurred\");",
          "339:     solr.addDoc(\"4\", \"exception\");",
          "340:     solr.addDoc(\"5\", \"Unhandled error\");",
          "341:     solr.addDoc(\"6\", \"Error occurred\");",
          "343:     ServiceGraphRequest request = serviceGraphRequest(\"[{\\\"log_message\\\":\\\"\\\\\\\"Unhandled+exception\\\\\\\"\\\"}]\");",
          "344:     NamedList<List<PivotField>> found = executeQuery(request);",
          "346:     assertThat(found.size(), is(1));",
          "347:     assertThat(found.get(\"level\").get(0).getCount(), is(1));",
          "348:   }",
          "350:   @Test",
          "351:   public void testDateRangeRequestIncludeALongMessage() throws Exception {",
          "352:     solr.addDoc(\"6\", \"[   ] org.apache.solr.cloud.autoscaling.OverseerTriggerThread (OverseerTriggerThread.java:400) - Error in trigger 'index_size_trigger' configuration, trigger config ignored: {\\\\r\\\\n  \\\\\\\"aboveBytes\\\\\\\":53687091200,\\\\r\\\\n  \\\\\\\"aboveOp\\\\\\\":\\\\\\\"SPLITSHARD\\\\\\\",\\\\r\\\\n  \\\\\\\"event\\\\\\\":\\\\\\\"indexSize\\\\\\\",\\\\r\\\\n  \\\\\\\"waitFor\\\\\\\":1,\\\\r\\\\n  \\\\\\\"actions\\\\\\\":[\\\\r\\\\n    {\\\\r\\\\n      \\\\\\\"name\\\\\\\":\\\\\\\"compute_plan\\\\\\\",\\\\r\\\\n      \\\\\\\"class\\\\\\\":\\\\\\\"solr.ComputePlanAction\\\\\\\"},\\\\r\\\\n    {\\\\r\\\\n      \\\\\\\"name\\\\\\\":\\\\\\\"execute_plan\\\\\\\",\\\\r\\\\n      \\\\\\\"class\\\\\\\":\\\\\\\"solr.ExecutePlanAction\\\\\\\"}],\\\\r\\\\n  \\\\\\\"enabled\\\\\\\":true}\\\\r\\\\norg.apache.solr.cloud.autoscaling.TriggerValidationException: null\\\\r\\\\n\\\\tat org.apache.solr.cloud.autoscaling.TriggerBase.configure(TriggerBase.java:118) ~[solr-core-7.5.0.jar:7.5.0 b5bf70b7e32d7ddd9742cc821d471c5fabd4e3df - jimczi - 2018-09-18 13:07:55]\\\\r\\\\n\\\\tat org.apache.solr.cloud.autoscaling.IndexSizeTrigger.configure(IndexSizeTrigger.java:87) ~[solr-core-7.5.0.jar:7.5.0 b5bf70b7e32d7ddd9742cc821d471c5fabd4e3df - jimczi - 2018-09-18 13:07:55]\\\\r\\\\n\\\\tat org.apache.solr.cloud.autoscaling.AutoScaling$TriggerFactoryImpl.create(AutoScaling.java:189) ~[solr-core-7.5.0.jar:7.5.0 b5bf70b7e32d7ddd9742cc821d471c5fabd4e3df - jimczi - 2018-09-18 13:07:55]\\\\r\\\\n\\\\tat org.apache.solr.cloud.autoscaling.OverseerTriggerThread.loadTriggers(OverseerTriggerThread.java:398) [solr-core-7.5.0.jar:7.5.0 b5bf70b7e32d7ddd9742cc821d471c5fabd4e3df - jimczi - 2018-09-18 13:07:55]\\\\r\\\\n\\\\tat org.apache.solr.cloud.autoscaling.OverseerTriggerThread.refreshAutoScalingConf(OverseerTriggerThread.java:335) [solr-core-7.5.0.jar:7.5.0 b5bf70b7e32d7ddd9742cc821d471c5fabd4e3df - jimczi - 2018-09-18 13:07:55]\\\\r\\\\n\\\\tat org.apache.solr.cloud.autoscaling.OverseerTriggerThread.run(OverseerTriggerThread.java:161) [solr-core-7.5.0.jar:7.5.0 b5bf70b7e32d7ddd9742cc821d471c5fabd4e3df - jimczi - 2018-09-18 13:07:55]\\\\r\\\\n\\\\tat java.lang.Thread.run(Thread.java:745) [?:1.8.0_112]\");",
          "353:     solr.addDoc(\"7\", \"[   ] org.apache.solr.cloud.autoscaling.OverseerTriggerThread (OverseerTriggerThread.java:422) - Something else\");",
          "354:     solr.addDoc(\"8\", \"[   ] org.apache.solr.cloud.OverseerTriggerThread (OverseerTriggerThread.java:400) - Different package\");",
          "356:     ServiceGraphRequest request = serviceGraphRequest(\"[{\\\"log_message\\\":\\\"\\\\\\\"org.apache.solr.cloud.autoscaling.OverseerTriggerThread (OverseerTriggerThread.java:400)\\\\\\\"\\\"}]\");",
          "357:     NamedList<List<PivotField>> found = executeQuery(request);",
          "359:     assertThat(found.size(), is(1));",
          "360:     assertThat(found.get(\"level\").get(0).getCount(), is(1));",
          "361:   }",
          "363:   @Test",
          "364:   public void testDateRangeRequestIncludeMultipleWhitespaceDelimitedWords() throws Exception {",
          "365:     solr.addDoc(\"0\", \"At line 112 an unhandled exception occurred when\");",
          "366:     solr.addDoc(\"1\", \"At line 112 an unhandled  exception occurred when\");",
          "367:     solr.addDoc(\"2\", \"At line 112 an unhandled   \\texception occurred when\");",
          "368:     solr.addDoc(\"3\", \"At line 112 an exception occurred when\");",
          "370:     ServiceGraphRequest request = serviceGraphRequest(\"[{\\\"log_message\\\":\\\"\\\\\\\"Unhandled  exception\\\\\\\"\\\"}]\");",
          "371:     NamedList<List<PivotField>> found = executeQuery(request);",
          "373:     assertThat(found.size(), is(1));",
          "374:     assertThat(found.get(\"level\").get(0).getCount(), is(3));",
          "375:   }",
          "376: }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractDateRangeFacetQueryConverter.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractDateRangeFacetQueryConverter.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractDateRangeFacetQueryConverter.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractDateRangeFacetQueryConverter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.common.LogSearchConstants;",
          "22: import org.apache.ambari.logsearch.model.request.DateRangeParamDefinition;",
          "23: import org.apache.ambari.logsearch.model.request.UnitParamDefinition;",
          "24: import org.apache.commons.lang.StringUtils;",
          "25: import org.apache.solr.client.solrj.SolrQuery;",
          "29: public abstract class AbstractDateRangeFacetQueryConverter<SOURCE extends DateRangeParamDefinition & UnitParamDefinition>",
          "30:   extends AbstractOperationHolderConverter<SOURCE , SolrQuery> {",
          "",
          "[Removed Lines]",
          "27: import java.util.Locale;",
          "",
          "[Added Lines]",
          "21: import java.util.Locale;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     solrQuery.setFacetLimit(-1);",
          "41:     solrQuery.setFacetSort(LogSearchConstants.FACET_INDEX);",
          "42:     solrQuery.add(\"facet.range\", \"{!tag=r1}\" + getDateFieldName());",
          "46:     solrQuery.remove(\"sort\");",
          "47:     solrQuery.setRows(0);",
          "48:     solrQuery.setStart(0);",
          "",
          "[Removed Lines]",
          "43:     solrQuery.add(String.format(Locale.ROOT, \"f.%s.%s\", new Object[]{getDateFieldName(), \"facet.range.start\"}), request.getFrom());",
          "44:     solrQuery.add(String.format(Locale.ROOT, \"f.%s.%s\", new Object[]{getDateFieldName(), \"facet.range.end\"}), request.getTo());",
          "45:     solrQuery.add(String.format(Locale.ROOT, \"f.%s.%s\", new Object[]{getDateFieldName(), \"facet.range.gap\"}), unit);",
          "",
          "[Added Lines]",
          "43:     solrQuery.add(String.format(Locale.ROOT, \"f.%s.%s\", getDateFieldName(), \"facet.range.start\"), request.getFrom());",
          "44:     solrQuery.add(String.format(Locale.ROOT, \"f.%s.%s\", getDateFieldName(), \"facet.range.end\"), request.getTo());",
          "45:     solrQuery.add(String.format(Locale.ROOT, \"f.%s.%s\", getDateFieldName(), \"facet.range.gap\"), unit);",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "24: import org.apache.ambari.logsearch.common.LogType;",
          "25: import org.apache.ambari.logsearch.dao.SolrSchemaFieldDao;",
          "26: import org.apache.ambari.logsearch.util.SolrUtil;",
          "27: import org.apache.commons.collections.CollectionUtils;",
          "28: import org.apache.commons.lang.StringUtils;",
          "30: import org.apache.solr.client.solrj.SolrQuery;",
          "31: import org.springframework.data.solr.core.query.Criteria;",
          "32: import org.springframework.data.solr.core.query.Query;",
          "33: import org.springframework.data.solr.core.query.SimpleFilterQuery;",
          "34: import org.springframework.data.solr.core.query.SimpleStringCriteria;",
          "44: public abstract class AbstractOperationHolderConverter <REQUEST_TYPE, QUERY_TYPE>",
          "45:   extends AbstractConverterAware<REQUEST_TYPE, QUERY_TYPE> {",
          "",
          "[Removed Lines]",
          "21: import com.google.common.base.Splitter;",
          "22: import com.google.gson.Gson;",
          "23: import com.google.gson.reflect.TypeToken;",
          "29: import org.apache.commons.lang.text.StrTokenizer;",
          "36: import javax.inject.Inject;",
          "37: import java.util.Arrays;",
          "38: import java.util.HashMap;",
          "39: import java.util.List;",
          "40: import java.util.Map;",
          "42: import static org.apache.ambari.logsearch.solr.SolrConstants.ServiceLogConstants.LOG_MESSAGE;",
          "",
          "[Added Lines]",
          "21: import static java.util.Collections.singletonList;",
          "22: import static org.apache.ambari.logsearch.solr.SolrConstants.ServiceLogConstants.LOG_MESSAGE;",
          "23: import static org.apache.commons.lang3.StringUtils.isNotBlank;",
          "25: import java.util.HashMap;",
          "26: import java.util.List;",
          "27: import java.util.Map;",
          "29: import javax.inject.Inject;",
          "42: import com.google.common.base.Splitter;",
          "43: import com.google.gson.Gson;",
          "44: import com.google.gson.reflect.TypeToken;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:   public Query addInFiltersIfNotNullAndEnabled(Query query, String value, String field, boolean condition) {",
          "81:     if (value != null && condition) {",
          "83:       addInFilterQuery(query, field, values);",
          "84:     }",
          "85:     return query;",
          "",
          "[Removed Lines]",
          "82:       List<String> values = value.length() == 0 ? Arrays.asList(\"-1\") : splitValueAsList(value, \",\");",
          "",
          "[Added Lines]",
          "84:       List<String> values = value.length() == 0 ? singletonList(\"-1\") : splitValueAsList(value, \",\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:   public SolrQuery addInFiltersIfNotNullAndEnabled(SolrQuery query, String value, String field, boolean condition) {",
          "89:     if (condition) {",
          "91:       if (valuesList.size() > 1) {",
          "92:         query.addFilterQuery(String.format(\"%s:(%s)\", field, StringUtils.join(valuesList, \" OR \")));",
          "93:       } else {",
          "",
          "[Removed Lines]",
          "90:       List<String> valuesList = value.length() == 0 ? Arrays.asList(\"\\\\-1\") : splitValueAsList(value, \",\");",
          "",
          "[Added Lines]",
          "92:       List<String> valuesList = value.length() == 0 ? singletonList(\"\\\\-1\") : splitValueAsList(value, \",\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "198:   public abstract LogType getLogType();",
          "200:   private void addLogMessageFilter(Query query, String value, boolean negate) {",
          "216:     }",
          "217:   }",
          "219:   private void addLogMessageFilter(SolrQuery query, String value, boolean negate) {",
          "221:     String negateToken = negate ? \"-\" : \"\";",
          "236:     }",
          "237:   }",
          "",
          "[Removed Lines]",
          "201:     StrTokenizer tokenizer = new StrTokenizer(value, ' ', '\"');",
          "202:     for (String token : tokenizer.getTokenArray()) {",
          "203:       token = token.trim();",
          "204:       if (token.contains(\" \") || !token.startsWith(\"*\") && !token.endsWith(\"*\")) {",
          "205:         addFilterQuery(query, new Criteria(LOG_MESSAGE).is(SolrUtil.escapeQueryChars(token)), negate);",
          "206:       } else if (token.startsWith(\"*\") && token.endsWith(\"*\")) {",
          "207:         String plainToken = StringUtils.substring(token, 1, -1);",
          "208:         addFilterQuery(query, new Criteria(LOG_MESSAGE).contains(SolrUtil.escapeQueryChars(plainToken)), negate);",
          "209:       } else if (token.startsWith(\"*\") && !token.endsWith(\"*\")) {",
          "210:         String plainToken = StringUtils.substring(token, 1);",
          "211:         addFilterQuery(query, new Criteria(LOG_MESSAGE).endsWith(SolrUtil.escapeQueryChars(plainToken)), negate);",
          "212:       } else if (!token.startsWith(\"*\") && token.endsWith(\"*\")) {",
          "213:         String plainToken = StringUtils.substring(token, 0, -1);",
          "214:         addFilterQuery(query, new Criteria(LOG_MESSAGE).startsWith(SolrUtil.escapeQueryChars(plainToken)), negate);",
          "215:       }",
          "220:     StrTokenizer tokenizer = new StrTokenizer(value, ' ', '\"');",
          "222:     for (String token : tokenizer.getTokenArray()) {",
          "223:       token = token.trim();",
          "224:       if (token.contains(\" \") || !token.startsWith(\"*\") && !token.endsWith(\"*\")) {",
          "225:         query.addFilterQuery(String.format(\"%s%s:%s\", negateToken, LOG_MESSAGE, SolrUtil.escapeQueryChars(token)));",
          "226:       } else if (token.startsWith(\"*\") && token.endsWith(\"*\")) {",
          "227:         String plainToken = StringUtils.substring(token, 1, -1);",
          "228:         query.addFilterQuery(String.format(\"%s%s:%s\", negateToken, LOG_MESSAGE, SolrUtil.escapeQueryChars(plainToken)));",
          "229:       } else if (token.startsWith(\"*\") && !token.endsWith(\"*\")) {",
          "230:         String plainToken = StringUtils.substring(token, 1);",
          "231:         query.addFilterQuery(String.format(\"%s%s:%s\", negateToken, LOG_MESSAGE, SolrUtil.escapeQueryChars(plainToken)));",
          "232:       } else if (!token.startsWith(\"*\") && token.endsWith(\"*\")) {",
          "233:         String plainToken = StringUtils.substring(token, 0, -1);",
          "234:         query.addFilterQuery(String.format(\"%s%s:%s\", negateToken, LOG_MESSAGE, SolrUtil.escapeQueryChars(plainToken)));",
          "235:       }",
          "",
          "[Added Lines]",
          "203:     value = value.trim();",
          "204:     if (StringUtils.startsWith(value, \"\\\"\") && StringUtils.endsWith(value,\"\\\"\")) {",
          "205:       value = String.format(\"\\\"%s\\\"\", SolrUtil.escapeQueryChars(StringUtils.substring(value, 1, -1)));",
          "206:       addFilterQuery(query, new Criteria(LOG_MESSAGE).expression(value), negate);",
          "207:     }",
          "208:     else if (isNotBlank(value)){",
          "209:       addFilterQuery(query, new Criteria(LOG_MESSAGE).expression(SolrUtil.escapeQueryChars(value)), negate);",
          "215:     value = value.trim();",
          "216:     if (StringUtils.startsWith(value, \"\\\"\") && StringUtils.endsWith(value,\"\\\"\")) {",
          "217:       value = String.format(\"\\\"%s\\\"\", SolrUtil.escapeQueryChars(StringUtils.substring(value, 1, -1)));",
          "218:       query.addFilterQuery(String.format(\"%s%s:%s\", negateToken, LOG_MESSAGE, value));",
          "219:     }",
          "220:     else {",
          "221:       query.addFilterQuery(String.format(\"%s%s:%s\", negateToken, LOG_MESSAGE, SolrUtil.escapeQueryChars(value)));",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/services/logs-filtering-utils.service.ts||ambari-logsearch/ambari-logsearch-web/src/app/services/logs-filtering-utils.service.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/services/logs-filtering-utils.service.ts -> ambari-logsearch/ambari-logsearch-web/src/app/services/logs-filtering-utils.service.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:           return item.isExclude === isExclude;",
          "356:         }).map((parameter: SearchBoxParameter): HomogeneousObject<string> => {",
          "357:           return {",
          "359:           };",
          "360:         });",
          "361:       }",
          "",
          "[Removed Lines]",
          "358:             [parameter.name]: parameter.value.replace(/\\s/g, '+')",
          "",
          "[Added Lines]",
          "358:             [parameter.name]: parameter.value",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7df08ed4c8689adda76cedad5105aa9b3cfd95e9",
      "candidate_info": {
        "commit_hash": "7df08ed4c8689adda76cedad5105aa9b3cfd95e9",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/7df08ed4c8689adda76cedad5105aa9b3cfd95e9",
        "files": [
          "ambari-web/app/views/common/quick_view_link_view.js"
        ],
        "message": "[AMBARI-25249] Ambari UI quicklinks",
        "before_after_code_files": [
          "ambari-web/app/views/common/quick_view_link_view.js||ambari-web/app/views/common/quick_view_link_view.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/views/common/quick_view_link_view.js||ambari-web/app/views/common/quick_view_link_view.js": [
          "File: ambari-web/app/views/common/quick_view_link_view.js -> ambari-web/app/views/common/quick_view_link_view.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "419:       var links = Em.get(quickLinksConfig, 'links');",
          "420:       links.forEach(function (link) {",
          "429:           }",
          "430:         }",
          "431:       }, this);",
          "",
          "[Removed Lines]",
          "421:         var publicHostName = this.publicHostName(link, hosts, protocol);",
          "422:         if (publicHostName) {",
          "423:           if (link.protocol) {",
          "424:             protocol = this.setProtocol(configProperties, link.protocol);",
          "425:           }",
          "426:           var newItem = this.getHostLink(link, publicHostName, protocol, configProperties, response); //quicklink generated for the hbs template",
          "427:           if (!Em.isNone(newItem)) {",
          "428:             quickLinks.push(newItem);",
          "",
          "[Added Lines]",
          "421:         var isRelatedComponentInstalled = this.isRelatedComponentInstalled(link);",
          "422:         if (isRelatedComponentInstalled) {",
          "423:           var publicHostName = this.publicHostName(link, hosts, protocol);",
          "424:           if (publicHostName) {",
          "425:             if (link.protocol) {",
          "426:               protocol = this.setProtocol(configProperties, link.protocol);",
          "427:             }",
          "428:             var newItem = this.getHostLink(link, publicHostName, protocol, configProperties, response); //quicklink generated for the hbs template",
          "429:             if (!Em.isNone(newItem)) {",
          "430:               quickLinks.push(newItem);",
          "431:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "480:       links.forEach(function (link) {",
          "481:         var linkRemoved = Em.get(link, 'removed');",
          "482:         var url = Em.get(link, 'url');",
          "484:           var hostNameRegExp = new RegExp('([\\\\w\\\\W]*):\\\\d+');",
          "485:           if (serviceName === 'HDFS') {",
          "486:             var config;",
          "",
          "[Removed Lines]",
          "483:         if (url && !linkRemoved) {",
          "",
          "[Added Lines]",
          "486:         var isRelatedComponentInstalled = this.isRelatedComponentInstalled(link);",
          "487:         if (url && !linkRemoved && isRelatedComponentInstalled) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "874:         App.tooltip($(`[rel=\"${this.get('tooltipAttribute')}\"]`));",
          "875:       }",
          "876:     });",
          "878: });",
          "",
          "[Removed Lines]",
          "877:   }.observes('showQuickLinks', 'isLoaded', 'quickLinksArray.length')",
          "",
          "[Added Lines]",
          "881:   }.observes('showQuickLinks', 'isLoaded', 'quickLinksArray.length'),",
          "888:   isRelatedComponentInstalled: function (quickLink) {",
          "889:     return App.HostComponent.find().someProperty('componentName', quickLink.component_name);",
          "890:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8c2108cad777c4daad716ae11868b9c006592b9",
      "candidate_info": {
        "commit_hash": "b8c2108cad777c4daad716ae11868b9c006592b9",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/b8c2108cad777c4daad716ae11868b9c006592b9",
        "files": [
          "ambari-infra/ambari-infra-solr-client/README.md",
          "ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py"
        ],
        "message": "AMBARI-23945. Infra Solr migration: use async request for collection deletion",
        "before_after_code_files": [
          "ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py||ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py||ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py": [
          "File: ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py -> ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import solrDataManager as solr_data_manager",
          "36: from datetime import datetime, timedelta",
          "38: from subprocess import Popen, PIPE",
          "40: HTTP_PROTOCOL = 'http'",
          "",
          "[Removed Lines]",
          "37: from random import randrange",
          "",
          "[Added Lines]",
          "37: from random import randrange, randint",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69: LIST_SOLR_COLLECTION_URL = '{0}/admin/collections?action=LIST&wt=json'",
          "70: CREATE_SOLR_COLLECTION_URL = '{0}/admin/collections?action=CREATE&name={1}&collection.configName={2}&numShards={3}&replicationFactor={4}&maxShardsPerNode={5}&wt=json'",
          "72: RELOAD_SOLR_COLLECTION_URL = '{0}/admin/collections?action=RELOAD&name={1}&wt=json'",
          "73: CORE_DETAILS_URL = '{0}replication?command=details&wt=json'",
          "75: INFRA_SOLR_CLIENT_BASE_PATH = '/usr/lib/ambari-infra-solr-client/'",
          "",
          "[Removed Lines]",
          "71: DELETE_SOLR_COLLECTION_URL = '{0}/admin/collections?action=DELETE&name={1}&wt=json'",
          "",
          "[Added Lines]",
          "71: DELETE_SOLR_COLLECTION_URL = '{0}/admin/collections?action=DELETE&name={1}&wt=json&async={2}'",
          "73: REQUEST_STATUS_SOLR_COLLECTION_URL = '{0}/admin/collections?action=REQUESTSTATUS&requestid={1}'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "818:   return 'LOGSEARCH' in service_filter and config.has_section('logsearch_collections') \\",
          "819:     and config.has_option('logsearch_collections', 'enabled') and config.get('logsearch_collections', 'enabled') == 'true'",
          "823:   logger.debug(\"Solr request: {0}\".format(request))",
          "824:   delete_collection_json_cmd=create_solr_api_request_command(request, config)",
          "825:   process = Popen(delete_collection_json_cmd, stdout=PIPE, stderr=PIPE, shell=True)",
          "",
          "[Removed Lines]",
          "821: def delete_collection(options, config, collection, solr_urls):",
          "822:   request = DELETE_SOLR_COLLECTION_URL.format(get_random_solr_url(solr_urls, options), collection)",
          "",
          "[Added Lines]",
          "822: def monitor_solr_async_request(options, config, status_request, request_id):",
          "823:   request_status_json_cmd=create_solr_api_request_command(status_request, config)",
          "824:   logger.debug(\"Solr request: {0}\".format(status_request))",
          "825:   async_request_success_msg = \"Async Solr request (id: {0}) {1}COMPLETED{2}\".format(request_id, colors.OKGREEN, colors.ENDC)",
          "826:   async_request_timeout_msg = \"Async Solr request (id: {0}) {1}FAILED{2}\".format(request_id, colors.FAIL, colors.ENDC)",
          "827:   async_request_fail_msg = \"\\nAsync Solr request (id: {0}) {1}TIMED OUT{2} (increase --solr-async-request-tries if required, default is 400)\".format(request_id, colors.FAIL, colors.ENDC)",
          "828:   max_tries = options.solr_async_request_tries if options.solr_async_request_tries else 400",
          "829:   tries = 0",
          "830:   sys.stdout.write(\"Start monitoring Solr request with id {0} ...\".format(request_id))",
          "831:   sys.stdout.flush()",
          "832:   async_request_finished = False",
          "833:   async_request_failed = False",
          "834:   async_request_timed_out = False",
          "835:   while not async_request_finished:",
          "836:     tries = tries + 1",
          "837:     process = Popen(request_status_json_cmd, stdout=PIPE, stderr=PIPE, shell=True)",
          "838:     out, err = process.communicate()",
          "839:     if process.returncode != 0:",
          "840:       raise Exception(\"{0} command failed: {1}\".format(request_status_json_cmd, str(err)))",
          "841:     else:",
          "842:       response=json.loads(str(out))",
          "843:       logger.debug(response)",
          "844:       if 'status' in response:",
          "845:         async_state=response['status']['state']",
          "846:         async_msg=response['status']['msg']",
          "847:         if async_state == \"completed\":",
          "848:           async_request_finished = True",
          "849:           sys.stdout.write(\"\\nSolr response message: {0}\\n\".format(async_msg))",
          "850:           sys.stdout.flush()",
          "851:         elif async_state == \"failed\":",
          "852:           async_request_finished = True",
          "853:           async_request_failed = True",
          "854:           sys.stdout.write(\"\\nSolr response message: {0}\\n\".format(async_msg))",
          "855:           sys.stdout.flush()",
          "856:         else:",
          "857:           if not options.verbose:",
          "858:             sys.stdout.write(\".\")",
          "859:             sys.stdout.flush()",
          "860:           logger.debug(str(async_msg))",
          "861:           logger.debug(\"Sleep 5 seconds ...\")",
          "862:           time.sleep(5)",
          "863:       else:",
          "864:         raise Exception(\"The 'status' field is missing from the response: {0}\".format(response))",
          "865:     if tries == max_tries:",
          "866:       async_request_finished = True",
          "867:       async_request_timed_out = True",
          "869:   if async_request_failed:",
          "870:     if async_request_timed_out:",
          "871:       print async_request_timeout_msg",
          "872:       sys.exit(1)",
          "873:     else:",
          "874:       print async_request_fail_msg",
          "875:       sys.exit(1)",
          "876:   else:",
          "877:     print async_request_success_msg",
          "878:     return request_id",
          "881: def delete_collection(options, config, collection, solr_urls, response_data_map):",
          "882:   async_id = str(randint(1000,100000))",
          "883:   solr_url = get_random_solr_url(solr_urls, options)",
          "884:   request = DELETE_SOLR_COLLECTION_URL.format(solr_url, collection, async_id)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "827:   if process.returncode != 0:",
          "828:     raise Exception(\"{0} command failed: {1}\".format(delete_collection_json_cmd, str(err)))",
          "829:   response=json.loads(str(out))",
          "832:     return collection",
          "833:   else:",
          "834:     raise Exception(\"DELETE collection ('{0}') failed. Response: {1}\".format(collection, str(out)))",
          "",
          "[Removed Lines]",
          "830:   if 'success' in response:",
          "831:     print 'Deleting collection {0} was {1}SUCCESSFUL{2}'.format(collection, colors.OKGREEN, colors.ENDC)",
          "",
          "[Added Lines]",
          "892:   if 'requestid' in response:",
          "893:     print 'Deleting collection {0} request sent. {1}DONE{2}'.format(collection, colors.OKGREEN, colors.ENDC)",
          "894:     response_data_map['request_id']=response['requestid']",
          "895:     response_data_map['status_request']=REQUEST_STATUS_SOLR_COLLECTION_URL.format(solr_url, response['requestid'])",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "980:   history_collection = config.get('logsearch_collections', 'history_collection_name')",
          "981:   if service_logs_collection in collections:",
          "982:     solr_urls = get_solr_urls(options, config, service_logs_collection, collections_json_location)",
          "984:   else:",
          "985:     print 'Collection {0} does not exist or filtered out. Skipping delete operation.'.format(service_logs_collection)",
          "986:   if audit_logs_collection in collections:",
          "987:     solr_urls = get_solr_urls(options, config, audit_logs_collection, collections_json_location)",
          "989:   else:",
          "990:     print 'Collection {0} does not exist or filtered out. Skipping delete operation.'.format(audit_logs_collection)",
          "991:   if history_collection in collections:",
          "992:     solr_urls = get_solr_urls(options, config, history_collection, collections_json_location)",
          "994:   else:",
          "995:     print 'Collection {0} does not exist or filtered out. Skipping delete operation.'.format(history_collection)",
          "",
          "[Removed Lines]",
          "983:     retry(delete_collection, options, config, service_logs_collection, solr_urls, context='[Delete {0} collection]'.format(service_logs_collection))",
          "988:     retry(delete_collection, options, config, audit_logs_collection, solr_urls, context='[Delete {0} collection]'.format(audit_logs_collection))",
          "993:     retry(delete_collection, options, config, history_collection, solr_urls, context='[Delete {0} collection]'.format(history_collection))",
          "",
          "[Added Lines]",
          "1047:     response_map={}",
          "1048:     retry(delete_collection, options, config, service_logs_collection, solr_urls, response_map, context='[Delete {0} collection]'.format(service_logs_collection))",
          "1049:     retry(monitor_solr_async_request, options, config, response_map['status_request'], response_map['request_id'],",
          "1050:           context=\"[Monitor Solr async request, id: {0}]\".format(response_map['request_id']))",
          "1055:     response_map={}",
          "1056:     retry(delete_collection, options, config, audit_logs_collection, solr_urls, response_map, context='[Delete {0} collection]'.format(audit_logs_collection))",
          "1057:     retry(monitor_solr_async_request, options, config, response_map['status_request'], response_map['request_id'],",
          "1058:           context=\"[Monitor Solr async request, id: {0}]\".format(response_map['request_id']))",
          "1063:     response_map={}",
          "1064:     retry(delete_collection, options, config, history_collection, solr_urls, response_map, context='[Delete {0} collection]'.format(history_collection))",
          "1065:     retry(monitor_solr_async_request, options, config, response_map['status_request'], response_map['request_id'],",
          "1066:           context=\"[Monitor Solr async request, id: {0}]\".format(response_map['request_id']))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1000:   vertex_index_collection = config.get('atlas_collections', 'vertex_index_name')",
          "1001:   if fulltext_collection in collections:",
          "1002:     solr_urls = get_solr_urls(options, config, fulltext_collection, collections_json_location)",
          "1004:   else:",
          "1005:     print 'Collection {0} does not exist or filtered out. Skipping delete operation.'.format(fulltext_collection)",
          "1006:   if edge_index_collection in collections:",
          "1007:     solr_urls = get_solr_urls(options, config, edge_index_collection, collections_json_location)",
          "1009:   else:",
          "1010:     print 'Collection {0} does not exist or filtered out. Skipping delete operation.'.format(edge_index_collection)",
          "1011:   if vertex_index_collection in collections:",
          "1012:     solr_urls = get_solr_urls(options, config, vertex_index_collection, collections_json_location)",
          "1014:   else:",
          "1015:     print 'Collection {0} does not exist or filtered out. Skipping delete operation.'.format(vertex_index_collection)",
          "",
          "[Removed Lines]",
          "1003:     retry(delete_collection, options, config, fulltext_collection, solr_urls, context='[Delete {0} collection]'.format(fulltext_collection))",
          "1008:     retry(delete_collection, options, config, edge_index_collection, solr_urls, context='[Delete {0} collection]'.format(edge_index_collection))",
          "1013:     retry(delete_collection, options, config, vertex_index_collection, solr_urls, context='[Delete {0} collection]'.format(vertex_index_collection))",
          "",
          "[Added Lines]",
          "1076:     response_map={}",
          "1077:     retry(delete_collection, options, config, fulltext_collection, solr_urls, response_map, context='[Delete {0} collection]'.format(fulltext_collection))",
          "1078:     retry(monitor_solr_async_request, options, config, response_map['status_request'], response_map['request_id'],",
          "1079:           context=\"[Monitor Solr async request, id: {0}]\".format(response_map['request_id']))",
          "1084:     response_map={}",
          "1085:     retry(delete_collection, options, config, edge_index_collection, solr_urls, response_map, context='[Delete {0} collection]'.format(edge_index_collection))",
          "1086:     retry(monitor_solr_async_request, options, config, response_map['status_request'], response_map['request_id'],",
          "1087:           context=\"[Monitor Solr async request, id: {0}]\".format(response_map['request_id']))",
          "1092:     response_map={}",
          "1093:     retry(delete_collection, options, config, vertex_index_collection, solr_urls, response_map, context='[Delete {0} collection]'.format(vertex_index_collection))",
          "1094:     retry(monitor_solr_async_request, options, config, response_map['status_request'], response_map['request_id'],",
          "1095:           context=\"[Monitor Solr async request, id: {0}]\".format(response_map['request_id']))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1018:   ranger_collection_name = config.get('ranger_collection', 'ranger_collection_name')",
          "1019:   if ranger_collection_name in collections:",
          "1020:     solr_urls = get_solr_urls(options, config, ranger_collection_name, collections_json_location)",
          "1022:   else:",
          "1023:     print 'Collection {0} does not exist or filtered out. Skipping delete operation'.format(ranger_collection_name)",
          "",
          "[Removed Lines]",
          "1021:     retry(delete_collection, options, config, ranger_collection_name, solr_urls, context='[Delete {0} collection]'.format(ranger_collection_name))",
          "",
          "[Added Lines]",
          "1103:     response_map={}",
          "1104:     retry(delete_collection, options, config, ranger_collection_name, solr_urls, response_map, context='[Delete {0} collection]'.format(ranger_collection_name))",
          "1105:     retry(monitor_solr_async_request, options, config, response_map['status_request'], response_map['request_id'],",
          "1106:           context=\"[Monitor Solr async request, id: {0}]\".format(response_map['request_id']))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1824:   parser.add_option(\"--ranger-index-location\", dest=\"ranger_index_location\", type=\"string\", help=\"location of the index backups (for ranger). required only if no backup path in the ini file\")",
          "1826:   parser.add_option(\"--version\", dest=\"index_version\", type=\"string\", default=\"6.6.2\", help=\"lucene index version for migration (6.6.2 or 7.3.1)\")",
          "1827:   parser.add_option(\"--request-tries\", dest=\"request_tries\", type=\"int\", help=\"number of tries for BACKUP/RESTORE status api calls in the request\")",
          "1828:   parser.add_option(\"--request-time-interval\", dest=\"request_time_interval\", type=\"int\", help=\"time interval between BACKUP/RESTORE status api calls in the request\")",
          "1829:   parser.add_option(\"--request-async\", dest=\"request_async\", action=\"store_true\", default=False, help=\"skip BACKUP/RESTORE status api calls from the command\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1912:   parser.add_option(\"--solr-async-request-tries\", dest=\"solr_async_request_tries\", type=\"int\", default=400,  help=\"number of max tries for async Solr requests (e.g.: delete operation)\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8c700fc9d5a4bffc00ca173a5f61ebea841a4bc",
      "candidate_info": {
        "commit_hash": "f8c700fc9d5a4bffc00ca173a5f61ebea841a4bc",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/f8c700fc9d5a4bffc00ca173a5f61ebea841a4bc",
        "files": [
          "ambari-web/app/templates/main/dashboard/widgets/hdfs_links.hbs"
        ],
        "message": "AMBARI-24628. Fix possible \"Phishing by Navigating Browser Tabs\" vulnerability (akovalenko)",
        "before_after_code_files": [
          "ambari-web/app/templates/main/dashboard/widgets/hdfs_links.hbs||ambari-web/app/templates/main/dashboard/widgets/hdfs_links.hbs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/templates/main/dashboard/widgets/hdfs_links.hbs||ambari-web/app/templates/main/dashboard/widgets/hdfs_links.hbs": [
          "File: ambari-web/app/templates/main/dashboard/widgets/hdfs_links.hbs -> ambari-web/app/templates/main/dashboard/widgets/hdfs_links.hbs",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:                     {{/each}}",
          "110:                   {{else}}",
          "111:                     {{#each view.quickLinks}}",
          "113:                     {{/each}}",
          "114:                   {{/if}}",
          "115:                 {{else}}",
          "",
          "[Removed Lines]",
          "112:                       <li><a {{bindAttr href=\"url\"}} target=\"_blank rel=\"noopener noreferrer\"\">{{label}}</a></li>",
          "",
          "[Added Lines]",
          "112:                       <li><a {{bindAttr href=\"url\"}} target=\"_blank\" rel=\"noopener noreferrer\">{{label}}</a></li>",
          "",
          "---------------"
        ]
      }
    }
  ]
}