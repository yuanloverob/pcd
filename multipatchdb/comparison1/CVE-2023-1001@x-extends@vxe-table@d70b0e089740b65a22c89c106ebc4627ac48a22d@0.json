{
  "cve_id": "CVE-2023-1001",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in xuliangzhan vxe-table up to 3.7.9. This issue affects the function export of the file packages/textarea/src/textarea.js of the component vxe-textarea. The manipulation of the argument inputValue leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 3.7.10 is able to address this issue. The patch is named d70b0e089740b65a22c89c106ebc4627ac48a22d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-266123.",
  "repo": "x-extends/vxe-table",
  "patch_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
  "patch_info": {
    "commit_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "repo": "x-extends/vxe-table",
    "commit_url": "https://github.com/x-extends/vxe-table/commit/d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "files": [
      "packages/table/src/body.js",
      "packages/textarea/src/textarea.js"
    ],
    "message": "textarea \u4fee\u590d\u6ce8\u5165xss\u95ee\u9898 #I8O21R",
    "before_after_code_files": [
      "packages/table/src/body.js||packages/table/src/body.js",
      "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js"
    ]
  },
  "patch_diff": {
    "packages/table/src/body.js||packages/table/src/body.js": [
      "File: packages/table/src/body.js -> packages/table/src/body.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "499:     elemStore[`${prefix}xSpace`] = $refs.xSpace",
      "500:     elemStore[`${prefix}ySpace`] = $refs.ySpace",
      "501:     elemStore[`${prefix}emptyBlock`] = $refs.emptyBlock",
      "504:   },",
      "505:   beforeDestroy () {",
      "506:     clearTimeout(this.wheelTime)",
      "",
      "[Removed Lines]",
      "502:     this.$el.onscroll = this.scrollEvent",
      "503:     this.$el._onscroll = this.scrollEvent",
      "",
      "[Added Lines]",
      "502:     if (this.$el) {",
      "503:       this.$el.onscroll = this.scrollEvent",
      "504:       this.$el._onscroll = this.scrollEvent",
      "505:     }",
      "",
      "---------------"
    ],
    "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js": [
      "File: packages/textarea/src/textarea.js -> packages/textarea/src/textarea.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:         autoTxtElem.className = ['vxe-textarea--autosize', size ? `size--${size}` : ''].join(' ')",
      "189:         autoTxtElem.style.width = `${textElem.clientWidth}px`",
      "190:         autoTxtElem.style.padding = textStyle.padding",
      "192:       }",
      "193:     },",
      "194:     handleResize () {",
      "",
      "[Removed Lines]",
      "191:         autoTxtElem.innerHTML = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "[Added Lines]",
      "191:         autoTxtElem.innerText = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c925e7d4211b402860260441e289b081269a9d21",
      "candidate_info": {
        "commit_hash": "c925e7d4211b402860260441e289b081269a9d21",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/c925e7d4211b402860260441e289b081269a9d21",
        "files": [
          "package.json",
          "packages/button/src/button.js"
        ],
        "message": "releases 3.8.0",
        "before_after_code_files": [
          "packages/button/src/button.js||packages/button/src/button.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/button/src/button.js||packages/button/src/button.js": [
          "File: packages/button/src/button.js -> packages/button/src/button.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:   },",
          "46:   computed: {",
          "47:     isFormBtn () {",
          "49:     },",
          "52:     }",
          "53:   },",
          "54:   created () {",
          "",
          "[Removed Lines]",
          "48:       return ['submit', 'reset', 'button'].indexOf(this.type) > -1",
          "50:     btnType () {",
          "51:       return (this.type === 'text' || this.mode === 'text') ? 'text' : 'button'",
          "",
          "[Added Lines]",
          "48:       const { type } = this",
          "49:       if (type) {",
          "50:         return ['submit', 'reset', 'button'].indexOf(type) > -1",
          "51:       }",
          "52:       return false",
          "54:     btnMode () {",
          "55:       const { mode, type } = this",
          "56:       return (mode === 'text' || type === 'text') ? 'text' : 'button'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:     GlobalEvent.off(this, 'mousewheel')",
          "71:   },",
          "72:   render (h) {",
          "74:     const downsSlot = $scopedSlots.dropdowns",
          "75:     return downsSlot ? h('div', {",
          "76:       class: ['vxe-button--dropdown', className ? (XEUtils.isFunction(className) ? className({ $button: this }) : className) : '', {",
          "",
          "[Removed Lines]",
          "73:     const { $scopedSlots, className, popupClassName, title, inited, type, destroyOnClose, isFormBtn, status, btnType, vSize, name, disabled, loading, showPanel, animatVisible, panelPlacement } = this",
          "",
          "[Added Lines]",
          "78:     const { $scopedSlots, className, popupClassName, title, inited, type, destroyOnClose, isFormBtn, status, btnMode, vSize, name, disabled, loading, showPanel, animatVisible, panelPlacement } = this",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:     }, [",
          "81:       h('button', {",
          "82:         ref: 'xBtn',",
          "84:           [`size--${vSize}`]: vSize,",
          "85:           [`theme--${status}`]: status,",
          "86:           'is--round': this.round,",
          "",
          "[Removed Lines]",
          "83:         class: ['vxe-button', `type--${btnType}`, {",
          "",
          "[Added Lines]",
          "88:         class: ['vxe-button', `type--${btnMode}`, {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "128:       ] : null)",
          "129:     ]) : h('button', {",
          "130:       ref: 'xBtn',",
          "132:         [`size--${vSize}`]: vSize,",
          "133:         [`theme--${status}`]: status,",
          "134:         'is--round': this.round,",
          "",
          "[Removed Lines]",
          "131:       class: ['vxe-button', `type--${btnType}`, className ? (XEUtils.isFunction(className) ? className({ $button: this }) : className) : '', {",
          "",
          "[Added Lines]",
          "136:       class: ['vxe-button', `type--${btnMode}`, className ? (XEUtils.isFunction(className) ? className({ $button: this }) : className) : '', {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c3ead527610e63f020b0f936cf91ef00fb8dfc0",
      "candidate_info": {
        "commit_hash": "9c3ead527610e63f020b0f936cf91ef00fb8dfc0",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/9c3ead527610e63f020b0f936cf91ef00fb8dfc0",
        "files": [
          "examples/views/table/TableTest9.vue",
          "package.json",
          "packages/table/module/keyboard/mixin.ts"
        ],
        "message": "releases 3.10.15",
        "before_after_code_files": [
          "examples/views/table/TableTest9.vue||examples/views/table/TableTest9.vue",
          "packages/table/module/keyboard/mixin.ts||packages/table/module/keyboard/mixin.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/views/table/TableTest9.vue||examples/views/table/TableTest9.vue": [
          "File: examples/views/table/TableTest9.vue -> examples/views/table/TableTest9.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "2:   <div>",
          "3:     <vxe-button @click=\"loadData(5000)\">\u52a0\u8f7d5k\u6761</vxe-button>",
          "4:     <vxe-button @click=\"loadData(10000)\">\u52a0\u8f7d1w\u6761</vxe-button>",
          "12:   </div>",
          "13: </template>",
          "15: <script lang=\"ts\">",
          "16: import Vue from 'vue'",
          "19: interface RowVO {",
          "20:   id: number",
          "",
          "[Removed Lines]",
          "5:     <vxe-button @click=\"loadData(50000)\">\u52a0\u8f7d5w\u6761</vxe-button>",
          "6:     <vxe-grid v-bind=\"gridOptions\">",
          "7:       <template #action>",
          "8:         <vxe-button mode=\"text\" status=\"primary\">\u6309\u94ae1</vxe-button>",
          "9:         <vxe-button mode=\"text\" status=\"error\">\u6309\u94ae2</vxe-button>",
          "10:       </template>",
          "11:     </vxe-grid>",
          "17: import { VxeGridProps, VxeColumnPropTypes } from '../../../types'",
          "",
          "[Added Lines]",
          "5:     <vxe-table",
          "6:       border",
          "7:       show-overflow",
          "8:       height=\"800\"",
          "9:       :loading=\"loading\"",
          "10:       :column-config=\"{resizable: true}\"",
          "11:       :scroll-x=\"{enabled: true, gt: 0}\"",
          "12:       :scroll-y=\"{enabled: true, gt: 0}\"",
          "13:       :checkbox-config=\"{labelField: 'name', highlight: true, range: true}\"",
          "14:       :data=\"tableData\">",
          "15:       <vxe-column type=\"checkbox\" width=\"60\"></vxe-column>",
          "16:       <vxe-column field=\"col0\" title=\"\u52170\" width=\"100\"></vxe-column>",
          "17:       <vxe-column field=\"imgUrl\" title=\"\u52171\" width=\"80\" :cell-render=\"imgUrlCellRender\"></vxe-column>",
          "18:       <vxe-column field=\"col2\" title=\"\u52172\" width=\"90\"></vxe-column>",
          "19:       <vxe-column field=\"col3\" title=\"\u52173\" width=\"200\"></vxe-column>",
          "20:       <vxe-column field=\"col4\" title=\"\u52174\" width=\"140\"></vxe-column>",
          "21:       <vxe-column field=\"col5\" title=\"\u52175\" width=\"300\"></vxe-column>",
          "22:       <vxe-column field=\"col6\" title=\"\u52176\" width=\"160\"></vxe-column>",
          "23:       <vxe-column field=\"col7\" title=\"\u52177\" width=\"120\"></vxe-column>",
          "24:       <vxe-column field=\"col8\" title=\"\u52178\" width=\"400\"></vxe-column>",
          "25:       <vxe-column field=\"col9\" title=\"\u52179\" width=\"160\"></vxe-column>",
          "26:       <vxe-column field=\"col10\" title=\"\u521710\" width=\"160\"></vxe-column>",
          "27:       <vxe-column field=\"col11\" title=\"\u521711\" width=\"180\"></vxe-column>",
          "28:       <vxe-column field=\"col12\" title=\"\u521712\" width=\"160\"></vxe-column>",
          "29:       <vxe-column field=\"col13\" title=\"\u521713\" width=\"80\"></vxe-column>",
          "30:       <vxe-column field=\"col14\" title=\"\u521714\" width=\"120\"></vxe-column>",
          "31:       <vxe-column field=\"col15\" title=\"\u521715\" width=\"360\"></vxe-column>",
          "32:       <vxe-column field=\"col16\" title=\"\u521716\" width=\"150\"></vxe-column>",
          "33:       <vxe-column field=\"col17\" title=\"\u521717\" width=\"380\"></vxe-column>",
          "34:       <vxe-column field=\"col18\" title=\"\u521718\" width=\"100\"></vxe-column>",
          "35:       <vxe-column field=\"col19\" title=\"\u521719\" width=\"290\"></vxe-column>",
          "36:       <vxe-column field=\"col20\" title=\"\u521720\" width=\"80\"></vxe-column>",
          "37:       <vxe-column field=\"col21\" title=\"\u521721\" width=\"100\"></vxe-column>",
          "38:       <vxe-column field=\"col22\" title=\"\u521722\" width=\"120\"></vxe-column>",
          "39:       <vxe-column field=\"col23\" title=\"\u521723\" width=\"270\"></vxe-column>",
          "40:       <vxe-column field=\"col24\" title=\"\u521724\" width=\"330\"></vxe-column>",
          "41:       <vxe-column field=\"col25\" title=\"\u521725\" width=\"460\"></vxe-column>",
          "42:       <vxe-column field=\"col26\" title=\"\u521726\" width=\"280\"></vxe-column>",
          "43:       <vxe-column field=\"col27\" title=\"\u521727\" width=\"220\"></vxe-column>",
          "44:       <vxe-column field=\"col28\" title=\"\u521728\" width=\"120\"></vxe-column>",
          "45:       <vxe-column field=\"col29\" title=\"\u521729\" width=\"180\"></vxe-column>",
          "46:       <vxe-column field=\"col30\" title=\"\u521730\" width=\"500\"></vxe-column>",
          "47:       <vxe-column field=\"col31\" title=\"\u521731\" width=\"600\"></vxe-column>",
          "48:       <vxe-column field=\"col32\" title=\"\u521732\" width=\"100\"></vxe-column>",
          "49:       <vxe-column field=\"col33\" title=\"\u521733\" width=\"490\"></vxe-column>",
          "50:       <vxe-column field=\"col34\" title=\"\u521734\" width=\"100\"></vxe-column>",
          "51:       <vxe-column field=\"col35\" title=\"\u521735\" width=\"150\"></vxe-column>",
          "52:       <vxe-column field=\"col36\" title=\"\u521736\" width=\"800\"></vxe-column>",
          "53:       <vxe-column field=\"col37\" title=\"\u521737\" width=\"400\"></vxe-column>",
          "54:       <vxe-column field=\"col38\" title=\"\u521738\" width=\"800\"></vxe-column>",
          "55:       <vxe-column field=\"col39\" title=\"\u521739\" width=\"360\"></vxe-column>",
          "56:       <vxe-column field=\"col40\" title=\"\u521740\" width=\"420\"></vxe-column>",
          "57:       <vxe-column field=\"col41\" title=\"\u521741\" width=\"100\"></vxe-column>",
          "58:       <vxe-column field=\"col42\" title=\"\u521742\" width=\"120\"></vxe-column>",
          "59:       <vxe-column field=\"col43\" title=\"\u521743\" width=\"280\"></vxe-column>",
          "60:       <vxe-column field=\"col44\" title=\"\u521744\" width=\"170\"></vxe-column>",
          "61:       <vxe-column field=\"col45\" title=\"\u521745\" width=\"370\"></vxe-column>",
          "62:       <vxe-column field=\"col46\" title=\"\u521746\" width=\"120\"></vxe-column>",
          "63:       <vxe-column field=\"col47\" title=\"\u521747\" width=\"170\"></vxe-column>",
          "64:       <vxe-column field=\"col48\" title=\"\u521748\" width=\"400\"></vxe-column>",
          "65:       <vxe-column field=\"col49\" title=\"\u521749\" width=\"220\"></vxe-column>",
          "66:       <vxe-column field=\"col50\" title=\"\u521750\" width=\"170\"></vxe-column>",
          "67:       <vxe-column field=\"col51\" title=\"\u521751\" width=\"160\"></vxe-column>",
          "68:       <vxe-column field=\"col52\" title=\"\u521752\" width=\"100\"></vxe-column>",
          "69:       <vxe-column field=\"col53\" title=\"\u521753\" width=\"280\"></vxe-column>",
          "70:       <vxe-column field=\"col54\" title=\"\u521754\" width=\"170\"></vxe-column>",
          "71:       <vxe-column field=\"col55\" title=\"\u521755\" width=\"370\"></vxe-column>",
          "72:       <vxe-column field=\"col56\" title=\"\u521756\" width=\"120\"></vxe-column>",
          "73:       <vxe-column field=\"col57\" title=\"\u521757\" width=\"170\"></vxe-column>",
          "74:       <vxe-column field=\"col58\" title=\"\u521758\" width=\"400\"></vxe-column>",
          "75:       <vxe-column field=\"col59\" title=\"\u521759\" width=\"220\"></vxe-column>",
          "76:       <vxe-column field=\"col60\" title=\"\u521760\" width=\"500\"></vxe-column>",
          "77:       <vxe-column field=\"col61\" title=\"\u521761\" width=\"600\"></vxe-column>",
          "78:       <vxe-column field=\"col62\" title=\"\u521762\" width=\"100\"></vxe-column>",
          "79:       <vxe-column field=\"col63\" title=\"\u521763\" width=\"490\"></vxe-column>",
          "80:       <vxe-column field=\"col64\" title=\"\u521764\" width=\"100\"></vxe-column>",
          "81:       <vxe-column field=\"col65\" title=\"\u521765\" width=\"150\"></vxe-column>",
          "82:       <vxe-column field=\"col66\" title=\"\u521766\" width=\"800\"></vxe-column>",
          "83:       <vxe-column field=\"col67\" title=\"\u521767\" width=\"400\"></vxe-column>",
          "84:       <vxe-column field=\"col68\" title=\"\u521768\" width=\"800\"></vxe-column>",
          "85:       <vxe-column field=\"col69\" title=\"\u521769\" width=\"360\"></vxe-column>",
          "86:       <vxe-column field=\"col70\" title=\"\u521770\" width=\"500\"></vxe-column>",
          "87:       <vxe-column field=\"col71\" title=\"\u521771\" width=\"600\"></vxe-column>",
          "88:       <vxe-column field=\"col72\" title=\"\u521772\" width=\"100\"></vxe-column>",
          "89:       <vxe-column field=\"col73\" title=\"\u521773\" width=\"490\"></vxe-column>",
          "90:       <vxe-column field=\"col74\" title=\"\u521774\" width=\"100\"></vxe-column>",
          "91:       <vxe-column field=\"col75\" title=\"\u521775\" width=\"150\"></vxe-column>",
          "92:       <vxe-column field=\"col76\" title=\"\u521776\" width=\"800\"></vxe-column>",
          "93:       <vxe-column field=\"col77\" title=\"\u521777\" width=\"400\"></vxe-column>",
          "94:       <vxe-column field=\"col78\" title=\"\u521778\" width=\"800\"></vxe-column>",
          "95:       <vxe-column field=\"col79\" title=\"\u521779\" width=\"360\"></vxe-column>",
          "96:       <vxe-column field=\"col80\" title=\"\u521780\" width=\"500\"></vxe-column>",
          "97:       <vxe-column field=\"col81\" title=\"\u521781\" width=\"600\"></vxe-column>",
          "98:       <vxe-column field=\"col82\" title=\"\u521782\" width=\"100\"></vxe-column>",
          "99:       <vxe-column field=\"col83\" title=\"\u521783\" width=\"490\"></vxe-column>",
          "100:       <vxe-column field=\"col84\" title=\"\u521784\" width=\"100\"></vxe-column>",
          "101:       <vxe-column field=\"col85\" title=\"\u521785\" width=\"150\"></vxe-column>",
          "102:       <vxe-column field=\"col86\" title=\"\u521786\" width=\"800\"></vxe-column>",
          "103:       <vxe-column field=\"imgList1\" title=\"\u521788\" width=\"120\"  :cell-render=\"imgList1CellRender\"></vxe-column>",
          "104:       <vxe-column field=\"flag1\" title=\"\u521789\" width=\"100\"  :cell-render=\"flag1CellRender\"></vxe-column>",
          "105:       <vxe-column field=\"action\" title=\"\u64cd\u4f5c\" width=\"120\" >",
          "106:         <template #default>",
          "107:           <vxe-button mode=\"text\" status=\"primary\">\u7f16\u8f91</vxe-button>",
          "108:           <vxe-button mode=\"text\" status=\"error\">\u5220\u9664</vxe-button>",
          "109:         </template>",
          "110:       </vxe-column>",
          "111:     </vxe-table>",
          "117: import { VxeColumnPropTypes } from '../../../types'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: export default Vue.extend({",
          "25:   data () {",
          "26:     const flag1CellRender: VxeColumnPropTypes.CellRender = {",
          "27:       name: 'VxeSwitch'",
          "28:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:     const tableData: RowVO[] = []",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:       }",
          "51:     }",
          "180:     return {",
          "182:       flag1CellRender,",
          "183:       imgUrlCellRender,",
          "184:       imgList1CellRender",
          "",
          "[Removed Lines]",
          "53:     const gridOptions: VxeGridProps<RowVO> = {",
          "54:       border: true,",
          "55:       showOverflow: true,",
          "56:       showHeaderOverflow: true,",
          "57:       showFooterOverflow: true,",
          "58:       loading: false,",
          "59:       height: 800,",
          "60:       columnConfig: {",
          "61:         resizable: true",
          "62:       },",
          "63:       scrollX: {",
          "64:         enabled: true,",
          "65:         gt: 0",
          "66:       },",
          "67:       scrollY: {",
          "68:         enabled: true,",
          "69:         gt: 0,",
          "70:         mode: 'wheel'",
          "71:       },",
          "72:       columns: [",
          "73:         { type: 'checkbox', width: 60, fixed: 'left' },",
          "74:         { title: '\u52170', field: 'col0', width: 100, fixed: 'left' },",
          "75:         { title: '\u52171', field: 'imgUrl', width: 80, fixed: 'left', cellRender: imgUrlCellRender },",
          "76:         { title: '\u52172', field: 'col2', width: 90 },",
          "77:         { title: '\u52173', field: 'col3', width: 200 },",
          "78:         { title: '\u52174', field: 'col4', width: 140 },",
          "79:         { title: '\u52175', field: 'col5', width: 300 },",
          "80:         { title: '\u52176', field: 'col6', width: 160 },",
          "81:         { title: '\u52177', field: 'col7', width: 120 },",
          "82:         { title: '\u52178', field: 'col8', width: 400 },",
          "83:         { title: '\u52179', field: 'col9', width: 160 },",
          "84:         { title: '\u521710', field: 'col10', width: 160 },",
          "85:         { title: '\u521711', field: 'col11', width: 180 },",
          "86:         { title: '\u521712', field: 'col12', width: 160 },",
          "87:         { title: '\u521713', field: 'col13', width: 80 },",
          "88:         { title: '\u521714', field: 'col14', width: 120 },",
          "89:         { title: '\u521715', field: 'col15', width: 360 },",
          "90:         { title: '\u521716', field: 'col16', width: 150 },",
          "91:         { title: '\u521717', field: 'col17', width: 380 },",
          "92:         { title: '\u521718', field: 'col18', width: 100 },",
          "93:         { title: '\u521719', field: 'col19', width: 290 },",
          "94:         { title: '\u521720', field: 'col20', width: 80 },",
          "95:         { title: '\u521721', field: 'col21', width: 100 },",
          "96:         { title: '\u521722', field: 'col22', width: 120 },",
          "97:         { title: '\u521723', field: 'col23', width: 270 },",
          "98:         { title: '\u521724', field: 'col24', width: 330 },",
          "99:         { title: '\u521725', field: 'col25', width: 460 },",
          "100:         { title: '\u521726', field: 'col26', width: 280 },",
          "101:         { title: '\u521727', field: 'col27', width: 220 },",
          "102:         { title: '\u521728', field: 'col28', width: 120 },",
          "103:         { title: '\u521729', field: 'col29', width: 180 },",
          "104:         { title: '\u521730', field: 'col30', width: 500 },",
          "105:         { title: '\u521731', field: 'col31', width: 600 },",
          "106:         { title: '\u521732', field: 'col32', width: 100 },",
          "107:         { title: '\u521733', field: 'col33', width: 490 },",
          "108:         { title: '\u521734', field: 'col34', width: 100 },",
          "109:         { title: '\u521735', field: 'col35', width: 150 },",
          "110:         { title: '\u521736', field: 'col36', width: 800 },",
          "111:         { title: '\u521737', field: 'col37', width: 400 },",
          "112:         { title: '\u521738', field: 'col38', width: 800 },",
          "113:         { title: '\u521739', field: 'col39', width: 360 },",
          "114:         { title: '\u521740', field: 'col40', width: 420 },",
          "115:         { title: '\u521741', field: 'col41', width: 100 },",
          "116:         { title: '\u521742', field: 'col42', width: 120 },",
          "117:         { title: '\u521743', field: 'col43', width: 280 },",
          "118:         { title: '\u521744', field: 'col44', width: 170 },",
          "119:         { title: '\u521745', field: 'col45', width: 370 },",
          "120:         { title: '\u521746', field: 'col46', width: 420 },",
          "121:         { title: '\u521747', field: 'col47', width: 170 },",
          "122:         { title: '\u521748', field: 'col48', width: 400 },",
          "123:         { title: '\u521749', field: 'col49', width: 220 },",
          "124:         { title: '\u521750', field: 'col50', width: 170 },",
          "125:         { title: '\u521751', field: 'col51', width: 160 },",
          "126:         { title: '\u521752', field: 'col52', width: 500 },",
          "127:         { title: '\u521753', field: 'col53', width: 280 },",
          "128:         { title: '\u521754', field: 'col54', width: 170 },",
          "129:         { title: '\u521755', field: 'col55', width: 370 },",
          "130:         { title: '\u521756', field: 'col56', width: 120 },",
          "131:         { title: '\u521757', field: 'col57', width: 170 },",
          "132:         { title: '\u521758', field: 'col58', width: 400 },",
          "133:         { title: '\u521759', field: 'col59', width: 220 },",
          "134:         { title: '\u521760', field: 'col60', width: 650 },",
          "135:         { title: '\u521761', field: 'col61', width: 600 },",
          "136:         { title: '\u521762', field: 'col62', width: 100 },",
          "137:         { title: '\u521763', field: 'col63', width: 490 },",
          "138:         { title: '\u521764', field: 'col64', width: 100 },",
          "139:         { title: '\u521765', field: 'col65', width: 150 },",
          "140:         { title: '\u521766', field: 'col66', width: 800 },",
          "141:         { title: '\u521767', field: 'col67', width: 400 },",
          "142:         { title: '\u521768', field: 'col68', width: 800 },",
          "143:         { title: '\u521769', field: 'col69', width: 360 },",
          "144:         { title: '\u521770', field: 'col70', width: 650 },",
          "145:         { title: '\u521771', field: 'col71', width: 600 },",
          "146:         { title: '\u521772', field: 'col72', width: 100 },",
          "147:         { title: '\u521773', field: 'col73', width: 490 },",
          "148:         { title: '\u521774', field: 'col74', width: 100 },",
          "149:         { title: '\u521775', field: 'col75', width: 150 },",
          "150:         { title: '\u521776', field: 'col76', width: 800 },",
          "151:         { title: '\u521777', field: 'col77', width: 400 },",
          "152:         { title: '\u521778', field: 'col78', width: 800 },",
          "153:         { title: '\u521779', field: 'col79', width: 360 },",
          "154:         { title: '\u521780', field: 'col80', width: 650 },",
          "155:         { title: '\u521781', field: 'col81', width: 600 },",
          "156:         { title: '\u521782', field: 'col82', width: 100 },",
          "157:         { title: '\u521783', field: 'col83', width: 490 },",
          "158:         { title: '\u521784', field: 'col84', width: 100 },",
          "159:         { title: '\u521785', field: 'col85', width: 150 },",
          "160:         { title: '\u521786', field: 'col86', width: 800 },",
          "161:         { title: '\u521787', field: 'col87', width: 400 },",
          "162:         { title: '\u521788', field: 'col88', width: 800 },",
          "163:         { title: '\u521789', field: 'col89', width: 360 },",
          "164:         { title: '\u521790', field: 'col90', width: 650 },",
          "165:         { title: '\u521791', field: 'col91', width: 600 },",
          "166:         { title: '\u521792', field: 'col92', width: 100 },",
          "167:         { title: '\u521793', field: 'col93', width: 490 },",
          "168:         { title: '\u521794', field: 'col94', width: 100 },",
          "169:         { title: '\u521795', field: 'col95', width: 150 },",
          "170:         { title: '\u521796', field: 'col96', width: 800 },",
          "171:         { title: '\u521797', field: 'col97', width: 400 },",
          "172:         { title: '\u521798', field: 'col98', width: 70, fixed: 'right' },",
          "173:         { title: '\u521799', field: 'imgList1', width: 120, fixed: 'right', cellRender: imgList1CellRender },",
          "174:         { title: '\u5217100', field: 'flag1', width: 100, fixed: 'right', cellRender: flag1CellRender },",
          "175:         { title: '\u64cd\u4f5c', field: 'action', width: 120, fixed: 'right', slots: { default: 'action' } }",
          "176:       ],",
          "177:       data: []",
          "178:     }",
          "181:       gridOptions,",
          "",
          "[Added Lines]",
          "156:       tableData,",
          "157:       loading: false,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "187:   methods: {",
          "189:     loadData (rowSize: number) {",
          "191:       setTimeout(() => {",
          "192:         const dataList: RowVO[] = []",
          "193:         for (let i = 0; i < rowSize; i++) {",
          "",
          "[Removed Lines]",
          "190:       this.gridOptions.loading = true",
          "",
          "[Added Lines]",
          "166:       this.loading = true",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "211:         }",
          "213:         const startTime = Date.now()",
          "216:         this.$nextTick(() => {",
          "221:         })",
          "223:     }",
          "224:   },",
          "225:   created () {",
          "",
          "[Removed Lines]",
          "214:         this.gridOptions.data = dataList",
          "215:         this.gridOptions.loading = false",
          "217:           console.log({",
          "218:             content: `\u52a0\u8f7d\u65f6\u95f4 ${Date.now() - startTime} \u6beb\u79d2`,",
          "219:             status: 'success'",
          "220:           })",
          "222:       }, 100)",
          "",
          "[Added Lines]",
          "190:         this.tableData = dataList",
          "191:         this.loading = false",
          "193:           console.log(`\u52a0\u8f7d\u65f6\u95f4 ${Date.now() - startTime} \u6beb\u79d2`)",
          "195:       }, 350)",
          "",
          "---------------"
        ],
        "packages/table/module/keyboard/mixin.ts||packages/table/module/keyboard/mixin.ts": [
          "File: packages/table/module/keyboard/mixin.ts -> packages/table/module/keyboard/mixin.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   return { offsetTop, offsetLeft }",
          "24: }",
          "27:   let countHeight = 0",
          "29:   const isDown = moveRange > 0",
          "32:   if (scrollYLoad) {",
          "34:     if (isDown) {",
          "35:       rangeRows = afterFullData.slice(_rowIndex, _rowIndex + Math.ceil(moveSize / scrollYStore.rowHeight))",
          "36:     } else {",
          "38:     }",
          "39:   } else {",
          "40:     const siblingProp = isDown ? 'next' : 'previous'",
          "41:     while (targetTrElem && countHeight < moveSize) {",
          "45:     }",
          "46:   }",
          "47:   return rangeRows",
          "",
          "[Removed Lines]",
          "26: function getCheckboxRangeRows (_vm: any, params: any, targetTrElem: any, moveRange: any) {",
          "28:   let rangeRows = []",
          "30:   const moveSize = moveRange > 0 ? moveRange : (Math.abs(moveRange) + targetTrElem.offsetHeight)",
          "31:   const { afterFullData, scrollYStore, scrollYLoad } = _vm",
          "33:     const _rowIndex = _vm.getVTRowIndex(params.row)",
          "37:       rangeRows = afterFullData.slice(_rowIndex - Math.floor(moveSize / scrollYStore.rowHeight) + 1, _rowIndex + 1)",
          "42:       rangeRows.push(_vm.getRowNode(targetTrElem).item)",
          "43:       countHeight += targetTrElem.offsetHeight",
          "44:       targetTrElem = targetTrElem[`${siblingProp}ElementSibling`]",
          "",
          "[Added Lines]",
          "26: function getCheckboxRangeRows ($xeTable: any, evnt: MouseEvent, params: any, targetTrElem: HTMLElement, trRect: DOMRect, offsetClientTop: number, moveRange: number) {",
          "27:   const reactData = $xeTable",
          "28:   const internalData = $xeTable",
          "31:   let rangeRows: any[] = []",
          "32:   let moveSize = 0",
          "34:   const { scrollYLoad } = reactData",
          "35:   const { afterFullData, scrollYStore } = internalData",
          "37:     if (isDown) {",
          "38:       moveSize = offsetClientTop + moveRange",
          "39:     } else {",
          "40:       moveSize = (trRect.height - offsetClientTop) + Math.abs(moveRange)",
          "41:     }",
          "42:     const _rowIndex = $xeTable.getVTRowIndex(params.row)",
          "46:       rangeRows = afterFullData.slice(_rowIndex - Math.floor(moveSize / scrollYStore.rowHeight), _rowIndex + 1)",
          "49:     if (isDown) {",
          "50:       moveSize = evnt.clientY - trRect.y",
          "51:     } else {",
          "52:       moveSize = trRect.y - evnt.clientY + trRect.height",
          "53:     }",
          "56:       const rowNodeRest = $xeTable.getRowNode(targetTrElem)",
          "57:       if (rowNodeRest) {",
          "58:         rangeRows.push(rowNodeRest.item)",
          "59:         countHeight += targetTrElem.offsetHeight",
          "60:         targetTrElem = targetTrElem[`${siblingProp}ElementSibling`] as HTMLElement",
          "61:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:         const startLeft = offsetRest.offsetLeft + evnt.offsetX",
          "229:         const startScrollTop = bodyWrapperElem.scrollTop",
          "230:         const rowHeight = trElem.offsetHeight",
          "231:         let mouseScrollTimeout: any = null",
          "232:         let isMouseScrollDown: any = false",
          "233:         let mouseScrollSpaceSize = 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:         const trRect = trElem.getBoundingClientRect()",
          "249:         const offsetClientTop = disY - trRect.y",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "269:           checkboxRangeElem.style.left = `${rangeLeft}px`",
          "270:           checkboxRangeElem.style.top = `${rangeTop}px`",
          "271:           checkboxRangeElem.style.display = 'block'",
          "274:           if (rangeHeight > 10 && rangeRows.length !== lastRangeRows.length) {",
          "275:             lastRangeRows = rangeRows",
          "",
          "[Removed Lines]",
          "272:           const rangeRows = getCheckboxRangeRows(this, params, trElem, offsetTop < marginSize ? -rangeHeight : rangeHeight)",
          "",
          "[Added Lines]",
          "291:           const rangeRows = getCheckboxRangeRows(this, evnt, params, trElem, trRect, offsetClientTop, offsetTop < marginSize ? -rangeHeight : rangeHeight)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4bade7cf109e0041df3206f94ed382d545877ef",
      "candidate_info": {
        "commit_hash": "b4bade7cf109e0041df3206f94ed382d545877ef",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/b4bade7cf109e0041df3206f94ed382d545877ef",
        "files": [
          "examples/views/table/TableTest2.vue",
          "package.json",
          "packages/table/module/custom/panel.ts"
        ],
        "message": "releases 3.9.15",
        "before_after_code_files": [
          "examples/views/table/TableTest2.vue||examples/views/table/TableTest2.vue",
          "packages/table/module/custom/panel.ts||packages/table/module/custom/panel.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/views/table/TableTest2.vue||examples/views/table/TableTest2.vue": [
          "File: examples/views/table/TableTest2.vue -> examples/views/table/TableTest2.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:       id=\"bbbbb\"",
          "13:       :row-config=\"{useKey: true}\"",
          "14:       :column-config=\"{useKey: true}\"",
          "16:       :loading=\"demo1.loading\"",
          "17:       :import-config=\"{modes: importModes}\"",
          "18:       :export-config=\"{modes: exportModes}\"",
          "",
          "[Removed Lines]",
          "15:       :custom-config=\"{storage:true}\"",
          "",
          "[Added Lines]",
          "15:       :custom-config=\"customConfig\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:         { label: '\u81ea\u5b9a\u4e4911', value: '33' },",
          "62:         { label: 'current', value: 'current' }",
          "63:       ],",
          "64:       demo1: {",
          "65:         loading: false,",
          "66:         tableData: [] as any[],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:       customConfig: {",
          "65:         storage: true,",
          "66:         visibleMethod ({ column }: any) {",
          "67:           return column.field !== 'address'",
          "68:         }",
          "69:       },",
          "",
          "---------------"
        ],
        "packages/table/module/custom/panel.ts||packages/table/module/custom/panel.ts": [
          "File: packages/table/module/custom/panel.ts -> packages/table/module/custom/panel.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:             colid: column.id",
          "56:           },",
          "57:           class: ['vxe-table-custom--option', `level--${column.level}`, {",
          "59:             'is--group': isColGroup",
          "60:           }],",
          "61:           on: {",
          "",
          "[Removed Lines]",
          "58:             'is--hidden': isHidden,",
          "",
          "[Added Lines]",
          "58:             'is--hidden': isDisabled || isHidden,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:             }, [",
          "94:               h('span', {",
          "95:                 class: ['vxe-table-custom--sort-btn', {",
          "97:                 }],",
          "98:                 attrs: {",
          "99:                   title: getI18n('vxe.custom.setting.sortHelpTip')",
          "100:                 },",
          "102:                   ? {}",
          "103:                   : {",
          "104:                       mousedown: _vm.sortMousedownEvent,",
          "",
          "[Removed Lines]",
          "96:                   'is--disabled': isHidden",
          "101:                 on: isHidden",
          "",
          "[Added Lines]",
          "96:                   'is--disabled': isDisabled || isHidden",
          "101:                 on: isDisabled || isHidden",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "135:                   mode: 'text',",
          "136:                   icon: column.renderFixed === 'left' ? getIcon().TOOLBAR_TOOLS_FIXED_LEFT_ACTIVE : getIcon().TOOLBAR_TOOLS_FIXED_LEFT,",
          "137:                   status: column.renderFixed === 'left' ? 'primary' : '',",
          "139:                   title: getI18n(column.renderFixed === 'left' ? 'vxe.toolbar.cancelFixed' : 'vxe.toolbar.fixedLeft')",
          "140:                 },",
          "141:                 on: {",
          "",
          "[Removed Lines]",
          "138:                   disabled: isHidden || (isMaxFixedColumn && !column.renderFixed),",
          "",
          "[Added Lines]",
          "138:                   disabled: isDisabled || isHidden || (isMaxFixedColumn && !column.renderFixed),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "149:                   mode: 'text',",
          "150:                   icon: column.renderFixed === 'right' ? getIcon().TOOLBAR_TOOLS_FIXED_RIGHT_ACTIVE : getIcon().TOOLBAR_TOOLS_FIXED_RIGHT,",
          "151:                   status: column.renderFixed === 'right' ? 'primary' : '',",
          "153:                   title: getI18n(column.renderFixed === 'right' ? 'vxe.toolbar.cancelFixed' : 'vxe.toolbar.fixedRight')",
          "154:                 },",
          "155:                 on: {",
          "",
          "[Removed Lines]",
          "152:                   disabled: isHidden || (isMaxFixedColumn && !column.renderFixed),",
          "",
          "[Added Lines]",
          "152:                   disabled: isDisabled || isHidden || (isMaxFixedColumn && !column.renderFixed),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "347:               column.level === 1",
          "348:                 ? h('span', {",
          "349:                   class: ['vxe-table-custom-popup--column-sort-btn', {",
          "351:                   }],",
          "352:                   attrs: {",
          "353:                     title: getI18n('vxe.custom.setting.sortHelpTip')",
          "354:                   },",
          "356:                     ? {}",
          "357:                     : {",
          "358:                         mousedown: _vm.sortMousedownEvent,",
          "",
          "[Removed Lines]",
          "350:                     'is--disabled': isHidden",
          "355:                   on: isHidden",
          "",
          "[Added Lines]",
          "350:                     'is--disabled': isDisabled || isHidden",
          "355:                   on: isDisabled || isHidden",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "395:                     ? h(VxeUIInputComponent, {",
          "396:                       props: {",
          "397:                         type: 'integer',",
          "399:                         value: column.renderResizeWidth",
          "400:                       },",
          "401:                       on: {",
          "",
          "[Removed Lines]",
          "398:                         disabled: isHidden,",
          "",
          "[Added Lines]",
          "398:                         disabled: isDisabled || isHidden,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "419:                     value: column.renderFixed || '',",
          "420:                     type: 'button',",
          "421:                     size: 'mini',",
          "423:                     options: [",
          "427:                     ]",
          "428:                   },",
          "429:                   on: {",
          "",
          "[Removed Lines]",
          "422:                     disabled: isHidden,",
          "424:                       { label: getI18n('vxe.custom.setting.fixedLeft'), value: 'left', disabled: isHidden || isMaxFixedColumn },",
          "425:                       { label: getI18n('vxe.custom.setting.fixedUnset'), value: '', disabled: isHidden },",
          "426:                       { label: getI18n('vxe.custom.setting.fixedRight'), value: 'right', disabled: isHidden || isMaxFixedColumn }",
          "",
          "[Added Lines]",
          "422:                     disabled: isDisabled || isHidden,",
          "424:                       { label: getI18n('vxe.custom.setting.fixedLeft'), value: 'left', disabled: isDisabled || isHidden || isMaxFixedColumn },",
          "425:                       { label: getI18n('vxe.custom.setting.fixedUnset'), value: '', disabled: isDisabled || isHidden },",
          "426:                       { label: getI18n('vxe.custom.setting.fixedRight'), value: 'right', disabled: isDisabled || isHidden || isMaxFixedColumn }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "869:     allOptionEvent () {",
          "870:       const { $xetable, customStore } = this",
          "871:       const { customColumnList, customOpts } = $xetable",
          "873:       const isAll = !customStore.isAll",
          "874:       if (customOpts.immediate) {",
          "875:         XEUtils.eachTree(customColumnList, (column) => {",
          "880:           }",
          "881:         })",
          "882:         customStore.isAll = isAll",
          "883:         $xetable.handleCustom()",
          "884:         $xetable.saveCustomStore('update:visible')",
          "885:       } else {",
          "886:         XEUtils.eachTree(customColumnList, (column) => {",
          "890:           }",
          "891:         })",
          "892:         customStore.isAll = isAll",
          "893:       }",
          "",
          "[Removed Lines]",
          "872:       const { checkMethod } = customOpts",
          "876:           if (!checkMethod || checkMethod({ column })) {",
          "877:             column.visible = isAll",
          "878:             column.renderVisible = isAll",
          "879:             column.halfVisible = false",
          "887:           if (!checkMethod || checkMethod({ column })) {",
          "888:             column.renderVisible = isAll",
          "889:             column.halfVisible = false",
          "",
          "[Added Lines]",
          "872:       const { checkMethod, visibleMethod } = customOpts",
          "876:           if (visibleMethod && !visibleMethod({ column })) {",
          "877:             return",
          "879:           if (checkMethod && !checkMethod({ column })) {",
          "880:             return",
          "881:           }",
          "882:           column.visible = isAll",
          "883:           column.renderVisible = isAll",
          "884:           column.halfVisible = false",
          "891:           if (visibleMethod && !visibleMethod({ column })) {",
          "892:             return",
          "893:           }",
          "894:           if (checkMethod && !checkMethod({ column })) {",
          "895:             return",
          "897:           column.renderVisible = isAll",
          "898:           column.halfVisible = false",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6353d85311ab2f73aaf64e294f3b9176eee2e45d",
      "candidate_info": {
        "commit_hash": "6353d85311ab2f73aaf64e294f3b9176eee2e45d",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/6353d85311ab2f73aaf64e294f3b9176eee2e45d",
        "files": [
          "package.json",
          "packages/table/src/body.ts",
          "packages/table/src/footer.ts",
          "packages/table/src/methods.ts",
          "packages/table/src/table.ts"
        ],
        "message": "releases 3.10.10",
        "before_after_code_files": [
          "packages/table/src/body.ts||packages/table/src/body.ts",
          "packages/table/src/footer.ts||packages/table/src/footer.ts",
          "packages/table/src/methods.ts||packages/table/src/methods.ts",
          "packages/table/src/table.ts||packages/table/src/table.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/body.ts||packages/table/src/body.ts": [
          "File: packages/table/src/body.ts -> packages/table/src/body.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "680:       if (yHandleEl) {",
          "681:         yHandleEl.scrollTop = scrollTop",
          "682:       } else if (isRollY) {",
          "685:         if (leftElem && fixedType === 'left') {",
          "686:           setScrollTop(bodyElem, scrollTop)",
          "687:           setScrollTop(rightElem, scrollTop)",
          "",
          "[Removed Lines]",
          "683:         $xeTable.lastScrollTop = scrollTop",
          "684:         $xeTable.lastScrollLeft = scrollLeft",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "700:       if (xHandleEl) {",
          "701:         xHandleEl.scrollLeft = scrollLeft",
          "702:       } else if (isRollX) {",
          "705:         setScrollLeft(headerElem, scrollLeft)",
          "706:         setScrollLeft(footerElem, scrollLeft)",
          "707:         $xeTable.handleScrollEvent(evnt, isRollY, isRollX, scrollTop, scrollLeft, {",
          "",
          "[Removed Lines]",
          "703:         $xeTable.lastScrollTop = scrollTop",
          "704:         $xeTable.lastScrollLeft = scrollLeft",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/table/src/footer.ts||packages/table/src/footer.ts": [
          "File: packages/table/src/footer.ts -> packages/table/src/footer.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "291:         const isRollX = true",
          "292:         const isRollY = false",
          "293:         const scrollTop = bodyElem.scrollTop",
          "296:         setScrollLeft(headerElem, scrollLeft)",
          "297:         setScrollLeft(bodyElem, scrollLeft)",
          "298:         $xeTable.handleScrollEvent(evnt, isRollY, isRollX, scrollTop, scrollLeft, {",
          "",
          "[Removed Lines]",
          "294:         $xeTable.lastScrollLeft = scrollLeft",
          "295:         $xeTable.lastScrollTime = Date.now()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5654:   handleScrollEvent (evnt: Event, isRollY: boolean, isRollX: boolean, scrollTop: number, scrollLeft: number, params: any) {",
          "5655:     const $xeTable = this",
          "5656:     const props = $xeTable",
          "5658:     const { highlightHoverRow } = props",
          "5659:     const tableBody = $xeTable.$refs.tableBody",
          "5660:     const bodyElem = tableBody ? tableBody.$el as HTMLDivElement : null",
          "5661:     const rowOpts = $xeTable.computeRowOpts",
          "5662:     const validTip = $xeTable.$refs.validTip",
          "5663:     const tooltip = $xeTable.$refs.tooltip",
          "5676:     const bodyHeight = bodyElem ? bodyElem.clientHeight : 0",
          "5677:     const bodyWidth = bodyElem ? bodyElem.clientWidth : 0",
          "5678:     const scrollHeight = bodyElem ? bodyElem.scrollHeight : 0",
          "",
          "[Removed Lines]",
          "5664:     if (rowOpts.isHover || highlightHoverRow) {",
          "5665:       $xeTable.clearHoverRow()",
          "5666:     }",
          "5667:     if (validTip && validTip.visible) {",
          "5668:       validTip.close()",
          "5669:     }",
          "5670:     if (tooltip && tooltip.visible) {",
          "5671:       tooltip.close()",
          "5672:     }",
          "5673:     if (isRollX) {",
          "5674:       $xeTable.checkScrolling()",
          "5675:     }",
          "",
          "[Added Lines]",
          "5657:     const reactData = $xeTable",
          "5658:     const internalData = $xeTable",
          "5661:     const { lastScrollLeft, lastScrollTop } = internalData",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5681:     let isBottom = false",
          "5682:     let isLeft = false",
          "5683:     let isRight = false",
          "5684:     if (isRollX) {",
          "5685:       isLeft = scrollLeft <= 0",
          "5687:         isRight = scrollLeft + bodyWidth >= scrollWidth",
          "5688:       }",
          "5689:       $xeTable.checkScrolling()",
          "5690:     } else {",
          "5691:       isTop = scrollTop <= 0",
          "5692:       if (!isTop) {",
          "5693:         isBottom = scrollTop + bodyHeight >= scrollHeight",
          "5694:       }",
          "5695:     }",
          "5696:     const evntParams = {",
          "5697:       scrollTop,",
          "",
          "[Removed Lines]",
          "5686:       if (!isTop) {",
          "",
          "[Added Lines]",
          "5675:     let direction = ''",
          "5676:     let isTopBoundary = false",
          "5677:     let isBottomBoundary = false",
          "5678:     let isLeftBoundary = false",
          "5679:     let isRightBoundary = false",
          "5681:       const xThreshold = $xeTable.computeScrollXThreshold",
          "5683:       if (!isLeft) {",
          "5686:       if (scrollLeft > lastScrollLeft) {",
          "5687:         direction = 'right'",
          "5688:         if (scrollLeft + bodyWidth >= scrollWidth - xThreshold) {",
          "5689:           isRightBoundary = true",
          "5690:         }",
          "5691:       } else {",
          "5692:         direction = 'left'",
          "5693:         if (scrollLeft <= xThreshold) {",
          "5694:           isLeftBoundary = true",
          "5695:         }",
          "5696:       }",
          "5698:       internalData.lastScrollLeft = scrollLeft",
          "5699:       reactData.lastScrollTime = Date.now()",
          "5701:       const yThreshold = $xeTable.computeScrollYThreshold",
          "5706:       if (scrollTop > lastScrollTop) {",
          "5707:         direction = 'bottom'",
          "5708:         if (scrollTop + bodyHeight >= scrollHeight - yThreshold) {",
          "5709:           isBottomBoundary = true",
          "5710:         }",
          "5711:       } else {",
          "5712:         direction = 'top'",
          "5713:         if (scrollTop <= yThreshold) {",
          "5714:           isTopBoundary = true",
          "5715:         }",
          "5716:       }",
          "5717:       internalData.lastScrollTop = scrollTop",
          "5718:       reactData.lastScrollTime = Date.now()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5706:       isBottom,",
          "5707:       isLeft,",
          "5708:       isRight,",
          "5709:       ...params",
          "5710:     }",
          "5711:     $xeTable.dispatchEvent('scroll', evntParams, evnt)",
          "5712:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5733:       direction,",
          "5736:     if (rowOpts.isHover || highlightHoverRow) {",
          "5737:       $xeTable.clearHoverRow()",
          "5738:     }",
          "5739:     if (validTip && validTip.visible) {",
          "5740:       validTip.close()",
          "5741:     }",
          "5742:     if (tooltip && tooltip.visible) {",
          "5743:       tooltip.close()",
          "5744:     }",
          "5746:     if (isBottomBoundary || isTopBoundary || isRightBoundary || isLeftBoundary) {",
          "5747:       $xeTable.dispatchEvent('scroll-boundary', evntParams, evnt)",
          "5748:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5736:     const bodyElem = tableBody.$el as HTMLDivElement",
          "5737:     const headerElem = tableHeader ? tableHeader.$el as HTMLDivElement : null",
          "5738:     const footerElem = tableFooter ? tableFooter.$el as HTMLDivElement : null",
          "5741:     setScrollLeft(bodyElem, scrollLeft)",
          "5742:     setScrollLeft(headerElem, scrollLeft)",
          "5743:     setScrollLeft(footerElem, scrollLeft)",
          "",
          "[Removed Lines]",
          "5739:     $xeTable.lastScrollLeft = scrollLeft",
          "5740:     $xeTable.lastScrollTime = Date.now()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5749:     const { scrollTop, scrollLeft } = wrapperEl",
          "5750:     const isRollX = true",
          "5751:     const isRollY = false",
          "5754:     $xeTable.handleSyncScrollX(scrollLeft)",
          "5755:     $xeTable.triggerScrollXEvent(evnt)",
          "5756:     $xeTable.handleScrollEvent(evnt, isRollY, isRollX, scrollTop, scrollLeft, {",
          "",
          "[Removed Lines]",
          "5752:     $xeTable.lastScrollLeft = scrollLeft",
          "5753:     $xeTable.lastScrollTime = Date.now()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5770:     const bodyElem = tableBody.$el as HTMLDivElement",
          "5771:     const leftElem = leftBody ? leftBody.$el as HTMLDivElement : null",
          "5772:     const rightElem = rightBody ? rightBody.$el as HTMLDivElement : null",
          "5775:     setScrollTop(bodyElem, scrollTop)",
          "5776:     setScrollTop(leftElem, scrollTop)",
          "5777:     setScrollTop(rightElem, scrollTop)",
          "",
          "[Removed Lines]",
          "5773:     $xeTable.lastScrollTop = scrollTop",
          "5774:     $xeTable.lastScrollTime = Date.now()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5783:     const { scrollTop, scrollLeft } = wrapperEl",
          "5784:     const isRollX = false",
          "5785:     const isRollY = true",
          "5788:     $xeTable.handleSyncScrollY(scrollTop)",
          "5789:     $xeTable.triggerScrollYEvent(evnt)",
          "5790:     $xeTable.handleScrollEvent(evnt, isRollY, isRollX, scrollTop, scrollLeft, {",
          "",
          "[Removed Lines]",
          "5786:     $xeTable.lastScrollTop = scrollTop",
          "5787:     $xeTable.lastScrollTime = Date.now()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/table/src/table.ts||packages/table/src/table.ts": [
          "File: packages/table/src/table.ts -> packages/table/src/table.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "384:     computeSXOpts () {",
          "385:       return Object.assign({}, getConfig().table.scrollX, this.scrollX)",
          "386:     },",
          "387:     sYOpts () {",
          "388:       return this.computeSYOpts",
          "389:     },",
          "390:     computeSYOpts () {",
          "391:       return Object.assign({}, getConfig().table.scrollY, this.scrollY)",
          "392:     },",
          "393:     rowHeightMaps () {",
          "394:       return {",
          "395:         default: 48,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "387:     computeScrollXThreshold () {",
          "388:       const $xeTable = this",
          "390:       const sXOpts = $xeTable.computeSXOpts",
          "391:       const { threshold } = sXOpts",
          "392:       if (threshold) {",
          "393:         return XEUtils.toNumber(threshold)",
          "394:       }",
          "395:       return 0",
          "396:     },",
          "403:     computeScrollYThreshold () {",
          "404:       const $xeTable = this",
          "406:       const sYOpts = $xeTable.computeSYOpts",
          "407:       const { threshold } = sYOpts",
          "408:       if (threshold) {",
          "409:         return XEUtils.toNumber(threshold)",
          "410:       }",
          "411:       return 0",
          "412:     },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "001303001490794de1eed93ecbccdc5019544d2a",
      "candidate_info": {
        "commit_hash": "001303001490794de1eed93ecbccdc5019544d2a",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/001303001490794de1eed93ecbccdc5019544d2a",
        "files": [
          "README.md",
          "helper/vetur/tags.json",
          "package.json",
          "packages/edit/src/mixin.js",
          "packages/grid/src/grid.js",
          "packages/table/src/body.js",
          "packages/table/src/methods.js",
          "packages/table/src/table.js",
          "packages/tooltip/src/tooltip.js",
          "packages/validator/src/mixin.js",
          "styles/grid.scss",
          "styles/table.scss",
          "types/grid.d.ts",
          "types/table.d.ts",
          "types/v-x-e-table/renderer.d.ts"
        ],
        "message": "\u652f\u6301\u884c\u6807\u8bb0\u4e3a\u5220\u9664",
        "before_after_code_files": [
          "packages/edit/src/mixin.js||packages/edit/src/mixin.js",
          "packages/grid/src/grid.js||packages/grid/src/grid.js",
          "packages/table/src/body.js||packages/table/src/body.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/table/src/table.js||packages/table/src/table.js",
          "packages/tooltip/src/tooltip.js||packages/tooltip/src/tooltip.js",
          "packages/validator/src/mixin.js||packages/validator/src/mixin.js",
          "styles/grid.scss||styles/grid.scss",
          "styles/table.scss||styles/table.scss",
          "types/grid.d.ts||types/grid.d.ts",
          "types/table.d.ts||types/table.d.ts",
          "types/v-x-e-table/renderer.d.ts||types/v-x-e-table/renderer.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [
            "packages/table/src/body.js||packages/table/src/body.js"
          ],
          "candidate": [
            "packages/table/src/body.js||packages/table/src/body.js"
          ]
        }
      },
      "candidate_diff": {
        "packages/edit/src/mixin.js||packages/edit/src/mixin.js": [
          "File: packages/edit/src/mixin.js -> packages/edit/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import XEUtils from 'xe-utils'",
          "2: import VXETable from '../../v-x-e-table'",
          "3: import UtilTools, { isEnableConf } from '../../tools/utils'",
          "4: import { getRowid } from '../../table/src/util'",
          "5: import DomTools, { browse } from '../../tools/dom'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import GlobalConfig from '../../v-x-e-table/src/conf'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "370:       return {",
          "371:         insertRecords: this.getInsertRecords(),",
          "372:         removeRecords: this.getRemoveRecords(),",
          "374:       }",
          "375:     },",
          "",
          "[Removed Lines]",
          "373:         updateRecords: this.getUpdateRecords()",
          "",
          "[Added Lines]",
          "374:         updateRecords: this.getUpdateRecords(),",
          "375:         pendingRecords: this.getPendingRecords()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "425:       const { editRender } = column",
          "426:       const cell = params.cell = (params.cell || this.getCell(row, column))",
          "427:       const beforeEditMethod = editOpts.beforeEditMethod || editOpts.activeMethod",
          "429:         if (actived.row !== row || (mode === 'cell' ? actived.column !== column : false)) {",
          "431:           let type = 'edit-disabled'",
          "",
          "[Removed Lines]",
          "428:       if (isEnableConf(editConfig) && isEnableConf(editRender) && cell) {",
          "",
          "[Added Lines]",
          "430:       if (isEnableConf(editConfig) && isEnableConf(editRender) && !this.hasPendingByRow(row) && cell) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "439:             if (actived.column) {",
          "440:               this.clearActived(evnt)",
          "441:             }",
          "443:             column.renderHeight = cell.offsetHeight",
          "444:             actived.args = params",
          "445:             actived.row = row",
          "",
          "[Removed Lines]",
          "442:             type = 'edit-actived'",
          "",
          "[Added Lines]",
          "444:             type = 'edit-activated'",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "461:             columnIndex: this.getColumnIndex(column),",
          "462:             $columnIndex: this.getVMColumnIndex(column)",
          "463:           }, evnt)",
          "464:         } else {",
          "465:           const { column: oldColumn } = actived",
          "466:           if (mouseConfig) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468:           if (type === 'edit-activated') {",
          "469:             this.emitEvent('edit-actived', {",
          "470:               row,",
          "471:               rowIndex: this.getRowIndex(row),",
          "472:               $rowIndex: this.getVMRowIndex(row),",
          "473:               column,",
          "474:               columnIndex: this.getColumnIndex(column),",
          "475:               $columnIndex: this.getVMColumnIndex(column)",
          "476:             }, evnt)",
          "477:           }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "542:           $columnIndex: this.getVMColumnIndex(column)",
          "543:         }, evnt)",
          "544:       }",
          "546:     },",
          "547:     _getActiveRecord () {",
          "",
          "[Removed Lines]",
          "545:       return VXETable._valid ? this.clearValidate() : this.$nextTick()",
          "",
          "[Added Lines]",
          "559:       if (GlobalConfig.cellVaildMode === 'obsolete') {",
          "560:         if (this.clearValidate) {",
          "561:           return this.clearValidate()",
          "562:         }",
          "563:       }",
          "564:       return this.$nextTick()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "555:       const { $el, editStore, afterFullData } = this",
          "556:       const { actived } = editStore",
          "557:       const { args, row } = actived",
          "559:         return Object.assign({}, args)",
          "560:       }",
          "561:       return null",
          "",
          "[Removed Lines]",
          "558:       if (args && this.findRowIndexOf(afterFullData, row) > -1 && $el.querySelectorAll('.vxe-body--column.col--actived').length) {",
          "",
          "[Added Lines]",
          "577:       if (args && this.findRowIndexOf(afterFullData, row) > -1 && $el.querySelectorAll('.vxe-body--column.col--active').length) {",
          "",
          "---------------"
        ],
        "packages/grid/src/grid.js||packages/grid/src/grid.js": [
          "File: packages/grid/src/grid.js -> packages/grid/src/grid.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:       tableLoading: false,",
          "168:       isZMax: false,",
          "169:       tableData: [],",
          "171:       filterData: [],",
          "172:       formData: {},",
          "173:       sortData: [],",
          "",
          "[Removed Lines]",
          "170:       pendingRecords: [],",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:       if (proxyConfig) {",
          "222:         tableProps.loading = loading || tableLoading",
          "223:         tableProps.data = tableData",
          "225:         if (proxyOpts.seq && isEnableConf(pagerConfig)) {",
          "226:           tableProps.seqConfig = Object.assign({}, seqConfig, { startIndex: (tablePage.currentPage - 1) * tablePage.pageSize })",
          "227:         }",
          "228:       }",
          "229:       if (editConfig) {",
          "231:       }",
          "232:       return tableProps",
          "233:     }",
          "",
          "[Removed Lines]",
          "224:         tableProps.rowClassName = this.handleRowClassName",
          "230:         tableProps.editConfig = Object.assign({}, editConfig, { beforeEditMethod: this.handleBeforeEditMethod })",
          "",
          "[Added Lines]",
          "228:         tableProps.editConfig = Object.assign({}, editConfig)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "391:       const parentPaddingSize = isZMax || height !== 'auto' ? 0 : getPaddingTopBottomSize($el.parentNode)",
          "392:       return parentPaddingSize + getPaddingTopBottomSize($el) + getOffsetHeight(formWrapper) + getOffsetHeight(toolbarWrapper) + getOffsetHeight(topWrapper) + getOffsetHeight(bottomWrapper) + getOffsetHeight(pagerWrapper)",
          "393:     },",
          "411:     initToolbar () {",
          "412:       this.$nextTick(() => {",
          "413:         const { xTable, xToolbar } = this.$refs",
          "",
          "[Removed Lines]",
          "394:     handleRowClassName (params) {",
          "395:       const rowClassName = this.rowClassName",
          "396:       const clss = []",
          "397:       if (this.pendingRecords.some(item => item === params.row)) {",
          "398:         clss.push('row--pending')",
          "399:       }",
          "400:       clss.push(rowClassName ? (XEUtils.isFunction(rowClassName) ? rowClassName(params) : rowClassName) : '')",
          "401:       return clss",
          "402:     },",
          "403:     handleBeforeEditMethod (params) {",
          "404:       const { editConfig } = this",
          "405:       const beforeEditMethod = editConfig ? (editConfig.beforeEditMethod || editConfig.activeMethod) : null",
          "406:       if (this.pendingRecords.indexOf(params.row) === -1) {",
          "407:         return !beforeEditMethod || beforeEditMethod({ ...params, $grid: this })",
          "408:       }",
          "409:       return false",
          "410:     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "486:       switch (code) {",
          "487:         case 'insert':",
          "488:           return this.insert()",
          "489:         case 'insert_actived':",
          "491:         case 'mark_cancel':",
          "492:           this.triggerPendingEvent(code)",
          "493:           break",
          "",
          "[Removed Lines]",
          "490:           return this.insert().then(({ row }) => this.setActiveRow(row))",
          "",
          "[Added Lines]",
          "470:         case 'insert_edit':",
          "471:           return this.insert().then(({ row }) => this.setEditRow(row))",
          "475:           return this.insert().then(({ row }) => this.setEditRow(row))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "545:               filterList = $xetable.getCheckedFilters()",
          "546:             } else {",
          "547:               if (isReload) {",
          "549:                 $xetable.clearAll()",
          "550:               } else {",
          "551:                 sortList = $xetable.getSortColumns()",
          "",
          "[Removed Lines]",
          "548:                 this.pendingRecords = []",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "619:                 return Promise.resolve((beforeDelete || ajaxMethods)(...applyArgs))",
          "620:                   .then(rest => {",
          "621:                     this.tableLoading = false",
          "623:                     if (isMsg) {",
          "625:                       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Removed Lines]",
          "622:                     this.pendingRecords = this.pendingRecords.filter(row => removeRecords.indexOf(row) === -1)",
          "",
          "[Added Lines]",
          "608:                     $xetable.setPendingRow(removeRecords, false)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "671:         case 'save': {",
          "672:           const ajaxMethods = ajax.save",
          "673:           if (ajaxMethods) {",
          "675:             const { insertRecords, removeRecords, updateRecords, pendingRecords } = body",
          "676:             const applyArgs = [{ $grid: this, code, button, body, form: formData, options: ajaxMethods }].concat(args)",
          "",
          "[Removed Lines]",
          "674:             const body = Object.assign({ pendingRecords: this.pendingRecords }, this.getRecordset())",
          "",
          "[Added Lines]",
          "660:             const body = this.getRecordset()",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "697:                 return Promise.resolve((beforeSave || ajaxMethods)(...applyArgs))",
          "698:                   .then(rest => {",
          "699:                     this.tableLoading = false",
          "701:                     if (isMsg) {",
          "703:                       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Removed Lines]",
          "700:                     this.pendingRecords = []",
          "",
          "[Added Lines]",
          "686:                     $xetable.clearPendingRow()",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "802:       }, { children: 'children' })",
          "803:       return XEUtils.isUndefined(itemIndex) ? itemList : itemList[itemIndex]",
          "804:     },",
          "808:     triggerToolbarCommitEvent (params, evnt) {",
          "809:       const { code } = params",
          "810:       return this.commitProxy(params, evnt).then((rest) => {",
          "",
          "[Removed Lines]",
          "805:     getPendingRecords () {",
          "806:       return this.pendingRecords",
          "807:     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "822:       this.$emit('toolbar-tool-click', { code: tool.code, tool, $grid: this, $event: evnt })",
          "823:     },",
          "824:     triggerPendingEvent (code) {",
          "826:       const selectRecords = this.getCheckboxRecords()",
          "827:       if (selectRecords.length) {",
          "842:         this.clearCheckboxRow()",
          "843:       } else {",
          "844:         if (isMsg) {",
          "",
          "[Removed Lines]",
          "825:       const { pendingRecords, isMsg } = this",
          "828:         const plus = []",
          "829:         const minus = []",
          "830:         selectRecords.forEach(data => {",
          "831:           if (pendingRecords.some(item => data === item)) {",
          "832:             minus.push(data)",
          "833:           } else {",
          "834:             plus.push(data)",
          "835:           }",
          "836:         })",
          "837:         if (minus.length) {",
          "838:           this.pendingRecords = pendingRecords.filter(item => minus.indexOf(item) === -1).concat(plus)",
          "839:         } else if (plus.length) {",
          "840:           this.pendingRecords = pendingRecords.concat(plus)",
          "841:         }",
          "",
          "[Added Lines]",
          "808:       const { isMsg } = this",
          "811:         this.togglePendingRow(selectRecords)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "946:       return this.$nextTick().then(() => this.recalculate(true)).then(() => this.isZMax)",
          "947:     },",
          "948:     getProxyInfo () {",
          "950:       if (proxyConfig) {",
          "951:         return {",
          "952:           data: this.tableData,",
          "",
          "[Removed Lines]",
          "949:       const { sortData, proxyConfig } = this",
          "",
          "[Added Lines]",
          "919:       const { $refs, sortData, proxyConfig } = this",
          "920:       const $xetable = $refs.xTable",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "955:           sort: sortData.length ? sortData[0] : {},",
          "956:           sorts: sortData,",
          "957:           pager: this.tablePage,",
          "959:         }",
          "960:       }",
          "961:       return null",
          "",
          "[Removed Lines]",
          "958:           pendingRecords: this.pendingRecords",
          "",
          "[Added Lines]",
          "929:           pendingRecords: $xetable ? $xetable.getPendingRecords() : []",
          "",
          "---------------"
        ],
        "packages/table/src/body.js||packages/table/src/body.js": [
          "File: packages/table/src/body.js -> packages/table/src/body.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:     editRules,",
          "83:     validOpts,",
          "84:     editStore,",
          "86:     tooltipConfig,",
          "87:     rowOpts,",
          "89:   } = $xetable",
          "90:   const { type, cellRender, editRender, align, showOverflow, className, treeNode } = column",
          "91:   const { actived } = editStore",
          "",
          "[Removed Lines]",
          "85:     validStore,",
          "88:     columnOpts",
          "",
          "[Added Lines]",
          "87:     columnOpts,",
          "88:     validErrorMaps",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:   let isDirty",
          "109:   const tdOns = {}",
          "110:   const cellAlign = align || allAlign",
          "112:   const showValidTip = editRules && validOpts.showMessage && (validOpts.message === 'default' ? (height || tableData.length > 1) : validOpts.message === 'inline')",
          "113:   const attrs = { colid: column.id }",
          "114:   const bindMouseenter = tableListeners['cell-mouseenter']",
          "",
          "[Removed Lines]",
          "111:   const hasValidError = validStore.row === row && validStore.column === column",
          "",
          "[Added Lines]",
          "111:   const errorValidItem = validErrorMaps[`${rowid}:${column.id}`]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "244:         }",
          "245:       }, column.renderCell(h, params))",
          "246:     )",
          "248:       tdVNs.push(",
          "249:         h('div', {",
          "253:           } : null",
          "254:         }, [",
          "255:           h('span', {",
          "258:         ])",
          "259:       )",
          "260:     }",
          "",
          "[Removed Lines]",
          "247:     if (showValidTip && hasValidError) {",
          "250:           class: 'vxe-cell--valid',",
          "251:           style: validStore.rule && validStore.rule.maxWidth ? {",
          "252:             width: `${validStore.rule.maxWidth}px`",
          "256:             class: 'vxe-cell--valid-msg'",
          "257:           }, validStore.content)",
          "",
          "[Added Lines]",
          "247:     if (showValidTip && errorValidItem) {",
          "250:           class: 'vxe-cell--valid-error-hint',",
          "251:           style: errorValidItem.rule && errorValidItem.rule.maxWidth ? {",
          "252:             width: `${errorValidItem.rule.maxWidth}px`",
          "256:             class: 'vxe-cell--valid-error-msg'",
          "257:           }, errorValidItem.content)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "272:         'col--ellipsis': hasEllipsis,",
          "273:         'fixed--hidden': fixedHiddenColumn,",
          "274:         'col--dirty': isDirty,",
          "277:         'col--current': currentColumn === column",
          "278:       },",
          "279:       UtilTools.getClass(compCellClassName, params),",
          "",
          "[Removed Lines]",
          "275:         'col--actived': editConfig && isEdit && (actived.row === row && (actived.column === column || editOpts.mode === 'row')),",
          "276:         'col--valid-error': hasValidError,",
          "",
          "[Added Lines]",
          "275:         'col--active': editConfig && isEdit && (actived.row === row && (actived.column === column || editOpts.mode === 'row')),",
          "276:         'col--valid-error': !!errorValidItem,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "310:     expandColumn,",
          "311:     hasFixedColumn,",
          "312:     fullAllDataRowIdData,",
          "314:   } = $xetable",
          "315:   const childrenField = treeOpts.children || treeOpts.childrenField",
          "316:   const rows = []",
          "",
          "[Removed Lines]",
          "313:     rowOpts",
          "",
          "[Added Lines]",
          "313:     rowOpts,",
          "314:     pendingRowList,",
          "315:     pendingRowMaps",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "366:             'is--expand-tree': isExpandTree,",
          "367:             'row--new': isNewRow && (editOpts.showStatus || editOpts.showInsertStatus),",
          "368:             'row--radio': radioOpts.highlight && $xetable.selectRadioRow === row,",
          "370:           },",
          "371:           rowClassName ? (XEUtils.isFunction(rowClassName) ? rowClassName(params) : rowClassName) : ''",
          "372:         ],",
          "",
          "[Removed Lines]",
          "369:             'row--checked': checkboxOpts.highlight && $xetable.isCheckedByCheckboxRow(row)",
          "",
          "[Added Lines]",
          "371:             'row--checked': checkboxOpts.highlight && $xetable.isCheckedByCheckboxRow(row),",
          "372:             'row--pending': pendingRowList.length && !!pendingRowMaps[rowid]",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2391:   handleGlobalMousedownEvent (evnt) {",
          "2393:     const { actived } = editStore",
          "2394:     const { ctxWrapper, filterWrapper, validTip } = $refs",
          "2395:     if (filterWrapper) {",
          "",
          "[Removed Lines]",
          "2392:     const { $el, $refs, $xegrid, $toolbar, mouseConfig, editStore, ctxMenuStore, editOpts, filterStore, getRowNode } = this",
          "",
          "[Added Lines]",
          "2392:     const { $el, $refs, $xegrid, $toolbar, mouseConfig, editStore, ctxMenuStore, editRules, editOpts, validOpts, filterStore, getRowNode } = this",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2466:     if (ctxMenuStore.visible && ctxWrapper && !getEventTargetNode(evnt, ctxWrapper.$el).flag) {",
          "2467:       this.closeMenu()",
          "2468:     }",
          "2471:   },",
          "",
          "[Removed Lines]",
          "2470:     this.isActivated = getEventTargetNode(evnt, ($xegrid || this).$el).flag",
          "",
          "[Added Lines]",
          "2469:     const isActivated = getEventTargetNode(evnt, ($xegrid || this).$el).flag",
          "2471:     if (!isActivated && editRules && validOpts.autoClear) {",
          "2472:       this.validErrorMaps = {}",
          "2473:     }",
          "2475:     this.isActivated = isActivated",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3944:       this.emitEvent('sort-change', params, evnt)",
          "3945:     }",
          "3946:   },",
          "3947:   sort (sortConfs, sortOrder) {",
          "3948:     const { sortOpts } = this",
          "3949:     const { multiple, remote, orders } = sortOpts",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3952:   setPendingRow (rows, status) {",
          "3953:     const pendingMaps = { ...this.pendingRowMaps }",
          "3954:     const pendingList = [...this.pendingRowList]",
          "3955:     if (rows && !XEUtils.isArray(rows)) {",
          "3956:       rows = [rows]",
          "3957:     }",
          "3958:     if (status) {",
          "3959:       rows.forEach((row) => {",
          "3960:         const rowid = getRowid(this, row)",
          "3961:         if (rowid && !pendingMaps[rowid]) {",
          "3962:           pendingList.push(row)",
          "3963:           pendingMaps[rowid] = row",
          "3964:         }",
          "3965:       })",
          "3966:     } else {",
          "3967:       rows.forEach((row) => {",
          "3968:         const rowid = getRowid(this, row)",
          "3969:         if (rowid && pendingMaps[rowid]) {",
          "3970:           const pendingIndex = this.findRowIndexOf(pendingList, row)",
          "3971:           if (pendingIndex > -1) {",
          "3972:             pendingList.splice(pendingIndex, 1)",
          "3973:           }",
          "3974:           delete pendingMaps[rowid]",
          "3975:         }",
          "3976:       })",
          "3977:     }",
          "3978:     this.pendingRowMaps = pendingMaps",
          "3979:     this.pendingRowList = pendingList",
          "3980:     return this.$nextTick()",
          "3981:   },",
          "3982:   togglePendingRow (rows) {",
          "3983:     const pendingMaps = { ...this.pendingRowMaps }",
          "3984:     const pendingList = [...this.pendingRowList]",
          "3985:     if (rows && !XEUtils.isArray(rows)) {",
          "3986:       rows = [rows]",
          "3987:     }",
          "3988:     rows.forEach((row) => {",
          "3989:       const rowid = getRowid(this, row)",
          "3990:       if (rowid) {",
          "3991:         if (pendingMaps[rowid]) {",
          "3992:           const pendingIndex = this.findRowIndexOf(pendingList, row)",
          "3993:           if (pendingIndex > -1) {",
          "3994:             pendingList.splice(pendingIndex, 1)",
          "3995:           }",
          "3996:           delete pendingMaps[rowid]",
          "3997:         } else {",
          "3998:           pendingList.push(row)",
          "3999:           pendingMaps[rowid] = row",
          "4000:         }",
          "4001:       }",
          "4002:     })",
          "4003:     this.pendingRowMaps = pendingMaps",
          "4004:     this.pendingRowList = pendingList",
          "4005:     return this.$nextTick()",
          "4006:   },",
          "4007:   getPendingRecords () {",
          "4008:     return this.pendingRowList.slice(0)",
          "4009:   },",
          "4010:   hasPendingByRow (row) {",
          "4011:     const { pendingRowMaps } = this",
          "4012:     const rowid = getRowid(this, row)",
          "4013:     return !!pendingRowMaps[rowid]",
          "4014:   },",
          "4015:   clearPendingRow () {",
          "4016:     this.pendingRowMaps = {}",
          "4017:     this.pendingRowList = []",
          "4018:     return this.$nextTick()",
          "4019:   },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4959:     const customVal = !XEUtils.isUndefined(cellValue)",
          "4960:     return this.$nextTick().then(() => {",
          "4961:       const { $refs, editRules, validStore } = this",
          "4963:         const { row, column } = slotParams",
          "4964:         const type = 'change'",
          "4981:           }",
          "4982:         }",
          "4983:       }",
          "",
          "[Removed Lines]",
          "4962:       if (slotParams && $refs.tableBody && editRules) {",
          "4965:         if (this.hasCellRules(type, row, column)) {",
          "4966:           const cell = this.getCell(row, column)",
          "4967:           if (cell) {",
          "4968:             return this.validCellRules(type, row, column, cellValue)",
          "4969:               .then(() => {",
          "4970:                 if (customVal && validStore.visible) {",
          "4971:                   setCellValue(row, column, cellValue)",
          "4972:                 }",
          "4973:                 this.clearValidate()",
          "4974:               })",
          "4975:               .catch(({ rule }) => {",
          "4976:                 if (customVal) {",
          "4977:                   setCellValue(row, column, cellValue)",
          "4978:                 }",
          "4979:                 this.showValidTooltip({ rule, row, column, cell })",
          "4980:               })",
          "",
          "[Added Lines]",
          "5035:       const tableBody = $refs.tableBody",
          "5036:       if (slotParams && tableBody && editRules) {",
          "5039:         if (this.hasCellRules) {",
          "5040:           if (this.hasCellRules(type, row, column)) {",
          "5041:             const cell = this.getCell(row, column)",
          "5042:             if (cell) {",
          "5043:               return this.validCellRules(type, row, column, cellValue)",
          "5044:                 .then(() => {",
          "5045:                   if (customVal && validStore.visible) {",
          "5046:                     setCellValue(row, column, cellValue)",
          "5047:                   }",
          "5048:                   this.clearValidate(row, column)",
          "5049:                 })",
          "5050:                 .catch(({ rule }) => {",
          "5051:                   if (customVal) {",
          "5052:                     setCellValue(row, column, cellValue)",
          "5053:                   }",
          "5054:                   this.showValidTooltip({ rule, row, column, cell })",
          "5055:                 })",
          "5056:             }",
          "",
          "---------------"
        ],
        "packages/table/src/table.js||packages/table/src/table.js": [
          "File: packages/table/src/table.js -> packages/table/src/table.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "343:       upDataFlag: 0,",
          "345:       reColumnFlag: 0,",
          "347:       filterStore: {",
          "348:         isAllSelected: false,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "347:       pendingRowMaps: {},",
          "349:       pendingRowList: [],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "413:       },",
          "415:       validStore: {",
          "422:       },",
          "424:       importStore: {",
          "425:         inited: false,",
          "",
          "[Removed Lines]",
          "416:         visible: false,",
          "417:         row: null,",
          "418:         column: null,",
          "419:         content: '',",
          "420:         rule: null,",
          "421:         isArrow: false",
          "",
          "[Added Lines]",
          "420:         visible: false",
          "422:       validErrorMaps: {},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1044:       class: ['vxe-table', 'vxe-table--render-default', `tid_${tId}`, vSize ? `size--${vSize}` : '', `border--${tableBorder}`, {",
          "1045:         [`vaild-msg--${validOpts.msgMode}`]: !!editRules,",
          "1046:         'vxe-editable': !!editConfig,",
          "1047:         'cell--highlight': highlightCell,",
          "1048:         'cell--selected': mouseConfig && mouseOpts.selected,",
          "1049:         'cell--area': mouseConfig && mouseOpts.area,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1047:         'old-cell-valid': editRules && GlobalConfig.cellVaildMode === 'obsolete',",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1228:       hasTip && this.editRules && validOpts.showMessage && (validOpts.message === 'default' ? !height : validOpts.message === 'tooltip') ? h('vxe-tooltip', {",
          "1229:         ref: 'validTip',",
          "1231:         props: validOpts.message === 'tooltip' || tableData.length === 1 ? validTipOpts : null",
          "1232:       }) : _e()",
          "1233:     ])",
          "",
          "[Removed Lines]",
          "1230:         class: 'vxe-table--valid-error',",
          "",
          "[Added Lines]",
          "1231:         class: [{",
          "1232:           'old-cell-valid': editRules && GlobalConfig.cellVaildMode === 'obsolete'",
          "1233:         }, 'vxe-table--valid-error'],",
          "",
          "---------------"
        ],
        "packages/tooltip/src/tooltip.js||packages/tooltip/src/tooltip.js": [
          "File: packages/tooltip/src/tooltip.js -> packages/tooltip/src/tooltip.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:         'is--enterable': enterable,",
          "176:         'is--visible': visible,",
          "177:         'is--arrow': isArrow,",
          "179:       }],",
          "180:       style: tipStore.style,",
          "181:       ref: 'tipWrapper',",
          "",
          "[Removed Lines]",
          "178:         'is--actived': tipActive",
          "",
          "[Added Lines]",
          "178:         'is--active': tipActive",
          "",
          "---------------"
        ],
        "packages/validator/src/mixin.js||packages/validator/src/mixin.js": [
          "File: packages/validator/src/mixin.js -> packages/validator/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import XEUtils from 'xe-utils'",
          "2: import VXETable from '../../v-x-e-table'",
          "3: import GlobalConfig from '../../v-x-e-table/src/conf'",
          "4: import { eqEmptyValue, getFuncText } from '../../tools/utils'",
          "5: import { warnLog, errLog } from '../../tools/log'",
          "6: import DomTools from '../../tools/dom'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import { getRowid, handleFieldOrColumn } from '../../table/src/util'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:     handleValidError (params) {",
          "90:       return new Promise(resolve => {",
          "92:           this.emitEvent('valid-error', params)",
          "93:           resolve()",
          "94:         } else {",
          "",
          "[Removed Lines]",
          "91:         if (this.validOpts.autoPos === false) {",
          "",
          "[Added Lines]",
          "91:       const { validOpts } = this",
          "93:         if (validOpts.autoPos === false) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:         }",
          "101:       })",
          "102:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     handleErrMsgMode (validErrMaps) {",
          "106:       const { validOpts } = this",
          "107:       if (validOpts.msgMode === 'single') {",
          "108:         const keys = Object.keys(validErrMaps)",
          "109:         const resMaps = validErrMaps",
          "110:         if (keys.length) {",
          "111:           const firstKey = keys[0]",
          "112:           resMaps[firstKey] = validErrMaps[firstKey]",
          "113:         }",
          "114:         return resMaps",
          "115:       }",
          "116:       return validErrMaps",
          "117:     },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "112:     beginValidate (rows, cb, isFull) {",
          "113:       const validRest = {}",
          "115:       const childrenField = treeOpts.children || treeOpts.childrenField",
          "116:       let vaildDatas",
          "117:       if (rows === true) {",
          "",
          "[Removed Lines]",
          "114:       const { editRules, afterFullData, treeConfig, treeOpts } = this",
          "",
          "[Added Lines]",
          "129:       const { editRules, afterFullData, visibleColumn, treeConfig, treeOpts } = this",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "130:       this.lastCallTime = Date.now()",
          "131:       this.validRuleErr = false // \u5982\u679c\u4e3a\u5feb\u901f\u6821\u9a8c\uff0c\u5f53\u5b58\u5728\u67d0\u5217\u6821\u9a8c\u4e0d\u901a\u8fc7\u65f6\u5c06\u7ec8\u6b62\u6267\u884c",
          "132:       this.clearValidate()",
          "133:       if (editRules) {",
          "134:         const columns = this.getColumns()",
          "135:         const handleVaild = row => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:       const validErrMaps = {}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "153:                       if (!validRest[column.property]) {",
          "154:                         validRest[column.property] = []",
          "155:                       }",
          "156:                       validRest[column.property].push(rest)",
          "157:                       if (!isFull) {",
          "158:                         this.validRuleErr = true",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:                       validErrMaps[`${getRowid(this, row)}:${column.id}`] = {",
          "173:                         column,",
          "174:                         row,",
          "175:                         rule,",
          "176:                         content: rule.content",
          "177:                       }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "172:         }",
          "173:         return Promise.all(rowValids).then(() => {",
          "174:           const ruleProps = Object.keys(validRest)",
          "175:           return this.$nextTick().then(() => {",
          "176:             if (ruleProps.length) {",
          "177:               return Promise.reject(validRest[ruleProps[0]][0])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:           this.validErrorMaps = this.handleErrMsgMode(validErrMaps)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "213:             if (this.validOpts.autoPos === false) {",
          "214:               finish()",
          "215:             } else {",
          "221:             }",
          "222:           })",
          "223:         })",
          "224:       }",
          "225:       return this.$nextTick().then(() => {",
          "226:         if (cb) {",
          "",
          "[Removed Lines]",
          "210:             const row = firstErrParams.row",
          "211:             const rowIndex = afterFullData.indexOf(row)",
          "212:             const locatRow = rowIndex > 0 ? afterFullData[rowIndex - 1] : row",
          "216:               if (treeConfig) {",
          "217:                 this.scrollToTreeRow(locatRow).then(posAndFinish)",
          "218:               } else {",
          "219:                 this.scrollToRow(locatRow).then(posAndFinish)",
          "220:               }",
          "",
          "[Added Lines]",
          "236:               const row = firstErrParams.row",
          "237:               const column = firstErrParams.column",
          "238:               const rowIndex = afterFullData.indexOf(row)",
          "239:               const columnIndex = visibleColumn.indexOf(column)",
          "240:               const locatRow = rowIndex > 0 ? afterFullData[rowIndex - 1] : row",
          "241:               const locatColumn = columnIndex > 0 ? visibleColumn[rowIndex - 1] : column",
          "242:               this.scrollToRow(locatRow, locatColumn).then(posAndFinish)",
          "246:       } else {",
          "247:         this.validErrorMaps = {}",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "335:         }",
          "336:       })",
          "337:     },",
          "339:       const validTip = this.$refs.validTip",
          "348:         validTip.close()",
          "349:       }",
          "350:       return this.$nextTick()",
          "351:     },",
          "355:     triggerValidate (type) {",
          "357:       const { actived } = editStore",
          "359:         const { row, column, cell } = actived.args",
          "360:         if (this.hasCellRules(type, row, column)) {",
          "361:           return this.validCellRules(type, row, column).then(() => {",
          "366:             }",
          "367:           }).catch(({ rule }) => {",
          "",
          "[Removed Lines]",
          "338:     _clearValidate () {",
          "340:       Object.assign(this.validStore, {",
          "341:         visible: false,",
          "342:         row: null,",
          "343:         column: null,",
          "344:         content: '',",
          "345:         rule: null",
          "346:       })",
          "347:       if (validTip && validTip.visible) {",
          "356:       const { editConfig, editStore, editRules, validStore } = this",
          "358:       if (actived.row && editRules) {",
          "362:             if (editConfig.mode === 'row') {",
          "363:               if (validStore.visible && validStore.row === row && validStore.column === column) {",
          "364:                 this.clearValidate()",
          "365:               }",
          "",
          "[Added Lines]",
          "362:     _clearValidate  (rows, fieldOrColumn) {",
          "363:       const { validOpts, validErrorMaps } = this",
          "365:       const rowList = XEUtils.isArray(rows) ? rows : (rows ? [rows] : [])",
          "366:       const colList = (XEUtils.isArray(fieldOrColumn) ? fieldOrColumn : (fieldOrColumn ? [fieldOrColumn] : []).map(column => handleFieldOrColumn(this, column)))",
          "367:       let validErrMaps = {}",
          "368:       if (validTip && validTip.reactData.visible) {",
          "372:       if (validOpts.msgMode === 'single') {",
          "373:         this.validErrorMaps = {}",
          "374:         return this.$nextTick()",
          "375:       }",
          "376:       if (rowList.length && colList.length) {",
          "377:         validErrMaps = Object.assign({}, validErrorMaps)",
          "378:         rowList.forEach(row => {",
          "379:           colList.forEach((column) => {",
          "380:             const vaildKey = `${getRowid(this, row)}:${column.id}`",
          "381:             if (validErrMaps[vaildKey]) {",
          "382:               delete validErrMaps[vaildKey]",
          "383:             }",
          "384:           })",
          "385:         })",
          "386:       } else if (rowList.length) {",
          "387:         const rowidList = rowList.map(row => `${getRowid(this, row)}`)",
          "388:         XEUtils.each(validErrorMaps, (item, key) => {",
          "389:           if (rowidList.indexOf(key.split(':')[0]) > -1) {",
          "390:             validErrMaps[key] = item",
          "391:           }",
          "392:         })",
          "393:       } else if (colList.length) {",
          "394:         const colidList = colList.map(column => `${column.id}`)",
          "395:         XEUtils.each(validErrorMaps, (item, key) => {",
          "396:           if (colidList.indexOf(key.split(':')[1]) > -1) {",
          "397:             validErrMaps[key] = item",
          "398:           }",
          "399:         })",
          "400:       }",
          "401:       this.validErrorMaps = validErrMaps",
          "408:       const { editConfig, editStore, editRules, editOpts, validOpts } = this",
          "411:       if (editRules && validOpts.msgMode === 'single') {",
          "412:         this.validErrorMaps = {}",
          "413:       }",
          "416:       if (editConfig && editRules && actived.row) {",
          "420:             if (editOpts.mode === 'row') {",
          "421:               this.clearValidate(row, column)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "383:     showValidTooltip (params) {",
          "385:       const { rule, row, column, cell } = params",
          "386:       const validTip = $refs.validTip",
          "387:       const content = rule.content",
          "395:         })",
          "397:         if (validTip && (validOpts.message === 'tooltip' || (validOpts.message === 'default' && !height && tableData.length < 2))) {",
          "398:           return validTip.open(cell, content)",
          "399:         }",
          "401:     }",
          "402:   }",
          "403: }",
          "",
          "[Removed Lines]",
          "384:       const { $refs, height, tableData, validOpts } = this",
          "388:       return this.$nextTick(() => {",
          "389:         Object.assign(this.validStore, {",
          "390:           row,",
          "391:           column,",
          "392:           rule,",
          "393:           content,",
          "394:           visible: true",
          "396:         this.emitEvent('valid-error', params)",
          "400:       })",
          "",
          "[Added Lines]",
          "440:       const { $refs, height, validStore, validErrorMaps, tableData, validOpts } = this",
          "444:       validStore.visible = true",
          "445:       if (validOpts.msgMode === 'single') {",
          "446:         this.validErrorMaps = {",
          "447:           [`${getRowid(this, row)}:${column.id}`]: {",
          "448:             column,",
          "449:             row,",
          "450:             rule,",
          "451:             content",
          "452:           }",
          "453:         }",
          "454:       } else {",
          "455:         this.validErrorMaps = Object.assign({}, validErrorMaps, {",
          "456:           [`${getRowid(this, row)}:${column.id}`]: {",
          "457:             column,",
          "458:             row,",
          "459:             rule,",
          "460:             content",
          "461:           }",
          "463:       }",
          "464:       this.emitEvent('valid-error', params, null)",
          "465:       if (validTip) {",
          "469:       }",
          "470:       return this.$nextTick()",
          "",
          "---------------"
        ],
        "styles/grid.scss||styles/grid.scss": [
          "File: styles/grid.scss -> styles/grid.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     padding: 0.5em 1em;",
          "30:     background-color: $vxe-grid-maximize-background-color;",
          "31:   }",
          "52:   .vxe-grid--form-wrapper,",
          "53:   .vxe-grid--top-wrapper,",
          "54:   .vxe-grid--bottom-wrapper  {",
          "",
          "[Removed Lines]",
          "32:   .vxe-body--row {",
          "33:     &.row--pending {",
          "34:       color: $vxe-table-validate-error-color;",
          "35:       text-decoration: line-through;",
          "36:       cursor: no-drop;",
          "37:       .vxe-body--column {",
          "38:         position: relative;",
          "39:         &:after {",
          "40:           content: \"\";",
          "41:           position: absolute;",
          "42:           top: 50%;",
          "43:           left: 0;",
          "44:           width: 100%;",
          "45:           height: 0;",
          "46:           border-bottom: 1px solid $vxe-table-validate-error-color;",
          "47:           z-index: 1;",
          "48:         }",
          "49:       }",
          "50:     }",
          "51:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "styles/table.scss||styles/table.scss": [
          "File: styles/table.scss -> styles/table.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "1067:   .vxe-footer--column {",
          "1068:     &.col--ellipsis {",
          "1069:       @extend %DefaultColumnHeight;",
          "1071:         & > .vxe-cell {",
          "1072:           @extend %TextEllipsis;",
          "1073:         }",
          "",
          "[Removed Lines]",
          "1070:       &:not(.col--actived) {",
          "",
          "[Added Lines]",
          "1070:       &:not(.col--active) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1175:   .vxe-body--column {",
          "1177:     &.col--selected {",
          "1178:       position: relative;",
          "1179:     }",
          "1180:     &.col--valid-error {",
          "1183:         position: absolute;",
          "1185:         left: 50%;",
          "1186:         transform: translateX(-50%);",
          "1188:         pointer-events: none;",
          "1189:         z-index: 4;",
          "1191:           display: inline-block;",
          "1192:           border-radius: $vxe-border-radius;",
          "1196:           pointer-events: auto;",
          "1197:         }",
          "1198:       }",
          "",
          "[Removed Lines]",
          "1176:     &.col--actived,",
          "1181:       .vxe-cell--valid {",
          "1182:         width: 320px;",
          "1184:         bottom: calc(100% + 4px);",
          "1187:         text-align: center;",
          "1190:         .vxe-cell--valid-msg {",
          "1193:           padding: 8px 12px;",
          "1194:           color: #fff;",
          "1195:           background-color: #f56c6c;",
          "",
          "[Added Lines]",
          "1176:     &.col--active,",
          "1181:       .vxe-cell--valid-error-hint {",
          "1182:         width: 100%;",
          "1185:         font-size: 12px;",
          "1186:         line-height: 1.2em;",
          "1188:         text-align: left;",
          "1191:         padding-left: $vxe-table-cell-padding-left;",
          "1192:         padding-right: $vxe-table-cell-padding-right;",
          "1193:         .vxe-cell--valid-error-msg {",
          "1196:           color: $vxe-table-validate-error-color;",
          "1197:           background-color: $vxe-table-validate-error-background-color;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1210:     }",
          "1211:   }",
          "1217:       }",
          "1218:     }",
          "1219:   }",
          "1226:       }",
          "1227:     }",
          "1228:   }",
          "",
          "[Removed Lines]",
          "1212:   .vxe-body--row {",
          "1213:     &:first-child {",
          "1214:       .vxe-cell--valid {",
          "1215:         bottom: auto;",
          "1216:         top: calc(100% + 4px);",
          "1220:   .vxe-body--column {",
          "1221:     &:first-child {",
          "1222:       .vxe-cell--valid {",
          "1223:         left: 10px;",
          "1224:         transform: translateX(0);",
          "1225:         text-align: left;",
          "",
          "[Added Lines]",
          "1214:   &.vaild-msg--single {",
          "1215:     .vxe-body--row {",
          "1216:       &:last-child {",
          "1217:         .vxe-cell--valid-error-hint {",
          "1218:           bottom: calc(100%);",
          "1219:         }",
          "1220:         &:first-child {",
          "1221:           .vxe-cell--valid-error-hint {",
          "1222:             bottom: auto;",
          "1223:           }",
          "1224:         }",
          "1228:   &.vaild-msg--full {",
          "1229:     .vxe-body--row {",
          "1230:       &:last-child {",
          "1231:         .vxe-cell--valid-error-hint {",
          "1232:           top: calc(100% - 1.3em);",
          "1233:         }",
          "1234:       }",
          "1235:     }",
          "1236:   }",
          "1238:   &.old-cell-valid {",
          "1239:     .vxe-body--column {",
          "1240:       &.col--valid-error {",
          "1241:         .vxe-cell--valid-error-hint {",
          "1242:           width: 320px;",
          "1243:           position: absolute;",
          "1244:           bottom: calc(100% + 4px);",
          "1245:           left: 50%;",
          "1246:           transform: translateX(-50%);",
          "1247:           text-align: center;",
          "1248:           pointer-events: none;",
          "1249:           z-index: 4;",
          "1250:           .vxe-cell--valid-error-msg {",
          "1251:             display: inline-block;",
          "1252:             border-radius: $vxe-border-radius;",
          "1253:             padding: 8px 12px;",
          "1254:             color: #fff;",
          "1255:             background-color: #f56c6c;",
          "1256:             pointer-events: auto;",
          "1257:           }",
          "1258:         }",
          "1259:       }",
          "1260:     }",
          "1261:     .vxe-body--row {",
          "1262:       &:first-child {",
          "1263:         .vxe-cell--valid-error-hint {",
          "1264:           bottom: auto;",
          "1265:           top: calc(100% + 4px);",
          "1266:         }",
          "1267:       }",
          "1268:     }",
          "1269:     .vxe-body--column {",
          "1270:       &:first-child {",
          "1271:         .vxe-cell--valid-error-hint {",
          "1272:           left: 10px;",
          "1273:           transform: translateX(0);",
          "1274:           text-align: left;",
          "1275:         }",
          "1276:       }",
          "1277:     }",
          "1278:   }",
          "1281:   .vxe-body--row {",
          "1282:     &.row--pending {",
          "1283:       color: $vxe-table-validate-error-color;",
          "1284:       text-decoration: line-through;",
          "1285:       cursor: no-drop;",
          "1286:       .vxe-body--column {",
          "1287:         position: relative;",
          "1288:         &:after {",
          "1289:           content: \"\";",
          "1290:           position: absolute;",
          "1291:           top: 50%;",
          "1292:           left: 0;",
          "1293:           width: 100%;",
          "1294:           height: 0;",
          "1295:           border-bottom: 1px solid $vxe-table-validate-error-color;",
          "1296:           z-index: 1;",
          "1297:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1265:   &.vxe-editable {",
          "1266:     &.cell--highlight {",
          "1267:       .vxe-body--column {",
          "1269:           box-shadow: inset 0px 0px 0px 2px $vxe-primary-color;",
          "1270:           &.col--valid-error {",
          "1271:             box-shadow: inset 0px 0px 0px 2px $vxe-table-validate-error-color;",
          "",
          "[Removed Lines]",
          "1268:         &.col--actived {",
          "",
          "[Added Lines]",
          "1340:         &.col--active {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1297:     }",
          "1298:     .vxe-body--column {",
          "1299:       padding: 0;",
          "1301:         padding: 0;",
          "1302:       }",
          "1303:     }",
          "",
          "[Removed Lines]",
          "1300:       &.col--actived {",
          "",
          "[Added Lines]",
          "1372:       &.col--active {",
          "",
          "---------------"
        ],
        "types/grid.d.ts||types/grid.d.ts": [
          "File: types/grid.d.ts -> types/grid.d.ts"
        ],
        "types/table.d.ts||types/table.d.ts": [
          "File: types/table.d.ts -> types/table.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "602:   setRadioRow(row: RowInfo): Promise<any>;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "606:   setPendingRow(rows: any | any[], status: boolean): Promise<any>",
          "610:   togglePendingRow(rows: any | any[]): Promise<any>",
          "614:   getPendingRecords(): any[]",
          "618:   clearPendingRow(): Promise<any>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "913:     insertRecords: RowInfo[];",
          "914:     removeRecords: RowInfo[];",
          "915:     updateRecords: RowInfo[];",
          "916:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "932:     pendingRecords: RowInfo[]",
          "",
          "---------------"
        ],
        "types/v-x-e-table/renderer.d.ts||types/v-x-e-table/renderer.d.ts": [
          "File: types/v-x-e-table/renderer.d.ts -> types/v-x-e-table/renderer.d.ts"
        ]
      }
    }
  ]
}