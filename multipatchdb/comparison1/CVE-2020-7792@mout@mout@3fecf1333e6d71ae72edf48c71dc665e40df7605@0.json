{
  "cve_id": "CVE-2020-7792",
  "cve_desc": "This affects all versions of package mout. The deepFillIn function can be used to 'fill missing properties recursively', while the deepMixIn 'mixes objects into the target object, recursively mixing existing child objects as well'. In both cases, the key used to access the target object recursively is not checked, leading to a Prototype Pollution.",
  "repo": "mout/mout",
  "patch_hash": "3fecf1333e6d71ae72edf48c71dc665e40df7605",
  "patch_info": {
    "commit_hash": "3fecf1333e6d71ae72edf48c71dc665e40df7605",
    "repo": "mout/mout",
    "commit_url": "https://github.com/mout/mout/commit/3fecf1333e6d71ae72edf48c71dc665e40df7605",
    "files": [
      "src/object/set.js"
    ],
    "message": "Merge pull request #270 from 418sec/1-npm-mout\n\nSecurity Fix for Prototype Pollution - huntr.dev",
    "before_after_code_files": [
      "src/object/set.js||src/object/set.js"
    ]
  },
  "patch_diff": {
    "src/object/set.js||src/object/set.js": [
      "File: src/object/set.js -> src/object/set.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "6:     function set(obj, prop, val){",
      "7:         var parts = (/^(.+)\\.(.+)$/).exec(prop);",
      "8:         if (parts){",
      "9:             namespace(obj, parts[1])[parts[2]] = val;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8:         if(prop.includes('__proto__') || prop.includes('prototype') || prop.includes('constructor')) {",
      "9:             return false;",
      "10:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bd1821223989e815bc7dac1217bc7859777ce0bf",
      "candidate_info": {
        "commit_hash": "bd1821223989e815bc7dac1217bc7859777ce0bf",
        "repo": "mout/mout",
        "commit_url": "https://github.com/mout/mout/commit/bd1821223989e815bc7dac1217bc7859777ce0bf",
        "files": [
          "src/object/set.js"
        ],
        "message": "fixed prototype pollution",
        "before_after_code_files": [
          "src/object/set.js||src/object/set.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/mout/mout/pull/270"
        ],
        "olp_code_files": {
          "patch": [
            "src/object/set.js||src/object/set.js"
          ],
          "candidate": [
            "src/object/set.js||src/object/set.js"
          ]
        }
      },
      "candidate_diff": {
        "src/object/set.js||src/object/set.js": [
          "File: src/object/set.js -> src/object/set.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:     function set(obj, prop, val){",
          "7:         var parts = (/^(.+)\\.(.+)$/).exec(prop);",
          "8:         if (parts){",
          "9:             namespace(obj, parts[1])[parts[2]] = val;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:         if(prop.includes('__proto__') || prop.includes('prototype') || prop.includes('constructor')) {",
          "9:             return false;",
          "10:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}