{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bfa6df0c85c782aa5e525d35e7eb5c530eb7208c",
      "candidate_info": {
        "commit_hash": "bfa6df0c85c782aa5e525d35e7eb5c530eb7208c",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/bfa6df0c85c782aa5e525d35e7eb5c530eb7208c",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceCMYK.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java"
        ],
        "message": "PDFBOX-5056: fix double-checked locking, as suggested by Mike Kaplinskiy; closes #90\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884796 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceCMYK.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceCMYK.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceCMYK.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceCMYK.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceCMYK.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceCMYK.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     }",
          "49:     private final PDColor initialColor = new PDColor(new float[] { 0, 0, 0, 1 }, this);",
          "51:     private boolean usePureJavaCMYKConversion = false;",
          "53:     protected PDDeviceCMYK()",
          "",
          "[Removed Lines]",
          "50:     private volatile ICC_ColorSpace awtColorSpace;",
          "",
          "[Added Lines]",
          "50:     private ICC_ColorSpace awtColorSpace;",
          "51:     private volatile boolean initDone = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     protected void init() throws IOException",
          "61:     {",
          "64:         {",
          "65:             return;",
          "66:         }",
          "67:         synchronized (this)",
          "68:         {",
          "71:             {",
          "72:                 return;",
          "73:             }",
          "",
          "[Removed Lines]",
          "63:         if (awtColorSpace != null)",
          "70:             if (awtColorSpace != null)",
          "",
          "[Added Lines]",
          "64:         if (initDone)",
          "71:             if (initDone)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:             awtColorSpace.toRGB(new float[] { 0, 0, 0, 0 });",
          "86:             usePureJavaCMYKConversion = System",
          "87:                     .getProperty(\"org.apache.pdfbox.rendering.UsePureJavaCMYKConversion\") != null;",
          "88:         }",
          "89:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:             initDone = true;",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     public static final PDDeviceRGB INSTANCE = new PDDeviceRGB();",
          "38:     private final PDColor initialColor = new PDColor(new float[] { 0, 0, 0 }, this);",
          "41:     private PDDeviceRGB()",
          "42:     {",
          "",
          "[Removed Lines]",
          "39:     private volatile ColorSpace awtColorSpace;",
          "",
          "[Added Lines]",
          "39:     private ColorSpace awtColorSpace;",
          "40:     private volatile boolean initDone = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     private void init()",
          "49:     {",
          "52:         {",
          "53:             return;",
          "54:         }",
          "",
          "[Removed Lines]",
          "51:         if (awtColorSpace != null)",
          "",
          "[Added Lines]",
          "52:         if (initDone)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:         synchronized (this)",
          "57:         {",
          "60:             {",
          "61:                 return;",
          "62:             }",
          "",
          "[Removed Lines]",
          "59:             if (awtColorSpace != null)",
          "",
          "[Added Lines]",
          "60:             if (initDone)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "68:             awtColorSpace.toRGB(new float[] { 0, 0, 0, 0 });",
          "69:         }",
          "70:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:             initDone = true;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cbed0bf12e1bb37844c5f66a968b8f1c0934ded2",
      "candidate_info": {
        "commit_hash": "cbed0bf12e1bb37844c5f66a968b8f1c0934ded2",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/cbed0bf12e1bb37844c5f66a968b8f1c0934ded2",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/EmbeddedFiles.java"
        ],
        "message": "PDFBOX-5138: remove debug\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887976 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/EmbeddedFiles.java||examples/src/main/java/org/apache/pdfbox/examples/pdmodel/EmbeddedFiles.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/EmbeddedFiles.java||examples/src/main/java/org/apache/pdfbox/examples/pdmodel/EmbeddedFiles.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/pdmodel/EmbeddedFiles.java -> examples/src/main/java/org/apache/pdfbox/examples/pdmodel/EmbeddedFiles.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.examples.pdmodel;",
          "19: import java.io.ByteArrayInputStream;",
          "21: import java.io.IOException;",
          "22: import java.util.ArrayList;",
          "23: import java.util.Collections;",
          "",
          "[Removed Lines]",
          "20: import java.io.File;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:             doc.getDocumentCatalog().setPageMode(PageMode.USE_ATTACHMENTS);",
          "118:             doc.save( file );",
          "119:         }",
          "120:         finally",
          "",
          "[Removed Lines]",
          "115: System.out.println(\"file: '\" + file + \"'\");",
          "116: System.out.println(\"Abs path: \" + new File(file).getAbsolutePath());",
          "117: System.out.println(\"parent exists? \" + new File(file).getParentFile().exists());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55c4031f9a016073df9bdb515d2c9bb7fef9bff5",
      "candidate_info": {
        "commit_hash": "55c4031f9a016073df9bdb515d2c9bb7fef9bff5",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/55c4031f9a016073df9bdb515d2c9bb7fef9bff5",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java"
        ],
        "message": "PDFBOX-4892: fix typo, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887593 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:         {",
          "218:             throw new IllegalArgumentException(\"index '\" + index",
          "219:                     + \"' is not a valid index for the field \" + getFullyQualifiedName()",
          "221:         }",
          "223:         updateByValue(String.valueOf(index));",
          "",
          "[Removed Lines]",
          "220:                     + \", valid indizes are from 0 to \" + (getExportValues().size() - 1));",
          "",
          "[Added Lines]",
          "220:                     + \", valid indices are from 0 to \" + (getExportValues().size() - 1));",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:                 fail(\"Expected an IndexOutOfBoundsException to be thrown\");",
          "296:             } catch (Exception ex) {",
          "299:                 String actualMessage = ex.getMessage();",
          "300:                 assertTrue(actualMessage.contains(expectedMessage));",
          "301:             }",
          "",
          "[Removed Lines]",
          "298:                 String expectedMessage = \"index '6' is not a valid index for the field Checking/Savings, valid indizes are from 0 to 5\";",
          "",
          "[Added Lines]",
          "298:                 String expectedMessage = \"index '6' is not a valid index for the field Checking/Savings, valid indices are from 0 to 5\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70045fd072250cad35fb902a89d333a939ae40e6",
      "candidate_info": {
        "commit_hash": "70045fd072250cad35fb902a89d333a939ae40e6",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/70045fd072250cad35fb902a89d333a939ae40e6",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/WinAnsiEncoding.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/PDFontTest.java"
        ],
        "message": "PDFBOX-5115: support soft hyphen\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887254 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/WinAnsiEncoding.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/WinAnsiEncoding.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/PDFontTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/PDFontTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/WinAnsiEncoding.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/WinAnsiEncoding.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/WinAnsiEncoding.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/WinAnsiEncoding.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "252:             {060, \"zero\"},",
          "254:             {0240, \"nbspace\"},",
          "256:     };",
          "",
          "[Removed Lines]",
          "255:             {0255, \"hyphen\"}",
          "",
          "[Added Lines]",
          "255:             {0255, \"sfthyphen\"}",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/PDFontTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/PDFontTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/PDFontTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/PDFontTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "410:         Assert.assertTrue(tempPdfFile.delete());",
          "411:     }",
          "412: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "416:     @Test",
          "417:     public void testSoftHyphen() throws IOException",
          "418:     {",
          "419:         String text = \"- \\u00AD\";",
          "420:         ByteArrayOutputStream baos = new ByteArrayOutputStream();",
          "421:         PDDocument doc = new PDDocument();",
          "422:         PDPage page = new PDPage();",
          "423:         doc.addPage(page);",
          "424:         PDFont font1 = PDType1Font.HELVETICA;",
          "425:         PDFont font2 = PDType0Font.load(doc, PDFontTest.class.getResourceAsStream(",
          "426:                 \"/org/apache/pdfbox/resources/ttf/LiberationSans-Regular.ttf\"));",
          "428:         PDPageContentStream cs = new PDPageContentStream(doc, page);",
          "429:         cs.beginText();",
          "430:         cs.newLineAtOffset(100, 500);",
          "431:         cs.setFont(font1, 10);",
          "432:         cs.showText(text);",
          "433:         cs.newLineAtOffset(0, 100);",
          "434:         cs.setFont(font2, 10);",
          "435:         cs.showText(text);",
          "436:         cs.endText();",
          "437:         cs.close();",
          "438:         doc.save(baos);",
          "439:         doc.close();",
          "441:         doc = PDDocument.load(baos.toByteArray());",
          "442:         PDFTextStripper stripper = new PDFTextStripper();",
          "443:         stripper.setLineSeparator(\"\\n\");",
          "444:         String extractedText = stripper.getText(doc);",
          "445:         Assert.assertEquals(text + \"\\n\" + text, extractedText.trim());",
          "446:         doc.close();",
          "447:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e3d1a6fb66a696478d5f34a8ad7609893f19a84",
      "candidate_info": {
        "commit_hash": "6e3d1a6fb66a696478d5f34a8ad7609893f19a84",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/6e3d1a6fb66a696478d5f34a8ad7609893f19a84",
        "files": [
          "preflight/src/main/java/org/apache/pdfbox/preflight/font/Type0FontValidator.java"
        ],
        "message": "PDFBOX-5090: strict mode with overflow detection is limited to CMaps within PDFs\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1886058 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "preflight/src/main/java/org/apache/pdfbox/preflight/font/Type0FontValidator.java||preflight/src/main/java/org/apache/pdfbox/preflight/font/Type0FontValidator.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "preflight/src/main/java/org/apache/pdfbox/preflight/font/Type0FontValidator.java||preflight/src/main/java/org/apache/pdfbox/preflight/font/Type0FontValidator.java": [
          "File: preflight/src/main/java/org/apache/pdfbox/preflight/font/Type0FontValidator.java -> preflight/src/main/java/org/apache/pdfbox/preflight/font/Type0FontValidator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "260:         InputStream cmapStream = null;",
          "261:         try",
          "262:         {",
          "264:             cmapStream = aCMap.createInputStream();",
          "266:             int wmValue = fontboxCMap.getWMode();",
          "267:             String cmnValue = fontboxCMap.getName();",
          "",
          "[Removed Lines]",
          "265:             CMap fontboxCMap = new CMapParser().parse(cmapStream);",
          "",
          "[Added Lines]",
          "265:             CMap fontboxCMap = new CMapParser(true).parse(cmapStream);",
          "",
          "---------------"
        ]
      }
    }
  ]
}