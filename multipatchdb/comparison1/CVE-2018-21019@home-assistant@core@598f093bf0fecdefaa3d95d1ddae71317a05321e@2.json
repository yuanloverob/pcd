{
  "cve_id": "CVE-2018-21019",
  "cve_desc": "Home Assistant before 0.67.0 was vulnerable to an information disclosure that allowed an unauthenticated attacker to read the application's error log via components/api.py.",
  "repo": "home-assistant/core",
  "patch_hash": "598f093bf0fecdefaa3d95d1ddae71317a05321e",
  "patch_info": {
    "commit_hash": "598f093bf0fecdefaa3d95d1ddae71317a05321e",
    "repo": "home-assistant/core",
    "commit_url": "https://github.com/home-assistant/core/commit/598f093bf0fecdefaa3d95d1ddae71317a05321e",
    "files": [
      "homeassistant/components/api.py",
      "tests/components/test_api.py"
    ],
    "message": "Add authentication to error log endpoint (#13836)",
    "before_after_code_files": [
      "homeassistant/components/api.py||homeassistant/components/api.py",
      "tests/components/test_api.py||tests/components/test_api.py"
    ]
  },
  "patch_diff": {
    "homeassistant/components/api.py||homeassistant/components/api.py": [
      "File: homeassistant/components/api.py -> homeassistant/components/api.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:     hass.http.register_view(APIComponentsView)",
      "53:     hass.http.register_view(APITemplateView)",
      "59:     return True",
      "",
      "[Removed Lines]",
      "55:     log_path = hass.data.get(DATA_LOGGING, None)",
      "56:     if log_path:",
      "57:         hass.http.register_static_path(URL_API_ERROR_LOG, log_path, False)",
      "",
      "[Added Lines]",
      "55:     if DATA_LOGGING in hass.data:",
      "56:         hass.http.register_view(APIErrorLog)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "356:                                      HTTP_BAD_REQUEST)",
      "359: @asyncio.coroutine",
      "360: def async_services_json(hass):",
      "361:     \"\"\"Generate services data to JSONify.\"\"\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "358: class APIErrorLog(HomeAssistantView):",
      "359:     \"\"\"View to fetch the error log.\"\"\"",
      "361:     url = URL_API_ERROR_LOG",
      "362:     name = \"api:error_log\"",
      "364:     async def get(self, request):",
      "365:         \"\"\"Retrieve API error log.\"\"\"",
      "366:         return await self.file(request, request.app['hass'].data[DATA_LOGGING])",
      "",
      "---------------"
    ],
    "tests/components/test_api.py||tests/components/test_api.py": [
      "File: tests/components/test_api.py -> tests/components/test_api.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: # pylint: disable=protected-access",
      "3: import asyncio",
      "4: import json",
      "6: import pytest",
      "8: from homeassistant import const",
      "9: import homeassistant.core as ha",
      "10: from homeassistant.setup import async_setup_component",
      "13: @pytest.fixture",
      "14: def mock_api_client(hass, aiohttp_client):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: from unittest.mock import patch",
      "7: from aiohttp import web",
      "11: from homeassistant.bootstrap import DATA_LOGGING",
      "15: from tests.common import mock_coro",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "398: def _listen_count(hass):",
      "399:     \"\"\"Return number of event listeners.\"\"\"",
      "400:     return sum(hass.bus.async_listeners().values())",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "408: async def test_api_error_log(hass, aiohttp_client):",
      "409:     \"\"\"Test if we can fetch the error log.\"\"\"",
      "410:     hass.data[DATA_LOGGING] = '/some/path'",
      "411:     await async_setup_component(hass, 'api', {",
      "412:         'http': {",
      "413:             'api_password': 'yolo'",
      "414:         }",
      "415:     })",
      "416:     client = await aiohttp_client(hass.http.app)",
      "418:     resp = await client.get(const.URL_API_ERROR_LOG)",
      "419:     # Verufy auth required",
      "420:     assert resp.status == 401",
      "422:     with patch(",
      "423:                 'homeassistant.components.http.view.HomeAssistantView.file',",
      "424:                 return_value=mock_coro(web.Response(status=200, text='Hello'))",
      "425:             ) as mock_file:",
      "426:         resp = await client.get(const.URL_API_ERROR_LOG, headers={",
      "427:             'x-ha-access': 'yolo'",
      "428:         })",
      "430:     assert len(mock_file.mock_calls) == 1",
      "431:     assert mock_file.mock_calls[0][1][1] == hass.data[DATA_LOGGING]",
      "432:     assert resp.status == 200",
      "433:     assert await resp.text() == 'Hello'",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "20ababec3e28ced91fc3d3e79b229612a3d9c99d",
      "candidate_info": {
        "commit_hash": "20ababec3e28ced91fc3d3e79b229612a3d9c99d",
        "repo": "home-assistant/core",
        "commit_url": "https://github.com/home-assistant/core/commit/20ababec3e28ced91fc3d3e79b229612a3d9c99d",
        "files": [
          "homeassistant/components/api.py",
          "tests/components/test_api.py"
        ],
        "message": "Add authentication to error log endpoint (#13836)",
        "before_after_code_files": [
          "homeassistant/components/api.py||homeassistant/components/api.py",
          "tests/components/test_api.py||tests/components/test_api.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "homeassistant/components/api.py||homeassistant/components/api.py",
            "tests/components/test_api.py||tests/components/test_api.py"
          ],
          "candidate": [
            "homeassistant/components/api.py||homeassistant/components/api.py",
            "tests/components/test_api.py||tests/components/test_api.py"
          ]
        }
      },
      "candidate_diff": {
        "homeassistant/components/api.py||homeassistant/components/api.py": [
          "File: homeassistant/components/api.py -> homeassistant/components/api.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     hass.http.register_view(APIComponentsView)",
          "53:     hass.http.register_view(APITemplateView)",
          "59:     return True",
          "",
          "[Removed Lines]",
          "55:     log_path = hass.data.get(DATA_LOGGING, None)",
          "56:     if log_path:",
          "57:         hass.http.register_static_path(URL_API_ERROR_LOG, log_path, False)",
          "",
          "[Added Lines]",
          "55:     if DATA_LOGGING in hass.data:",
          "56:         hass.http.register_view(APIErrorLog)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "356:                                      HTTP_BAD_REQUEST)",
          "359: @asyncio.coroutine",
          "360: def async_services_json(hass):",
          "361:     \"\"\"Generate services data to JSONify.\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358: class APIErrorLog(HomeAssistantView):",
          "359:     \"\"\"View to fetch the error log.\"\"\"",
          "361:     url = URL_API_ERROR_LOG",
          "362:     name = \"api:error_log\"",
          "364:     async def get(self, request):",
          "365:         \"\"\"Retrieve API error log.\"\"\"",
          "366:         return await self.file(request, request.app['hass'].data[DATA_LOGGING])",
          "",
          "---------------"
        ],
        "tests/components/test_api.py||tests/components/test_api.py": [
          "File: tests/components/test_api.py -> tests/components/test_api.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # pylint: disable=protected-access",
          "3: import asyncio",
          "4: import json",
          "6: import pytest",
          "8: from homeassistant import const",
          "9: import homeassistant.core as ha",
          "10: from homeassistant.setup import async_setup_component",
          "13: @pytest.fixture",
          "14: def mock_api_client(hass, aiohttp_client):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: from unittest.mock import patch",
          "7: from aiohttp import web",
          "11: from homeassistant.bootstrap import DATA_LOGGING",
          "15: from tests.common import mock_coro",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398: def _listen_count(hass):",
          "399:     \"\"\"Return number of event listeners.\"\"\"",
          "400:     return sum(hass.bus.async_listeners().values())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "408: async def test_api_error_log(hass, aiohttp_client):",
          "409:     \"\"\"Test if we can fetch the error log.\"\"\"",
          "410:     hass.data[DATA_LOGGING] = '/some/path'",
          "411:     await async_setup_component(hass, 'api', {",
          "412:         'http': {",
          "413:             'api_password': 'yolo'",
          "414:         }",
          "415:     })",
          "416:     client = await aiohttp_client(hass.http.app)",
          "418:     resp = await client.get(const.URL_API_ERROR_LOG)",
          "419:     # Verufy auth required",
          "420:     assert resp.status == 401",
          "422:     with patch(",
          "423:                 'homeassistant.components.http.view.HomeAssistantView.file',",
          "424:                 return_value=mock_coro(web.Response(status=200, text='Hello'))",
          "425:             ) as mock_file:",
          "426:         resp = await client.get(const.URL_API_ERROR_LOG, headers={",
          "427:             'x-ha-access': 'yolo'",
          "428:         })",
          "430:     assert len(mock_file.mock_calls) == 1",
          "431:     assert mock_file.mock_calls[0][1][1] == hass.data[DATA_LOGGING]",
          "432:     assert resp.status == 200",
          "433:     assert await resp.text() == 'Hello'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26c98512c8bbddb7092c564f58f385fa6b9e59f3",
      "candidate_info": {
        "commit_hash": "26c98512c8bbddb7092c564f58f385fa6b9e59f3",
        "repo": "home-assistant/core",
        "commit_url": "https://github.com/home-assistant/core/commit/26c98512c8bbddb7092c564f58f385fa6b9e59f3",
        "files": [
          "homeassistant/bootstrap.py",
          "homeassistant/components/api.py"
        ],
        "message": "Polymer access to log file broken when using new log file command line (#9437)\n\n* Changed api.py to use new log file name\n\n* Only serve log file if logs are active\n\n* Changed log file location to be in hass.data",
        "before_after_code_files": [
          "homeassistant/bootstrap.py||homeassistant/bootstrap.py",
          "homeassistant/components/api.py||homeassistant/components/api.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "homeassistant/components/api.py||homeassistant/components/api.py"
          ],
          "candidate": [
            "homeassistant/components/api.py||homeassistant/components/api.py"
          ]
        }
      },
      "candidate_diff": {
        "homeassistant/bootstrap.py||homeassistant/bootstrap.py": [
          "File: homeassistant/bootstrap.py -> homeassistant/bootstrap.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: _LOGGER = logging.getLogger(__name__)",
          "29: ERROR_LOG_FILENAME = 'home-assistant.log'",
          "30: FIRST_INIT_COMPONENT = set((",
          "31:     'recorder', 'mqtt', 'mqtt_eventstream', 'logger', 'introduction',",
          "32:     'frontend', 'history'))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: # hass.data key for logging information.",
          "32: DATA_LOGGING = 'logging'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281:         logger.addHandler(async_handler)",
          "282:         logger.setLevel(logging.INFO)",
          "284:     else:",
          "285:         _LOGGER.error(",
          "286:             \"Unable to setup error log %s (access denied)\", err_log_path)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "288:         # Save the log file location for access by other components.",
          "289:         hass.data[DATA_LOGGING] = err_log_path",
          "",
          "---------------"
        ],
        "homeassistant/components/api.py||homeassistant/components/api.py": [
          "File: homeassistant/components/api.py -> homeassistant/components/api.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: import homeassistant.core as ha",
          "15: import homeassistant.remote as rem",
          "17: from homeassistant.const import (",
          "18:     EVENT_HOMEASSISTANT_STOP, EVENT_TIME_CHANGED,",
          "19:     HTTP_BAD_REQUEST, HTTP_CREATED, HTTP_NOT_FOUND,",
          "",
          "[Removed Lines]",
          "16: from homeassistant.bootstrap import ERROR_LOG_FILENAME",
          "",
          "[Added Lines]",
          "16: from homeassistant.bootstrap import DATA_LOGGING",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:     hass.http.register_view(APIComponentsView)",
          "52:     hass.http.register_view(APITemplateView)",
          "57:     return True",
          "",
          "[Removed Lines]",
          "54:     hass.http.register_static_path(",
          "55:         URL_API_ERROR_LOG, hass.config.path(ERROR_LOG_FILENAME), False)",
          "",
          "[Added Lines]",
          "54:     log_path = hass.data.get(DATA_LOGGING, None)",
          "55:     if log_path:",
          "56:         hass.http.register_static_path(URL_API_ERROR_LOG, log_path, False)",
          "",
          "---------------"
        ]
      }
    }
  ]
}