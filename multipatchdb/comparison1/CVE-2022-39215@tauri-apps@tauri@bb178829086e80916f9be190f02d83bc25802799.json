{
  "cve_id": "CVE-2022-39215",
  "cve_desc": "Tauri is a framework for building binaries for all major desktop platforms. Due to missing canonicalization when `readDir` is called recursively, it was possible to display directory listings outside of the defined `fs` scope. This required a crafted symbolic link or junction folder inside an allowed path of the `fs` scope. No arbitrary file content could be leaked. The issue has been resolved in version 1.0.6 and the implementation now properly checks if the requested (sub) directory is a symbolic link outside of the defined `scope`. Users are advised to upgrade. Users unable to upgrade should disable the `readDir` endpoint in the `allowlist` inside the `tauri.conf.json`.",
  "repo": "tauri-apps/tauri",
  "patch_hash": "bb178829086e80916f9be190f02d83bc25802799",
  "patch_info": {
    "commit_hash": "bb178829086e80916f9be190f02d83bc25802799",
    "repo": "tauri-apps/tauri",
    "commit_url": "https://github.com/tauri-apps/tauri/commit/bb178829086e80916f9be190f02d83bc25802799",
    "files": [
      ".changes/fix-readir-symlink-scope.md",
      "core/tauri/src/api/dir.rs",
      "core/tauri/src/api/file.rs",
      "core/tauri/src/endpoints/file_system.rs"
    ],
    "message": "fix(endpoints/fs/readDir): don't read symlinks that are not allowed b\u2026 (#5123)",
    "before_after_code_files": [
      "core/tauri/src/api/dir.rs||core/tauri/src/api/dir.rs",
      "core/tauri/src/api/file.rs||core/tauri/src/api/file.rs",
      "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs"
    ]
  },
  "patch_diff": {
    "core/tauri/src/api/dir.rs||core/tauri/src/api/dir.rs": [
      "File: core/tauri/src/api/dir.rs -> core/tauri/src/api/dir.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: use serde::Serialize;",
      "8: use std::{",
      "10:   path::{Path, PathBuf},",
      "11: };",
      "12: use tempfile::{self, tempdir};",
      "",
      "[Removed Lines]",
      "9:   fs::{self, metadata},",
      "",
      "[Added Lines]",
      "9:   fs::{self, metadata, symlink_metadata},",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31:   metadata(path).map(|md| md.is_dir()).map_err(Into::into)",
      "32: }",
      "35: pub fn read_dir<P: AsRef<Path>>(path: P, recursive: bool) -> crate::api::Result<Vec<DiskEntry>> {",
      "36:   let mut files_and_dirs: Vec<DiskEntry> = vec![];",
      "37:   for entry in fs::read_dir(path)? {",
      "38:     let path = entry?.path();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34: fn is_symlink<P: AsRef<Path>>(path: P) -> crate::api::Result<bool> {",
      "36:   #[cfg(windows)]",
      "37:   let ret = symlink_metadata(path)",
      "38:     .map(|md| md.is_symlink())",
      "39:     .map_err(Into::into);",
      "41:   #[cfg(not(windows))]",
      "42:   let ret = symlink_metadata(path)",
      "43:     .map(|md| md.file_type().is_symlink())",
      "44:     .map_err(Into::into);",
      "46:   ret",
      "47: }",
      "51:   read_dir_with_options(path, recursive, ReadDirOptions { scope: None })",
      "52: }",
      "54: #[derive(Clone, Copy)]",
      "55: pub(crate) struct ReadDirOptions<'a> {",
      "56:   pub scope: Option<&'a crate::FsScope>,",
      "57: }",
      "59: pub(crate) fn read_dir_with_options<P: AsRef<Path>>(",
      "60:   path: P,",
      "61:   recursive: bool,",
      "62:   options: ReadDirOptions<'_>,",
      "63: ) -> crate::api::Result<Vec<DiskEntry>> {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "42:       files_and_dirs.push(DiskEntry {",
      "43:         path: path.clone(),",
      "44:         children: if flag {",
      "50:         } else {",
      "51:           None",
      "52:         },",
      "",
      "[Removed Lines]",
      "45:           Some(if recursive {",
      "46:             read_dir(&path_as_string, true)?",
      "47:           } else {",
      "48:             vec![]",
      "49:           })",
      "",
      "[Added Lines]",
      "73:           Some(",
      "74:             if recursive",
      "75:               && (!is_symlink(&path_as_string)?",
      "76:                 || options.scope.map(|s| s.is_allowed(&path)).unwrap_or(true))",
      "77:             {",
      "78:               read_dir_with_options(&path_as_string, true, options)?",
      "79:             } else {",
      "80:               vec![]",
      "81:             },",
      "82:           )",
      "",
      "---------------"
    ],
    "core/tauri/src/api/file.rs||core/tauri/src/api/file.rs": [
      "File: core/tauri/src/api/file.rs -> core/tauri/src/api/file.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "74: #[cfg(test)]",
      "75: mod test {",
      "76:   use super::*;",
      "77:   use crate::api::Error;",
      "78:   use quickcheck::{Arbitrary, Gen};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "77:   #[cfg(not(windows))]",
      "",
      "---------------"
    ],
    "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs": [
      "File: core/tauri/src/endpoints/file_system.rs -> core/tauri/src/endpoints/file_system.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:       path,",
      "192:       dir,",
      "193:     )?;",
      "197:   }",
      "199:   #[module_command_handler(fs_copy_file)]",
      "",
      "[Removed Lines]",
      "194:     dir::read_dir(&resolved_path, recursive)",
      "195:       .with_context(|| format!(\"path: {}\", resolved_path.display()))",
      "196:       .map_err(Into::into)",
      "",
      "[Added Lines]",
      "194:     dir::read_dir_with_options(",
      "195:       &resolved_path,",
      "196:       recursive,",
      "197:       dir::ReadDirOptions {",
      "198:         scope: Some(&context.window.state::<Scopes>().fs),",
      "199:       },",
      "200:     )",
      "201:     .with_context(|| format!(\"path: {}\", resolved_path.display()))",
      "202:     .map_err(Into::into)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "34a402f9b559af377b276d73b800e5e8b7dacbb1",
      "candidate_info": {
        "commit_hash": "34a402f9b559af377b276d73b800e5e8b7dacbb1",
        "repo": "tauri-apps/tauri",
        "commit_url": "https://github.com/tauri-apps/tauri/commit/34a402f9b559af377b276d73b800e5e8b7dacbb1",
        "files": [
          ".changes/fix-asset-protocol-validation.md",
          "core/tauri/src/api/file.rs",
          "core/tauri/src/api/path.rs",
          "core/tauri/src/endpoints/file_system.rs",
          "core/tauri/src/manager.rs"
        ],
        "message": "fix(core): do not allow path traversal on the asset protocol (#3774)",
        "before_after_code_files": [
          "core/tauri/src/api/file.rs||core/tauri/src/api/file.rs",
          "core/tauri/src/api/path.rs||core/tauri/src/api/path.rs",
          "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs",
          "core/tauri/src/manager.rs||core/tauri/src/manager.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/tauri/src/api/file.rs||core/tauri/src/api/file.rs",
            "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs"
          ],
          "candidate": [
            "core/tauri/src/api/file.rs||core/tauri/src/api/file.rs",
            "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs"
          ]
        }
      },
      "candidate_diff": {
        "core/tauri/src/api/file.rs||core/tauri/src/api/file.rs": [
          "File: core/tauri/src/api/file.rs -> core/tauri/src/api/file.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: mod extract;",
          "9: mod file_move;",
          "13: #[cfg(feature = \"fs-extract-api\")]",
          "14: pub use extract::*;",
          "15: pub use file_move::*;",
          "18: pub fn read_string<P: AsRef<Path>>(file: P) -> crate::api::Result<String> {",
          "19:   fs::read_to_string(file).map_err(Into::into)",
          "",
          "[Removed Lines]",
          "11: use std::{fs, path::Path};",
          "",
          "[Added Lines]",
          "11: use std::{",
          "12:   fs,",
          "13:   path::{Display, Path},",
          "14: };",
          "20: use serde::{de::Error as DeError, Deserialize, Deserializer};",
          "22: #[derive(Clone, Debug)]",
          "23: pub(crate) struct SafePathBuf(std::path::PathBuf);",
          "25: impl SafePathBuf {",
          "26:   pub fn new(path: std::path::PathBuf) -> Result<Self, &'static str> {",
          "27:     if path",
          "28:       .components()",
          "29:       .any(|x| matches!(x, std::path::Component::ParentDir))",
          "30:     {",
          "31:       Err(\"cannot traverse directory, rewrite the path without the use of `../`\")",
          "32:     } else {",
          "33:       Ok(Self(path))",
          "34:     }",
          "35:   }",
          "37:   pub unsafe fn new_unchecked(path: std::path::PathBuf) -> Self {",
          "38:     Self(path)",
          "39:   }",
          "41:   pub fn display(&self) -> Display<'_> {",
          "42:     self.0.display()",
          "43:   }",
          "44: }",
          "46: impl AsRef<Path> for SafePathBuf {",
          "47:   fn as_ref(&self) -> &Path {",
          "48:     self.0.as_ref()",
          "49:   }",
          "50: }",
          "52: impl<'de> Deserialize<'de> for SafePathBuf {",
          "53:   fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>",
          "54:   where",
          "55:     D: Deserializer<'de>,",
          "56:   {",
          "57:     let path = std::path::PathBuf::deserialize(deserializer)?;",
          "58:     SafePathBuf::new(path).map_err(DeError::custom)",
          "59:   }",
          "60: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: mod test {",
          "29:   use super::*;",
          "30:   use crate::api::Error;",
          "32:   #[test]",
          "33:   fn check_read_string() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:   use quickcheck::{Arbitrary, Gen};",
          "78:   use std::path::PathBuf;",
          "80:   impl Arbitrary for super::SafePathBuf {",
          "81:     fn arbitrary(g: &mut Gen) -> Self {",
          "82:       Self(PathBuf::arbitrary(g))",
          "83:     }",
          "85:     fn shrink(&self) -> Box<dyn Iterator<Item = Self>> {",
          "86:       Box::new(self.0.shrink().map(SafePathBuf))",
          "87:     }",
          "88:   }",
          "",
          "---------------"
        ],
        "core/tauri/src/api/path.rs||core/tauri/src/api/path.rs": [
          "File: core/tauri/src/api/path.rs -> core/tauri/src/api/path.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:     }",
          "171:     p.push(component);",
          "172:   }",
          "175:   Ok(p)",
          "176: }",
          "",
          "[Removed Lines]",
          "173:   println!(\"res {:?}\", p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs": [
          "File: core/tauri/src/endpoints/file_system.rs -> core/tauri/src/endpoints/file_system.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: use crate::{",
          "7:   scope::Scopes,",
          "8:   Config, Env, Manager, PackageInfo, Runtime, Window,",
          "9: };",
          "",
          "[Removed Lines]",
          "6:   api::{dir, file, path::BaseDirectory},",
          "",
          "[Added Lines]",
          "6:   api::{",
          "7:     dir,",
          "8:     file::{self, SafePathBuf},",
          "9:     path::BaseDirectory,",
          "10:   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:   sync::Arc,",
          "27: };",
          "53: #[derive(Debug, Clone, Deserialize)]",
          "54: pub struct DirOperationOptions {",
          "",
          "[Removed Lines]",
          "29: #[derive(Clone, Debug)]",
          "30: pub struct SafePathBuf(std::path::PathBuf);",
          "32: impl AsRef<Path> for SafePathBuf {",
          "33:   fn as_ref(&self) -> &Path {",
          "34:     self.0.as_ref()",
          "35:   }",
          "36: }",
          "38: impl<'de> Deserialize<'de> for SafePathBuf {",
          "39:   fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>",
          "40:   where",
          "41:     D: Deserializer<'de>,",
          "42:   {",
          "43:     let path = std::path::PathBuf::deserialize(deserializer)?;",
          "44:     if path.components().any(|x| matches!(x, Component::ParentDir)) {",
          "45:       Err(DeError::custom(\"cannot traverse directory\"))",
          "46:     } else {",
          "47:       Ok(SafePathBuf(path))",
          "48:     }",
          "49:   }",
          "50: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72: #[derive(Deserialize, CommandModule)]",
          "73: #[serde(tag = \"cmd\", rename_all = \"camelCase\")]",
          "76:   ReadFile {",
          "77:     path: SafePathBuf,",
          "",
          "[Removed Lines]",
          "74: pub enum Cmd {",
          "",
          "[Added Lines]",
          "55: pub(crate) enum Cmd {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "138:       options.and_then(|o| o.dir),",
          "139:     )?;",
          "140:     file::read_binary(&resolved_path)",
          "142:       .map_err(Into::into)",
          "143:   }",
          "",
          "[Removed Lines]",
          "141:       .with_context(|| format!(\"path: {}\", resolved_path.0.display()))",
          "",
          "[Added Lines]",
          "122:       .with_context(|| format!(\"path: {}\", resolved_path.display()))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "156:       options.and_then(|o| o.dir),",
          "157:     )?;",
          "158:     file::read_string(&resolved_path)",
          "160:       .map_err(Into::into)",
          "161:   }",
          "",
          "[Removed Lines]",
          "159:       .with_context(|| format!(\"path: {}\", resolved_path.0.display()))",
          "",
          "[Added Lines]",
          "140:       .with_context(|| format!(\"path: {}\", resolved_path.display()))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "175:       options.and_then(|o| o.dir),",
          "176:     )?;",
          "177:     File::create(&resolved_path)",
          "179:       .map_err(Into::into)",
          "180:       .and_then(|mut f| f.write_all(&contents).map_err(|err| err.into()))",
          "181:   }",
          "",
          "[Removed Lines]",
          "178:       .with_context(|| format!(\"path: {}\", resolved_path.0.display()))",
          "",
          "[Added Lines]",
          "159:       .with_context(|| format!(\"path: {}\", resolved_path.display()))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "199:       dir,",
          "200:     )?;",
          "201:     dir::read_dir(&resolved_path, recursive)",
          "203:       .map_err(Into::into)",
          "204:   }",
          "",
          "[Removed Lines]",
          "202:       .with_context(|| format!(\"path: {}\", resolved_path.0.display()))",
          "",
          "[Added Lines]",
          "183:       .with_context(|| format!(\"path: {}\", resolved_path.display()))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "230:       None => (source, destination),",
          "231:     };",
          "232:     fs::copy(src.clone(), dest.clone())",
          "234:     Ok(())",
          "235:   }",
          "",
          "[Removed Lines]",
          "233:       .with_context(|| format!(\"source: {}, dest: {}\", src.0.display(), dest.0.display()))?;",
          "",
          "[Added Lines]",
          "214:       .with_context(|| format!(\"source: {}, dest: {}\", src.display(), dest.display()))?;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "254:     )?;",
          "255:     if recursive {",
          "256:       fs::create_dir_all(&resolved_path)",
          "258:     } else {",
          "259:       fs::create_dir(&resolved_path)",
          "261:     }",
          "263:     Ok(())",
          "",
          "[Removed Lines]",
          "257:         .with_context(|| format!(\"path: {}\", resolved_path.0.display()))?;",
          "260:         .with_context(|| format!(\"path: {} (non recursive)\", resolved_path.0.display()))?;",
          "",
          "[Added Lines]",
          "238:         .with_context(|| format!(\"path: {}\", resolved_path.display()))?;",
          "241:         .with_context(|| format!(\"path: {} (non recursive)\", resolved_path.display()))?;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "283:     )?;",
          "284:     if recursive {",
          "285:       fs::remove_dir_all(&resolved_path)",
          "287:     } else {",
          "288:       fs::remove_dir(&resolved_path)",
          "290:     }",
          "292:     Ok(())",
          "",
          "[Removed Lines]",
          "286:         .with_context(|| format!(\"path: {}\", resolved_path.0.display()))?;",
          "289:         .with_context(|| format!(\"path: {} (non recursive)\", resolved_path.0.display()))?;",
          "",
          "[Added Lines]",
          "267:         .with_context(|| format!(\"path: {}\", resolved_path.display()))?;",
          "270:         .with_context(|| format!(\"path: {} (non recursive)\", resolved_path.display()))?;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "306:       options.and_then(|o| o.dir),",
          "307:     )?;",
          "308:     fs::remove_file(&resolved_path)",
          "310:     Ok(())",
          "311:   }",
          "",
          "[Removed Lines]",
          "309:       .with_context(|| format!(\"path: {}\", resolved_path.0.display()))?;",
          "",
          "[Added Lines]",
          "290:       .with_context(|| format!(\"path: {}\", resolved_path.display()))?;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "337:       None => (old_path, new_path),",
          "338:     };",
          "339:     fs::rename(&old, &new)",
          "341:       .map_err(Into::into)",
          "342:   }",
          "343: }",
          "",
          "[Removed Lines]",
          "340:       .with_context(|| format!(\"old: {}, new: {}\", old.0.display(), new.0.display()))",
          "",
          "[Added Lines]",
          "321:       .with_context(|| format!(\"old: {}, new: {}\", old.display(), new.display()))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "354:   match crate::api::path::resolve_path(config, package_info, env, &path, dir) {",
          "355:     Ok(path) => {",
          "356:       if window.state::<Scopes>().fs.is_allowed(&path) {",
          "358:       } else {",
          "359:         Err(anyhow::anyhow!(",
          "360:           crate::Error::PathNotAllowed(path).to_string()",
          "",
          "[Removed Lines]",
          "357:         Ok(SafePathBuf(path))",
          "",
          "[Added Lines]",
          "338:         Ok(",
          "340:           unsafe { SafePathBuf::new_unchecked(path) },",
          "341:         )",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "362:       }",
          "363:     }",
          "364:     Err(e) => super::Result::<SafePathBuf>::Err(e.into())",
          "366:   }",
          "367: }",
          "",
          "[Removed Lines]",
          "365:       .with_context(|| format!(\"path: {}, base dir: {:?}\", path.0.display(), dir)),",
          "",
          "[Added Lines]",
          "349:       .with_context(|| format!(\"path: {}, base dir: {:?}\", path.display(), dir)),",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "373:   use quickcheck::{Arbitrary, Gen};",
          "387:   impl Arbitrary for BaseDirectory {",
          "388:     fn arbitrary(g: &mut Gen) -> Self {",
          "389:       if bool::arbitrary(g) {",
          "",
          "[Removed Lines]",
          "375:   use std::path::PathBuf;",
          "377:   impl Arbitrary for super::SafePathBuf {",
          "378:     fn arbitrary(g: &mut Gen) -> Self {",
          "379:       Self(PathBuf::arbitrary(g))",
          "380:     }",
          "382:     fn shrink(&self) -> Box<dyn Iterator<Item = Self>> {",
          "383:       Box::new(self.0.shrink().map(SafePathBuf))",
          "384:     }",
          "385:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/tauri/src/manager.rs||core/tauri/src/manager.rs": [
          "File: core/tauri/src/manager.rs -> core/tauri/src/manager.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "499:     #[cfg(protocol_asset)]",
          "500:     if !registered_scheme_protocols.contains(&\"asset\".into()) {",
          "501:       use tokio::io::{AsyncReadExt, AsyncSeekExt};",
          "502:       use url::Position;",
          "503:       let asset_scope = self.state().get::<crate::Scopes>().asset_protocol.clone();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "501:       use crate::api::file::SafePathBuf;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "512:           .decode_utf8_lossy()",
          "513:           .to_string();",
          "515:         if !asset_scope.is_allowed(&path) {",
          "516:           #[cfg(debug_assertions)]",
          "517:           eprintln!(\"asset protocol not configured to allow the path: {}\", path);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "516:         if let Err(e) = SafePathBuf::new(path.clone().into()) {",
          "517:           #[cfg(debug_assertions)]",
          "518:           eprintln!(\"asset protocol path \\\"{}\\\" is not valid: {}\", path, e);",
          "519:           return HttpResponseBuilder::new().status(403).body(Vec::new());",
          "520:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5687b7fdcda00ae5369ad7e7747ec134cedcfdf5",
      "candidate_info": {
        "commit_hash": "5687b7fdcda00ae5369ad7e7747ec134cedcfdf5",
        "repo": "tauri-apps/tauri",
        "commit_url": "https://github.com/tauri-apps/tauri/commit/5687b7fdcda00ae5369ad7e7747ec134cedcfdf5",
        "files": [
          "core/tauri-macros/Cargo.toml",
          "core/tauri-macros/src/command_module.rs",
          "core/tauri-macros/src/lib.rs",
          "core/tauri-utils/src/lib.rs",
          "core/tauri/build.rs",
          "core/tauri/scripts/bundle.js",
          "core/tauri/src/api/process/command.rs",
          "core/tauri/src/api/shell.rs",
          "core/tauri/src/endpoints.rs",
          "core/tauri/src/endpoints/app.rs",
          "core/tauri/src/endpoints/cli.rs",
          "core/tauri/src/endpoints/clipboard.rs",
          "core/tauri/src/endpoints/dialog.rs",
          "core/tauri/src/endpoints/event.rs",
          "core/tauri/src/endpoints/file_system.rs",
          "core/tauri/src/endpoints/global_shortcut.rs",
          "core/tauri/src/endpoints/http.rs",
          "core/tauri/src/endpoints/notification.rs",
          "core/tauri/src/endpoints/operating_system.rs",
          "core/tauri/src/endpoints/path.rs",
          "core/tauri/src/endpoints/process.rs",
          "core/tauri/src/endpoints/shell.rs",
          "core/tauri/src/endpoints/window.rs",
          "core/tauri/src/error.rs",
          "examples/api/src-tauri/Cargo.lock",
          "examples/api/src/components/Http.svelte",
          "examples/api/src/components/Window.svelte",
          "tooling/api/src/os.ts"
        ],
        "message": "refactor: use macros to match core commands with allowlist conditionals [TRI-028] (#20)",
        "before_after_code_files": [
          "core/tauri-macros/src/command_module.rs||core/tauri-macros/src/command_module.rs",
          "core/tauri-macros/src/lib.rs||core/tauri-macros/src/lib.rs",
          "core/tauri-utils/src/lib.rs||core/tauri-utils/src/lib.rs",
          "core/tauri/build.rs||core/tauri/build.rs",
          "core/tauri/scripts/bundle.js||core/tauri/scripts/bundle.js",
          "core/tauri/src/api/process/command.rs||core/tauri/src/api/process/command.rs",
          "core/tauri/src/api/shell.rs||core/tauri/src/api/shell.rs",
          "core/tauri/src/endpoints.rs||core/tauri/src/endpoints.rs",
          "core/tauri/src/endpoints/app.rs||core/tauri/src/endpoints/app.rs",
          "core/tauri/src/endpoints/cli.rs||core/tauri/src/endpoints/cli.rs",
          "core/tauri/src/endpoints/clipboard.rs||core/tauri/src/endpoints/clipboard.rs",
          "core/tauri/src/endpoints/dialog.rs||core/tauri/src/endpoints/dialog.rs",
          "core/tauri/src/endpoints/event.rs||core/tauri/src/endpoints/event.rs",
          "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs",
          "core/tauri/src/endpoints/global_shortcut.rs||core/tauri/src/endpoints/global_shortcut.rs",
          "core/tauri/src/endpoints/http.rs||core/tauri/src/endpoints/http.rs",
          "core/tauri/src/endpoints/notification.rs||core/tauri/src/endpoints/notification.rs",
          "core/tauri/src/endpoints/operating_system.rs||core/tauri/src/endpoints/operating_system.rs",
          "core/tauri/src/endpoints/path.rs||core/tauri/src/endpoints/path.rs",
          "core/tauri/src/endpoints/process.rs||core/tauri/src/endpoints/process.rs",
          "core/tauri/src/endpoints/shell.rs||core/tauri/src/endpoints/shell.rs",
          "core/tauri/src/endpoints/window.rs||core/tauri/src/endpoints/window.rs",
          "core/tauri/src/error.rs||core/tauri/src/error.rs",
          "examples/api/src-tauri/Cargo.lock||examples/api/src-tauri/Cargo.lock",
          "examples/api/src/components/Http.svelte||examples/api/src/components/Http.svelte",
          "examples/api/src/components/Window.svelte||examples/api/src/components/Window.svelte",
          "tooling/api/src/os.ts||tooling/api/src/os.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs"
          ],
          "candidate": [
            "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs"
          ]
        }
      },
      "candidate_diff": {
        "core/tauri-macros/src/command_module.rs||core/tauri-macros/src/command_module.rs": [
          "File: core/tauri-macros/src/command_module.rs -> core/tauri-macros/src/command_module.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: use heck::SnakeCase;",
          "6: use proc_macro::TokenStream;",
          "7: use proc_macro2::{Span, TokenStream as TokenStream2, TokenTree};",
          "9: use quote::{format_ident, quote, quote_spanned};",
          "10: use syn::{",
          "11:   parse::{Parse, ParseStream},",
          "12:   spanned::Spanned,",
          "13:   Data, DeriveInput, Error, Fields, Ident, ItemFn, LitStr, Token,",
          "14: };",
          "16: pub fn generate_run_fn(input: DeriveInput) -> TokenStream {",
          "17:   let name = &input.ident;",
          "18:   let data = &input.data;",
          "20:   let mut is_async = false;",
          "21:   let attrs = input.attrs;",
          "22:   for attr in attrs {",
          "23:     if attr.path.is_ident(\"cmd\") {",
          "24:       let _ = attr.parse_args_with(|input: ParseStream| {",
          "25:         while let Some(token) = input.parse()? {",
          "26:           if let TokenTree::Ident(ident) = token {",
          "27:             is_async |= ident == \"async\";",
          "28:           }",
          "29:         }",
          "30:         Ok(())",
          "31:       });",
          "32:     }",
          "33:   }",
          "34:   let maybe_await = if is_async { quote!(.await) } else { quote!() };",
          "35:   let maybe_async = if is_async { quote!(async) } else { quote!() };",
          "37:   let mut matcher;",
          "39:   match data {",
          "40:     Data::Enum(data_enum) => {",
          "41:       matcher = TokenStream2::new();",
          "43:       for variant in &data_enum.variants {",
          "44:         let variant_name = &variant.ident;",
          "46:         let (fields_in_variant, variables) = match &variant.fields {",
          "47:           Fields::Unit => (quote_spanned! { variant.span() => }, quote!()),",
          "48:           Fields::Unnamed(fields) => {",
          "49:             let mut variables = TokenStream2::new();",
          "50:             for i in 0..fields.unnamed.len() {",
          "51:               let variable_name = format_ident!(\"value{}\", i);",
          "52:               variables.extend(quote!(#variable_name,));",
          "53:             }",
          "54:             (quote_spanned! { variant.span() => (#variables) }, variables)",
          "55:           }",
          "56:           Fields::Named(fields) => {",
          "57:             let mut variables = TokenStream2::new();",
          "58:             for field in &fields.named {",
          "59:               let ident = field.ident.as_ref().unwrap();",
          "60:               variables.extend(quote!(#ident,));",
          "61:             }",
          "62:             (",
          "63:               quote_spanned! { variant.span() => { #variables } },",
          "64:               variables,",
          "65:             )",
          "66:           }",
          "67:         };",
          "69:         let mut variant_execute_function_name = format_ident!(",
          "70:           \"{}\",",
          "71:           variant_name.to_string().to_snake_case().to_lowercase()",
          "72:         );",
          "73:         variant_execute_function_name.set_span(variant_name.span());",
          "75:         matcher.extend(quote_spanned! {",
          "76:           variant.span() => #name::#variant_name #fields_in_variant => #name::#variant_execute_function_name(context, #variables)#maybe_await.map(Into::into),",
          "77:         });",
          "78:       }",
          "79:     }",
          "80:     _ => {",
          "81:       return Error::new(",
          "82:         Span::call_site(),",
          "83:         \"CommandModule is only implemented for enums\",",
          "84:       )",
          "85:       .to_compile_error()",
          "86:       .into()",
          "87:     }",
          "88:   };",
          "90:   let (impl_generics, ty_generics, where_clause) = input.generics.split_for_impl();",
          "92:   let expanded = quote! {",
          "93:       impl #impl_generics #name #ty_generics #where_clause {",
          "94:         pub #maybe_async fn run<R: crate::Runtime>(self, context: crate::endpoints::InvokeContext<R>) -> crate::Result<crate::endpoints::InvokeResponse> {",
          "95:           match self {",
          "96:             #matcher",
          "97:           }",
          "98:         }",
          "99:       }",
          "100:   };",
          "102:   TokenStream::from(expanded)",
          "103: }",
          "106: pub struct HandlerAttributes {",
          "107:   allowlist: Ident,",
          "108:   error_message: String,",
          "109: }",
          "111: impl Parse for HandlerAttributes {",
          "112:   fn parse(input: ParseStream) -> syn::Result<Self> {",
          "113:     let allowlist = input.parse()?;",
          "114:     input.parse::<Token![,]>()?;",
          "115:     let raw: LitStr = input.parse()?;",
          "116:     let error_message = raw.value();",
          "117:     Ok(Self {",
          "118:       allowlist,",
          "119:       error_message,",
          "120:     })",
          "121:   }",
          "122: }",
          "124: pub fn command_handler(attributes: HandlerAttributes, function: ItemFn) -> TokenStream2 {",
          "125:   let allowlist = attributes.allowlist;",
          "126:   let error_message = attributes.error_message.as_str();",
          "127:   let signature = function.sig.clone();",
          "129:   quote!(",
          "130:     #[cfg(#allowlist)]",
          "131:     #function",
          "133:     #[cfg(not(#allowlist))]",
          "134:     #[allow(unused_variables)]",
          "135:     #[allow(unused_mut)]",
          "136:     #signature {",
          "137:       Err(crate::Error::ApiNotAllowlisted(",
          "138:         #error_message.to_string(),",
          "139:       ))",
          "140:     }",
          "141:   )",
          "142: }",
          "",
          "---------------"
        ],
        "core/tauri-macros/src/lib.rs||core/tauri-macros/src/lib.rs": [
          "File: core/tauri-macros/src/lib.rs -> core/tauri-macros/src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: use crate::context::ContextItems;",
          "6: use proc_macro::TokenStream;",
          "9: mod command;",
          "10: mod runtime;",
          "12: #[macro_use]",
          "",
          "[Removed Lines]",
          "7: use syn::{parse_macro_input, DeriveInput};",
          "",
          "[Added Lines]",
          "7: use syn::{parse_macro_input, DeriveInput, ItemFn};",
          "10: mod command_module;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:   let input = parse_macro_input!(input as DeriveInput);",
          "74:   runtime::default_runtime(attributes, input).into()",
          "75: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: #[doc(hidden)]",
          "85: #[proc_macro_derive(CommandModule, attributes(cmd))]",
          "86: pub fn derive_command_module(input: TokenStream) -> TokenStream {",
          "87:   let input = parse_macro_input!(input as DeriveInput);",
          "88:   command_module::generate_run_fn(input)",
          "89: }",
          "91: #[doc(hidden)]",
          "92: #[proc_macro_attribute]",
          "93: pub fn module_command_handler(attributes: TokenStream, input: TokenStream) -> TokenStream {",
          "94:   let attributes = parse_macro_input!(attributes as command_module::HandlerAttributes);",
          "95:   let input = parse_macro_input!(input as ItemFn);",
          "96:   command_module::command_handler(attributes, input).into()",
          "97: }",
          "",
          "---------------"
        ],
        "core/tauri-utils/src/lib.rs||core/tauri-utils/src/lib.rs": [
          "File: core/tauri-utils/src/lib.rs -> core/tauri-utils/src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: #[allow(clippy::derivable_impls)]",
          "53: impl Default for Env {",
          "54:   fn default() -> Self {",
          "61:     #[cfg(target_os = \"linux\")]",
          "71:       }",
          "72:     }",
          "74:   }",
          "75: }",
          "",
          "[Removed Lines]",
          "55:     let env = Self {",
          "56:       #[cfg(target_os = \"linux\")]",
          "57:       appimage: std::env::var_os(\"APPIMAGE\"),",
          "58:       #[cfg(target_os = \"linux\")]",
          "59:       appdir: std::env::var_os(\"APPDIR\"),",
          "60:     };",
          "62:     if env.appimage.is_some() || env.appdir.is_some() {",
          "66:       if !std::env::current_exe()",
          "67:         .map(|p| p.to_string_lossy().into_owned().starts_with(\"/tmp/.mount_\"))",
          "68:         .unwrap_or(true)",
          "69:       {",
          "70:         panic!(\"`APPDIR` or `APPIMAGE` environment variable found but this application was not detected as an AppImage; this might be a security issue.\");",
          "73:     env",
          "",
          "[Added Lines]",
          "56:     {",
          "57:       let env = Self {",
          "58:         #[cfg(target_os = \"linux\")]",
          "59:         appimage: std::env::var_os(\"APPIMAGE\"),",
          "60:         #[cfg(target_os = \"linux\")]",
          "61:         appdir: std::env::var_os(\"APPDIR\"),",
          "62:       };",
          "63:       if env.appimage.is_some() || env.appdir.is_some() {",
          "67:         if !std::env::current_exe()",
          "68:           .map(|p| p.to_string_lossy().into_owned().starts_with(\"/tmp/.mount_\"))",
          "69:           .unwrap_or(true)",
          "70:         {",
          "71:           panic!(\"`APPDIR` or `APPIMAGE` environment variable found but this application was not detected as an AppImage; this might be a security issue.\");",
          "72:         }",
          "74:       env",
          "75:     }",
          "76:     #[cfg(not(target_os = \"linux\"))]",
          "77:     {",
          "78:       Self {}",
          "",
          "---------------"
        ],
        "core/tauri/build.rs||core/tauri/build.rs": [
          "File: core/tauri/build.rs -> core/tauri/build.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     window_set_title: { any(window_all, feature = \"window-set-title\") },",
          "34:     window_maximize: { any(window_all, feature = \"window-maximize\") },",
          "35:     window_unmaximize: { any(window_all, feature = \"window-unmaximize\") },",
          "36:     window_show: { any(window_all, feature = \"window-show\") },",
          "37:     window_hide: { any(window_all, feature = \"window-hide\") },",
          "38:     window_close: { any(window_all, feature = \"window-close\") },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:     window_minimize: { any(window_all, feature = \"window-minimize\") },",
          "37:     window_unminimize: { any(window_all, feature = \"window-unminimize\") },",
          "",
          "---------------"
        ],
        "core/tauri/scripts/bundle.js||core/tauri/scripts/bundle.js": [
          "File: core/tauri/scripts/bundle.js -> core/tauri/scripts/bundle.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: function _inherits(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function\");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,\"prototype\",{writable:!1}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var r,n=_getPrototypeOf(e);if(t){var a=_getPrototypeOf(this).constructor;r=Reflect.construct(n,arguments,a)}else r=n.apply(this,arguments);return _possibleConstructorReturn(this,r)}}function _possibleConstructorReturn(e,t){if(t&&(\"object\"===_typeof(t)||\"function\"==typeof t))return t;if(void 0!==t)throw new TypeError(\"Derived constructors may only return object or undefined\");return _assertThisInitialized(e)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}function _isNativeReflectConstruct(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _createForOfIteratorHelper(e,t){var r=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!r){if(Array.isArray(e)||(r=_unsupportedIterableToArray(e))||t&&e&&\"number\"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var o,i=!0,u=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return i=e.done,e},e:function(e){u=!0,o=e},f:function(){try{i||null==r.return||r.return()}finally{if(u)throw o}}}}function _unsupportedIterableToArray(e,t){if(e){if(\"string\"==typeof e)return _arrayLikeToArray(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return\"Object\"===r&&e.constructor&&(r=e.constructor.name),\"Map\"===r||\"Set\"===r?Array.from(e):\"Arguments\"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(r),!0).forEach((function(t){_defineProperty(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ownKeys(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function _defineProperty(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),Object.defineProperty(e,\"prototype\",{writable:!1}),e}function asyncGeneratorStep(e,t,r,n,a,o,i){try{var u=e[o](i),s=u.value}catch(e){return void r(e)}u.done?t(s):Promise.resolve(s).then(n,a)}function _asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise((function(n,a){var o=e.apply(t,r);function i(e){asyncGeneratorStep(o,n,a,i,u,\"next\",e)}function u(e){asyncGeneratorStep(o,n,a,i,u,\"throw\",e)}i(void 0)}))}}function _typeof(e){return(_typeof=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e})(e)}!function(e,t){\"object\"===(\"undefined\"==typeof exports?\"undefined\":_typeof(exports))&&\"undefined\"!=typeof module?t(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],t):t((e=\"undefined\"!=typeof globalThis?globalThis:e||self).__TAURI__={})}(this,(function(e){\"use strict\";var t=function(e){var t,r=Object.prototype,n=r.hasOwnProperty,a=\"function\"==typeof Symbol?Symbol:{},o=a.iterator||\"@@iterator\",i=a.asyncIterator||\"@@asyncIterator\",u=a.toStringTag||\"@@toStringTag\";function s(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},\"\")}catch(e){s=function(e,t,r){return e[t]=r}}function c(e,t,r,n){var a=t&&t.prototype instanceof y?t:y,o=Object.create(a.prototype),i=new M(n||[]);return o._invoke=function(e,t,r){var n=l;return function(a,o){if(n===h)throw new Error(\"Generator is already running\");if(n===m){if(\"throw\"===a)throw o;return j()}for(r.method=a,r.arg=o;;){var i=r.delegate;if(i){var u=T(i,r);if(u){if(u===d)continue;return u}}if(\"next\"===r.method)r.sent=r._sent=r.arg;else if(\"throw\"===r.method){if(n===l)throw n=m,r.arg;r.dispatchException(r.arg)}else\"return\"===r.method&&r.abrupt(\"return\",r.arg);n=h;var s=p(e,t,r);if(\"normal\"===s.type){if(n=r.done?m:f,s.arg===d)continue;return{value:s.arg,done:r.done}}\"throw\"===s.type&&(n=m,r.method=\"throw\",r.arg=s.arg)}}}(e,r,i),o}function p(e,t,r){try{return{type:\"normal\",arg:e.call(t,r)}}catch(e){return{type:\"throw\",arg:e}}}e.wrap=c;var l=\"suspendedStart\",f=\"suspendedYield\",h=\"executing\",m=\"completed\",d={};function y(){}function g(){}function _(){}var w={};s(w,o,(function(){return this}));var v=Object.getPrototypeOf,b=v&&v(v(O([])));b&&b!==r&&n.call(b,o)&&(w=b);var R=_.prototype=y.prototype=Object.create(w);function k(e){[\"next\",\"throw\",\"return\"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function r(a,o,i,u){var s=p(e[a],e,o);if(\"throw\"!==s.type){var c=s.arg,l=c.value;return l&&\"object\"===_typeof(l)&&n.call(l,\"__await\")?t.resolve(l.__await).then((function(e){r(\"next\",e,i,u)}),(function(e){r(\"throw\",e,i,u)})):t.resolve(l).then((function(e){c.value=e,i(c)}),(function(e){return r(\"throw\",e,i,u)}))}u(s.arg)}var a;this._invoke=function(e,n){function o(){return new t((function(t,a){r(e,n,t,a)}))}return a=a?a.then(o,o):o()}}function T(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,\"throw\"===r.method){if(e.iterator.return&&(r.method=\"return\",r.arg=t,T(e,r),\"throw\"===r.method))return d;r.method=\"throw\",r.arg=new TypeError(\"The iterator does not provide a 'throw' method\")}return d}var a=p(n,e.iterator,r.arg);if(\"throw\"===a.type)return r.method=\"throw\",r.arg=a.arg,r.delegate=null,d;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,\"return\"!==r.method&&(r.method=\"next\",r.arg=t),r.delegate=null,d):o:(r.method=\"throw\",r.arg=new TypeError(\"iterator result is not an object\"),r.delegate=null,d)}function G(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function P(e){var t=e.completion||{};t.type=\"normal\",delete t.arg,e.completion=t}function M(e){this.tryEntries=[{tryLoc:\"root\"}],e.forEach(G,this),this.reset(!0)}function O(e){if(e){var r=e[o];if(r)return r.call(e);if(\"function\"==typeof e.next)return e;if(!isNaN(e.length)){var a=-1,i=function r(){for(;++a<e.length;)if(n.call(e,a))return r.value=e[a],r.done=!1,r;return r.value=t,r.done=!0,r};return i.next=i}}return{next:j}}function j(){return{value:t,done:!0}}return g.prototype=_,s(R,\"constructor\",_),s(_,\"constructor\",g),g.displayName=s(_,u,\"GeneratorFunction\"),e.isGeneratorFunction=function(e){var t=\"function\"==typeof e&&e.constructor;return!!t&&(t===g||\"GeneratorFunction\"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,_):(e.__proto__=_,s(e,u,\"GeneratorFunction\")),e.prototype=Object.create(R),e},e.awrap=function(e){return{__await:e}},k(x.prototype),s(x.prototype,i,(function(){return this})),e.AsyncIterator=x,e.async=function(t,r,n,a,o){void 0===o&&(o=Promise);var i=new x(c(t,r,n,a),o);return e.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(R),s(R,u,\"Generator\"),s(R,o,(function(){return this})),s(R,\"toString\",(function(){return\"[object Generator]\"})),e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=O,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=t,this.tryEntries.forEach(P),!e)for(var r in this)\"t\"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if(\"throw\"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function a(n,a){return u.type=\"throw\",u.arg=e,r.next=n,a&&(r.method=\"next\",r.arg=t),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],u=i.completion;if(\"root\"===i.tryLoc)return a(\"end\");if(i.tryLoc<=this.prev){var s=n.call(i,\"catchLoc\"),c=n.call(i,\"finallyLoc\");if(s&&c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!c)throw new Error(\"try statement without catch or finally\");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&n.call(a,\"finallyLoc\")&&this.prev<a.finallyLoc){var o=a;break}}o&&(\"break\"===e||\"continue\"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method=\"next\",this.next=o.finallyLoc,d):this.complete(i)},complete:function(e,t){if(\"throw\"===e.type)throw e.arg;return\"break\"===e.type||\"continue\"===e.type?this.next=e.arg:\"return\"===e.type?(this.rval=this.arg=e.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===e.type&&t&&(this.next=t),d},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),P(r),d}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if(\"throw\"===n.type){var a=n.arg;P(r)}return a}}throw new Error(\"illegal catch attempt\")},delegateYield:function(e,r,n){return this.delegate={iterator:O(e),resultName:r,nextLoc:n},\"next\"===this.method&&(this.arg=t),d}},e}(\"object\"===(\"undefined\"==typeof module?\"undefined\":_typeof(module))?module.exports:{});try{regeneratorRuntime=t}catch(e){\"object\"===(\"undefined\"==typeof globalThis?\"undefined\":_typeof(globalThis))?globalThis.regeneratorRuntime=t:Function(\"r\",\"regeneratorRuntime = r\")(t)}function r(e){for(var t=void 0,r=e[0],n=1;n<e.length;){var a=e[n],o=e[n+1];if(n+=2,(\"optionalAccess\"===a||\"optionalCall\"===a)&&null==r)return;\"access\"===a||\"optionalAccess\"===a?(t=r,r=o(r)):\"call\"!==a&&\"optionalCall\"!==a||(r=o((function(){for(var e,n=arguments.length,a=new Array(n),o=0;o<n;o++)a[o]=arguments[o];return(e=r).call.apply(e,[t].concat(a))})),t=void 0)}return r}function n(){var e=new Int8Array(1);window.crypto.getRandomValues(e);var t=new Uint8Array(Math.max(16,Math.abs(e[0])));return window.crypto.getRandomValues(t),t.join(\"\")}function a(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],a=n();return Object.defineProperty(window,a,{value:function(n){return t&&Reflect.deleteProperty(window,a),r([e,\"optionalCall\",function(e){return e(n)}])},writable:!1,configurable:!0}),a}function o(e){return i.apply(this,arguments)}function i(){return(i=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,n=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n.length>1&&void 0!==n[1]?n[1]:{},e.abrupt(\"return\",new Promise((function(e,n){var o=a((function(t){e(t),Reflect.deleteProperty(window,i)}),!0),i=a((function(e){n(e),Reflect.deleteProperty(window,o)}),!0);window.__TAURI_POST_MESSAGE__(t,_objectSpread({__invokeKey:__TAURI_INVOKE_KEY__,callback:o,error:i},r))})));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var u=Object.freeze({__proto__:null,transformCallback:a,invoke:o,convertFileSrc:function(e){return navigator.userAgent.includes(\"Windows\")?\"https://asset.localhost/\".concat(e):\"asset://\".concat(e)}});function s(e){return c.apply(this,arguments)}function c(){return(c=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",o(\"tauri\",t));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function p(){return(p=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"App\",message:{cmd:\"getAppVersion\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function l(){return(l=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"App\",message:{cmd:\"getAppName\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function f(){return(f=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"App\",message:{cmd:\"getTauriVersion\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var h=Object.freeze({__proto__:null,getName:function(){return l.apply(this,arguments)},getVersion:function(){return p.apply(this,arguments)},getTauriVersion:function(){return f.apply(this,arguments)}});function m(){return(m=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Cli\",message:{cmd:\"cliMatches\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var d=Object.freeze({__proto__:null,getMatches:function(){return m.apply(this,arguments)}});function y(){return(y=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Clipboard\",message:{cmd:\"writeText\",data:t}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function g(){return(g=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Clipboard\",message:{cmd:\"readText\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var _=Object.freeze({__proto__:null,writeText:function(e){return y.apply(this,arguments)},readText:function(){return g.apply(this,arguments)}});function w(){return(w=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return\"object\"===_typeof(t=r.length>0&&void 0!==r[0]?r[0]:{})&&Object.freeze(t),e.abrupt(\"return\",s({__tauriModule:\"Dialog\",message:{cmd:\"openDialog\",options:t}}));case 3:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function v(){return(v=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return\"object\"===_typeof(t=r.length>0&&void 0!==r[0]?r[0]:{})&&Object.freeze(t),e.abrupt(\"return\",s({__tauriModule:\"Dialog\",message:{cmd:\"saveDialog\",options:t}}));case 3:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function b(){return(b=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Dialog\",message:{cmd:\"messageDialog\",message:t}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function R(){return(R=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Dialog\",message:{cmd:\"askDialog\",title:r,message:t}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function k(){return(k=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Dialog\",message:{cmd:\"confirmDialog\",title:r,message:t}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var x=Object.freeze({__proto__:null,open:function(){return w.apply(this,arguments)},save:function(){return v.apply(this,arguments)},message:function(e){return b.apply(this,arguments)},ask:function(e,t){return R.apply(this,arguments)},confirm:function(e,t){return k.apply(this,arguments)}});function T(e,t,r){return G.apply(this,arguments)}function G(){return(G=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,n){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,s({__tauriModule:\"Event\",message:{cmd:\"emit\",event:t,windowLabel:r,payload:\"string\"==typeof n?n:JSON.stringify(n)}});case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function P(e){return M.apply(this,arguments)}function M(){return(M=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Event\",message:{cmd:\"unlisten\",eventId:t}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function O(e,t){return j.apply(this,arguments)}function j(){return(j=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Event\",message:{cmd:\"listen\",event:t,handler:a(r)}}).then((function(e){return _asyncToGenerator(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt(\"return\",P(e));case 1:case\"end\":return t.stop()}}),t)})))})));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function C(e,t){return S.apply(this,arguments)}function S(){return(S=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",O(t,(function(e){r(e),P(e.id).catch((function(){}))})));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function A(e,t){return D.apply(this,arguments)}function D(){return(D=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",T(t,null,r));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var z,L=Object.freeze({__proto__:null,listen:O,once:C,emit:A});function E(){return(E=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,n=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n.length>1&&void 0!==n[1]?n[1]:{},e.abrupt(\"return\",s({__tauriModule:\"Fs\",message:{cmd:\"readTextFile\",path:t,options:r}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function W(){return(W=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,n=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n.length>1&&void 0!==n[1]?n[1]:{},e.abrupt(\"return\",s({__tauriModule:\"Fs\",message:{cmd:\"readBinaryFile\",path:t,options:r}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function F(){return(F=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,n=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return\"object\"===_typeof(r=n.length>1&&void 0!==n[1]?n[1]:{})&&Object.freeze(r),\"object\"===_typeof(t)&&Object.freeze(t),e.abrupt(\"return\",s({__tauriModule:\"Fs\",message:{cmd:\"writeFile\",path:t.path,contents:t.contents,options:r}}));case 4:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}!function(e){e[e.Audio=1]=\"Audio\";e[e.Cache=2]=\"Cache\";e[e.Config=3]=\"Config\";e[e.Data=4]=\"Data\";e[e.LocalData=5]=\"LocalData\";e[e.Desktop=6]=\"Desktop\";e[e.Document=7]=\"Document\";e[e.Download=8]=\"Download\";e[e.Executable=9]=\"Executable\";e[e.Font=10]=\"Font\";e[e.Home=11]=\"Home\";e[e.Picture=12]=\"Picture\";e[e.Public=13]=\"Public\";e[e.Runtime=14]=\"Runtime\";e[e.Template=15]=\"Template\";e[e.Video=16]=\"Video\";e[e.Resource=17]=\"Resource\";e[e.App=18]=\"App\";e[e.Current=19]=\"Current\";e[e.Log=20]=\"Log\"}(z||(z={}));var I=65536;function N(e){var t=function(e){if(e.length<I)return String.fromCharCode.apply(null,Array.from(e));for(var t=\"\",r=e.length,n=0;n<r;n++){var a=e.subarray(n*I,(n+1)*I);t+=String.fromCharCode.apply(null,Array.from(a))}return t}(new Uint8Array(e));return btoa(t)}function U(){return(U=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,n=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return\"object\"===_typeof(r=n.length>1&&void 0!==n[1]?n[1]:{})&&Object.freeze(r),\"object\"===_typeof(t)&&Object.freeze(t),e.abrupt(\"return\",s({__tauriModule:\"Fs\",message:{cmd:\"writeBinaryFile\",path:t.path,contents:N(t.contents),options:r}}));case 4:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function B(){return(B=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,n=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n.length>1&&void 0!==n[1]?n[1]:{},e.abrupt(\"return\",s({__tauriModule:\"Fs\",message:{cmd:\"readDir\",path:t,options:r}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function H(){return(H=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,n=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n.length>1&&void 0!==n[1]?n[1]:{},e.abrupt(\"return\",s({__tauriModule:\"Fs\",message:{cmd:\"createDir\",path:t,options:r}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function V(){return(V=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,n=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n.length>1&&void 0!==n[1]?n[1]:{},e.abrupt(\"return\",s({__tauriModule:\"Fs\",message:{cmd:\"removeDir\",path:t,options:r}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function q(){return(q=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var n,a=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=a.length>2&&void 0!==a[2]?a[2]:{},e.abrupt(\"return\",s({__tauriModule:\"Fs\",message:{cmd:\"copyFile\",source:t,destination:r,options:n}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function J(){return(J=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,n=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n.length>1&&void 0!==n[1]?n[1]:{},e.abrupt(\"return\",s({__tauriModule:\"Fs\",message:{cmd:\"removeFile\",path:t,options:r}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function K(){return(K=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var n,a=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=a.length>2&&void 0!==a[2]?a[2]:{},e.abrupt(\"return\",s({__tauriModule:\"Fs\",message:{cmd:\"renameFile\",oldPath:t,newPath:r,options:n}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var Y=Object.freeze({__proto__:null,get BaseDirectory(){return z},get Dir(){return z},readTextFile:function(e){return E.apply(this,arguments)},readBinaryFile:function(e){return W.apply(this,arguments)},writeFile:function(e){return F.apply(this,arguments)},writeBinaryFile:function(e){return U.apply(this,arguments)},readDir:function(e){return B.apply(this,arguments)},createDir:function(e){return H.apply(this,arguments)},removeDir:function(e){return V.apply(this,arguments)},copyFile:function(e,t){return q.apply(this,arguments)},removeFile:function(e){return J.apply(this,arguments)},renameFile:function(e,t){return K.apply(this,arguments)}});function $(){return($=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"GlobalShortcut\",message:{cmd:\"register\",shortcut:t,handler:a(r)}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Q(){return(Q=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"GlobalShortcut\",message:{cmd:\"registerAll\",shortcuts:t,handler:a(r)}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function X(){return(X=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"GlobalShortcut\",message:{cmd:\"isRegistered\",shortcut:t}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Z(){return(Z=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"GlobalShortcut\",message:{cmd:\"unregister\",shortcut:t}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function ee(){return(ee=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"GlobalShortcut\",message:{cmd:\"unregisterAll\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var te,re=Object.freeze({__proto__:null,register:function(e,t){return $.apply(this,arguments)},registerAll:function(e,t){return Q.apply(this,arguments)},isRegistered:function(e){return X.apply(this,arguments)},unregister:function(e){return Z.apply(this,arguments)},unregisterAll:function(){return ee.apply(this,arguments)}});function ne(e,t){return null!=e?e:t()}function ae(e){for(var t=void 0,r=e[0],n=1;n<e.length;){var a=e[n],o=e[n+1];if(n+=2,(\"optionalAccess\"===a||\"optionalCall\"===a)&&null==r)return;\"access\"===a||\"optionalAccess\"===a?(t=r,r=o(r)):\"call\"!==a&&\"optionalCall\"!==a||(r=o((function(){for(var e,n=arguments.length,a=new Array(n),o=0;o<n;o++)a[o]=arguments[o];return(e=r).call.apply(e,[t].concat(a))})),t=void 0)}return r}!function(e){e[e.JSON=1]=\"JSON\";e[e.Text=2]=\"Text\";e[e.Binary=3]=\"Binary\"}(te||(te={}));var oe=function(){function e(t,r){_classCallCheck(this,e),this.type=t,this.payload=r}return _createClass(e,null,[{key:\"form\",value:function(t){return new e(\"Form\",t)}},{key:\"json\",value:function(t){return new e(\"Json\",t)}},{key:\"text\",value:function(t){return new e(\"Text\",t)}},{key:\"bytes\",value:function(t){return new e(\"Bytes\",t)}}]),e}(),ie=_createClass((function e(t){_classCallCheck(this,e),this.url=t.url,this.status=t.status,this.ok=this.status>=200&&this.status<300,this.headers=t.headers,this.rawHeaders=t.rawHeaders,this.data=t.data})),ue=function(){function e(t){_classCallCheck(this,e),this.id=t}var t,r,n,a,o,i,u;return _createClass(e,[{key:\"drop\",value:(u=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Http\",message:{cmd:\"dropClient\",client:this.id}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return u.apply(this,arguments)})},{key:\"request\",value:(i=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(r=!t.responseType||t.responseType===te.JSON)&&(t.responseType=te.Text),e.abrupt(\"return\",s({__tauriModule:\"Http\",message:{cmd:\"httpRequest\",client:this.id,options:t}}).then((function(e){var t=new ie(e);if(r){try{t.data=JSON.parse(t.data)}catch(e){if(t.ok&&\"\"===t.data)t.data={};else if(t.ok)throw Error(\"Failed to parse response `\".concat(t.data,\"` as JSON: \").concat(e,\";\\n              try setting the `responseType` option to `ResponseType.Text` or `ResponseType.Binary` if the API does not return a JSON response.\"))}return t}return t})));case 3:case\"end\":return e.stop()}}),e,this)}))),function(e){return i.apply(this,arguments)})},{key:\"get\",value:(o=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",this.request(_objectSpread({method:\"GET\",url:t},r)));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e,t){return o.apply(this,arguments)})},{key:\"post\",value:(a=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,n){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",this.request(_objectSpread({method:\"POST\",url:t,body:r},n)));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e,t,r){return a.apply(this,arguments)})},{key:\"put\",value:(n=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,n){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",this.request(_objectSpread({method:\"PUT\",url:t,body:r},n)));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e,t,r){return n.apply(this,arguments)})},{key:\"patch\",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",this.request(_objectSpread({method:\"PATCH\",url:t},r)));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e,t){return r.apply(this,arguments)})},{key:\"delete\",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",this.request(_objectSpread({method:\"DELETE\",url:t},r)));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e,r){return t.apply(this,arguments)})}]),e}();function se(e){return ce.apply(this,arguments)}function ce(){return(ce=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Http\",message:{cmd:\"createClient\",options:t}}).then((function(e){return new ue(e)})));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var pe=null;function le(){return(le=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(null!==pe){e.next=4;break}return e.next=3,se();case 3:pe=e.sent;case 4:return e.abrupt(\"return\",pe.request(_objectSpread({url:t,method:ne(ae([r,\"optionalAccess\",function(e){return e.method}]),(function(){return\"GET\"}))},r)));case 5:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var fe=Object.freeze({__proto__:null,getClient:se,fetch:function(e,t){return le.apply(this,arguments)},Body:oe,Client:ue,Response:ie,get ResponseType(){return te}});function he(){return(he=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(\"default\"===window.Notification.permission){e.next=2;break}return e.abrupt(\"return\",Promise.resolve(\"granted\"===window.Notification.permission));case 2:return e.abrupt(\"return\",s({__tauriModule:\"Notification\",message:{cmd:\"isNotificationPermissionGranted\"}}));case 3:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function me(){return(me=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",window.Notification.requestPermission());case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var de=Object.freeze({__proto__:null,sendNotification:function(e){\"string\"==typeof e?new window.Notification(e):new window.Notification(e.title,e)},requestPermission:function(){return me.apply(this,arguments)},isPermissionGranted:function(){return he.apply(this,arguments)}});function ye(){return navigator.appVersion.includes(\"Win\")}function ge(){return(ge=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.App}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function _e(){return(_e=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Audio}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function we(){return(we=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Cache}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function ve(){return(ve=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Config}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function be(){return(be=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Data}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Re(){return(Re=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Desktop}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function ke(){return(ke=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Document}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function xe(){return(xe=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Download}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Te(){return(Te=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Executable}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Ge(){return(Ge=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Font}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Pe(){return(Pe=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Home}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Me(){return(Me=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.LocalData}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Oe(){return(Oe=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Picture}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function je(){return(je=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Public}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Ce(){return(Ce=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Resource}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Se(){return(Se=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Runtime}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Ae(){return(Ae=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Template}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function De(){return(De=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Video}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function ze(){return(ze=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Current}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Le(){return(Le=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Log}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var Ee=ye()?\"\\\\\":\"/\",We=ye()?\";\":\":\";function Fe(){return(Fe=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r,n,a=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(t=a.length,r=new Array(t),n=0;n<t;n++)r[n]=a[n];return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolve\",paths:r}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Ie(){return(Ie=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"normalize\",path:t}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Ne(){return(Ne=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r,n,a=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(t=a.length,r=new Array(t),n=0;n<t;n++)r[n]=a[n];return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"join\",paths:r}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Ue(){return(Ue=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"dirname\",path:t}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Be(){return(Be=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"extname\",path:t}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function He(){return(He=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"basename\",path:t,ext:r}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Ve(){return(Ve=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"isAbsolute\",path:t}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var qe=Object.freeze({__proto__:null,appDir:function(){return ge.apply(this,arguments)},audioDir:function(){return _e.apply(this,arguments)},cacheDir:function(){return we.apply(this,arguments)},configDir:function(){return ve.apply(this,arguments)},dataDir:function(){return be.apply(this,arguments)},desktopDir:function(){return Re.apply(this,arguments)},documentDir:function(){return ke.apply(this,arguments)},downloadDir:function(){return xe.apply(this,arguments)},executableDir:function(){return Te.apply(this,arguments)},fontDir:function(){return Ge.apply(this,arguments)},homeDir:function(){return Pe.apply(this,arguments)},localDataDir:function(){return Me.apply(this,arguments)},pictureDir:function(){return Oe.apply(this,arguments)},publicDir:function(){return je.apply(this,arguments)},resourceDir:function(){return Ce.apply(this,arguments)},runtimeDir:function(){return Se.apply(this,arguments)},templateDir:function(){return Ae.apply(this,arguments)},videoDir:function(){return De.apply(this,arguments)},currentDir:function(){return ze.apply(this,arguments)},logDir:function(){return Le.apply(this,arguments)},get BaseDirectory(){return z},sep:Ee,delimiter:We,resolve:function(){return Fe.apply(this,arguments)},normalize:function(e){return Ie.apply(this,arguments)},join:function(){return Ne.apply(this,arguments)},dirname:function(e){return Ue.apply(this,arguments)},extname:function(e){return Be.apply(this,arguments)},basename:function(e,t){return He.apply(this,arguments)},isAbsolute:function(e){return Ve.apply(this,arguments)}});function Je(){return(Je=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=r.length>0&&void 0!==r[0]?r[0]:0,e.abrupt(\"return\",s({__tauriModule:\"Process\",message:{cmd:\"exit\",exitCode:t}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Ke(){return(Ke=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Process\",message:{cmd:\"relaunch\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var Ye=Object.freeze({__proto__:null,exit:function(){return Je.apply(this,arguments)},relaunch:function(){return Ke.apply(this,arguments)}});function $e(e,t){return null!=e?e:t()}function Qe(e,t,r,n){return Xe.apply(this,arguments)}function Xe(){return(Xe=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,n,o){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return\"object\"===_typeof(n)&&Object.freeze(n),e.abrupt(\"return\",s({__tauriModule:\"Shell\",message:{cmd:\"execute\",program:r,args:\"string\"==typeof n?[n]:n,options:o,onEventFn:a(t)}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var Ze=function(){function e(){_classCallCheck(this,e),e.prototype.__init.call(this)}return _createClass(e,[{key:\"__init\",value:function(){this.eventListeners=Object.create(null)}},{key:\"addEventListener\",value:function(e,t){e in this.eventListeners?this.eventListeners[e].push(t):this.eventListeners[e]=[t]}},{key:\"_emit\",value:function(e,t){if(e in this.eventListeners){var r,n=_createForOfIteratorHelper(this.eventListeners[e]);try{for(n.s();!(r=n.n()).done;){(0,r.value)(t)}}catch(e){n.e(e)}finally{n.f()}}}},{key:\"on\",value:function(e,t){return this.addEventListener(e,t),this}}]),e}(),et=function(){function e(t){_classCallCheck(this,e),this.pid=t}var t,r;return _createClass(e,[{key:\"write\",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Shell\",message:{cmd:\"stdinWrite\",pid:this.pid,buffer:t}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:\"kill\",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Shell\",message:{cmd:\"killChild\",pid:this.pid}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}]),e}(),tt=function(e){_inherits(a,e);var t,r,n=_createSuper(a);function a(e){var t,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],o=arguments.length>2?arguments[2]:void 0;return _classCallCheck(this,a),t=n.call(this),a.prototype.__init2.call(_assertThisInitialized(t)),a.prototype.__init3.call(_assertThisInitialized(t)),t.program=e,t.args=\"string\"==typeof r?[r]:r,t.options=$e(o,(function(){return{}})),t}return _createClass(a,[{key:\"__init2\",value:function(){this.stdout=new Ze}},{key:\"__init3\",value:function(){this.stderr=new Ze}},{key:\"spawn\",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",Qe((function(e){switch(e.event){case\"Error\":t._emit(\"error\",e.payload);break;case\"Terminated\":t._emit(\"close\",e.payload);break;case\"Stdout\":t.stdout._emit(\"data\",e.payload);break;case\"Stderr\":t.stderr._emit(\"data\",e.payload)}}),this.program,this.args,this.options).then((function(e){return new et(e)})));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:\"execute\",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",new Promise((function(e,r){t.on(\"error\",r);var n=[],a=[];t.stdout.on(\"data\",(function(e){n.push(e)})),t.stderr.on(\"data\",(function(e){a.push(e)})),t.on(\"close\",(function(t){e({code:t.code,signal:t.signal,stdout:n.join(\"\\n\"),stderr:a.join(\"\\n\")})})),t.spawn().catch(r)})));case 1:case\"end\":return e.stop()}}),e)}))),function(){return t.apply(this,arguments)})}],[{key:\"sidecar\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=arguments.length>2?arguments[2]:void 0,n=new a(e,t,r);return n.options.sidecar=!0,n}}]),a}(Ze);function rt(){return(rt=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Shell\",message:{cmd:\"open\",path:t,with:r}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var nt=Object.freeze({__proto__:null,Command:tt,Child:et,open:function(e,t){return rt.apply(this,arguments)}});function at(e){for(var t=void 0,r=e[0],n=1;n<e.length;){var a=e[n],o=e[n+1];if(n+=2,(\"optionalAccess\"===a||\"optionalCall\"===a)&&null==r)return;\"access\"===a||\"optionalAccess\"===a?(t=r,r=o(r)):\"call\"!==a&&\"optionalCall\"!==a||(r=o((function(){for(var e,n=arguments.length,a=new Array(n),o=0;o<n;o++)a[o]=arguments[o];return(e=r).call.apply(e,[t].concat(a))})),t=void 0)}return r}function ot(){return(ot=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=function(){t&&t(),t=void 0},e.abrupt(\"return\",new Promise((function(e,n){O(\"tauri://update-status\",(function(t){var a;(a=at([t,\"optionalAccess\",function(e){return e.payload}])).error?(r(),n(a.error)):\"DONE\"===a.status&&(r(),e())})).then((function(e){t=e})).catch((function(e){throw r(),e})),A(\"tauri://update-install\").catch((function(e){throw r(),e}))})));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function it(){return(it=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=function(){t&&t(),t=void 0},e.abrupt(\"return\",new Promise((function(e,n){C(\"tauri://update-available\",(function(t){var n;n=at([t,\"optionalAccess\",function(e){return e.payload}]),r(),e({manifest:n,shouldUpdate:!0})})).catch((function(e){throw r(),e})),O(\"tauri://update-status\",(function(t){var a;(a=at([t,\"optionalAccess\",function(e){return e.payload}])).error?(r(),n(a.error)):\"UPTODATE\"===a.status&&(r(),e({shouldUpdate:!1}))})).then((function(e){t=e})).catch((function(e){throw r(),e})),A(\"tauri://update\").catch((function(e){throw r(),e}))})));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var ut=Object.freeze({__proto__:null,installUpdate:function(){return ot.apply(this,arguments)},checkUpdate:function(){return it.apply(this,arguments)}});function st(e){for(var t=void 0,r=e[0],n=1;n<e.length;){var a=e[n],o=e[n+1];if(n+=2,(\"optionalAccess\"===a||\"optionalCall\"===a)&&null==r)return;\"access\"===a||\"optionalAccess\"===a?(t=r,r=o(r)):\"call\"!==a&&\"optionalCall\"!==a||(r=o((function(){for(var e,n=arguments.length,a=new Array(n),o=0;o<n;o++)a[o]=arguments[o];return(e=r).call.apply(e,[t].concat(a))})),t=void 0)}return r}var ct,pt=function(){function e(t,r){_classCallCheck(this,e),e.prototype.__init.call(this),this.width=t,this.height=r}return _createClass(e,[{key:\"__init\",value:function(){this.type=\"Logical\"}}]),e}(),lt=function(){function e(t,r){_classCallCheck(this,e),e.prototype.__init2.call(this),this.width=t,this.height=r}return _createClass(e,[{key:\"__init2\",value:function(){this.type=\"Physical\"}},{key:\"toLogical\",value:function(e){return new pt(this.width/e,this.height/e)}}]),e}(),ft=function(){function e(t,r){_classCallCheck(this,e),e.prototype.__init3.call(this),this.x=t,this.y=r}return _createClass(e,[{key:\"__init3\",value:function(){this.type=\"Logical\"}}]),e}(),ht=function(){function e(t,r){_classCallCheck(this,e),e.prototype.__init4.call(this),this.x=t,this.y=r}return _createClass(e,[{key:\"__init4\",value:function(){this.type=\"Physical\"}},{key:\"toLogical\",value:function(e){return new ft(this.x/e,this.y/e)}}]),e}();function mt(){return window.__TAURI__.__windows.map((function(e){return new _t(e.label,{skip:!0})}))}!function(e){e[e.Critical=1]=\"Critical\";e[e.Informational=2]=\"Informational\"}(ct||(ct={}));var dt=[\"tauri://created\",\"tauri://error\"],yt=function(){function e(t){_classCallCheck(this,e);try{this.label=(n=function(){return window.__TAURI__.__currentWindow.label},null!=(r=t)?r:n())}catch(e){this.label=\"\"}var r,n;this.listeners=Object.create(null)}var t,r,n;return _createClass(e,[{key:\"listen\",value:(n=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var n=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!this._handleTauriEvent(t,r)){e.next=2;break}return e.abrupt(\"return\",Promise.resolve((function(){var e=n.listeners[t];e.splice(e.indexOf(r),1)})));case 2:return e.abrupt(\"return\",O(t,r));case 3:case\"end\":return e.stop()}}),e,this)}))),function(e,t){return n.apply(this,arguments)})},{key:\"once\",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var n=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!this._handleTauriEvent(t,r)){e.next=2;break}return e.abrupt(\"return\",Promise.resolve((function(){var e=n.listeners[t];e.splice(e.indexOf(r),1)})));case 2:return e.abrupt(\"return\",C(t,r));case 3:case\"end\":return e.stop()}}),e,this)}))),function(e,t){return r.apply(this,arguments)})},{key:\"emit\",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var n,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!dt.includes(t)){e.next=4;break}n=_createForOfIteratorHelper(this.listeners[t]||[]);try{for(n.s();!(a=n.n()).done;)(0,a.value)({event:t,id:-1,payload:r})}catch(e){n.e(e)}finally{n.f()}return e.abrupt(\"return\",Promise.resolve());case 4:return e.abrupt(\"return\",T(t,this.label,r));case 5:case\"end\":return e.stop()}}),e,this)}))),function(e,r){return t.apply(this,arguments)})},{key:\"_handleTauriEvent\",value:function(e,t){return!!dt.includes(e)&&(e in this.listeners?this.listeners[e].push(t):this.listeners[e]=[t],!0)}}]),e}(),gt=function(e){_inherits(L,e);var t,r,n,a,o,i,u,c,p,l,f,h,m,d,y,g,_,w,v,b,R,k,x,T,G,P,M,O,j,C,S,A,D,z=_createSuper(L);function L(){return _classCallCheck(this,L),z.apply(this,arguments)}return _createClass(L,[{key:\"scaleFactor\",value:(D=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"scaleFactor\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return D.apply(this,arguments)})},{key:\"innerPosition\",value:(A=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"innerPosition\"}}}}).then((function(e){var t=e.x,r=e.y;return new ht(t,r)})));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return A.apply(this,arguments)})},{key:\"outerPosition\",value:(S=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"outerPosition\"}}}}).then((function(e){var t=e.x,r=e.y;return new ht(t,r)})));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return S.apply(this,arguments)})},{key:\"innerSize\",value:(C=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"innerSize\"}}}}).then((function(e){var t=e.width,r=e.height;return new lt(t,r)})));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return C.apply(this,arguments)})},{key:\"outerSize\",value:(j=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"outerSize\"}}}}).then((function(e){var t=e.width,r=e.height;return new lt(t,r)})));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return j.apply(this,arguments)})},{key:\"isFullscreen\",value:(O=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"isFullscreen\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return O.apply(this,arguments)})},{key:\"isMaximized\",value:(M=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"isMaximized\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return M.apply(this,arguments)})},{key:\"isDecorated\",value:(P=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"isDecorated\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return P.apply(this,arguments)})},{key:\"isResizable\",value:(G=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"isResizable\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return G.apply(this,arguments)})},{key:\"isVisible\",value:(T=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"isVisible\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return T.apply(this,arguments)})},{key:\"center\",value:(x=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"center\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return x.apply(this,arguments)})},{key:\"requestUserAttention\",value:(k=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=null,t&&(r=t===ct.Critical?{type:\"Critical\"}:{type:\"Informational\"}),e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"requestUserAttention\",payload:r}}}}));case 3:case\"end\":return e.stop()}}),e,this)}))),function(e){return k.apply(this,arguments)})},{key:\"setResizable\",value:(R=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setResizable\",payload:t}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e){return R.apply(this,arguments)})},{key:\"setTitle\",value:(b=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setTitle\",payload:t}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e){return b.apply(this,arguments)})},{key:\"maximize\",value:(v=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"maximize\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return v.apply(this,arguments)})},{key:\"unmaximize\",value:(w=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"unmaximize\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return w.apply(this,arguments)})},{key:\"toggleMaximize\",value:(_=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"toggleMaximize\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return _.apply(this,arguments)})},{key:\"minimize\",value:(g=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"minimize\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return g.apply(this,arguments)})},{key:\"unminimize\",value:(y=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"unminimize\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return y.apply(this,arguments)})},{key:\"show\",value:(d=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"show\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return d.apply(this,arguments)})},{key:\"hide\",value:(m=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"hide\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return m.apply(this,arguments)})},{key:\"close\",value:(h=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"close\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return h.apply(this,arguments)})},{key:\"setDecorations\",value:(f=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setDecorations\",payload:t}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e){return f.apply(this,arguments)})},{key:\"setAlwaysOnTop\",value:(l=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setAlwaysOnTop\",payload:t}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e){return l.apply(this,arguments)})},{key:\"setSize\",value:(p=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t&&(\"Logical\"===t.type||\"Physical\"===t.type)){e.next=2;break}throw new Error(\"the `size` argument must be either a LogicalSize or a PhysicalSize instance\");case 2:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setSize\",payload:{type:t.type,data:{width:t.width,height:t.height}}}}}}));case 3:case\"end\":return e.stop()}}),e,this)}))),function(e){return p.apply(this,arguments)})},{key:\"setMinSize\",value:(c=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!t||\"Logical\"===t.type||\"Physical\"===t.type){e.next=2;break}throw new Error(\"the `size` argument must be either a LogicalSize or a PhysicalSize instance\");case 2:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setMinSize\",payload:t?{type:t.type,data:{width:t.width,height:t.height}}:null}}}}));case 3:case\"end\":return e.stop()}}),e,this)}))),function(e){return c.apply(this,arguments)})},{key:\"setMaxSize\",value:(u=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!t||\"Logical\"===t.type||\"Physical\"===t.type){e.next=2;break}throw new Error(\"the `size` argument must be either a LogicalSize or a PhysicalSize instance\");case 2:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setMaxSize\",payload:t?{type:t.type,data:{width:t.width,height:t.height}}:null}}}}));case 3:case\"end\":return e.stop()}}),e,this)}))),function(e){return u.apply(this,arguments)})},{key:\"setPosition\",value:(i=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t&&(\"Logical\"===t.type||\"Physical\"===t.type)){e.next=2;break}throw new Error(\"the `position` argument must be either a LogicalPosition or a PhysicalPosition instance\");case 2:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setPosition\",payload:{type:t.type,data:{x:t.x,y:t.y}}}}}}));case 3:case\"end\":return e.stop()}}),e,this)}))),function(e){return i.apply(this,arguments)})},{key:\"setFullscreen\",value:(o=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setFullscreen\",payload:t}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e){return o.apply(this,arguments)})},{key:\"setFocus\",value:(a=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setFocus\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return a.apply(this,arguments)})},{key:\"setIcon\",value:(n=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setIcon\",payload:{icon:t}}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e){return n.apply(this,arguments)})},{key:\"setSkipTaskbar\",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setSkipTaskbar\",payload:t}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:\"startDragging\",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"startDragging\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}]),L}(yt),_t=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var n,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return _classCallCheck(this,r),n=t.call(this,e),st([a,\"optionalAccess\",function(e){return e.skip}])||s({__tauriModule:\"Window\",message:{cmd:\"createWebview\",data:{options:_objectSpread({label:e},a)}}}).then(_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",n.emit(\"tauri://created\"));case 1:case\"end\":return e.stop()}}),e)})))).catch(function(){var e=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",n.emit(\"tauri://error\",t));case 1:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),n}return _createClass(r,null,[{key:\"getByLabel\",value:function(e){return mt().some((function(t){return t.label===e}))?new r(e,{skip:!0}):null}}]),r}(gt),wt=new _t(null,{skip:!0});function vt(){return(vt=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{cmd:{type:\"currentMonitor\"}}}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function bt(){return(bt=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{cmd:{type:\"primaryMonitor\"}}}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Rt(){return(Rt=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{cmd:{type:\"availableMonitors\"}}}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var kt=Object.freeze({__proto__:null,WebviewWindow:_t,WebviewWindowHandle:yt,WindowManager:gt,getCurrent:function(){return new _t(window.__TAURI__.__currentWindow.label,{skip:!0})},getAll:mt,appWindow:wt,LogicalSize:pt,PhysicalSize:lt,LogicalPosition:ft,PhysicalPosition:ht,get UserAttentionType(){return ct},currentMonitor:function(){return vt.apply(this,arguments)},primaryMonitor:function(){return bt.apply(this,arguments)},availableMonitors:function(){return Rt.apply(this,arguments)}}),xt=ye()?\"\\r\\n\":\"\\n\";function Tt(){return(Tt=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Os\",message:{cmd:\"platform\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Gt(){return(Gt=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Os\",message:{cmd:\"version\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Pt(){return(Pt=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Os\",message:{cmd:\"type\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Mt(){return(Mt=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Os\",message:{cmd:\"arch\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Ot(){return(Ot=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Os\",message:{cmd:\"tempdir\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var jt=Object.freeze({__proto__:null,EOL:xt,platform:function(){return Tt.apply(this,arguments)},version:function(){return Gt.apply(this,arguments)},type:function(){return Pt.apply(this,arguments)},arch:function(){return Mt.apply(this,arguments)},tempdir:function(){return Ot.apply(this,arguments)}}),Ct=o;e.app=h,e.cli=d,e.clipboard=_,e.dialog=x,e.event=L,e.fs=Y,e.globalShortcut=re,e.http=fe,e.invoke=Ct,e.notification=de,e.os=jt,e.path=qe,e.process=Ye,e.shell=nt,e.tauri=u,e.updater=ut,e.window=kt,Object.defineProperty(e,\"__esModule\",{value:!0})}));",
          "",
          "[Added Lines]",
          "1: function _inherits(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function\");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,\"prototype\",{writable:!1}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var r,n=_getPrototypeOf(e);if(t){var a=_getPrototypeOf(this).constructor;r=Reflect.construct(n,arguments,a)}else r=n.apply(this,arguments);return _possibleConstructorReturn(this,r)}}function _possibleConstructorReturn(e,t){if(t&&(\"object\"===_typeof(t)||\"function\"==typeof t))return t;if(void 0!==t)throw new TypeError(\"Derived constructors may only return object or undefined\");return _assertThisInitialized(e)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}function _isNativeReflectConstruct(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _createForOfIteratorHelper(e,t){var r=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!r){if(Array.isArray(e)||(r=_unsupportedIterableToArray(e))||t&&e&&\"number\"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var o,i=!0,u=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return i=e.done,e},e:function(e){u=!0,o=e},f:function(){try{i||null==r.return||r.return()}finally{if(u)throw o}}}}function _unsupportedIterableToArray(e,t){if(e){if(\"string\"==typeof e)return _arrayLikeToArray(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return\"Object\"===r&&e.constructor&&(r=e.constructor.name),\"Map\"===r||\"Set\"===r?Array.from(e):\"Arguments\"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(r),!0).forEach((function(t){_defineProperty(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ownKeys(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function _defineProperty(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),Object.defineProperty(e,\"prototype\",{writable:!1}),e}function asyncGeneratorStep(e,t,r,n,a,o,i){try{var u=e[o](i),s=u.value}catch(e){return void r(e)}u.done?t(s):Promise.resolve(s).then(n,a)}function _asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise((function(n,a){var o=e.apply(t,r);function i(e){asyncGeneratorStep(o,n,a,i,u,\"next\",e)}function u(e){asyncGeneratorStep(o,n,a,i,u,\"throw\",e)}i(void 0)}))}}function _typeof(e){return(_typeof=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e})(e)}!function(e,t){\"object\"===(\"undefined\"==typeof exports?\"undefined\":_typeof(exports))&&\"undefined\"!=typeof module?t(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],t):t((e=\"undefined\"!=typeof globalThis?globalThis:e||self).__TAURI__={})}(this,(function(e){\"use strict\";var t=function(e){var t,r=Object.prototype,n=r.hasOwnProperty,a=\"function\"==typeof Symbol?Symbol:{},o=a.iterator||\"@@iterator\",i=a.asyncIterator||\"@@asyncIterator\",u=a.toStringTag||\"@@toStringTag\";function s(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},\"\")}catch(e){s=function(e,t,r){return e[t]=r}}function c(e,t,r,n){var a=t&&t.prototype instanceof y?t:y,o=Object.create(a.prototype),i=new M(n||[]);return o._invoke=function(e,t,r){var n=l;return function(a,o){if(n===h)throw new Error(\"Generator is already running\");if(n===m){if(\"throw\"===a)throw o;return j()}for(r.method=a,r.arg=o;;){var i=r.delegate;if(i){var u=T(i,r);if(u){if(u===d)continue;return u}}if(\"next\"===r.method)r.sent=r._sent=r.arg;else if(\"throw\"===r.method){if(n===l)throw n=m,r.arg;r.dispatchException(r.arg)}else\"return\"===r.method&&r.abrupt(\"return\",r.arg);n=h;var s=p(e,t,r);if(\"normal\"===s.type){if(n=r.done?m:f,s.arg===d)continue;return{value:s.arg,done:r.done}}\"throw\"===s.type&&(n=m,r.method=\"throw\",r.arg=s.arg)}}}(e,r,i),o}function p(e,t,r){try{return{type:\"normal\",arg:e.call(t,r)}}catch(e){return{type:\"throw\",arg:e}}}e.wrap=c;var l=\"suspendedStart\",f=\"suspendedYield\",h=\"executing\",m=\"completed\",d={};function y(){}function g(){}function _(){}var w={};s(w,o,(function(){return this}));var v=Object.getPrototypeOf,b=v&&v(v(O([])));b&&b!==r&&n.call(b,o)&&(w=b);var R=_.prototype=y.prototype=Object.create(w);function k(e){[\"next\",\"throw\",\"return\"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function r(a,o,i,u){var s=p(e[a],e,o);if(\"throw\"!==s.type){var c=s.arg,l=c.value;return l&&\"object\"===_typeof(l)&&n.call(l,\"__await\")?t.resolve(l.__await).then((function(e){r(\"next\",e,i,u)}),(function(e){r(\"throw\",e,i,u)})):t.resolve(l).then((function(e){c.value=e,i(c)}),(function(e){return r(\"throw\",e,i,u)}))}u(s.arg)}var a;this._invoke=function(e,n){function o(){return new t((function(t,a){r(e,n,t,a)}))}return a=a?a.then(o,o):o()}}function T(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,\"throw\"===r.method){if(e.iterator.return&&(r.method=\"return\",r.arg=t,T(e,r),\"throw\"===r.method))return d;r.method=\"throw\",r.arg=new TypeError(\"The iterator does not provide a 'throw' method\")}return d}var a=p(n,e.iterator,r.arg);if(\"throw\"===a.type)return r.method=\"throw\",r.arg=a.arg,r.delegate=null,d;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,\"return\"!==r.method&&(r.method=\"next\",r.arg=t),r.delegate=null,d):o:(r.method=\"throw\",r.arg=new TypeError(\"iterator result is not an object\"),r.delegate=null,d)}function G(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function P(e){var t=e.completion||{};t.type=\"normal\",delete t.arg,e.completion=t}function M(e){this.tryEntries=[{tryLoc:\"root\"}],e.forEach(G,this),this.reset(!0)}function O(e){if(e){var r=e[o];if(r)return r.call(e);if(\"function\"==typeof e.next)return e;if(!isNaN(e.length)){var a=-1,i=function r(){for(;++a<e.length;)if(n.call(e,a))return r.value=e[a],r.done=!1,r;return r.value=t,r.done=!0,r};return i.next=i}}return{next:j}}function j(){return{value:t,done:!0}}return g.prototype=_,s(R,\"constructor\",_),s(_,\"constructor\",g),g.displayName=s(_,u,\"GeneratorFunction\"),e.isGeneratorFunction=function(e){var t=\"function\"==typeof e&&e.constructor;return!!t&&(t===g||\"GeneratorFunction\"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,_):(e.__proto__=_,s(e,u,\"GeneratorFunction\")),e.prototype=Object.create(R),e},e.awrap=function(e){return{__await:e}},k(x.prototype),s(x.prototype,i,(function(){return this})),e.AsyncIterator=x,e.async=function(t,r,n,a,o){void 0===o&&(o=Promise);var i=new x(c(t,r,n,a),o);return e.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(R),s(R,u,\"Generator\"),s(R,o,(function(){return this})),s(R,\"toString\",(function(){return\"[object Generator]\"})),e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=O,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=t,this.tryEntries.forEach(P),!e)for(var r in this)\"t\"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if(\"throw\"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function a(n,a){return u.type=\"throw\",u.arg=e,r.next=n,a&&(r.method=\"next\",r.arg=t),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],u=i.completion;if(\"root\"===i.tryLoc)return a(\"end\");if(i.tryLoc<=this.prev){var s=n.call(i,\"catchLoc\"),c=n.call(i,\"finallyLoc\");if(s&&c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!c)throw new Error(\"try statement without catch or finally\");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&n.call(a,\"finallyLoc\")&&this.prev<a.finallyLoc){var o=a;break}}o&&(\"break\"===e||\"continue\"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method=\"next\",this.next=o.finallyLoc,d):this.complete(i)},complete:function(e,t){if(\"throw\"===e.type)throw e.arg;return\"break\"===e.type||\"continue\"===e.type?this.next=e.arg:\"return\"===e.type?(this.rval=this.arg=e.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===e.type&&t&&(this.next=t),d},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),P(r),d}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if(\"throw\"===n.type){var a=n.arg;P(r)}return a}}throw new Error(\"illegal catch attempt\")},delegateYield:function(e,r,n){return this.delegate={iterator:O(e),resultName:r,nextLoc:n},\"next\"===this.method&&(this.arg=t),d}},e}(\"object\"===(\"undefined\"==typeof module?\"undefined\":_typeof(module))?module.exports:{});try{regeneratorRuntime=t}catch(e){\"object\"===(\"undefined\"==typeof globalThis?\"undefined\":_typeof(globalThis))?globalThis.regeneratorRuntime=t:Function(\"r\",\"regeneratorRuntime = r\")(t)}function r(e){for(var t=void 0,r=e[0],n=1;n<e.length;){var a=e[n],o=e[n+1];if(n+=2,(\"optionalAccess\"===a||\"optionalCall\"===a)&&null==r)return;\"access\"===a||\"optionalAccess\"===a?(t=r,r=o(r)):\"call\"!==a&&\"optionalCall\"!==a||(r=o((function(){for(var e,n=arguments.length,a=new Array(n),o=0;o<n;o++)a[o]=arguments[o];return(e=r).call.apply(e,[t].concat(a))})),t=void 0)}return r}function n(){var e=new Int8Array(1);window.crypto.getRandomValues(e);var t=new Uint8Array(Math.max(16,Math.abs(e[0])));return window.crypto.getRandomValues(t),t.join(\"\")}function a(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],a=n();return Object.defineProperty(window,a,{value:function(n){return t&&Reflect.deleteProperty(window,a),r([e,\"optionalCall\",function(e){return e(n)}])},writable:!1,configurable:!0}),a}function o(e){return i.apply(this,arguments)}function i(){return(i=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,n=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n.length>1&&void 0!==n[1]?n[1]:{},e.abrupt(\"return\",new Promise((function(e,n){var o=a((function(t){e(t),Reflect.deleteProperty(window,i)}),!0),i=a((function(e){n(e),Reflect.deleteProperty(window,o)}),!0);window.__TAURI_POST_MESSAGE__(t,_objectSpread({__invokeKey:__TAURI_INVOKE_KEY__,callback:o,error:i},r))})));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var u=Object.freeze({__proto__:null,transformCallback:a,invoke:o,convertFileSrc:function(e){return navigator.userAgent.includes(\"Windows\")?\"https://asset.localhost/\".concat(e):\"asset://\".concat(e)}});function s(e){return c.apply(this,arguments)}function c(){return(c=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",o(\"tauri\",t));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function p(){return(p=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"App\",message:{cmd:\"getAppVersion\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function l(){return(l=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"App\",message:{cmd:\"getAppName\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function f(){return(f=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"App\",message:{cmd:\"getTauriVersion\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var h=Object.freeze({__proto__:null,getName:function(){return l.apply(this,arguments)},getVersion:function(){return p.apply(this,arguments)},getTauriVersion:function(){return f.apply(this,arguments)}});function m(){return(m=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Cli\",message:{cmd:\"cliMatches\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var d=Object.freeze({__proto__:null,getMatches:function(){return m.apply(this,arguments)}});function y(){return(y=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Clipboard\",message:{cmd:\"writeText\",data:t}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function g(){return(g=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Clipboard\",message:{cmd:\"readText\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var _=Object.freeze({__proto__:null,writeText:function(e){return y.apply(this,arguments)},readText:function(){return g.apply(this,arguments)}});function w(){return(w=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return\"object\"===_typeof(t=r.length>0&&void 0!==r[0]?r[0]:{})&&Object.freeze(t),e.abrupt(\"return\",s({__tauriModule:\"Dialog\",message:{cmd:\"openDialog\",options:t}}));case 3:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function v(){return(v=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return\"object\"===_typeof(t=r.length>0&&void 0!==r[0]?r[0]:{})&&Object.freeze(t),e.abrupt(\"return\",s({__tauriModule:\"Dialog\",message:{cmd:\"saveDialog\",options:t}}));case 3:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function b(){return(b=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Dialog\",message:{cmd:\"messageDialog\",message:t}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function R(){return(R=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Dialog\",message:{cmd:\"askDialog\",title:r,message:t}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function k(){return(k=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Dialog\",message:{cmd:\"confirmDialog\",title:r,message:t}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var x=Object.freeze({__proto__:null,open:function(){return w.apply(this,arguments)},save:function(){return v.apply(this,arguments)},message:function(e){return b.apply(this,arguments)},ask:function(e,t){return R.apply(this,arguments)},confirm:function(e,t){return k.apply(this,arguments)}});function T(e,t,r){return G.apply(this,arguments)}function G(){return(G=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,n){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,s({__tauriModule:\"Event\",message:{cmd:\"emit\",event:t,windowLabel:r,payload:\"string\"==typeof n?n:JSON.stringify(n)}});case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function P(e){return M.apply(this,arguments)}function M(){return(M=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Event\",message:{cmd:\"unlisten\",eventId:t}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function O(e,t){return j.apply(this,arguments)}function j(){return(j=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Event\",message:{cmd:\"listen\",event:t,handler:a(r)}}).then((function(e){return _asyncToGenerator(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt(\"return\",P(e));case 1:case\"end\":return t.stop()}}),t)})))})));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function C(e,t){return S.apply(this,arguments)}function S(){return(S=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",O(t,(function(e){r(e),P(e.id).catch((function(){}))})));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function A(e,t){return D.apply(this,arguments)}function D(){return(D=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",T(t,null,r));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var z,L=Object.freeze({__proto__:null,listen:O,once:C,emit:A});function E(){return(E=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,n=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n.length>1&&void 0!==n[1]?n[1]:{},e.abrupt(\"return\",s({__tauriModule:\"Fs\",message:{cmd:\"readTextFile\",path:t,options:r}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function W(){return(W=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,n=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n.length>1&&void 0!==n[1]?n[1]:{},e.abrupt(\"return\",s({__tauriModule:\"Fs\",message:{cmd:\"readBinaryFile\",path:t,options:r}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function F(){return(F=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,n=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return\"object\"===_typeof(r=n.length>1&&void 0!==n[1]?n[1]:{})&&Object.freeze(r),\"object\"===_typeof(t)&&Object.freeze(t),e.abrupt(\"return\",s({__tauriModule:\"Fs\",message:{cmd:\"writeFile\",path:t.path,contents:t.contents,options:r}}));case 4:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}!function(e){e[e.Audio=1]=\"Audio\";e[e.Cache=2]=\"Cache\";e[e.Config=3]=\"Config\";e[e.Data=4]=\"Data\";e[e.LocalData=5]=\"LocalData\";e[e.Desktop=6]=\"Desktop\";e[e.Document=7]=\"Document\";e[e.Download=8]=\"Download\";e[e.Executable=9]=\"Executable\";e[e.Font=10]=\"Font\";e[e.Home=11]=\"Home\";e[e.Picture=12]=\"Picture\";e[e.Public=13]=\"Public\";e[e.Runtime=14]=\"Runtime\";e[e.Template=15]=\"Template\";e[e.Video=16]=\"Video\";e[e.Resource=17]=\"Resource\";e[e.App=18]=\"App\";e[e.Current=19]=\"Current\";e[e.Log=20]=\"Log\"}(z||(z={}));var I=65536;function N(e){var t=function(e){if(e.length<I)return String.fromCharCode.apply(null,Array.from(e));for(var t=\"\",r=e.length,n=0;n<r;n++){var a=e.subarray(n*I,(n+1)*I);t+=String.fromCharCode.apply(null,Array.from(a))}return t}(new Uint8Array(e));return btoa(t)}function U(){return(U=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,n=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return\"object\"===_typeof(r=n.length>1&&void 0!==n[1]?n[1]:{})&&Object.freeze(r),\"object\"===_typeof(t)&&Object.freeze(t),e.abrupt(\"return\",s({__tauriModule:\"Fs\",message:{cmd:\"writeBinaryFile\",path:t.path,contents:N(t.contents),options:r}}));case 4:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function B(){return(B=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,n=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n.length>1&&void 0!==n[1]?n[1]:{},e.abrupt(\"return\",s({__tauriModule:\"Fs\",message:{cmd:\"readDir\",path:t,options:r}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function H(){return(H=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,n=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n.length>1&&void 0!==n[1]?n[1]:{},e.abrupt(\"return\",s({__tauriModule:\"Fs\",message:{cmd:\"createDir\",path:t,options:r}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function V(){return(V=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,n=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n.length>1&&void 0!==n[1]?n[1]:{},e.abrupt(\"return\",s({__tauriModule:\"Fs\",message:{cmd:\"removeDir\",path:t,options:r}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function q(){return(q=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var n,a=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=a.length>2&&void 0!==a[2]?a[2]:{},e.abrupt(\"return\",s({__tauriModule:\"Fs\",message:{cmd:\"copyFile\",source:t,destination:r,options:n}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function J(){return(J=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,n=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n.length>1&&void 0!==n[1]?n[1]:{},e.abrupt(\"return\",s({__tauriModule:\"Fs\",message:{cmd:\"removeFile\",path:t,options:r}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function K(){return(K=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var n,a=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=a.length>2&&void 0!==a[2]?a[2]:{},e.abrupt(\"return\",s({__tauriModule:\"Fs\",message:{cmd:\"renameFile\",oldPath:t,newPath:r,options:n}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var Y=Object.freeze({__proto__:null,get BaseDirectory(){return z},get Dir(){return z},readTextFile:function(e){return E.apply(this,arguments)},readBinaryFile:function(e){return W.apply(this,arguments)},writeFile:function(e){return F.apply(this,arguments)},writeBinaryFile:function(e){return U.apply(this,arguments)},readDir:function(e){return B.apply(this,arguments)},createDir:function(e){return H.apply(this,arguments)},removeDir:function(e){return V.apply(this,arguments)},copyFile:function(e,t){return q.apply(this,arguments)},removeFile:function(e){return J.apply(this,arguments)},renameFile:function(e,t){return K.apply(this,arguments)}});function $(){return($=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"GlobalShortcut\",message:{cmd:\"register\",shortcut:t,handler:a(r)}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Q(){return(Q=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"GlobalShortcut\",message:{cmd:\"registerAll\",shortcuts:t,handler:a(r)}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function X(){return(X=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"GlobalShortcut\",message:{cmd:\"isRegistered\",shortcut:t}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Z(){return(Z=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"GlobalShortcut\",message:{cmd:\"unregister\",shortcut:t}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function ee(){return(ee=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"GlobalShortcut\",message:{cmd:\"unregisterAll\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var te,re=Object.freeze({__proto__:null,register:function(e,t){return $.apply(this,arguments)},registerAll:function(e,t){return Q.apply(this,arguments)},isRegistered:function(e){return X.apply(this,arguments)},unregister:function(e){return Z.apply(this,arguments)},unregisterAll:function(){return ee.apply(this,arguments)}});function ne(e,t){return null!=e?e:t()}function ae(e){for(var t=void 0,r=e[0],n=1;n<e.length;){var a=e[n],o=e[n+1];if(n+=2,(\"optionalAccess\"===a||\"optionalCall\"===a)&&null==r)return;\"access\"===a||\"optionalAccess\"===a?(t=r,r=o(r)):\"call\"!==a&&\"optionalCall\"!==a||(r=o((function(){for(var e,n=arguments.length,a=new Array(n),o=0;o<n;o++)a[o]=arguments[o];return(e=r).call.apply(e,[t].concat(a))})),t=void 0)}return r}!function(e){e[e.JSON=1]=\"JSON\";e[e.Text=2]=\"Text\";e[e.Binary=3]=\"Binary\"}(te||(te={}));var oe=function(){function e(t,r){_classCallCheck(this,e),this.type=t,this.payload=r}return _createClass(e,null,[{key:\"form\",value:function(t){return new e(\"Form\",t)}},{key:\"json\",value:function(t){return new e(\"Json\",t)}},{key:\"text\",value:function(t){return new e(\"Text\",t)}},{key:\"bytes\",value:function(t){return new e(\"Bytes\",t)}}]),e}(),ie=_createClass((function e(t){_classCallCheck(this,e),this.url=t.url,this.status=t.status,this.ok=this.status>=200&&this.status<300,this.headers=t.headers,this.rawHeaders=t.rawHeaders,this.data=t.data})),ue=function(){function e(t){_classCallCheck(this,e),this.id=t}var t,r,n,a,o,i,u;return _createClass(e,[{key:\"drop\",value:(u=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Http\",message:{cmd:\"dropClient\",client:this.id}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return u.apply(this,arguments)})},{key:\"request\",value:(i=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(r=!t.responseType||t.responseType===te.JSON)&&(t.responseType=te.Text),e.abrupt(\"return\",s({__tauriModule:\"Http\",message:{cmd:\"httpRequest\",client:this.id,options:t}}).then((function(e){var t=new ie(e);if(r){try{t.data=JSON.parse(t.data)}catch(e){if(t.ok&&\"\"===t.data)t.data={};else if(t.ok)throw Error(\"Failed to parse response `\".concat(t.data,\"` as JSON: \").concat(e,\";\\n              try setting the `responseType` option to `ResponseType.Text` or `ResponseType.Binary` if the API does not return a JSON response.\"))}return t}return t})));case 3:case\"end\":return e.stop()}}),e,this)}))),function(e){return i.apply(this,arguments)})},{key:\"get\",value:(o=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",this.request(_objectSpread({method:\"GET\",url:t},r)));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e,t){return o.apply(this,arguments)})},{key:\"post\",value:(a=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,n){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",this.request(_objectSpread({method:\"POST\",url:t,body:r},n)));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e,t,r){return a.apply(this,arguments)})},{key:\"put\",value:(n=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,n){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",this.request(_objectSpread({method:\"PUT\",url:t,body:r},n)));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e,t,r){return n.apply(this,arguments)})},{key:\"patch\",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",this.request(_objectSpread({method:\"PATCH\",url:t},r)));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e,t){return r.apply(this,arguments)})},{key:\"delete\",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",this.request(_objectSpread({method:\"DELETE\",url:t},r)));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e,r){return t.apply(this,arguments)})}]),e}();function se(e){return ce.apply(this,arguments)}function ce(){return(ce=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Http\",message:{cmd:\"createClient\",options:t}}).then((function(e){return new ue(e)})));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var pe=null;function le(){return(le=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(null!==pe){e.next=4;break}return e.next=3,se();case 3:pe=e.sent;case 4:return e.abrupt(\"return\",pe.request(_objectSpread({url:t,method:ne(ae([r,\"optionalAccess\",function(e){return e.method}]),(function(){return\"GET\"}))},r)));case 5:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var fe=Object.freeze({__proto__:null,getClient:se,fetch:function(e,t){return le.apply(this,arguments)},Body:oe,Client:ue,Response:ie,get ResponseType(){return te}});function he(){return(he=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(\"default\"===window.Notification.permission){e.next=2;break}return e.abrupt(\"return\",Promise.resolve(\"granted\"===window.Notification.permission));case 2:return e.abrupt(\"return\",s({__tauriModule:\"Notification\",message:{cmd:\"isNotificationPermissionGranted\"}}));case 3:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function me(){return(me=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",window.Notification.requestPermission());case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var de=Object.freeze({__proto__:null,sendNotification:function(e){\"string\"==typeof e?new window.Notification(e):new window.Notification(e.title,e)},requestPermission:function(){return me.apply(this,arguments)},isPermissionGranted:function(){return he.apply(this,arguments)}});function ye(){return navigator.appVersion.includes(\"Win\")}function ge(){return(ge=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.App}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function _e(){return(_e=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Audio}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function we(){return(we=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Cache}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function ve(){return(ve=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Config}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function be(){return(be=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Data}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Re(){return(Re=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Desktop}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function ke(){return(ke=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Document}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function xe(){return(xe=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Download}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Te(){return(Te=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Executable}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Ge(){return(Ge=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Font}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Pe(){return(Pe=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Home}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Me(){return(Me=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.LocalData}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Oe(){return(Oe=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Picture}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function je(){return(je=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Public}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Ce(){return(Ce=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Resource}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Se(){return(Se=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Runtime}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Ae(){return(Ae=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Template}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function De(){return(De=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Video}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function ze(){return(ze=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Current}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Le(){return(Le=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolvePath\",path:\"\",directory:z.Log}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var Ee=ye()?\"\\\\\":\"/\",We=ye()?\";\":\":\";function Fe(){return(Fe=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r,n,a=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(t=a.length,r=new Array(t),n=0;n<t;n++)r[n]=a[n];return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"resolve\",paths:r}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Ie(){return(Ie=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"normalize\",path:t}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Ne(){return(Ne=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r,n,a=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(t=a.length,r=new Array(t),n=0;n<t;n++)r[n]=a[n];return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"join\",paths:r}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Ue(){return(Ue=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"dirname\",path:t}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Be(){return(Be=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"extname\",path:t}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function He(){return(He=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"basename\",path:t,ext:r}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Ve(){return(Ve=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Path\",message:{cmd:\"isAbsolute\",path:t}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var qe=Object.freeze({__proto__:null,appDir:function(){return ge.apply(this,arguments)},audioDir:function(){return _e.apply(this,arguments)},cacheDir:function(){return we.apply(this,arguments)},configDir:function(){return ve.apply(this,arguments)},dataDir:function(){return be.apply(this,arguments)},desktopDir:function(){return Re.apply(this,arguments)},documentDir:function(){return ke.apply(this,arguments)},downloadDir:function(){return xe.apply(this,arguments)},executableDir:function(){return Te.apply(this,arguments)},fontDir:function(){return Ge.apply(this,arguments)},homeDir:function(){return Pe.apply(this,arguments)},localDataDir:function(){return Me.apply(this,arguments)},pictureDir:function(){return Oe.apply(this,arguments)},publicDir:function(){return je.apply(this,arguments)},resourceDir:function(){return Ce.apply(this,arguments)},runtimeDir:function(){return Se.apply(this,arguments)},templateDir:function(){return Ae.apply(this,arguments)},videoDir:function(){return De.apply(this,arguments)},currentDir:function(){return ze.apply(this,arguments)},logDir:function(){return Le.apply(this,arguments)},get BaseDirectory(){return z},sep:Ee,delimiter:We,resolve:function(){return Fe.apply(this,arguments)},normalize:function(e){return Ie.apply(this,arguments)},join:function(){return Ne.apply(this,arguments)},dirname:function(e){return Ue.apply(this,arguments)},extname:function(e){return Be.apply(this,arguments)},basename:function(e,t){return He.apply(this,arguments)},isAbsolute:function(e){return Ve.apply(this,arguments)}});function Je(){return(Je=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=r.length>0&&void 0!==r[0]?r[0]:0,e.abrupt(\"return\",s({__tauriModule:\"Process\",message:{cmd:\"exit\",exitCode:t}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Ke(){return(Ke=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Process\",message:{cmd:\"relaunch\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var Ye=Object.freeze({__proto__:null,exit:function(){return Je.apply(this,arguments)},relaunch:function(){return Ke.apply(this,arguments)}});function $e(e,t){return null!=e?e:t()}function Qe(e,t,r,n){return Xe.apply(this,arguments)}function Xe(){return(Xe=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,n,o){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return\"object\"===_typeof(n)&&Object.freeze(n),e.abrupt(\"return\",s({__tauriModule:\"Shell\",message:{cmd:\"execute\",program:r,args:\"string\"==typeof n?[n]:n,options:o,onEventFn:a(t)}}));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var Ze=function(){function e(){_classCallCheck(this,e),e.prototype.__init.call(this)}return _createClass(e,[{key:\"__init\",value:function(){this.eventListeners=Object.create(null)}},{key:\"addEventListener\",value:function(e,t){e in this.eventListeners?this.eventListeners[e].push(t):this.eventListeners[e]=[t]}},{key:\"_emit\",value:function(e,t){if(e in this.eventListeners){var r,n=_createForOfIteratorHelper(this.eventListeners[e]);try{for(n.s();!(r=n.n()).done;){(0,r.value)(t)}}catch(e){n.e(e)}finally{n.f()}}}},{key:\"on\",value:function(e,t){return this.addEventListener(e,t),this}}]),e}(),et=function(){function e(t){_classCallCheck(this,e),this.pid=t}var t,r;return _createClass(e,[{key:\"write\",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Shell\",message:{cmd:\"stdinWrite\",pid:this.pid,buffer:t}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:\"kill\",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Shell\",message:{cmd:\"killChild\",pid:this.pid}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}]),e}(),tt=function(e){_inherits(a,e);var t,r,n=_createSuper(a);function a(e){var t,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],o=arguments.length>2?arguments[2]:void 0;return _classCallCheck(this,a),t=n.call(this),a.prototype.__init2.call(_assertThisInitialized(t)),a.prototype.__init3.call(_assertThisInitialized(t)),t.program=e,t.args=\"string\"==typeof r?[r]:r,t.options=$e(o,(function(){return{}})),t}return _createClass(a,[{key:\"__init2\",value:function(){this.stdout=new Ze}},{key:\"__init3\",value:function(){this.stderr=new Ze}},{key:\"spawn\",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",Qe((function(e){switch(e.event){case\"Error\":t._emit(\"error\",e.payload);break;case\"Terminated\":t._emit(\"close\",e.payload);break;case\"Stdout\":t.stdout._emit(\"data\",e.payload);break;case\"Stderr\":t.stderr._emit(\"data\",e.payload)}}),this.program,this.args,this.options).then((function(e){return new et(e)})));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:\"execute\",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",new Promise((function(e,r){t.on(\"error\",r);var n=[],a=[];t.stdout.on(\"data\",(function(e){n.push(e)})),t.stderr.on(\"data\",(function(e){a.push(e)})),t.on(\"close\",(function(t){e({code:t.code,signal:t.signal,stdout:n.join(\"\\n\"),stderr:a.join(\"\\n\")})})),t.spawn().catch(r)})));case 1:case\"end\":return e.stop()}}),e)}))),function(){return t.apply(this,arguments)})}],[{key:\"sidecar\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=arguments.length>2?arguments[2]:void 0,n=new a(e,t,r);return n.options.sidecar=!0,n}}]),a}(Ze);function rt(){return(rt=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Shell\",message:{cmd:\"open\",path:t,with:r}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var nt=Object.freeze({__proto__:null,Command:tt,Child:et,open:function(e,t){return rt.apply(this,arguments)}});function at(e){for(var t=void 0,r=e[0],n=1;n<e.length;){var a=e[n],o=e[n+1];if(n+=2,(\"optionalAccess\"===a||\"optionalCall\"===a)&&null==r)return;\"access\"===a||\"optionalAccess\"===a?(t=r,r=o(r)):\"call\"!==a&&\"optionalCall\"!==a||(r=o((function(){for(var e,n=arguments.length,a=new Array(n),o=0;o<n;o++)a[o]=arguments[o];return(e=r).call.apply(e,[t].concat(a))})),t=void 0)}return r}function ot(){return(ot=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=function(){t&&t(),t=void 0},e.abrupt(\"return\",new Promise((function(e,n){O(\"tauri://update-status\",(function(t){var a;(a=at([t,\"optionalAccess\",function(e){return e.payload}])).error?(r(),n(a.error)):\"DONE\"===a.status&&(r(),e())})).then((function(e){t=e})).catch((function(e){throw r(),e})),A(\"tauri://update-install\").catch((function(e){throw r(),e}))})));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function it(){return(it=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=function(){t&&t(),t=void 0},e.abrupt(\"return\",new Promise((function(e,n){C(\"tauri://update-available\",(function(t){var n;n=at([t,\"optionalAccess\",function(e){return e.payload}]),r(),e({manifest:n,shouldUpdate:!0})})).catch((function(e){throw r(),e})),O(\"tauri://update-status\",(function(t){var a;(a=at([t,\"optionalAccess\",function(e){return e.payload}])).error?(r(),n(a.error)):\"UPTODATE\"===a.status&&(r(),e({shouldUpdate:!1}))})).then((function(e){t=e})).catch((function(e){throw r(),e})),A(\"tauri://update\").catch((function(e){throw r(),e}))})));case 2:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var ut=Object.freeze({__proto__:null,installUpdate:function(){return ot.apply(this,arguments)},checkUpdate:function(){return it.apply(this,arguments)}});function st(e){for(var t=void 0,r=e[0],n=1;n<e.length;){var a=e[n],o=e[n+1];if(n+=2,(\"optionalAccess\"===a||\"optionalCall\"===a)&&null==r)return;\"access\"===a||\"optionalAccess\"===a?(t=r,r=o(r)):\"call\"!==a&&\"optionalCall\"!==a||(r=o((function(){for(var e,n=arguments.length,a=new Array(n),o=0;o<n;o++)a[o]=arguments[o];return(e=r).call.apply(e,[t].concat(a))})),t=void 0)}return r}var ct,pt=function(){function e(t,r){_classCallCheck(this,e),e.prototype.__init.call(this),this.width=t,this.height=r}return _createClass(e,[{key:\"__init\",value:function(){this.type=\"Logical\"}}]),e}(),lt=function(){function e(t,r){_classCallCheck(this,e),e.prototype.__init2.call(this),this.width=t,this.height=r}return _createClass(e,[{key:\"__init2\",value:function(){this.type=\"Physical\"}},{key:\"toLogical\",value:function(e){return new pt(this.width/e,this.height/e)}}]),e}(),ft=function(){function e(t,r){_classCallCheck(this,e),e.prototype.__init3.call(this),this.x=t,this.y=r}return _createClass(e,[{key:\"__init3\",value:function(){this.type=\"Logical\"}}]),e}(),ht=function(){function e(t,r){_classCallCheck(this,e),e.prototype.__init4.call(this),this.x=t,this.y=r}return _createClass(e,[{key:\"__init4\",value:function(){this.type=\"Physical\"}},{key:\"toLogical\",value:function(e){return new ft(this.x/e,this.y/e)}}]),e}();function mt(){return window.__TAURI__.__windows.map((function(e){return new _t(e.label,{skip:!0})}))}!function(e){e[e.Critical=1]=\"Critical\";e[e.Informational=2]=\"Informational\"}(ct||(ct={}));var dt=[\"tauri://created\",\"tauri://error\"],yt=function(){function e(t){_classCallCheck(this,e);try{this.label=(n=function(){return window.__TAURI__.__currentWindow.label},null!=(r=t)?r:n())}catch(e){this.label=\"\"}var r,n;this.listeners=Object.create(null)}var t,r,n;return _createClass(e,[{key:\"listen\",value:(n=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var n=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!this._handleTauriEvent(t,r)){e.next=2;break}return e.abrupt(\"return\",Promise.resolve((function(){var e=n.listeners[t];e.splice(e.indexOf(r),1)})));case 2:return e.abrupt(\"return\",O(t,r));case 3:case\"end\":return e.stop()}}),e,this)}))),function(e,t){return n.apply(this,arguments)})},{key:\"once\",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var n=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!this._handleTauriEvent(t,r)){e.next=2;break}return e.abrupt(\"return\",Promise.resolve((function(){var e=n.listeners[t];e.splice(e.indexOf(r),1)})));case 2:return e.abrupt(\"return\",C(t,r));case 3:case\"end\":return e.stop()}}),e,this)}))),function(e,t){return r.apply(this,arguments)})},{key:\"emit\",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var n,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!dt.includes(t)){e.next=4;break}n=_createForOfIteratorHelper(this.listeners[t]||[]);try{for(n.s();!(a=n.n()).done;)(0,a.value)({event:t,id:-1,payload:r})}catch(e){n.e(e)}finally{n.f()}return e.abrupt(\"return\",Promise.resolve());case 4:return e.abrupt(\"return\",T(t,this.label,r));case 5:case\"end\":return e.stop()}}),e,this)}))),function(e,r){return t.apply(this,arguments)})},{key:\"_handleTauriEvent\",value:function(e,t){return!!dt.includes(e)&&(e in this.listeners?this.listeners[e].push(t):this.listeners[e]=[t],!0)}}]),e}(),gt=function(e){_inherits(L,e);var t,r,n,a,o,i,u,c,p,l,f,h,m,d,y,g,_,w,v,b,R,k,x,T,G,P,M,O,j,C,S,A,D,z=_createSuper(L);function L(){return _classCallCheck(this,L),z.apply(this,arguments)}return _createClass(L,[{key:\"scaleFactor\",value:(D=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"scaleFactor\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return D.apply(this,arguments)})},{key:\"innerPosition\",value:(A=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"innerPosition\"}}}}).then((function(e){var t=e.x,r=e.y;return new ht(t,r)})));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return A.apply(this,arguments)})},{key:\"outerPosition\",value:(S=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"outerPosition\"}}}}).then((function(e){var t=e.x,r=e.y;return new ht(t,r)})));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return S.apply(this,arguments)})},{key:\"innerSize\",value:(C=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"innerSize\"}}}}).then((function(e){var t=e.width,r=e.height;return new lt(t,r)})));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return C.apply(this,arguments)})},{key:\"outerSize\",value:(j=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"outerSize\"}}}}).then((function(e){var t=e.width,r=e.height;return new lt(t,r)})));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return j.apply(this,arguments)})},{key:\"isFullscreen\",value:(O=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"isFullscreen\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return O.apply(this,arguments)})},{key:\"isMaximized\",value:(M=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"isMaximized\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return M.apply(this,arguments)})},{key:\"isDecorated\",value:(P=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"isDecorated\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return P.apply(this,arguments)})},{key:\"isResizable\",value:(G=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"isResizable\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return G.apply(this,arguments)})},{key:\"isVisible\",value:(T=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"isVisible\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return T.apply(this,arguments)})},{key:\"center\",value:(x=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"center\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return x.apply(this,arguments)})},{key:\"requestUserAttention\",value:(k=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=null,t&&(r=t===ct.Critical?{type:\"Critical\"}:{type:\"Informational\"}),e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"requestUserAttention\",payload:r}}}}));case 3:case\"end\":return e.stop()}}),e,this)}))),function(e){return k.apply(this,arguments)})},{key:\"setResizable\",value:(R=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setResizable\",payload:t}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e){return R.apply(this,arguments)})},{key:\"setTitle\",value:(b=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setTitle\",payload:t}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e){return b.apply(this,arguments)})},{key:\"maximize\",value:(v=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"maximize\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return v.apply(this,arguments)})},{key:\"unmaximize\",value:(w=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"unmaximize\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return w.apply(this,arguments)})},{key:\"toggleMaximize\",value:(_=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"toggleMaximize\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return _.apply(this,arguments)})},{key:\"minimize\",value:(g=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"minimize\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return g.apply(this,arguments)})},{key:\"unminimize\",value:(y=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"unminimize\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return y.apply(this,arguments)})},{key:\"show\",value:(d=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"show\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return d.apply(this,arguments)})},{key:\"hide\",value:(m=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"hide\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return m.apply(this,arguments)})},{key:\"close\",value:(h=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"close\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return h.apply(this,arguments)})},{key:\"setDecorations\",value:(f=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setDecorations\",payload:t}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e){return f.apply(this,arguments)})},{key:\"setAlwaysOnTop\",value:(l=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setAlwaysOnTop\",payload:t}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e){return l.apply(this,arguments)})},{key:\"setSize\",value:(p=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t&&(\"Logical\"===t.type||\"Physical\"===t.type)){e.next=2;break}throw new Error(\"the `size` argument must be either a LogicalSize or a PhysicalSize instance\");case 2:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setSize\",payload:{type:t.type,data:{width:t.width,height:t.height}}}}}}));case 3:case\"end\":return e.stop()}}),e,this)}))),function(e){return p.apply(this,arguments)})},{key:\"setMinSize\",value:(c=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!t||\"Logical\"===t.type||\"Physical\"===t.type){e.next=2;break}throw new Error(\"the `size` argument must be either a LogicalSize or a PhysicalSize instance\");case 2:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setMinSize\",payload:t?{type:t.type,data:{width:t.width,height:t.height}}:null}}}}));case 3:case\"end\":return e.stop()}}),e,this)}))),function(e){return c.apply(this,arguments)})},{key:\"setMaxSize\",value:(u=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!t||\"Logical\"===t.type||\"Physical\"===t.type){e.next=2;break}throw new Error(\"the `size` argument must be either a LogicalSize or a PhysicalSize instance\");case 2:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setMaxSize\",payload:t?{type:t.type,data:{width:t.width,height:t.height}}:null}}}}));case 3:case\"end\":return e.stop()}}),e,this)}))),function(e){return u.apply(this,arguments)})},{key:\"setPosition\",value:(i=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t&&(\"Logical\"===t.type||\"Physical\"===t.type)){e.next=2;break}throw new Error(\"the `position` argument must be either a LogicalPosition or a PhysicalPosition instance\");case 2:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setPosition\",payload:{type:t.type,data:{x:t.x,y:t.y}}}}}}));case 3:case\"end\":return e.stop()}}),e,this)}))),function(e){return i.apply(this,arguments)})},{key:\"setFullscreen\",value:(o=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setFullscreen\",payload:t}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e){return o.apply(this,arguments)})},{key:\"setFocus\",value:(a=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setFocus\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return a.apply(this,arguments)})},{key:\"setIcon\",value:(n=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setIcon\",payload:{icon:t}}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e){return n.apply(this,arguments)})},{key:\"setSkipTaskbar\",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"setSkipTaskbar\",payload:t}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:\"startDragging\",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{label:this.label,cmd:{type:\"startDragging\"}}}}));case 1:case\"end\":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}]),L}(yt),_t=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var n,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return _classCallCheck(this,r),n=t.call(this,e),st([a,\"optionalAccess\",function(e){return e.skip}])||s({__tauriModule:\"Window\",message:{cmd:\"createWebview\",data:{options:_objectSpread({label:e},a)}}}).then(_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",n.emit(\"tauri://created\"));case 1:case\"end\":return e.stop()}}),e)})))).catch(function(){var e=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",n.emit(\"tauri://error\",t));case 1:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),n}return _createClass(r,null,[{key:\"getByLabel\",value:function(e){return mt().some((function(t){return t.label===e}))?new r(e,{skip:!0}):null}}]),r}(gt),wt=new _t(null,{skip:!0});function vt(){return(vt=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{cmd:{type:\"currentMonitor\"}}}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function bt(){return(bt=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{cmd:{type:\"primaryMonitor\"}}}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Rt(){return(Rt=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Window\",message:{cmd:\"manage\",data:{cmd:{type:\"availableMonitors\"}}}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var kt=Object.freeze({__proto__:null,WebviewWindow:_t,WebviewWindowHandle:yt,WindowManager:gt,getCurrent:function(){return new _t(window.__TAURI__.__currentWindow.label,{skip:!0})},getAll:mt,appWindow:wt,LogicalSize:pt,PhysicalSize:lt,LogicalPosition:ft,PhysicalPosition:ht,get UserAttentionType(){return ct},currentMonitor:function(){return vt.apply(this,arguments)},primaryMonitor:function(){return bt.apply(this,arguments)},availableMonitors:function(){return Rt.apply(this,arguments)}}),xt=ye()?\"\\r\\n\":\"\\n\";function Tt(){return(Tt=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Os\",message:{cmd:\"platform\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Gt(){return(Gt=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Os\",message:{cmd:\"version\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Pt(){return(Pt=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Os\",message:{cmd:\"osType\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Mt(){return(Mt=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Os\",message:{cmd:\"arch\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}function Ot(){return(Ot=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",s({__tauriModule:\"Os\",message:{cmd:\"tempdir\"}}));case 1:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}var jt=Object.freeze({__proto__:null,EOL:xt,platform:function(){return Tt.apply(this,arguments)},version:function(){return Gt.apply(this,arguments)},type:function(){return Pt.apply(this,arguments)},arch:function(){return Mt.apply(this,arguments)},tempdir:function(){return Ot.apply(this,arguments)}}),Ct=o;e.app=h,e.cli=d,e.clipboard=_,e.dialog=x,e.event=L,e.fs=Y,e.globalShortcut=re,e.http=fe,e.invoke=Ct,e.notification=de,e.os=jt,e.path=qe,e.process=Ye,e.shell=nt,e.tauri=u,e.updater=ut,e.window=kt,Object.defineProperty(e,\"__esModule\",{value:!0})}));",
          "",
          "---------------"
        ],
        "core/tauri/src/api/process/command.rs||core/tauri/src/api/process/command.rs": [
          "File: core/tauri/src/api/process/command.rs -> core/tauri/src/api/process/command.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "161: #[cfg(windows)]",
          "162: fn relative_command_path(command: String) -> crate::Result<String> {",
          "163:   match std::env::current_exe()?.parent() {",
          "169:     None => Err(crate::api::Error::Command(\"Could not evaluate executable dir\".to_string()).into()),",
          "170:   }",
          "171: }",
          "",
          "[Removed Lines]",
          "164:     Some(exe_dir) => Ok(format!(",
          "165:       \"{}/{}.exe\",",
          "166:       exe_dir.to_string_lossy().to_string(),",
          "167:       command",
          "168:     )),",
          "",
          "[Added Lines]",
          "164:     Some(exe_dir) => Ok(format!(\"{}/{}.exe\", exe_dir.to_string_lossy(), command)),",
          "",
          "---------------"
        ],
        "core/tauri/src/api/shell.rs||core/tauri/src/api/shell.rs": [
          "File: core/tauri/src/api/shell.rs -> core/tauri/src/api/shell.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   type Err = super::Error;",
          "38:   fn from_str(s: &str) -> Result<Self, Self::Err> {",
          "39:     let p = match s.to_lowercase().as_str() {",
          "40:       \"open\" => Self::Open,",
          "41:       \"start\" => Self::Start,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:     #[allow(clippy::match_str_case_mismatch)]",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints.rs||core/tauri/src/endpoints.rs": [
          "File: core/tauri/src/endpoints.rs -> core/tauri/src/endpoints.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: mod shell;",
          "29: mod window;",
          "32: pub struct InvokeResponse {",
          "33:   json: crate::Result<JsonValue>,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: pub struct InvokeContext<R: Runtime> {",
          "33:   pub window: Window<R>,",
          "34:   pub config: Arc<Config>,",
          "35:   pub package_info: PackageInfo,",
          "36: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:     config: Arc<Config>,",
          "69:     package_info: PackageInfo,",
          "70:   ) {",
          "71:     match self {",
          "72:       Self::App(cmd) => resolver.respond_async(async move {",
          "73:         cmd",
          "75:           .and_then(|r| r.json)",
          "76:           .map_err(InvokeError::from)",
          "77:       }),",
          "78:       Self::Process(cmd) => resolver.respond_async(async move {",
          "79:         cmd",
          "81:           .and_then(|r| r.json)",
          "82:           .map_err(InvokeError::from)",
          "83:       }),",
          "84:       Self::Fs(cmd) => resolver.respond_async(async move {",
          "85:         cmd",
          "87:           .and_then(|r| r.json)",
          "88:           .map_err(InvokeError::from)",
          "89:       }),",
          "90:       Self::Path(cmd) => resolver.respond_async(async move {",
          "91:         cmd",
          "93:           .and_then(|r| r.json)",
          "94:           .map_err(InvokeError::from)",
          "95:       }),",
          "98:       Self::Window(cmd) => resolver.respond_async(async move {",
          "99:         cmd",
          "101:           .await",
          "102:           .and_then(|r| r.json)",
          "103:           .map_err(InvokeError::from)",
          "104:       }),",
          "105:       Self::Shell(cmd) => resolver.respond_async(async move {",
          "106:         cmd",
          "108:           .and_then(|r| r.json)",
          "109:           .map_err(InvokeError::from)",
          "110:       }),",
          "111:       Self::Event(cmd) => resolver.respond_async(async move {",
          "112:         cmd",
          "114:           .and_then(|r| r.json)",
          "115:           .map_err(InvokeError::from)",
          "116:       }),",
          "117:       Self::Dialog(cmd) => resolver.respond_async(async move {",
          "118:         cmd",
          "120:           .and_then(|r| r.json)",
          "121:           .map_err(InvokeError::from)",
          "122:       }),",
          "133:       Self::Notification(cmd) => resolver.respond_async(async move {",
          "134:         cmd",
          "136:           .and_then(|r| r.json)",
          "137:           .map_err(InvokeError::from)",
          "138:       }),",
          "139:       Self::Http(cmd) => resolver.respond_async(async move {",
          "140:         cmd",
          "142:           .await",
          "143:           .and_then(|r| r.json)",
          "144:           .map_err(InvokeError::from)",
          "145:       }),",
          "146:       Self::GlobalShortcut(cmd) => resolver.respond_async(async move {",
          "147:         cmd",
          "149:           .and_then(|r| r.json)",
          "150:           .map_err(InvokeError::from)",
          "151:       }),",
          "152:       Self::Clipboard(cmd) => resolver.respond_async(async move {",
          "153:         cmd",
          "155:           .and_then(|r| r.json)",
          "156:           .map_err(InvokeError::from)",
          "157:       }),",
          "",
          "[Removed Lines]",
          "74:           .run(package_info)",
          "80:           .run(window)",
          "86:           .run(window, config, &package_info)",
          "92:           .run(window, config, &package_info)",
          "96:       Self::Os(cmd) => resolver",
          "97:         .respond_async(async move { cmd.run().and_then(|r| r.json).map_err(InvokeError::from) }),",
          "100:           .run(window)",
          "107:           .run(window)",
          "113:           .run(window)",
          "119:           .run(window)",
          "123:       Self::Cli(cmd) => {",
          "124:         if let Some(cli_config) = config.tauri.cli.clone() {",
          "125:           resolver.respond_async(async move {",
          "126:             cmd",
          "127:               .run(&cli_config, &package_info)",
          "128:               .and_then(|r| r.json)",
          "129:               .map_err(InvokeError::from)",
          "130:           })",
          "131:         }",
          "132:       }",
          "135:           .run(window, config, &package_info)",
          "141:           .run()",
          "148:           .run(window)",
          "154:           .run(window)",
          "",
          "[Added Lines]",
          "78:     let context = InvokeContext {",
          "79:       window,",
          "80:       config,",
          "81:       package_info,",
          "82:     };",
          "86:           .run(context)",
          "92:           .run(context)",
          "98:           .run(context)",
          "104:           .run(context)",
          "105:           .and_then(|r| r.json)",
          "106:           .map_err(InvokeError::from)",
          "107:       }),",
          "108:       Self::Os(cmd) => resolver.respond_async(async move {",
          "109:         cmd",
          "110:           .run(context)",
          "116:           .run(context)",
          "123:           .run(context)",
          "129:           .run(context)",
          "135:           .run(context)",
          "136:           .and_then(|r| r.json)",
          "137:           .map_err(InvokeError::from)",
          "138:       }),",
          "139:       Self::Cli(cmd) => resolver.respond_async(async move {",
          "140:         cmd",
          "141:           .run(context)",
          "147:           .run(context)",
          "153:           .run(context)",
          "160:           .run(context)",
          "166:           .run(context)",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/app.rs||core/tauri/src/endpoints/app.rs": [
          "File: core/tauri/src/endpoints/app.rs -> core/tauri/src/endpoints/app.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: use serde::Deserialize;",
          "11: #[serde(tag = \"cmd\", rename_all = \"camelCase\")]",
          "12: #[allow(clippy::enum_variant_names)]",
          "13: pub enum Cmd {",
          "",
          "[Removed Lines]",
          "5: use super::InvokeResponse;",
          "6: use crate::PackageInfo;",
          "10: #[derive(Deserialize)]",
          "",
          "[Added Lines]",
          "5: use super::InvokeContext;",
          "6: use crate::Runtime;",
          "8: use tauri_macros::CommandModule;",
          "11: #[derive(Deserialize, CommandModule)]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: }",
          "22: impl Cmd {",
          "29:   }",
          "30: }",
          "",
          "[Removed Lines]",
          "23:   pub fn run(self, package_info: PackageInfo) -> crate::Result<InvokeResponse> {",
          "24:     match self {",
          "25:       Self::GetAppVersion => Ok(package_info.version.into()),",
          "26:       Self::GetAppName => Ok(package_info.name.into()),",
          "27:       Self::GetTauriVersion => Ok(env!(\"CARGO_PKG_VERSION\").into()),",
          "28:     }",
          "",
          "[Added Lines]",
          "24:   fn get_app_version<R: Runtime>(context: InvokeContext<R>) -> crate::Result<String> {",
          "25:     Ok(context.package_info.version)",
          "26:   }",
          "28:   fn get_app_name<R: Runtime>(context: InvokeContext<R>) -> crate::Result<String> {",
          "29:     Ok(context.package_info.name)",
          "30:   }",
          "32:   fn get_tauri_version<R: Runtime>(_context: InvokeContext<R>) -> crate::Result<&'static str> {",
          "33:     Ok(env!(\"CARGO_PKG_VERSION\"))",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/cli.rs||core/tauri/src/endpoints/cli.rs": [
          "File: core/tauri/src/endpoints/cli.rs -> core/tauri/src/endpoints/cli.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: use serde::Deserialize;",
          "11: #[serde(tag = \"cmd\", rename_all = \"camelCase\")]",
          "12: pub enum Cmd {",
          "",
          "[Removed Lines]",
          "5: use super::InvokeResponse;",
          "6: use crate::{utils::config::CliConfig, PackageInfo};",
          "10: #[derive(Deserialize)]",
          "",
          "[Added Lines]",
          "5: use super::{InvokeContext, InvokeResponse};",
          "6: use crate::Runtime;",
          "8: use tauri_macros::{module_command_handler, CommandModule};",
          "11: #[derive(Deserialize, CommandModule)]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: }",
          "17: impl Cmd {",
          "36:     }",
          "37:   }",
          "38: }",
          "",
          "[Removed Lines]",
          "18:   #[allow(unused_variables)]",
          "19:   pub fn run(",
          "20:     self,",
          "21:     cli_config: &CliConfig,",
          "22:     package_info: &PackageInfo,",
          "23:   ) -> crate::Result<InvokeResponse> {",
          "24:     match self {",
          "25:       #[allow(unused_variables)]",
          "26:       Self::CliMatches => {",
          "27:         #[cfg(cli)]",
          "28:         return crate::api::cli::get_matches(cli_config, package_info)",
          "29:           .map_err(Into::into)",
          "30:           .map(Into::into);",
          "31:         #[cfg(not(cli))]",
          "32:           Err(crate::Error::ApiNotEnabled(",
          "33:             \"CLI definition not set under tauri.conf.json > tauri > cli (https://tauri.studio/docs/api/config#tauri.cli)\".to_string(),",
          "34:           ))",
          "35:       }",
          "",
          "[Added Lines]",
          "19:   #[module_command_handler(cli, \"CLI definition not set under tauri.conf.json > tauri > cli (https://tauri.studio/docs/api/config#tauri.cli)\")]",
          "20:   fn cli_matches<R: Runtime>(context: InvokeContext<R>) -> crate::Result<InvokeResponse> {",
          "21:     if let Some(cli) = &context.config.tauri.cli {",
          "22:       crate::api::cli::get_matches(cli, context.package_info)",
          "23:         .map(Into::into)",
          "24:         .map_err(Into::into)",
          "25:     } else {",
          "26:       Err(crate::Error::ApiNotAllowlisted(\"CLI definition not set under tauri.conf.json > tauri > cli (https://tauri.studio/docs/api/config#tauri.cli)\".into()))",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/clipboard.rs||core/tauri/src/endpoints/clipboard.rs": [
          "File: core/tauri/src/endpoints/clipboard.rs -> core/tauri/src/endpoints/clipboard.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #[cfg(any(clipboard_write_text, clipboard_read_text))]",
          "7: use crate::runtime::ClipboardManager;",
          "9: use serde::Deserialize;",
          "13: #[serde(tag = \"cmd\", content = \"data\", rename_all = \"camelCase\")]",
          "14: pub enum Cmd {",
          "",
          "[Removed Lines]",
          "5: use super::InvokeResponse;",
          "8: use crate::{runtime::Runtime, window::Window};",
          "12: #[derive(Deserialize)]",
          "",
          "[Added Lines]",
          "5: use super::InvokeContext;",
          "8: use crate::Runtime;",
          "10: use tauri_macros::{module_command_handler, CommandModule};",
          "13: #[derive(Deserialize, CommandModule)]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: }",
          "21: impl Cmd {",
          "45:   }",
          "46: }",
          "",
          "[Removed Lines]",
          "22:   #[allow(unused_variables)]",
          "23:   pub fn run<R: Runtime>(self, window: Window<R>) -> crate::Result<InvokeResponse> {",
          "24:     match self {",
          "25:       #[cfg(clipboard_write_text)]",
          "26:       Self::WriteText(text) => Ok(",
          "27:         window",
          "28:           .app_handle",
          "29:           .clipboard_manager()",
          "30:           .write_text(text)?",
          "31:           .into(),",
          "32:       ),",
          "33:       #[cfg(not(clipboard_write_text))]",
          "34:       Self::WriteText(_) => Err(crate::Error::ApiNotAllowlisted(",
          "35:         \"clipboard > readText\".to_string(),",
          "36:       )),",
          "38:       #[cfg(clipboard_read_text)]",
          "39:       Self::ReadText => Ok(window.app_handle.clipboard_manager().read_text()?.into()),",
          "40:       #[cfg(not(clipboard_read_text))]",
          "41:       Self::ReadText => Err(crate::Error::ApiNotAllowlisted(",
          "42:         \"clipboard > writeText\".to_string(),",
          "43:       )),",
          "44:     }",
          "",
          "[Added Lines]",
          "23:   #[module_command_handler(clipboard_write_text, \"clipboard > writeText\")]",
          "24:   fn write_text<R: Runtime>(context: InvokeContext<R>, text: String) -> crate::Result<()> {",
          "25:     Ok(",
          "26:       context",
          "27:         .window",
          "28:         .app_handle",
          "29:         .clipboard_manager()",
          "30:         .write_text(text)?,",
          "31:     )",
          "32:   }",
          "34:   #[module_command_handler(clipboard_read_text, \"clipboard > readText\")]",
          "35:   fn read_text<R: Runtime>(context: InvokeContext<R>) -> crate::Result<Option<String>> {",
          "36:     Ok(context.window.app_handle.clipboard_manager().read_text()?)",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/dialog.rs||core/tauri/src/endpoints/dialog.rs": [
          "File: core/tauri/src/endpoints/dialog.rs -> core/tauri/src/endpoints/dialog.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #[cfg(any(dialog_open, dialog_save))]",
          "7: use crate::api::dialog::FileDialogBuilder;",
          "9: use serde::Deserialize;",
          "11: use std::path::PathBuf;",
          "12: #[cfg(any(dialog_message, dialog_ask, dialog_confirm))]",
          "",
          "[Removed Lines]",
          "5: use super::InvokeResponse;",
          "8: use crate::{runtime::Runtime, Window};",
          "",
          "[Added Lines]",
          "5: use super::{InvokeContext, InvokeResponse};",
          "8: use crate::Runtime;",
          "10: use tauri_macros::{module_command_handler, CommandModule};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: }",
          "53: #[serde(tag = \"cmd\", rename_all = \"camelCase\")]",
          "54: #[allow(clippy::enum_variant_names)]",
          "55: pub enum Cmd {",
          "",
          "[Removed Lines]",
          "52: #[derive(Deserialize)]",
          "",
          "[Added Lines]",
          "53: #[derive(Deserialize, CommandModule)]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75: }",
          "77: impl Cmd {",
          "78:   #[allow(unused_variables)]",
          "135:     }",
          "136:   }",
          "137: }",
          "",
          "[Removed Lines]",
          "79:   pub fn run<R: Runtime>(self, window: Window<R>) -> crate::Result<InvokeResponse> {",
          "80:     match self {",
          "81:       #[cfg(dialog_open)]",
          "82:       Self::OpenDialog { options } => open(&window, options),",
          "83:       #[cfg(not(dialog_open))]",
          "84:       Self::OpenDialog { .. } => Err(crate::Error::ApiNotAllowlisted(\"dialog > open\".to_string())),",
          "86:       #[cfg(dialog_save)]",
          "87:       Self::SaveDialog { options } => save(window, options),",
          "88:       #[cfg(not(dialog_save))]",
          "89:       Self::SaveDialog { .. } => Err(crate::Error::ApiNotAllowlisted(\"dialog > save\".to_string())),",
          "91:       #[cfg(dialog_message)]",
          "92:       Self::MessageDialog { message } => {",
          "93:         let exe = std::env::current_exe()?;",
          "94:         crate::api::dialog::message(",
          "95:           Some(&window),",
          "96:           &window.app_handle.package_info().name,",
          "97:           message,",
          "98:         );",
          "99:         Ok(().into())",
          "100:       }",
          "101:       #[cfg(not(dialog_message))]",
          "102:       Self::MessageDialog { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "103:         \"dialog > message\".to_string(),",
          "104:       )),",
          "106:       #[cfg(dialog_ask)]",
          "107:       Self::AskDialog { title, message } => {",
          "108:         let (tx, rx) = channel();",
          "109:         crate::api::dialog::ask(",
          "110:           Some(&window),",
          "111:           title.unwrap_or_else(|| window.app_handle.package_info().name.clone()),",
          "112:           message,",
          "113:           move |m| tx.send(m).unwrap(),",
          "114:         );",
          "115:         Ok(rx.recv().unwrap().into())",
          "116:       }",
          "117:       #[cfg(not(dialog_ask))]",
          "118:       Self::AskDialog { .. } => Err(crate::Error::ApiNotAllowlisted(\"dialog > ask\".to_string())),",
          "120:       #[cfg(dialog_confirm)]",
          "121:       Self::ConfirmDialog { title, message } => {",
          "122:         let (tx, rx) = channel();",
          "123:         crate::api::dialog::confirm(",
          "124:           Some(&window),",
          "125:           title.unwrap_or_else(|| window.app_handle.package_info().name.clone()),",
          "126:           message,",
          "127:           move |m| tx.send(m).unwrap(),",
          "128:         );",
          "129:         Ok(rx.recv().unwrap().into())",
          "130:       }",
          "131:       #[cfg(not(dialog_confirm))]",
          "132:       Self::ConfirmDialog { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "133:         \"dialog > confirm\".to_string(),",
          "134:       )),",
          "",
          "[Added Lines]",
          "79:   #[module_command_handler(dialog_open, \"dialog > open\")]",
          "81:   fn open_dialog<R: Runtime>(",
          "82:     context: InvokeContext<R>,",
          "83:     options: OpenDialogOptions,",
          "84:   ) -> crate::Result<InvokeResponse> {",
          "85:     let mut dialog_builder = FileDialogBuilder::new();",
          "86:     #[cfg(any(windows, target_os = \"macos\"))]",
          "87:     {",
          "88:       dialog_builder = dialog_builder.set_parent(&context.window);",
          "89:     }",
          "90:     if let Some(default_path) = options.default_path {",
          "91:       dialog_builder = set_default_path(dialog_builder, default_path);",
          "92:     }",
          "93:     for filter in options.filters {",
          "94:       let extensions: Vec<&str> = filter.extensions.iter().map(|s| &**s).collect();",
          "95:       dialog_builder = dialog_builder.add_filter(filter.name, &extensions);",
          "96:     }",
          "98:     let (tx, rx) = channel();",
          "100:     if options.directory {",
          "101:       dialog_builder.pick_folder(move |p| tx.send(p.into()).unwrap());",
          "102:     } else if options.multiple {",
          "103:       dialog_builder.pick_files(move |p| tx.send(p.into()).unwrap());",
          "104:     } else {",
          "105:       dialog_builder.pick_file(move |p| tx.send(p.into()).unwrap());",
          "106:     }",
          "108:     Ok(rx.recv().unwrap())",
          "109:   }",
          "111:   #[module_command_handler(dialog_save, \"dialog > save\")]",
          "112:   #[allow(unused_variables)]",
          "113:   fn save_dialog<R: Runtime>(",
          "114:     context: InvokeContext<R>,",
          "115:     options: SaveDialogOptions,",
          "116:   ) -> crate::Result<Option<PathBuf>> {",
          "117:     let mut dialog_builder = FileDialogBuilder::new();",
          "118:     #[cfg(any(windows, target_os = \"macos\"))]",
          "119:     {",
          "120:       dialog_builder = dialog_builder.set_parent(&context.window);",
          "122:     if let Some(default_path) = options.default_path {",
          "123:       dialog_builder = set_default_path(dialog_builder, default_path);",
          "124:     }",
          "125:     for filter in options.filters {",
          "126:       let extensions: Vec<&str> = filter.extensions.iter().map(|s| &**s).collect();",
          "127:       dialog_builder = dialog_builder.add_filter(filter.name, &extensions);",
          "128:     }",
          "129:     let (tx, rx) = channel();",
          "130:     dialog_builder.save_file(move |p| tx.send(p).unwrap());",
          "131:     Ok(rx.recv().unwrap())",
          "132:   }",
          "134:   #[module_command_handler(dialog_message, \"dialog > message\")]",
          "135:   fn message_dialog<R: Runtime>(context: InvokeContext<R>, message: String) -> crate::Result<()> {",
          "136:     crate::api::dialog::message(",
          "137:       Some(&context.window),",
          "138:       &context.window.app_handle.package_info().name,",
          "139:       message,",
          "140:     );",
          "141:     Ok(())",
          "142:   }",
          "144:   #[module_command_handler(dialog_ask, \"dialog > ask\")]",
          "145:   fn ask_dialog<R: Runtime>(",
          "146:     context: InvokeContext<R>,",
          "147:     title: Option<String>,",
          "148:     message: String,",
          "149:   ) -> crate::Result<bool> {",
          "150:     let (tx, rx) = channel();",
          "151:     crate::api::dialog::ask(",
          "152:       Some(&context.window),",
          "153:       title.unwrap_or_else(|| context.window.app_handle.package_info().name.clone()),",
          "154:       message,",
          "155:       move |m| tx.send(m).unwrap(),",
          "156:     );",
          "157:     Ok(rx.recv().unwrap())",
          "158:   }",
          "160:   #[module_command_handler(dialog_confirm, \"dialog > confirm\")]",
          "161:   fn confirm_dialog<R: Runtime>(",
          "162:     context: InvokeContext<R>,",
          "163:     title: Option<String>,",
          "164:     message: String,",
          "165:   ) -> crate::Result<bool> {",
          "166:     let (tx, rx) = channel();",
          "167:     crate::api::dialog::confirm(",
          "168:       Some(&context.window),",
          "169:       title.unwrap_or_else(|| context.window.app_handle.package_info().name.clone()),",
          "170:       message,",
          "171:       move |m| tx.send(m).unwrap(),",
          "172:     );",
          "173:     Ok(rx.recv().unwrap())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "153:     dialog_builder.set_directory(default_path)",
          "154:   }",
          "155: }",
          "",
          "[Removed Lines]",
          "158: #[cfg(dialog_open)]",
          "159: #[allow(unused_variables)]",
          "160: pub fn open<R: Runtime>(",
          "161:   window: &Window<R>,",
          "162:   options: OpenDialogOptions,",
          "163: ) -> crate::Result<InvokeResponse> {",
          "164:   let mut dialog_builder = FileDialogBuilder::new();",
          "165:   #[cfg(any(windows, target_os = \"macos\"))]",
          "166:   {",
          "167:     dialog_builder = dialog_builder.set_parent(window);",
          "168:   }",
          "169:   if let Some(default_path) = options.default_path {",
          "170:     dialog_builder = set_default_path(dialog_builder, default_path);",
          "171:   }",
          "172:   for filter in options.filters {",
          "173:     let extensions: Vec<&str> = filter.extensions.iter().map(|s| &**s).collect();",
          "174:     dialog_builder = dialog_builder.add_filter(filter.name, &extensions);",
          "175:   }",
          "177:   let (tx, rx) = channel();",
          "179:   if options.directory {",
          "180:     dialog_builder.pick_folder(move |p| tx.send(p.into()).unwrap());",
          "181:   } else if options.multiple {",
          "182:     dialog_builder.pick_files(move |p| tx.send(p.into()).unwrap());",
          "183:   } else {",
          "184:     dialog_builder.pick_file(move |p| tx.send(p.into()).unwrap());",
          "185:   }",
          "187:   Ok(rx.recv().unwrap())",
          "188: }",
          "191: #[cfg(dialog_save)]",
          "192: #[allow(unused_variables)]",
          "193: pub fn save<R: Runtime>(",
          "194:   window: Window<R>,",
          "195:   options: SaveDialogOptions,",
          "196: ) -> crate::Result<InvokeResponse> {",
          "197:   let mut dialog_builder = FileDialogBuilder::new();",
          "198:   #[cfg(any(windows, target_os = \"macos\"))]",
          "199:   {",
          "200:     dialog_builder = dialog_builder.set_parent(&window);",
          "201:   }",
          "202:   if let Some(default_path) = options.default_path {",
          "203:     dialog_builder = set_default_path(dialog_builder, default_path);",
          "204:   }",
          "205:   for filter in options.filters {",
          "206:     let extensions: Vec<&str> = filter.extensions.iter().map(|s| &**s).collect();",
          "207:     dialog_builder = dialog_builder.add_filter(filter.name, &extensions);",
          "208:   }",
          "209:   let (tx, rx) = channel();",
          "210:   dialog_builder.save_file(move |p| tx.send(p).unwrap());",
          "211:   Ok(rx.recv().unwrap().into())",
          "212: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/event.rs||core/tauri/src/endpoints/event.rs": [
          "File: core/tauri/src/endpoints/event.rs -> core/tauri/src/endpoints/event.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: use serde::Deserialize;",
          "10: #[serde(tag = \"cmd\", rename_all = \"camelCase\")]",
          "11: pub enum Cmd {",
          "",
          "[Removed Lines]",
          "5: use crate::{endpoints::InvokeResponse, runtime::Runtime, sealed::ManagerBase, Manager, Window};",
          "9: #[derive(Deserialize)]",
          "",
          "[Added Lines]",
          "5: use super::InvokeContext;",
          "6: use crate::{sealed::ManagerBase, Manager, Runtime, Window};",
          "8: use tauri_macros::CommandModule;",
          "11: #[derive(Deserialize, CommandModule)]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: }",
          "27: impl Cmd {",
          "56:     }",
          "57:   }",
          "58: }",
          "",
          "[Removed Lines]",
          "28:   pub fn run<R: Runtime>(self, window: Window<R>) -> crate::Result<InvokeResponse> {",
          "29:     match self {",
          "30:       Self::Listen { event, handler } => {",
          "31:         let event_id = rand::random();",
          "32:         window.eval(&listen_js(&window, event.clone(), event_id, handler))?;",
          "33:         window.register_js_listener(event, event_id);",
          "34:         Ok(event_id.into())",
          "35:       }",
          "36:       Self::Unlisten { event_id } => {",
          "37:         window.eval(&unlisten_js(&window, event_id))?;",
          "38:         window.unregister_js_listener(event_id);",
          "39:         Ok(().into())",
          "40:       }",
          "41:       Self::Emit {",
          "42:         event,",
          "43:         window_label,",
          "44:         payload,",
          "45:       } => {",
          "47:         window.trigger(&event, payload.clone());",
          "49:         if let Some(target) = window_label {",
          "50:           window.emit_to(&target, &event, payload)?;",
          "51:         } else {",
          "52:           window.emit_all(&event, payload)?;",
          "53:         }",
          "54:         Ok(().into())",
          "55:       }",
          "",
          "[Added Lines]",
          "30:   fn listen<R: Runtime>(",
          "31:     context: InvokeContext<R>,",
          "32:     event: String,",
          "33:     handler: String,",
          "34:   ) -> crate::Result<u64> {",
          "35:     let event_id = rand::random();",
          "36:     context",
          "37:       .window",
          "38:       .eval(&listen_js(&context.window, event.clone(), event_id, handler))?;",
          "39:     context.window.register_js_listener(event, event_id);",
          "40:     Ok(event_id)",
          "41:   }",
          "43:   fn unlisten<R: Runtime>(context: InvokeContext<R>, event_id: u64) -> crate::Result<()> {",
          "44:     context",
          "45:       .window",
          "46:       .eval(&unlisten_js(&context.window, event_id))?;",
          "47:     context.window.unregister_js_listener(event_id);",
          "48:     Ok(())",
          "49:   }",
          "51:   fn emit<R: Runtime>(",
          "52:     context: InvokeContext<R>,",
          "53:     event: String,",
          "54:     window_label: Option<String>,",
          "55:     payload: Option<String>,",
          "56:   ) -> crate::Result<()> {",
          "58:     context.window.trigger(&event, payload.clone());",
          "60:     if let Some(target) = window_label {",
          "61:       context.window.emit_to(&target, &event, payload)?;",
          "62:     } else {",
          "63:       context.window.emit_all(&event, payload)?;",
          "65:     Ok(())",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs": [
          "File: core/tauri/src/endpoints/file_system.rs -> core/tauri/src/endpoints/file_system.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: use crate::{",
          "7:   api::{dir, file, path::BaseDirectory},",
          "8:   scope::Scopes,",
          "9:   Config, Env, Manager, PackageInfo, Runtime, Window,",
          "10: };",
          "12: use serde::{Deserialize, Serialize};",
          "14: use std::{",
          "15:   fs,",
          "",
          "[Removed Lines]",
          "5: use super::InvokeResponse;",
          "",
          "[Added Lines]",
          "11: use super::InvokeContext;",
          "13: use tauri_macros::{module_command_handler, CommandModule};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: }",
          "43: #[serde(tag = \"cmd\", rename_all = \"camelCase\")]",
          "44: pub enum Cmd {",
          "",
          "[Removed Lines]",
          "42: #[derive(Deserialize)]",
          "",
          "[Added Lines]",
          "43: #[derive(Deserialize, CommandModule)]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100: }",
          "102: impl Cmd {",
          "142:         path,",
          "207:   }",
          "208: }",
          "",
          "[Removed Lines]",
          "103:   #[allow(unused_variables)]",
          "104:   pub fn run<R: Runtime>(",
          "105:     self,",
          "106:     window: Window<R>,",
          "107:     config: Arc<Config>,",
          "108:     package_info: &PackageInfo,",
          "109:   ) -> crate::Result<InvokeResponse> {",
          "110:     match self {",
          "111:       #[cfg(fs_read_text_file)]",
          "112:       Self::ReadTextFile { path, options } => {",
          "113:         read_text_file(&config, package_info, &window, path, options).map(Into::into)",
          "114:       }",
          "115:       #[cfg(not(fs_read_text_file))]",
          "116:       Self::ReadTextFile { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "117:         \"fs > readTextFile\".to_string(),",
          "118:       )),",
          "120:       #[cfg(fs_read_binary_file)]",
          "121:       Self::ReadBinaryFile { path, options } => {",
          "122:         read_binary_file(&config, package_info, &window, path, options).map(Into::into)",
          "123:       }",
          "124:       #[cfg(not(fs_read_binary_file))]",
          "125:       Self::ReadBinaryFile { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "126:         \"readBinaryFile\".to_string(),",
          "127:       )),",
          "129:       #[cfg(fs_write_file)]",
          "130:       Self::WriteFile {",
          "131:         path,",
          "132:         contents,",
          "133:         options,",
          "134:       } => write_file(&config, package_info, &window, path, contents, options).map(Into::into),",
          "135:       #[cfg(not(fs_write_file))]",
          "136:       Self::WriteFile { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "137:         \"fs > writeFile\".to_string(),",
          "138:       )),",
          "140:       #[cfg(fs_write_binary_file)]",
          "141:       Self::WriteBinaryFile {",
          "143:         contents,",
          "144:         options,",
          "145:       } => {",
          "146:         write_binary_file(&config, package_info, &window, path, contents, options).map(Into::into)",
          "147:       }",
          "148:       #[cfg(not(fs_write_binary_file))]",
          "149:       Self::WriteBinaryFile { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "150:         \"writeBinaryFile\".to_string(),",
          "151:       )),",
          "153:       #[cfg(fs_read_dir)]",
          "154:       Self::ReadDir { path, options } => {",
          "155:         read_dir(&config, package_info, &window, path, options).map(Into::into)",
          "156:       }",
          "157:       #[cfg(not(fs_read_dir))]",
          "158:       Self::ReadDir { .. } => Err(crate::Error::ApiNotAllowlisted(\"fs > readDir\".to_string())),",
          "160:       #[cfg(fs_copy_file)]",
          "161:       Self::CopyFile {",
          "162:         source,",
          "163:         destination,",
          "164:         options,",
          "165:       } => copy_file(&config, package_info, &window, source, destination, options).map(Into::into),",
          "166:       #[cfg(not(fs_copy_file))]",
          "167:       Self::CopyFile { .. } => Err(crate::Error::ApiNotAllowlisted(\"fs > copyFile\".to_string())),",
          "169:       #[cfg(fs_create_dir)]",
          "170:       Self::CreateDir { path, options } => {",
          "171:         create_dir(&config, package_info, &window, path, options).map(Into::into)",
          "172:       }",
          "173:       #[cfg(not(fs_create_dir))]",
          "174:       Self::CreateDir { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "175:         \"fs > createDir\".to_string(),",
          "176:       )),",
          "178:       #[cfg(fs_remove_dir)]",
          "179:       Self::RemoveDir { path, options } => {",
          "180:         remove_dir(&config, package_info, &window, path, options).map(Into::into)",
          "181:       }",
          "182:       #[cfg(not(fs_remove_dir))]",
          "183:       Self::RemoveDir { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "184:         \"fs > removeDir\".to_string(),",
          "185:       )),",
          "187:       #[cfg(fs_remove_file)]",
          "188:       Self::RemoveFile { path, options } => {",
          "189:         remove_file(&config, package_info, &window, path, options).map(Into::into)",
          "190:       }",
          "191:       #[cfg(not(fs_remove_file))]",
          "192:       Self::RemoveFile { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "193:         \"fs > removeFile\".to_string(),",
          "194:       )),",
          "196:       #[cfg(fs_rename_file)]",
          "197:       Self::RenameFile {",
          "198:         old_path,",
          "199:         new_path,",
          "200:         options,",
          "201:       } => rename_file(&config, package_info, &window, old_path, new_path, options).map(Into::into),",
          "202:       #[cfg(not(fs_rename_file))]",
          "203:       Self::RenameFile { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "204:         \"fs > renameFile\".to_string(),",
          "205:       )),",
          "206:     }",
          "",
          "[Added Lines]",
          "104:   #[module_command_handler(fs_read_text_file, \"fs > readTextFile\")]",
          "105:   fn read_text_file<R: Runtime>(",
          "106:     context: InvokeContext<R>,",
          "107:     path: PathBuf,",
          "108:     options: Option<FileOperationOptions>,",
          "109:   ) -> crate::Result<String> {",
          "110:     file::read_string(resolve_path(",
          "111:       &context.config,",
          "112:       &context.package_info,",
          "113:       &context.window,",
          "114:       path,",
          "115:       options.and_then(|o| o.dir),",
          "116:     )?)",
          "117:     .map_err(crate::Error::FailedToExecuteApi)",
          "118:   }",
          "120:   #[module_command_handler(fs_read_binary_file, \"fs > readBinaryFile\")]",
          "121:   fn read_binary_file<R: Runtime>(",
          "122:     context: InvokeContext<R>,",
          "123:     path: PathBuf,",
          "124:     options: Option<FileOperationOptions>,",
          "125:   ) -> crate::Result<Vec<u8>> {",
          "126:     file::read_binary(resolve_path(",
          "127:       &context.config,",
          "128:       &context.package_info,",
          "129:       &context.window,",
          "130:       path,",
          "131:       options.and_then(|o| o.dir),",
          "132:     )?)",
          "133:     .map_err(crate::Error::FailedToExecuteApi)",
          "134:   }",
          "136:   #[module_command_handler(fs_write_file, \"fs > writeFile\")]",
          "137:   fn write_file<R: Runtime>(",
          "138:     context: InvokeContext<R>,",
          "139:     path: PathBuf,",
          "140:     contents: String,",
          "141:     options: Option<FileOperationOptions>,",
          "142:   ) -> crate::Result<()> {",
          "143:     File::create(resolve_path(",
          "144:       &context.config,",
          "145:       &context.package_info,",
          "146:       &context.window,",
          "147:       path,",
          "148:       options.and_then(|o| o.dir),",
          "149:     )?)",
          "150:     .map_err(crate::Error::Io)",
          "151:     .and_then(|mut f| f.write_all(contents.as_bytes()).map_err(|err| err.into()))?;",
          "152:     Ok(())",
          "153:   }",
          "155:   #[module_command_handler(fs_write_binary_file, \"fs > writeBinaryFile\")]",
          "156:   fn write_binary_file<R: Runtime>(",
          "157:     context: InvokeContext<R>,",
          "158:     path: PathBuf,",
          "159:     contents: String,",
          "160:     options: Option<FileOperationOptions>,",
          "161:   ) -> crate::Result<()> {",
          "162:     base64::decode(contents)",
          "163:       .map_err(crate::Error::Base64Decode)",
          "164:       .and_then(|c| {",
          "165:         File::create(resolve_path(",
          "166:           &context.config,",
          "167:           &context.package_info,",
          "168:           &context.window,",
          "169:           path,",
          "170:           options.and_then(|o| o.dir),",
          "171:         )?)",
          "172:         .map_err(Into::into)",
          "173:         .and_then(|mut f| f.write_all(&c).map_err(|err| err.into()))",
          "174:       })?;",
          "175:     Ok(())",
          "176:   }",
          "178:   #[module_command_handler(fs_read_dir, \"fs > readDir\")]",
          "179:   fn read_dir<R: Runtime>(",
          "180:     context: InvokeContext<R>,",
          "181:     path: PathBuf,",
          "182:     options: Option<DirOperationOptions>,",
          "183:   ) -> crate::Result<Vec<dir::DiskEntry>> {",
          "184:     let (recursive, dir) = if let Some(options_value) = options {",
          "185:       (options_value.recursive, options_value.dir)",
          "186:     } else {",
          "187:       (false, None)",
          "188:     };",
          "189:     dir::read_dir(",
          "190:       resolve_path(",
          "191:         &context.config,",
          "192:         &context.package_info,",
          "193:         &context.window,",
          "195:         dir,",
          "196:       )?,",
          "197:       recursive,",
          "198:     )",
          "199:     .map_err(crate::Error::FailedToExecuteApi)",
          "200:   }",
          "202:   #[module_command_handler(fs_copy_file, \"fs > copyFile\")]",
          "203:   fn copy_file<R: Runtime>(",
          "204:     context: InvokeContext<R>,",
          "205:     source: PathBuf,",
          "206:     destination: PathBuf,",
          "207:     options: Option<FileOperationOptions>,",
          "208:   ) -> crate::Result<()> {",
          "209:     let (src, dest) = match options.and_then(|o| o.dir) {",
          "210:       Some(dir) => (",
          "211:         resolve_path(",
          "212:           &context.config,",
          "213:           &context.package_info,",
          "214:           &context.window,",
          "215:           source,",
          "216:           Some(dir.clone()),",
          "217:         )?,",
          "218:         resolve_path(",
          "219:           &context.config,",
          "220:           &context.package_info,",
          "221:           &context.window,",
          "222:           destination,",
          "223:           Some(dir),",
          "224:         )?,",
          "225:       ),",
          "226:       None => (source, destination),",
          "227:     };",
          "228:     fs::copy(src, dest)?;",
          "229:     Ok(())",
          "230:   }",
          "232:   #[module_command_handler(fs_create_dir, \"fs > createDir\")]",
          "233:   fn create_dir<R: Runtime>(",
          "234:     context: InvokeContext<R>,",
          "235:     path: PathBuf,",
          "236:     options: Option<DirOperationOptions>,",
          "237:   ) -> crate::Result<()> {",
          "238:     let (recursive, dir) = if let Some(options_value) = options {",
          "239:       (options_value.recursive, options_value.dir)",
          "240:     } else {",
          "241:       (false, None)",
          "242:     };",
          "243:     let resolved_path = resolve_path(",
          "244:       &context.config,",
          "245:       &context.package_info,",
          "246:       &context.window,",
          "247:       path,",
          "248:       dir,",
          "249:     )?;",
          "250:     if recursive {",
          "251:       fs::create_dir_all(resolved_path)?;",
          "252:     } else {",
          "253:       fs::create_dir(resolved_path)?;",
          "254:     }",
          "256:     Ok(())",
          "257:   }",
          "259:   #[module_command_handler(fs_remove_dir, \"fs > removeDir\")]",
          "260:   fn remove_dir<R: Runtime>(",
          "261:     context: InvokeContext<R>,",
          "262:     path: PathBuf,",
          "263:     options: Option<DirOperationOptions>,",
          "264:   ) -> crate::Result<()> {",
          "265:     let (recursive, dir) = if let Some(options_value) = options {",
          "266:       (options_value.recursive, options_value.dir)",
          "267:     } else {",
          "268:       (false, None)",
          "269:     };",
          "270:     let resolved_path = resolve_path(",
          "271:       &context.config,",
          "272:       &context.package_info,",
          "273:       &context.window,",
          "274:       path,",
          "275:       dir,",
          "276:     )?;",
          "277:     if recursive {",
          "278:       fs::remove_dir_all(resolved_path)?;",
          "279:     } else {",
          "280:       fs::remove_dir(resolved_path)?;",
          "281:     }",
          "283:     Ok(())",
          "284:   }",
          "286:   #[module_command_handler(fs_remove_file, \"fs > removeFile\")]",
          "287:   fn remove_file<R: Runtime>(",
          "288:     context: InvokeContext<R>,",
          "289:     path: PathBuf,",
          "290:     options: Option<FileOperationOptions>,",
          "291:   ) -> crate::Result<()> {",
          "292:     let resolved_path = resolve_path(",
          "293:       &context.config,",
          "294:       &context.package_info,",
          "295:       &context.window,",
          "296:       path,",
          "297:       options.and_then(|o| o.dir),",
          "298:     )?;",
          "299:     fs::remove_file(resolved_path)?;",
          "300:     Ok(())",
          "301:   }",
          "303:   #[module_command_handler(fs_rename_file, \"fs > renameFile\")]",
          "304:   fn rename_file<R: Runtime>(",
          "305:     context: InvokeContext<R>,",
          "306:     old_path: PathBuf,",
          "307:     new_path: PathBuf,",
          "308:     options: Option<FileOperationOptions>,",
          "309:   ) -> crate::Result<()> {",
          "310:     let (old, new) = match options.and_then(|o| o.dir) {",
          "311:       Some(dir) => (",
          "312:         resolve_path(",
          "313:           &context.config,",
          "314:           &context.package_info,",
          "315:           &context.window,",
          "316:           old_path,",
          "317:           Some(dir.clone()),",
          "318:         )?,",
          "319:         resolve_path(",
          "320:           &context.config,",
          "321:           &context.package_info,",
          "322:           &context.window,",
          "323:           new_path,",
          "324:           Some(dir),",
          "325:         )?,",
          "326:       ),",
          "327:       None => (old_path, new_path),",
          "328:     };",
          "329:     fs::rename(old, new).map_err(crate::Error::Io)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "227:     Err(e) => Err(e.into()),",
          "228:   }",
          "229: }",
          "",
          "[Removed Lines]",
          "232: #[cfg(fs_read_dir)]",
          "233: pub fn read_dir<R: Runtime>(",
          "234:   config: &Config,",
          "235:   package_info: &PackageInfo,",
          "236:   window: &Window<R>,",
          "237:   path: PathBuf,",
          "238:   options: Option<DirOperationOptions>,",
          "239: ) -> crate::Result<Vec<dir::DiskEntry>> {",
          "240:   let (recursive, dir) = if let Some(options_value) = options {",
          "241:     (options_value.recursive, options_value.dir)",
          "242:   } else {",
          "243:     (false, None)",
          "244:   };",
          "245:   dir::read_dir(",
          "246:     resolve_path(config, package_info, window, path, dir)?,",
          "247:     recursive,",
          "248:   )",
          "249:   .map_err(crate::Error::FailedToExecuteApi)",
          "250: }",
          "253: #[cfg(fs_copy_file)]",
          "254: pub fn copy_file<R: Runtime>(",
          "255:   config: &Config,",
          "256:   package_info: &PackageInfo,",
          "257:   window: &Window<R>,",
          "258:   source: PathBuf,",
          "259:   destination: PathBuf,",
          "260:   options: Option<FileOperationOptions>,",
          "261: ) -> crate::Result<()> {",
          "262:   let (src, dest) = match options.and_then(|o| o.dir) {",
          "263:     Some(dir) => (",
          "264:       resolve_path(config, package_info, window, source, Some(dir.clone()))?,",
          "265:       resolve_path(config, package_info, window, destination, Some(dir))?,",
          "266:     ),",
          "267:     None => (source, destination),",
          "268:   };",
          "269:   fs::copy(src, dest)?;",
          "270:   Ok(())",
          "271: }",
          "274: #[cfg(fs_create_dir)]",
          "275: pub fn create_dir<R: Runtime>(",
          "276:   config: &Config,",
          "277:   package_info: &PackageInfo,",
          "278:   window: &Window<R>,",
          "279:   path: PathBuf,",
          "280:   options: Option<DirOperationOptions>,",
          "281: ) -> crate::Result<()> {",
          "282:   let (recursive, dir) = if let Some(options_value) = options {",
          "283:     (options_value.recursive, options_value.dir)",
          "284:   } else {",
          "285:     (false, None)",
          "286:   };",
          "287:   let resolved_path = resolve_path(config, package_info, window, path, dir)?;",
          "288:   if recursive {",
          "289:     fs::create_dir_all(resolved_path)?;",
          "290:   } else {",
          "291:     fs::create_dir(resolved_path)?;",
          "292:   }",
          "294:   Ok(())",
          "295: }",
          "298: #[cfg(fs_remove_dir)]",
          "299: pub fn remove_dir<R: Runtime>(",
          "300:   config: &Config,",
          "301:   package_info: &PackageInfo,",
          "302:   window: &Window<R>,",
          "303:   path: PathBuf,",
          "304:   options: Option<DirOperationOptions>,",
          "305: ) -> crate::Result<()> {",
          "306:   let (recursive, dir) = if let Some(options_value) = options {",
          "307:     (options_value.recursive, options_value.dir)",
          "308:   } else {",
          "309:     (false, None)",
          "310:   };",
          "311:   let resolved_path = resolve_path(config, package_info, window, path, dir)?;",
          "312:   if recursive {",
          "313:     fs::remove_dir_all(resolved_path)?;",
          "314:   } else {",
          "315:     fs::remove_dir(resolved_path)?;",
          "316:   }",
          "318:   Ok(())",
          "319: }",
          "322: #[cfg(fs_remove_file)]",
          "323: pub fn remove_file<R: Runtime>(",
          "324:   config: &Config,",
          "325:   package_info: &PackageInfo,",
          "326:   window: &Window<R>,",
          "327:   path: PathBuf,",
          "328:   options: Option<FileOperationOptions>,",
          "329: ) -> crate::Result<()> {",
          "330:   let resolved_path = resolve_path(",
          "331:     config,",
          "332:     package_info,",
          "333:     window,",
          "334:     path,",
          "335:     options.and_then(|o| o.dir),",
          "336:   )?;",
          "337:   fs::remove_file(resolved_path)?;",
          "338:   Ok(())",
          "339: }",
          "342: #[cfg(fs_rename_file)]",
          "343: pub fn rename_file<R: Runtime>(",
          "344:   config: &Config,",
          "345:   package_info: &PackageInfo,",
          "346:   window: &Window<R>,",
          "347:   old_path: PathBuf,",
          "348:   new_path: PathBuf,",
          "349:   options: Option<FileOperationOptions>,",
          "350: ) -> crate::Result<()> {",
          "351:   let (old, new) = match options.and_then(|o| o.dir) {",
          "352:     Some(dir) => (",
          "353:       resolve_path(config, package_info, window, old_path, Some(dir.clone()))?,",
          "354:       resolve_path(config, package_info, window, new_path, Some(dir))?,",
          "355:     ),",
          "356:     None => (old_path, new_path),",
          "357:   };",
          "358:   fs::rename(old, new).map_err(crate::Error::Io)",
          "359: }",
          "362: #[cfg(fs_write_file)]",
          "363: pub fn write_file<R: Runtime>(",
          "364:   config: &Config,",
          "365:   package_info: &PackageInfo,",
          "366:   window: &Window<R>,",
          "367:   path: PathBuf,",
          "368:   contents: String,",
          "369:   options: Option<FileOperationOptions>,",
          "370: ) -> crate::Result<()> {",
          "371:   File::create(resolve_path(",
          "372:     config,",
          "373:     package_info,",
          "374:     window,",
          "375:     path,",
          "376:     options.and_then(|o| o.dir),",
          "377:   )?)",
          "378:   .map_err(crate::Error::Io)",
          "379:   .and_then(|mut f| f.write_all(contents.as_bytes()).map_err(|err| err.into()))?;",
          "380:   Ok(())",
          "381: }",
          "384: #[cfg(fs_write_binary_file)]",
          "385: pub fn write_binary_file<R: Runtime>(",
          "386:   config: &Config,",
          "387:   package_info: &PackageInfo,",
          "388:   window: &Window<R>,",
          "389:   path: PathBuf,",
          "390:   contents: String,",
          "391:   options: Option<FileOperationOptions>,",
          "392: ) -> crate::Result<()> {",
          "393:   base64::decode(contents)",
          "394:     .map_err(crate::Error::Base64Decode)",
          "395:     .and_then(|c| {",
          "396:       File::create(resolve_path(",
          "397:         config,",
          "398:         package_info,",
          "399:         window,",
          "400:         path,",
          "401:         options.and_then(|o| o.dir),",
          "402:       )?)",
          "403:       .map_err(Into::into)",
          "404:       .and_then(|mut f| f.write_all(&c).map_err(|err| err.into()))",
          "405:     })?;",
          "406:   Ok(())",
          "407: }",
          "410: #[cfg(fs_read_text_file)]",
          "411: pub fn read_text_file<R: Runtime>(",
          "412:   config: &Config,",
          "413:   package_info: &PackageInfo,",
          "414:   window: &Window<R>,",
          "415:   path: PathBuf,",
          "416:   options: Option<FileOperationOptions>,",
          "417: ) -> crate::Result<String> {",
          "418:   file::read_string(resolve_path(",
          "419:     config,",
          "420:     package_info,",
          "421:     window,",
          "422:     path,",
          "423:     options.and_then(|o| o.dir),",
          "424:   )?)",
          "425:   .map_err(crate::Error::FailedToExecuteApi)",
          "426: }",
          "429: #[cfg(fs_read_binary_file)]",
          "430: pub fn read_binary_file<R: Runtime>(",
          "431:   config: &Config,",
          "432:   package_info: &PackageInfo,",
          "433:   window: &Window<R>,",
          "434:   path: PathBuf,",
          "435:   options: Option<FileOperationOptions>,",
          "436: ) -> crate::Result<Vec<u8>> {",
          "437:   file::read_binary(resolve_path(",
          "438:     config,",
          "439:     package_info,",
          "440:     window,",
          "441:     path,",
          "442:     options.and_then(|o| o.dir),",
          "443:   )?)",
          "444:   .map_err(crate::Error::FailedToExecuteApi)",
          "445: }",
          "448: #[cfg(test)]",
          "449: mod test {",
          "473:   #[cfg(not(any(target_os = \"linux\", target_os = \"macos\")))]",
          "475:   fn test_write_to_file() -> crate::Result<()> {",
          "477:     use std::fs::{read_to_string, write};",
          "480:     let mut webview = create_test_webview()?;",
          "483:     let contents = String::from(r#\"Write to the Test file\"#);",
          "484:     let path = String::from(\"test/fixture/test.txt\".to_string()));",
          "487:     write(&path, \"\")?;",
          "490:     write_file(",
          "491:       &webview_manager,",
          "492:       path.clone(),",
          "493:       contents.clone(),",
          "494:       String::from(\"\"),",
          "495:       String::from(\"\"),",
          "496:     );",
          "499:     std::thread::sleep(std::time::Duration::from_millis(200));",
          "502:     let data = read_to_string(path)?;",
          "505:     assert_eq!(data, contents);",
          "507:     Ok(())",
          "509: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/global_shortcut.rs||core/tauri/src/endpoints/global_shortcut.rs": [
          "File: core/tauri/src/endpoints/global_shortcut.rs -> core/tauri/src/endpoints/global_shortcut.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: use serde::Deserialize;",
          "9: #[cfg(global_shortcut_all)]",
          "10: use crate::runtime::GlobalShortcutManager;",
          "14: #[serde(tag = \"cmd\", rename_all = \"camelCase\")]",
          "15: pub enum Cmd {",
          "",
          "[Removed Lines]",
          "5: use super::InvokeResponse;",
          "6: use crate::{Runtime, Window};",
          "13: #[derive(Deserialize)]",
          "",
          "[Added Lines]",
          "5: use super::InvokeContext;",
          "6: use crate::Runtime;",
          "8: use tauri_macros::{module_command_handler, CommandModule};",
          "14: #[derive(Deserialize, CommandModule)]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:   IsRegistered { shortcut: String },",
          "29: }",
          "31: #[cfg(global_shortcut_all)]",
          "32: fn register_shortcut<R: Runtime>(",
          "34:   manager: &mut R::GlobalShortcutManager,",
          "35:   shortcut: String,",
          "36:   handler: String,",
          "",
          "[Removed Lines]",
          "33:   window: Window<R>,",
          "",
          "[Added Lines]",
          "32: impl Cmd {",
          "33:   #[module_command_handler(global_shortcut_all, \"globalShortcut > all\")]",
          "34:   fn register<R: Runtime>(",
          "35:     context: InvokeContext<R>,",
          "36:     shortcut: String,",
          "37:     handler: String,",
          "38:   ) -> crate::Result<()> {",
          "39:     let mut manager = context.window.app_handle.global_shortcut_manager();",
          "40:     register_shortcut(context.window, &mut manager, shortcut, handler)?;",
          "41:     Ok(())",
          "42:   }",
          "44:   #[module_command_handler(global_shortcut_all, \"globalShortcut > all\")]",
          "45:   fn register_all<R: Runtime>(",
          "46:     context: InvokeContext<R>,",
          "47:     shortcuts: Vec<String>,",
          "48:     handler: String,",
          "49:   ) -> crate::Result<()> {",
          "50:     let mut manager = context.window.app_handle.global_shortcut_manager();",
          "51:     for shortcut in shortcuts {",
          "52:       register_shortcut(",
          "53:         context.window.clone(),",
          "54:         &mut manager,",
          "55:         shortcut,",
          "56:         handler.clone(),",
          "57:       )?;",
          "58:     }",
          "59:     Ok(())",
          "60:   }",
          "62:   #[module_command_handler(global_shortcut_all, \"globalShortcut > all\")]",
          "63:   fn unregister<R: Runtime>(context: InvokeContext<R>, shortcut: String) -> crate::Result<()> {",
          "64:     context",
          "65:       .window",
          "66:       .app_handle",
          "67:       .global_shortcut_manager()",
          "68:       .unregister(&shortcut)?;",
          "69:     Ok(())",
          "70:   }",
          "72:   #[module_command_handler(global_shortcut_all, \"globalShortcut > all\")]",
          "73:   fn unregister_all<R: Runtime>(context: InvokeContext<R>) -> crate::Result<()> {",
          "74:     context",
          "75:       .window",
          "76:       .app_handle",
          "77:       .global_shortcut_manager()",
          "78:       .unregister_all()?;",
          "79:     Ok(())",
          "80:   }",
          "82:   #[module_command_handler(global_shortcut_all, \"globalShortcut > all\")]",
          "83:   fn is_registered<R: Runtime>(context: InvokeContext<R>, shortcut: String) -> crate::Result<bool> {",
          "84:     Ok(",
          "85:       context",
          "86:         .window",
          "87:         .app_handle",
          "88:         .global_shortcut_manager()",
          "89:         .is_registered(&shortcut)?,",
          "90:     )",
          "91:   }",
          "92: }",
          "96:   window: crate::Window<R>,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43:   })?;",
          "44:   Ok(())",
          "45: }",
          "",
          "[Removed Lines]",
          "47: #[cfg(not(global_shortcut_all))]",
          "48: impl Cmd {",
          "49:   pub fn run<R: Runtime>(self, _window: Window<R>) -> crate::Result<InvokeResponse> {",
          "50:     Err(crate::Error::ApiNotAllowlisted(",
          "51:       \"globalShortcut > all\".to_string(),",
          "52:     ))",
          "53:   }",
          "54: }",
          "56: #[cfg(global_shortcut_all)]",
          "57: impl Cmd {",
          "58:   pub fn run<R: Runtime>(self, window: Window<R>) -> crate::Result<InvokeResponse> {",
          "59:     match self {",
          "60:       Self::Register { shortcut, handler } => {",
          "61:         let mut manager = window.app_handle.global_shortcut_manager();",
          "62:         register_shortcut(window, &mut manager, shortcut, handler)?;",
          "63:         Ok(().into())",
          "64:       }",
          "65:       Self::RegisterAll { shortcuts, handler } => {",
          "66:         let mut manager = window.app_handle.global_shortcut_manager();",
          "67:         for shortcut in shortcuts {",
          "68:           register_shortcut(window.clone(), &mut manager, shortcut, handler.clone())?;",
          "69:         }",
          "70:         Ok(().into())",
          "71:       }",
          "72:       Self::Unregister { shortcut } => {",
          "73:         window",
          "74:           .app_handle",
          "75:           .global_shortcut_manager()",
          "76:           .unregister(&shortcut)?;",
          "77:         Ok(().into())",
          "78:       }",
          "79:       Self::UnregisterAll => {",
          "80:         window",
          "81:           .app_handle",
          "82:           .global_shortcut_manager()",
          "83:           .unregister_all()?;",
          "84:         Ok(().into())",
          "85:       }",
          "86:       Self::IsRegistered { shortcut } => Ok(",
          "87:         window",
          "88:           .app_handle",
          "89:           .global_shortcut_manager()",
          "90:           .is_registered(&shortcut)?",
          "91:           .into(),",
          "92:       ),",
          "93:     }",
          "94:   }",
          "95: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/http.rs||core/tauri/src/endpoints/http.rs": [
          "File: core/tauri/src/endpoints/http.rs -> core/tauri/src/endpoints/http.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: use serde::Deserialize;",
          "10: #[cfg(http_request)]",
          "11: use std::{",
          "",
          "[Removed Lines]",
          "5: use super::InvokeResponse;",
          "7: use crate::api::http::{ClientBuilder, HttpRequestBuilder};",
          "",
          "[Added Lines]",
          "5: use super::InvokeContext;",
          "6: use crate::api::http::{ClientBuilder, HttpRequestBuilder, ResponseData};",
          "7: use crate::Runtime;",
          "9: use tauri_macros::{module_command_handler, CommandModule};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: }",
          "29: #[serde(tag = \"cmd\", rename_all = \"camelCase\")]",
          "30: pub enum Cmd {",
          "",
          "[Removed Lines]",
          "28: #[derive(Deserialize)]",
          "",
          "[Added Lines]",
          "29: #[derive(Deserialize, CommandModule)]",
          "30: #[cmd(async)]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40: }",
          "42: impl Cmd {",
          "78:   }",
          "95: }",
          "",
          "[Removed Lines]",
          "43:   pub async fn run(self) -> crate::Result<InvokeResponse> {",
          "44:     match self {",
          "45:       #[cfg(http_request)]",
          "46:       Self::CreateClient { options } => {",
          "47:         let client = options.unwrap_or_default().build()?;",
          "48:         let mut store = clients().lock().unwrap();",
          "49:         let id = rand::random::<ClientId>();",
          "50:         store.insert(id, client);",
          "51:         Ok(InvokeResponse::from(id))",
          "52:       }",
          "53:       #[cfg(not(http_request))]",
          "54:       Self::CreateClient { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "55:         \"http > request\".to_string(),",
          "56:       )),",
          "58:       #[cfg(http_request)]",
          "59:       Self::DropClient { client } => {",
          "60:         let mut store = clients().lock().unwrap();",
          "61:         store.remove(&client);",
          "62:         Ok(().into())",
          "63:       }",
          "64:       #[cfg(not(http_request))]",
          "65:       Self::DropClient { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "66:         \"http > request\".to_string(),",
          "67:       )),",
          "69:       #[cfg(http_request)]",
          "70:       Self::HttpRequest { client, options } => {",
          "71:         return make_request(client, *options).await.map(Into::into);",
          "72:       }",
          "73:       #[cfg(not(http_request))]",
          "74:       Self::HttpRequest { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "75:         \"http > request\".to_string(),",
          "76:       )),",
          "77:     }",
          "79: }",
          "82: #[cfg(http_request)]",
          "83: pub async fn make_request(",
          "84:   client_id: ClientId,",
          "85:   options: HttpRequestBuilder,",
          "86: ) -> crate::Result<crate::api::http::ResponseData> {",
          "87:   let client = clients()",
          "88:     .lock()",
          "89:     .unwrap()",
          "90:     .get(&client_id)",
          "91:     .ok_or(crate::Error::HttpClientNotInitialized)?",
          "92:     .clone();",
          "93:   let response = client.send(options).await?;",
          "94:   Ok(response.read().await?)",
          "",
          "[Added Lines]",
          "45:   #[module_command_handler(http_request, \"http > request\")]",
          "46:   async fn create_client<R: Runtime>(",
          "47:     _context: InvokeContext<R>,",
          "48:     options: Option<ClientBuilder>,",
          "49:   ) -> crate::Result<ClientId> {",
          "50:     let client = options.unwrap_or_default().build()?;",
          "51:     let mut store = clients().lock().unwrap();",
          "52:     let id = rand::random::<ClientId>();",
          "53:     store.insert(id, client);",
          "54:     Ok(id)",
          "55:   }",
          "57:   #[module_command_handler(http_request, \"http > request\")]",
          "58:   async fn drop_client<R: Runtime>(",
          "59:     _context: InvokeContext<R>,",
          "60:     client: ClientId,",
          "61:   ) -> crate::Result<()> {",
          "62:     let mut store = clients().lock().unwrap();",
          "63:     store.remove(&client);",
          "64:     Ok(())",
          "67:   #[module_command_handler(http_request, \"http > request\")]",
          "68:   async fn http_request<R: Runtime>(",
          "69:     _context: InvokeContext<R>,",
          "70:     client_id: ClientId,",
          "71:     options: Box<HttpRequestBuilder>,",
          "72:   ) -> crate::Result<ResponseData> {",
          "73:     let client = clients()",
          "74:       .lock()",
          "75:       .unwrap()",
          "76:       .get(&client_id)",
          "77:       .ok_or(crate::Error::HttpClientNotInitialized)?",
          "78:       .clone();",
          "79:     let response = client.send(*options).await?;",
          "80:     Ok(response.read().await?)",
          "81:   }",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/notification.rs||core/tauri/src/endpoints/notification.rs": [
          "File: core/tauri/src/endpoints/notification.rs -> core/tauri/src/endpoints/notification.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: use serde::Deserialize;",
          "8: #[cfg(notification_all)]",
          "9: use crate::{api::notification::Notification, Env, Manager};",
          "15: #[cfg(notification_all)]",
          "",
          "[Removed Lines]",
          "5: use super::InvokeResponse;",
          "10: use crate::{Config, PackageInfo, Runtime, Window};",
          "12: use std::sync::Arc;",
          "",
          "[Added Lines]",
          "5: use super::InvokeContext;",
          "6: use crate::Runtime;",
          "8: use tauri_macros::{module_command_handler, CommandModule};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: }",
          "33: #[serde(tag = \"cmd\", rename_all = \"camelCase\")]",
          "34: pub enum Cmd {",
          "",
          "[Removed Lines]",
          "32: #[derive(Deserialize)]",
          "",
          "[Added Lines]",
          "31: #[derive(Deserialize, CommandModule)]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41: }",
          "43: impl Cmd {",
          "68:     }",
          "69:   }",
          "112:     } else {",
          "115:   }",
          "140:   }",
          "141: }",
          "",
          "[Removed Lines]",
          "44:   #[allow(unused_variables)]",
          "45:   pub fn run<R: Runtime>(",
          "46:     self,",
          "47:     window: Window<R>,",
          "48:     config: Arc<Config>,",
          "49:     package_info: &PackageInfo,",
          "50:   ) -> crate::Result<InvokeResponse> {",
          "51:     match self {",
          "52:       #[cfg(notification_all)]",
          "53:       Self::Notification { options } => send(options, &config).map(Into::into),",
          "54:       #[cfg(not(notification_all))]",
          "55:       Self::Notification { .. } => Err(crate::Error::ApiNotAllowlisted(\"notification\".to_string())),",
          "56:       Self::IsNotificationPermissionGranted => {",
          "57:         #[cfg(notification_all)]",
          "58:         return is_permission_granted(&window, &config, package_info).map(Into::into);",
          "59:         #[cfg(not(notification_all))]",
          "60:         Ok(false.into())",
          "61:       }",
          "62:       Self::RequestNotificationPermission => {",
          "63:         #[cfg(notification_all)]",
          "64:         return request_permission(&window, &config, package_info).map(Into::into);",
          "65:         #[cfg(not(notification_all))]",
          "66:         Ok(PERMISSION_DENIED.into())",
          "67:       }",
          "70: }",
          "72: #[cfg(notification_all)]",
          "73: pub fn send(options: NotificationOptions, config: &Config) -> crate::Result<InvokeResponse> {",
          "74:   let mut notification =",
          "75:     Notification::new(config.tauri.bundle.identifier.clone()).title(options.title);",
          "76:   if let Some(body) = options.body {",
          "77:     notification = notification.body(body);",
          "78:   }",
          "79:   if let Some(icon) = options.icon {",
          "80:     notification = notification.icon(icon);",
          "81:   }",
          "82:   notification.show()?;",
          "83:   Ok(().into())",
          "84: }",
          "86: #[cfg(notification_all)]",
          "87: pub fn is_permission_granted<R: Runtime>(",
          "88:   window: &Window<R>,",
          "89:   config: &Config,",
          "90:   package_info: &PackageInfo,",
          "91: ) -> crate::Result<InvokeResponse> {",
          "92:   let settings =",
          "93:     crate::settings::read_settings(config, package_info, window.state::<Env>().inner());",
          "94:   if let Some(allow_notification) = settings.allow_notification {",
          "95:     Ok(allow_notification.into())",
          "96:   } else {",
          "97:     Ok(().into())",
          "98:   }",
          "99: }",
          "101: #[cfg(notification_all)]",
          "102: pub fn request_permission<R: Runtime>(",
          "103:   window: &Window<R>,",
          "104:   config: &Config,",
          "105:   package_info: &PackageInfo,",
          "106: ) -> crate::Result<String> {",
          "107:   let mut settings =",
          "108:     crate::settings::read_settings(config, package_info, window.state::<Env>().inner());",
          "109:   if let Some(allow_notification) = settings.allow_notification {",
          "110:     return Ok(if allow_notification {",
          "111:       PERMISSION_GRANTED.to_string()",
          "113:       PERMISSION_DENIED.to_string()",
          "114:     });",
          "116:   let (tx, rx) = std::sync::mpsc::channel();",
          "117:   crate::api::dialog::ask(",
          "118:     Some(window),",
          "119:     \"Permissions\",",
          "120:     \"This app wants to show notifications. Do you allow?\",",
          "121:     move |answer| {",
          "122:       tx.send(answer).unwrap();",
          "123:     },",
          "124:   );",
          "126:   let answer = rx.recv().unwrap();",
          "128:   settings.allow_notification = Some(answer);",
          "129:   crate::settings::write_settings(",
          "130:     config,",
          "131:     package_info,",
          "132:     window.state::<Env>().inner(),",
          "133:     settings,",
          "134:   )?;",
          "136:   if answer {",
          "137:     Ok(PERMISSION_GRANTED.to_string())",
          "138:   } else {",
          "139:     Ok(PERMISSION_DENIED.to_string())",
          "",
          "[Added Lines]",
          "43:   #[module_command_handler(notification_all, \"notification > all\")]",
          "44:   fn notification<R: Runtime>(",
          "45:     context: InvokeContext<R>,",
          "46:     options: NotificationOptions,",
          "47:   ) -> crate::Result<()> {",
          "48:     let mut notification =",
          "49:       Notification::new(context.config.tauri.bundle.identifier.clone()).title(options.title);",
          "50:     if let Some(body) = options.body {",
          "51:       notification = notification.body(body);",
          "52:     }",
          "53:     if let Some(icon) = options.icon {",
          "54:       notification = notification.icon(icon);",
          "56:     notification.show()?;",
          "57:     Ok(())",
          "60:   #[cfg(notification_all)]",
          "61:   fn request_notification_permission<R: Runtime>(",
          "62:     context: InvokeContext<R>,",
          "63:   ) -> crate::Result<&'static str> {",
          "64:     let mut settings = crate::settings::read_settings(",
          "65:       &context.config,",
          "66:       &context.package_info,",
          "67:       context.window.state::<Env>().inner(),",
          "68:     );",
          "69:     if let Some(allow_notification) = settings.allow_notification {",
          "70:       return Ok(if allow_notification {",
          "71:         PERMISSION_GRANTED",
          "72:       } else {",
          "73:         PERMISSION_DENIED",
          "74:       });",
          "75:     }",
          "76:     let (tx, rx) = std::sync::mpsc::channel();",
          "77:     crate::api::dialog::ask(",
          "78:       Some(&context.window),",
          "79:       \"Permissions\",",
          "80:       \"This app wants to show notifications. Do you allow?\",",
          "81:       move |answer| {",
          "82:         tx.send(answer).unwrap();",
          "83:       },",
          "84:     );",
          "86:     let answer = rx.recv().unwrap();",
          "88:     settings.allow_notification = Some(answer);",
          "89:     crate::settings::write_settings(",
          "90:       &context.config,",
          "91:       &context.package_info,",
          "92:       context.window.state::<Env>().inner(),",
          "93:       settings,",
          "94:     )?;",
          "96:     if answer {",
          "97:       Ok(PERMISSION_GRANTED)",
          "99:       Ok(PERMISSION_DENIED)",
          "100:     }",
          "103:   #[cfg(not(notification_all))]",
          "104:   fn request_notification_permission<R: Runtime>(",
          "105:     _context: InvokeContext<R>,",
          "106:   ) -> crate::Result<&'static str> {",
          "107:     Ok(PERMISSION_DENIED)",
          "108:   }",
          "110:   #[cfg(notification_all)]",
          "111:   fn is_notification_permission_granted<R: Runtime>(",
          "112:     context: InvokeContext<R>,",
          "113:   ) -> crate::Result<Option<bool>> {",
          "114:     let settings = crate::settings::read_settings(",
          "115:       &context.config,",
          "116:       &context.package_info,",
          "117:       context.window.state::<Env>().inner(),",
          "118:     );",
          "119:     if let Some(allow_notification) = settings.allow_notification {",
          "120:       Ok(Some(allow_notification))",
          "121:     } else {",
          "122:       Ok(None)",
          "123:     }",
          "124:   }",
          "126:   #[cfg(not(notification_all))]",
          "127:   fn is_notification_permission_granted<R: Runtime>(",
          "128:     _context: InvokeContext<R>,",
          "129:   ) -> crate::Result<Option<bool>> {",
          "130:     Ok(Some(false))",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/operating_system.rs||core/tauri/src/endpoints/operating_system.rs": [
          "File: core/tauri/src/endpoints/operating_system.rs -> core/tauri/src/endpoints/operating_system.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: use serde::Deserialize;",
          "10: #[serde(tag = \"cmd\", rename_all = \"camelCase\")]",
          "11: pub enum Cmd {",
          "12:   Platform,",
          "13:   Version,",
          "15:   Arch,",
          "16:   Tempdir,",
          "17: }",
          "19: impl Cmd {",
          "32:   }",
          "33: }",
          "35: #[cfg(os_all)]",
          "37:   #[cfg(target_os = \"linux\")]",
          "39:   #[cfg(target_os = \"windows\")]",
          "41:   #[cfg(target_os = \"macos\")]",
          "43: }",
          "44: #[cfg(os_all)]",
          "46:   match std::env::consts::OS {",
          "47:     \"windows\" => \"win32\",",
          "48:     \"macos\" => \"darwin\",",
          "49:     _ => std::env::consts::OS,",
          "50:   }",
          "52: }",
          "",
          "[Removed Lines]",
          "5: use super::InvokeResponse;",
          "9: #[derive(Deserialize)]",
          "14:   Type,",
          "20:   #[allow(unused_variables)]",
          "21:   pub fn run(self) -> crate::Result<InvokeResponse> {",
          "22:     #[cfg(os_all)]",
          "23:     return match self {",
          "24:       Self::Platform => Ok(os_platform().into()),",
          "25:       Self::Version => Ok(os_info::get().version().to_string().into()),",
          "26:       Self::Type => Ok(os_type().into()),",
          "27:       Self::Arch => Ok(std::env::consts::ARCH.into()),",
          "28:       Self::Tempdir => Ok(std::env::temp_dir().into()),",
          "29:     };",
          "30:     #[cfg(not(os_all))]",
          "31:     Err(crate::Error::ApiNotAllowlisted(\"os\".into()))",
          "36: fn os_type() -> String {",
          "38:   return \"Linux\".into();",
          "40:   return \"Windows_NT\".into();",
          "42:   return \"Darwin\".into();",
          "45: fn os_platform() -> String {",
          "51:   .into()",
          "",
          "[Added Lines]",
          "5: use super::InvokeContext;",
          "6: use crate::Runtime;",
          "8: use std::path::PathBuf;",
          "9: use tauri_macros::{module_command_handler, CommandModule};",
          "12: #[derive(Deserialize, CommandModule)]",
          "17:   OsType,",
          "23:   #[module_command_handler(os_all, \"os > all\")]",
          "24:   fn platform<R: Runtime>(_context: InvokeContext<R>) -> crate::Result<&'static str> {",
          "25:     Ok(os_platform())",
          "26:   }",
          "28:   #[module_command_handler(os_all, \"os > all\")]",
          "29:   fn version<R: Runtime>(_context: InvokeContext<R>) -> crate::Result<String> {",
          "30:     Ok(os_info::get().version().to_string())",
          "31:   }",
          "33:   #[module_command_handler(os_all, \"os > all\")]",
          "34:   fn os_type<R: Runtime>(_context: InvokeContext<R>) -> crate::Result<&'static str> {",
          "35:     Ok(os_type())",
          "36:   }",
          "38:   #[module_command_handler(os_all, \"os > all\")]",
          "39:   fn arch<R: Runtime>(_context: InvokeContext<R>) -> crate::Result<&'static str> {",
          "40:     Ok(std::env::consts::ARCH)",
          "41:   }",
          "43:   #[module_command_handler(os_all, \"os > all\")]",
          "44:   fn tempdir<R: Runtime>(_context: InvokeContext<R>) -> crate::Result<PathBuf> {",
          "45:     Ok(std::env::temp_dir())",
          "50: fn os_type() -> &'static str {",
          "52:   return \"Linux\";",
          "54:   return \"Windows_NT\";",
          "56:   return \"Darwin\";",
          "59: fn os_platform() -> &'static str {",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/path.rs||core/tauri/src/endpoints/path.rs": [
          "File: core/tauri/src/endpoints/path.rs -> core/tauri/src/endpoints/path.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #[cfg(path_all)]",
          "8: use crate::{Env, Manager};",
          "10: #[cfg(path_all)]",
          "15: #[serde(tag = \"cmd\", rename_all = \"camelCase\")]",
          "16: pub enum Cmd {",
          "17:   ResolvePath {",
          "",
          "[Removed Lines]",
          "5: use super::InvokeResponse;",
          "6: use crate::{api::path::BaseDirectory, Config, PackageInfo, Runtime, Window};",
          "9: use serde::Deserialize;",
          "11: use std::path::{Component, Path, PathBuf, MAIN_SEPARATOR};",
          "12: use std::sync::Arc;",
          "14: #[derive(Deserialize)]",
          "",
          "[Added Lines]",
          "5: use crate::{api::path::BaseDirectory, Runtime};",
          "8: use std::path::PathBuf;",
          "10: use std::path::{Component, Path, MAIN_SEPARATOR};",
          "12: use super::InvokeContext;",
          "13: use serde::Deserialize;",
          "14: use tauri_macros::{module_command_handler, CommandModule};",
          "17: #[derive(Deserialize, CommandModule)]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: }",
          "45: impl Cmd {",
          "73:   }",
          "98:   }",
          "113:           p.push(MAIN_SEPARATOR);",
          "114:         }",
          "157:   }",
          "170:   }",
          "187:   }",
          "188: }",
          "192: #[cfg(path_all)]",
          "193: fn normalize_path(path: &Path) -> PathBuf {",
          "",
          "[Removed Lines]",
          "46:   #[allow(unused_variables)]",
          "47:   pub fn run<R: Runtime>(",
          "48:     self,",
          "49:     window: Window<R>,",
          "50:     config: Arc<Config>,",
          "51:     package_info: &PackageInfo,",
          "52:   ) -> crate::Result<InvokeResponse> {",
          "53:     #[cfg(path_all)]",
          "54:     return match self {",
          "55:       Cmd::ResolvePath { directory, path } => resolve_path_handler(",
          "56:         &config,",
          "57:         package_info,",
          "58:         window.state::<Env>().inner(),",
          "59:         path,",
          "60:         directory,",
          "61:       )",
          "62:       .map(Into::into),",
          "63:       Cmd::Resolve { paths } => resolve(paths).map(Into::into),",
          "64:       Cmd::Normalize { path } => normalize(path).map(Into::into),",
          "65:       Cmd::Join { paths } => join(paths).map(Into::into),",
          "66:       Cmd::Dirname { path } => dirname(path).map(Into::into),",
          "67:       Cmd::Extname { path } => extname(path).map(Into::into),",
          "68:       Cmd::Basename { path, ext } => basename(path, ext).map(Into::into),",
          "69:       Cmd::IsAbsolute { path } => Ok(Path::new(&path).is_absolute()).map(Into::into),",
          "70:     };",
          "71:     #[cfg(not(path_all))]",
          "72:     Err(crate::Error::ApiNotAllowlisted(\"path\".into()))",
          "74: }",
          "76: #[cfg(path_all)]",
          "77: pub fn resolve_path_handler(",
          "78:   config: &Config,",
          "79:   package_info: &PackageInfo,",
          "80:   env: &Env,",
          "81:   path: String,",
          "82:   directory: Option<BaseDirectory>,",
          "83: ) -> crate::Result<PathBuf> {",
          "84:   crate::api::path::resolve_path(config, package_info, env, path, directory).map_err(Into::into)",
          "85: }",
          "87: #[cfg(path_all)]",
          "88: fn resolve(paths: Vec<String>) -> crate::Result<String> {",
          "95:   let mut path = std::env::current_dir()?;",
          "96:   for p in paths {",
          "97:     path.push(p);",
          "99:   Ok(normalize_path(&path).to_string_lossy().to_string())",
          "100: }",
          "102: #[cfg(path_all)]",
          "103: fn join(mut paths: Vec<String>) -> crate::Result<String> {",
          "104:   let path = PathBuf::from(",
          "105:     paths",
          "106:       .iter_mut()",
          "107:       .map(|p| {",
          "112:         if !p.ends_with('/') && !p.ends_with('\\\\') {",
          "115:         p.to_string()",
          "116:       })",
          "117:       .collect::<String>(),",
          "118:   );",
          "120:   let p = normalize_path_no_absolute(&path)",
          "121:     .to_string_lossy()",
          "122:     .to_string();",
          "123:   Ok(if p.is_empty() { \".\".into() } else { p })",
          "124: }",
          "126: #[cfg(path_all)]",
          "127: fn normalize(path: String) -> crate::Result<String> {",
          "128:   let mut p = normalize_path_no_absolute(Path::new(&path))",
          "129:     .to_string_lossy()",
          "130:     .to_string();",
          "132:   Ok(",
          "135:     if p.is_empty() && path == \"..\" {",
          "136:       \"..\".into()",
          "137:     } else if p.is_empty() && path == \".\" {",
          "138:       \".\".into()",
          "139:     } else {",
          "141:       if (path.ends_with('/') || path.ends_with('\\\\')) && (!p.ends_with('/') || !p.ends_with('\\\\'))",
          "142:       {",
          "143:         p.push(MAIN_SEPARATOR);",
          "144:       }",
          "145:       p",
          "146:     },",
          "147:   )",
          "148: }",
          "150: #[cfg(path_all)]",
          "151: fn dirname(path: String) -> crate::Result<String> {",
          "152:   match Path::new(&path).parent() {",
          "153:     Some(p) => Ok(p.to_string_lossy().to_string()),",
          "154:     None => Err(crate::Error::FailedToExecuteApi(crate::api::Error::Path(",
          "155:       \"Couldn't get the parent directory\".into(),",
          "156:     ))),",
          "158: }",
          "160: #[cfg(path_all)]",
          "161: fn extname(path: String) -> crate::Result<String> {",
          "162:   match Path::new(&path)",
          "163:     .extension()",
          "164:     .and_then(std::ffi::OsStr::to_str)",
          "165:   {",
          "166:     Some(p) => Ok(p.to_string()),",
          "167:     None => Err(crate::Error::FailedToExecuteApi(crate::api::Error::Path(",
          "168:       \"Couldn't get the extension of the file\".into(),",
          "169:     ))),",
          "171: }",
          "173: #[cfg(path_all)]",
          "174: fn basename(path: String, ext: Option<String>) -> crate::Result<String> {",
          "175:   match Path::new(&path)",
          "176:     .file_name()",
          "177:     .and_then(std::ffi::OsStr::to_str)",
          "178:   {",
          "179:     Some(p) => Ok(if let Some(ext) = ext {",
          "180:       p.replace(ext.as_str(), \"\")",
          "181:     } else {",
          "182:       p.to_string()",
          "183:     }),",
          "184:     None => Err(crate::Error::FailedToExecuteApi(crate::api::Error::Path(",
          "185:       \"Couldn't get the basename\".into(),",
          "186:     ))),",
          "",
          "[Added Lines]",
          "49:   #[module_command_handler(path_all, \"path > all\")]",
          "50:   fn resolve_path<R: Runtime>(",
          "51:     context: InvokeContext<R>,",
          "52:     path: String,",
          "53:     directory: Option<BaseDirectory>,",
          "54:   ) -> crate::Result<PathBuf> {",
          "55:     crate::api::path::resolve_path(",
          "56:       &context.config,",
          "57:       &context.package_info,",
          "58:       context.window.state::<Env>().inner(),",
          "59:       path,",
          "60:       directory,",
          "61:     )",
          "62:     .map_err(Into::into)",
          "65:   #[module_command_handler(path_all, \"path > all\")]",
          "66:   fn resolve<R: Runtime>(_context: InvokeContext<R>, paths: Vec<String>) -> crate::Result<PathBuf> {",
          "73:     let mut path = std::env::current_dir()?;",
          "74:     for p in paths {",
          "75:       path.push(p);",
          "76:     }",
          "77:     Ok(normalize_path(&path))",
          "80:   #[module_command_handler(path_all, \"path > all\")]",
          "81:   fn normalize<R: Runtime>(_context: InvokeContext<R>, path: String) -> crate::Result<String> {",
          "82:     let mut p = normalize_path_no_absolute(Path::new(&path))",
          "83:       .to_string_lossy()",
          "84:       .to_string();",
          "85:     Ok(",
          "88:       if p.is_empty() && path == \"..\" {",
          "89:         \"..\".into()",
          "90:       } else if p.is_empty() && path == \".\" {",
          "91:         \".\".into()",
          "92:       } else {",
          "94:         if (path.ends_with('/') || path.ends_with('\\\\'))",
          "95:           && (!p.ends_with('/') || !p.ends_with('\\\\'))",
          "96:         {",
          "99:         p",
          "100:       },",
          "101:     )",
          "102:   }",
          "104:   #[module_command_handler(path_all, \"path > all\")]",
          "105:   fn join<R: Runtime>(_context: InvokeContext<R>, mut paths: Vec<String>) -> crate::Result<String> {",
          "106:     let path = PathBuf::from(",
          "107:       paths",
          "108:         .iter_mut()",
          "109:         .map(|p| {",
          "114:           if !p.ends_with('/') && !p.ends_with('\\\\') {",
          "115:             p.push(MAIN_SEPARATOR);",
          "116:           }",
          "117:           p.to_string()",
          "118:         })",
          "119:         .collect::<String>(),",
          "120:     );",
          "122:     let p = normalize_path_no_absolute(&path)",
          "123:       .to_string_lossy()",
          "124:       .to_string();",
          "125:     Ok(if p.is_empty() { \".\".into() } else { p })",
          "126:   }",
          "128:   #[module_command_handler(path_all, \"path > all\")]",
          "129:   fn dirname<R: Runtime>(_context: InvokeContext<R>, path: String) -> crate::Result<PathBuf> {",
          "130:     match Path::new(&path).parent() {",
          "131:       Some(p) => Ok(p.to_path_buf()),",
          "132:       None => Err(crate::Error::FailedToExecuteApi(crate::api::Error::Path(",
          "133:         \"Couldn't get the parent directory\".into(),",
          "134:       ))),",
          "135:     }",
          "136:   }",
          "138:   #[module_command_handler(path_all, \"path > all\")]",
          "139:   fn extname<R: Runtime>(_context: InvokeContext<R>, path: String) -> crate::Result<String> {",
          "140:     match Path::new(&path)",
          "141:       .extension()",
          "142:       .and_then(std::ffi::OsStr::to_str)",
          "143:     {",
          "144:       Some(p) => Ok(p.to_string()),",
          "145:       None => Err(crate::Error::FailedToExecuteApi(crate::api::Error::Path(",
          "146:         \"Couldn't get the extension of the file\".into(),",
          "147:       ))),",
          "148:     }",
          "151:   #[module_command_handler(path_all, \"path > all\")]",
          "152:   fn basename<R: Runtime>(",
          "153:     _context: InvokeContext<R>,",
          "154:     path: String,",
          "155:     ext: Option<String>,",
          "156:   ) -> crate::Result<String> {",
          "157:     match Path::new(&path)",
          "158:       .file_name()",
          "159:       .and_then(std::ffi::OsStr::to_str)",
          "160:     {",
          "161:       Some(p) => Ok(if let Some(ext) = ext {",
          "162:         p.replace(ext.as_str(), \"\")",
          "163:       } else {",
          "164:         p.to_string()",
          "165:       }),",
          "166:       None => Err(crate::Error::FailedToExecuteApi(crate::api::Error::Path(",
          "167:         \"Couldn't get the basename\".into(),",
          "168:       ))),",
          "169:     }",
          "172:   #[module_command_handler(path_all, \"path > all\")]",
          "173:   fn is_absolute<R: Runtime>(_context: InvokeContext<R>, path: String) -> crate::Result<bool> {",
          "174:     Ok(Path::new(&path).is_absolute())",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/process.rs||core/tauri/src/endpoints/process.rs": [
          "File: core/tauri/src/endpoints/process.rs -> core/tauri/src/endpoints/process.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #[cfg(process_relaunch)]",
          "7: use crate::Manager;",
          "9: use serde::Deserialize;",
          "13: #[serde(tag = \"cmd\", rename_all = \"camelCase\")]",
          "14: pub enum Cmd {",
          "",
          "[Removed Lines]",
          "5: use super::InvokeResponse;",
          "8: use crate::{Runtime, Window};",
          "12: #[derive(Deserialize)]",
          "",
          "[Added Lines]",
          "5: use super::InvokeContext;",
          "8: use crate::Runtime;",
          "10: use tauri_macros::{module_command_handler, CommandModule};",
          "13: #[derive(Deserialize, CommandModule)]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: }",
          "22: impl Cmd {",
          "48:   }",
          "49: }",
          "",
          "[Removed Lines]",
          "23:   #[allow(unused_variables)]",
          "24:   pub fn run<R: Runtime>(self, window: Window<R>) -> crate::Result<InvokeResponse> {",
          "25:     match self {",
          "26:       #[cfg(process_relaunch)]",
          "27:       Self::Relaunch => Ok({",
          "28:         crate::api::process::restart(&window.state());",
          "29:         ().into()",
          "30:       }),",
          "31:       #[cfg(not(process_relaunch))]",
          "32:       Self::Relaunch => Err(crate::Error::ApiNotAllowlisted(",
          "33:         \"process > relaunch\".to_string(),",
          "34:       )),",
          "36:       #[cfg(process_exit)]",
          "37:       Self::Exit { exit_code } => {",
          "41:         std::process::exit(exit_code);",
          "42:       }",
          "43:       #[cfg(not(process_exit))]",
          "44:       Self::Exit { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "45:         \"process > exit\".to_string(),",
          "46:       )),",
          "47:     }",
          "",
          "[Added Lines]",
          "24:   #[module_command_handler(process_relaunch, \"process > relaunch\")]",
          "25:   fn relaunch<R: Runtime>(context: InvokeContext<R>) -> crate::Result<()> {",
          "26:     crate::api::process::restart(&context.window.state());",
          "27:     Ok(())",
          "28:   }",
          "30:   #[module_command_handler(process_exit, \"process > exit\")]",
          "31:   fn exit<R: Runtime>(_context: InvokeContext<R>, exit_code: i32) -> crate::Result<()> {",
          "35:     std::process::exit(exit_code);",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/shell.rs||core/tauri/src/endpoints/shell.rs": [
          "File: core/tauri/src/endpoints/shell.rs -> core/tauri/src/endpoints/shell.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: use serde::Deserialize;",
          "8: #[cfg(shell_execute)]",
          "9: use std::sync::{Arc, Mutex};",
          "",
          "[Removed Lines]",
          "5: use crate::{endpoints::InvokeResponse, runtime::Runtime, Window};",
          "",
          "[Added Lines]",
          "5: use super::InvokeContext;",
          "6: use crate::Runtime;",
          "8: use tauri_macros::{module_command_handler, CommandModule};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: }",
          "50: #[serde(tag = \"cmd\", rename_all = \"camelCase\")]",
          "51: pub enum Cmd {",
          "",
          "[Removed Lines]",
          "49: #[derive(Deserialize)]",
          "",
          "[Added Lines]",
          "51: #[derive(Deserialize, CommandModule)]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74: impl Cmd {",
          "75:   #[allow(unused_variables)]",
          "129:       }",
          "142:       }",
          "151:           }",
          "172:         }",
          "176:       }",
          "177:     }",
          "178:   }",
          "179: }",
          "",
          "[Removed Lines]",
          "76:   pub fn run<R: Runtime>(self, window: Window<R>) -> crate::Result<InvokeResponse> {",
          "77:     match self {",
          "78:       Self::Execute {",
          "79:         program,",
          "80:         args,",
          "81:         on_event_fn,",
          "82:         options,",
          "83:       } => {",
          "84:         let mut command = if options.sidecar {",
          "85:           #[cfg(not(shell_sidecar))]",
          "86:           return Err(crate::Error::ApiNotAllowlisted(",
          "87:             \"shell > sidecar\".to_string(),",
          "88:           ));",
          "89:           #[cfg(shell_sidecar)]",
          "90:           crate::api::process::Command::new_sidecar(program)?",
          "91:         } else {",
          "92:           #[cfg(not(shell_execute))]",
          "93:           return Err(crate::Error::ApiNotAllowlisted(",
          "94:             \"shell > execute\".to_string(),",
          "95:           ));",
          "96:           #[cfg(shell_execute)]",
          "97:           crate::api::process::Command::new(program)",
          "98:         };",
          "99:         #[cfg(any(shell_execute, shell_sidecar))]",
          "100:         {",
          "101:           command = command.args(args);",
          "102:           if let Some(cwd) = options.cwd {",
          "103:             command = command.current_dir(cwd);",
          "104:           }",
          "105:           if let Some(env) = options.env {",
          "106:             command = command.envs(env);",
          "107:           } else {",
          "108:             command = command.env_clear();",
          "109:           }",
          "110:           let (mut rx, child) = command.spawn()?;",
          "112:           let pid = child.pid();",
          "113:           command_childs().lock().unwrap().insert(pid, child);",
          "115:           crate::async_runtime::spawn(async move {",
          "116:             while let Some(event) = rx.recv().await {",
          "117:               if matches!(event, crate::api::process::CommandEvent::Terminated(_)) {",
          "118:                 command_childs().lock().unwrap().remove(&pid);",
          "119:               }",
          "120:               let js = crate::api::ipc::format_callback(on_event_fn.clone(), &event)",
          "121:                 .expect(\"unable to serialize CommandEvent\");",
          "123:               let _ = window.eval(js.as_str());",
          "124:             }",
          "125:           });",
          "127:           Ok(pid.into())",
          "128:         }",
          "130:       Self::KillChild { pid } => {",
          "131:         #[cfg(shell_execute)]",
          "132:         {",
          "133:           if let Some(child) = command_childs().lock().unwrap().remove(&pid) {",
          "134:             child.kill()?;",
          "135:           }",
          "136:           Ok(().into())",
          "137:         }",
          "138:         #[cfg(not(shell_execute))]",
          "139:         Err(crate::Error::ApiNotAllowlisted(",
          "140:           \"shell > execute\".to_string(),",
          "141:         ))",
          "143:       Self::StdinWrite { pid, buffer } => {",
          "144:         #[cfg(shell_execute)]",
          "145:         {",
          "146:           if let Some(child) = command_childs().lock().unwrap().get_mut(&pid) {",
          "147:             match buffer {",
          "148:               Buffer::Text(t) => child.write(t.as_bytes())?,",
          "149:               Buffer::Raw(r) => child.write(&r)?,",
          "150:             }",
          "152:           Ok(().into())",
          "153:         }",
          "154:         #[cfg(not(shell_execute))]",
          "155:         Err(crate::Error::ApiNotAllowlisted(",
          "156:           \"shell > execute\".to_string(),",
          "157:         ))",
          "158:       }",
          "159:       Self::Open { path, with } => {",
          "160:         #[cfg(shell_open)]",
          "161:         match crate::api::shell::open(",
          "162:           path,",
          "163:           if let Some(w) = with {",
          "164:             use std::str::FromStr;",
          "165:             Some(crate::api::shell::Program::from_str(&w)?)",
          "166:           } else {",
          "167:             None",
          "168:           },",
          "169:         ) {",
          "170:           Ok(_) => Ok(().into()),",
          "171:           Err(err) => Err(crate::Error::FailedToExecuteApi(err)),",
          "174:         #[cfg(not(shell_open))]",
          "175:         Err(crate::Error::ApiNotAllowlisted(\"shell > open\".to_string()))",
          "",
          "[Added Lines]",
          "78:   fn execute<R: Runtime>(",
          "79:     context: InvokeContext<R>,",
          "80:     program: String,",
          "81:     args: Vec<String>,",
          "82:     on_event_fn: String,",
          "83:     options: CommandOptions,",
          "84:   ) -> crate::Result<ChildId> {",
          "85:     let mut command = if options.sidecar {",
          "86:       #[cfg(not(shell_sidecar))]",
          "87:       return Err(crate::Error::ApiNotAllowlisted(",
          "88:         \"shell > sidecar\".to_string(),",
          "89:       ));",
          "90:       #[cfg(shell_sidecar)]",
          "91:       crate::api::process::Command::new_sidecar(program)?",
          "92:     } else {",
          "93:       #[cfg(not(shell_execute))]",
          "94:       return Err(crate::Error::ApiNotAllowlisted(",
          "95:         \"shell > execute\".to_string(),",
          "96:       ));",
          "97:       #[cfg(shell_execute)]",
          "98:       crate::api::process::Command::new(program)",
          "99:     };",
          "100:     #[cfg(any(shell_execute, shell_sidecar))]",
          "101:     {",
          "102:       command = command.args(args);",
          "103:       if let Some(cwd) = options.cwd {",
          "104:         command = command.current_dir(cwd);",
          "106:       if let Some(env) = options.env {",
          "107:         command = command.envs(env);",
          "108:       } else {",
          "109:         command = command.env_clear();",
          "111:       let (mut rx, child) = command.spawn()?;",
          "113:       let pid = child.pid();",
          "114:       command_childs().lock().unwrap().insert(pid, child);",
          "116:       crate::async_runtime::spawn(async move {",
          "117:         while let Some(event) = rx.recv().await {",
          "118:           if matches!(event, crate::api::process::CommandEvent::Terminated(_)) {",
          "119:             command_childs().lock().unwrap().remove(&pid);",
          "121:           let js = crate::api::ipc::format_callback(on_event_fn.clone(), &event)",
          "122:             .expect(\"unable to serialize CommandEvent\");",
          "124:           let _ = context.window.eval(js.as_str());",
          "126:       });",
          "128:       Ok(pid)",
          "129:     }",
          "130:   }",
          "132:   #[module_command_handler(shell_execute, \"shell > execute\")]",
          "133:   fn stdin_write<R: Runtime>(",
          "134:     _context: InvokeContext<R>,",
          "135:     pid: ChildId,",
          "136:     buffer: Buffer,",
          "137:   ) -> crate::Result<()> {",
          "138:     if let Some(child) = command_childs().lock().unwrap().get_mut(&pid) {",
          "139:       match buffer {",
          "140:         Buffer::Text(t) => child.write(t.as_bytes())?,",
          "141:         Buffer::Raw(r) => child.write(&r)?,",
          "144:     Ok(())",
          "145:   }",
          "147:   #[module_command_handler(shell_execute, \"shell > execute\")]",
          "148:   fn kill_child<R: Runtime>(_context: InvokeContext<R>, pid: ChildId) -> crate::Result<()> {",
          "149:     if let Some(child) = command_childs().lock().unwrap().remove(&pid) {",
          "150:       child.kill()?;",
          "151:     }",
          "152:     Ok(())",
          "153:   }",
          "155:   #[module_command_handler(shell_open, \"shell > open\")]",
          "156:   fn open<R: Runtime>(",
          "157:     _context: InvokeContext<R>,",
          "158:     path: String,",
          "159:     with: Option<String>,",
          "160:   ) -> crate::Result<()> {",
          "161:     match crate::api::shell::open(",
          "162:       path,",
          "163:       if let Some(w) = with {",
          "164:         use std::str::FromStr;",
          "165:         Some(crate::api::shell::Program::from_str(&w)?)",
          "166:       } else {",
          "167:         None",
          "168:       },",
          "169:     ) {",
          "170:       Ok(_) => Ok(()),",
          "171:       Err(err) => Err(crate::Error::FailedToExecuteApi(err)),",
          "172:     }",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/window.rs||core/tauri/src/endpoints/window.rs": [
          "File: core/tauri/src/endpoints/window.rs -> core/tauri/src/endpoints/window.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #[cfg(window_create)]",
          "6: use crate::runtime::{webview::WindowBuilder, Dispatch};",
          "7: use crate::{",
          "9:   runtime::{",
          "10:     window::dpi::{Position, Size},",
          "11:     Runtime, UserAttentionType,",
          "12:   },",
          "13:   utils::config::WindowConfig,",
          "15: };",
          "16: use serde::Deserialize;",
          "18: use crate::runtime::Icon;",
          "19: use std::path::PathBuf;",
          "",
          "[Removed Lines]",
          "8:   endpoints::InvokeResponse,",
          "14:   Manager, Window,",
          "",
          "[Added Lines]",
          "5: use super::{InvokeContext, InvokeResponse};",
          "14:   Manager,",
          "17: use tauri_macros::{module_command_handler, CommandModule};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132: }",
          "136: #[serde(tag = \"cmd\", content = \"data\", rename_all = \"camelCase\")]",
          "137: pub enum Cmd {",
          "138:   CreateWebview {",
          "",
          "[Removed Lines]",
          "135: #[derive(Deserialize)]",
          "",
          "[Added Lines]",
          "136: #[derive(Deserialize, CommandModule)]",
          "137: #[cmd(async)]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "151: }",
          "153: impl Cmd {",
          "177:       }",
          "215:             true => window.unmaximize()?,",
          "216:             false => window.maximize()?,",
          "263:           }",
          "265:         }",
          "266:       }",
          "267:     }",
          "269:     #[allow(unreachable_code)]",
          "270:     Ok(().into())",
          "271:   }",
          "",
          "[Removed Lines]",
          "154:   #[allow(dead_code)]",
          "155:   pub async fn run<R: Runtime>(self, window: Window<R>) -> crate::Result<InvokeResponse> {",
          "156:     match self {",
          "157:       #[cfg(not(window_create))]",
          "158:       Self::CreateWebview { .. } => {",
          "159:         return Err(crate::Error::ApiNotAllowlisted(",
          "160:           \"window > create\".to_string(),",
          "161:         ));",
          "162:       }",
          "163:       #[cfg(window_create)]",
          "164:       Self::CreateWebview { options } => {",
          "165:         let mut window = window;",
          "166:         let label = options.label.clone();",
          "167:         let url = options.url.clone();",
          "169:         window",
          "170:           .create_window(label.clone(), url, |_, webview_attributes| {",
          "171:             (",
          "172:               <<R::Dispatcher as Dispatch>::WindowBuilder>::with_config(*options),",
          "173:               webview_attributes,",
          "174:             )",
          "175:           })?",
          "176:           .emit_others(\"tauri://window-created\", Some(WindowCreatedEvent { label }))?;",
          "178:       Self::Manage { label, cmd } => {",
          "179:         let window = match label {",
          "180:           Some(l) if !l.is_empty() => window.get_window(&l).ok_or(crate::Error::WebviewNotFound)?,",
          "181:           _ => window,",
          "182:         };",
          "183:         match cmd {",
          "185:           WindowManagerCmd::ScaleFactor => return Ok(window.scale_factor()?.into()),",
          "186:           WindowManagerCmd::InnerPosition => return Ok(window.inner_position()?.into()),",
          "187:           WindowManagerCmd::OuterPosition => return Ok(window.outer_position()?.into()),",
          "188:           WindowManagerCmd::InnerSize => return Ok(window.inner_size()?.into()),",
          "189:           WindowManagerCmd::OuterSize => return Ok(window.outer_size()?.into()),",
          "190:           WindowManagerCmd::IsFullscreen => return Ok(window.is_fullscreen()?.into()),",
          "191:           WindowManagerCmd::IsMaximized => return Ok(window.is_maximized()?.into()),",
          "192:           WindowManagerCmd::IsDecorated => return Ok(window.is_decorated()?.into()),",
          "193:           WindowManagerCmd::IsResizable => return Ok(window.is_resizable()?.into()),",
          "194:           WindowManagerCmd::IsVisible => return Ok(window.is_visible()?.into()),",
          "195:           WindowManagerCmd::CurrentMonitor => return Ok(window.current_monitor()?.into()),",
          "196:           WindowManagerCmd::PrimaryMonitor => return Ok(window.primary_monitor()?.into()),",
          "197:           WindowManagerCmd::AvailableMonitors => return Ok(window.available_monitors()?.into()),",
          "199:           #[cfg(window_center)]",
          "200:           WindowManagerCmd::Center => window.center()?,",
          "201:           #[cfg(window_request_user_attention)]",
          "202:           WindowManagerCmd::RequestUserAttention(request_type) => {",
          "203:             window.request_user_attention(request_type)?",
          "204:           }",
          "205:           #[cfg(window_set_resizable)]",
          "206:           WindowManagerCmd::SetResizable(resizable) => window.set_resizable(resizable)?,",
          "207:           #[cfg(window_set_title)]",
          "208:           WindowManagerCmd::SetTitle(title) => window.set_title(&title)?,",
          "209:           #[cfg(window_maximize)]",
          "210:           WindowManagerCmd::Maximize => window.maximize()?,",
          "211:           #[cfg(window_unmaximize)]",
          "212:           WindowManagerCmd::Unmaximize => window.unmaximize()?,",
          "213:           #[cfg(all(window_maximize, window_unmaximize))]",
          "214:           WindowManagerCmd::ToggleMaximize => match window.is_maximized()? {",
          "217:           },",
          "218:           #[cfg(window_minimize)]",
          "219:           WindowManagerCmd::Minimize => window.minimize()?,",
          "220:           #[cfg(window_unminimize)]",
          "221:           WindowManagerCmd::Unminimize => window.unminimize()?,",
          "222:           #[cfg(window_show)]",
          "223:           WindowManagerCmd::Show => window.show()?,",
          "224:           #[cfg(window_hide)]",
          "225:           WindowManagerCmd::Hide => window.hide()?,",
          "226:           #[cfg(window_close)]",
          "227:           WindowManagerCmd::Close => window.close()?,",
          "228:           #[cfg(window_set_decorations)]",
          "229:           WindowManagerCmd::SetDecorations(decorations) => window.set_decorations(decorations)?,",
          "230:           #[cfg(window_set_always_on_top)]",
          "231:           WindowManagerCmd::SetAlwaysOnTop(always_on_top) => {",
          "232:             window.set_always_on_top(always_on_top)?",
          "233:           }",
          "234:           #[cfg(window_set_size)]",
          "235:           WindowManagerCmd::SetSize(size) => window.set_size(size)?,",
          "236:           #[cfg(window_set_min_size)]",
          "237:           WindowManagerCmd::SetMinSize(size) => window.set_min_size(size)?,",
          "238:           #[cfg(window_set_max_size)]",
          "239:           WindowManagerCmd::SetMaxSize(size) => window.set_max_size(size)?,",
          "240:           #[cfg(window_set_position)]",
          "241:           WindowManagerCmd::SetPosition(position) => window.set_position(position)?,",
          "242:           #[cfg(window_set_fullscreen)]",
          "243:           WindowManagerCmd::SetFullscreen(fullscreen) => window.set_fullscreen(fullscreen)?,",
          "244:           #[cfg(window_set_focus)]",
          "245:           WindowManagerCmd::SetFocus => window.set_focus()?,",
          "246:           #[cfg(window_set_icon)]",
          "247:           WindowManagerCmd::SetIcon { icon } => window.set_icon(icon.into())?,",
          "248:           #[cfg(window_set_skip_taskbar)]",
          "249:           WindowManagerCmd::SetSkipTaskbar(skip) => window.set_skip_taskbar(skip)?,",
          "250:           #[cfg(window_start_dragging)]",
          "251:           WindowManagerCmd::StartDragging => window.start_dragging()?,",
          "252:           #[cfg(window_print)]",
          "253:           WindowManagerCmd::Print => window.print()?,",
          "255:           #[cfg(all(window_maximize, window_unmaximize))]",
          "256:           WindowManagerCmd::InternalToggleMaximize => {",
          "257:             if window.is_resizable()? {",
          "258:               match window.is_maximized()? {",
          "259:                 true => window.unmaximize()?,",
          "260:                 false => window.maximize()?,",
          "261:               }",
          "262:             }",
          "264:           _ => return Err(cmd.into_allowlist_error()),",
          "",
          "[Added Lines]",
          "156:   #[module_command_handler(window_create, \"window > create\")]",
          "157:   async fn create_webview<R: Runtime>(",
          "158:     context: InvokeContext<R>,",
          "159:     options: Box<WindowConfig>,",
          "160:   ) -> crate::Result<()> {",
          "161:     let mut window = context.window;",
          "162:     let label = options.label.clone();",
          "163:     let url = options.url.clone();",
          "165:     window",
          "166:       .create_window(label.clone(), url, |_, webview_attributes| {",
          "167:         (",
          "168:           <<R::Dispatcher as Dispatch>::WindowBuilder>::with_config(*options),",
          "169:           webview_attributes,",
          "170:         )",
          "171:       })?",
          "172:       .emit_others(\"tauri://window-created\", Some(WindowCreatedEvent { label }))?;",
          "174:     Ok(())",
          "175:   }",
          "177:   async fn manage<R: Runtime>(",
          "178:     context: InvokeContext<R>,",
          "179:     label: Option<String>,",
          "180:     cmd: WindowManagerCmd,",
          "181:   ) -> crate::Result<InvokeResponse> {",
          "182:     let window = match label {",
          "183:       Some(l) if !l.is_empty() => context",
          "184:         .window",
          "185:         .get_window(&l)",
          "186:         .ok_or(crate::Error::WebviewNotFound)?,",
          "187:       _ => context.window,",
          "188:     };",
          "189:     match cmd {",
          "191:       WindowManagerCmd::ScaleFactor => return Ok(window.scale_factor()?.into()),",
          "192:       WindowManagerCmd::InnerPosition => return Ok(window.inner_position()?.into()),",
          "193:       WindowManagerCmd::OuterPosition => return Ok(window.outer_position()?.into()),",
          "194:       WindowManagerCmd::InnerSize => return Ok(window.inner_size()?.into()),",
          "195:       WindowManagerCmd::OuterSize => return Ok(window.outer_size()?.into()),",
          "196:       WindowManagerCmd::IsFullscreen => return Ok(window.is_fullscreen()?.into()),",
          "197:       WindowManagerCmd::IsMaximized => return Ok(window.is_maximized()?.into()),",
          "198:       WindowManagerCmd::IsDecorated => return Ok(window.is_decorated()?.into()),",
          "199:       WindowManagerCmd::IsResizable => return Ok(window.is_resizable()?.into()),",
          "200:       WindowManagerCmd::IsVisible => return Ok(window.is_visible()?.into()),",
          "201:       WindowManagerCmd::CurrentMonitor => return Ok(window.current_monitor()?.into()),",
          "202:       WindowManagerCmd::PrimaryMonitor => return Ok(window.primary_monitor()?.into()),",
          "203:       WindowManagerCmd::AvailableMonitors => return Ok(window.available_monitors()?.into()),",
          "205:       #[cfg(window_center)]",
          "206:       WindowManagerCmd::Center => window.center()?,",
          "207:       #[cfg(window_request_user_attention)]",
          "208:       WindowManagerCmd::RequestUserAttention(request_type) => {",
          "209:         window.request_user_attention(request_type)?",
          "211:       #[cfg(window_set_resizable)]",
          "212:       WindowManagerCmd::SetResizable(resizable) => window.set_resizable(resizable)?,",
          "213:       #[cfg(window_set_title)]",
          "214:       WindowManagerCmd::SetTitle(title) => window.set_title(&title)?,",
          "215:       #[cfg(window_maximize)]",
          "216:       WindowManagerCmd::Maximize => window.maximize()?,",
          "217:       #[cfg(window_unmaximize)]",
          "218:       WindowManagerCmd::Unmaximize => window.unmaximize()?,",
          "219:       #[cfg(all(window_maximize, window_unmaximize))]",
          "220:       WindowManagerCmd::ToggleMaximize => match window.is_maximized()? {",
          "221:         true => window.unmaximize()?,",
          "222:         false => window.maximize()?,",
          "223:       },",
          "224:       #[cfg(window_minimize)]",
          "225:       WindowManagerCmd::Minimize => window.minimize()?,",
          "226:       #[cfg(window_unminimize)]",
          "227:       WindowManagerCmd::Unminimize => window.unminimize()?,",
          "228:       #[cfg(window_show)]",
          "229:       WindowManagerCmd::Show => window.show()?,",
          "230:       #[cfg(window_hide)]",
          "231:       WindowManagerCmd::Hide => window.hide()?,",
          "232:       #[cfg(window_close)]",
          "233:       WindowManagerCmd::Close => window.close()?,",
          "234:       #[cfg(window_set_decorations)]",
          "235:       WindowManagerCmd::SetDecorations(decorations) => window.set_decorations(decorations)?,",
          "236:       #[cfg(window_set_always_on_top)]",
          "237:       WindowManagerCmd::SetAlwaysOnTop(always_on_top) => window.set_always_on_top(always_on_top)?,",
          "238:       #[cfg(window_set_size)]",
          "239:       WindowManagerCmd::SetSize(size) => window.set_size(size)?,",
          "240:       #[cfg(window_set_min_size)]",
          "241:       WindowManagerCmd::SetMinSize(size) => window.set_min_size(size)?,",
          "242:       #[cfg(window_set_max_size)]",
          "243:       WindowManagerCmd::SetMaxSize(size) => window.set_max_size(size)?,",
          "244:       #[cfg(window_set_position)]",
          "245:       WindowManagerCmd::SetPosition(position) => window.set_position(position)?,",
          "246:       #[cfg(window_set_fullscreen)]",
          "247:       WindowManagerCmd::SetFullscreen(fullscreen) => window.set_fullscreen(fullscreen)?,",
          "248:       #[cfg(window_set_focus)]",
          "249:       WindowManagerCmd::SetFocus => window.set_focus()?,",
          "250:       #[cfg(window_set_icon)]",
          "251:       WindowManagerCmd::SetIcon { icon } => window.set_icon(icon.into())?,",
          "252:       #[cfg(window_set_skip_taskbar)]",
          "253:       WindowManagerCmd::SetSkipTaskbar(skip) => window.set_skip_taskbar(skip)?,",
          "254:       #[cfg(window_start_dragging)]",
          "255:       WindowManagerCmd::StartDragging => window.start_dragging()?,",
          "256:       #[cfg(window_print)]",
          "257:       WindowManagerCmd::Print => window.print()?,",
          "259:       #[cfg(all(window_maximize, window_unmaximize))]",
          "260:       WindowManagerCmd::InternalToggleMaximize => {",
          "261:         if window.is_resizable()? {",
          "262:           match window.is_maximized()? {",
          "268:       #[allow(unreachable_patterns)]",
          "269:       _ => return Err(cmd.into_allowlist_error()),",
          "",
          "---------------"
        ],
        "core/tauri/src/error.rs||core/tauri/src/error.rs": [
          "File: core/tauri/src/error.rs -> core/tauri/src/error.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   #[error(\"failed to initialize plugin `{0}`: {1}\")]",
          "73:   PluginInitialization(String, String),",
          "78:   #[error(\"error encountered during tray setup: {0}\")]",
          "79:   SystemTray(Box<dyn std::error::Error + Send>),",
          "",
          "[Removed Lines]",
          "75:   #[error(\"failed to setup dialog: provided default path `{0}` doesn't exist\")]",
          "76:   DialogDefaultPathNotExists(PathBuf),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "examples/api/src-tauri/Cargo.lock||examples/api/src-tauri/Cargo.lock": [
          "File: examples/api/src-tauri/Cargo.lock -> examples/api/src-tauri/Cargo.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3129: name = \"tauri-macros\"",
          "3130: version = \"1.0.0-beta.5\"",
          "3131: dependencies = [",
          "3132:  \"proc-macro2\",",
          "3133:  \"quote\",",
          "3134:  \"syn\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3132:  \"heck\",",
          "",
          "---------------"
        ],
        "examples/api/src/components/Http.svelte||examples/api/src/components/Http.svelte": [
          "File: examples/api/src/components/Http.svelte -> examples/api/src/components/Http.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   export let onMessage;",
          "9:   async function makeHttpRequest() {",
          "11:     let method = httpMethod || \"GET\";",
          "12:     let url = httpUrl || \"\";",
          "",
          "[Removed Lines]",
          "10:     const client = await getClient();",
          "",
          "[Added Lines]",
          "10:     const client = await getClient().catch(e => {",
          "11:       onMessage(e)",
          "12:       throw e",
          "13:     });",
          "",
          "---------------"
        ],
        "examples/api/src/components/Window.svelte||examples/api/src/components/Window.svelte": [
          "File: examples/api/src/components/Window.svelte -> examples/api/src/components/Window.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   function getIcon() {",
          "58:     openDialog({",
          "59:       multiple: false,",
          "61:   }",
          "63:   function createWindow() {",
          "",
          "[Removed Lines]",
          "60:     }).then(windowMap[selectedWindow].setIcon);",
          "",
          "[Added Lines]",
          "60:     }).then(path => {",
          "61:       if (path) {",
          "62:         windowMap[selectedWindow].setIcon(path)",
          "63:       }",
          "64:     });",
          "",
          "---------------"
        ],
        "tooling/api/src/os.ts||tooling/api/src/os.ts": [
          "File: tooling/api/src/os.ts -> tooling/api/src/os.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   return invokeTauriCommand<string>({",
          "83:     __tauriModule: 'Os',",
          "84:     message: {",
          "86:     }",
          "87:   })",
          "88: }",
          "",
          "[Removed Lines]",
          "85:       cmd: 'type'",
          "",
          "[Added Lines]",
          "85:       cmd: 'osType'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7920ff14e6424079c48ea5645d9aa13e7a272b87",
      "candidate_info": {
        "commit_hash": "7920ff14e6424079c48ea5645d9aa13e7a272b87",
        "repo": "tauri-apps/tauri",
        "commit_url": "https://github.com/tauri-apps/tauri/commit/7920ff14e6424079c48ea5645d9aa13e7a272b87",
        "files": [
          ".changes/asset-allowlist.md",
          ".changes/asset-protocol-feature-flag.md",
          ".changes/scope-config.md",
          ".changes/scopes.md",
          "core/tauri-utils/src/config.rs",
          "core/tauri-utils/src/lib.rs",
          "core/tauri/Cargo.toml",
          "core/tauri/build.rs",
          "core/tauri/src/api/path.rs",
          "core/tauri/src/app.rs",
          "core/tauri/src/endpoints/file_system.rs",
          "core/tauri/src/error.rs",
          "core/tauri/src/lib.rs",
          "core/tauri/src/manager.rs",
          "core/tauri/src/scope/fs.rs",
          "core/tauri/src/scope/mod.rs",
          "core/tauri/src/scope/shell.rs",
          "core/tauri/src/updater/core.rs",
          "docs/api/config.md",
          "examples/api/src-tauri/Cargo.lock",
          "examples/api/src-tauri/tauri.conf.json",
          "tooling/api/src/tauri.ts",
          "tooling/cli.rs/schema.json",
          "tooling/cli.rs/src/helpers/config.rs",
          "tooling/cli.rs/src/helpers/manifest.rs"
        ],
        "message": "feat: scope the `fs` API and the `asset` protocol [TRI-026] [TRI-010] [TRI-011] (#10)",
        "before_after_code_files": [
          "core/tauri-utils/src/config.rs||core/tauri-utils/src/config.rs",
          "core/tauri-utils/src/lib.rs||core/tauri-utils/src/lib.rs",
          "core/tauri/build.rs||core/tauri/build.rs",
          "core/tauri/src/api/path.rs||core/tauri/src/api/path.rs",
          "core/tauri/src/app.rs||core/tauri/src/app.rs",
          "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs",
          "core/tauri/src/error.rs||core/tauri/src/error.rs",
          "core/tauri/src/lib.rs||core/tauri/src/lib.rs",
          "core/tauri/src/manager.rs||core/tauri/src/manager.rs",
          "core/tauri/src/scope/fs.rs||core/tauri/src/scope/fs.rs",
          "core/tauri/src/scope/mod.rs||core/tauri/src/scope/mod.rs",
          "core/tauri/src/scope/shell.rs||core/tauri/src/scope/shell.rs",
          "core/tauri/src/updater/core.rs||core/tauri/src/updater/core.rs",
          "examples/api/src-tauri/Cargo.lock||examples/api/src-tauri/Cargo.lock",
          "tooling/api/src/tauri.ts||tooling/api/src/tauri.ts",
          "tooling/cli.rs/src/helpers/config.rs||tooling/cli.rs/src/helpers/config.rs",
          "tooling/cli.rs/src/helpers/manifest.rs||tooling/cli.rs/src/helpers/manifest.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs"
          ],
          "candidate": [
            "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs"
          ]
        }
      },
      "candidate_diff": {
        "core/tauri-utils/src/config.rs||core/tauri-utils/src/config.rs": [
          "File: core/tauri-utils/src/config.rs -> core/tauri-utils/src/config.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "558: pub trait Allowlist {",
          "561: }",
          "563: macro_rules! check_feature {",
          "",
          "[Removed Lines]",
          "560:   fn to_features(&self) -> Vec<&str>;",
          "",
          "[Added Lines]",
          "560:   fn all_features() -> Vec<&'static str>;",
          "562:   fn to_features(&self) -> Vec<&'static str>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "568:   };",
          "569: }",
          "572: #[derive(Debug, Default, PartialEq, Clone, Deserialize, Serialize)]",
          "573: #[cfg_attr(feature = \"schema\", derive(JsonSchema))]",
          "574: #[serde(rename_all = \"camelCase\", deny_unknown_fields)]",
          "575: pub struct FsAllowlistConfig {",
          "577:   #[serde(default)]",
          "578:   pub all: bool,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "579: #[derive(Debug, PartialEq, Clone, Deserialize, Serialize)]",
          "580: #[cfg_attr(feature = \"schema\", derive(JsonSchema))]",
          "581: pub struct FsAllowlistScope(pub Vec<PathBuf>);",
          "583: impl Default for FsAllowlistScope {",
          "584:   fn default() -> Self {",
          "585:     Self(vec![\"$APP/**\".into()])",
          "586:   }",
          "587: }",
          "595:   pub scope: FsAllowlistScope,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "609: }",
          "611: impl Allowlist for FsAllowlistConfig {",
          "613:     if self.all {",
          "614:       vec![\"fs-all\"]",
          "615:     } else {",
          "",
          "[Removed Lines]",
          "612:   fn to_features(&self) -> Vec<&str> {",
          "",
          "[Added Lines]",
          "632:   fn all_features() -> Vec<&'static str> {",
          "633:     let allowlist = Self {",
          "634:       scope: Default::default(),",
          "635:       all: false,",
          "636:       read_text_file: true,",
          "637:       read_binary_file: true,",
          "638:       write_file: true,",
          "639:       write_binary_file: true,",
          "640:       read_dir: true,",
          "641:       copy_file: true,",
          "642:       create_dir: true,",
          "643:       remove_dir: true,",
          "644:       remove_file: true,",
          "645:       rename_file: true,",
          "646:     };",
          "647:     let mut features = allowlist.to_features();",
          "648:     features.push(\"fs-all\");",
          "649:     features",
          "650:   }",
          "652:   fn to_features(&self) -> Vec<&'static str> {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "643: }",
          "645: impl Allowlist for WindowAllowlistConfig {",
          "647:     if self.all {",
          "648:       vec![\"window-all\"]",
          "649:     } else {",
          "",
          "[Removed Lines]",
          "646:   fn to_features(&self) -> Vec<&str> {",
          "",
          "[Added Lines]",
          "686:   fn all_features() -> Vec<&'static str> {",
          "687:     let allowlist = Self {",
          "688:       all: false,",
          "689:       create: true,",
          "690:     };",
          "691:     let mut features = allowlist.to_features();",
          "692:     features.push(\"window-all\");",
          "693:     features",
          "694:   }",
          "696:   fn to_features(&self) -> Vec<&'static str> {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "671: }",
          "673: impl Allowlist for ShellAllowlistConfig {",
          "675:     if self.all {",
          "676:       vec![\"shell-all\"]",
          "677:     } else {",
          "",
          "[Removed Lines]",
          "674:   fn to_features(&self) -> Vec<&str> {",
          "",
          "[Added Lines]",
          "724:   fn all_features() -> Vec<&'static str> {",
          "725:     let allowlist = Self {",
          "726:       all: false,",
          "727:       execute: true,",
          "728:       open: true,",
          "729:     };",
          "730:     let mut features = allowlist.to_features();",
          "731:     features.push(\"shell-all\");",
          "732:     features",
          "733:   }",
          "735:   fn to_features(&self) -> Vec<&'static str> {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "700: }",
          "702: impl Allowlist for DialogAllowlistConfig {",
          "704:     if self.all {",
          "705:       vec![\"dialog-all\"]",
          "706:     } else {",
          "",
          "[Removed Lines]",
          "703:   fn to_features(&self) -> Vec<&str> {",
          "",
          "[Added Lines]",
          "764:   fn all_features() -> Vec<&'static str> {",
          "765:     let allowlist = Self {",
          "766:       all: false,",
          "767:       open: true,",
          "768:       save: true,",
          "769:     };",
          "770:     let mut features = allowlist.to_features();",
          "771:     features.push(\"dialog-all\");",
          "772:     features",
          "773:   }",
          "775:   fn to_features(&self) -> Vec<&'static str> {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "726: }",
          "728: impl Allowlist for HttpAllowlistConfig {",
          "730:     if self.all {",
          "731:       vec![\"http-all\"]",
          "732:     } else {",
          "",
          "[Removed Lines]",
          "729:   fn to_features(&self) -> Vec<&str> {",
          "",
          "[Added Lines]",
          "801:   fn all_features() -> Vec<&'static str> {",
          "802:     let allowlist = Self {",
          "803:       all: false,",
          "804:       request: true,",
          "805:     };",
          "806:     let mut features = allowlist.to_features();",
          "807:     features.push(\"http-all\");",
          "808:     features",
          "809:   }",
          "811:   fn to_features(&self) -> Vec<&'static str> {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "748: }",
          "750: impl Allowlist for NotificationAllowlistConfig {",
          "752:     if self.all {",
          "753:       vec![\"notification-all\"]",
          "754:     } else {",
          "",
          "[Removed Lines]",
          "751:   fn to_features(&self) -> Vec<&str> {",
          "",
          "[Added Lines]",
          "833:   fn all_features() -> Vec<&'static str> {",
          "834:     let allowlist = Self { all: false };",
          "835:     let mut features = allowlist.to_features();",
          "836:     features.push(\"notification-all\");",
          "837:     features",
          "838:   }",
          "840:   fn to_features(&self) -> Vec<&'static str> {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "768: }",
          "770: impl Allowlist for GlobalShortcutAllowlistConfig {",
          "772:     if self.all {",
          "773:       vec![\"global-shortcut-all\"]",
          "774:     } else {",
          "",
          "[Removed Lines]",
          "771:   fn to_features(&self) -> Vec<&str> {",
          "",
          "[Added Lines]",
          "860:   fn all_features() -> Vec<&'static str> {",
          "861:     let allowlist = Self { all: false };",
          "862:     let mut features = allowlist.to_features();",
          "863:     features.push(\"global-shortcut-all\");",
          "864:     features",
          "865:   }",
          "867:   fn to_features(&self) -> Vec<&'static str> {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "788: }",
          "790: impl Allowlist for OsAllowlistConfig {",
          "792:     if self.all {",
          "793:       vec![\"os-all\"]",
          "794:     } else {",
          "",
          "[Removed Lines]",
          "791:   fn to_features(&self) -> Vec<&str> {",
          "",
          "[Added Lines]",
          "887:   fn all_features() -> Vec<&'static str> {",
          "888:     let allowlist = Self { all: false };",
          "889:     let mut features = allowlist.to_features();",
          "890:     features.push(\"os-all\");",
          "891:     features",
          "892:   }",
          "894:   fn to_features(&self) -> Vec<&'static str> {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "808: }",
          "810: impl Allowlist for PathAllowlistConfig {",
          "812:     if self.all {",
          "813:       vec![\"path-all\"]",
          "814:     } else {",
          "",
          "[Removed Lines]",
          "811:   fn to_features(&self) -> Vec<&str> {",
          "",
          "[Added Lines]",
          "914:   fn all_features() -> Vec<&'static str> {",
          "915:     let allowlist = Self { all: false };",
          "916:     let mut features = allowlist.to_features();",
          "917:     features.push(\"path-all\");",
          "918:     features",
          "919:   }",
          "921:   fn to_features(&self) -> Vec<&'static str> {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "817:   }",
          "818: }",
          "821: #[derive(Debug, Default, PartialEq, Clone, Deserialize, Serialize)]",
          "822: #[cfg_attr(feature = \"schema\", derive(JsonSchema))]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "931: #[derive(Debug, Default, PartialEq, Clone, Deserialize, Serialize)]",
          "932: #[cfg_attr(feature = \"schema\", derive(JsonSchema))]",
          "933: #[serde(rename_all = \"camelCase\", deny_unknown_fields)]",
          "934: pub struct ProtocolAllowlistConfig {",
          "936:   pub asset_scope: FsAllowlistScope,",
          "938:   #[serde(default)]",
          "939:   pub all: bool,",
          "941:   #[serde(default)]",
          "942:   pub asset: bool,",
          "943: }",
          "945: impl Allowlist for ProtocolAllowlistConfig {",
          "946:   fn all_features() -> Vec<&'static str> {",
          "947:     let allowlist = Self {",
          "948:       asset_scope: Default::default(),",
          "949:       all: false,",
          "950:       asset: true,",
          "951:     };",
          "952:     let mut features = allowlist.to_features();",
          "953:     features.push(\"protocol-all\");",
          "954:     features",
          "955:   }",
          "957:   fn to_features(&self) -> Vec<&'static str> {",
          "958:     if self.all {",
          "959:       vec![\"protocol-all\"]",
          "960:     } else {",
          "961:       let mut features = Vec::new();",
          "962:       check_feature!(self, features, asset, \"protocol-asset\");",
          "963:       features",
          "964:     }",
          "965:   }",
          "966: }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "853:   #[serde(default)]",
          "854:   pub path: PathAllowlistConfig,",
          "855: }",
          "857: impl Allowlist for AllowlistConfig {",
          "859:     if self.all {",
          "860:       vec![\"api-all\"]",
          "861:     } else {",
          "",
          "[Removed Lines]",
          "858:   fn to_features(&self) -> Vec<&str> {",
          "",
          "[Added Lines]",
          "1004:   #[serde(default)]",
          "1005:   pub protocol: ProtocolAllowlistConfig,",
          "1009:   fn all_features() -> Vec<&'static str> {",
          "1010:     let mut features = Vec::new();",
          "1011:     features.extend(FsAllowlistConfig::all_features());",
          "1012:     features.extend(WindowAllowlistConfig::all_features());",
          "1013:     features.extend(ShellAllowlistConfig::all_features());",
          "1014:     features.extend(DialogAllowlistConfig::all_features());",
          "1015:     features.extend(HttpAllowlistConfig::all_features());",
          "1016:     features.extend(NotificationAllowlistConfig::all_features());",
          "1017:     features.extend(GlobalShortcutAllowlistConfig::all_features());",
          "1018:     features.extend(OsAllowlistConfig::all_features());",
          "1019:     features.extend(PathAllowlistConfig::all_features());",
          "1020:     features.extend(ProtocolAllowlistConfig::all_features());",
          "1021:     features",
          "1022:   }",
          "1024:   fn to_features(&self) -> Vec<&'static str> {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "869:       features.extend(self.global_shortcut.to_features());",
          "870:       features.extend(self.os.to_features());",
          "871:       features.extend(self.path.to_features());",
          "872:       features",
          "873:     }",
          "874:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1038:       features.extend(self.protocol.to_features());",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1616:     }",
          "1617:   }",
          "1619:   impl ToTokens for TauriConfig {",
          "1620:     fn to_tokens(&self, tokens: &mut TokenStream) {",
          "1621:       let windows = vec_lit(&self.windows, identity);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1786:   impl ToTokens for FsAllowlistScope {",
          "1787:     fn to_tokens(&self, tokens: &mut TokenStream) {",
          "1788:       let allowed_paths = vec_lit(&self.0, path_buf_lit);",
          "1789:       tokens.append_all(quote! { ::tauri::utils::config::FsAllowlistScope(#allowed_paths) })",
          "1790:     }",
          "1791:   }",
          "1793:   impl ToTokens for FsAllowlistConfig {",
          "1794:     fn to_tokens(&self, tokens: &mut TokenStream) {",
          "1795:       let scope = &self.scope;",
          "1796:       tokens.append_all(quote! { ::tauri::utils::config::FsAllowlistConfig { scope: #scope, ..Default::default() } })",
          "1797:     }",
          "1798:   }",
          "1800:   impl ToTokens for ProtocolAllowlistConfig {",
          "1801:     fn to_tokens(&self, tokens: &mut TokenStream) {",
          "1802:       let asset_scope = &self.asset_scope;",
          "1803:       tokens.append_all(quote! { ::tauri::utils::config::ProtocolAllowlistConfig { asset_scope: #asset_scope, ..Default::default() } })",
          "1804:     }",
          "1805:   }",
          "1807:   impl ToTokens for AllowlistConfig {",
          "1808:     fn to_tokens(&self, tokens: &mut TokenStream) {",
          "1809:       let fs = &self.fs;",
          "1810:       let protocol = &self.protocol;",
          "1811:       tokens.append_all(",
          "1812:         quote! { ::tauri::utils::config::AllowlistConfig { fs: #fs, protocol: #protocol, ..Default::default() } },",
          "1813:       )",
          "1814:     }",
          "1815:   }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1624:       let updater = &self.updater;",
          "1625:       let security = &self.security;",
          "1626:       let system_tray = opt_lit(self.system_tray.as_ref());",
          "1628:       let macos_private_api = self.macos_private_api;",
          "1630:       literal_struct!(",
          "",
          "[Removed Lines]",
          "1627:       let allowlist = quote!(Default::default());",
          "",
          "[Added Lines]",
          "1825:       let allowlist = &self.allowlist;",
          "",
          "---------------"
        ],
        "core/tauri-utils/src/lib.rs||core/tauri-utils/src/lib.rs": [
          "File: core/tauri-utils/src/lib.rs -> core/tauri-utils/src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   pub appdir: Option<std::ffi::OsString>,",
          "49: }",
          "51: impl Default for Env {",
          "52:   fn default() -> Self {",
          "53:     Self {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: #[allow(clippy::derivable_impls)]",
          "",
          "---------------"
        ],
        "core/tauri/build.rs||core/tauri/build.rs": [
          "File: core/tauri/build.rs -> core/tauri/build.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:     path_all: { any(api_all, feature = \"path-all\") },",
          "59:   }",
          "60: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:     protocol_all: { any(api_all, feature = \"protocol-all\") },",
          "62:     protocol_asset: { any(protocol_all, feature = \"protocol-asset\") },",
          "",
          "---------------"
        ],
        "core/tauri/src/api/path.rs||core/tauri/src/api/path.rs": [
          "File: core/tauri/src/api/path.rs -> core/tauri/src/api/path.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:   Log,",
          "69: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: impl BaseDirectory {",
          "73:   pub fn variable(self) -> &'static str {",
          "74:     match self {",
          "75:       Self::Audio => \"$AUDIO\",",
          "76:       Self::Cache => \"$CACHE\",",
          "77:       Self::Config => \"$CONFIG\",",
          "78:       Self::Data => \"$DATA\",",
          "79:       Self::LocalData => \"$LOCALDATA\",",
          "80:       Self::Desktop => \"$DESKTOP\",",
          "81:       Self::Document => \"$DOCUMENT\",",
          "82:       Self::Download => \"$DOWNLOAD\",",
          "83:       Self::Executable => \"$EXE\",",
          "84:       Self::Font => \"$FONT\",",
          "85:       Self::Home => \"$HOME\",",
          "86:       Self::Picture => \"$PICTURE\",",
          "87:       Self::Public => \"$PUBLIC\",",
          "88:       Self::Runtime => \"$RUNTIME\",",
          "89:       Self::Template => \"$TEMPLATE\",",
          "90:       Self::Video => \"$VIDEO\",",
          "91:       Self::Resource => \"$RESOURCE\",",
          "92:       Self::App => \"$APP\",",
          "93:       Self::Current => \"$CWD\",",
          "94:       Self::Log => \"$LOG\",",
          "95:     }",
          "96:   }",
          "99:   pub fn from_variable(variable: &str) -> Option<Self> {",
          "100:     let res = match variable {",
          "101:       \"$AUDIO\" => Self::Audio,",
          "102:       \"$CACHE\" => Self::Cache,",
          "103:       \"$CONFIG\" => Self::Config,",
          "104:       \"$DATA\" => Self::Data,",
          "105:       \"$LOCALDATA\" => Self::LocalData,",
          "106:       \"$DESKTOP\" => Self::Desktop,",
          "107:       \"$DOCUMENT\" => Self::Document,",
          "108:       \"$DOWNLOAD\" => Self::Download,",
          "109:       \"$EXE\" => Self::Executable,",
          "110:       \"$FONT\" => Self::Font,",
          "111:       \"$HOME\" => Self::Home,",
          "112:       \"$PICTURE\" => Self::Picture,",
          "113:       \"$PUBLIC\" => Self::Public,",
          "114:       \"$RUNTIME\" => Self::Runtime,",
          "115:       \"$TEMPLATE\" => Self::Template,",
          "116:       \"$VIDEO\" => Self::Video,",
          "117:       \"$RESOURCE\" => Self::Resource,",
          "118:       \"$APP\" => Self::App,",
          "119:       \"$CWD\" => Self::Current,",
          "120:       \"$LOG\" => Self::Log,",
          "121:       _ => return None,",
          "122:     };",
          "123:     Some(res)",
          "124:   }",
          "125: }",
          "128: pub fn parse<P: AsRef<Path>>(",
          "129:   config: &Config,",
          "130:   package_info: &PackageInfo,",
          "131:   env: &Env,",
          "132:   path: P,",
          "133: ) -> crate::api::Result<PathBuf> {",
          "134:   let mut p = PathBuf::new();",
          "135:   let mut components = path.as_ref().components();",
          "136:   if let Some(Component::Normal(str)) = components.next() {",
          "137:     if let Some(base_directory) = BaseDirectory::from_variable(&str.to_string_lossy().into_owned())",
          "138:     {",
          "139:       p.push(resolve_path(",
          "140:         config,",
          "141:         package_info,",
          "142:         env,",
          "143:         \"\",",
          "144:         Some(base_directory),",
          "145:       )?);",
          "146:     } else {",
          "147:       p.push(str);",
          "148:     }",
          "149:   }",
          "151:   for component in components {",
          "152:     if let Component::ParentDir = component {",
          "153:       continue;",
          "154:     }",
          "155:     p.push(component);",
          "156:   }",
          "158:   Ok(p)",
          "159: }",
          "",
          "---------------"
        ],
        "core/tauri/src/app.rs||core/tauri/src/app.rs": [
          "File: core/tauri/src/app.rs -> core/tauri/src/app.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:     window::{PendingWindow, WindowEvent},",
          "19:     Dispatch, ExitRequestedEventAction, RunEvent, Runtime,",
          "20:   },",
          "21:   sealed::{ManagerBase, RuntimeOrDispatch},",
          "22:   utils::config::{Config, WindowUrl},",
          "23:   utils::{assets::Assets, Env},",
          "25: };",
          "27: use tauri_macros::default_runtime;",
          "",
          "[Removed Lines]",
          "24:   Context, Invoke, InvokeError, InvokeResponse, Manager, StateManager, Window,",
          "",
          "[Added Lines]",
          "21:   scope::FsScope,",
          "25:   Context, Invoke, InvokeError, InvokeResponse, Manager, Scopes, StateManager, Window,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "445:           manager: self.manager.clone(),",
          "446:         }",
          "447:       }",
          "448:     }",
          "449:   };",
          "450: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451:       pub fn fs_scope(&self) -> FsScope {",
          "452:         self.state::<Scopes>().inner().fs.clone()",
          "453:       }",
          "456:       #[cfg(protocol_asset)]",
          "457:       pub fn asset_protocol_scope(&self) -> FsScope {",
          "458:         self.state::<Scopes>().inner().asset_protocol.clone()",
          "459:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "997:       },",
          "998:     };",
          "1002:     #[cfg(feature = \"system-tray\")]",
          "1003:     if let Some(system_tray) = self.system_tray {",
          "",
          "[Removed Lines]",
          "1000:     app.manage(Env::default());",
          "",
          "[Added Lines]",
          "1012:     let env = Env::default();",
          "1013:     app.manage(Scopes {",
          "1014:       fs: FsScope::for_fs_api(",
          "1015:         &app.manager.config(),",
          "1016:         app.package_info(),",
          "1017:         &env,",
          "1018:         &app.config().tauri.allowlist.fs.scope,",
          "1019:       ),",
          "1020:       #[cfg(protocol_asset)]",
          "1021:       asset_protocol: FsScope::for_fs_api(",
          "1022:         &app.manager.config(),",
          "1023:         app.package_info(),",
          "1024:         &env,",
          "1025:         &app.config().tauri.allowlist.protocol.asset_scope,",
          "1026:       ),",
          "1027:     });",
          "1028:     app.manage(env);",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs": [
          "File: core/tauri/src/endpoints/file_system.rs -> core/tauri/src/endpoints/file_system.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: use super::InvokeResponse;",
          "6: use crate::{",
          "11:   Config, Env, Manager, PackageInfo, Runtime, Window,",
          "12: };",
          "14: use serde::{Deserialize, Serialize};",
          "19: #[derive(Deserialize)]",
          "",
          "[Removed Lines]",
          "7:   api::{",
          "8:     dir, file,",
          "9:     path::{resolve_path, BaseDirectory},",
          "10:   },",
          "16: use std::{fs, fs::File, io::Write, path::PathBuf, sync::Arc};",
          "",
          "[Added Lines]",
          "7:   api::{dir, file, path::BaseDirectory},",
          "8:   scope::Scopes,",
          "14: use std::{",
          "15:   fs,",
          "16:   fs::File,",
          "17:   io::Write,",
          "18:   path::{Path, PathBuf},",
          "19:   sync::Arc,",
          "20: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:     config: Arc<Config>,",
          "104:     package_info: &PackageInfo,",
          "105:   ) -> crate::Result<InvokeResponse> {",
          "107:     match self {",
          "108:       #[cfg(fs_read_text_file)]",
          "109:       Self::ReadTextFile { path, options } => {",
          "111:       }",
          "112:       #[cfg(not(fs_read_text_file))]",
          "113:       Self::ReadTextFile { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "",
          "[Removed Lines]",
          "106:     let env = window.state::<Env>().inner();",
          "110:         read_text_file(&config, package_info, env, path, options).map(Into::into)",
          "",
          "[Added Lines]",
          "113:         read_text_file(&config, package_info, &window, path, options).map(Into::into)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:       #[cfg(fs_read_binary_file)]",
          "118:       Self::ReadBinaryFile { path, options } => {",
          "120:       }",
          "121:       #[cfg(not(fs_read_binary_file))]",
          "122:       Self::ReadBinaryFile { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "",
          "[Removed Lines]",
          "119:         read_binary_file(&config, package_info, env, path, options).map(Into::into)",
          "",
          "[Added Lines]",
          "122:         read_binary_file(&config, package_info, &window, path, options).map(Into::into)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "128:         path,",
          "129:         contents,",
          "130:         options,",
          "132:       #[cfg(not(fs_write_file))]",
          "133:       Self::WriteFile { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "134:         \"fs > writeFile\".to_string(),",
          "",
          "[Removed Lines]",
          "131:       } => write_file(&config, package_info, env, path, contents, options).map(Into::into),",
          "",
          "[Added Lines]",
          "134:       } => write_file(&config, package_info, &window, path, contents, options).map(Into::into),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "139:         path,",
          "140:         contents,",
          "141:         options,",
          "143:       #[cfg(not(fs_write_binary_file))]",
          "144:       Self::WriteBinaryFile { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "145:         \"writeBinaryFile\".to_string(),",
          "",
          "[Removed Lines]",
          "142:       } => write_binary_file(&config, package_info, env, path, contents, options).map(Into::into),",
          "",
          "[Added Lines]",
          "145:       } => {",
          "146:         write_binary_file(&config, package_info, &window, path, contents, options).map(Into::into)",
          "147:       }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "148:       #[cfg(fs_read_dir)]",
          "149:       Self::ReadDir { path, options } => {",
          "151:       }",
          "152:       #[cfg(not(fs_read_dir))]",
          "153:       Self::ReadDir { .. } => Err(crate::Error::ApiNotAllowlisted(\"fs > readDir\".to_string())),",
          "",
          "[Removed Lines]",
          "150:         read_dir(&config, package_info, env, path, options).map(Into::into)",
          "",
          "[Added Lines]",
          "155:         read_dir(&config, package_info, &window, path, options).map(Into::into)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "157:         source,",
          "158:         destination,",
          "159:         options,",
          "161:       #[cfg(not(fs_copy_file))]",
          "162:       Self::CopyFile { .. } => Err(crate::Error::ApiNotAllowlisted(\"fs > copyFile\".to_string())),",
          "164:       #[cfg(fs_create_dir)]",
          "165:       Self::CreateDir { path, options } => {",
          "167:       }",
          "168:       #[cfg(not(fs_create_dir))]",
          "169:       Self::CreateDir { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "",
          "[Removed Lines]",
          "160:       } => copy_file(&config, package_info, env, source, destination, options).map(Into::into),",
          "166:         create_dir(&config, package_info, env, path, options).map(Into::into)",
          "",
          "[Added Lines]",
          "165:       } => copy_file(&config, package_info, &window, source, destination, options).map(Into::into),",
          "171:         create_dir(&config, package_info, &window, path, options).map(Into::into)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "173:       #[cfg(fs_remove_dir)]",
          "174:       Self::RemoveDir { path, options } => {",
          "176:       }",
          "177:       #[cfg(not(fs_remove_dir))]",
          "178:       Self::RemoveDir { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "",
          "[Removed Lines]",
          "175:         remove_dir(&config, package_info, env, path, options).map(Into::into)",
          "",
          "[Added Lines]",
          "180:         remove_dir(&config, package_info, &window, path, options).map(Into::into)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "182:       #[cfg(fs_remove_file)]",
          "183:       Self::RemoveFile { path, options } => {",
          "185:       }",
          "186:       #[cfg(not(fs_remove_file))]",
          "187:       Self::RemoveFile { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "",
          "[Removed Lines]",
          "184:         remove_file(&config, package_info, env, path, options).map(Into::into)",
          "",
          "[Added Lines]",
          "189:         remove_file(&config, package_info, &window, path, options).map(Into::into)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "193:         old_path,",
          "194:         new_path,",
          "195:         options,",
          "197:       #[cfg(not(fs_rename_file))]",
          "198:       Self::RenameFile { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "199:         \"fs > renameFile\".to_string(),",
          "",
          "[Removed Lines]",
          "196:       } => rename_file(&config, package_info, env, old_path, new_path, options).map(Into::into),",
          "",
          "[Added Lines]",
          "201:       } => rename_file(&config, package_info, &window, old_path, new_path, options).map(Into::into),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "202:   }",
          "203: }",
          "206: #[cfg(fs_read_dir)]",
          "208:   config: &Config,",
          "209:   package_info: &PackageInfo,",
          "211:   path: PathBuf,",
          "212:   options: Option<DirOperationOptions>,",
          "213: ) -> crate::Result<Vec<dir::DiskEntry>> {",
          "",
          "[Removed Lines]",
          "207: pub fn read_dir(",
          "210:   env: &Env,",
          "",
          "[Added Lines]",
          "210: #[allow(dead_code)]",
          "211: fn resolve_path<R: Runtime, P: AsRef<Path>>(",
          "212:   config: &Config,",
          "213:   package_info: &PackageInfo,",
          "214:   window: &Window<R>,",
          "215:   path: P,",
          "216:   dir: Option<BaseDirectory>,",
          "217: ) -> crate::Result<PathBuf> {",
          "218:   let env = window.state::<Env>().inner();",
          "219:   match crate::api::path::resolve_path(config, package_info, env, path, dir) {",
          "220:     Ok(path) => {",
          "221:       if window.state::<Scopes>().fs.is_allowed(&path) {",
          "222:         Ok(path)",
          "223:       } else {",
          "224:         Err(crate::Error::PathNotAllowed(path))",
          "225:       }",
          "226:     }",
          "227:     Err(e) => Err(e.into()),",
          "228:   }",
          "229: }",
          "233: pub fn read_dir<R: Runtime>(",
          "236:   window: &Window<R>,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "217:     (false, None)",
          "218:   };",
          "219:   dir::read_dir(",
          "221:     recursive,",
          "222:   )",
          "223:   .map_err(crate::Error::FailedToExecuteApi)",
          "",
          "[Removed Lines]",
          "220:     resolve_path(config, package_info, env, path, dir)?,",
          "",
          "[Added Lines]",
          "246:     resolve_path(config, package_info, window, path, dir)?,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "227: #[cfg(fs_copy_file)]",
          "229:   config: &Config,",
          "230:   package_info: &PackageInfo,",
          "232:   source: PathBuf,",
          "233:   destination: PathBuf,",
          "234:   options: Option<FileOperationOptions>,",
          "235: ) -> crate::Result<()> {",
          "236:   let (src, dest) = match options.and_then(|o| o.dir) {",
          "237:     Some(dir) => (",
          "240:     ),",
          "241:     None => (source, destination),",
          "242:   };",
          "",
          "[Removed Lines]",
          "228: pub fn copy_file(",
          "231:   env: &Env,",
          "238:       resolve_path(config, package_info, env, source, Some(dir.clone()))?,",
          "239:       resolve_path(config, package_info, env, destination, Some(dir))?,",
          "",
          "[Added Lines]",
          "254: pub fn copy_file<R: Runtime>(",
          "257:   window: &Window<R>,",
          "264:       resolve_path(config, package_info, window, source, Some(dir.clone()))?,",
          "265:       resolve_path(config, package_info, window, destination, Some(dir))?,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "248: #[cfg(fs_create_dir)]",
          "250:   config: &Config,",
          "251:   package_info: &PackageInfo,",
          "253:   path: PathBuf,",
          "254:   options: Option<DirOperationOptions>,",
          "255: ) -> crate::Result<()> {",
          "",
          "[Removed Lines]",
          "249: pub fn create_dir(",
          "252:   env: &Env,",
          "",
          "[Added Lines]",
          "275: pub fn create_dir<R: Runtime>(",
          "278:   window: &Window<R>,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "258:   } else {",
          "259:     (false, None)",
          "260:   };",
          "262:   if recursive {",
          "263:     fs::create_dir_all(resolved_path)?;",
          "264:   } else {",
          "",
          "[Removed Lines]",
          "261:   let resolved_path = resolve_path(config, package_info, env, path, dir)?;",
          "",
          "[Added Lines]",
          "287:   let resolved_path = resolve_path(config, package_info, window, path, dir)?;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "272: #[cfg(fs_remove_dir)]",
          "274:   config: &Config,",
          "275:   package_info: &PackageInfo,",
          "277:   path: PathBuf,",
          "278:   options: Option<DirOperationOptions>,",
          "279: ) -> crate::Result<()> {",
          "",
          "[Removed Lines]",
          "273: pub fn remove_dir(",
          "276:   env: &Env,",
          "",
          "[Added Lines]",
          "299: pub fn remove_dir<R: Runtime>(",
          "302:   window: &Window<R>,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "282:   } else {",
          "283:     (false, None)",
          "284:   };",
          "286:   if recursive {",
          "287:     fs::remove_dir_all(resolved_path)?;",
          "288:   } else {",
          "",
          "[Removed Lines]",
          "285:   let resolved_path = resolve_path(config, package_info, env, path, dir)?;",
          "",
          "[Added Lines]",
          "311:   let resolved_path = resolve_path(config, package_info, window, path, dir)?;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "296: #[cfg(fs_remove_file)]",
          "298:   config: &Config,",
          "299:   package_info: &PackageInfo,",
          "301:   path: PathBuf,",
          "302:   options: Option<FileOperationOptions>,",
          "303: ) -> crate::Result<()> {",
          "305:   fs::remove_file(resolved_path)?;",
          "306:   Ok(())",
          "307: }",
          "310: #[cfg(fs_rename_file)]",
          "312:   config: &Config,",
          "313:   package_info: &PackageInfo,",
          "315:   old_path: PathBuf,",
          "316:   new_path: PathBuf,",
          "317:   options: Option<FileOperationOptions>,",
          "318: ) -> crate::Result<()> {",
          "319:   let (old, new) = match options.and_then(|o| o.dir) {",
          "320:     Some(dir) => (",
          "323:     ),",
          "324:     None => (old_path, new_path),",
          "325:   };",
          "",
          "[Removed Lines]",
          "297: pub fn remove_file(",
          "300:   env: &Env,",
          "304:   let resolved_path = resolve_path(config, package_info, env, path, options.and_then(|o| o.dir))?;",
          "311: pub fn rename_file(",
          "314:   env: &Env,",
          "321:       resolve_path(config, package_info, env, old_path, Some(dir.clone()))?,",
          "322:       resolve_path(config, package_info, env, new_path, Some(dir))?,",
          "",
          "[Added Lines]",
          "323: pub fn remove_file<R: Runtime>(",
          "326:   window: &Window<R>,",
          "330:   let resolved_path = resolve_path(",
          "331:     config,",
          "332:     package_info,",
          "333:     window,",
          "334:     path,",
          "335:     options.and_then(|o| o.dir),",
          "336:   )?;",
          "343: pub fn rename_file<R: Runtime>(",
          "346:   window: &Window<R>,",
          "353:       resolve_path(config, package_info, window, old_path, Some(dir.clone()))?,",
          "354:       resolve_path(config, package_info, window, new_path, Some(dir))?,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "330: #[cfg(fs_write_file)]",
          "332:   config: &Config,",
          "333:   package_info: &PackageInfo,",
          "335:   path: PathBuf,",
          "336:   contents: String,",
          "337:   options: Option<FileOperationOptions>,",
          "",
          "[Removed Lines]",
          "331: pub fn write_file(",
          "334:   env: &Env,",
          "",
          "[Added Lines]",
          "363: pub fn write_file<R: Runtime>(",
          "366:   window: &Window<R>,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "339:   File::create(resolve_path(",
          "340:     config,",
          "341:     package_info,",
          "343:     path,",
          "344:     options.and_then(|o| o.dir),",
          "345:   )?)",
          "",
          "[Removed Lines]",
          "342:     env,",
          "",
          "[Added Lines]",
          "374:     window,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "352: #[cfg(fs_write_binary_file)]",
          "354:   config: &Config,",
          "355:   package_info: &PackageInfo,",
          "357:   path: PathBuf,",
          "358:   contents: String,",
          "359:   options: Option<FileOperationOptions>,",
          "",
          "[Removed Lines]",
          "353: pub fn write_binary_file(",
          "356:   env: &Env,",
          "",
          "[Added Lines]",
          "385: pub fn write_binary_file<R: Runtime>(",
          "388:   window: &Window<R>,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "364:       File::create(resolve_path(",
          "365:         config,",
          "366:         package_info,",
          "368:         path,",
          "369:         options.and_then(|o| o.dir),",
          "370:       )?)",
          "",
          "[Removed Lines]",
          "367:         env,",
          "",
          "[Added Lines]",
          "399:         window,",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "378: #[cfg(fs_read_text_file)]",
          "380:   config: &Config,",
          "381:   package_info: &PackageInfo,",
          "383:   path: PathBuf,",
          "384:   options: Option<FileOperationOptions>,",
          "385: ) -> crate::Result<String> {",
          "386:   file::read_string(resolve_path(",
          "387:     config,",
          "388:     package_info,",
          "390:     path,",
          "391:     options.and_then(|o| o.dir),",
          "392:   )?)",
          "",
          "[Removed Lines]",
          "379: pub fn read_text_file(",
          "382:   env: &Env,",
          "389:     env,",
          "",
          "[Added Lines]",
          "411: pub fn read_text_file<R: Runtime>(",
          "414:   window: &Window<R>,",
          "421:     window,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "397: #[cfg(fs_read_binary_file)]",
          "399:   config: &Config,",
          "400:   package_info: &PackageInfo,",
          "402:   path: PathBuf,",
          "403:   options: Option<FileOperationOptions>,",
          "404: ) -> crate::Result<Vec<u8>> {",
          "405:   file::read_binary(resolve_path(",
          "406:     config,",
          "407:     package_info,",
          "409:     path,",
          "410:     options.and_then(|o| o.dir),",
          "411:   )?)",
          "",
          "[Removed Lines]",
          "398: pub fn read_binary_file(",
          "401:   env: &Env,",
          "408:     env,",
          "",
          "[Added Lines]",
          "430: pub fn read_binary_file<R: Runtime>(",
          "433:   window: &Window<R>,",
          "440:     window,",
          "",
          "---------------"
        ],
        "core/tauri/src/error.rs||core/tauri/src/error.rs": [
          "File: core/tauri/src/error.rs -> core/tauri/src/error.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   #[error(transparent)]",
          "86:   JoinError(Box<dyn std::error::Error + Send>),",
          "87: }",
          "89: impl From<serde_json::Error> for Error {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:   #[error(\"path not allowed on the configured scope: {0}\")]",
          "89:   PathNotAllowed(PathBuf),",
          "",
          "---------------"
        ],
        "core/tauri/src/lib.rs||core/tauri/src/lib.rs": [
          "File: core/tauri/src/lib.rs -> core/tauri/src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: pub mod plugin;",
          "43: pub mod window;",
          "44: pub use tauri_runtime as runtime;",
          "45: pub mod settings;",
          "46: mod state;",
          "47: #[cfg(feature = \"updater\")]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: mod scope;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:     Env, PackageInfo,",
          "113:   },",
          "114:   self::window::{Monitor, Window},",
          "115: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:   scope::*,",
          "",
          "---------------"
        ],
        "core/tauri/src/manager.rs||core/tauri/src/manager.rs": [
          "File: core/tauri/src/manager.rs -> core/tauri/src/manager.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:   plugin::PluginStore,",
          "10:   runtime::{",
          "11:     http::{",
          "13:       ResponseBuilder as HttpResponseBuilder,",
          "14:     },",
          "15:     webview::{FileDropEvent, FileDropHandler, InvokePayload, WebviewIpcHandler, WindowBuilder},",
          "",
          "[Removed Lines]",
          "12:       HttpRange, MimeType, Request as HttpRequest, Response as HttpResponse,",
          "",
          "[Added Lines]",
          "12:       MimeType, Request as HttpRequest, Response as HttpResponse,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: use regex::{Captures, Regex};",
          "35: use serde::Serialize;",
          "36: use serde_json::Value as JsonValue;",
          "37: use std::{",
          "38:   borrow::Cow,",
          "39:   collections::{HashMap, HashSet},",
          "40:   fmt,",
          "41:   fs::create_dir_all,",
          "43:   sync::{Arc, Mutex, MutexGuard},",
          "44: };",
          "45: use tauri_macros::default_runtime;",
          "46: use tauri_utils::{",
          "47:   assets::{AssetKey, CspHash},",
          "48:   html::{CSP_TOKEN, INVOKE_KEY_TOKEN, SCRIPT_NONCE_TOKEN, STYLE_NONCE_TOKEN},",
          "49: };",
          "50: use tokio::io::{AsyncReadExt, AsyncSeekExt};",
          "53: const WINDOW_RESIZED_EVENT: &str = \"tauri://resize\";",
          "54: const WINDOW_MOVED_EVENT: &str = \"tauri://move\";",
          "",
          "[Removed Lines]",
          "42:   io::SeekFrom,",
          "51: use url::{Position, Url};",
          "",
          "[Added Lines]",
          "37: #[cfg(protocol_asset)]",
          "38: use std::io::SeekFrom;",
          "47: #[cfg(protocol_asset)]",
          "48: use tauri_runtime::http::HttpRange;",
          "53: #[cfg(protocol_asset)]",
          "55: #[cfg(protocol_asset)]",
          "56: use url::Position;",
          "57: use url::Url;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "360:       pending.register_uri_scheme_protocol(\"tauri\", self.prepare_uri_scheme_protocol());",
          "361:       registered_scheme_protocols.push(\"tauri\".into());",
          "362:     }",
          "363:     if !registered_scheme_protocols.contains(&\"asset\".into()) {",
          "364:       let window_url = Url::parse(&pending.url).unwrap();",
          "365:       let window_origin =",
          "366:         if cfg!(windows) && window_url.scheme() != \"http\" && window_url.scheme() != \"https\" {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "370:     #[cfg(protocol_asset)]",
          "372:       let asset_scope = self.state().get::<crate::Scopes>().asset_protocol.clone();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "387:         let path = percent_encoding::percent_decode(path.as_bytes())",
          "388:           .decode_utf8_lossy()",
          "389:           .to_string();",
          "390:         let path_for_data = path.clone();",
          "392:         let mut response =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "400:         if !asset_scope.is_allowed(&path) {",
          "401:           return HttpResponseBuilder::new()",
          "402:             .status(403)",
          "403:             .body(Vec::with_capacity(0));",
          "404:         }",
          "",
          "---------------"
        ],
        "core/tauri/src/scope/fs.rs||core/tauri/src/scope/fs.rs": [
          "File: core/tauri/src/scope/fs.rs -> core/tauri/src/scope/fs.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: use std::{fmt, path::Path};",
          "7: use glob::Pattern;",
          "8: use tauri_utils::{",
          "9:   config::{Config, FsAllowlistScope},",
          "10:   Env, PackageInfo,",
          "11: };",
          "13: use crate::api::path::parse as parse_path;",
          "16: #[derive(Clone)]",
          "17: pub struct Scope {",
          "18:   allow_patterns: Vec<Pattern>,",
          "19: }",
          "21: impl fmt::Debug for Scope {",
          "22:   fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
          "23:     f.debug_struct(\"Scope\")",
          "24:       .field(",
          "25:         \"allow_patterns\",",
          "26:         &self",
          "27:           .allow_patterns",
          "28:           .iter()",
          "29:           .map(|p| p.as_str())",
          "30:           .collect::<Vec<&str>>(),",
          "31:       )",
          "32:       .finish()",
          "33:   }",
          "34: }",
          "36: impl Scope {",
          "38:   pub fn for_fs_api(",
          "39:     config: &Config,",
          "40:     package_info: &PackageInfo,",
          "41:     env: &Env,",
          "42:     scope: &FsAllowlistScope,",
          "43:   ) -> Self {",
          "44:     let mut allow_patterns = Vec::new();",
          "45:     for path in &scope.0 {",
          "46:       if let Ok(path) = parse_path(config, package_info, env, path) {",
          "47:         allow_patterns.push(Pattern::new(&path.to_string_lossy()).expect(\"invalid glob pattern\"));",
          "48:         #[cfg(windows)]",
          "49:         {",
          "50:           allow_patterns.push(",
          "51:             Pattern::new(&format!(\"\\\\\\\\?\\\\{}\", path.display())).expect(\"invalid glob pattern\"),",
          "52:           );",
          "53:         }",
          "54:       }",
          "55:     }",
          "56:     Self { allow_patterns }",
          "57:   }",
          "60:   pub fn is_allowed<P: AsRef<Path>>(&self, path: P) -> bool {",
          "61:     let path = path.as_ref();",
          "62:     let path = if !path.exists() {",
          "63:       crate::Result::Ok(path.to_path_buf())",
          "64:     } else {",
          "65:       std::fs::canonicalize(path).map_err(Into::into)",
          "66:     };",
          "68:     if let Ok(path) = path {",
          "69:       let allowed = self.allow_patterns.iter().any(|p| p.matches_path(&path));",
          "70:       allowed",
          "71:     } else {",
          "72:       false",
          "73:     }",
          "74:   }",
          "75: }",
          "",
          "---------------"
        ],
        "core/tauri/src/scope/mod.rs||core/tauri/src/scope/mod.rs": [
          "File: core/tauri/src/scope/mod.rs -> core/tauri/src/scope/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: mod fs;",
          "6: mod shell;",
          "8: pub use fs::Scope as FsScope;",
          "9: pub use shell::Scope as ShellScope;",
          "11: pub(crate) struct Scopes {",
          "12:   pub fs: FsScope,",
          "13:   #[cfg(protocol_asset)]",
          "14:   pub asset_protocol: FsScope,",
          "15: }",
          "",
          "---------------"
        ],
        "core/tauri/src/scope/shell.rs||core/tauri/src/scope/shell.rs": [
          "File: core/tauri/src/scope/shell.rs -> core/tauri/src/scope/shell.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: pub struct Scope();",
          "",
          "---------------"
        ],
        "core/tauri/src/updater/core.rs||core/tauri/src/updater/core.rs": [
          "File: core/tauri/src/updater/core.rs -> core/tauri/src/updater/core.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "721: }",
          "724: pub fn extract_path_from_executable(env: &Env, executable_path: &Path) -> PathBuf {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "724: #[allow(unused_variables)]",
          "",
          "---------------"
        ],
        "examples/api/src-tauri/Cargo.lock||examples/api/src-tauri/Cargo.lock": [
          "File: examples/api/src-tauri/Cargo.lock -> examples/api/src-tauri/Cargo.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "1219:  \"system-deps 3.2.0\",",
          "1220: ]",
          "1222: [[package]]",
          "1223: name = \"globset\"",
          "1224: version = \"0.4.8\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1222: [[package]]",
          "1223: name = \"glob\"",
          "1224: version = \"0.3.0\"",
          "1225: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1226: checksum = \"9b919933a397b79c37e33b77bb2aa3dc8eb6e165ad809e58ff75bc7db2e34574\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3044:  \"futures\",",
          "3045:  \"futures-lite\",",
          "3046:  \"glib\",",
          "3047:  \"gtk\",",
          "3048:  \"http\",",
          "3049:  \"ignore\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3053:  \"glob\",",
          "",
          "---------------"
        ],
        "tooling/api/src/tauri.ts||tooling/api/src/tauri.ts": [
          "File: tooling/api/src/tauri.ts -> tooling/api/src/tauri.ts"
        ],
        "tooling/cli.rs/src/helpers/config.rs||tooling/cli.rs/src/helpers/config.rs": [
          "File: tooling/cli.rs/src/helpers/config.rs -> tooling/cli.rs/src/helpers/config.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:   get_internal(merge_config, true)?;",
          "111:   Ok(())",
          "112: }",
          "",
          "[Removed Lines]",
          "114: pub fn all_allowlist_features() -> Vec<&'static str> {",
          "115:   AllowlistConfig {",
          "116:     all: true,",
          "117:     fs: FsAllowlistConfig {",
          "118:       all: true,",
          "119:       read_text_file: true,",
          "120:       read_binary_file: true,",
          "121:       write_file: true,",
          "122:       write_binary_file: true,",
          "123:       read_dir: true,",
          "124:       copy_file: true,",
          "125:       create_dir: true,",
          "126:       remove_dir: true,",
          "127:       remove_file: true,",
          "128:       rename_file: true,",
          "129:     },",
          "130:     window: WindowAllowlistConfig {",
          "131:       all: true,",
          "132:       create: true,",
          "133:     },",
          "134:     shell: ShellAllowlistConfig {",
          "135:       all: true,",
          "136:       execute: true,",
          "137:       open: true,",
          "138:     },",
          "139:     dialog: DialogAllowlistConfig {",
          "140:       all: true,",
          "141:       open: true,",
          "142:       save: true,",
          "143:     },",
          "144:     http: HttpAllowlistConfig {",
          "145:       all: true,",
          "146:       request: true,",
          "147:     },",
          "148:     notification: NotificationAllowlistConfig { all: true },",
          "149:     global_shortcut: GlobalShortcutAllowlistConfig { all: true },",
          "150:     os: OsAllowlistConfig { all: true },",
          "151:     path: PathAllowlistConfig { all: true },",
          "152:   }",
          "153:   .to_features()",
          "154: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tooling/cli.rs/src/helpers/manifest.rs||tooling/cli.rs/src/helpers/manifest.rs": [
          "File: tooling/cli.rs/src/helpers/manifest.rs -> tooling/cli.rs/src/helpers/manifest.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: use anyhow::Context;",
          "11: use toml_edit::{Array, Document, InlineTable, Item, Table, Value};",
          "13: use std::{",
          "",
          "[Removed Lines]",
          "5: use super::{",
          "6:   app_paths::tauri_dir,",
          "7:   config::{all_allowlist_features, ConfigHandle},",
          "8: };",
          "",
          "[Added Lines]",
          "5: use super::{app_paths::tauri_dir, config::ConfigHandle};",
          "8: use tauri_utils::config::Allowlist;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:   let mut features = HashSet::from_iter(config.tauri.features().into_iter().map(|f| f.to_string()));",
          "68:   cli_managed_features.extend(vec![\"cli\", \"updater\", \"system-tray\"]);",
          "70:   if let Some(tauri) = tauri_item.as_table_mut() {",
          "",
          "[Removed Lines]",
          "67:   let mut cli_managed_features = all_allowlist_features();",
          "",
          "[Added Lines]",
          "65:   let mut cli_managed_features = super::config::AllowlistConfig::all_features();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6918efdaf386e0b1075d80430da8e807b10541f",
      "candidate_info": {
        "commit_hash": "d6918efdaf386e0b1075d80430da8e807b10541f",
        "repo": "tauri-apps/tauri",
        "commit_url": "https://github.com/tauri-apps/tauri/commit/d6918efdaf386e0b1075d80430da8e807b10541f",
        "files": [
          "core/tauri-macros/src/command_module.rs",
          "core/tauri/Cargo.toml",
          "core/tauri/src/endpoints.rs",
          "core/tauri/src/endpoints/app.rs",
          "core/tauri/src/endpoints/cli.rs",
          "core/tauri/src/endpoints/clipboard.rs",
          "core/tauri/src/endpoints/dialog.rs",
          "core/tauri/src/endpoints/event.rs",
          "core/tauri/src/endpoints/file_system.rs",
          "core/tauri/src/endpoints/global_shortcut.rs",
          "core/tauri/src/endpoints/http.rs",
          "core/tauri/src/endpoints/notification.rs",
          "core/tauri/src/endpoints/operating_system.rs",
          "core/tauri/src/endpoints/path.rs",
          "core/tauri/src/endpoints/process.rs",
          "core/tauri/src/endpoints/shell.rs",
          "core/tauri/src/endpoints/window.rs",
          "core/tauri/src/error.rs",
          "core/tauri/src/hooks.rs",
          "core/tauri/src/lib.rs"
        ],
        "message": "refactor(core): use anyhow for endpoint errors, ref #3457 (#3467)",
        "before_after_code_files": [
          "core/tauri-macros/src/command_module.rs||core/tauri-macros/src/command_module.rs",
          "core/tauri/src/endpoints.rs||core/tauri/src/endpoints.rs",
          "core/tauri/src/endpoints/app.rs||core/tauri/src/endpoints/app.rs",
          "core/tauri/src/endpoints/cli.rs||core/tauri/src/endpoints/cli.rs",
          "core/tauri/src/endpoints/clipboard.rs||core/tauri/src/endpoints/clipboard.rs",
          "core/tauri/src/endpoints/dialog.rs||core/tauri/src/endpoints/dialog.rs",
          "core/tauri/src/endpoints/event.rs||core/tauri/src/endpoints/event.rs",
          "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs",
          "core/tauri/src/endpoints/global_shortcut.rs||core/tauri/src/endpoints/global_shortcut.rs",
          "core/tauri/src/endpoints/http.rs||core/tauri/src/endpoints/http.rs",
          "core/tauri/src/endpoints/notification.rs||core/tauri/src/endpoints/notification.rs",
          "core/tauri/src/endpoints/operating_system.rs||core/tauri/src/endpoints/operating_system.rs",
          "core/tauri/src/endpoints/path.rs||core/tauri/src/endpoints/path.rs",
          "core/tauri/src/endpoints/process.rs||core/tauri/src/endpoints/process.rs",
          "core/tauri/src/endpoints/shell.rs||core/tauri/src/endpoints/shell.rs",
          "core/tauri/src/endpoints/window.rs||core/tauri/src/endpoints/window.rs",
          "core/tauri/src/error.rs||core/tauri/src/error.rs",
          "core/tauri/src/hooks.rs||core/tauri/src/hooks.rs",
          "core/tauri/src/lib.rs||core/tauri/src/lib.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs"
          ],
          "candidate": [
            "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs"
          ]
        }
      },
      "candidate_diff": {
        "core/tauri-macros/src/command_module.rs||core/tauri-macros/src/command_module.rs": [
          "File: core/tauri-macros/src/command_module.rs -> core/tauri-macros/src/command_module.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:   let expanded = quote! {",
          "93:       impl #impl_generics #name #ty_generics #where_clause {",
          "95:           match self {",
          "96:             #matcher",
          "97:           }",
          "",
          "[Removed Lines]",
          "94:         pub #maybe_async fn run<R: crate::Runtime>(self, context: crate::endpoints::InvokeContext<R>) -> crate::Result<crate::endpoints::InvokeResponse> {",
          "",
          "[Added Lines]",
          "94:         pub #maybe_async fn run<R: crate::Runtime>(self, context: crate::endpoints::InvokeContext<R>) -> super::Result<crate::endpoints::InvokeResponse> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160:     #[allow(unused_variables)]",
          "161:     #[allow(unused_mut)]",
          "162:     #signature {",
          "166:     }",
          "167:   )",
          "168: }",
          "",
          "[Removed Lines]",
          "163:       Err(crate::Error::ApiNotAllowlisted(",
          "164:         #error_message.to_string(),",
          "165:       ))",
          "",
          "[Added Lines]",
          "163:       Err(anyhow::anyhow!(crate::Error::ApiNotAllowlisted(#error_message.to_string()).to_string()))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "198:     #[cfg(not(#allowlist))]",
          "199:     #[quickcheck_macros::quickcheck]",
          "200:     #signature {",
          "203:       } else {",
          "204:         panic!(\"unexpected response\");",
          "205:       }",
          "",
          "[Removed Lines]",
          "201:       if let Err(crate::Error::ApiNotAllowlisted(e)) = #response {",
          "202:         assert_eq!(e, #error_message);",
          "",
          "[Added Lines]",
          "199:       if let Err(e) = #response {",
          "200:         assert!(e.to_string().contains(#error_message));",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints.rs||core/tauri/src/endpoints.rs": [
          "File: core/tauri/src/endpoints.rs -> core/tauri/src/endpoints.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   runtime::Runtime,",
          "8:   Config, Invoke, PackageInfo, Window,",
          "9: };",
          "10: use serde::{Deserialize, Serialize};",
          "11: use serde_json::Value as JsonValue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: pub use anyhow::Result;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: pub struct InvokeResponse {",
          "52: }",
          "54: impl<T: Serialize> From<T> for InvokeResponse {",
          "",
          "[Removed Lines]",
          "51:   json: crate::Result<JsonValue>,",
          "",
          "[Added Lines]",
          "52:   json: Result<JsonValue>,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:         cmd",
          "97:           .run(context)",
          "98:           .and_then(|r| r.json)",
          "100:       }),",
          "101:       Self::Process(cmd) => resolver.respond_async(async move {",
          "102:         cmd",
          "103:           .run(context)",
          "104:           .and_then(|r| r.json)",
          "106:       }),",
          "107:       Self::Fs(cmd) => resolver.respond_async(async move {",
          "108:         cmd",
          "109:           .run(context)",
          "110:           .and_then(|r| r.json)",
          "112:       }),",
          "113:       Self::Path(cmd) => resolver.respond_async(async move {",
          "114:         cmd",
          "115:           .run(context)",
          "116:           .and_then(|r| r.json)",
          "118:       }),",
          "119:       Self::Os(cmd) => resolver.respond_async(async move {",
          "120:         cmd",
          "121:           .run(context)",
          "122:           .and_then(|r| r.json)",
          "124:       }),",
          "125:       Self::Window(cmd) => resolver.respond_async(async move {",
          "126:         cmd",
          "127:           .run(context)",
          "128:           .await",
          "129:           .and_then(|r| r.json)",
          "131:       }),",
          "132:       Self::Shell(cmd) => resolver.respond_async(async move {",
          "133:         cmd",
          "134:           .run(context)",
          "135:           .and_then(|r| r.json)",
          "137:       }),",
          "138:       Self::Event(cmd) => resolver.respond_async(async move {",
          "139:         cmd",
          "140:           .run(context)",
          "141:           .and_then(|r| r.json)",
          "143:       }),",
          "144:       Self::Dialog(cmd) => resolver.respond_async(async move {",
          "145:         cmd",
          "146:           .run(context)",
          "147:           .and_then(|r| r.json)",
          "149:       }),",
          "150:       Self::Cli(cmd) => resolver.respond_async(async move {",
          "151:         cmd",
          "152:           .run(context)",
          "153:           .and_then(|r| r.json)",
          "155:       }),",
          "156:       Self::Notification(cmd) => resolver.respond_async(async move {",
          "157:         cmd",
          "158:           .run(context)",
          "159:           .and_then(|r| r.json)",
          "161:       }),",
          "162:       Self::Http(cmd) => resolver.respond_async(async move {",
          "163:         cmd",
          "164:           .run(context)",
          "165:           .await",
          "166:           .and_then(|r| r.json)",
          "168:       }),",
          "169:       Self::GlobalShortcut(cmd) => resolver.respond_async(async move {",
          "170:         cmd",
          "171:           .run(context)",
          "172:           .and_then(|r| r.json)",
          "174:       }),",
          "175:       Self::Clipboard(cmd) => resolver.respond_async(async move {",
          "176:         cmd",
          "177:           .run(context)",
          "178:           .and_then(|r| r.json)",
          "180:       }),",
          "181:     }",
          "182:   }",
          "",
          "[Removed Lines]",
          "99:           .map_err(InvokeError::from)",
          "105:           .map_err(InvokeError::from)",
          "111:           .map_err(InvokeError::from)",
          "117:           .map_err(InvokeError::from)",
          "123:           .map_err(InvokeError::from)",
          "130:           .map_err(InvokeError::from)",
          "136:           .map_err(InvokeError::from)",
          "142:           .map_err(InvokeError::from)",
          "148:           .map_err(InvokeError::from)",
          "154:           .map_err(InvokeError::from)",
          "160:           .map_err(InvokeError::from)",
          "167:           .map_err(InvokeError::from)",
          "173:           .map_err(InvokeError::from)",
          "179:           .map_err(InvokeError::from)",
          "",
          "[Added Lines]",
          "100:           .map_err(InvokeError::from_anyhow)",
          "106:           .map_err(InvokeError::from_anyhow)",
          "112:           .map_err(InvokeError::from_anyhow)",
          "118:           .map_err(InvokeError::from_anyhow)",
          "124:           .map_err(InvokeError::from_anyhow)",
          "131:           .map_err(InvokeError::from_anyhow)",
          "137:           .map_err(InvokeError::from_anyhow)",
          "143:           .map_err(InvokeError::from_anyhow)",
          "149:           .map_err(InvokeError::from_anyhow)",
          "155:           .map_err(InvokeError::from_anyhow)",
          "161:           .map_err(InvokeError::from_anyhow)",
          "168:           .map_err(InvokeError::from_anyhow)",
          "174:           .map_err(InvokeError::from_anyhow)",
          "180:           .map_err(InvokeError::from_anyhow)",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/app.rs||core/tauri/src/endpoints/app.rs": [
          "File: core/tauri/src/endpoints/app.rs -> core/tauri/src/endpoints/app.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: }",
          "23: impl Cmd {",
          "25:     Ok(context.package_info.version)",
          "26:   }",
          "29:     Ok(context.package_info.name)",
          "30:   }",
          "33:     Ok(env!(\"CARGO_PKG_VERSION\"))",
          "34:   }",
          "35: }",
          "",
          "[Removed Lines]",
          "24:   fn get_app_version<R: Runtime>(context: InvokeContext<R>) -> crate::Result<String> {",
          "28:   fn get_app_name<R: Runtime>(context: InvokeContext<R>) -> crate::Result<String> {",
          "32:   fn get_tauri_version<R: Runtime>(_context: InvokeContext<R>) -> crate::Result<&'static str> {",
          "",
          "[Added Lines]",
          "24:   fn get_app_version<R: Runtime>(context: InvokeContext<R>) -> super::Result<String> {",
          "28:   fn get_app_name<R: Runtime>(context: InvokeContext<R>) -> super::Result<String> {",
          "32:   fn get_tauri_version<R: Runtime>(_context: InvokeContext<R>) -> super::Result<&'static str> {",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/cli.rs||core/tauri/src/endpoints/cli.rs": [
          "File: core/tauri/src/endpoints/cli.rs -> core/tauri/src/endpoints/cli.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: impl Cmd {",
          "19:   #[module_command_handler(cli, \"CLI definition not set under tauri.conf.json > tauri > cli (https://tauri.studio/docs/api/config#tauri.cli)\")]",
          "21:     if let Some(cli) = &context.config.tauri.cli {",
          "22:       crate::api::cli::get_matches(cli, &context.package_info)",
          "23:         .map(Into::into)",
          "24:         .map_err(Into::into)",
          "25:     } else {",
          "27:     }",
          "28:   }",
          "29: }",
          "",
          "[Removed Lines]",
          "20:   fn cli_matches<R: Runtime>(context: InvokeContext<R>) -> crate::Result<InvokeResponse> {",
          "26:       Err(crate::Error::ApiNotAllowlisted(\"CLI definition not set under tauri.conf.json > tauri > cli (https://tauri.studio/docs/api/config#tauri.cli)\".into()))",
          "",
          "[Added Lines]",
          "20:   fn cli_matches<R: Runtime>(context: InvokeContext<R>) -> super::Result<InvokeResponse> {",
          "26:       Err(crate::Error::ApiNotAllowlisted(\"CLI definition not set under tauri.conf.json > tauri > cli (https://tauri.studio/docs/api/config#tauri.cli)\".into()).into_anyhow())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:   #[quickcheck_macros::quickcheck]",
          "35:   fn cli_matches() {",
          "36:     let res = super::Cmd::cli_matches(crate::test::mock_invoke_context());",
          "38:   }",
          "39: }",
          "",
          "[Removed Lines]",
          "37:     assert!(!matches!(res, Err(crate::Error::ApiNotAllowlisted(_))));",
          "",
          "[Added Lines]",
          "37:     crate::test_utils::assert_not_allowlist_error(res);",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/clipboard.rs||core/tauri/src/endpoints/clipboard.rs": [
          "File: core/tauri/src/endpoints/clipboard.rs -> core/tauri/src/endpoints/clipboard.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: impl Cmd {",
          "23:   #[module_command_handler(clipboard_write_text, \"clipboard > writeText\")]",
          "32:   }",
          "34:   #[module_command_handler(clipboard_read_text, \"clipboard > readText\")]",
          "37:   }",
          "38: }",
          "",
          "[Removed Lines]",
          "24:   fn write_text<R: Runtime>(context: InvokeContext<R>, text: String) -> crate::Result<()> {",
          "25:     Ok(",
          "26:       context",
          "27:         .window",
          "28:         .app_handle",
          "29:         .clipboard_manager()",
          "30:         .write_text(text)?,",
          "31:     )",
          "35:   fn read_text<R: Runtime>(context: InvokeContext<R>) -> crate::Result<Option<String>> {",
          "36:     Ok(context.window.app_handle.clipboard_manager().read_text()?)",
          "",
          "[Added Lines]",
          "24:   fn write_text<R: Runtime>(context: InvokeContext<R>, text: String) -> super::Result<()> {",
          "25:     context",
          "26:       .window",
          "27:       .app_handle",
          "28:       .clipboard_manager()",
          "29:       .write_text(text)",
          "30:       .map_err(crate::error::into_anyhow)",
          "34:   fn read_text<R: Runtime>(context: InvokeContext<R>) -> super::Result<Option<String>> {",
          "35:     context",
          "36:       .window",
          "37:       .app_handle",
          "38:       .clipboard_manager()",
          "39:       .read_text()",
          "40:       .map_err(crate::error::into_anyhow)",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/dialog.rs||core/tauri/src/endpoints/dialog.rs": [
          "File: core/tauri/src/endpoints/dialog.rs -> core/tauri/src/endpoints/dialog.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:   fn open_dialog<R: Runtime>(",
          "84:     context: InvokeContext<R>,",
          "85:     options: OpenDialogOptions,",
          "87:     let mut dialog_builder = FileDialogBuilder::new();",
          "88:     #[cfg(any(windows, target_os = \"macos\"))]",
          "89:     {",
          "",
          "[Removed Lines]",
          "86:   ) -> crate::Result<InvokeResponse> {",
          "",
          "[Added Lines]",
          "86:   ) -> super::Result<InvokeResponse> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:   fn save_dialog<R: Runtime>(",
          "114:     context: InvokeContext<R>,",
          "115:     options: SaveDialogOptions,",
          "117:     let mut dialog_builder = FileDialogBuilder::new();",
          "118:     #[cfg(any(windows, target_os = \"macos\"))]",
          "119:     {",
          "",
          "[Removed Lines]",
          "116:   ) -> crate::Result<Option<PathBuf>> {",
          "",
          "[Added Lines]",
          "116:   ) -> super::Result<Option<PathBuf>> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:   }",
          "133:   #[module_command_handler(dialog_message, \"dialog > message\")]",
          "135:     crate::api::dialog::blocking::message(",
          "136:       Some(&context.window),",
          "137:       &context.window.app_handle.package_info().name,",
          "",
          "[Removed Lines]",
          "134:   fn message_dialog<R: Runtime>(context: InvokeContext<R>, message: String) -> crate::Result<()> {",
          "",
          "[Added Lines]",
          "134:   fn message_dialog<R: Runtime>(context: InvokeContext<R>, message: String) -> super::Result<()> {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "145:     context: InvokeContext<R>,",
          "146:     title: Option<String>,",
          "147:     message: String,",
          "149:     Ok(crate::api::dialog::blocking::ask(",
          "150:       Some(&context.window),",
          "151:       title.unwrap_or_else(|| context.window.app_handle.package_info().name.clone()),",
          "",
          "[Removed Lines]",
          "148:   ) -> crate::Result<bool> {",
          "",
          "[Added Lines]",
          "148:   ) -> super::Result<bool> {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "158:     context: InvokeContext<R>,",
          "159:     title: Option<String>,",
          "160:     message: String,",
          "162:     Ok(crate::api::dialog::blocking::confirm(",
          "163:       Some(&context.window),",
          "164:       title.unwrap_or_else(|| context.window.app_handle.package_info().name.clone()),",
          "",
          "[Removed Lines]",
          "161:   ) -> crate::Result<bool> {",
          "",
          "[Added Lines]",
          "161:   ) -> super::Result<bool> {",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/event.rs||core/tauri/src/endpoints/event.rs": [
          "File: core/tauri/src/endpoints/event.rs -> core/tauri/src/endpoints/event.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     event: EventId,",
          "81:     window_label: Option<WindowLabel>,",
          "82:     handler: CallbackFn,",
          "84:     let event_id = rand::random();",
          "86:     let window_label = window_label.map(|l| l.0);",
          "96:     context",
          "97:       .window",
          "",
          "[Removed Lines]",
          "83:   ) -> crate::Result<u64> {",
          "88:     context.window.eval(&listen_js(",
          "89:       context.window.manager().event_listeners_object_name(),",
          "90:       format!(\"'{}'\", event.0),",
          "91:       event_id,",
          "92:       window_label.clone(),",
          "93:       format!(\"window['_{}']\", handler.0),",
          "94:     ))?;",
          "",
          "[Added Lines]",
          "83:   ) -> super::Result<u64> {",
          "88:     context",
          "89:       .window",
          "90:       .eval(&listen_js(",
          "91:         context.window.manager().event_listeners_object_name(),",
          "92:         format!(\"'{}'\", event.0),",
          "93:         event_id,",
          "94:         window_label.clone(),",
          "95:         format!(\"window['_{}']\", handler.0),",
          "96:       ))",
          "97:       .map_err(crate::error::into_anyhow)?;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:     Ok(event_id)",
          "101:   }",
          "108:     context.window.unregister_js_listener(event_id);",
          "109:     Ok(())",
          "110:   }",
          "",
          "[Removed Lines]",
          "103:   fn unlisten<R: Runtime>(context: InvokeContext<R>, event_id: u64) -> crate::Result<()> {",
          "104:     context.window.eval(&unlisten_js(",
          "105:       context.window.manager().event_listeners_object_name(),",
          "106:       event_id,",
          "107:     ))?;",
          "",
          "[Added Lines]",
          "106:   fn unlisten<R: Runtime>(context: InvokeContext<R>, event_id: u64) -> super::Result<()> {",
          "107:     context",
          "108:       .window",
          "109:       .eval(&unlisten_js(",
          "110:         context.window.manager().event_listeners_object_name(),",
          "111:         event_id,",
          "112:       ))",
          "113:       .map_err(crate::error::into_anyhow)?;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114:     event: EventId,",
          "115:     window_label: Option<WindowLabel>,",
          "116:     payload: Option<String>,",
          "119:     context.window.trigger(&event.0, payload.clone());",
          "121:     if let Some(target) = window_label {",
          "123:     } else {",
          "125:     }",
          "126:     Ok(())",
          "127:   }",
          "",
          "[Removed Lines]",
          "117:   ) -> crate::Result<()> {",
          "122:       context.window.emit_to(&target.0, &event.0, payload)?;",
          "124:       context.window.emit_all(&event.0, payload)?;",
          "",
          "[Added Lines]",
          "123:   ) -> super::Result<()> {",
          "128:       context",
          "129:         .window",
          "130:         .emit_to(&target.0, &event.0, payload)",
          "131:         .map_err(crate::error::into_anyhow)?;",
          "133:       context",
          "134:         .window",
          "135:         .emit_all(&event.0, payload)",
          "136:         .map_err(crate::error::into_anyhow)?;",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs": [
          "File: core/tauri/src/endpoints/file_system.rs -> core/tauri/src/endpoints/file_system.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:     context: InvokeContext<R>,",
          "128:     path: SafePathBuf,",
          "129:     options: Option<FileOperationOptions>,",
          "131:     file::read_binary(resolve_path(",
          "132:       &context.config,",
          "133:       &context.package_info,",
          "",
          "[Removed Lines]",
          "130:   ) -> crate::Result<Vec<u8>> {",
          "",
          "[Added Lines]",
          "130:   ) -> super::Result<Vec<u8>> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:       path,",
          "136:       options.and_then(|o| o.dir),",
          "137:     )?)",
          "139:   }",
          "141:   #[module_command_handler(fs_write_file, \"fs > writeFile\")]",
          "",
          "[Removed Lines]",
          "138:     .map_err(crate::Error::FailedToExecuteApi)",
          "",
          "[Added Lines]",
          "138:     .map_err(Into::into)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:     path: SafePathBuf,",
          "145:     contents: Vec<u8>,",
          "146:     options: Option<FileOperationOptions>,",
          "148:     File::create(resolve_path(",
          "149:       &context.config,",
          "150:       &context.package_info,",
          "",
          "[Removed Lines]",
          "147:   ) -> crate::Result<()> {",
          "",
          "[Added Lines]",
          "147:   ) -> super::Result<()> {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "161:     context: InvokeContext<R>,",
          "162:     path: SafePathBuf,",
          "163:     options: Option<DirOperationOptions>,",
          "165:     let (recursive, dir) = if let Some(options_value) = options {",
          "166:       (options_value.recursive, options_value.dir)",
          "167:     } else {",
          "",
          "[Removed Lines]",
          "164:   ) -> crate::Result<Vec<dir::DiskEntry>> {",
          "",
          "[Added Lines]",
          "164:   ) -> super::Result<Vec<dir::DiskEntry>> {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "177:       )?,",
          "178:       recursive,",
          "179:     )",
          "181:   }",
          "183:   #[module_command_handler(fs_copy_file, \"fs > copyFile\")]",
          "",
          "[Removed Lines]",
          "180:     .map_err(crate::Error::FailedToExecuteApi)",
          "",
          "[Added Lines]",
          "180:     .map_err(Into::into)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "186:     source: SafePathBuf,",
          "187:     destination: SafePathBuf,",
          "188:     options: Option<FileOperationOptions>,",
          "190:     let (src, dest) = match options.and_then(|o| o.dir) {",
          "191:       Some(dir) => (",
          "192:         resolve_path(",
          "",
          "[Removed Lines]",
          "189:   ) -> crate::Result<()> {",
          "",
          "[Added Lines]",
          "189:   ) -> super::Result<()> {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "215:     context: InvokeContext<R>,",
          "216:     path: SafePathBuf,",
          "217:     options: Option<DirOperationOptions>,",
          "219:     let (recursive, dir) = if let Some(options_value) = options {",
          "220:       (options_value.recursive, options_value.dir)",
          "221:     } else {",
          "",
          "[Removed Lines]",
          "218:   ) -> crate::Result<()> {",
          "",
          "[Added Lines]",
          "218:   ) -> super::Result<()> {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "242:     context: InvokeContext<R>,",
          "243:     path: SafePathBuf,",
          "244:     options: Option<DirOperationOptions>,",
          "246:     let (recursive, dir) = if let Some(options_value) = options {",
          "247:       (options_value.recursive, options_value.dir)",
          "248:     } else {",
          "",
          "[Removed Lines]",
          "245:   ) -> crate::Result<()> {",
          "",
          "[Added Lines]",
          "245:   ) -> super::Result<()> {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "269:     context: InvokeContext<R>,",
          "270:     path: SafePathBuf,",
          "271:     options: Option<FileOperationOptions>,",
          "273:     let resolved_path = resolve_path(",
          "274:       &context.config,",
          "275:       &context.package_info,",
          "",
          "[Removed Lines]",
          "272:   ) -> crate::Result<()> {",
          "",
          "[Added Lines]",
          "272:   ) -> super::Result<()> {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "287:     old_path: SafePathBuf,",
          "288:     new_path: SafePathBuf,",
          "289:     options: Option<FileOperationOptions>,",
          "291:     let (old, new) = match options.and_then(|o| o.dir) {",
          "292:       Some(dir) => (",
          "293:         resolve_path(",
          "",
          "[Removed Lines]",
          "290:   ) -> crate::Result<()> {",
          "",
          "[Added Lines]",
          "290:   ) -> super::Result<()> {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "307:       ),",
          "308:       None => (old_path, new_path),",
          "309:     };",
          "311:   }",
          "312: }",
          "",
          "[Removed Lines]",
          "310:     fs::rename(old, new).map_err(crate::Error::Io)",
          "",
          "[Added Lines]",
          "310:     fs::rename(old, new).map_err(Into::into)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "318:   window: &Window<R>,",
          "319:   path: SafePathBuf,",
          "320:   dir: Option<BaseDirectory>,",
          "322:   let env = window.state::<Env>().inner();",
          "323:   match crate::api::path::resolve_path(config, package_info, env, path, dir) {",
          "324:     Ok(path) => {",
          "325:       if window.state::<Scopes>().fs.is_allowed(&path) {",
          "326:         Ok(SafePathBuf(path))",
          "327:       } else {",
          "329:       }",
          "330:     }",
          "331:     Err(e) => Err(e.into()),",
          "",
          "[Removed Lines]",
          "321: ) -> crate::Result<SafePathBuf> {",
          "328:         Err(crate::Error::PathNotAllowed(path))",
          "",
          "[Added Lines]",
          "321: ) -> super::Result<SafePathBuf> {",
          "328:         Err(anyhow::anyhow!(",
          "329:           crate::Error::PathNotAllowed(path).to_string()",
          "330:         ))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "381:   #[quickcheck_macros::quickcheck]",
          "382:   fn read_file(path: SafePathBuf, options: Option<FileOperationOptions>) {",
          "383:     let res = super::Cmd::read_file(crate::test::mock_invoke_context(), path, options);",
          "385:   }",
          "387:   #[tauri_macros::module_command_test(fs_write_file, \"fs > writeFile\")]",
          "388:   #[quickcheck_macros::quickcheck]",
          "389:   fn write_file(path: SafePathBuf, contents: Vec<u8>, options: Option<FileOperationOptions>) {",
          "390:     let res = super::Cmd::write_file(crate::test::mock_invoke_context(), path, contents, options);",
          "392:   }",
          "394:   #[tauri_macros::module_command_test(fs_read_dir, \"fs > readDir\")]",
          "395:   #[quickcheck_macros::quickcheck]",
          "396:   fn read_dir(path: SafePathBuf, options: Option<DirOperationOptions>) {",
          "397:     let res = super::Cmd::read_dir(crate::test::mock_invoke_context(), path, options);",
          "399:   }",
          "401:   #[tauri_macros::module_command_test(fs_copy_file, \"fs > copyFile\")]",
          "",
          "[Removed Lines]",
          "384:     assert!(!matches!(res, Err(crate::Error::ApiNotAllowlisted(_))));",
          "391:     assert!(!matches!(res, Err(crate::Error::ApiNotAllowlisted(_))));",
          "398:     assert!(!matches!(res, Err(crate::Error::ApiNotAllowlisted(_))));",
          "",
          "[Added Lines]",
          "386:     crate::test_utils::assert_not_allowlist_error(res);",
          "393:     crate::test_utils::assert_not_allowlist_error(res);",
          "400:     crate::test_utils::assert_not_allowlist_error(res);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "411:       destination,",
          "412:       options,",
          "413:     );",
          "415:   }",
          "417:   #[tauri_macros::module_command_test(fs_create_dir, \"fs > createDir\")]",
          "418:   #[quickcheck_macros::quickcheck]",
          "419:   fn create_dir(path: SafePathBuf, options: Option<DirOperationOptions>) {",
          "420:     let res = super::Cmd::create_dir(crate::test::mock_invoke_context(), path, options);",
          "422:   }",
          "424:   #[tauri_macros::module_command_test(fs_remove_dir, \"fs > removeDir\")]",
          "425:   #[quickcheck_macros::quickcheck]",
          "426:   fn remove_dir(path: SafePathBuf, options: Option<DirOperationOptions>) {",
          "427:     let res = super::Cmd::remove_dir(crate::test::mock_invoke_context(), path, options);",
          "429:   }",
          "431:   #[tauri_macros::module_command_test(fs_remove_file, \"fs > removeFile\")]",
          "432:   #[quickcheck_macros::quickcheck]",
          "433:   fn remove_file(path: SafePathBuf, options: Option<FileOperationOptions>) {",
          "434:     let res = super::Cmd::remove_file(crate::test::mock_invoke_context(), path, options);",
          "436:   }",
          "438:   #[tauri_macros::module_command_test(fs_rename_file, \"fs > renameFile\")]",
          "",
          "[Removed Lines]",
          "414:     assert!(!matches!(res, Err(crate::Error::ApiNotAllowlisted(_))));",
          "421:     assert!(!matches!(res, Err(crate::Error::ApiNotAllowlisted(_))));",
          "428:     assert!(!matches!(res, Err(crate::Error::ApiNotAllowlisted(_))));",
          "435:     assert!(!matches!(res, Err(crate::Error::ApiNotAllowlisted(_))));",
          "",
          "[Added Lines]",
          "416:     crate::test_utils::assert_not_allowlist_error(res);",
          "423:     crate::test_utils::assert_not_allowlist_error(res);",
          "430:     crate::test_utils::assert_not_allowlist_error(res);",
          "437:     crate::test_utils::assert_not_allowlist_error(res);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "448:       new_path,",
          "449:       options,",
          "450:     );",
          "452:   }",
          "453: }",
          "",
          "[Removed Lines]",
          "451:     assert!(!matches!(res, Err(crate::Error::ApiNotAllowlisted(_))));",
          "",
          "[Added Lines]",
          "453:     crate::test_utils::assert_not_allowlist_error(res);",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/global_shortcut.rs||core/tauri/src/endpoints/global_shortcut.rs": [
          "File: core/tauri/src/endpoints/global_shortcut.rs -> core/tauri/src/endpoints/global_shortcut.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     context: InvokeContext<R>,",
          "39:     shortcut: String,",
          "40:     handler: CallbackFn,",
          "42:     let mut manager = context.window.app_handle.global_shortcut_manager();",
          "43:     register_shortcut(context.window, &mut manager, shortcut, handler)?;",
          "44:     Ok(())",
          "",
          "[Removed Lines]",
          "41:   ) -> crate::Result<()> {",
          "",
          "[Added Lines]",
          "41:   ) -> super::Result<()> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     context: InvokeContext<R>,",
          "50:     shortcuts: Vec<String>,",
          "51:     handler: CallbackFn,",
          "53:     let mut manager = context.window.app_handle.global_shortcut_manager();",
          "54:     for shortcut in shortcuts {",
          "55:       register_shortcut(context.window.clone(), &mut manager, shortcut, handler)?;",
          "",
          "[Removed Lines]",
          "52:   ) -> crate::Result<()> {",
          "",
          "[Added Lines]",
          "52:   ) -> super::Result<()> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:   }",
          "60:   #[module_command_handler(global_shortcut_all, \"globalShortcut > all\")]",
          "62:     context",
          "63:       .window",
          "64:       .app_handle",
          "65:       .global_shortcut_manager()",
          "67:     Ok(())",
          "68:   }",
          "70:   #[module_command_handler(global_shortcut_all, \"globalShortcut > all\")]",
          "72:     context",
          "73:       .window",
          "74:       .app_handle",
          "75:       .global_shortcut_manager()",
          "77:     Ok(())",
          "78:   }",
          "80:   #[module_command_handler(global_shortcut_all, \"globalShortcut > all\")]",
          "89:   }",
          "90: }",
          "",
          "[Removed Lines]",
          "61:   fn unregister<R: Runtime>(context: InvokeContext<R>, shortcut: String) -> crate::Result<()> {",
          "66:       .unregister(&shortcut)?;",
          "71:   fn unregister_all<R: Runtime>(context: InvokeContext<R>) -> crate::Result<()> {",
          "76:       .unregister_all()?;",
          "81:   fn is_registered<R: Runtime>(context: InvokeContext<R>, shortcut: String) -> crate::Result<bool> {",
          "82:     Ok(",
          "83:       context",
          "84:         .window",
          "85:         .app_handle",
          "86:         .global_shortcut_manager()",
          "87:         .is_registered(&shortcut)?,",
          "88:     )",
          "",
          "[Added Lines]",
          "61:   fn unregister<R: Runtime>(context: InvokeContext<R>, shortcut: String) -> super::Result<()> {",
          "66:       .unregister(&shortcut)",
          "67:       .map_err(crate::error::into_anyhow)?;",
          "72:   fn unregister_all<R: Runtime>(context: InvokeContext<R>) -> super::Result<()> {",
          "77:       .unregister_all()",
          "78:       .map_err(crate::error::into_anyhow)?;",
          "83:   fn is_registered<R: Runtime>(context: InvokeContext<R>, shortcut: String) -> super::Result<bool> {",
          "84:     context",
          "85:       .window",
          "86:       .app_handle",
          "87:       .global_shortcut_manager()",
          "88:       .is_registered(&shortcut)",
          "89:       .map_err(crate::error::into_anyhow)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "95:   manager: &mut R::GlobalShortcutManager,",
          "96:   shortcut: String,",
          "97:   handler: CallbackFn,",
          "99:   let accelerator = shortcut.clone();",
          "105:   Ok(())",
          "106: }",
          "",
          "[Removed Lines]",
          "98: ) -> crate::Result<()> {",
          "100:   manager.register(&shortcut, move || {",
          "101:     let callback_string = crate::api::ipc::format_callback(handler, &accelerator)",
          "102:       .expect(\"unable to serialize shortcut string to json\");",
          "103:     let _ = window.eval(callback_string.as_str());",
          "104:   })?;",
          "",
          "[Added Lines]",
          "99: ) -> super::Result<()> {",
          "101:   manager",
          "102:     .register(&shortcut, move || {",
          "103:       let callback_string = crate::api::ipc::format_callback(handler, &accelerator)",
          "104:         .expect(\"unable to serialize shortcut string to json\");",
          "105:       let _ = window.eval(callback_string.as_str());",
          "106:     })",
          "107:     .map_err(crate::error::into_anyhow)?;",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/http.rs||core/tauri/src/endpoints/http.rs": [
          "File: core/tauri/src/endpoints/http.rs -> core/tauri/src/endpoints/http.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:   async fn create_client<R: Runtime>(",
          "55:     _context: InvokeContext<R>,",
          "56:     options: Option<ClientBuilder>,",
          "58:     let client = options.unwrap_or_default().build()?;",
          "59:     let mut store = clients().lock().unwrap();",
          "60:     let id = rand::random::<ClientId>();",
          "",
          "[Removed Lines]",
          "57:   ) -> crate::Result<ClientId> {",
          "",
          "[Added Lines]",
          "57:   ) -> super::Result<ClientId> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:   async fn drop_client<R: Runtime>(",
          "67:     _context: InvokeContext<R>,",
          "68:     client: ClientId,",
          "70:     let mut store = clients().lock().unwrap();",
          "71:     store.remove(&client);",
          "72:     Ok(())",
          "",
          "[Removed Lines]",
          "69:   ) -> crate::Result<()> {",
          "",
          "[Added Lines]",
          "69:   ) -> super::Result<()> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:     context: InvokeContext<R>,",
          "78:     client_id: ClientId,",
          "79:     options: Box<HttpRequestBuilder>,",
          "81:     use crate::Manager;",
          "82:     if context",
          "83:       .window",
          "",
          "[Removed Lines]",
          "80:   ) -> crate::Result<ResponseData> {",
          "",
          "[Added Lines]",
          "80:   ) -> super::Result<ResponseData> {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "89:         .lock()",
          "90:         .unwrap()",
          "91:         .get(&client_id)",
          "93:         .clone();",
          "94:       let response = client.send(*options).await?;",
          "95:       Ok(response.read().await?)",
          "96:     } else {",
          "98:     }",
          "99:   }",
          "100: }",
          "",
          "[Removed Lines]",
          "92:         .ok_or(crate::Error::HttpClientNotInitialized)?",
          "97:       Err(crate::Error::UrlNotAllowed(options.url))",
          "",
          "[Added Lines]",
          "92:         .ok_or_else(|| crate::Error::HttpClientNotInitialized.into_anyhow())?",
          "97:       Err(crate::Error::UrlNotAllowed(options.url).into_anyhow())",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/notification.rs||core/tauri/src/endpoints/notification.rs": [
          "File: core/tauri/src/endpoints/notification.rs -> core/tauri/src/endpoints/notification.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   fn notification<R: Runtime>(",
          "45:     context: InvokeContext<R>,",
          "46:     options: NotificationOptions,",
          "48:     let allowed = match is_permission_granted(&context) {",
          "49:       Some(p) => p,",
          "50:       None => request_permission(&context),",
          "51:     };",
          "52:     if !allowed {",
          "54:     }",
          "55:     let mut notification =",
          "56:       Notification::new(context.config.tauri.bundle.identifier.clone()).title(options.title);",
          "",
          "[Removed Lines]",
          "47:   ) -> crate::Result<()> {",
          "53:       return Err(crate::Error::NotificationNotAllowed);",
          "",
          "[Added Lines]",
          "47:   ) -> super::Result<()> {",
          "53:       return Err(crate::Error::NotificationNotAllowed.into_anyhow());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:   #[cfg(notification_all)]",
          "68:   fn request_notification_permission<R: Runtime>(",
          "69:     context: InvokeContext<R>,",
          "71:     if request_permission(&context) {",
          "72:       Ok(PERMISSION_GRANTED)",
          "73:     } else {",
          "",
          "[Removed Lines]",
          "70:   ) -> crate::Result<&'static str> {",
          "",
          "[Added Lines]",
          "70:   ) -> super::Result<&'static str> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:   #[cfg(not(notification_all))]",
          "79:   fn request_notification_permission<R: Runtime>(",
          "80:     _context: InvokeContext<R>,",
          "82:     Ok(PERMISSION_DENIED)",
          "83:   }",
          "85:   #[cfg(notification_all)]",
          "86:   fn is_notification_permission_granted<R: Runtime>(",
          "87:     context: InvokeContext<R>,",
          "89:     if let Some(allow_notification) = is_permission_granted(&context) {",
          "90:       Ok(Some(allow_notification))",
          "91:     } else {",
          "",
          "[Removed Lines]",
          "81:   ) -> crate::Result<&'static str> {",
          "88:   ) -> crate::Result<Option<bool>> {",
          "",
          "[Added Lines]",
          "81:   ) -> super::Result<&'static str> {",
          "88:   ) -> super::Result<Option<bool>> {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "96:   #[cfg(not(notification_all))]",
          "97:   fn is_notification_permission_granted<R: Runtime>(",
          "98:     _context: InvokeContext<R>,",
          "100:     Ok(Some(false))",
          "101:   }",
          "102: }",
          "",
          "[Removed Lines]",
          "99:   ) -> crate::Result<Option<bool>> {",
          "",
          "[Added Lines]",
          "99:   ) -> super::Result<Option<bool>> {",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/operating_system.rs||core/tauri/src/endpoints/operating_system.rs": [
          "File: core/tauri/src/endpoints/operating_system.rs -> core/tauri/src/endpoints/operating_system.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: impl Cmd {",
          "23:   #[module_command_handler(os_all, \"os > all\")]",
          "25:     Ok(os_platform())",
          "26:   }",
          "28:   #[module_command_handler(os_all, \"os > all\")]",
          "30:     Ok(os_info::get().version().to_string())",
          "31:   }",
          "33:   #[module_command_handler(os_all, \"os > all\")]",
          "35:     Ok(os_type())",
          "36:   }",
          "38:   #[module_command_handler(os_all, \"os > all\")]",
          "40:     Ok(std::env::consts::ARCH)",
          "41:   }",
          "43:   #[module_command_handler(os_all, \"os > all\")]",
          "45:     Ok(std::env::temp_dir())",
          "46:   }",
          "47: }",
          "",
          "[Removed Lines]",
          "24:   fn platform<R: Runtime>(_context: InvokeContext<R>) -> crate::Result<&'static str> {",
          "29:   fn version<R: Runtime>(_context: InvokeContext<R>) -> crate::Result<String> {",
          "34:   fn os_type<R: Runtime>(_context: InvokeContext<R>) -> crate::Result<&'static str> {",
          "39:   fn arch<R: Runtime>(_context: InvokeContext<R>) -> crate::Result<&'static str> {",
          "44:   fn tempdir<R: Runtime>(_context: InvokeContext<R>) -> crate::Result<PathBuf> {",
          "",
          "[Added Lines]",
          "24:   fn platform<R: Runtime>(_context: InvokeContext<R>) -> super::Result<&'static str> {",
          "29:   fn version<R: Runtime>(_context: InvokeContext<R>) -> super::Result<String> {",
          "34:   fn os_type<R: Runtime>(_context: InvokeContext<R>) -> super::Result<&'static str> {",
          "39:   fn arch<R: Runtime>(_context: InvokeContext<R>) -> super::Result<&'static str> {",
          "44:   fn tempdir<R: Runtime>(_context: InvokeContext<R>) -> super::Result<PathBuf> {",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/path.rs||core/tauri/src/endpoints/path.rs": [
          "File: core/tauri/src/endpoints/path.rs -> core/tauri/src/endpoints/path.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     context: InvokeContext<R>,",
          "52:     path: String,",
          "53:     directory: Option<BaseDirectory>,",
          "55:     crate::api::path::resolve_path(",
          "56:       &context.config,",
          "57:       &context.package_info,",
          "",
          "[Removed Lines]",
          "54:   ) -> crate::Result<PathBuf> {",
          "",
          "[Added Lines]",
          "54:   ) -> super::Result<PathBuf> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:   }",
          "65:   #[module_command_handler(path_all, \"path > all\")]",
          "",
          "[Removed Lines]",
          "66:   fn resolve<R: Runtime>(_context: InvokeContext<R>, paths: Vec<String>) -> crate::Result<PathBuf> {",
          "",
          "[Added Lines]",
          "66:   fn resolve<R: Runtime>(_context: InvokeContext<R>, paths: Vec<String>) -> super::Result<PathBuf> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:   }",
          "80:   #[module_command_handler(path_all, \"path > all\")]",
          "82:     let mut p = normalize_path_no_absolute(Path::new(&path))",
          "83:       .to_string_lossy()",
          "84:       .to_string();",
          "",
          "[Removed Lines]",
          "81:   fn normalize<R: Runtime>(_context: InvokeContext<R>, path: String) -> crate::Result<String> {",
          "",
          "[Added Lines]",
          "81:   fn normalize<R: Runtime>(_context: InvokeContext<R>, path: String) -> super::Result<String> {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "102:   }",
          "104:   #[module_command_handler(path_all, \"path > all\")]",
          "106:     let path = PathBuf::from(",
          "107:       paths",
          "108:         .iter_mut()",
          "",
          "[Removed Lines]",
          "105:   fn join<R: Runtime>(_context: InvokeContext<R>, mut paths: Vec<String>) -> crate::Result<String> {",
          "",
          "[Added Lines]",
          "105:   fn join<R: Runtime>(_context: InvokeContext<R>, mut paths: Vec<String>) -> super::Result<String> {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "126:   }",
          "128:   #[module_command_handler(path_all, \"path > all\")]",
          "130:     match Path::new(&path).parent() {",
          "131:       Some(p) => Ok(p.to_path_buf()),",
          "133:         \"Couldn't get the parent directory\".into(),",
          "134:       ))),",
          "135:     }",
          "136:   }",
          "138:   #[module_command_handler(path_all, \"path > all\")]",
          "140:     match Path::new(&path)",
          "141:       .extension()",
          "142:       .and_then(std::ffi::OsStr::to_str)",
          "143:     {",
          "144:       Some(p) => Ok(p.to_string()),",
          "146:         \"Couldn't get the extension of the file\".into(),",
          "147:       ))),",
          "148:     }",
          "",
          "[Removed Lines]",
          "129:   fn dirname<R: Runtime>(_context: InvokeContext<R>, path: String) -> crate::Result<PathBuf> {",
          "132:       None => Err(crate::Error::FailedToExecuteApi(crate::api::Error::Path(",
          "139:   fn extname<R: Runtime>(_context: InvokeContext<R>, path: String) -> crate::Result<String> {",
          "145:       None => Err(crate::Error::FailedToExecuteApi(crate::api::Error::Path(",
          "",
          "[Added Lines]",
          "129:   fn dirname<R: Runtime>(_context: InvokeContext<R>, path: String) -> super::Result<PathBuf> {",
          "132:       None => Err(crate::error::into_anyhow(crate::api::Error::Path(",
          "139:   fn extname<R: Runtime>(_context: InvokeContext<R>, path: String) -> super::Result<String> {",
          "145:       None => Err(crate::error::into_anyhow(crate::api::Error::Path(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "153:     _context: InvokeContext<R>,",
          "154:     path: String,",
          "155:     ext: Option<String>,",
          "157:     match Path::new(&path)",
          "158:       .file_name()",
          "159:       .and_then(std::ffi::OsStr::to_str)",
          "",
          "[Removed Lines]",
          "156:   ) -> crate::Result<String> {",
          "",
          "[Added Lines]",
          "156:   ) -> super::Result<String> {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "163:       } else {",
          "164:         p.to_string()",
          "165:       }),",
          "167:         \"Couldn't get the basename\".into(),",
          "168:       ))),",
          "169:     }",
          "170:   }",
          "172:   #[module_command_handler(path_all, \"path > all\")]",
          "174:     Ok(Path::new(&path).is_absolute())",
          "175:   }",
          "176: }",
          "",
          "[Removed Lines]",
          "166:       None => Err(crate::Error::FailedToExecuteApi(crate::api::Error::Path(",
          "173:   fn is_absolute<R: Runtime>(_context: InvokeContext<R>, path: String) -> crate::Result<bool> {",
          "",
          "[Added Lines]",
          "166:       None => Err(crate::error::into_anyhow(crate::api::Error::Path(",
          "173:   fn is_absolute<R: Runtime>(_context: InvokeContext<R>, path: String) -> super::Result<bool> {",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/process.rs||core/tauri/src/endpoints/process.rs": [
          "File: core/tauri/src/endpoints/process.rs -> core/tauri/src/endpoints/process.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: impl Cmd {",
          "24:   #[module_command_handler(process_relaunch, \"process > relaunch\")]",
          "26:     crate::api::process::restart(&context.window.state());",
          "27:     Ok(())",
          "28:   }",
          "30:   #[module_command_handler(process_exit, \"process > exit\")]",
          "",
          "[Removed Lines]",
          "25:   fn relaunch<R: Runtime>(context: InvokeContext<R>) -> crate::Result<()> {",
          "31:   fn exit<R: Runtime>(_context: InvokeContext<R>, exit_code: i32) -> crate::Result<()> {",
          "",
          "[Added Lines]",
          "25:   fn relaunch<R: Runtime>(context: InvokeContext<R>) -> super::Result<()> {",
          "31:   fn exit<R: Runtime>(_context: InvokeContext<R>, exit_code: i32) -> super::Result<()> {",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/shell.rs||core/tauri/src/endpoints/shell.rs": [
          "File: core/tauri/src/endpoints/shell.rs -> core/tauri/src/endpoints/shell.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     args: ExecuteArgs,",
          "89:     on_event_fn: CallbackFn,",
          "90:     options: CommandOptions,",
          "92:     let mut command = if options.sidecar {",
          "93:       #[cfg(not(shell_sidecar))]",
          "97:       #[cfg(shell_sidecar)]",
          "98:       {",
          "99:         let program = PathBuf::from(program);",
          "",
          "[Removed Lines]",
          "91:   ) -> crate::Result<ChildId> {",
          "94:       return Err(crate::Error::ApiNotAllowlisted(",
          "95:         \"shell > sidecar\".to_string(),",
          "96:       ));",
          "",
          "[Added Lines]",
          "91:   ) -> super::Result<ChildId> {",
          "94:       return Err(crate::Error::ApiNotAllowlisted(\"shell > sidecar\".to_string()).into_anyhow());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:             .state::<Scopes>()",
          "118:             .shell",
          "119:             .prepare(&program.to_string_lossy(), args, true)",
          "121:         } else {",
          "123:         }",
          "124:       }",
          "125:     } else {",
          "126:       #[cfg(not(shell_execute))]",
          "130:       #[cfg(shell_execute)]",
          "131:       match context",
          "132:         .window",
          "",
          "[Removed Lines]",
          "120:             .map_err(Box::new)?",
          "122:           return Err(crate::Error::SidecarNotAllowed(program));",
          "127:       return Err(crate::Error::ApiNotAllowlisted(",
          "128:         \"shell > execute\".to_string(),",
          "129:       ));",
          "",
          "[Added Lines]",
          "118:             .map_err(crate::error::into_anyhow)?",
          "120:           return Err(crate::Error::SidecarNotAllowed(program).into_anyhow());",
          "125:       return Err(crate::Error::ApiNotAllowlisted(\"shell > execute\".to_string()).into_anyhow());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:         Err(e) => {",
          "139:           #[cfg(debug_assertions)]",
          "140:           eprintln!(\"{}\", e);",
          "142:         }",
          "143:       }",
          "144:     };",
          "",
          "[Removed Lines]",
          "141:           return Err(crate::Error::ProgramNotAllowed(PathBuf::from(program)));",
          "",
          "[Added Lines]",
          "137:           return Err(crate::Error::ProgramNotAllowed(PathBuf::from(program)).into_anyhow());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "178:     _context: InvokeContext<R>,",
          "179:     pid: ChildId,",
          "180:     buffer: Buffer,",
          "182:     if let Some(child) = command_childs().lock().unwrap().get_mut(&pid) {",
          "183:       match buffer {",
          "184:         Buffer::Text(t) => child.write(t.as_bytes())?,",
          "",
          "[Removed Lines]",
          "181:   ) -> crate::Result<()> {",
          "",
          "[Added Lines]",
          "177:   ) -> super::Result<()> {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "193:     _context: InvokeContext<R>,",
          "194:     _pid: ChildId,",
          "195:     _buffer: Buffer,",
          "200:   }",
          "202:   #[cfg(any(shell_execute, shell_sidecar))]",
          "204:     if let Some(child) = command_childs().lock().unwrap().remove(&pid) {",
          "205:       child.kill()?;",
          "206:     }",
          "",
          "[Removed Lines]",
          "196:   ) -> crate::Result<()> {",
          "197:     Err(crate::Error::ApiNotAllowlisted(",
          "198:       \"shell > execute or shell > sidecar\".into(),",
          "199:     ))",
          "203:   fn kill_child<R: Runtime>(_context: InvokeContext<R>, pid: ChildId) -> crate::Result<()> {",
          "",
          "[Added Lines]",
          "192:   ) -> super::Result<()> {",
          "193:     Err(crate::Error::ApiNotAllowlisted(\"shell > execute or shell > sidecar\".into()).into_anyhow())",
          "197:   fn kill_child<R: Runtime>(_context: InvokeContext<R>, pid: ChildId) -> super::Result<()> {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "208:   }",
          "210:   #[cfg(not(any(shell_execute, shell_sidecar)))]",
          "215:   }",
          "",
          "[Removed Lines]",
          "211:   fn kill_child<R: Runtime>(_context: InvokeContext<R>, _pid: ChildId) -> crate::Result<()> {",
          "212:     Err(crate::Error::ApiNotAllowlisted(",
          "213:       \"shell > execute or shell > sidecar\".into(),",
          "214:     ))",
          "",
          "[Added Lines]",
          "205:   fn kill_child<R: Runtime>(_context: InvokeContext<R>, _pid: ChildId) -> super::Result<()> {",
          "206:     Err(crate::Error::ApiNotAllowlisted(\"shell > execute or shell > sidecar\".into()).into_anyhow())",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "222:     context: InvokeContext<R>,",
          "223:     path: String,",
          "224:     with: Option<String>,",
          "226:     use std::str::FromStr;",
          "228:     with",
          "",
          "[Removed Lines]",
          "225:   ) -> crate::Result<()> {",
          "",
          "[Added Lines]",
          "217:   ) -> super::Result<()> {",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/window.rs||core/tauri/src/endpoints/window.rs": [
          "File: core/tauri/src/endpoints/window.rs -> core/tauri/src/endpoints/window.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:   async fn create_webview<R: Runtime>(",
          "152:     context: InvokeContext<R>,",
          "153:     options: Box<WindowConfig>,",
          "155:     let mut window = context.window;",
          "156:     let label = options.label.clone();",
          "157:     let url = options.url.clone();",
          "166:     Ok(())",
          "167:   }",
          "",
          "[Removed Lines]",
          "154:   ) -> crate::Result<()> {",
          "159:     window.create_window(label, url, |_, webview_attributes| {",
          "160:       (",
          "161:         <<R::Dispatcher as Dispatch>::WindowBuilder>::with_config(*options),",
          "162:         webview_attributes,",
          "163:       )",
          "164:     })?;",
          "",
          "[Added Lines]",
          "154:   ) -> super::Result<()> {",
          "159:     window",
          "160:       .create_window(label, url, |_, webview_attributes| {",
          "161:         (",
          "162:           <<R::Dispatcher as Dispatch>::WindowBuilder>::with_config(*options),",
          "163:           webview_attributes,",
          "164:         )",
          "165:       })",
          "166:       .map_err(crate::error::into_anyhow)?;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:     context: InvokeContext<R>,",
          "171:     label: Option<String>,",
          "172:     cmd: WindowManagerCmd,",
          "173:   ) -> crate::Result<InvokeResponse> {",
          "174:     let window = match label {",
          "175:       Some(l) if !l.is_empty() => context",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:   ) -> super::Result<InvokeResponse> {",
          "176:     Self::_manage(context, label, cmd)",
          "177:       .await",
          "178:       .map_err(crate::error::into_anyhow)",
          "179:   }",
          "181:   async fn _manage<R: Runtime>(",
          "182:     context: InvokeContext<R>,",
          "183:     label: Option<String>,",
          "184:     cmd: WindowManagerCmd,",
          "",
          "---------------"
        ],
        "core/tauri/src/error.rs||core/tauri/src/error.rs": [
          "File: core/tauri/src/error.rs -> core/tauri/src/error.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:   InvalidWindowUrl(&'static str),",
          "110: }",
          "112: impl From<serde_json::Error> for Error {",
          "113:   fn from(error: serde_json::Error) -> Self {",
          "114:     if error.to_string().contains(\"unknown variant\") {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: pub(crate) fn into_anyhow<T: std::fmt::Display>(err: T) -> anyhow::Error {",
          "113:   anyhow::anyhow!(err.to_string())",
          "114: }",
          "116: impl Error {",
          "117:   pub(crate) fn into_anyhow(self) -> anyhow::Error {",
          "118:     anyhow::anyhow!(self.to_string())",
          "119:   }",
          "120: }",
          "",
          "---------------"
        ],
        "core/tauri/src/hooks.rs||core/tauri/src/hooks.rs": [
          "File: core/tauri/src/hooks.rs -> core/tauri/src/hooks.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   pub fn from_serde_json(error: serde_json::Error) -> Self {",
          "96:     Self(JsonValue::String(error.to_string()))",
          "97:   }",
          "98: }",
          "100: impl<T: Serialize> From<T> for InvokeError {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:   #[inline(always)]",
          "101:   pub fn from_anyhow(error: anyhow::Error) -> Self {",
          "102:     Self(JsonValue::String(error.to_string()))",
          "103:   }",
          "",
          "---------------"
        ],
        "core/tauri/src/lib.rs||core/tauri/src/lib.rs": [
          "File: core/tauri/src/lib.rs -> core/tauri/src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "577:   pub fn assert_send<T: Send>() {}",
          "578:   pub fn assert_sync<T: Sync>() {}",
          "580:   proptest! {",
          "581:     #![proptest_config(ProptestConfig::with_cases(10000))]",
          "582:     #[test]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "580:   #[allow(dead_code)]",
          "581:   pub fn assert_not_allowlist_error<T>(res: anyhow::Result<T>) {",
          "582:     if let Err(e) = res {",
          "583:       assert!(!e.to_string().contains(\"not on the allowlist\"));",
          "584:     }",
          "585:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7209fdf732ffe1893aaa9cd970ab6491a883d997",
      "candidate_info": {
        "commit_hash": "7209fdf732ffe1893aaa9cd970ab6491a883d997",
        "repo": "tauri-apps/tauri",
        "commit_url": "https://github.com/tauri-apps/tauri/commit/7209fdf732ffe1893aaa9cd970ab6491a883d997",
        "files": [
          ".changes/core-env.md",
          "core/tauri-utils/src/lib.rs",
          "core/tauri-utils/src/platform.rs",
          "core/tauri/src/api/path.rs",
          "core/tauri/src/api/process.rs",
          "core/tauri/src/app.rs",
          "core/tauri/src/endpoints.rs",
          "core/tauri/src/endpoints/file_system.rs",
          "core/tauri/src/endpoints/notification.rs",
          "core/tauri/src/endpoints/path.rs",
          "core/tauri/src/endpoints/process.rs",
          "core/tauri/src/lib.rs",
          "core/tauri/src/settings.rs",
          "core/tauri/src/updater/core.rs",
          "core/tauri/src/updater/mod.rs",
          "examples/resources/src-tauri/src/main.rs"
        ],
        "message": "refactor(core): load APPIMAGE and APPDIR env vars on startup [TRI-007] [TRI-041]",
        "before_after_code_files": [
          "core/tauri-utils/src/lib.rs||core/tauri-utils/src/lib.rs",
          "core/tauri-utils/src/platform.rs||core/tauri-utils/src/platform.rs",
          "core/tauri/src/api/path.rs||core/tauri/src/api/path.rs",
          "core/tauri/src/api/process.rs||core/tauri/src/api/process.rs",
          "core/tauri/src/app.rs||core/tauri/src/app.rs",
          "core/tauri/src/endpoints.rs||core/tauri/src/endpoints.rs",
          "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs",
          "core/tauri/src/endpoints/notification.rs||core/tauri/src/endpoints/notification.rs",
          "core/tauri/src/endpoints/path.rs||core/tauri/src/endpoints/path.rs",
          "core/tauri/src/endpoints/process.rs||core/tauri/src/endpoints/process.rs",
          "core/tauri/src/lib.rs||core/tauri/src/lib.rs",
          "core/tauri/src/settings.rs||core/tauri/src/settings.rs",
          "core/tauri/src/updater/core.rs||core/tauri/src/updater/core.rs",
          "core/tauri/src/updater/mod.rs||core/tauri/src/updater/mod.rs",
          "examples/resources/src-tauri/src/main.rs||examples/resources/src-tauri/src/main.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs"
          ],
          "candidate": [
            "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs"
          ]
        }
      },
      "candidate_diff": {
        "core/tauri-utils/src/lib.rs||core/tauri-utils/src/lib.rs": [
          "File: core/tauri-utils/src/lib.rs -> core/tauri-utils/src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   }",
          "38: }",
          "41: pub type Result<T> = std::result::Result<T, Error>;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: #[derive(Debug, Clone)]",
          "42: pub struct Env {",
          "44:   #[cfg(target_os = \"linux\")]",
          "45:   pub appimage: Option<std::ffi::OsString>,",
          "47:   #[cfg(target_os = \"linux\")]",
          "48:   pub appdir: Option<std::ffi::OsString>,",
          "49: }",
          "51: impl Default for Env {",
          "52:   fn default() -> Self {",
          "53:     Self {",
          "54:       #[cfg(target_os = \"linux\")]",
          "55:       appimage: std::env::var_os(\"APPIMAGE\"),",
          "56:       #[cfg(target_os = \"linux\")]",
          "57:       appdir: std::env::var_os(\"APPDIR\"),",
          "58:     }",
          "59:   }",
          "60: }",
          "",
          "---------------"
        ],
        "core/tauri-utils/src/platform.rs||core/tauri-utils/src/platform.rs": [
          "File: core/tauri-utils/src/platform.rs -> core/tauri-utils/src/platform.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "7: use std::{",
          "8:   env,",
          "9:   path::{PathBuf, MAIN_SEPARATOR},",
          "10: };",
          "12: use crate::PackageInfo;",
          "",
          "[Added Lines]",
          "7: use std::path::{PathBuf, MAIN_SEPARATOR};",
          "9: use crate::{Env, PackageInfo};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:   let exe = std::env::current_exe()?;",
          "81:   let exe_dir = exe.parent().expect(\"failed to get exe directory\");",
          "82:   let curr_dir = exe_dir.display().to_string();",
          "",
          "[Removed Lines]",
          "79: pub fn resource_dir(package_info: &PackageInfo) -> crate::Result<PathBuf> {",
          "",
          "[Added Lines]",
          "76: pub fn resource_dir(package_info: &PackageInfo, env: &Env) -> crate::Result<PathBuf> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93:     if curr_dir.ends_with(\"/data/usr/bin\") {",
          "95:       Ok(exe_dir.join(format!(\"../lib/{}\", package_info.package_name())))",
          "97:       Ok(PathBuf::from(format!(",
          "98:         \"{}/usr/lib/{}\",",
          "100:         package_info.package_name()",
          "101:       )))",
          "102:     } else {",
          "",
          "[Removed Lines]",
          "96:     } else if let Ok(appdir) = env::var(\"APPDIR\") {",
          "99:         appdir,",
          "",
          "[Added Lines]",
          "93:     } else if let Some(appdir) = &env.appdir {",
          "94:       let appdir: &std::path::Path = appdir.as_ref();",
          "97:         appdir.display(),",
          "",
          "---------------"
        ],
        "core/tauri/src/api/path.rs||core/tauri/src/api/path.rs": [
          "File: core/tauri/src/api/path.rs -> core/tauri/src/api/path.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:   path::{Component, Path, PathBuf},",
          "10: };",
          "14: use serde_repr::{Deserialize_repr, Serialize_repr};",
          "",
          "[Removed Lines]",
          "12: use crate::{Config, PackageInfo};",
          "",
          "[Added Lines]",
          "12: use crate::{Config, Env, PackageInfo};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91: pub fn resolve_path<P: AsRef<Path>>(",
          "92:   config: &Config,",
          "93:   package_info: &PackageInfo,",
          "94:   path: P,",
          "95:   dir: Option<BaseDirectory>,",
          "96: ) -> crate::api::Result<PathBuf> {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:   env: &Env,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:       BaseDirectory::Runtime => runtime_dir(),",
          "114:       BaseDirectory::Template => template_dir(),",
          "115:       BaseDirectory::Video => video_dir(),",
          "117:       BaseDirectory::App => app_dir(config),",
          "118:       BaseDirectory::Current => Some(env::current_dir()?),",
          "119:       BaseDirectory::Log => log_dir(config),",
          "",
          "[Removed Lines]",
          "116:       BaseDirectory::Resource => resource_dir(package_info),",
          "",
          "[Added Lines]",
          "118:       BaseDirectory::Resource => resource_dir(package_info, env),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "229: }",
          "234: }",
          "",
          "[Removed Lines]",
          "232: pub fn resource_dir(package_info: &PackageInfo) -> Option<PathBuf> {",
          "233:   crate::utils::platform::resource_dir(package_info).ok()",
          "",
          "[Added Lines]",
          "234: pub fn resource_dir(package_info: &PackageInfo, env: &Env) -> Option<PathBuf> {",
          "235:   crate::utils::platform::resource_dir(package_info, env).ok()",
          "",
          "---------------"
        ],
        "core/tauri/src/api/process.rs||core/tauri/src/api/process.rs": [
          "File: core/tauri/src/api/process.rs -> core/tauri/src/api/process.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: use std::{",
          "8:   env,",
          "9:   path::PathBuf,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: use crate::Env;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: pub use command::*;",
          "20:   let mut current_binary = None;",
          "23:   #[cfg(target_os = \"linux\")]",
          "25:     current_binary = Some(PathBuf::from(app_image_path));",
          "26:   }",
          "",
          "[Removed Lines]",
          "19: pub fn current_binary() -> Option<PathBuf> {",
          "24:   if let Some(app_image_path) = env::var_os(\"APPIMAGE\") {",
          "",
          "[Added Lines]",
          "21: #[allow(unused_variables)]",
          "22: pub fn current_binary(env: &Env) -> Option<PathBuf> {",
          "27:   if let Some(app_image_path) = &env.appimage {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37: }",
          "42:     StdCommand::new(path)",
          "43:       .spawn()",
          "44:       .expect(\"application failed to start\");",
          "",
          "[Removed Lines]",
          "40: pub fn restart() {",
          "41:   if let Some(path) = current_binary() {",
          "",
          "[Added Lines]",
          "43: pub fn restart(env: &Env) {",
          "44:   if let Some(path) = current_binary(env) {",
          "",
          "---------------"
        ],
        "core/tauri/src/app.rs||core/tauri/src/app.rs": [
          "File: core/tauri/src/app.rs -> core/tauri/src/app.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     Dispatch, ExitRequestedEventAction, RunEvent, Runtime,",
          "20:   },",
          "21:   sealed::{ManagerBase, RuntimeOrDispatch},",
          "23:   utils::config::{Config, WindowUrl},",
          "24:   Context, Invoke, InvokeError, InvokeResponse, Manager, StateManager, Window,",
          "25: };",
          "",
          "[Removed Lines]",
          "22:   utils::assets::Assets,",
          "",
          "[Added Lines]",
          "23:   utils::{assets::Assets, Env},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151: #[derive(Debug, Clone)]",
          "152: pub struct PathResolver {",
          "153:   config: Arc<Config>,",
          "154:   package_info: PackageInfo,",
          "155: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:   env: Env,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157: impl PathResolver {",
          "159:   pub fn resource_dir(&self) -> Option<PathBuf> {",
          "161:   }",
          "",
          "[Removed Lines]",
          "160:     crate::api::path::resource_dir(&self.package_info)",
          "",
          "[Added Lines]",
          "161:     crate::api::path::resource_dir(&self.package_info, &self.env)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "408:       pub fn path_resolver(&self) -> PathResolver {",
          "409:         PathResolver {",
          "410:           config: self.manager.config(),",
          "411:           package_info: self.manager.package_info().clone(),",
          "412:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "411:           env: self.state::<Env>().inner().clone(),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "432:         self.manager.package_info()",
          "433:       }",
          "436:       pub fn asset_resolver(&self) -> AssetResolver<R> {",
          "437:         AssetResolver {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "438:       pub fn env(&self) -> Env {",
          "439:         self.state::<Env>().inner().clone()",
          "440:       }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "990:       },",
          "991:     };",
          "993:     #[cfg(feature = \"system-tray\")]",
          "994:     if let Some(system_tray) = self.system_tray {",
          "995:       let mut ids = HashMap::new();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1000:     app.manage(Env::default());",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints.rs||core/tauri/src/endpoints.rs": [
          "File: core/tauri/src/endpoints.rs -> core/tauri/src/endpoints.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:           .and_then(|r| r.json)",
          "76:           .map_err(InvokeError::from)",
          "77:       }),",
          "80:       Self::Fs(cmd) => resolver.respond_async(async move {",
          "81:         cmd",
          "83:           .and_then(|r| r.json)",
          "84:           .map_err(InvokeError::from)",
          "85:       }),",
          "86:       Self::Path(cmd) => resolver.respond_async(async move {",
          "87:         cmd",
          "89:           .and_then(|r| r.json)",
          "90:           .map_err(InvokeError::from)",
          "91:       }),",
          "",
          "[Removed Lines]",
          "78:       Self::Process(cmd) => resolver",
          "79:         .respond_async(async move { cmd.run().and_then(|r| r.json).map_err(InvokeError::from) }),",
          "82:           .run(config, &package_info)",
          "88:           .run(config, &package_info)",
          "",
          "[Added Lines]",
          "78:       Self::Process(cmd) => resolver.respond_async(async move {",
          "79:         cmd",
          "80:           .run(window)",
          "81:           .and_then(|r| r.json)",
          "82:           .map_err(InvokeError::from)",
          "83:       }),",
          "86:           .run(window, config, &package_info)",
          "92:           .run(window, config, &package_info)",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs": [
          "File: core/tauri/src/endpoints/file_system.rs -> core/tauri/src/endpoints/file_system.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:     dir, file,",
          "9:     path::{resolve_path, BaseDirectory},",
          "10:   },",
          "12: };",
          "14: use serde::{Deserialize, Serialize};",
          "",
          "[Removed Lines]",
          "11:   Config, PackageInfo,",
          "",
          "[Added Lines]",
          "11:   Config, Env, Manager, PackageInfo, Runtime, Window,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98: impl Cmd {",
          "99:   #[allow(unused_variables)]",
          "101:     self,",
          "102:     config: Arc<Config>,",
          "103:     package_info: &PackageInfo,",
          "104:   ) -> crate::Result<InvokeResponse> {",
          "105:     match self {",
          "106:       #[cfg(fs_read_text_file)]",
          "107:       Self::ReadTextFile { path, options } => {",
          "109:       }",
          "110:       #[cfg(not(fs_read_text_file))]",
          "111:       Self::ReadTextFile { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "",
          "[Removed Lines]",
          "100:   pub fn run(",
          "108:         read_text_file(&config, package_info, path, options).map(Into::into)",
          "",
          "[Added Lines]",
          "100:   pub fn run<R: Runtime>(",
          "102:     window: Window<R>,",
          "106:     let env = window.state::<Env>().inner();",
          "110:         read_text_file(&config, package_info, env, path, options).map(Into::into)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115:       #[cfg(fs_read_binary_file)]",
          "116:       Self::ReadBinaryFile { path, options } => {",
          "118:       }",
          "119:       #[cfg(not(fs_read_binary_file))]",
          "120:       Self::ReadBinaryFile { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "",
          "[Removed Lines]",
          "117:         read_binary_file(&config, package_info, path, options).map(Into::into)",
          "",
          "[Added Lines]",
          "119:         read_binary_file(&config, package_info, env, path, options).map(Into::into)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126:         path,",
          "127:         contents,",
          "128:         options,",
          "130:       #[cfg(not(fs_write_file))]",
          "131:       Self::WriteFile { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "132:         \"fs > writeFile\".to_string(),",
          "",
          "[Removed Lines]",
          "129:       } => write_file(&config, package_info, path, contents, options).map(Into::into),",
          "",
          "[Added Lines]",
          "131:       } => write_file(&config, package_info, env, path, contents, options).map(Into::into),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "137:         path,",
          "138:         contents,",
          "139:         options,",
          "141:       #[cfg(not(fs_write_binary_file))]",
          "142:       Self::WriteBinaryFile { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "143:         \"writeBinaryFile\".to_string(),",
          "",
          "[Removed Lines]",
          "140:       } => write_binary_file(&config, package_info, path, contents, options).map(Into::into),",
          "",
          "[Added Lines]",
          "142:       } => write_binary_file(&config, package_info, env, path, contents, options).map(Into::into),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "146:       #[cfg(fs_read_dir)]",
          "147:       Self::ReadDir { path, options } => {",
          "149:       }",
          "150:       #[cfg(not(fs_read_dir))]",
          "151:       Self::ReadDir { .. } => Err(crate::Error::ApiNotAllowlisted(\"fs > readDir\".to_string())),",
          "",
          "[Removed Lines]",
          "148:         read_dir(&config, package_info, path, options).map(Into::into)",
          "",
          "[Added Lines]",
          "150:         read_dir(&config, package_info, env, path, options).map(Into::into)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "155:         source,",
          "156:         destination,",
          "157:         options,",
          "159:       #[cfg(not(fs_copy_file))]",
          "160:       Self::CopyFile { .. } => Err(crate::Error::ApiNotAllowlisted(\"fs > copyFile\".to_string())),",
          "162:       #[cfg(fs_create_dir)]",
          "163:       Self::CreateDir { path, options } => {",
          "165:       }",
          "166:       #[cfg(not(fs_create_dir))]",
          "167:       Self::CreateDir { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "",
          "[Removed Lines]",
          "158:       } => copy_file(&config, package_info, source, destination, options).map(Into::into),",
          "164:         create_dir(&config, package_info, path, options).map(Into::into)",
          "",
          "[Added Lines]",
          "160:       } => copy_file(&config, package_info, env, source, destination, options).map(Into::into),",
          "166:         create_dir(&config, package_info, env, path, options).map(Into::into)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "171:       #[cfg(fs_remove_dir)]",
          "172:       Self::RemoveDir { path, options } => {",
          "174:       }",
          "175:       #[cfg(not(fs_remove_dir))]",
          "176:       Self::RemoveDir { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "",
          "[Removed Lines]",
          "173:         remove_dir(&config, package_info, path, options).map(Into::into)",
          "",
          "[Added Lines]",
          "175:         remove_dir(&config, package_info, env, path, options).map(Into::into)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "180:       #[cfg(fs_remove_file)]",
          "181:       Self::RemoveFile { path, options } => {",
          "183:       }",
          "184:       #[cfg(not(fs_remove_file))]",
          "185:       Self::RemoveFile { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "",
          "[Removed Lines]",
          "182:         remove_file(&config, package_info, path, options).map(Into::into)",
          "",
          "[Added Lines]",
          "184:         remove_file(&config, package_info, env, path, options).map(Into::into)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "191:         old_path,",
          "192:         new_path,",
          "193:         options,",
          "195:       #[cfg(not(fs_rename_file))]",
          "196:       Self::RenameFile { .. } => Err(crate::Error::ApiNotAllowlisted(",
          "197:         \"fs > renameFile\".to_string(),",
          "",
          "[Removed Lines]",
          "194:       } => rename_file(&config, package_info, old_path, new_path, options).map(Into::into),",
          "",
          "[Added Lines]",
          "196:       } => rename_file(&config, package_info, env, old_path, new_path, options).map(Into::into),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "205: pub fn read_dir(",
          "206:   config: &Config,",
          "207:   package_info: &PackageInfo,",
          "208:   path: PathBuf,",
          "209:   options: Option<DirOperationOptions>,",
          "210: ) -> crate::Result<Vec<dir::DiskEntry>> {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210:   env: &Env,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "213:   } else {",
          "214:     (false, None)",
          "215:   };",
          "218: }",
          "",
          "[Removed Lines]",
          "216:   dir::read_dir(resolve_path(config, package_info, path, dir)?, recursive)",
          "217:     .map_err(crate::Error::FailedToExecuteApi)",
          "",
          "[Added Lines]",
          "219:   dir::read_dir(",
          "220:     resolve_path(config, package_info, env, path, dir)?,",
          "221:     recursive,",
          "222:   )",
          "223:   .map_err(crate::Error::FailedToExecuteApi)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "222: pub fn copy_file(",
          "223:   config: &Config,",
          "224:   package_info: &PackageInfo,",
          "225:   source: PathBuf,",
          "226:   destination: PathBuf,",
          "227:   options: Option<FileOperationOptions>,",
          "228: ) -> crate::Result<()> {",
          "229:   let (src, dest) = match options.and_then(|o| o.dir) {",
          "230:     Some(dir) => (",
          "233:     ),",
          "234:     None => (source, destination),",
          "235:   };",
          "",
          "[Removed Lines]",
          "231:       resolve_path(config, package_info, source, Some(dir.clone()))?,",
          "232:       resolve_path(config, package_info, destination, Some(dir))?,",
          "",
          "[Added Lines]",
          "231:   env: &Env,",
          "238:       resolve_path(config, package_info, env, source, Some(dir.clone()))?,",
          "239:       resolve_path(config, package_info, env, destination, Some(dir))?,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "242: pub fn create_dir(",
          "243:   config: &Config,",
          "244:   package_info: &PackageInfo,",
          "245:   path: PathBuf,",
          "246:   options: Option<DirOperationOptions>,",
          "247: ) -> crate::Result<()> {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:   env: &Env,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "250:   } else {",
          "251:     (false, None)",
          "252:   };",
          "254:   if recursive {",
          "255:     fs::create_dir_all(resolved_path)?;",
          "256:   } else {",
          "",
          "[Removed Lines]",
          "253:   let resolved_path = resolve_path(config, package_info, path, dir)?;",
          "",
          "[Added Lines]",
          "261:   let resolved_path = resolve_path(config, package_info, env, path, dir)?;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "265: pub fn remove_dir(",
          "266:   config: &Config,",
          "267:   package_info: &PackageInfo,",
          "268:   path: PathBuf,",
          "269:   options: Option<DirOperationOptions>,",
          "270: ) -> crate::Result<()> {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:   env: &Env,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "273:   } else {",
          "274:     (false, None)",
          "275:   };",
          "277:   if recursive {",
          "278:     fs::remove_dir_all(resolved_path)?;",
          "279:   } else {",
          "",
          "[Removed Lines]",
          "276:   let resolved_path = resolve_path(config, package_info, path, dir)?;",
          "",
          "[Added Lines]",
          "285:   let resolved_path = resolve_path(config, package_info, env, path, dir)?;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "288: pub fn remove_file(",
          "289:   config: &Config,",
          "290:   package_info: &PackageInfo,",
          "291:   path: PathBuf,",
          "292:   options: Option<FileOperationOptions>,",
          "293: ) -> crate::Result<()> {",
          "295:   fs::remove_file(resolved_path)?;",
          "296:   Ok(())",
          "297: }",
          "",
          "[Removed Lines]",
          "294:   let resolved_path = resolve_path(config, package_info, path, options.and_then(|o| o.dir))?;",
          "",
          "[Added Lines]",
          "300:   env: &Env,",
          "304:   let resolved_path = resolve_path(config, package_info, env, path, options.and_then(|o| o.dir))?;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "301: pub fn rename_file(",
          "302:   config: &Config,",
          "303:   package_info: &PackageInfo,",
          "304:   old_path: PathBuf,",
          "305:   new_path: PathBuf,",
          "306:   options: Option<FileOperationOptions>,",
          "307: ) -> crate::Result<()> {",
          "308:   let (old, new) = match options.and_then(|o| o.dir) {",
          "309:     Some(dir) => (",
          "312:     ),",
          "313:     None => (old_path, new_path),",
          "314:   };",
          "",
          "[Removed Lines]",
          "310:       resolve_path(config, package_info, old_path, Some(dir.clone()))?,",
          "311:       resolve_path(config, package_info, new_path, Some(dir))?,",
          "",
          "[Added Lines]",
          "314:   env: &Env,",
          "321:       resolve_path(config, package_info, env, old_path, Some(dir.clone()))?,",
          "322:       resolve_path(config, package_info, env, new_path, Some(dir))?,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "320: pub fn write_file(",
          "321:   config: &Config,",
          "322:   package_info: &PackageInfo,",
          "323:   path: PathBuf,",
          "324:   contents: String,",
          "325:   options: Option<FileOperationOptions>,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334:   env: &Env,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "327:   File::create(resolve_path(",
          "328:     config,",
          "329:     package_info,",
          "330:     path,",
          "331:     options.and_then(|o| o.dir),",
          "332:   )?)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342:     env,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "340: pub fn write_binary_file(",
          "341:   config: &Config,",
          "342:   package_info: &PackageInfo,",
          "343:   path: PathBuf,",
          "344:   contents: String,",
          "345:   options: Option<FileOperationOptions>,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356:   env: &Env,",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "350:       File::create(resolve_path(",
          "351:         config,",
          "352:         package_info,",
          "353:         path,",
          "354:         options.and_then(|o| o.dir),",
          "355:       )?)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:         env,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "364: pub fn read_text_file(",
          "365:   config: &Config,",
          "366:   package_info: &PackageInfo,",
          "367:   path: PathBuf,",
          "368:   options: Option<FileOperationOptions>,",
          "369: ) -> crate::Result<String> {",
          "370:   file::read_string(resolve_path(",
          "371:     config,",
          "372:     package_info,",
          "373:     path,",
          "374:     options.and_then(|o| o.dir),",
          "375:   )?)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "382:   env: &Env,",
          "389:     env,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "381: pub fn read_binary_file(",
          "382:   config: &Config,",
          "383:   package_info: &PackageInfo,",
          "384:   path: PathBuf,",
          "385:   options: Option<FileOperationOptions>,",
          "386: ) -> crate::Result<Vec<u8>> {",
          "387:   file::read_binary(resolve_path(",
          "388:     config,",
          "389:     package_info,",
          "390:     path,",
          "391:     options.and_then(|o| o.dir),",
          "392:   )?)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "401:   env: &Env,",
          "408:     env,",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/notification.rs||core/tauri/src/endpoints/notification.rs": [
          "File: core/tauri/src/endpoints/notification.rs -> core/tauri/src/endpoints/notification.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: use serde::Deserialize;",
          "8: #[cfg(notification_all)]",
          "10: use crate::{Config, PackageInfo, Runtime, Window};",
          "12: use std::sync::Arc;",
          "",
          "[Removed Lines]",
          "9: use crate::api::notification::Notification;",
          "",
          "[Added Lines]",
          "9: use crate::{api::notification::Notification, Env, Manager};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:       Self::Notification { .. } => Err(crate::Error::ApiNotAllowlisted(\"notification\".to_string())),",
          "56:       Self::IsNotificationPermissionGranted => {",
          "57:         #[cfg(notification_all)]",
          "59:         #[cfg(not(notification_all))]",
          "60:         Ok(false.into())",
          "61:       }",
          "",
          "[Removed Lines]",
          "58:         return is_permission_granted(&config, package_info).map(Into::into);",
          "",
          "[Added Lines]",
          "58:         return is_permission_granted(&window, &config, package_info).map(Into::into);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84: }",
          "86: #[cfg(notification_all)]",
          "88:   config: &Config,",
          "89:   package_info: &PackageInfo,",
          "90: ) -> crate::Result<InvokeResponse> {",
          "92:   if let Some(allow_notification) = settings.allow_notification {",
          "93:     Ok(allow_notification.into())",
          "94:   } else {",
          "",
          "[Removed Lines]",
          "87: pub fn is_permission_granted(",
          "91:   let settings = crate::settings::read_settings(config, package_info);",
          "",
          "[Added Lines]",
          "87: pub fn is_permission_granted<R: Runtime>(",
          "88:   window: &Window<R>,",
          "92:   let settings =",
          "93:     crate::settings::read_settings(config, package_info, window.state::<Env>().inner());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "102:   config: &Config,",
          "103:   package_info: &PackageInfo,",
          "104: ) -> crate::Result<String> {",
          "106:   if let Some(allow_notification) = settings.allow_notification {",
          "107:     return Ok(if allow_notification {",
          "108:       PERMISSION_GRANTED.to_string()",
          "",
          "[Removed Lines]",
          "105:   let mut settings = crate::settings::read_settings(config, package_info);",
          "",
          "[Added Lines]",
          "107:   let mut settings =",
          "108:     crate::settings::read_settings(config, package_info, window.state::<Env>().inner());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "123:   let answer = rx.recv().unwrap();",
          "125:   settings.allow_notification = Some(answer);",
          "128:   if answer {",
          "129:     Ok(PERMISSION_GRANTED.to_string())",
          "",
          "[Removed Lines]",
          "126:   crate::settings::write_settings(config, package_info, settings)?;",
          "",
          "[Added Lines]",
          "129:   crate::settings::write_settings(",
          "130:     config,",
          "131:     package_info,",
          "132:     window.state::<Env>().inner(),",
          "133:     settings,",
          "134:   )?;",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/path.rs||core/tauri/src/endpoints/path.rs": [
          "File: core/tauri/src/endpoints/path.rs -> core/tauri/src/endpoints/path.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: use super::InvokeResponse;",
          "7: use serde::Deserialize;",
          "8: #[cfg(path_all)]",
          "9: use std::path::{Component, Path, PathBuf, MAIN_SEPARATOR};",
          "",
          "[Removed Lines]",
          "6: use crate::{api::path::BaseDirectory, Config, PackageInfo};",
          "",
          "[Added Lines]",
          "6: use crate::{api::path::BaseDirectory, Config, PackageInfo, Runtime, Window};",
          "7: #[cfg(path_all)]",
          "8: use crate::{Env, Manager};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: impl Cmd {",
          "44:   #[allow(unused_variables)]",
          "46:     self,",
          "47:     config: Arc<Config>,",
          "48:     package_info: &PackageInfo,",
          "49:   ) -> crate::Result<InvokeResponse> {",
          "50:     #[cfg(path_all)]",
          "51:     return match self {",
          "55:       Cmd::Resolve { paths } => resolve(paths).map(Into::into),",
          "56:       Cmd::Normalize { path } => normalize(path).map(Into::into),",
          "57:       Cmd::Join { paths } => join(paths).map(Into::into),",
          "",
          "[Removed Lines]",
          "45:   pub fn run(",
          "52:       Cmd::ResolvePath { directory, path } => {",
          "53:         resolve_path_handler(&config, package_info, path, directory).map(Into::into)",
          "54:       }",
          "",
          "[Added Lines]",
          "47:   pub fn run<R: Runtime>(",
          "49:     window: Window<R>,",
          "55:       Cmd::ResolvePath { directory, path } => resolve_path_handler(",
          "56:         &config,",
          "57:         package_info,",
          "58:         window.state::<Env>().inner(),",
          "59:         path,",
          "60:         directory,",
          "61:       )",
          "62:       .map(Into::into),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69: pub fn resolve_path_handler(",
          "70:   config: &Config,",
          "71:   package_info: &PackageInfo,",
          "72:   path: String,",
          "73:   directory: Option<BaseDirectory>,",
          "74: ) -> crate::Result<PathBuf> {",
          "76: }",
          "78: #[cfg(path_all)]",
          "",
          "[Removed Lines]",
          "75:   crate::api::path::resolve_path(config, package_info, path, directory).map_err(Into::into)",
          "",
          "[Added Lines]",
          "80:   env: &Env,",
          "84:   crate::api::path::resolve_path(config, package_info, env, path, directory).map_err(Into::into)",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/process.rs||core/tauri/src/endpoints/process.rs": [
          "File: core/tauri/src/endpoints/process.rs -> core/tauri/src/endpoints/process.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: use std::process::exit;",
          "7: use super::InvokeResponse;",
          "9: use serde::Deserialize;",
          "",
          "[Removed Lines]",
          "8: use crate::api::process::restart;",
          "",
          "[Added Lines]",
          "8: use crate::{api::process::restart, Manager, Runtime, Window};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: }",
          "22: impl Cmd {",
          "24:     match self {",
          "25:       Self::Relaunch => Ok({",
          "27:         ().into()",
          "28:       }),",
          "29:       Self::Exit { exit_code } => {",
          "",
          "[Removed Lines]",
          "23:   pub fn run(self) -> crate::Result<InvokeResponse> {",
          "26:         restart();",
          "",
          "[Added Lines]",
          "23:   pub fn run<R: Runtime>(self, window: Window<R>) -> crate::Result<InvokeResponse> {",
          "26:         restart(&window.state());",
          "",
          "---------------"
        ],
        "core/tauri/src/lib.rs||core/tauri/src/lib.rs": [
          "File: core/tauri/src/lib.rs -> core/tauri/src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:   self::utils::{",
          "109:     assets::Assets,",
          "110:     config::{Config, WindowUrl},",
          "112:   },",
          "113:   self::window::{Monitor, Window},",
          "114: };",
          "",
          "[Removed Lines]",
          "111:     PackageInfo,",
          "",
          "[Added Lines]",
          "111:     Env, PackageInfo,",
          "",
          "---------------"
        ],
        "core/tauri/src/settings.rs||core/tauri/src/settings.rs": [
          "File: core/tauri/src/settings.rs -> core/tauri/src/settings.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:     file::read_binary,",
          "12:     path::{resolve_path, BaseDirectory},",
          "13:   },",
          "15: };",
          "16: use serde::{Deserialize, Serialize};",
          "17: use std::{",
          "",
          "[Removed Lines]",
          "14:   Config, PackageInfo,",
          "",
          "[Added Lines]",
          "14:   Config, Env, PackageInfo,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: }",
          "34:   resolve_path(",
          "35:     config,",
          "36:     package_info,",
          "37:     \".tauri-settings\",",
          "38:     Some(BaseDirectory::App),",
          "39:   )",
          "",
          "[Removed Lines]",
          "33: fn get_settings_path(config: &Config, package_info: &PackageInfo) -> crate::api::Result<PathBuf> {",
          "",
          "[Added Lines]",
          "33: fn get_settings_path(",
          "34:   config: &Config,",
          "35:   package_info: &PackageInfo,",
          "36:   env: &Env,",
          "37: ) -> crate::api::Result<PathBuf> {",
          "41:     env,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44: pub(crate) fn write_settings(",
          "45:   config: &Config,",
          "46:   package_info: &PackageInfo,",
          "47:   settings: Settings,",
          "48: ) -> crate::Result<()> {",
          "50:   let settings_folder = Path::new(&settings_path).parent().unwrap();",
          "51:   if !settings_folder.exists() {",
          "52:     std::fs::create_dir(settings_folder)?;",
          "",
          "[Removed Lines]",
          "49:   let settings_path = get_settings_path(config, package_info)?;",
          "",
          "[Added Lines]",
          "52:   env: &Env,",
          "55:   let settings_path = get_settings_path(config, package_info, env)?;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "60: }",
          "65:     if settings_path.exists() {",
          "66:       read_binary(settings_path)",
          "67:         .and_then(|settings| bincode::deserialize(&settings).map_err(Into::into))",
          "",
          "[Removed Lines]",
          "63: pub fn read_settings(config: &Config, package_info: &PackageInfo) -> Settings {",
          "64:   if let Ok(settings_path) = get_settings_path(config, package_info) {",
          "",
          "[Added Lines]",
          "69: pub fn read_settings(config: &Config, package_info: &PackageInfo, env: &Env) -> Settings {",
          "70:   if let Ok(settings_path) = get_settings_path(config, package_info, env) {",
          "",
          "---------------"
        ],
        "core/tauri/src/updater/core.rs||core/tauri/src/updater/core.rs": [
          "File: core/tauri/src/updater/core.rs -> core/tauri/src/updater/core.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: use super::error::{Error, Result};",
          "7: use base64::decode;",
          "8: use http::StatusCode;",
          "9: use minisign_verify::{PublicKey, Signature};",
          "",
          "[Removed Lines]",
          "6: use crate::api::{file::Extract, version};",
          "",
          "[Added Lines]",
          "6: use crate::{",
          "7:   api::{file::Extract, version},",
          "8:   Env,",
          "9: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172: #[derive(Debug)]",
          "173: pub struct UpdateBuilder<'a> {",
          "175:   pub current_version: &'a str,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:   pub env: Env,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "181:   pub executable_path: Option<PathBuf>,",
          "182: }",
          "186:     UpdateBuilder {",
          "187:       urls: Vec::new(),",
          "188:       target: None,",
          "189:       executable_path: None,",
          "190:       current_version: env!(\"CARGO_PKG_VERSION\"),",
          "191:     }",
          "192:   }",
          "201:   #[allow(dead_code)]",
          "202:   pub fn url(mut self, url: String) -> Self {",
          "",
          "[Removed Lines]",
          "184: impl<'a> Default for UpdateBuilder<'a> {",
          "185:   fn default() -> Self {",
          "193: }",
          "196: impl<'a> UpdateBuilder<'a> {",
          "197:   pub fn new() -> Self {",
          "198:     UpdateBuilder::default()",
          "199:   }",
          "",
          "[Added Lines]",
          "190: impl<'a> UpdateBuilder<'a> {",
          "191:   pub fn new(env: Env) -> Self {",
          "193:       env,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "267:     };",
          "",
          "[Removed Lines]",
          "270:     let extract_path = extract_path_from_executable(&executable_path);",
          "",
          "[Added Lines]",
          "270:     let extract_path = extract_path_from_executable(&self.env, &executable_path);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "359:     Ok(Update {",
          "360:       target,",
          "361:       extract_path,",
          "362:       should_update,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "360:       env: self.env,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "372:   }",
          "373: }",
          "377: }",
          "379: #[derive(Debug, Clone)]",
          "380: pub struct Update {",
          "382:   pub body: Option<String>,",
          "",
          "[Removed Lines]",
          "375: pub fn builder<'a>() -> UpdateBuilder<'a> {",
          "376:   UpdateBuilder::new()",
          "",
          "[Added Lines]",
          "376: pub fn builder<'a>(env: Env) -> UpdateBuilder<'a> {",
          "377:   UpdateBuilder::new(env)",
          "383:   pub env: Env,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "420:     #[cfg(target_os = \"linux\")]",
          "422:       return Err(Error::UnsupportedPlatform);",
          "423:     }",
          "",
          "[Removed Lines]",
          "421:     if env::var_os(\"APPIMAGE\").is_none() {",
          "",
          "[Added Lines]",
          "424:     if self.env.appimage.is_none() {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "718: }",
          "724:   let extract_path = executable_path",
          "",
          "[Removed Lines]",
          "721: pub fn extract_path_from_executable(executable_path: &Path) -> PathBuf {",
          "",
          "[Added Lines]",
          "724: pub fn extract_path_from_executable(env: &Env, executable_path: &Path) -> PathBuf {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "750:   #[cfg(target_os = \"linux\")]",
          "752:     return PathBuf::from(app_image_path);",
          "753:   }",
          "",
          "[Removed Lines]",
          "751:   if let Some(app_image_path) = env::var_os(\"APPIMAGE\") {",
          "",
          "[Added Lines]",
          "754:   if let Some(app_image_path) = &env.appimage {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "905:   #[cfg(target_os = \"macos\")]",
          "906:   #[test]",
          "907:   fn test_app_name_in_path() {",
          "911:     let app_name = macos_app_name_in_path(&executable);",
          "912:     assert!(executable.ends_with(\"updater-example.app\"));",
          "913:     assert_eq!(app_name, \"updater-example.app\".to_string());",
          "",
          "[Removed Lines]",
          "908:     let executable = extract_path_from_executable(Path::new(",
          "909:       \"/Applications/updater-example.app/Contents/MacOS/updater-example\",",
          "910:     ));",
          "",
          "[Added Lines]",
          "911:     let executable = extract_path_from_executable(",
          "912:       &crate::Env::default(),",
          "913:       Path::new(\"/Applications/updater-example.app/Contents/MacOS/updater-example\"),",
          "914:     );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "921:       .with_body(generate_sample_raw_json())",
          "922:       .create();",
          "925:       .current_version(\"0.0.0\")",
          "926:       .url(mockito::server_url())",
          "927:       .build());",
          "",
          "[Removed Lines]",
          "924:     let check_update = block!(builder()",
          "",
          "[Added Lines]",
          "928:     let check_update = block!(builder(Default::default())",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "940:       .with_body(generate_sample_raw_json())",
          "941:       .create();",
          "944:       .current_version(\"0.0.0\")",
          "945:       .url(mockito::server_url())",
          "946:       .build());",
          "",
          "[Removed Lines]",
          "943:     let check_update = block!(builder()",
          "",
          "[Added Lines]",
          "947:     let check_update = block!(builder(Default::default())",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "959:       .with_body(generate_sample_raw_json())",
          "960:       .create();",
          "963:       .current_version(\"0.0.0\")",
          "964:       .target(\"win64\")",
          "965:       .url(mockito::server_url())",
          "",
          "[Removed Lines]",
          "962:     let check_update = block!(builder()",
          "",
          "[Added Lines]",
          "966:     let check_update = block!(builder(Default::default())",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "985:       .with_body(generate_sample_raw_json())",
          "986:       .create();",
          "989:       .current_version(\"10.0.0\")",
          "990:       .url(mockito::server_url())",
          "991:       .build());",
          "",
          "[Removed Lines]",
          "988:     let check_update = block!(builder()",
          "",
          "[Added Lines]",
          "992:     let check_update = block!(builder(Default::default())",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1008:       ))",
          "1009:       .create();",
          "1012:       .current_version(\"1.0.0\")",
          "1013:       .url(format!(",
          "1014:         \"{}/darwin/{{{{current_version}}}}\",",
          "",
          "[Removed Lines]",
          "1011:     let check_update = block!(builder()",
          "",
          "[Added Lines]",
          "1015:     let check_update = block!(builder(Default::default())",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1035:       ))",
          "1036:       .create();",
          "1039:       .current_version(\"1.0.0\")",
          "1040:       .url(format!(",
          "1041:         \"{}/win64/{{{{current_version}}}}\",",
          "",
          "[Removed Lines]",
          "1038:     let check_update = block!(builder()",
          "",
          "[Added Lines]",
          "1042:     let check_update = block!(builder(Default::default())",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1061:       ))",
          "1062:       .create();",
          "1065:       .current_version(\"10.0.0\")",
          "1066:       .url(format!(",
          "1067:         \"{}/darwin/{{{{current_version}}}}\",",
          "",
          "[Removed Lines]",
          "1064:     let check_update = block!(builder()",
          "",
          "[Added Lines]",
          "1068:     let check_update = block!(builder(Default::default())",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1083:       .with_body(generate_sample_raw_json())",
          "1084:       .create();",
          "1087:       .url(\"http://badurl.www.tld/1\".into())",
          "1088:       .url(mockito::server_url())",
          "1089:       .current_version(\"0.0.1\")",
          "",
          "[Removed Lines]",
          "1086:     let check_update = block!(builder()",
          "",
          "[Added Lines]",
          "1090:     let check_update = block!(builder(Default::default())",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1103:       .with_body(generate_sample_raw_json())",
          "1104:       .create();",
          "1107:       .urls(&[\"http://badurl.www.tld/1\".into(), mockito::server_url(),])",
          "1108:       .current_version(\"0.0.1\")",
          "1109:       .build());",
          "",
          "[Removed Lines]",
          "1106:     let check_update = block!(builder()",
          "",
          "[Added Lines]",
          "1110:     let check_update = block!(builder(Default::default())",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1122:       .with_body(generate_sample_bad_json())",
          "1123:       .create();",
          "1126:       .url(mockito::server_url())",
          "1127:       .current_version(\"0.0.1\")",
          "1128:       .build());",
          "",
          "[Removed Lines]",
          "1125:     let check_update = block!(builder()",
          "",
          "[Added Lines]",
          "1129:     let check_update = block!(builder(Default::default())",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1186:     let tmp_dir_path = tmp_dir_unwrap.path();",
          "1190:       .url(mockito::server_url())",
          "",
          "[Removed Lines]",
          "1189:     let check_update = block!(builder()",
          "",
          "[Added Lines]",
          "1193:     let check_update = block!(builder(Default::default())",
          "",
          "---------------"
        ],
        "core/tauri/src/updater/mod.rs||core/tauri/src/updater/mod.rs": [
          "File: core/tauri/src/updater/mod.rs -> core/tauri/src/updater/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "336:   api::{dialog::ask, process::restart},",
          "337:   runtime::Runtime,",
          "338:   utils::config::UpdaterConfig,",
          "340: };",
          "342: use std::sync::mpsc::channel;",
          "",
          "[Removed Lines]",
          "339:   Window,",
          "",
          "[Added Lines]",
          "339:   Env, Manager, Window,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "381:   window: Window<R>,",
          "382: ) {",
          "383:   if let Some(endpoints) = updater_config.endpoints.clone() {",
          "386:       .urls(&endpoints[..])",
          "387:       .current_version(&package_info.version)",
          "388:       .build()",
          "",
          "[Removed Lines]",
          "385:     match self::core::builder()",
          "",
          "[Added Lines]",
          "384:     let env = window.state::<Env>().inner().clone();",
          "386:     match self::core::builder(env)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "448:       let window = window.clone();",
          "449:       let window_isolation = window.clone();",
          "450:       let pubkey = pubkey.clone();",
          "453:         .urls(&endpoints[..])",
          "454:         .current_version(&package_info.version)",
          "455:         .build()",
          "",
          "[Removed Lines]",
          "452:       match self::core::builder()",
          "",
          "[Added Lines]",
          "452:       let env = window.state::<Env>().inner().clone();",
          "454:       match self::core::builder(env)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "558:     updater.download_and_install(pubkey.clone()).await?;",
          "561:     ask(",
          "562:       Some(&window),",
          "563:       \"Ready to Restart\",",
          "564:       \"The installation was successful, do you want to restart the application now?\",",
          "566:         if should_exit {",
          "568:         }",
          "569:       },",
          "570:     );",
          "",
          "[Removed Lines]",
          "565:       |should_exit| {",
          "567:           restart();",
          "",
          "[Added Lines]",
          "563:     let env = window.state::<Env>().inner().clone();",
          "568:       move |should_exit| {",
          "570:           restart(&env);",
          "",
          "---------------"
        ],
        "examples/resources/src-tauri/src/main.rs||examples/resources/src-tauri/src/main.rs": [
          "File: examples/resources/src-tauri/src/main.rs -> examples/resources/src-tauri/src/main.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #[cfg(not(any(feature = \"api-all\", feature = \"shell-all\", feature = \"shell-execute\")))]",
          "11: fn main() {",
          "13: }",
          "15: #[cfg(any(feature = \"api-all\", feature = \"shell-all\", feature = \"shell-execute\"))]",
          "",
          "[Removed Lines]",
          "12:   eprintln!(\"Not supported without `api-all`, `shell-all` or `shell-execute`\")",
          "",
          "[Added Lines]",
          "12:   eprintln!(\"Not supported without `api-all`, `shell-all` and `shell-execute`\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:   let script_path = resolve_path(",
          "26:     context.config(),",
          "27:     context.package_info(),",
          "28:     \"assets/index.js\",",
          "29:     Some(BaseDirectory::Resource),",
          "30:   )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28:     &Default::default(),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "060538331c138473159cf8fee0fcb7904ca33d3b",
      "candidate_info": {
        "commit_hash": "060538331c138473159cf8fee0fcb7904ca33d3b",
        "repo": "tauri-apps/tauri",
        "commit_url": "https://github.com/tauri-apps/tauri/commit/060538331c138473159cf8fee0fcb7904ca33d3b",
        "files": [
          ".changes/fs-endpoints-context.md",
          "core/tauri/src/api/path.rs",
          "core/tauri/src/endpoints/file_system.rs",
          "core/tauri/src/hooks.rs"
        ],
        "message": "feat(core): add context to the filesystem APIs errors, closes #3457 (#3480)",
        "before_after_code_files": [
          "core/tauri/src/api/path.rs||core/tauri/src/api/path.rs",
          "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs",
          "core/tauri/src/hooks.rs||core/tauri/src/hooks.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs"
          ],
          "candidate": [
            "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs"
          ]
        }
      },
      "candidate_diff": {
        "core/tauri/src/api/path.rs||core/tauri/src/api/path.rs": [
          "File: core/tauri/src/api/path.rs -> core/tauri/src/api/path.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #[repr(u16)]",
          "21: #[non_exhaustive]",
          "22: pub enum BaseDirectory {",
          "",
          "[Removed Lines]",
          "19: #[derive(Serialize_repr, Deserialize_repr, Clone, Debug)]",
          "",
          "[Added Lines]",
          "19: #[derive(Serialize_repr, Deserialize_repr, Clone, Copy, Debug)]",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs": [
          "File: core/tauri/src/endpoints/file_system.rs -> core/tauri/src/endpoints/file_system.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: };",
          "11: use super::InvokeContext;",
          "12: use serde::{",
          "13:   de::{Deserializer, Error as DeError},",
          "14:   Deserialize, Serialize,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: #[allow(unused_imports)]",
          "13: use anyhow::Context;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:     path: SafePathBuf,",
          "129:     options: Option<FileOperationOptions>,",
          "130:   ) -> super::Result<Vec<u8>> {",
          "132:       &context.config,",
          "133:       &context.package_info,",
          "134:       &context.window,",
          "135:       path,",
          "136:       options.and_then(|o| o.dir),",
          "139:   }",
          "141:   #[module_command_handler(fs_write_file, \"fs > writeFile\")]",
          "",
          "[Removed Lines]",
          "131:     file::read_binary(resolve_path(",
          "137:     )?)",
          "138:     .map_err(Into::into)",
          "",
          "[Added Lines]",
          "133:     let resolved_path = resolve_path(",
          "139:     )?;",
          "140:     file::read_binary(&resolved_path)",
          "141:       .with_context(|| format!(\"path: {}\", resolved_path.0.display()))",
          "142:       .map_err(Into::into)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145:     contents: Vec<u8>,",
          "146:     options: Option<FileOperationOptions>,",
          "147:   ) -> super::Result<()> {",
          "149:       &context.config,",
          "150:       &context.package_info,",
          "151:       &context.window,",
          "152:       path,",
          "153:       options.and_then(|o| o.dir),",
          "157:   }",
          "159:   #[module_command_handler(fs_read_dir, \"fs > readDir\")]",
          "",
          "[Removed Lines]",
          "148:     File::create(resolve_path(",
          "154:     )?)",
          "155:     .map_err(Into::into)",
          "156:     .and_then(|mut f| f.write_all(&contents).map_err(|err| err.into()))",
          "",
          "[Added Lines]",
          "152:     let resolved_path = resolve_path(",
          "158:     )?;",
          "159:     File::create(&resolved_path)",
          "160:       .with_context(|| format!(\"path: {}\", resolved_path.0.display()))",
          "161:       .map_err(Into::into)",
          "162:       .and_then(|mut f| f.write_all(&contents).map_err(|err| err.into()))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "167:     } else {",
          "168:       (false, None)",
          "169:     };",
          "181:   }",
          "183:   #[module_command_handler(fs_copy_file, \"fs > copyFile\")]",
          "",
          "[Removed Lines]",
          "170:     dir::read_dir(",
          "171:       resolve_path(",
          "172:         &context.config,",
          "173:         &context.package_info,",
          "174:         &context.window,",
          "175:         path,",
          "176:         dir,",
          "177:       )?,",
          "178:       recursive,",
          "179:     )",
          "180:     .map_err(Into::into)",
          "",
          "[Added Lines]",
          "176:     let resolved_path = resolve_path(",
          "177:       &context.config,",
          "178:       &context.package_info,",
          "179:       &context.window,",
          "180:       path,",
          "181:       dir,",
          "182:     )?;",
          "183:     dir::read_dir(&resolved_path, recursive)",
          "184:       .with_context(|| format!(\"path: {}\", resolved_path.0.display()))",
          "185:       .map_err(Into::into)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "194:           &context.package_info,",
          "195:           &context.window,",
          "196:           source,",
          "198:         )?,",
          "199:         resolve_path(",
          "200:           &context.config,",
          "",
          "[Removed Lines]",
          "197:           Some(dir.clone()),",
          "",
          "[Added Lines]",
          "202:           Some(dir),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "206:       ),",
          "207:       None => (source, destination),",
          "208:     };",
          "210:     Ok(())",
          "211:   }",
          "",
          "[Removed Lines]",
          "209:     fs::copy(src, dest)?;",
          "",
          "[Added Lines]",
          "214:     fs::copy(src.clone(), dest.clone())",
          "215:       .with_context(|| format!(\"source: {}, dest: {}\", src.0.display(), dest.0.display()))?;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "229:       dir,",
          "230:     )?;",
          "231:     if recursive {",
          "233:     } else {",
          "235:     }",
          "237:     Ok(())",
          "",
          "[Removed Lines]",
          "232:       fs::create_dir_all(resolved_path)?;",
          "234:       fs::create_dir(resolved_path)?;",
          "",
          "[Added Lines]",
          "238:       fs::create_dir_all(&resolved_path)",
          "239:         .with_context(|| format!(\"path: {}\", resolved_path.0.display()))?;",
          "241:       fs::create_dir(&resolved_path)",
          "242:         .with_context(|| format!(\"path: {} (non recursive)\", resolved_path.0.display()))?;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "256:       dir,",
          "257:     )?;",
          "258:     if recursive {",
          "260:     } else {",
          "262:     }",
          "264:     Ok(())",
          "",
          "[Removed Lines]",
          "259:       fs::remove_dir_all(resolved_path)?;",
          "261:       fs::remove_dir(resolved_path)?;",
          "",
          "[Added Lines]",
          "267:       fs::remove_dir_all(&resolved_path)",
          "268:         .with_context(|| format!(\"path: {}\", resolved_path.0.display()))?;",
          "270:       fs::remove_dir(&resolved_path)",
          "271:         .with_context(|| format!(\"path: {} (non recursive)\", resolved_path.0.display()))?;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "277:       path,",
          "278:       options.and_then(|o| o.dir),",
          "279:     )?;",
          "281:     Ok(())",
          "282:   }",
          "",
          "[Removed Lines]",
          "280:     fs::remove_file(resolved_path)?;",
          "",
          "[Added Lines]",
          "290:     fs::remove_file(&resolved_path)",
          "291:       .with_context(|| format!(\"path: {}\", resolved_path.0.display()))?;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "295:           &context.package_info,",
          "296:           &context.window,",
          "297:           old_path,",
          "299:         )?,",
          "300:         resolve_path(",
          "301:           &context.config,",
          "",
          "[Removed Lines]",
          "298:           Some(dir.clone()),",
          "",
          "[Added Lines]",
          "309:           Some(dir),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "307:       ),",
          "308:       None => (old_path, new_path),",
          "309:     };",
          "311:   }",
          "312: }",
          "",
          "[Removed Lines]",
          "310:     fs::rename(old, new).map_err(Into::into)",
          "",
          "[Added Lines]",
          "321:     fs::rename(&old, &new)",
          "322:       .with_context(|| format!(\"old: {}, new: {}\", old.0.display(), new.0.display()))",
          "323:       .map_err(Into::into)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "320:   dir: Option<BaseDirectory>,",
          "321: ) -> super::Result<SafePathBuf> {",
          "322:   let env = window.state::<Env>().inner();",
          "324:     Ok(path) => {",
          "325:       if window.state::<Scopes>().fs.is_allowed(&path) {",
          "326:         Ok(SafePathBuf(path))",
          "",
          "[Removed Lines]",
          "323:   match crate::api::path::resolve_path(config, package_info, env, path, dir) {",
          "",
          "[Added Lines]",
          "336:   match crate::api::path::resolve_path(config, package_info, env, &path, dir) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "330:         ))",
          "331:       }",
          "332:     }",
          "334:   }",
          "335: }",
          "",
          "[Removed Lines]",
          "333:     Err(e) => Err(e.into()),",
          "",
          "[Added Lines]",
          "346:     Err(e) => super::Result::<SafePathBuf>::Err(e.into())",
          "347:       .with_context(|| format!(\"path: {}, base dir: {:?}\", path.0.display(), dir)),",
          "",
          "---------------"
        ],
        "core/tauri/src/hooks.rs||core/tauri/src/hooks.rs": [
          "File: core/tauri/src/hooks.rs -> core/tauri/src/hooks.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:   #[inline(always)]",
          "101:   pub fn from_anyhow(error: anyhow::Error) -> Self {",
          "103:   }",
          "104: }",
          "",
          "[Removed Lines]",
          "102:     Self(JsonValue::String(error.to_string()))",
          "",
          "[Added Lines]",
          "102:     Self(JsonValue::String(format!(\"{:#}\", error)))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f4121c128e69b06c3eb5eea14dd2af4720afed49",
      "candidate_info": {
        "commit_hash": "f4121c128e69b06c3eb5eea14dd2af4720afed49",
        "repo": "tauri-apps/tauri",
        "commit_url": "https://github.com/tauri-apps/tauri/commit/f4121c128e69b06c3eb5eea14dd2af4720afed49",
        "files": [
          ".changes/fix-readir-symlink-scope.md",
          "core/tauri/src/api/dir.rs",
          "core/tauri/src/api/file.rs",
          "core/tauri/src/endpoints/file_system.rs"
        ],
        "message": "fix(endpoints/fs/readDir): don't read symlinks that are not allowed b\u2026 (#5123)",
        "before_after_code_files": [
          "core/tauri/src/api/dir.rs||core/tauri/src/api/dir.rs",
          "core/tauri/src/api/file.rs||core/tauri/src/api/file.rs",
          "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "core/tauri/src/api/dir.rs||core/tauri/src/api/dir.rs",
            "core/tauri/src/api/file.rs||core/tauri/src/api/file.rs",
            "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs"
          ],
          "candidate": [
            "core/tauri/src/api/dir.rs||core/tauri/src/api/dir.rs",
            "core/tauri/src/api/file.rs||core/tauri/src/api/file.rs",
            "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs"
          ]
        }
      },
      "candidate_diff": {
        "core/tauri/src/api/dir.rs||core/tauri/src/api/dir.rs": [
          "File: core/tauri/src/api/dir.rs -> core/tauri/src/api/dir.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: use serde::Serialize;",
          "8: use std::{",
          "10:   path::{Path, PathBuf},",
          "11: };",
          "12: use tempfile::{self, tempdir};",
          "",
          "[Removed Lines]",
          "9:   fs::{self, metadata},",
          "",
          "[Added Lines]",
          "9:   fs::{self, metadata, symlink_metadata},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:   metadata(path).map(|md| md.is_dir()).map_err(Into::into)",
          "32: }",
          "35: pub fn read_dir<P: AsRef<Path>>(path: P, recursive: bool) -> crate::api::Result<Vec<DiskEntry>> {",
          "36:   let mut files_and_dirs: Vec<DiskEntry> = vec![];",
          "37:   for entry in fs::read_dir(path)? {",
          "38:     let path = entry?.path();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: fn is_symlink<P: AsRef<Path>>(path: P) -> crate::api::Result<bool> {",
          "36:   #[cfg(windows)]",
          "37:   let ret = symlink_metadata(path)",
          "38:     .map(|md| md.is_symlink())",
          "39:     .map_err(Into::into);",
          "41:   #[cfg(not(windows))]",
          "42:   let ret = symlink_metadata(path)",
          "43:     .map(|md| md.file_type().is_symlink())",
          "44:     .map_err(Into::into);",
          "46:   ret",
          "47: }",
          "51:   read_dir_with_options(path, recursive, ReadDirOptions { scope: None })",
          "52: }",
          "54: #[derive(Clone, Copy)]",
          "55: pub(crate) struct ReadDirOptions<'a> {",
          "56:   pub scope: Option<&'a crate::FsScope>,",
          "57: }",
          "59: pub(crate) fn read_dir_with_options<P: AsRef<Path>>(",
          "60:   path: P,",
          "61:   recursive: bool,",
          "62:   options: ReadDirOptions<'_>,",
          "63: ) -> crate::api::Result<Vec<DiskEntry>> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:       files_and_dirs.push(DiskEntry {",
          "43:         path: path.clone(),",
          "44:         children: if flag {",
          "50:         } else {",
          "51:           None",
          "52:         },",
          "",
          "[Removed Lines]",
          "45:           Some(if recursive {",
          "46:             read_dir(&path_as_string, true)?",
          "47:           } else {",
          "48:             vec![]",
          "49:           })",
          "",
          "[Added Lines]",
          "73:           Some(",
          "74:             if recursive",
          "75:               && (!is_symlink(&path_as_string)?",
          "76:                 || options.scope.map(|s| s.is_allowed(&path)).unwrap_or(true))",
          "77:             {",
          "78:               read_dir_with_options(&path_as_string, true, options)?",
          "79:             } else {",
          "80:               vec![]",
          "81:             },",
          "82:           )",
          "",
          "---------------"
        ],
        "core/tauri/src/api/file.rs||core/tauri/src/api/file.rs": [
          "File: core/tauri/src/api/file.rs -> core/tauri/src/api/file.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: #[cfg(test)]",
          "75: mod test {",
          "76:   use super::*;",
          "77:   use crate::api::Error;",
          "78:   use quickcheck::{Arbitrary, Gen};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:   #[cfg(not(windows))]",
          "",
          "---------------"
        ],
        "core/tauri/src/endpoints/file_system.rs||core/tauri/src/endpoints/file_system.rs": [
          "File: core/tauri/src/endpoints/file_system.rs -> core/tauri/src/endpoints/file_system.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:       path,",
          "192:       dir,",
          "193:     )?;",
          "197:   }",
          "199:   #[module_command_handler(fs_copy_file)]",
          "",
          "[Removed Lines]",
          "194:     dir::read_dir(&resolved_path, recursive)",
          "195:       .with_context(|| format!(\"path: {}\", resolved_path.display()))",
          "196:       .map_err(Into::into)",
          "",
          "[Added Lines]",
          "194:     dir::read_dir_with_options(",
          "195:       &resolved_path,",
          "196:       recursive,",
          "197:       dir::ReadDirOptions {",
          "198:         scope: Some(&context.window.state::<Scopes>().fs),",
          "199:       },",
          "200:     )",
          "201:     .with_context(|| format!(\"path: {}\", resolved_path.display()))",
          "202:     .map_err(Into::into)",
          "",
          "---------------"
        ]
      }
    }
  ]
}