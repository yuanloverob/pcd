{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e2de9c5899c3ce22e9d2da9f1e2b823fe185a551",
      "candidate_info": {
        "commit_hash": "e2de9c5899c3ce22e9d2da9f1e2b823fe185a551",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/e2de9c5899c3ce22e9d2da9f1e2b823fe185a551",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java"
        ],
        "message": "PDFBOX-5056: remove unneeded field\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884800 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     public static final PDDeviceRGB INSTANCE = new PDDeviceRGB();",
          "38:     private final PDColor initialColor = new PDColor(new float[] { 0, 0, 0 }, this);",
          "40:     private volatile boolean initDone = false;",
          "42:     private PDDeviceRGB()",
          "",
          "[Removed Lines]",
          "39:     private ColorSpace awtColorSpace;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:             {",
          "62:                 return;",
          "63:             }",
          "72:             initDone = true;",
          "",
          "[Removed Lines]",
          "64:             awtColorSpace = ColorSpace.getInstance(ColorSpace.CS_sRGB);",
          "69:             awtColorSpace.toRGB(new float[] { 0, 0, 0, 0 });",
          "",
          "[Added Lines]",
          "67:             ColorSpace.getInstance(ColorSpace.CS_sRGB).toRGB(new float[] { 0, 0, 0, 0 });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "600b6f550e8b0aee2deeb0e974f47a59e418202b",
      "candidate_info": {
        "commit_hash": "600b6f550e8b0aee2deeb0e974f47a59e418202b",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/600b6f550e8b0aee2deeb0e974f47a59e418202b",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java"
        ],
        "message": "PDFBOX-4892: use lowercase, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890169 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "645:     {",
          "646:         try",
          "647:         {",
          "649:             {",
          "650:                 OTFParser parser = new OTFParser(false, true);",
          "651:                 OpenTypeFont otf = parser.parse(ttfFile);",
          "",
          "[Removed Lines]",
          "648:             if (ttfFile.getPath().endsWith(\".otf\"))",
          "",
          "[Added Lines]",
          "648:             if (ttfFile.getPath().toLowerCase().endsWith(\".otf\"))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "377f9c250848218d9726061050bc976e782c9684",
      "candidate_info": {
        "commit_hash": "377f9c250848218d9726061050bc976e782c9684",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/377f9c250848218d9726061050bc976e782c9684",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java"
        ],
        "message": "PDFBOX-4892: show what went wrong (see thread by J. L. on dev list)\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888097 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java||fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java||fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java -> fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "471:     protected InputStream getExternalCMap(String name) throws IOException",
          "472:     {",
          "474:     }",
          "476:     private Object parseNextToken(PushbackInputStream is) throws IOException",
          "",
          "[Removed Lines]",
          "473:         return new BufferedInputStream(getClass().getResourceAsStream(name));",
          "",
          "[Added Lines]",
          "473:         InputStream resourceAsStream = getClass().getResourceAsStream(name);",
          "474:         if (resourceAsStream == null)",
          "475:         {",
          "476:             throw new IOException(\"Error: Could not find referenced cmap stream \" + name);",
          "477:         }",
          "478:         return new BufferedInputStream(resourceAsStream);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38cf2f665ed8039d4370e8084787e8b564c8eda5",
      "candidate_info": {
        "commit_hash": "38cf2f665ed8039d4370e8084787e8b564c8eda5",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/38cf2f665ed8039d4370e8084787e8b564c8eda5",
        "files": [
          "pdfbox/pom.xml",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/TrueTypeEmbedder.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/TestFontEmbedding.java"
        ],
        "message": "PDFBOX-5191: fix bug that made isEmbeddingPermitted() too restrictive, by Larry Lynn\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889883 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/TrueTypeEmbedder.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/TrueTypeEmbedder.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/TestFontEmbedding.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/TestFontEmbedding.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/TrueTypeEmbedder.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/TrueTypeEmbedder.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/TrueTypeEmbedder.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/TrueTypeEmbedder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:     {",
          "156:         if (ttf.getOS2Windows() != null)",
          "157:         {",
          "158:             int fsType = ttf.getOS2Windows().getFsType();",
          "161:             {",
          "163:                 return false;",
          "",
          "[Removed Lines]",
          "154:     private boolean isEmbeddingPermitted(TrueTypeFont ttf) throws IOException",
          "159:             if ((fsType & OS2WindowsMetricsTable.FSTYPE_RESTRICTED) ==",
          "160:                              OS2WindowsMetricsTable.FSTYPE_RESTRICTED)",
          "",
          "[Added Lines]",
          "154:     boolean isEmbeddingPermitted(TrueTypeFont ttf) throws IOException",
          "159:             int maskedFsType = fsType & 0x000F;",
          "161:             if (maskedFsType == OS2WindowsMetricsTable.FSTYPE_RESTRICTED)",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/TestFontEmbedding.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/TestFontEmbedding.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/TestFontEmbedding.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/TestFontEmbedding.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.IOException;",
          "23: import java.io.InputStream;",
          "24: import java.util.HashSet;",
          "25: import java.util.Set;",
          "26: import junit.framework.TestCase;",
          "27: import org.apache.pdfbox.cos.COSArray;",
          "28: import org.apache.pdfbox.cos.COSDictionary;",
          "29: import org.apache.pdfbox.cos.COSName;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import java.util.Map;",
          "30: import org.apache.fontbox.ttf.OS2WindowsMetricsTable;",
          "31: import org.apache.fontbox.ttf.TTFParser;",
          "32: import org.apache.fontbox.ttf.TrueTypeFont;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: import org.apache.pdfbox.pdmodel.PDPageContentStream.AppendMode;",
          "35: import org.apache.pdfbox.text.PDFTextStripper;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import static org.mockito.BDDMockito.given;",
          "44: import org.mockito.Mockito;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "302:         assertEquals(text1 + \" \" + text2, extractedText.trim());",
          "303:         document.close();",
          "304:     }",
          "305: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "315:     private class TrueTypeEmbedderTester extends TrueTypeEmbedder",
          "316:     {",
          "322:         TrueTypeEmbedderTester(PDDocument document, COSDictionary dict, TrueTypeFont ttf, boolean embedSubset)",
          "323:                 throws IOException",
          "324:         {",
          "325:             super(document, dict, ttf, embedSubset);",
          "326:         }",
          "328:         @Override",
          "329:         protected void buildSubset(InputStream ttfSubset, String tag, Map<Integer, Integer> gidToCid)",
          "330:                 throws IOException",
          "331:         {",
          "334:         }",
          "335:     }",
          "342:     public void testIsEmbeddingPermittedMultipleVersions() throws IOException",
          "343:     {",
          "345:         PDDocument doc = new PDDocument();",
          "346:         COSDictionary cosDictionary = new COSDictionary();",
          "347:         InputStream input = PDFont.class.getResourceAsStream(\"/org/apache/pdfbox/resources/ttf/LiberationSans-Regular.ttf\");",
          "348:         TrueTypeFont ttf = new TTFParser().parseEmbedded(input);",
          "349:         TrueTypeEmbedderTester tester = new TrueTypeEmbedderTester(doc, cosDictionary, ttf, true);",
          "350:         TrueTypeFont mockTtf = Mockito.mock(TrueTypeFont.class);",
          "351:         OS2WindowsMetricsTable mockOS2 = Mockito.mock(OS2WindowsMetricsTable.class);",
          "352:         given(mockTtf.getOS2Windows()).willReturn(mockOS2);",
          "353:         Boolean embeddingIsPermitted;",
          "356:         given(mockTtf.getOS2Windows().getFsType()).willReturn((short) 0x0000);",
          "357:         embeddingIsPermitted = tester.isEmbeddingPermitted(mockTtf);",
          "360:         assertTrue(embeddingIsPermitted);",
          "364:         given(mockTtf.getOS2Windows().getFsType()).willReturn((short) 0x0002);",
          "365:         embeddingIsPermitted = tester.isEmbeddingPermitted(mockTtf);",
          "368:         assertFalse(embeddingIsPermitted);",
          "372:         given(mockTtf.getOS2Windows().getFsType()).willReturn((short) 0x0004);",
          "373:         embeddingIsPermitted = tester.isEmbeddingPermitted(mockTtf);",
          "376:         assertTrue(embeddingIsPermitted);",
          "381:         given(mockTtf.getOS2Windows().getFsType()).willReturn((short) 0x0006);",
          "382:         embeddingIsPermitted = tester.isEmbeddingPermitted(mockTtf);",
          "385:         assertTrue(embeddingIsPermitted);",
          "389:         given(mockTtf.getOS2Windows().getFsType()).willReturn((short) 0x0008);",
          "390:         embeddingIsPermitted = tester.isEmbeddingPermitted(mockTtf);",
          "393:         assertTrue(embeddingIsPermitted);",
          "398:         given(mockTtf.getOS2Windows().getFsType()).willReturn((short) 0x000A);",
          "399:         embeddingIsPermitted = tester.isEmbeddingPermitted(mockTtf);",
          "402:         assertTrue(embeddingIsPermitted);",
          "407:         given(mockTtf.getOS2Windows().getFsType()).willReturn((short) 0x000C);",
          "408:         embeddingIsPermitted = tester.isEmbeddingPermitted(mockTtf);",
          "411:         assertTrue(embeddingIsPermitted);",
          "416:         given(mockTtf.getOS2Windows().getFsType()).willReturn((short) 0x000E);",
          "417:         embeddingIsPermitted = tester.isEmbeddingPermitted(mockTtf);",
          "420:         assertTrue(embeddingIsPermitted);",
          "423:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7d3f728f3b6c00a5d3da43590dffbfbf4ce25ae",
      "candidate_info": {
        "commit_hash": "a7d3f728f3b6c00a5d3da43590dffbfbf4ce25ae",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/a7d3f728f3b6c00a5d3da43590dffbfbf4ce25ae",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java"
        ],
        "message": "PDFBOX-4892: fix typo\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1886670 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java||pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java||pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java"
        ]
      }
    }
  ]
}