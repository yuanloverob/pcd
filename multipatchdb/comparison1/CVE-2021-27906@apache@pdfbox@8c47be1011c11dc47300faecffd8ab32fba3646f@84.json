{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a0c25bef463512e0ec166c96a02e28cb39dd0b3e",
      "candidate_info": {
        "commit_hash": "a0c25bef463512e0ec166c96a02e28cb39dd0b3e",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/a0c25bef463512e0ec166c96a02e28cb39dd0b3e",
        "files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java",
          "pdfbox/src/test/java/org/apache/pdfbox/text/TestTextStripper.java"
        ],
        "message": "PDFBOX-4892: SonarQube fix\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881564 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java",
          "pdfbox/src/test/java/org/apache/pdfbox/text/TestTextStripper.java||pdfbox/src/test/java/org/apache/pdfbox/text/TestTextStripper.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget;",
          "32: import org.junit.After;",
          "33: import org.junit.Before;",
          "34: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import static org.junit.Assert.assertNotEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:             radioButton.setValue(\"c\");",
          "180:         }",
          "181:         catch (IOException e)",
          "182:         {",
          "",
          "[Removed Lines]",
          "172:             assertFalse(\"This shall no longer be 2\", \"2\".equals(radioButton.getValueAsString()));",
          "173:             assertFalse(\"This shall no longer be 2\", \"2\".equals(radioButton.getWidgets().get(2).getCOSObject().getNameAsString(COSName.AS)));",
          "176:             assertTrue(\"This shall be c\", \"c\".equals(radioButton.getValueAsString()));",
          "177:             assertTrue(\"This shall be c\", \"c\".equals(radioButton.getWidgets().get(2).getCOSObject().getNameAsString(COSName.AS)));",
          "",
          "[Added Lines]",
          "173:             assertNotEquals(\"This shall no longer be 2\", \"2\", radioButton.getValueAsString());",
          "174:             assertNotEquals(\"This shall no longer be 2\", \"2\", radioButton.getWidgets().get(2).getCOSObject().getNameAsString(COSName.AS));",
          "177:             assertEquals(\"This shall be c\", \"c\", radioButton.getValueAsString());",
          "178:             assertEquals(\"This shall be c\", \"c\", radioButton.getWidgets().get(2).getCOSObject().getNameAsString(COSName.AS));",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/text/TestTextStripper.java||pdfbox/src/test/java/org/apache/pdfbox/text/TestTextStripper.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/text/TestTextStripper.java -> pdfbox/src/test/java/org/apache/pdfbox/text/TestTextStripper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: import org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination;",
          "56: import org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDDocumentOutline;",
          "57: import org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: import org.junit.Assert;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "497:         stripper.setEndBookmark(oi3);",
          "498:         String textoi23 = stripper.getText(doc);",
          "499:         assertFalse(textoi23.isEmpty());",
          "502:         String expectedTextoi23 =",
          "503:                 \"Second at level 1\\n\"",
          "",
          "[Removed Lines]",
          "500:         assertFalse(textoi23.equals(textFull));",
          "",
          "[Added Lines]",
          "501:         Assert.assertNotEquals(textoi23, textFull);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "517:         stripper.setEndPage(4);",
          "518:         String textp34 = stripper.getText(doc);",
          "519:         assertFalse(textp34.isEmpty());",
          "526:         stripper.setStartBookmark(oi2);",
          "527:         stripper.setEndBookmark(oi2);",
          "528:         String textoi2 = stripper.getText(doc);",
          "529:         assertFalse(textoi2.isEmpty());",
          "533:         String expectedTextoi2 =",
          "534:                 \"Second at level 1\\n\"",
          "",
          "[Removed Lines]",
          "520:         assertFalse(textoi23.equals(textFull));",
          "521:         assertTrue(textoi23.equals(textp34));",
          "530:         assertFalse(textoi2.equals(textoi23));",
          "531:         assertFalse(textoi23.equals(textFull));",
          "",
          "[Added Lines]",
          "521:         Assert.assertNotEquals(textoi23, textFull);",
          "522:         Assert.assertEquals(textoi23, textp34);",
          "530:         Assert.assertNotEquals(textoi2, textoi23);",
          "531:         Assert.assertNotEquals(textoi23, textFull);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "545:         stripper.setEndPage(3);",
          "546:         String textp3 = stripper.getText(doc);",
          "547:         assertFalse(textp3.isEmpty());",
          "553:         PDOutlineItem oiOrphan = new PDOutlineItem();",
          "554:         stripper.setStartBookmark(oiOrphan);",
          "",
          "[Removed Lines]",
          "548:         assertFalse(textp3.equals(textp34));",
          "549:         assertFalse(textoi23.equals(textFull));",
          "550:         assertTrue(textoi2.equals(textp3));",
          "",
          "[Added Lines]",
          "548:         Assert.assertNotEquals(textp3, textp34);",
          "549:         Assert.assertNotEquals(textoi23, textFull);",
          "550:         Assert.assertEquals(textoi2, textp3);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "34d4151111015a05623753403ca312314ea575f2",
      "candidate_info": {
        "commit_hash": "34d4151111015a05623753403ca312314ea575f2",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/34d4151111015a05623753403ca312314ea575f2",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLinkAppearanceHandler.java"
        ],
        "message": "PDFBOX-4892: optimize, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891913 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLinkAppearanceHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLinkAppearanceHandler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:         }",
          "313:         else if (PDAnnotationLine.LE_R_OPEN_ARROW.equals(style) || PDAnnotationLine.LE_R_CLOSED_ARROW.equals(style))",
          "314:         {",
          "316:         }",
          "317:         else if (PDAnnotationLine.LE_SLASH.equals(style))",
          "318:         {",
          "324:         }",
          "328:         if (PDAnnotationLine.LE_R_CLOSED_ARROW.equals(style) ||",
          "329:             PDAnnotationLine.LE_CLOSED_ARROW.equals(style))",
          "330:         {",
          "",
          "[Removed Lines]",
          "315:             drawArrow(cs, x + (0 - sign) * width, y, (0 - sign) * width * 9);",
          "320:             cs.moveTo(x + (float) (Math.cos(Math.toRadians(60)) * width * 9),",
          "321:             y + (float) (Math.sin(Math.toRadians(60)) * width * 9));",
          "322:             cs.lineTo(x + (float) (Math.cos(Math.toRadians(240)) * width * 9),",
          "323:             y + (float) (Math.sin(Math.toRadians(240)) * width * 9));",
          "",
          "[Added Lines]",
          "315:             drawArrow(cs, x + (-sign) * width, y, (-sign) * width * 9);",
          "320:             float width9 = width * 9;",
          "321:             cs.moveTo(x + (float) (Math.cos(Math.toRadians(60)) * width9),",
          "322:                       y + (float) (Math.sin(Math.toRadians(60)) * width9));",
          "323:             cs.lineTo(x + (float) (Math.cos(Math.toRadians(240)) * width9),",
          "324:                       y + (float) (Math.sin(Math.toRadians(240)) * width9));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "356:         cs.lineTo(x, y);",
          "358:     }",
          "",
          "[Removed Lines]",
          "355:         cs.moveTo(x + (float) (Math.cos(ARROW_ANGLE) * len), y + (float) (Math.sin(ARROW_ANGLE) * len));",
          "357:         cs.lineTo(x + (float) (Math.cos(ARROW_ANGLE) * len), y - (float) (Math.sin(ARROW_ANGLE) * len));",
          "",
          "[Added Lines]",
          "354:         float armX = x + (float) (Math.cos(ARROW_ANGLE) * len);",
          "355:         float armYdelta = (float) (Math.sin(ARROW_ANGLE) * len);",
          "356:         cs.moveTo(armX, y + armYdelta);",
          "358:         cs.lineTo(armX, y - armYdelta);",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLinkAppearanceHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLinkAppearanceHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLinkAppearanceHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLinkAppearanceHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     public void generateNormalAppearance()",
          "65:     {",
          "66:         PDAnnotationLink annotation = (PDAnnotationLink) getAnnotation();",
          "68:         {",
          "70:             return;",
          "",
          "[Removed Lines]",
          "67:         if (annotation.getRectangle() == null)",
          "",
          "[Added Lines]",
          "67:         PDRectangle rect = annotation.getRectangle();",
          "68:         if (rect == null)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:             {",
          "103:                 for (int i = 0; i < pathsArray.length / 2; ++i)",
          "104:                 {",
          "105:                     if (!rect.contains(pathsArray[i * 2], pathsArray[i * 2 + 1]))",
          "",
          "[Removed Lines]",
          "102:                 PDRectangle rect = annotation.getRectangle();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:                 pathsArray[7] = borderEdge.getUpperRightY();",
          "129:             }",
          "133:             {",
          "136:                 {",
          "139:                 }",
          "141:                 {",
          "144:                     contentStream.lineTo(pathsArray[of + 4], pathsArray[of + 5]);",
          "145:                     contentStream.lineTo(pathsArray[of + 6], pathsArray[of + 7]);",
          "146:                     contentStream.closePath();",
          "",
          "[Removed Lines]",
          "131:             int of = 0;",
          "132:             while (of + 7 < pathsArray.length)",
          "134:                 if (annotation.getBorderStyle() != null &&",
          "135:                     annotation.getBorderStyle().getStyle().equals(PDBorderStyleDictionary.STYLE_UNDERLINE))",
          "137:                     contentStream.moveTo(pathsArray[of], pathsArray[of + 1]);",
          "138:                     contentStream.lineTo(pathsArray[of + 2], pathsArray[of + 3]);",
          "140:                 else",
          "142:                     contentStream.moveTo(pathsArray[of], pathsArray[of + 1]);",
          "143:                     contentStream.lineTo(pathsArray[of + 2], pathsArray[of + 3]);",
          "",
          "[Added Lines]",
          "131:             boolean underline = false;",
          "132:             if (pathsArray.length >= 8)",
          "134:                 PDBorderStyleDictionary borderStyleDic = annotation.getBorderStyle();",
          "135:                 if (borderStyleDic != null)",
          "137:                     underline = PDBorderStyleDictionary.STYLE_UNDERLINE.equals(borderStyleDic.getStyle());",
          "139:             }",
          "140:             int of = 0;",
          "141:             while (of + 7 < pathsArray.length)",
          "142:             {",
          "143:                 contentStream.moveTo(pathsArray[of], pathsArray[of + 1]);",
          "144:                 contentStream.lineTo(pathsArray[of + 2], pathsArray[of + 3]);",
          "145:                 if (!underline)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d64775345992fbb933f026ab80f67c8e72e228d",
      "candidate_info": {
        "commit_hash": "5d64775345992fbb933f026ab80f67c8e72e228d",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/5d64775345992fbb933f026ab80f67c8e72e228d",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java"
        ],
        "message": "PDFBOX-4892: optimize, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891916 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "524:             annotation.setRectangle(addRectDifferences(getRectangle(), annotation.getRectDifferences()));",
          "530:         }",
          "531:         else",
          "532:         {",
          "",
          "[Removed Lines]",
          "527:             annotation.getNormalAppearanceStream().setBBox(getRectangle());",
          "528:             AffineTransform transform = AffineTransform.getTranslateInstance(-getRectangle().getLowerLeftX(), -getRectangle().getLowerLeftY());",
          "529:             annotation.getNormalAppearanceStream().setMatrix(transform);",
          "",
          "[Added Lines]",
          "527:             PDRectangle rect = getRectangle();",
          "528:             PDAppearanceStream appearanceStream = annotation.getNormalAppearanceStream();",
          "529:             AffineTransform transform =",
          "530:                     AffineTransform.getTranslateInstance(-rect.getLowerLeftX(), -rect.getLowerLeftY());",
          "531:             appearanceStream.setBBox(rect);",
          "532:             appearanceStream.setMatrix(transform);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "77214056349d23c4a1e2e1fa66d5cdcf7637a31f",
      "candidate_info": {
        "commit_hash": "77214056349d23c4a1e2e1fa66d5cdcf7637a31f",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/77214056349d23c4a1e2e1fa66d5cdcf7637a31f",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java"
        ],
        "message": "PDFBOX-5104: avoid ArrayIndexOutOfBoundsException\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1886807 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "561:             byte[] oHash = new byte[32];",
          "562:             byte[] oValidationSalt = new byte[8];",
          "563:             System.arraycopy(owner, 0, oHash, 0, 32);",
          "564:             System.arraycopy(owner, 32, oValidationSalt, 0, 8);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563:             if (owner.length < 40)",
          "564:             {",
          "566:                 throw new IOException(\"Owner password is too short\");",
          "567:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f4624f234ba360c6621c872c953693d93b61c75",
      "candidate_info": {
        "commit_hash": "8f4624f234ba360c6621c872c953693d93b61c75",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/8f4624f234ba360c6621c872c953693d93b61c75",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java"
        ],
        "message": "PDFBOX-5094: removed first attempt for a fix, rearranged existing code to meet the spec\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1886254 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "549:         extractCmapTable();",
          "550:         int gid = 0;",
          "554:         {",
          "555:             String name = encoding.getName(code);",
          "556:             if (\".notdef\".equals(name))",
          "",
          "[Removed Lines]",
          "552:         if (!isSymbolic() // non-symbolic",
          "553:                 || encoding instanceof WinAnsiEncoding || encoding instanceof MacRomanEncoding)",
          "",
          "[Added Lines]",
          "552:         if (!isSymbolic()) // non-symbolic",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "589:         }",
          "590:         else // symbolic",
          "591:         {",
          "593:             if (cmapWinSymbol != null)",
          "594:             {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593:             if (gid == 0 && cmapWinUnicode != null)",
          "594:             {",
          "595:                 if (encoding instanceof WinAnsiEncoding || encoding instanceof MacRomanEncoding)",
          "596:                 {",
          "597:                     String name = encoding.getName(code);",
          "598:                     if (\".notdef\".equals(name))",
          "599:                     {",
          "600:                         return 0;",
          "601:                     }",
          "602:                     String unicode = GlyphList.getAdobeGlyphList().toUnicode(name);",
          "603:                     if (unicode != null)",
          "604:                     {",
          "605:                         int uni = unicode.codePointAt(0);",
          "606:                         gid = cmapWinUnicode.getGlyphId(uni);",
          "607:                     }",
          "608:                 }",
          "609:                 else",
          "610:                 {",
          "611:                     gid = cmapWinUnicode.getGlyphId(code);",
          "612:                 }",
          "613:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "621:             {",
          "622:                 gid = cmapMacRoman.getGlyphId(code);",
          "623:             }",
          "646:         }",
          "648:         return gid;",
          "649:     }",
          "",
          "[Removed Lines]",
          "626:             if (gid == 0 && cmapWinUnicode != null)",
          "627:             {",
          "628:                 gid = cmapWinUnicode.getGlyphId(code);",
          "629:             }",
          "632:             if (gid == 0 && cmapWinUnicode != null && encoding != null)",
          "633:             {",
          "634:                 String name = encoding.getName(code);",
          "635:                 if (\".notdef\".equals(name))",
          "636:                 {",
          "637:                     return 0;",
          "638:                 }",
          "639:                 String unicode = GlyphList.getAdobeGlyphList().toUnicode(name);",
          "640:                 if (unicode != null)",
          "641:                 {",
          "642:                     int uni = unicode.codePointAt(0);",
          "643:                     gid = cmapWinUnicode.getGlyphId(uni);",
          "644:                 }",
          "645:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}