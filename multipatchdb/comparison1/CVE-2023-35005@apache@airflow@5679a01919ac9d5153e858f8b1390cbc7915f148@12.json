{
  "cve_id": "CVE-2023-35005",
  "cve_desc": "In Apache Airflow, some potentially sensitive values were being shown to the user in certain situations.\n\nThis vulnerability is mitigated by the fact configuration is not shown in the UI by default (only if `[webserver] expose_config` is set to `non-sensitive-only`), and not all uncensored values are actually sentitive.\n\n\nThis issue affects Apache Airflow: from 2.5.0 before 2.6.2. Users are recommended to update to version 2.6.2 or later.\n\n\n",
  "repo": "apache/airflow",
  "patch_hash": "5679a01919ac9d5153e858f8b1390cbc7915f148",
  "patch_info": {
    "commit_hash": "5679a01919ac9d5153e858f8b1390cbc7915f148",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/5679a01919ac9d5153e858f8b1390cbc7915f148",
    "files": [
      "airflow/config_templates/config.yml",
      "airflow/config_templates/default_airflow.cfg",
      "airflow/configuration.py",
      "airflow/www/views.py",
      "tests/core/test_configuration.py",
      "tests/www/views/test_views_configuration.py"
    ],
    "message": "Use single source of truth for sensitive config items (#31820)\n\nPreviously we had them defined both in constant and in config.yml.\n\nNow just config.yml\n\n(cherry picked from commit cab342ee010bfd048006ca458c760b37470b6ea5)",
    "before_after_code_files": [
      "airflow/config_templates/default_airflow.cfg||airflow/config_templates/default_airflow.cfg",
      "airflow/configuration.py||airflow/configuration.py",
      "airflow/www/views.py||airflow/www/views.py",
      "tests/core/test_configuration.py||tests/core/test_configuration.py",
      "tests/www/views/test_views_configuration.py||tests/www/views/test_views_configuration.py"
    ]
  },
  "patch_diff": {
    "airflow/config_templates/default_airflow.cfg||airflow/config_templates/default_airflow.cfg": [
      "File: airflow/config_templates/default_airflow.cfg -> airflow/config_templates/default_airflow.cfg",
      "--- Hunk 1 ---",
      "[Context before]",
      "995: # Example: result_backend = db+postgresql://postgres:airflow@postgres/airflow",
      "996: # result_backend =",
      "998: # Celery Flower is a sweet UI for Celery. Airflow has a shortcut to start",
      "999: # it ``airflow celery flower``. This defines the IP that Celery Flower runs on",
      "1000: flower_host = 0.0.0.0",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "998: # Optional configuration dictionary to pass to the Celery result backend SQLAlchemy engine.",
      "999: # Example: result_backend_sqlalchemy_engine_options = {{\"pool_recycle\": 1800}}",
      "1000: result_backend_sqlalchemy_engine_options =",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1018: # Import path for celery configuration options",
      "1019: celery_config_options = airflow.config_templates.default_celery.DEFAULT_CELERY_CONFIG",
      "1020: ssl_active = False",
      "1021: ssl_key =",
      "1022: ssl_cert =",
      "1023: ssl_cacert =",
      "1025: # Celery Pool implementation.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1026: # Path to the client key.",
      "1029: # Path to the client certificate.",
      "1032: # Path to the CA certificate.",
      "",
      "---------------"
    ],
    "airflow/configuration.py||airflow/configuration.py": [
      "File: airflow/configuration.py -> airflow/configuration.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: from contextlib import contextmanager, suppress",
      "38: from json.decoder import JSONDecodeError",
      "39: from re import Pattern",
      "41: from urllib.parse import urlsplit",
      "43: from typing_extensions import overload",
      "",
      "[Removed Lines]",
      "40: from typing import IO, Any, Dict, Iterable, Tuple, Union",
      "",
      "[Added Lines]",
      "40: from typing import IO, Any, Dict, Iterable, Set, Tuple, Union",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "147:         return yaml.safe_load(config_file)",
      "165: class AirflowConfigParser(ConfigParser):",
      "166:     \"\"\"Custom Airflow Configparser supporting defaults and deprecated options.\"\"\"",
      "",
      "[Removed Lines]",
      "150: SENSITIVE_CONFIG_VALUES = {",
      "151:     (\"database\", \"sql_alchemy_conn\"),",
      "152:     (\"core\", \"fernet_key\"),",
      "153:     (\"celery\", \"broker_url\"),",
      "154:     (\"celery\", \"flower_basic_auth\"),",
      "155:     (\"celery\", \"result_backend\"),",
      "156:     (\"atlas\", \"password\"),",
      "157:     (\"smtp\", \"smtp_password\"),",
      "158:     (\"webserver\", \"secret_key\"),",
      "159:     (\"secrets\", \"backend_kwargs\"),",
      "160:     # The following options are deprecated",
      "161:     (\"core\", \"sql_alchemy_conn\"),",
      "162: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "171:     # These configs can also be fetched from Secrets backend",
      "172:     # following the \"{section}__{name}__secret\" pattern",
      "176:     # A mapping of (new section, new option) -> (old section, old option, since_version).",
      "177:     # When reading new option, the old option will be checked to see if it exists. If it does a",
      "",
      "[Removed Lines]",
      "174:     sensitive_config_values: set[tuple[str, str]] = SENSITIVE_CONFIG_VALUES",
      "",
      "[Added Lines]",
      "159:     @cached_property",
      "160:     def sensitive_config_values(self) -> Set[tuple[str, str]]:  # noqa: UP006",
      "161:         default_config = default_config_yaml()",
      "162:         flattened = {",
      "163:             (s, k): item for s, s_c in default_config.items() for k, item in s_c.get(\"options\").items()",
      "164:         }",
      "165:         sensitive = {(section, key) for (section, key), v in flattened.items() if v.get(\"sensitive\") is True}",
      "166:         depr_option = {self.deprecated_options[x][:-1] for x in sensitive if x in self.deprecated_options}",
      "167:         depr_section = {",
      "168:             (self.deprecated_sections[s][0], k) for s, k in sensitive if s in self.deprecated_sections",
      "169:         }",
      "170:         sensitive.update(depr_section, depr_option)",
      "171:         return sensitive",
      "",
      "---------------"
    ],
    "airflow/www/views.py||airflow/www/views.py": [
      "File: airflow/www/views.py -> airflow/www/views.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "3951:         # TODO remove \"if raw\" usage in Airflow 3.0. Configuration can be fetched via the REST API.",
      "3952:         if raw:",
      "3953:             if expose_config == \"non-sensitive-only\":",
      "3956:                 updater = configupdater.ConfigUpdater()",
      "3957:                 updater.read(AIRFLOW_CONFIG)",
      "3959:                     if updater.has_option(sect, key):",
      "3960:                         updater[sect][key].value = \"< hidden >\"",
      "3961:                 config = str(updater)",
      "",
      "[Removed Lines]",
      "3954:                 from airflow.configuration import SENSITIVE_CONFIG_VALUES",
      "3958:                 for sect, key in SENSITIVE_CONFIG_VALUES:",
      "",
      "[Added Lines]",
      "3956:                 for sect, key in conf.sensitive_config_values:",
      "",
      "---------------"
    ],
    "tests/core/test_configuration.py||tests/core/test_configuration.py": [
      "File: tests/core/test_configuration.py -> tests/core/test_configuration.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:     AirflowConfigException,",
      "37:     AirflowConfigParser,",
      "38:     conf,",
      "39:     expand_env_var,",
      "40:     get_airflow_config,",
      "41:     get_airflow_home,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39:     default_config_yaml,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1447:             w = captured.pop()",
      "1448:             assert \"your `conf.get*` call to use the new name\" in str(w.message)",
      "1449:             assert w.category == FutureWarning",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1453: def test_sensitive_values():",
      "1454:     from airflow.settings import conf",
      "1456:     # this list was hardcoded prior to 2.6.2",
      "1457:     # included here to avoid regression in refactor",
      "1458:     # inclusion of keys ending in \"password\" or \"kwargs\" is automated from 2.6.2",
      "1459:     # items not matching this pattern must be added here manually",
      "1460:     sensitive_values = {",
      "1461:         (\"database\", \"sql_alchemy_conn\"),",
      "1462:         (\"core\", \"fernet_key\"),",
      "1463:         (\"celery\", \"broker_url\"),",
      "1464:         (\"celery\", \"flower_basic_auth\"),",
      "1465:         (\"celery\", \"result_backend\"),",
      "1466:         (\"atlas\", \"password\"),",
      "1467:         (\"smtp\", \"smtp_password\"),",
      "1468:         (\"webserver\", \"secret_key\"),",
      "1469:         (\"secrets\", \"backend_kwargs\"),",
      "1470:         (\"sentry\", \"sentry_dsn\"),",
      "1471:         (\"database\", \"sql_alchemy_engine_args\"),",
      "1472:         (\"core\", \"sql_alchemy_conn\"),",
      "1473:     }",
      "1474:     default_config = default_config_yaml()",
      "1475:     all_keys = {(s, k) for s, v in default_config.items() for k in v.get(\"options\")}",
      "1476:     suspected_sensitive = {(s, k) for (s, k) in all_keys if k.endswith((\"password\", \"kwargs\"))}",
      "1477:     exclude_list = {",
      "1478:         (\"kubernetes_executor\", \"delete_option_kwargs\"),",
      "1479:     }",
      "1480:     suspected_sensitive -= exclude_list",
      "1481:     sensitive_values.update(suspected_sensitive)",
      "1482:     assert sensitive_values == conf.sensitive_config_values",
      "",
      "---------------"
    ],
    "tests/www/views/test_views_configuration.py||tests/www/views/test_views_configuration.py": [
      "File: tests/www/views/test_views_configuration.py -> tests/www/views/test_views_configuration.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import html",
      "22: from tests.test_utils.config import conf_vars",
      "23: from tests.test_utils.www import check_content_in_response, check_content_not_in_response",
      "",
      "[Removed Lines]",
      "21: from airflow.configuration import SENSITIVE_CONFIG_VALUES, conf",
      "",
      "[Added Lines]",
      "21: from airflow.configuration import conf",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: @conf_vars({(\"webserver\", \"expose_config\"): \"True\"})",
      "37: def test_user_can_view_configuration(admin_client):",
      "38:     resp = admin_client.get(\"configuration\", follow_redirects=True)",
      "40:         value = conf.get(section, key, fallback=\"\")",
      "41:         if not value:",
      "42:             continue",
      "",
      "[Removed Lines]",
      "39:     for section, key in SENSITIVE_CONFIG_VALUES:",
      "",
      "[Added Lines]",
      "39:     for section, key in conf.sensitive_config_values:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "46: @conf_vars({(\"webserver\", \"expose_config\"): \"non-sensitive-only\"})",
      "47: def test_configuration_redacted(admin_client):",
      "48:     resp = admin_client.get(\"configuration\", follow_redirects=True)",
      "50:         value = conf.get(section, key, fallback=\"\")",
      "51:         if not value or value == \"airflow\":",
      "52:             continue",
      "",
      "[Removed Lines]",
      "49:     for section, key in SENSITIVE_CONFIG_VALUES:",
      "",
      "[Added Lines]",
      "49:     for section, key in conf.sensitive_config_values:",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "58: @conf_vars({(\"webserver\", \"expose_config\"): \"non-sensitive-only\"})",
      "59: def test_configuration_redacted_in_running_configuration(admin_client):",
      "60:     resp = admin_client.get(\"configuration\", follow_redirects=True)",
      "62:         value = conf.get(section, key, fallback=\"\")",
      "63:         if not value or value == \"airflow\":",
      "64:             continue",
      "",
      "[Removed Lines]",
      "61:     for section, key in SENSITIVE_CONFIG_VALUES:",
      "",
      "[Added Lines]",
      "61:     for section, key in conf.sensitive_config_values:",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0eb2722070f759441af4e3a3f4ad15e307a83217",
      "candidate_info": {
        "commit_hash": "0eb2722070f759441af4e3a3f4ad15e307a83217",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/0eb2722070f759441af4e3a3f4ad15e307a83217",
        "files": [
          ".github/workflows/ci.yml",
          "dev/breeze/src/airflow_breeze/commands/testing_commands.py",
          "dev/breeze/src/airflow_breeze/utils/selective_checks.py"
        ],
        "message": "Export SUSPENDED_PROVIDERS_FOLDERS for breeze testing commands (#30780)\n\nExport the SUSPENDED_PROVIDERS_FOLDERS env var in breeze directly\ninstead of in Airflow CI workflows. This will fix the issue for users\nexecuting `breeze testing ...` commands locally.\n\n(cherry picked from commit b04894e5125e682d9ad043602d4babe5b0b39b0c)",
        "before_after_code_files": [
          "dev/breeze/src/airflow_breeze/commands/testing_commands.py||dev/breeze/src/airflow_breeze/commands/testing_commands.py",
          "dev/breeze/src/airflow_breeze/utils/selective_checks.py||dev/breeze/src/airflow_breeze/utils/selective_checks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/31796"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "dev/breeze/src/airflow_breeze/commands/testing_commands.py||dev/breeze/src/airflow_breeze/commands/testing_commands.py": [
          "File: dev/breeze/src/airflow_breeze/commands/testing_commands.py -> dev/breeze/src/airflow_breeze/commands/testing_commands.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: from airflow_breeze.utils.path_utils import FILES_DIR, cleanup_python_generated_files",
          "71: from airflow_breeze.utils.run_tests import file_name_from_test_type, run_docker_compose_tests",
          "72: from airflow_breeze.utils.run_utils import get_filesystem_type, run_command",
          "74: LOW_MEMORY_CONDITION = 8 * 1024 * 1024 * 1024",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: from airflow_breeze.utils.suspended_providers import get_suspended_providers_folders",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:     env_variables[\"COLLECT_ONLY\"] = str(exec_shell_params.collect_only).lower()",
          "137:     env_variables[\"REMOVE_ARM_PACKAGES\"] = str(exec_shell_params.remove_arm_packages).lower()",
          "138:     env_variables[\"SKIP_PROVIDER_TESTS\"] = str(exec_shell_params.skip_provider_tests).lower()",
          "139:     if \"[\" in exec_shell_params.test_type and not exec_shell_params.test_type.startswith(\"Providers\"):",
          "140:         get_console(output=output).print(",
          "141:             \"[error]Only 'Providers' test type can specify actual tests with \\\\[\\\\][/]\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:     env_variables[\"SUSPENDED_PROVIDERS_FOLDERS\"] = \" \".join(get_suspended_providers_folders()).strip()",
          "",
          "---------------"
        ],
        "dev/breeze/src/airflow_breeze/utils/selective_checks.py||dev/breeze/src/airflow_breeze/utils/selective_checks.py": [
          "File: dev/breeze/src/airflow_breeze/utils/selective_checks.py -> dev/breeze/src/airflow_breeze/utils/selective_checks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     SYSTEM_TESTS_PROVIDERS_ROOT,",
          "31:     TESTS_PROVIDERS_ROOT,",
          "32: )",
          "35: if sys.version_info >= (3, 8):",
          "36:     from functools import cached_property",
          "",
          "[Removed Lines]",
          "33: from airflow_breeze.utils.suspended_providers import get_suspended_providers_folders",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "690:     def debug_resources(self) -> bool:",
          "691:         return DEBUG_CI_RESOURCES_LABEL in self._pr_labels",
          "697:     @cached_property",
          "698:     def helm_test_packages(self) -> str:",
          "699:         return json.dumps(all_helm_test_packages())",
          "",
          "[Removed Lines]",
          "693:     @cached_property",
          "694:     def suspended_providers_folders(self) -> str:",
          "695:         return \" \".join(get_suspended_providers_folders())",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04b535b326996a10af4fc5469722f4a302e359ab",
      "candidate_info": {
        "commit_hash": "04b535b326996a10af4fc5469722f4a302e359ab",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/04b535b326996a10af4fc5469722f4a302e359ab",
        "files": [
          "CONTRIBUTING.rst",
          "INSTALL",
          "airflow/providers/yandex/.latest-doc-only-change.txt",
          "airflow/providers/yandex/CHANGELOG.rst",
          "airflow/providers/yandex/__init__.py",
          "airflow/providers/yandex/hooks/__init__.py",
          "airflow/providers/yandex/hooks/yandex.py",
          "airflow/providers/yandex/hooks/yandexcloud_dataproc.py",
          "airflow/providers/yandex/operators/__init__.py",
          "airflow/providers/yandex/operators/yandexcloud_dataproc.py",
          "airflow/providers/yandex/provider.yaml",
          "docs/apache-airflow-providers-yandex/commits.rst",
          "docs/apache-airflow-providers-yandex/connections/yandexcloud.rst",
          "docs/apache-airflow-providers-yandex/index.rst",
          "docs/apache-airflow-providers-yandex/installing-providers-from-sources.rst",
          "docs/apache-airflow-providers-yandex/operators.rst",
          "docs/apache-airflow/extra-packages-ref.rst",
          "docs/integration-logos/yandex/Yandex-Cloud.png",
          "generated/provider_dependencies.json",
          "images/breeze/output-commands-hash.txt",
          "images/breeze/output_build-docs.svg",
          "images/breeze/output_release-management_generate-issue-content-providers.svg",
          "images/breeze/output_release-management_prepare-provider-documentation.svg",
          "images/breeze/output_release-management_prepare-provider-packages.svg"
        ],
        "message": "Remove yandex from 2.6 branch",
        "before_after_code_files": [
          "airflow/providers/yandex/__init__.py||airflow/providers/yandex/__init__.py",
          "airflow/providers/yandex/hooks/__init__.py||airflow/providers/yandex/hooks/__init__.py",
          "airflow/providers/yandex/hooks/yandex.py||airflow/providers/yandex/hooks/yandex.py",
          "airflow/providers/yandex/hooks/yandexcloud_dataproc.py||airflow/providers/yandex/hooks/yandexcloud_dataproc.py",
          "airflow/providers/yandex/operators/__init__.py||airflow/providers/yandex/operators/__init__.py",
          "airflow/providers/yandex/operators/yandexcloud_dataproc.py||airflow/providers/yandex/operators/yandexcloud_dataproc.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/31796"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/providers/yandex/__init__.py||airflow/providers/yandex/__init__.py": [
          "File: airflow/providers/yandex/__init__.py -> airflow/providers/yandex/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "airflow/providers/yandex/hooks/__init__.py||airflow/providers/yandex/hooks/__init__.py": [
          "File: airflow/providers/yandex/hooks/__init__.py -> airflow/providers/yandex/hooks/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "airflow/providers/yandex/hooks/yandex.py||airflow/providers/yandex/hooks/yandex.py": [
          "File: airflow/providers/yandex/hooks/yandex.py -> airflow/providers/yandex/hooks/yandex.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "airflow/providers/yandex/hooks/yandexcloud_dataproc.py||airflow/providers/yandex/hooks/yandexcloud_dataproc.py": [
          "File: airflow/providers/yandex/hooks/yandexcloud_dataproc.py -> airflow/providers/yandex/hooks/yandexcloud_dataproc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "airflow/providers/yandex/operators/__init__.py||airflow/providers/yandex/operators/__init__.py": [
          "File: airflow/providers/yandex/operators/__init__.py -> airflow/providers/yandex/operators/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "airflow/providers/yandex/operators/yandexcloud_dataproc.py||airflow/providers/yandex/operators/yandexcloud_dataproc.py": [
          "File: airflow/providers/yandex/operators/yandexcloud_dataproc.py -> airflow/providers/yandex/operators/yandexcloud_dataproc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f03324137f0edc5aab1e9dd052ad53ef78071522",
      "candidate_info": {
        "commit_hash": "f03324137f0edc5aab1e9dd052ad53ef78071522",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/f03324137f0edc5aab1e9dd052ad53ef78071522",
        "files": [
          "airflow/www/forms.py",
          "airflow/www/validators.py",
          "tests/www/test_validators.py",
          "tests/www/views/test_views_connection.py"
        ],
        "message": "Validate connection IDs (#31140)\n\n* Validate connection_ids\n\n(cherry picked from commit 5cb8ef80a0bd84651fb660c552563766d8ec0ea1)",
        "before_after_code_files": [
          "airflow/www/forms.py||airflow/www/forms.py",
          "airflow/www/validators.py||airflow/www/validators.py",
          "tests/www/test_validators.py||tests/www/test_validators.py",
          "tests/www/views/test_views_connection.py||tests/www/views/test_views_connection.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/31796"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/forms.py||airflow/www/forms.py": [
          "File: airflow/www/forms.py -> airflow/www/forms.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: from airflow.providers_manager import ProvidersManager",
          "42: from airflow.utils import timezone",
          "43: from airflow.utils.types import DagRunType",
          "44: from airflow.www.widgets import (",
          "45:     AirflowDateTimePickerROWidget,",
          "46:     AirflowDateTimePickerWidget,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: from airflow.www.validators import ValidKey",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:     class ConnectionForm(DynamicForm):",
          "206:         conn_id = StringField(",
          "207:             lazy_gettext(\"Connection Id\"),",
          "209:             widget=BS3TextFieldWidget(),",
          "210:         )",
          "211:         conn_type = SelectField(",
          "",
          "[Removed Lines]",
          "208:             validators=[InputRequired()],",
          "",
          "[Added Lines]",
          "209:             validators=[InputRequired(), ValidKey()],",
          "",
          "---------------"
        ],
        "airflow/www/validators.py||airflow/www/validators.py": [
          "File: airflow/www/validators.py -> airflow/www/validators.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: from wtforms.validators import EqualTo, ValidationError",
          "26: class GreaterEqualThan(EqualTo):",
          "27:     \"\"\"Compares the values of two fields.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: from airflow.utils import helpers",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:             except JSONDecodeError as ex:",
          "77:                 message = self.message or f\"JSON Validation Error: {ex}\"",
          "78:                 raise ValidationError(message=field.gettext(message.format(field.data)))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83: class ValidKey:",
          "84:     \"\"\"",
          "85:     Validates values that will be used as keys",
          "87:     :param max_length:",
          "88:         The maximum length of the given key",
          "89:     \"\"\"",
          "91:     def __init__(self, max_length=200):",
          "92:         self.max_length = max_length",
          "94:     def __call__(self, form, field):",
          "95:         if field.data:",
          "96:             try:",
          "97:                 helpers.validate_key(field.data, self.max_length)",
          "98:             except Exception as e:",
          "99:                 raise ValidationError(str(e))",
          "",
          "---------------"
        ],
        "tests/www/test_validators.py||tests/www/test_validators.py": [
          "File: tests/www/test_validators.py -> tests/www/test_validators.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:             self._validate(",
          "121:                 message=\"Invalid JSON: {}\",",
          "122:             )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125: class TestValidKey:",
          "126:     def setup_method(self):",
          "127:         self.form_field_mock = mock.MagicMock(data=\"valid_key\")",
          "128:         self.form_field_mock.gettext.side_effect = lambda msg: msg",
          "129:         self.form_mock = mock.MagicMock(spec_set=dict)",
          "131:     def _validate(self):",
          "132:         validator = validators.ValidKey()",
          "134:         return validator(self.form_mock, self.form_field_mock)",
          "136:     def test_form_field_is_none(self):",
          "137:         self.form_field_mock.data = None",
          "139:         assert self._validate() is None",
          "141:     def test_validation_pass(self):",
          "142:         assert self._validate() is None",
          "144:     def test_validation_fails_with_trailing_whitespace(self):",
          "145:         self.form_field_mock.data = \"invalid key  \"",
          "147:         with pytest.raises(validators.ValidationError):",
          "148:             self._validate()",
          "150:     def test_validation_fails_with_too_many_characters(self):",
          "151:         self.form_field_mock.data = \"\".join(\"x\" for _ in range(1000))",
          "153:         with pytest.raises(",
          "154:             validators.ValidationError,",
          "155:             match=r\"The key has to be less than [0-9]+ characters\",",
          "156:         ):",
          "157:             self._validate()",
          "",
          "---------------"
        ],
        "tests/www/views/test_views_connection.py||tests/www/views/test_views_connection.py": [
          "File: tests/www/views/test_views_connection.py -> tests/www/views/test_views_connection.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     _check_last_log(session, dag_id=None, event=\"connection.create\", execution_date=None)",
          "60: def test_action_logging_connection_masked_secrets(session, admin_client):",
          "61:     admin_client.post(\"/connection/add\", data=conn_with_extra(), follow_redirects=True)",
          "62:     _check_last_log_masked_connection(session, dag_id=None, event=\"connection.create\", execution_date=None)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: def test_invalid_connection_id_trailing_blanks(admin_client, session):",
          "61:     invalid_conn_id = \"conn_id_with_trailing_blanks   \"",
          "62:     invalid_connection = {**CONNECTION, \"conn_id\": invalid_conn_id}",
          "63:     resp = admin_client.post(\"/connection/add\", data=invalid_connection, follow_redirects=True)",
          "64:     check_content_in_response(",
          "65:         f\"The key '{invalid_conn_id}' has to be made of alphanumeric characters, \"",
          "66:         + \"dashes, dots and underscores exclusively\",",
          "67:         resp,",
          "68:     )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd7cd41bfa713b4c353e0956f38753f39d9b8ba1",
      "candidate_info": {
        "commit_hash": "bd7cd41bfa713b4c353e0956f38753f39d9b8ba1",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/bd7cd41bfa713b4c353e0956f38753f39d9b8ba1",
        "files": [
          "CI.rst",
          "LOCAL_VIRTUALENV.rst",
          "README.md",
          "airflow/__init__.py",
          "airflow/providers/amazon/aws/hooks/dms.py",
          "airflow/providers/apache/hive/provider.yaml",
          "airflow/providers/apache/hive/transfers/mysql_to_hive.py",
          "airflow/utils/log/file_task_handler.py",
          "dev/README_RELEASE_AIRFLOW.md",
          "dev/breeze/src/airflow_breeze/global_constants.py",
          "dev/breeze/tests/test_cache.py",
          "dev/breeze/tests/test_selective_checks.py",
          "dev/provider_packages/prepare_provider_packages.py",
          "dev/retag_docker_images.py",
          "docs/apache-airflow/howto/upgrading-from-1-10/index.rst",
          "docs/apache-airflow/installation/prerequisites.rst",
          "docs/docker-stack/build.rst",
          "generated/provider_dependencies.json",
          "images/breeze/output-commands-hash.txt",
          "images/breeze/output-commands.svg",
          "images/breeze/output_ci-image_build.svg",
          "images/breeze/output_ci-image_pull.svg",
          "images/breeze/output_ci-image_verify.svg",
          "images/breeze/output_k8s_build-k8s-image.svg",
          "images/breeze/output_k8s_configure-cluster.svg",
          "images/breeze/output_k8s_create-cluster.svg",
          "images/breeze/output_k8s_delete-cluster.svg",
          "images/breeze/output_k8s_deploy-airflow.svg",
          "images/breeze/output_k8s_k9s.svg",
          "images/breeze/output_k8s_logs.svg",
          "images/breeze/output_k8s_run-complete-tests.svg",
          "images/breeze/output_k8s_shell.svg",
          "images/breeze/output_k8s_status.svg",
          "images/breeze/output_k8s_tests.svg",
          "images/breeze/output_k8s_upload-k8s-image.svg",
          "images/breeze/output_prod-image_build.svg",
          "images/breeze/output_prod-image_pull.svg",
          "images/breeze/output_prod-image_verify.svg",
          "images/breeze/output_release-management_generate-constraints.svg",
          "images/breeze/output_release-management_release-prod-images.svg",
          "images/breeze/output_setup_config.svg",
          "images/breeze/output_shell.svg",
          "images/breeze/output_start-airflow.svg",
          "images/breeze/output_testing_docker-compose-tests.svg",
          "images/breeze/output_testing_integration-tests.svg",
          "images/breeze/output_testing_tests.svg",
          "scripts/ci/pre_commit/pre_commit_update_providers_dependencies.py",
          "setup.cfg",
          "setup.py",
          "tests/dag_processing/test_processor.py",
          "tests/decorators/test_python.py",
          "tests/models/test_param.py",
          "tests/providers/apache/hive/hooks/test_hive.py",
          "tests/providers/google/cloud/utils/test_mlengine_operator_utils.py"
        ],
        "message": "Add Python 3.11 support (#27264)\n\nAdd Python 3.11 support\n\nPython 3.11 has been released as scheduled on October 25, 2022 and\nfinally, after all dependencies got upgraded - we can support it.\n\n---------\n\nCo-authored-by: Tzu-ping Chung <uranusjr@gmail.com>\n(cherry picked from commit c5597d1fabe5d8f3a170885f6640344d93bf64bf)",
        "before_after_code_files": [
          "airflow/__init__.py||airflow/__init__.py",
          "airflow/providers/amazon/aws/hooks/dms.py||airflow/providers/amazon/aws/hooks/dms.py",
          "airflow/providers/apache/hive/transfers/mysql_to_hive.py||airflow/providers/apache/hive/transfers/mysql_to_hive.py",
          "airflow/utils/log/file_task_handler.py||airflow/utils/log/file_task_handler.py",
          "dev/breeze/src/airflow_breeze/global_constants.py||dev/breeze/src/airflow_breeze/global_constants.py",
          "dev/breeze/tests/test_cache.py||dev/breeze/tests/test_cache.py",
          "dev/breeze/tests/test_selective_checks.py||dev/breeze/tests/test_selective_checks.py",
          "dev/provider_packages/prepare_provider_packages.py||dev/provider_packages/prepare_provider_packages.py",
          "dev/retag_docker_images.py||dev/retag_docker_images.py",
          "scripts/ci/pre_commit/pre_commit_update_providers_dependencies.py||scripts/ci/pre_commit/pre_commit_update_providers_dependencies.py",
          "setup.cfg||setup.cfg",
          "setup.py||setup.py",
          "tests/dag_processing/test_processor.py||tests/dag_processing/test_processor.py",
          "tests/decorators/test_python.py||tests/decorators/test_python.py",
          "tests/models/test_param.py||tests/models/test_param.py",
          "tests/providers/apache/hive/hooks/test_hive.py||tests/providers/apache/hive/hooks/test_hive.py",
          "tests/providers/google/cloud/utils/test_mlengine_operator_utils.py||tests/providers/google/cloud/utils/test_mlengine_operator_utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/31796"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/__init__.py||airflow/__init__.py": [
          "File: airflow/__init__.py -> airflow/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: PY38 = sys.version_info >= (3, 8)",
          "73: PY39 = sys.version_info >= (3, 9)",
          "74: PY310 = sys.version_info >= (3, 10)",
          "76: # Things to lazy import in form {local_name: ('target_module', 'target_name')}",
          "77: __lazy_imports: dict[str, tuple[str, str]] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: PY311 = sys.version_info >= (3, 11)",
          "",
          "---------------"
        ],
        "airflow/providers/amazon/aws/hooks/dms.py||airflow/providers/amazon/aws/hooks/dms.py": [
          "File: airflow/providers/amazon/aws/hooks/dms.py -> airflow/providers/amazon/aws/hooks/dms.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:             raise TypeError(\"Status must be an instance of DmsTaskWaiterStatus\")",
          "209:         dms_client = self.get_conn()",
          "211:         waiter.wait(",
          "212:             Filters=[",
          "213:                 {",
          "",
          "[Removed Lines]",
          "210:         waiter = dms_client.get_waiter(f\"replication_task_{status}\")",
          "",
          "[Added Lines]",
          "210:         waiter = dms_client.get_waiter(f\"replication_task_{status.value}\")",
          "",
          "---------------"
        ],
        "airflow/providers/apache/hive/transfers/mysql_to_hive.py||airflow/providers/apache/hive/transfers/mysql_to_hive.py": [
          "File: airflow/providers/apache/hive/transfers/mysql_to_hive.py -> airflow/providers/apache/hive/transfers/mysql_to_hive.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: from __future__ import annotations",
          "21: from collections import OrderedDict",
          "22: from tempfile import NamedTemporaryFile",
          "23: from typing import TYPE_CHECKING, Sequence",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: from contextlib import closing",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:     def execute(self, context: Context):",
          "132:         hive = HiveCliHook(hive_cli_conn_id=self.hive_cli_conn_id, auth=self.hive_auth)",
          "133:         mysql = MySqlHook(mysql_conn_id=self.mysql_conn_id)",
          "135:         self.log.info(\"Dumping MySQL query results to local file\")",
          "139:         with NamedTemporaryFile(\"wb\") as f:",
          "153:             f.flush()",
          "156:             self.log.info(\"Loading file into Hive\")",
          "157:             hive.load_file(",
          "158:                 f.name,",
          "",
          "[Removed Lines]",
          "136:         conn = mysql.get_conn()",
          "137:         cursor = conn.cursor()",
          "138:         cursor.execute(self.sql)",
          "140:             csv_writer = csv.writer(",
          "141:                 f,",
          "142:                 delimiter=self.delimiter,",
          "143:                 quoting=self.quoting,",
          "144:                 quotechar=self.quotechar,",
          "145:                 escapechar=self.escapechar,",
          "146:                 encoding=\"utf-8\",",
          "147:             )",
          "148:             field_dict = OrderedDict()",
          "149:             if cursor.description is not None:",
          "150:                 for field in cursor.description:",
          "151:                     field_dict[field[0]] = self.type_map(field[1])",
          "152:             csv_writer.writerows(cursor)",
          "154:             cursor.close()",
          "155:             conn.close()  # type: ignore[misc]",
          "",
          "[Added Lines]",
          "137:             with closing(mysql.get_conn()) as conn:",
          "138:                 with closing(conn.cursor()) as cursor:",
          "139:                     cursor.execute(self.sql)",
          "140:                     csv_writer = csv.writer(",
          "141:                         f,",
          "142:                         delimiter=self.delimiter,",
          "143:                         quoting=self.quoting,",
          "144:                         quotechar=self.quotechar if self.quoting != csv.QUOTE_NONE else None,",
          "145:                         escapechar=self.escapechar,",
          "146:                         encoding=\"utf-8\",",
          "147:                     )",
          "148:                     field_dict = OrderedDict()",
          "149:                     if cursor.description is not None:",
          "150:                         for field in cursor.description:",
          "151:                             field_dict[field[0]] = self.type_map(field[1])",
          "152:                     csv_writer.writerows(cursor)",
          "",
          "---------------"
        ],
        "airflow/utils/log/file_task_handler.py||airflow/utils/log/file_task_handler.py": [
          "File: airflow/utils/log/file_task_handler.py -> airflow/utils/log/file_task_handler.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:         triggerer instances.",
          "202:         \"\"\"",
          "203:         full_path = Path(full_path).as_posix()",
          "205:         if job_id:",
          "206:             full_path += f\".{job_id}.log\"",
          "207:         return full_path",
          "",
          "[Removed Lines]",
          "204:         full_path += f\".{LogType.TRIGGER}\"",
          "",
          "[Added Lines]",
          "204:         full_path += f\".{LogType.TRIGGER.value}\"",
          "",
          "---------------"
        ],
        "dev/breeze/src/airflow_breeze/global_constants.py||dev/breeze/src/airflow_breeze/global_constants.py": [
          "File: dev/breeze/src/airflow_breeze/global_constants.py -> dev/breeze/src/airflow_breeze/global_constants.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: APACHE_AIRFLOW_GITHUB_REPOSITORY = \"apache/airflow\"",
          "38: # Checked before putting in build cache",
          "40: DEFAULT_PYTHON_MAJOR_MINOR_VERSION = ALLOWED_PYTHON_MAJOR_MINOR_VERSIONS[0]",
          "41: ALLOWED_ARCHITECTURES = [Architecture.X86_64, Architecture.ARM]",
          "42: ALLOWED_BACKENDS = [\"sqlite\", \"mysql\", \"postgres\", \"mssql\"]",
          "",
          "[Removed Lines]",
          "39: ALLOWED_PYTHON_MAJOR_MINOR_VERSIONS = [\"3.7\", \"3.8\", \"3.9\", \"3.10\"]",
          "",
          "[Added Lines]",
          "39: ALLOWED_PYTHON_MAJOR_MINOR_VERSIONS = [\"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.11\"]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183: PYTHONDONTWRITEBYTECODE = True",
          "185: PRODUCTION_IMAGE = False",
          "187: CURRENT_PYTHON_MAJOR_MINOR_VERSIONS = ALL_PYTHON_MAJOR_MINOR_VERSIONS",
          "188: CURRENT_POSTGRES_VERSIONS = [\"11\", \"12\", \"13\", \"14\", \"15\"]",
          "189: DEFAULT_POSTGRES_VERSION = CURRENT_POSTGRES_VERSIONS[0]",
          "",
          "[Removed Lines]",
          "186: ALL_PYTHON_MAJOR_MINOR_VERSIONS = [\"3.7\", \"3.8\", \"3.9\", \"3.10\"]",
          "",
          "[Added Lines]",
          "186: ALL_PYTHON_MAJOR_MINOR_VERSIONS = [\"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.11\"]",
          "",
          "---------------"
        ],
        "dev/breeze/tests/test_cache.py||dev/breeze/tests/test_cache.py": [
          "File: dev/breeze/tests/test_cache.py -> dev/breeze/tests/test_cache.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     [",
          "37:         (\"backend\", \"mysql\", (True, [\"sqlite\", \"mysql\", \"postgres\", \"mssql\"]), None),",
          "38:         (\"backend\", \"xxx\", (False, [\"sqlite\", \"mysql\", \"postgres\", \"mssql\"]), None),",
          "41:         (\"missing\", \"value\", None, AttributeError),",
          "42:     ],",
          "43: )",
          "",
          "[Removed Lines]",
          "39:         (\"python_major_minor_version\", \"3.8\", (True, [\"3.7\", \"3.8\", \"3.9\", \"3.10\"]), None),",
          "40:         (\"python_major_minor_version\", \"3.5\", (False, [\"3.7\", \"3.8\", \"3.9\", \"3.10\"]), None),",
          "",
          "[Added Lines]",
          "39:         (\"python_major_minor_version\", \"3.8\", (True, [\"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.11\"]), None),",
          "40:         (\"python_major_minor_version\", \"3.5\", (False, [\"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.11\"]), None),",
          "",
          "---------------"
        ],
        "dev/breeze/tests/test_selective_checks.py||dev/breeze/tests/test_selective_checks.py": [
          "File: dev/breeze/tests/test_selective_checks.py -> dev/breeze/tests/test_selective_checks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: ANSI_COLORS_MATCHER = re.compile(r\"(?:\\x1B[@-_]|[\\x80-\\x9F])[0-?]*[ -/]*[@-~]\")",
          "29: def escape_ansi_colors(line):",
          "30:     return ANSI_COLORS_MATCHER.sub(\"\", line)",
          "33: def assert_outputs_are_printed(expected_outputs: dict[str, str], stderr: str):",
          "34:     for name, value in expected_outputs.items():",
          "42: @pytest.mark.parametrize(",
          "",
          "[Removed Lines]",
          "35:         search_string = rf\"^{re.escape(name)}={re.escape(value)}$\"",
          "36:         escaped_stderr = escape_ansi_colors(stderr)",
          "37:         assert re.search(",
          "38:             search_string, escaped_stderr, re.MULTILINE",
          "39:         ), f\"Expected {name}={value} not found in {escaped_stderr}\"",
          "",
          "[Added Lines]",
          "29: ALL_DOCS_SELECTED_FOR_BUILD = \"\"",
          "30: ALL_PROVIDERS_AFFECTED = \"\"",
          "38:     escaped_stderr = escape_ansi_colors(stderr)",
          "40:         if value is None:",
          "41:             search_string = rf\"^{re.escape(name)}=\"",
          "42:             if re.search(search_string, escaped_stderr, re.MULTILINE):",
          "43:                 raise AssertionError(f\"The {name} output should not be in {escaped_stderr}\")",
          "44:         else:",
          "45:             search_string = rf\"^{re.escape(name)}={re.escape(value)}$\"",
          "46:             if not re.search(search_string, escaped_stderr, re.MULTILINE):",
          "47:                 raise AssertionError(f\"Expected {name}={value} not found in {escaped_stderr}\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:             pytest.param(",
          "47:                 (\"INTHEWILD.md\",),",
          "48:                 {",
          "49:                     \"all-python-versions\": \"['3.7']\",",
          "50:                     \"all-python-versions-list-as-string\": \"3.7\",",
          "51:                     \"python-versions\": \"['3.7']\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:                     \"affected-providers-list-as-string\": None,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:                     \"run-amazon-tests\": \"false\",",
          "57:                     \"docs-build\": \"false\",",
          "58:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "60:                 },",
          "61:                 id=\"No tests on simple change\",",
          "62:             )",
          "",
          "[Removed Lines]",
          "59:                     \"parallel-test-types\": \"\",",
          "",
          "[Added Lines]",
          "68:                     \"parallel-test-types-list-as-string\": None,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "65:             pytest.param(",
          "66:                 (\"airflow/api/file.py\",),",
          "67:                 {",
          "68:                     \"all-python-versions\": \"['3.7']\",",
          "69:                     \"all-python-versions-list-as-string\": \"3.7\",",
          "70:                     \"python-versions\": \"['3.7']\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:                     \"affected-providers-list-as-string\": None,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "75:                     \"run-amazon-tests\": \"false\",",
          "76:                     \"docs-build\": \"true\",",
          "77:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "79:                 },",
          "80:                 id=\"Only API tests and DOCS should run\",",
          "81:             )",
          "",
          "[Removed Lines]",
          "78:                     \"parallel-test-types\": \"API Always\",",
          "",
          "[Added Lines]",
          "88:                     \"parallel-test-types-list-as-string\": \"API Always\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "87:                     \"tests/providers/postgres/file.py\",",
          "88:                 ),",
          "89:                 {",
          "90:                     \"all-python-versions\": \"['3.7']\",",
          "91:                     \"all-python-versions-list-as-string\": \"3.7\",",
          "92:                     \"python-versions\": \"['3.7']\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:                     \"affected-providers-list-as-string\": \"amazon common.sql google postgres\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "97:                     \"run-amazon-tests\": \"true\",",
          "98:                     \"docs-build\": \"true\",",
          "99:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "101:                     \"API Always Providers[common.sql,postgres] Providers[google]\",",
          "102:                 },",
          "103:                 id=\"API and providers tests and docs should run\",",
          "",
          "[Removed Lines]",
          "100:                     \"parallel-test-types\": \"Providers[amazon] \"",
          "",
          "[Added Lines]",
          "111:                     \"parallel-test-types-list-as-string\": \"Providers[amazon] \"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "107:             pytest.param(",
          "108:                 (\"tests/providers/apache/beam/file.py\",),",
          "109:                 {",
          "110:                     \"all-python-versions\": \"['3.7']\",",
          "111:                     \"all-python-versions-list-as-string\": \"3.7\",",
          "112:                     \"python-versions\": \"['3.7']\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:                     \"affected-providers-list-as-string\": \"apache.beam google\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "118:                     \"docs-build\": \"false\",",
          "119:                     \"run-kubernetes-tests\": \"false\",",
          "120:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "122:                 },",
          "123:                 id=\"Selected Providers and docs should run\",",
          "124:             )",
          "",
          "[Removed Lines]",
          "121:                     \"parallel-test-types\": \"Always Providers[apache.beam] Providers[google]\",",
          "",
          "[Added Lines]",
          "133:                     \"parallel-test-types-list-as-string\": \"Always Providers[apache.beam] Providers[google]\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "127:             pytest.param(",
          "128:                 (\"docs/file.rst\",),",
          "129:                 {",
          "130:                     \"all-python-versions\": \"['3.7']\",",
          "131:                     \"all-python-versions-list-as-string\": \"3.7\",",
          "132:                     \"python-versions\": \"['3.7']\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:                     \"affected-providers-list-as-string\": None,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "138:                     \"docs-build\": \"true\",",
          "139:                     \"run-kubernetes-tests\": \"false\",",
          "140:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "142:                 },",
          "143:                 id=\"Only docs builds should run - no tests needed\",",
          "144:             )",
          "",
          "[Removed Lines]",
          "141:                     \"parallel-test-types\": \"\",",
          "",
          "[Added Lines]",
          "154:                     \"parallel-test-types-list-as-string\": None,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "150:                     \"tests/providers/postgres/file.py\",",
          "151:                 ),",
          "152:                 {",
          "153:                     \"all-python-versions\": \"['3.7']\",",
          "154:                     \"all-python-versions-list-as-string\": \"3.7\",",
          "155:                     \"python-versions\": \"['3.7']\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:                     \"affected-providers-list-as-string\": \"amazon common.sql google postgres\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "161:                     \"docs-build\": \"true\",",
          "162:                     \"run-kubernetes-tests\": \"true\",",
          "163:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "165:                     \"Always Providers[common.sql,postgres] Providers[google]\",",
          "166:                 },",
          "167:                 id=\"Helm tests, providers (both upstream and downstream),\"",
          "",
          "[Removed Lines]",
          "164:                     \"parallel-test-types\": \"Providers[amazon] \"",
          "",
          "[Added Lines]",
          "178:                     \"parallel-test-types-list-as-string\": \"Providers[amazon] \"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "176:                     \"tests/providers/http/file.py\",",
          "177:                 ),",
          "178:                 {",
          "179:                     \"all-python-versions\": \"['3.7']\",",
          "180:                     \"all-python-versions-list-as-string\": \"3.7\",",
          "181:                     \"python-versions\": \"['3.7']\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:                     \"affected-providers-list-as-string\": \"airbyte apache.livy \"",
          "194:                     \"dbt.cloud dingding discord http\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "187:                     \"docs-build\": \"true\",",
          "188:                     \"run-kubernetes-tests\": \"true\",",
          "189:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "191:                     \"Providers[airbyte,apache.livy,dbt.cloud,dingding,discord,http]\",",
          "192:                 },",
          "193:                 id=\"Helm tests, http and all relevant providers, kubernetes tests and \"",
          "",
          "[Removed Lines]",
          "190:                     \"parallel-test-types\": \"Always \"",
          "",
          "[Added Lines]",
          "206:                     \"parallel-test-types-list-as-string\": \"Always \"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "202:                     \"tests/providers/airbyte/file.py\",",
          "203:                 ),",
          "204:                 {",
          "205:                     \"all-python-versions\": \"['3.7']\",",
          "206:                     \"all-python-versions-list-as-string\": \"3.7\",",
          "207:                     \"python-versions\": \"['3.7']\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:                     \"affected-providers-list-as-string\": \"airbyte http\",",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "213:                     \"docs-build\": \"true\",",
          "214:                     \"run-kubernetes-tests\": \"true\",",
          "215:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "217:                 },",
          "218:                 id=\"Helm tests, airbyte/http providers, kubernetes tests and \"",
          "219:                 \"docs should run even if unimportant files were added\",",
          "",
          "[Removed Lines]",
          "216:                     \"parallel-test-types\": \"Always Providers[airbyte,http]\",",
          "",
          "[Added Lines]",
          "233:                     \"parallel-test-types-list-as-string\": \"Always Providers[airbyte,http]\",",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "227:                     \"tests/system/utils/file.py\",",
          "228:                 ),",
          "229:                 {",
          "230:                     \"all-python-versions\": \"['3.7']\",",
          "231:                     \"all-python-versions-list-as-string\": \"3.7\",",
          "232:                     \"python-versions\": \"['3.7']\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:                     \"affected-providers-list-as-string\": None,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "238:                     \"run-amazon-tests\": \"false\",",
          "239:                     \"run-kubernetes-tests\": \"true\",",
          "240:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "242:                 },",
          "243:                 id=\"Docs should run even if unimportant files were added\",",
          "244:             )",
          "",
          "[Removed Lines]",
          "241:                     \"parallel-test-types\": \"Always\",",
          "",
          "[Added Lines]",
          "259:                     \"parallel-test-types-list-as-string\": \"Always\",",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "247:             pytest.param(",
          "248:                 (\"setup.py\",),",
          "249:                 {",
          "254:                     \"image-build\": \"true\",",
          "255:                     \"needs-helm-tests\": \"true\",",
          "256:                     \"run-tests\": \"true\",",
          "257:                     \"run-amazon-tests\": \"true\",",
          "258:                     \"docs-build\": \"true\",",
          "259:                     \"upgrade-to-newer-dependencies\": \"true\",",
          "261:                     \"API Always CLI Providers[google]\",",
          "262:                 },",
          "263:                 id=\"Everything should run - including all providers and upgrading to \"",
          "",
          "[Removed Lines]",
          "250:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "251:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "252:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "253:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "260:                     \"parallel-test-types\": \"Core Providers[-amazon,google] Other Providers[amazon] WWW \"",
          "",
          "[Added Lines]",
          "268:                     \"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED,",
          "269:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "270:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "271:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "272:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "279:                     \"parallel-test-types-list-as-string\": \"Core Providers[-amazon,google] \"",
          "280:                     \"Other Providers[amazon] WWW \"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "268:             pytest.param(",
          "269:                 (\"generated/provider_dependencies.json\",),",
          "270:                 {",
          "275:                     \"image-build\": \"true\",",
          "276:                     \"needs-helm-tests\": \"true\",",
          "277:                     \"run-tests\": \"true\",",
          "278:                     \"run-amazon-tests\": \"true\",",
          "279:                     \"docs-build\": \"true\",",
          "280:                     \"upgrade-to-newer-dependencies\": \"true\",",
          "282:                     \"API Always CLI Providers[google]\",",
          "283:                 },",
          "284:                 id=\"Everything should run and upgrading to newer requirements as dependencies change\",",
          "",
          "[Removed Lines]",
          "271:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "272:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "273:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "274:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "281:                     \"parallel-test-types\": \"Core Providers[-amazon,google] Other Providers[amazon] WWW \"",
          "",
          "[Added Lines]",
          "291:                     \"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED,",
          "292:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "293:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "294:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "295:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "302:                     \"parallel-test-types-list-as-string\": \"Core Providers[-amazon,google] \"",
          "303:                     \"Other Providers[amazon] WWW \"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "287:         pytest.param(",
          "288:             (\"airflow/providers/amazon/__init__.py\",),",
          "289:             {",
          "290:                 \"all-python-versions\": \"['3.7']\",",
          "291:                 \"all-python-versions-list-as-string\": \"3.7\",",
          "292:                 \"python-versions\": \"['3.7']\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:                 \"affected-providers-list-as-string\": \"amazon apache.hive cncf.kubernetes \"",
          "313:                 \"common.sql exasol ftp google imap \"",
          "314:                 \"mongo mysql postgres salesforce ssh\",",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "298:                 \"run-kubernetes-tests\": \"false\",",
          "299:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "300:                 \"run-amazon-tests\": \"true\",",
          "302:                 \"Providers[apache.hive,cncf.kubernetes,common.sql,exasol,ftp,imap,\"",
          "303:                 \"mongo,mysql,postgres,salesforce,ssh] Providers[google]\",",
          "304:             },",
          "",
          "[Removed Lines]",
          "301:                 \"parallel-test-types\": \"Providers[amazon] Always \"",
          "",
          "[Added Lines]",
          "326:                 \"parallel-test-types-list-as-string\": \"Providers[amazon] Always \"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "307:         pytest.param(",
          "308:             (\"tests/providers/airbyte/__init__.py\",),",
          "309:             {",
          "310:                 \"all-python-versions\": \"['3.7']\",",
          "311:                 \"all-python-versions-list-as-string\": \"3.7\",",
          "312:                 \"python-versions\": \"['3.7']\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "335:                 \"affected-providers-list-as-string\": \"airbyte http\",",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "318:                 \"docs-build\": \"false\",",
          "319:                 \"run-kubernetes-tests\": \"false\",",
          "320:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "322:             },",
          "323:             id=\"Providers tests tests run without amazon tests if no amazon file changed\",",
          "324:         ),",
          "325:         pytest.param(",
          "326:             (\"airflow/providers/amazon/file.py\",),",
          "327:             {",
          "328:                 \"all-python-versions\": \"['3.7']\",",
          "329:                 \"all-python-versions-list-as-string\": \"3.7\",",
          "330:                 \"python-versions\": \"['3.7']\",",
          "",
          "[Removed Lines]",
          "321:                 \"parallel-test-types\": \"Always Providers[airbyte,http]\",",
          "",
          "[Added Lines]",
          "347:                 \"parallel-test-types-list-as-string\": \"Always Providers[airbyte,http]\",",
          "354:                 \"affected-providers-list-as-string\": \"amazon apache.hive cncf.kubernetes \"",
          "355:                 \"common.sql exasol ftp google imap \"",
          "356:                 \"mongo mysql postgres salesforce ssh\",",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "336:                 \"docs-build\": \"true\",",
          "337:                 \"run-kubernetes-tests\": \"false\",",
          "338:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "340:                 \"Providers[apache.hive,cncf.kubernetes,common.sql,exasol,ftp,\"",
          "341:                 \"imap,mongo,mysql,postgres,salesforce,ssh] Providers[google]\",",
          "342:             },",
          "",
          "[Removed Lines]",
          "339:                 \"parallel-test-types\": \"Providers[amazon] Always \"",
          "",
          "[Added Lines]",
          "368:                 \"parallel-test-types-list-as-string\": \"Providers[amazon] Always \"",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "367:                 (\"full tests needed\",),",
          "368:                 \"main\",",
          "369:                 {",
          "374:                     \"image-build\": \"true\",",
          "375:                     \"run-tests\": \"true\",",
          "376:                     \"docs-build\": \"true\",",
          "377:                     \"full-tests-needed\": \"true\",",
          "379:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "381:                     \"API Always CLI Providers[google]\",",
          "382:                 },",
          "383:                 id=\"Everything should run including all providers when full tests are needed\",",
          "",
          "[Removed Lines]",
          "370:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "371:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "372:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "373:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "378:                     \"providers-package-format-exclude\": \"[]\",",
          "380:                     \"parallel-test-types\": \"Core Providers[-amazon,google] Other Providers[amazon] WWW \"",
          "",
          "[Added Lines]",
          "399:                     \"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED,",
          "400:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "401:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "402:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "403:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "407:                     \"docs-filter-list-as-string\": ALL_DOCS_SELECTED_FOR_BUILD,",
          "410:                     \"parallel-test-types-list-as-string\": \"Core Providers[-amazon,google] \"",
          "411:                     \"Other Providers[amazon] WWW \"",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "392:                 ),",
          "393:                 \"main\",",
          "394:                 {",
          "399:                     \"image-build\": \"true\",",
          "400:                     \"run-tests\": \"true\",",
          "401:                     \"docs-build\": \"true\",",
          "402:                     \"full-tests-needed\": \"true\",",
          "404:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "406:                     \"API Always CLI Providers[google]\",",
          "407:                 },",
          "408:                 id=\"Everything should run including full providers when full \"",
          "",
          "[Removed Lines]",
          "395:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "396:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "397:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "398:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "403:                     \"providers-package-format-exclude\": \"[]\",",
          "405:                     \"parallel-test-types\": \"Core Providers[-amazon,google] Other Providers[amazon] WWW \"",
          "",
          "[Added Lines]",
          "426:                     \"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED,",
          "427:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "428:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "429:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "430:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "434:                     \"docs-filter-list-as-string\": ALL_DOCS_SELECTED_FOR_BUILD,",
          "437:                     \"parallel-test-types-list-as-string\": \"Core Providers[-amazon,google] \"",
          "438:                     \"Other Providers[amazon] WWW \"",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "415:                 (\"full tests needed\",),",
          "416:                 \"main\",",
          "417:                 {",
          "422:                     \"image-build\": \"true\",",
          "423:                     \"run-tests\": \"true\",",
          "424:                     \"docs-build\": \"true\",",
          "425:                     \"full-tests-needed\": \"true\",",
          "426:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "429:                     \"API Always CLI Providers[google]\",",
          "430:                 },",
          "431:                 id=\"Everything should run including full providers when\"",
          "",
          "[Removed Lines]",
          "418:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "419:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "420:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "421:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "427:                     \"providers-package-format-exclude\": \"[]\",",
          "428:                     \"parallel-test-types\": \"Core Providers[-amazon,google] Other Providers[amazon] WWW \"",
          "",
          "[Added Lines]",
          "451:                     \"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED,",
          "452:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "453:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "454:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "455:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "459:                     \"docs-filter-list-as-string\": ALL_DOCS_SELECTED_FOR_BUILD,",
          "462:                     \"parallel-test-types-list-as-string\": \"Core Providers[-amazon,google] \"",
          "463:                     \"Other Providers[amazon] WWW \"",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "438:                 (\"full tests needed\",),",
          "439:                 \"v2-3-stable\",",
          "440:                 {",
          "445:                     \"image-build\": \"true\",",
          "446:                     \"run-tests\": \"true\",",
          "447:                     \"docs-build\": \"true\",",
          "448:                     \"full-tests-needed\": \"true\",",
          "449:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "452:                 },",
          "453:                 id=\"Everything should run except Providers when full tests are needed for non-main branch\",",
          "454:             )",
          "",
          "[Removed Lines]",
          "441:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "442:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "443:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "444:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "450:                     \"providers-package-format-exclude\": \"[]\",",
          "451:                     \"parallel-test-types\": \"Core Other WWW API Always CLI\",",
          "",
          "[Added Lines]",
          "476:                     \"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED,",
          "477:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "478:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "479:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "480:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "484:                     \"docs-filter-list-as-string\": \"--package-filter apache-airflow \"",
          "485:                     \"--package-filter docker-stack\",",
          "488:                     \"parallel-test-types-list-as-string\": \"Core Other WWW API Always CLI\",",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "477:         pytest.param(",
          "478:             (\"INTHEWILD.md\",),",
          "479:             {",
          "480:                 \"all-python-versions\": \"['3.7']\",",
          "481:                 \"all-python-versions-list-as-string\": \"3.7\",",
          "482:                 \"image-build\": \"false\",",
          "483:                 \"needs-helm-tests\": \"false\",",
          "484:                 \"run-tests\": \"false\",",
          "485:                 \"docs-build\": \"false\",",
          "486:                 \"full-tests-needed\": \"false\",",
          "488:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "489:                 \"skip-provider-tests\": \"true\",",
          "491:             },",
          "492:             id=\"Nothing should run if only non-important files changed\",",
          "493:         ),",
          "",
          "[Removed Lines]",
          "487:                 \"providers-package-format-exclude\": \"[{'package-format': 'sdist'}]\",",
          "490:                 \"parallel-test-types\": \"\",",
          "",
          "[Added Lines]",
          "517:                 \"affected-providers-list-as-string\": None,",
          "524:                 \"docs-filter-list-as-string\": None,",
          "528:                 \"parallel-test-types-list-as-string\": None,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "497:                 \"tests/providers/google/file.py\",",
          "498:             ),",
          "499:             {",
          "500:                 \"all-python-versions\": \"['3.7']\",",
          "501:                 \"all-python-versions-list-as-string\": \"3.7\",",
          "502:                 \"needs-helm-tests\": \"false\",",
          "503:                 \"image-build\": \"true\",",
          "504:                 \"run-tests\": \"true\",",
          "505:                 \"docs-build\": \"true\",",
          "506:                 \"full-tests-needed\": \"false\",",
          "508:                 \"run-kubernetes-tests\": \"true\",",
          "509:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "510:                 \"skip-provider-tests\": \"true\",",
          "512:             },",
          "513:             id=\"No Helm tests, No providers should run if only chart/providers changed in non-main\",",
          "514:         ),",
          "",
          "[Removed Lines]",
          "507:                 \"providers-package-format-exclude\": \"[{'package-format': 'sdist'}]\",",
          "511:                 \"parallel-test-types\": \"Always\",",
          "",
          "[Added Lines]",
          "538:                 \"affected-providers-list-as-string\": \"amazon apache.beam apache.cassandra cncf.kubernetes \"",
          "539:                 \"common.sql facebook google hashicorp microsoft.azure microsoft.mssql \"",
          "540:                 \"mysql oracle postgres presto salesforce sftp ssh trino\",",
          "547:                 \"docs-filter-list-as-string\": \"--package-filter apache-airflow --package-filter docker-stack\",",
          "552:                 \"parallel-test-types-list-as-string\": \"Always\",",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "519:                 \"tests/providers/google/file.py\",",
          "520:             ),",
          "521:             {",
          "522:                 \"all-python-versions\": \"['3.7']\",",
          "523:                 \"all-python-versions-list-as-string\": \"3.7\",",
          "524:                 \"image-build\": \"true\",",
          "525:                 \"needs-helm-tests\": \"false\",",
          "526:                 \"run-tests\": \"true\",",
          "527:                 \"docs-build\": \"true\",",
          "528:                 \"full-tests-needed\": \"false\",",
          "530:                 \"run-kubernetes-tests\": \"true\",",
          "531:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "532:                 \"skip-provider-tests\": \"true\",",
          "534:             },",
          "535:             id=\"Only CLI tests and Kubernetes tests should run if cli/chart files changed in non-main branch\",",
          "536:         ),",
          "",
          "[Removed Lines]",
          "529:                 \"providers-package-format-exclude\": \"[{'package-format': 'sdist'}]\",",
          "533:                 \"parallel-test-types\": \"Always CLI\",",
          "",
          "[Added Lines]",
          "563:                 \"affected-providers-list-as-string\": \"amazon apache.beam apache.cassandra \"",
          "564:                 \"cncf.kubernetes common.sql facebook google \"",
          "565:                 \"hashicorp microsoft.azure microsoft.mssql mysql oracle postgres presto \"",
          "566:                 \"salesforce sftp ssh trino\",",
          "573:                 \"docs-filter-list-as-string\": \"--package-filter apache-airflow --package-filter docker-stack\",",
          "578:                 \"parallel-test-types-list-as-string\": \"Always CLI\",",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "540:                 \"tests/providers/google/file.py\",",
          "541:             ),",
          "542:             {",
          "543:                 \"all-python-versions\": \"['3.7']\",",
          "544:                 \"all-python-versions-list-as-string\": \"3.7\",",
          "545:                 \"image-build\": \"true\",",
          "546:                 \"needs-helm-tests\": \"false\",",
          "547:                 \"run-tests\": \"true\",",
          "548:                 \"docs-build\": \"true\",",
          "549:                 \"full-tests-needed\": \"false\",",
          "551:                 \"run-kubernetes-tests\": \"false\",",
          "552:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "553:                 \"skip-provider-tests\": \"true\",",
          "555:             },",
          "556:             id=\"All tests except Providers should run if core file changed in non-main branch\",",
          "557:         ),",
          "",
          "[Removed Lines]",
          "550:                 \"providers-package-format-exclude\": \"[{'package-format': 'sdist'}]\",",
          "554:                 \"parallel-test-types\": \"Core Other WWW API Always CLI\",",
          "",
          "[Added Lines]",
          "588:                 \"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED,",
          "595:                 \"docs-filter-list-as-string\": \"--package-filter apache-airflow --package-filter docker-stack\",",
          "600:                 \"parallel-test-types-list-as-string\": \"Core Other WWW API Always CLI\",",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "577:         pytest.param(",
          "578:             (\"INTHEWILD.md\",),",
          "579:             {",
          "580:                 \"all-python-versions\": \"['3.7']\",",
          "581:                 \"all-python-versions-list-as-string\": \"3.7\",",
          "582:                 \"image-build\": \"false\",",
          "583:                 \"needs-helm-tests\": \"false\",",
          "584:                 \"run-tests\": \"false\",",
          "585:                 \"docs-build\": \"false\",",
          "586:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "589:             },",
          "590:             id=\"Nothing should run if only non-important files changed\",",
          "591:         ),",
          "592:         pytest.param(",
          "593:             (\"tests/system/any_file.py\",),",
          "594:             {",
          "595:                 \"all-python-versions\": \"['3.7']\",",
          "596:                 \"all-python-versions-list-as-string\": \"3.7\",",
          "597:                 \"image-build\": \"true\",",
          "598:                 \"needs-helm-tests\": \"false\",",
          "599:                 \"run-tests\": \"true\",",
          "600:                 \"docs-build\": \"true\",",
          "601:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "604:             },",
          "605:             id=\"Only Always and docs build should run if only system tests changed\",",
          "606:         ),",
          "",
          "[Removed Lines]",
          "587:                 \"skip-provider-tests\": \"false\",",
          "588:                 \"parallel-test-types\": \"\",",
          "602:                 \"skip-provider-tests\": \"false\",",
          "603:                 \"parallel-test-types\": \"Always\",",
          "",
          "[Added Lines]",
          "626:                 \"affected-providers-list-as-string\": None,",
          "633:                 \"docs-filter-list-as-string\": None,",
          "635:                 \"skip-provider-tests\": \"true\",",
          "636:                 \"parallel-test-types-list-as-string\": None,",
          "643:                 \"affected-providers-list-as-string\": None,",
          "650:                 \"docs-filter-list-as-string\": ALL_DOCS_SELECTED_FOR_BUILD,",
          "652:                 \"skip-provider-tests\": \"true\",",
          "653:                 \"parallel-test-types-list-as-string\": \"Always\",",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "611:                 \"tests/providers/google/file.py\",",
          "612:             ),",
          "613:             {",
          "614:                 \"all-python-versions\": \"['3.7']\",",
          "615:                 \"all-python-versions-list-as-string\": \"3.7\",",
          "616:                 \"image-build\": \"true\",",
          "617:                 \"needs-helm-tests\": \"true\",",
          "618:                 \"run-tests\": \"true\",",
          "619:                 \"docs-build\": \"true\",",
          "620:                 \"run-kubernetes-tests\": \"true\",",
          "621:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "622:                 \"skip-provider-tests\": \"false\",",
          "624:                 \"Providers[apache.beam,apache.cassandra,cncf.kubernetes,common.sql,facebook,\"",
          "625:                 \"hashicorp,microsoft.azure,microsoft.mssql,mysql,oracle,postgres,presto,\"",
          "626:                 \"salesforce,sftp,ssh,trino] Providers[google]\",",
          "",
          "[Removed Lines]",
          "623:                 \"parallel-test-types\": \"Providers[amazon] Always CLI \"",
          "",
          "[Added Lines]",
          "664:                 \"affected-providers-list-as-string\": \"amazon apache.beam apache.cassandra \"",
          "665:                 \"cncf.kubernetes common.sql \"",
          "666:                 \"facebook google hashicorp microsoft.azure microsoft.mssql mysql \"",
          "667:                 \"oracle postgres presto salesforce sftp ssh trino\",",
          "674:                 \"docs-filter-list-as-string\": \"--package-filter apache-airflow --package-filter helm-chart \"",
          "675:                 \"--package-filter apache-airflow-providers-amazon \"",
          "676:                 \"--package-filter apache-airflow-providers-apache-beam \"",
          "677:                 \"--package-filter apache-airflow-providers-apache-cassandra \"",
          "678:                 \"--package-filter apache-airflow-providers-cncf-kubernetes \"",
          "679:                 \"--package-filter apache-airflow-providers-common-sql \"",
          "680:                 \"--package-filter apache-airflow-providers-facebook \"",
          "681:                 \"--package-filter apache-airflow-providers-google \"",
          "682:                 \"--package-filter apache-airflow-providers-hashicorp \"",
          "683:                 \"--package-filter apache-airflow-providers-microsoft-azure \"",
          "684:                 \"--package-filter apache-airflow-providers-microsoft-mssql \"",
          "685:                 \"--package-filter apache-airflow-providers-mysql \"",
          "686:                 \"--package-filter apache-airflow-providers-oracle \"",
          "687:                 \"--package-filter apache-airflow-providers-postgres \"",
          "688:                 \"--package-filter apache-airflow-providers-presto \"",
          "689:                 \"--package-filter apache-airflow-providers-salesforce \"",
          "690:                 \"--package-filter apache-airflow-providers-sftp \"",
          "691:                 \"--package-filter apache-airflow-providers-ssh \"",
          "692:                 \"--package-filter apache-airflow-providers-trino\",",
          "696:                 \"parallel-test-types-list-as-string\": \"Providers[amazon] Always CLI \"",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "629:         ),",
          "630:         pytest.param(",
          "631:             (",
          "634:             ),",
          "635:             {",
          "636:                 \"all-python-versions\": \"['3.7']\",",
          "637:                 \"all-python-versions-list-as-string\": \"3.7\",",
          "638:                 \"image-build\": \"true\",",
          "639:                 \"needs-helm-tests\": \"false\",",
          "640:                 \"run-tests\": \"true\",",
          "641:                 \"docs-build\": \"true\",",
          "642:                 \"run-kubernetes-tests\": \"false\",",
          "643:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "644:                 \"skip-provider-tests\": \"false\",",
          "646:                 \"API Always CLI Providers[google]\",",
          "647:             },",
          "649:         ),",
          "650:     ],",
          "651: )",
          "",
          "[Removed Lines]",
          "632:                 \"airflow/file.py\",",
          "633:                 \"tests/providers/google/file.py\",",
          "645:                 \"parallel-test-types\": \"Core Providers[-amazon,google] Other Providers[amazon] WWW \"",
          "648:             id=\"All tests should run if core file changed\",",
          "",
          "[Added Lines]",
          "705:                 \"airflow/cli/file.py\",",
          "706:                 \"airflow/www/file.py\",",
          "707:                 \"airflow/api/file.py\",",
          "710:                 \"affected-providers-list-as-string\": None,",
          "711:                 \"all-python-versions\": \"['3.7']\",",
          "712:                 \"all-python-versions-list-as-string\": \"3.7\",",
          "713:                 \"image-build\": \"true\",",
          "714:                 \"needs-helm-tests\": \"false\",",
          "715:                 \"run-tests\": \"true\",",
          "716:                 \"docs-build\": \"true\",",
          "717:                 \"docs-filter-list-as-string\": \"--package-filter apache-airflow\",",
          "718:                 \"run-kubernetes-tests\": \"false\",",
          "719:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "720:                 \"skip-provider-tests\": \"true\",",
          "721:                 \"parallel-test-types-list-as-string\": \"WWW API Always CLI\",",
          "722:             },",
          "723:             id=\"No providers tests should run if only CLI/API/WWW file changed\",",
          "724:         ),",
          "725:         pytest.param(",
          "726:             (\"airflow/models/test.py\",),",
          "727:             {",
          "728:                 \"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED,",
          "729:                 \"all-python-versions\": \"['3.7']\",",
          "730:                 \"all-python-versions-list-as-string\": \"3.7\",",
          "731:                 \"image-build\": \"true\",",
          "732:                 \"needs-helm-tests\": \"false\",",
          "733:                 \"run-tests\": \"true\",",
          "734:                 \"docs-build\": \"true\",",
          "735:                 \"docs-filter-list-as-string\": ALL_DOCS_SELECTED_FOR_BUILD,",
          "736:                 \"run-kubernetes-tests\": \"false\",",
          "737:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "738:                 \"skip-provider-tests\": \"false\",",
          "739:                 \"parallel-test-types-list-as-string\": \"Core Providers[-amazon,google] Other \"",
          "740:                 \"Providers[amazon] WWW \"",
          "741:                 \"API Always CLI Providers[google]\",",
          "742:             },",
          "743:             id=\"Tests for all providers should run if model file changed\",",
          "744:         ),",
          "745:         pytest.param(",
          "746:             (\"airflow/file.py\",),",
          "747:             {",
          "748:                 \"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED,",
          "755:                 \"docs-filter-list-as-string\": ALL_DOCS_SELECTED_FOR_BUILD,",
          "759:                 \"parallel-test-types-list-as-string\": \"Core Providers[-amazon,google] Other \"",
          "760:                 \"Providers[amazon] WWW \"",
          "763:             id=\"Tests for all providers should run if any other than API/WWW/CLI file changed.\",",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "671:             (),",
          "672:             \"main\",",
          "673:             {",
          "676:                 \"image-build\": \"true\",",
          "677:                 \"needs-helm-tests\": \"true\",",
          "678:                 \"run-tests\": \"true\",",
          "679:                 \"docs-build\": \"true\",",
          "680:                 \"upgrade-to-newer-dependencies\": \"true\",",
          "682:                 \"API Always CLI Providers[google]\",",
          "683:             },",
          "684:             id=\"All tests run on push even if unimportant file changed\",",
          "",
          "[Removed Lines]",
          "674:                 \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "675:                 \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "681:                 \"parallel-test-types\": \"Core Providers[-amazon,google] Other Providers[amazon] WWW \"",
          "",
          "[Added Lines]",
          "789:                 \"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED,",
          "790:                 \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "791:                 \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "796:                 \"docs-filter-list-as-string\": ALL_DOCS_SELECTED_FOR_BUILD,",
          "798:                 \"parallel-test-types-list-as-string\": \"Core Providers[-amazon,google] Other \"",
          "799:                 \"Providers[amazon] WWW \"",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "688:             (),",
          "689:             \"v2-3-stable\",",
          "690:             {",
          "693:                 \"image-build\": \"true\",",
          "694:                 \"needs-helm-tests\": \"false\",",
          "695:                 \"run-tests\": \"true\",",
          "696:                 \"docs-build\": \"true\",",
          "697:                 \"upgrade-to-newer-dependencies\": \"true\",",
          "699:             },",
          "700:             id=\"All tests except Providers and Helm run on push\"",
          "701:             \" even if unimportant file changed in non-main branch\",",
          "",
          "[Removed Lines]",
          "691:                 \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "692:                 \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "698:                 \"parallel-test-types\": \"Core Other WWW API Always CLI\",",
          "",
          "[Added Lines]",
          "809:                 \"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED,",
          "810:                 \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "811:                 \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "816:                 \"docs-filter-list-as-string\": \"--package-filter apache-airflow --package-filter docker-stack\",",
          "818:                 \"parallel-test-types-list-as-string\": \"Core Other WWW API Always CLI\",",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "705:             (),",
          "706:             \"main\",",
          "707:             {",
          "710:                 \"image-build\": \"true\",",
          "711:                 \"needs-helm-tests\": \"true\",",
          "712:                 \"run-tests\": \"true\",",
          "713:                 \"docs-build\": \"true\",",
          "714:                 \"upgrade-to-newer-dependencies\": \"true\",",
          "716:                 \"API Always CLI Providers[google]\",",
          "717:             },",
          "718:             id=\"All tests run on push if core file changed\",",
          "",
          "[Removed Lines]",
          "708:                 \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "709:                 \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "715:                 \"parallel-test-types\": \"Core Providers[-amazon,google] Other Providers[amazon] WWW \"",
          "",
          "[Added Lines]",
          "828:                 \"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED,",
          "829:                 \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "830:                 \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "835:                 \"docs-filter-list-as-string\": ALL_DOCS_SELECTED_FOR_BUILD,",
          "837:                 \"parallel-test-types-list-as-string\": \"Core Providers[-amazon,google] Other \"",
          "838:                 \"Providers[amazon] WWW \"",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "755:     )",
          "756:     assert_outputs_are_printed(",
          "757:         {",
          "760:             \"image-build\": \"true\",",
          "761:             \"needs-helm-tests\": \"true\",",
          "762:             \"run-tests\": \"true\",",
          "",
          "[Removed Lines]",
          "758:             \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "759:             \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "",
          "[Added Lines]",
          "881:             \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "882:             \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "764:             \"upgrade-to-newer-dependencies\": \"true\"",
          "765:             if github_event in [GithubEvents.PUSH, GithubEvents.SCHEDULE]",
          "766:             else \"false\",",
          "768:             \"API Always CLI Providers[google]\",",
          "769:         },",
          "770:         str(stderr),",
          "",
          "[Removed Lines]",
          "767:             \"parallel-test-types\": \"Core Providers[-amazon,google] Other Providers[amazon] WWW \"",
          "",
          "[Added Lines]",
          "890:             \"parallel-test-types-list-as-string\": \"Core Providers[-amazon,google] \"",
          "891:             \"Other Providers[amazon] WWW \"",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "820:         default_branch=\"main\",",
          "821:     )",
          "822:     assert_outputs_are_printed(expected_outputs, str(stderr))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "949: @pytest.mark.parametrize(",
          "950:     \"files, expected_outputs,\",",
          "951:     [",
          "952:         pytest.param(",
          "953:             (\"docs/apache-airflow-providers-google/docs.rst\",),",
          "954:             {",
          "955:                 \"docs-filter-list-as-string\": \"--package-filter apache-airflow-providers-amazon \"",
          "956:                 \"--package-filter apache-airflow-providers-apache-beam \"",
          "957:                 \"--package-filter apache-airflow-providers-apache-cassandra \"",
          "958:                 \"--package-filter apache-airflow-providers-cncf-kubernetes \"",
          "959:                 \"--package-filter apache-airflow-providers-common-sql \"",
          "960:                 \"--package-filter apache-airflow-providers-facebook \"",
          "961:                 \"--package-filter apache-airflow-providers-google \"",
          "962:                 \"--package-filter apache-airflow-providers-hashicorp \"",
          "963:                 \"--package-filter apache-airflow-providers-microsoft-azure \"",
          "964:                 \"--package-filter apache-airflow-providers-microsoft-mssql \"",
          "965:                 \"--package-filter apache-airflow-providers-mysql \"",
          "966:                 \"--package-filter apache-airflow-providers-oracle \"",
          "967:                 \"--package-filter apache-airflow-providers-postgres \"",
          "968:                 \"--package-filter apache-airflow-providers-presto \"",
          "969:                 \"--package-filter apache-airflow-providers-salesforce \"",
          "970:                 \"--package-filter apache-airflow-providers-sftp \"",
          "971:                 \"--package-filter apache-airflow-providers-ssh \"",
          "972:                 \"--package-filter apache-airflow-providers-trino\",",
          "973:             },",
          "974:             id=\"Google provider docs changed\",",
          "975:         ),",
          "976:         pytest.param(",
          "977:             (\"airflow/providers/common/sql/common_sql_python.py\",),",
          "978:             {",
          "979:                 \"docs-filter-list-as-string\": \"--package-filter apache-airflow \"",
          "980:                 \"--package-filter apache-airflow-providers-amazon \"",
          "981:                 \"--package-filter apache-airflow-providers-apache-drill \"",
          "982:                 \"--package-filter apache-airflow-providers-apache-druid \"",
          "983:                 \"--package-filter apache-airflow-providers-apache-hive \"",
          "984:                 \"--package-filter apache-airflow-providers-apache-impala \"",
          "985:                 \"--package-filter apache-airflow-providers-apache-pinot \"",
          "986:                 \"--package-filter apache-airflow-providers-common-sql \"",
          "987:                 \"--package-filter apache-airflow-providers-databricks \"",
          "988:                 \"--package-filter apache-airflow-providers-elasticsearch \"",
          "989:                 \"--package-filter apache-airflow-providers-exasol \"",
          "990:                 \"--package-filter apache-airflow-providers-google \"",
          "991:                 \"--package-filter apache-airflow-providers-jdbc \"",
          "992:                 \"--package-filter apache-airflow-providers-microsoft-mssql \"",
          "993:                 \"--package-filter apache-airflow-providers-mysql \"",
          "994:                 \"--package-filter apache-airflow-providers-odbc \"",
          "995:                 \"--package-filter apache-airflow-providers-oracle \"",
          "996:                 \"--package-filter apache-airflow-providers-postgres \"",
          "997:                 \"--package-filter apache-airflow-providers-presto \"",
          "998:                 \"--package-filter apache-airflow-providers-qubole \"",
          "999:                 \"--package-filter apache-airflow-providers-slack \"",
          "1000:                 \"--package-filter apache-airflow-providers-snowflake \"",
          "1001:                 \"--package-filter apache-airflow-providers-sqlite \"",
          "1002:                 \"--package-filter apache-airflow-providers-trino \"",
          "1003:                 \"--package-filter apache-airflow-providers-vertica\",",
          "1004:             },",
          "1005:             id=\"Common SQL provider package python files changed\",",
          "1006:         ),",
          "1007:         pytest.param(",
          "1008:             (\"docs/apache-airflow-providers-airbyte/docs.rst\",),",
          "1009:             {",
          "1010:                 \"docs-filter-list-as-string\": \"--package-filter apache-airflow-providers-airbyte \"",
          "1011:                 \"--package-filter apache-airflow-providers-http\",",
          "1012:             },",
          "1013:             id=\"Airbyte provider docs changed\",",
          "1014:         ),",
          "1015:         pytest.param(",
          "1016:             (\"airflow/providers/celery/file.py\",),",
          "1017:             {",
          "1018:                 \"docs-filter-list-as-string\": \"--package-filter apache-airflow \"",
          "1019:                 \"--package-filter apache-airflow-providers-celery\",",
          "1020:             },",
          "1021:             id=\"Celery python files changed\",",
          "1022:         ),",
          "1023:         pytest.param(",
          "1024:             (\"docs/conf.py\",),",
          "1025:             {",
          "1026:                 \"docs-filter-list-as-string\": ALL_DOCS_SELECTED_FOR_BUILD,",
          "1027:             },",
          "1028:             id=\"Docs conf.py changed\",",
          "1029:         ),",
          "1030:         pytest.param(",
          "1031:             (\"airflow/test.py\",),",
          "1032:             {",
          "1033:                 \"docs-filter-list-as-string\": ALL_DOCS_SELECTED_FOR_BUILD,",
          "1034:             },",
          "1035:             id=\"Core files changed. All provider docs should also be built\",",
          "1036:         ),",
          "1037:         pytest.param(",
          "1038:             (\"docs/docker-stack/test.rst\",),",
          "1039:             {\"docs-filter-list-as-string\": \"--package-filter docker-stack\"},",
          "1040:             id=\"Docker stack files changed. No provider docs to build\",",
          "1041:         ),",
          "1042:         pytest.param(",
          "1043:             (\"airflow/test.py\", \"chart/airflow/values.yaml\"),",
          "1044:             {",
          "1045:                 \"docs-filter-list-as-string\": ALL_DOCS_SELECTED_FOR_BUILD,",
          "1046:             },",
          "1047:             id=\"Core files and helm chart files changed. All provider docs should be built\",",
          "1048:         ),",
          "1049:         pytest.param(",
          "1050:             (\"chart/airflow/values.yaml\",),",
          "1051:             {",
          "1052:                 \"docs-filter-list-as-string\": \"--package-filter helm-chart\",",
          "1053:             },",
          "1054:             id=\"Helm chart files changed. No provider, airflow docs to build\",",
          "1055:         ),",
          "1056:         pytest.param(",
          "1057:             (\"docs/helm-chart/airflow/values.yaml\",),",
          "1058:             {",
          "1059:                 \"docs-filter-list-as-string\": \"--package-filter helm-chart\",",
          "1060:             },",
          "1061:             id=\"Docs helm chart files changed. No provider, airflow docs to build\",",
          "1062:         ),",
          "1063:     ],",
          "1064: )",
          "1065: def test_docs_filter(files: tuple[str, ...], expected_outputs: dict[str, str]):",
          "1066:     stderr = SelectiveChecks(",
          "1067:         files=files,",
          "1068:         commit_ref=\"HEAD\",",
          "1069:         github_event=GithubEvents.PULL_REQUEST,",
          "1070:         pr_labels=(),",
          "1071:         default_branch=\"main\",",
          "1072:     )",
          "1073:     assert_outputs_are_printed(expected_outputs, str(stderr))",
          "1076: @pytest.mark.parametrize(",
          "1077:     \"files, labels, expected_outputs, should_fail\",",
          "1078:     [",
          "1079:         pytest.param(",
          "1080:             (\"airflow/providers/yandex/test.py\",),",
          "1081:             (),",
          "1082:             None,",
          "1083:             True,",
          "1084:             id=\"Suspended provider changes should fail\",",
          "1085:         ),",
          "1086:         pytest.param(",
          "1087:             (\"airflow/providers/yandex/test.py\",),",
          "1088:             (\"allow suspended provider changes\",),",
          "1089:             {\"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED},",
          "1090:             False,",
          "1091:             id=\"Suspended provider changes should not fail if appropriate label is set\",",
          "1092:         ),",
          "1093:         pytest.param(",
          "1094:             (\"airflow/providers/yandex/test.py\", \"airflow/providers/airbyte/test.py\"),",
          "1095:             (\"allow suspended provider changes\",),",
          "1096:             {\"affected-providers-list-as-string\": \"airbyte http\"},",
          "1097:             False,",
          "1098:             id=\"Only non-suspended provider changes should be listed\",",
          "1099:         ),",
          "1100:     ],",
          "1101: )",
          "1102: def test_suspended_providers(",
          "1103:     files: tuple[str, ...], labels: tuple[str], expected_outputs: dict[str, str], should_fail: bool",
          "1104: ):",
          "1105:     failed = False",
          "1106:     try:",
          "1107:         stderr = str(",
          "1108:             SelectiveChecks(",
          "1109:                 files=files,",
          "1110:                 commit_ref=\"HEAD\",",
          "1111:                 github_event=GithubEvents.PULL_REQUEST,",
          "1112:                 pr_labels=labels,",
          "1113:                 default_branch=\"main\",",
          "1114:             )",
          "1115:         )",
          "1116:     except SystemExit:",
          "1117:         failed = True",
          "1118:     assert failed == should_fail",
          "1119:     if not failed:",
          "1120:         assert_outputs_are_printed(expected_outputs, str(stderr))",
          "",
          "---------------"
        ],
        "dev/provider_packages/prepare_provider_packages.py||dev/provider_packages/prepare_provider_packages.py": [
          "File: dev/provider_packages/prepare_provider_packages.py -> dev/provider_packages/prepare_provider_packages.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: from rich.syntax import Syntax",
          "53: from yaml import safe_load",
          "57: INITIAL_CHANGELOG_CONTENT = \"\"\"",
          "",
          "[Removed Lines]",
          "55: ALL_PYTHON_VERSIONS = [\"3.7\", \"3.8\", \"3.9\", \"3.10\"]",
          "",
          "[Added Lines]",
          "55: ALL_PYTHON_VERSIONS = [\"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.11\"]",
          "",
          "---------------"
        ],
        "dev/retag_docker_images.py||dev/retag_docker_images.py": [
          "File: dev/retag_docker_images.py -> dev/retag_docker_images.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import rich_click as click",
          "36: GHCR_IO_PREFIX = \"ghcr.io\"",
          "",
          "[Removed Lines]",
          "34: PYTHON_VERSIONS = [\"3.7\", \"3.8\", \"3.9\", \"3.10\"]",
          "",
          "[Added Lines]",
          "34: PYTHON_VERSIONS = [\"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.11\"]",
          "",
          "---------------"
        ],
        "scripts/ci/pre_commit/pre_commit_update_providers_dependencies.py||scripts/ci/pre_commit/pre_commit_update_providers_dependencies.py": [
          "File: scripts/ci/pre_commit/pre_commit_update_providers_dependencies.py -> scripts/ci/pre_commit/pre_commit_update_providers_dependencies.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: warnings: list[str] = []",
          "46: errors: list[str] = []",
          "52: suspended_paths: list[str] = []",
          "54: ALL_DEPENDENCIES: dict[str, dict[str, list[str]]] = defaultdict(lambda: defaultdict(list))",
          "",
          "[Removed Lines]",
          "48: CROSS_PROVIDERS_DEPS = \"cross-providers-deps\"",
          "49: DEPS = \"deps\"",
          "50: SUSPENDED = \"suspended\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175:         if imported_provider is not None and imported_provider not in ALL_PROVIDERS:",
          "176:             warnings.append(f\"The provider {imported_provider} from {file_path} cannot be found.\")",
          "177:         elif imported_provider and file_provider != imported_provider:",
          "181: if __name__ == \"__main__\":",
          "",
          "[Removed Lines]",
          "178:             ALL_DEPENDENCIES[file_provider][CROSS_PROVIDERS_DEPS].append(imported_provider)",
          "",
          "[Added Lines]",
          "174:             ALL_DEPENDENCIES[file_provider][\"cross-providers-deps\"].append(imported_provider)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "187:         check_if_different_provider_used(file)",
          "188:     for provider, provider_yaml_content in ALL_PROVIDERS.items():",
          "189:         if not provider_yaml_content.get(\"suspended\"):",
          "191:     if warnings:",
          "192:         console.print(\"[yellow]Warnings!\\n\")",
          "193:         for warning in warnings:",
          "",
          "[Removed Lines]",
          "190:             ALL_DEPENDENCIES[provider][DEPS].extend(provider_yaml_content[\"dependencies\"])",
          "",
          "[Added Lines]",
          "186:             ALL_DEPENDENCIES[provider][\"deps\"].extend(provider_yaml_content[\"dependencies\"])",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "200:         console.print(f\"[bright_blue]Total: {len(errors)} errors.\")",
          "201:     unique_sorted_dependencies: dict[str, dict[str, list[str]]] = defaultdict(dict)",
          "202:     for key in sorted(ALL_DEPENDENCIES.keys()):",
          "206:         )",
          "207:     if errors:",
          "208:         console.print()",
          "",
          "[Removed Lines]",
          "203:         unique_sorted_dependencies[key][DEPS] = sorted(ALL_DEPENDENCIES[key][DEPS])",
          "204:         unique_sorted_dependencies[key][CROSS_PROVIDERS_DEPS] = sorted(",
          "205:             set(ALL_DEPENDENCIES[key][CROSS_PROVIDERS_DEPS])",
          "",
          "[Added Lines]",
          "199:         unique_sorted_dependencies[key][\"deps\"] = sorted(ALL_DEPENDENCIES[key][\"deps\"])",
          "200:         unique_sorted_dependencies[key][\"cross-providers-deps\"] = sorted(",
          "201:             set(ALL_DEPENDENCIES[key][\"cross-providers-deps\"])",
          "202:         )",
          "203:         excluded_versions = ALL_PROVIDERS[key].get(\"excluded-python-versions\")",
          "204:         unique_sorted_dependencies[key][\"excluded-python-versions\"] = (",
          "205:             excluded_versions if excluded_versions else []",
          "",
          "---------------"
        ],
        "setup.cfg||setup.cfg": [
          "File: setup.cfg -> setup.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     Programming Language :: Python :: 3.8",
          "41:     Programming Language :: Python :: 3.9",
          "42:     Programming Language :: Python :: 3.10",
          "43:     Topic :: System :: Monitoring",
          "44:     Framework :: Apache Airflow",
          "45: project_urls =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:     Programming Language :: Python :: 3.11",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: CROSS_PROVIDERS_DEPS = \"cross-providers-deps\"",
          "56: DEPS = \"deps\"",
          "59: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: CURRENT_PYTHON_VERSION = f\"{sys.version_info.major}.{sys.version_info.minor}\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: #",
          "64: def fill_provider_dependencies() -> dict[str, dict[str, list[str]]]:",
          "65:     try:",
          "67:     except Exception as e:",
          "68:         print(f\"Exception while loading provider dependencies {e}\")",
          "69:         # we can ignore loading dependencies when they are missing - they are only used to generate",
          "",
          "[Removed Lines]",
          "66:         return json.loads((AIRFLOW_SOURCES_ROOT / \"generated\" / \"provider_dependencies.json\").read_text())",
          "",
          "[Added Lines]",
          "67:         with AIRFLOW_SOURCES_ROOT.joinpath(\"generated\", \"provider_dependencies.json\").open() as f:",
          "68:             dependencies = json.load(f)",
          "69:         return {",
          "70:             key: value",
          "71:             for key, value in dependencies.items()",
          "72:             if CURRENT_PYTHON_VERSION not in value[\"excluded-python-versions\"]",
          "73:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "487:     \"virtualenv\": virtualenv,",
          "488: }",
          "490: EXTRAS_DEPENDENCIES: dict[str, list[str]] = deepcopy(CORE_EXTRAS_DEPENDENCIES)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "498: def filter_out_excluded_extras() -> Iterable[tuple[str, list[str]]]:",
          "499:     for key, value in CORE_EXTRAS_DEPENDENCIES.items():",
          "500:         if value:",
          "501:             yield key, value",
          "502:         else:",
          "503:             print(f\"Removing extra {key} as it has been excluded\")",
          "506: CORE_EXTRAS_DEPENDENCIES = dict(filter_out_excluded_extras())",
          "",
          "---------------"
        ],
        "tests/dag_processing/test_processor.py||tests/dag_processing/test_processor.py": [
          "File: tests/dag_processing/test_processor.py -> tests/dag_processing/test_processor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import pytest",
          "29: from airflow.callbacks.callback_requests import TaskCallbackRequest",
          "30: from airflow.configuration import TEST_DAGS_FOLDER, conf",
          "31: from airflow.dag_processing.manager import DagFileProcessorAgent",
          "",
          "[Removed Lines]",
          "28: from airflow import settings",
          "",
          "[Added Lines]",
          "28: from airflow import PY311, settings",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "789:             assert len(import_errors) == 1",
          "790:             import_error = import_errors[0]",
          "791:             assert import_error.filename == unparseable_filename",
          "800:             assert import_error.stacktrace == expected_stacktrace.format(",
          "801:                 unparseable_filename, unparseable_filename",
          "802:             )",
          "",
          "[Removed Lines]",
          "792:             expected_stacktrace = (",
          "793:                 \"Traceback (most recent call last):\\n\"",
          "794:                 '  File \"{}\", line 3, in <module>\\n'",
          "795:                 \"    something()\\n\"",
          "796:                 '  File \"{}\", line 2, in something\\n'",
          "797:                 \"    return airflow_DAG\\n\"",
          "798:                 \"NameError: name 'airflow_DAG' is not defined\\n\"",
          "799:             )",
          "",
          "[Added Lines]",
          "792:             if PY311:",
          "793:                 expected_stacktrace = (",
          "794:                     \"Traceback (most recent call last):\\n\"",
          "795:                     '  File \"{}\", line 3, in <module>\\n'",
          "796:                     \"    something()\\n\"",
          "797:                     '  File \"{}\", line 2, in something\\n'",
          "798:                     \"    return airflow_DAG\\n\"",
          "799:                     \"           ^^^^^^^^^^^\\n\"",
          "800:                     \"NameError: name 'airflow_DAG' is not defined\\n\"",
          "801:                 )",
          "802:             else:",
          "803:                 expected_stacktrace = (",
          "804:                     \"Traceback (most recent call last):\\n\"",
          "805:                     '  File \"{}\", line 3, in <module>\\n'",
          "806:                     \"    something()\\n\"",
          "807:                     '  File \"{}\", line 2, in something\\n'",
          "808:                     \"    return airflow_DAG\\n\"",
          "809:                     \"NameError: name 'airflow_DAG' is not defined\\n\"",
          "810:                 )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "815:             assert len(import_errors) == 1",
          "816:             import_error = import_errors[0]",
          "817:             assert import_error.filename == unparseable_filename",
          "824:             assert import_error.stacktrace == expected_stacktrace.format(unparseable_filename)",
          "826:             session.rollback()",
          "",
          "[Removed Lines]",
          "818:             expected_stacktrace = (",
          "819:                 \"Traceback (most recent call last):\\n\"",
          "820:                 '  File \"{}\", line 2, in something\\n'",
          "821:                 \"    return airflow_DAG\\n\"",
          "822:                 \"NameError: name 'airflow_DAG' is not defined\\n\"",
          "823:             )",
          "",
          "[Added Lines]",
          "829:             if PY311:",
          "830:                 expected_stacktrace = (",
          "831:                     \"Traceback (most recent call last):\\n\"",
          "832:                     '  File \"{}\", line 2, in something\\n'",
          "833:                     \"    return airflow_DAG\\n\"",
          "834:                     \"           ^^^^^^^^^^^\\n\"",
          "835:                     \"NameError: name 'airflow_DAG' is not defined\\n\"",
          "836:                 )",
          "837:             else:",
          "838:                 expected_stacktrace = (",
          "839:                     \"Traceback (most recent call last):\\n\"",
          "840:                     '  File \"{}\", line 2, in something\\n'",
          "841:                     \"    return airflow_DAG\\n\"",
          "842:                     \"NameError: name 'airflow_DAG' is not defined\\n\"",
          "843:                 )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "838:             assert len(import_errors) == 1",
          "839:             import_error = import_errors[0]",
          "840:             assert import_error.filename == invalid_dag_filename",
          "849:             assert import_error.stacktrace == expected_stacktrace.format(",
          "850:                 invalid_dag_filename, invalid_dag_filename",
          "851:             )",
          "",
          "[Removed Lines]",
          "841:             expected_stacktrace = (",
          "842:                 \"Traceback (most recent call last):\\n\"",
          "843:                 '  File \"{}\", line 3, in <module>\\n'",
          "844:                 \"    something()\\n\"",
          "845:                 '  File \"{}\", line 2, in something\\n'",
          "846:                 \"    return airflow_DAG\\n\"",
          "847:                 \"NameError: name 'airflow_DAG' is not defined\\n\"",
          "848:             )",
          "",
          "[Added Lines]",
          "861:             if PY311:",
          "862:                 expected_stacktrace = (",
          "863:                     \"Traceback (most recent call last):\\n\"",
          "864:                     '  File \"{}\", line 3, in <module>\\n'",
          "865:                     \"    something()\\n\"",
          "866:                     '  File \"{}\", line 2, in something\\n'",
          "867:                     \"    return airflow_DAG\\n\"",
          "868:                     \"           ^^^^^^^^^^^\\n\"",
          "869:                     \"NameError: name 'airflow_DAG' is not defined\\n\"",
          "870:                 )",
          "871:             else:",
          "872:                 expected_stacktrace = (",
          "873:                     \"Traceback (most recent call last):\\n\"",
          "874:                     '  File \"{}\", line 3, in <module>\\n'",
          "875:                     \"    something()\\n\"",
          "876:                     '  File \"{}\", line 2, in something\\n'",
          "877:                     \"    return airflow_DAG\\n\"",
          "878:                     \"NameError: name 'airflow_DAG' is not defined\\n\"",
          "879:                 )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "865:             assert len(import_errors) == 1",
          "866:             import_error = import_errors[0]",
          "867:             assert import_error.filename == invalid_dag_filename",
          "874:             assert import_error.stacktrace == expected_stacktrace.format(invalid_dag_filename)",
          "875:             session.rollback()",
          "",
          "[Removed Lines]",
          "868:             expected_stacktrace = (",
          "869:                 \"Traceback (most recent call last):\\n\"",
          "870:                 '  File \"{}\", line 2, in something\\n'",
          "871:                 \"    return airflow_DAG\\n\"",
          "872:                 \"NameError: name 'airflow_DAG' is not defined\\n\"",
          "873:             )",
          "",
          "[Added Lines]",
          "899:             if PY311:",
          "900:                 expected_stacktrace = (",
          "901:                     \"Traceback (most recent call last):\\n\"",
          "902:                     '  File \"{}\", line 2, in something\\n'",
          "903:                     \"    return airflow_DAG\\n\"",
          "904:                     \"           ^^^^^^^^^^^\\n\"",
          "905:                     \"NameError: name 'airflow_DAG' is not defined\\n\"",
          "906:                 )",
          "907:             else:",
          "908:                 expected_stacktrace = (",
          "909:                     \"Traceback (most recent call last):\\n\"",
          "910:                     '  File \"{}\", line 2, in something\\n'",
          "911:                     \"    return airflow_DAG\\n\"",
          "912:                     \"NameError: name 'airflow_DAG' is not defined\\n\"",
          "913:                 )",
          "",
          "---------------"
        ],
        "tests/decorators/test_python.py||tests/decorators/test_python.py": [
          "File: tests/decorators/test_python.py -> tests/decorators/test_python.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import pytest",
          "27: from airflow.decorators.base import DecoratedMappedOperator",
          "28: from airflow.exceptions import AirflowException",
          "29: from airflow.models import DAG",
          "",
          "[Removed Lines]",
          "25: from airflow import PY38",
          "26: from airflow.decorators import task as task_decorator",
          "",
          "[Added Lines]",
          "25: from airflow import PY38, PY311",
          "26: from airflow.decorators import setup, task as task_decorator, teardown",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:                 ...",
          "122:             line = sys._getframe().f_lineno - 6 if PY38 else sys._getframe().f_lineno - 3",
          "124:         warn = recwarn[0]",
          "125:         assert warn.filename == __file__",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:             if PY311:",
          "124:                 # extra line explaining the error location in Py311",
          "125:                 line = line - 1",
          "",
          "---------------"
        ],
        "tests/models/test_param.py||tests/models/test_param.py": [
          "File: tests/models/test_param.py -> tests/models/test_param.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import pytest",
          "23: from airflow.decorators import task",
          "24: from airflow.exceptions import ParamValidationError, RemovedInAirflow3Warning",
          "25: from airflow.models.param import Param, ParamsDict",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: from airflow import PY311",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:         with pytest.raises(ParamValidationError, match=error_pattern):",
          "123:             Param(\"24:00:00\", type=\"string\", format=\"time\").resolve()",
          "126:         \"\"\"Test string date format.\"\"\"",
          "139:     def test_int_param(self):",
          "140:         p = Param(5)",
          "",
          "[Removed Lines]",
          "125:     def test_string_date_format(self):",
          "127:         assert Param(\"2021-01-01\", type=\"string\", format=\"date\").resolve() == \"2021-01-01\"",
          "129:         error_pattern = \"is not a 'date'\"",
          "130:         with pytest.raises(ParamValidationError, match=error_pattern):",
          "131:             Param(\"01/01/2021\", type=\"string\", format=\"date\").resolve()",
          "133:         with pytest.raises(ParamValidationError, match=error_pattern):",
          "134:             Param(\"20120503\", type=\"string\", format=\"date\").resolve()",
          "136:         with pytest.raises(ParamValidationError, match=error_pattern):",
          "137:             Param(\"21 May 1975\", type=\"string\", format=\"date\").resolve()",
          "",
          "[Added Lines]",
          "126:     @pytest.mark.parametrize(",
          "127:         \"date_string\",",
          "128:         [",
          "129:             \"2021-01-01\",",
          "130:             pytest.param(",
          "131:                 \"20120503\",",
          "132:                 marks=pytest.mark.skipif(not PY311, reason=\"Improved fromisoformat() in 3.11.\"),",
          "133:             ),",
          "134:         ],",
          "135:     )",
          "136:     def test_string_date_format(self, date_string):",
          "138:         assert Param(date_string, type=\"string\", format=\"date\").resolve() == date_string",
          "140:     @pytest.mark.parametrize(",
          "141:         \"date_string\",",
          "142:         [",
          "143:             \"01/01/2021\",",
          "144:             \"21 May 1975\",",
          "145:             pytest.param(",
          "146:                 \"20120503\",",
          "147:                 marks=pytest.mark.skipif(PY311, reason=\"Improved fromisoformat() in 3.11.\"),",
          "148:             ),",
          "149:         ],",
          "150:     )",
          "151:     def test_string_date_format_error(self, date_string):",
          "152:         \"\"\"Test string date format failures.\"\"\"",
          "153:         with pytest.raises(ParamValidationError, match=\"is not a 'date'\"):",
          "154:             Param(date_string, type=\"string\", format=\"date\").resolve()",
          "",
          "---------------"
        ],
        "tests/providers/apache/hive/hooks/test_hive.py||tests/providers/apache/hive/hooks/test_hive.py": [
          "File: tests/providers/apache/hive/hooks/test_hive.py -> tests/providers/apache/hive/hooks/test_hive.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: # under the License.",
          "18: from __future__ import annotations",
          "20: import datetime",
          "21: import itertools",
          "22: from collections import OrderedDict, namedtuple",
          "23: from unittest import mock",
          "25: import pandas as pd",
          "27: from hmsclient import HMSClient",
          "29: from airflow.exceptions import AirflowException",
          "",
          "[Removed Lines]",
          "26: import pytest",
          "",
          "[Added Lines]",
          "20: import pytest",
          "22: from airflow import PY311",
          "24: if PY311:",
          "25:     pytest.skip(",
          "26:         \"The tests are skipped because Apache Hive provider is not supported on Python 3.11\",",
          "27:         allow_module_level=True,",
          "28:     )",
          "",
          "---------------"
        ],
        "tests/providers/google/cloud/utils/test_mlengine_operator_utils.py||tests/providers/google/cloud/utils/test_mlengine_operator_utils.py": [
          "File: tests/providers/google/cloud/utils/test_mlengine_operator_utils.py -> tests/providers/google/cloud/utils/test_mlengine_operator_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: METRIC_FN, METRIC_KEYS = get_metric_fn_and_keys()",
          "81: METRIC_KEYS_EXPECTED = \",\".join(METRIC_KEYS)",
          "",
          "[Removed Lines]",
          "80: METRIC_FN_ENCODED = base64.b64encode(dill.dumps(METRIC_FN, recurse=True)).decode()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:         mock_beam_pipeline.assert_called_once_with(evaluate_prediction)",
          "115:         mock_python.assert_called_once_with(evaluate_summary)",
          "117:         assert TASK_PREFIX_PREDICTION == evaluate_prediction.task_id",
          "118:         assert PROJECT_ID == evaluate_prediction._project_id",
          "119:         assert BATCH_PREDICTION_JOB_ID == evaluate_prediction._job_id",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:         # importing apache_beam elsewhere modifies the metrics. In order to avoid metrics being modified",
          "117:         # by apache_beam import happening after importing this test, we retrieve the metrics here rather than",
          "118:         # at the top of the file.",
          "119:         METRIC_FN_ENCODED = base64.b64encode(dill.dumps(METRIC_FN, recurse=True)).decode()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:         mock_beam_pipeline.assert_called_once_with(evaluate_prediction)",
          "156:         mock_python.assert_called_once_with(evaluate_summary)",
          "158:         assert TASK_PREFIX_PREDICTION == evaluate_prediction.task_id",
          "159:         assert PROJECT_ID == evaluate_prediction._project_id",
          "160:         assert BATCH_PREDICTION_JOB_ID == evaluate_prediction._job_id",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:         # importing apache_beam elsewhere modifies the metrics. In order to avoid metrics being modified",
          "163:         # by apache_beam import happening after importing this test, we retrieve the metrics here rather than",
          "164:         # at the top of the file.",
          "165:         METRIC_FN_ENCODED = base64.b64encode(dill.dumps(METRIC_FN, recurse=True)).decode()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "193:         mock_dataflow.assert_called_once_with(evaluate_prediction)",
          "194:         mock_python.assert_called_once_with(evaluate_summary)",
          "196:         assert TASK_PREFIX_PREDICTION == evaluate_prediction.task_id",
          "197:         assert PROJECT_ID == evaluate_prediction._project_id",
          "198:         assert BATCH_PREDICTION_JOB_ID == evaluate_prediction._job_id",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:         # importing apache_beam elsewhere modifies the metrics. In order to avoid metrics being modified",
          "206:         # by apache_beam import happening after importing this test, we retrieve the metrics here rather than",
          "207:         # at the top of the file.",
          "208:         METRIC_FN_ENCODED = base64.b64encode(dill.dumps(METRIC_FN, recurse=True)).decode()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "53a161bc9250f2aa6241c2eafc1aaae8d1582828",
      "candidate_info": {
        "commit_hash": "53a161bc9250f2aa6241c2eafc1aaae8d1582828",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/53a161bc9250f2aa6241c2eafc1aaae8d1582828",
        "files": [
          "airflow/cli/cli_config.py"
        ],
        "message": "Added metavar and choices to --state flag in airflow dags list-jobs CLI for suggesting valid state arguments. (#31308)\n\n(cherry picked from commit 8e296a09fc5c49188a129356caca8c3ea5eee000)",
        "before_after_code_files": [
          "airflow/cli/cli_config.py||airflow/cli/cli_config.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/31796"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/cli/cli_config.py||airflow/cli/cli_config.py": [
          "File: airflow/cli/cli_config.py -> airflow/cli/cli_config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: from airflow.settings import _ENABLE_AIP_44",
          "38: from airflow.utils.cli import ColorMode",
          "39: from airflow.utils.module_loading import import_string",
          "40: from airflow.utils.timezone import parse as parsedate",
          "42: BUILD_DOCS = \"BUILDING_AIRFLOW_DOCS\" in os.environ",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: from airflow.utils.state import DagRunState",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277: ARG_NO_BACKFILL = Arg(",
          "278:     (\"--no-backfill\",), help=\"filter all the backfill dagruns given the dag id\", action=\"store_true\"",
          "279: )",
          "282: # list_jobs",
          "283: ARG_DAG_ID_OPT = Arg((\"-d\", \"--dag-id\"), help=\"The id of the dag\")",
          "",
          "[Removed Lines]",
          "280: ARG_STATE = Arg((\"--state\",), help=\"Only list the dag runs corresponding to the state\")",
          "",
          "[Added Lines]",
          "281: dagrun_states = tuple(state.value for state in DagRunState)",
          "282: ARG_STATE = Arg(",
          "283:     (\"--state\",),",
          "284:     help=\"Only list the dag runs corresponding to the state\",",
          "285:     metavar=\", \".join(dagrun_states),",
          "286:     choices=dagrun_states,",
          "287: )",
          "",
          "---------------"
        ]
      }
    }
  ]
}