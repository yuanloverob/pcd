{
  "cve_id": "CVE-2019-1010275",
  "cve_desc": "helm Before 2.7.2 is affected by: CWE-295: Improper Certificate Validation. The impact is: Unauthorized clients could connect to the server because self-signed client certs were aloowed. The component is: helm (many files updated, see https://github.com/helm/helm/pull/3152/files/1096813bf9a425e2aa4ac755b6c991b626dfab50). The attack vector is: A malicious client could connect to the server over the network. The fixed version is: 2.7.2.",
  "repo": "helm/helm",
  "patch_hash": "1096813bf9a425e2aa4ac755b6c991b626dfab50",
  "patch_info": {
    "commit_hash": "1096813bf9a425e2aa4ac755b6c991b626dfab50",
    "repo": "helm/helm",
    "commit_url": "https://github.com/helm/helm/commit/1096813bf9a425e2aa4ac755b6c991b626dfab50",
    "files": [
      "cmd/tiller/tiller.go",
      "docs/helm/helm_get_hooks.md",
      "docs/helm/helm_get_manifest.md",
      "docs/helm/helm_get_values.md",
      "docs/tiller_ssl.md"
    ],
    "message": "fix(tiller): add stricter certificate verification\n\nThe older version of Tiller allowed a weaker set of certificate checks\nthan we intended. This version requires a client certificate, and then\nrequires that that certificate be signed by a known CA. This works\naround the situation where a user could provide a self-signed\ncertificate.",
    "before_after_code_files": [
      "cmd/tiller/tiller.go||cmd/tiller/tiller.go"
    ]
  },
  "patch_diff": {
    "cmd/tiller/tiller.go||cmd/tiller/tiller.go": [
      "File: cmd/tiller/tiller.go -> cmd/tiller/tiller.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "232:  opts := tlsutil.Options{CertFile: *certFile, KeyFile: *keyFile}",
      "233:  if *tlsVerify {",
      "234:   opts.CaCertFile = *caCertFile",
      "236:  }",
      "237:  return opts",
      "238: }",
      "",
      "[Removed Lines]",
      "235:   opts.ClientAuth = tls.VerifyClientCertIfGiven",
      "",
      "[Added Lines]",
      "239:   opts.ClientAuth = tls.RequireAndVerifyClientCert",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e8e6ac5d7783808cc0bd1adad053bec339849647",
      "candidate_info": {
        "commit_hash": "e8e6ac5d7783808cc0bd1adad053bec339849647",
        "repo": "helm/helm",
        "commit_url": "https://github.com/helm/helm/commit/e8e6ac5d7783808cc0bd1adad053bec339849647",
        "files": [
          "cmd/helm/get.go",
          "cmd/helm/helm.go",
          "cmd/helm/history.go",
          "cmd/helm/list.go",
          "cmd/helm/status.go",
          "cmd/tiller/tiller.go",
          "docs/helm/helm_get_hooks.md",
          "docs/helm/helm_get_manifest.md",
          "docs/helm/helm_get_values.md",
          "docs/index.md",
          "docs/tiller_ssl.md",
          "pkg/tlsutil/tls.go"
        ],
        "message": "Fix/missing ssl params (#3152)\n\n* fix(helm): add TLS params back\n\nDuring a recent refactor, several TLS flags stopped being processed for\na few of the commands. This fixes those commands, and documents how to\nset up TLS.\n\n* fix(tiller): add stricter certificate verification\n\nThe older version of Tiller allowed a weaker set of certificate checks\nthan we intended. This version requires a client certificate, and then\nrequires that that certificate be signed by a known CA. This works\naround the situation where a user could provide a self-signed\ncertificate.",
        "before_after_code_files": [
          "cmd/helm/get.go||cmd/helm/get.go",
          "cmd/helm/helm.go||cmd/helm/helm.go",
          "cmd/helm/history.go||cmd/helm/history.go",
          "cmd/helm/list.go||cmd/helm/list.go",
          "cmd/helm/status.go||cmd/helm/status.go",
          "cmd/tiller/tiller.go||cmd/tiller/tiller.go",
          "pkg/tlsutil/tls.go||pkg/tlsutil/tls.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/helm/helm/pull/3152"
        ],
        "olp_code_files": {
          "patch": [
            "cmd/tiller/tiller.go||cmd/tiller/tiller.go"
          ],
          "candidate": [
            "cmd/tiller/tiller.go||cmd/tiller/tiller.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/helm/get.go||cmd/helm/get.go": [
          "File: cmd/helm/get.go -> cmd/helm/get.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:    }",
          "65:    get.release = args[0]",
          "66:    if get.client == nil {",
          "68:    }",
          "69:    return get.run()",
          "70:   },",
          "",
          "[Removed Lines]",
          "67:     get.client = helm.NewClient(helm.Host(settings.TillerHost))",
          "",
          "[Added Lines]",
          "67:     get.client = newClient()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:  cmd.Flags().Int32Var(&get.version, \"revision\", 0, \"get the named release with revision\")",
          "79:  return cmd",
          "80: }",
          "",
          "[Removed Lines]",
          "75:  cmd.AddCommand(newGetValuesCmd(nil, out))",
          "76:  cmd.AddCommand(newGetManifestCmd(nil, out))",
          "77:  cmd.AddCommand(newGetHooksCmd(nil, out))",
          "",
          "[Added Lines]",
          "75:  cmd.AddCommand(addFlagsTLS(newGetValuesCmd(nil, out)))",
          "76:  cmd.AddCommand(addFlagsTLS(newGetManifestCmd(nil, out)))",
          "77:  cmd.AddCommand(addFlagsTLS(newGetHooksCmd(nil, out)))",
          "",
          "---------------"
        ],
        "cmd/helm/helm.go||cmd/helm/helm.go": [
          "File: cmd/helm/helm.go -> cmd/helm/helm.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:  tlsVerify     bool   // enable TLS and verify remote certificates",
          "46:  tlsEnable     bool   // enable TLS",
          "48:  tillerTunnel *kube.Tunnel",
          "49:  settings     helm_env.EnvSettings",
          "50: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:  tlsCaCertDefault = \"$HELM_HOME/ca.pem\"",
          "49:  tlsCertDefault   = \"$HELM_HOME/cert.pem\"",
          "50:  tlsKeyDefault    = \"$HELM_HOME/key.pem\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263:  options := []helm.Option{helm.Host(settings.TillerHost)}",
          "265:  if tlsVerify || tlsEnable {",
          "266:   tlsopts := tlsutil.Options{KeyFile: tlsKeyFile, CertFile: tlsCertFile, InsecureSkipVerify: true}",
          "267:   if tlsVerify {",
          "268:    tlsopts.CaCertFile = tlsCaCertFile",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270:   if tlsCaCertFile == \"\" {",
          "271:    tlsCaCertFile = os.ExpandEnv(tlsCaCertDefault)",
          "272:   }",
          "273:   if tlsCertFile == \"\" {",
          "274:    tlsCertFile = os.ExpandEnv(tlsCertDefault)",
          "275:   }",
          "276:   if tlsKeyFile == \"\" {",
          "277:    tlsKeyFile = os.ExpandEnv(tlsKeyDefault)",
          "278:   }",
          "279:   debug(\"Key=%q, Cert=%q, CA=%q\\n\", tlsKeyFile, tlsCertFile, tlsCaCertFile)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "283: func addFlagsTLS(cmd *cobra.Command) *cobra.Command {",
          "292:  cmd.Flags().StringVar(&tlsCaCertFile, \"tls-ca-cert\", tlsCaCertDefault, \"path to TLS CA certificate file\")",
          "",
          "[Removed Lines]",
          "285:  var (",
          "286:   tlsCaCertDefault = \"$HELM_HOME/ca.pem\"",
          "287:   tlsCertDefault   = \"$HELM_HOME/cert.pem\"",
          "288:   tlsKeyDefault    = \"$HELM_HOME/key.pem\"",
          "289:  )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cmd/helm/history.go||cmd/helm/history.go": [
          "File: cmd/helm/history.go -> cmd/helm/history.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:    case len(args) == 0:",
          "67:     return errReleaseRequired",
          "68:    case his.helmc == nil:",
          "70:    }",
          "71:    his.rls = args[0]",
          "72:    return his.run()",
          "",
          "[Removed Lines]",
          "69:     his.helmc = helm.NewClient(helm.Host(settings.TillerHost))",
          "",
          "[Added Lines]",
          "69:     his.helmc = newClient()",
          "",
          "---------------"
        ],
        "cmd/helm/list.go||cmd/helm/list.go": [
          "File: cmd/helm/list.go -> cmd/helm/list.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:     list.filter = strings.Join(args, \" \")",
          "94:    }",
          "95:    if list.client == nil {",
          "97:    }",
          "98:    return list.run()",
          "99:   },",
          "",
          "[Removed Lines]",
          "96:     list.client = helm.NewClient(helm.Host(settings.TillerHost))",
          "",
          "[Added Lines]",
          "96:     list.client = newClient()",
          "",
          "---------------"
        ],
        "cmd/helm/status.go||cmd/helm/status.go": [
          "File: cmd/helm/status.go -> cmd/helm/status.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:    }",
          "68:    status.release = args[0]",
          "69:    if status.client == nil {",
          "71:    }",
          "72:    return status.run()",
          "73:   },",
          "",
          "[Removed Lines]",
          "70:     status.client = helm.NewClient(helm.Host(settings.TillerHost))",
          "",
          "[Added Lines]",
          "70:     status.client = newClient()",
          "",
          "---------------"
        ],
        "cmd/tiller/tiller.go||cmd/tiller/tiller.go": [
          "File: cmd/tiller/tiller.go -> cmd/tiller/tiller.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:  opts := tlsutil.Options{CertFile: *certFile, KeyFile: *keyFile}",
          "233:  if *tlsVerify {",
          "234:   opts.CaCertFile = *caCertFile",
          "236:  }",
          "237:  return opts",
          "238: }",
          "",
          "[Removed Lines]",
          "235:   opts.ClientAuth = tls.VerifyClientCertIfGiven",
          "",
          "[Added Lines]",
          "239:   opts.ClientAuth = tls.RequireAndVerifyClientCert",
          "",
          "---------------"
        ],
        "pkg/tlsutil/tls.go||pkg/tlsutil/tls.go": [
          "File: pkg/tlsutil/tls.go -> pkg/tlsutil/tls.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: func CertFromFilePair(certFile, keyFile string) (*tls.Certificate, error) {",
          "66:  cert, err := tls.LoadX509KeyPair(certFile, keyFile)",
          "67:  if err != nil {",
          "69:  }",
          "70:  return &cert, err",
          "71: }",
          "",
          "[Removed Lines]",
          "68:   return nil, fmt.Errorf(\"can't load key pair from cert %s and key %s\", certFile, keyFile)",
          "",
          "[Added Lines]",
          "68:   return nil, fmt.Errorf(\"can't load key pair from cert %s and key %s: %s\", certFile, keyFile, err)",
          "",
          "---------------"
        ]
      }
    }
  ]
}