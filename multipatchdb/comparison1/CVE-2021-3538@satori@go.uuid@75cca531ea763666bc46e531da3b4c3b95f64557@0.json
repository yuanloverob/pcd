{
  "cve_id": "CVE-2021-3538",
  "cve_desc": "A flaw was found in github.com/satori/go.uuid in versions from commit 0ef6afb2f6cdd6cdaeee3885a95099c63f18fc8c to d91630c8510268e75203009fe7daf2b8e1d60c45. Due to insecure randomness in the g.rand.Read function the generated UUIDs are predictable for an attacker.",
  "repo": "satori/go.uuid",
  "patch_hash": "75cca531ea763666bc46e531da3b4c3b95f64557",
  "patch_info": {
    "commit_hash": "75cca531ea763666bc46e531da3b4c3b95f64557",
    "repo": "satori/go.uuid",
    "commit_url": "https://github.com/satori/go.uuid/commit/75cca531ea763666bc46e531da3b4c3b95f64557",
    "files": [
      "generator.go",
      "generator_test.go"
    ],
    "message": "Fix potential non-random UUIDs\n\nUse ReadFull to fetch random bytes from crypto/rand instead of calling\nRead directly as Read may read less bytes than asked.\n\nFix satori/go.uuid#73",
    "before_after_code_files": [
      "generator.go||generator.go",
      "generator_test.go||generator_test.go"
    ]
  },
  "patch_diff": {
    "generator.go||generator.go": [
      "File: generator.go -> generator.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "166: func (g *rfc4122Generator) NewV4() (UUID, error) {",
      "167:  u := UUID{}",
      "169:   return Nil, err",
      "170:  }",
      "171:  u.SetVersion(V4)",
      "",
      "[Removed Lines]",
      "168:  if _, err := g.rand.Read(u[:]); err != nil {",
      "",
      "[Added Lines]",
      "168:  if _, err := io.ReadFull(g.rand, u[:]); err != nil {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "188:  var err error",
      "189:  g.clockSequenceOnce.Do(func() {",
      "190:   buf := make([]byte, 2)",
      "192:    return",
      "193:   }",
      "194:   g.clockSequence = binary.BigEndian.Uint16(buf)",
      "",
      "[Removed Lines]",
      "191:   if _, err = g.rand.Read(buf); err != nil {",
      "",
      "[Added Lines]",
      "191:   if _, err = io.ReadFull(g.rand, buf); err != nil {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "226:    return",
      "227:   }",
      "",
      "[Removed Lines]",
      "225:   if _, err = g.rand.Read(g.hardwareAddr[:]); err != nil {",
      "",
      "[Added Lines]",
      "225:   if _, err = io.ReadFull(g.rand, g.hardwareAddr[:]); err != nil {",
      "",
      "---------------"
    ],
    "generator_test.go||generator_test.go": [
      "File: generator_test.go -> generator_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: package uuid",
      "24: import (",
      "25:  \"crypto/rand\"",
      "26:  \"fmt\"",
      "27:  \"net\"",
      "28:  \"time\"",
      "30:  . \"gopkg.in/check.v1\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25:  \"bytes\"",
      "29:  \"testing/iotest\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "195:  c.Assert(u1, Equals, Nil)",
      "196: }",
      "198: func (s *genTestSuite) BenchmarkNewV4(c *C) {",
      "199:  for i := 0; i < c.N; i++ {",
      "200:   NewV4()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "200: func (s *genTestSuite) TestNewV4PartialRead(c *C) {",
      "201:  g := &rfc4122Generator{",
      "202:   epochFunc:  time.Now,",
      "203:   hwAddrFunc: defaultHWAddrFunc,",
      "204:   rand:       iotest.OneByteReader(rand.Reader),",
      "205:  }",
      "206:  u1, err := g.NewV4()",
      "207:  zeros := bytes.Count(u1.Bytes(), []byte{0})",
      "208:  mostlyZeros := zeros >= 10",
      "210:  c.Assert(err, IsNil)",
      "211:  c.Assert(mostlyZeros, Equals, false)",
      "212: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0ef6afb2f6cdd6cdaeee3885a95099c63f18fc8c",
      "candidate_info": {
        "commit_hash": "0ef6afb2f6cdd6cdaeee3885a95099c63f18fc8c",
        "repo": "satori/go.uuid",
        "commit_url": "https://github.com/satori/go.uuid/commit/0ef6afb2f6cdd6cdaeee3885a95099c63f18fc8c",
        "files": [
          "README.md",
          "codec_test.go",
          "generator.go",
          "generator_test.go"
        ],
        "message": "Return enthropy errors from UUID generation.\n\nThis commit changes signature for `NewV1`, `NewV2` and `NewV4` functions\nwhich from now will return `(UUID, error)` instead of `UUID`.\nTo emulate old behavior of panicking on enthropy errors one can wrap\na call into `Must` helper similar to:\n```\nu := uuid.Must(uuid.NewV4())\n```\n\nCloses #18.",
        "before_after_code_files": [
          "codec_test.go||codec_test.go",
          "generator.go||generator.go",
          "generator_test.go||generator_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "generator.go||generator.go",
            "generator_test.go||generator_test.go"
          ],
          "candidate": [
            "generator.go||generator.go",
            "generator_test.go||generator_test.go"
          ]
        }
      },
      "candidate_diff": {
        "codec_test.go||codec_test.go": [
          "File: codec_test.go -> codec_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: }",
          "63: func (s *codecTestSuite) BenchmarkMarshalBinary(c *C) {",
          "65:  for i := 0; i < c.N; i++ {",
          "66:   u.MarshalBinary()",
          "67:  }",
          "",
          "[Removed Lines]",
          "64:  u := NewV4()",
          "",
          "[Added Lines]",
          "64:  u, err := NewV4()",
          "65:  c.Assert(err, IsNil)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209: }",
          "211: func (s *codecTestSuite) BenchmarkMarshalText(c *C) {",
          "213:  for i := 0; i < c.N; i++ {",
          "214:   u.MarshalText()",
          "215:  }",
          "",
          "[Removed Lines]",
          "212:  u := NewV4()",
          "",
          "[Added Lines]",
          "213:  u, err := NewV4()",
          "214:  c.Assert(err, IsNil)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "241: var sink string",
          "243: func (s *codecTestSuite) BenchmarkMarshalToString(c *C) {",
          "245:  for i := 0; i < c.N; i++ {",
          "246:   sink = u.String()",
          "247:  }",
          "",
          "[Removed Lines]",
          "244:  u := NewV4()",
          "",
          "[Added Lines]",
          "246:  u, err := NewV4()",
          "247:  c.Assert(err, IsNil)",
          "",
          "---------------"
        ],
        "generator.go||generator.go": [
          "File: generator.go -> generator.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  \"crypto/sha1\"",
          "28:  \"encoding/binary\"",
          "29:  \"hash\"",
          "30:  \"net\"",
          "31:  \"os\"",
          "32:  \"sync\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:  \"io\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: const epochStart = 122192928000000000",
          "40: var (",
          "46: )",
          "50:  return global.NewV1()",
          "51: }",
          "55:  return global.NewV2(domain)",
          "56: }",
          "",
          "[Removed Lines]",
          "41:  global = newDefaultGenerator()",
          "43:  epochFunc = unixTimeFunc",
          "44:  posixUID  = uint32(os.Getuid())",
          "45:  posixGID  = uint32(os.Getgid())",
          "49: func NewV1() UUID {",
          "54: func NewV2(domain byte) UUID {",
          "",
          "[Added Lines]",
          "41: type epochFunc func() time.Time",
          "44:  global = newRFC4122Generator()",
          "46:  posixUID = uint32(os.Getuid())",
          "47:  posixGID = uint32(os.Getgid())",
          "51: func NewV1() (UUID, error) {",
          "56: func NewV2(domain byte) (UUID, error) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61: }",
          "65:  return global.NewV4()",
          "66: }",
          "",
          "[Removed Lines]",
          "64: func NewV4() UUID {",
          "",
          "[Added Lines]",
          "66: func NewV4() (UUID, error) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74: type Generator interface {",
          "77:  NewV3(ns UUID, name string) UUID",
          "79:  NewV5(ns UUID, name string) UUID",
          "80: }",
          "87:  lastTime      uint64",
          "88:  clockSequence uint16",
          "89:  hardwareAddr  [6]byte",
          "90: }",
          "94: }",
          "98:  u := UUID{}",
          "102:  binary.BigEndian.PutUint32(u[0:], uint32(timeNow))",
          "103:  binary.BigEndian.PutUint16(u[4:], uint16(timeNow>>32))",
          "104:  binary.BigEndian.PutUint16(u[6:], uint16(timeNow>>48))",
          "105:  binary.BigEndian.PutUint16(u[8:], clockSeq)",
          "107:  copy(u[10:], hardwareAddr)",
          "109:  u.SetVersion(V1)",
          "110:  u.SetVariant(VariantRFC4122)",
          "113: }",
          "121:  switch domain {",
          "122:  case DomainPerson:",
          "124:  case DomainGroup:",
          "126:  }",
          "131:  u[9] = domain",
          "135:  u.SetVersion(V2)",
          "136:  u.SetVariant(VariantRFC4122)",
          "139: }",
          "143:  u := newFromHash(md5.New(), ns, name)",
          "144:  u.SetVersion(V3)",
          "145:  u.SetVariant(VariantRFC4122)",
          "",
          "[Removed Lines]",
          "75:  NewV1() UUID",
          "76:  NewV2(domain byte) UUID",
          "78:  NewV4() UUID",
          "83: type generator struct {",
          "84:  storageOnce  sync.Once",
          "85:  storageMutex sync.Mutex",
          "92: func newDefaultGenerator() Generator {",
          "93:  return &generator{}",
          "97: func (g *generator) NewV1() UUID {",
          "100:  timeNow, clockSeq, hardwareAddr := g.getStorage()",
          "112:  return u",
          "116: func (g *generator) NewV2(domain byte) UUID {",
          "117:  u := UUID{}",
          "119:  timeNow, clockSeq, hardwareAddr := g.getStorage()",
          "123:   binary.BigEndian.PutUint32(u[0:], posixUID)",
          "125:   binary.BigEndian.PutUint32(u[0:], posixGID)",
          "128:  binary.BigEndian.PutUint16(u[4:], uint16(timeNow>>32))",
          "129:  binary.BigEndian.PutUint16(u[6:], uint16(timeNow>>48))",
          "130:  binary.BigEndian.PutUint16(u[8:], clockSeq)",
          "133:  copy(u[10:], hardwareAddr)",
          "138:  return u",
          "142: func (g *generator) NewV3(ns UUID, name string) UUID {",
          "",
          "[Added Lines]",
          "77:  NewV1() (UUID, error)",
          "78:  NewV2(domain byte) (UUID, error)",
          "80:  NewV4() (UUID, error)",
          "85: type rfc4122Generator struct {",
          "86:  clockSequenceOnce sync.Once",
          "87:  hardwareAddrOnce  sync.Once",
          "88:  storageMutex      sync.Mutex",
          "90:  rand io.Reader",
          "92:  epochFunc     epochFunc",
          "98: func newRFC4122Generator() Generator {",
          "99:  return &rfc4122Generator{",
          "100:   epochFunc: time.Now,",
          "101:   rand:      rand.Reader,",
          "102:  }",
          "106: func (g *rfc4122Generator) NewV1() (UUID, error) {",
          "109:  timeNow, clockSeq, err := g.getClockSequence()",
          "110:  if err != nil {",
          "111:   return Nil, err",
          "112:  }",
          "118:  hardwareAddr, err := g.getHardwareAddr()",
          "119:  if err != nil {",
          "120:   return Nil, err",
          "121:  }",
          "127:  return u, nil",
          "131: func (g *rfc4122Generator) NewV2(domain byte) (UUID, error) {",
          "132:  u, err := NewV1()",
          "133:  if err != nil {",
          "134:   return Nil, err",
          "135:  }",
          "139:   binary.BigEndian.PutUint32(u[:], posixUID)",
          "141:   binary.BigEndian.PutUint32(u[:], posixGID)",
          "149:  return u, nil",
          "153: func (g *rfc4122Generator) NewV3(ns UUID, name string) UUID {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "148: }",
          "152:  u := UUID{}",
          "154:  u.SetVersion(V4)",
          "155:  u.SetVariant(VariantRFC4122)",
          "158: }",
          "162:  u := newFromHash(sha1.New(), ns, name)",
          "163:  u.SetVersion(V5)",
          "164:  u.SetVariant(VariantRFC4122)",
          "",
          "[Removed Lines]",
          "151: func (g *generator) NewV4() UUID {",
          "153:  g.safeRandom(u[:])",
          "157:  return u",
          "161: func (g *generator) NewV5(ns UUID, name string) UUID {",
          "",
          "[Added Lines]",
          "162: func (g *rfc4122Generator) NewV4() (UUID, error) {",
          "164:  if _, err := g.rand.Read(u[:]); err != nil {",
          "165:   return Nil, err",
          "166:  }",
          "170:  return u, nil",
          "174: func (g *rfc4122Generator) NewV5(ns UUID, name string) UUID {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "166:  return u",
          "167: }",
          "188:   }",
          "189:  }",
          "210:  g.storageMutex.Lock()",
          "211:  defer g.storageMutex.Unlock()",
          "216:  if timeNow <= g.lastTime {",
          "217:   g.clockSequence++",
          "218:  }",
          "219:  g.lastTime = timeNow",
          "222: }",
          "229: }",
          "",
          "[Removed Lines]",
          "169: func (g *generator) initStorage() {",
          "170:  g.initClockSequence()",
          "171:  g.initHardwareAddr()",
          "172: }",
          "174: func (g *generator) initClockSequence() {",
          "175:  buf := make([]byte, 2)",
          "176:  g.safeRandom(buf)",
          "177:  g.clockSequence = binary.BigEndian.Uint16(buf)",
          "178: }",
          "180: func (g *generator) initHardwareAddr() {",
          "181:  interfaces, err := net.Interfaces()",
          "182:  if err == nil {",
          "183:   for _, iface := range interfaces {",
          "184:    if len(iface.HardwareAddr) >= 6 {",
          "185:     copy(g.hardwareAddr[:], iface.HardwareAddr)",
          "186:     return",
          "187:    }",
          "193:  g.safeRandom(g.hardwareAddr[:])",
          "196:  g.hardwareAddr[0] |= 0x01",
          "197: }",
          "199: func (g *generator) safeRandom(dest []byte) {",
          "200:  if _, err := rand.Read(dest); err != nil {",
          "201:   panic(err)",
          "202:  }",
          "203: }",
          "207: func (g *generator) getStorage() (uint64, uint16, []byte) {",
          "208:  g.storageOnce.Do(g.initStorage)",
          "213:  timeNow := epochFunc()",
          "221:  return timeNow, g.clockSequence, g.hardwareAddr[:]",
          "227: func unixTimeFunc() uint64 {",
          "228:  return epochStart + uint64(time.Now().UnixNano()/100)",
          "",
          "[Added Lines]",
          "183: func (g *rfc4122Generator) getClockSequence() (uint64, uint16, error) {",
          "184:  var err error",
          "185:  g.clockSequenceOnce.Do(func() {",
          "186:   buf := make([]byte, 2)",
          "187:   if _, err = g.rand.Read(buf); err != nil {",
          "188:    return",
          "190:   g.clockSequence = binary.BigEndian.Uint16(buf)",
          "191:  })",
          "192:  if err != nil {",
          "193:   return 0, 0, err",
          "199:  timeNow := g.getEpoch()",
          "207:  return timeNow, g.clockSequence, nil",
          "208: }",
          "211: func (g *rfc4122Generator) getHardwareAddr() ([]byte, error) {",
          "212:  var err error",
          "213:  g.hardwareAddrOnce.Do(func() {",
          "214:   interfaces, err := net.Interfaces()",
          "215:   if err == nil {",
          "216:    for _, iface := range interfaces {",
          "217:     if len(iface.HardwareAddr) >= 6 {",
          "218:      copy(g.hardwareAddr[:], iface.HardwareAddr)",
          "219:      return",
          "220:     }",
          "221:    }",
          "222:   }",
          "226:   if _, err = g.rand.Read(g.hardwareAddr[:]); err != nil {",
          "227:    return",
          "228:   }",
          "230:   g.hardwareAddr[0] |= 0x01",
          "231:  })",
          "232:  if err != nil {",
          "233:   return []byte{}, err",
          "234:  }",
          "235:  return g.hardwareAddr[:], nil",
          "240: func (g *rfc4122Generator) getEpoch() uint64 {",
          "241:  return epochStart + uint64(g.epochFunc().UnixNano()/100)",
          "",
          "---------------"
        ],
        "generator_test.go||generator_test.go": [
          "File: generator_test.go -> generator_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package uuid",
          "24: import (",
          "25:  . \"gopkg.in/check.v1\"",
          "26: )",
          "28: type genTestSuite struct{}",
          "30: var _ = Suite(&genTestSuite{})",
          "32: func (s *genTestSuite) TestNewV1(c *C) {",
          "39:  c.Assert(u1, Not(Equals), u2)",
          "49: }",
          "51: func (s *genTestSuite) BenchmarkNewV1(c *C) {",
          "",
          "[Removed Lines]",
          "33:  u := NewV1()",
          "34:  c.Assert(u.Version(), Equals, V1)",
          "35:  c.Assert(u.Variant(), Equals, VariantRFC4122)",
          "37:  u1 := NewV1()",
          "38:  u2 := NewV1()",
          "41:  oldFunc := epochFunc",
          "42:  epochFunc = func() uint64 { return 0 }",
          "44:  u3 := NewV1()",
          "45:  u4 := NewV1()",
          "46:  c.Assert(u3, Not(Equals), u4)",
          "48:  epochFunc = oldFunc",
          "",
          "[Added Lines]",
          "25:  \"crypto/rand\"",
          "26:  \"fmt\"",
          "27:  \"time\"",
          "32: type faultyReader struct{}",
          "34: func (f *faultyReader) Read(dest []byte) (int, error) {",
          "35:  return 0, fmt.Errorf(\"io: reader is faulty\")",
          "36: }",
          "43:  u1, err := NewV1()",
          "44:  c.Assert(err, IsNil)",
          "45:  c.Assert(u1.Version(), Equals, V1)",
          "46:  c.Assert(u1.Variant(), Equals, VariantRFC4122)",
          "48:  u2, err := NewV1()",
          "49:  c.Assert(err, IsNil)",
          "51: }",
          "53: func (s *genTestSuite) TestNewV1EpochStale(c *C) {",
          "54:  g := &rfc4122Generator{",
          "55:   epochFunc: func() time.Time {",
          "56:    return time.Unix(0, 0)",
          "57:   },",
          "58:   rand: rand.Reader,",
          "59:  }",
          "60:  u1, err := g.NewV1()",
          "61:  c.Assert(err, IsNil)",
          "62:  u2, err := g.NewV1()",
          "63:  c.Assert(err, IsNil)",
          "64:  c.Assert(u1, Not(Equals), u2)",
          "65: }",
          "67: func (s *genTestSuite) TestNewV1FaultyRand(c *C) {",
          "68:  g := &rfc4122Generator{",
          "69:   epochFunc: time.Now,",
          "70:   rand:      &faultyReader{},",
          "71:  }",
          "72:  u1, err := g.NewV1()",
          "73:  c.Assert(err, NotNil)",
          "74:  c.Assert(u1, Equals, Nil)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: }",
          "57: func (s *genTestSuite) TestNewV2(c *C) {",
          "59:  c.Assert(u1.Version(), Equals, V2)",
          "60:  c.Assert(u1.Variant(), Equals, VariantRFC4122)",
          "63:  c.Assert(u2.Version(), Equals, V2)",
          "64:  c.Assert(u2.Variant(), Equals, VariantRFC4122)",
          "65: }",
          "67: func (s *genTestSuite) BenchmarkNewV2(c *C) {",
          "",
          "[Removed Lines]",
          "58:  u1 := NewV2(DomainPerson)",
          "62:  u2 := NewV2(DomainGroup)",
          "",
          "[Added Lines]",
          "84:  u1, err := NewV2(DomainPerson)",
          "85:  c.Assert(err, IsNil)",
          "89:  u2, err := NewV2(DomainGroup)",
          "90:  c.Assert(err, IsNil)",
          "94:  u3, err := NewV2(DomainOrg)",
          "95:  c.Assert(err, IsNil)",
          "96:  c.Assert(u3.Version(), Equals, V2)",
          "97:  c.Assert(u3.Variant(), Equals, VariantRFC4122)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71: }",
          "73: func (s *genTestSuite) TestNewV3(c *C) {",
          "86:  u3 := NewV3(NamespaceDNS, \"example.com\")",
          "91: }",
          "93: func (s *genTestSuite) BenchmarkNewV3(c *C) {",
          "",
          "[Removed Lines]",
          "74:  u := NewV3(NamespaceDNS, \"www.example.com\")",
          "75:  c.Assert(u.Version(), Equals, V3)",
          "76:  c.Assert(u.Variant(), Equals, VariantRFC4122)",
          "77:  c.Assert(u.String(), Equals, \"5df41881-3aed-3515-88a7-2f4a814cf09e\")",
          "79:  u = NewV3(NamespaceDNS, \"python.org\")",
          "80:  c.Assert(u.String(), Equals, \"6fa459ea-ee8a-3ca4-894e-db77e160355e\")",
          "82:  u1 := NewV3(NamespaceDNS, \"golang.org\")",
          "83:  u2 := NewV3(NamespaceDNS, \"golang.org\")",
          "84:  c.Assert(u1, Equals, u2)",
          "87:  c.Assert(u1, Not(Equals), u3)",
          "89:  u4 := NewV3(NamespaceURL, \"golang.org\")",
          "90:  c.Assert(u1, Not(Equals), u4)",
          "",
          "[Added Lines]",
          "107:  u1 := NewV3(NamespaceDNS, \"www.example.com\")",
          "108:  c.Assert(u1.Version(), Equals, V3)",
          "109:  c.Assert(u1.Variant(), Equals, VariantRFC4122)",
          "110:  c.Assert(u1.String(), Equals, \"5df41881-3aed-3515-88a7-2f4a814cf09e\")",
          "112:  u2 := NewV3(NamespaceDNS, \"example.com\")",
          "113:  c.Assert(u2, Not(Equals), u1)",
          "116:  c.Assert(u3, Equals, u2)",
          "118:  u4 := NewV3(NamespaceURL, \"example.com\")",
          "119:  c.Assert(u4, Not(Equals), u3)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "97: }",
          "99: func (s *genTestSuite) TestNewV4(c *C) {",
          "103: }",
          "105: func (s *genTestSuite) BenchmarkNewV4(c *C) {",
          "",
          "[Removed Lines]",
          "100:  u := NewV4()",
          "101:  c.Assert(u.Version(), Equals, V4)",
          "102:  c.Assert(u.Variant(), Equals, VariantRFC4122)",
          "",
          "[Added Lines]",
          "129:  u1, err := NewV4()",
          "130:  c.Assert(err, IsNil)",
          "131:  c.Assert(u1.Version(), Equals, V4)",
          "132:  c.Assert(u1.Variant(), Equals, VariantRFC4122)",
          "134:  u2, err := NewV4()",
          "135:  c.Assert(err, IsNil)",
          "136:  c.Assert(u1, Not(Equals), u2)",
          "137: }",
          "139: func (s *genTestSuite) TestNewV4FaultyRand(c *C) {",
          "140:  g := &rfc4122Generator{",
          "141:   epochFunc: time.Now,",
          "142:   rand:      &faultyReader{},",
          "143:  }",
          "144:  u1, err := g.NewV4()",
          "145:  c.Assert(err, NotNil)",
          "146:  c.Assert(u1, Equals, Nil)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "109: }",
          "111: func (s *genTestSuite) TestNewV5(c *C) {",
          "123:  u3 := NewV5(NamespaceDNS, \"example.com\")",
          "128: }",
          "130: func (s *genTestSuite) BenchmarkNewV5(c *C) {",
          "",
          "[Removed Lines]",
          "112:  u := NewV5(NamespaceDNS, \"www.example.com\")",
          "113:  c.Assert(u.Version(), Equals, V5)",
          "114:  c.Assert(u.Variant(), Equals, VariantRFC4122)",
          "116:  u = NewV5(NamespaceDNS, \"python.org\")",
          "117:  c.Assert(u.String(), Equals, \"886313e1-3b8a-5372-9b90-0c9aee199e5d\")",
          "119:  u1 := NewV5(NamespaceDNS, \"golang.org\")",
          "120:  u2 := NewV5(NamespaceDNS, \"golang.org\")",
          "121:  c.Assert(u1, Equals, u2)",
          "124:  c.Assert(u1, Not(Equals), u3)",
          "126:  u4 := NewV5(NamespaceURL, \"golang.org\")",
          "127:  c.Assert(u1, Not(Equals), u4)",
          "",
          "[Added Lines]",
          "156:  u1 := NewV5(NamespaceDNS, \"www.example.com\")",
          "157:  c.Assert(u1.Version(), Equals, V5)",
          "158:  c.Assert(u1.Variant(), Equals, VariantRFC4122)",
          "159:  c.Assert(u1.String(), Equals, \"2ed6657d-e927-568b-95e1-2665a8aea6a2\")",
          "161:  u2 := NewV5(NamespaceDNS, \"example.com\")",
          "162:  c.Assert(u2, Not(Equals), u1)",
          "165:  c.Assert(u3, Equals, u2)",
          "167:  u4 := NewV5(NamespaceURL, \"example.com\")",
          "168:  c.Assert(u4, Not(Equals), u3)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b86a6b7dda7fe731ca437b2955839c4965eb538c",
      "candidate_info": {
        "commit_hash": "b86a6b7dda7fe731ca437b2955839c4965eb538c",
        "repo": "satori/go.uuid",
        "commit_url": "https://github.com/satori/go.uuid/commit/b86a6b7dda7fe731ca437b2955839c4965eb538c",
        "files": [
          "generator.go",
          "generator_test.go",
          "uuid.go",
          "uuid_test.go"
        ],
        "message": "Moved all generation related logic into `generator.go`.\n\nAbstracted behind `Generator` interface for easy mocking in tests.",
        "before_after_code_files": [
          "generator.go||generator.go",
          "generator_test.go||generator_test.go",
          "uuid.go||uuid.go",
          "uuid_test.go||uuid_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "generator.go||generator.go",
            "generator_test.go||generator_test.go"
          ],
          "candidate": [
            "generator.go||generator.go",
            "generator_test.go||generator_test.go"
          ]
        }
      },
      "candidate_diff": {
        "generator.go||generator.go": [
          "File: generator.go -> generator.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: package uuid",
          "24: import (",
          "25:  \"crypto/md5\"",
          "26:  \"crypto/rand\"",
          "27:  \"crypto/sha1\"",
          "28:  \"encoding/binary\"",
          "29:  \"hash\"",
          "30:  \"net\"",
          "31:  \"os\"",
          "32:  \"sync\"",
          "33:  \"time\"",
          "34: )",
          "38: const epochStart = 122192928000000000",
          "40: var (",
          "41:  global = newDefaultGenerator()",
          "43:  epochFunc = unixTimeFunc",
          "44:  posixUID  = uint32(os.Getuid())",
          "45:  posixGID  = uint32(os.Getgid())",
          "46: )",
          "49: func NewV1() UUID {",
          "50:  return global.NewV1()",
          "51: }",
          "54: func NewV2(domain byte) UUID {",
          "55:  return global.NewV2(domain)",
          "56: }",
          "59: func NewV3(ns UUID, name string) UUID {",
          "60:  return global.NewV3(ns, name)",
          "61: }",
          "64: func NewV4() UUID {",
          "65:  return global.NewV4()",
          "66: }",
          "69: func NewV5(ns UUID, name string) UUID {",
          "70:  return global.NewV5(ns, name)",
          "71: }",
          "74: type Generator interface {",
          "75:  NewV1() UUID",
          "76:  NewV2(domain byte) UUID",
          "77:  NewV3(ns UUID, name string) UUID",
          "78:  NewV4() UUID",
          "79:  NewV5(ns UUID, name string) UUID",
          "80: }",
          "83: type generator struct {",
          "84:  storageOnce  sync.Once",
          "85:  storageMutex sync.Mutex",
          "87:  lastTime      uint64",
          "88:  clockSequence uint16",
          "89:  hardwareAddr  [6]byte",
          "90: }",
          "92: func newDefaultGenerator() Generator {",
          "93:  return &generator{}",
          "94: }",
          "97: func (g *generator) NewV1() UUID {",
          "98:  u := UUID{}",
          "100:  timeNow, clockSeq, hardwareAddr := g.getStorage()",
          "102:  binary.BigEndian.PutUint32(u[0:], uint32(timeNow))",
          "103:  binary.BigEndian.PutUint16(u[4:], uint16(timeNow>>32))",
          "104:  binary.BigEndian.PutUint16(u[6:], uint16(timeNow>>48))",
          "105:  binary.BigEndian.PutUint16(u[8:], clockSeq)",
          "107:  copy(u[10:], hardwareAddr)",
          "109:  u.SetVersion(1)",
          "110:  u.SetVariant()",
          "112:  return u",
          "113: }",
          "116: func (g *generator) NewV2(domain byte) UUID {",
          "117:  u := UUID{}",
          "119:  timeNow, clockSeq, hardwareAddr := g.getStorage()",
          "121:  switch domain {",
          "122:  case DomainPerson:",
          "123:   binary.BigEndian.PutUint32(u[0:], posixUID)",
          "124:  case DomainGroup:",
          "125:   binary.BigEndian.PutUint32(u[0:], posixGID)",
          "126:  }",
          "128:  binary.BigEndian.PutUint16(u[4:], uint16(timeNow>>32))",
          "129:  binary.BigEndian.PutUint16(u[6:], uint16(timeNow>>48))",
          "130:  binary.BigEndian.PutUint16(u[8:], clockSeq)",
          "131:  u[9] = domain",
          "133:  copy(u[10:], hardwareAddr)",
          "135:  u.SetVersion(2)",
          "136:  u.SetVariant()",
          "138:  return u",
          "139: }",
          "142: func (g *generator) NewV3(ns UUID, name string) UUID {",
          "143:  u := newFromHash(md5.New(), ns, name)",
          "144:  u.SetVersion(3)",
          "145:  u.SetVariant()",
          "147:  return u",
          "148: }",
          "151: func (g *generator) NewV4() UUID {",
          "152:  u := UUID{}",
          "153:  g.safeRandom(u[:])",
          "154:  u.SetVersion(4)",
          "155:  u.SetVariant()",
          "157:  return u",
          "158: }",
          "161: func (g *generator) NewV5(ns UUID, name string) UUID {",
          "162:  u := newFromHash(sha1.New(), ns, name)",
          "163:  u.SetVersion(5)",
          "164:  u.SetVariant()",
          "166:  return u",
          "167: }",
          "169: func (g *generator) initStorage() {",
          "170:  g.initClockSequence()",
          "171:  g.initHardwareAddr()",
          "172: }",
          "174: func (g *generator) initClockSequence() {",
          "175:  buf := make([]byte, 2)",
          "176:  g.safeRandom(buf)",
          "177:  g.clockSequence = binary.BigEndian.Uint16(buf)",
          "178: }",
          "180: func (g *generator) initHardwareAddr() {",
          "181:  interfaces, err := net.Interfaces()",
          "182:  if err == nil {",
          "183:   for _, iface := range interfaces {",
          "184:    if len(iface.HardwareAddr) >= 6 {",
          "185:     copy(g.hardwareAddr[:], iface.HardwareAddr)",
          "186:     return",
          "187:    }",
          "188:   }",
          "189:  }",
          "193:  g.safeRandom(g.hardwareAddr[:])",
          "196:  g.hardwareAddr[0] |= 0x01",
          "197: }",
          "199: func (g *generator) safeRandom(dest []byte) {",
          "200:  if _, err := rand.Read(dest); err != nil {",
          "201:   panic(err)",
          "202:  }",
          "203: }",
          "207: func (g *generator) getStorage() (uint64, uint16, []byte) {",
          "208:  g.storageOnce.Do(g.initStorage)",
          "210:  g.storageMutex.Lock()",
          "211:  defer g.storageMutex.Unlock()",
          "213:  timeNow := epochFunc()",
          "216:  if timeNow <= g.lastTime {",
          "217:   g.clockSequence++",
          "218:  }",
          "219:  g.lastTime = timeNow",
          "221:  return timeNow, g.clockSequence, g.hardwareAddr[:]",
          "222: }",
          "227: func unixTimeFunc() uint64 {",
          "228:  return epochStart + uint64(time.Now().UnixNano()/100)",
          "229: }",
          "232: func newFromHash(h hash.Hash, ns UUID, name string) UUID {",
          "233:  u := UUID{}",
          "234:  h.Write(ns[:])",
          "235:  h.Write([]byte(name))",
          "236:  copy(u[:], h.Sum(nil))",
          "238:  return u",
          "239: }",
          "",
          "---------------"
        ],
        "generator_test.go||generator_test.go": [
          "File: generator_test.go -> generator_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package uuid",
          "3: import \"testing\"",
          "5: func TestNewV1(t *testing.T) {",
          "6:  u := NewV1()",
          "8:  if u.Version() != 1 {",
          "9:   t.Errorf(\"UUIDv1 generated with incorrect version: %d\", u.Version())",
          "10:  }",
          "12:  if u.Variant() != VariantRFC4122 {",
          "13:   t.Errorf(\"UUIDv1 generated with incorrect variant: %d\", u.Variant())",
          "14:  }",
          "16:  u1 := NewV1()",
          "17:  u2 := NewV1()",
          "19:  if Equal(u1, u2) {",
          "20:   t.Errorf(\"UUIDv1 generated two equal UUIDs: %s and %s\", u1, u2)",
          "21:  }",
          "23:  oldFunc := epochFunc",
          "24:  epochFunc = func() uint64 { return 0 }",
          "26:  u3 := NewV1()",
          "27:  u4 := NewV1()",
          "29:  if Equal(u3, u4) {",
          "30:   t.Errorf(\"UUIDv1 generated two equal UUIDs: %s and %s\", u3, u4)",
          "31:  }",
          "33:  epochFunc = oldFunc",
          "34: }",
          "36: func TestNewV2(t *testing.T) {",
          "37:  u1 := NewV2(DomainPerson)",
          "39:  if u1.Version() != 2 {",
          "40:   t.Errorf(\"UUIDv2 generated with incorrect version: %d\", u1.Version())",
          "41:  }",
          "43:  if u1.Variant() != VariantRFC4122 {",
          "44:   t.Errorf(\"UUIDv2 generated with incorrect variant: %d\", u1.Variant())",
          "45:  }",
          "47:  u2 := NewV2(DomainGroup)",
          "49:  if u2.Version() != 2 {",
          "50:   t.Errorf(\"UUIDv2 generated with incorrect version: %d\", u2.Version())",
          "51:  }",
          "53:  if u2.Variant() != VariantRFC4122 {",
          "54:   t.Errorf(\"UUIDv2 generated with incorrect variant: %d\", u2.Variant())",
          "55:  }",
          "56: }",
          "58: func TestNewV3(t *testing.T) {",
          "59:  u := NewV3(NamespaceDNS, \"www.example.com\")",
          "61:  if u.Version() != 3 {",
          "62:   t.Errorf(\"UUIDv3 generated with incorrect version: %d\", u.Version())",
          "63:  }",
          "65:  if u.Variant() != VariantRFC4122 {",
          "66:   t.Errorf(\"UUIDv3 generated with incorrect variant: %d\", u.Variant())",
          "67:  }",
          "69:  if u.String() != \"5df41881-3aed-3515-88a7-2f4a814cf09e\" {",
          "70:   t.Errorf(\"UUIDv3 generated incorrectly: %s\", u.String())",
          "71:  }",
          "73:  u = NewV3(NamespaceDNS, \"python.org\")",
          "75:  if u.String() != \"6fa459ea-ee8a-3ca4-894e-db77e160355e\" {",
          "76:   t.Errorf(\"UUIDv3 generated incorrectly: %s\", u.String())",
          "77:  }",
          "79:  u1 := NewV3(NamespaceDNS, \"golang.org\")",
          "80:  u2 := NewV3(NamespaceDNS, \"golang.org\")",
          "81:  if !Equal(u1, u2) {",
          "82:   t.Errorf(\"UUIDv3 generated different UUIDs for same namespace and name: %s and %s\", u1, u2)",
          "83:  }",
          "85:  u3 := NewV3(NamespaceDNS, \"example.com\")",
          "86:  if Equal(u1, u3) {",
          "87:   t.Errorf(\"UUIDv3 generated same UUIDs for different names in same namespace: %s and %s\", u1, u2)",
          "88:  }",
          "90:  u4 := NewV3(NamespaceURL, \"golang.org\")",
          "91:  if Equal(u1, u4) {",
          "92:   t.Errorf(\"UUIDv3 generated same UUIDs for sane names in different namespaces: %s and %s\", u1, u4)",
          "93:  }",
          "94: }",
          "96: func TestNewV4(t *testing.T) {",
          "97:  u := NewV4()",
          "99:  if u.Version() != 4 {",
          "100:   t.Errorf(\"UUIDv4 generated with incorrect version: %d\", u.Version())",
          "101:  }",
          "103:  if u.Variant() != VariantRFC4122 {",
          "104:   t.Errorf(\"UUIDv4 generated with incorrect variant: %d\", u.Variant())",
          "105:  }",
          "106: }",
          "108: func TestNewV5(t *testing.T) {",
          "109:  u := NewV5(NamespaceDNS, \"www.example.com\")",
          "111:  if u.Version() != 5 {",
          "112:   t.Errorf(\"UUIDv5 generated with incorrect version: %d\", u.Version())",
          "113:  }",
          "115:  if u.Variant() != VariantRFC4122 {",
          "116:   t.Errorf(\"UUIDv5 generated with incorrect variant: %d\", u.Variant())",
          "117:  }",
          "119:  u = NewV5(NamespaceDNS, \"python.org\")",
          "121:  if u.String() != \"886313e1-3b8a-5372-9b90-0c9aee199e5d\" {",
          "122:   t.Errorf(\"UUIDv5 generated incorrectly: %s\", u.String())",
          "123:  }",
          "125:  u1 := NewV5(NamespaceDNS, \"golang.org\")",
          "126:  u2 := NewV5(NamespaceDNS, \"golang.org\")",
          "127:  if !Equal(u1, u2) {",
          "128:   t.Errorf(\"UUIDv5 generated different UUIDs for same namespace and name: %s and %s\", u1, u2)",
          "129:  }",
          "131:  u3 := NewV5(NamespaceDNS, \"example.com\")",
          "132:  if Equal(u1, u3) {",
          "133:   t.Errorf(\"UUIDv5 generated same UUIDs for different names in same namespace: %s and %s\", u1, u2)",
          "134:  }",
          "136:  u4 := NewV5(NamespaceURL, \"golang.org\")",
          "137:  if Equal(u1, u4) {",
          "138:   t.Errorf(\"UUIDv3 generated same UUIDs for sane names in different namespaces: %s and %s\", u1, u4)",
          "139:  }",
          "140: }",
          "",
          "---------------"
        ],
        "uuid.go||uuid.go": [
          "File: uuid.go -> uuid.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import (",
          "28:  \"bytes\"",
          "32:  \"database/sql/driver\"",
          "34:  \"encoding/hex\"",
          "35:  \"fmt\"",
          "41: )",
          "",
          "[Removed Lines]",
          "29:  \"crypto/md5\"",
          "30:  \"crypto/rand\"",
          "31:  \"crypto/sha1\"",
          "33:  \"encoding/binary\"",
          "36:  \"hash\"",
          "37:  \"net\"",
          "38:  \"os\"",
          "39:  \"sync\"",
          "40:  \"time\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:  DomainOrg",
          "59: )",
          "66: const dash byte = '-'",
          "81: var (",
          "82:  urnPrefix  = []byte(\"urn:uuid:\")",
          "83:  byteGroups = []int{8, 4, 4, 4, 12}",
          "84: )",
          "131: type UUID [Size]byte",
          "",
          "[Removed Lines]",
          "63: const epochStart = 122192928000000000",
          "69: var (",
          "70:  storageMutex  sync.Mutex",
          "71:  storageOnce   sync.Once",
          "72:  epochFunc     = unixTimeFunc",
          "73:  clockSequence uint16",
          "74:  lastTime      uint64",
          "75:  hardwareAddr  [6]byte",
          "76:  posixUID      = uint32(os.Getuid())",
          "77:  posixGID      = uint32(os.Getgid())",
          "78: )",
          "86: func initClockSequence() {",
          "87:  buf := make([]byte, 2)",
          "88:  safeRandom(buf)",
          "89:  clockSequence = binary.BigEndian.Uint16(buf)",
          "90: }",
          "92: func initHardwareAddr() {",
          "93:  interfaces, err := net.Interfaces()",
          "94:  if err == nil {",
          "95:   for _, iface := range interfaces {",
          "96:    if len(iface.HardwareAddr) >= 6 {",
          "97:     copy(hardwareAddr[:], iface.HardwareAddr)",
          "98:     return",
          "99:    }",
          "100:   }",
          "101:  }",
          "105:  safeRandom(hardwareAddr[:])",
          "108:  hardwareAddr[0] |= 0x01",
          "109: }",
          "111: func initStorage() {",
          "112:  initClockSequence()",
          "113:  initHardwareAddr()",
          "114: }",
          "116: func safeRandom(dest []byte) {",
          "117:  if _, err := rand.Read(dest); err != nil {",
          "118:   panic(err)",
          "119:  }",
          "120: }",
          "125: func unixTimeFunc() uint64 {",
          "126:  return epochStart + uint64(time.Now().UnixNano()/100)",
          "127: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "427:  return uuid",
          "428: }",
          "",
          "[Removed Lines]",
          "432: func getStorage() (uint64, uint16, []byte) {",
          "433:  storageOnce.Do(initStorage)",
          "435:  storageMutex.Lock()",
          "436:  defer storageMutex.Unlock()",
          "438:  timeNow := epochFunc()",
          "441:  if timeNow <= lastTime {",
          "442:   clockSequence++",
          "443:  }",
          "444:  lastTime = timeNow",
          "446:  return timeNow, clockSequence, hardwareAddr[:]",
          "447: }",
          "450: func NewV1() UUID {",
          "451:  u := UUID{}",
          "453:  timeNow, clockSeq, hardwareAddr := getStorage()",
          "455:  binary.BigEndian.PutUint32(u[0:], uint32(timeNow))",
          "456:  binary.BigEndian.PutUint16(u[4:], uint16(timeNow>>32))",
          "457:  binary.BigEndian.PutUint16(u[6:], uint16(timeNow>>48))",
          "458:  binary.BigEndian.PutUint16(u[8:], clockSeq)",
          "460:  copy(u[10:], hardwareAddr)",
          "462:  u.SetVersion(1)",
          "463:  u.SetVariant()",
          "465:  return u",
          "466: }",
          "469: func NewV2(domain byte) UUID {",
          "470:  u := UUID{}",
          "472:  timeNow, clockSeq, hardwareAddr := getStorage()",
          "474:  switch domain {",
          "475:  case DomainPerson:",
          "476:   binary.BigEndian.PutUint32(u[0:], posixUID)",
          "477:  case DomainGroup:",
          "478:   binary.BigEndian.PutUint32(u[0:], posixGID)",
          "479:  }",
          "481:  binary.BigEndian.PutUint16(u[4:], uint16(timeNow>>32))",
          "482:  binary.BigEndian.PutUint16(u[6:], uint16(timeNow>>48))",
          "483:  binary.BigEndian.PutUint16(u[8:], clockSeq)",
          "484:  u[9] = domain",
          "486:  copy(u[10:], hardwareAddr)",
          "488:  u.SetVersion(2)",
          "489:  u.SetVariant()",
          "491:  return u",
          "492: }",
          "495: func NewV3(ns UUID, name string) UUID {",
          "496:  u := newFromHash(md5.New(), ns, name)",
          "497:  u.SetVersion(3)",
          "498:  u.SetVariant()",
          "500:  return u",
          "501: }",
          "504: func NewV4() UUID {",
          "505:  u := UUID{}",
          "506:  safeRandom(u[:])",
          "507:  u.SetVersion(4)",
          "508:  u.SetVariant()",
          "510:  return u",
          "511: }",
          "514: func NewV5(ns UUID, name string) UUID {",
          "515:  u := newFromHash(sha1.New(), ns, name)",
          "516:  u.SetVersion(5)",
          "517:  u.SetVariant()",
          "519:  return u",
          "520: }",
          "523: func newFromHash(h hash.Hash, ns UUID, name string) UUID {",
          "524:  u := UUID{}",
          "525:  h.Write(ns[:])",
          "526:  h.Write([]byte(name))",
          "527:  copy(u[:], h.Sum(nil))",
          "529:  return u",
          "530: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "uuid_test.go||uuid_test.go": [
          "File: uuid_test.go -> uuid_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "496:   t.Errorf(\"NullUUID value should be equal to Nil: %v\", u)",
          "497:  }",
          "498: }",
          "",
          "[Removed Lines]",
          "500: func TestNewV1(t *testing.T) {",
          "501:  u := NewV1()",
          "503:  if u.Version() != 1 {",
          "504:   t.Errorf(\"UUIDv1 generated with incorrect version: %d\", u.Version())",
          "505:  }",
          "507:  if u.Variant() != VariantRFC4122 {",
          "508:   t.Errorf(\"UUIDv1 generated with incorrect variant: %d\", u.Variant())",
          "509:  }",
          "511:  u1 := NewV1()",
          "512:  u2 := NewV1()",
          "514:  if Equal(u1, u2) {",
          "515:   t.Errorf(\"UUIDv1 generated two equal UUIDs: %s and %s\", u1, u2)",
          "516:  }",
          "518:  oldFunc := epochFunc",
          "519:  epochFunc = func() uint64 { return 0 }",
          "521:  u3 := NewV1()",
          "522:  u4 := NewV1()",
          "524:  if Equal(u3, u4) {",
          "525:   t.Errorf(\"UUIDv1 generated two equal UUIDs: %s and %s\", u3, u4)",
          "526:  }",
          "528:  epochFunc = oldFunc",
          "529: }",
          "531: func TestNewV2(t *testing.T) {",
          "532:  u1 := NewV2(DomainPerson)",
          "534:  if u1.Version() != 2 {",
          "535:   t.Errorf(\"UUIDv2 generated with incorrect version: %d\", u1.Version())",
          "536:  }",
          "538:  if u1.Variant() != VariantRFC4122 {",
          "539:   t.Errorf(\"UUIDv2 generated with incorrect variant: %d\", u1.Variant())",
          "540:  }",
          "542:  u2 := NewV2(DomainGroup)",
          "544:  if u2.Version() != 2 {",
          "545:   t.Errorf(\"UUIDv2 generated with incorrect version: %d\", u2.Version())",
          "546:  }",
          "548:  if u2.Variant() != VariantRFC4122 {",
          "549:   t.Errorf(\"UUIDv2 generated with incorrect variant: %d\", u2.Variant())",
          "550:  }",
          "551: }",
          "553: func TestNewV3(t *testing.T) {",
          "554:  u := NewV3(NamespaceDNS, \"www.example.com\")",
          "556:  if u.Version() != 3 {",
          "557:   t.Errorf(\"UUIDv3 generated with incorrect version: %d\", u.Version())",
          "558:  }",
          "560:  if u.Variant() != VariantRFC4122 {",
          "561:   t.Errorf(\"UUIDv3 generated with incorrect variant: %d\", u.Variant())",
          "562:  }",
          "564:  if u.String() != \"5df41881-3aed-3515-88a7-2f4a814cf09e\" {",
          "565:   t.Errorf(\"UUIDv3 generated incorrectly: %s\", u.String())",
          "566:  }",
          "568:  u = NewV3(NamespaceDNS, \"python.org\")",
          "570:  if u.String() != \"6fa459ea-ee8a-3ca4-894e-db77e160355e\" {",
          "571:   t.Errorf(\"UUIDv3 generated incorrectly: %s\", u.String())",
          "572:  }",
          "574:  u1 := NewV3(NamespaceDNS, \"golang.org\")",
          "575:  u2 := NewV3(NamespaceDNS, \"golang.org\")",
          "576:  if !Equal(u1, u2) {",
          "577:   t.Errorf(\"UUIDv3 generated different UUIDs for same namespace and name: %s and %s\", u1, u2)",
          "578:  }",
          "580:  u3 := NewV3(NamespaceDNS, \"example.com\")",
          "581:  if Equal(u1, u3) {",
          "582:   t.Errorf(\"UUIDv3 generated same UUIDs for different names in same namespace: %s and %s\", u1, u2)",
          "583:  }",
          "585:  u4 := NewV3(NamespaceURL, \"golang.org\")",
          "586:  if Equal(u1, u4) {",
          "587:   t.Errorf(\"UUIDv3 generated same UUIDs for sane names in different namespaces: %s and %s\", u1, u4)",
          "588:  }",
          "589: }",
          "591: func TestNewV4(t *testing.T) {",
          "592:  u := NewV4()",
          "594:  if u.Version() != 4 {",
          "595:   t.Errorf(\"UUIDv4 generated with incorrect version: %d\", u.Version())",
          "596:  }",
          "598:  if u.Variant() != VariantRFC4122 {",
          "599:   t.Errorf(\"UUIDv4 generated with incorrect variant: %d\", u.Variant())",
          "600:  }",
          "601: }",
          "603: func TestNewV5(t *testing.T) {",
          "604:  u := NewV5(NamespaceDNS, \"www.example.com\")",
          "606:  if u.Version() != 5 {",
          "607:   t.Errorf(\"UUIDv5 generated with incorrect version: %d\", u.Version())",
          "608:  }",
          "610:  if u.Variant() != VariantRFC4122 {",
          "611:   t.Errorf(\"UUIDv5 generated with incorrect variant: %d\", u.Variant())",
          "612:  }",
          "614:  u = NewV5(NamespaceDNS, \"python.org\")",
          "616:  if u.String() != \"886313e1-3b8a-5372-9b90-0c9aee199e5d\" {",
          "617:   t.Errorf(\"UUIDv5 generated incorrectly: %s\", u.String())",
          "618:  }",
          "620:  u1 := NewV5(NamespaceDNS, \"golang.org\")",
          "621:  u2 := NewV5(NamespaceDNS, \"golang.org\")",
          "622:  if !Equal(u1, u2) {",
          "623:   t.Errorf(\"UUIDv5 generated different UUIDs for same namespace and name: %s and %s\", u1, u2)",
          "624:  }",
          "626:  u3 := NewV5(NamespaceDNS, \"example.com\")",
          "627:  if Equal(u1, u3) {",
          "628:   t.Errorf(\"UUIDv5 generated same UUIDs for different names in same namespace: %s and %s\", u1, u2)",
          "629:  }",
          "631:  u4 := NewV5(NamespaceURL, \"golang.org\")",
          "632:  if Equal(u1, u4) {",
          "633:   t.Errorf(\"UUIDv3 generated same UUIDs for sane names in different namespaces: %s and %s\", u1, u4)",
          "634:  }",
          "635: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}