{
  "cve_id": "CVE-2023-33264",
  "cve_desc": "In Hazelcast through 5.0.4, 5.1 through 5.1.6, and 5.2 through 5.2.3, configuration routines don't mask passwords in the member configuration properly. This allows Hazelcast Management Center users to view some of the secrets.",
  "repo": "hazelcast/hazelcast",
  "patch_hash": "74eed86c2b2b727148c442e98a01d0ca6941a49e",
  "patch_info": {
    "commit_hash": "74eed86c2b2b727148c442e98a01d0ca6941a49e",
    "repo": "hazelcast/hazelcast",
    "commit_url": "https://github.com/hazelcast/hazelcast/commit/74eed86c2b2b727148c442e98a01d0ca6941a49e",
    "files": [
      "hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java",
      "hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java"
    ],
    "message": "Extend set of masked fields in ConfigXmlGenerator [HZ-2289] (#24266)",
    "before_after_code_files": [
      "hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java||hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java",
      "hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java||hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java"
    ]
  },
  "patch_diff": {
    "hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java||hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java": [
      "File: hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java -> hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "208:     }",
      "210:     private String getOrMaskValue(String value) {",
      "211:         return maskSensitiveFields ? MASK_FOR_SENSITIVE_DATA : value;",
      "212:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "211:         if (value == null) {",
      "212:             return null;",
      "213:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "322:                 .close();",
      "323:     }",
      "326:         if (c == null) {",
      "327:             return;",
      "328:         }",
      "",
      "[Removed Lines]",
      "325:     private static void ldapAuthenticationGenerator(XmlGenerator gen, LdapAuthenticationConfig c) {",
      "",
      "[Added Lines]",
      "328:     private void ldapAuthenticationGenerator(XmlGenerator gen, LdapAuthenticationConfig c) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "339:                 .nodeIfContents(\"role-search-scope\", c.getRoleSearchScope())",
      "340:                 .nodeIfContents(\"user-name-attribute\", c.getUserNameAttribute())",
      "341:                 .nodeIfContents(\"system-user-dn\", c.getSystemUserDn())",
      "343:                 .nodeIfContents(\"system-authentication\", c.getSystemAuthentication())",
      "344:                 .nodeIfContents(\"security-realm\", c.getSecurityRealm())",
      "345:                 .nodeIfContents(\"password-attribute\", c.getPasswordAttribute())",
      "",
      "[Removed Lines]",
      "342:                 .nodeIfContents(\"system-user-password\", c.getSystemUserPassword())",
      "",
      "[Added Lines]",
      "345:                 .nodeIfContents(\"system-user-password\", getOrMaskValue(c.getSystemUserPassword()))",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "350:                 .close();",
      "351:     }",
      "354:         if (c == null) {",
      "355:             return;",
      "356:         }",
      "",
      "[Removed Lines]",
      "353:     private static void kerberosAuthenticationGenerator(XmlGenerator gen, KerberosAuthenticationConfig c) {",
      "",
      "[Added Lines]",
      "356:     private void kerberosAuthenticationGenerator(XmlGenerator gen, KerberosAuthenticationConfig c) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "365:         kerberosGen.close();",
      "366:     }",
      "369:         if (c == null) {",
      "370:             return;",
      "371:         }",
      "372:         XmlGenerator simpleGen = gen.open(\"simple\");",
      "373:         addClusterLoginElements(simpleGen, c).nodeIfContents(\"role-separator\", c.getRoleSeparator());",
      "374:         for (String username : c.getUsernames()) {",
      "376:             for (String role : c.getRoles(username)) {",
      "377:                 simpleGen.node(\"role\", role);",
      "378:             }",
      "",
      "[Removed Lines]",
      "368:     private static void simpleAuthenticationGenerator(XmlGenerator gen, SimpleAuthenticationConfig c) {",
      "375:             simpleGen.open(\"user\", \"username\", username, \"password\", c.getPassword(username));",
      "",
      "[Added Lines]",
      "371:     private void simpleAuthenticationGenerator(XmlGenerator gen, SimpleAuthenticationConfig c) {",
      "378:             simpleGen.open(\"user\", \"username\", username, \"password\", getOrMaskValue(c.getPassword(username)));",
      "",
      "---------------"
    ],
    "hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java||hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java": [
      "File: hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java -> hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "108:         cfg.getNetworkConfig().setSymmetricEncryptionConfig(symmetricEncryptionConfig);",
      "109:         cfg.setLicenseKey(\"HazelcastLicenseKey\");",
      "111:         Config newConfigViaXMLGenerator = getNewConfigViaXMLGenerator(cfg);",
      "112:         SSLConfig generatedSSLConfig = newConfigViaXMLGenerator.getNetworkConfig().getSSLConfig();",
      "114:         assertEquals(MASK_FOR_SENSITIVE_DATA, generatedSSLConfig.getProperty(\"keyStorePassword\"));",
      "115:         assertEquals(MASK_FOR_SENSITIVE_DATA, generatedSSLConfig.getProperty(\"trustStorePassword\"));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "111:         cfg.getSecurityConfig().addRealmConfig(\"simple\",",
      "112:                 new RealmConfig().setSimpleAuthenticationConfig(new SimpleAuthenticationConfig().addUser(\"test\", \"pass\"))",
      "113:                         .setUsernamePasswordIdentityConfig(\"myidentity\", \"mypasswd\"))",
      "114:                 .addRealmConfig(\"ldap\", new RealmConfig().setLdapAuthenticationConfig(",
      "115:                         new LdapAuthenticationConfig().setSystemUserDn(\"cn=test\").setSystemUserPassword(\"ldappass\")));",
      "119:         SecurityConfig secCfg = newConfigViaXMLGenerator.getSecurityConfig();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "119:         assertEquals(MASK_FOR_SENSITIVE_DATA, secPassword);",
      "120:         assertEquals(MASK_FOR_SENSITIVE_DATA, theSalt);",
      "121:         assertEquals(MASK_FOR_SENSITIVE_DATA, newConfigViaXMLGenerator.getLicenseKey());",
      "122:     }",
      "124:     @Test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "129:         RealmConfig simpleRealm = secCfg.getRealmConfig(\"simple\");",
      "130:         assertEquals(MASK_FOR_SENSITIVE_DATA, simpleRealm.getSimpleAuthenticationConfig().getPassword(\"test\"));",
      "131:         assertEquals(MASK_FOR_SENSITIVE_DATA, simpleRealm.getUsernamePasswordIdentityConfig().getPassword());",
      "132:         assertEquals(MASK_FOR_SENSITIVE_DATA,",
      "133:                 secCfg.getRealmConfig(\"ldap\").getLdapAuthenticationConfig().getSystemUserPassword());",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "657:         SecurityConfig expectedConfig = new SecurityConfig().setClientRealmConfig(\"ldapRealm\", realmConfig);",
      "658:         cfg.setSecurityConfig(expectedConfig);",
      "661:         assertEquals(expectedConfig, actualConfig);",
      "662:     }",
      "",
      "[Removed Lines]",
      "660:         SecurityConfig actualConfig = getNewConfigViaXMLGenerator(cfg).getSecurityConfig();",
      "",
      "[Added Lines]",
      "672:         SecurityConfig actualConfig = getNewConfigViaXMLGenerator(cfg, false).getSecurityConfig();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "715:         );",
      "716:         SecurityConfig expectedConfig = new SecurityConfig().setMemberRealmConfig(\"simpleRealm\", realmConfig);",
      "717:         cfg.setSecurityConfig(expectedConfig);",
      "719:         assertEquals(expectedConfig, actualConfig);",
      "720:     }",
      "",
      "[Removed Lines]",
      "718:         SecurityConfig actualConfig = getNewConfigViaXMLGenerator(cfg).getSecurityConfig();",
      "",
      "[Added Lines]",
      "730:         SecurityConfig actualConfig = getNewConfigViaXMLGenerator(cfg, false).getSecurityConfig();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "40d054fbdcbb7fda37afb7a19439d2820e723ec5",
      "candidate_info": {
        "commit_hash": "40d054fbdcbb7fda37afb7a19439d2820e723ec5",
        "repo": "hazelcast/hazelcast",
        "commit_url": "https://github.com/hazelcast/hazelcast/commit/40d054fbdcbb7fda37afb7a19439d2820e723ec5",
        "files": [
          "hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java",
          "hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java"
        ],
        "message": "Extend set of masked fields in ConfigXmlGenerator [HZ-2289] (5.1.z) (#24308)",
        "before_after_code_files": [
          "hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java||hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java",
          "hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java||hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java||hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java",
            "hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java||hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java"
          ],
          "candidate": [
            "hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java||hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java",
            "hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java||hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java"
          ]
        }
      },
      "candidate_diff": {
        "hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java||hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java": [
          "File: hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java -> hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:     }",
          "207:     private String getOrMaskValue(String value) {",
          "208:         return maskSensitiveFields ? MASK_FOR_SENSITIVE_DATA : value;",
          "209:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208:         if (value == null) {",
          "209:             return null;",
          "210:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "319:                 .close();",
          "320:     }",
          "323:         if (c == null) {",
          "324:             return;",
          "325:         }",
          "",
          "[Removed Lines]",
          "322:     private static void ldapAuthenticationGenerator(XmlGenerator gen, LdapAuthenticationConfig c) {",
          "",
          "[Added Lines]",
          "325:     private void ldapAuthenticationGenerator(XmlGenerator gen, LdapAuthenticationConfig c) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "336:                 .nodeIfContents(\"role-search-scope\", c.getRoleSearchScope())",
          "337:                 .nodeIfContents(\"user-name-attribute\", c.getUserNameAttribute())",
          "338:                 .nodeIfContents(\"system-user-dn\", c.getSystemUserDn())",
          "340:                 .nodeIfContents(\"system-authentication\", c.getSystemAuthentication())",
          "341:                 .nodeIfContents(\"security-realm\", c.getSecurityRealm())",
          "342:                 .nodeIfContents(\"password-attribute\", c.getPasswordAttribute())",
          "",
          "[Removed Lines]",
          "339:                 .nodeIfContents(\"system-user-password\", c.getSystemUserPassword())",
          "",
          "[Added Lines]",
          "342:                 .nodeIfContents(\"system-user-password\", getOrMaskValue(c.getSystemUserPassword()))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "347:                 .close();",
          "348:     }",
          "351:         if (c == null) {",
          "352:             return;",
          "353:         }",
          "",
          "[Removed Lines]",
          "350:     private static void kerberosAuthenticationGenerator(XmlGenerator gen, KerberosAuthenticationConfig c) {",
          "",
          "[Added Lines]",
          "353:     private void kerberosAuthenticationGenerator(XmlGenerator gen, KerberosAuthenticationConfig c) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "362:         kerberosGen.close();",
          "363:     }",
          "366:         if (c == null) {",
          "367:             return;",
          "368:         }",
          "369:         XmlGenerator simpleGen = gen.open(\"simple\");",
          "370:         addClusterLoginElements(simpleGen, c).nodeIfContents(\"role-separator\", c.getRoleSeparator());",
          "371:         for (String username : c.getUsernames()) {",
          "373:             for (String role : c.getRoles(username)) {",
          "374:                 simpleGen.node(\"role\", role);",
          "375:             }",
          "",
          "[Removed Lines]",
          "365:     private static void simpleAuthenticationGenerator(XmlGenerator gen, SimpleAuthenticationConfig c) {",
          "372:             simpleGen.open(\"user\", \"username\", username, \"password\", c.getPassword(username));",
          "",
          "[Added Lines]",
          "368:     private void simpleAuthenticationGenerator(XmlGenerator gen, SimpleAuthenticationConfig c) {",
          "375:             simpleGen.open(\"user\", \"username\", username, \"password\", getOrMaskValue(c.getPassword(username)));",
          "",
          "---------------"
        ],
        "hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java||hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java": [
          "File: hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java -> hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:         cfg.getNetworkConfig().setSymmetricEncryptionConfig(symmetricEncryptionConfig);",
          "110:         cfg.setLicenseKey(\"HazelcastLicenseKey\");",
          "112:         Config newConfigViaXMLGenerator = getNewConfigViaXMLGenerator(cfg);",
          "113:         SSLConfig generatedSSLConfig = newConfigViaXMLGenerator.getNetworkConfig().getSSLConfig();",
          "118:         String secPassword = newConfigViaXMLGenerator.getNetworkConfig().getSymmetricEncryptionConfig().getPassword();",
          "119:         String theSalt = newConfigViaXMLGenerator.getNetworkConfig().getSymmetricEncryptionConfig().getSalt();",
          "123:     }",
          "125:     @Test",
          "",
          "[Removed Lines]",
          "115:         assertEquals(generatedSSLConfig.getProperty(\"keyStorePassword\"), MASK_FOR_SENSITIVE_DATA);",
          "116:         assertEquals(generatedSSLConfig.getProperty(\"trustStorePassword\"), MASK_FOR_SENSITIVE_DATA);",
          "120:         assertEquals(secPassword, MASK_FOR_SENSITIVE_DATA);",
          "121:         assertEquals(theSalt, MASK_FOR_SENSITIVE_DATA);",
          "122:         assertEquals(newConfigViaXMLGenerator.getLicenseKey(), MASK_FOR_SENSITIVE_DATA);",
          "",
          "[Added Lines]",
          "112:         cfg.getSecurityConfig().addRealmConfig(\"simple\",",
          "113:                 new RealmConfig().setSimpleAuthenticationConfig(new SimpleAuthenticationConfig().addUser(\"test\", \"pass\"))",
          "114:                         .setUsernamePasswordIdentityConfig(\"myidentity\", \"mypasswd\"))",
          "115:                 .addRealmConfig(\"ldap\", new RealmConfig().setLdapAuthenticationConfig(",
          "116:                         new LdapAuthenticationConfig().setSystemUserDn(\"cn=test\").setSystemUserPassword(\"ldappass\")));",
          "120:         SecurityConfig secCfg = newConfigViaXMLGenerator.getSecurityConfig();",
          "122:         assertEquals(MASK_FOR_SENSITIVE_DATA, generatedSSLConfig.getProperty(\"keyStorePassword\"));",
          "123:         assertEquals(MASK_FOR_SENSITIVE_DATA, generatedSSLConfig.getProperty(\"trustStorePassword\"));",
          "127:         assertEquals(MASK_FOR_SENSITIVE_DATA, secPassword);",
          "128:         assertEquals(MASK_FOR_SENSITIVE_DATA, theSalt);",
          "129:         assertEquals(MASK_FOR_SENSITIVE_DATA, newConfigViaXMLGenerator.getLicenseKey());",
          "130:         RealmConfig simpleRealm = secCfg.getRealmConfig(\"simple\");",
          "131:         assertEquals(MASK_FOR_SENSITIVE_DATA, simpleRealm.getSimpleAuthenticationConfig().getPassword(\"test\"));",
          "132:         assertEquals(MASK_FOR_SENSITIVE_DATA, simpleRealm.getUsernamePasswordIdentityConfig().getPassword());",
          "133:         assertEquals(MASK_FOR_SENSITIVE_DATA,",
          "134:                 secCfg.getRealmConfig(\"ldap\").getLdapAuthenticationConfig().getSystemUserPassword());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:         Config newConfigViaXMLGenerator = getNewConfigViaXMLGenerator(cfg, false);",
          "147:         SSLConfig generatedSSLConfig = newConfigViaXMLGenerator.getNetworkConfig().getSSLConfig();",
          "152:         String secPassword = newConfigViaXMLGenerator.getNetworkConfig().getSymmetricEncryptionConfig().getPassword();",
          "153:         String theSalt = newConfigViaXMLGenerator.getNetworkConfig().getSymmetricEncryptionConfig().getSalt();",
          "157:         SecurityConfig securityConfig = newConfigViaXMLGenerator.getSecurityConfig();",
          "158:         RealmConfig realmConfig = securityConfig.getRealmConfig(securityConfig.getMemberRealm());",
          "160:     }",
          "162:     private MemberAddressProviderConfig getMemberAddressProviderConfig(Config cfg) {",
          "",
          "[Removed Lines]",
          "149:         assertEquals(generatedSSLConfig.getProperty(\"keyStorePassword\"), password);",
          "150:         assertEquals(generatedSSLConfig.getProperty(\"trustStorePassword\"), password);",
          "154:         assertEquals(secPassword, password);",
          "155:         assertEquals(theSalt, salt);",
          "156:         assertEquals(newConfigViaXMLGenerator.getLicenseKey(), licenseKey);",
          "159:         assertEquals(realmConfig.getUsernamePasswordIdentityConfig().getPassword(), password);",
          "",
          "[Added Lines]",
          "161:         assertEquals(password, generatedSSLConfig.getProperty(\"keyStorePassword\"));",
          "162:         assertEquals(password, generatedSSLConfig.getProperty(\"trustStorePassword\"));",
          "166:         assertEquals(password, secPassword);",
          "167:         assertEquals(salt, theSalt);",
          "168:         assertEquals(licenseKey, newConfigViaXMLGenerator.getLicenseKey());",
          "171:         assertEquals(password, realmConfig.getUsernamePasswordIdentityConfig().getPassword());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "647:         SecurityConfig expectedConfig = new SecurityConfig().setClientRealmConfig(\"ldapRealm\", realmConfig);",
          "648:         cfg.setSecurityConfig(expectedConfig);",
          "651:         assertEquals(expectedConfig, actualConfig);",
          "652:     }",
          "",
          "[Removed Lines]",
          "650:         SecurityConfig actualConfig = getNewConfigViaXMLGenerator(cfg).getSecurityConfig();",
          "",
          "[Added Lines]",
          "662:         SecurityConfig actualConfig = getNewConfigViaXMLGenerator(cfg, false).getSecurityConfig();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "705:         );",
          "706:         SecurityConfig expectedConfig = new SecurityConfig().setMemberRealmConfig(\"simpleRealm\", realmConfig);",
          "707:         cfg.setSecurityConfig(expectedConfig);",
          "709:         assertEquals(expectedConfig, actualConfig);",
          "710:     }",
          "",
          "[Removed Lines]",
          "708:         SecurityConfig actualConfig = getNewConfigViaXMLGenerator(cfg).getSecurityConfig();",
          "",
          "[Added Lines]",
          "720:         SecurityConfig actualConfig = getNewConfigViaXMLGenerator(cfg, false).getSecurityConfig();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "99039141608e2e2ad3602cd202c0dc5003c6c6bd",
      "candidate_info": {
        "commit_hash": "99039141608e2e2ad3602cd202c0dc5003c6c6bd",
        "repo": "hazelcast/hazelcast",
        "commit_url": "https://github.com/hazelcast/hazelcast/commit/99039141608e2e2ad3602cd202c0dc5003c6c6bd",
        "files": [
          "hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java",
          "hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java"
        ],
        "message": "Extend set of masked fields in ConfigXmlGenerator [HZ-2289] (5.2.z) (#24309)",
        "before_after_code_files": [
          "hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java||hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java",
          "hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java||hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java||hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java",
            "hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java||hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java"
          ],
          "candidate": [
            "hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java||hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java",
            "hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java||hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java"
          ]
        }
      },
      "candidate_diff": {
        "hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java||hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java": [
          "File: hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java -> hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:     }",
          "207:     private String getOrMaskValue(String value) {",
          "208:         return maskSensitiveFields ? MASK_FOR_SENSITIVE_DATA : value;",
          "209:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208:         if (value == null) {",
          "209:             return null;",
          "210:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "319:                 .close();",
          "320:     }",
          "323:         if (c == null) {",
          "324:             return;",
          "325:         }",
          "",
          "[Removed Lines]",
          "322:     private static void ldapAuthenticationGenerator(XmlGenerator gen, LdapAuthenticationConfig c) {",
          "",
          "[Added Lines]",
          "325:     private void ldapAuthenticationGenerator(XmlGenerator gen, LdapAuthenticationConfig c) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "336:                 .nodeIfContents(\"role-search-scope\", c.getRoleSearchScope())",
          "337:                 .nodeIfContents(\"user-name-attribute\", c.getUserNameAttribute())",
          "338:                 .nodeIfContents(\"system-user-dn\", c.getSystemUserDn())",
          "340:                 .nodeIfContents(\"system-authentication\", c.getSystemAuthentication())",
          "341:                 .nodeIfContents(\"security-realm\", c.getSecurityRealm())",
          "342:                 .nodeIfContents(\"password-attribute\", c.getPasswordAttribute())",
          "",
          "[Removed Lines]",
          "339:                 .nodeIfContents(\"system-user-password\", c.getSystemUserPassword())",
          "",
          "[Added Lines]",
          "342:                 .nodeIfContents(\"system-user-password\", getOrMaskValue(c.getSystemUserPassword()))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "347:                 .close();",
          "348:     }",
          "351:         if (c == null) {",
          "352:             return;",
          "353:         }",
          "",
          "[Removed Lines]",
          "350:     private static void kerberosAuthenticationGenerator(XmlGenerator gen, KerberosAuthenticationConfig c) {",
          "",
          "[Added Lines]",
          "353:     private void kerberosAuthenticationGenerator(XmlGenerator gen, KerberosAuthenticationConfig c) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "362:         kerberosGen.close();",
          "363:     }",
          "366:         if (c == null) {",
          "367:             return;",
          "368:         }",
          "369:         XmlGenerator simpleGen = gen.open(\"simple\");",
          "370:         addClusterLoginElements(simpleGen, c).nodeIfContents(\"role-separator\", c.getRoleSeparator());",
          "371:         for (String username : c.getUsernames()) {",
          "373:             for (String role : c.getRoles(username)) {",
          "374:                 simpleGen.node(\"role\", role);",
          "375:             }",
          "",
          "[Removed Lines]",
          "365:     private static void simpleAuthenticationGenerator(XmlGenerator gen, SimpleAuthenticationConfig c) {",
          "372:             simpleGen.open(\"user\", \"username\", username, \"password\", c.getPassword(username));",
          "",
          "[Added Lines]",
          "368:     private void simpleAuthenticationGenerator(XmlGenerator gen, SimpleAuthenticationConfig c) {",
          "375:             simpleGen.open(\"user\", \"username\", username, \"password\", getOrMaskValue(c.getPassword(username)));",
          "",
          "---------------"
        ],
        "hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java||hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java": [
          "File: hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java -> hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:         cfg.getNetworkConfig().setSymmetricEncryptionConfig(symmetricEncryptionConfig);",
          "109:         cfg.setLicenseKey(\"HazelcastLicenseKey\");",
          "111:         Config newConfigViaXMLGenerator = getNewConfigViaXMLGenerator(cfg);",
          "112:         SSLConfig generatedSSLConfig = newConfigViaXMLGenerator.getNetworkConfig().getSSLConfig();",
          "117:         String secPassword = newConfigViaXMLGenerator.getNetworkConfig().getSymmetricEncryptionConfig().getPassword();",
          "118:         String theSalt = newConfigViaXMLGenerator.getNetworkConfig().getSymmetricEncryptionConfig().getSalt();",
          "122:     }",
          "124:     @Test",
          "",
          "[Removed Lines]",
          "114:         assertEquals(generatedSSLConfig.getProperty(\"keyStorePassword\"), MASK_FOR_SENSITIVE_DATA);",
          "115:         assertEquals(generatedSSLConfig.getProperty(\"trustStorePassword\"), MASK_FOR_SENSITIVE_DATA);",
          "119:         assertEquals(secPassword, MASK_FOR_SENSITIVE_DATA);",
          "120:         assertEquals(theSalt, MASK_FOR_SENSITIVE_DATA);",
          "121:         assertEquals(newConfigViaXMLGenerator.getLicenseKey(), MASK_FOR_SENSITIVE_DATA);",
          "",
          "[Added Lines]",
          "111:         cfg.getSecurityConfig().addRealmConfig(\"simple\",",
          "112:                 new RealmConfig().setSimpleAuthenticationConfig(new SimpleAuthenticationConfig().addUser(\"test\", \"pass\"))",
          "113:                         .setUsernamePasswordIdentityConfig(\"myidentity\", \"mypasswd\"))",
          "114:                 .addRealmConfig(\"ldap\", new RealmConfig().setLdapAuthenticationConfig(",
          "115:                         new LdapAuthenticationConfig().setSystemUserDn(\"cn=test\").setSystemUserPassword(\"ldappass\")));",
          "119:         SecurityConfig secCfg = newConfigViaXMLGenerator.getSecurityConfig();",
          "121:         assertEquals(MASK_FOR_SENSITIVE_DATA, generatedSSLConfig.getProperty(\"keyStorePassword\"));",
          "122:         assertEquals(MASK_FOR_SENSITIVE_DATA, generatedSSLConfig.getProperty(\"trustStorePassword\"));",
          "126:         assertEquals(MASK_FOR_SENSITIVE_DATA, secPassword);",
          "127:         assertEquals(MASK_FOR_SENSITIVE_DATA, theSalt);",
          "128:         assertEquals(MASK_FOR_SENSITIVE_DATA, newConfigViaXMLGenerator.getLicenseKey());",
          "129:         RealmConfig simpleRealm = secCfg.getRealmConfig(\"simple\");",
          "130:         assertEquals(MASK_FOR_SENSITIVE_DATA, simpleRealm.getSimpleAuthenticationConfig().getPassword(\"test\"));",
          "131:         assertEquals(MASK_FOR_SENSITIVE_DATA, simpleRealm.getUsernamePasswordIdentityConfig().getPassword());",
          "132:         assertEquals(MASK_FOR_SENSITIVE_DATA,",
          "133:                 secCfg.getRealmConfig(\"ldap\").getLdapAuthenticationConfig().getSystemUserPassword());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:         Config newConfigViaXMLGenerator = getNewConfigViaXMLGenerator(cfg, false);",
          "146:         SSLConfig generatedSSLConfig = newConfigViaXMLGenerator.getNetworkConfig().getSSLConfig();",
          "151:         String secPassword = newConfigViaXMLGenerator.getNetworkConfig().getSymmetricEncryptionConfig().getPassword();",
          "152:         String theSalt = newConfigViaXMLGenerator.getNetworkConfig().getSymmetricEncryptionConfig().getSalt();",
          "156:         SecurityConfig securityConfig = newConfigViaXMLGenerator.getSecurityConfig();",
          "157:         RealmConfig realmConfig = securityConfig.getRealmConfig(securityConfig.getMemberRealm());",
          "159:     }",
          "161:     private MemberAddressProviderConfig getMemberAddressProviderConfig(Config cfg) {",
          "",
          "[Removed Lines]",
          "148:         assertEquals(generatedSSLConfig.getProperty(\"keyStorePassword\"), password);",
          "149:         assertEquals(generatedSSLConfig.getProperty(\"trustStorePassword\"), password);",
          "153:         assertEquals(secPassword, password);",
          "154:         assertEquals(theSalt, salt);",
          "155:         assertEquals(newConfigViaXMLGenerator.getLicenseKey(), licenseKey);",
          "158:         assertEquals(realmConfig.getUsernamePasswordIdentityConfig().getPassword(), password);",
          "",
          "[Added Lines]",
          "160:         assertEquals(password, generatedSSLConfig.getProperty(\"keyStorePassword\"));",
          "161:         assertEquals(password, generatedSSLConfig.getProperty(\"trustStorePassword\"));",
          "165:         assertEquals(password, secPassword);",
          "166:         assertEquals(salt, theSalt);",
          "167:         assertEquals(licenseKey, newConfigViaXMLGenerator.getLicenseKey());",
          "170:         assertEquals(password, realmConfig.getUsernamePasswordIdentityConfig().getPassword());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "646:         SecurityConfig expectedConfig = new SecurityConfig().setClientRealmConfig(\"ldapRealm\", realmConfig);",
          "647:         cfg.setSecurityConfig(expectedConfig);",
          "650:         assertEquals(expectedConfig, actualConfig);",
          "651:     }",
          "",
          "[Removed Lines]",
          "649:         SecurityConfig actualConfig = getNewConfigViaXMLGenerator(cfg).getSecurityConfig();",
          "",
          "[Added Lines]",
          "661:         SecurityConfig actualConfig = getNewConfigViaXMLGenerator(cfg, false).getSecurityConfig();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "704:         );",
          "705:         SecurityConfig expectedConfig = new SecurityConfig().setMemberRealmConfig(\"simpleRealm\", realmConfig);",
          "706:         cfg.setSecurityConfig(expectedConfig);",
          "708:         assertEquals(expectedConfig, actualConfig);",
          "709:     }",
          "",
          "[Removed Lines]",
          "707:         SecurityConfig actualConfig = getNewConfigViaXMLGenerator(cfg).getSecurityConfig();",
          "",
          "[Added Lines]",
          "719:         SecurityConfig actualConfig = getNewConfigViaXMLGenerator(cfg, false).getSecurityConfig();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b762d46c7a92660d2189aee25bf7e3702b831a5",
      "candidate_info": {
        "commit_hash": "1b762d46c7a92660d2189aee25bf7e3702b831a5",
        "repo": "hazelcast/hazelcast",
        "commit_url": "https://github.com/hazelcast/hazelcast/commit/1b762d46c7a92660d2189aee25bf7e3702b831a5",
        "files": [
          "hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java",
          "hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java"
        ],
        "message": "Extend set of masked fields in ConfigXmlGenerator [HZ-2289] (5.0.z) (#24307)",
        "before_after_code_files": [
          "hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java||hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java",
          "hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java||hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java||hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java",
            "hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java||hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java"
          ],
          "candidate": [
            "hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java||hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java",
            "hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java||hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java"
          ]
        }
      },
      "candidate_diff": {
        "hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java||hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java": [
          "File: hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java -> hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:     }",
          "189:     private String getOrMaskValue(String value) {",
          "190:         return maskSensitiveFields ? MASK_FOR_SENSITIVE_DATA : value;",
          "191:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:         if (value == null) {",
          "191:             return null;",
          "192:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "340:                 .close();",
          "341:     }",
          "344:         if (c == null) {",
          "345:             return;",
          "346:         }",
          "",
          "[Removed Lines]",
          "343:     private static void ldapAuthenticationGenerator(XmlGenerator gen, LdapAuthenticationConfig c) {",
          "",
          "[Added Lines]",
          "346:     private void ldapAuthenticationGenerator(XmlGenerator gen, LdapAuthenticationConfig c) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "357:                 .nodeIfContents(\"role-search-scope\", c.getRoleSearchScope())",
          "358:                 .nodeIfContents(\"user-name-attribute\", c.getUserNameAttribute())",
          "359:                 .nodeIfContents(\"system-user-dn\", c.getSystemUserDn())",
          "361:                 .nodeIfContents(\"system-authentication\", c.getSystemAuthentication())",
          "362:                 .nodeIfContents(\"security-realm\", c.getSecurityRealm())",
          "363:                 .nodeIfContents(\"password-attribute\", c.getPasswordAttribute())",
          "",
          "[Removed Lines]",
          "360:                 .nodeIfContents(\"system-user-password\", c.getSystemUserPassword())",
          "",
          "[Added Lines]",
          "363:                 .nodeIfContents(\"system-user-password\", getOrMaskValue(c.getSystemUserPassword()))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "368:                 .close();",
          "369:     }",
          "372:         if (c == null) {",
          "373:             return;",
          "374:         }",
          "",
          "[Removed Lines]",
          "371:     private static void kerberosAuthenticationGenerator(XmlGenerator gen, KerberosAuthenticationConfig c) {",
          "",
          "[Added Lines]",
          "374:     private void kerberosAuthenticationGenerator(XmlGenerator gen, KerberosAuthenticationConfig c) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "383:         kerberosGen.close();",
          "384:     }",
          "387:         if (c == null) {",
          "388:             return;",
          "389:         }",
          "390:         XmlGenerator simpleGen = gen.open(\"simple\");",
          "391:         addClusterLoginElements(simpleGen, c).nodeIfContents(\"role-separator\", c.getRoleSeparator());",
          "392:         for (String username : c.getUsernames()) {",
          "394:             for (String role : c.getRoles(username)) {",
          "395:                 simpleGen.node(\"role\", role);",
          "396:             }",
          "",
          "[Removed Lines]",
          "386:     private static void simpleAuthenticationGenerator(XmlGenerator gen, SimpleAuthenticationConfig c) {",
          "393:             simpleGen.open(\"user\", \"username\", username, \"password\", c.getPassword(username));",
          "",
          "[Added Lines]",
          "389:     private void simpleAuthenticationGenerator(XmlGenerator gen, SimpleAuthenticationConfig c) {",
          "396:             simpleGen.open(\"user\", \"username\", username, \"password\", getOrMaskValue(c.getPassword(username)));",
          "",
          "---------------"
        ],
        "hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java||hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java": [
          "File: hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java -> hazelcast/src/test/java/com/hazelcast/config/ConfigXmlGeneratorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:         cfg.getNetworkConfig().setSymmetricEncryptionConfig(symmetricEncryptionConfig);",
          "123:         cfg.setLicenseKey(\"HazelcastLicenseKey\");",
          "125:         Config newConfigViaXMLGenerator = getNewConfigViaXMLGenerator(cfg);",
          "126:         SSLConfig generatedSSLConfig = newConfigViaXMLGenerator.getNetworkConfig().getSSLConfig();",
          "131:         String secPassword = newConfigViaXMLGenerator.getNetworkConfig().getSymmetricEncryptionConfig().getPassword();",
          "132:         String theSalt = newConfigViaXMLGenerator.getNetworkConfig().getSymmetricEncryptionConfig().getSalt();",
          "136:     }",
          "138:     @Test",
          "",
          "[Removed Lines]",
          "128:         assertEquals(generatedSSLConfig.getProperty(\"keyStorePassword\"), MASK_FOR_SENSITIVE_DATA);",
          "129:         assertEquals(generatedSSLConfig.getProperty(\"trustStorePassword\"), MASK_FOR_SENSITIVE_DATA);",
          "133:         assertEquals(secPassword, MASK_FOR_SENSITIVE_DATA);",
          "134:         assertEquals(theSalt, MASK_FOR_SENSITIVE_DATA);",
          "135:         assertEquals(newConfigViaXMLGenerator.getLicenseKey(), MASK_FOR_SENSITIVE_DATA);",
          "",
          "[Added Lines]",
          "125:         cfg.getSecurityConfig().addRealmConfig(\"simple\",",
          "126:                 new RealmConfig().setSimpleAuthenticationConfig(new SimpleAuthenticationConfig().addUser(\"test\", \"pass\"))",
          "127:                         .setUsernamePasswordIdentityConfig(\"myidentity\", \"mypasswd\"))",
          "128:                 .addRealmConfig(\"ldap\", new RealmConfig().setLdapAuthenticationConfig(",
          "129:                         new LdapAuthenticationConfig().setSystemUserDn(\"cn=test\").setSystemUserPassword(\"ldappass\")));",
          "133:         SecurityConfig secCfg = newConfigViaXMLGenerator.getSecurityConfig();",
          "135:         assertEquals(MASK_FOR_SENSITIVE_DATA, generatedSSLConfig.getProperty(\"keyStorePassword\"));",
          "136:         assertEquals(MASK_FOR_SENSITIVE_DATA, generatedSSLConfig.getProperty(\"trustStorePassword\"));",
          "140:         assertEquals(MASK_FOR_SENSITIVE_DATA, secPassword);",
          "141:         assertEquals(MASK_FOR_SENSITIVE_DATA, theSalt);",
          "142:         assertEquals(MASK_FOR_SENSITIVE_DATA, newConfigViaXMLGenerator.getLicenseKey());",
          "143:         RealmConfig simpleRealm = secCfg.getRealmConfig(\"simple\");",
          "144:         assertEquals(MASK_FOR_SENSITIVE_DATA, simpleRealm.getSimpleAuthenticationConfig().getPassword(\"test\"));",
          "145:         assertEquals(MASK_FOR_SENSITIVE_DATA, simpleRealm.getUsernamePasswordIdentityConfig().getPassword());",
          "146:         assertEquals(MASK_FOR_SENSITIVE_DATA,",
          "147:                 secCfg.getRealmConfig(\"ldap\").getLdapAuthenticationConfig().getSystemUserPassword());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:         Config newConfigViaXMLGenerator = getNewConfigViaXMLGenerator(cfg, false);",
          "160:         SSLConfig generatedSSLConfig = newConfigViaXMLGenerator.getNetworkConfig().getSSLConfig();",
          "165:         String secPassword = newConfigViaXMLGenerator.getNetworkConfig().getSymmetricEncryptionConfig().getPassword();",
          "166:         String theSalt = newConfigViaXMLGenerator.getNetworkConfig().getSymmetricEncryptionConfig().getSalt();",
          "170:         SecurityConfig securityConfig = newConfigViaXMLGenerator.getSecurityConfig();",
          "171:         RealmConfig realmConfig = securityConfig.getRealmConfig(securityConfig.getMemberRealm());",
          "173:     }",
          "175:     private MemberAddressProviderConfig getMemberAddressProviderConfig(Config cfg) {",
          "",
          "[Removed Lines]",
          "162:         assertEquals(generatedSSLConfig.getProperty(\"keyStorePassword\"), password);",
          "163:         assertEquals(generatedSSLConfig.getProperty(\"trustStorePassword\"), password);",
          "167:         assertEquals(secPassword, password);",
          "168:         assertEquals(theSalt, salt);",
          "169:         assertEquals(newConfigViaXMLGenerator.getLicenseKey(), licenseKey);",
          "172:         assertEquals(realmConfig.getUsernamePasswordIdentityConfig().getPassword(), password);",
          "",
          "[Added Lines]",
          "174:         assertEquals(password, generatedSSLConfig.getProperty(\"keyStorePassword\"));",
          "175:         assertEquals(password, generatedSSLConfig.getProperty(\"trustStorePassword\"));",
          "179:         assertEquals(password, secPassword);",
          "180:         assertEquals(salt, theSalt);",
          "181:         assertEquals(licenseKey, newConfigViaXMLGenerator.getLicenseKey());",
          "184:         assertEquals(password, realmConfig.getUsernamePasswordIdentityConfig().getPassword());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "618:         SecurityConfig expectedConfig = new SecurityConfig().setClientRealmConfig(\"ldapRealm\", realmConfig);",
          "619:         cfg.setSecurityConfig(expectedConfig);",
          "622:         assertEquals(expectedConfig, actualConfig);",
          "623:     }",
          "",
          "[Removed Lines]",
          "621:         SecurityConfig actualConfig = getNewConfigViaXMLGenerator(cfg).getSecurityConfig();",
          "",
          "[Added Lines]",
          "633:         SecurityConfig actualConfig = getNewConfigViaXMLGenerator(cfg, false).getSecurityConfig();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "676:                 );",
          "677:         SecurityConfig expectedConfig = new SecurityConfig().setMemberRealmConfig(\"simpleRealm\", realmConfig);",
          "678:         cfg.setSecurityConfig(expectedConfig);",
          "680:         assertEquals(expectedConfig, actualConfig);",
          "681:     }",
          "",
          "[Removed Lines]",
          "679:         SecurityConfig actualConfig = getNewConfigViaXMLGenerator(cfg).getSecurityConfig();",
          "",
          "[Added Lines]",
          "691:         SecurityConfig actualConfig = getNewConfigViaXMLGenerator(cfg, false).getSecurityConfig();",
          "",
          "---------------"
        ]
      }
    }
  ]
}