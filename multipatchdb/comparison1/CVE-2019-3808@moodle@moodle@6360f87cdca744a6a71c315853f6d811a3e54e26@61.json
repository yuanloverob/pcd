{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3271c39c74bf7045272318b41f41b1f57385dcb0",
      "candidate_info": {
        "commit_hash": "3271c39c74bf7045272318b41f41b1f57385dcb0",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/3271c39c74bf7045272318b41f41b1f57385dcb0",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.7dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019031500.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev (Build: 20190315)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019032200.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev (Build: 20190322)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d657cc9b7d200d3afb2695acbc2f2f18f7b637c",
      "candidate_info": {
        "commit_hash": "0d657cc9b7d200d3afb2695acbc2f2f18f7b637c",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/0d657cc9b7d200d3afb2695acbc2f2f18f7b637c",
        "files": [
          "lib/classes/message/manager.php",
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "lib/deprecatedlib.php",
          "lib/tests/messagelib_test.php",
          "message/output/popup/message_output_popup.php",
          "version.php"
        ],
        "message": "MDL-36941 core: removed 'message_working' table",
        "before_after_code_files": [
          "lib/classes/message/manager.php||lib/classes/message/manager.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "lib/deprecatedlib.php||lib/deprecatedlib.php",
          "lib/tests/messagelib_test.php||lib/tests/messagelib_test.php",
          "message/output/popup/message_output_popup.php||message/output/popup/message_output_popup.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/classes/message/manager.php||lib/classes/message/manager.php": [
          "File: lib/classes/message/manager.php -> lib/classes/message/manager.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:             )->trigger();",
          "170:         }",
          "181:             if ($eventdata->notification) {",
          "182:                 $savemessage->timeread = null;",
          "183:                 \\core_message\\api::mark_notification_as_read($savemessage);",
          "",
          "[Removed Lines]",
          "175:         if (empty($CFG->messaging) && $eventdata->notification) {",
          "176:             \\core_message\\api::mark_notification_as_read($savemessage);",
          "177:         }",
          "180:         if ($DB->count_records('message_working', array('unreadmessageid' => $savemessage->id)) == 0) {",
          "",
          "[Added Lines]",
          "172:         if (empty($CFG->messaging)) {",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2151:         upgrade_main_savepoint(true, 2018032200.04);",
          "2152:     }",
          "2154:     return true;",
          "2155: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2154:     if ($oldversion < 2018032200.05) {",
          "2156:         $table = new xmldb_table('message_working');",
          "2157:         if ($dbman->table_exists($table)) {",
          "2158:             $dbman->drop_table($table);",
          "2159:         }",
          "2162:         upgrade_main_savepoint(true, 2018032200.05);",
          "2163:     }",
          "",
          "---------------"
        ],
        "lib/deprecatedlib.php||lib/deprecatedlib.php": [
          "File: lib/deprecatedlib.php -> lib/deprecatedlib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "6359:     debugging('message_mark_message_read() is deprecated, please use \\core_message\\api::mark_message_as_read()",
          "6360:         or \\core_message\\api::mark_notification_as_read().', DEBUG_DEVELOPER);",
          "6364:     if (!empty($message->notification)) {",
          "6365:         \\core_message\\api::mark_notification_as_read($message, $timeread);",
          "6366:     } else {",
          "6367:         \\core_message\\api::mark_message_as_read($message->useridto, $message, $timeread);",
          "6368:     }",
          "6375:     return $message->id;",
          "6376: }",
          "",
          "[Removed Lines]",
          "6362:     global $DB;",
          "6371:     if (!$messageworkingempty) {",
          "6372:         $DB->delete_records('message_working', array('unreadmessageid' => $message->id));",
          "6373:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/tests/messagelib_test.php||lib/tests/messagelib_test.php": [
          "File: lib/tests/messagelib_test.php -> lib/tests/messagelib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "575:         $this->assertCount(1, $emails);",
          "576:         $email = reset($emails);",
          "577:         $savedmessage = $DB->get_record('messages', array('id' => $messageid), '*', MUST_EXIST);",
          "579:         $this->assertSame($user1->email, $email->from);",
          "580:         $this->assertSame($user2->email, $email->to);",
          "581:         $this->assertSame($message->subject, $email->subject);",
          "",
          "[Removed Lines]",
          "578:         $working = $DB->get_record('message_working', array('unreadmessageid' => $messageid), '*', MUST_EXIST);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "609:         $emails = $sink->get_messages();",
          "610:         $this->assertCount(0, $emails);",
          "611:         $savedmessage = $DB->get_record('messages', array('id' => $messageid), '*', MUST_EXIST);",
          "613:         $sink->clear();",
          "614:         $this->assertFalse($DB->record_exists('message_user_actions', array()));",
          "615:         $DB->delete_records('messages', array());",
          "",
          "[Removed Lines]",
          "612:         $working = $DB->get_record('message_working', array('unreadmessageid' => $messageid), '*', MUST_EXIST);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "message/output/popup/message_output_popup.php||message/output/popup/message_output_popup.php": [
          "File: message/output/popup/message_output_popup.php -> message/output/popup/message_output_popup.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:     public function send_message($eventdata) {",
          "64:         return true;",
          "65:     }",
          "",
          "[Removed Lines]",
          "44:         global $DB;",
          "47:         static $processorid = null;",
          "50:         if ($eventdata->userfrom->id != $eventdata->userto->id) {",
          "51:             if (empty($processorid)) {",
          "52:                 $processor = $DB->get_record('message_processors', array('name'=>'popup'));",
          "53:                 $processorid = $processor->id;",
          "54:             }",
          "55:             $procmessage = new stdClass();",
          "56:             $procmessage->unreadmessageid = $eventdata->savedmessageid;",
          "57:             $procmessage->processorid     = $processorid;",
          "58:             $procmessage->notification    = $eventdata->notification;",
          "61:             $DB->insert_record('message_working', $procmessage);",
          "62:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018032200.04;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018032200.05;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee8d64f6efd8ec51cafdf2332f771affa256f6eb",
      "candidate_info": {
        "commit_hash": "ee8d64f6efd8ec51cafdf2332f771affa256f6eb",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/ee8d64f6efd8ec51cafdf2332f771affa256f6eb",
        "files": [
          "enrol/externallib.php",
          "enrol/tests/externallib_test.php",
          "lib/db/services.php",
          "user/amd/build/status_field.min.js",
          "user/amd/src/status_field.js",
          "version.php"
        ],
        "message": "MDL-66489 enrol: Send all form data to WS and do all busines logic there\n\nIt is discouraged to use JS Date functions. We should pass all raw data to PHP.",
        "before_after_code_files": [
          "enrol/externallib.php||enrol/externallib.php",
          "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php",
          "lib/db/services.php||lib/db/services.php",
          "user/amd/src/status_field.js||user/amd/src/status_field.js",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "enrol/externallib.php||enrol/externallib.php": [
          "File: enrol/externallib.php -> enrol/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1020:         );",
          "1021:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1028:     public static function submit_user_enrolment_form_parameters() {",
          "1029:         return new external_function_parameters([",
          "1030:             'formdata' => new external_value(PARAM_RAW, 'The data from the event form'),",
          "1031:         ]);",
          "1032:     }",
          "1040:     public static function submit_user_enrolment_form($formdata) {",
          "1041:         global $CFG, $DB, $PAGE;",
          "1044:         $params = self::validate_parameters(self::submit_user_enrolment_form_parameters(), ['formdata' => $formdata]);",
          "1046:         $data = [];",
          "1047:         parse_str($params['formdata'], $data);",
          "1049:         $userenrolment = $DB->get_record('user_enrolments', ['id' => $data['ue']], '*', MUST_EXIST);",
          "1050:         $instance = $DB->get_record('enrol', ['id' => $userenrolment->enrolid], '*', MUST_EXIST);",
          "1051:         $plugin = enrol_get_plugin($instance->enrol);",
          "1052:         $course = get_course($instance->courseid);",
          "1053:         $context = context_course::instance($course->id);",
          "1054:         self::validate_context($context);",
          "1056:         require_once(\"$CFG->dirroot/enrol/editenrolment_form.php\");",
          "1057:         $customformdata = [",
          "1058:             'ue' => $userenrolment,",
          "1059:             'modal' => true,",
          "1060:             'enrolinstancename' => $plugin->get_instance_name($instance)",
          "1061:         ];",
          "1062:         $mform = new enrol_user_enrolment_form(null, $customformdata, 'post', '', null, true, $data);",
          "1064:         if ($validateddata = $mform->get_data()) {",
          "1065:             require_once($CFG->dirroot . '/enrol/locallib.php');",
          "1066:             $manager = new course_enrolment_manager($PAGE, $course);",
          "1067:             $result = $manager->edit_enrolment($userenrolment, $validateddata);",
          "1069:             return ['result' => $result];",
          "1070:         } else {",
          "1071:             return ['result' => false, 'validationerror' => true];",
          "1072:         }",
          "1073:     }",
          "1080:     public static function submit_user_enrolment_form_returns() {",
          "1081:         return new external_single_structure([",
          "1082:             'result' => new external_value(PARAM_BOOL, 'True if the user\\'s enrolment was successfully updated'),",
          "1083:             'validationerror' => new external_value(PARAM_BOOL, 'Indicates invalid form data', VALUE_DEFAULT, false),",
          "1084:         ]);",
          "1085:     }",
          "",
          "---------------"
        ],
        "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php": [
          "File: enrol/tests/externallib_test.php -> enrol/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "958:         $this->assertEquals(ENROL_USER_SUSPENDED, $ue->status);",
          "959:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "964:     public function submit_user_enrolment_form_provider() {",
          "965:         $now = new DateTime();",
          "967:         $nextmonth = clone($now);",
          "968:         $nextmonth->add(new DateInterval('P1M'));",
          "970:         return [",
          "971:             'Invalid data' => [",
          "972:                 'customdata' => [",
          "973:                     'status' => ENROL_USER_ACTIVE,",
          "974:                     'timestart' => [",
          "975:                         'day' => $now->format('j'),",
          "976:                         'month' => $now->format('n'),",
          "977:                         'year' => $now->format('Y'),",
          "978:                         'hour' => $now->format('G'),",
          "979:                         'minute' => 0,",
          "980:                         'enabled' => 1,",
          "981:                     ],",
          "982:                     'timeend' => [",
          "983:                         'day' => $now->format('j'),",
          "984:                         'month' => $now->format('n'),",
          "985:                         'year' => $now->format('Y'),",
          "986:                         'hour' => $now->format('G'),",
          "987:                         'minute' => 0,",
          "988:                         'enabled' => 1,",
          "989:                     ],",
          "990:                 ],",
          "991:                 'expectedresult' => false,",
          "992:                 'validationerror' => true",
          "993:             ],",
          "994:             'Valid data' => [",
          "995:                 'customdata' => [",
          "996:                     'status' => ENROL_USER_ACTIVE,",
          "997:                     'timestart' => [",
          "998:                         'day' => $now->format('j'),",
          "999:                         'month' => $now->format('n'),",
          "1000:                         'year' => $now->format('Y'),",
          "1001:                         'hour' => $now->format('G'),",
          "1002:                         'minute' => 0,",
          "1003:                         'enabled' => 1,",
          "1004:                     ],",
          "1005:                     'timeend' => [",
          "1006:                         'day' => $nextmonth->format('j'),",
          "1007:                         'month' => $nextmonth->format('n'),",
          "1008:                         'year' => $nextmonth->format('Y'),",
          "1009:                         'hour' => $nextmonth->format('G'),",
          "1010:                         'minute' => 0,",
          "1011:                         'enabled' => 1,",
          "1012:                     ],",
          "1013:                 ],",
          "1014:                 'expectedresult' => true,",
          "1015:                 'validationerror' => false",
          "1016:             ],",
          "1017:             'Suspend user' => [",
          "1018:                 'customdata' => [",
          "1019:                     'status' => ENROL_USER_SUSPENDED,",
          "1020:                 ],",
          "1021:                 'expectedresult' => true,",
          "1022:                 'validationerror' => false",
          "1023:             ],",
          "1024:         ];",
          "1025:     }",
          "1033:     public function test_submit_user_enrolment_form($customdata, $expectedresult, $validationerror) {",
          "1034:         global $CFG, $DB;",
          "1036:         $this->resetAfterTest(true);",
          "1037:         $datagen = $this->getDataGenerator();",
          "1040:         $manualplugin = enrol_get_plugin('manual');",
          "1042:         $studentroleid = $DB->get_field('role', 'id', ['shortname' => 'student'], MUST_EXIST);",
          "1043:         $teacherroleid = $DB->get_field('role', 'id', ['shortname' => 'editingteacher'], MUST_EXIST);",
          "1044:         $course = $datagen->create_course();",
          "1045:         $user = $datagen->create_user();",
          "1046:         $teacher = $datagen->create_user();",
          "1048:         $instanceid = null;",
          "1049:         $instances = enrol_get_instances($course->id, true);",
          "1050:         foreach ($instances as $inst) {",
          "1051:             if ($inst->enrol == 'manual') {",
          "1052:                 $instanceid = (int)$inst->id;",
          "1053:                 break;",
          "1054:             }",
          "1055:         }",
          "1056:         if (empty($instanceid)) {",
          "1057:             $instanceid = $manualplugin->add_default_instance($course);",
          "1058:             if (empty($instanceid)) {",
          "1059:                 $instanceid = $manualplugin->add_instance($course);",
          "1060:             }",
          "1061:         }",
          "1062:         $this->assertNotNull($instanceid);",
          "1064:         $instance = $DB->get_record('enrol', ['id' => $instanceid], '*', MUST_EXIST);",
          "1065:         $manualplugin->enrol_user($instance, $user->id, $studentroleid, 0, 0, ENROL_USER_ACTIVE);",
          "1066:         $manualplugin->enrol_user($instance, $teacher->id, $teacherroleid, 0, 0, ENROL_USER_ACTIVE);",
          "1067:         $ueid = (int) $DB->get_field(",
          "1068:                 'user_enrolments',",
          "1069:                 'id',",
          "1070:                 ['enrolid' => $instance->id, 'userid' => $user->id],",
          "1071:                 MUST_EXIST",
          "1072:         );",
          "1075:         $teacher->ignoresesskey = true;",
          "1076:         $this->setUser($teacher);",
          "1078:         $formdata = [",
          "1079:             'ue'        => $ueid,",
          "1080:             'ifilter'   => 0,",
          "1081:             'status'    => null,",
          "1082:             'timestart' => null,",
          "1083:             'timeend'   => null,",
          "1084:         ];",
          "1086:         $formdata = array_merge($formdata, $customdata);",
          "1088:         require_once(\"$CFG->dirroot/enrol/editenrolment_form.php\");",
          "1089:         $formdata = enrol_user_enrolment_form::mock_generate_submit_keys($formdata);",
          "1091:         $querystring = http_build_query($formdata, '', '&');",
          "1093:         $result = external_api::clean_returnvalue(",
          "1094:                 core_enrol_external::submit_user_enrolment_form_returns(),",
          "1095:                 core_enrol_external::submit_user_enrolment_form($querystring)",
          "1096:         );",
          "1098:         $this->assertEquals(",
          "1099:                 ['result' => $expectedresult, 'validationerror' => $validationerror],",
          "1100:                 $result,",
          "1101:                 '', 0.0, 10, true);",
          "1103:         if (!empty($result['result'])) {",
          "1104:             $ue = $DB->get_record('user_enrolments', ['id' => $ueid], '*', MUST_EXIST);",
          "1105:             $this->assertEquals($formdata['status'], $ue->status);",
          "1106:         }",
          "1107:     }",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "660:         'type' => 'write',",
          "661:         'ajax' => true,",
          "662:     ),",
          "663:     'core_enrol_unenrol_user_enrolment' => array(",
          "664:         'classname' => 'core_enrol_external',",
          "665:         'methodname' => 'unenrol_user_enrolment',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "663:     'core_enrol_submit_user_enrolment_form' => array(",
          "664:         'classname' => 'core_enrol_external',",
          "665:         'methodname' => 'submit_user_enrolment_form',",
          "666:         'classpath' => 'enrol/externallib.php',",
          "667:         'description' => 'Submit form data for enrolment form',",
          "668:         'type' => 'write',",
          "669:         'ajax' => true,",
          "670:     ),",
          "",
          "---------------"
        ],
        "user/amd/src/status_field.js||user/amd/src/status_field.js": [
          "File: user/amd/src/status_field.js -> user/amd/src/status_field.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:             var ueid = $(form).find('[name=\"ue\"]').val();",
          "297:             var request = {",
          "300:             };",
          "302:             Ajax.call([request])[0].done(function(data) {",
          "",
          "[Removed Lines]",
          "265:             var status = $(form).find('[name=\"status\"]').val();",
          "267:             var params = {",
          "268:                 'courseid': this.courseid,",
          "269:                 'ueid': ueid,",
          "270:                 'status': status",
          "271:             };",
          "274:             var timeStartEnabled = $(form).find('[name=\"timestart[enabled]\"]');",
          "275:             if (timeStartEnabled.is(':checked')) {",
          "276:                 var timeStartYear = $(form).find('[name=\"timestart[year]\"]').val();",
          "277:                 var timeStartMonth = $(form).find('[name=\"timestart[month]\"]').val() - 1;",
          "278:                 var timeStartDay = $(form).find('[name=\"timestart[day]\"]').val();",
          "279:                 var timeStartHour = $(form).find('[name=\"timestart[hour]\"]').val();",
          "280:                 var timeStartMinute = $(form).find('[name=\"timestart[minute]\"]').val();",
          "281:                 var timeStart = new Date(timeStartYear, timeStartMonth, timeStartDay, timeStartHour, timeStartMinute);",
          "282:                 params.timestart = timeStart.getTime() / 1000;",
          "283:             }",
          "286:             var timeEndEnabled = $(form).find('[name=\"timeend[enabled]\"]');",
          "287:             if (timeEndEnabled.is(':checked')) {",
          "288:                 var timeEndYear = $(form).find('[name=\"timeend[year]\"]').val();",
          "289:                 var timeEndMonth = $(form).find('[name=\"timeend[month]\"]').val() - 1;",
          "290:                 var timeEndDay = $(form).find('[name=\"timeend[day]\"]').val();",
          "291:                 var timeEndHour = $(form).find('[name=\"timeend[hour]\"]').val();",
          "292:                 var timeEndMinute = $(form).find('[name=\"timeend[minute]\"]').val();",
          "293:                 var timeEnd = new Date(timeEndYear, timeEndMonth, timeEndDay, timeEndHour, timeEndMinute);",
          "294:                 params.timeend = timeEnd.getTime() / 1000;",
          "295:             }",
          "298:                 methodname: 'core_enrol_edit_user_enrolment',",
          "299:                 args: params",
          "",
          "[Added Lines]",
          "266:                 methodname: 'core_enrol_submit_user_enrolment_form',",
          "267:                 args: {",
          "268:                     formdata: form.serialize()",
          "269:                 }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019052001.10;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "",
          "[Added Lines]",
          "32: $version  = 2019052001.11;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90a048e38b1aaa5ca881cdca3a5df2220ce4dcf4",
      "candidate_info": {
        "commit_hash": "90a048e38b1aaa5ca881cdca3a5df2220ce4dcf4",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/90a048e38b1aaa5ca881cdca3a5df2220ce4dcf4",
        "files": [
          "version.php"
        ],
        "message": "MDL-65571 versions: main version bump",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019051100.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019051300.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "991ac49b618d44e6286533d87a88e84262d55b26",
      "candidate_info": {
        "commit_hash": "991ac49b618d44e6286533d87a88e84262d55b26",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/991ac49b618d44e6286533d87a88e84262d55b26",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.7.2+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_STABLE;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019052002.11;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.2+ (Build: 20191022)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019052002.12;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.2+ (Build: 20191025)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    }
  ]
}