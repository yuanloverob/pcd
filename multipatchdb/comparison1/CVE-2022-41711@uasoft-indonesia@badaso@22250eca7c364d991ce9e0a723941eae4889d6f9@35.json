{
  "cve_id": "CVE-2022-41711",
  "cve_desc": "Badaso version 2.6.0 allows an unauthenticated remote attacker to execute arbitrary code remotely on the server. This is possible because the application does not properly validate the data uploaded by users.",
  "repo": "uasoft-indonesia/badaso",
  "patch_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
  "patch_info": {
    "commit_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
    "repo": "uasoft-indonesia/badaso",
    "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/22250eca7c364d991ce9e0a723941eae4889d6f9",
    "files": [
      "src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue"
    ],
    "message": "Merge pull request #807 from uasoft-indonesia/bugfix/v2/filter-mimeType\n\nBugfix[v2] add filter mimeType",
    "before_after_code_files": [
      "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue"
    ]
  },
  "patch_diff": {
    "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue": [
      "File: src/resources/js/components/BadasoUploadFile.vue -> src/resources/js/components/BadasoUploadFile.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "336:           });",
      "337:           return;",
      "338:         }",
      "340:         this.uploadFile(files[0]);",
      "341:       }",
      "342:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "339:         if (!this.availableMimetypes.file.validMime.includes(files[0].type)) {",
      "340:           this.$vs.notify({",
      "341:             title: this.$t(\"alert.danger\"),",
      "342:             text: \"File type not allowed\",",
      "343:             color: \"danger\",",
      "344:           });",
      "345:           return;",
      "346:         }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadFileMultiple.vue -> src/resources/js/components/BadasoUploadFileMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "367:             });",
      "368:             return;",
      "369:           }",
      "371:           this.uploadFile(file);",
      "372:         }",
      "373:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "370:           if (!this.availableMimetypes.file.validMime.includes(file.type)) {",
      "371:             this.$vs.notify({",
      "372:               title: this.$t(\"alert.danger\"),",
      "373:               text: \"File type not allowed\",",
      "374:               color: \"danger\",",
      "375:             });",
      "376:             return;",
      "377:           }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue": [
      "File: src/resources/js/components/BadasoUploadImage.vue -> src/resources/js/components/BadasoUploadImage.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "380:           });",
      "381:           return;",
      "382:         }",
      "384:         this.uploadImage(files[0]);",
      "385:       }",
      "386:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "383:         if (!this.availableMimetypes.image.validMime.includes(files[0].type)){",
      "384:           this.$vs.notify({",
      "385:             title: this.$t(\"alert.danger\"),",
      "386:             text: \"File type not allowed\",",
      "387:             color: \"danger\",",
      "388:           });",
      "389:           return;",
      "390:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "421:     uploadImage(file) {",
      "422:       const files = new FormData();",
      "423:       files.append(\"upload\", file);",
      "425:       files.append(\"working_dir\", this.getActiveFolder);",
      "426:       this.$api.badasoFile",
      "427:         .uploadUsingLfm(files)",
      "",
      "[Removed Lines]",
      "424:       files.append(\"type\", \"image\");",
      "",
      "[Added Lines]",
      "431:       files.append(\"type\", file.type);",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadImageMultiple.vue -> src/resources/js/components/BadasoUploadImageMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:             });",
      "396:             return;",
      "397:           }",
      "399:           this.uploadImage(file);",
      "400:         }",
      "401:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398:           if (!this.availableMimetypes.image.validMime.includes(file.type)) {",
      "399:             this.$vs.notify({",
      "400:               title: this.$t(\"alert.danger\"),",
      "401:               text: \"File type not allowed\",",
      "402:               color: \"danger\",",
      "403:             });",
      "404:             return;",
      "405:           }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ee309089dd42dafbd1d8777acae023f77bdb8c03",
      "candidate_info": {
        "commit_hash": "ee309089dd42dafbd1d8777acae023f77bdb8c03",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/ee309089dd42dafbd1d8777acae023f77bdb8c03",
        "files": [
          "src/Helpers/GetData.php"
        ],
        "message": "Apply fixes from StyleCI",
        "before_after_code_files": [
          "src/Helpers/GetData.php||src/Helpers/GetData.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Helpers/GetData.php||src/Helpers/GetData.php": [
          "File: src/Helpers/GetData.php -> src/Helpers/GetData.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:         $field_identify_related_user = null;",
          "34:         $roles_can_see_all_data = [];",
          "38:         $field_identify_related_user = $permissions ? $permissions['field_identify_related_user'] : null;",
          "",
          "[Removed Lines]",
          "36:         $permissions = Permission::where('key', 'browse_' . $data_type->name)->where('table_name', $data_type->name)->select('roles_can_see_all_data', 'field_identify_related_user', 'is_public')->first();",
          "",
          "[Added Lines]",
          "36:         $permissions = Permission::where('key', 'browse_'.$data_type->name)->where('table_name', $data_type->name)->select('roles_can_see_all_data', 'field_identify_related_user', 'is_public')->first();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:         $field_identify_related_user = null;",
          "129:         $roles_can_see_all_data = [];",
          "133:         $field_identify_related_user = $permissions ? $permissions['field_identify_related_user'] : null;",
          "",
          "[Removed Lines]",
          "131:         $permissions = Permission::where('key', 'browse_' . $data_type->name)->where('table_name', $data_type->name)->select('roles_can_see_all_data', 'field_identify_related_user', 'is_public')->first();",
          "",
          "[Added Lines]",
          "131:         $permissions = Permission::where('key', 'browse_'.$data_type->name)->where('table_name', $data_type->name)->select('roles_can_see_all_data', 'field_identify_related_user', 'is_public')->first();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "253:         $field_identify_related_user = null;",
          "254:         $roles_can_see_all_data = [];",
          "258:         $field_identify_related_user = $permissions ? $permissions['field_identify_related_user'] : null;",
          "",
          "[Removed Lines]",
          "256:         $permissions = Permission::where('key', 'browse_' . $data_type->name)->where('table_name', $data_type->name)->select('roles_can_see_all_data', 'field_identify_related_user', 'is_public')->first();",
          "",
          "[Added Lines]",
          "256:         $permissions = Permission::where('key', 'browse_'.$data_type->name)->where('table_name', $data_type->name)->select('roles_can_see_all_data', 'field_identify_related_user', 'is_public')->first();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "351:         $field_identify_related_user = null;",
          "352:         $roles_can_see_all_data = [];",
          "356:         $field_identify_related_user = $permissions ? $permissions['field_identify_related_user'] : null;",
          "",
          "[Removed Lines]",
          "354:         $permissions = Permission::where('key', 'browse_'.$data_type->name)->where('table_name', $data_type->name)->select('roles_can_see_all_data', 'field_identify_related_user','is_public')->first();",
          "",
          "[Added Lines]",
          "354:         $permissions = Permission::where('key', 'browse_'.$data_type->name)->where('table_name', $data_type->name)->select('roles_can_see_all_data', 'field_identify_related_user', 'is_public')->first();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "360:         $roles_can_see_all_data = json_decode($permissions) ? json_decode($permissions['roles_can_see_all_data']) : [];",
          "363:             $user_roles = auth()->user()->roles;",
          "364:         } else {",
          "365:             $user_roles = User::with('roles')->get();",
          "",
          "[Removed Lines]",
          "362:         if($is_public !== 1) {",
          "",
          "[Added Lines]",
          "362:         if ($is_public !== 1) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2108d2d1975ec951b6712199f478db5c870a1cd9",
      "candidate_info": {
        "commit_hash": "2108d2d1975ec951b6712199f478db5c870a1cd9",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/2108d2d1975ec951b6712199f478db5c870a1cd9",
        "files": [
          "src/Controllers/Controller.php",
          "src/resources/js/components/BadasoNumber.vue",
          "src/resources/js/pages/crud-generated/edit.vue"
        ],
        "message": "fix component switch",
        "before_after_code_files": [
          "src/Controllers/Controller.php||src/Controllers/Controller.php",
          "src/resources/js/components/BadasoNumber.vue||src/resources/js/components/BadasoNumber.vue",
          "src/resources/js/pages/crud-generated/edit.vue||src/resources/js/pages/crud-generated/edit.vue"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Controllers/Controller.php||src/Controllers/Controller.php": [
          "File: src/Controllers/Controller.php -> src/Controllers/Controller.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "565:                             }",
          "566:                         }",
          "567:                     }",
          "569:                 }",
          "570:             }",
          "571:             DB::table($data_type->name)->where('id', $id)->update($new_data);",
          "",
          "[Removed Lines]",
          "568:                     $new_data[$key] = $this->getContentByType($data_type, $data_row, $value) != null ? $this->getContentByType($data_type, $data_row, $value) : '';",
          "",
          "[Added Lines]",
          "568:                     $new_data[$key] = $this->getContentByType($data_type, $data_row, $value) !== null ? $this->getContentByType($data_type, $data_row, $value) : '';",
          "",
          "---------------"
        ],
        "src/resources/js/components/BadasoNumber.vue||src/resources/js/components/BadasoNumber.vue": [
          "File: src/resources/js/components/BadasoNumber.vue -> src/resources/js/components/BadasoNumber.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <template>",
          "2:   <vs-col :vs-lg=\"size\" vs-xs=\"12\" class=\"badaso-number__container\">",
          "3:     <vs-input",
          "4:       type=\"number\"",
          "5:       :label=\"label\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3:     <vs-tooltip :text=\"tooltip\" v-if=\"tooltip\">",
          "4:       <vs-icon icon=\"help_outline\" size=\"16px\" color=\"#A5A5A5\"></vs-icon>",
          "5:     </vs-tooltip>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:       type: String || Array,",
          "57:       default: \"\",",
          "58:     },",
          "59:   },",
          "60:   methods: {",
          "61:     handleInput(val) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:     tooltip: {",
          "63:       type: String,",
          "64:       default: null,",
          "65:     },",
          "",
          "---------------"
        ],
        "src/resources/js/pages/crud-generated/edit.vue||src/resources/js/pages/crud-generated/edit.vue": [
          "File: src/resources/js/pages/crud-generated/edit.vue -> src/resources/js/pages/crud-generated/edit.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "225:                     \"",
          "226:                   ></badaso-color-picker>",
          "227:                   <badaso-hidden",
          "232:                     :label=\"dataRow.displayName\"",
          "233:                     :placeholder=\"dataRow.displayName\"",
          "234:                     v-model=\"dataRow.value\"",
          "",
          "[Removed Lines]",
          "228:                     v-if=\"dataRow.type == 'hidden' ||",
          "229:                           dataRow.type == 'data_identifier' ||",
          "230:                           dataRow.type == 'relation'\"",
          "",
          "[Added Lines]",
          "228:                     v-if=\"",
          "229:                       dataRow.type == 'hidden' ||",
          "230:                       dataRow.type == 'data_identifier' ||",
          "231:                       dataRow.type == 'relation'",
          "232:                     \"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "424:         if ((row && row.value) || (row && row.type == \"textarea\")) {",
          "425:           dataRows[row.field] = row.value;",
          "426:         }",
          "427:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "428:         if ((row && row.value) || (row && row.type == \"switch\")) {",
          "429:           dataRows[row.field] = row.value;",
          "430:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "482:             data.add = data.add == 1;",
          "483:             data.edit = data.edit == 1;",
          "484:             data.read = data.read == 1;",
          "487:             if (",
          "488:               data.type == \"upload_image_multiple\" ||",
          "489:               data.type == \"upload_file_multiple\" ||",
          "",
          "[Removed Lines]",
          "485:             data.details = JSON.parse(data.details);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "495:               if (val) {",
          "496:                 data.value = val.split(\",\");",
          "497:               }",
          "504:             } else if (data.type == \"slider\") {",
          "505:               data.value = parseInt(",
          "506:                 this.record[this.$caseConvert.stringSnakeToCamel(data.field)]",
          "",
          "[Removed Lines]",
          "498:             } else if (data.type == \"switch\") {",
          "499:               data.value = this.record[",
          "500:                 this.$caseConvert.stringSnakeToCamel(data.field)",
          "501:               ]",
          "502:                 ? this.record[this.$caseConvert.stringSnakeToCamel(data.field)]",
          "503:                 : false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "514:                   ].replace(\" \", \"T\")",
          "515:                 : null;",
          "516:               data.value = new Date(dateValue);",
          "518:               data.value = data.details.value ? data.details.value : \"\";",
          "519:             } else if (",
          "520:               data.type == \"text\" ||",
          "",
          "[Removed Lines]",
          "517:             }  else if (data.value == undefined && data.type == \"hidden\") {",
          "",
          "[Added Lines]",
          "513:             } else if (data.value == undefined && data.type == \"hidden\") {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "539:               Object.entries(record).filter(function (item, key) {",
          "540:                 return (data.value[key] = item[1][destinationTableId]);",
          "541:               });",
          "542:             } else {",
          "545:             }",
          "546:           } catch (error) {}",
          "547:           return data;",
          "",
          "[Removed Lines]",
          "543:               data.value =",
          "544:                 this.record[this.$caseConvert.stringSnakeToCamel(data.field)];",
          "",
          "[Added Lines]",
          "538:             } else if (data.type == \"switch\") {",
          "539:               data.value = this.record[",
          "540:                 this.$caseConvert.stringSnakeToCamel(data.field)",
          "541:               ]",
          "542:                 ? this.record[this.$caseConvert.stringSnakeToCamel(data.field)]",
          "543:                 : false;",
          "545:                 data.value =",
          "546:                   this.record[this.$caseConvert.stringSnakeToCamel(data.field)];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a805fa50d853714ada1ad43532fd29dacb363150",
      "candidate_info": {
        "commit_hash": "a805fa50d853714ada1ad43532fd29dacb363150",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/a805fa50d853714ada1ad43532fd29dacb363150",
        "files": [
          "phpstan-baseline.neon"
        ],
        "message": "test1",
        "before_after_code_files": [
          "phpstan-baseline.neon||phpstan-baseline.neon"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "phpstan-baseline.neon||phpstan-baseline.neon": [
          "File: phpstan-baseline.neon -> phpstan-baseline.neon",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: parameters:",
          "2:     ignoreErrors:",
          "13:     - '#Call to an undefined static method Uasoft\\\\Badaso\\\\Models\\\\User::[a-zA-Z0-9-()\\_]+.#'",
          "14:     - '#Call to an undefined static method Spatie\\\\Activitylog\\\\Models\\\\Activity::[a-zA-Z0-9-()\\_]+.#'",
          "18:     - '#Call to an undefined static method Uasoft\\\\Badaso\\\\Models\\\\DataType::[a-zA-Z0-9-()\\_]+.#'",
          "19:     - '#Call to an undefined static method Uasoft\\\\Badaso\\\\Facades\\\\Badaso::[a-zA-Z0-9-()\\_]+.#'",
          "20:     - '#Call to an undefined static method Uasoft\\\\Badaso\\\\Models\\\\DataRow::[a-zA-Z0-9-()\\_]+.#'",
          "",
          "[Removed Lines]",
          "3:     -",
          "4:         message: '#Call to an undefined static method Uasoft\\\\Badaso\\\\Models\\\\Role::[a-zA-Z0-9-()\\_]+.#'",
          "5:         paths:",
          "6:             - src/Controllers",
          "7:             - src/Commands",
          "8:             - src/Models",
          "9:             - src/Seeder",
          "10:             - src/Widgets",
          "11:             - tests",
          "15:     - '#Call to an undefined static method Uasoft\\\\Badaso\\\\Models\\\\UserVerification::[a-zA-Z0-9-()\\_]+.#'",
          "16:     - '#Call to an undefined static method Uasoft\\\\Badaso\\\\Models\\\\PasswordReset::[a-zA-Z0-9-()\\_]+.#'",
          "17:     - '#Call to an undefined static method Uasoft\\\\Badaso\\\\Models\\\\EmailReset::[a-zA-Z0-9-()\\_]+.#'",
          "",
          "[Added Lines]",
          "3:     - '#Call to an undefined static method Uasoft\\\\Badaso\\\\Models\\\\Role::[a-zA-Z0-9-()\\_]+.#'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:     - '#Result of method [a-zA-Z0-9\\\\_]+::[a-zA-Z0-9-()\\_]+ [a-zA-Z0-9-()\\_]+ is used.#'",
          "40:     - '#Method [a-zA-Z0-9\\\\_]+::[a-zA-Z0-9-()\\_]+ should return int but return statement is missing.#'",
          "41:     - '#Call to sprintf contains 1 placeholder, 0 values given.#'",
          "43:     - '#Call to static method debug[()]+ on an unknown class Log.#'",
          "44:     - '#Call to static method first[()]+ on an unknown class Uasoft\\\\Badaso\\\\Models\\\\FirebaseServices.#'",
          "45:     - '#Call to static method user[()]+ on an unknown class JWTAuth.#'",
          "",
          "[Removed Lines]",
          "42:     - '#Variable \\$custom_permissions might not be defined.#'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb9d6c726b78a47f4fa273927049f4036d35408e",
      "candidate_info": {
        "commit_hash": "cb9d6c726b78a47f4fa273927049f4036d35408e",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/cb9d6c726b78a47f4fa273927049f4036d35408e",
        "files": [
          "src/Helpers/GetData.php",
          "src/resources/js/pages/crud-generated/browse.vue"
        ],
        "message": "bugfix multiple relation same table",
        "before_after_code_files": [
          "src/Helpers/GetData.php||src/Helpers/GetData.php",
          "src/resources/js/pages/crud-generated/browse.vue||src/resources/js/pages/crud-generated/browse.vue"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Helpers/GetData.php||src/Helpers/GetData.php": [
          "File: src/Helpers/GetData.php -> src/Helpers/GetData.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:         $relational_fields = collect($data_type->dataRows)->filter(function ($value, $key) {",
          "282:             return $value->relation != null;",
          "283:         })->all();",
          "285:         foreach ($relational_fields as $field) {",
          "286:             $relation_detail = [];",
          "288:             try {",
          "289:                 $relation_detail = is_string($field->relation) ? json_decode($field->relation) : $field->relation;",
          "290:                 $relation_detail = CaseConvert::snake($relation_detail);",
          "291:             } catch (\\Exception $e) {",
          "292:             }",
          "294:             $relation_type = array_key_exists('relation_type', $relation_detail) ? $relation_detail['relation_type'] : null;",
          "295:             $destination_table = array_key_exists('destination_table', $relation_detail) ? $relation_detail['destination_table'] : null;",
          "296:             $destination_table_column = array_key_exists('destination_table_column', $relation_detail) ? $relation_detail['destination_table_column'] : null;",
          "297:             $destination_table_display_column = array_key_exists('destination_table_display_column', $relation_detail) ? $relation_detail['destination_table_display_column'] : null;",
          "299:             if (",
          "300:                 $relation_type",
          "301:                 && $destination_table",
          "302:                 && $destination_table_column",
          "303:                 && $destination_table_display_column",
          "305:                 if (isset($row->{$field->field})) {",
          "306:                     $relation_data = DB::table($destination_table)->select([",
          "307:                         $destination_table_column,",
          "308:                         $destination_table_display_column,",
          "310:                         ->where($destination_table_column, $row->{$field->field})",
          "311:                         ->get();",
          "313:                     switch ($relation_type) {",
          "314:                         case 'belongs_to':",
          "316:                             break;",
          "318:                         case 'has_many':",
          "",
          "[Removed Lines]",
          "304:             ) {",
          "309:                     ])",
          "315:                             $row->{$destination_table} = collect($relation_data)->first();",
          "",
          "[Added Lines]",
          "303:                 ) {",
          "308:                         ])",
          "314:                             if (isset($row->{$destination_table})) {",
          "315:                                 array_push($row->{$destination_table}, collect($relation_data)->first());",
          "316:                             } else {",
          "317:                                 $row->{$destination_table} = collect($relation_data)->toArray();",
          "318:                             }",
          "",
          "---------------"
        ],
        "src/resources/js/pages/crud-generated/browse.vue||src/resources/js/pages/crud-generated/browse.vue": [
          "File: src/resources/js/pages/crud-generated/browse.vue -> src/resources/js/pages/crud-generated/browse.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "1032:     handleSelect(data) {",
          "1033:       this.selected = data;",
          "1034:     },",
          "1036:       if (dataRow.relation) {",
          "1037:         const relationType = dataRow.relation.relationType;",
          "1038:         const table = this.$caseConvert.stringSnakeToCamel(",
          "1039:           dataRow.relation.destinationTable",
          "1041:         this.$caseConvert.stringSnakeToCamel(",
          "1042:           dataRow.relation.destinationTableColumn",
          "1043:         );",
          "",
          "[Removed Lines]",
          "1035:     displayRelationData(record, dataRow) {",
          "1040:         );",
          "",
          "[Added Lines]",
          "1035:     displayRelationData(record, dataRow) {",
          "1040:           );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1047:         if (relationType == \"has_many\") {",
          "1048:           const list = record[table];",
          "1049:           const flatList = list.map((ls) => {",
          "1051:           });",
          "1052:           return flatList.join(\", \");",
          "1053:         } else {",
          "1054:           return record[table] ? record[table][displayColumn] : null;",
          "1055:         }",
          "",
          "[Removed Lines]",
          "1050:             return ls[displayColumn];",
          "",
          "[Added Lines]",
          "1050:               return ls[displayColumn];",
          "1053:         } else if(relationType == \"belongs_to\"){",
          "1054:           const list = record[table];",
          "1055:           let field = this.$caseConvert.stringSnakeToCamel(dataRow.field)",
          "1056:           const flatList = list.map((ls) => {",
          "1057:             if(ls.id == record[field]){",
          "1058:               return ls[displayColumn];",
          "1059:             }",
          "1060:           });",
          "1061:           return flatList.join(\",\").replace(\",\", \"\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb4d00947e771e944f878c1ae3a6825d66c0b7af",
      "candidate_info": {
        "commit_hash": "eb4d00947e771e944f878c1ae3a6825d66c0b7af",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/eb4d00947e771e944f878c1ae3a6825d66c0b7af",
        "files": [
          "src/Controllers/BadasoCRUDController.php",
          "src/Controllers/Controller.php",
          "src/Helpers/GetData.php",
          "tests/Feature/BadasoApiCrudManagementTest.php"
        ],
        "message": "Apply fixes from StyleCI",
        "before_after_code_files": [
          "src/Controllers/BadasoCRUDController.php||src/Controllers/BadasoCRUDController.php",
          "src/Controllers/Controller.php||src/Controllers/Controller.php",
          "src/Helpers/GetData.php||src/Helpers/GetData.php",
          "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Controllers/BadasoCRUDController.php||src/Controllers/BadasoCRUDController.php": [
          "File: src/Controllers/BadasoCRUDController.php -> src/Controllers/BadasoCRUDController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:                     'required',",
          "158:                     function ($attribute, $value, $fail) use ($request) {",
          "159:                         if (! Schema::hasColumn($request->name, $value)) {",
          "161:                             $split_attribute = explode('.', $attribute);",
          "162:                             $split_attribute[2] = 'relation_type';",
          "163:                             $field_to_relation = join('.', $split_attribute);",
          "165:                                 $request->{$attribute} == $value ? $value : $fail(__('badaso::validation.crud.table_column_not_found', ['table_column' => \"$request->name.{$value}\"]));",
          "166:                             }",
          "167:                         } else {",
          "",
          "[Removed Lines]",
          "164:                             if (!$field_to_relation == 'belongs_to_many') {",
          "",
          "[Added Lines]",
          "163:                             if (! $field_to_relation == 'belongs_to_many') {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "319:                             $split_attribute = explode('.', $attribute);",
          "320:                             $split_attribute[2] = 'relation_type';",
          "321:                             $field_to_relation = join('.', $split_attribute);",
          "323:                                 $fail(__('badaso::validation.crud.table_column_not_found', ['table_column' => \"$request->name.{$value}\"]));",
          "324:                             }",
          "325:                         } else {",
          "",
          "[Removed Lines]",
          "322:                             if(!$field_to_relation == 'belongs_to_many'){",
          "",
          "[Added Lines]",
          "321:                             if (! $field_to_relation == 'belongs_to_many') {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "401:                 if (isset($data_row['destination_table_display_more_column'])) {",
          "402:                     $relation['destination_table_display_more_column'] = $data_row['destination_table_display_more_column'];",
          "403:                 }",
          "405:                     $new_data_row->relation = json_encode($relation);",
          "406:                 }",
          "407:                 $new_data_row->order = $index + 1;",
          "",
          "[Removed Lines]",
          "404:                 if (in_array(count($relation), range(4,5)) && $data_row['type'] == 'relation') {",
          "",
          "[Added Lines]",
          "403:                 if (in_array(count($relation), range(4, 5)) && $data_row['type'] == 'relation') {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "548:         return false;",
          "549:     }",
          "552:         foreach ($request['rows'] as $key => $value) {",
          "553:             if (isset($value['relation_type']) && $value['relation_type'] == 'belongs_to_many') {",
          "555:                 $table = $value['field'];",
          "556:                 $rows = [",
          "557:                     0 => [",
          "568:                     ],",
          "569:                     1 => [",
          "579:                     ],",
          "580:                     2 => [",
          "590:                     ],",
          "591:                     3 => [",
          "602:                     ],",
          "603:                     4 => [",
          "614:                 ];",
          "616:                 $relations = [",
          "623:                     ],",
          "631:                 ];",
          "633:                     $this->file_name = $this->file_generator->generateBDOMigrationFile($table, 'create', $rows, $relations);",
          "634:                     $exitCode = Artisan::call('migrate', [",
          "635:                         '--path' => 'database/migrations/badaso/',",
          "",
          "[Removed Lines]",
          "551:     private function addTablePolymorphism($request){",
          "558:                         \"id\" => \"id\",",
          "559:                         \"field_name\" => \"id\",",
          "560:                         \"field_type\" => \"bigint\",",
          "561:                         \"field_length\" => null,",
          "562:                         \"field_null\" => false,",
          "563:                         \"field_attribute\" => true,",
          "564:                         \"field_increment\" => true,",
          "565:                         \"field_index\" => \"primary\",",
          "566:                         \"field_default\" => null,",
          "567:                         \"undeletable\" => true,",
          "570:                         \"id\" => $request['name'] . \"_id\",",
          "571:                         \"field_name\" => $request['name'] . \"_id\",",
          "572:                         \"field_type\" => \"bigint\",",
          "573:                         \"field_length\" => null,",
          "574:                         \"field_null\" => false,",
          "575:                         \"field_attribute\" => true,",
          "576:                         \"field_increment\" => false,",
          "577:                         \"field_index\" => \"foreign\",",
          "578:                         \"field_default\" => null,",
          "581:                         \"id\" => $value['destination_table'] . \"_id\",",
          "582:                         \"field_name\" => $value['destination_table'] . \"_id\",",
          "583:                         \"field_type\" => \"bigint\",",
          "584:                         \"field_length\" => null,",
          "585:                         \"field_null\" => false,",
          "586:                         \"field_attribute\" => true,",
          "587:                         \"field_increment\" => false,",
          "588:                         \"field_index\" => \"foreign\",",
          "589:                         \"field_default\" => null,",
          "592:                         \"field_name\" => \"created_at\",",
          "593:                         \"field_type\" => \"timestamp\",",
          "594:                         \"field_length\" => null,",
          "595:                         \"field_null\" => true,",
          "596:                         \"field_attribute\" => false,",
          "597:                         \"field_increment\" => false,",
          "598:                         \"field_index\" => null,",
          "599:                         \"field_default\" => null,",
          "600:                         \"undeletable\" => true,",
          "601:                         \"indexes\" => true,",
          "604:                         \"field_name\" => \"updated_at\",",
          "605:                         \"field_type\" => \"timestamp\",",
          "606:                         \"field_length\" => null,",
          "607:                         \"field_null\" => true,",
          "608:                         \"field_attribute\" => false,",
          "609:                         \"field_increment\" => false,",
          "610:                         \"field_index\" => null,",
          "611:                         \"field_default\" => null,",
          "612:                         \"undeletable\" => true,",
          "613:                     ]",
          "617:                     $request['name'] . \"_id\" => [",
          "618:                         \"source_field\" => $request['name'] . \"_id\",",
          "619:                         \"target_table\" => $request['name'],",
          "620:                         \"target_field\" => \"id\",",
          "621:                         \"on_delete\" => \"cascade\",",
          "622:                         \"on_update\" => \"restrict\",",
          "624:                     $value['destination_table'] . \"_id\" => [",
          "625:                         \"source_field\" => $value['destination_table'] . \"_id\",",
          "626:                         \"target_table\" => $value['destination_table'],",
          "627:                         \"target_field\" => \"id\",",
          "628:                         \"on_delete\" => \"cascade\",",
          "629:                         \"on_update\" => \"restrict\",",
          "630:                     ]",
          "632:                 if(!Schema::hasTable($table)){",
          "",
          "[Added Lines]",
          "550:     private function addTablePolymorphism($request)",
          "551:     {",
          "557:                         'id' => 'id',",
          "558:                         'field_name' => 'id',",
          "559:                         'field_type' => 'bigint',",
          "560:                         'field_length' => null,",
          "561:                         'field_null' => false,",
          "562:                         'field_attribute' => true,",
          "563:                         'field_increment' => true,",
          "564:                         'field_index' => 'primary',",
          "565:                         'field_default' => null,",
          "566:                         'undeletable' => true,",
          "569:                         'id' => $request['name'].'_id',",
          "570:                         'field_name' => $request['name'].'_id',",
          "571:                         'field_type' => 'bigint',",
          "572:                         'field_length' => null,",
          "573:                         'field_null' => false,",
          "574:                         'field_attribute' => true,",
          "575:                         'field_increment' => false,",
          "576:                         'field_index' => 'foreign',",
          "577:                         'field_default' => null,",
          "580:                         'id' => $value['destination_table'].'_id',",
          "581:                         'field_name' => $value['destination_table'].'_id',",
          "582:                         'field_type' => 'bigint',",
          "583:                         'field_length' => null,",
          "584:                         'field_null' => false,",
          "585:                         'field_attribute' => true,",
          "586:                         'field_increment' => false,",
          "587:                         'field_index' => 'foreign',",
          "588:                         'field_default' => null,",
          "591:                         'field_name' => 'created_at',",
          "592:                         'field_type' => 'timestamp',",
          "593:                         'field_length' => null,",
          "594:                         'field_null' => true,",
          "595:                         'field_attribute' => false,",
          "596:                         'field_increment' => false,",
          "597:                         'field_index' => null,",
          "598:                         'field_default' => null,",
          "599:                         'undeletable' => true,",
          "600:                         'indexes' => true,",
          "603:                         'field_name' => 'updated_at',",
          "604:                         'field_type' => 'timestamp',",
          "605:                         'field_length' => null,",
          "606:                         'field_null' => true,",
          "607:                         'field_attribute' => false,",
          "608:                         'field_increment' => false,",
          "609:                         'field_index' => null,",
          "610:                         'field_default' => null,",
          "611:                         'undeletable' => true,",
          "612:                     ],",
          "616:                     $request['name'].'_id' => [",
          "617:                         'source_field' => $request['name'].'_id',",
          "618:                         'target_table' => $request['name'],",
          "619:                         'target_field' => 'id',",
          "620:                         'on_delete' => 'cascade',",
          "621:                         'on_update' => 'restrict',",
          "622:                     ],",
          "623:                     $value['destination_table'].'_id' => [",
          "624:                         'source_field' => $value['destination_table'].'_id',",
          "625:                         'target_table' => $value['destination_table'],",
          "626:                         'target_field' => 'id',",
          "627:                         'on_delete' => 'cascade',",
          "628:                         'on_update' => 'restrict',",
          "631:                 if (! Schema::hasTable($table)) {",
          "",
          "---------------"
        ],
        "src/Controllers/Controller.php||src/Controllers/Controller.php": [
          "File: src/Controllers/Controller.php -> src/Controllers/Controller.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:         } else {",
          "268:             $record = DB::table($data_type->name)->select($fields)->where('id', $id)->first();",
          "269:         }",
          "271:             foreach ($data_rows as $key => $data_row) {",
          "272:                 if (isset($data_row->relation) && $data_row->relation['relation_type'] == 'belongs_to_many') {",
          "273:                     $table_name = $data_type['name'];",
          "274:                     $table_destination = $data_row->relation['destination_table'];",
          "275:                     $table_manytomany = $data_row['field'];",
          "276:                     $data_relation = DB::table($table_manytomany)",
          "279:                         ->get();",
          "280:                     $record->$table_manytomany = $data_relation;",
          "281:                 }",
          "",
          "[Removed Lines]",
          "270:         if(count($field_manytomany) > 0){",
          "277:                         ->leftjoin($table_name, $table_manytomany . '.id', '=', $table_name . '_id')",
          "278:                         ->select($table_name . '_id', $table_destination . '_id')",
          "",
          "[Added Lines]",
          "270:         if (count($field_manytomany) > 0) {",
          "277:                         ->leftjoin($table_name, $table_manytomany.'.id', '=', $table_name.'_id')",
          "278:                         ->select($table_name.'_id', $table_destination.'_id')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300:                     $model->{$key} = $this->getContentByType($data_type, $data_row, $value);",
          "301:                 }",
          "302:             }",
          "304:             foreach ($data_rows as $key => $data_row) {",
          "328:                 }",
          "329:             }",
          "330:             $model->save();",
          "",
          "[Removed Lines]",
          "305:                 if(isset($data_row->relation) && $data_row->relation['relation_type'] == 'belongs_to_many'){",
          "306:                             $field = $data_row['field'];",
          "307:                             $data_manytomany = $data[$field];",
          "308:                             $table_primary = $data_type['name'];",
          "309:                             $table_manytomany = $data_row['field'];",
          "310:                             $table_relation = $data_row['relation']['destination_table'];",
          "311:                             $model_manytomany = Badaso::model('DataType')::where('name', $table_relation)->first();",
          "313:                             collect($model)->map(function($models, $index) use ($model,$field)  {",
          "314:                                 if($index == $field){",
          "315:                                     unset($model[$index]);",
          "316:                                 }",
          "317:                             });",
          "319:                             $multi_select[] = [",
          "320:                                 'model'           => $model_manytomany['model_name'],",
          "321:                                 'content'         => $data_manytomany,",
          "322:                                 'table'           => $table_manytomany,",
          "323:                                 'foreignPivotKey' => $table_primary . '_id' ? $table_primary . '_id' : null,",
          "324:                                 'relatedPivotKey' => $table_relation . '_id' ? $table_relation . '_id' : null,",
          "325:                                 'parentKey'       => null,",
          "326:                                 'relatedKey'      => 'id',",
          "327:                             ];",
          "",
          "[Added Lines]",
          "305:                 if (isset($data_row->relation) && $data_row->relation['relation_type'] == 'belongs_to_many') {",
          "306:                     $field = $data_row['field'];",
          "307:                     $data_manytomany = $data[$field];",
          "308:                     $table_primary = $data_type['name'];",
          "309:                     $table_manytomany = $data_row['field'];",
          "310:                     $table_relation = $data_row['relation']['destination_table'];",
          "311:                     $model_manytomany = Badaso::model('DataType')::where('name', $table_relation)->first();",
          "313:                     collect($model)->map(function ($models, $index) use ($model, $field) {",
          "314:                         if ($index == $field) {",
          "315:                             unset($model[$index]);",
          "316:                         }",
          "317:                     });",
          "319:                     $multi_select[] = [",
          "320:                         'model'           => $model_manytomany['model_name'],",
          "321:                         'content'         => $data_manytomany,",
          "322:                         'table'           => $table_manytomany,",
          "323:                         'foreignPivotKey' => $table_primary.'_id' ? $table_primary.'_id' : null,",
          "324:                         'relatedPivotKey' => $table_relation.'_id' ? $table_relation.'_id' : null,",
          "325:                         'parentKey'       => null,",
          "326:                         'relatedKey'      => 'id',",
          "327:                     ];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:                     if ($data_row['type'] == 'upload_image_multiple') {",
          "353:                         $new_data[$key] = $this->getContentByType($data_type, $data_row, $value);",
          "354:                     }",
          "360:                     }",
          "362:                     $new_data[$key] = $this->getContentByType($data_type, $data_row, $value);",
          "364:                         $field_manytomany = $data_row['field'];",
          "365:                         $table_relation = $data_row['relation']['destination_table'];",
          "366:                         unset($new_data[$field_manytomany]);",
          "",
          "[Removed Lines]",
          "355:                     if($data_row['type'] == 'relation' && $data_row['relation']['relation_type'] == 'belongs_to_many'){",
          "356:                             $table_manytomany = $data_row['field'];",
          "357:                             $table_primary = $data_type['name'];",
          "358:                             $table_relation = $data_row['relation']['destination_table'];",
          "359:                             $field = $data_row['field'];",
          "363:                     if($data_row['type'] == 'relation' && $data_row['relation']['relation_type'] == 'belongs_to_many'){",
          "",
          "[Added Lines]",
          "355:                     if ($data_row['type'] == 'relation' && $data_row['relation']['relation_type'] == 'belongs_to_many') {",
          "356:                         $table_manytomany = $data_row['field'];",
          "357:                         $table_primary = $data_type['name'];",
          "358:                         $table_relation = $data_row['relation']['destination_table'];",
          "359:                         $field = $data_row['field'];",
          "363:                     if ($data_row['type'] == 'relation' && $data_row['relation']['relation_type'] == 'belongs_to_many') {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "384:                     foreach ($data_manytomany as $key => $value) {",
          "385:                         try {",
          "386:                             DB::table($field_manytomany)->insert([",
          "389:                             ]);",
          "390:                         } catch (Exception $e) {",
          "391:                         }",
          "",
          "[Removed Lines]",
          "387:                                 $table_relation . '_id' => $value,",
          "388:                                 $table_primary . '_id' => $id",
          "",
          "[Added Lines]",
          "387:                                 $table_relation.'_id' => $value,",
          "388:                                 $table_primary.'_id' => $id,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "453:                             'model'           => $model_manytomany['model_name'],",
          "454:                             'content'         => $data_manytomany,",
          "455:                             'table'           => $table_manytomany,",
          "458:                             'parentKey'       => null,",
          "459:                             'relatedKey'      => 'id',",
          "460:                         ];",
          "",
          "[Removed Lines]",
          "456:                             'foreignPivotKey' => $table_primary . '_id' ? $table_primary . '_id' : null,",
          "457:                             'relatedPivotKey' => $table_relation . '_id' ? $table_relation . '_id' : null,",
          "",
          "[Added Lines]",
          "456:                             'foreignPivotKey' => $table_primary.'_id' ? $table_primary.'_id' : null,",
          "457:                             'relatedPivotKey' => $table_relation.'_id' ? $table_relation.'_id' : null,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "486:                 $data_row = collect($data_rows)->where('field', $key)->first();",
          "487:                 if (is_null($data_row)) {",
          "490:                     $table_manytomany = $data_row->field;",
          "491:                     $table_relation = $data_row->relation['destination_table'];",
          "492:                     $table_primary = $data_type['name'];",
          "495:                     $data_manytomany = $data[$table_manytomany];",
          "497:                     $data_table_manytomany = DB::table($table_manytomany)->where($table_primary_id, $id)->get();",
          "498:                     foreach ($data_table_manytomany as $key => $value_table_manytomany) {",
          "500:                             DB::table($table_manytomany)",
          "501:                             ->where($table_primary_id, $id)",
          "502:                             ->where($table_relation_id, $value_table_manytomany->{$table_relation_id})",
          "503:                             ->delete();",
          "505:                     }",
          "506:                     foreach ($data_manytomany as $key => $id_destination_table) {",
          "507:                         $data_table_manytomany = DB::table($table_manytomany)",
          "508:                                                 ->where($table_relation_id, $id_destination_table)",
          "509:                                                 ->where($table_primary_id, $id)",
          "510:                                                 ->first();",
          "512:                             try {",
          "513:                                 DB::table($table_manytomany)",
          "514:                                     ->where($table_relation_id, $id_destination_table)",
          "515:                                     ->where($table_primary_id, $id)",
          "516:                                     ->update([",
          "517:                                         $table_relation_id => $id_destination_table,",
          "519:                                     ]);",
          "520:                             } catch (Exception $e) {",
          "521:                             }",
          "523:                             try {",
          "524:                                 DB::table($table_manytomany)->insert([",
          "525:                                     $table_relation_id => $id_destination_table,",
          "527:                                 ]);",
          "528:                             } catch (Exception $e) {",
          "529:                             }",
          "530:                         }",
          "531:                     }",
          "533:                 } else {",
          "534:                     if (in_array($data_row->type, [",
          "535:                         'upload_image',",
          "",
          "[Removed Lines]",
          "489:                 } else if(isset($data_row->relation) && $data_row->relation['relation_type'] == 'belongs_to_many'){",
          "493:                     $table_primary_id = $table_primary . '_id';",
          "494:                     $table_relation_id = $table_relation . '_id';",
          "499:                         if(!in_array($value_table_manytomany->{$table_relation_id}, $data_manytomany)){",
          "504:                         }",
          "511:                         if($data_table_manytomany){",
          "518:                                         $table_primary_id => $id",
          "522:                         }else{",
          "526:                                     $table_primary_id => $id",
          "",
          "[Added Lines]",
          "489:                 } elseif (isset($data_row->relation) && $data_row->relation['relation_type'] == 'belongs_to_many') {",
          "493:                     $table_primary_id = $table_primary.'_id';",
          "494:                     $table_relation_id = $table_relation.'_id';",
          "499:                         if (! in_array($value_table_manytomany->{$table_relation_id}, $data_manytomany)) {",
          "504:                         }",
          "511:                         if ($data_table_manytomany) {",
          "518:                                         $table_primary_id => $id,",
          "522:                         } else {",
          "526:                                     $table_primary_id => $id,",
          "",
          "---------------"
        ],
        "src/Helpers/GetData.php||src/Helpers/GetData.php": [
          "File: src/Helpers/GetData.php -> src/Helpers/GetData.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:         $records = collect($records)->map(function ($record) use ($data_rows) {",
          "130:             foreach ($data_rows as $index => $data_row) {",
          "132:                     $table_manytomany = $data_row['field'];",
          "133:                     $data_relation = DB::table($table_manytomany)",
          "134:                         ->get();",
          "135:                     $record->$table_manytomany = $data_relation;",
          "137:                 }",
          "139:         });",
          "141:         $data = [];",
          "142:         foreach ($records as $row) {",
          "143:             $data[] = self::getRelationData($data_type, $row);",
          "144:         }",
          "146:         $entities['data'] = $data;",
          "147:         $entities['total'] = count($data);",
          "148:         return $entities;",
          "149:     }",
          "",
          "[Removed Lines]",
          "131:                  if (isset($data_row->relation) && $data_row->relation['relation_type'] == 'belongs_to_many') {",
          "136:                  };",
          "138:                 return $record;",
          "",
          "[Added Lines]",
          "131:                 if (isset($data_row->relation) && $data_row->relation['relation_type'] == 'belongs_to_many') {",
          "137:             }",
          "139:             return $record;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:         $field_manytomany = [];",
          "228:         foreach ($data_rows as $key => $data_row) {",
          "230:                 $field_manytomany[] = $data_row['field'];",
          "231:             }",
          "232:         }",
          "235:         $order_field = $builder_params['order_field'];",
          "236:         $order_direction = $builder_params['order_direction'];",
          "238:         if ($order_field) {",
          "240:         } else {",
          "241:             $records = DB::table($data_type->name)->select($fields);",
          "242:         }",
          "",
          "[Removed Lines]",
          "229:             if(isset($data_row['relation']) && $data_row['relation']['relation_type'] == 'belongs_to_many'){",
          "234:         $fields = array_diff(array_merge($fields, $ids), $field_manytomany) ;",
          "239:             $records = DB::table($data_type->name)->select( $fields)->orderBy($order_field, $order_direction);",
          "",
          "[Added Lines]",
          "231:             if (isset($data_row['relation']) && $data_row['relation']['relation_type'] == 'belongs_to_many') {",
          "236:         $fields = array_diff(array_merge($fields, $ids), $field_manytomany);",
          "241:             $records = DB::table($data_type->name)->select($fields)->orderBy($order_field, $order_direction);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "275:                         }",
          "276:                         $record->{$data_row->field} = $upload_image_multiples;",
          "277:                     }",
          "279:                     if (isset($record->{$data_row->field})) {",
          "280:                         $upload_image = $record->{$data_row->field};",
          "281:                         if (isset($upload_image)) {",
          "",
          "[Removed Lines]",
          "278:                 } else if ($data_row->type == 'upload_image') {",
          "",
          "[Added Lines]",
          "280:                 } elseif ($data_row->type == 'upload_image') {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "291:                             $record->{$data_row->field} = $upload_image;",
          "292:                         }",
          "293:                     }",
          "296:                     $table_manytomany = $data_row['field'];",
          "297:                     $data_relation = DB::table($table_manytomany)->get();",
          "298:                     $record->$table_manytomany = $data_relation;",
          "",
          "[Removed Lines]",
          "294:                 }",
          "295:                 else if (isset($data_row->relation) && $data_row->relation['relation_type'] == 'belongs_to_many') {",
          "",
          "[Added Lines]",
          "296:                 } elseif (isset($data_row->relation) && $data_row->relation['relation_type'] == 'belongs_to_many') {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "354:                 }",
          "356:                 if (isset($row->{$field->field})) {",
          "358:                         $data_table_destination = DB::table($destination_table)->get();",
          "360:                         $row->{$field->field}->filter(function ($fields, $key) use ($data_table_destination, $destination_table, $destination_table_display_column) {",
          "361:                             foreach ($data_table_destination as $key => $value) {",
          "363:                                     $fields->{$destination_table_display_column} = $value->{$destination_table_display_column};",
          "364:                                 }",
          "365:                             }",
          "366:                         });",
          "369:                                 return $field;",
          "371:                         });",
          "373:                         $relation_data = DB::table($destination_table)->select($arr_query_select)",
          "374:                             ->where($destination_table_column, $row->{$field->field})",
          "375:                             ->get();",
          "377:                                 case 'belongs_to':",
          "378:                                     if (isset($row->{$destination_table})) {",
          "379:                                         array_push($row->{$destination_table}, collect($relation_data)->first());",
          "",
          "[Removed Lines]",
          "357:                     if($field->relation['relation_type'] == 'belongs_to_many'){",
          "359:                         $table_primary_id = $data_type['name'] . '_id';",
          "362:                                 if($fields->{$destination_table.'_id'} == $value->id){",
          "367:                         $row->{$field->field} = $row->{$field->field}->filter(function ($field, $key) use ($row,$table_primary_id) {",
          "368:                             if($field->{$table_primary_id} == $row->id){",
          "370:                             };",
          "372:                     }else{",
          "376:                             switch ($relation_type) {",
          "",
          "[Added Lines]",
          "358:                     if ($field->relation['relation_type'] == 'belongs_to_many') {",
          "360:                         $table_primary_id = $data_type['name'].'_id';",
          "363:                                 if ($fields->{$destination_table.'_id'} == $value->id) {",
          "368:                         $row->{$field->field} = $row->{$field->field}->filter(function ($field, $key) use ($row, $table_primary_id) {",
          "369:                             if ($field->{$table_primary_id} == $row->id) {",
          "371:                             }",
          "373:                     } else {",
          "377:                         switch ($relation_type) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "381:                                         $row->{$destination_table} = collect($relation_data)->toArray();",
          "382:                                     }",
          "383:                                     break;",
          "385:                                 case 'has_many':",
          "386:                                     $row->{$destination_table} = collect($relation_data)->toArray();",
          "387:                                     break;",
          "389:                                 case 'has_one':",
          "390:                                     $row->{$destination_table} = collect($relation_data)->first();",
          "391:                                     break;",
          "393:                                 default:",
          "395:                                     break;",
          "396:                             }",
          "398:                 }",
          "399:             }",
          "400:         }",
          "401:         return $row;",
          "402:     }",
          "403: }",
          "",
          "[Removed Lines]",
          "397:                     }",
          "",
          "[Added Lines]",
          "398:                     }",
          "",
          "---------------"
        ],
        "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php": [
          "File: tests/Feature/BadasoApiCrudManagementTest.php -> tests/Feature/BadasoApiCrudManagementTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:         $table_names = [];",
          "252:         for ($index = 1; $index <= $max_count_table_generate; $index++) {",
          "253:             $table_name = \"{$this->TABLE_TEST_PREFIX}{$index}\";",
          "255:                 Schema::create($table_name, function (Blueprint $table) use ($index, $table_names) {",
          "256:                     $table->id();",
          "",
          "[Removed Lines]",
          "254:             if (!Schema::hasTable($table_name)) {",
          "",
          "[Added Lines]",
          "254:             if (! Schema::hasTable($table_name)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "444:                 }",
          "445:                 PHP;",
          "446:                 $model_path = app_path(\"Models/$model_file_name\");",
          "448:                     file_put_contents($model_path, $model_body);",
          "449:                 }",
          "",
          "[Removed Lines]",
          "447:                 if (!file_exists($model_path)) {",
          "",
          "[Added Lines]",
          "447:                 if (! file_exists($model_path)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "465:             $controller_data = [];",
          "466:             if (rand(0, 1)) {",
          "469:                 $controller_file_name = \"{$controller_name}.php\";",
          "470:                 $controller_body = <<<PHP",
          "471:                 <?php",
          "",
          "[Removed Lines]",
          "468:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)) . 'Controller';",
          "",
          "[Added Lines]",
          "468:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)).'Controller';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "474:                 class {$controller_name} extends \\Uasoft\\Badaso\\Controllers\\BadasoBaseController {}",
          "475:                 PHP;",
          "476:                 $controller_path = app_path(\"/Http/Controllers/$controller_file_name\");",
          "478:                     file_put_contents($controller_path, $controller_body);",
          "479:                 }",
          "",
          "[Removed Lines]",
          "477:                 if (!file_exists($controller_path)) {",
          "",
          "[Added Lines]",
          "477:                 if (! file_exists($controller_path)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "917:             if ($table['table'] == 'table_relation') {",
          "918:                 for ($i = 0; $i < 2; $i++) {",
          "919:                     $field[$i] = [",
          "922:                         'fieldType' => 'bigint',",
          "923:                         'fieldLength' => null,",
          "924:                         'fieldNull' => false,",
          "",
          "[Removed Lines]",
          "920:                         'id' => $name_table[$i] . '_id',",
          "921:                         'fieldName' => $name_table[$i] . '_id',",
          "",
          "[Added Lines]",
          "920:                         'id' => $name_table[$i].'_id',",
          "921:                         'fieldName' => $name_table[$i].'_id',",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "931:                     array_push($table['rows'], $field[$i]);",
          "932:                 }",
          "933:                 $table['relations'] = [",
          "940:                     ],",
          "948:                 ];",
          "949:             }",
          "950:             $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/database/add'), $table);",
          "",
          "[Removed Lines]",
          "934:                     $name_table[1] . \"_id\" => [",
          "935:                         \"source_field\" => $name_table[1] . \"_id\",",
          "936:                         \"target_table\" => $name_table[1],",
          "937:                         \"target_field\" => \"id\",",
          "938:                         \"on_delete\" => \"cascade\",",
          "939:                         \"on_update\" => \"restrict\",",
          "941:                     $name_table[0] . \"_id\" => [",
          "942:                         \"source_field\" => $name_table[0] . \"_id\",",
          "943:                         \"target_table\" => $name_table[0],",
          "944:                         \"target_field\" => \"id\",",
          "945:                         \"on_delete\" => \"cascade\",",
          "946:                         \"on_update\" => \"restrict\",",
          "947:                     ]",
          "",
          "[Added Lines]",
          "934:                     $name_table[1].'_id' => [",
          "935:                         'source_field' => $name_table[1].'_id',",
          "936:                         'target_table' => $name_table[1],",
          "937:                         'target_field' => 'id',",
          "938:                         'on_delete' => 'cascade',",
          "939:                         'on_update' => 'restrict',",
          "940:                     ],",
          "941:                     $name_table[0].'_id' => [",
          "942:                         'source_field' => $name_table[0].'_id',",
          "943:                         'target_table' => $name_table[0],",
          "944:                         'target_field' => 'id',",
          "945:                         'on_delete' => 'cascade',",
          "946:                         'on_update' => 'restrict',",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "953:         foreach ($name_table as $key => $crud_table) {",
          "954:             $crud_table = [",
          "955:                 'name' => $crud_table,",
          "957:                 'displayNameSingular' => $crud_table,",
          "958:                 'displayNamePlural' => $crud_table,",
          "959:                 'icon' => '',",
          "",
          "[Removed Lines]",
          "956:                 'slug' => 'table-' . $key + 1,",
          "",
          "[Added Lines]",
          "956:                 'slug' => 'table-'.$key + 1,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1032:                     ],",
          "1033:                 ],",
          "1034:             ];",
          "1036:                 'field' => 'table_relation',",
          "1037:                 'type' => 'relation',",
          "1038:                 'displayName' => 'table 1 table 2 relation',",
          "",
          "[Removed Lines]",
          "1035:             $relation_field =  [",
          "",
          "[Added Lines]",
          "1035:             $relation_field = [",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1065:     {",
          "1066:         $table_lists = ['table_relation', 'table_destination', 'table_primary'];",
          "1067:         $name_table = ['table-2', 'table-1'];",
          "1073:         ];",
          "1074:         $data_table_primary = [",
          "1079:         ];",
          "1081:         foreach ($name_table as $key => $table) {",
          "1082:             if ($table == 'table-2') {",
          "1083:                 for ($i = 1; $i < 4; $i++) {",
          "1089:                     ]);",
          "1090:                 }",
          "1091:             } else {",
          "1093:                 $response->assertSuccessful();",
          "1094:             }",
          "1095:         }",
          "1099:         $response->assertSuccessful();",
          "1100:         $data_browse = $response['data']['data'][0];",
          "1110:         ]);",
          "1111:         $response->assertSuccessful();",
          "1117:                 [",
          "1122:         ]);",
          "1124:         $response_crud_table = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/crud?'));",
          "",
          "[Removed Lines]",
          "1068:         $data_table_destination =  [",
          "1069:             \"data\" =>",
          "1070:             [",
          "1071:                 \"name\" => \"option 1\"",
          "1072:             ]",
          "1075:             \"data\" => [",
          "1076:                 \"name\" => \"lorem ipsum\",",
          "1077:                 \"table_relation\" => [2, 3]",
          "1078:             ]",
          "1084:                     $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/entities/' . $table . '/add'), [",
          "1085:                         \"data\" =>",
          "1086:                         [",
          "1087:                             \"name\" => \"option \" . $i",
          "1088:                         ]",
          "1092:                 $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/entities/' . $table . '/add'), $data_table_primary);",
          "1098:         $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/entities/' . $table));",
          "1104:         $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix('/entities/' . $table . '/edit'), [",
          "1105:             \"data\" => [",
          "1106:                 \"id\" => $data_browse['id'],",
          "1107:                 \"name\" => \"lorem ipsum\",",
          "1108:                 \"table_relation\" => [1, 2]",
          "1109:             ]",
          "1114:         $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix('/entities/' . $table . '/delete'), [",
          "1115:             \"slug\" => $table,",
          "1116:             \"data\" => [",
          "1118:                     \"field\" => \"id\",",
          "1119:                     \"value\" => $data_browse['id']",
          "1120:                 ]",
          "1121:             ]",
          "",
          "[Added Lines]",
          "1068:         $data_table_destination = [",
          "1069:             'data' => [",
          "1070:                 'name' => 'option 1',",
          "1071:             ],",
          "1074:             'data' => [",
          "1075:                 'name' => 'lorem ipsum',",
          "1076:                 'table_relation' => [2, 3],",
          "1077:             ],",
          "1083:                     $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/entities/'.$table.'/add'), [",
          "1084:                         'data' => [",
          "1085:                             'name' => 'option '.$i,",
          "1086:                         ],",
          "1090:                 $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/entities/'.$table.'/add'), $data_table_primary);",
          "1096:         $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/entities/'.$table));",
          "1101:         $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix('/entities/'.$table.'/edit'), [",
          "1102:             'data' => [",
          "1103:                 'id' => $data_browse['id'],",
          "1104:                 'name' => 'lorem ipsum',",
          "1105:                 'table_relation' => [1, 2],",
          "1106:             ],",
          "1111:         $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix('/entities/'.$table.'/delete'), [",
          "1112:             'slug' => $table,",
          "1113:             'data' => [",
          "1115:                     'field' => 'id',",
          "1116:                     'value' => $data_browse['id'],",
          "1117:                 ],",
          "1118:             ],",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1132:                 }",
          "1133:             }",
          "1134:         }",
          "1136:         foreach ($table_lists as $key => $table) {",
          "1137:             if ($table != $table_lists[0]) {",
          "1138:                 foreach ($ids_list_table as $key => $id) {",
          "1139:                     $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix('/crud/delete'), $id);",
          "1140:                 }",
          "1141:             }",
          "1143:         }",
          "1144:     }",
          "",
          "[Removed Lines]",
          "1142:             $deleted =  Schema::dropIfExists($table);",
          "",
          "[Added Lines]",
          "1139:             $deleted = Schema::dropIfExists($table);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1477:                 }",
          "1478:                 PHP;",
          "1479:                 $model_path = app_path(\"Models/$model_file_name\");",
          "1481:                     file_put_contents($model_path, $model_body);",
          "1482:                 }",
          "",
          "[Removed Lines]",
          "1480:                 if (!file_exists($model_path)) {",
          "",
          "[Added Lines]",
          "1477:                 if (! file_exists($model_path)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1498:             $controller_data = [];",
          "1499:             if (rand(0, 1)) {",
          "1502:                 $controller_file_name = \"{$controller_name}.php\";",
          "1503:                 $controller_body = <<<PHP",
          "1504:                 <?php",
          "",
          "[Removed Lines]",
          "1501:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)) . 'Controller';",
          "",
          "[Added Lines]",
          "1498:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)).'Controller';",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1507:                 class {$controller_name} extends \\Uasoft\\Badaso\\Controllers\\BadasoBaseController {}",
          "1508:                 PHP;",
          "1509:                 $controller_path = app_path(\"/Http/Controllers/$controller_file_name\");",
          "1511:                     file_put_contents($controller_path, $controller_body);",
          "1512:                 }",
          "",
          "[Removed Lines]",
          "1510:                 if (!file_exists($controller_path)) {",
          "",
          "[Added Lines]",
          "1507:                 if (! file_exists($controller_path)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1527:             $request_body = [",
          "1528:                 'name' =>  $table_name,",
          "1529:                 'slug' =>  $table_name,",
          "1532:                 'icon' =>  'add',",
          "1533:                 'modelName' =>  $model,",
          "1534:                 'policyName' =>  '',",
          "",
          "[Removed Lines]",
          "1530:                 'displayNameSingular' =>  $table_label . '(update)',",
          "1531:                 'displayNamePlural' =>  $table_label . '(update)',",
          "",
          "[Added Lines]",
          "1527:                 'displayNameSingular' =>  $table_label.'(update)',",
          "1528:                 'displayNamePlural' =>  $table_label.'(update)',",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1614:             $controller_name = \"{$name}Controller.php\";",
          "1616:             if (file_exists($controller_path)) {",
          "1617:                 unlink($controller_path);",
          "1618:             }",
          "1621:             $model_name = \"{$name}.php\";",
          "1623:             if (file_exists($model_path)) {",
          "1624:                 unlink($model_path);",
          "1625:             }",
          "",
          "[Removed Lines]",
          "1615:             $controller_path = app_path('Http/Controllers/' . $controller_name);",
          "1622:             $model_path = app_path('Models/' . $model_name);",
          "",
          "[Added Lines]",
          "1612:             $controller_path = app_path('Http/Controllers/'.$controller_name);",
          "1619:             $model_path = app_path('Models/'.$model_name);",
          "",
          "---------------"
        ]
      }
    }
  ]
}