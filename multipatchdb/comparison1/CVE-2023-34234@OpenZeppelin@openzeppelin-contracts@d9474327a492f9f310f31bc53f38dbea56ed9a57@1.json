{
  "cve_id": "CVE-2023-34234",
  "cve_desc": " OpenZeppelin Contracts is a library for smart contract development. By frontrunning the creation of a proposal, an attacker can become the proposer and gain the ability to cancel it. The attacker can do this repeatedly to try to prevent a proposal from being proposed at all. This impacts the `Governor` contract in v4.9.0 only, and the `GovernorCompatibilityBravo` contract since v4.3.0. This problem has been patched in 4.9.1 by introducing opt-in frontrunning protection. Users are advised to upgrade. Users unable to upgrade may submit the proposal creation transaction to an endpoint with frontrunning protection as a workaround.",
  "repo": "OpenZeppelin/openzeppelin-contracts",
  "patch_hash": "d9474327a492f9f310f31bc53f38dbea56ed9a57",
  "patch_info": {
    "commit_hash": "d9474327a492f9f310f31bc53f38dbea56ed9a57",
    "repo": "OpenZeppelin/openzeppelin-contracts",
    "commit_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/d9474327a492f9f310f31bc53f38dbea56ed9a57",
    "files": [
      ".changeset/swift-bags-divide.md",
      "contracts/governance/Governor.sol",
      "test/governance/Governor.t.sol",
      "test/governance/Governor.test.js"
    ],
    "message": "Merge pull request from GHSA-5h3x-9wvq-w4m2\n\nCo-authored-by: Francisco <fg@frang.io>\nCo-authored-by: Ernesto Garc\u00eda <ernestognw@gmail.com>",
    "before_after_code_files": [
      "contracts/governance/Governor.sol||contracts/governance/Governor.sol",
      "test/governance/Governor.t.sol||test/governance/Governor.t.sol",
      "test/governance/Governor.test.js||test/governance/Governor.test.js"
    ]
  },
  "patch_diff": {
    "contracts/governance/Governor.sol||contracts/governance/Governor.sol": [
      "File: contracts/governance/Governor.sol -> contracts/governance/Governor.sol",
      "--- Hunk 1 ---",
      "[Context before]",
      "272:         string memory description",
      "273:     ) public virtual override returns (uint256) {",
      "274:         address proposer = _msgSender();",
      "277:         require(",
      "278:             getVotes(proposer, currentTimepoint - 1) >= proposalThreshold(),",
      "279:             \"Governor: proposer votes below proposal threshold\"",
      "",
      "[Removed Lines]",
      "275:         uint256 currentTimepoint = clock();",
      "",
      "[Added Lines]",
      "275:         require(_isValidDescriptionForProposer(proposer, description), \"Governor: proposer restricted\");",
      "277:         uint256 currentTimepoint = clock();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "628:     ) public virtual returns (bytes4) {",
      "629:         return this.onERC1155BatchReceived.selector;",
      "630:     }",
      "631: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "650:     function _isValidDescriptionForProposer(",
      "651:         address proposer,",
      "652:         string memory description",
      "653:     ) internal view virtual returns (bool) {",
      "654:         uint256 len = bytes(description).length;",
      "657:         if (len < 52) {",
      "658:             return true;",
      "659:         }",
      "662:         bytes12 marker;",
      "663:         assembly {",
      "670:             marker := mload(add(description, sub(len, 20)))",
      "671:         }",
      "674:         if (marker != bytes12(\"#proposer=0x\")) {",
      "675:             return true;",
      "676:         }",
      "679:         uint160 recovered = 0;",
      "680:         for (uint256 i = len - 40; i < len; ++i) {",
      "681:             (bool isHex, uint8 value) = _tryHexToUint(bytes(description)[i]);",
      "683:             if (!isHex) {",
      "684:                 return true;",
      "685:             }",
      "686:             recovered = (recovered << 4) | value;",
      "687:         }",
      "689:         return recovered == uint160(proposer);",
      "690:     }",
      "696:     function _tryHexToUint(bytes1 char) private pure returns (bool, uint8) {",
      "697:         uint8 c = uint8(char);",
      "698:         unchecked {",
      "700:             if (47 < c && c < 58) {",
      "701:                 return (true, c - 48);",
      "702:             }",
      "704:             else if (64 < c && c < 71) {",
      "705:                 return (true, c - 55);",
      "706:             }",
      "708:             else if (96 < c && c < 103) {",
      "709:                 return (true, c - 87);",
      "710:             }",
      "712:             else {",
      "713:                 return (false, 0);",
      "714:             }",
      "715:         }",
      "716:     }",
      "",
      "---------------"
    ],
    "test/governance/Governor.t.sol||test/governance/Governor.t.sol": [
      "File: test/governance/Governor.t.sol -> test/governance/Governor.t.sol",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: pragma solidity ^0.8.19;",
      "5: import \"forge-std/Test.sol\";",
      "6: import \"../../contracts/utils/Strings.sol\";",
      "7: import \"../../contracts/governance/Governor.sol\";",
      "9: contract GovernorInternalTest is Test, Governor {",
      "10:     constructor() Governor(\"\") {}",
      "12:     function testValidDescriptionForProposer(string memory description, address proposer, bool includeProposer) public {",
      "13:         if (includeProposer) {",
      "14:             description = string.concat(description, \"#proposer=\", Strings.toHexString(proposer));",
      "15:         }",
      "16:         assertTrue(_isValidDescriptionForProposer(proposer, description));",
      "17:     }",
      "19:     function testInvalidDescriptionForProposer(",
      "20:         string memory description,",
      "21:         address commitProposer,",
      "22:         address actualProposer",
      "23:     ) public {",
      "24:         vm.assume(commitProposer != actualProposer);",
      "25:         description = string.concat(description, \"#proposer=\", Strings.toHexString(commitProposer));",
      "26:         assertFalse(_isValidDescriptionForProposer(actualProposer, description));",
      "27:     }",
      "32:     function clock() public pure override returns (uint48) {}",
      "35:     function CLOCK_MODE() public pure override returns (string memory) {}",
      "38:     function COUNTING_MODE() public pure virtual override returns (string memory) {}",
      "40:     function votingDelay() public pure virtual override returns (uint256) {}",
      "42:     function votingPeriod() public pure virtual override returns (uint256) {}",
      "44:     function quorum(uint256) public pure virtual override returns (uint256) {}",
      "46:     function hasVoted(uint256, address) public pure virtual override returns (bool) {}",
      "48:     function _quorumReached(uint256) internal pure virtual override returns (bool) {}",
      "50:     function _voteSucceeded(uint256) internal pure virtual override returns (bool) {}",
      "52:     function _getVotes(address, uint256, bytes memory) internal pure virtual override returns (uint256) {}",
      "54:     function _countVote(uint256, address, uint8, uint256, bytes memory) internal virtual override {}",
      "55: }",
      "",
      "---------------"
    ],
    "test/governance/Governor.test.js||test/governance/Governor.test.js": [
      "File: test/governance/Governor.test.js -> test/governance/Governor.test.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "551:         });",
      "552:       });",
      "554:       describe('onlyGovernance updates', function () {",
      "555:         it('setVotingDelay is protected', async function () {",
      "556:           await expectRevert(this.mock.setVotingDelay('0'), 'Governor: onlyGovernance');",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "554:       describe('frontrun protection using description suffix', function () {",
      "555:         describe('without protection', function () {",
      "556:           describe('without suffix', function () {",
      "557:             it('proposer can propose', async function () {",
      "558:               expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
      "559:             });",
      "561:             it('someone else can propose', async function () {",
      "562:               expectEvent(await this.helper.propose({ from: voter1 }), 'ProposalCreated');",
      "563:             });",
      "564:           });",
      "566:           describe('with different suffix', function () {",
      "567:             beforeEach(async function () {",
      "568:               this.proposal = this.helper.setProposal(",
      "569:                 [",
      "570:                   {",
      "571:                     target: this.receiver.address,",
      "572:                     data: this.receiver.contract.methods.mockFunction().encodeABI(),",
      "573:                     value,",
      "574:                   },",
      "575:                 ],",
      "576:                 `<proposal description>#wrong-suffix=${proposer}`,",
      "577:               );",
      "578:             });",
      "580:             it('proposer can propose', async function () {",
      "581:               expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
      "582:             });",
      "584:             it('someone else can propose', async function () {",
      "585:               expectEvent(await this.helper.propose({ from: voter1 }), 'ProposalCreated');",
      "586:             });",
      "587:           });",
      "589:           describe('with proposer suffix but bad address part', function () {",
      "590:             beforeEach(async function () {",
      "591:               this.proposal = this.helper.setProposal(",
      "592:                 [",
      "593:                   {",
      "594:                     target: this.receiver.address,",
      "595:                     data: this.receiver.contract.methods.mockFunction().encodeABI(),",
      "596:                     value,",
      "597:                   },",
      "598:                 ],",
      "599:                 `<proposal description>#proposer=0x3C44CdDdB6a900fa2b585dd299e03d12FA429XYZ`, // XYZ are not a valid hex char",
      "600:               );",
      "601:             });",
      "603:             it('propose can propose', async function () {",
      "604:               expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
      "605:             });",
      "607:             it('someone else can propose', async function () {",
      "608:               expectEvent(await this.helper.propose({ from: voter1 }), 'ProposalCreated');",
      "609:             });",
      "610:           });",
      "611:         });",
      "613:         describe('with protection via proposer suffix', function () {",
      "614:           beforeEach(async function () {",
      "615:             this.proposal = this.helper.setProposal(",
      "616:               [",
      "617:                 {",
      "618:                   target: this.receiver.address,",
      "619:                   data: this.receiver.contract.methods.mockFunction().encodeABI(),",
      "620:                   value,",
      "621:                 },",
      "622:               ],",
      "623:               `<proposal description>#proposer=${proposer}`,",
      "624:             );",
      "625:           });",
      "627:           it('proposer can propose', async function () {",
      "628:             expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
      "629:           });",
      "631:           it('someone else cannot propose', async function () {",
      "632:             await expectRevert(this.helper.propose({ from: voter1 }), 'Governor: proposer restricted');",
      "633:           });",
      "634:         });",
      "635:       });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c1d6ad5a307945c7825cb3c4c911f2fd017c8725",
      "candidate_info": {
        "commit_hash": "c1d6ad5a307945c7825cb3c4c911f2fd017c8725",
        "repo": "OpenZeppelin/openzeppelin-contracts",
        "commit_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/c1d6ad5a307945c7825cb3c4c911f2fd017c8725",
        "files": [
          ".changeset/eight-eyes-burn.md",
          "CHANGELOG.md",
          "contracts/governance/Governor.sol",
          "contracts/governance/IGovernor.sol",
          "contracts/governance/README.adoc",
          "contracts/governance/extensions/GovernorCountingFractional.sol",
          "contracts/governance/extensions/GovernorCountingSimple.sol",
          "contracts/mocks/governance/GovernorFractionalMock.sol",
          "contracts/mocks/governance/GovernorWithParamsMock.sol",
          "test/governance/Governor.t.sol",
          "test/governance/extensions/GovernorCountingFractional.test.js",
          "test/helpers/enums.js"
        ],
        "message": "Add GovernorCountingFractional (#5045)\n\nCo-authored-by: ernestognw <ernestognw@gmail.com>\nCo-authored-by: Francisco <fg@frang.io>",
        "before_after_code_files": [
          "contracts/governance/Governor.sol||contracts/governance/Governor.sol",
          "contracts/governance/IGovernor.sol||contracts/governance/IGovernor.sol",
          "contracts/governance/extensions/GovernorCountingFractional.sol||contracts/governance/extensions/GovernorCountingFractional.sol",
          "contracts/governance/extensions/GovernorCountingSimple.sol||contracts/governance/extensions/GovernorCountingSimple.sol",
          "contracts/mocks/governance/GovernorFractionalMock.sol||contracts/mocks/governance/GovernorFractionalMock.sol",
          "contracts/mocks/governance/GovernorWithParamsMock.sol||contracts/mocks/governance/GovernorWithParamsMock.sol",
          "test/governance/Governor.t.sol||test/governance/Governor.t.sol",
          "test/governance/extensions/GovernorCountingFractional.test.js||test/governance/extensions/GovernorCountingFractional.test.js",
          "test/helpers/enums.js||test/helpers/enums.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "contracts/governance/Governor.sol||contracts/governance/Governor.sol",
            "test/governance/Governor.t.sol||test/governance/Governor.t.sol"
          ],
          "candidate": [
            "contracts/governance/Governor.sol||contracts/governance/Governor.sol",
            "test/governance/Governor.t.sol||test/governance/Governor.t.sol"
          ]
        }
      },
      "candidate_diff": {
        "contracts/governance/Governor.sol||contracts/governance/Governor.sol": [
          "File: contracts/governance/Governor.sol -> contracts/governance/Governor.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:         uint256 proposalId,",
          "256:         address account,",
          "257:         uint8 support,",
          "259:         bytes memory params",
          "",
          "[Removed Lines]",
          "258:         uint256 weight,",
          "260:     ) internal virtual;",
          "",
          "[Added Lines]",
          "258:         uint256 totalWeight,",
          "260:     ) internal virtual returns (uint256);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "639:     ) internal virtual returns (uint256) {",
          "640:         _validateStateBitmap(proposalId, _encodeStateBitmap(ProposalState.Active));",
          "645:         if (params.length == 0) {",
          "647:         } else {",
          "649:         }",
          "652:     }",
          "",
          "[Removed Lines]",
          "642:         uint256 weight = _getVotes(account, proposalSnapshot(proposalId), params);",
          "643:         _countVote(proposalId, account, support, weight, params);",
          "646:             emit VoteCast(account, proposalId, support, weight, reason);",
          "648:             emit VoteCastWithParams(account, proposalId, support, weight, reason, params);",
          "651:         return weight;",
          "",
          "[Added Lines]",
          "642:         uint256 totalWeight = _getVotes(account, proposalSnapshot(proposalId), params);",
          "643:         uint256 votedWeight = _countVote(proposalId, account, support, totalWeight, params);",
          "646:             emit VoteCast(account, proposalId, support, votedWeight, reason);",
          "648:             emit VoteCastWithParams(account, proposalId, support, votedWeight, reason, params);",
          "651:         return votedWeight;",
          "",
          "---------------"
        ],
        "contracts/governance/IGovernor.sol||contracts/governance/IGovernor.sol": [
          "File: contracts/governance/IGovernor.sol -> contracts/governance/IGovernor.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:     error GovernorInvalidVoteType();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:     error GovernorInvalidVoteParams();",
          "",
          "---------------"
        ],
        "contracts/governance/extensions/GovernorCountingFractional.sol||contracts/governance/extensions/GovernorCountingFractional.sol": [
          "File: contracts/governance/extensions/GovernorCountingFractional.sol -> contracts/governance/extensions/GovernorCountingFractional.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: pragma solidity ^0.8.20;",
          "5: import {Governor} from \"../Governor.sol\";",
          "6: import {GovernorCountingSimple} from \"./GovernorCountingSimple.sol\";",
          "7: import {Math} from \"../../utils/math/Math.sol\";",
          "31: abstract contract GovernorCountingFractional is Governor {",
          "32:     using Math for *;",
          "34:     uint8 internal constant VOTE_TYPE_FRACTIONAL = 255;",
          "36:     struct ProposalVote {",
          "37:         uint256 againstVotes;",
          "38:         uint256 forVotes;",
          "39:         uint256 abstainVotes;",
          "40:         mapping(address voter => uint256) usedVotes;",
          "41:     }",
          "46:     mapping(uint256 => ProposalVote) private _proposalVotes;",
          "51:     error GovernorExceedRemainingWeight(address voter, uint256 usedVotes, uint256 remainingWeight);",
          "57:     function COUNTING_MODE() public pure virtual override returns (string memory) {",
          "58:         return \"support=bravo,fractional&quorum=for,abstain&params=fractional\";",
          "59:     }",
          "64:     function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {",
          "65:         return usedVotes(proposalId, account) > 0;",
          "66:     }",
          "72:     function usedVotes(uint256 proposalId, address account) public view virtual returns (uint256) {",
          "73:         return _proposalVotes[proposalId].usedVotes[account];",
          "74:     }",
          "79:     function proposalVotes(",
          "80:         uint256 proposalId",
          "81:     ) public view virtual returns (uint256 againstVotes, uint256 forVotes, uint256 abstainVotes) {",
          "82:         ProposalVote storage proposalVote = _proposalVotes[proposalId];",
          "83:         return (proposalVote.againstVotes, proposalVote.forVotes, proposalVote.abstainVotes);",
          "84:     }",
          "89:     function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {",
          "90:         ProposalVote storage proposalVote = _proposalVotes[proposalId];",
          "91:         return quorum(proposalSnapshot(proposalId)) <= proposalVote.forVotes + proposalVote.abstainVotes;",
          "92:     }",
          "97:     function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {",
          "98:         ProposalVote storage proposalVote = _proposalVotes[proposalId];",
          "99:         return proposalVote.forVotes > proposalVote.againstVotes;",
          "100:     }",
          "132:     function _countVote(",
          "133:         uint256 proposalId,",
          "134:         address account,",
          "135:         uint8 support,",
          "136:         uint256 totalWeight,",
          "137:         bytes memory params",
          "138:     ) internal virtual override returns (uint256) {",
          "140:         (, uint256 remainingWeight) = totalWeight.trySub(usedVotes(proposalId, account));",
          "141:         if (remainingWeight == 0) {",
          "142:             revert GovernorAlreadyCastVote(account);",
          "143:         }",
          "145:         uint256 againstVotes = 0;",
          "146:         uint256 forVotes = 0;",
          "147:         uint256 abstainVotes = 0;",
          "148:         uint256 usedWeight;",
          "155:         if (support == uint8(GovernorCountingSimple.VoteType.Against)) {",
          "156:             if (params.length != 0) revert GovernorInvalidVoteParams();",
          "157:             usedWeight = againstVotes = remainingWeight;",
          "158:         } else if (support == uint8(GovernorCountingSimple.VoteType.For)) {",
          "159:             if (params.length != 0) revert GovernorInvalidVoteParams();",
          "160:             usedWeight = forVotes = remainingWeight;",
          "161:         } else if (support == uint8(GovernorCountingSimple.VoteType.Abstain)) {",
          "162:             if (params.length != 0) revert GovernorInvalidVoteParams();",
          "163:             usedWeight = abstainVotes = remainingWeight;",
          "164:         } else if (support == VOTE_TYPE_FRACTIONAL) {",
          "167:             if (params.length != 0x30) revert GovernorInvalidVoteParams();",
          "169:             assembly (\"memory-safe\") {",
          "170:                 againstVotes := shr(128, mload(add(params, 0x20)))",
          "171:                 forVotes := shr(128, mload(add(params, 0x30)))",
          "172:                 abstainVotes := shr(128, mload(add(params, 0x40)))",
          "173:                 usedWeight := add(add(againstVotes, forVotes), abstainVotes) // inputs are uint128: cannot overflow",
          "174:             }",
          "177:             if (usedWeight > remainingWeight) {",
          "178:                 revert GovernorExceedRemainingWeight(account, usedWeight, remainingWeight);",
          "179:             }",
          "180:         } else {",
          "181:             revert GovernorInvalidVoteType();",
          "182:         }",
          "185:         ProposalVote storage details = _proposalVotes[proposalId];",
          "186:         if (againstVotes > 0) details.againstVotes += againstVotes;",
          "187:         if (forVotes > 0) details.forVotes += forVotes;",
          "188:         if (abstainVotes > 0) details.abstainVotes += abstainVotes;",
          "189:         details.usedVotes[account] += usedWeight;",
          "191:         return usedWeight;",
          "192:     }",
          "193: }",
          "",
          "---------------"
        ],
        "contracts/governance/extensions/GovernorCountingSimple.sol||contracts/governance/extensions/GovernorCountingSimple.sol": [
          "File: contracts/governance/extensions/GovernorCountingSimple.sol -> contracts/governance/extensions/GovernorCountingSimple.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:         uint256 proposalId,",
          "78:         address account,",
          "79:         uint8 support,",
          "81:         bytes memory // params",
          "83:         ProposalVote storage proposalVote = _proposalVotes[proposalId];",
          "85:         if (proposalVote.hasVoted[account]) {",
          "",
          "[Removed Lines]",
          "80:         uint256 weight,",
          "82:     ) internal virtual override {",
          "",
          "[Added Lines]",
          "80:         uint256 totalWeight,",
          "82:     ) internal virtual override returns (uint256) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:         proposalVote.hasVoted[account] = true;",
          "90:         if (support == uint8(VoteType.Against)) {",
          "92:         } else if (support == uint8(VoteType.For)) {",
          "94:         } else if (support == uint8(VoteType.Abstain)) {",
          "96:         } else {",
          "97:             revert GovernorInvalidVoteType();",
          "98:         }",
          "99:     }",
          "100: }",
          "",
          "[Removed Lines]",
          "91:             proposalVote.againstVotes += weight;",
          "93:             proposalVote.forVotes += weight;",
          "95:             proposalVote.abstainVotes += weight;",
          "",
          "[Added Lines]",
          "91:             proposalVote.againstVotes += totalWeight;",
          "93:             proposalVote.forVotes += totalWeight;",
          "95:             proposalVote.abstainVotes += totalWeight;",
          "100:         return totalWeight;",
          "",
          "---------------"
        ],
        "contracts/mocks/governance/GovernorFractionalMock.sol||contracts/mocks/governance/GovernorFractionalMock.sol": [
          "File: contracts/mocks/governance/GovernorFractionalMock.sol -> contracts/mocks/governance/GovernorFractionalMock.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: pragma solidity ^0.8.20;",
          "5: import {Governor} from \"../../governance/Governor.sol\";",
          "6: import {GovernorSettings} from \"../../governance/extensions/GovernorSettings.sol\";",
          "7: import {GovernorCountingFractional} from \"../../governance/extensions/GovernorCountingFractional.sol\";",
          "8: import {GovernorVotesQuorumFraction} from \"../../governance/extensions/GovernorVotesQuorumFraction.sol\";",
          "10: abstract contract GovernorFractionalMock is GovernorSettings, GovernorVotesQuorumFraction, GovernorCountingFractional {",
          "11:     function proposalThreshold() public view override(Governor, GovernorSettings) returns (uint256) {",
          "12:         return super.proposalThreshold();",
          "13:     }",
          "14: }",
          "",
          "---------------"
        ],
        "contracts/mocks/governance/GovernorWithParamsMock.sol||contracts/mocks/governance/GovernorWithParamsMock.sol": [
          "File: contracts/mocks/governance/GovernorWithParamsMock.sol -> contracts/mocks/governance/GovernorWithParamsMock.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         uint8 support,",
          "42:         uint256 weight,",
          "43:         bytes memory params",
          "45:         if (params.length > 0) {",
          "46:             (uint256 _uintParam, string memory _strParam) = abi.decode(params, (uint256, string));",
          "47:             emit CountParams(_uintParam, _strParam);",
          "",
          "[Removed Lines]",
          "44:     ) internal override(Governor, GovernorCountingSimple) {",
          "",
          "[Added Lines]",
          "44:     ) internal override(Governor, GovernorCountingSimple) returns (uint256) {",
          "",
          "---------------"
        ],
        "test/governance/Governor.t.sol||test/governance/Governor.t.sol": [
          "File: test/governance/Governor.t.sol -> test/governance/Governor.t.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     function _getVotes(address, uint256, bytes memory) internal pure virtual override returns (uint256) {}",
          "55: }",
          "",
          "[Removed Lines]",
          "54:     function _countVote(uint256, address, uint8, uint256, bytes memory) internal virtual override {}",
          "",
          "[Added Lines]",
          "54:     function _countVote(uint256, address, uint8, uint256, bytes memory) internal virtual override returns (uint256) {}",
          "",
          "---------------"
        ],
        "test/governance/extensions/GovernorCountingFractional.test.js||test/governance/extensions/GovernorCountingFractional.test.js": [
          "File: test/governance/extensions/GovernorCountingFractional.test.js -> test/governance/extensions/GovernorCountingFractional.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: const { ethers } = require('hardhat');",
          "2: const { expect } = require('chai');",
          "3: const { loadFixture } = require('@nomicfoundation/hardhat-network-helpers');",
          "5: const { GovernorHelper } = require('../../helpers/governance');",
          "6: const { VoteType } = require('../../helpers/enums');",
          "7: const { zip } = require('../../helpers/iterate');",
          "8: const { sum } = require('../../helpers/math');",
          "10: const TOKENS = [",
          "11:   { Token: '$ERC20Votes', mode: 'blocknumber' },",
          "12:   { Token: '$ERC20VotesTimestampMock', mode: 'timestamp' },",
          "13: ];",
          "15: const name = 'OZ-Governor';",
          "16: const version = '1';",
          "17: const tokenName = 'MockToken';",
          "18: const tokenSymbol = 'MTKN';",
          "19: const tokenSupply = ethers.parseEther('100');",
          "20: const votingDelay = 4n;",
          "21: const votingPeriod = 16n;",
          "22: const value = ethers.parseEther('1');",
          "24: describe('GovernorCountingFractional', function () {",
          "25:   for (const { Token, mode } of TOKENS) {",
          "26:     const fixture = async () => {",
          "27:       const [owner, proposer, voter1, voter2, voter3, voter4, other] = await ethers.getSigners();",
          "28:       const receiver = await ethers.deployContract('CallReceiverMock');",
          "30:       const token = await ethers.deployContract(Token, [tokenName, tokenSymbol, version]);",
          "31:       const mock = await ethers.deployContract('$GovernorFractionalMock', [",
          "32:         name, // name",
          "33:         votingDelay, // initialVotingDelay",
          "34:         votingPeriod, // initialVotingPeriod",
          "35:         0n, // initialProposalThreshold",
          "36:         token, // tokenAddress",
          "37:         10n, // quorumNumeratorValue",
          "38:       ]);",
          "40:       await owner.sendTransaction({ to: mock, value });",
          "41:       await token.$_mint(owner, tokenSupply);",
          "43:       const helper = new GovernorHelper(mock, mode);",
          "44:       await helper.connect(owner).delegate({ token, to: voter1, value: ethers.parseEther('10') });",
          "45:       await helper.connect(owner).delegate({ token, to: voter2, value: ethers.parseEther('7') });",
          "46:       await helper.connect(owner).delegate({ token, to: voter3, value: ethers.parseEther('5') });",
          "47:       await helper.connect(owner).delegate({ token, to: voter4, value: ethers.parseEther('2') });",
          "49:       return { owner, proposer, voter1, voter2, voter3, voter4, other, receiver, token, mock, helper };",
          "50:     };",
          "52:     describe(`using ${Token}`, function () {",
          "53:       beforeEach(async function () {",
          "54:         Object.assign(this, await loadFixture(fixture));",
          "57:         this.proposal = this.helper.setProposal(",
          "58:           [",
          "59:             {",
          "60:               target: this.receiver.target,",
          "61:               value,",
          "62:               data: this.receiver.interface.encodeFunctionData('mockFunction'),",
          "63:             },",
          "64:           ],",
          "65:           '<proposal description>',",
          "66:         );",
          "67:       });",
          "69:       it('deployment check', async function () {",
          "70:         expect(await this.mock.name()).to.equal(name);",
          "71:         expect(await this.mock.token()).to.equal(this.token);",
          "72:         expect(await this.mock.votingDelay()).to.equal(votingDelay);",
          "73:         expect(await this.mock.votingPeriod()).to.equal(votingPeriod);",
          "74:         expect(await this.mock.COUNTING_MODE()).to.equal(",
          "75:           'support=bravo,fractional&quorum=for,abstain&params=fractional',",
          "76:         );",
          "77:       });",
          "79:       it('nominal is unaffected', async function () {",
          "80:         await this.helper.connect(this.proposer).propose();",
          "81:         await this.helper.waitForSnapshot();",
          "82:         await this.helper.connect(this.voter1).vote({ support: VoteType.For, reason: 'This is nice' });",
          "83:         await this.helper.connect(this.voter2).vote({ support: VoteType.For });",
          "84:         await this.helper.connect(this.voter3).vote({ support: VoteType.Against });",
          "85:         await this.helper.connect(this.voter4).vote({ support: VoteType.Abstain });",
          "86:         await this.helper.waitForDeadline();",
          "87:         await this.helper.execute();",
          "89:         expect(await this.mock.hasVoted(this.proposal.id, this.owner)).to.be.false;",
          "90:         expect(await this.mock.hasVoted(this.proposal.id, this.voter1)).to.be.true;",
          "91:         expect(await this.mock.hasVoted(this.proposal.id, this.voter2)).to.be.true;",
          "92:         expect(await ethers.provider.getBalance(this.mock)).to.equal(0n);",
          "93:         expect(await ethers.provider.getBalance(this.receiver)).to.equal(value);",
          "94:       });",
          "96:       describe('voting with a fraction of the weight', function () {",
          "97:         it('twice', async function () {",
          "98:           await this.helper.connect(this.proposer).propose();",
          "99:           await this.helper.waitForSnapshot();",
          "101:           expect(await this.mock.proposalVotes(this.proposal.id)).to.deep.equal([0n, 0n, 0n]);",
          "102:           expect(await this.mock.hasVoted(this.proposal.id, this.voter2)).to.equal(false);",
          "103:           expect(await this.mock.usedVotes(this.proposal.id, this.voter2)).to.equal(0n);",
          "105:           const steps = [",
          "106:             ['0', '2', '1'],",
          "107:             ['1', '0', '1'],",
          "108:           ].map(votes => votes.map(vote => ethers.parseEther(vote)));",
          "110:           for (const votes of steps) {",
          "111:             const params = ethers.solidityPacked(['uint128', 'uint128', 'uint128'], votes);",
          "112:             await expect(",
          "113:               this.helper.connect(this.voter2).vote({",
          "114:                 support: VoteType.Parameters,",
          "115:                 reason: 'no particular reason',",
          "116:                 params,",
          "117:               }),",
          "118:             )",
          "119:               .to.emit(this.mock, 'VoteCastWithParams')",
          "120:               .withArgs(",
          "121:                 this.voter2,",
          "122:                 this.proposal.id,",
          "123:                 VoteType.Parameters,",
          "124:                 sum(...votes),",
          "125:                 'no particular reason',",
          "126:                 params,",
          "127:               );",
          "128:           }",
          "130:           expect(await this.mock.proposalVotes(this.proposal.id)).to.deep.equal(zip(...steps).map(v => sum(...v)));",
          "131:           expect(await this.mock.hasVoted(this.proposal.id, this.voter2)).to.equal(true);",
          "132:           expect(await this.mock.usedVotes(this.proposal.id, this.voter2)).to.equal(sum(...[].concat(...steps)));",
          "133:         });",
          "135:         it('fractional then nominal', async function () {",
          "136:           await this.helper.connect(this.proposer).propose();",
          "137:           await this.helper.waitForSnapshot();",
          "139:           expect(await this.mock.proposalVotes(this.proposal.id)).to.deep.equal([0n, 0n, 0n]);",
          "140:           expect(await this.mock.hasVoted(this.proposal.id, this.voter2)).to.equal(false);",
          "141:           expect(await this.mock.usedVotes(this.proposal.id, this.voter2)).to.equal(0n);",
          "143:           const weight = ethers.parseEther('7');",
          "144:           const fractional = ['1', '2', '1'].map(ethers.parseEther);",
          "146:           const params = ethers.solidityPacked(['uint128', 'uint128', 'uint128'], fractional);",
          "147:           await expect(",
          "148:             this.helper.connect(this.voter2).vote({",
          "149:               support: VoteType.Parameters,",
          "150:               reason: 'no particular reason',",
          "151:               params,",
          "152:             }),",
          "153:           )",
          "154:             .to.emit(this.mock, 'VoteCastWithParams')",
          "155:             .withArgs(",
          "156:               this.voter2,",
          "157:               this.proposal.id,",
          "158:               VoteType.Parameters,",
          "159:               sum(...fractional),",
          "160:               'no particular reason',",
          "161:               params,",
          "162:             );",
          "164:           await expect(this.helper.connect(this.voter2).vote({ support: VoteType.Against }))",
          "165:             .to.emit(this.mock, 'VoteCast')",
          "166:             .withArgs(this.voter2, this.proposal.id, VoteType.Against, weight - sum(...fractional), '');",
          "168:           expect(await this.mock.proposalVotes(this.proposal.id)).to.deep.equal([",
          "169:             weight - sum(...fractional.slice(1)),",
          "170:             ...fractional.slice(1),",
          "171:           ]);",
          "172:           expect(await this.mock.hasVoted(this.proposal.id, this.voter2)).to.equal(true);",
          "173:           expect(await this.mock.usedVotes(this.proposal.id, this.voter2)).to.equal(weight);",
          "174:         });",
          "176:         it('revert if params spend more than available', async function () {",
          "177:           await this.helper.connect(this.proposer).propose();",
          "178:           await this.helper.waitForSnapshot();",
          "180:           const weight = ethers.parseEther('7');",
          "181:           const fractional = ['0', '1000', '0'].map(ethers.parseEther);",
          "183:           await expect(",
          "184:             this.helper.connect(this.voter2).vote({",
          "185:               support: VoteType.Parameters,",
          "186:               reason: 'no particular reason',",
          "187:               params: ethers.solidityPacked(['uint128', 'uint128', 'uint128'], fractional),",
          "188:             }),",
          "189:           )",
          "190:             .to.be.revertedWithCustomError(this.mock, 'GovernorExceedRemainingWeight')",
          "191:             .withArgs(this.voter2, sum(...fractional), weight);",
          "192:         });",
          "194:         it('revert if no weight remaining', async function () {",
          "195:           await this.helper.connect(this.proposer).propose();",
          "196:           await this.helper.waitForSnapshot();",
          "197:           await this.helper.connect(this.voter2).vote({ support: VoteType.For });",
          "199:           await expect(",
          "200:             this.helper.connect(this.voter2).vote({",
          "201:               support: VoteType.Parameters,",
          "202:               reason: 'no particular reason',",
          "203:               params: ethers.solidityPacked(['uint128', 'uint128', 'uint128'], [0n, 1n, 0n]),",
          "204:             }),",
          "205:           )",
          "206:             .to.be.revertedWithCustomError(this.mock, 'GovernorAlreadyCastVote')",
          "207:             .withArgs(this.voter2);",
          "208:         });",
          "210:         it('revert if params are not properly formatted #1', async function () {",
          "211:           await this.helper.connect(this.proposer).propose();",
          "212:           await this.helper.waitForSnapshot();",
          "214:           await expect(",
          "215:             this.helper.connect(this.voter2).vote({",
          "216:               support: VoteType.Parameters,",
          "217:               reason: 'no particular reason',",
          "218:               params: ethers.solidityPacked(['uint128', 'uint128'], [0n, 1n]),",
          "219:             }),",
          "220:           ).to.be.revertedWithCustomError(this.mock, 'GovernorInvalidVoteParams');",
          "221:         });",
          "223:         it('revert if params are not properly formatted #2', async function () {",
          "224:           await this.helper.connect(this.proposer).propose();",
          "225:           await this.helper.waitForSnapshot();",
          "227:           await expect(",
          "228:             this.helper.connect(this.voter2).vote({",
          "229:               support: VoteType.Against,",
          "230:               reason: 'no particular reason',",
          "231:               params: ethers.solidityPacked(['uint128', 'uint128', 'uint128'], [0n, 1n, 0n]),",
          "232:             }),",
          "233:           ).to.be.revertedWithCustomError(this.mock, 'GovernorInvalidVoteParams');",
          "234:         });",
          "236:         it('revert if vote type is invalid', async function () {",
          "237:           await this.helper.connect(this.proposer).propose();",
          "238:           await this.helper.waitForSnapshot();",
          "240:           await expect(this.helper.connect(this.voter2).vote({ support: 128n })).to.be.revertedWithCustomError(",
          "241:             this.mock,",
          "242:             'GovernorInvalidVoteType',",
          "243:           );",
          "244:         });",
          "245:       });",
          "246:     });",
          "247:   }",
          "248: });",
          "",
          "---------------"
        ],
        "test/helpers/enums.js||test/helpers/enums.js": [
          "File: test/helpers/enums.js -> test/helpers/enums.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: module.exports = {",
          "6:   Enum,",
          "7:   ProposalState: Enum('Pending', 'Active', 'Canceled', 'Defeated', 'Succeeded', 'Queued', 'Expired', 'Executed'),",
          "9:   Rounding: Enum('Floor', 'Ceil', 'Trunc', 'Expand'),",
          "10:   OperationState: Enum('Unset', 'Waiting', 'Ready', 'Done'),",
          "11:   RevertType: Enum('None', 'RevertWithoutMessage', 'RevertWithMessage', 'RevertWithCustomError', 'Panic'),",
          "",
          "[Removed Lines]",
          "8:   VoteType: Enum('Against', 'For', 'Abstain'),",
          "",
          "[Added Lines]",
          "8:   VoteType: Object.assign(Enum('Against', 'For', 'Abstain'), { Parameters: 255n }),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87456e335892537ed6ec651d49adabaf451fe4b9",
      "candidate_info": {
        "commit_hash": "87456e335892537ed6ec651d49adabaf451fe4b9",
        "repo": "OpenZeppelin/openzeppelin-contracts",
        "commit_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/87456e335892537ed6ec651d49adabaf451fe4b9",
        "files": [
          ".changeset/swift-bags-divide.md",
          "contracts/governance/Governor.sol",
          "docs/modules/api/pages/governance.adoc",
          "test/governance/Governor.t.sol",
          "test/governance/Governor.test.js"
        ],
        "message": "Update docs",
        "before_after_code_files": [
          "contracts/governance/Governor.sol||contracts/governance/Governor.sol",
          "test/governance/Governor.t.sol||test/governance/Governor.t.sol",
          "test/governance/Governor.test.js||test/governance/Governor.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "contracts/governance/Governor.sol||contracts/governance/Governor.sol",
            "test/governance/Governor.t.sol||test/governance/Governor.t.sol",
            "test/governance/Governor.test.js||test/governance/Governor.test.js"
          ],
          "candidate": [
            "contracts/governance/Governor.sol||contracts/governance/Governor.sol",
            "test/governance/Governor.t.sol||test/governance/Governor.t.sol",
            "test/governance/Governor.test.js||test/governance/Governor.test.js"
          ]
        }
      },
      "candidate_diff": {
        "contracts/governance/Governor.sol||contracts/governance/Governor.sol": [
          "File: contracts/governance/Governor.sol -> contracts/governance/Governor.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:         string memory description",
          "273:     ) public virtual override returns (uint256) {",
          "274:         address proposer = _msgSender();",
          "277:         require(",
          "278:             getVotes(proposer, currentTimepoint - 1) >= proposalThreshold(),",
          "279:             \"Governor: proposer votes below proposal threshold\"",
          "",
          "[Removed Lines]",
          "275:         uint256 currentTimepoint = clock();",
          "",
          "[Added Lines]",
          "275:         require(_isValidDescriptionForProposer(proposer, description), \"Governor: proposer restricted\");",
          "277:         uint256 currentTimepoint = clock();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "634:     ) public virtual override returns (bytes4) {",
          "635:         return this.onERC1155BatchReceived.selector;",
          "636:     }",
          "637: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "656:     function _isValidDescriptionForProposer(",
          "657:         address proposer,",
          "658:         string memory description",
          "659:     ) internal view virtual returns (bool) {",
          "660:         uint256 len = bytes(description).length;",
          "663:         if (len < 52) {",
          "664:             return true;",
          "665:         }",
          "668:         bytes12 marker;",
          "669:         assembly {",
          "676:             marker := mload(add(description, sub(len, 20)))",
          "677:         }",
          "680:         if (marker != bytes12(\"#proposer=0x\")) {",
          "681:             return true;",
          "682:         }",
          "685:         uint160 recovered = 0;",
          "686:         for (uint256 i = len - 40; i < len; ++i) {",
          "687:             (bool isHex, uint8 value) = _tryHexToUint(bytes(description)[i]);",
          "689:             if (!isHex) {",
          "690:                 return true;",
          "691:             }",
          "692:             recovered = (recovered << 4) | value;",
          "693:         }",
          "695:         return recovered == uint160(proposer);",
          "696:     }",
          "702:     function _tryHexToUint(bytes1 char) private pure returns (bool, uint8) {",
          "703:         uint8 c = uint8(char);",
          "704:         unchecked {",
          "706:             if (47 < c && c < 58) {",
          "707:                 return (true, c - 48);",
          "708:             }",
          "710:             else if (64 < c && c < 71) {",
          "711:                 return (true, c - 55);",
          "712:             }",
          "714:             else if (96 < c && c < 103) {",
          "715:                 return (true, c - 87);",
          "716:             }",
          "718:             else {",
          "719:                 return (false, 0);",
          "720:             }",
          "721:         }",
          "722:     }",
          "",
          "---------------"
        ],
        "test/governance/Governor.t.sol||test/governance/Governor.t.sol": [
          "File: test/governance/Governor.t.sol -> test/governance/Governor.t.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: pragma solidity ^0.8.19;",
          "5: import \"forge-std/Test.sol\";",
          "6: import \"../../contracts/utils/Strings.sol\";",
          "7: import \"../../contracts/governance/Governor.sol\";",
          "9: contract GovernorInternalTest is Test, Governor {",
          "10:     constructor() Governor(\"\") {}",
          "12:     function testValidDescriptionForProposer(string memory description, address proposer, bool includeProposer) public {",
          "13:         if (includeProposer) {",
          "14:             description = string.concat(description, \"#proposer=\", Strings.toHexString(proposer));",
          "15:         }",
          "16:         assertTrue(_isValidDescriptionForProposer(proposer, description));",
          "17:     }",
          "19:     function testInvalidDescriptionForProposer(",
          "20:         string memory description,",
          "21:         address commitProposer,",
          "22:         address actualProposer",
          "23:     ) public {",
          "24:         vm.assume(commitProposer != actualProposer);",
          "25:         description = string.concat(description, \"#proposer=\", Strings.toHexString(commitProposer));",
          "26:         assertFalse(_isValidDescriptionForProposer(actualProposer, description));",
          "27:     }",
          "32:     function clock() public pure override returns (uint48) {}",
          "35:     function CLOCK_MODE() public pure override returns (string memory) {}",
          "38:     function COUNTING_MODE() public pure virtual override returns (string memory) {}",
          "40:     function votingDelay() public pure virtual override returns (uint256) {}",
          "42:     function votingPeriod() public pure virtual override returns (uint256) {}",
          "44:     function quorum(uint256) public pure virtual override returns (uint256) {}",
          "46:     function hasVoted(uint256, address) public pure virtual override returns (bool) {}",
          "48:     function _quorumReached(uint256) internal pure virtual override returns (bool) {}",
          "50:     function _voteSucceeded(uint256) internal pure virtual override returns (bool) {}",
          "52:     function _getVotes(address, uint256, bytes memory) internal pure virtual override returns (uint256) {}",
          "54:     function _countVote(uint256, address, uint8, uint256, bytes memory) internal virtual override {}",
          "55: }",
          "",
          "---------------"
        ],
        "test/governance/Governor.test.js||test/governance/Governor.test.js": [
          "File: test/governance/Governor.test.js -> test/governance/Governor.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "544:         });",
          "545:       });",
          "547:       describe('onlyGovernance updates', function () {",
          "548:         it('setVotingDelay is protected', async function () {",
          "549:           await expectRevert(this.mock.setVotingDelay('0'), 'Governor: onlyGovernance');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "547:       describe('frontrun protection using description suffix', function () {",
          "548:         describe('without protection', function () {",
          "549:           describe('without suffix', function () {",
          "550:             it('proposer can propose', async function () {",
          "551:               expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
          "552:             });",
          "554:             it('someone else can propose', async function () {",
          "555:               expectEvent(await this.helper.propose({ from: voter1 }), 'ProposalCreated');",
          "556:             });",
          "557:           });",
          "559:           describe('with different suffix', function () {",
          "560:             beforeEach(async function () {",
          "561:               this.proposal = this.helper.setProposal(",
          "562:                 [",
          "563:                   {",
          "564:                     target: this.receiver.address,",
          "565:                     data: this.receiver.contract.methods.mockFunction().encodeABI(),",
          "566:                     value,",
          "567:                   },",
          "568:                 ],",
          "569:                 `<proposal description>#wrong-suffix=${proposer}`,",
          "570:               );",
          "571:             });",
          "573:             it('proposer can propose', async function () {",
          "574:               expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
          "575:             });",
          "577:             it('someone else can propose', async function () {",
          "578:               expectEvent(await this.helper.propose({ from: voter1 }), 'ProposalCreated');",
          "579:             });",
          "580:           });",
          "582:           describe('with proposer suffix but bad address part', function () {",
          "583:             beforeEach(async function () {",
          "584:               this.proposal = this.helper.setProposal(",
          "585:                 [",
          "586:                   {",
          "587:                     target: this.receiver.address,",
          "588:                     data: this.receiver.contract.methods.mockFunction().encodeABI(),",
          "589:                     value,",
          "590:                   },",
          "591:                 ],",
          "592:                 `<proposal description>#proposer=0x3C44CdDdB6a900fa2b585dd299e03d12FA429XYZ`, // XYZ are not a valid hex char",
          "593:               );",
          "594:             });",
          "596:             it('propose can propose', async function () {",
          "597:               expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
          "598:             });",
          "600:             it('someone else can propose', async function () {",
          "601:               expectEvent(await this.helper.propose({ from: voter1 }), 'ProposalCreated');",
          "602:             });",
          "603:           });",
          "604:         });",
          "606:         describe('with protection via proposer suffix', function () {",
          "607:           beforeEach(async function () {",
          "608:             this.proposal = this.helper.setProposal(",
          "609:               [",
          "610:                 {",
          "611:                   target: this.receiver.address,",
          "612:                   data: this.receiver.contract.methods.mockFunction().encodeABI(),",
          "613:                   value,",
          "614:                 },",
          "615:               ],",
          "616:               `<proposal description>#proposer=${proposer}`,",
          "617:             );",
          "618:           });",
          "620:           it('proposer can propose', async function () {",
          "621:             expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
          "622:           });",
          "624:           it('someone else cannot propose', async function () {",
          "625:             await expectRevert(this.helper.propose({ from: voter1 }), 'Governor: proposer restricted');",
          "626:           });",
          "627:         });",
          "628:       });",
          "",
          "---------------"
        ]
      }
    }
  ]
}