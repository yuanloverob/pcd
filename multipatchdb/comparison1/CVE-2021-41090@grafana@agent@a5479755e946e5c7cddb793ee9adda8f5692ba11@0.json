{
  "cve_id": "CVE-2021-41090",
  "cve_desc": "Grafana Agent is a telemetry collector for sending metrics, logs, and trace data to the opinionated Grafana observability stack. Prior to versions 0.20.1 and 0.21.2, inline secrets defined within a metrics instance config are exposed in plaintext over two endpoints: metrics instance configs defined in the base YAML file are exposed at `/-/config` and metrics instance configs defined for the scraping service are exposed at `/agent/api/v1/configs/:key`. Inline secrets will be exposed to anyone being able to reach these endpoints. If HTTPS with client authentication is not configured, these endpoints are accessible to unauthenticated users. Secrets found in these sections are used for delivering metrics to a Prometheus Remote Write system, authenticating against a system for discovering Prometheus targets, and authenticating against a system for collecting metrics. This does not apply for non-inlined secrets, such as `*_file` based secrets. This issue is patched in Grafana Agent versions 0.20.1 and 0.21.2. A few workarounds are available. Users who cannot upgrade should use non-inline secrets where possible. Users may also desire to restrict API access to Grafana Agent with some combination of restricting the network interfaces Grafana Agent listens on through `http_listen_address` in the `server` block, configuring Grafana Agent to use HTTPS with client authentication, and/or using firewall rules to restrict external access to Grafana Agent's API.",
  "repo": "grafana/agent",
  "patch_hash": "a5479755e946e5c7cddb793ee9adda8f5692ba11",
  "patch_info": {
    "commit_hash": "a5479755e946e5c7cddb793ee9adda8f5692ba11",
    "repo": "grafana/agent",
    "commit_url": "https://github.com/grafana/agent/commit/a5479755e946e5c7cddb793ee9adda8f5692ba11",
    "files": [
      "pkg/metrics/instance/configstore/api.go",
      "pkg/metrics/instance/configstore/api_test.go",
      "pkg/metrics/instance/instance.go",
      "pkg/metrics/instance/marshal_test.go"
    ],
    "message": "Merge pull request #17 from grafana/marshal-instance-config-secrets-0.21.2\n\n[v0.21.2] Scrub secrets when marshaling instance configs",
    "before_after_code_files": [
      "pkg/metrics/instance/configstore/api.go||pkg/metrics/instance/configstore/api.go",
      "pkg/metrics/instance/configstore/api_test.go||pkg/metrics/instance/configstore/api_test.go",
      "pkg/metrics/instance/instance.go||pkg/metrics/instance/instance.go",
      "pkg/metrics/instance/marshal_test.go||pkg/metrics/instance/marshal_test.go"
    ]
  },
  "patch_diff": {
    "pkg/metrics/instance/configstore/api.go||pkg/metrics/instance/configstore/api.go": [
      "File: pkg/metrics/instance/configstore/api.go -> pkg/metrics/instance/configstore/api.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "126:  case err != nil:",
      "127:   api.writeError(rw, http.StatusInternalServerError, err)",
      "128:  case err == nil:",
      "130:   if err != nil {",
      "131:    api.writeError(rw, http.StatusInternalServerError, fmt.Errorf(\"could not marshal config for response: %w\", err))",
      "132:    return",
      "",
      "[Removed Lines]",
      "129:   bb, err := instance.MarshalConfig(&cfg, false)",
      "",
      "[Added Lines]",
      "129:   bb, err := instance.MarshalConfig(&cfg, true)",
      "",
      "---------------"
    ],
    "pkg/metrics/instance/configstore/api_test.go||pkg/metrics/instance/configstore/api_test.go": [
      "File: pkg/metrics/instance/configstore/api_test.go -> pkg/metrics/instance/configstore/api_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import (",
      "4:  \"bytes\"",
      "5:  \"context\"",
      "6:  \"fmt\"",
      "7:  \"io/ioutil\"",
      "8:  \"net/http\"",
      "9:  \"net/http/httptest\"",
      "10:  \"testing\"",
      "11:  \"time\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6:  \"encoding/json\"",
      "8:  \"io\"",
      "12:  \"strings\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "128:  })",
      "129: }",
      "131: func TestServer_PutConfiguration(t *testing.T) {",
      "132:  var s Mock",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "134: func TestAPI_GetConfiguration_ScrubSecrets(t *testing.T) {",
      "135:  rawConfig := `name: exists",
      "136: scrape_configs:",
      "137: - job_name: local_scrape",
      "138:   follow_redirects: true",
      "139:   honor_timestamps: true",
      "140:   metrics_path: /metrics",
      "141:   scheme: http",
      "142:   static_configs:",
      "143:   - targets:",
      "144:     - 127.0.0.1:12345",
      "145:     labels:",
      "146:       cluster: localhost",
      "147:   basic_auth:",
      "148:     username: admin",
      "149:     password: SCRUBME",
      "150: remote_write:",
      "151: - url: http://localhost:9009/api/prom/push",
      "152:   remote_timeout: 30s",
      "153:   name: test-d0f32c",
      "154:   basic_auth:",
      "155:     username: admin",
      "156:     password: SCRUBME",
      "157:   queue_config:",
      "158:     capacity: 500",
      "159:     max_shards: 1000",
      "160:     min_shards: 1",
      "161:     max_samples_per_send: 100",
      "162:     batch_send_deadline: 5s",
      "163:     min_backoff: 30ms",
      "164:     max_backoff: 100ms",
      "165:   follow_redirects: true",
      "166:   metadata_config:",
      "167:     send: true",
      "168:     send_interval: 1m",
      "169:     max_samples_per_send: 500",
      "170: wal_truncate_frequency: 1m0s",
      "171: min_wal_time: 5m0s",
      "172: max_wal_time: 4h0m0s",
      "173: remote_flush_deadline: 1m0s",
      "174: `",
      "175:  scrubbedConfig := strings.ReplaceAll(rawConfig, \"SCRUBME\", \"<secret>\")",
      "177:  s := &Mock{",
      "178:   GetFunc: func(ctx context.Context, key string) (instance.Config, error) {",
      "179:    c, err := instance.UnmarshalConfig(strings.NewReader(rawConfig))",
      "180:    if err != nil {",
      "181:     return instance.Config{}, err",
      "182:    }",
      "183:    return *c, nil",
      "184:   },",
      "185:  }",
      "187:  api := NewAPI(log.NewNopLogger(), s, nil)",
      "188:  env := newAPITestEnvironment(t, api)",
      "190:  resp, err := http.Get(env.srv.URL + \"/agent/api/v1/configs/exists\")",
      "191:  require.NoError(t, err)",
      "192:  require.Equal(t, http.StatusOK, resp.StatusCode)",
      "193:  respBytes, err := io.ReadAll(resp.Body)",
      "194:  require.NoError(t, err)",
      "196:  var apiResp struct {",
      "197:   Status string `json:\"status\"`",
      "198:   Data   struct {",
      "199:    Value string `json:\"value\"`",
      "200:   } `json:\"data\"`",
      "201:  }",
      "202:  err = json.Unmarshal(respBytes, &apiResp)",
      "203:  require.NoError(t, err)",
      "204:  require.Equal(t, \"success\", apiResp.Status)",
      "205:  require.YAMLEq(t, scrubbedConfig, apiResp.Data.Value)",
      "207:  t.Run(\"With Client\", func(t *testing.T) {",
      "208:   cli := client.New(env.srv.URL)",
      "209:   actual, err := cli.GetConfiguration(context.Background(), \"exists\")",
      "210:   require.NoError(t, err)",
      "215:   actualBytes, err := instance.MarshalConfig(actual, false)",
      "216:   require.NoError(t, err)",
      "217:   require.YAMLEq(t, scrubbedConfig, string(actualBytes))",
      "218:  })",
      "219: }",
      "",
      "---------------"
    ],
    "pkg/metrics/instance/instance.go||pkg/metrics/instance/instance.go": [
      "File: pkg/metrics/instance/instance.go -> pkg/metrics/instance/instance.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "94:  if err != nil {",
      "95:   return nil, err",
      "96:  }",
      "",
      "[Removed Lines]",
      "93:  bb, err := MarshalConfig(&c, false)",
      "",
      "[Added Lines]",
      "93:  bb, err := MarshalConfig(&c, true)",
      "",
      "---------------"
    ],
    "pkg/metrics/instance/marshal_test.go||pkg/metrics/instance/marshal_test.go": [
      "File: pkg/metrics/instance/marshal_test.go -> pkg/metrics/instance/marshal_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "25:  require.Error(t, err)",
      "26: }",
      "31:  cfg := `name: test",
      "32: scrape_configs:",
      "33: - job_name: local_scrape",
      "",
      "[Removed Lines]",
      "30: func TestMarshal_UnmarshalConfig(t *testing.T) {",
      "",
      "[Added Lines]",
      "30: func TestMarshal_UnmarshalConfig_RetainSecrets(t *testing.T) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "69: remote_flush_deadline: 1m0s",
      "70: `",
      "100: }",
      "105:  cfg := `name: test",
      "106: scrape_configs:",
      "107: - job_name: local_scrape",
      "",
      "[Removed Lines]",
      "72:  t.Run(\"direct marshal\", func(t *testing.T) {",
      "73:   var c Config",
      "74:   err := yaml.Unmarshal([]byte(cfg), &c)",
      "75:   require.NoError(t, err)",
      "77:   out, err := yaml.Marshal(c)",
      "78:   require.NoError(t, err)",
      "79:   require.YAMLEq(t, cfg, string(out))",
      "80:  })",
      "82:  t.Run(\"direct mashal pointer\", func(t *testing.T) {",
      "83:   c := &Config{}",
      "84:   err := yaml.Unmarshal([]byte(cfg), c)",
      "85:   require.NoError(t, err)",
      "87:   out, err := yaml.Marshal(c)",
      "88:   require.NoError(t, err)",
      "89:   require.YAMLEq(t, cfg, string(out))",
      "90:  })",
      "92:  t.Run(\"custom marshal methods\", func(t *testing.T) {",
      "93:   c, err := UnmarshalConfig(strings.NewReader(cfg))",
      "94:   require.NoError(t, err)",
      "96:   out, err := MarshalConfig(c, false)",
      "97:   require.NoError(t, err)",
      "98:   require.YAMLEq(t, cfg, string(out))",
      "99:  })",
      "104: func TestMarshal_UnmarshalConfig_Sigv4(t *testing.T) {",
      "",
      "[Added Lines]",
      "72:  c, err := UnmarshalConfig(strings.NewReader(cfg))",
      "73:  require.NoError(t, err)",
      "75:  out, err := MarshalConfig(c, false)",
      "76:  require.NoError(t, err)",
      "77:  require.YAMLEq(t, cfg, string(out))",
      "82: func TestMarshal_UnmarshalConfig_ScrubSecrets(t *testing.T) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "116:       cluster: localhost",
      "117:   basic_auth:",
      "118:     username: admin",
      "120: remote_write:",
      "121: - url: http://localhost:9009/api/prom/push",
      "122:   remote_timeout: 30s",
      "123:   name: test-d0f32c",
      "125:   queue_config:",
      "126:     capacity: 500",
      "127:     max_shards: 1000",
      "",
      "[Removed Lines]",
      "119:     password: foobar",
      "124:   sigv4: {}",
      "",
      "[Added Lines]",
      "97:     password: SCRUBME",
      "102:   basic_auth:",
      "103:     username: admin",
      "104:     password: SCRUBME",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "141: remote_flush_deadline: 1m0s",
      "142: `",
      "144:  t.Run(\"direct marshal\", func(t *testing.T) {",
      "145:   var c Config",
      "146:   err := yaml.Unmarshal([]byte(cfg), &c)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "124:  scrub := func(in string) string {",
      "125:   return strings.ReplaceAll(in, \"SCRUBME\", \"<secret>\")",
      "126:  }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "149:   out, err := yaml.Marshal(c)",
      "150:   require.NoError(t, err)",
      "152:  })",
      "157:   require.NoError(t, err)",
      "160:   require.NoError(t, err)",
      "162:  })",
      "164:  t.Run(\"custom marshal methods\", func(t *testing.T) {",
      "165:   c, err := UnmarshalConfig(strings.NewReader(cfg))",
      "166:   require.NoError(t, err)",
      "169:   require.NoError(t, err)",
      "171:  })",
      "172: }",
      "",
      "[Removed Lines]",
      "151:   require.YAMLEq(t, cfg, string(out))",
      "154:  t.Run(\"direct mashal pointer\", func(t *testing.T) {",
      "155:   c := &Config{}",
      "156:   err := yaml.Unmarshal([]byte(cfg), c)",
      "159:   out, err := yaml.Marshal(c)",
      "161:   require.YAMLEq(t, cfg, string(out))",
      "168:   out, err := MarshalConfig(c, false)",
      "170:   require.YAMLEq(t, cfg, string(out))",
      "",
      "[Added Lines]",
      "135:   require.YAMLEq(t, scrub(cfg), string(out))",
      "138:  t.Run(\"direct marshal pointer\", func(t *testing.T) {",
      "139:   var c Config",
      "140:   err := yaml.Unmarshal([]byte(cfg), &c)",
      "143:   out, err := yaml.Marshal(&c)",
      "145:   require.YAMLEq(t, scrub(cfg), string(out))",
      "152:   out, err := MarshalConfig(c, true)",
      "154:   require.YAMLEq(t, scrub(cfg), string(out))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "422450e832e1d832b9e674b475600c19bd784667",
      "candidate_info": {
        "commit_hash": "422450e832e1d832b9e674b475600c19bd784667",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/422450e832e1d832b9e674b475600c19bd784667",
        "files": [
          "pkg/metrics/instance/configstore/api.go",
          "pkg/metrics/instance/configstore/api_test.go",
          "pkg/metrics/instance/instance.go",
          "pkg/metrics/instance/marshal_test.go"
        ],
        "message": "Scrub secrets when marshaling instance configs",
        "before_after_code_files": [
          "pkg/metrics/instance/configstore/api.go||pkg/metrics/instance/configstore/api.go",
          "pkg/metrics/instance/configstore/api_test.go||pkg/metrics/instance/configstore/api_test.go",
          "pkg/metrics/instance/instance.go||pkg/metrics/instance/instance.go",
          "pkg/metrics/instance/marshal_test.go||pkg/metrics/instance/marshal_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/grafana/agent/pull/1153"
        ],
        "olp_code_files": {
          "patch": [
            "pkg/metrics/instance/configstore/api.go||pkg/metrics/instance/configstore/api.go",
            "pkg/metrics/instance/configstore/api_test.go||pkg/metrics/instance/configstore/api_test.go",
            "pkg/metrics/instance/instance.go||pkg/metrics/instance/instance.go",
            "pkg/metrics/instance/marshal_test.go||pkg/metrics/instance/marshal_test.go"
          ],
          "candidate": [
            "pkg/metrics/instance/configstore/api.go||pkg/metrics/instance/configstore/api.go",
            "pkg/metrics/instance/configstore/api_test.go||pkg/metrics/instance/configstore/api_test.go",
            "pkg/metrics/instance/instance.go||pkg/metrics/instance/instance.go",
            "pkg/metrics/instance/marshal_test.go||pkg/metrics/instance/marshal_test.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/metrics/instance/configstore/api.go||pkg/metrics/instance/configstore/api.go": [
          "File: pkg/metrics/instance/configstore/api.go -> pkg/metrics/instance/configstore/api.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:  case err != nil:",
          "127:   api.writeError(rw, http.StatusInternalServerError, err)",
          "128:  case err == nil:",
          "130:   if err != nil {",
          "131:    api.writeError(rw, http.StatusInternalServerError, fmt.Errorf(\"could not marshal config for response: %w\", err))",
          "132:    return",
          "",
          "[Removed Lines]",
          "129:   bb, err := instance.MarshalConfig(&cfg, false)",
          "",
          "[Added Lines]",
          "129:   bb, err := instance.MarshalConfig(&cfg, true)",
          "",
          "---------------"
        ],
        "pkg/metrics/instance/configstore/api_test.go||pkg/metrics/instance/configstore/api_test.go": [
          "File: pkg/metrics/instance/configstore/api_test.go -> pkg/metrics/instance/configstore/api_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"bytes\"",
          "5:  \"context\"",
          "6:  \"fmt\"",
          "7:  \"io/ioutil\"",
          "8:  \"net/http\"",
          "9:  \"net/http/httptest\"",
          "10:  \"testing\"",
          "11:  \"time\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:  \"encoding/json\"",
          "8:  \"io\"",
          "12:  \"strings\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:  })",
          "129: }",
          "131: func TestServer_PutConfiguration(t *testing.T) {",
          "132:  var s Mock",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: func TestAPI_GetConfiguration_ScrubSecrets(t *testing.T) {",
          "135:  rawConfig := `name: exists",
          "136: scrape_configs:",
          "137: - job_name: local_scrape",
          "138:   follow_redirects: true",
          "139:   honor_timestamps: true",
          "140:   metrics_path: /metrics",
          "141:   scheme: http",
          "142:   static_configs:",
          "143:   - targets:",
          "144:     - 127.0.0.1:12345",
          "145:     labels:",
          "146:       cluster: localhost",
          "147:   basic_auth:",
          "148:     username: admin",
          "149:     password: SCRUBME",
          "150: remote_write:",
          "151: - url: http://localhost:9009/api/prom/push",
          "152:   remote_timeout: 30s",
          "153:   name: test-d0f32c",
          "154:   basic_auth:",
          "155:     username: admin",
          "156:     password: SCRUBME",
          "157:   queue_config:",
          "158:     capacity: 500",
          "159:     max_shards: 1000",
          "160:     min_shards: 1",
          "161:     max_samples_per_send: 100",
          "162:     batch_send_deadline: 5s",
          "163:     min_backoff: 30ms",
          "164:     max_backoff: 100ms",
          "165:   follow_redirects: true",
          "166:   metadata_config:",
          "167:     send: true",
          "168:     send_interval: 1m",
          "169: wal_truncate_frequency: 1m0s",
          "170: min_wal_time: 5m0s",
          "171: max_wal_time: 4h0m0s",
          "172: remote_flush_deadline: 1m0s",
          "173: `",
          "174:  scrubbedConfig := strings.ReplaceAll(rawConfig, \"SCRUBME\", \"<secret>\")",
          "176:  s := &Mock{",
          "177:   GetFunc: func(ctx context.Context, key string) (instance.Config, error) {",
          "178:    c, err := instance.UnmarshalConfig(strings.NewReader(rawConfig))",
          "179:    if err != nil {",
          "180:     return instance.Config{}, err",
          "181:    }",
          "182:    return *c, nil",
          "183:   },",
          "184:  }",
          "186:  api := NewAPI(log.NewNopLogger(), s, nil)",
          "187:  env := newAPITestEnvironment(t, api)",
          "189:  resp, err := http.Get(env.srv.URL + \"/agent/api/v1/configs/exists\")",
          "190:  require.NoError(t, err)",
          "191:  require.Equal(t, http.StatusOK, resp.StatusCode)",
          "192:  respBytes, err := io.ReadAll(resp.Body)",
          "193:  require.NoError(t, err)",
          "195:  var apiResp struct {",
          "196:   Status string `json:\"status\"`",
          "197:   Data   struct {",
          "198:    Value string `json:\"value\"`",
          "199:   } `json:\"data\"`",
          "200:  }",
          "201:  err = json.Unmarshal(respBytes, &apiResp)",
          "202:  require.NoError(t, err)",
          "203:  require.Equal(t, \"success\", apiResp.Status)",
          "204:  require.YAMLEq(t, scrubbedConfig, apiResp.Data.Value)",
          "206:  t.Run(\"With Client\", func(t *testing.T) {",
          "207:   cli := client.New(env.srv.URL)",
          "208:   actual, err := cli.GetConfiguration(context.Background(), \"exists\")",
          "209:   require.NoError(t, err)",
          "214:   actualBytes, err := instance.MarshalConfig(actual, false)",
          "215:   require.NoError(t, err)",
          "216:   require.YAMLEq(t, scrubbedConfig, string(actualBytes))",
          "217:  })",
          "218: }",
          "",
          "---------------"
        ],
        "pkg/metrics/instance/instance.go||pkg/metrics/instance/instance.go": [
          "File: pkg/metrics/instance/instance.go -> pkg/metrics/instance/instance.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:  if err != nil {",
          "95:   return nil, err",
          "96:  }",
          "",
          "[Removed Lines]",
          "93:  bb, err := MarshalConfig(&c, false)",
          "",
          "[Added Lines]",
          "93:  bb, err := MarshalConfig(&c, true)",
          "",
          "---------------"
        ],
        "pkg/metrics/instance/marshal_test.go||pkg/metrics/instance/marshal_test.go": [
          "File: pkg/metrics/instance/marshal_test.go -> pkg/metrics/instance/marshal_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  require.Error(t, err)",
          "26: }",
          "31:  cfg := `name: test",
          "32: scrape_configs:",
          "33: - job_name: local_scrape",
          "",
          "[Removed Lines]",
          "30: func TestMarshal_UnmarshalConfig(t *testing.T) {",
          "",
          "[Added Lines]",
          "30: func TestMarshal_UnmarshalConfig_RetainSecrets(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69: remote_flush_deadline: 1m0s",
          "70: `",
          "100: }",
          "105:  cfg := `name: test",
          "106: scrape_configs:",
          "107: - job_name: local_scrape",
          "",
          "[Removed Lines]",
          "72:  t.Run(\"direct marshal\", func(t *testing.T) {",
          "73:   var c Config",
          "74:   err := yaml.Unmarshal([]byte(cfg), &c)",
          "75:   require.NoError(t, err)",
          "77:   out, err := yaml.Marshal(c)",
          "78:   require.NoError(t, err)",
          "79:   require.YAMLEq(t, cfg, string(out))",
          "80:  })",
          "82:  t.Run(\"direct mashal pointer\", func(t *testing.T) {",
          "83:   c := &Config{}",
          "84:   err := yaml.Unmarshal([]byte(cfg), c)",
          "85:   require.NoError(t, err)",
          "87:   out, err := yaml.Marshal(c)",
          "88:   require.NoError(t, err)",
          "89:   require.YAMLEq(t, cfg, string(out))",
          "90:  })",
          "92:  t.Run(\"custom marshal methods\", func(t *testing.T) {",
          "93:   c, err := UnmarshalConfig(strings.NewReader(cfg))",
          "94:   require.NoError(t, err)",
          "96:   out, err := MarshalConfig(c, false)",
          "97:   require.NoError(t, err)",
          "98:   require.YAMLEq(t, cfg, string(out))",
          "99:  })",
          "104: func TestMarshal_UnmarshalConfig_Sigv4(t *testing.T) {",
          "",
          "[Added Lines]",
          "72:  c, err := UnmarshalConfig(strings.NewReader(cfg))",
          "73:  require.NoError(t, err)",
          "75:  out, err := MarshalConfig(c, false)",
          "76:  require.NoError(t, err)",
          "77:  require.YAMLEq(t, cfg, string(out))",
          "82: func TestMarshal_UnmarshalConfig_ScrubSecrets(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:       cluster: localhost",
          "117:   basic_auth:",
          "118:     username: admin",
          "120: remote_write:",
          "121: - url: http://localhost:9009/api/prom/push",
          "122:   remote_timeout: 30s",
          "123:   name: test-d0f32c",
          "125:   queue_config:",
          "126:     capacity: 500",
          "127:     max_shards: 1000",
          "",
          "[Removed Lines]",
          "119:     password: foobar",
          "124:   sigv4: {}",
          "",
          "[Added Lines]",
          "97:     password: SCRUBME",
          "102:   basic_auth:",
          "103:     username: admin",
          "104:     password: SCRUBME",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "141: remote_flush_deadline: 1m0s",
          "142: `",
          "144:  t.Run(\"direct marshal\", func(t *testing.T) {",
          "145:   var c Config",
          "146:   err := yaml.Unmarshal([]byte(cfg), &c)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:  scrub := func(in string) string {",
          "125:   return strings.ReplaceAll(in, \"SCRUBME\", \"<secret>\")",
          "126:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "149:   out, err := yaml.Marshal(c)",
          "150:   require.NoError(t, err)",
          "152:  })",
          "157:   require.NoError(t, err)",
          "160:   require.NoError(t, err)",
          "162:  })",
          "164:  t.Run(\"custom marshal methods\", func(t *testing.T) {",
          "165:   c, err := UnmarshalConfig(strings.NewReader(cfg))",
          "166:   require.NoError(t, err)",
          "169:   require.NoError(t, err)",
          "171:  })",
          "172: }",
          "",
          "[Removed Lines]",
          "151:   require.YAMLEq(t, cfg, string(out))",
          "154:  t.Run(\"direct mashal pointer\", func(t *testing.T) {",
          "155:   c := &Config{}",
          "156:   err := yaml.Unmarshal([]byte(cfg), c)",
          "159:   out, err := yaml.Marshal(c)",
          "161:   require.YAMLEq(t, cfg, string(out))",
          "168:   out, err := MarshalConfig(c, false)",
          "170:   require.YAMLEq(t, cfg, string(out))",
          "",
          "[Added Lines]",
          "135:   require.YAMLEq(t, scrub(cfg), string(out))",
          "138:  t.Run(\"direct marshal pointer\", func(t *testing.T) {",
          "139:   var c Config",
          "140:   err := yaml.Unmarshal([]byte(cfg), &c)",
          "143:   out, err := yaml.Marshal(&c)",
          "145:   require.YAMLEq(t, scrub(cfg), string(out))",
          "152:   out, err := MarshalConfig(c, true)",
          "154:   require.YAMLEq(t, scrub(cfg), string(out))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a9bc23c74f3727399e4f720abbbe9a3b5fc8b973",
      "candidate_info": {
        "commit_hash": "a9bc23c74f3727399e4f720abbbe9a3b5fc8b973",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/a9bc23c74f3727399e4f720abbbe9a3b5fc8b973",
        "files": [
          ".drone/drone.yml",
          "cmd/agent/entrypoint.go",
          "go.mod",
          "go.sum",
          "pkg/config/config.go",
          "pkg/config/config_test.go",
          "pkg/integrations/github_exporter/github_exporter.go",
          "pkg/integrations/github_exporter/github_test.go",
          "pkg/integrations/kafka_exporter/kafka_exporter.go",
          "pkg/integrations/kafka_exporter/kafka_test.go",
          "pkg/integrations/mongodb_exporter/mongodb_exporter.go",
          "pkg/integrations/mongodb_exporter/mongodb_test.go",
          "pkg/integrations/mysqld_exporter/mysqld-exporter.go",
          "pkg/integrations/mysqld_exporter/mysqld_test.go",
          "pkg/integrations/postgres_exporter/postgres_exporter.go",
          "pkg/integrations/postgres_exporter/postgres_test.go",
          "pkg/integrations/redis_exporter/redis_exporter.go",
          "pkg/integrations/redis_exporter/redis_exporter_test.go",
          "pkg/metrics/cluster/cluster.go",
          "pkg/metrics/cluster/config.go",
          "pkg/metrics/instance/configstore/api.go",
          "pkg/metrics/instance/configstore/api_test.go",
          "pkg/metrics/instance/instance.go",
          "pkg/metrics/instance/marshal_test.go",
          "pkg/traces/config.go",
          "pkg/traces/config_test.go"
        ],
        "message": "Merge patch release to main (#1153)\n\n* Add secret type to sensitive values\n\n* Break out config tests to their own implementation. Also remove username has a sensitive value.\n\n* Update changelog\n\n* Fix failing test\n\n* Scrub secrets when marshaling instance configs\n\n* update for v0.21\n\n* Updated changes from the merge.\n\n* Remove changelog\n\n* Scrub out receivers has ***receivers_scrubber***:null\n\n* obscure etcd/consul credentials\n\n* Update pkg/traces/config_test.go\n\nCo-authored-by: Robert Fratto <robert.fratto@grafana.com>\n\n* Update pkg/config/config.go\n\n* go fmt\n\n* Change to using custom object and return <secret>\n\n* Fix bad merge\n\n* [v0.21.2] toggle config endpoint (#19)\n\n* disable /-/config endpoint by default\n\n* disable scraping api get endpoint as well\n\n* fix new test\n\n* add test and rename flag\n\nCo-authored-by: Robert Fratto <robertfratto@gmail.com>\n\n* Update version to v0.21.2\n\n* Update defaults.go\n\n* fix /-/config endpoint\n\n* also fix non-pointer config bug\n\n* temporarily disable linting for release\n\n* fix lint errors\n\nCo-authored-by: Matt Durham <mattdurham@ppog.org>\nCo-authored-by: Robert Lankford <robert.lankford@grafana.com>",
        "before_after_code_files": [
          "cmd/agent/entrypoint.go||cmd/agent/entrypoint.go",
          "go.mod||go.mod",
          "go.sum||go.sum",
          "pkg/config/config.go||pkg/config/config.go",
          "pkg/config/config_test.go||pkg/config/config_test.go",
          "pkg/integrations/github_exporter/github_exporter.go||pkg/integrations/github_exporter/github_exporter.go",
          "pkg/integrations/github_exporter/github_test.go||pkg/integrations/github_exporter/github_test.go",
          "pkg/integrations/kafka_exporter/kafka_exporter.go||pkg/integrations/kafka_exporter/kafka_exporter.go",
          "pkg/integrations/kafka_exporter/kafka_test.go||pkg/integrations/kafka_exporter/kafka_test.go",
          "pkg/integrations/mongodb_exporter/mongodb_exporter.go||pkg/integrations/mongodb_exporter/mongodb_exporter.go",
          "pkg/integrations/mongodb_exporter/mongodb_test.go||pkg/integrations/mongodb_exporter/mongodb_test.go",
          "pkg/integrations/mysqld_exporter/mysqld-exporter.go||pkg/integrations/mysqld_exporter/mysqld-exporter.go",
          "pkg/integrations/mysqld_exporter/mysqld_test.go||pkg/integrations/mysqld_exporter/mysqld_test.go",
          "pkg/integrations/postgres_exporter/postgres_exporter.go||pkg/integrations/postgres_exporter/postgres_exporter.go",
          "pkg/integrations/postgres_exporter/postgres_test.go||pkg/integrations/postgres_exporter/postgres_test.go",
          "pkg/integrations/redis_exporter/redis_exporter.go||pkg/integrations/redis_exporter/redis_exporter.go",
          "pkg/integrations/redis_exporter/redis_exporter_test.go||pkg/integrations/redis_exporter/redis_exporter_test.go",
          "pkg/metrics/cluster/cluster.go||pkg/metrics/cluster/cluster.go",
          "pkg/metrics/cluster/config.go||pkg/metrics/cluster/config.go",
          "pkg/metrics/instance/configstore/api.go||pkg/metrics/instance/configstore/api.go",
          "pkg/metrics/instance/configstore/api_test.go||pkg/metrics/instance/configstore/api_test.go",
          "pkg/metrics/instance/instance.go||pkg/metrics/instance/instance.go",
          "pkg/metrics/instance/marshal_test.go||pkg/metrics/instance/marshal_test.go",
          "pkg/traces/config.go||pkg/traces/config.go",
          "pkg/traces/config_test.go||pkg/traces/config_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/grafana/agent/pull/1153"
        ],
        "olp_code_files": {
          "patch": [
            "pkg/metrics/instance/configstore/api.go||pkg/metrics/instance/configstore/api.go",
            "pkg/metrics/instance/configstore/api_test.go||pkg/metrics/instance/configstore/api_test.go",
            "pkg/metrics/instance/instance.go||pkg/metrics/instance/instance.go",
            "pkg/metrics/instance/marshal_test.go||pkg/metrics/instance/marshal_test.go"
          ],
          "candidate": [
            "pkg/metrics/instance/configstore/api.go||pkg/metrics/instance/configstore/api.go",
            "pkg/metrics/instance/configstore/api_test.go||pkg/metrics/instance/configstore/api_test.go",
            "pkg/metrics/instance/instance.go||pkg/metrics/instance/instance.go",
            "pkg/metrics/instance/marshal_test.go||pkg/metrics/instance/marshal_test.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/agent/entrypoint.go||cmd/agent/entrypoint.go": [
          "File: cmd/agent/entrypoint.go -> cmd/agent/entrypoint.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:  mux.HandleFunc(\"/-/config\", func(rw http.ResponseWriter, r *http.Request) {",
          "171:   ep.mut.Lock()",
          "173:   ep.mut.Unlock()",
          "177:   } else {",
          "179:   }",
          "180:  })",
          "",
          "[Removed Lines]",
          "172:   bb, err := yaml.Marshal(ep.cfg)",
          "175:   if err != nil {",
          "176:    http.Error(rw, fmt.Sprintf(\"failed to marshal config: %s\", err), http.StatusInternalServerError)",
          "178:    _, _ = rw.Write(bb)",
          "",
          "[Added Lines]",
          "172:   cfg := ep.cfg",
          "175:   if cfg.EnableConfigEndpoints {",
          "176:    bb, err := yaml.Marshal(cfg)",
          "177:    if err != nil {",
          "178:     http.Error(rw, fmt.Sprintf(\"failed to marshal config: %s\", err), http.StatusInternalServerError)",
          "179:    } else {",
          "180:     _, _ = rw.Write(bb)",
          "181:    }",
          "183:    rw.WriteHeader(http.StatusNotFound)",
          "184:    _, _ = rw.Write([]byte(\"404 - config endpoint is disabled\"))",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:  github.com/hashicorp/consul => github.com/hashicorp/consul v1.5.1",
          "109:  github.com/hpcloud/tail => github.com/grafana/tail v0.0.0-20201004203643-7aa4e4a91f03",
          "110:  github.com/prometheus/prometheus => github.com/grafana/prometheus v1.8.2-0.20211103031328-89bb32ee4ae7",
          "112:  k8s.io/api => k8s.io/api v0.21.0",
          "113:  k8s.io/apimachinery => k8s.io/apimachinery v0.21.0",
          "114:  k8s.io/client-go => k8s.io/client-go v0.21.0",
          "",
          "[Removed Lines]",
          "111:  gopkg.in/yaml.v2 => github.com/rfratto/go-yaml v0.0.0-20200521142311-984fc90c8a04",
          "",
          "[Added Lines]",
          "111:  gopkg.in/yaml.v2 => github.com/rfratto/go-yaml v0.0.0-20211119180816-77389c3526dc",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "1967: github.com/remyoudompheng/bigfft v0.0.0-20200410134404-eec4a21b6bb0/go.mod h1:qqbHyh8v60DhA7CoWK5oRCqLrMHRGoxYCSS9EjAz6Eo=",
          "1968: github.com/renier/xmlrpc v0.0.0-20170708154548-ce4a1a486c03/go.mod h1:gRAiPF5C5Nd0eyyRdqIu9qTiFSoZzpTq727b5B8fkkU=",
          "1969: github.com/retailnext/hllpp v1.0.1-0.20180308014038-101a6d2f8b52/go.mod h1:RDpi1RftBQPUCDRw6SmxeaREsAaRKnOclghuzp/WRzc=",
          "1972: github.com/rgeyer/github-exporter v0.0.0-20210722215637-d0cec2ee0dc8 h1:wNuNGrFzFmZlhrtz1Q8EiK1Ob6yWli8lX7D2AGmSGzE=",
          "1973: github.com/rgeyer/github-exporter v0.0.0-20210722215637-d0cec2ee0dc8/go.mod h1:6XoOvFDTfk3aqGaOLHLxoWiZNx4zHobApOhKc3oHF/g=",
          "1974: github.com/rhnvrm/simples3 v0.6.1/go.mod h1:Y+3vYm2V7Y4VijFoJHHTrja6OgPrJ2cBti8dPGkC3sA=",
          "",
          "[Removed Lines]",
          "1970: github.com/rfratto/go-yaml v0.0.0-20200521142311-984fc90c8a04 h1:1HAVwfHi7d7nGq7IEds0aGGX6jLPblrZod5TrGxHghs=",
          "1971: github.com/rfratto/go-yaml v0.0.0-20200521142311-984fc90c8a04/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=",
          "",
          "[Added Lines]",
          "1970: github.com/rfratto/go-yaml v0.0.0-20211119180816-77389c3526dc h1:g196Usc63pWDzWallipxVhsEjDdh/+RLc/Oz7q3ihW4=",
          "1971: github.com/rfratto/go-yaml v0.0.0-20211119180816-77389c3526dc/go.mod h1:rMzeXFmWpS5JnfDANtpzbklRJY4pqZMJNN9/SJHAXPA=",
          "",
          "---------------"
        ],
        "pkg/config/config.go||pkg/config/config.go": [
          "File: pkg/config/config.go -> pkg/config/config.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package config",
          "3: import (",
          "4:  \"flag\"",
          "5:  \"fmt\"",
          "6:  \"io/ioutil\"",
          "7:  \"os\"",
          "8:  \"unicode\"",
          "10:  \"github.com/drone/envsubst/v2\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4:  \"bytes\"",
          "9:  \"strings\"",
          "10:  \"testing\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:  \"github.com/grafana/agent/pkg/metrics\"",
          "16:  \"github.com/grafana/agent/pkg/traces\"",
          "17:  \"github.com/grafana/agent/pkg/util\"",
          "18:  \"github.com/pkg/errors\"",
          "19:  \"github.com/prometheus/common/config\"",
          "20:  \"github.com/prometheus/common/version\"",
          "21:  \"github.com/weaveworks/common/server\"",
          "22:  \"gopkg.in/yaml.v2\"",
          "23: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:  \"github.com/grafana/dskit/kv/consul\"",
          "22:  \"github.com/grafana/dskit/kv/etcd\"",
          "26:  \"github.com/stretchr/testify/require\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "26: var DefaultConfig = Config{",
          "30: }",
          "",
          "[Removed Lines]",
          "28:  Metrics:      metrics.DefaultConfig,",
          "29:  Integrations: integrations.DefaultManagerConfig,",
          "",
          "[Added Lines]",
          "34:  Metrics:               metrics.DefaultConfig,",
          "35:  Integrations:          integrations.DefaultManagerConfig,",
          "36:  EnableConfigEndpoints: false,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "50:  ExperimentalConfigURLs bool   `yaml:\"-\"`",
          "51:  BasicAuthUser          string `yaml:\"-\"`",
          "52:  BasicAuthPassFile      string `yaml:\"-\"`",
          "53: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:  EnableConfigEndpoints bool `yaml:\"-\"`",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "106:  return nil",
          "107: }",
          "111: func (c *Config) LogDeprecations(l log.Logger) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120: func (c Config) MarshalYAML() (interface{}, error) {",
          "121:  var buf bytes.Buffer",
          "123:  enc := yaml.NewEncoder(&buf)",
          "124:  enc.SetHook(func(in interface{}) (ok bool, out interface{}, err error) {",
          "126:   switch v := in.(type) {",
          "127:   case etcd.Config:",
          "128:    v.Password = \"<secret>\"",
          "129:    return true, v, nil",
          "130:   case consul.Config:",
          "131:    v.ACLToken = \"<secret>\"",
          "132:    return true, v, nil",
          "133:   default:",
          "134:    return false, nil, nil",
          "135:   }",
          "136:  })",
          "138:  type config Config",
          "139:  if err := enc.Encode((config)(c)); err != nil {",
          "140:   return nil, err",
          "141:  }",
          "145:  var m yaml.MapSlice",
          "146:  if err := yaml.Unmarshal(buf.Bytes(), &m); err != nil {",
          "147:   return nil, err",
          "148:  }",
          "149:  return m, nil",
          "150: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "142:   return err",
          "143:  }",
          "145:  return nil",
          "146: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188:  c.Metrics.ServiceConfig.APIEnableGetConfiguration = c.EnableConfigEndpoints",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "155:  f.StringVar(&c.ReloadAddress, \"reload-addr\", \"127.0.0.1\", \"address to expose a secondary server for /-/reload on.\")",
          "156:  f.IntVar(&c.ReloadPort, \"reload-port\", 0, \"port to expose a secondary server for /-/reload on. 0 disables secondary server.\")",
          "157:  f.StringVar(&c.BasicAuthUser, \"config.url.basic-auth-user\", \"\",",
          "158:   \"basic auth username for fetching remote config. (requires config-urls experiment to be enabled\")",
          "159:  f.StringVar(&c.BasicAuthPassFile, \"config.url.basic-auth-password-file\", \"\",",
          "160:   \"path to file containing basic auth password for fetching remote config. (requires config-urls experiment to be enabled\")",
          "161:  f.BoolVar(&c.ExperimentalConfigURLs, \"experiment.config-urls.enable\", false, \"enable experimental remote config URLs feature\")",
          "162: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:  f.BoolVar(&c.EnableConfigEndpoints, \"config.enable-read-api\", false, \"Enables the /-/config and /agent/api/v1/configs/{name} APIs. Be aware that secrets could be exposed by enabling these endpoints!\")",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "297:  return &cfg, nil",
          "298: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "349: func CheckSecret(t *testing.T, rawCfg string, originalValue string) {",
          "350:  var cfg = &Config{}",
          "351:  err := LoadBytes([]byte(rawCfg), false, cfg)",
          "352:  require.NoError(t, err)",
          "353:  bb, err := yaml.Marshal(cfg)",
          "354:  require.NoError(t, err)",
          "355:  scrubbedCfg := string(bb)",
          "356:  require.True(t, strings.Contains(scrubbedCfg, \"<secret>\"))",
          "357:  require.False(t, strings.Contains(scrubbedCfg, originalValue))",
          "358: }",
          "",
          "---------------"
        ],
        "pkg/config/config_test.go||pkg/config/config_test.go": [
          "File: pkg/config/config_test.go -> pkg/config/config_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"flag\"",
          "5:  \"os\"",
          "6:  \"testing\"",
          "7:  \"time\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:  \"strings\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:  promCfg \"github.com/prometheus/prometheus/config\"",
          "15:  \"github.com/prometheus/prometheus/pkg/labels\"",
          "16:  \"github.com/stretchr/testify/require\"",
          "17: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:  \"gopkg.in/yaml.v2\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36:  require.True(t, c.Server.RegisterInstrumentation)",
          "37: }",
          "39: func TestConfig_OverrideDefaultsOnLoad(t *testing.T) {",
          "40:  cfg := `",
          "41: metrics:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: func TestConfig_ConfigAPIFlag(t *testing.T) {",
          "44:  t.Run(\"Disabled\", func(t *testing.T) {",
          "45:   cfg := `{}`",
          "46:   fs := flag.NewFlagSet(\"test\", flag.ExitOnError)",
          "47:   c, err := load(fs, []string{\"-config.file\", \"test\"}, func(_ string, _ bool, c *Config) error {",
          "48:    return LoadBytes([]byte(cfg), false, c)",
          "49:   })",
          "50:   require.NoError(t, err)",
          "51:   require.False(t, c.EnableConfigEndpoints)",
          "52:   require.False(t, c.Metrics.ServiceConfig.APIEnableGetConfiguration)",
          "53:  })",
          "54:  t.Run(\"Enabled\", func(t *testing.T) {",
          "55:   cfg := `{}`",
          "56:   fs := flag.NewFlagSet(\"test\", flag.ExitOnError)",
          "57:   c, err := load(fs, []string{\"-config.file\", \"test\", \"-config.enable-read-api\"}, func(_ string, _ bool, c *Config) error {",
          "58:    return LoadBytes([]byte(cfg), false, c)",
          "59:   })",
          "60:   require.NoError(t, err)",
          "61:   require.True(t, c.EnableConfigEndpoints)",
          "62:   require.True(t, c.Metrics.ServiceConfig.APIEnableGetConfiguration)",
          "63:  })",
          "64: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "359:  expected := `\\\\temp\\\\Logs\\\\(?P<log_app>.+?)\\\\`",
          "360:  require.Equal(t, expected, pipelineStages[\"expression\"].(string))",
          "361: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390: func TestConfig_ObscureSecrets(t *testing.T) {",
          "391:  cfgText := `",
          "392: metrics:",
          "393:   wal_directory: /tmp",
          "394:   scraping_service:",
          "395:     enabled: true",
          "396:     kvstore:",
          "397:       store: consul",
          "398:       consul:",
          "399:         acl_token: verysecret",
          "400:       etcd:",
          "401:         password: verysecret",
          "402:     lifecycler:",
          "403:       ring:",
          "404:         kvstore:",
          "405:           store: consul",
          "406:           consul:",
          "407:             acl_token: verysecret",
          "408:           etcd:",
          "409:             password: verysecret",
          "410: `",
          "412:  var cfg Config",
          "413:  require.NoError(t, LoadBytes([]byte(cfgText), false, &cfg))",
          "415:  require.Equal(t, \"verysecret\", cfg.Metrics.ServiceConfig.KVStore.Consul.ACLToken)",
          "416:  require.Equal(t, \"verysecret\", cfg.Metrics.ServiceConfig.KVStore.Etcd.Password)",
          "417:  require.Equal(t, \"verysecret\", cfg.Metrics.ServiceConfig.Lifecycler.RingConfig.KVStore.Consul.ACLToken)",
          "418:  require.Equal(t, \"verysecret\", cfg.Metrics.ServiceConfig.Lifecycler.RingConfig.KVStore.Etcd.Password)",
          "420:  bb, err := yaml.Marshal(&cfg)",
          "421:  require.NoError(t, err)",
          "423:  require.False(t, strings.Contains(string(bb), \"verysecret\"), \"secrets did not get obscured\")",
          "424:  require.True(t, strings.Contains(string(bb), \"<secret>\"), \"secrets did not get obscured properly\")",
          "427:  require.Equal(t, \"verysecret\", cfg.Metrics.ServiceConfig.KVStore.Consul.ACLToken)",
          "428:  require.Equal(t, \"verysecret\", cfg.Metrics.ServiceConfig.KVStore.Etcd.Password)",
          "429:  require.Equal(t, \"verysecret\", cfg.Metrics.ServiceConfig.Lifecycler.RingConfig.KVStore.Consul.ACLToken)",
          "430:  require.Equal(t, \"verysecret\", cfg.Metrics.ServiceConfig.Lifecycler.RingConfig.KVStore.Etcd.Password)",
          "431: }",
          "",
          "---------------"
        ],
        "pkg/integrations/github_exporter/github_exporter.go||pkg/integrations/github_exporter/github_exporter.go": [
          "File: pkg/integrations/github_exporter/github_exporter.go -> pkg/integrations/github_exporter/github_exporter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:  \"github.com/grafana/agent/pkg/integrations/config\"",
          "11:  gh_config \"github.com/infinityworks/github-exporter/config\"",
          "12:  \"github.com/infinityworks/github-exporter/exporter\"",
          "13: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13:  config_util \"github.com/prometheus/common/config\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:  Users []string `yaml:\"users,omitempty\"`",
          "40:  APITokenFile string `yaml:\"api_token_file,omitempty\"`",
          "",
          "[Removed Lines]",
          "37:  APIToken string `yaml:\"api_token,omitempty\"`",
          "",
          "[Added Lines]",
          "38:  APIToken config_util.Secret `yaml:\"api_token,omitempty\"`",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:  conf.SetOrganisations(c.Organizations)",
          "91:  conf.SetUsers(c.Users)",
          "92:  if c.APIToken != \"\" {",
          "94:  }",
          "95:  if c.APITokenFile != \"\" {",
          "96:   err = conf.SetAPITokenFromFile(c.APITokenFile)",
          "",
          "[Removed Lines]",
          "93:   conf.SetAPIToken(c.APIToken)",
          "",
          "[Added Lines]",
          "94:   conf.SetAPIToken(string(c.APIToken))",
          "",
          "---------------"
        ],
        "pkg/integrations/github_exporter/github_test.go||pkg/integrations/github_exporter/github_test.go": [
          "File: pkg/integrations/github_exporter/github_test.go -> pkg/integrations/github_exporter/github_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package github_exporter //nolint:golint",
          "3: import (",
          "4:  \"testing\"",
          "6:  \"github.com/grafana/agent/pkg/config\"",
          "8: )",
          "10: func TestConfig_SecretGithub(t *testing.T) {",
          "11:  stringCfg := `",
          "12: prometheus:",
          "13:   wal_directory: /tmp/agent",
          "14: integrations:",
          "15:   github_exporter:",
          "16:     enabled: true",
          "17:     api_token: secret_api`",
          "18:  config.CheckSecret(t, stringCfg, \"secret_api\")",
          "19: }",
          "",
          "---------------"
        ],
        "pkg/integrations/kafka_exporter/kafka_exporter.go||pkg/integrations/kafka_exporter/kafka_exporter.go": [
          "File: pkg/integrations/kafka_exporter/kafka_exporter.go -> pkg/integrations/kafka_exporter/kafka_exporter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"fmt\"",
          "6:  \"github.com/Shopify/sarama\"",
          "7:  kafka_exporter \"github.com/davidmparrott/kafka_exporter/v2/exporter\"",
          "8:  \"github.com/go-kit/log\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:  config_util \"github.com/prometheus/common/config\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:  SASLUsername string `yaml:\"sasl_username,omitempty\"`",
          "46:  SASLMechanism string `yaml:\"sasl_mechanism,omitempty\"`",
          "",
          "[Removed Lines]",
          "43:  SASLPassword string `yaml:\"sasl_password,omitempty\"`",
          "",
          "[Added Lines]",
          "45:  SASLPassword config_util.Secret `yaml:\"sasl_password,omitempty\"`",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:   UseSASL:                  c.UseSASL,",
          "151:   UseSASLHandshake:         c.UseSASLHandshake,",
          "152:   SaslUsername:             c.SASLUsername,",
          "154:   SaslMechanism:            c.SASLMechanism,",
          "155:   UseTLS:                   c.UseTLS,",
          "156:   TlsCAFile:                c.CAFile,",
          "",
          "[Removed Lines]",
          "153:   SaslPassword:             c.SASLPassword,",
          "",
          "[Added Lines]",
          "155:   SaslPassword:             string(c.SASLPassword),",
          "",
          "---------------"
        ],
        "pkg/integrations/kafka_exporter/kafka_test.go||pkg/integrations/kafka_exporter/kafka_test.go": [
          "File: pkg/integrations/kafka_exporter/kafka_test.go -> pkg/integrations/kafka_exporter/kafka_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package kafka_exporter //nolint:golint",
          "3: import (",
          "4:  \"testing\"",
          "6:  \"github.com/grafana/agent/pkg/config\"",
          "7: )",
          "9: func TestConfig_SecretKafkaPassword(t *testing.T) {",
          "10:  stringCfg := `",
          "11: prometheus:",
          "12:   wal_directory: /tmp/agent",
          "13: integrations:",
          "14:   kafka_exporter:",
          "15:     enabled: true",
          "16:     sasl_password: secret_password",
          "17: `",
          "18:  config.CheckSecret(t, stringCfg, \"secret_password\")",
          "19: }",
          "",
          "---------------"
        ],
        "pkg/integrations/mongodb_exporter/mongodb_exporter.go||pkg/integrations/mongodb_exporter/mongodb_exporter.go": [
          "File: pkg/integrations/mongodb_exporter/mongodb_exporter.go -> pkg/integrations/mongodb_exporter/mongodb_exporter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"github.com/grafana/agent/pkg/integrations\"",
          "9:  \"github.com/grafana/agent/pkg/integrations/config\"",
          "10:  \"github.com/percona/mongodb_exporter/exporter\"",
          "11: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  config_util \"github.com/prometheus/common/config\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:  Common config.Common `yaml:\",inline\"`",
          "19: }",
          "",
          "[Removed Lines]",
          "18:  URI string `yaml:\"mongodb_uri\"`",
          "",
          "[Added Lines]",
          "19:  URI config_util.Secret `yaml:\"mongodb_uri\"`",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37: }",
          "42:  if err != nil {",
          "43:   return \"\", fmt.Errorf(\"could not parse url: %w\", err)",
          "44:  }",
          "",
          "[Removed Lines]",
          "40: func (c *Config) InstanceKey(agentKey string) (string, error) {",
          "41:  u, err := url.Parse(c.URI)",
          "",
          "[Added Lines]",
          "41: func (c *Config) InstanceKey(_ string) (string, error) {",
          "42:  u, err := url.Parse(string(c.URI))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "59:  logrusLogger := NewLogger(logger)",
          "61:  exp, err := exporter.New(&exporter.Opts{",
          "63:   Logger:                 logrusLogger,",
          "64:   DisableDefaultRegistry: true,",
          "",
          "[Removed Lines]",
          "62:   URI:                    c.URI,",
          "",
          "[Added Lines]",
          "63:   URI:                    string(c.URI),",
          "",
          "---------------"
        ],
        "pkg/integrations/mongodb_exporter/mongodb_test.go||pkg/integrations/mongodb_exporter/mongodb_test.go": [
          "File: pkg/integrations/mongodb_exporter/mongodb_test.go -> pkg/integrations/mongodb_exporter/mongodb_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package mongodb_exporter //nolint:golint",
          "3: import (",
          "4:  \"testing\"",
          "6:  \"github.com/grafana/agent/pkg/config\"",
          "7: )",
          "9: func TestConfig_SecretMongoDB(t *testing.T) {",
          "10:  stringCfg := `",
          "11: prometheus:",
          "12:   wal_directory: /tmp/agent",
          "13: integrations:",
          "14:   mongodb_exporter:",
          "15:     enabled: true",
          "16:     mongodb_uri: secret_password_in_uri",
          "17: `",
          "18:  config.CheckSecret(t, stringCfg, \"secret_password_in_uri\")",
          "19: }",
          "",
          "---------------"
        ],
        "pkg/integrations/mysqld_exporter/mysqld-exporter.go||pkg/integrations/mysqld_exporter/mysqld-exporter.go": [
          "File: pkg/integrations/mysqld_exporter/mysqld-exporter.go -> pkg/integrations/mysqld_exporter/mysqld-exporter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  \"fmt\"",
          "7:  \"os\"",
          "9:  \"github.com/go-kit/log\"",
          "10:  \"github.com/go-kit/log/level\"",
          "11:  \"github.com/go-sql-driver/mysql\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:  config_util \"github.com/prometheus/common/config\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:  Common config.Common `yaml:\",inline\"`",
          "43:  EnableCollectors []string `yaml:\"enable_collectors,omitempty\"`",
          "",
          "[Removed Lines]",
          "40:  DataSourceName string `yaml:\"data_source_name,omitempty\"`",
          "",
          "[Added Lines]",
          "42:  DataSourceName config_util.Secret `yaml:\"data_source_name,omitempty\"`",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86: }",
          "91:  if err != nil {",
          "92:   return \"\", fmt.Errorf(\"failed to parse DSN: %w\", err)",
          "93:  }",
          "",
          "[Removed Lines]",
          "89: func (c *Config) InstanceKey(agentKey string) (string, error) {",
          "90:  m, err := mysql.ParseDSN(c.DataSourceName)",
          "",
          "[Added Lines]",
          "91: func (c *Config) InstanceKey(_ string) (string, error) {",
          "92:  m, err := mysql.ParseDSN(string(c.DataSourceName))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116: func New(log log.Logger, c *Config) (integrations.Integration, error) {",
          "117:  dsn := c.DataSourceName",
          "118:  if len(dsn) == 0 {",
          "120:  }",
          "121:  if len(dsn) == 0 {",
          "122:   return nil, fmt.Errorf(\"cannot create mysqld_exporter; neither mysqld_exporter.data_source_name or $MYSQLD_EXPORTER_DATA_SOURCE_NAME is set\")",
          "123:  }",
          "125:  scrapers := GetScrapers(c)",
          "127:   LockTimeout:   c.LockWaitTimeout,",
          "128:   SlowLogFilter: c.LogSlowFilter,",
          "129:  })",
          "",
          "[Removed Lines]",
          "119:   dsn = os.Getenv(\"MYSQLD_EXPORTER_DATA_SOURCE_NAME\")",
          "126:  exporter := collector.New(context.Background(), dsn, collector.NewMetrics(), scrapers, log, collector.Config{",
          "",
          "[Added Lines]",
          "121:   dsn = config_util.Secret(os.Getenv(\"MYSQLD_EXPORTER_DATA_SOURCE_NAME\"))",
          "128:  exporter := collector.New(context.Background(), string(dsn), collector.NewMetrics(), scrapers, log, collector.Config{",
          "",
          "---------------"
        ],
        "pkg/integrations/mysqld_exporter/mysqld_test.go||pkg/integrations/mysqld_exporter/mysqld_test.go": [
          "File: pkg/integrations/mysqld_exporter/mysqld_test.go -> pkg/integrations/mysqld_exporter/mysqld_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package mysqld_exporter //nolint:golint",
          "3: import (",
          "4:  \"testing\"",
          "6:  \"github.com/grafana/agent/pkg/config\"",
          "7: )",
          "9: func TestConfig_SecretMysqlD(t *testing.T) {",
          "10:  stringCfg := `",
          "11: prometheus:",
          "12:   wal_directory: /tmp/agent",
          "13: integrations:",
          "14:   mysqld_exporter:",
          "15:     enabled: true",
          "16:     data_source_name: root:secret_password@myserver:3306`",
          "17:  config.CheckSecret(t, stringCfg, \"secret_password\")",
          "18: }",
          "",
          "---------------"
        ],
        "pkg/integrations/postgres_exporter/postgres_exporter.go||pkg/integrations/postgres_exporter/postgres_exporter.go": [
          "File: pkg/integrations/postgres_exporter/postgres_exporter.go -> pkg/integrations/postgres_exporter/postgres_exporter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  \"os\"",
          "7:  \"strings\"",
          "9:  \"github.com/go-kit/log\"",
          "10:  \"github.com/grafana/agent/pkg/integrations\"",
          "11:  \"github.com/grafana/agent/pkg/integrations/config\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:  config_util \"github.com/prometheus/common/config\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:  Common config.Common `yaml:\",inline\"`",
          "23:  DisableSettingsMetrics bool     `yaml:\"disable_settings_metrics,omitempty\"`",
          "24:  AutodiscoverDatabases  bool     `yaml:\"autodiscover_databases,omitempty\"`",
          "",
          "[Removed Lines]",
          "21:  DataSourceNames []string `yaml:\"data_source_names,omitempty\"`",
          "",
          "[Added Lines]",
          "23:  DataSourceNames []config_util.Secret `yaml:\"data_source_names,omitempty\"`",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:  dsn, err := c.getDataSourceNames()",
          "51:  if err != nil {",
          "52:   return \"\", err",
          "",
          "[Removed Lines]",
          "49: func (c *Config) InstanceKey(agentKey string) (string, error) {",
          "",
          "[Added Lines]",
          "51: func (c *Config) InstanceKey(_ string) (string, error) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "112: func (c *Config) getDataSourceNames() ([]string, error) {",
          "113:  dsn := c.DataSourceNames",
          "114:  if len(dsn) == 0 {",
          "116:  }",
          "117:  if len(dsn) == 0 {",
          "118:   return nil, fmt.Errorf(\"cannot create postgres_exporter; neither postgres_exporter.data_source_name or $POSTGRES_EXPORTER_DATA_SOURCE_NAME is set\")",
          "119:  }",
          "121: }",
          "123: func init() {",
          "",
          "[Removed Lines]",
          "115:   dsn = strings.Split(os.Getenv(\"POSTGRES_EXPORTER_DATA_SOURCE_NAME\"), \",\")",
          "120:  return dsn, nil",
          "",
          "[Added Lines]",
          "116:  var stringDsn []string",
          "118:   stringDsn = append(stringDsn, strings.Split(os.Getenv(\"POSTGRES_EXPORTER_DATA_SOURCE_NAME\"), \",\")...)",
          "119:  } else {",
          "120:   for _, d := range dsn {",
          "121:    stringDsn = append(stringDsn, string(d))",
          "122:   }",
          "127:  return stringDsn, nil",
          "",
          "---------------"
        ],
        "pkg/integrations/postgres_exporter/postgres_test.go||pkg/integrations/postgres_exporter/postgres_test.go": [
          "File: pkg/integrations/postgres_exporter/postgres_test.go -> pkg/integrations/postgres_exporter/postgres_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package postgres_exporter //nolint:golint",
          "3: import (",
          "4:  \"testing\"",
          "6:  \"github.com/grafana/agent/pkg/config\"",
          "7: )",
          "9: func TestConfig_SecretPostgres(t *testing.T) {",
          "10:  stringCfg := `",
          "11: prometheus:",
          "12:   wal_directory: /tmp/agent",
          "13: integrations:",
          "14:   postgres_exporter:",
          "15:     enabled: true",
          "16:     data_source_names: [\"secret_password_in_uri\",\"secret_password_in_uri_2\"]",
          "17: `",
          "18:  config.CheckSecret(t, stringCfg, \"secret_password_in_uri\")",
          "19:  config.CheckSecret(t, stringCfg, \"secret_password_in_uri_2\")",
          "21: }",
          "",
          "---------------"
        ],
        "pkg/integrations/redis_exporter/redis_exporter.go||pkg/integrations/redis_exporter/redis_exporter.go": [
          "File: pkg/integrations/redis_exporter/redis_exporter.go -> pkg/integrations/redis_exporter/redis_exporter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  \"io/ioutil\"",
          "8:  \"time\"",
          "10:  \"github.com/go-kit/log\"",
          "11:  \"github.com/go-kit/log/level\"",
          "13:  re \"github.com/oliver006/redis_exporter/exporter\"",
          "17: )",
          "",
          "[Removed Lines]",
          "15:  \"github.com/grafana/agent/pkg/integrations\"",
          "16:  \"github.com/grafana/agent/pkg/integrations/config\"",
          "",
          "[Added Lines]",
          "10:  \"github.com/grafana/agent/pkg/integrations\"",
          "11:  \"github.com/grafana/agent/pkg/integrations/config\"",
          "16:  config_util \"github.com/prometheus/common/config\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: var DefaultConfig = Config{",
          "22:  Namespace:               \"redis\",",
          "23:  ConfigCommand:           \"CONFIG\",",
          "25:  SetClientName:           true,",
          "26:  CheckKeyGroupsBatchSize: 10000,",
          "27:  MaxDistinctKeyGroups:    100,",
          "",
          "[Removed Lines]",
          "24:  ConnectionTimeout:       (15 * time.Second),",
          "",
          "[Added Lines]",
          "24:  ConnectionTimeout:       15 * time.Second,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67: }",
          "",
          "[Removed Lines]",
          "40:  RedisAddr               string        `yaml:\"redis_addr,omitempty\"`",
          "41:  RedisUser               string        `yaml:\"redis_user,omitempty\"`",
          "42:  RedisPassword           string        `yaml:\"redis_password,omitempty\"`",
          "43:  RedisPasswordFile       string        `yaml:\"redis_password_file,omitempty\"`",
          "44:  Namespace               string        `yaml:\"namespace,omitempty\"`",
          "45:  ConfigCommand           string        `yaml:\"config_command,omitempty\"`",
          "46:  CheckKeys               string        `yaml:\"check_keys,omitempty\"`",
          "47:  CheckKeyGroups          string        `yaml:\"check_key_groups,omitempty\"`",
          "48:  CheckKeyGroupsBatchSize int64         `yaml:\"check_key_groups_batch_size,omitempty\"`",
          "49:  MaxDistinctKeyGroups    int64         `yaml:\"max_distinct_key_groups,omitempty\"`",
          "50:  CheckSingleKeys         string        `yaml:\"check_single_keys,omitempty\"`",
          "51:  CheckStreams            string        `yaml:\"check_streams,omitempty\"`",
          "52:  CheckSingleStreams      string        `yaml:\"check_single_streams,omitempty\"`",
          "53:  CountKeys               string        `yaml:\"count_keys,omitempty\"`",
          "54:  ScriptPath              string        `yaml:\"script_path,omitempty\"`",
          "55:  ConnectionTimeout       time.Duration `yaml:\"connection_timeout,omitempty\"`",
          "56:  TLSClientKeyFile        string        `yaml:\"tls_client_key_file,omitempty\"`",
          "57:  TLSClientCertFile       string        `yaml:\"tls_client_cert_file,omitempty\"`",
          "58:  TLSCaCertFile           string        `yaml:\"tls_ca_cert_file,omitempty\"`",
          "59:  SetClientName           bool          `yaml:\"set_client_name,omitempty\"`",
          "60:  IsTile38                bool          `yaml:\"is_tile38,omitempty\"`",
          "61:  ExportClientList        bool          `yaml:\"export_client_list,omitempty\"`",
          "62:  ExportClientPort        bool          `yaml:\"export_client_port,omitempty\"`",
          "63:  RedisMetricsOnly        bool          `yaml:\"redis_metrics_only,omitempty\"`",
          "64:  PingOnConnect           bool          `yaml:\"ping_on_connect,omitempty\"`",
          "65:  InclSystemMetrics       bool          `yaml:\"incl_system_metrics,omitempty\"`",
          "66:  SkipTLSVerification     bool          `yaml:\"skip_tls_verification,omitempty\"`",
          "",
          "[Added Lines]",
          "40:  RedisAddr               string             `yaml:\"redis_addr,omitempty\"`",
          "41:  RedisUser               string             `yaml:\"redis_user,omitempty\"`",
          "42:  RedisPassword           config_util.Secret `yaml:\"redis_password,omitempty\"`",
          "43:  RedisPasswordFile       string             `yaml:\"redis_password_file,omitempty\"`",
          "44:  Namespace               string             `yaml:\"namespace,omitempty\"`",
          "45:  ConfigCommand           string             `yaml:\"config_command,omitempty\"`",
          "46:  CheckKeys               string             `yaml:\"check_keys,omitempty\"`",
          "47:  CheckKeyGroups          string             `yaml:\"check_key_groups,omitempty\"`",
          "48:  CheckKeyGroupsBatchSize int64              `yaml:\"check_key_groups_batch_size,omitempty\"`",
          "49:  MaxDistinctKeyGroups    int64              `yaml:\"max_distinct_key_groups,omitempty\"`",
          "50:  CheckSingleKeys         string             `yaml:\"check_single_keys,omitempty\"`",
          "51:  CheckStreams            string             `yaml:\"check_streams,omitempty\"`",
          "52:  CheckSingleStreams      string             `yaml:\"check_single_streams,omitempty\"`",
          "53:  CountKeys               string             `yaml:\"count_keys,omitempty\"`",
          "54:  ScriptPath              string             `yaml:\"script_path,omitempty\"`",
          "55:  ConnectionTimeout       time.Duration      `yaml:\"connection_timeout,omitempty\"`",
          "56:  TLSClientKeyFile        string             `yaml:\"tls_client_key_file,omitempty\"`",
          "57:  TLSClientCertFile       string             `yaml:\"tls_client_cert_file,omitempty\"`",
          "58:  TLSCaCertFile           string             `yaml:\"tls_ca_cert_file,omitempty\"`",
          "59:  SetClientName           bool               `yaml:\"set_client_name,omitempty\"`",
          "60:  IsTile38                bool               `yaml:\"is_tile38,omitempty\"`",
          "61:  ExportClientList        bool               `yaml:\"export_client_list,omitempty\"`",
          "62:  ExportClientPort        bool               `yaml:\"export_client_port,omitempty\"`",
          "63:  RedisMetricsOnly        bool               `yaml:\"redis_metrics_only,omitempty\"`",
          "64:  PingOnConnect           bool               `yaml:\"ping_on_connect,omitempty\"`",
          "65:  InclSystemMetrics       bool               `yaml:\"incl_system_metrics,omitempty\"`",
          "66:  SkipTLSVerification     bool               `yaml:\"skip_tls_verification,omitempty\"`",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "72: func (c Config) GetExporterOptions() re.Options {",
          "73:  return re.Options{",
          "74:   User:                  c.RedisUser,",
          "76:   Namespace:             c.Namespace,",
          "77:   ConfigCommandName:     c.ConfigCommand,",
          "78:   CheckKeys:             c.CheckKeys,",
          "",
          "[Removed Lines]",
          "75:   Password:              c.RedisPassword,",
          "",
          "[Added Lines]",
          "75:   Password:              string(c.RedisPassword),",
          "",
          "---------------"
        ],
        "pkg/integrations/redis_exporter/redis_exporter_test.go||pkg/integrations/redis_exporter/redis_exporter_test.go": [
          "File: pkg/integrations/redis_exporter/redis_exporter_test.go -> pkg/integrations/redis_exporter/redis_exporter_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"net/http/httptest\"",
          "9:  \"testing\"",
          "11:  \"github.com/go-kit/log\"",
          "12:  \"github.com/gorilla/mux\"",
          "13:  \"github.com/prometheus/prometheus/pkg/textparse\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  \"github.com/grafana/agent/pkg/config\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:  }",
          "154: }",
          "156: func matchMetricNames(names map[string]bool, p textparse.Parser) {",
          "157:  for name := range names {",
          "158:   metricName, _ := p.Help()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158: func TestConfig_SecretRedisPassword(t *testing.T) {",
          "159:  stringCfg := `",
          "160: prometheus:",
          "161:   wal_directory: /tmp/agent",
          "162: integrations:",
          "163:   redis_exporter:",
          "164:     enabled: true",
          "165:     redis_password: secret_password",
          "166: `",
          "167:  config.CheckSecret(t, stringCfg, \"secret_password\")",
          "168: }",
          "",
          "---------------"
        ],
        "pkg/metrics/cluster/cluster.go||pkg/metrics/cluster/cluster.go": [
          "File: pkg/metrics/cluster/cluster.go -> pkg/metrics/cluster/cluster.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:  if err != nil {",
          "75:   return nil, fmt.Errorf(\"failed to initialize configstore: %w\", err)",
          "76:  }",
          "78:  reg.MustRegister(c.storeAPI)",
          "80:  c.watcher, err = newConfigWatcher(l, cfg, c.store, im, c.node.Owns, validate)",
          "",
          "[Removed Lines]",
          "77:  c.storeAPI = configstore.NewAPI(l, c.store, c.storeValidate)",
          "",
          "[Added Lines]",
          "77:  c.storeAPI = configstore.NewAPI(l, c.store, c.storeValidate, cfg.APIEnableGetConfiguration)",
          "",
          "---------------"
        ],
        "pkg/metrics/cluster/config.go||pkg/metrics/cluster/config.go": [
          "File: pkg/metrics/cluster/config.go -> pkg/metrics/cluster/config.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  DangerousAllowReadingFiles bool `yaml:\"dangerous_allow_reading_files\"`",
          "29: }",
          "",
          "[Removed Lines]",
          "28:  Client client.Config `yaml:\"-\"`",
          "",
          "[Added Lines]",
          "28:  Client                    client.Config `yaml:\"-\"`",
          "29:  APIEnableGetConfiguration bool          `yaml:\"-\"`",
          "",
          "---------------"
        ],
        "pkg/metrics/instance/configstore/api.go||pkg/metrics/instance/configstore/api.go": [
          "File: pkg/metrics/instance/configstore/api.go -> pkg/metrics/instance/configstore/api.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  totalCreatedConfigs prometheus.Counter",
          "28:  totalUpdatedConfigs prometheus.Counter",
          "29:  totalDeletedConfigs prometheus.Counter",
          "30: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:  enableGet bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: type Validator = func(c *instance.Config) error",
          "38:  return &API{",
          "39:   log:       l,",
          "40:   store:     store,",
          "",
          "[Removed Lines]",
          "37: func NewAPI(l log.Logger, store Store, v Validator) *API {",
          "",
          "[Added Lines]",
          "39: func NewAPI(l log.Logger, store Store, v Validator, enableGet bool) *API {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:    Name: \"agent_metrics_ha_configs_deleted_total\",",
          "53:    Help: \"Total number of deleted scraping service configs\",",
          "54:   }),",
          "55:  }",
          "56: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:   enableGet: enableGet,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "63:  r = r.UseEncodedPath()",
          "65:  r.HandleFunc(\"/agent/api/v1/configs\", api.ListConfigurations).Methods(\"GET\")",
          "67:  r.HandleFunc(\"/agent/api/v1/config/{name}\", api.PutConfiguration).Methods(\"PUT\", \"POST\")",
          "68:  r.HandleFunc(\"/agent/api/v1/config/{name}\", api.DeleteConfiguration).Methods(\"DELETE\")",
          "69: }",
          "",
          "[Removed Lines]",
          "66:  r.HandleFunc(\"/agent/api/v1/configs/{name}\", api.GetConfiguration).Methods(\"GET\")",
          "",
          "[Added Lines]",
          "69:  getConfigHandler := messageHandlerFunc(http.StatusNotFound, \"404 - config endpoint is disabled\")",
          "70:  if api.enableGet {",
          "71:   getConfigHandler = api.GetConfiguration",
          "72:  }",
          "73:  r.HandleFunc(\"/agent/api/v1/configs/{name}\", getConfigHandler).Methods(\"GET\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "126:  case err != nil:",
          "127:   api.writeError(rw, http.StatusInternalServerError, err)",
          "128:  case err == nil:",
          "130:   if err != nil {",
          "131:    api.writeError(rw, http.StatusInternalServerError, fmt.Errorf(\"could not marshal config for response: %w\", err))",
          "132:    return",
          "",
          "[Removed Lines]",
          "129:   bb, err := instance.MarshalConfig(&cfg, false)",
          "",
          "[Added Lines]",
          "136:   bb, err := instance.MarshalConfig(&cfg, true)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "252:  }",
          "253:  return name, nil",
          "254: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263: func messageHandlerFunc(statusCode int, msg string) http.HandlerFunc {",
          "264:  return func(rw http.ResponseWriter, r *http.Request) {",
          "265:   rw.WriteHeader(statusCode)",
          "266:   _, _ = rw.Write([]byte(msg))",
          "267:  }",
          "268: }",
          "",
          "---------------"
        ],
        "pkg/metrics/instance/configstore/api_test.go||pkg/metrics/instance/configstore/api_test.go": [
          "File: pkg/metrics/instance/configstore/api_test.go -> pkg/metrics/instance/configstore/api_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"bytes\"",
          "5:  \"context\"",
          "6:  \"fmt\"",
          "7:  \"io/ioutil\"",
          "8:  \"net/http\"",
          "9:  \"net/http/httptest\"",
          "10:  \"testing\"",
          "11:  \"time\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:  \"encoding/json\"",
          "8:  \"io\"",
          "12:  \"strings\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:   },",
          "27:  }",
          "30:  env := newAPITestEnvironment(t, api)",
          "32:  resp, err := http.Get(env.srv.URL + \"/agent/api/v1/configs\")",
          "",
          "[Removed Lines]",
          "29:  api := NewAPI(log.NewNopLogger(), s, nil)",
          "",
          "[Added Lines]",
          "32:  api := NewAPI(log.NewNopLogger(), s, nil, true)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:   },",
          "61:  }",
          "64:  env := newAPITestEnvironment(t, api)",
          "66:  resp, err := http.Get(env.srv.URL + \"/agent/api/v1/configs/does-not-exist\")",
          "",
          "[Removed Lines]",
          "63:  api := NewAPI(log.NewNopLogger(), s, nil)",
          "",
          "[Added Lines]",
          "66:  api := NewAPI(log.NewNopLogger(), s, nil, true)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "96:   },",
          "97:  }",
          "100:  env := newAPITestEnvironment(t, api)",
          "102:  resp, err := http.Get(env.srv.URL + \"/agent/api/v1/configs/exists\")",
          "",
          "[Removed Lines]",
          "99:  api := NewAPI(log.NewNopLogger(), s, nil)",
          "",
          "[Added Lines]",
          "102:  api := NewAPI(log.NewNopLogger(), s, nil, true)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "128:  })",
          "129: }",
          "131: func TestServer_PutConfiguration(t *testing.T) {",
          "132:  var s Mock",
          "135:  env := newAPITestEnvironment(t, api)",
          "137:  cfg := instance.Config{Name: \"newconfig\"}",
          "",
          "[Removed Lines]",
          "134:  api := NewAPI(log.NewNopLogger(), &s, nil)",
          "",
          "[Added Lines]",
          "134: func TestAPI_GetConfiguration_ScrubSecrets(t *testing.T) {",
          "135:  rawConfig := `name: exists",
          "136: scrape_configs:",
          "137: - job_name: local_scrape",
          "138:   follow_redirects: true",
          "139:   honor_timestamps: true",
          "140:   metrics_path: /metrics",
          "141:   scheme: http",
          "142:   static_configs:",
          "143:   - targets:",
          "144:     - 127.0.0.1:12345",
          "145:     labels:",
          "146:       cluster: localhost",
          "147:   basic_auth:",
          "148:     username: admin",
          "149:     password: SCRUBME",
          "150: remote_write:",
          "151: - url: http://localhost:9009/api/prom/push",
          "152:   remote_timeout: 30s",
          "153:   name: test-d0f32c",
          "154:   basic_auth:",
          "155:     username: admin",
          "156:     password: SCRUBME",
          "157:   queue_config:",
          "158:     capacity: 500",
          "159:     max_shards: 1000",
          "160:     min_shards: 1",
          "161:     max_samples_per_send: 100",
          "162:     batch_send_deadline: 5s",
          "163:     min_backoff: 30ms",
          "164:     max_backoff: 100ms",
          "165:   follow_redirects: true",
          "166:   metadata_config:",
          "167:     send: true",
          "168:     send_interval: 1m",
          "169:     max_samples_per_send: 500",
          "170: wal_truncate_frequency: 1m0s",
          "171: min_wal_time: 5m0s",
          "172: max_wal_time: 4h0m0s",
          "173: remote_flush_deadline: 1m0s",
          "174: `",
          "175:  scrubbedConfig := strings.ReplaceAll(rawConfig, \"SCRUBME\", \"<secret>\")",
          "177:  s := &Mock{",
          "178:   GetFunc: func(ctx context.Context, key string) (instance.Config, error) {",
          "179:    c, err := instance.UnmarshalConfig(strings.NewReader(rawConfig))",
          "180:    if err != nil {",
          "181:     return instance.Config{}, err",
          "182:    }",
          "183:    return *c, nil",
          "184:   },",
          "185:  }",
          "187:  api := NewAPI(log.NewNopLogger(), s, nil, true)",
          "188:  env := newAPITestEnvironment(t, api)",
          "190:  resp, err := http.Get(env.srv.URL + \"/agent/api/v1/configs/exists\")",
          "191:  require.NoError(t, err)",
          "192:  require.Equal(t, http.StatusOK, resp.StatusCode)",
          "193:  respBytes, err := io.ReadAll(resp.Body)",
          "194:  require.NoError(t, err)",
          "196:  var apiResp struct {",
          "197:   Status string `json:\"status\"`",
          "198:   Data   struct {",
          "199:    Value string `json:\"value\"`",
          "200:   } `json:\"data\"`",
          "201:  }",
          "202:  err = json.Unmarshal(respBytes, &apiResp)",
          "203:  require.NoError(t, err)",
          "204:  require.Equal(t, \"success\", apiResp.Status)",
          "205:  require.YAMLEq(t, scrubbedConfig, apiResp.Data.Value)",
          "207:  t.Run(\"With Client\", func(t *testing.T) {",
          "208:   cli := client.New(env.srv.URL)",
          "209:   actual, err := cli.GetConfiguration(context.Background(), \"exists\")",
          "210:   require.NoError(t, err)",
          "215:   actualBytes, err := instance.MarshalConfig(actual, false)",
          "216:   require.NoError(t, err)",
          "217:   require.YAMLEq(t, scrubbedConfig, string(actualBytes))",
          "218:  })",
          "219: }",
          "221: func TestServer_GetConfiguration_Disabled(t *testing.T) {",
          "222:  api := NewAPI(log.NewNopLogger(), nil, nil, false)",
          "223:  env := newAPITestEnvironment(t, api)",
          "224:  resp, err := http.Get(env.srv.URL + \"/agent/api/v1/configs/exists\")",
          "225:  require.NoError(t, err)",
          "226:  require.Equal(t, http.StatusNotFound, resp.StatusCode)",
          "227:  body, err := ioutil.ReadAll(resp.Body)",
          "228:  require.NoError(t, err)",
          "229:  require.Equal(t, []byte(\"404 - config endpoint is disabled\"), body)",
          "230: }",
          "235:  api := NewAPI(log.NewNopLogger(), &s, nil, true)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "167:  api := NewAPI(log.NewNopLogger(), &s, func(c *instance.Config) error {",
          "168:   return fmt.Errorf(\"custom validation error\")",
          "170:  env := newAPITestEnvironment(t, api)",
          "172:  cfg := instance.Config{Name: \"newconfig\"}",
          "",
          "[Removed Lines]",
          "169:  })",
          "",
          "[Added Lines]",
          "270:  }, true)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "191: func TestServer_PutConfiguration_WithClient(t *testing.T) {",
          "192:  var s Mock",
          "194:  env := newAPITestEnvironment(t, api)",
          "196:  cfg := instance.DefaultConfig",
          "",
          "[Removed Lines]",
          "193:  api := NewAPI(log.NewNopLogger(), &s, nil)",
          "",
          "[Added Lines]",
          "294:  api := NewAPI(log.NewNopLogger(), &s, nil, true)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "216:   },",
          "217:  }",
          "220:  env := newAPITestEnvironment(t, api)",
          "222:  req, err := http.NewRequest(http.MethodDelete, env.srv.URL+\"/agent/api/v1/config/deleteme\", nil)",
          "",
          "[Removed Lines]",
          "219:  api := NewAPI(log.NewNopLogger(), s, nil)",
          "",
          "[Added Lines]",
          "320:  api := NewAPI(log.NewNopLogger(), s, nil, true)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "240:   },",
          "241:  }",
          "244:  env := newAPITestEnvironment(t, api)",
          "246:  req, err := http.NewRequest(http.MethodDelete, env.srv.URL+\"/agent/api/v1/config/deleteme\", nil)",
          "",
          "[Removed Lines]",
          "243:  api := NewAPI(log.NewNopLogger(), s, nil)",
          "",
          "[Added Lines]",
          "344:  api := NewAPI(log.NewNopLogger(), s, nil, true)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "259: func TestServer_URLEncoded(t *testing.T) {",
          "260:  var s Mock",
          "263:  env := newAPITestEnvironment(t, api)",
          "265:  var cfg instance.Config",
          "",
          "[Removed Lines]",
          "262:  api := NewAPI(log.NewNopLogger(), &s, nil)",
          "",
          "[Added Lines]",
          "363:  api := NewAPI(log.NewNopLogger(), &s, nil, true)",
          "",
          "---------------"
        ],
        "pkg/metrics/instance/instance.go||pkg/metrics/instance/instance.go": [
          "File: pkg/metrics/instance/instance.go -> pkg/metrics/instance/instance.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:  if err != nil {",
          "95:   return nil, err",
          "96:  }",
          "",
          "[Removed Lines]",
          "93:  bb, err := MarshalConfig(&c, false)",
          "",
          "[Added Lines]",
          "93:  bb, err := MarshalConfig(&c, true)",
          "",
          "---------------"
        ],
        "pkg/metrics/instance/marshal_test.go||pkg/metrics/instance/marshal_test.go": [
          "File: pkg/metrics/instance/marshal_test.go -> pkg/metrics/instance/marshal_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  require.Error(t, err)",
          "26: }",
          "31:  cfg := `name: test",
          "32: scrape_configs:",
          "33: - job_name: local_scrape",
          "",
          "[Removed Lines]",
          "30: func TestMarshal_UnmarshalConfig(t *testing.T) {",
          "",
          "[Added Lines]",
          "30: func TestMarshal_UnmarshalConfig_RetainSecrets(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69: remote_flush_deadline: 1m0s",
          "70: `",
          "100: }",
          "105:  cfg := `name: test",
          "106: scrape_configs:",
          "107: - job_name: local_scrape",
          "",
          "[Removed Lines]",
          "72:  t.Run(\"direct marshal\", func(t *testing.T) {",
          "73:   var c Config",
          "74:   err := yaml.Unmarshal([]byte(cfg), &c)",
          "75:   require.NoError(t, err)",
          "77:   out, err := yaml.Marshal(c)",
          "78:   require.NoError(t, err)",
          "79:   require.YAMLEq(t, cfg, string(out))",
          "80:  })",
          "82:  t.Run(\"direct mashal pointer\", func(t *testing.T) {",
          "83:   c := &Config{}",
          "84:   err := yaml.Unmarshal([]byte(cfg), c)",
          "85:   require.NoError(t, err)",
          "87:   out, err := yaml.Marshal(c)",
          "88:   require.NoError(t, err)",
          "89:   require.YAMLEq(t, cfg, string(out))",
          "90:  })",
          "92:  t.Run(\"custom marshal methods\", func(t *testing.T) {",
          "93:   c, err := UnmarshalConfig(strings.NewReader(cfg))",
          "94:   require.NoError(t, err)",
          "96:   out, err := MarshalConfig(c, false)",
          "97:   require.NoError(t, err)",
          "98:   require.YAMLEq(t, cfg, string(out))",
          "99:  })",
          "104: func TestMarshal_UnmarshalConfig_Sigv4(t *testing.T) {",
          "",
          "[Added Lines]",
          "72:  c, err := UnmarshalConfig(strings.NewReader(cfg))",
          "73:  require.NoError(t, err)",
          "75:  out, err := MarshalConfig(c, false)",
          "76:  require.NoError(t, err)",
          "77:  require.YAMLEq(t, cfg, string(out))",
          "82: func TestMarshal_UnmarshalConfig_ScrubSecrets(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:       cluster: localhost",
          "117:   basic_auth:",
          "118:     username: admin",
          "120: remote_write:",
          "121: - url: http://localhost:9009/api/prom/push",
          "122:   remote_timeout: 30s",
          "123:   name: test-d0f32c",
          "125:   queue_config:",
          "126:     capacity: 500",
          "127:     max_shards: 1000",
          "",
          "[Removed Lines]",
          "119:     password: foobar",
          "124:   sigv4: {}",
          "",
          "[Added Lines]",
          "97:     password: SCRUBME",
          "102:   basic_auth:",
          "103:     username: admin",
          "104:     password: SCRUBME",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "141: remote_flush_deadline: 1m0s",
          "142: `",
          "144:  t.Run(\"direct marshal\", func(t *testing.T) {",
          "145:   var c Config",
          "146:   err := yaml.Unmarshal([]byte(cfg), &c)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:  scrub := func(in string) string {",
          "125:   return strings.ReplaceAll(in, \"SCRUBME\", \"<secret>\")",
          "126:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "149:   out, err := yaml.Marshal(c)",
          "150:   require.NoError(t, err)",
          "152:  })",
          "157:   require.NoError(t, err)",
          "160:   require.NoError(t, err)",
          "162:  })",
          "164:  t.Run(\"custom marshal methods\", func(t *testing.T) {",
          "165:   c, err := UnmarshalConfig(strings.NewReader(cfg))",
          "166:   require.NoError(t, err)",
          "169:   require.NoError(t, err)",
          "171:  })",
          "172: }",
          "",
          "[Removed Lines]",
          "151:   require.YAMLEq(t, cfg, string(out))",
          "154:  t.Run(\"direct mashal pointer\", func(t *testing.T) {",
          "155:   c := &Config{}",
          "156:   err := yaml.Unmarshal([]byte(cfg), c)",
          "159:   out, err := yaml.Marshal(c)",
          "161:   require.YAMLEq(t, cfg, string(out))",
          "168:   out, err := MarshalConfig(c, false)",
          "170:   require.YAMLEq(t, cfg, string(out))",
          "",
          "[Added Lines]",
          "135:   require.YAMLEq(t, scrub(cfg), string(out))",
          "138:  t.Run(\"direct marshal pointer\", func(t *testing.T) {",
          "139:   var c Config",
          "140:   err := yaml.Unmarshal([]byte(cfg), &c)",
          "143:   out, err := yaml.Marshal(&c)",
          "145:   require.YAMLEq(t, scrub(cfg), string(out))",
          "152:   out, err := MarshalConfig(c, true)",
          "154:   require.YAMLEq(t, scrub(cfg), string(out))",
          "",
          "---------------"
        ],
        "pkg/traces/config.go||pkg/traces/config.go": [
          "File: pkg/traces/config.go -> pkg/traces/config.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:  RemoteWrite []RemoteWriteConfig `yaml:\"remote_write,omitempty\"`",
          "107:  Batch map[string]interface{} `yaml:\"batch,omitempty\"`",
          "",
          "[Removed Lines]",
          "104:  Receivers map[string]interface{} `yaml:\"receivers,omitempty\"`",
          "",
          "[Added Lines]",
          "104:  Receivers ReceiverMap `yaml:\"receivers,omitempty\"`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:  ServiceGraphs *serviceGraphsConfig `yaml:\"service_graphs,omitempty\"`",
          "131: }",
          "133: const (",
          "134:  compressionNone = \"none\"",
          "135:  compressionGzip = \"gzip\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136: type ReceiverMap map[string]interface{}",
          "139: func (r ReceiverMap) MarshalYAML() (interface{}, error) {",
          "140:  return \"<secret>\", nil",
          "141: }",
          "",
          "---------------"
        ],
        "pkg/traces/config_test.go||pkg/traces/config_test.go": [
          "File: pkg/traces/config_test.go -> pkg/traces/config_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"io/ioutil\"",
          "5:  \"os\"",
          "6:  \"sort\"",
          "7:  \"testing\"",
          "9:  \"github.com/stretchr/testify/assert\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:  \"strings\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1304:  }",
          "1305: }",
          "1308: func sortPipelines(cfg *config.Config) {",
          "1309:  tracePipeline := cfg.Pipelines[string(config.TracesDataType)]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1308: func TestScrubbedReceivers(t *testing.T) {",
          "1309:  test := `",
          "1310: receivers:",
          "1311:   jaeger:",
          "1312:     protocols:",
          "1313:       grpc:`",
          "1314:  var cfg InstanceConfig",
          "1315:  err := yaml.Unmarshal([]byte(test), &cfg)",
          "1316:  assert.Nil(t, err)",
          "1317:  data, err := yaml.Marshal(cfg)",
          "1318:  assert.Nil(t, err)",
          "1319:  assert.True(t, strings.Contains(string(data), \"<secret>\"))",
          "1320: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9182e1bd536b7873393adbca7b26d3061878cb33",
      "candidate_info": {
        "commit_hash": "9182e1bd536b7873393adbca7b26d3061878cb33",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/9182e1bd536b7873393adbca7b26d3061878cb33",
        "files": [
          "pkg/config/config_test.go",
          "pkg/integrations/github_exporter/github_exporter.go",
          "pkg/integrations/kafka_exporter/kafka_exporter.go",
          "pkg/integrations/mongodb_exporter/mongodb_exporter.go",
          "pkg/integrations/mysqld_exporter/mysqld-exporter.go",
          "pkg/integrations/postgres_exporter/postgres_exporter.go",
          "pkg/integrations/redis_exporter/redis_exporter.go"
        ],
        "message": "Add secret type to sensitive values",
        "before_after_code_files": [
          "pkg/config/config_test.go||pkg/config/config_test.go",
          "pkg/integrations/github_exporter/github_exporter.go||pkg/integrations/github_exporter/github_exporter.go",
          "pkg/integrations/kafka_exporter/kafka_exporter.go||pkg/integrations/kafka_exporter/kafka_exporter.go",
          "pkg/integrations/mongodb_exporter/mongodb_exporter.go||pkg/integrations/mongodb_exporter/mongodb_exporter.go",
          "pkg/integrations/mysqld_exporter/mysqld-exporter.go||pkg/integrations/mysqld_exporter/mysqld-exporter.go",
          "pkg/integrations/postgres_exporter/postgres_exporter.go||pkg/integrations/postgres_exporter/postgres_exporter.go",
          "pkg/integrations/redis_exporter/redis_exporter.go||pkg/integrations/redis_exporter/redis_exporter.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/grafana/agent/pull/1153"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pkg/config/config_test.go||pkg/config/config_test.go": [
          "File: pkg/config/config_test.go -> pkg/config/config_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"flag\"",
          "5:  \"os\"",
          "6:  \"testing\"",
          "7:  \"time\"",
          "9:  \"github.com/grafana/agent/pkg/integrations\"",
          "10:  \"github.com/grafana/agent/pkg/metrics\"",
          "11:  \"github.com/grafana/agent/pkg/metrics/instance\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:  \"strings\"",
          "10:  \"gopkg.in/yaml.v2\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:  promCfg \"github.com/prometheus/prometheus/config\"",
          "15:  \"github.com/prometheus/prometheus/pkg/labels\"",
          "16:  \"github.com/stretchr/testify/require\"",
          "17: )",
          "21: func TestConfig_FlagDefaults(t *testing.T) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:  _ \"github.com/grafana/agent/pkg/integrations/github_exporter\"   // register github_exporter",
          "22:  _ \"github.com/grafana/agent/pkg/integrations/kafka_exporter\"    // register kafka_exporter",
          "23:  _ \"github.com/grafana/agent/pkg/integrations/mongodb_exporter\"  // register mongodb_exporter",
          "24:  _ \"github.com/grafana/agent/pkg/integrations/mysqld_exporter\"   // register mysqld_exporter",
          "25:  _ \"github.com/grafana/agent/pkg/integrations/postgres_exporter\" // register postgres_exporter",
          "26:  _ \"github.com/grafana/agent/pkg/integrations/redis_exporter\"    // register redis_exporter",
          "29: func TestConfig_SecretMysqlD(t *testing.T) {",
          "30:  stringCfg := `",
          "31: prometheus:",
          "32:   wal_directory: /tmp/agent",
          "33: integrations:",
          "34:   mysqld_exporter:",
          "35:     enabled: true",
          "36:     data_source_name: root:secret_password@myserver:3306`",
          "37:  checkSecret(t, stringCfg, \"secret_password\")",
          "39: }",
          "41: func TestConfig_SecretGithub(t *testing.T) {",
          "42:  stringCfg := `",
          "43: prometheus:",
          "44:   wal_directory: /tmp/agent",
          "45: integrations:",
          "46:   github_exporter:",
          "47:     enabled: true",
          "48:     api_token: secret_api`",
          "49:  checkSecret(t, stringCfg, \"secret_api\")",
          "50: }",
          "52: func TestConfig_SecretKafkaUserName(t *testing.T) {",
          "53:  stringCfg := `",
          "54: prometheus:",
          "55:   wal_directory: /tmp/agent",
          "56: integrations:",
          "57:   kafka_exporter:",
          "58:     enabled: true",
          "59:     sasl_password: secret_password",
          "60: `",
          "61:  checkSecret(t, stringCfg, \"secret_password\")",
          "62: }",
          "64: func TestConfig_SecretKafkaPassword(t *testing.T) {",
          "65:  stringCfg := `",
          "66: prometheus:",
          "67:   wal_directory: /tmp/agent",
          "68: integrations:",
          "69:   kafka_exporter:",
          "70:     enabled: true",
          "71:     sasl_username: secret_username",
          "72: `",
          "73:  checkSecret(t, stringCfg, \"secret_username\")",
          "74: }",
          "76: func TestConfig_SecretMongoDB(t *testing.T) {",
          "77:  stringCfg := `",
          "78: prometheus:",
          "79:   wal_directory: /tmp/agent",
          "80: integrations:",
          "81:   mongodb_exporter:",
          "82:     enabled: true",
          "83:     mongodb_uri: secret_password_in_uri",
          "84: `",
          "85:  checkSecret(t, stringCfg, \"secret_password_in_uri\")",
          "86: }",
          "88: func TestConfig_SecretPostgres(t *testing.T) {",
          "89:  stringCfg := `",
          "90: prometheus:",
          "91:   wal_directory: /tmp/agent",
          "92: integrations:",
          "93:   postgres_exporter:",
          "94:     enabled: true",
          "95:     data_source_names: [\"secret_password_in_uri\",\"secret_password_in_uri_2\"]",
          "96: `",
          "97:  checkSecret(t, stringCfg, \"secret_password_in_uri\")",
          "98:  checkSecret(t, stringCfg, \"secret_password_in_uri_2\")",
          "100: }",
          "102: func TestConfig_SecretRedisPassword(t *testing.T) {",
          "103:  stringCfg := `",
          "104: prometheus:",
          "105:   wal_directory: /tmp/agent",
          "106: integrations:",
          "107:   redis_exporter:",
          "108:     enabled: true",
          "109:     redis_password: secret_password",
          "110: `",
          "111:  checkSecret(t, stringCfg, \"secret_password\")",
          "112: }",
          "114: func TestConfig_SecretRedisUsername(t *testing.T) {",
          "115:  stringCfg := `",
          "116: prometheus:",
          "117:   wal_directory: /tmp/agent",
          "118: integrations:",
          "119:   redis_exporter:",
          "120:     enabled: true",
          "121:     redis_user: secret_user",
          "122: `",
          "123:  checkSecret(t, stringCfg, \"secret_user\")",
          "124: }",
          "126: func checkSecret(t *testing.T, rawCfg string, originalValue string) {",
          "127:  var cfg = &Config{}",
          "128:  err := LoadBytes([]byte(rawCfg), false, cfg)",
          "129:  require.NoError(t, err)",
          "130:  bb, err := yaml.Marshal(cfg)",
          "131:  require.NoError(t, err)",
          "132:  scrubbedCfg := string(bb)",
          "133:  require.True(t, strings.Contains(scrubbedCfg, \"<secret>\"))",
          "134:  require.False(t, strings.Contains(scrubbedCfg, originalValue))",
          "135: }",
          "",
          "---------------"
        ],
        "pkg/integrations/github_exporter/github_exporter.go||pkg/integrations/github_exporter/github_exporter.go": [
          "File: pkg/integrations/github_exporter/github_exporter.go -> pkg/integrations/github_exporter/github_exporter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  \"github.com/grafana/agent/pkg/integrations/config\"",
          "8:  gh_config \"github.com/infinityworks/github-exporter/config\"",
          "9:  \"github.com/infinityworks/github-exporter/exporter\"",
          "10: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:  config_util \"github.com/prometheus/common/config\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:  Users []string `yaml:\"users,omitempty\"`",
          "37:  APITokenFile string `yaml:\"api_token_file,omitempty\"`",
          "",
          "[Removed Lines]",
          "34:  APIToken string `yaml:\"api_token,omitempty\"`",
          "",
          "[Added Lines]",
          "35:  APIToken config_util.Secret `yaml:\"api_token,omitempty\"`",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:  conf.SetOrganisations(c.Organizations)",
          "79:  conf.SetUsers(c.Users)",
          "80:  if c.APIToken != \"\" {",
          "82:  }",
          "83:  if c.APITokenFile != \"\" {",
          "84:   err = conf.SetAPITokenFromFile(c.APITokenFile)",
          "",
          "[Removed Lines]",
          "81:   conf.SetAPIToken(c.APIToken)",
          "",
          "[Added Lines]",
          "82:   conf.SetAPIToken(string(c.APIToken))",
          "",
          "---------------"
        ],
        "pkg/integrations/kafka_exporter/kafka_exporter.go||pkg/integrations/kafka_exporter/kafka_exporter.go": [
          "File: pkg/integrations/kafka_exporter/kafka_exporter.go -> pkg/integrations/kafka_exporter/kafka_exporter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"fmt\"",
          "6:  \"github.com/Shopify/sarama\"",
          "7:  kafka_exporter \"github.com/davidmparrott/kafka_exporter/v2/exporter\"",
          "8:  \"github.com/go-kit/kit/log\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:  config_util \"github.com/prometheus/common/config\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:  UseSASLHandshake bool `yaml:\"use_sasl_handshake,omitempty\"`",
          "46:  SASLMechanism string `yaml:\"sasl_mechanism,omitempty\"`",
          "",
          "[Removed Lines]",
          "40:  SASLUsername string `yaml:\"sasl_username,omitempty\"`",
          "43:  SASLPassword string `yaml:\"sasl_password,omitempty\"`",
          "",
          "[Added Lines]",
          "42:  SASLUsername config_util.Secret `yaml:\"sasl_username,omitempty\"`",
          "45:  SASLPassword config_util.Secret `yaml:\"sasl_password,omitempty\"`",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:   Uri:                      c.KafkaURIs,",
          "139:   UseSASL:                  c.UseSASL,",
          "140:   UseSASLHandshake:         c.UseSASLHandshake,",
          "143:   SaslMechanism:            c.SASLMechanism,",
          "144:   UseTLS:                   c.UseTLS,",
          "145:   TlsCAFile:                c.CAFile,",
          "",
          "[Removed Lines]",
          "141:   SaslUsername:             c.SASLUsername,",
          "142:   SaslPassword:             c.SASLPassword,",
          "",
          "[Added Lines]",
          "143:   SaslUsername:             string(c.SASLUsername),",
          "144:   SaslPassword:             string(c.SASLPassword),",
          "",
          "---------------"
        ],
        "pkg/integrations/mongodb_exporter/mongodb_exporter.go||pkg/integrations/mongodb_exporter/mongodb_exporter.go": [
          "File: pkg/integrations/mongodb_exporter/mongodb_exporter.go -> pkg/integrations/mongodb_exporter/mongodb_exporter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"context\"",
          "5:  \"fmt\"",
          "7:  \"github.com/gaantunes/mongodb_exporter/exporter\"",
          "8:  \"github.com/go-kit/kit/log\"",
          "9:  \"github.com/go-kit/kit/log/level\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:  config_util \"github.com/prometheus/common/config\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:  Common config.Common `yaml:\",inline\"`",
          "30: }",
          "",
          "[Removed Lines]",
          "29:  URI string `yaml:\"mongodb_uri\"`",
          "",
          "[Added Lines]",
          "31:  URI config_util.Secret `yaml:\"mongodb_uri\"`",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:  e.context = context",
          "70:  var err error",
          "72:  if err != nil {",
          "73:   return nil, err",
          "74:  }",
          "",
          "[Removed Lines]",
          "71:  e.client, err = exporter.Connect(context, c.URI, true)",
          "",
          "[Added Lines]",
          "73:  e.client, err = exporter.Connect(context, string(c.URI), true)",
          "",
          "---------------"
        ],
        "pkg/integrations/mysqld_exporter/mysqld-exporter.go||pkg/integrations/mysqld_exporter/mysqld-exporter.go": [
          "File: pkg/integrations/mysqld_exporter/mysqld-exporter.go -> pkg/integrations/mysqld_exporter/mysqld-exporter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  \"fmt\"",
          "7:  \"os\"",
          "9:  \"github.com/go-kit/kit/log\"",
          "10:  \"github.com/go-kit/kit/log/level\"",
          "11:  \"github.com/grafana/agent/pkg/integrations\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:  config_util \"github.com/prometheus/common/config\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:  Common config.Common `yaml:\",inline\"`",
          "42:  EnableCollectors []string `yaml:\"enable_collectors,omitempty\"`",
          "",
          "[Removed Lines]",
          "39:  DataSourceName string `yaml:\"data_source_name,omitempty\"`",
          "",
          "[Added Lines]",
          "41:  DataSourceName config_util.Secret `yaml:\"data_source_name,omitempty\"`",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98: func New(log log.Logger, c *Config) (integrations.Integration, error) {",
          "99:  dsn := c.DataSourceName",
          "100:  if len(dsn) == 0 {",
          "102:  }",
          "103:  if len(dsn) == 0 {",
          "104:   return nil, fmt.Errorf(\"cannot create mysqld_exporter; neither mysqld_exporter.data_source_name or $MYSQLD_EXPORTER_DATA_SOURCE_NAME is set\")",
          "105:  }",
          "107:  scrapers := GetScrapers(c)",
          "109:   LockTimeout:   c.LockWaitTimeout,",
          "110:   SlowLogFilter: c.LogSlowFilter,",
          "111:  })",
          "",
          "[Removed Lines]",
          "101:   dsn = os.Getenv(\"MYSQLD_EXPORTER_DATA_SOURCE_NAME\")",
          "108:  exporter := collector.New(context.Background(), dsn, collector.NewMetrics(), scrapers, log, collector.Config{",
          "",
          "[Added Lines]",
          "103:   dsn = config_util.Secret(os.Getenv(\"MYSQLD_EXPORTER_DATA_SOURCE_NAME\"))",
          "110:  exporter := collector.New(context.Background(), string(dsn), collector.NewMetrics(), scrapers, log, collector.Config{",
          "",
          "---------------"
        ],
        "pkg/integrations/postgres_exporter/postgres_exporter.go||pkg/integrations/postgres_exporter/postgres_exporter.go": [
          "File: pkg/integrations/postgres_exporter/postgres_exporter.go -> pkg/integrations/postgres_exporter/postgres_exporter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  \"os\"",
          "7:  \"strings\"",
          "9:  \"github.com/go-kit/kit/log\"",
          "10:  \"github.com/grafana/agent/pkg/integrations\"",
          "11:  \"github.com/grafana/agent/pkg/integrations/config\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:  config_util \"github.com/prometheus/common/config\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:  Common config.Common `yaml:\",inline\"`",
          "22:  DisableSettingsMetrics bool     `yaml:\"disable_settings_metrics,omitempty\"`",
          "23:  AutodiscoverDatabases  bool     `yaml:\"autodiscover_databases,omitempty\"`",
          "",
          "[Removed Lines]",
          "20:  DataSourceNames []string `yaml:\"data_source_names,omitempty\"`",
          "",
          "[Added Lines]",
          "22:  DataSourceNames []config_util.Secret `yaml:\"data_source_names,omitempty\"`",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52: func New(log log.Logger, c *Config) (integrations.Integration, error) {",
          "53:  dsn := c.DataSourceNames",
          "54:  if len(dsn) == 0 {",
          "56:  }",
          "57:  if len(dsn) == 0 {",
          "58:   return nil, fmt.Errorf(\"cannot create postgres_exporter; neither postgres_exporter.data_source_name or $POSTGRES_EXPORTER_DATA_SOURCE_NAME is set\")",
          "59:  }",
          "61:  e := exporter.NewExporter(",
          "63:   log,",
          "64:   exporter.DisableDefaultMetrics(c.DisableDefaultMetrics),",
          "65:   exporter.WithUserQueriesPath(c.QueryPath),",
          "",
          "[Removed Lines]",
          "55:   dsn = strings.Split(os.Getenv(\"POSTGRES_EXPORTER_DATA_SOURCE_NAME\"), \",\")",
          "62:   dsn,",
          "",
          "[Added Lines]",
          "56:  var stringDsn []string",
          "58:   stringDsn = append(stringDsn, strings.Split(os.Getenv(\"POSTGRES_EXPORTER_DATA_SOURCE_NAME\"), \",\")...)",
          "59:  } else {",
          "60:   for _, d := range dsn {",
          "61:    stringDsn = append(stringDsn, string(d))",
          "62:   }",
          "69:   stringDsn,",
          "",
          "---------------"
        ],
        "pkg/integrations/redis_exporter/redis_exporter.go||pkg/integrations/redis_exporter/redis_exporter.go": [
          "File: pkg/integrations/redis_exporter/redis_exporter.go -> pkg/integrations/redis_exporter/redis_exporter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  \"io/ioutil\"",
          "10:  \"time\"",
          "12:  \"github.com/go-kit/kit/log\"",
          "13:  \"github.com/go-kit/kit/log/level\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:  config_util \"github.com/prometheus/common/config\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: var DefaultConfig = Config{",
          "24:  Namespace:               \"redis\",",
          "25:  ConfigCommand:           \"CONFIG\",",
          "27:  SetClientName:           true,",
          "28:  CheckKeyGroupsBatchSize: 10000,",
          "29:  MaxDistinctKeyGroups:    100,",
          "",
          "[Removed Lines]",
          "26:  ConnectionTimeout:       (15 * time.Second),",
          "",
          "[Added Lines]",
          "28:  ConnectionTimeout:       15 * time.Second,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69: }",
          "",
          "[Removed Lines]",
          "42:  RedisAddr               string        `yaml:\"redis_addr,omitempty\"`",
          "43:  RedisUser               string        `yaml:\"redis_user,omitempty\"`",
          "44:  RedisPassword           string        `yaml:\"redis_password,omitempty\"`",
          "45:  RedisPasswordFile       string        `yaml:\"redis_password_file,omitempty\"`",
          "46:  Namespace               string        `yaml:\"namespace,omitempty\"`",
          "47:  ConfigCommand           string        `yaml:\"config_command,omitempty\"`",
          "48:  CheckKeys               string        `yaml:\"check_keys,omitempty\"`",
          "49:  CheckKeyGroups          string        `yaml:\"check_key_groups,omitempty\"`",
          "50:  CheckKeyGroupsBatchSize int64         `yaml:\"check_key_groups_batch_size,omitempty\"`",
          "51:  MaxDistinctKeyGroups    int64         `yaml:\"max_distinct_key_groups,omitempty\"`",
          "52:  CheckSingleKeys         string        `yaml:\"check_single_keys,omitempty\"`",
          "53:  CheckStreams            string        `yaml:\"check_streams,omitempty\"`",
          "54:  CheckSingleStreams      string        `yaml:\"check_single_streams,omitempty\"`",
          "55:  CountKeys               string        `yaml:\"count_keys,omitempty\"`",
          "56:  ScriptPath              string        `yaml:\"script_path,omitempty\"`",
          "57:  ConnectionTimeout       time.Duration `yaml:\"connection_timeout,omitempty\"`",
          "58:  TLSClientKeyFile        string        `yaml:\"tls_client_key_file,omitempty\"`",
          "59:  TLSClientCertFile       string        `yaml:\"tls_client_cert_file,omitempty\"`",
          "60:  TLSCaCertFile           string        `yaml:\"tls_ca_cert_file,omitempty\"`",
          "61:  SetClientName           bool          `yaml:\"set_client_name,omitempty\"`",
          "62:  IsTile38                bool          `yaml:\"is_tile38,omitempty\"`",
          "63:  ExportClientList        bool          `yaml:\"export_client_list,omitempty\"`",
          "64:  ExportClientPort        bool          `yaml:\"export_client_port,omitempty\"`",
          "65:  RedisMetricsOnly        bool          `yaml:\"redis_metrics_only,omitempty\"`",
          "66:  PingOnConnect           bool          `yaml:\"ping_on_connect,omitempty\"`",
          "67:  InclSystemMetrics       bool          `yaml:\"incl_system_metrics,omitempty\"`",
          "68:  SkipTLSVerification     bool          `yaml:\"skip_tls_verification,omitempty\"`",
          "",
          "[Added Lines]",
          "44:  RedisAddr               string             `yaml:\"redis_addr,omitempty\"`",
          "45:  RedisUser               config_util.Secret `yaml:\"redis_user,omitempty\"`",
          "46:  RedisPassword           config_util.Secret `yaml:\"redis_password,omitempty\"`",
          "47:  RedisPasswordFile       string             `yaml:\"redis_password_file,omitempty\"`",
          "48:  Namespace               string             `yaml:\"namespace,omitempty\"`",
          "49:  ConfigCommand           string             `yaml:\"config_command,omitempty\"`",
          "50:  CheckKeys               string             `yaml:\"check_keys,omitempty\"`",
          "51:  CheckKeyGroups          string             `yaml:\"check_key_groups,omitempty\"`",
          "52:  CheckKeyGroupsBatchSize int64              `yaml:\"check_key_groups_batch_size,omitempty\"`",
          "53:  MaxDistinctKeyGroups    int64              `yaml:\"max_distinct_key_groups,omitempty\"`",
          "54:  CheckSingleKeys         string             `yaml:\"check_single_keys,omitempty\"`",
          "55:  CheckStreams            string             `yaml:\"check_streams,omitempty\"`",
          "56:  CheckSingleStreams      string             `yaml:\"check_single_streams,omitempty\"`",
          "57:  CountKeys               string             `yaml:\"count_keys,omitempty\"`",
          "58:  ScriptPath              string             `yaml:\"script_path,omitempty\"`",
          "59:  ConnectionTimeout       time.Duration      `yaml:\"connection_timeout,omitempty\"`",
          "60:  TLSClientKeyFile        string             `yaml:\"tls_client_key_file,omitempty\"`",
          "61:  TLSClientCertFile       string             `yaml:\"tls_client_cert_file,omitempty\"`",
          "62:  TLSCaCertFile           string             `yaml:\"tls_ca_cert_file,omitempty\"`",
          "63:  SetClientName           bool               `yaml:\"set_client_name,omitempty\"`",
          "64:  IsTile38                bool               `yaml:\"is_tile38,omitempty\"`",
          "65:  ExportClientList        bool               `yaml:\"export_client_list,omitempty\"`",
          "66:  ExportClientPort        bool               `yaml:\"export_client_port,omitempty\"`",
          "67:  RedisMetricsOnly        bool               `yaml:\"redis_metrics_only,omitempty\"`",
          "68:  PingOnConnect           bool               `yaml:\"ping_on_connect,omitempty\"`",
          "69:  InclSystemMetrics       bool               `yaml:\"incl_system_metrics,omitempty\"`",
          "70:  SkipTLSVerification     bool               `yaml:\"skip_tls_verification,omitempty\"`",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74: func (c Config) GetExporterOptions() re.Options {",
          "75:  return re.Options{",
          "78:   Namespace:               c.Namespace,",
          "79:   ConfigCommandName:       c.ConfigCommand,",
          "80:   CheckKeys:               c.CheckKeys,",
          "",
          "[Removed Lines]",
          "76:   User:                    c.RedisUser,",
          "77:   Password:                c.RedisPassword,",
          "",
          "[Added Lines]",
          "78:   User:                    string(c.RedisUser),",
          "79:   Password:                string(c.RedisPassword),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2cbed39b1df6fc00812414305a07da377bcedcaa",
      "candidate_info": {
        "commit_hash": "2cbed39b1df6fc00812414305a07da377bcedcaa",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/2cbed39b1df6fc00812414305a07da377bcedcaa",
        "files": [
          "pkg/traces/config_test.go"
        ],
        "message": "Fix bad merge",
        "before_after_code_files": [
          "pkg/traces/config_test.go||pkg/traces/config_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/grafana/agent/pull/1153"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pkg/traces/config_test.go||pkg/traces/config_test.go": [
          "File: pkg/traces/config_test.go -> pkg/traces/config_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package traces",
          "3: import (",
          "7:  \"io/ioutil\"",
          "9:  \"sort\"",
          "10:  \"strings\"",
          "31:  \"go.opentelemetry.io/collector/config\"",
          "33:  \"go.opentelemetry.io/collector/config/configparser\"",
          "34:  \"go.opentelemetry.io/collector/config/configunmarshaler\"",
          "39: )",
          "173:  }",
          "225: }",
          "236:  }",
          "245:    }",
          "330:  }",
          "332: }",
          "353:   },",
          "426:  }",
          "455:    }",
          "477:  }",
          "514:     },",
          "515:    },",
          "573:  }",
          "580:  }",
          "583: }",
          "635: }",
          "679:  }",
          "680: }",
          "",
          "[Removed Lines]",
          "4:  \"encoding/base64\"",
          "5:  \"errors\"",
          "6:  \"fmt\"",
          "8:  \"net\"",
          "11:  \"time\"",
          "13:  \"github.com/grafana/agent/pkg/logs\"",
          "14:  \"github.com/grafana/agent/pkg/traces/automaticloggingprocessor\"",
          "15:  \"github.com/grafana/agent/pkg/traces/noopreceiver\"",
          "16:  \"github.com/grafana/agent/pkg/traces/promsdprocessor\"",
          "17:  \"github.com/grafana/agent/pkg/traces/remotewriteexporter\"",
          "18:  \"github.com/grafana/agent/pkg/traces/servicegraphprocessor\"",
          "19:  \"github.com/open-telemetry/opentelemetry-collector-contrib/exporter/loadbalancingexporter\"",
          "20:  \"github.com/open-telemetry/opentelemetry-collector-contrib/exporter/prometheusexporter\"",
          "21:  \"github.com/open-telemetry/opentelemetry-collector-contrib/processor/attributesprocessor\"",
          "22:  \"github.com/open-telemetry/opentelemetry-collector-contrib/processor/spanmetricsprocessor\"",
          "23:  \"github.com/open-telemetry/opentelemetry-collector-contrib/processor/tailsamplingprocessor\"",
          "24:  \"github.com/open-telemetry/opentelemetry-collector-contrib/receiver/jaegerreceiver\"",
          "25:  \"github.com/open-telemetry/opentelemetry-collector-contrib/receiver/kafkareceiver\"",
          "26:  \"github.com/open-telemetry/opentelemetry-collector-contrib/receiver/opencensusreceiver\"",
          "27:  \"github.com/open-telemetry/opentelemetry-collector-contrib/receiver/zipkinreceiver\"",
          "28:  \"github.com/prometheus/client_golang/prometheus\"",
          "29:  prom_config \"github.com/prometheus/common/config\"",
          "30:  \"go.opentelemetry.io/collector/component\"",
          "32:  \"go.opentelemetry.io/collector/config/configcheck\"",
          "35:  \"go.opentelemetry.io/collector/exporter/otlpexporter\"",
          "36:  \"go.opentelemetry.io/collector/exporter/otlphttpexporter\"",
          "37:  \"go.opentelemetry.io/collector/processor/batchprocessor\"",
          "38:  \"go.opentelemetry.io/collector/receiver/otlpreceiver\"",
          "41: const (",
          "42:  spanMetricsPipelineName = \"metrics/spanmetrics\"",
          "45:  defaultDecisionWait = time.Second * 5",
          "48:  defaultLoadBalancingPort = \"4318\"",
          "50:  dnsTagName    = \"dns\"",
          "51:  staticTagName = \"static\"",
          "54:  alwaysSamplePolicy = \"always_sample\"",
          "55: )",
          "58: type Config struct {",
          "59:  Configs []InstanceConfig `yaml:\"configs,omitempty\"`",
          "62:  Unmarshaled bool `yaml:\"-\"`",
          "63: }",
          "66: func (c *Config) UnmarshalYAML(unmarshal func(interface{}) error) error {",
          "67:  c.Unmarshaled = true",
          "68:  type plain Config",
          "69:  return unmarshal((*plain)(c))",
          "70: }",
          "73: func (c *Config) Validate(logsConfig *logs.Config) error {",
          "74:  names := make(map[string]struct{}, len(c.Configs))",
          "75:  for idx, c := range c.Configs {",
          "76:   if c.Name == \"\" {",
          "77:    return fmt.Errorf(\"traces config at index %d is missing a name\", idx)",
          "78:   }",
          "79:   if _, exist := names[c.Name]; exist {",
          "80:    return fmt.Errorf(\"found multiple traces configs with name %s\", c.Name)",
          "81:   }",
          "82:   names[c.Name] = struct{}{}",
          "83:  }",
          "85:  for _, inst := range c.Configs {",
          "86:   if inst.AutomaticLogging != nil {",
          "87:    if err := inst.AutomaticLogging.Validate(logsConfig); err != nil {",
          "88:     return fmt.Errorf(\"failed to validate automatic_logging for traces config %s: %w\", inst.Name, err)",
          "89:    }",
          "90:   }",
          "91:  }",
          "93:  return nil",
          "94: }",
          "97: type InstanceConfig struct {",
          "98:  Name string `yaml:\"name\"`",
          "101:  RemoteWrite []RemoteWriteConfig `yaml:\"remote_write,omitempty\"`",
          "104:  Receivers ReceiverMap `yaml:\"receivers,omitempty\"`",
          "107:  Batch map[string]interface{} `yaml:\"batch,omitempty\"`",
          "110:  Attributes map[string]interface{} `yaml:\"attributes,omitempty\"`",
          "113:  ScrapeConfigs []interface{} `yaml:\"scrape_configs,omitempty\"`",
          "114:  OperationType string        `yaml:\"prom_sd_operation_type,omitempty\"`",
          "117:  SpanMetrics *SpanMetricsConfig `yaml:\"spanmetrics,omitempty\"`",
          "120:  AutomaticLogging *automaticloggingprocessor.AutomaticLoggingConfig `yaml:\"automatic_logging,omitempty\"`",
          "123:  TailSampling *tailSamplingConfig `yaml:\"tail_sampling,omitempty\"`",
          "126:  LoadBalancing *loadBalancingConfig `yaml:\"load_balancing\"`",
          "129:  ServiceGraphs *serviceGraphsConfig `yaml:\"service_graphs,omitempty\"`",
          "130: }",
          "132: type ReceiverMap map[string]interface{}",
          "134: func (r ReceiverMap) MarshalYAML() (interface{}, error) {",
          "135:  return \"<secret>\", nil",
          "136: }",
          "138: const (",
          "139:  compressionNone = \"none\"",
          "140:  compressionGzip = \"gzip\"",
          "141:  protocolGRPC    = \"grpc\"",
          "142:  protocolHTTP    = \"http\"",
          "143: )",
          "146: var DefaultRemoteWriteConfig = RemoteWriteConfig{",
          "147:  Compression: compressionGzip,",
          "148:  Protocol:    protocolGRPC,",
          "149: }",
          "152: type RemoteWriteConfig struct {",
          "153:  Endpoint    string `yaml:\"endpoint,omitempty\"`",
          "154:  Compression string `yaml:\"compression,omitempty\"`",
          "155:  Protocol    string `yaml:\"protocol,omitempty\"`",
          "156:  Insecure    bool   `yaml:\"insecure,omitempty\"`",
          "158:  InsecureSkipVerify bool                   `yaml:\"insecure_skip_verify,omitempty\"`",
          "159:  TLSConfig          *prom_config.TLSConfig `yaml:\"tls_config,omitempty\"`",
          "160:  BasicAuth          *prom_config.BasicAuth `yaml:\"basic_auth,omitempty\"`",
          "161:  Headers            map[string]string      `yaml:\"headers,omitempty\"`",
          "162:  SendingQueue       map[string]interface{} `yaml:\"sending_queue,omitempty\"`    // https://github.com/open-telemetry/opentelemetry-collector/blob/7d7ae2eb34b5d387627875c498d7f43619f37ee3/exporter/exporterhelper/queued_retry.go#L30",
          "163:  RetryOnFailure     map[string]interface{} `yaml:\"retry_on_failure,omitempty\"` // https://github.com/open-telemetry/opentelemetry-collector/blob/7d7ae2eb34b5d387627875c498d7f43619f37ee3/exporter/exporterhelper/queued_retry.go#L54",
          "164: }",
          "167: func (c *RemoteWriteConfig) UnmarshalYAML(unmarshal func(interface{}) error) error {",
          "170:  type plain RemoteWriteConfig",
          "171:  if err := unmarshal((*plain)(c)); err != nil {",
          "172:   return err",
          "175:  if c.Compression != compressionGzip && c.Compression != compressionNone {",
          "176:   return fmt.Errorf(\"unsupported compression '%s', expected 'gzip' or 'none'\", c.Compression)",
          "177:  }",
          "178:  return nil",
          "179: }",
          "182: type SpanMetricsConfig struct {",
          "183:  LatencyHistogramBuckets []time.Duration                  `yaml:\"latency_histogram_buckets,omitempty\"`",
          "184:  Dimensions              []spanmetricsprocessor.Dimension `yaml:\"dimensions,omitempty\"`",
          "186:  Namespace string `yaml:\"namespace,omitempty\"`",
          "188:  ConstLabels *prometheus.Labels `yaml:\"const_labels,omitempty\"`",
          "190:  MetricsInstance string `yaml:\"metrics_instance\"`",
          "192:  HandlerEndpoint string `yaml:\"handler_endpoint\"`",
          "193: }",
          "196: type tailSamplingConfig struct {",
          "199:  Policies []map[string]interface{} `yaml:\"policies\"`",
          "201:  DecisionWait time.Duration `yaml:\"decision_wait,omitempty\"`",
          "202: }",
          "206: type loadBalancingConfig struct {",
          "207:  Exporter exporterConfig         `yaml:\"exporter\"`",
          "208:  Resolver map[string]interface{} `yaml:\"resolver\"`",
          "210:  ReceiverPort string `yaml:\"receiver_port\"`",
          "211: }",
          "214: type exporterConfig struct {",
          "215:  Compression        string                 `yaml:\"compression,omitempty\"`",
          "216:  Insecure           bool                   `yaml:\"insecure,omitempty\"`",
          "217:  InsecureSkipVerify bool                   `yaml:\"insecure_skip_verify,omitempty\"`",
          "218:  BasicAuth          *prom_config.BasicAuth `yaml:\"basic_auth,omitempty\"`",
          "219: }",
          "221: type serviceGraphsConfig struct {",
          "222:  Enabled  bool          `yaml:\"enabled,omitempty\"`",
          "223:  Wait     time.Duration `yaml:\"wait,omitempty\"`",
          "224:  MaxItems int           `yaml:\"max_items,omitempty\"`",
          "228: func exporter(rwCfg RemoteWriteConfig) (map[string]interface{}, error) {",
          "229:  if len(rwCfg.Endpoint) == 0 {",
          "230:   return nil, errors.New(\"must have a configured a backend endpoint\")",
          "231:  }",
          "233:  headers := map[string]string{}",
          "234:  if rwCfg.Headers != nil {",
          "235:   headers = rwCfg.Headers",
          "238:  if rwCfg.BasicAuth != nil {",
          "239:   password := string(rwCfg.BasicAuth.Password)",
          "241:   if len(rwCfg.BasicAuth.PasswordFile) > 0 {",
          "242:    buff, err := ioutil.ReadFile(rwCfg.BasicAuth.PasswordFile)",
          "243:    if err != nil {",
          "244:     return nil, fmt.Errorf(\"unable to load password file %s: %w\", rwCfg.BasicAuth.PasswordFile, err)",
          "246:    password = strings.TrimSpace(string(buff))",
          "247:   }",
          "249:   encodedAuth := base64.StdEncoding.EncodeToString([]byte(rwCfg.BasicAuth.Username + \":\" + password))",
          "250:   headers[\"authorization\"] = \"Basic \" + encodedAuth",
          "251:  }",
          "253:  compression := rwCfg.Compression",
          "254:  if compression == compressionNone {",
          "255:   compression = \"\"",
          "256:  }",
          "258:  otlpExporter := map[string]interface{}{",
          "259:   \"endpoint\":         rwCfg.Endpoint,",
          "260:   \"compression\":      compression,",
          "261:   \"headers\":          headers,",
          "262:   \"sending_queue\":    rwCfg.SendingQueue,",
          "263:   \"retry_on_failure\": rwCfg.RetryOnFailure,",
          "264:  }",
          "266:  tlsConfig := map[string]interface{}{",
          "267:   \"insecure\": rwCfg.Insecure,",
          "268:  }",
          "269:  if !rwCfg.Insecure {",
          "271:   if rwCfg.TLSConfig != nil {",
          "272:    tlsConfig[\"ca_file\"] = rwCfg.TLSConfig.CAFile",
          "273:    tlsConfig[\"cert_file\"] = rwCfg.TLSConfig.CertFile",
          "274:    tlsConfig[\"key_file\"] = rwCfg.TLSConfig.KeyFile",
          "275:    tlsConfig[\"insecure_skip_verify\"] = rwCfg.TLSConfig.InsecureSkipVerify",
          "276:   } else {",
          "278:    tlsConfig[\"insecure_skip_verify\"] = rwCfg.InsecureSkipVerify",
          "279:   }",
          "280:  }",
          "281:  otlpExporter[\"tls\"] = tlsConfig",
          "287:  if retryConfig := otlpExporter[\"retry_on_failure\"].(map[string]interface{}); retryConfig == nil {",
          "288:   otlpExporter[\"retry_on_failure\"] = map[string]interface{}{",
          "289:    \"max_elapsed_time\": \"60s\",",
          "290:   }",
          "291:  } else if retryConfig[\"max_elapsed_time\"] == nil {",
          "292:   retryConfig[\"max_elapsed_time\"] = \"60s\"",
          "293:  }",
          "295:  return otlpExporter, nil",
          "296: }",
          "299: func (c *InstanceConfig) exporters() (map[string]interface{}, error) {",
          "300:  exporters := map[string]interface{}{}",
          "301:  for i, remoteWriteConfig := range c.RemoteWrite {",
          "302:   exporter, err := exporter(remoteWriteConfig)",
          "303:   if err != nil {",
          "304:    return nil, err",
          "305:   }",
          "306:   var exporterName string",
          "307:   switch remoteWriteConfig.Protocol {",
          "308:   case protocolGRPC:",
          "309:    exporterName = fmt.Sprintf(\"otlp/%d\", i)",
          "310:   case protocolHTTP:",
          "311:    exporterName = fmt.Sprintf(\"otlphttp/%d\", i)",
          "312:   }",
          "313:   exporters[exporterName] = exporter",
          "314:  }",
          "315:  return exporters, nil",
          "316: }",
          "318: func resolver(config map[string]interface{}) (map[string]interface{}, error) {",
          "319:  if len(config) == 0 {",
          "320:   return nil, fmt.Errorf(\"must configure one resolver (dns or static)\")",
          "321:  }",
          "322:  resolverCfg := make(map[string]interface{})",
          "323:  for typ, cfg := range config {",
          "324:   switch typ {",
          "325:   case dnsTagName, staticTagName:",
          "326:    resolverCfg[typ] = cfg",
          "327:   default:",
          "328:    return nil, fmt.Errorf(\"unsupported resolver config type: %s\", typ)",
          "329:   }",
          "331:  return resolverCfg, nil",
          "334: func (c *InstanceConfig) loadBalancingExporter() (map[string]interface{}, error) {",
          "335:  exporter, err := exporter(RemoteWriteConfig{",
          "337:   Endpoint:    \"noop\",",
          "338:   Compression: c.LoadBalancing.Exporter.Compression,",
          "339:   Insecure:    c.LoadBalancing.Exporter.Insecure,",
          "340:   TLSConfig:   &prom_config.TLSConfig{InsecureSkipVerify: c.LoadBalancing.Exporter.InsecureSkipVerify},",
          "341:   BasicAuth:   c.LoadBalancing.Exporter.BasicAuth,",
          "342:  })",
          "343:  if err != nil {",
          "344:   return nil, err",
          "345:  }",
          "346:  resolverCfg, err := resolver(c.LoadBalancing.Resolver)",
          "347:  if err != nil {",
          "348:   return nil, err",
          "349:  }",
          "350:  return map[string]interface{}{",
          "351:   \"protocol\": map[string]interface{}{",
          "352:    \"otlp\": exporter,",
          "354:   \"resolver\": resolverCfg,",
          "355:  }, nil",
          "356: }",
          "360: func formatPolicies(cfg []map[string]interface{}) ([]map[string]interface{}, error) {",
          "361:  policies := make([]map[string]interface{}, 0, len(cfg))",
          "362:  for i, policy := range cfg {",
          "363:   if len(policy) != 1 {",
          "364:    return nil, errors.New(\"malformed sampling policy\")",
          "365:   }",
          "366:   for typ, rules := range policy {",
          "367:    switch typ {",
          "368:    case alwaysSamplePolicy:",
          "369:     policies = append(policies, map[string]interface{}{",
          "370:      \"name\": fmt.Sprintf(\"%s/%d\", typ, i),",
          "371:      \"type\": typ,",
          "372:     })",
          "373:    default:",
          "374:     policies = append(policies, map[string]interface{}{",
          "375:      \"name\": fmt.Sprintf(\"%s/%d\", typ, i),",
          "376:      \"type\": typ,",
          "377:      typ:    rules,",
          "378:     })",
          "379:    }",
          "380:   }",
          "381:  }",
          "382:  return policies, nil",
          "383: }",
          "385: func (c *InstanceConfig) otelConfig() (*config.Config, error) {",
          "386:  otelMapStructure := map[string]interface{}{}",
          "388:  if len(c.Receivers) == 0 {",
          "389:   return nil, errors.New(\"must have at least one configured receiver\")",
          "390:  }",
          "392:  exporters, err := c.exporters()",
          "393:  if err != nil {",
          "394:   return nil, err",
          "395:  }",
          "396:  exportersNames := make([]string, 0, len(exporters))",
          "397:  for name := range exporters {",
          "398:   exportersNames = append(exportersNames, name)",
          "399:  }",
          "402:  processors := map[string]interface{}{}",
          "403:  processorNames := []string{}",
          "404:  if c.ScrapeConfigs != nil {",
          "405:   opType := promsdprocessor.OperationTypeUpsert",
          "406:   if c.OperationType != \"\" {",
          "407:    opType = c.OperationType",
          "408:   }",
          "409:   processorNames = append(processorNames, promsdprocessor.TypeStr)",
          "410:   processors[promsdprocessor.TypeStr] = map[string]interface{}{",
          "411:    \"scrape_configs\": c.ScrapeConfigs,",
          "412:    \"operation_type\": opType,",
          "413:   }",
          "414:  }",
          "416:  if c.AutomaticLogging != nil {",
          "417:   processorNames = append(processorNames, automaticloggingprocessor.TypeStr)",
          "418:   processors[automaticloggingprocessor.TypeStr] = map[string]interface{}{",
          "419:    \"automatic_logging\": c.AutomaticLogging,",
          "420:   }",
          "421:  }",
          "423:  if c.Attributes != nil {",
          "424:   processors[\"attributes\"] = c.Attributes",
          "425:   processorNames = append(processorNames, \"attributes\")",
          "428:  if c.Batch != nil {",
          "429:   processors[\"batch\"] = c.Batch",
          "430:   processorNames = append(processorNames, \"batch\")",
          "431:  }",
          "433:  pipelines := make(map[string]interface{})",
          "434:  if c.SpanMetrics != nil {",
          "436:   namespace := \"traces_spanmetrics\"",
          "437:   if len(c.SpanMetrics.Namespace) != 0 {",
          "438:    namespace = fmt.Sprintf(\"%s_%s\", c.SpanMetrics.Namespace, namespace)",
          "439:   }",
          "441:   var exporterName string",
          "442:   if len(c.SpanMetrics.MetricsInstance) != 0 && len(c.SpanMetrics.HandlerEndpoint) == 0 {",
          "443:    exporterName = remotewriteexporter.TypeStr",
          "444:    exporters[remotewriteexporter.TypeStr] = map[string]interface{}{",
          "445:     \"namespace\":        namespace,",
          "446:     \"const_labels\":     c.SpanMetrics.ConstLabels,",
          "447:     \"metrics_instance\": c.SpanMetrics.MetricsInstance,",
          "448:    }",
          "449:   } else if len(c.SpanMetrics.MetricsInstance) == 0 && len(c.SpanMetrics.HandlerEndpoint) != 0 {",
          "450:    exporterName = \"prometheus\"",
          "451:    exporters[exporterName] = map[string]interface{}{",
          "452:     \"endpoint\":     c.SpanMetrics.HandlerEndpoint,",
          "453:     \"namespace\":    namespace,",
          "454:     \"const_labels\": c.SpanMetrics.ConstLabels,",
          "456:   } else {",
          "457:    return nil, fmt.Errorf(\"must specify a prometheus instance or a metrics handler endpoint to export the metrics\")",
          "458:   }",
          "460:   processorNames = append(processorNames, \"spanmetrics\")",
          "461:   processors[\"spanmetrics\"] = map[string]interface{}{",
          "462:    \"metrics_exporter\":          exporterName,",
          "463:    \"latency_histogram_buckets\": c.SpanMetrics.LatencyHistogramBuckets,",
          "464:    \"dimensions\":                c.SpanMetrics.Dimensions,",
          "465:   }",
          "467:   pipelines[spanMetricsPipelineName] = map[string]interface{}{",
          "468:    \"receivers\": []string{noopreceiver.TypeStr},",
          "469:    \"exporters\": []string{exporterName},",
          "470:   }",
          "471:  }",
          "474:  receiverNames := []string{}",
          "475:  for name := range c.Receivers {",
          "476:   receiverNames = append(receiverNames, name)",
          "479:  if c.TailSampling != nil {",
          "480:   wait := defaultDecisionWait",
          "481:   if c.TailSampling.DecisionWait != 0 {",
          "482:    wait = c.TailSampling.DecisionWait",
          "483:   }",
          "485:   policies, err := formatPolicies(c.TailSampling.Policies)",
          "486:   if err != nil {",
          "487:    return nil, err",
          "488:   }",
          "492:   processorNames = append([]string{\"tail_sampling\"}, processorNames...)",
          "493:   processors[\"tail_sampling\"] = map[string]interface{}{",
          "494:    \"policies\":      policies,",
          "495:    \"decision_wait\": wait,",
          "496:   }",
          "497:  }",
          "499:  if c.LoadBalancing != nil {",
          "500:   internalExporter, err := c.loadBalancingExporter()",
          "501:   if err != nil {",
          "502:    return nil, err",
          "503:   }",
          "504:   exporters[\"loadbalancing\"] = internalExporter",
          "506:   receiverPort := defaultLoadBalancingPort",
          "507:   if c.LoadBalancing.ReceiverPort != \"\" {",
          "508:    receiverPort = c.LoadBalancing.ReceiverPort",
          "509:   }",
          "510:   c.Receivers[\"otlp/lb\"] = map[string]interface{}{",
          "511:    \"protocols\": map[string]interface{}{",
          "512:     \"grpc\": map[string]interface{}{",
          "513:      \"endpoint\": net.JoinHostPort(\"0.0.0.0\", receiverPort),",
          "516:   }",
          "517:  }",
          "519:  if c.ServiceGraphs != nil && c.ServiceGraphs.Enabled {",
          "520:   processors[servicegraphprocessor.TypeStr] = map[string]interface{}{",
          "521:    \"wait\":      c.ServiceGraphs.Wait,",
          "522:    \"max_items\": c.ServiceGraphs.MaxItems,",
          "523:   }",
          "524:   processorNames = append(processorNames, servicegraphprocessor.TypeStr)",
          "525:  }",
          "528:  splitPipeline := c.LoadBalancing != nil",
          "529:  orderedSplitProcessors := orderProcessors(processorNames, splitPipeline)",
          "530:  if splitPipeline {",
          "532:   pipelines[\"traces/0\"] = map[string]interface{}{",
          "533:    \"receivers\":  receiverNames,",
          "534:    \"processors\": orderedSplitProcessors[0],",
          "535:    \"exporters\":  []string{\"loadbalancing\"},",
          "536:   }",
          "538:   pipelines[\"traces/1\"] = map[string]interface{}{",
          "539:    \"exporters\":  exportersNames,",
          "540:    \"processors\": orderedSplitProcessors[1],",
          "541:    \"receivers\":  []string{\"otlp/lb\"},",
          "542:   }",
          "543:  } else {",
          "544:   pipelines[\"traces\"] = map[string]interface{}{",
          "545:    \"exporters\":  exportersNames,",
          "546:    \"processors\": orderedSplitProcessors[0],",
          "547:    \"receivers\":  receiverNames,",
          "548:   }",
          "549:  }",
          "551:  if c.SpanMetrics != nil {",
          "554:   c.Receivers[noopreceiver.TypeStr] = nil",
          "555:  }",
          "557:  otelMapStructure[\"exporters\"] = exporters",
          "558:  otelMapStructure[\"processors\"] = processors",
          "559:  otelMapStructure[\"receivers\"] = c.Receivers",
          "562:  otelMapStructure[\"service\"] = map[string]interface{}{",
          "563:   \"pipelines\": pipelines,",
          "564:  }",
          "566:  factories, err := tracingFactories()",
          "567:  if err != nil {",
          "568:   return nil, fmt.Errorf(\"failed to create factories: %w\", err)",
          "569:  }",
          "571:  if err := configcheck.ValidateConfigFromFactories(factories); err != nil {",
          "572:   return nil, fmt.Errorf(\"failed to validate factories: %w\", err)",
          "575:  configMap := configparser.NewConfigMapFromStringMap(otelMapStructure)",
          "576:  cfgUnmarshaler := configunmarshaler.NewDefault()",
          "577:  otelCfg, err := cfgUnmarshaler.Unmarshal(configMap, factories)",
          "578:  if err != nil {",
          "579:   return nil, fmt.Errorf(\"failed to load OTel config: %w\", err)",
          "582:  return otelCfg, nil",
          "587: func tracingFactories() (component.Factories, error) {",
          "588:  extensions, err := component.MakeExtensionFactoryMap()",
          "589:  if err != nil {",
          "590:   return component.Factories{}, err",
          "591:  }",
          "593:  receivers, err := component.MakeReceiverFactoryMap(",
          "594:   jaegerreceiver.NewFactory(),",
          "595:   zipkinreceiver.NewFactory(),",
          "596:   otlpreceiver.NewFactory(),",
          "597:   opencensusreceiver.NewFactory(),",
          "598:   kafkareceiver.NewFactory(),",
          "599:   noopreceiver.NewFactory(),",
          "600:  )",
          "601:  if err != nil {",
          "602:   return component.Factories{}, err",
          "603:  }",
          "605:  exporters, err := component.MakeExporterFactoryMap(",
          "606:   otlpexporter.NewFactory(),",
          "607:   otlphttpexporter.NewFactory(),",
          "608:   loadbalancingexporter.NewFactory(),",
          "609:   prometheusexporter.NewFactory(),",
          "610:   remotewriteexporter.NewFactory(),",
          "611:  )",
          "612:  if err != nil {",
          "613:   return component.Factories{}, err",
          "614:  }",
          "616:  processors, err := component.MakeProcessorFactoryMap(",
          "617:   batchprocessor.NewFactory(),",
          "618:   attributesprocessor.NewFactory(),",
          "619:   promsdprocessor.NewFactory(),",
          "620:   spanmetricsprocessor.NewFactory(),",
          "621:   automaticloggingprocessor.NewFactory(),",
          "622:   tailsamplingprocessor.NewFactory(),",
          "623:   servicegraphprocessor.NewFactory(),",
          "624:  )",
          "625:  if err != nil {",
          "626:   return component.Factories{}, err",
          "627:  }",
          "629:  return component.Factories{",
          "630:   Extensions: extensions,",
          "631:   Receivers:  receivers,",
          "632:   Processors: processors,",
          "633:   Exporters:  exporters,",
          "634:  }, nil",
          "640: func orderProcessors(processors []string, splitPipelines bool) [][]string {",
          "641:  order := map[string]int{",
          "642:   \"attributes\":        0,",
          "643:   \"spanmetrics\":       1,",
          "644:   \"service_graphs\":    2,",
          "645:   \"tail_sampling\":     3,",
          "646:   \"automatic_logging\": 4,",
          "647:   \"batch\":             5,",
          "648:  }",
          "650:  sort.Slice(processors, func(i, j int) bool {",
          "651:   iVal := order[processors[i]]",
          "652:   jVal := order[processors[j]]",
          "654:   return iVal < jVal",
          "655:  })",
          "657:  if !splitPipelines {",
          "658:   return [][]string{",
          "659:    processors,",
          "660:   }",
          "661:  }",
          "665:  foundAt := len(processors)",
          "666:  for i, processor := range processors {",
          "667:   if processor == \"batch\" ||",
          "668:    processor == \"tail_sampling\" ||",
          "669:    processor == \"automatic_logging\" ||",
          "670:    processor == \"service_graphs\" {",
          "671:    foundAt = i",
          "672:    break",
          "673:   }",
          "674:  }",
          "676:  return [][]string{",
          "677:   processors[:foundAt],",
          "678:   processors[foundAt:],",
          "",
          "[Added Lines]",
          "5:  \"os\"",
          "8:  \"testing\"",
          "10:  \"github.com/stretchr/testify/assert\"",
          "11:  \"github.com/stretchr/testify/require\"",
          "15:  \"gopkg.in/yaml.v2\"",
          "18: func tmpFile(t *testing.T, content string) (*os.File, func()) {",
          "19:  f, err := ioutil.TempFile(\"\", \"\")",
          "20:  require.NoError(t, err)",
          "22:  _, err = f.Write([]byte(content))",
          "23:  require.NoError(t, err)",
          "25:  err = f.Close()",
          "26:  require.NoError(t, err)",
          "28:  return f, func() {",
          "29:   os.Remove(f.Name())",
          "33: func TestOTelConfig(t *testing.T) {",
          "35:  password := \"password_in_file\"",
          "36:  passwordFile, teardown := tmpFile(t, password)",
          "37:  defer teardown()",
          "41:  passwordFileExtraNewline, teardown := tmpFile(t, password+\"\\n\")",
          "42:  defer teardown()",
          "45:  tt := []struct {",
          "46:   name           string",
          "47:   cfg            string",
          "48:   expectedError  bool",
          "49:   expectedConfig string",
          "50:  }{",
          "51:   {",
          "52:    name:          \"disabled\",",
          "53:    cfg:           \"\",",
          "54:    expectedError: true,",
          "55:   },",
          "56:   {",
          "57:    name: \"no receivers\",",
          "58:    cfg: `",
          "59: receivers:",
          "60: `,",
          "61:    expectedError: true,",
          "62:   },",
          "63:   {",
          "64:    name: \"no rw endpoint\",",
          "65:    cfg: `",
          "66: receivers:",
          "67:   jaeger:",
          "68: `,",
          "69:    expectedError: true,",
          "70:   },",
          "71:   {",
          "72:    name: \"empty receiver config\",",
          "73:    cfg: `",
          "74: receivers:",
          "75:   jaeger:",
          "76: remote_write:",
          "77:   - endpoint: example.com:12345",
          "78: `,",
          "79:    expectedError: true,",
          "80:   },",
          "81:   {",
          "82:    name: \"basic config\",",
          "83:    cfg: `",
          "84: receivers:",
          "85:   jaeger:",
          "86:     protocols:",
          "87:       grpc:",
          "88: remote_write:",
          "89:   - endpoint: example.com:12345",
          "90: `,",
          "91:    expectedConfig: `",
          "92: receivers:",
          "93:   jaeger:",
          "94:     protocols:",
          "95:       grpc:",
          "96: exporters:",
          "97:   otlp/0:",
          "98:     endpoint: example.com:12345",
          "99:     compression: gzip",
          "100:     retry_on_failure:",
          "101:       max_elapsed_time: 60s",
          "102: service:",
          "103:   pipelines:",
          "104:     traces:",
          "105:       exporters: [\"otlp/0\"]",
          "106:       processors: []",
          "107:       receivers: [\"jaeger\"]",
          "108: `,",
          "109:   },",
          "110:   {",
          "111:    name: \"processor config\",",
          "112:    cfg: `",
          "113: receivers:",
          "114:   jaeger:",
          "115:     protocols:",
          "116:       grpc:",
          "117: attributes:",
          "118:   actions:",
          "119:   - key: montgomery",
          "120:     value: forever",
          "121:     action: update",
          "122: batch:",
          "123:   timeout: 5s",
          "124:   send_batch_size: 100",
          "125: remote_write:",
          "126:   - endpoint: example.com:12345",
          "127:     retry_on_failure:",
          "128:       initial_interval: 10s",
          "129:     sending_queue:",
          "130:       num_consumers: 15",
          "131: `,",
          "132:    expectedConfig: `",
          "133: receivers:",
          "134:   jaeger:",
          "135:     protocols:",
          "136:       grpc:",
          "137: exporters:",
          "138:   otlp/0:",
          "139:     endpoint: example.com:12345",
          "140:     compression: gzip",
          "141:     retry_on_failure:",
          "142:       initial_interval: 10s",
          "143:       max_elapsed_time: 60s",
          "144:     sending_queue:",
          "145:       num_consumers: 15",
          "146: processors:",
          "147:   attributes:",
          "148:     actions:",
          "149:     - key: montgomery",
          "150:       value: forever",
          "151:       action: update",
          "152:   batch:",
          "153:     timeout: 5s",
          "154:     send_batch_size: 100",
          "155: service:",
          "156:   pipelines:",
          "157:     traces:",
          "158:       exporters: [\"otlp/0\"]",
          "159:       processors: [\"attributes\", \"batch\"]",
          "160:       receivers: [\"jaeger\"]",
          "161: `,",
          "162:   },",
          "163:   {",
          "164:    name: \"password in file\",",
          "165:    cfg: `",
          "166: receivers:",
          "167:   jaeger:",
          "168:     protocols:",
          "169:       grpc:",
          "170: remote_write:",
          "171:   - insecure: true",
          "172:     endpoint: example.com:12345",
          "173:     basic_auth:",
          "174:       username: test",
          "175:       password_file: ` + passwordFile.Name(),",
          "176:    expectedConfig: `",
          "177: receivers:",
          "178:   jaeger:",
          "179:     protocols:",
          "180:       grpc:",
          "181: exporters:",
          "182:   otlp/0:",
          "183:     endpoint: example.com:12345",
          "184:     compression: gzip",
          "185:     tls:",
          "186:       insecure: true",
          "187:     headers:",
          "188:       authorization: Basic dGVzdDpwYXNzd29yZF9pbl9maWxl",
          "189:     retry_on_failure:",
          "190:       max_elapsed_time: 60s",
          "191: service:",
          "192:   pipelines:",
          "193:     traces:",
          "194:       exporters: [\"otlp/0\"]",
          "195:       processors: []",
          "196:       receivers: [\"jaeger\"]",
          "197: `,",
          "198:   },",
          "199:   {",
          "200:    name: \"password in file with extra newline\",",
          "201:    cfg: `",
          "202: receivers:",
          "203:   jaeger:",
          "204:     protocols:",
          "205:       grpc:",
          "206: remote_write:",
          "207:   - insecure: true",
          "208:     endpoint: example.com:12345",
          "209:     basic_auth:",
          "210:       username: test",
          "211:       password_file: ` + passwordFileExtraNewline.Name(),",
          "212:    expectedConfig: `",
          "213: receivers:",
          "214:   jaeger:",
          "215:     protocols:",
          "216:       grpc:",
          "217: exporters:",
          "218:   otlp/0:",
          "219:     endpoint: example.com:12345",
          "220:     compression: gzip",
          "221:     tls:",
          "222:       insecure: true",
          "223:     headers:",
          "224:       authorization: Basic dGVzdDpwYXNzd29yZF9pbl9maWxl",
          "225:     retry_on_failure:",
          "226:       max_elapsed_time: 60s",
          "227: service:",
          "228:   pipelines:",
          "229:     traces:",
          "230:       exporters: [\"otlp/0\"]",
          "231:       processors: []",
          "232:       receivers: [\"jaeger\"]",
          "233: `,",
          "234:   },",
          "235:   {",
          "236:    name: \"insecure skip verify\",",
          "237:    cfg: `",
          "238: receivers:",
          "239:   jaeger:",
          "240:     protocols:",
          "241:       grpc:",
          "242: remote_write:",
          "243:   - insecure_skip_verify: true",
          "244:     endpoint: example.com:12345`,",
          "245:    expectedConfig: `",
          "246: receivers:",
          "247:   jaeger:",
          "248:     protocols:",
          "249:       grpc:",
          "250: exporters:",
          "251:   otlp/0:",
          "252:     endpoint: example.com:12345",
          "253:     compression: gzip",
          "254:     tls:",
          "255:       insecure_skip_verify: true",
          "256:     retry_on_failure:",
          "257:       max_elapsed_time: 60s",
          "258: service:",
          "259:   pipelines:",
          "260:     traces:",
          "261:       exporters: [\"otlp/0\"]",
          "262:       processors: []",
          "263:       receivers: [\"jaeger\"]",
          "264: `,",
          "265:   },",
          "266:   {",
          "267:    name: \"no compression\",",
          "268:    cfg: `",
          "269: receivers:",
          "270:   jaeger:",
          "271:     protocols:",
          "272:       grpc:",
          "273: remote_write:",
          "274:   - insecure_skip_verify: true",
          "275:     endpoint: example.com:12345",
          "276:     compression: none`,",
          "277:    expectedConfig: `",
          "278: receivers:",
          "279:   jaeger:",
          "280:     protocols:",
          "281:       grpc:",
          "282: exporters:",
          "283:   otlp/0:",
          "284:     endpoint: example.com:12345",
          "285:     tls:",
          "286:       insecure_skip_verify: true",
          "287:     retry_on_failure:",
          "288:       max_elapsed_time: 60s",
          "289: service:",
          "290:   pipelines:",
          "291:     traces:",
          "292:       exporters: [\"otlp/0\"]",
          "293:       processors: []",
          "294:       receivers: [\"jaeger\"]",
          "295: `,",
          "296:   },",
          "297:   {",
          "298:    name: \"jaeger receiver remote_sampling TLS config\",",
          "299:    cfg: `",
          "300: receivers:",
          "301:   jaeger:",
          "302:     protocols:",
          "303:       grpc:",
          "304:     remote_sampling:",
          "305:       strategy_file: file_path",
          "306:       tls:",
          "307:         insecure: true",
          "308:         insecure_skip_verify: true",
          "309:         server_name_override: hostname",
          "310: remote_write:",
          "311:   - endpoint: example.com:12345",
          "312: `,",
          "313:    expectedConfig: `",
          "314: receivers:",
          "315:   jaeger:",
          "316:     protocols:",
          "317:       grpc:",
          "318:     remote_sampling:",
          "319:       strategy_file: file_path",
          "320:       tls:",
          "321:         insecure: true",
          "322:         insecure_skip_verify: true",
          "323:         server_name_override: hostname",
          "324: exporters:",
          "325:   otlp/0:",
          "326:     endpoint: example.com:12345",
          "327:     compression: gzip",
          "328:     retry_on_failure:",
          "329:       max_elapsed_time: 60s",
          "330: service:",
          "331:   pipelines:",
          "332:     traces:",
          "333:       exporters: [\"otlp/0\"]",
          "334:       processors: []",
          "335:       receivers: [\"jaeger\"]",
          "336: `,",
          "337:   },",
          "338:   {",
          "339:    name: \"push_config and remote_write\",",
          "340:    cfg: `",
          "341: receivers:",
          "342:   jaeger:",
          "343: push_config:",
          "344:   endpoint: example:12345",
          "345: remote_write:",
          "346:   - endpoint: anotherexample.com:12345",
          "347: `,",
          "348:    expectedError: true,",
          "349:   },",
          "350:   {",
          "351:    name: \"push_config.batch and batch\",",
          "352:    cfg: `",
          "353: receivers:",
          "354:   jaeger:",
          "355: push_config:",
          "356:   endpoint: example:12345",
          "357:   batch:",
          "358:     timeout: 5s",
          "359:     send_batch_size: 100",
          "360: batch:",
          "361:   timeout: 5s",
          "362:   send_batch_size: 100",
          "363: remote_write:",
          "364:   - endpoint: anotherexample.com:12345",
          "365: `,",
          "366:    expectedError: true,",
          "367:   },",
          "368:   {",
          "369:    name: \"one backend with remote_write\",",
          "370:    cfg: `",
          "371: receivers:",
          "372:   jaeger:",
          "373:     protocols:",
          "374:       grpc:",
          "375: remote_write:",
          "376:   - endpoint: example.com:12345",
          "377:     headers:",
          "378:       x-some-header: Some value!",
          "379: `,",
          "380:    expectedConfig: `",
          "381: receivers:",
          "382:   jaeger:",
          "383:     protocols:",
          "384:       grpc:",
          "385: exporters:",
          "386:   otlp/0:",
          "387:     endpoint: example.com:12345",
          "388:     compression: gzip",
          "389:     headers:",
          "390:       x-some-header: Some value!",
          "391:     retry_on_failure:",
          "392:       max_elapsed_time: 60s",
          "393: service:",
          "394:   pipelines:",
          "395:     traces:",
          "396:       exporters: [\"otlp/0\"]",
          "397:       processors: []",
          "398:       receivers: [\"jaeger\"]",
          "399: `,",
          "400:   },",
          "401:   {",
          "402:    name: \"two backends in a remote_write block\",",
          "403:    cfg: `",
          "404: receivers:",
          "405:   jaeger:",
          "406:     protocols:",
          "407:       grpc:",
          "408: remote_write:",
          "409:   - endpoint: example.com:12345",
          "410:     basic_auth:",
          "411:       username: test",
          "412:       password: blerg",
          "413:   - endpoint: anotherexample.com:12345",
          "414:     compression: none",
          "415:     insecure: false",
          "416:     insecure_skip_verify: true",
          "417:     basic_auth:",
          "418:       username: test",
          "419:       password_file: ` + passwordFile.Name() + `",
          "420:     retry_on_failure:",
          "421:       initial_interval: 10s",
          "422:     sending_queue:",
          "423:       num_consumers: 15",
          "424: `,",
          "425:    expectedConfig: `",
          "426: receivers:",
          "427:   jaeger:",
          "428:     protocols:",
          "429:       grpc:",
          "430: exporters:",
          "431:   otlp/0:",
          "432:     endpoint: example.com:12345",
          "433:     compression: gzip",
          "434:     headers:",
          "435:       authorization: Basic dGVzdDpibGVyZw==",
          "436:     retry_on_failure:",
          "437:       max_elapsed_time: 60s",
          "438:   otlp/1:",
          "439:     endpoint: anotherexample.com:12345",
          "440:     tls:",
          "441:       insecure: false",
          "442:       insecure_skip_verify: true",
          "443:     headers:",
          "444:       authorization: Basic dGVzdDpwYXNzd29yZF9pbl9maWxl",
          "445:     retry_on_failure:",
          "446:       initial_interval: 10s",
          "447:       max_elapsed_time: 60s",
          "448:     sending_queue:",
          "449:       num_consumers: 15",
          "450: service:",
          "451:   pipelines:",
          "452:     traces:",
          "453:       exporters: [\"otlp/1\", \"otlp/0\"]",
          "454:       processors: []",
          "455:       receivers: [\"jaeger\"]",
          "456: `,",
          "457:   },",
          "458:   {",
          "459:    name: \"batch block\",",
          "460:    cfg: `",
          "461: receivers:",
          "462:   jaeger:",
          "463:     protocols:",
          "464:       grpc:",
          "465: remote_write:",
          "466:   - endpoint: example.com:12345",
          "467: batch:",
          "468:   timeout: 5s",
          "469:   send_batch_size: 100",
          "470: `,",
          "471:    expectedConfig: `",
          "472: receivers:",
          "473:   jaeger:",
          "474:     protocols:",
          "475:       grpc:",
          "476: exporters:",
          "477:   otlp/0:",
          "478:     endpoint: example.com:12345",
          "479:     compression: gzip",
          "480:     retry_on_failure:",
          "481:       max_elapsed_time: 60s",
          "482: processors:",
          "483:   batch:",
          "484:     timeout: 5s",
          "485:     send_batch_size: 100",
          "486: service:",
          "487:   pipelines:",
          "488:     traces:",
          "489:       exporters: [\"otlp/0\"]",
          "490:       processors: [\"batch\"]",
          "491:       receivers: [\"jaeger\"]",
          "492: `,",
          "493:   },",
          "494:   {",
          "495:    name: \"span metrics remote write exporter\",",
          "496:    cfg: `",
          "497: receivers:",
          "498:   jaeger:",
          "499:     protocols:",
          "500:       grpc:",
          "501: remote_write:",
          "502:   - endpoint: example.com:12345",
          "503: spanmetrics:",
          "504:   latency_histogram_buckets: [2ms, 6ms, 10ms, 100ms, 250ms]",
          "505:   dimensions:",
          "506:     - name: http.method",
          "507:       default: GET",
          "508:     - name: http.status_code",
          "509:   metrics_instance: traces",
          "510: `,",
          "511:    expectedConfig: `",
          "512: receivers:",
          "513:   noop:",
          "514:   jaeger:",
          "515:     protocols:",
          "516:       grpc:",
          "517: exporters:",
          "518:   otlp/0:",
          "519:     endpoint: example.com:12345",
          "520:     compression: gzip",
          "521:     retry_on_failure:",
          "522:       max_elapsed_time: 60s",
          "523:   remote_write:",
          "524:     namespace: traces_spanmetrics",
          "525:     metrics_instance: traces",
          "526: processors:",
          "527:   spanmetrics:",
          "528:     metrics_exporter: remote_write",
          "529:     latency_histogram_buckets: [2ms, 6ms, 10ms, 100ms, 250ms]",
          "530:     dimensions:",
          "531:       - name: http.method",
          "532:         default: GET",
          "533:       - name: http.status_code",
          "534: service:",
          "535:   pipelines:",
          "536:     traces:",
          "537:       exporters: [\"otlp/0\"]",
          "538:       processors: [\"spanmetrics\"]",
          "539:       receivers: [\"jaeger\"]",
          "540:     metrics/spanmetrics:",
          "541:       exporters: [\"remote_write\"]",
          "542:       receivers: [\"noop\"]",
          "543: `,",
          "544:   },",
          "545:   {",
          "546:    name: \"span metrics prometheus exporter\",",
          "547:    cfg: `",
          "548: receivers:",
          "549:   jaeger:",
          "550:     protocols:",
          "551:       grpc:",
          "552: remote_write:",
          "553:   - endpoint: example.com:12345",
          "554: spanmetrics:",
          "555:   handler_endpoint: \"0.0.0.0:8889\"",
          "556: `,",
          "557:    expectedConfig: `",
          "558: receivers:",
          "559:   noop:",
          "560:   jaeger:",
          "561:     protocols:",
          "562:       grpc:",
          "563: exporters:",
          "564:   otlp/0:",
          "565:     endpoint: example.com:12345",
          "566:     compression: gzip",
          "567:     retry_on_failure:",
          "568:       max_elapsed_time: 60s",
          "569:   prometheus:",
          "570:     endpoint: \"0.0.0.0:8889\"",
          "571:     namespace: traces_spanmetrics",
          "572: processors:",
          "573:   spanmetrics:",
          "574:     metrics_exporter: prometheus",
          "575: service:",
          "576:   pipelines:",
          "577:     traces:",
          "578:       exporters: [\"otlp/0\"]",
          "579:       processors: [\"spanmetrics\"]",
          "580:       receivers: [\"jaeger\"]",
          "581:     metrics/spanmetrics:",
          "582:       exporters: [\"prometheus\"]",
          "583:       receivers: [\"noop\"]",
          "584: `,",
          "585:   },",
          "586:   {",
          "587:    name: \"span metrics prometheus and remote write exporters fail\",",
          "588:    cfg: `",
          "589: receivers:",
          "590:   jaeger:",
          "591:     protocols:",
          "592:       grpc:",
          "593: remote_write:",
          "594:   - endpoint: example.com:12345",
          "595: spanmetrics:",
          "596:   handler_endpoint: \"0.0.0.0:8889\"",
          "597:   metrics_instance: traces",
          "598: `,",
          "599:    expectedError: true,",
          "600:   },",
          "601:   {",
          "602:    name: \"tail sampling config\",",
          "603:    cfg: `",
          "604: receivers:",
          "605:   jaeger:",
          "606:     protocols:",
          "607:       grpc:",
          "608: remote_write:",
          "609:   - endpoint: example.com:12345",
          "610: tail_sampling:",
          "611:   policies:",
          "612:     - always_sample:",
          "613:     - latency:",
          "614:         threshold_ms: 5000",
          "615:     - numeric_attribute:",
          "616:         key: key1",
          "617:         min_value: 50",
          "618:         max_value: 100",
          "619:     - probabilistic:",
          "620:         sampling_percentage: 10",
          "621:     - status_code:",
          "622:         status_codes:",
          "623:           - ERROR",
          "624:           - UNSET",
          "625:     - string_attribute:",
          "626:         key: key",
          "627:         values:",
          "628:           - value1",
          "629:           - value2",
          "630:     - rate_limiting:",
          "631:         spans_per_second: 35",
          "632: `,",
          "633:    expectedConfig: `",
          "634: receivers:",
          "635:   jaeger:",
          "636:     protocols:",
          "637:       grpc:",
          "638: exporters:",
          "639:   otlp/0:",
          "640:     endpoint: example.com:12345",
          "641:     compression: gzip",
          "642:     retry_on_failure:",
          "643:       max_elapsed_time: 60s",
          "644: processors:",
          "645:   tail_sampling:",
          "646:     decision_wait: 5s",
          "647:     policies:",
          "648:       - name: always_sample/0",
          "649:         type: always_sample",
          "650:       - name: latency/1",
          "651:         type: latency",
          "652:         latency:",
          "653:           threshold_ms: 5000",
          "654:       - name: numeric_attribute/2",
          "655:         type: numeric_attribute",
          "656:         numeric_attribute:",
          "657:           key: key1",
          "658:           min_value: 50",
          "659:           max_value: 100",
          "660:       - name: probabilistic/3",
          "661:         type: probabilistic",
          "662:         probabilistic:",
          "663:           sampling_percentage: 10",
          "664:       - name: status_code/4",
          "665:         type: status_code",
          "666:         status_code:",
          "667:           status_codes:",
          "668:             - ERROR",
          "669:             - UNSET",
          "670:       - name: string_attribute/5",
          "671:         type: string_attribute",
          "672:         string_attribute:",
          "673:           key: key",
          "674:           values:",
          "675:             - value1",
          "676:             - value2",
          "677:       - name: rate_limiting/6",
          "678:         type: rate_limiting",
          "679:         rate_limiting:",
          "680:           spans_per_second: 35",
          "681: service:",
          "682:   pipelines:",
          "683:     traces:",
          "684:       exporters: [\"otlp/0\"]",
          "685:       processors: [\"tail_sampling\"]",
          "686:       receivers: [\"jaeger\"]",
          "687: `,",
          "688:   },",
          "689:   {",
          "690:    name: \"tail sampling config with load balancing\",",
          "691:    cfg: `",
          "692: receivers:",
          "693:   jaeger:",
          "694:     protocols:",
          "695:       grpc:",
          "696: remote_write:",
          "697:   - endpoint: example.com:12345",
          "698: tail_sampling:",
          "699:   policies:",
          "700:     - always_sample:",
          "701:     - string_attribute:",
          "702:         key: key",
          "703:         values:",
          "704:           - value1",
          "705:           - value2",
          "706: load_balancing:",
          "707:   receiver_port: 8080",
          "708:   exporter:",
          "709:     insecure: true",
          "710:   resolver:",
          "711:     dns:",
          "712:       hostname: agent",
          "713:       port: 8080",
          "714: `,",
          "715:    expectedConfig: `",
          "716: receivers:",
          "717:   jaeger:",
          "718:     protocols:",
          "719:       grpc:",
          "720:   otlp/lb:",
          "721:     protocols:",
          "722:       grpc:",
          "723:         endpoint: \"0.0.0.0:8080\"",
          "724: exporters:",
          "725:   otlp/0:",
          "726:     endpoint: example.com:12345",
          "727:     compression: gzip",
          "728:     retry_on_failure:",
          "729:       max_elapsed_time: 60s",
          "730:   loadbalancing:",
          "731:     protocol:",
          "732:       otlp:",
          "733:         tls:",
          "734:           insecure: true",
          "735:         endpoint: noop",
          "736:         retry_on_failure:",
          "737:           max_elapsed_time: 60s",
          "738:     resolver:",
          "739:       dns:",
          "740:         hostname: agent",
          "741:         port: 8080",
          "742: processors:",
          "743:   tail_sampling:",
          "744:     decision_wait: 5s",
          "745:     policies:",
          "746:       - name: always_sample/0",
          "747:         type: always_sample",
          "748:       - name: string_attribute/1",
          "749:         type: string_attribute",
          "750:         string_attribute:",
          "751:           key: key",
          "752:           values:",
          "753:             - value1",
          "754:             - value2",
          "755: service:",
          "756:   pipelines:",
          "757:     traces/0:",
          "758:       exporters: [\"loadbalancing\"]",
          "759:       processors: []",
          "760:       receivers: [\"jaeger\"]",
          "761:     traces/1:",
          "762:       exporters: [\"otlp/0\"]",
          "763:       processors: [\"tail_sampling\"]",
          "764:       receivers: [\"otlp/lb\"]",
          "765: `,",
          "766:   },",
          "767:   {",
          "768:    name: \"automatic logging : default\",",
          "769:    cfg: `",
          "770: receivers:",
          "771:   jaeger:",
          "772:     protocols:",
          "773:       grpc:",
          "774: remote_write:",
          "775:   - endpoint: example.com:12345",
          "776: automatic_logging:",
          "777:   spans: true",
          "778: `,",
          "779:    expectedConfig: `",
          "780: receivers:",
          "781:   jaeger:",
          "782:     protocols:",
          "783:       grpc:",
          "784: processors:",
          "785:   automatic_logging:",
          "786:     automatic_logging:",
          "787:       spans: true",
          "788: exporters:",
          "789:   otlp/0:",
          "790:     endpoint: example.com:12345",
          "791:     compression: gzip",
          "792:     retry_on_failure:",
          "793:       max_elapsed_time: 60s",
          "794: service:",
          "795:   pipelines:",
          "796:     traces:",
          "797:       exporters: [\"otlp/0\"]",
          "798:       processors: [\"automatic_logging\"]",
          "799:       receivers: [\"jaeger\"]",
          "800:       `,",
          "801:   },",
          "802:   {",
          "803:    name: \"tls config\",",
          "804:    cfg: `",
          "805: receivers:",
          "806:   jaeger:",
          "807:     protocols:",
          "808:       grpc:",
          "809: remote_write:",
          "810:   - insecure: false",
          "811:     tls_config:",
          "812:       ca_file: server.crt",
          "813:       cert_file: client.crt",
          "814:       key_file: client.key",
          "815:     endpoint: example.com:12345",
          "816: `,",
          "817:    expectedConfig: `",
          "818: receivers:",
          "819:   jaeger:",
          "820:     protocols:",
          "821:       grpc:",
          "822: exporters:",
          "823:   otlp/0:",
          "824:     endpoint: example.com:12345",
          "825:     tls:",
          "826:       insecure: false",
          "827:       ca_file: server.crt",
          "828:       cert_file: client.crt",
          "829:       key_file: client.key",
          "830:     compression: gzip",
          "831:     retry_on_failure:",
          "832:       max_elapsed_time: 60s",
          "833: service:",
          "834:   pipelines:",
          "835:     traces:",
          "836:       exporters: [\"otlp/0\"]",
          "837:       processors: []",
          "838:       receivers: [\"jaeger\"]",
          "839: `,",
          "840:   },",
          "841:   {",
          "842:    name: \"otlp http & grpc exporters\",",
          "843:    cfg: `",
          "844: receivers:",
          "845:   jaeger:",
          "846:     protocols:",
          "847:       grpc:",
          "848: remote_write:",
          "849:   - endpoint: example.com:12345",
          "850:     protocol: http",
          "851:   - endpoint: example.com:12345",
          "852:     protocol: grpc",
          "853: `,",
          "854:    expectedConfig: `",
          "855: receivers:",
          "856:   jaeger:",
          "857:     protocols:",
          "858:       grpc:",
          "859: exporters:",
          "860:   otlphttp/0:",
          "861:     endpoint: example.com:12345",
          "862:     compression: gzip",
          "863:     retry_on_failure:",
          "864:       max_elapsed_time: 60s",
          "865:   otlp/1:",
          "866:     endpoint: example.com:12345",
          "867:     compression: gzip",
          "868:     retry_on_failure:",
          "869:       max_elapsed_time: 60s",
          "870: service:",
          "871:   pipelines:",
          "872:     traces:",
          "873:       exporters: [\"otlphttp/0\", \"otlp/1\"]",
          "874:       processors: []",
          "875:       receivers: [\"jaeger\"]",
          "876: `,",
          "877:   },",
          "878:   {",
          "879:    name: \"prom SD config\",",
          "880:    cfg: `",
          "881: receivers:",
          "882:   jaeger:",
          "883:     protocols:",
          "884:       grpc:",
          "885: remote_write:",
          "886:   - endpoint: example.com:12345",
          "887:     protocol: grpc",
          "888: scrape_configs:",
          "889:   - im_a_scrape_config",
          "890: prom_sd_operation_type: update",
          "891: `,",
          "892:    expectedConfig: `",
          "893: receivers:",
          "894:   jaeger:",
          "895:     protocols:",
          "896:       grpc:",
          "897: exporters:",
          "898:   otlp/0:",
          "899:     endpoint: example.com:12345",
          "900:     compression: gzip",
          "901:     retry_on_failure:",
          "902:       max_elapsed_time: 60s",
          "903: processors:",
          "904:   prom_sd_processor:",
          "905:     scrape_configs:",
          "906:       - im_a_scrape_config",
          "907:     operation_type: update",
          "908: service:",
          "909:   pipelines:",
          "910:     traces:",
          "911:       exporters: [\"otlp/0\"]",
          "912:       processors: [\"prom_sd_processor\"]",
          "913:       receivers: [\"jaeger\"]",
          "914: `,",
          "915:   },",
          "916:   {",
          "917:    name: \"service graphs\",",
          "918:    cfg: `",
          "919: receivers:",
          "920:   jaeger:",
          "921:     protocols:",
          "922:       grpc:",
          "923: remote_write:",
          "924:   - endpoint: example.com:12345",
          "925: service_graphs:",
          "926:   enabled: true",
          "927: `,",
          "928:    expectedConfig: `",
          "929: receivers:",
          "930:   jaeger:",
          "931:     protocols:",
          "932:       grpc:",
          "933: exporters:",
          "934:   otlp/0:",
          "935:     endpoint: example.com:12345",
          "936:     compression: gzip",
          "937:     retry_on_failure:",
          "938:       max_elapsed_time: 60s",
          "939: processors:",
          "940:   service_graphs:",
          "941: service:",
          "942:   pipelines:",
          "943:     traces:",
          "944:       exporters: [\"otlp/0\"]",
          "945:       processors: [\"service_graphs\"]",
          "946:       receivers: [\"jaeger\"]",
          "947: `,",
          "948:   },",
          "951:  for _, tc := range tt {",
          "952:   t.Run(tc.name, func(t *testing.T) {",
          "953:    var cfg InstanceConfig",
          "954:    err := yaml.Unmarshal([]byte(tc.cfg), &cfg)",
          "955:    require.NoError(t, err)",
          "958:    actualConfig, err := cfg.otelConfig()",
          "959:    if tc.expectedError {",
          "960:     assert.Error(t, err)",
          "961:     return",
          "963:    assert.NoError(t, err)",
          "966:    otelMapStructure := map[string]interface{}{}",
          "967:    err = yaml.Unmarshal([]byte(tc.expectedConfig), otelMapStructure)",
          "968:    require.NoError(t, err)",
          "970:    factories, err := tracingFactories()",
          "971:    require.NoError(t, err)",
          "973:    configMap := configparser.NewConfigMapFromStringMap(otelMapStructure)",
          "974:    cfgUnmarshaler := configunmarshaler.NewDefault()",
          "975:    expectedConfig, err := cfgUnmarshaler.Unmarshal(configMap, factories)",
          "976:    require.NoError(t, err)",
          "979:    sortPipelines(actualConfig)",
          "980:    sortPipelines(expectedConfig)",
          "982:    assert.Equal(t, expectedConfig, actualConfig)",
          "983:   })",
          "987: func TestProcessorOrder(t *testing.T) {",
          "989:  tt := []struct {",
          "990:   name               string",
          "991:   cfg                string",
          "992:   expectedProcessors map[string][]config.ComponentID",
          "993:  }{",
          "994:   {",
          "995:    name: \"no processors\",",
          "996:    cfg: `",
          "997: receivers:",
          "998:   jaeger:",
          "999:     protocols:",
          "1000:       grpc:",
          "1001: remote_write:",
          "1002:   - endpoint: example.com:12345",
          "1003:     headers:",
          "1004:       x-some-header: Some value!",
          "1005: `,",
          "1006:    expectedProcessors: map[string][]config.ComponentID{",
          "1007:     \"traces\": nil,",
          "1008:    },",
          "1009:   },",
          "1010:   {",
          "1011:    name: \"all processors w/o load balancing\",",
          "1012:    cfg: `",
          "1013: receivers:",
          "1014:   jaeger:",
          "1015:     protocols:",
          "1016:       grpc:",
          "1017: remote_write:",
          "1018:   - endpoint: example.com:12345",
          "1019:     headers:",
          "1020:       x-some-header: Some value!",
          "1021: attributes:",
          "1022:   actions:",
          "1023:   - key: montgomery",
          "1024:     value: forever",
          "1025:     action: update",
          "1026: spanmetrics:",
          "1027:   latency_histogram_buckets: [2ms, 6ms, 10ms, 100ms, 250ms]",
          "1028:   dimensions:",
          "1029:     - name: http.method",
          "1030:       default: GET",
          "1031:     - name: http.status_code",
          "1032:   metrics_instance: traces",
          "1033: automatic_logging:",
          "1034:   spans: true",
          "1035: batch:",
          "1036:   timeout: 5s",
          "1037:   send_batch_size: 100",
          "1038: tail_sampling:",
          "1039:   policies:",
          "1040:     - always_sample:",
          "1041:     - string_attribute:",
          "1042:         key: key",
          "1043:         values:",
          "1044:           - value1",
          "1045:           - value2",
          "1046: service_graphs:",
          "1047:   enabled: true",
          "1048: `,",
          "1049:    expectedProcessors: map[string][]config.ComponentID{",
          "1050:     \"traces\": {",
          "1051:      config.NewID(\"attributes\"),",
          "1052:      config.NewID(\"spanmetrics\"),",
          "1053:      config.NewID(\"service_graphs\"),",
          "1054:      config.NewID(\"tail_sampling\"),",
          "1055:      config.NewID(\"automatic_logging\"),",
          "1056:      config.NewID(\"batch\"),",
          "1057:     },",
          "1058:     \"metrics/spanmetrics\": nil,",
          "1059:    },",
          "1060:   },",
          "1061:   {",
          "1062:    name: \"all processors with load balancing\",",
          "1063:    cfg: `",
          "1064: receivers:",
          "1065:   jaeger:",
          "1066:     protocols:",
          "1067:       grpc:",
          "1068: remote_write:",
          "1069:   - endpoint: example.com:12345",
          "1070:     headers:",
          "1071:       x-some-header: Some value!",
          "1072: attributes:",
          "1073:   actions:",
          "1074:   - key: montgomery",
          "1075:     value: forever",
          "1076:     action: update",
          "1077: spanmetrics:",
          "1078:   latency_histogram_buckets: [2ms, 6ms, 10ms, 100ms, 250ms]",
          "1079:   dimensions:",
          "1080:     - name: http.method",
          "1081:       default: GET",
          "1082:     - name: http.status_code",
          "1083:   metrics_instance: traces",
          "1084: automatic_logging:",
          "1085:   spans: true",
          "1086: batch:",
          "1087:   timeout: 5s",
          "1088:   send_batch_size: 100",
          "1089: tail_sampling:",
          "1090:   policies:",
          "1091:     - always_sample:",
          "1092:     - string_attribute:",
          "1093:         key: key",
          "1094:         values:",
          "1095:           - value1",
          "1096:           - value2",
          "1097: load_balancing:",
          "1098:   exporter:",
          "1099:     tls:",
          "1100:       insecure: true",
          "1101:   resolver:",
          "1102:     dns:",
          "1103:       hostname: agent",
          "1104:       port: 4318",
          "1105: service_graphs:",
          "1106:   enabled: true",
          "1107: `,",
          "1108:    expectedProcessors: map[string][]config.ComponentID{",
          "1109:     \"traces/0\": {",
          "1110:      config.NewID(\"attributes\"),",
          "1111:      config.NewID(\"spanmetrics\"),",
          "1112:     },",
          "1113:     \"traces/1\": {",
          "1114:      config.NewID(\"service_graphs\"),",
          "1115:      config.NewID(\"tail_sampling\"),",
          "1116:      config.NewID(\"automatic_logging\"),",
          "1117:      config.NewID(\"batch\"),",
          "1118:     },",
          "1119:     \"metrics/spanmetrics\": nil,",
          "1120:    },",
          "1121:   },",
          "1122:   {",
          "1123:    name: \"load balancing without tail sampling\",",
          "1124:    cfg: `",
          "1125: receivers:",
          "1126:   jaeger:",
          "1127:     protocols:",
          "1128:       grpc:",
          "1129: remote_write:",
          "1130:   - endpoint: example.com:12345",
          "1131:     headers:",
          "1132:       x-some-header: Some value!",
          "1133: attributes:",
          "1134:   actions:",
          "1135:   - key: montgomery",
          "1136:     value: forever",
          "1137:     action: update",
          "1138: spanmetrics:",
          "1139:   latency_histogram_buckets: [2ms, 6ms, 10ms, 100ms, 250ms]",
          "1140:   dimensions:",
          "1141:     - name: http.method",
          "1142:       default: GET",
          "1143:     - name: http.status_code",
          "1144:   metrics_instance: traces",
          "1145: automatic_logging:",
          "1146:   spans: true",
          "1147: batch:",
          "1148:   timeout: 5s",
          "1149:   send_batch_size: 100",
          "1150: load_balancing:",
          "1151:   exporter:",
          "1152:     tls:",
          "1153:       insecure: true",
          "1154:   resolver:",
          "1155:     dns:",
          "1156:       hostname: agent",
          "1157:       port: 4318",
          "1158: `,",
          "1159:    expectedProcessors: map[string][]config.ComponentID{",
          "1160:     \"traces/0\": {",
          "1161:      config.NewID(\"attributes\"),",
          "1162:      config.NewID(\"spanmetrics\"),",
          "1163:     },",
          "1164:     \"traces/1\": {",
          "1165:      config.NewID(\"automatic_logging\"),",
          "1166:      config.NewID(\"batch\"),",
          "1167:     },",
          "1168:     \"metrics/spanmetrics\": nil,",
          "1169:    },",
          "1173:  for _, tc := range tt {",
          "1174:   t.Run(tc.name, func(t *testing.T) {",
          "1175:    var cfg InstanceConfig",
          "1176:    err := yaml.Unmarshal([]byte(tc.cfg), &cfg)",
          "1177:    require.NoError(t, err)",
          "1180:    actualConfig, err := cfg.otelConfig()",
          "1181:    require.NoError(t, err)",
          "1183:    require.Equal(t, len(tc.expectedProcessors), len(actualConfig.Pipelines))",
          "1184:    for k := range tc.expectedProcessors {",
          "1185:     assert.Equal(t, tc.expectedProcessors[k], actualConfig.Pipelines[k].Processors)",
          "1187:   })",
          "1189: }",
          "1191: func TestOrderProcessors(t *testing.T) {",
          "1192:  tests := []struct {",
          "1193:   processors     []string",
          "1194:   splitPipelines bool",
          "1195:   expected       [][]string",
          "1196:  }{",
          "1197:   {",
          "1198:    expected: [][]string{",
          "1199:     nil,",
          "1200:    },",
          "1201:   },",
          "1202:   {",
          "1203:    processors: []string{",
          "1204:     \"tail_sampling\",",
          "1205:    },",
          "1206:    expected: [][]string{",
          "1207:     {\"tail_sampling\"},",
          "1208:    },",
          "1209:   },",
          "1210:   {",
          "1211:    processors: []string{",
          "1212:     \"batch\",",
          "1213:     \"tail_sampling\",",
          "1214:     \"automatic_logging\",",
          "1215:    },",
          "1216:    expected: [][]string{",
          "1217:     {",
          "1218:      \"tail_sampling\",",
          "1219:      \"automatic_logging\",",
          "1220:      \"batch\",",
          "1223:   },",
          "1224:   {",
          "1225:    processors: []string{",
          "1226:     \"spanmetrics\",",
          "1227:     \"batch\",",
          "1228:     \"tail_sampling\",",
          "1229:     \"attributes\",",
          "1230:     \"automatic_logging\",",
          "1231:    },",
          "1232:    expected: [][]string{",
          "1233:     {",
          "1234:      \"attributes\",",
          "1235:      \"spanmetrics\",",
          "1236:      \"tail_sampling\",",
          "1237:      \"automatic_logging\",",
          "1238:      \"batch\",",
          "1239:     },",
          "1240:    },",
          "1241:   },",
          "1242:   {",
          "1243:    splitPipelines: true,",
          "1244:    expected: [][]string{",
          "1245:     nil,",
          "1246:     nil,",
          "1247:    },",
          "1248:   },",
          "1249:   {",
          "1250:    processors: []string{",
          "1251:     \"spanmetrics\",",
          "1252:     \"batch\",",
          "1253:     \"tail_sampling\",",
          "1254:     \"attributes\",",
          "1255:     \"automatic_logging\",",
          "1256:    },",
          "1257:    splitPipelines: true,",
          "1258:    expected: [][]string{",
          "1259:     {",
          "1260:      \"attributes\",",
          "1261:      \"spanmetrics\",",
          "1262:     },",
          "1263:     {",
          "1264:      \"tail_sampling\",",
          "1265:      \"automatic_logging\",",
          "1266:      \"batch\",",
          "1267:     },",
          "1268:    },",
          "1269:   },",
          "1270:   {",
          "1271:    processors: []string{",
          "1272:     \"batch\",",
          "1273:     \"tail_sampling\",",
          "1274:     \"automatic_logging\",",
          "1275:    },",
          "1276:    splitPipelines: true,",
          "1277:    expected: [][]string{",
          "1278:     {},",
          "1279:     {",
          "1280:      \"tail_sampling\",",
          "1281:      \"automatic_logging\",",
          "1282:      \"batch\",",
          "1283:     },",
          "1284:    },",
          "1285:   },",
          "1286:   {",
          "1287:    processors: []string{",
          "1288:     \"spanmetrics\",",
          "1289:     \"attributes\",",
          "1290:    },",
          "1291:    splitPipelines: true,",
          "1292:    expected: [][]string{",
          "1293:     {",
          "1294:      \"attributes\",",
          "1295:      \"spanmetrics\",",
          "1296:     },",
          "1297:     {},",
          "1298:    },",
          "1299:   },",
          "1302:  for _, tc := range tests {",
          "1303:   actual := orderProcessors(tc.processors, tc.splitPipelines)",
          "1304:   assert.Equal(t, tc.expected, actual)",
          "1308: func TestScrubbedReceivers(t *testing.T) {",
          "1309:  test := `",
          "1310: receivers:",
          "1311:   jaeger:",
          "1312:     protocols:",
          "1313:       grpc:`",
          "1314:  var cfg InstanceConfig",
          "1315:  err := yaml.Unmarshal([]byte(test), &cfg)",
          "1316:  assert.Nil(t, err)",
          "1317:  data, err := yaml.Marshal(cfg)",
          "1318:  assert.Nil(t, err)",
          "1319:  assert.True(t, strings.Contains(string(data), \"<secret>\"))",
          "1323: func sortPipelines(cfg *config.Config) {",
          "1324:  tracePipeline := cfg.Pipelines[string(config.TracesDataType)]",
          "1325:  if tracePipeline == nil {",
          "1326:   return",
          "1328:  var (",
          "1329:   exp  = tracePipeline.Exporters",
          "1330:   recv = tracePipeline.Receivers",
          "1331:  )",
          "1332:  sort.Slice(exp, func(i, j int) bool { return exp[i].String() > exp[j].String() })",
          "1333:  sort.Slice(recv, func(i, j int) bool { return recv[i].String() > recv[j].String() })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01512bb690fda9d1237e8a2647a8967b9463282b",
      "candidate_info": {
        "commit_hash": "01512bb690fda9d1237e8a2647a8967b9463282b",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/01512bb690fda9d1237e8a2647a8967b9463282b",
        "files": [
          "pkg/operator/defaults.go"
        ],
        "message": "Update defaults.go",
        "before_after_code_files": [
          "pkg/operator/defaults.go||pkg/operator/defaults.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/grafana/agent/pull/1153"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pkg/operator/defaults.go||pkg/operator/defaults.go": [
          "File: pkg/operator/defaults.go -> pkg/operator/defaults.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:   \"v0.18.4\",",
          "16:   \"v0.19.0\",",
          "17:   \"v0.20.0\",",
          "18:   \"v0.21.0\",",
          "19:   \"v0.21.1\",",
          "20:   \"v0.21.2\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:   \"v0.20.1\",",
          "",
          "---------------"
        ]
      }
    }
  ]
}