{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aaee8f587ebc44ba76b1f79e34b833726b40a862",
      "candidate_info": {
        "commit_hash": "aaee8f587ebc44ba76b1f79e34b833726b40a862",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/aaee8f587ebc44ba76b1f79e34b833726b40a862",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/StackInfo.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java",
          "ambari-server/src/main/java/org/apache/ambari/server/topology/Configuration.java",
          "ambari-server/src/test/java/org/apache/ambari/server/topology/validators/ClusterConfigTypeValidatorTest.java"
        ],
        "message": "AMBARI-25336 : Perf improvement with Collections usages over iterations (branch-2.7) (#3049)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java||ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java||ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/StackInfo.java||ambari-server/src/main/java/org/apache/ambari/server/state/StackInfo.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java||ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java||ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java",
          "ambari-server/src/main/java/org/apache/ambari/server/topology/Configuration.java||ambari-server/src/main/java/org/apache/ambari/server/topology/Configuration.java",
          "ambari-server/src/test/java/org/apache/ambari/server/topology/validators/ClusterConfigTypeValidatorTest.java||ambari-server/src/test/java/org/apache/ambari/server/topology/validators/ClusterConfigTypeValidatorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java||ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.util.ArrayList;",
          "21: import java.util.Collection;",
          "22: import java.util.Collections;",
          "24: import java.util.EnumSet;",
          "25: import java.util.HashMap;",
          "26: import java.util.HashSet;",
          "",
          "[Removed Lines]",
          "23: import java.util.Comparator;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "717:       return Collections.emptyList();",
          "718:     }",
          "722:     Map<Long, HostRoleCommand> cached = hostRoleCommandCache.getAllPresent(taskIds);",
          "727:     absent.removeAll(cached.keySet());",
          "729:     if (!absent.isEmpty()) {",
          "",
          "[Removed Lines]",
          "720:     List<HostRoleCommand> commands = new ArrayList<>();",
          "723:     commands.addAll(cached.values());",
          "725:     List<Long> absent = new ArrayList<>();",
          "726:     absent.addAll(taskIds);",
          "",
          "[Added Lines]",
          "720:     List<HostRoleCommand> commands = new ArrayList<>(cached.values());",
          "722:     List<Long> absent = new ArrayList<>(taskIds);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "744:         }",
          "745:       }",
          "746:     }",
          "753:     return commands;",
          "754:   }",
          "",
          "[Removed Lines]",
          "747:     Collections.sort(commands, new Comparator<HostRoleCommand>() {",
          "748:       @Override",
          "749:       public int compare(HostRoleCommand o1, HostRoleCommand o2) {",
          "750:         return (int) (o1.getTaskId()-o2.getTaskId());",
          "751:       }",
          "752:     });",
          "",
          "[Added Lines]",
          "743:     commands.sort((o1, o2) -> (int) (o1.getTaskId() - o2.getTaskId()));",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java||ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java -> ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "542:   public synchronized List<String> getHosts() { // TODO: Check whether method should be synchronized",
          "548:   }",
          "550:   synchronized float getSuccessFactor(Role r) {",
          "",
          "[Removed Lines]",
          "543:     List<String> hlist = new ArrayList<>();",
          "544:     for (String h : hostRoleCommands.keySet()) {",
          "545:       hlist.add(h);",
          "546:     }",
          "547:     return hlist;",
          "",
          "[Added Lines]",
          "543:     return new ArrayList<>(hostRoleCommands.keySet());",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/StackInfo.java||ambari-server/src/main/java/org/apache/ambari/server/state/StackInfo.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/StackInfo.java -> ambari-server/src/main/java/org/apache/ambari/server/state/StackInfo.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:     Collection<ExtensionInfo> extensions = getExtensions();",
          "224:     extensions.add(extension);",
          "225:     Collection<ServiceInfo> services = getServices();",
          "229:   }",
          "231:   public void removeExtension(ExtensionInfo extension) {",
          "",
          "[Removed Lines]",
          "226:     for (ServiceInfo service : extension.getServices()) {",
          "227:       services.add(service);",
          "228:     }",
          "",
          "[Added Lines]",
          "226:     services.addAll(extension.getServices());",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java||ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java -> ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "416:         if (component.getValue().isMasterComponent()) {",
          "417:           Map<String, ServiceComponentHost> componentHosts = component.getValue().getServiceComponentHosts();",
          "418:           if (null != componentHosts) {",
          "422:           }",
          "423:         }",
          "424:       }",
          "",
          "[Removed Lines]",
          "419:             for (String componentHost : componentHosts.keySet()) {",
          "420:               affectedHosts.add(componentHost);",
          "421:             }",
          "",
          "[Added Lines]",
          "419:             affectedHosts.addAll(componentHosts.keySet());",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1232:     try {",
          "1233:       List<Config> list = new ArrayList<>();",
          "1234:       for (Entry<String, ConcurrentMap<String, Config>> entry : allConfigs.entrySet()) {",
          "1238:       }",
          "1239:       return Collections.unmodifiableList(list);",
          "1240:     } finally {",
          "",
          "[Removed Lines]",
          "1235:         for (Config config : entry.getValue().values()) {",
          "1236:           list.add(config);",
          "1237:         }",
          "",
          "[Added Lines]",
          "1235:         list.addAll(entry.getValue().values());",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java||ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java -> ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "413:   }",
          "415:   private List<Grouping> getDowngradeGroupsForNonrolling() {",
          "421:   }",
          "",
          "[Removed Lines]",
          "416:     List<Grouping> list = new ArrayList<>();",
          "417:     for (Grouping g : groups) {",
          "418:       list.add(g);",
          "419:     }",
          "420:     return list;",
          "",
          "[Added Lines]",
          "416:     return new ArrayList<>(groups);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/topology/Configuration.java||ambari-server/src/main/java/org/apache/ambari/server/topology/Configuration.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/topology/Configuration.java -> ambari-server/src/main/java/org/apache/ambari/server/topology/Configuration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "354:   public Collection<String> getAllConfigTypes() {",
          "355:     Collection<String> allTypes = new HashSet<>();",
          "364:     return allTypes;",
          "365:   }",
          "",
          "[Removed Lines]",
          "356:     for (String type : getFullProperties().keySet()) {",
          "357:       allTypes.add(type);",
          "358:     }",
          "360:     for (String type : getFullAttributes().keySet()) {",
          "361:       allTypes.add(type);",
          "362:     }",
          "",
          "[Added Lines]",
          "356:     allTypes.addAll(getFullProperties().keySet());",
          "357:     allTypes.addAll(getFullAttributes().keySet());",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/topology/validators/ClusterConfigTypeValidatorTest.java||ambari-server/src/test/java/org/apache/ambari/server/topology/validators/ClusterConfigTypeValidatorTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/topology/validators/ClusterConfigTypeValidatorTest.java -> ambari-server/src/test/java/org/apache/ambari/server/topology/validators/ClusterConfigTypeValidatorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:     EasyMock.expect(blueprintMock.getServices()).andReturn(new HashSet<>(Arrays.asList(\"YARN\", \"HDFS\")));",
          "102:     replayAll();",
          "",
          "[Removed Lines]",
          "99:     EasyMock.expect(stackMock.getConfigurationTypes(\"HDFS\")).andReturn(Arrays.asList(\"core-site\"));",
          "100:     EasyMock.expect(stackMock.getConfigurationTypes(\"YARN\")).andReturn(Arrays.asList(\"yarn-site\"));",
          "",
          "[Added Lines]",
          "99:     EasyMock.expect(stackMock.getConfigurationTypes(\"HDFS\")).andReturn(",
          "100:             Collections.singletonList(\"core-site\"));",
          "101:     EasyMock.expect(stackMock.getConfigurationTypes(\"YARN\")).andReturn(",
          "102:             Collections.singletonList(\"yarn-site\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:     EasyMock.expect(clusterConfigurationMock.getAllConfigTypes()).andReturn(clusterRequestConfigTypes).anyTimes();",
          "120:     EasyMock.expect(blueprintMock.getServices()).andReturn(new HashSet<>(Arrays.asList(\"YARN\", \"HDFS\")));",
          "124:     replayAll();",
          "",
          "[Removed Lines]",
          "117:     clusterRequestConfigTypes = new HashSet<>(Arrays.asList(\"oozie-site\"));",
          "121:     EasyMock.expect(stackMock.getConfigurationTypes(\"HDFS\")).andReturn(Arrays.asList(\"core-site\"));",
          "122:     EasyMock.expect(stackMock.getConfigurationTypes(\"YARN\")).andReturn(Arrays.asList(\"yarn-site\"));",
          "",
          "[Added Lines]",
          "119:     clusterRequestConfigTypes = new HashSet<>(Collections.singletonList(\"oozie-site\"));",
          "123:     EasyMock.expect(stackMock.getConfigurationTypes(\"HDFS\")).andReturn(",
          "124:             Collections.singletonList(\"core-site\"));",
          "125:     EasyMock.expect(stackMock.getConfigurationTypes(\"YARN\")).andReturn(",
          "126:             Collections.singletonList(\"yarn-site\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141:     EasyMock.expect(blueprintMock.getServices()).andReturn(new HashSet<>(Arrays.asList(\"YARN\", \"HDFS\")));",
          "146:     replayAll();",
          "",
          "[Removed Lines]",
          "143:     EasyMock.expect(stackMock.getConfigurationTypes(\"HDFS\")).andReturn(Arrays.asList(\"core-site\"));",
          "144:     EasyMock.expect(stackMock.getConfigurationTypes(\"YARN\")).andReturn(Arrays.asList(\"yarn-site\"));",
          "",
          "[Added Lines]",
          "147:     EasyMock.expect(stackMock.getConfigurationTypes(\"HDFS\")).andReturn(",
          "148:             Collections.singletonList(\"core-site\"));",
          "149:     EasyMock.expect(stackMock.getConfigurationTypes(\"YARN\")).andReturn(",
          "150:             Collections.singletonList(\"yarn-site\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f87c68a5c129c941b73ad14d280e286cb531ef6f",
      "candidate_info": {
        "commit_hash": "f87c68a5c129c941b73ad14d280e286cb531ef6f",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/f87c68a5c129c941b73ad14d280e286cb531ef6f",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/api/AmbariErrorHandler.java",
          "ambari-web/app/router.js",
          "ambari-web/test/router_test.js"
        ],
        "message": "[AMBARI-24536] Ambari SPNEGO breaks SSO redirect",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/api/AmbariErrorHandler.java||ambari-server/src/main/java/org/apache/ambari/server/api/AmbariErrorHandler.java",
          "ambari-web/app/router.js||ambari-web/app/router.js",
          "ambari-web/test/router_test.js||ambari-web/test/router_test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/api/AmbariErrorHandler.java||ambari-server/src/main/java/org/apache/ambari/server/api/AmbariErrorHandler.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/api/AmbariErrorHandler.java -> ambari-server/src/main/java/org/apache/ambari/server/api/AmbariErrorHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     }",
          "74:     errorMap.put(\"message\", message);",
          "78:       JwtAuthenticationProperties jwtProperties = jwtAuthenticationPropertiesProvider.getProperties();",
          "79:       if ((jwtProperties != null) && jwtProperties.isEnabledForAmbari()) {",
          "",
          "[Removed Lines]",
          "76:     if (code == HttpServletResponse.SC_FORBIDDEN) {",
          "",
          "[Added Lines]",
          "76:     if ((code == HttpServletResponse.SC_FORBIDDEN) || (code == HttpServletResponse.SC_UNAUTHORIZED)) {",
          "",
          "---------------"
        ],
        "ambari-web/app/router.js||ambari-web/app/router.js": [
          "File: ambari-web/app/router.js -> ambari-web/app/router.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "344:   onAuthenticationError: function (data) {",
          "346:       try {",
          "347:         var responseJson = JSON.parse(data.responseText);",
          "348:         if (responseJson.jwtProviderUrl && this.get('location.lastSetURL') !== this.get('localUserAuthUrl')) {",
          "",
          "[Removed Lines]",
          "345:     if (data.status === 403) {",
          "",
          "[Added Lines]",
          "345:     if ((data.status === 403) || (data.status === 401)) {",
          "",
          "---------------"
        ],
        "ambari-web/test/router_test.js||ambari-web/test/router_test.js": [
          "File: ambari-web/test/router_test.js -> ambari-web/test/router_test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "462:         },",
          "463:         redirectCalled: false,",
          "464:         m: 'jwtProviderUrl is present, current location is local login url, no redirect'",
          "465:       }",
          "466:     ].forEach(function (test) {",
          "467:       describe(test.m, function () {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "465:       },",
          "466:       {",
          "467:         lastSetURL: '/main/dashboard',",
          "468:         isResolved: false,",
          "469:         responseData: {",
          "470:           responseText: JSON.stringify({jwtProviderUrl: 'http://some.com?originalUrl='}),",
          "471:           status: 401",
          "472:         },",
          "473:         redirectCalled: true,",
          "474:         m: 'jwtProviderUrl is present, current location not local login url, redirect according to jwtProviderUrl value'",
          "475:       },",
          "476:       {",
          "477:         lastSetURL: '/login/local',",
          "478:         isResolved: false,",
          "479:         responseData: {",
          "480:           responseText: JSON.stringify({jwtProviderUrl: 'http://some.com?originalUrl='}),",
          "481:           status: 401",
          "482:         },",
          "483:         redirectCalled: false,",
          "484:         m: 'jwtProviderUrl is present, current location is local login url, no redirect'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc2fd78f175d6d85b84be259e87ce3a00513f38d",
      "candidate_info": {
        "commit_hash": "bc2fd78f175d6d85b84be259e87ce3a00513f38d",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/bc2fd78f175d6d85b84be259e87ce3a00513f38d",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLRedirectProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java"
        ],
        "message": "AMBARI-25445. VDF registration fails with SunCertPathBuilderException (#3158)\n\n* AMBARI-25445. VDF registration fails with SunCertPathBuilderException: unable to find valid certification path to requested target' on HTTPS cluster  (aonishuk)\n\n* AMBARI-25445. VDF registration fails with SunCertPathBuilderException: unable to find valid certification path to requested target' on HTTPS cluster  (aonishuk)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLRedirectProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLRedirectProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "4466:   private void verifyRepository(RepositoryRequest request) throws AmbariException {",
          "4469:     String repoName = request.getRepoName();",
          "4470:     if (StringUtils.isEmpty(repoName)) {",
          "",
          "[Removed Lines]",
          "4467:     URLRedirectProvider usp = new URLRedirectProvider(REPO_URL_CONNECT_TIMEOUT, REPO_URL_READ_TIMEOUT);",
          "",
          "[Added Lines]",
          "4467:     URLRedirectProvider usp = new URLRedirectProvider(REPO_URL_CONNECT_TIMEOUT, REPO_URL_READ_TIMEOUT, true);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLRedirectProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLRedirectProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLRedirectProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLRedirectProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.io.IOException;",
          "22: import java.io.InputStream;",
          "23: import java.nio.charset.StandardCharsets;",
          "25: import org.apache.ambari.server.utils.URLCredentialsHider;",
          "26: import org.apache.commons.io.IOUtils;",
          "27: import org.apache.http.HttpEntity;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.security.KeyManagementException;",
          "25: import java.security.KeyStoreException;",
          "26: import java.security.NoSuchAlgorithmException;",
          "28: import javax.net.ssl.SSLContext;",
          "30: import org.apache.ambari.server.AmbariException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: import org.apache.http.client.config.RequestConfig;",
          "30: import org.apache.http.client.methods.CloseableHttpResponse;",
          "31: import org.apache.http.client.methods.HttpGet;",
          "32: import org.apache.http.impl.client.CloseableHttpClient;",
          "33: import org.apache.http.impl.client.HttpClientBuilder;",
          "34: import org.slf4j.Logger;",
          "35: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import org.apache.http.config.RegistryBuilder;",
          "39: import org.apache.http.conn.socket.ConnectionSocketFactory;",
          "40: import org.apache.http.conn.socket.PlainConnectionSocketFactory;",
          "41: import org.apache.http.conn.ssl.NoopHostnameVerifier;",
          "42: import org.apache.http.conn.ssl.SSLConnectionSocketFactory;",
          "45: import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;",
          "46: import org.apache.http.ssl.SSLContextBuilder;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43:   private final int connTimeout;",
          "44:   private final int readTimeout;",
          "47:     this.connTimeout = connectionTimeout;",
          "48:     this.readTimeout = readTimeout;",
          "49:   }",
          "51:   public RequestResult executeGet(String spec) throws IOException {",
          "53:       HttpGet httpGet = new HttpGet(spec);",
          "55:       RequestConfig requestConfig = RequestConfig.custom()",
          "",
          "[Removed Lines]",
          "46:   public URLRedirectProvider(int connectionTimeout, int readTimeout) {",
          "52:     try (CloseableHttpClient httpClient = HttpClientBuilder.create().build()) {",
          "",
          "[Added Lines]",
          "58:   private final boolean skipSslCertificateCheck;",
          "60:   public URLRedirectProvider(int connectionTimeout, int readTimeout, boolean skipSslCertificateCheck) {",
          "63:     this.skipSslCertificateCheck = skipSslCertificateCheck;",
          "67:     try (CloseableHttpClient httpClient = buildHttpClient()) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74:     }",
          "75:   }",
          "77:   public static class RequestResult {",
          "78:     private final String content;",
          "79:     private final int code;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:   private CloseableHttpClient buildHttpClient() throws AmbariException {",
          "93:     HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();",
          "94:     if (skipSslCertificateCheck) {",
          "95:       final SSLContext sslContext;",
          "96:       try {",
          "97:         sslContext = new SSLContextBuilder()",
          "98:           .loadTrustMaterial(null, (x509CertChain, authType) -> true)",
          "99:           .build();",
          "100:       } catch (NoSuchAlgorithmException | KeyManagementException | KeyStoreException e) {",
          "101:         throw new AmbariException(\"Cannot build null truststore.\", e);",
          "102:       }",
          "104:       httpClientBuilder.setSSLContext(sslContext)",
          "105:       .setConnectionManager(",
          "106:         new PoolingHttpClientConnectionManager(",
          "107:           RegistryBuilder.<ConnectionSocketFactory>create()",
          "108:             .register(\"http\", PlainConnectionSocketFactory.INSTANCE)",
          "109:             .register(\"https\", new SSLConnectionSocketFactory(sslContext,",
          "110:                                                               NoopHostnameVerifier.INSTANCE))",
          "111:             .build()",
          "112:         ));",
          "113:     }",
          "114:     return httpClientBuilder.build();",
          "115:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "576:         InputStream stream = uri.toURL().openStream();",
          "577:         holder.xmlString = IOUtils.toString(stream, \"UTF-8\");",
          "578:       } else {",
          "580:         URLRedirectProvider.RequestResult requestResult = provider.executeGet(definitionUrl);",
          "582:         if (requestResult.getCode() != HttpStatus.SC_OK) {",
          "",
          "[Removed Lines]",
          "579:         URLRedirectProvider provider = new URLRedirectProvider(connectTimeout, readTimeout);",
          "",
          "[Added Lines]",
          "579:         URLRedirectProvider provider = new URLRedirectProvider(connectTimeout, readTimeout, true);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a66e039fa8e2ec5d3b4398becd02918a1c572b4",
      "candidate_info": {
        "commit_hash": "6a66e039fa8e2ec5d3b4398becd02918a1c572b4",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/6a66e039fa8e2ec5d3b4398becd02918a1c572b4",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java"
        ],
        "message": "[AMBARI-24413] - Unable to Revert a Patch When There Are Multiple Patches (#1983) (#1984)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java||ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java||ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java -> ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "359:       m_type = calculateUpgradeType(upgradeRequestMap, revertUpgrade);",
          "363:       Map<String, Service> clusterServices = cluster.getServices();",
          "364:       for (UpgradeHistoryEntity history : revertUpgrade.getHistory()) {",
          "365:         String serviceName = history.getServiceName();",
          "366:         String componentName = history.getComponentName();",
          "371:         if (!clusterServices.containsKey(serviceName)) {",
          "372:           LOG.warn(\"{}/{} will not be reverted since it is no longer installed in the cluster\",",
          "",
          "[Removed Lines]",
          "362:       Set<RepositoryVersionEntity> priors = new HashSet<>();",
          "368:         priors.add(history.getFromReposistoryVersion());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "380:         m_targetRepositoryMap.put(serviceName, history.getFromReposistoryVersion());",
          "381:       }",
          "391:       m_repositoryVersion = revertUpgrade.getRepositoryVersion();",
          "",
          "[Removed Lines]",
          "383:       if (priors.size() != 1) {",
          "384:         String message = String.format(\"Upgrade from %s could not be reverted as there is no single \"",
          "385:             + \" repository across services.\", revertUpgrade.getRepositoryVersion().getVersion());",
          "387:         throw new AmbariException(message);",
          "388:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41a9c6fa1771327062aa6425209e6ee863f18730",
      "candidate_info": {
        "commit_hash": "41a9c6fa1771327062aa6425209e6ee863f18730",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/41a9c6fa1771327062aa6425209e6ee863f18730",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java",
          "ambari-server/src/main/resources/common-services/KERBEROS/1.10.3-10/configuration/kerberos-env.xml",
          "ambari-server/src/main/resources/common-services/KERBEROS/1.10.3-30/configuration/kerberos-env.xml"
        ],
        "message": "AMBARI-25295. Ambari Server Error on submitting EU (dlysnichenko) (#3001)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.serveraction.kerberos;",
          "21: import java.util.Map;",
          "22: import java.util.Set;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import java.util.Arrays;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254:   }",
          "256:   @Override",
          "259:         executableKinit,",
          "260:         \"-c\",",
          "261:         credentialsCache,",
          "262:         credentials.getPrincipal()",
          "263:     };",
          "264:   }",
          "266:   @Override",
          "",
          "[Removed Lines]",
          "257:   protected String[] getKinitCommand(String executableKinit, PrincipalKeyCredential credentials, String credentialsCache, Map<String, String> kerberosConfiguration) {",
          "258:     return new String[]{",
          "",
          "[Added Lines]",
          "258:   protected String[] getKinitCommand(String executableKinit, PrincipalKeyCredential credentials, String credentialsCache, Map<String, String> kerberosConfiguration) throws KerberosOperationException {",
          "259:     String [] command = new String[]{",
          "265:     if (Arrays.asList(command).contains(null)){",
          "266:       throw new KerberosOperationException(\"Got a null value, can not create 'kinit' command\");",
          "267:     }",
          "268:     return command;",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.serveraction.kerberos;",
          "21: import java.util.ArrayList;",
          "22: import java.util.HashMap;",
          "23: import java.util.List;",
          "24: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.Arrays;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "342:   protected String[] getKinitCommand(String executableKinit, PrincipalKeyCredential credentials, String credentialsCache, Map<String, String> kerberosConfiguration) throws KerberosOperationException {",
          "344:     try {",
          "347:           executableKinit,",
          "348:           \"-c\",",
          "349:           credentialsCache,",
          "",
          "[Removed Lines]",
          "345:       final String kadminPrincipalName = variableReplacementHelper.replaceVariables(kerberosConfiguration.get(KERBEROS_ENV_KADMIN_PRINCIPAL_NAME), buildReplacementsMap(kerberosConfiguration));",
          "346:       return new String[]{",
          "",
          "[Added Lines]",
          "346:       String kadminPrincipalName = variableReplacementHelper.replaceVariables(kerberosConfiguration.get(KERBEROS_ENV_KADMIN_PRINCIPAL_NAME), buildReplacementsMap(kerberosConfiguration));",
          "347:       if (kadminPrincipalName == null) {",
          "348:         kadminPrincipalName = String.format(\"kadmin/%s\", getAdminServerHost(false));",
          "349:       }",
          "350:       String [] command = new String[]{",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "351:           kadminPrincipalName,",
          "352:           credentials.getPrincipal()",
          "353:       };",
          "354:     } catch (AmbariException e) {",
          "355:       throw new KerberosOperationException(\"Error while getting 'kinit' command\", e);",
          "356:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358:       if (Arrays.asList(command).contains(null)){",
          "359:         throw new KerberosOperationException(\"Got a null value, can not create 'kinit' command\");",
          "360:       }",
          "361:       return command;",
          "",
          "---------------"
        ]
      }
    }
  ]
}