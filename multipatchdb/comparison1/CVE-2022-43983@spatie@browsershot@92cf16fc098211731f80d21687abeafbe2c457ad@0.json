{
  "cve_id": "CVE-2022-43983",
  "cve_desc": "Browsershot version 3.57.2 allows an external attacker to remotely obtain arbitrary local files. This is possible because the application does not validate that the HTML content passed to the Browsershot::html method does not contain URL's that use the file:// protocol.",
  "repo": "spatie/browsershot",
  "patch_hash": "92cf16fc098211731f80d21687abeafbe2c457ad",
  "patch_info": {
    "commit_hash": "92cf16fc098211731f80d21687abeafbe2c457ad",
    "repo": "spatie/browsershot",
    "commit_url": "https://github.com/spatie/browsershot/commit/92cf16fc098211731f80d21687abeafbe2c457ad",
    "files": [
      "src/Browsershot.php",
      "src/Exceptions/FileUrlNotAllowed.php",
      "src/Helpers.php",
      "tests/BrowsershotTest.php",
      "tests/HelpersTest.php"
    ],
    "message": "do not allow file urls",
    "before_after_code_files": [
      "src/Browsershot.php||src/Browsershot.php",
      "src/Exceptions/FileUrlNotAllowed.php||src/Exceptions/FileUrlNotAllowed.php",
      "src/Helpers.php||src/Helpers.php",
      "tests/BrowsershotTest.php||tests/BrowsershotTest.php",
      "tests/HelpersTest.php||tests/HelpersTest.php"
    ]
  },
  "patch_diff": {
    "src/Browsershot.php||src/Browsershot.php": [
      "File: src/Browsershot.php -> src/Browsershot.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: use Spatie\\Browsershot\\Exceptions\\CouldNotTakeBrowsershot;",
      "6: use Spatie\\Browsershot\\Exceptions\\ElementNotFound;",
      "7: use Spatie\\Browsershot\\Exceptions\\UnsuccessfulResponse;",
      "8: use Spatie\\Image\\Image;",
      "9: use Spatie\\Image\\Manipulations;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: use Spatie\\Browsershot\\Exceptions\\FileUrlNotAllowed;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "236:     public function setUrl(string $url)",
      "237:     {",
      "238:         $this->url = $url;",
      "239:         $this->html = '';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "239:         if (Helpers::stringStartsWith(strtolower($url), 'file://')) {",
      "240:             throw FileUrlNotAllowed::make();",
      "241:         }",
      "",
      "---------------"
    ],
    "src/Exceptions/FileUrlNotAllowed.php||src/Exceptions/FileUrlNotAllowed.php": [
      "File: src/Exceptions/FileUrlNotAllowed.php -> src/Exceptions/FileUrlNotAllowed.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "3: namespace Spatie\\Browsershot\\Exceptions;",
      "5: use Exception;",
      "7: class FileUrlNotAllowed extends Exception",
      "8: {",
      "9:     public static function make()",
      "10:     {",
      "11:         return new static(\"An URL is not allow to start with file://\");",
      "12:     }",
      "13: }",
      "",
      "---------------"
    ],
    "src/Helpers.php||src/Helpers.php": [
      "File: src/Helpers.php -> src/Helpers.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "3: namespace Spatie\\Browsershot;",
      "5: class Helpers",
      "6: {",
      "7:     public static function stringStartsWith($haystack, $needle): bool",
      "8:     {",
      "9:         $length = strlen($needle);",
      "11:         return substr( $haystack, 0, $length ) === $needle;",
      "12:     }",
      "13: }",
      "",
      "---------------"
    ],
    "tests/BrowsershotTest.php||tests/BrowsershotTest.php": [
      "File: tests/BrowsershotTest.php -> tests/BrowsershotTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: use Spatie\\Browsershot\\Browsershot;",
      "4: use Spatie\\Browsershot\\Exceptions\\CouldNotTakeBrowsershot;",
      "5: use Spatie\\Browsershot\\Exceptions\\ElementNotFound;",
      "6: use Spatie\\Browsershot\\Exceptions\\UnsuccessfulResponse;",
      "7: use Spatie\\Image\\Manipulations;",
      "8: use Symfony\\Component\\Process\\Exception\\ProcessFailedException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: use Spatie\\Browsershot\\Exceptions\\FileUrlNotAllowed;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "38:     );",
      "39: });",
      "41: it('can take a screenshot', function () {",
      "42:     $targetPath = __DIR__.'/temp/testScreenshot.png';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "42: it('will not allow a file url', function () {",
      "43:     Browsershot::url('file://test');",
      "44: })->throws(FileUrlNotAllowed::class);",
      "",
      "---------------"
    ],
    "tests/HelpersTest.php||tests/HelpersTest.php": [
      "File: tests/HelpersTest.php -> tests/HelpersTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "3: use Spatie\\Browsershot\\Helpers;",
      "5: it('can determine if a string starts with a substring', function(string $haystack, $needle, $expectedResult) {",
      "6:     expect(Helpers::stringStartsWith($haystack, $needle))->toBe($expectedResult);",
      "7: })->with([",
      "8:     ['https://spatie.be', 'https://', true],",
      "9:     ['http://spatie.be', 'https://', false],",
      "10:     ['file://hey', 'file://', true],",
      "11:     ['https://spatie.be', 'file://', false],",
      "12: ]);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a956e85cf1cabaf0bca02f711ed335975e15dc0b",
      "candidate_info": {
        "commit_hash": "a956e85cf1cabaf0bca02f711ed335975e15dc0b",
        "repo": "spatie/browsershot",
        "commit_url": "https://github.com/spatie/browsershot/commit/a956e85cf1cabaf0bca02f711ed335975e15dc0b",
        "files": [
          "src/Helpers.php",
          "tests/HelpersTest.php"
        ],
        "message": "Fix styling",
        "before_after_code_files": [
          "src/Helpers.php||src/Helpers.php",
          "tests/HelpersTest.php||tests/HelpersTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Helpers.php||src/Helpers.php",
            "tests/HelpersTest.php||tests/HelpersTest.php"
          ],
          "candidate": [
            "src/Helpers.php||src/Helpers.php",
            "tests/HelpersTest.php||tests/HelpersTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Helpers.php||src/Helpers.php": [
          "File: src/Helpers.php -> src/Helpers.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:     {",
          "9:         $length = strlen($needle);",
          "12:     }",
          "13: }",
          "",
          "[Removed Lines]",
          "11:         return substr( $haystack, 0, $length ) === $needle;",
          "",
          "[Added Lines]",
          "11:         return substr($haystack, 0, $length) === $needle;",
          "",
          "---------------"
        ],
        "tests/HelpersTest.php||tests/HelpersTest.php": [
          "File: tests/HelpersTest.php -> tests/HelpersTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use Spatie\\Browsershot\\Helpers;",
          "6:     expect(Helpers::stringStartsWith($haystack, $needle))->toBe($expectedResult);",
          "7: })->with([",
          "8:     ['https://spatie.be', 'https://', true],",
          "",
          "[Removed Lines]",
          "5: it('can determine if a string starts with a substring', function(string $haystack, $needle, $expectedResult) {",
          "",
          "[Added Lines]",
          "5: it('can determine if a string starts with a substring', function (string $haystack, $needle, $expectedResult) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb106db5ff2b29e81dc8a61ffe0643991029c6f5",
      "candidate_info": {
        "commit_hash": "cb106db5ff2b29e81dc8a61ffe0643991029c6f5",
        "repo": "spatie/browsershot",
        "commit_url": "https://github.com/spatie/browsershot/commit/cb106db5ff2b29e81dc8a61ffe0643991029c6f5",
        "files": [
          "src/Browsershot.php",
          "src/Exceptions/HtmlIsNotAllowedToContainFile.php",
          "src/Helpers.php",
          "tests/BrowsershotTest.php",
          "tests/HelpersTest.php"
        ],
        "message": "wip",
        "before_after_code_files": [
          "src/Browsershot.php||src/Browsershot.php",
          "src/Exceptions/HtmlIsNotAllowedToContainFile.php||src/Exceptions/HtmlIsNotAllowedToContainFile.php",
          "src/Helpers.php||src/Helpers.php",
          "tests/BrowsershotTest.php||tests/BrowsershotTest.php",
          "tests/HelpersTest.php||tests/HelpersTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Browsershot.php||src/Browsershot.php",
            "src/Helpers.php||src/Helpers.php",
            "tests/BrowsershotTest.php||tests/BrowsershotTest.php",
            "tests/HelpersTest.php||tests/HelpersTest.php"
          ],
          "candidate": [
            "src/Browsershot.php||src/Browsershot.php",
            "src/Helpers.php||src/Helpers.php",
            "tests/BrowsershotTest.php||tests/BrowsershotTest.php",
            "tests/HelpersTest.php||tests/HelpersTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Browsershot.php||src/Browsershot.php": [
          "File: src/Browsershot.php -> src/Browsershot.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: use Spatie\\Browsershot\\Exceptions\\CouldNotTakeBrowsershot;",
          "6: use Spatie\\Browsershot\\Exceptions\\ElementNotFound;",
          "7: use Spatie\\Browsershot\\Exceptions\\FileUrlNotAllowed;",
          "8: use Spatie\\Browsershot\\Exceptions\\UnsuccessfulResponse;",
          "9: use Spatie\\Image\\Image;",
          "10: use Spatie\\Image\\Manipulations;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: use Spatie\\Browsershot\\Exceptions\\HtmlIsNotAllowedToContainFile;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "256:     public function setHtml(string $html)",
          "257:     {",
          "258:         $this->html = $html;",
          "259:         $this->url = '';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "259:         if (Helpers::stringContains(strtolower($html), 'file://')) {",
          "260:             throw HtmlIsNotAllowedToContainFile::make();",
          "261:         }",
          "",
          "---------------"
        ],
        "src/Exceptions/HtmlIsNotAllowedToContainFile.php||src/Exceptions/HtmlIsNotAllowedToContainFile.php": [
          "File: src/Exceptions/HtmlIsNotAllowedToContainFile.php -> src/Exceptions/HtmlIsNotAllowedToContainFile.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace Spatie\\Browsershot\\Exceptions;",
          "5: use Exception;",
          "7: class HtmlIsNotAllowedToContainFile extends Exception",
          "8: {",
          "9:     public static function make()",
          "10:     {",
          "11:         return new static(\"The specified HTML contains `file://`. This is not allowed.\");",
          "12:     }",
          "13: }",
          "",
          "---------------"
        ],
        "src/Helpers.php||src/Helpers.php": [
          "File: src/Helpers.php -> src/Helpers.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:     {",
          "9:         $length = strlen($needle);",
          "12:     }",
          "13: }",
          "",
          "[Removed Lines]",
          "11:         return substr( $haystack, 0, $length ) === $needle;",
          "",
          "[Added Lines]",
          "11:         return substr($haystack, 0, $length) === $needle;",
          "12:     }",
          "14:     public static function stringContains($haystack, $needle): bool",
          "15:     {",
          "16:         return strpos($haystack, $needle) !== false;",
          "",
          "---------------"
        ],
        "tests/BrowsershotTest.php||tests/BrowsershotTest.php": [
          "File: tests/BrowsershotTest.php -> tests/BrowsershotTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: use Spatie\\Browsershot\\Exceptions\\CouldNotTakeBrowsershot;",
          "5: use Spatie\\Browsershot\\Exceptions\\ElementNotFound;",
          "6: use Spatie\\Browsershot\\Exceptions\\FileUrlNotAllowed;",
          "7: use Spatie\\Browsershot\\Exceptions\\UnsuccessfulResponse;",
          "8: use Spatie\\Image\\Manipulations;",
          "9: use Symfony\\Component\\Process\\Exception\\ProcessFailedException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: use Spatie\\Browsershot\\Exceptions\\HtmlIsNotAllowedToContainFile;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:     expect($targetPath)->toBeFile();",
          "79: });",
          "81: it('can take a high density screenshot', function () {",
          "82:     $targetPath = __DIR__.'/temp/testScreenshot.png';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: it('will not allow html to contain file://', function () {",
          "83:     Browsershot::html('<h1><img src=\"file://\" /></h1>');",
          "84: })->throws(HtmlIsNotAllowedToContainFile::class);",
          "",
          "---------------"
        ],
        "tests/HelpersTest.php||tests/HelpersTest.php": [
          "File: tests/HelpersTest.php -> tests/HelpersTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:     ['file://hey', 'file://', true],",
          "11:     ['https://spatie.be', 'file://', false],",
          "12: ]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: it('can determine if a string starts contains a substring', function(string $haystack, $needle, $expectedResult) {",
          "15:     expect(Helpers::stringContains($haystack, $needle))->toBe($expectedResult);",
          "16: })->with([",
          "17:     ['heyheyfile://', 'file://', true],",
          "18:     ['http://spatie.be', 'file://', false],",
          "19:     ['file://hey', 'file://', true],",
          "20: ]);",
          "",
          "---------------"
        ]
      }
    }
  ]
}