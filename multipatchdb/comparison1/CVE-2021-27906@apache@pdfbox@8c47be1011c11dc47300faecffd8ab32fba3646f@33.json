{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "357ff3bfa52a485a1b10c9f5757498bfcb6d9fc0",
      "candidate_info": {
        "commit_hash": "357ff3bfa52a485a1b10c9f5757498bfcb6d9fc0",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/357ff3bfa52a485a1b10c9f5757498bfcb6d9fc0",
        "files": [
          "xmpbox/src/main/java/org/apache/xmpbox/schema/XMPSchemaFactory.java",
          "xmpbox/src/main/java/org/apache/xmpbox/type/TypeMapping.java"
        ],
        "message": "PDFBOX-4892: fix typo, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887226 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "xmpbox/src/main/java/org/apache/xmpbox/schema/XMPSchemaFactory.java||xmpbox/src/main/java/org/apache/xmpbox/schema/XMPSchemaFactory.java",
          "xmpbox/src/main/java/org/apache/xmpbox/type/TypeMapping.java||xmpbox/src/main/java/org/apache/xmpbox/type/TypeMapping.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "xmpbox/src/main/java/org/apache/xmpbox/schema/XMPSchemaFactory.java||xmpbox/src/main/java/org/apache/xmpbox/schema/XMPSchemaFactory.java": [
          "File: xmpbox/src/main/java/org/apache/xmpbox/schema/XMPSchemaFactory.java -> xmpbox/src/main/java/org/apache/xmpbox/schema/XMPSchemaFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:         }",
          "125:         catch (Exception e)",
          "126:         {",
          "128:         }",
          "129:     }",
          "",
          "[Removed Lines]",
          "127:             throw new XmpSchemaException(\"Cannot instanciate specified object schema\", e);",
          "",
          "[Added Lines]",
          "127:             throw new XmpSchemaException(\"Cannot instantiate specified object schema\", e);",
          "",
          "---------------"
        ],
        "xmpbox/src/main/java/org/apache/xmpbox/type/TypeMapping.java||xmpbox/src/main/java/org/apache/xmpbox/type/TypeMapping.java": [
          "File: xmpbox/src/main/java/org/apache/xmpbox/type/TypeMapping.java -> xmpbox/src/main/java/org/apache/xmpbox/type/TypeMapping.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:         }",
          "142:         catch (InvocationTargetException e)",
          "143:         {",
          "145:         }",
          "146:         catch (IllegalArgumentException e)",
          "147:         {",
          "149:         }",
          "150:         catch (InstantiationException e)",
          "151:         {",
          "153:         }",
          "154:         catch (IllegalAccessException e)",
          "155:         {",
          "157:         }",
          "158:         catch (SecurityException e)",
          "159:         {",
          "161:         }",
          "162:         catch (NoSuchMethodException e)",
          "163:         {",
          "165:         }",
          "166:     }",
          "",
          "[Removed Lines]",
          "144:             throw new BadFieldValueException(\"Failed to instanciate structured type : \" + type, e);",
          "148:             throw new BadFieldValueException(\"Failed to instanciate structured type : \" + type, e);",
          "152:             throw new BadFieldValueException(\"Failed to instanciate structured type : \" + type, e);",
          "156:             throw new BadFieldValueException(\"Failed to instanciate structured type : \" + type, e);",
          "160:             throw new BadFieldValueException(\"Failed to instanciate structured type : \" + type, e);",
          "164:             throw new BadFieldValueException(\"Failed to instanciate structured type : \" + type, e);",
          "",
          "[Added Lines]",
          "144:             throw new BadFieldValueException(\"Failed to instantiate structured type : \" + type, e);",
          "148:             throw new BadFieldValueException(\"Failed to instantiate structured type : \" + type, e);",
          "152:             throw new BadFieldValueException(\"Failed to instantiate structured type : \" + type, e);",
          "156:             throw new BadFieldValueException(\"Failed to instantiate structured type : \" + type, e);",
          "160:             throw new BadFieldValueException(\"Failed to instantiate structured type : \" + type, e);",
          "164:             throw new BadFieldValueException(\"Failed to instantiate structured type : \" + type, e);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "185:         }",
          "186:         catch (NoSuchMethodError e)",
          "187:         {",
          "189:         }",
          "190:         catch (IllegalArgumentException e)",
          "191:         {",
          "193:         }",
          "194:         catch (InstantiationException e)",
          "195:         {",
          "197:         }",
          "198:         catch (IllegalAccessException e)",
          "199:         {",
          "201:         }",
          "202:         catch (InvocationTargetException e)",
          "203:         {",
          "205:         }",
          "206:         catch (SecurityException e)",
          "207:         {",
          "209:         }",
          "210:         catch (NoSuchMethodException e)",
          "211:         {",
          "213:         }",
          "214:     }",
          "",
          "[Removed Lines]",
          "188:             throw new IllegalArgumentException(\"Failed to instanciate \" + clz.getSimpleName() + \" property with value \" + value, e);",
          "192:             throw new IllegalArgumentException(\"Failed to instanciate \" + clz.getSimpleName() + \" property with value \" + value, e);",
          "196:             throw new IllegalArgumentException(\"Failed to instanciate \" + clz.getSimpleName() + \" property with value \" + value, e);",
          "200:             throw new IllegalArgumentException(\"Failed to instanciate \" + clz.getSimpleName() + \" property with value \" + value, e);",
          "204:             throw new IllegalArgumentException(\"Failed to instanciate \" + clz.getSimpleName() + \" property with value \" + value, e);",
          "208:             throw new IllegalArgumentException(\"Failed to instanciate \" + clz.getSimpleName() + \" property with value \" + value, e);",
          "212:             throw new IllegalArgumentException(\"Failed to instanciate \" + clz.getSimpleName() + \" property with value \" + value, e);",
          "",
          "[Added Lines]",
          "188:             throw new IllegalArgumentException(\"Failed to instantiate \" + clz.getSimpleName() + \" property with value \" + value, e);",
          "192:             throw new IllegalArgumentException(\"Failed to instantiate \" + clz.getSimpleName() + \" property with value \" + value, e);",
          "196:             throw new IllegalArgumentException(\"Failed to instantiate \" + clz.getSimpleName() + \" property with value \" + value, e);",
          "200:             throw new IllegalArgumentException(\"Failed to instantiate \" + clz.getSimpleName() + \" property with value \" + value, e);",
          "204:             throw new IllegalArgumentException(\"Failed to instantiate \" + clz.getSimpleName() + \" property with value \" + value, e);",
          "208:             throw new IllegalArgumentException(\"Failed to instantiate \" + clz.getSimpleName() + \" property with value \" + value, e);",
          "212:             throw new IllegalArgumentException(\"Failed to instantiate \" + clz.getSimpleName() + \" property with value \" + value, e);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf0aed45f983edcf39b82f96287c4df2a14f6bd7",
      "candidate_info": {
        "commit_hash": "cf0aed45f983edcf39b82f96287c4df2a14f6bd7",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/cf0aed45f983edcf39b82f96287c4df2a14f6bd7",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java"
        ],
        "message": "PDFBOX-4892: avoid memory leak, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890529 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:             refreshAppearances(fields);",
          "243:         }",
          "249:         Map<COSDictionary,Set<COSDictionary>> pagesWidgetsMap = buildPagesWidgetsMap(fields);",
          "",
          "[Removed Lines]",
          "246:         PDPageContentStream contentStream;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:                 }",
          "268:                 else if (isVisibleAnnotation(annotation))",
          "269:                 {",
          "288:                 }",
          "289:             }",
          "290:             page.setAnnotations(annotations);",
          "",
          "[Removed Lines]",
          "270:                     contentStream = new PDPageContentStream(document, page, AppendMode.APPEND, true, !isContentStreamWrapped);",
          "271:                     isContentStreamWrapped = true;",
          "273:                     PDAppearanceStream appearanceStream = annotation.getNormalAppearanceStream();",
          "275:                     PDFormXObject fieldObject = new PDFormXObject(appearanceStream.getCOSObject());",
          "277:                     contentStream.saveGraphicsState();",
          "283:                     Matrix transformationMatrix = resolveTransformationMatrix(annotation, appearanceStream);",
          "284:                     contentStream.transform(transformationMatrix);",
          "285:                     contentStream.drawForm(fieldObject);",
          "286:                     contentStream.restoreGraphicsState();",
          "287:                     contentStream.close();",
          "",
          "[Added Lines]",
          "267:                     PDPageContentStream contentStream = new PDPageContentStream(",
          "268:                             document, page, AppendMode.APPEND, true, !isContentStreamWrapped);",
          "269:                     try",
          "270:                     {",
          "271:                         isContentStreamWrapped = true;",
          "273:                         PDAppearanceStream appearanceStream = annotation.getNormalAppearanceStream();",
          "275:                         PDFormXObject fieldObject = new PDFormXObject(appearanceStream.getCOSObject());",
          "277:                         contentStream.saveGraphicsState();",
          "283:                         Matrix transformationMatrix = resolveTransformationMatrix(annotation, appearanceStream);",
          "284:                         contentStream.transform(transformationMatrix);",
          "285:                         contentStream.drawForm(fieldObject);",
          "286:                         contentStream.restoreGraphicsState();",
          "287:                     }",
          "288:                     finally",
          "289:                     {",
          "290:                         contentStream.close();",
          "291:                     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ab66c97c40e16c1af97831fd4924701e95c2b2e",
      "candidate_info": {
        "commit_hash": "9ab66c97c40e16c1af97831fd4924701e95c2b2e",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/9ab66c97c40e16c1af97831fd4924701e95c2b2e",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/CIDSystemInfo.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDPanoseClassification.java"
        ],
        "message": "PDFBOX-5208: set constructor to public\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890533 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/CIDSystemInfo.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/CIDSystemInfo.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDPanoseClassification.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDPanoseClassification.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/CIDSystemInfo.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/CIDSystemInfo.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/CIDSystemInfo.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/CIDSystemInfo.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     private final String ordering;",
          "29:     private final int supplement;",
          "32:     {",
          "33:         this.registry = registry;",
          "34:         this.ordering = ordering;",
          "",
          "[Removed Lines]",
          "31:     CIDSystemInfo(String registry, String ordering, int supplement)",
          "",
          "[Added Lines]",
          "31:     public CIDSystemInfo(String registry, String ordering, int supplement)",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDPanoseClassification.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDPanoseClassification.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDPanoseClassification.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDPanoseClassification.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: {",
          "27:     private final byte[] bytes;",
          "30:     {",
          "31:         this.bytes = bytes;",
          "32:     }",
          "",
          "[Removed Lines]",
          "29:     PDPanoseClassification(byte[] bytes)",
          "",
          "[Added Lines]",
          "29:     public PDPanoseClassification(byte[] bytes)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c37523817ee20e0a95560fd4129c519264889089",
      "candidate_info": {
        "commit_hash": "c37523817ee20e0a95560fd4129c519264889089",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/c37523817ee20e0a95560fd4129c519264889089",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java"
        ],
        "message": "PDFBOX-5145: speed up applyMask() by using linewise bulk copy instead of per pixel, as suggested by By Oliver Schmidtmer; closes #111\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888225 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "587:         if (mask.getWidth() < width || mask.getHeight() < height)",
          "588:         {",
          "590:         }",
          "592:         {",
          "593:             width = mask.getWidth();",
          "594:             height = mask.getHeight();",
          "596:         }",
          "598:         {",
          "601:         }",
          "",
          "[Removed Lines]",
          "589:             mask = scaleImage(mask, width, height);",
          "591:         else if (mask.getWidth() > width || mask.getHeight() > height)",
          "595:             image = scaleImage(image, width, height);",
          "597:         else if (image.getRaster().getPixel(0, 0, (int[]) null).length < 3)",
          "600:             image = scaleImage(image, width, height);",
          "",
          "[Added Lines]",
          "591:             mask = scaleImage(mask, width, height, BufferedImage.TYPE_BYTE_GRAY);",
          "594:         if (mask.getWidth() > width || mask.getHeight() > height)",
          "598:             image = scaleImage(image, width, height, BufferedImage.TYPE_INT_ARGB);",
          "600:         else if (image.getType() != BufferedImage.TYPE_INT_ARGB)",
          "604:             image = scaleImage(image, width, height, BufferedImage.TYPE_INT_ARGB);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "606:         WritableRaster dest = masked.getRaster();",
          "607:         WritableRaster alpha = mask.getRaster();",
          "612:         for (int y = 0; y < height; y++)",
          "613:         {",
          "614:             for (int x = 0; x < width; x++)",
          "615:             {",
          "623:                 if (isSoft)",
          "624:                 {",
          "627:                     {",
          "631:                     }",
          "632:                 }",
          "633:                 else",
          "634:                 {",
          "636:                 }",
          "639:             }",
          "640:         }",
          "642:         return masked;",
          "643:     }",
          "646:     {",
          "648:     }",
          "654:     {",
          "656:         Graphics2D g = image2.createGraphics();",
          "657:         if (getInterpolate())",
          "658:         {",
          "",
          "[Removed Lines]",
          "609:         float[] rgb = new float[4];",
          "610:         float[] rgba = new float[4];",
          "611:         float[] alphaPixel = null;",
          "616:                 src.getPixel(x, y, rgb);",
          "618:                 rgba[0] = rgb[0];",
          "619:                 rgba[1] = rgb[1];",
          "620:                 rgba[2] = rgb[2];",
          "622:                 alphaPixel = alpha.getPixel(x, y, alphaPixel);",
          "625:                     rgba[3] = alphaPixel[0];",
          "626:                     if (matte != null && Float.compare(alphaPixel[0], 0) != 0)",
          "628:                         rgba[0] = clampColor(((rgba[0] / 255 - matte[0]) / (alphaPixel[0] / 255) + matte[0]) * 255);",
          "629:                         rgba[1] = clampColor(((rgba[1] / 255 - matte[1]) / (alphaPixel[0] / 255) + matte[1]) * 255);",
          "630:                         rgba[2] = clampColor(((rgba[2] / 255 - matte[2]) / (alphaPixel[0] / 255) + matte[2]) * 255);",
          "635:                     rgba[3] = 255 - alphaPixel[0];",
          "638:                 dest.setPixel(x, y, rgba);",
          "645:     private float clampColor(float color)",
          "647:         return color < 0 ? 0 : (color > 255 ? 255 : color);",
          "653:     private BufferedImage scaleImage(BufferedImage image, int width, int height)",
          "655:         BufferedImage image2 = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);",
          "",
          "[Added Lines]",
          "613:         int[] alphaRow = new int[width];",
          "614:         int[] rgbaRow = new int[4 * width];",
          "617:             src.getPixels(0, y, width, 1, rgbaRow);",
          "618:             alpha.getSamples(0, y, width, 1, 0, alphaRow);",
          "621:                 int offset = x * 4;",
          "624:                     rgbaRow[offset + 3] = alphaRow[x];",
          "625:                     if (matte != null && Integer.compare(alphaRow[x], 0) != 0)",
          "627:                         float k = alphaRow[x] / 255f;",
          "628:                         rgbaRow[offset + 0] = clampColor(((rgbaRow[offset + 0] / 255f - matte[0]) / k + matte[0]) * 255f);",
          "629:                         rgbaRow[offset + 1] = clampColor(((rgbaRow[offset + 1] / 255f - matte[1]) / k + matte[1]) * 255f);",
          "630:                         rgbaRow[offset + 2] = clampColor(((rgbaRow[offset + 2] / 255f - matte[2]) / k + matte[2]) * 255f);",
          "635:                     rgbaRow[offset + 3] = 255 - alphaRow[x];",
          "638:             dest.setPixels(0, y, width, 1, rgbaRow);",
          "643:     private int clampColor(float color)",
          "645:         return color < 0 ? 0 : (color > 255 ? 255 : Math.round(color));",
          "651:     private BufferedImage scaleImage(BufferedImage image, int width, int height, int type)",
          "653:         BufferedImage image2 = new BufferedImage(width, height, type);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3231cda8acef0dac17708746b591f0dc6fa91c2f",
      "candidate_info": {
        "commit_hash": "3231cda8acef0dac17708746b591f0dc6fa91c2f",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/3231cda8acef0dac17708746b591f0dc6fa91c2f",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java"
        ],
        "message": "PDFBOX-4892: move trim() to the correct place, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888066 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:                 return COSNull.NULL;",
          "327:             default:",
          "331:                 {",
          "332:                     return Operator.getOperator(operator);",
          "333:                 }",
          "",
          "[Removed Lines]",
          "329:                 String operator = readOperator();",
          "330:                 if (operator.trim().length() > 0)",
          "",
          "[Added Lines]",
          "329:                 String operator = readOperator().trim();",
          "330:                 if (operator.length() > 0)",
          "",
          "---------------"
        ]
      }
    }
  ]
}