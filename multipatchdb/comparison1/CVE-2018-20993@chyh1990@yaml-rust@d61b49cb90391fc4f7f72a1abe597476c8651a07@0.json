{
  "cve_id": "CVE-2018-20993",
  "cve_desc": "An issue was discovered in the yaml-rust crate before 0.4.1 for Rust. There is uncontrolled recursion during deserialization.",
  "repo": "chyh1990/yaml-rust",
  "patch_hash": "d61b49cb90391fc4f7f72a1abe597476c8651a07",
  "patch_info": {
    "commit_hash": "d61b49cb90391fc4f7f72a1abe597476c8651a07",
    "repo": "chyh1990/yaml-rust",
    "commit_url": "https://github.com/chyh1990/yaml-rust/commit/d61b49cb90391fc4f7f72a1abe597476c8651a07",
    "files": [
      "src/scanner.rs",
      "src/yaml.rs"
    ],
    "message": "Prevent too deep recursion",
    "before_after_code_files": [
      "src/scanner.rs||src/scanner.rs",
      "src/yaml.rs||src/yaml.rs"
    ]
  },
  "patch_diff": {
    "src/scanner.rs||src/scanner.rs": [
      "File: src/scanner.rs -> src/scanner.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:     simple_keys: Vec<SimpleKey>,",
      "150:     indent: isize,",
      "151:     indents: Vec<isize>,",
      "153:     tokens_parsed: usize,",
      "154:     token_available: bool,",
      "155: }",
      "",
      "[Removed Lines]",
      "152:     flow_level: usize,",
      "",
      "[Added Lines]",
      "152:     flow_level: u8,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "907:         try!(self.save_simple_key());",
      "911:         self.allow_simple_key();",
      "",
      "[Removed Lines]",
      "909:         self.increase_flow_level();",
      "",
      "[Added Lines]",
      "909:         self.increase_flow_level()?;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "941:         Ok(())",
      "942:     }",
      "945:         self.simple_keys.push(SimpleKey::new(Marker::new(0,0,0)));",
      "947:     }",
      "948:     fn decrease_flow_level(&mut self) {",
      "949:         if self.flow_level > 0 {",
      "",
      "[Removed Lines]",
      "944:     fn increase_flow_level(&mut self) {",
      "946:         self.flow_level += 1;",
      "",
      "[Added Lines]",
      "944:     fn increase_flow_level(&mut self) -> ScanResult {",
      "946:         self.flow_level = self.flow_level.checked_add(1)",
      "947:             .ok_or_else(|| ScanError::new(self.mark, \"Recursion limit exceeded\"))?;",
      "948:         Ok(())",
      "",
      "---------------"
    ],
    "src/yaml.rs||src/yaml.rs": [
      "File: src/yaml.rs -> src/yaml.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "638:         let first = out.into_iter().next().unwrap();",
      "639:         assert_eq!(first[0][\"important\"].as_bool().unwrap(), true);",
      "640:     }",
      "641: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "642:     #[test]",
      "643:     fn test_recursion_depth_check_objects() {",
      "644:         let s = \"{a:\".repeat(10_000) + &\"}\".repeat(10_000);",
      "645:         assert!(YamlLoader::load_from_str(&s).is_err());",
      "646:     }",
      "648:     #[test]",
      "649:     fn test_recursion_depth_check_arrays() {",
      "650:         let s = \"[\".repeat(10_000) + &\"]\".repeat(10_000);",
      "651:         assert!(YamlLoader::load_from_str(&s).is_err());",
      "652:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "be21b8b9c87c66557e87bd7ad48e370cc4c5a77a",
      "candidate_info": {
        "commit_hash": "be21b8b9c87c66557e87bd7ad48e370cc4c5a77a",
        "repo": "chyh1990/yaml-rust",
        "commit_url": "https://github.com/chyh1990/yaml-rust/commit/be21b8b9c87c66557e87bd7ad48e370cc4c5a77a",
        "files": [
          "src/scanner.rs"
        ],
        "message": "Lowercase the recursion limit error message\n\nTo be consistent with the other errors in this crate.",
        "before_after_code_files": [
          "src/scanner.rs||src/scanner.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/scanner.rs||src/scanner.rs"
          ],
          "candidate": [
            "src/scanner.rs||src/scanner.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/scanner.rs||src/scanner.rs": [
          "File: src/scanner.rs -> src/scanner.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "989:         self.flow_level = self",
          "990:             .flow_level",
          "991:             .checked_add(1)",
          "993:         Ok(())",
          "994:     }",
          "995:     fn decrease_flow_level(&mut self) {",
          "",
          "[Removed Lines]",
          "992:             .ok_or_else(|| ScanError::new(self.mark, \"Recursion limit exceeded\"))?;",
          "",
          "[Added Lines]",
          "992:             .ok_or_else(|| ScanError::new(self.mark, \"recursion limit exceeded\"))?;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2eb31f82a99e776f5ee648e36619c931385ec447",
      "candidate_info": {
        "commit_hash": "2eb31f82a99e776f5ee648e36619c931385ec447",
        "repo": "chyh1990/yaml-rust",
        "commit_url": "https://github.com/chyh1990/yaml-rust/commit/2eb31f82a99e776f5ee648e36619c931385ec447",
        "files": [
          "examples/dump_yaml.rs",
          "src/emitter.rs",
          "src/lib.rs",
          "src/parser.rs",
          "src/scanner.rs",
          "src/yaml.rs",
          "tests/quickcheck.rs",
          "tests/spec_test.rs"
        ],
        "message": "Format with rustfmt 0.99.4",
        "before_after_code_files": [
          "examples/dump_yaml.rs||examples/dump_yaml.rs",
          "src/emitter.rs||src/emitter.rs",
          "src/lib.rs||src/lib.rs",
          "src/parser.rs||src/parser.rs",
          "src/scanner.rs||src/scanner.rs",
          "src/yaml.rs||src/yaml.rs",
          "tests/quickcheck.rs||tests/quickcheck.rs",
          "tests/spec_test.rs||tests/spec_test.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/scanner.rs||src/scanner.rs",
            "src/yaml.rs||src/yaml.rs"
          ],
          "candidate": [
            "src/scanner.rs||src/scanner.rs",
            "src/yaml.rs||src/yaml.rs"
          ]
        }
      },
      "candidate_diff": {
        "examples/dump_yaml.rs||examples/dump_yaml.rs": [
          "File: examples/dump_yaml.rs -> examples/dump_yaml.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:             for x in v {",
          "18:                 dump_node(x, indent + 1);",
          "19:             }",
          "21:         yaml::Yaml::Hash(ref h) => {",
          "22:             for (k, v) in h {",
          "23:                 print_indent(indent);",
          "24:                 println!(\"{:?}:\", k);",
          "25:                 dump_node(v, indent + 1);",
          "26:             }",
          "28:         _ => {",
          "29:             print_indent(indent);",
          "30:             println!(\"{:?}\", doc);",
          "",
          "[Removed Lines]",
          "20:         },",
          "27:         },",
          "",
          "[Added Lines]",
          "20:         }",
          "27:         }",
          "",
          "---------------"
        ],
        "src/emitter.rs||src/emitter.rs": [
          "File: src/emitter.rs -> src/emitter.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: use std::convert::From;",
          "3: use std::error::Error;",
          "4: use yaml::{Hash, Yaml};",
          "7: #[derive(Copy, Clone, Debug)]",
          "8: pub enum EmitError {",
          "11: }",
          "13: impl Error for EmitError {",
          "",
          "[Removed Lines]",
          "1: use std::fmt::{self, Display};",
          "9:         FmtError(fmt::Error),",
          "10:         BadHashmapKey,",
          "",
          "[Added Lines]",
          "3: use std::fmt::{self, Display};",
          "8:     FmtError(fmt::Error),",
          "9:     BadHashmapKey,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:             b'\\x1e' => \"\\\\u001e\",",
          "92:             b'\\x1f' => \"\\\\u001f\",",
          "93:             b'\\x7f' => \"\\\\u007f\",",
          "95:         };",
          "97:         if start < i {",
          "",
          "[Removed Lines]",
          "94:             _ => { continue; }",
          "",
          "[Added Lines]",
          "93:             _ => continue,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:             best_indent: 2,",
          "119:             compact: true,",
          "122:         }",
          "123:     }",
          "",
          "[Removed Lines]",
          "121:             level: -1",
          "",
          "[Added Lines]",
          "120:             level: -1,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:     pub fn compact(&mut self, compact: bool) {",
          "135:     }",
          "138:     pub fn is_compact(&self) -> bool {",
          "140:     }",
          "142:     pub fn dump(&mut self, doc: &Yaml) -> EmitResult {",
          "",
          "[Removed Lines]",
          "134:       self.compact = compact;",
          "139:       self.compact",
          "",
          "[Added Lines]",
          "133:         self.compact = compact;",
          "138:         self.compact",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "147:     }",
          "149:     fn write_indent(&mut self) -> EmitResult {",
          "151:         for _ in 0..self.level {",
          "152:             for _ in 0..self.best_indent {",
          "153:                 try!(write!(self.writer, \" \"));",
          "",
          "[Removed Lines]",
          "150:         if self.level <= 0 { return Ok(()); }",
          "",
          "[Added Lines]",
          "149:         if self.level <= 0 {",
          "150:             return Ok(());",
          "151:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "163:             Yaml::String(ref v) => {",
          "164:                 if need_quotes(v) {",
          "165:                     try!(escape_str(self.writer, v));",
          "168:                     try!(write!(self.writer, \"{}\", v));",
          "169:                 }",
          "170:                 Ok(())",
          "172:             Yaml::Boolean(v) => {",
          "173:                 if v {",
          "174:                     try!(self.writer.write_str(\"true\"));",
          "",
          "[Removed Lines]",
          "166:                 }",
          "167:                 else {",
          "171:             },",
          "",
          "[Added Lines]",
          "167:                 } else {",
          "171:             }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "176:                     try!(self.writer.write_str(\"false\"));",
          "177:                 }",
          "178:                 Ok(())",
          "180:             Yaml::Integer(v) => {",
          "181:                 try!(write!(self.writer, \"{}\", v));",
          "182:                 Ok(())",
          "184:             Yaml::Real(ref v) => {",
          "185:                 try!(write!(self.writer, \"{}\", v));",
          "186:                 Ok(())",
          "188:             Yaml::Null | Yaml::BadValue => {",
          "189:                 try!(write!(self.writer, \"~\"));",
          "190:                 Ok(())",
          "194:         }",
          "195:     }",
          "",
          "[Removed Lines]",
          "179:             },",
          "183:             },",
          "187:             },",
          "191:             },",
          "193:             _ => { Ok(()) }",
          "",
          "[Added Lines]",
          "179:             }",
          "183:             }",
          "187:             }",
          "191:             }",
          "193:             _ => Ok(()),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "219:             self.level += 1;",
          "220:             for (cnt, (k, v)) in h.iter().enumerate() {",
          "221:                 let complex_key = match *k {",
          "224:                 };",
          "225:                 if cnt > 0 {",
          "226:                     try!(write!(self.writer, \"\\n\"));",
          "227:                     try!(self.write_indent());",
          "228:                 }",
          "229:                 if complex_key {",
          "236:                 } else {",
          "240:                 }",
          "241:             }",
          "242:             self.level -= 1;",
          "",
          "[Removed Lines]",
          "222:                   Yaml::Hash(_) | Yaml::Array(_) => true,",
          "223:                   _ => false,",
          "230:                   try!(write!(self.writer, \"?\"));",
          "231:                   try!(self.emit_val(true, k));",
          "232:                   try!(write!(self.writer, \"\\n\"));",
          "233:                   try!(self.write_indent());",
          "234:                   try!(write!(self.writer, \":\"));",
          "235:                   try!(self.emit_val(true, v));",
          "237:                   try!(self.emit_node(k));",
          "238:                   try!(write!(self.writer, \":\"));",
          "239:                   try!(self.emit_val(false, v));",
          "",
          "[Added Lines]",
          "222:                     Yaml::Hash(_) | Yaml::Array(_) => true,",
          "223:                     _ => false,",
          "230:                     try!(write!(self.writer, \"?\"));",
          "231:                     try!(self.emit_val(true, k));",
          "232:                     try!(write!(self.writer, \"\\n\"));",
          "233:                     try!(self.write_indent());",
          "234:                     try!(write!(self.writer, \":\"));",
          "235:                     try!(self.emit_val(true, v));",
          "237:                     try!(self.emit_node(k));",
          "238:                     try!(write!(self.writer, \":\"));",
          "239:                     try!(self.emit_val(false, v));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "260:                     self.level -= 1;",
          "261:                 }",
          "262:                 self.emit_array(v)",
          "264:             Yaml::Hash(ref h) => {",
          "265:                 if (inline && self.compact) || h.is_empty() {",
          "266:                     try!(write!(self.writer, \" \"));",
          "",
          "[Removed Lines]",
          "263:             },",
          "",
          "[Added Lines]",
          "263:             }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "271:                     self.level -= 1;",
          "272:                 }",
          "273:                 self.emit_hash(h)",
          "275:             _ => {",
          "276:                 try!(write!(self.writer, \" \"));",
          "277:                 self.emit_node(val)",
          "",
          "[Removed Lines]",
          "274:             },",
          "",
          "[Added Lines]",
          "274:             }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "297: fn need_quotes(string: &str) -> bool {",
          "298:     fn need_quotes_spaces(string: &str) -> bool {",
          "301:     }",
          "303:     string == \"\"",
          "307:             ':' | '&' | '*' | '?' | '|' | '-' | '<' | '>' | '=' | '!' | '%' | '@' => true,",
          "308:             _ => false,",
          "314:             _ => false,",
          "330: }",
          "332: #[cfg(test)]",
          "",
          "[Removed Lines]",
          "299:         string.starts_with(' ')",
          "300:             || string.ends_with(' ')",
          "304:     || need_quotes_spaces(string)",
          "305:     || string.starts_with(|character: char| {",
          "306:         match character {",
          "309:         }",
          "310:     })",
          "311:     || string.contains(|character: char| {",
          "312:         match character {",
          "313:             '{' | '}' | '[' | ']' | ',' | '#' | '`' | '\\\"' | '\\'' | '\\\\' | '\\0' ... '\\x06' | '\\t' | '\\n' | '\\r' | '\\x0e' ... '\\x1a' | '\\x1c' ... '\\x1f' => true,",
          "315:         }",
          "316:     })",
          "317:     || [// http://yaml.org/type/bool.html",
          "321:         \"yes\",\"Yes\",\"YES\",\"no\",\"No\",\"NO\",",
          "322:         \"True\", \"TRUE\", \"true\", \"False\", \"FALSE\", \"false\",",
          "323:         \"on\",\"On\",\"ON\",\"off\",\"Off\",\"OFF\",",
          "325:         \"null\",\"Null\",\"NULL\", \"~\"",
          "326:     ].contains(&string)",
          "327:     || string.starts_with('.')",
          "328:     || string.parse::<i64>().is_ok()",
          "329:     || string.parse::<f64>().is_ok()",
          "",
          "[Added Lines]",
          "299:         string.starts_with(' ') || string.ends_with(' ')",
          "303:         || need_quotes_spaces(string)",
          "304:         || string.starts_with(|character: char| match character {",
          "307:         })",
          "308:         || string.contains(|character: char| match character {",
          "309:             '{'",
          "310:             | '}'",
          "311:             | '['",
          "312:             | ']'",
          "313:             | ','",
          "314:             | '#'",
          "315:             | '`'",
          "316:             | '\\\"'",
          "317:             | '\\''",
          "318:             | '\\\\'",
          "319:             | '\\0'...'\\x06'",
          "320:             | '\\t'",
          "321:             | '\\n'",
          "322:             | '\\r'",
          "323:             | '\\x0e'...'\\x1a'",
          "324:             | '\\x1c'...'\\x1f' => true,",
          "326:         })",
          "327:         || [",
          "332:             \"yes\", \"Yes\", \"YES\", \"no\", \"No\", \"NO\", \"True\", \"TRUE\", \"true\", \"False\", \"FALSE\",",
          "333:             \"false\", \"on\", \"On\", \"ON\", \"off\", \"Off\", \"OFF\",",
          "335:             \"null\", \"Null\", \"NULL\", \"~\",",
          "336:         ]",
          "337:             .contains(&string)",
          "338:         || string.starts_with('.')",
          "339:         || string.parse::<i64>().is_ok()",
          "340:         || string.parse::<f64>().is_ok()",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "361:         println!(\"emitted:\\n{}\", writer);",
          "362:         let docs_new = match YamlLoader::load_from_str(&writer) {",
          "363:             Ok(y) => y,",
          "365:         };",
          "366:         let doc_new = &docs_new[0];",
          "",
          "[Removed Lines]",
          "364:             Err(e) => panic!(format!(\"{}\", e))",
          "",
          "[Added Lines]",
          "374:             Err(e) => panic!(format!(\"{}\", e)),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "398:         }",
          "399:         let docs_new = match YamlLoader::load_from_str(&writer) {",
          "400:             Ok(y) => y,",
          "402:         };",
          "403:         let doc_new = &docs_new[0];",
          "404:         assert_eq!(doc, doc_new);",
          "",
          "[Removed Lines]",
          "401:             Err(e) => panic!(format!(\"{}\", e))",
          "",
          "[Added Lines]",
          "411:             Err(e) => panic!(format!(\"{}\", e)),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "506:             emitter.dump(doc).unwrap();",
          "507:         }",
          "510:     }",
          "512:     #[test]",
          "513:     fn test_empty_and_nested() {",
          "515:     }",
          "517:     #[test]",
          "518:     fn test_empty_and_nested_compact() {",
          "520:     }",
          "522:     fn test_empty_and_nested_flag(compact: bool) {",
          "524: a:",
          "525:   b:",
          "526:     c: hello",
          "",
          "[Removed Lines]",
          "509:         assert_eq!(expected, writer, \"expected:\\n{}\\nactual:\\n{}\\n\", expected, writer);",
          "514:       test_empty_and_nested_flag(false)",
          "519:       test_empty_and_nested_flag(true)",
          "523:         let s = if compact { r#\"---",
          "",
          "[Added Lines]",
          "519:         assert_eq!(",
          "520:             expected, writer,",
          "521:             \"expected:\\n{}\\nactual:\\n{}\\n\",",
          "522:             expected, writer",
          "523:         );",
          "528:         test_empty_and_nested_flag(false)",
          "533:         test_empty_and_nested_flag(true)",
          "537:         let s = if compact {",
          "538:             r#\"---",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "528: e:",
          "529:   - f",
          "530:   - g",
          "532: a:",
          "533:   b:",
          "534:     c: hello",
          "",
          "[Removed Lines]",
          "531:   - h: []\"# } else { r#\"---",
          "",
          "[Added Lines]",
          "546:   - h: []\"#",
          "547:         } else {",
          "548:             r#\"---",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "537:   - f",
          "538:   - g",
          "539:   -",
          "542:         let docs = YamlLoader::load_from_str(&s).unwrap();",
          "543:         let doc = &docs[0];",
          "",
          "[Removed Lines]",
          "540:     h: []\"# };",
          "",
          "[Added Lines]",
          "557:     h: []\"#",
          "558:         };",
          "",
          "---------------"
        ],
        "src/lib.rs||src/lib.rs": [
          "File: src/lib.rs -> src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: extern crate linked_hash_map;",
          "47: pub mod emitter;",
          "51: pub use parser::Event;",
          "52: pub use yaml::{Yaml, YamlLoader};",
          "55: #[cfg(test)]",
          "56: mod tests {",
          "",
          "[Removed Lines]",
          "44: pub mod yaml;",
          "45: pub mod scanner;",
          "46: pub mod parser;",
          "50: pub use scanner::ScanError;",
          "53: pub use emitter::{YamlEmitter, EmitError};",
          "",
          "[Added Lines]",
          "45: pub mod parser;",
          "46: pub mod scanner;",
          "47: pub mod yaml;",
          "50: pub use emitter::{EmitError, YamlEmitter};",
          "52: pub use scanner::ScanError;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:     #[test]",
          "60:     fn test_api() {",
          "63: # from yaml-cpp example",
          "64: - name: Ogre",
          "65:   position: [0, 5, 0]",
          "",
          "[Removed Lines]",
          "61:         let s =",
          "62: \"",
          "",
          "[Added Lines]",
          "61:         let s = \"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:     #[test]",
          "106:     fn test_fail() {",
          "109: # syntax error",
          "110: scalar",
          "111: key: [1, 2]]",
          "",
          "[Removed Lines]",
          "107:         let s =",
          "108: \"",
          "",
          "[Added Lines]",
          "106:         let s = \"",
          "",
          "---------------"
        ],
        "src/parser.rs||src/parser.rs": [
          "File: src/parser.rs -> src/parser.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:     FlowMappingKey,",
          "27:     FlowMappingValue,",
          "28:     FlowMappingEmptyValue,",
          "30: }",
          "",
          "[Removed Lines]",
          "29:     End",
          "",
          "[Added Lines]",
          "29:     End,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     SequenceEnd,",
          "50:     MappingStart(usize),",
          "52: }",
          "54: impl Event {",
          "",
          "[Removed Lines]",
          "51:     MappingEnd",
          "",
          "[Added Lines]",
          "51:     MappingEnd,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93: pub type ParseResult = Result<(Event, Marker), ScanError>;",
          "96:     pub fn new(src: T) -> Parser<T> {",
          "97:         Parser {",
          "98:             scanner: Scanner::new(src),",
          "",
          "[Removed Lines]",
          "95: impl<T: Iterator<Item=char>> Parser<T> {",
          "",
          "[Added Lines]",
          "93: impl<T: Iterator<Item = char>> Parser<T> {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:     pub fn next(&mut self) -> ParseResult {",
          "122:         match self.current {",
          "123:             None => self.parse(),",
          "127:         }",
          "128:     }",
          "130:     fn peek_token(&mut self) -> Result<&Token, ScanError> {",
          "131:         match self.token {",
          "133:                 self.token = Some(try!(self.scan_next_token()));",
          "134:                 Ok(self.token.as_ref().unwrap())",
          "137:         }",
          "138:     }",
          "140:     fn scan_next_token(&mut self) -> Result<Token, ScanError> {",
          "141:         let token = self.scanner.next();",
          "142:         match token {",
          "149:         }",
          "150:     }",
          "152:     fn fetch_token(&mut self) -> Token {",
          "154:     }",
          "157:     fn skip(&mut self) {",
          "158:         self.token = None;",
          "",
          "[Removed Lines]",
          "124:             Some(_) => {",
          "125:                 Ok(self.current.take().unwrap())",
          "126:             }",
          "132:             None =>  {",
          "135:             },",
          "136:             Some(ref tok) => Ok(tok)",
          "143:             None =>",
          "144:                 match self.scanner.get_error() {",
          "145:                     None => Err(ScanError::new(self.scanner.mark(), \"unexpected eof\")),",
          "146:                     Some(e) => Err(e),",
          "147:                 },",
          "148:             Some(tok) => Ok(tok)",
          "153:         self.token.take().expect(\"fetch_token needs to be preceded by peek_token\")",
          "",
          "[Added Lines]",
          "122:             Some(_) => Ok(self.current.take().unwrap()),",
          "128:             None => {",
          "131:             }",
          "132:             Some(ref tok) => Ok(tok),",
          "139:             None => match self.scanner.get_error() {",
          "140:                 None => Err(ScanError::new(self.scanner.mark(), \"unexpected eof\")),",
          "141:                 Some(e) => Err(e),",
          "142:             },",
          "143:             Some(tok) => Ok(tok),",
          "148:         self.token",
          "149:             .take()",
          "150:             .expect(\"fetch_token needs to be preceded by peek_token\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "174:         Ok((ev, mark))",
          "175:     }",
          "179:         if !self.scanner.stream_started() {",
          "180:             let (ev, mark) = try!(self.next());",
          "181:             assert_eq!(ev, Event::StreamStart);",
          "",
          "[Removed Lines]",
          "177:     pub fn load<R: MarkedEventReceiver>(&mut self, recv: &mut R, multi: bool)",
          "178:         -> Result<(), ScanError> {",
          "",
          "[Added Lines]",
          "173:     pub fn load<R: MarkedEventReceiver>(",
          "174:         &mut self,",
          "175:         recv: &mut R,",
          "176:         multi: bool,",
          "177:     ) -> Result<(), ScanError> {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "203:         Ok(())",
          "204:     }",
          "208:         assert_eq!(first_ev, Event::DocumentStart);",
          "209:         recv.on_event(first_ev, mark);",
          "",
          "[Removed Lines]",
          "206:     fn load_document<R: MarkedEventReceiver>(&mut self, first_ev: Event, mark: Marker, recv: &mut R)",
          "207:         -> Result<(), ScanError> {",
          "",
          "[Added Lines]",
          "205:     fn load_document<R: MarkedEventReceiver>(",
          "206:         &mut self,",
          "207:         first_ev: Event,",
          "208:         mark: Marker,",
          "209:         recv: &mut R,",
          "210:     ) -> Result<(), ScanError> {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "219:         Ok(())",
          "220:     }",
          "224:         match first_ev {",
          "225:             Event::Alias(..) | Event::Scalar(..) => {",
          "226:                 recv.on_event(first_ev, mark);",
          "227:                 Ok(())",
          "229:             Event::SequenceStart(_) => {",
          "230:                 recv.on_event(first_ev, mark);",
          "231:                 self.load_sequence(recv)",
          "233:             Event::MappingStart(_) => {",
          "234:                 recv.on_event(first_ev, mark);",
          "235:                 self.load_mapping(recv)",
          "239:         }",
          "240:     }",
          "244:         let (mut key_ev, mut key_mark) = try!(self.next());",
          "245:         while key_ev != Event::MappingEnd {",
          "",
          "[Removed Lines]",
          "222:     fn load_node<R: MarkedEventReceiver>(&mut self, first_ev: Event, mark: Marker, recv: &mut R)",
          "223:         -> Result<(), ScanError> {",
          "228:             },",
          "232:             },",
          "236:             },",
          "237:             _ => { println!(\"UNREACHABLE EVENT: {:?}\", first_ev);",
          "238:                 unreachable!(); }",
          "242:     fn load_mapping<R: MarkedEventReceiver>(&mut self, recv: &mut R)",
          "243:         -> Result<(), ScanError> {",
          "",
          "[Added Lines]",
          "225:     fn load_node<R: MarkedEventReceiver>(",
          "226:         &mut self,",
          "227:         first_ev: Event,",
          "228:         mark: Marker,",
          "229:         recv: &mut R,",
          "230:     ) -> Result<(), ScanError> {",
          "235:             }",
          "239:             }",
          "243:             }",
          "244:             _ => {",
          "245:                 println!(\"UNREACHABLE EVENT: {:?}\", first_ev);",
          "246:                 unreachable!();",
          "247:             }",
          "251:     fn load_mapping<R: MarkedEventReceiver>(&mut self, recv: &mut R) -> Result<(), ScanError> {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "254:             let (ev, mark) = try!(self.next());",
          "255:             key_ev = ev;",
          "256:             key_mark = mark;",
          "258:         }",
          "259:         recv.on_event(key_ev, key_mark);",
          "260:         Ok(())",
          "261:     }",
          "265:         let (mut ev, mut mark) = try!(self.next());",
          "266:         while ev != Event::SequenceEnd {",
          "267:             try!(self.load_node(ev, mark, recv));",
          "",
          "[Removed Lines]",
          "263:     fn load_sequence<R: MarkedEventReceiver>(&mut self, recv: &mut R)",
          "264:         -> Result<(), ScanError> {",
          "",
          "[Added Lines]",
          "270:     fn load_sequence<R: MarkedEventReceiver>(&mut self, recv: &mut R) -> Result<(), ScanError> {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "322:                 self.state = State::ImplicitDocumentStart;",
          "323:                 self.skip();",
          "324:                 Ok((Event::StreamStart, mark))",
          "328:         }",
          "329:     }",
          "",
          "[Removed Lines]",
          "325:             },",
          "326:             Token(mark, _) => Err(ScanError::new(mark,",
          "327:                 \"did not find expected <stream-start>\")),",
          "",
          "[Added Lines]",
          "330:             }",
          "331:             Token(mark, _) => Err(ScanError::new(mark, \"did not find expected <stream-start>\")),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "340:                 self.state = State::End;",
          "341:                 self.skip();",
          "342:                 Ok((Event::StreamEnd, mark))",
          "344:             Token(_, TokenType::VersionDirective(..))",
          "345:             | Token(_, TokenType::TagDirective(..))",
          "346:             | Token(_, TokenType::DocumentStart) => {",
          "348:                 self._explict_document_start()",
          "350:             Token(mark, _) if implicit => {",
          "351:                 try!(self.parser_process_directives());",
          "352:                 self.push_state(State::DocumentEnd);",
          "353:                 self.state = State::BlockNode;",
          "354:                 Ok((Event::DocumentStart, mark))",
          "356:             _ => {",
          "358:                 self._explict_document_start()",
          "",
          "[Removed Lines]",
          "343:             },",
          "349:             },",
          "355:             },",
          "",
          "[Added Lines]",
          "347:             }",
          "353:             }",
          "359:             }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "373:                 TokenType::TagDirective(..) => {",
          "377:             }",
          "378:             self.skip();",
          "379:         }",
          "",
          "[Removed Lines]",
          "372:                 },",
          "375:                 },",
          "376:                 _ => break",
          "",
          "[Added Lines]",
          "376:                 }",
          "379:                 }",
          "380:                 _ => break,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "389:                 self.state = State::DocumentContent;",
          "390:                 self.skip();",
          "391:                 Ok((Event::DocumentStart, mark))",
          "395:     }",
          "397:     fn document_content(&mut self) -> ParseResult {",
          "",
          "[Removed Lines]",
          "392:             }",
          "393:             Token(mark, _) => Err(ScanError::new(mark, \"did not find expected <document start>\"))",
          "394:         }",
          "",
          "[Added Lines]",
          "396:             }",
          "397:             Token(mark, _) => Err(ScanError::new(",
          "398:                 mark,",
          "399:                 \"did not find expected <document start>\",",
          "400:             )),",
          "401:         }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "404:                 self.pop_state();",
          "406:                 Ok((Event::empty_scalar(), mark))",
          "410:             }",
          "411:         }",
          "412:     }",
          "",
          "[Removed Lines]",
          "407:             },",
          "408:             _ => {",
          "409:                 self.parse_node(true, false)",
          "",
          "[Added Lines]",
          "415:             _ => self.parse_node(true, false),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "418:                 self.skip();",
          "419:                 _implicit = false;",
          "420:                 mark",
          "423:         };",
          "426:         self.state = State::DocumentStart;",
          "427:         Ok((Event::DocumentEnd, marker))",
          "",
          "[Removed Lines]",
          "421:             },",
          "422:             Token(mark, _) => mark",
          "",
          "[Added Lines]",
          "426:             }",
          "427:             Token(mark, _) => mark,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "447:                 self.pop_state();",
          "448:                 if let Token(mark, TokenType::Alias(name)) = self.fetch_token() {",
          "449:                     match self.anchors.get(&name) {",
          "452:                     }",
          "453:                 } else {",
          "454:                     unreachable!()",
          "455:                 }",
          "457:             Token(_, TokenType::Anchor(_)) => {",
          "458:                 if let Token(mark, TokenType::Anchor(name)) = self.fetch_token() {",
          "459:                     anchor_id = try!(self.register_anchor(name, &mark));",
          "",
          "[Removed Lines]",
          "450:                         None => return Err(ScanError::new(mark, \"while parsing node, found unknown anchor\")),",
          "451:                         Some(id) => return Ok((Event::Alias(*id), mark))",
          "456:             },",
          "",
          "[Added Lines]",
          "455:                         None => {",
          "456:                             return Err(ScanError::new(",
          "457:                                 mark,",
          "458:                                 \"while parsing node, found unknown anchor\",",
          "459:                             ))",
          "460:                         }",
          "461:                         Some(id) => return Ok((Event::Alias(*id), mark)),",
          "466:             }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "467:                 } else {",
          "468:                     unreachable!()",
          "469:                 }",
          "471:             Token(_, TokenType::Tag(..)) => {",
          "472:                 if let tg @ TokenType::Tag(..) = self.fetch_token().1 {",
          "473:                     tag = Some(tg);",
          "",
          "[Removed Lines]",
          "470:             },",
          "",
          "[Added Lines]",
          "480:             }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "481:                 } else {",
          "482:                     unreachable!()",
          "483:                 }",
          "485:             _ => {}",
          "486:         }",
          "487:         match *try!(self.peek_token()) {",
          "488:             Token(mark, TokenType::BlockEntry) if indentless_sequence => {",
          "489:                 self.state = State::IndentlessSequenceEntry;",
          "490:                 Ok((Event::SequenceStart(anchor_id), mark))",
          "492:             Token(_, TokenType::Scalar(..)) => {",
          "493:                 self.pop_state();",
          "494:                 if let Token(mark, TokenType::Scalar(style, v)) = self.fetch_token() {",
          "",
          "[Removed Lines]",
          "484:             },",
          "491:             },",
          "",
          "[Added Lines]",
          "494:             }",
          "501:             }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "496:                 } else {",
          "497:                     unreachable!()",
          "498:                 }",
          "500:             Token(mark, TokenType::FlowSequenceStart) => {",
          "501:                 self.state = State::FlowSequenceFirstEntry;",
          "502:                 Ok((Event::SequenceStart(anchor_id), mark))",
          "504:             Token(mark, TokenType::FlowMappingStart) => {",
          "505:                 self.state = State::FlowMappingFirstKey;",
          "506:                 Ok((Event::MappingStart(anchor_id), mark))",
          "508:             Token(mark, TokenType::BlockSequenceStart) if block => {",
          "509:                 self.state = State::BlockSequenceFirstEntry;",
          "510:                 Ok((Event::SequenceStart(anchor_id), mark))",
          "512:             Token(mark, TokenType::BlockMappingStart) if block => {",
          "513:                 self.state = State::BlockMappingFirstKey;",
          "514:                 Ok((Event::MappingStart(anchor_id), mark))",
          "517:             Token(mark, _) if tag.is_some() || anchor_id > 0 => {",
          "518:                 self.pop_state();",
          "519:                 Ok((Event::empty_scalar_with_anchor(anchor_id, tag), mark))",
          "522:         }",
          "523:     }",
          "",
          "[Removed Lines]",
          "499:             },",
          "503:             },",
          "507:             },",
          "511:             },",
          "515:             },",
          "520:             },",
          "521:             Token(mark, _) => { Err(ScanError::new(mark, \"while parsing a node, did not find expected node content\")) }",
          "",
          "[Added Lines]",
          "509:             }",
          "513:             }",
          "517:             }",
          "521:             }",
          "525:             }",
          "530:             }",
          "531:             Token(mark, _) => Err(ScanError::new(",
          "532:                 mark,",
          "533:                 \"while parsing a node, did not find expected node content\",",
          "534:             )),",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "545:                         self.parse_node(true, true)",
          "546:                     }",
          "547:                 }",
          "550:             Token(mark, TokenType::Value) => {",
          "551:                 self.state = State::BlockMappingValue;",
          "552:                 Ok((Event::empty_scalar(), mark))",
          "554:             Token(mark, TokenType::BlockEnd) => {",
          "555:                 self.pop_state();",
          "556:                 self.skip();",
          "557:                 Ok((Event::MappingEnd, mark))",
          "561:             }",
          "562:         }",
          "563:     }",
          "",
          "[Removed Lines]",
          "548:             },",
          "553:             },",
          "558:             },",
          "559:             Token(mark, _) => {",
          "560:                 Err(ScanError::new(mark, \"while parsing a block mapping, did not find expected key\"))",
          "",
          "[Added Lines]",
          "561:             }",
          "566:             }",
          "572:             Token(mark, _) => Err(ScanError::new(",
          "573:                 mark,",
          "574:                 \"while parsing a block mapping, did not find expected key\",",
          "575:             )),",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "573:                         self.state = State::BlockMappingKey;",
          "575:                         Ok((Event::empty_scalar(), mark))",
          "577:                     _ => {",
          "578:                         self.push_state(State::BlockMappingKey);",
          "579:                         self.parse_node(true, true)",
          "580:                     }",
          "581:                 }",
          "583:             Token(mark, _) => {",
          "584:                 self.state = State::BlockMappingKey;",
          "",
          "[Removed Lines]",
          "576:                     },",
          "582:             },",
          "",
          "[Added Lines]",
          "590:                     }",
          "596:             }",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "593:             let _ = try!(self.peek_token());",
          "594:             self.skip();",
          "595:         }",
          "602:                             Token(_, TokenType::FlowEntry) => self.skip(),",
          "603:                             Token(mark, _) => return Err(ScanError::new(mark,",
          "604:                                 \"while parsing a flow mapping, did not find expected ',' or '}'\"))",
          "605:                         }",
          "621:                                 }",
          "622:                             }",
          "632:                         }",
          "636:                 }",
          "640:         self.pop_state();",
          "641:         self.skip();",
          "",
          "[Removed Lines]",
          "596:         let marker: Marker = {",
          "597:             match *try!(self.peek_token()) {",
          "598:                 Token(mark, TokenType::FlowMappingEnd) => mark,",
          "599:                 Token(mark, _) => {",
          "600:                     if !first {",
          "601:                         match *try!(self.peek_token()) {",
          "606:                     }",
          "608:                     match *try!(self.peek_token()) {",
          "609:                         Token(_, TokenType::Key) => {",
          "610:                             self.skip();",
          "611:                             match *try!(self.peek_token()) {",
          "612:                                 Token(mark, TokenType::Value)",
          "613:                                 | Token(mark, TokenType::FlowEntry)",
          "614:                                 | Token(mark, TokenType::FlowMappingEnd) => {",
          "615:                                     self.state = State::FlowMappingValue;",
          "616:                                     return Ok((Event::empty_scalar(), mark));",
          "617:                                 },",
          "618:                                 _ => {",
          "619:                                     self.push_state(State::FlowMappingValue);",
          "620:                                     return self.parse_node(false, false);",
          "623:                         },",
          "624:                         Token(marker, TokenType::Value) => {",
          "625:                             self.state = State::FlowMappingValue;",
          "626:                             return Ok((Event::empty_scalar(), marker));",
          "627:                         },",
          "628:                         Token(_, TokenType::FlowMappingEnd) => (),",
          "629:                         _ => {",
          "630:                             self.push_state(State::FlowMappingEmptyValue);",
          "631:                             return self.parse_node(false, false);",
          "633:                     }",
          "635:                     mark",
          "637:             }",
          "638:         };",
          "",
          "[Added Lines]",
          "610:         let marker: Marker =",
          "611:             {",
          "612:                 match *try!(self.peek_token()) {",
          "613:                     Token(mark, TokenType::FlowMappingEnd) => mark,",
          "614:                     Token(mark, _) => {",
          "615:                         if !first {",
          "616:                             match *try!(self.peek_token()) {",
          "621:                         }",
          "623:                         match *try!(self.peek_token()) {",
          "624:                             Token(_, TokenType::Key) => {",
          "625:                                 self.skip();",
          "626:                                 match *try!(self.peek_token()) {",
          "627:                                     Token(mark, TokenType::Value)",
          "628:                                     | Token(mark, TokenType::FlowEntry)",
          "629:                                     | Token(mark, TokenType::FlowMappingEnd) => {",
          "630:                                         self.state = State::FlowMappingValue;",
          "631:                                         return Ok((Event::empty_scalar(), mark));",
          "632:                                     }",
          "633:                                     _ => {",
          "634:                                         self.push_state(State::FlowMappingValue);",
          "635:                                         return self.parse_node(false, false);",
          "636:                                     }",
          "639:                             Token(marker, TokenType::Value) => {",
          "640:                                 self.state = State::FlowMappingValue;",
          "641:                                 return Ok((Event::empty_scalar(), marker));",
          "642:                             }",
          "643:                             Token(_, TokenType::FlowMappingEnd) => (),",
          "644:                             _ => {",
          "645:                                 self.push_state(State::FlowMappingEmptyValue);",
          "646:                                 return self.parse_node(false, false);",
          "647:                             }",
          "650:                         mark",
          "651:                     }",
          "653:             };",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "653:                     Token(marker, TokenType::Value) => {",
          "654:                         self.skip();",
          "655:                         match try!(self.peek_token()).1 {",
          "658:                             _ => {",
          "659:                                 self.push_state(State::FlowMappingKey);",
          "660:                                 return self.parse_node(false, false);",
          "661:                             }",
          "662:                         }",
          "663:                         marker",
          "666:                 }",
          "667:             }",
          "668:         };",
          "670:         self.state = State::FlowMappingKey;",
          "671:         Ok((Event::empty_scalar(), mark))",
          "672:     }",
          "",
          "[Removed Lines]",
          "656:                             TokenType::FlowEntry",
          "657:                                 | TokenType::FlowMappingEnd => { },",
          "664:                     },",
          "665:                     Token(marker, _) => marker",
          "",
          "[Added Lines]",
          "671:                             TokenType::FlowEntry | TokenType::FlowMappingEnd => {}",
          "678:                     }",
          "679:                     Token(marker, _) => marker,",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "683:                 self.pop_state();",
          "684:                 self.skip();",
          "685:                 return Ok((Event::SequenceEnd, mark));",
          "687:             Token(_, TokenType::FlowEntry) if !first => {",
          "688:                 self.skip();",
          "690:             Token(mark, _) if !first => {",
          "693:             }",
          "694:             _ => { /* next */ }",
          "695:         }",
          "",
          "[Removed Lines]",
          "686:             },",
          "689:             },",
          "691:                 return Err(ScanError::new(mark,",
          "692:                         \"while parsing a flow sequence, expectd ',' or ']'\"));",
          "",
          "[Added Lines]",
          "700:             }",
          "703:             }",
          "705:                 return Err(ScanError::new(",
          "706:                     mark,",
          "707:                     \"while parsing a flow sequence, expectd ',' or ']'\",",
          "708:                 ));",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "698:                 self.pop_state();",
          "699:                 self.skip();",
          "700:                 Ok((Event::SequenceEnd, mark))",
          "702:             Token(mark, TokenType::Key) => {",
          "703:                 self.state = State::FlowSequenceEntryMappingKey;",
          "704:                 self.skip();",
          "",
          "[Removed Lines]",
          "701:             },",
          "",
          "[Added Lines]",
          "717:             }",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "727:             | Token(mark, TokenType::BlockEnd) => {",
          "728:                 self.state = State::IndentlessSequenceEntry;",
          "729:                 Ok((Event::empty_scalar(), mark))",
          "731:             _ => {",
          "732:                 self.push_state(State::IndentlessSequenceEntry);",
          "733:                 self.parse_node(true, false)",
          "",
          "[Removed Lines]",
          "730:             },",
          "",
          "[Added Lines]",
          "746:             }",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "747:                 self.pop_state();",
          "748:                 self.skip();",
          "749:                 Ok((Event::SequenceEnd, mark))",
          "751:             Token(_, TokenType::BlockEntry) => {",
          "752:                 self.skip();",
          "753:                 match *try!(self.peek_token()) {",
          "756:                         self.state = State::BlockSequenceEntry;",
          "757:                         Ok((Event::empty_scalar(), mark))",
          "759:                     _ => {",
          "760:                         self.push_state(State::BlockSequenceEntry);",
          "761:                         self.parse_node(true, false)",
          "762:                     }",
          "763:                 }",
          "768:             }",
          "769:         }",
          "770:     }",
          "",
          "[Removed Lines]",
          "750:             },",
          "754:                     Token(mark, TokenType::BlockEntry)",
          "755:                     | Token(mark, TokenType::BlockEnd) => {",
          "758:                     },",
          "764:             },",
          "765:             Token(mark, _) => {",
          "766:                 Err(ScanError::new(mark,",
          "767:                         \"while parsing a block collection, did not find expected '-' indicator\"))",
          "",
          "[Added Lines]",
          "766:             }",
          "770:                     Token(mark, TokenType::BlockEntry) | Token(mark, TokenType::BlockEnd) => {",
          "773:                     }",
          "780:             Token(mark, _) => Err(ScanError::new(",
          "781:                 mark,",
          "782:                 \"while parsing a block collection, did not find expected '-' indicator\",",
          "783:             )),",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "777:                 self.skip();",
          "778:                 self.state = State::FlowSequenceEntryMappingValue;",
          "779:                 Ok((Event::empty_scalar(), mark))",
          "781:             _ => {",
          "782:                 self.push_state(State::FlowSequenceEntryMappingValue);",
          "783:                 self.parse_node(false, false)",
          "",
          "[Removed Lines]",
          "780:             },",
          "",
          "[Added Lines]",
          "795:             }",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "788:     fn flow_sequence_entry_mapping_value(&mut self) -> ParseResult {",
          "789:         match *try!(self.peek_token()) {",
          "790:             Token(_, TokenType::Value) => {",
          "803:                     }",
          "805:             Token(mark, _) => {",
          "806:                 self.state = State::FlowSequenceEntryMappingEnd;",
          "807:                 Ok((Event::empty_scalar(), mark))",
          "",
          "[Removed Lines]",
          "791:                     self.skip();",
          "792:                     self.state = State::FlowSequenceEntryMappingValue;",
          "793:                     match *try!(self.peek_token()) {",
          "794:                         Token(mark, TokenType::FlowEntry)",
          "795:                         | Token(mark, TokenType::FlowSequenceEnd) => {",
          "796:                             self.state = State::FlowSequenceEntryMappingEnd;",
          "797:                             Ok((Event::empty_scalar(), mark))",
          "798:                         },",
          "799:                         _ => {",
          "800:                             self.push_state(State::FlowSequenceEntryMappingEnd);",
          "801:                             self.parse_node(false, false)",
          "802:                         }",
          "804:             },",
          "",
          "[Added Lines]",
          "806:                 self.skip();",
          "807:                 self.state = State::FlowSequenceEntryMappingValue;",
          "808:                 match *try!(self.peek_token()) {",
          "809:                     Token(mark, TokenType::FlowEntry) | Token(mark, TokenType::FlowSequenceEnd) => {",
          "810:                         self.state = State::FlowSequenceEntryMappingEnd;",
          "811:                         Ok((Event::empty_scalar(), mark))",
          "813:                     _ => {",
          "814:                         self.push_state(State::FlowSequenceEntryMappingEnd);",
          "815:                         self.parse_node(false, false)",
          "816:                     }",
          "817:                 }",
          "818:             }",
          "",
          "---------------"
        ],
        "src/scanner.rs||src/scanner.rs": [
          "File: src/scanner.rs -> src/scanner.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: use std::collections::VecDeque;",
          "3: use std::error::Error;",
          "5: #[derive(Clone, Copy, PartialEq, Debug, Eq)]",
          "6: pub enum TEncoding {",
          "8: }",
          "10: #[derive(Clone, Copy, PartialEq, Debug, Eq)]",
          "",
          "[Removed Lines]",
          "2: use std::{char, fmt};",
          "7:     Utf8",
          "",
          "[Added Lines]",
          "3: use std::{char, fmt};",
          "7:     Utf8,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:     DoubleQuoted,",
          "17:     Literal,",
          "19: }",
          "21: #[derive(Clone, Copy, PartialEq, Debug, Eq)]",
          "",
          "[Removed Lines]",
          "18:     Foled",
          "",
          "[Added Lines]",
          "18:     Foled,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "30:         Marker {",
          "31:             index: index,",
          "32:             line: line,",
          "34:         }",
          "35:     }",
          "",
          "[Removed Lines]",
          "33:             col: col",
          "",
          "[Added Lines]",
          "33:             col: col,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "57:     pub fn new(loc: Marker, info: &str) -> ScanError {",
          "58:         ScanError {",
          "59:             mark: loc,",
          "61:         }",
          "62:     }",
          "",
          "[Removed Lines]",
          "60:             info: info.to_owned()",
          "",
          "[Added Lines]",
          "60:             info: info.to_owned(),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "79: impl fmt::Display for ScanError {",
          "81:     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "84:     }",
          "85: }",
          "",
          "[Removed Lines]",
          "82:         write!(formatter, \"{} at line {} column {}\", self.info,",
          "83:                self.mark.line, self.mark.col + 1)",
          "",
          "[Added Lines]",
          "82:         write!(",
          "83:             formatter,",
          "84:             \"{} at line {} column {}\",",
          "85:             self.info,",
          "86:             self.mark.line,",
          "87:             self.mark.col + 1",
          "88:         )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "110:     Anchor(String),",
          "112:     Tag(String, String),",
          "114: }",
          "116: #[derive(Clone, PartialEq, Debug, Eq)]",
          "",
          "[Removed Lines]",
          "113:     Scalar(TScalarStyle, String)",
          "",
          "[Added Lines]",
          "118:     Scalar(TScalarStyle, String),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "154:     token_available: bool,",
          "155: }",
          "158:     type Item = Token;",
          "159:     fn next(&mut self) -> Option<Token> {",
          "160:         if self.error.is_some() {",
          "",
          "[Removed Lines]",
          "157: impl<T: Iterator<Item=char>> Iterator for Scanner<T> {",
          "",
          "[Added Lines]",
          "162: impl<T: Iterator<Item = char>> Iterator for Scanner<T> {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "199:     match c {",
          "200:         '0'...'9' | 'a'...'z' | 'A'...'Z' => true,",
          "201:         '_' | '-' => true,",
          "203:     }",
          "204: }",
          "205: #[inline]",
          "206: fn is_hex(c: char) -> bool {",
          "210: }",
          "211: #[inline]",
          "212: fn as_hex(c: char) -> u32 {",
          "",
          "[Removed Lines]",
          "202:         _ => false",
          "207:     (c >= '0' && c <= '9')",
          "208:         || (c >= 'a' && c <= 'f')",
          "209:         || (c >= 'A' && c <= 'F')",
          "",
          "[Added Lines]",
          "207:         _ => false,",
          "212:     (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "214:         '0'...'9' => (c as u32) - ('0' as u32),",
          "215:         'a'...'f' => (c as u32) - ('a' as u32) + 10,",
          "216:         'A'...'F' => (c as u32) - ('A' as u32) + 10,",
          "218:     }",
          "219: }",
          "221: pub type ScanResult = Result<(), ScanError>;",
          "225:     pub fn new(rdr: T) -> Scanner<T> {",
          "226:         Scanner {",
          "",
          "[Removed Lines]",
          "217:         _ => unreachable!()",
          "223: impl<T: Iterator<Item=char>> Scanner<T> {",
          "",
          "[Added Lines]",
          "220:         _ => unreachable!(),",
          "226: impl<T: Iterator<Item = char>> Scanner<T> {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "326:         }",
          "327:     }",
          "328:     fn allow_simple_key(&mut self) {",
          "330:     }",
          "331:     fn disallow_simple_key(&mut self) {",
          "333:     }",
          "335:     pub fn fetch_next_token(&mut self) -> ScanResult {",
          "",
          "[Removed Lines]",
          "329:             self.simple_key_allowed = true;",
          "332:             self.simple_key_allowed = false;",
          "",
          "[Added Lines]",
          "332:         self.simple_key_allowed = true;",
          "335:         self.simple_key_allowed = false;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "363:             && self.buffer[0] == '-'",
          "364:             && self.buffer[1] == '-'",
          "365:             && self.buffer[2] == '-'",
          "367:             try!(self.fetch_document_indicator(TokenType::DocumentStart));",
          "368:             return Ok(());",
          "369:         }",
          "",
          "[Removed Lines]",
          "366:             && is_blankz(self.buffer[3]) {",
          "",
          "[Added Lines]",
          "369:             && is_blankz(self.buffer[3])",
          "370:         {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "372:             && self.buffer[0] == '.'",
          "373:             && self.buffer[1] == '.'",
          "374:             && self.buffer[2] == '.'",
          "376:             try!(self.fetch_document_indicator(TokenType::DocumentEnd));",
          "377:             return Ok(());",
          "378:         }",
          "",
          "[Removed Lines]",
          "375:             && is_blankz(self.buffer[3]) {",
          "",
          "[Added Lines]",
          "379:             && is_blankz(self.buffer[3])",
          "380:         {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "403:             '-' if !is_blankz(nc) => self.fetch_plain_scalar(),",
          "404:             ':' | '?' if !is_blankz(nc) && self.flow_level == 0 => self.fetch_plain_scalar(),",
          "407:             _ => self.fetch_plain_scalar(),",
          "408:         }",
          "409:     }",
          "",
          "[Removed Lines]",
          "405:             '%' | '@' | '`' => Err(ScanError::new(self.mark,",
          "406:                     &format!(\"unexpected character: `{}'\", c))),",
          "",
          "[Added Lines]",
          "410:             '%' | '@' | '`' => Err(ScanError::new(",
          "411:                 self.mark,",
          "412:                 &format!(\"unexpected character: `{}'\", c),",
          "413:             )),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "442:                 }",
          "443:             }",
          "446:             try!(self.fetch_next_token());",
          "447:         }",
          "448:         self.token_available = true;",
          "",
          "[Removed Lines]",
          "445:             if !need_more { break; }",
          "",
          "[Added Lines]",
          "452:             if !need_more {",
          "453:                 break;",
          "454:             }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "453:     fn stale_simple_keys(&mut self) -> ScanResult {",
          "454:         for sk in &mut self.simple_keys {",
          "461:                 }",
          "462:         }",
          "463:         Ok(())",
          "464:     }",
          "",
          "[Removed Lines]",
          "455:             if sk.possible && (sk.mark.line < self.mark.line",
          "456:                 || sk.mark.index + 1024 < self.mark.index) {",
          "457:                     if sk.required {",
          "458:                         return Err(ScanError::new(self.mark, \"simple key expect ':'\"));",
          "459:                     }",
          "460:                     sk.possible = false;",
          "",
          "[Added Lines]",
          "464:             if sk.possible",
          "465:                 && (sk.mark.line < self.mark.line || sk.mark.index + 1024 < self.mark.index)",
          "466:             {",
          "467:                 if sk.required {",
          "468:                     return Err(ScanError::new(self.mark, \"simple key expect ':'\"));",
          "470:                 sk.possible = false;",
          "471:             }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "476:                     if self.flow_level == 0 {",
          "477:                         self.allow_simple_key();",
          "478:                     }",
          "479:                 },",
          "482:             }",
          "483:         }",
          "484:     }",
          "",
          "[Removed Lines]",
          "480:                 '#' => while !is_breakz(self.ch()) { self.skip(); self.lookahead(1); },",
          "481:                 _ => break",
          "",
          "[Added Lines]",
          "489:                 }",
          "490:                 '#' => while !is_breakz(self.ch()) {",
          "491:                     self.skip();",
          "492:                     self.lookahead(1);",
          "494:                 _ => break,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "488:         self.indent = -1;",
          "489:         self.stream_start_produced = true;",
          "490:         self.allow_simple_key();",
          "493:     }",
          "495:     fn fetch_stream_end(&mut self) -> ScanResult {",
          "",
          "[Removed Lines]",
          "491:         self.tokens.push_back(Token(mark, TokenType::StreamStart(TEncoding::Utf8)));",
          "492:         self.simple_keys.push(SimpleKey::new(Marker::new(0,0,0)));",
          "",
          "[Added Lines]",
          "504:         self.tokens",
          "505:             .push_back(Token(mark, TokenType::StreamStart(TEncoding::Utf8)));",
          "506:         self.simple_keys.push(SimpleKey::new(Marker::new(0, 0, 0)));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "503:         try!(self.remove_simple_key());",
          "504:         self.disallow_simple_key();",
          "507:         Ok(())",
          "508:     }",
          "",
          "[Removed Lines]",
          "506:         self.tokens.push_back(Token(self.mark, TokenType::StreamEnd));",
          "",
          "[Added Lines]",
          "520:         self.tokens",
          "521:             .push_back(Token(self.mark, TokenType::StreamEnd));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "527:         let name = try!(self.scan_directive_name());",
          "528:         let tok = match name.as_ref() {",
          "536:             _ => {",
          "",
          "[Removed Lines]",
          "529:             \"YAML\" => {",
          "530:                 try!(self.scan_version_directive_value(&start_mark))",
          "531:             },",
          "532:             \"TAG\" => {",
          "533:                 try!(self.scan_tag_directive_value(&start_mark))",
          "534:             },",
          "",
          "[Added Lines]",
          "544:             \"YAML\" => try!(self.scan_version_directive_value(&start_mark)),",
          "545:             \"TAG\" => try!(self.scan_tag_directive_value(&start_mark)),",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "541:                     self.lookahead(1);",
          "542:                 }",
          "547:             }",
          "",
          "[Removed Lines]",
          "544:                 Token(start_mark, TokenType::TagDirective(String::new(), String::new()))",
          "",
          "[Added Lines]",
          "555:                 Token(",
          "556:                     start_mark,",
          "557:                     TokenType::TagDirective(String::new(), String::new()),",
          "558:                 )",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "561:         }",
          "563:         if !is_breakz(self.ch()) {",
          "566:         }",
          "",
          "[Removed Lines]",
          "564:             return Err(ScanError::new(start_mark,",
          "565:                 \"while scanning a directive, did not find expected comment or line break\"));",
          "",
          "[Added Lines]",
          "578:             return Err(ScanError::new(",
          "579:                 start_mark,",
          "580:                 \"while scanning a directive, did not find expected comment or line break\",",
          "581:             ));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "585:         let major = try!(self.scan_version_directive_number(mark));",
          "587:         if self.ch() != '.' {",
          "590:         }",
          "592:         self.skip();",
          "",
          "[Removed Lines]",
          "588:             return Err(ScanError::new(*mark,",
          "589:                 \"while scanning a YAML directive, did not find expected digit or '.' character\"));",
          "",
          "[Added Lines]",
          "604:             return Err(ScanError::new(",
          "606:                 \"while scanning a YAML directive, did not find expected digit or '.' character\",",
          "607:             ));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "607:         }",
          "609:         if string.is_empty() {",
          "612:         }",
          "614:         if !is_blankz(self.ch()) {",
          "617:         }",
          "619:         Ok(string)",
          "",
          "[Removed Lines]",
          "610:             return Err(ScanError::new(start_mark,",
          "611:                     \"while scanning a directive, could not find expected directive name\"));",
          "615:             return Err(ScanError::new(start_mark,",
          "616:                     \"while scanning a directive, found unexpected non-alphabetical character\"));",
          "",
          "[Added Lines]",
          "628:             return Err(ScanError::new(",
          "629:                 start_mark,",
          "630:                 \"while scanning a directive, could not find expected directive name\",",
          "631:             ));",
          "635:             return Err(ScanError::new(",
          "636:                 start_mark,",
          "637:                 \"while scanning a directive, found unexpected non-alphabetical character\",",
          "638:             ));",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "625:         self.lookahead(1);",
          "626:         while is_digit(self.ch()) {",
          "627:             if length + 1 > 9 {",
          "630:             }",
          "631:             length += 1;",
          "632:             val = val * 10 + ((self.ch() as u32) - ('0' as u32));",
          "",
          "[Removed Lines]",
          "628:                 return Err(ScanError::new(*mark,",
          "629:                     \"while scanning a YAML directive, found extremely long version number\"));",
          "",
          "[Added Lines]",
          "650:                 return Err(ScanError::new(",
          "652:                     \"while scanning a YAML directive, found extremely long version number\",",
          "653:                 ));",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "635:         }",
          "637:         if length == 0 {",
          "640:         }",
          "642:         Ok(val)",
          "",
          "[Removed Lines]",
          "638:                 return Err(ScanError::new(*mark,",
          "639:                     \"while scanning a YAML directive, did not find expected version number\"));",
          "",
          "[Added Lines]",
          "662:             return Err(ScanError::new(",
          "664:                 \"while scanning a YAML directive, did not find expected version number\",",
          "665:             ));",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "666:         if is_blankz(self.ch()) {",
          "667:             Ok(Token(*mark, TokenType::TagDirective(handle, prefix)))",
          "668:         } else {",
          "671:         }",
          "672:     }",
          "",
          "[Removed Lines]",
          "669:             Err(ScanError::new(*mark,",
          "670:                 \"while scanning TAG, did not find expected whitespace or line break\"))",
          "",
          "[Added Lines]",
          "695:             Err(ScanError::new(",
          "697:                 \"while scanning TAG, did not find expected whitespace or line break\",",
          "698:             ))",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "696:             suffix = try!(self.scan_tag_uri(false, false, &String::new(), &start_mark));",
          "698:             if self.ch() != '>' {",
          "701:             }",
          "703:             self.skip();",
          "",
          "[Removed Lines]",
          "699:                 return Err(ScanError::new(start_mark,",
          "700:                     \"while scanning a tag, did not find the expected '>'\"));",
          "",
          "[Added Lines]",
          "727:                 return Err(ScanError::new(",
          "728:                     start_mark,",
          "729:                     \"while scanning a tag, did not find the expected '>'\",",
          "730:                 ));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "728:             Ok(Token(start_mark, TokenType::Tag(handle, suffix)))",
          "729:         } else {",
          "732:         }",
          "733:     }",
          "",
          "[Removed Lines]",
          "730:             Err(ScanError::new(start_mark,",
          "731:                 \"while scanning a tag, did not find expected whitespace or line break\"))",
          "",
          "[Added Lines]",
          "760:             Err(ScanError::new(",
          "761:                 start_mark,",
          "762:                 \"while scanning a tag, did not find expected whitespace or line break\",",
          "763:             ))",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "736:         let mut string = String::new();",
          "737:         self.lookahead(1);",
          "738:         if self.ch() != '!' {",
          "741:         }",
          "743:         string.push(self.ch());",
          "",
          "[Removed Lines]",
          "739:             return Err(ScanError::new(*mark,",
          "740:                 \"while scanning a tag, did not find expected '!'\"));",
          "",
          "[Added Lines]",
          "771:             return Err(ScanError::new(",
          "773:                 \"while scanning a tag, did not find expected '!'\",",
          "774:             ));",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "763:         }",
          "764:         Ok(string)",
          "765:     }",
          "769:         let mut length = head.len();",
          "770:         let mut string = String::new();",
          "",
          "[Removed Lines]",
          "761:             return Err(ScanError::new(*mark,",
          "762:                 \"while parsing a tag directive, did not find expected '!'\"));",
          "767:     fn scan_tag_uri(&mut self, directive: bool, _is_secondary: bool,",
          "768:                 head: &str, mark: &Marker) -> Result<String, ScanError> {",
          "",
          "[Added Lines]",
          "795:             return Err(ScanError::new(",
          "797:                 \"while parsing a tag directive, did not find expected '!'\",",
          "798:             ));",
          "803:     fn scan_tag_uri(",
          "804:         &mut self,",
          "805:         directive: bool,",
          "806:         _is_secondary: bool,",
          "807:         head: &str,",
          "808:         mark: &Marker,",
          "809:     ) -> Result<String, ScanError> {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "788:             '=' | '+' | '$' | ',' | '.' | '!' | '~' | '*' | '\\'' | '(' | ')' | '[' | ']' => true,",
          "789:             '%' => true,",
          "790:             c if is_alpha(c) => true,",
          "792:         } {",
          "794:             if self.ch() == '%' {",
          "",
          "[Removed Lines]",
          "791:             _ => false",
          "",
          "[Added Lines]",
          "832:             _ => false,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "803:         }",
          "805:         if length == 0 {",
          "808:         }",
          "810:         Ok(string)",
          "811:     }",
          "815:         let mut width = 0usize;",
          "816:         let mut code = 0u32;",
          "817:         loop {",
          "818:             self.lookahead(3);",
          "825:             }",
          "827:             let octet = (as_hex(self.buffer[1]) << 4) + as_hex(self.buffer[2]);",
          "",
          "[Removed Lines]",
          "806:             return Err(ScanError::new(*mark,",
          "807:                 \"while parsing a tag, did not find expected tag URI\"));",
          "813:     fn scan_uri_escapes(&mut self, _directive: bool, mark: &Marker)",
          "814:         -> Result<char, ScanError> {",
          "820:             if !(self.ch() == '%'",
          "821:                  && is_hex(self.buffer[1])",
          "822:                  && is_hex(self.buffer[2])) {",
          "823:                 return Err(ScanError::new(*mark,",
          "824:                     \"while parsing a tag, did not find URI escaped octet\"));",
          "",
          "[Added Lines]",
          "847:             return Err(ScanError::new(",
          "849:                 \"while parsing a tag, did not find expected tag URI\",",
          "850:             ));",
          "856:     fn scan_uri_escapes(&mut self, _directive: bool, mark: &Marker) -> Result<char, ScanError> {",
          "862:             if !(self.ch() == '%' && is_hex(self.buffer[1]) && is_hex(self.buffer[2])) {",
          "863:                 return Err(ScanError::new(",
          "865:                     \"while parsing a tag, did not find URI escaped octet\",",
          "866:                 ));",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "832:                     _ if octet & 0xF0 == 0xE0 => 3,",
          "833:                     _ if octet & 0xF8 == 0xF0 => 4,",
          "834:                     _ => {",
          "837:                     }",
          "838:                 };",
          "839:                 code = octet;",
          "840:             } else {",
          "841:                 if octet & 0xc0 != 0x80 {",
          "844:                 }",
          "845:                 code = (code << 8) + octet;",
          "846:             }",
          "",
          "[Removed Lines]",
          "835:                         return Err(ScanError::new(*mark,",
          "836:                             \"while parsing a tag, found an incorrect leading UTF-8 octet\"));",
          "842:                         return Err(ScanError::new(*mark,",
          "843:                             \"while parsing a tag, found an incorrect trailing UTF-8 octet\"));",
          "",
          "[Added Lines]",
          "877:                         return Err(ScanError::new(",
          "879:                             \"while parsing a tag, found an incorrect leading UTF-8 octet\",",
          "880:                         ));",
          "886:                     return Err(ScanError::new(",
          "888:                         \"while parsing a tag, found an incorrect trailing UTF-8 octet\",",
          "889:                     ));",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "858:         match char::from_u32(code) {",
          "859:             Some(ch) => Ok(ch),",
          "862:         }",
          "863:     }",
          "",
          "[Removed Lines]",
          "860:             None => Err(ScanError::new(*mark,",
          "861:                 \"while parsing a tag, found an invalid UTF-8 codepoint\"))",
          "",
          "[Added Lines]",
          "906:             None => Err(ScanError::new(",
          "908:                 \"while parsing a tag, found an invalid UTF-8 codepoint\",",
          "909:             )),",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "873:         Ok(())",
          "874:     }",
          "878:         let mut string = String::new();",
          "879:         let start_mark = self.mark;",
          "",
          "[Removed Lines]",
          "876:     fn scan_anchor(&mut self, alias: bool)",
          "877:         -> Result<Token, ScanError> {",
          "",
          "[Added Lines]",
          "924:     fn scan_anchor(&mut self, alias: bool) -> Result<Token, ScanError> {",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "886:             self.lookahead(1);",
          "887:         }",
          "895:             return Err(ScanError::new(start_mark, \"while scanning an anchor or alias, did not find expected alphabetic or numeric character\"));",
          "896:         }",
          "",
          "[Removed Lines]",
          "889:         if string.is_empty()",
          "890:             || match self.ch() {",
          "891:                 c if is_blankz(c) => false,",
          "892:                 '?' | ':' | ',' | ']' | '}' | '%' | '@' | '`' => false,",
          "893:                 _ => true",
          "894:             } {",
          "",
          "[Added Lines]",
          "936:         if string.is_empty() || match self.ch() {",
          "937:             c if is_blankz(c) => false,",
          "938:             '?' | ':' | ',' | ']' | '}' | '%' | '@' | '`' => false,",
          "939:             _ => true,",
          "940:         } {",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "902:         }",
          "903:     }",
          "907:         try!(self.save_simple_key());",
          "",
          "[Removed Lines]",
          "905:     fn fetch_flow_collection_start(&mut self, tok :TokenType) -> ScanResult {",
          "",
          "[Added Lines]",
          "951:     fn fetch_flow_collection_start(&mut self, tok: TokenType) -> ScanResult {",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "917:         Ok(())",
          "918:     }",
          "921:         try!(self.remove_simple_key());",
          "922:         self.decrease_flow_level();",
          "",
          "[Removed Lines]",
          "920:     fn fetch_flow_collection_end(&mut self, tok :TokenType) -> ScanResult {",
          "",
          "[Added Lines]",
          "966:     fn fetch_flow_collection_end(&mut self, tok: TokenType) -> ScanResult {",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "937:         let start_mark = self.mark;",
          "938:         self.skip();",
          "941:         Ok(())",
          "942:     }",
          "944:     fn increase_flow_level(&mut self) -> ScanResult {",
          "947:             .ok_or_else(|| ScanError::new(self.mark, \"Recursion limit exceeded\"))?;",
          "948:         Ok(())",
          "949:     }",
          "",
          "[Removed Lines]",
          "940:         self.tokens.push_back(Token(start_mark, TokenType::FlowEntry));",
          "945:         self.simple_keys.push(SimpleKey::new(Marker::new(0,0,0)));",
          "946:         self.flow_level = self.flow_level.checked_add(1)",
          "",
          "[Added Lines]",
          "986:         self.tokens",
          "987:             .push_back(Token(start_mark, TokenType::FlowEntry));",
          "992:         self.simple_keys.push(SimpleKey::new(Marker::new(0, 0, 0)));",
          "993:         self.flow_level = self",
          "994:             .flow_level",
          "995:             .checked_add(1)",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "958:         if self.flow_level == 0 {",
          "960:             if !self.simple_key_allowed {",
          "963:             }",
          "965:             let mark = self.mark;",
          "",
          "[Removed Lines]",
          "961:                 return Err(ScanError::new(self.mark,",
          "962:                         \"block sequence entries are not allowed in this context\"));",
          "",
          "[Added Lines]",
          "1010:                 return Err(ScanError::new(",
          "1011:                     self.mark,",
          "1012:                     \"block sequence entries are not allowed in this context\",",
          "1013:                 ));",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "967:             self.roll_indent(mark.col, None, TokenType::BlockSequenceStart, mark);",
          "968:         } else {",
          "971:         }",
          "972:         try!(self.remove_simple_key());",
          "973:         self.allow_simple_key();",
          "",
          "[Removed Lines]",
          "970:             return Err(ScanError::new(self.mark, r#\"\"-\" is only valid inside a block\"#))",
          "",
          "[Added Lines]",
          "1021:             return Err(ScanError::new(",
          "1022:                 self.mark,",
          "1023:                 r#\"\"-\" is only valid inside a block\"#,",
          "1024:             ));",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "975:         let start_mark = self.mark;",
          "976:         self.skip();",
          "979:         Ok(())",
          "980:     }",
          "",
          "[Removed Lines]",
          "978:         self.tokens.push_back(Token(start_mark, TokenType::BlockEntry));",
          "",
          "[Added Lines]",
          "1032:         self.tokens",
          "1033:             .push_back(Token(start_mark, TokenType::BlockEntry));",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1029:             self.lookahead(1);",
          "1030:             if is_digit(self.ch()) {",
          "1031:                 if self.ch() == '0' {",
          "1034:                 }",
          "1035:                 increment = (self.ch() as usize) - ('0' as usize);",
          "1036:                 self.skip();",
          "1037:             }",
          "1038:         } else if is_digit(self.ch()) {",
          "1039:             if self.ch() == '0' {",
          "1042:             }",
          "1044:             increment = (self.ch() as usize) - ('0' as usize);",
          "",
          "[Removed Lines]",
          "1032:                     return Err(ScanError::new(start_mark,",
          "1033:                             \"while scanning a block scalar, found an intendation indicator equal to 0\"));",
          "1040:                 return Err(ScanError::new(start_mark,",
          "1041:                          \"while scanning a block scalar, found an intendation indicator equal to 0\"));",
          "",
          "[Added Lines]",
          "1087:                     return Err(ScanError::new(",
          "1088:                         start_mark,",
          "1089:                         \"while scanning a block scalar, found an intendation indicator equal to 0\",",
          "1090:                     ));",
          "1097:                 return Err(ScanError::new(",
          "1098:                     start_mark,",
          "1099:                     \"while scanning a block scalar, found an intendation indicator equal to 0\",",
          "1100:                 ));",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1073:         if !is_breakz(self.ch()) {",
          "1076:         }",
          "1078:         if is_break(self.ch()) {",
          "",
          "[Removed Lines]",
          "1074:             return Err(ScanError::new(start_mark,",
          "1075:                     \"while scanning a block scalar, did not find expected comment or line break\"));",
          "",
          "[Added Lines]",
          "1133:             return Err(ScanError::new(",
          "1134:                 start_mark,",
          "1135:                 \"while scanning a block scalar, did not find expected comment or line break\",",
          "1136:             ));",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1081:         }",
          "1083:         if increment > 0 {",
          "1085:         }",
          "1087:         try!(self.block_scalar_breaks(&mut indent, &mut trailing_breaks));",
          "",
          "[Removed Lines]",
          "1084:             indent = if self.indent >= 0 { (self.indent + increment as isize) as usize } else { increment }",
          "",
          "[Added Lines]",
          "1145:             indent = if self.indent >= 0 {",
          "1146:                 (self.indent + increment as isize) as usize",
          "1147:             } else {",
          "1148:                 increment",
          "1149:             }",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1093:         while self.mark.col == indent && !is_z(self.ch()) {",
          "1095:             trailing_blank = is_blank(self.ch());",
          "1102:             } else {",
          "1103:                 string.push_str(&leading_break);",
          "1104:                 leading_break.clear();",
          "",
          "[Removed Lines]",
          "1096:             if !literal && !leading_break.is_empty()",
          "1097:                 && !leading_blank && !trailing_blank {",
          "1098:                     if trailing_breaks.is_empty() {",
          "1099:                         string.push(' ');",
          "1100:                     }",
          "1101:                     leading_break.clear();",
          "",
          "[Added Lines]",
          "1161:             if !literal && !leading_break.is_empty() && !leading_blank && !trailing_blank {",
          "1162:                 if trailing_breaks.is_empty() {",
          "1163:                     string.push(' ');",
          "1164:                 }",
          "1165:                 leading_break.clear();",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1115:                 self.lookahead(1);",
          "1116:             }",
          "1120:             self.lookahead(2);",
          "1121:             self.read_break(&mut leading_break);",
          "",
          "[Removed Lines]",
          "1118:             if is_z(self.ch()) { break; }",
          "",
          "[Added Lines]",
          "1182:             if is_z(self.ch()) {",
          "1183:                 break;",
          "1184:             }",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1134:         }",
          "1136:         if literal {",
          "1138:         } else {",
          "1140:         }",
          "1141:     }",
          "",
          "[Removed Lines]",
          "1137:             Ok(Token(start_mark, TokenType::Scalar(TScalarStyle::Literal, string)))",
          "1139:             Ok(Token(start_mark, TokenType::Scalar(TScalarStyle::Foled, string)))",
          "",
          "[Added Lines]",
          "1203:             Ok(Token(",
          "1204:                 start_mark,",
          "1205:                 TokenType::Scalar(TScalarStyle::Literal, string),",
          "1206:             ))",
          "1208:             Ok(Token(",
          "1209:                 start_mark,",
          "1210:                 TokenType::Scalar(TScalarStyle::Foled, string),",
          "1211:             ))",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1144:         let mut max_indent = 0;",
          "1145:         loop {",
          "1146:             self.lookahead(1);",
          "1151:             }",
          "1153:             if self.mark.col > max_indent {",
          "",
          "[Removed Lines]",
          "1147:             while (*indent == 0 || self.mark.col < *indent)",
          "1148:                 && self.buffer[0] == ' ' {",
          "1149:                     self.skip();",
          "1150:                     self.lookahead(1);",
          "",
          "[Added Lines]",
          "1219:             while (*indent == 0 || self.mark.col < *indent) && self.buffer[0] == ' ' {",
          "1220:                 self.skip();",
          "1221:                 self.lookahead(1);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1155:             }",
          "1160:                 return Err(ScanError::new(self.mark,",
          "1161:                         \"while scanning a block scalar, found a tab character where an intendation space is expected\"));",
          "1162:             }",
          "",
          "[Removed Lines]",
          "1158:             if (*indent == 0 || self.mark.col < *indent)",
          "1159:                 && self.buffer[0] == '\\t' {",
          "",
          "[Added Lines]",
          "1229:             if (*indent == 0 || self.mark.col < *indent) && self.buffer[0] == '\\t' {",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1209:             self.lookahead(4);",
          "1223:             if is_z(self.ch()) {",
          "1226:             }",
          "1228:             self.lookahead(2);",
          "",
          "[Removed Lines]",
          "1211:             if self.mark.col == 0 &&",
          "1212:                 (((self.buffer[0] == '-') &&",
          "1213:                 (self.buffer[1] == '-') &&",
          "1214:                 (self.buffer[2] == '-')) ||",
          "1215:                 ((self.buffer[0] == '.') &&",
          "1216:                 (self.buffer[1] == '.') &&",
          "1217:                 (self.buffer[2] == '.'))) &&",
          "1218:                 is_blankz(self.buffer[3]) {",
          "1219:                     return Err(ScanError::new(start_mark,",
          "1220:                         \"while scanning a quoted scalar, found unexpected document indicator\"));",
          "1221:                 }",
          "1224:                     return Err(ScanError::new(start_mark,",
          "1225:                         \"while scanning a quoted scalar, found unexpected end of stream\"));",
          "",
          "[Added Lines]",
          "1281:             if self.mark.col == 0",
          "1282:                 && (((self.buffer[0] == '-') && (self.buffer[1] == '-') && (self.buffer[2] == '-'))",
          "1283:                     || ((self.buffer[0] == '.')",
          "1284:                         && (self.buffer[1] == '.')",
          "1285:                         && (self.buffer[2] == '.')))",
          "1286:                 && is_blankz(self.buffer[3])",
          "1287:             {",
          "1288:                 return Err(ScanError::new(",
          "1289:                     start_mark,",
          "1290:                     \"while scanning a quoted scalar, found unexpected document indicator\",",
          "1291:                 ));",
          "1292:             }",
          "1295:                 return Err(ScanError::new(",
          "1296:                     start_mark,",
          "1297:                     \"while scanning a quoted scalar, found unexpected end of stream\",",
          "1298:                 ));",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1237:                         string.push('\\'');",
          "1238:                         self.skip();",
          "1239:                         self.skip();",
          "1245:                     '\\\\' if !single && is_break(self.buffer[1]) => {",
          "1246:                         self.lookahead(3);",
          "",
          "[Removed Lines]",
          "1240:                     },",
          "1242:                     '\\'' if single => { break; },",
          "1243:                     '\"' if !single => { break; },",
          "",
          "[Added Lines]",
          "1313:                     }",
          "1315:                     '\\'' if single => break,",
          "1316:                     '\"' if !single => break,",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1277:                             'x' => code_length = 2,",
          "1278:                             'u' => code_length = 4,",
          "1279:                             'U' => code_length = 8,",
          "1282:                         }",
          "1283:                         self.skip();",
          "1284:                         self.skip();",
          "",
          "[Removed Lines]",
          "1280:                             _ => return Err(ScanError::new(start_mark,",
          "1281:                                     \"while parsing a quoted scalar, found unknown escape character\"))",
          "",
          "[Added Lines]",
          "1353:                             _ => {",
          "1354:                                 return Err(ScanError::new(",
          "1355:                                     start_mark,",
          "1356:                                     \"while parsing a quoted scalar, found unknown escape character\",",
          "1357:                                 ))",
          "1358:                             }",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1307:                                 self.skip();",
          "1308:                             }",
          "1309:                         }",
          "1312:                 }",
          "1313:                 self.lookahead(2);",
          "1314:             }",
          "1315:             self.lookahead(1);",
          "1316:             match self.ch() {",
          "1319:                 _ => {}",
          "1320:             }",
          "",
          "[Removed Lines]",
          "1310:                     },",
          "1311:                     c => { string.push(c); self.skip(); }",
          "1317:                 '\\'' if single => { break; },",
          "1318:                 '\"' if !single => { break; },",
          "",
          "[Added Lines]",
          "1387:                     }",
          "1388:                     c => {",
          "1389:                         string.push(c);",
          "1390:                         self.skip();",
          "1391:                     }",
          "1397:                 '\\'' if single => break,",
          "1398:                 '\"' if !single => break,",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1368:         self.skip();",
          "1370:         if single {",
          "1372:         } else {",
          "1374:         }",
          "1375:     }",
          "",
          "[Removed Lines]",
          "1371:             Ok(Token(start_mark, TokenType::Scalar(TScalarStyle::SingleQuoted, string)))",
          "1373:             Ok(Token(start_mark, TokenType::Scalar(TScalarStyle::DoubleQuoted, string)))",
          "",
          "[Added Lines]",
          "1451:             Ok(Token(",
          "1452:                 start_mark,",
          "1453:                 TokenType::Scalar(TScalarStyle::SingleQuoted, string),",
          "1454:             ))",
          "1456:             Ok(Token(",
          "1457:                 start_mark,",
          "1458:                 TokenType::Scalar(TScalarStyle::DoubleQuoted, string),",
          "1459:             ))",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1399:             self.lookahead(4);",
          "1413:             while !is_blankz(self.ch()) {",
          "1420:                 match self.ch() {",
          "1421:                     ':' if is_blankz(self.buffer[1]) => break,",
          "1423:                     _ => {}",
          "1424:                 }",
          "",
          "[Removed Lines]",
          "1401:             if self.mark.col == 0 &&",
          "1402:                 (((self.buffer[0] == '-') &&",
          "1403:                  (self.buffer[1] == '-') &&",
          "1404:                  (self.buffer[2] == '-')) ||",
          "1405:                     ((self.buffer[0] == '.') &&",
          "1406:                      (self.buffer[1] == '.') &&",
          "1407:                      (self.buffer[2] == '.'))) &&",
          "1408:                     is_blankz(self.buffer[3]) {",
          "1409:                         break;",
          "1410:                     }",
          "1412:             if self.ch() == '#' { break; }",
          "1414:                 if self.flow_level > 0 && self.ch() == ':'",
          "1415:                     && is_blankz(self.ch()) {",
          "1416:                         return Err(ScanError::new(start_mark,",
          "1417:                                                   \"while scanning a plain scalar, found unexpected ':'\"));",
          "1418:                     }",
          "1422:                     ',' | ':' | '?' | '[' | ']' |'{' |'}' if self.flow_level > 0 => break,",
          "",
          "[Added Lines]",
          "1487:             if self.mark.col == 0",
          "1488:                 && (((self.buffer[0] == '-') && (self.buffer[1] == '-') && (self.buffer[2] == '-'))",
          "1489:                     || ((self.buffer[0] == '.')",
          "1490:                         && (self.buffer[1] == '.')",
          "1491:                         && (self.buffer[2] == '.')))",
          "1492:                 && is_blankz(self.buffer[3])",
          "1493:             {",
          "1494:                 break;",
          "1495:             }",
          "1497:             if self.ch() == '#' {",
          "1498:                 break;",
          "1499:             }",
          "1501:                 if self.flow_level > 0 && self.ch() == ':' && is_blankz(self.ch()) {",
          "1502:                     return Err(ScanError::new(",
          "1503:                         start_mark,",
          "1504:                         \"while scanning a plain scalar, found unexpected ':'\",",
          "1505:                     ));",
          "1506:                 }",
          "1510:                     ',' | ':' | '?' | '[' | ']' | '{' | '}' if self.flow_level > 0 => break,",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1452:                 self.lookahead(2);",
          "1453:             }",
          "1456:             self.lookahead(1);",
          "1458:             while is_blank(self.ch()) || is_break(self.ch()) {",
          "1459:                 if is_blank(self.ch()) {",
          "1464:                     }",
          "1466:                     if leading_blanks {",
          "",
          "[Removed Lines]",
          "1455:             if !(is_blank(self.ch()) || is_break(self.ch())) { break; }",
          "1460:                     if leading_blanks && (self.mark.col as isize) < indent",
          "1461:                         && self.ch() == '\\t' {",
          "1462:                             return Err(ScanError::new(start_mark,",
          "1463:                                 \"while scanning a plain scalar, found a tab\"));",
          "",
          "[Added Lines]",
          "1542:             if !(is_blank(self.ch()) || is_break(self.ch())) {",
          "1543:                 break;",
          "1544:             }",
          "1549:                     if leading_blanks && (self.mark.col as isize) < indent && self.ch() == '\\t' {",
          "1550:                         return Err(ScanError::new(",
          "1551:                             start_mark,",
          "1552:                             \"while scanning a plain scalar, found a tab\",",
          "1553:                         ));",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1493:             self.allow_simple_key();",
          "1494:         }",
          "1497:     }",
          "1499:     fn fetch_key(&mut self) -> ScanResult {",
          "",
          "[Removed Lines]",
          "1496:         Ok(Token(start_mark, TokenType::Scalar(TScalarStyle::Plain, string)))",
          "",
          "[Added Lines]",
          "1586:         Ok(Token(",
          "1587:             start_mark,",
          "1588:             TokenType::Scalar(TScalarStyle::Plain, string),",
          "1589:         ))",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1501:         if self.flow_level == 0 {",
          "1503:             if !self.simple_key_allowed {",
          "1505:             }",
          "1508:         }",
          "1510:         try!(self.remove_simple_key());",
          "",
          "[Removed Lines]",
          "1504:                 return Err(ScanError::new(self.mark, \"mapping keys are not allowed in this context\"));",
          "1506:             self.roll_indent(start_mark.col, None,",
          "1507:                 TokenType::BlockMappingStart, start_mark);",
          "",
          "[Added Lines]",
          "1597:                 return Err(ScanError::new(",
          "1598:                     self.mark,",
          "1599:                     \"mapping keys are not allowed in this context\",",
          "1600:                 ));",
          "1602:             self.roll_indent(",
          "1603:                 start_mark.col,",
          "1604:                 None,",
          "1605:                 TokenType::BlockMappingStart,",
          "1606:                 start_mark,",
          "1607:             );",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1530:             self.insert_token(sk.token_number - tokens_parsed, tok);",
          "1536:             self.simple_keys.last_mut().unwrap().possible = false;",
          "1537:             self.disallow_simple_key();",
          "",
          "[Removed Lines]",
          "1533:             self.roll_indent(sk.mark.col, Some(sk.token_number),",
          "1534:                 TokenType::BlockMappingStart, start_mark);",
          "",
          "[Added Lines]",
          "1633:             self.roll_indent(",
          "1634:                 sk.mark.col,",
          "1635:                 Some(sk.token_number),",
          "1636:                 TokenType::BlockMappingStart,",
          "1637:                 start_mark,",
          "1638:             );",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1540:             if self.flow_level == 0 {",
          "1541:                 if !self.simple_key_allowed {",
          "1544:                 }",
          "1548:             }",
          "1550:             if self.flow_level == 0 {",
          "",
          "[Removed Lines]",
          "1542:                     return Err(ScanError::new(start_mark,",
          "1543:                         \"mapping values are not allowed in this context\"));",
          "1546:                 self.roll_indent(start_mark.col, None,",
          "1547:                     TokenType::BlockMappingStart, start_mark);",
          "",
          "[Added Lines]",
          "1646:                     return Err(ScanError::new(",
          "1647:                         start_mark,",
          "1648:                         \"mapping values are not allowed in this context\",",
          "1649:                     ));",
          "1652:                 self.roll_indent(",
          "1653:                     start_mark.col,",
          "1654:                     None,",
          "1655:                     TokenType::BlockMappingStart,",
          "1656:                     start_mark,",
          "1657:                 );",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1559:         Ok(())",
          "1560:     }",
          "1564:         if self.flow_level > 0 {",
          "1565:             return;",
          "1566:         }",
          "",
          "[Removed Lines]",
          "1562:     fn roll_indent(&mut self, col: usize, number: Option<usize>,",
          "1563:                    tok: TokenType, mark: Marker) {",
          "",
          "[Added Lines]",
          "1672:     fn roll_indent(&mut self, col: usize, number: Option<usize>, tok: TokenType, mark: Marker) {",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1571:             let tokens_parsed = self.tokens_parsed;",
          "1572:             match number {",
          "1573:                 Some(n) => self.insert_token(n - tokens_parsed, Token(mark, tok)),",
          "1575:             }",
          "1576:         }",
          "1577:     }",
          "",
          "[Removed Lines]",
          "1574:                 None => self.tokens.push_back(Token(mark, tok))",
          "",
          "[Added Lines]",
          "1683:                 None => self.tokens.push_back(Token(mark, tok)),",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "1611:         last.possible = false;",
          "1612:         Ok(())",
          "1613:     }",
          "1615: }",
          "1617: #[cfg(test)]",
          "1618: mod test {",
          "1620:     use super::TokenType::*;",
          "1653:     #[test]",
          "1654:     fn test_empty() {",
          "",
          "[Removed Lines]",
          "1619:     use super::*;",
          "1622: macro_rules! next {",
          "1623:     ($p:ident, $tk:pat) => {{",
          "1624:         let tok = $p.next().unwrap();",
          "1625:         match tok.1 {",
          "1626:             $tk => {},",
          "1627:             _ => { panic!(\"unexpected token: {:?}\",",
          "1628:                     tok) }",
          "1629:         }",
          "1630:     }}",
          "1631: }",
          "1633: macro_rules! next_scalar {",
          "1634:     ($p:ident, $tk:expr, $v:expr) => {{",
          "1635:         let tok = $p.next().unwrap();",
          "1636:         match tok.1 {",
          "1637:             Scalar(style, ref v) => {",
          "1638:                 assert_eq!(style, $tk);",
          "1639:                 assert_eq!(v, $v);",
          "1640:             },",
          "1641:             _ => { panic!(\"unexpected token: {:?}\",",
          "1642:                     tok) }",
          "1643:         }",
          "1644:     }}",
          "1645: }",
          "1647: macro_rules! end {",
          "1648:     ($p:ident) => {{",
          "1649:         assert_eq!($p.next(), None);",
          "1650:     }}",
          "1651: }",
          "",
          "[Added Lines]",
          "1728:     use super::*;",
          "1730:     macro_rules! next {",
          "1731:         ($p:ident, $tk:pat) => {{",
          "1732:             let tok = $p.next().unwrap();",
          "1733:             match tok.1 {",
          "1734:                 $tk => {}",
          "1735:                 _ => panic!(\"unexpected token: {:?}\", tok),",
          "1736:             }",
          "1737:         }};",
          "1738:     }",
          "1740:     macro_rules! next_scalar {",
          "1741:         ($p:ident, $tk:expr, $v:expr) => {{",
          "1742:             let tok = $p.next().unwrap();",
          "1743:             match tok.1 {",
          "1744:                 Scalar(style, ref v) => {",
          "1745:                     assert_eq!(style, $tk);",
          "1746:                     assert_eq!(v, $v);",
          "1747:                 }",
          "1748:                 _ => panic!(\"unexpected token: {:?}\", tok),",
          "1749:             }",
          "1750:         }};",
          "1751:     }",
          "1753:     macro_rules! end {",
          "1754:         ($p:ident) => {{",
          "1755:             assert_eq!($p.next(), None);",
          "1756:         }};",
          "1757:     }",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "1672:     #[test]",
          "1673:     fn test_explicit_scalar() {",
          "1676: 'a scalar'",
          "1677: ...",
          "1678: \";",
          "",
          "[Removed Lines]",
          "1674:         let s =",
          "1675: \"---",
          "",
          "[Added Lines]",
          "1780:         let s = \"---",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "1688:     #[test]",
          "1689:     fn test_multiple_documents() {",
          "1692: 'a scalar'",
          "1693: ---",
          "1694: 'a scalar'",
          "",
          "[Removed Lines]",
          "1690:         let s =",
          "1691: \"",
          "",
          "[Added Lines]",
          "1795:         let s = \"",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "1725:     #[test]",
          "1726:     fn test_a_flow_mapping() {",
          "1729: {",
          "1730:     a simple key: a value, # Note that the KEY token is produced.",
          "1731:     ? a complex key: another value,",
          "",
          "[Removed Lines]",
          "1727:         let s =",
          "1728: \"",
          "",
          "[Added Lines]",
          "1831:         let s = \"",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "1752:     #[test]",
          "1753:     fn test_block_sequences() {",
          "1756: - item 1",
          "1757: - item 2",
          "",
          "[Removed Lines]",
          "1754:         let s =",
          "1755: \"",
          "",
          "[Added Lines]",
          "1857:         let s = \"",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "1795:     #[test]",
          "1796:     fn test_block_mappings() {",
          "1799: a simple key: a value   # The KEY token is produced here.",
          "1800: ? a complex key",
          "1801: : another value",
          "",
          "[Removed Lines]",
          "1797:         let s =",
          "1798: \"",
          "",
          "[Added Lines]",
          "1899:         let s = \"",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "1842:         next!(p, BlockEnd);",
          "1843:         next!(p, StreamEnd);",
          "1844:         end!(p);",
          "1846:     }",
          "1848:     #[test]",
          "1849:     fn test_no_block_sequence_start() {",
          "1852: key:",
          "1853: - item 1",
          "1854: - item 2",
          "",
          "[Removed Lines]",
          "1850:         let s =",
          "1851: \"",
          "",
          "[Added Lines]",
          "1950:         let s = \"",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "1871:     #[test]",
          "1872:     fn test_collections_in_sequence() {",
          "1875: - - item 1",
          "1876:   - item 2",
          "1877: - key 1: value 1",
          "",
          "[Removed Lines]",
          "1873:         let s =",
          "1874: \"",
          "",
          "[Added Lines]",
          "1972:         let s = \"",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "1915:     #[test]",
          "1916:     fn test_collections_in_mapping() {",
          "1919: ? a sequence",
          "1920: : - item 1",
          "1921:   - item 2",
          "",
          "[Removed Lines]",
          "1917:         let s =",
          "1918: \"",
          "",
          "[Added Lines]",
          "2015:         let s = \"",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "1956:     #[test]",
          "1957:     fn test_spec_ex7_3() {",
          "1960: {",
          "1961:     ? foo :,",
          "1962:     : bar,",
          "",
          "[Removed Lines]",
          "1958:         let s =",
          "1959: \"",
          "",
          "[Added Lines]",
          "2055:         let s = \"",
          "",
          "---------------"
        ],
        "src/yaml.rs||src/yaml.rs": [
          "File: src/yaml.rs -> src/yaml.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: use std::collections::BTreeMap;",
          "5: use std::f64;",
          "6: use std::mem;",
          "7: use std::vec;",
          "",
          "[Removed Lines]",
          "2: use std::ops::Index;",
          "3: use std::string;",
          "4: use std::i64;",
          "8: use parser::*;",
          "9: use scanner::{TScalarStyle, ScanError, TokenType, Marker};",
          "10: use linked_hash_map::LinkedHashMap;",
          "",
          "[Added Lines]",
          "1: use linked_hash_map::LinkedHashMap;",
          "2: use parser::*;",
          "3: use scanner::{Marker, ScanError, TScalarStyle, TokenType};",
          "6: use std::i64;",
          "8: use std::ops::Index;",
          "9: use std::string;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:         \".inf\" | \".Inf\" | \".INF\" | \"+.inf\" | \"+.Inf\" | \"+.INF\" => Some(f64::INFINITY),",
          "63:         \"-.inf\" | \"-.Inf\" | \"-.INF\" => Some(f64::NEG_INFINITY),",
          "64:         \".nan\" | \"NaN\" | \".NAN\" => Some(f64::NAN),",
          "66:     }",
          "67: }",
          "",
          "[Removed Lines]",
          "65:         _ => v.parse::<f64>().ok()",
          "",
          "[Added Lines]",
          "65:         _ => v.parse::<f64>().ok(),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:         match ev {",
          "82:             Event::DocumentStart => {",
          "85:             Event::DocumentEnd => {",
          "86:                 match self.doc_stack.len() {",
          "88:                     0 => self.docs.push(Yaml::BadValue),",
          "89:                     1 => self.docs.push(self.doc_stack.pop().unwrap().0),",
          "91:                 }",
          "93:             Event::SequenceStart(aid) => {",
          "94:                 self.doc_stack.push((Yaml::Array(Vec::new()), aid));",
          "96:             Event::SequenceEnd => {",
          "97:                 let node = self.doc_stack.pop().unwrap();",
          "98:                 self.insert_new_node(node);",
          "100:             Event::MappingStart(aid) => {",
          "101:                 self.doc_stack.push((Yaml::Hash(Hash::new()), aid));",
          "102:                 self.key_stack.push(Yaml::BadValue);",
          "104:             Event::MappingEnd => {",
          "105:                 self.key_stack.pop().unwrap();",
          "106:                 let node = self.doc_stack.pop().unwrap();",
          "107:                 self.insert_new_node(node);",
          "109:             Event::Scalar(v, style, aid, tag) => {",
          "110:                 let node = if style != TScalarStyle::Plain {",
          "111:                     Yaml::String(v)",
          "",
          "[Removed Lines]",
          "84:             },",
          "90:                     _ => unreachable!()",
          "92:             },",
          "95:             },",
          "99:             },",
          "103:             },",
          "108:             },",
          "",
          "[Added Lines]",
          "84:             }",
          "90:                     _ => unreachable!(),",
          "92:             }",
          "95:             }",
          "99:             }",
          "103:             }",
          "108:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "118:                                 match v.parse::<bool>() {",
          "119:                                     Err(_) => Yaml::BadValue,",
          "121:                                 }",
          "122:                             },",
          "128:                             },",
          "134:                             },",
          "142:                         }",
          "143:                     } else {",
          "144:                         Yaml::String(v)",
          "",
          "[Removed Lines]",
          "120:                                     Ok(v) => Yaml::Boolean(v)",
          "123:                             \"int\" => {",
          "124:                                 match v.parse::<i64>() {",
          "125:                                     Err(_) => Yaml::BadValue,",
          "126:                                     Ok(v) => Yaml::Integer(v)",
          "127:                                 }",
          "129:                             \"float\" => {",
          "130:                                 match parse_f64(&v) {",
          "131:                                     Some(_) => Yaml::Real(v),",
          "132:                                     None => Yaml::BadValue,",
          "133:                                 }",
          "135:                             \"null\" => {",
          "136:                                 match v.as_ref() {",
          "137:                                     \"~\" | \"null\" => Yaml::Null,",
          "138:                                     _ => Yaml::BadValue,",
          "139:                                 }",
          "140:                             }",
          "141:                             _  => Yaml::String(v),",
          "",
          "[Added Lines]",
          "120:                                     Ok(v) => Yaml::Boolean(v),",
          "122:                             }",
          "123:                             \"int\" => match v.parse::<i64>() {",
          "124:                                 Err(_) => Yaml::BadValue,",
          "125:                                 Ok(v) => Yaml::Integer(v),",
          "127:                             \"float\" => match parse_f64(&v) {",
          "128:                                 Some(_) => Yaml::Real(v),",
          "129:                                 None => Yaml::BadValue,",
          "131:                             \"null\" => match v.as_ref() {",
          "132:                                 \"~\" | \"null\" => Yaml::Null,",
          "133:                                 _ => Yaml::BadValue,",
          "135:                             _ => Yaml::String(v),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "149:                 };",
          "151:                 self.insert_new_node((node, aid));",
          "153:             Event::Alias(id) => {",
          "154:                 let n = match self.anchor_map.get(&id) {",
          "155:                     Some(v) => v.clone(),",
          "",
          "[Removed Lines]",
          "152:             },",
          "",
          "[Added Lines]",
          "146:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "186:                         mem::swap(&mut newkey, cur_key);",
          "187:                         h.insert(newkey, node.0);",
          "188:                     }",
          "190:                 _ => unreachable!(),",
          "191:             }",
          "192:         }",
          "193:     }",
          "196:         let mut loader = YamlLoader {",
          "197:             docs: Vec::new(),",
          "198:             doc_stack: Vec::new(),",
          "",
          "[Removed Lines]",
          "189:                 },",
          "195:     pub fn load_from_str(source: &str) -> Result<Vec<Yaml>, ScanError>{",
          "",
          "[Added Lines]",
          "183:                 }",
          "189:     pub fn load_from_str(source: &str) -> Result<Vec<Yaml>, ScanError> {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "255:     pub fn is_null(&self) -> bool {",
          "256:         match *self {",
          "257:             Yaml::Null => true,",
          "259:         }",
          "260:     }",
          "262:     pub fn is_badvalue(&self) -> bool {",
          "263:         match *self {",
          "264:             Yaml::BadValue => true,",
          "266:         }",
          "267:     }",
          "269:     pub fn is_array(&self) -> bool {",
          "270:         match *self {",
          "271:             Yaml::Array(_) => true,",
          "273:         }",
          "274:     }",
          "276:     pub fn as_f64(&self) -> Option<f64> {",
          "277:         match *self {",
          "278:             Yaml::Real(ref v) => parse_f64(v),",
          "280:         }",
          "281:     }",
          "283:     pub fn into_f64(self) -> Option<f64> {",
          "284:         match self {",
          "285:             Yaml::Real(ref v) => parse_f64(v),",
          "287:         }",
          "288:     }",
          "289: }",
          "",
          "[Removed Lines]",
          "258:             _ => false",
          "265:             _ => false",
          "272:             _ => false",
          "279:             _ => None",
          "286:             _ => None",
          "",
          "[Added Lines]",
          "252:             _ => false,",
          "259:             _ => false,",
          "266:             _ => false,",
          "273:             _ => None,",
          "280:             _ => None,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "315:             _ if v.parse::<i64>().is_ok() => Yaml::Integer(v.parse::<i64>().unwrap()),",
          "317:             _ if parse_f64(v).is_some() => Yaml::Real(v.to_owned()),",
          "319:         }",
          "320:     }",
          "321: }",
          "",
          "[Removed Lines]",
          "318:             _ => Yaml::String(v.to_owned())",
          "",
          "[Added Lines]",
          "312:             _ => Yaml::String(v.to_owned()),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "328:         let key = Yaml::String(idx.to_owned());",
          "329:         match self.as_hash() {",
          "330:             Some(h) => h.get(&key).unwrap_or(&BAD_VALUE),",
          "332:         }",
          "333:     }",
          "334: }",
          "",
          "[Removed Lines]",
          "331:             None => &BAD_VALUE",
          "",
          "[Added Lines]",
          "325:             None => &BAD_VALUE,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "355:     fn into_iter(self) -> Self::IntoIter {",
          "356:         YamlIter {",
          "359:         }",
          "360:     }",
          "361: }",
          "",
          "[Removed Lines]",
          "357:             yaml: self.into_vec()",
          "358:                 .unwrap_or_else(Vec::new).into_iter()",
          "",
          "[Added Lines]",
          "351:             yaml: self.into_vec().unwrap_or_else(Vec::new).into_iter(),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "375: #[cfg(test)]",
          "376: mod test {",
          "378:     use std::f64;",
          "379:     #[test]",
          "380:     fn test_coerce() {",
          "381:         let s = \"---",
          "",
          "[Removed Lines]",
          "377:     use yaml::*;",
          "",
          "[Added Lines]",
          "371:     use yaml::*;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "425:     #[test]",
          "426:     fn test_multi_doc() {",
          "429: 'a scalar'",
          "430: ---",
          "431: 'a scalar'",
          "",
          "[Removed Lines]",
          "427:         let s =",
          "428: \"",
          "",
          "[Added Lines]",
          "420:         let s = \"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "439:     #[test]",
          "440:     fn test_anchor() {",
          "443: a1: &DEFAULT",
          "444:     b1: 4",
          "445:     b2: d",
          "",
          "[Removed Lines]",
          "441:         let s =",
          "442: \"",
          "",
          "[Added Lines]",
          "433:         let s = \"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "453:     #[test]",
          "454:     fn test_bad_anchor() {",
          "457: a1: &DEFAULT",
          "458:     b1: 4",
          "459:     b2: *DEFAULT",
          "",
          "[Removed Lines]",
          "455:         let s =",
          "456: \"",
          "",
          "[Added Lines]",
          "446:         let s = \"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "476:     #[test]",
          "477:     fn test_plain_datatype() {",
          "480: - 'string'",
          "481: - \\\"string\\\"",
          "482: - string",
          "",
          "[Removed Lines]",
          "478:         let s =",
          "479: \"",
          "",
          "[Added Lines]",
          "467:         let s = \"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "555:     #[test]",
          "556:     fn test_bad_docstart() {",
          "557:         assert!(YamlLoader::load_from_str(\"---This used to cause an infinite loop\").is_ok());",
          "561:     }",
          "563:     #[test]",
          "564:     fn test_plain_datatype_with_into_methods() {",
          "567: - 'string'",
          "568: - \\\"string\\\"",
          "569: - string",
          "",
          "[Removed Lines]",
          "558:         assert_eq!(YamlLoader::load_from_str(\"----\"), Ok(vec![Yaml::String(String::from(\"----\"))]));",
          "559:         assert_eq!(YamlLoader::load_from_str(\"--- #here goes a comment\"), Ok(vec![Yaml::Null]));",
          "560:         assert_eq!(YamlLoader::load_from_str(\"---- #here goes a comment\"), Ok(vec![Yaml::String(String::from(\"----\"))]));",
          "565:         let s =",
          "566: \"",
          "",
          "[Added Lines]",
          "546:         assert_eq!(",
          "547:             YamlLoader::load_from_str(\"----\"),",
          "548:             Ok(vec![Yaml::String(String::from(\"----\"))])",
          "549:         );",
          "550:         assert_eq!(",
          "551:             YamlLoader::load_from_str(\"--- #here goes a comment\"),",
          "552:             Ok(vec![Yaml::Null])",
          "553:         );",
          "554:         assert_eq!(",
          "555:             YamlLoader::load_from_str(\"---- #here goes a comment\"),",
          "556:             Ok(vec![Yaml::String(String::from(\"----\"))])",
          "557:         );",
          "562:         let s = \"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "620:         let out = YamlLoader::load_from_str(&s).unwrap();",
          "621:         let first = out.into_iter().next().unwrap();",
          "622:         let mut iter = first.into_hash().unwrap().into_iter();",
          "626:         assert_eq!(None, iter.next());",
          "627:     }",
          "",
          "[Removed Lines]",
          "623:         assert_eq!(Some((Yaml::String(\"b\".to_owned()), Yaml::Null)), iter.next());",
          "624:         assert_eq!(Some((Yaml::String(\"a\".to_owned()), Yaml::Null)), iter.next());",
          "625:         assert_eq!(Some((Yaml::String(\"c\".to_owned()), Yaml::Null)), iter.next());",
          "",
          "[Added Lines]",
          "619:         assert_eq!(",
          "620:             Some((Yaml::String(\"b\".to_owned()), Yaml::Null)),",
          "621:             iter.next()",
          "622:         );",
          "623:         assert_eq!(",
          "624:             Some((Yaml::String(\"a\".to_owned()), Yaml::Null)),",
          "625:             iter.next()",
          "626:         );",
          "627:         assert_eq!(",
          "628:             Some((Yaml::String(\"c\".to_owned()), Yaml::Null)),",
          "629:             iter.next()",
          "630:         );",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "642:     #[test]",
          "643:     fn test_indentation_equality() {",
          "646: hash:",
          "647:     with:",
          "648:         indentations",
          "652: hash:",
          "653:   with:",
          "654:     indentations",
          "658: hash:",
          "659:  with:",
          "660:   indentations",
          "664: hash:",
          "665:      with:",
          "666:                indentations",
          "669:         assert_eq!(four_spaces, two_spaces);",
          "670:         assert_eq!(two_spaces, one_space);",
          "",
          "[Removed Lines]",
          "645:         let four_spaces = YamlLoader::load_from_str(r#\"",
          "649: \"#).unwrap().into_iter().next().unwrap();",
          "651:         let two_spaces = YamlLoader::load_from_str(r#\"",
          "655: \"#).unwrap().into_iter().next().unwrap();",
          "657:         let one_space = YamlLoader::load_from_str(r#\"",
          "661: \"#).unwrap().into_iter().next().unwrap();",
          "663:         let mixed_spaces = YamlLoader::load_from_str(r#\"",
          "667: \"#).unwrap().into_iter().next().unwrap();",
          "",
          "[Added Lines]",
          "649:         let four_spaces = YamlLoader::load_from_str(",
          "650:             r#\"",
          "654: \"#,",
          "655:         ).unwrap()",
          "656:         .into_iter()",
          "657:         .next()",
          "658:         .unwrap();",
          "660:         let two_spaces = YamlLoader::load_from_str(",
          "661:             r#\"",
          "665: \"#,",
          "666:         ).unwrap()",
          "667:         .into_iter()",
          "668:         .next()",
          "669:         .unwrap();",
          "671:         let one_space = YamlLoader::load_from_str(",
          "672:             r#\"",
          "676: \"#,",
          "677:         ).unwrap()",
          "678:         .into_iter()",
          "679:         .next()",
          "680:         .unwrap();",
          "682:         let mixed_spaces = YamlLoader::load_from_str(",
          "683:             r#\"",
          "687: \"#,",
          "688:         ).unwrap()",
          "689:         .into_iter()",
          "690:         .next()",
          "691:         .unwrap();",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "691:         let doc = &out.into_iter().next().unwrap();",
          "693:         println!(\"{:#?}\", doc);",
          "695:         assert!(doc[\"subcommands2\"][0][\"server\"].as_hash().is_some());",
          "696:         assert!(doc[\"subcommands3\"][0][\"server\"].as_hash().is_some());",
          "697:     }",
          "",
          "[Removed Lines]",
          "694:         assert_eq!(doc[\"subcommands\"][0][\"server\"],  Yaml::Null);",
          "",
          "[Added Lines]",
          "718:         assert_eq!(doc[\"subcommands\"][0][\"server\"], Yaml::Null);",
          "",
          "---------------"
        ],
        "tests/quickcheck.rs||tests/quickcheck.rs": [
          "File: tests/quickcheck.rs -> tests/quickcheck.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: extern crate quickcheck;",
          "5: use quickcheck::TestResult;",
          "7: use std::error::Error;",
          "9: quickcheck! {",
          "10:     fn test_check_weird_keys(xs: Vec<String>) -> TestResult {",
          "",
          "[Removed Lines]",
          "6: use yaml_rust::{Yaml, YamlLoader, YamlEmitter};",
          "",
          "[Added Lines]",
          "7: use yaml_rust::{Yaml, YamlEmitter, YamlLoader};",
          "",
          "---------------"
        ],
        "tests/spec_test.rs||tests/spec_test.rs": [
          "File: tests/spec_test.rs -> tests/spec_test.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #![allow(non_upper_case_globals)]",
          "3: extern crate yaml_rust;",
          "6: use yaml_rust::scanner::TScalarStyle;",
          "",
          "[Removed Lines]",
          "5: use yaml_rust::parser::{Parser, EventReceiver, Event};",
          "",
          "[Added Lines]",
          "5: use yaml_rust::parser::{Event, EventReceiver, Parser};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: }",
          "23: struct YamlChecker {",
          "25: }",
          "27: impl EventReceiver for YamlChecker {",
          "",
          "[Removed Lines]",
          "24:     pub evs: Vec<TestEvent>",
          "",
          "[Added Lines]",
          "24:     pub evs: Vec<TestEvent>,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "33:             Event::SequenceEnd => TestEvent::OnSequenceEnd,",
          "34:             Event::MappingStart(..) => TestEvent::OnMapStart,",
          "35:             Event::MappingEnd => TestEvent::OnMapEnd,",
          "37:                 if v == \"~\" && style == TScalarStyle::Plain {",
          "38:                     TestEvent::OnNull",
          "39:                 } else {",
          "40:                     TestEvent::OnScalar",
          "41:                 }",
          "43:             Event::Alias(_) => TestEvent::OnAlias,",
          "45:         };",
          "46:         self.evs.push(tev);",
          "47:     }",
          "48: }",
          "50: fn str_to_test_events(docs: &str) -> Vec<TestEvent> {",
          "54:     let mut parser = Parser::new(docs.chars());",
          "55:     parser.load(&mut p, true).unwrap();",
          "56:     p.evs",
          "57: }",
          "59: macro_rules! assert_next {",
          "61:         match $v.next().unwrap() {",
          "64:         }",
          "66: }",
          "",
          "[Removed Lines]",
          "36:             Event::Scalar(ref v, style, _, _)=> {",
          "42:             },",
          "44:             _ => { return } // ignore other events",
          "51:     let mut p = YamlChecker {",
          "52:         evs: Vec::new()",
          "53:     };",
          "60:     ($v:expr, $p:pat) => (",
          "62:             $p => {},",
          "63:             e => { panic!(\"unexpected event: {:?}\", e); }",
          "65:     )",
          "",
          "[Added Lines]",
          "36:             Event::Scalar(ref v, style, _, _) => {",
          "42:             }",
          "44:             _ => return, // ignore other events",
          "51:     let mut p = YamlChecker { evs: Vec::new() };",
          "58:     ($v:expr, $p:pat) => {",
          "60:             $p => {}",
          "61:             e => {",
          "62:                 panic!(\"unexpected event: {:?}\", e);",
          "63:             }",
          "65:     };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77: #[test]",
          "78: fn test_mapvec_legal() {",
          "",
          "[Removed Lines]",
          "79:   use yaml_rust::yaml::{Array, Hash, Yaml};",
          "80:   use yaml_rust::{YamlLoader, YamlEmitter};",
          "85:   let mut key = Array::new();",
          "86:   key.push(Yaml::Integer(1));",
          "87:   key.push(Yaml::Integer(2));",
          "88:   key.push(Yaml::Integer(3));",
          "90:   let mut keyhash = Hash::new();",
          "91:   keyhash.insert(Yaml::String(\"key\".into()), Yaml::Array(key));",
          "93:   let mut val = Array::new();",
          "94:   val.push(Yaml::Integer(4));",
          "95:   val.push(Yaml::Integer(5));",
          "96:   val.push(Yaml::Integer(6));",
          "98:   let mut hash = Hash::new();",
          "99:   hash.insert(Yaml::Hash(keyhash), Yaml::Array(val));",
          "101:   let mut out_str = String::new();",
          "102:   {",
          "103:     let mut emitter = YamlEmitter::new(&mut out_str);",
          "104:     emitter.dump(&Yaml::Hash(hash)).unwrap();",
          "105:   }",
          "139:   YamlLoader::load_from_str(&out_str).unwrap();",
          "140: }",
          "",
          "[Added Lines]",
          "79:     use yaml_rust::yaml::{Array, Hash, Yaml};",
          "80:     use yaml_rust::{YamlEmitter, YamlLoader};",
          "85:     let mut key = Array::new();",
          "86:     key.push(Yaml::Integer(1));",
          "87:     key.push(Yaml::Integer(2));",
          "88:     key.push(Yaml::Integer(3));",
          "90:     let mut keyhash = Hash::new();",
          "91:     keyhash.insert(Yaml::String(\"key\".into()), Yaml::Array(key));",
          "93:     let mut val = Array::new();",
          "94:     val.push(Yaml::Integer(4));",
          "95:     val.push(Yaml::Integer(5));",
          "96:     val.push(Yaml::Integer(6));",
          "98:     let mut hash = Hash::new();",
          "99:     hash.insert(Yaml::Hash(keyhash), Yaml::Array(val));",
          "101:     let mut out_str = String::new();",
          "102:     {",
          "103:         let mut emitter = YamlEmitter::new(&mut out_str);",
          "104:         emitter.dump(&Yaml::Hash(hash)).unwrap();",
          "105:     }",
          "139:     YamlLoader::load_from_str(&out_str).unwrap();",
          "140: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}