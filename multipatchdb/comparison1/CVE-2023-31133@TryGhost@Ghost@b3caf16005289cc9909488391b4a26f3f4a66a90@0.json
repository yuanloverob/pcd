{
  "cve_id": "CVE-2023-31133",
  "cve_desc": "Ghost is an app for new-media creators with tools to build a website, publish content, send newsletters, and offer paid subscriptions to members. Prior to version 5.46.1, due to a lack of validation when filtering on the public API endpoints, it is possible to reveal private fields via a brute force attack.\n\nGhost(Pro) has already been patched. Maintainers can find no evidence that the issue was exploited on Ghost(Pro) prior to the patch being added. Self-hosters are impacted if running Ghost a version below v5.46.1. v5.46.1 contains a fix for this issue. As a workaround, add a block for requests to `/ghost/api/content/*` where the `filter` query parameter contains `password` or `email`.",
  "repo": "TryGhost/Ghost",
  "patch_hash": "b3caf16005289cc9909488391b4a26f3f4a66a90",
  "patch_info": {
    "commit_hash": "b3caf16005289cc9909488391b4a26f3f4a66a90",
    "repo": "TryGhost/Ghost",
    "commit_url": "https://github.com/TryGhost/Ghost/commit/b3caf16005289cc9909488391b4a26f3f4a66a90",
    "files": [
      "ghost/core/core/server/api/endpoints/authors-public.js",
      "ghost/core/core/server/api/endpoints/pages-public.js",
      "ghost/core/core/server/api/endpoints/posts-public.js",
      "ghost/core/test/regression/api/content/authors.test.js",
      "ghost/core/test/regression/api/content/pages.test.js",
      "ghost/core/test/regression/api/content/posts.test.js",
      "ghost/core/test/utils/index.js"
    ],
    "message": "\ud83d\udd12 Fixed filtering on private Author fields in Content API\n\nrefs https://github.com/TryGhost/Ghost/security/advisories/GHSA-r97q-ghch-82j9\n\nBecause our filtering layer is so coupled to the DB and we don't generally\napply restrictions, it was possible to fetch authors and filter by their\npassword or email field. Coupled with the \"starts with\" operator this can be\nused to brute force the first character of these fields by trying random\ncombinations until an author is included in the filter. After which the next\ncharacter can be brute forced, and so on until the data has been leaked\ncompletely.",
    "before_after_code_files": [
      "ghost/core/core/server/api/endpoints/authors-public.js||ghost/core/core/server/api/endpoints/authors-public.js",
      "ghost/core/core/server/api/endpoints/pages-public.js||ghost/core/core/server/api/endpoints/pages-public.js",
      "ghost/core/core/server/api/endpoints/posts-public.js||ghost/core/core/server/api/endpoints/posts-public.js",
      "ghost/core/test/regression/api/content/authors.test.js||ghost/core/test/regression/api/content/authors.test.js",
      "ghost/core/test/regression/api/content/pages.test.js||ghost/core/test/regression/api/content/pages.test.js",
      "ghost/core/test/regression/api/content/posts.test.js||ghost/core/test/regression/api/content/posts.test.js",
      "ghost/core/test/utils/index.js||ghost/core/test/utils/index.js"
    ]
  },
  "patch_diff": {
    "ghost/core/core/server/api/endpoints/authors-public.js||ghost/core/core/server/api/endpoints/authors-public.js": [
      "File: ghost/core/core/server/api/endpoints/authors-public.js -> ghost/core/core/server/api/endpoints/authors-public.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: const Promise = require('bluebird');",
      "2: const tpl = require('@tryghost/tpl');",
      "3: const errors = require('@tryghost/errors');",
      "4: const models = require('../../models');",
      "5: const ALLOWED_INCLUDES = ['count.posts'];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: const {mapQuery} = require('@tryghost/mongo-utils');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "8:     notFound: 'Author not found.'",
      "9: };",
      "11: module.exports = {",
      "12:     docName: 'authors',",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: const rejectPrivateFieldsTransformer = input => mapQuery(input, function (value, key) {",
      "13:     const lowerCaseKey = key.toLowerCase();",
      "14:     if (lowerCaseKey.startsWith('password') || lowerCaseKey.startsWith('email')) {",
      "15:         return;",
      "16:     }",
      "18:     return {",
      "19:         [key]: value",
      "20:     };",
      "21: });",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "29:         },",
      "30:         permissions: true,",
      "31:         query(frame) {",
      "33:         }",
      "34:     },",
      "",
      "[Removed Lines]",
      "32:             return models.Author.findPage(frame.options);",
      "",
      "[Added Lines]",
      "44:             const options = {",
      "45:                 ...frame.options,",
      "46:                 mongoTransformer: rejectPrivateFieldsTransformer",
      "47:             };",
      "48:             return models.Author.findPage(options);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "54:         },",
      "55:         permissions: true,",
      "56:         query(frame) {",
      "58:                 .then((model) => {",
      "59:                     if (!model) {",
      "60:                         return Promise.reject(new errors.NotFoundError({",
      "",
      "[Removed Lines]",
      "57:             return models.Author.findOne(frame.data, frame.options)",
      "",
      "[Added Lines]",
      "73:             const options = {",
      "74:                 ...frame.options,",
      "75:                 mongoTransformer: rejectPrivateFieldsTransformer",
      "76:             };",
      "77:             return models.Author.findOne(frame.data, options)",
      "",
      "---------------"
    ],
    "ghost/core/core/server/api/endpoints/pages-public.js||ghost/core/core/server/api/endpoints/pages-public.js": [
      "File: ghost/core/core/server/api/endpoints/pages-public.js -> ghost/core/core/server/api/endpoints/pages-public.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: const tpl = require('@tryghost/tpl');",
      "2: const errors = require('@tryghost/errors');",
      "3: const models = require('../../models');",
      "5: const ALLOWED_INCLUDES = ['tags', 'authors', 'tiers'];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: const {mapQuery} = require('@tryghost/mongo-utils');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "8:     pageNotFound: 'Page not found.'",
      "9: };",
      "11: module.exports = {",
      "12:     docName: 'pages',",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: const rejectPrivateFieldsTransformer = input => mapQuery(input, function (value, key) {",
      "13:     let lowerCaseKey = key.toLowerCase();",
      "14:     if (lowerCaseKey.startsWith('authors.password') || lowerCaseKey.startsWith('authors.email')) {",
      "15:         return;",
      "16:     }",
      "18:     return {",
      "19:         [key]: value",
      "20:     };",
      "21: });",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "35:         },",
      "36:         permissions: true,",
      "37:         query(frame) {",
      "39:         }",
      "40:     },",
      "",
      "[Removed Lines]",
      "38:             return models.Post.findPage(frame.options);",
      "",
      "[Added Lines]",
      "50:             const options = {",
      "51:                 ...frame.options,",
      "52:                 mongoTransformer: rejectPrivateFieldsTransformer",
      "53:             };",
      "54:             return models.Post.findPage(options);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "64:         },",
      "65:         permissions: true,",
      "66:         query(frame) {",
      "68:                 .then((model) => {",
      "69:                     if (!model) {",
      "70:                         throw new errors.NotFoundError({",
      "",
      "[Removed Lines]",
      "67:             return models.Post.findOne(frame.data, frame.options)",
      "",
      "[Added Lines]",
      "83:             const options = {",
      "84:                 ...frame.options,",
      "85:                 mongoTransformer: rejectPrivateFieldsTransformer",
      "86:             };",
      "87:             return models.Post.findOne(frame.data, options)",
      "",
      "---------------"
    ],
    "ghost/core/core/server/api/endpoints/posts-public.js||ghost/core/core/server/api/endpoints/posts-public.js": [
      "File: ghost/core/core/server/api/endpoints/posts-public.js -> ghost/core/core/server/api/endpoints/posts-public.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: const models = require('../../models');",
      "2: const tpl = require('@tryghost/tpl');",
      "3: const errors = require('@tryghost/errors');",
      "4: const postsPublicService = require('../../services/posts-public');",
      "6: const allowedIncludes = ['tags', 'authors', 'tiers', 'sentiment'];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: const {mapQuery} = require('@tryghost/mongo-utils');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "9:     postNotFound: 'Post not found.'",
      "10: };",
      "12: module.exports = {",
      "13:     docName: 'posts',",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13: const rejectPrivateFieldsTransformer = input => mapQuery(input, function (value, key) {",
      "14:     const lowerCaseKey = key.toLowerCase();",
      "15:     if (lowerCaseKey.startsWith('authors.password') || lowerCaseKey.startsWith('authors.email')) {",
      "16:         return;",
      "17:     }",
      "19:     return {",
      "20:         [key]: value",
      "21:     };",
      "22: });",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "37:         },",
      "38:         permissions: true,",
      "39:         query(frame) {",
      "41:         }",
      "42:     },",
      "",
      "[Removed Lines]",
      "40:             return models.Post.findPage(frame.options);",
      "",
      "[Added Lines]",
      "52:             const options = {",
      "53:                 ...frame.options,",
      "54:                 mongoTransformer: rejectPrivateFieldsTransformer",
      "55:             };",
      "56:             return models.Post.findPage(options);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "66:         },",
      "67:         permissions: true,",
      "68:         query(frame) {",
      "70:                 .then((model) => {",
      "71:                     if (!model) {",
      "72:                         throw new errors.NotFoundError({",
      "",
      "[Removed Lines]",
      "69:             return models.Post.findOne(frame.data, frame.options)",
      "",
      "[Added Lines]",
      "85:             const options = {",
      "86:                 ...frame.options,",
      "87:                 mongoTransformer: rejectPrivateFieldsTransformer",
      "88:             };",
      "89:             return models.Post.findOne(frame.data, options)",
      "",
      "---------------"
    ],
    "ghost/core/test/regression/api/content/authors.test.js||ghost/core/test/regression/api/content/authors.test.js": [
      "File: ghost/core/test/regression/api/content/authors.test.js -> ghost/core/test/regression/api/content/authors.test.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "19:         await configUtils.restore();",
      "20:     });",
      "22:     it('can read authors with fields', function () {",
      "23:         return request.get(localUtils.API.getApiQuery(`authors/1/?key=${validKey}&fields=name`))",
      "24:             .set('Origin', testUtils.API.getURL())",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22:     it('can not filter authors by password', async function () {",
      "23:         const hashedPassword = '$2a$10$FxFlCsNBgXw42cBj0l1GFu39jffibqTqyAGBz7uCLwetYAdBYJEe6';",
      "24:         const userId = '644fd18ca1f0b764b0279b2d';",
      "26:         await testUtils.knex('users').insert({",
      "27:             id: userId,",
      "28:             slug: 'brute-force-password-test-user',",
      "29:             name: 'Brute Force Password Test User',",
      "30:             email: 'bruteforcepasswordtestuser@example.com',",
      "31:             password: hashedPassword,",
      "32:             status: 'active',",
      "33:             created_at: '2019-01-01 00:00:00',",
      "34:             created_by: '1'",
      "35:         });",
      "37:         const {id: postId} = await testUtils.knex('posts').first('id').where('slug', 'welcome');",
      "39:         await testUtils.knex('posts_authors').insert({",
      "40:             id: '644fd18ca1f0b764b0279b2f',",
      "41:             post_id: postId,",
      "42:             author_id: userId",
      "43:         });",
      "45:         const res = await request.get(localUtils.API.getApiQuery(`authors/?key=${validKey}&filter=password:'${hashedPassword}'`))",
      "46:             .set('Origin', testUtils.API.getURL())",
      "47:             .expect('Content-Type', /json/)",
      "48:             .expect('Cache-Control', testUtils.cacheRules.public)",
      "49:             .expect(200);",
      "51:         const data = JSON.parse(res.text);",
      "53:         await testUtils.knex('posts_authors').where('id', '644fd18ca1f0b764b0279b2f').del();",
      "54:         await testUtils.knex('users').where('id', userId).del();",
      "56:         if (data.authors.length === 1) {",
      "57:             throw new Error('fuck');",
      "58:         }",
      "59:     });",
      "61:     it('can not filter authors by email', async function () {",
      "62:         const hashedPassword = '$2a$10$FxFlCsNBgXw42cBj0l1GFu39jffibqTqyAGBz7uCLwetYAdBYJEe6';",
      "63:         const userEmail = 'bruteforcepasswordtestuser@example.com';",
      "64:         const userId = '644fd18ca1f0b764b0279b2d';",
      "66:         await testUtils.knex('users').insert({",
      "67:             id: userId,",
      "68:             slug: 'brute-force-password-test-user',",
      "69:             name: 'Brute Force Password Test User',",
      "70:             email: userEmail,",
      "71:             password: hashedPassword,",
      "72:             status: 'active',",
      "73:             created_at: '2019-01-01 00:00:00',",
      "74:             created_by: '1'",
      "75:         });",
      "77:         const {id: postId} = await testUtils.knex('posts').first('id').where('slug', 'welcome');",
      "79:         await testUtils.knex('posts_authors').insert({",
      "80:             id: '644fd18ca1f0b764b0279b2f',",
      "81:             post_id: postId,",
      "82:             author_id: userId",
      "83:         });",
      "85:         const res = await request.get(localUtils.API.getApiQuery(`authors/?key=${validKey}&filter=email:'${userEmail}'`))",
      "86:             .set('Origin', testUtils.API.getURL())",
      "87:             .expect('Content-Type', /json/)",
      "88:             .expect('Cache-Control', testUtils.cacheRules.public)",
      "89:             .expect(200);",
      "91:         const data = JSON.parse(res.text);",
      "93:         await testUtils.knex('posts_authors').where('id', '644fd18ca1f0b764b0279b2f').del();",
      "94:         await testUtils.knex('users').where('id', userId).del();",
      "96:         if (data.authors.length === 1) {",
      "97:             throw new Error('fuck');",
      "98:         }",
      "99:     });",
      "",
      "---------------"
    ],
    "ghost/core/test/regression/api/content/pages.test.js||ghost/core/test/regression/api/content/pages.test.js": [
      "File: ghost/core/test/regression/api/content/pages.test.js -> ghost/core/test/regression/api/content/pages.test.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "20:         await configUtils.restore();",
      "21:     });",
      "23:     it('Returns a validation error when unsupported \"page\" filter is used', function () {",
      "24:         return request.get(localUtils.API.getApiQuery(`pages/?key=${key}&filter=page:false`))",
      "25:             .set('Origin', testUtils.API.getURL())",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23:     it('can not filter pages by author.password or authors.password', async function () {",
      "24:         const hashedPassword = '$2a$10$FxFlCsNBgXw42cBj0l1GFu39jffibqTqyAGBz7uCLwetYAdBYJEe6';",
      "25:         const userId = '644fd18ca1f0b764b0279b2d';",
      "27:         await testUtils.knex('users').insert({",
      "28:             id: userId,",
      "29:             slug: 'brute-force-password-test-user',",
      "30:             name: 'Brute Force Password Test User',",
      "31:             email: 'bruteforcepasswordtestuseremail@example.com',",
      "32:             password: hashedPassword,",
      "33:             status: 'active',",
      "34:             created_at: '2019-01-01 00:00:00',",
      "35:             created_by: '1'",
      "36:         });",
      "38:         const {id: postId} = await testUtils.knex('posts').first('id').where('type', 'page');",
      "40:         await testUtils.knex('posts_authors').insert({",
      "41:             id: '644fd18ca1f0b764b0279b2f',",
      "42:             post_id: postId,",
      "43:             author_id: userId",
      "44:         });",
      "46:         const res = await request.get(localUtils.API.getApiQuery(`pages/?key=${key}&filter=authors.password:'${hashedPassword}'`))",
      "47:             .set('Origin', testUtils.API.getURL())",
      "48:             .expect('Content-Type', /json/)",
      "49:             .expect('Cache-Control', testUtils.cacheRules.public)",
      "50:             .expect(200);",
      "52:         const data = JSON.parse(res.text);",
      "54:         await testUtils.knex('posts_authors').where('id', '644fd18ca1f0b764b0279b2f').del();",
      "55:         await testUtils.knex('users').where('id', userId).del();",
      "57:         if (data.pages.length === 1) {",
      "58:             throw new Error('fuck');",
      "59:         }",
      "60:     });",
      "62:     it('can not filter pages by author.email or authors.email', async function () {",
      "63:         const hashedPassword = '$2a$10$FxFlCsNBgXw42cBj0l1GFu39jffibqTqyAGBz7uCLwetYAdBYJEe6';",
      "64:         const userEmail = 'bruteforcepasswordtestuseremail@example.com';",
      "65:         const userId = '644fd18ca1f0b764b0279b2d';",
      "67:         await testUtils.knex('users').insert({",
      "68:             id: userId,",
      "69:             slug: 'brute-force-password-test-user',",
      "70:             name: 'Brute Force Password Test User',",
      "71:             email: userEmail,",
      "72:             password: hashedPassword,",
      "73:             status: 'active',",
      "74:             created_at: '2019-01-01 00:00:00',",
      "75:             created_by: '1'",
      "76:         });",
      "78:         const {id: postId} = await testUtils.knex('posts').first('id').where('type', 'page');",
      "80:         await testUtils.knex('posts_authors').insert({",
      "81:             id: '644fd18ca1f0b764b0279b2f',",
      "82:             post_id: postId,",
      "83:             author_id: userId",
      "84:         });",
      "86:         const res = await request.get(localUtils.API.getApiQuery(`pages/?key=${key}&filter=authors.email:'${userEmail}'`))",
      "87:             .set('Origin', testUtils.API.getURL())",
      "88:             .expect('Content-Type', /json/)",
      "89:             .expect('Cache-Control', testUtils.cacheRules.public)",
      "90:             .expect(200);",
      "92:         const data = JSON.parse(res.text);",
      "94:         await testUtils.knex('posts_authors').where('id', '644fd18ca1f0b764b0279b2f').del();",
      "95:         await testUtils.knex('users').where('id', userId).del();",
      "97:         if (data.pages.length === 1) {",
      "98:             throw new Error('fuck');",
      "99:         }",
      "100:     });",
      "",
      "---------------"
    ],
    "ghost/core/test/regression/api/content/posts.test.js||ghost/core/test/regression/api/content/posts.test.js": [
      "File: ghost/core/test/regression/api/content/posts.test.js -> ghost/core/test/regression/api/content/posts.test.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "24:     const validKey = localUtils.getValidKey();",
      "26:     it('browse posts', function (done) {",
      "27:         request.get(localUtils.API.getApiQuery(`posts/?key=${validKey}`))",
      "28:             .set('Origin', testUtils.API.getURL())",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26:     it('can not filter posts by author.password or authors.password', async function () {",
      "27:         const hashedPassword = '$2a$10$FxFlCsNBgXw42cBj0l1GFu39jffibqTqyAGBz7uCLwetYAdBYJEe6';",
      "28:         const userId = '644fd18ca1f0b764b0279b2d';",
      "30:         await testUtils.knex('users').insert({",
      "31:             id: userId,",
      "32:             slug: 'brute-force-password-test-user',",
      "33:             name: 'Brute Force Password Test User',",
      "34:             email: 'bruteforcepasswordtestuseremail@example.com',",
      "35:             password: hashedPassword,",
      "36:             status: 'active',",
      "37:             created_at: '2019-01-01 00:00:00',",
      "38:             created_by: '1'",
      "39:         });",
      "41:         const {id: postId} = await testUtils.knex('posts').first('id').where('slug', 'welcome');",
      "43:         await testUtils.knex('posts_authors').insert({",
      "44:             id: '644fd18ca1f0b764b0279b2f',",
      "45:             post_id: postId,",
      "46:             author_id: userId",
      "47:         });",
      "49:         const res = await request.get(localUtils.API.getApiQuery(`posts/?key=${validKey}&filter=authors.password:'${hashedPassword}'`))",
      "50:             .set('Origin', testUtils.API.getURL())",
      "51:             .expect('Content-Type', /json/)",
      "52:             .expect('Cache-Control', testUtils.cacheRules.public)",
      "53:             .expect(200);",
      "55:         const data = JSON.parse(res.text);",
      "57:         await testUtils.knex('posts_authors').where('id', '644fd18ca1f0b764b0279b2f').del();",
      "58:         await testUtils.knex('users').where('id', userId).del();",
      "60:         if (data.posts.length === 1) {",
      "61:             throw new Error('fuck');",
      "62:         }",
      "63:     });",
      "65:     it('can not filter posts by author.email or authors.email', async function () {",
      "66:         const hashedPassword = '$2a$10$FxFlCsNBgXw42cBj0l1GFu39jffibqTqyAGBz7uCLwetYAdBYJEe6';",
      "67:         const userEmail = 'bruteforcepasswordtestuseremail@example.com';",
      "68:         const userId = '644fd18ca1f0b764b0279b2d';",
      "70:         await testUtils.knex('users').insert({",
      "71:             id: userId,",
      "72:             slug: 'brute-force-password-test-user',",
      "73:             name: 'Brute Force Password Test User',",
      "74:             email: userEmail,",
      "75:             password: hashedPassword,",
      "76:             status: 'active',",
      "77:             created_at: '2019-01-01 00:00:00',",
      "78:             created_by: '1'",
      "79:         });",
      "81:         const {id: postId} = await testUtils.knex('posts').first('id').where('slug', 'welcome');",
      "83:         await testUtils.knex('posts_authors').insert({",
      "84:             id: '644fd18ca1f0b764b0279b2f',",
      "85:             post_id: postId,",
      "86:             author_id: userId",
      "87:         });",
      "89:         const res = await request.get(localUtils.API.getApiQuery(`posts/?key=${validKey}&filter=authors.email:'${userEmail}'`))",
      "90:             .set('Origin', testUtils.API.getURL())",
      "91:             .expect('Content-Type', /json/)",
      "92:             .expect('Cache-Control', testUtils.cacheRules.public)",
      "93:             .expect(200);",
      "95:         const data = JSON.parse(res.text);",
      "97:         await testUtils.knex('posts_authors').where('id', '644fd18ca1f0b764b0279b2f').del();",
      "98:         await testUtils.knex('users').where('id', userId).del();",
      "100:         if (data.posts.length === 1) {",
      "101:             throw new Error('fuck');",
      "102:         }",
      "103:     });",
      "",
      "---------------"
    ],
    "ghost/core/test/utils/index.js||ghost/core/test/utils/index.js": [
      "File: ghost/core/test/utils/index.js -> ghost/core/test/utils/index.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "100:     teardownDb: dbUtils.teardown,",
      "101:     truncate: dbUtils.truncate,",
      "102:     setup: setup,",
      "103:     createUser: createUser,",
      "104:     createPost: createPost,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "102:     knex: dbUtils.knex,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a22717a8e7916760b3b45d4a95c6fa3620a465bc",
      "candidate_info": {
        "commit_hash": "a22717a8e7916760b3b45d4a95c6fa3620a465bc",
        "repo": "TryGhost/Ghost",
        "commit_url": "https://github.com/TryGhost/Ghost/commit/a22717a8e7916760b3b45d4a95c6fa3620a465bc",
        "files": [
          "ghost/core/core/server/api/endpoints/authors-public.js",
          "ghost/core/core/server/api/endpoints/pages-public.js",
          "ghost/core/core/server/api/endpoints/posts-public.js",
          "ghost/core/test/regression/api/content/authors.test.js",
          "ghost/core/test/regression/api/content/pages.test.js",
          "ghost/core/test/regression/api/content/posts.test.js",
          "ghost/core/test/utils/index.js"
        ],
        "message": "\ud83d\udd12 Fixed filtering on private Author fields in Content API\n\nrefs https://github.com/TryGhost/Ghost/security/advisories/GHSA-r97q-ghch-82j9\n\nBecause our filtering layer is so coupled to the DB and we don't generally\napply restrictions, it was possible to fetch authors and filter by their\npassword or email field. Coupled with the \"starts with\" operator this can be\nused to brute force the first character of these fields by trying random\ncombinations until an author is included in the filter. After which the next\ncharacter can be brute forced, and so on until the data has been leaked\ncompletely.",
        "before_after_code_files": [
          "ghost/core/core/server/api/endpoints/authors-public.js||ghost/core/core/server/api/endpoints/authors-public.js",
          "ghost/core/core/server/api/endpoints/pages-public.js||ghost/core/core/server/api/endpoints/pages-public.js",
          "ghost/core/core/server/api/endpoints/posts-public.js||ghost/core/core/server/api/endpoints/posts-public.js",
          "ghost/core/test/regression/api/content/authors.test.js||ghost/core/test/regression/api/content/authors.test.js",
          "ghost/core/test/regression/api/content/pages.test.js||ghost/core/test/regression/api/content/pages.test.js",
          "ghost/core/test/regression/api/content/posts.test.js||ghost/core/test/regression/api/content/posts.test.js",
          "ghost/core/test/utils/index.js||ghost/core/test/utils/index.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/TryGhost/Ghost/pull/16735"
        ],
        "olp_code_files": {
          "patch": [
            "ghost/core/core/server/api/endpoints/authors-public.js||ghost/core/core/server/api/endpoints/authors-public.js",
            "ghost/core/core/server/api/endpoints/pages-public.js||ghost/core/core/server/api/endpoints/pages-public.js",
            "ghost/core/core/server/api/endpoints/posts-public.js||ghost/core/core/server/api/endpoints/posts-public.js",
            "ghost/core/test/regression/api/content/authors.test.js||ghost/core/test/regression/api/content/authors.test.js",
            "ghost/core/test/regression/api/content/pages.test.js||ghost/core/test/regression/api/content/pages.test.js",
            "ghost/core/test/regression/api/content/posts.test.js||ghost/core/test/regression/api/content/posts.test.js",
            "ghost/core/test/utils/index.js||ghost/core/test/utils/index.js"
          ],
          "candidate": [
            "ghost/core/core/server/api/endpoints/authors-public.js||ghost/core/core/server/api/endpoints/authors-public.js",
            "ghost/core/core/server/api/endpoints/pages-public.js||ghost/core/core/server/api/endpoints/pages-public.js",
            "ghost/core/core/server/api/endpoints/posts-public.js||ghost/core/core/server/api/endpoints/posts-public.js",
            "ghost/core/test/regression/api/content/authors.test.js||ghost/core/test/regression/api/content/authors.test.js",
            "ghost/core/test/regression/api/content/pages.test.js||ghost/core/test/regression/api/content/pages.test.js",
            "ghost/core/test/regression/api/content/posts.test.js||ghost/core/test/regression/api/content/posts.test.js",
            "ghost/core/test/utils/index.js||ghost/core/test/utils/index.js"
          ]
        }
      },
      "candidate_diff": {
        "ghost/core/core/server/api/endpoints/authors-public.js||ghost/core/core/server/api/endpoints/authors-public.js": [
          "File: ghost/core/core/server/api/endpoints/authors-public.js -> ghost/core/core/server/api/endpoints/authors-public.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: const Promise = require('bluebird');",
          "2: const tpl = require('@tryghost/tpl');",
          "3: const errors = require('@tryghost/errors');",
          "4: const models = require('../../models');",
          "5: const ALLOWED_INCLUDES = ['count.posts'];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: const {mapQuery} = require('@tryghost/mongo-utils');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8:     notFound: 'Author not found.'",
          "9: };",
          "11: module.exports = {",
          "12:     docName: 'authors',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: const rejectPrivateFieldsTransformer = input => mapQuery(input, function (value, key) {",
          "13:     const lowerCaseKey = key.toLowerCase();",
          "14:     if (lowerCaseKey.startsWith('password') || lowerCaseKey.startsWith('email')) {",
          "15:         return;",
          "16:     }",
          "18:     return {",
          "19:         [key]: value",
          "20:     };",
          "21: });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "29:         },",
          "30:         permissions: true,",
          "31:         query(frame) {",
          "33:         }",
          "34:     },",
          "",
          "[Removed Lines]",
          "32:             return models.Author.findPage(frame.options);",
          "",
          "[Added Lines]",
          "44:             const options = {",
          "45:                 ...frame.options,",
          "46:                 mongoTransformer: rejectPrivateFieldsTransformer",
          "47:             };",
          "48:             return models.Author.findPage(options);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "54:         },",
          "55:         permissions: true,",
          "56:         query(frame) {",
          "58:                 .then((model) => {",
          "59:                     if (!model) {",
          "60:                         return Promise.reject(new errors.NotFoundError({",
          "",
          "[Removed Lines]",
          "57:             return models.Author.findOne(frame.data, frame.options)",
          "",
          "[Added Lines]",
          "73:             const options = {",
          "74:                 ...frame.options,",
          "75:                 mongoTransformer: rejectPrivateFieldsTransformer",
          "76:             };",
          "77:             return models.Author.findOne(frame.data, options)",
          "",
          "---------------"
        ],
        "ghost/core/core/server/api/endpoints/pages-public.js||ghost/core/core/server/api/endpoints/pages-public.js": [
          "File: ghost/core/core/server/api/endpoints/pages-public.js -> ghost/core/core/server/api/endpoints/pages-public.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: const tpl = require('@tryghost/tpl');",
          "2: const errors = require('@tryghost/errors');",
          "3: const models = require('../../models');",
          "5: const ALLOWED_INCLUDES = ['tags', 'authors', 'tiers'];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: const {mapQuery} = require('@tryghost/mongo-utils');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8:     pageNotFound: 'Page not found.'",
          "9: };",
          "11: module.exports = {",
          "12:     docName: 'pages',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: const rejectPrivateFieldsTransformer = input => mapQuery(input, function (value, key) {",
          "13:     let lowerCaseKey = key.toLowerCase();",
          "14:     if (lowerCaseKey.startsWith('authors.password') || lowerCaseKey.startsWith('authors.email')) {",
          "15:         return;",
          "16:     }",
          "18:     return {",
          "19:         [key]: value",
          "20:     };",
          "21: });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35:         },",
          "36:         permissions: true,",
          "37:         query(frame) {",
          "39:         }",
          "40:     },",
          "",
          "[Removed Lines]",
          "38:             return models.Post.findPage(frame.options);",
          "",
          "[Added Lines]",
          "50:             const options = {",
          "51:                 ...frame.options,",
          "52:                 mongoTransformer: rejectPrivateFieldsTransformer",
          "53:             };",
          "54:             return models.Post.findPage(options);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "64:         },",
          "65:         permissions: true,",
          "66:         query(frame) {",
          "68:                 .then((model) => {",
          "69:                     if (!model) {",
          "70:                         throw new errors.NotFoundError({",
          "",
          "[Removed Lines]",
          "67:             return models.Post.findOne(frame.data, frame.options)",
          "",
          "[Added Lines]",
          "83:             const options = {",
          "84:                 ...frame.options,",
          "85:                 mongoTransformer: rejectPrivateFieldsTransformer",
          "86:             };",
          "87:             return models.Post.findOne(frame.data, options)",
          "",
          "---------------"
        ],
        "ghost/core/core/server/api/endpoints/posts-public.js||ghost/core/core/server/api/endpoints/posts-public.js": [
          "File: ghost/core/core/server/api/endpoints/posts-public.js -> ghost/core/core/server/api/endpoints/posts-public.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: const models = require('../../models');",
          "2: const tpl = require('@tryghost/tpl');",
          "3: const errors = require('@tryghost/errors');",
          "4: const postsPublicService = require('../../services/posts-public');",
          "6: const allowedIncludes = ['tags', 'authors', 'tiers', 'sentiment'];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: const {mapQuery} = require('@tryghost/mongo-utils');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9:     postNotFound: 'Post not found.'",
          "10: };",
          "12: module.exports = {",
          "13:     docName: 'posts',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: const rejectPrivateFieldsTransformer = input => mapQuery(input, function (value, key) {",
          "14:     const lowerCaseKey = key.toLowerCase();",
          "15:     if (lowerCaseKey.startsWith('authors.password') || lowerCaseKey.startsWith('authors.email')) {",
          "16:         return;",
          "17:     }",
          "19:     return {",
          "20:         [key]: value",
          "21:     };",
          "22: });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37:         },",
          "38:         permissions: true,",
          "39:         query(frame) {",
          "41:         }",
          "42:     },",
          "",
          "[Removed Lines]",
          "40:             return models.Post.findPage(frame.options);",
          "",
          "[Added Lines]",
          "52:             const options = {",
          "53:                 ...frame.options,",
          "54:                 mongoTransformer: rejectPrivateFieldsTransformer",
          "55:             };",
          "56:             return models.Post.findPage(options);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "66:         },",
          "67:         permissions: true,",
          "68:         query(frame) {",
          "70:                 .then((model) => {",
          "71:                     if (!model) {",
          "72:                         throw new errors.NotFoundError({",
          "",
          "[Removed Lines]",
          "69:             return models.Post.findOne(frame.data, frame.options)",
          "",
          "[Added Lines]",
          "85:             const options = {",
          "86:                 ...frame.options,",
          "87:                 mongoTransformer: rejectPrivateFieldsTransformer",
          "88:             };",
          "89:             return models.Post.findOne(frame.data, options)",
          "",
          "---------------"
        ],
        "ghost/core/test/regression/api/content/authors.test.js||ghost/core/test/regression/api/content/authors.test.js": [
          "File: ghost/core/test/regression/api/content/authors.test.js -> ghost/core/test/regression/api/content/authors.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:         await configUtils.restore();",
          "20:     });",
          "22:     it('can read authors with fields', function () {",
          "23:         return request.get(localUtils.API.getApiQuery(`authors/1/?key=${validKey}&fields=name`))",
          "24:             .set('Origin', testUtils.API.getURL())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:     it('can not filter authors by password', async function () {",
          "23:         const hashedPassword = '$2a$10$FxFlCsNBgXw42cBj0l1GFu39jffibqTqyAGBz7uCLwetYAdBYJEe6';",
          "24:         const userId = '644fd18ca1f0b764b0279b2d';",
          "26:         await testUtils.knex('users').insert({",
          "27:             id: userId,",
          "28:             slug: 'brute-force-password-test-user',",
          "29:             name: 'Brute Force Password Test User',",
          "30:             email: 'bruteforcepasswordtestuser@example.com',",
          "31:             password: hashedPassword,",
          "32:             status: 'active',",
          "33:             created_at: '2019-01-01 00:00:00',",
          "34:             created_by: '1'",
          "35:         });",
          "37:         const {id: postId} = await testUtils.knex('posts').first('id').where('slug', 'welcome');",
          "39:         await testUtils.knex('posts_authors').insert({",
          "40:             id: '644fd18ca1f0b764b0279b2f',",
          "41:             post_id: postId,",
          "42:             author_id: userId",
          "43:         });",
          "45:         const res = await request.get(localUtils.API.getApiQuery(`authors/?key=${validKey}&filter=password:'${hashedPassword}'`))",
          "46:             .set('Origin', testUtils.API.getURL())",
          "47:             .expect('Content-Type', /json/)",
          "48:             .expect('Cache-Control', testUtils.cacheRules.public)",
          "49:             .expect(200);",
          "51:         const data = JSON.parse(res.text);",
          "53:         await testUtils.knex('posts_authors').where('id', '644fd18ca1f0b764b0279b2f').del();",
          "54:         await testUtils.knex('users').where('id', userId).del();",
          "56:         if (data.authors.length === 1) {",
          "57:             throw new Error('fuck');",
          "58:         }",
          "59:     });",
          "61:     it('can not filter authors by email', async function () {",
          "62:         const hashedPassword = '$2a$10$FxFlCsNBgXw42cBj0l1GFu39jffibqTqyAGBz7uCLwetYAdBYJEe6';",
          "63:         const userEmail = 'bruteforcepasswordtestuser@example.com';",
          "64:         const userId = '644fd18ca1f0b764b0279b2d';",
          "66:         await testUtils.knex('users').insert({",
          "67:             id: userId,",
          "68:             slug: 'brute-force-password-test-user',",
          "69:             name: 'Brute Force Password Test User',",
          "70:             email: userEmail,",
          "71:             password: hashedPassword,",
          "72:             status: 'active',",
          "73:             created_at: '2019-01-01 00:00:00',",
          "74:             created_by: '1'",
          "75:         });",
          "77:         const {id: postId} = await testUtils.knex('posts').first('id').where('slug', 'welcome');",
          "79:         await testUtils.knex('posts_authors').insert({",
          "80:             id: '644fd18ca1f0b764b0279b2f',",
          "81:             post_id: postId,",
          "82:             author_id: userId",
          "83:         });",
          "85:         const res = await request.get(localUtils.API.getApiQuery(`authors/?key=${validKey}&filter=email:'${userEmail}'`))",
          "86:             .set('Origin', testUtils.API.getURL())",
          "87:             .expect('Content-Type', /json/)",
          "88:             .expect('Cache-Control', testUtils.cacheRules.public)",
          "89:             .expect(200);",
          "91:         const data = JSON.parse(res.text);",
          "93:         await testUtils.knex('posts_authors').where('id', '644fd18ca1f0b764b0279b2f').del();",
          "94:         await testUtils.knex('users').where('id', userId).del();",
          "96:         if (data.authors.length === 1) {",
          "97:             throw new Error('fuck');",
          "98:         }",
          "99:     });",
          "",
          "---------------"
        ],
        "ghost/core/test/regression/api/content/pages.test.js||ghost/core/test/regression/api/content/pages.test.js": [
          "File: ghost/core/test/regression/api/content/pages.test.js -> ghost/core/test/regression/api/content/pages.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:         await configUtils.restore();",
          "21:     });",
          "23:     it('Returns a validation error when unsupported \"page\" filter is used', function () {",
          "24:         return request.get(localUtils.API.getApiQuery(`pages/?key=${key}&filter=page:false`))",
          "25:             .set('Origin', testUtils.API.getURL())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:     it('can not filter pages by author.password or authors.password', async function () {",
          "24:         const hashedPassword = '$2a$10$FxFlCsNBgXw42cBj0l1GFu39jffibqTqyAGBz7uCLwetYAdBYJEe6';",
          "25:         const userId = '644fd18ca1f0b764b0279b2d';",
          "27:         await testUtils.knex('users').insert({",
          "28:             id: userId,",
          "29:             slug: 'brute-force-password-test-user',",
          "30:             name: 'Brute Force Password Test User',",
          "31:             email: 'bruteforcepasswordtestuseremail@example.com',",
          "32:             password: hashedPassword,",
          "33:             status: 'active',",
          "34:             created_at: '2019-01-01 00:00:00',",
          "35:             created_by: '1'",
          "36:         });",
          "38:         const {id: postId} = await testUtils.knex('posts').first('id').where('type', 'page');",
          "40:         await testUtils.knex('posts_authors').insert({",
          "41:             id: '644fd18ca1f0b764b0279b2f',",
          "42:             post_id: postId,",
          "43:             author_id: userId",
          "44:         });",
          "46:         const res = await request.get(localUtils.API.getApiQuery(`pages/?key=${key}&filter=authors.password:'${hashedPassword}'`))",
          "47:             .set('Origin', testUtils.API.getURL())",
          "48:             .expect('Content-Type', /json/)",
          "49:             .expect('Cache-Control', testUtils.cacheRules.public)",
          "50:             .expect(200);",
          "52:         const data = JSON.parse(res.text);",
          "54:         await testUtils.knex('posts_authors').where('id', '644fd18ca1f0b764b0279b2f').del();",
          "55:         await testUtils.knex('users').where('id', userId).del();",
          "57:         if (data.pages.length === 1) {",
          "58:             throw new Error('fuck');",
          "59:         }",
          "60:     });",
          "62:     it('can not filter pages by author.email or authors.email', async function () {",
          "63:         const hashedPassword = '$2a$10$FxFlCsNBgXw42cBj0l1GFu39jffibqTqyAGBz7uCLwetYAdBYJEe6';",
          "64:         const userEmail = 'bruteforcepasswordtestuseremail@example.com';",
          "65:         const userId = '644fd18ca1f0b764b0279b2d';",
          "67:         await testUtils.knex('users').insert({",
          "68:             id: userId,",
          "69:             slug: 'brute-force-password-test-user',",
          "70:             name: 'Brute Force Password Test User',",
          "71:             email: userEmail,",
          "72:             password: hashedPassword,",
          "73:             status: 'active',",
          "74:             created_at: '2019-01-01 00:00:00',",
          "75:             created_by: '1'",
          "76:         });",
          "78:         const {id: postId} = await testUtils.knex('posts').first('id').where('type', 'page');",
          "80:         await testUtils.knex('posts_authors').insert({",
          "81:             id: '644fd18ca1f0b764b0279b2f',",
          "82:             post_id: postId,",
          "83:             author_id: userId",
          "84:         });",
          "86:         const res = await request.get(localUtils.API.getApiQuery(`pages/?key=${key}&filter=authors.email:'${userEmail}'`))",
          "87:             .set('Origin', testUtils.API.getURL())",
          "88:             .expect('Content-Type', /json/)",
          "89:             .expect('Cache-Control', testUtils.cacheRules.public)",
          "90:             .expect(200);",
          "92:         const data = JSON.parse(res.text);",
          "94:         await testUtils.knex('posts_authors').where('id', '644fd18ca1f0b764b0279b2f').del();",
          "95:         await testUtils.knex('users').where('id', userId).del();",
          "97:         if (data.pages.length === 1) {",
          "98:             throw new Error('fuck');",
          "99:         }",
          "100:     });",
          "",
          "---------------"
        ],
        "ghost/core/test/regression/api/content/posts.test.js||ghost/core/test/regression/api/content/posts.test.js": [
          "File: ghost/core/test/regression/api/content/posts.test.js -> ghost/core/test/regression/api/content/posts.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     const validKey = localUtils.getValidKey();",
          "26:     it('browse posts', function (done) {",
          "27:         request.get(localUtils.API.getApiQuery(`posts/?key=${validKey}`))",
          "28:             .set('Origin', testUtils.API.getURL())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:     it('can not filter posts by author.password or authors.password', async function () {",
          "27:         const hashedPassword = '$2a$10$FxFlCsNBgXw42cBj0l1GFu39jffibqTqyAGBz7uCLwetYAdBYJEe6';",
          "28:         const userId = '644fd18ca1f0b764b0279b2d';",
          "30:         await testUtils.knex('users').insert({",
          "31:             id: userId,",
          "32:             slug: 'brute-force-password-test-user',",
          "33:             name: 'Brute Force Password Test User',",
          "34:             email: 'bruteforcepasswordtestuseremail@example.com',",
          "35:             password: hashedPassword,",
          "36:             status: 'active',",
          "37:             created_at: '2019-01-01 00:00:00',",
          "38:             created_by: '1'",
          "39:         });",
          "41:         const {id: postId} = await testUtils.knex('posts').first('id').where('slug', 'welcome');",
          "43:         await testUtils.knex('posts_authors').insert({",
          "44:             id: '644fd18ca1f0b764b0279b2f',",
          "45:             post_id: postId,",
          "46:             author_id: userId",
          "47:         });",
          "49:         const res = await request.get(localUtils.API.getApiQuery(`posts/?key=${validKey}&filter=authors.password:'${hashedPassword}'`))",
          "50:             .set('Origin', testUtils.API.getURL())",
          "51:             .expect('Content-Type', /json/)",
          "52:             .expect('Cache-Control', testUtils.cacheRules.public)",
          "53:             .expect(200);",
          "55:         const data = JSON.parse(res.text);",
          "57:         await testUtils.knex('posts_authors').where('id', '644fd18ca1f0b764b0279b2f').del();",
          "58:         await testUtils.knex('users').where('id', userId).del();",
          "60:         if (data.posts.length === 1) {",
          "61:             throw new Error('fuck');",
          "62:         }",
          "63:     });",
          "65:     it('can not filter posts by author.email or authors.email', async function () {",
          "66:         const hashedPassword = '$2a$10$FxFlCsNBgXw42cBj0l1GFu39jffibqTqyAGBz7uCLwetYAdBYJEe6';",
          "67:         const userEmail = 'bruteforcepasswordtestuseremail@example.com';",
          "68:         const userId = '644fd18ca1f0b764b0279b2d';",
          "70:         await testUtils.knex('users').insert({",
          "71:             id: userId,",
          "72:             slug: 'brute-force-password-test-user',",
          "73:             name: 'Brute Force Password Test User',",
          "74:             email: userEmail,",
          "75:             password: hashedPassword,",
          "76:             status: 'active',",
          "77:             created_at: '2019-01-01 00:00:00',",
          "78:             created_by: '1'",
          "79:         });",
          "81:         const {id: postId} = await testUtils.knex('posts').first('id').where('slug', 'welcome');",
          "83:         await testUtils.knex('posts_authors').insert({",
          "84:             id: '644fd18ca1f0b764b0279b2f',",
          "85:             post_id: postId,",
          "86:             author_id: userId",
          "87:         });",
          "89:         const res = await request.get(localUtils.API.getApiQuery(`posts/?key=${validKey}&filter=authors.email:'${userEmail}'`))",
          "90:             .set('Origin', testUtils.API.getURL())",
          "91:             .expect('Content-Type', /json/)",
          "92:             .expect('Cache-Control', testUtils.cacheRules.public)",
          "93:             .expect(200);",
          "95:         const data = JSON.parse(res.text);",
          "97:         await testUtils.knex('posts_authors').where('id', '644fd18ca1f0b764b0279b2f').del();",
          "98:         await testUtils.knex('users').where('id', userId).del();",
          "100:         if (data.posts.length === 1) {",
          "101:             throw new Error('fuck');",
          "102:         }",
          "103:     });",
          "",
          "---------------"
        ],
        "ghost/core/test/utils/index.js||ghost/core/test/utils/index.js": [
          "File: ghost/core/test/utils/index.js -> ghost/core/test/utils/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:     teardownDb: dbUtils.teardown,",
          "101:     truncate: dbUtils.truncate,",
          "102:     setup: setup,",
          "103:     createUser: createUser,",
          "104:     createPost: createPost,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:     knex: dbUtils.knex,",
          "",
          "---------------"
        ]
      }
    }
  ]
}