{
  "cve_id": "CVE-2022-46651",
  "cve_desc": "Apache Airflow, versions before 2.6.3, is affected by a vulnerability that allows an unauthorized actor to gain access to sensitive information in Connection edit view. This vulnerability is considered low since it requires someone with access to Connection resources specifically updating the connection to exploit it. Users should upgrade to version 2.6.3 or later which has removed the vulnerability.\n",
  "repo": "apache/airflow",
  "patch_hash": "d01248382fe45a5f5a7fdeed4082a80c5f814ad8",
  "patch_info": {
    "commit_hash": "d01248382fe45a5f5a7fdeed4082a80c5f814ad8",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/d01248382fe45a5f5a7fdeed4082a80c5f814ad8",
    "files": [
      "airflow/providers_manager.py",
      "airflow/www/views.py",
      "tests/www/views/test_views_connection.py"
    ],
    "message": "Hide sensitive values from extra in connection edit form (#32309)\n\nThe fields that are sensitive (i.e password field is used\nto show them in Connection edit view) should also be hidden\nwhen they are stored as \"extra\" in the form extra field.\n\nThis PR handles both - replacing such values with a\nplaceholder as well as not updating the value if the\nplaceholder has not been modified.",
    "before_after_code_files": [
      "airflow/providers_manager.py||airflow/providers_manager.py",
      "airflow/www/views.py||airflow/www/views.py",
      "tests/www/views/test_views_connection.py||tests/www/views/test_views_connection.py"
    ]
  },
  "patch_diff": {
    "airflow/providers_manager.py||airflow/providers_manager.py": [
      "File: airflow/providers_manager.py -> airflow/providers_manager.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "223:     package_name: str",
      "224:     field: Any",
      "225:     field_name: str",
      "228: T = TypeVar(\"T\", bound=Callable)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "226:     is_sensitive: bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "882:                 # In case of inherited hooks this might be happening several times",
      "883:                 continue",
      "884:             self._connection_form_widgets[prefixed_field_name] = ConnectionFormWidgetInfo(",
      "886:             )",
      "888:     def _add_customized_fields(self, package_name: str, hook_class: type, customized_fields: dict):",
      "",
      "[Removed Lines]",
      "885:                 hook_class.__name__, package_name, field, field_identifier",
      "",
      "[Added Lines]",
      "886:                 hook_class.__name__,",
      "887:                 package_name,",
      "888:                 field,",
      "889:                 field_identifier,",
      "890:                 hasattr(field.field_class.widget, \"input_type\")",
      "891:                 and field.field_class.widget.input_type == \"password\",",
      "",
      "---------------"
    ],
    "airflow/www/views.py||airflow/www/views.py": [
      "File: airflow/www/views.py -> airflow/www/views.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "88: from airflow.exceptions import (",
      "89:     AirflowConfigException,",
      "90:     AirflowException,",
      "91:     ParamValidationError,",
      "92:     RemovedInAirflow3Warning,",
      "93: )",
      "94: from airflow.executors.executor_loader import ExecutorLoader",
      "95: from airflow.jobs.job import Job",
      "96: from airflow.jobs.scheduler_job_runner import SchedulerJobRunner",
      "97: from airflow.jobs.triggerer_job_runner import TriggererJobRunner",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "91:     AirflowNotFoundException,",
      "96: from airflow.hooks.base import BaseHook",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "147:     \"} else {xLabel = d3.time.format('%H:%M, %d %b')(new Date(parseInt(d)));} return xLabel;}\"",
      "148: )",
      "151: def sanitize_args(args: dict[str, str]) -> dict[str, str]:",
      "152:     \"\"\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "152: SENSITIVE_FIELD_PLACEHOLDER = \"RATHER_LONG_SENSITIVE_FIELD_PLACEHOLDER\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4658:     base_order = (\"conn_id\", \"asc\")",
      "4661:         \"\"\"Iterate through provider-backed connection fields.",
      "4663:         Note that this cannot be a property (including a cached property)",
      "4664:         because Flask-Appbuilder attempts to access all members on startup, and",
      "4665:         using a property would initialize the providers manager too eagerly.",
      "4666:         \"\"\"",
      "4669:     @property",
      "4670:     def add_columns(self) -> list[str]:",
      "",
      "[Removed Lines]",
      "4660:     def _iter_extra_field_names(self) -> Iterator[tuple[str, str]]:",
      "4667:         return ((k, v.field_name) for k, v in ProvidersManager().connection_form_widgets.items())",
      "",
      "[Added Lines]",
      "4664:     def _iter_extra_field_names_and_sensitivity(self) -> Iterator[tuple[str, str, bool]]:",
      "4671:         Returns tuple of:",
      "4677:         return (",
      "4678:             (k, v.field_name, v.is_sensitive) for k, v in ProvidersManager().connection_form_widgets.items()",
      "4679:         )",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4677:         superfuluous checks done by Flask-Appbuilder on startup).",
      "4678:         \"\"\"",
      "4679:         if self._add_columns is type(self)._add_columns and has_request_context():",
      "4681:         return self._add_columns",
      "4683:     @property",
      "",
      "[Removed Lines]",
      "4680:             self._add_columns = [*self._add_columns, *(k for k, _ in self._iter_extra_field_names())]",
      "",
      "[Added Lines]",
      "4692:             self._add_columns = [",
      "4695:             ]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4691:         superfuluous checks done by Flask-Appbuilder on startup).",
      "4692:         \"\"\"",
      "4693:         if self._edit_columns is type(self)._edit_columns and has_request_context():",
      "4695:         return self._edit_columns",
      "4697:     @action(\"muldelete\", \"Delete\", \"Are you sure you want to delete selected records?\", single=False)",
      "",
      "[Removed Lines]",
      "4694:             self._edit_columns = [*self._edit_columns, *(k for k, _ in self._iter_extra_field_names())]",
      "",
      "[Added Lines]",
      "4709:             self._edit_columns = [",
      "4712:             ]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "4807:                 )",
      "4808:                 del form.extra",
      "4809:         del extra_json",
      "4812:             if key in form.data and key.startswith(\"extra__\"):",
      "4813:                 conn_type_from_extra_field = key.split(\"__\")[1]",
      "4814:                 if conn_type_from_extra_field == conn_type:",
      "",
      "[Removed Lines]",
      "4811:         for key, field_name in self._iter_extra_field_names():",
      "",
      "[Added Lines]",
      "4827:         for key, field_name, is_sensitive in self._iter_extra_field_names_and_sensitivity():",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "4817:                     # value isn't an empty string.",
      "4818:                     if value != \"\":",
      "4819:                         extra[field_name] = value",
      "4821:         if extra.keys():",
      "4822:             form.extra.data = json.dumps(extra)",
      "4824:     def prefill_form(self, form, pk):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4837:             sensitive_unchanged_keys = set()",
      "4838:             for key, value in extra.items():",
      "4839:                 if value == SENSITIVE_FIELD_PLACEHOLDER:",
      "4840:                     sensitive_unchanged_keys.add(key)",
      "4841:             if sensitive_unchanged_keys:",
      "4842:                 try:",
      "4843:                     conn = BaseHook.get_connection(conn_id)",
      "4844:                 except AirflowNotFoundException:",
      "4845:                     conn = None",
      "4846:                 for key in sensitive_unchanged_keys:",
      "4847:                     if conn and conn.extra_dejson.get(key):",
      "4848:                         extra[key] = conn.extra_dejson.get(key)",
      "4849:                     else:",
      "4850:                         del extra[key]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "4836:             logging.warning(\"extra field for %s is not a dictionary\", form.data.get(\"conn_id\", \"<unknown>\"))",
      "4837:             return",
      "4840:             value = extra_dictionary.get(field_name, \"\")",
      "4842:             if not value:",
      "",
      "[Removed Lines]",
      "4839:         for field_key, field_name in self._iter_extra_field_names():",
      "",
      "[Added Lines]",
      "4868:         for field_key, field_name, is_sensitive in self._iter_extra_field_names_and_sensitivity():",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "4846:             if value:",
      "4847:                 field = getattr(form, field_key)",
      "4848:                 field.data = value",
      "4851: class PluginView(AirflowBaseView):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4878:             if is_sensitive and field_name in extra_dictionary:",
      "4879:                 extra_dictionary[field_name] = SENSITIVE_FIELD_PLACEHOLDER",
      "4880:         # form.data is a property that builds the dictionary from fields so we have to modify the fields",
      "4881:         form.extra.data = json.dumps(extra_dictionary)",
      "",
      "---------------"
    ],
    "tests/www/views/test_views_connection.py||tests/www/views/test_views_connection.py": [
      "File: tests/www/views/test_views_connection.py -> tests/www/views/test_views_connection.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "79:     mock_form.data = {\"conn_id\": \"test\", \"extra\": None, \"conn_type\": \"test\"}",
      "81:     cmv = ConnectionModelView()",
      "83:     cmv.prefill_form(form=mock_form, pk=1)",
      "86: @pytest.mark.parametrize(",
      "87:     \"extras, expected\",",
      "88:     [",
      "",
      "[Removed Lines]",
      "82:     cmv._iter_extra_field_names = mock.Mock(return_value=())",
      "",
      "[Added Lines]",
      "82:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(return_value=())",
      "86: def test_prefill_form_sensitive_fields_extra():",
      "87:     mock_form = mock.Mock()",
      "88:     mock_form.data = {",
      "89:         \"conn_id\": \"test\",",
      "90:         \"extra\": json.dumps({\"sensitive_extra\": \"TEST1\", \"non_sensitive_extra\": \"TEST2\"}),",
      "91:         \"conn_type\": \"test\",",
      "92:     }",
      "94:     cmv = ConnectionModelView()",
      "95:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(",
      "96:         return_value=[(\"sensitive_extra_key\", \"sensitive_extra\", True)]",
      "97:     )",
      "98:     cmv.prefill_form(form=mock_form, pk=1)",
      "99:     assert json.loads(mock_form.extra.data) == {",
      "100:         \"sensitive_extra\": \"RATHER_LONG_SENSITIVE_FIELD_PLACEHOLDER\",",
      "101:         \"non_sensitive_extra\": \"TEST2\",",
      "102:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "106:     mock_form.data = {\"conn_id\": \"test\", \"extra\": json.dumps(extras), \"conn_type\": \"test\"}",
      "108:     cmv = ConnectionModelView()",
      "110:     cmv.prefill_form(form=mock_form, pk=1)",
      "111:     assert mock_form.extra__test__my_param.data == expected",
      "",
      "[Removed Lines]",
      "109:     cmv._iter_extra_field_names = mock.Mock(return_value=[(\"extra__test__my_param\", \"my_param\")])",
      "",
      "[Added Lines]",
      "128:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(",
      "129:         return_value=[(\"extra__test__my_param\", \"my_param\", False)]",
      "130:     )",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "134:     }",
      "136:     cmv = ConnectionModelView()",
      "138:     cmv.process_form(form=mock_form, is_created=True)",
      "139:     assert json.loads(mock_form.extra.data) == {",
      "140:         field_name: \"custom_field_val\",",
      "",
      "[Removed Lines]",
      "137:     cmv._iter_extra_field_names = mock.Mock(return_value=[(\"extra__test__custom_field\", field_name)])",
      "",
      "[Added Lines]",
      "158:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(",
      "159:         return_value=[(\"extra__test__custom_field\", field_name, False)]",
      "160:     )",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "160:     }",
      "162:     cmv = ConnectionModelView()",
      "164:     cmv.process_form(form=mock_form, is_created=True)",
      "165:     assert json.loads(mock_form.extra.data) == {\"param2\": \"param2_val\"}",
      "",
      "[Removed Lines]",
      "163:     cmv._iter_extra_field_names = mock.Mock(return_value=())",
      "",
      "[Added Lines]",
      "186:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(return_value=())",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "186:     }",
      "188:     cmv = ConnectionModelView()",
      "190:         return_value=[",
      "193:         ],",
      "194:     )",
      "195:     cmv.process_form(form=mock_form, is_created=True)",
      "",
      "[Removed Lines]",
      "189:     cmv._iter_extra_field_names = mock.Mock(",
      "191:             (\"extra__test3__custom_field\", field_name),",
      "192:             (\"extra__test3__custom_bool_field\", False),",
      "",
      "[Added Lines]",
      "212:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(",
      "214:             (\"extra__test3__custom_field\", field_name, False),",
      "215:             (\"extra__test3__custom_bool_field\", False, False),",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "217:     }",
      "219:     cmv = ConnectionModelView()",
      "221:     cmv.process_form(form=mock_form, is_created=True)",
      "223:     if field_name == \"custom_field\":",
      "",
      "[Removed Lines]",
      "220:     cmv._iter_extra_field_names = mock.Mock(return_value=[(\"extra__test4__custom_field\", field_name)])",
      "",
      "[Added Lines]",
      "243:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(",
      "244:         return_value=[(\"extra__test4__custom_field\", field_name, False)]",
      "245:     )",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "229:         assert json.loads(mock_form.extra.data) == {\"extra__test4__custom_field\": \"custom_field_val4\"}",
      "232: def test_duplicate_connection(admin_client):",
      "233:     \"\"\"Test Duplicate multiple connection with suffix\"\"\"",
      "234:     conn1 = Connection(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "257: @mock.patch(\"airflow.utils.module_loading.import_string\")",
      "258: @mock.patch(\"airflow.providers_manager.ProvidersManager.hooks\", new_callable=PropertyMock)",
      "259: @mock.patch(\"airflow.www.views.BaseHook\")",
      "260: def test_process_form_extras_updates_sensitive_placeholder_unchanged(",
      "261:     mock_base_hook, mock_pm_hooks, mock_import_str",
      "262: ):",
      "263:     \"\"\"",
      "264:     Test the handling of sensitive unchanged field (where placeholder has not been modified).",
      "265:     \"\"\"",
      "267:     # Testing parameters set in both extra and custom fields (connection updates).",
      "268:     mock_form = mock.Mock()",
      "269:     mock_form.data = {",
      "270:         \"conn_type\": \"test4\",",
      "271:         \"conn_id\": \"extras_test4\",",
      "272:         \"extra\": '{\"sensitive_extra\": \"RATHER_LONG_SENSITIVE_FIELD_PLACEHOLDER\", \"extra__custom\": \"value\"}',",
      "273:     }",
      "274:     mock_base_hook.get_connection.return_value = Connection(extra='{\"sensitive_extra\": \"old_value\"}')",
      "275:     cmv = ConnectionModelView()",
      "276:     cmv._iter_extra_field_names_and_sensitivity = mock.Mock(",
      "277:         return_value=[(\"sensitive_extra_key\", \"sensitive_extra\", True)]",
      "278:     )",
      "279:     cmv.process_form(form=mock_form, is_created=True)",
      "281:     assert json.loads(mock_form.extra.data) == {",
      "282:         \"extra__custom\": \"value\",",
      "283:         \"sensitive_extra\": \"old_value\",",
      "284:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7d2f50b0c94b42627cbac2f7ca0c6fa037355c0f",
      "candidate_info": {
        "commit_hash": "7d2f50b0c94b42627cbac2f7ca0c6fa037355c0f",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/7d2f50b0c94b42627cbac2f7ca0c6fa037355c0f",
        "files": [
          "airflow/www/views.py"
        ],
        "message": "extra being passed to SQLalchemy (#40391)\n\nThe edit prefills an empty extra field (None)\nwith a empty dictionary, which is decoded\nto an extra field being passed in the con url.\n\n(cherry picked from commit a856ed4fb04352798664e79b9ff32b9f375b1d75)",
        "before_after_code_files": [
          "airflow/www/views.py||airflow/www/views.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "airflow/www/views.py||airflow/www/views.py"
          ],
          "candidate": [
            "airflow/www/views.py||airflow/www/views.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/www/views.py||airflow/www/views.py": [
          "File: airflow/www/views.py -> airflow/www/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4219:             if is_sensitive and field_name in extra_dictionary:",
          "4220:                 extra_dictionary[field_name] = SENSITIVE_FIELD_PLACEHOLDER",
          "4221:         # form.data is a property that builds the dictionary from fields so we have to modify the fields",
          "4225: class PluginView(AirflowBaseView):",
          "",
          "[Removed Lines]",
          "4222:         form.extra.data = json.dumps(extra_dictionary)",
          "",
          "[Added Lines]",
          "4222:         if extra_dictionary:",
          "4223:             form.extra.data = json.dumps(extra_dictionary)",
          "4224:         else:",
          "4225:             form.extra.data = None",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4d8553566c360bf0ed97fd880a1e39382c47c12",
      "candidate_info": {
        "commit_hash": "b4d8553566c360bf0ed97fd880a1e39382c47c12",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/b4d8553566c360bf0ed97fd880a1e39382c47c12",
        "files": [
          "airflow/decorators/base.py",
          "airflow/executors/debug_executor.py",
          "airflow/plugins_manager.py",
          "airflow/providers_manager.py",
          "airflow/serialization/serialized_objects.py",
          "airflow/template/templater.py"
        ],
        "message": "Refactor unneeded 'continue' jumps around the repo (#33849)\n\n(cherry picked from commit 668aace06f8e4366917878eafc20550d9129faea)",
        "before_after_code_files": [
          "airflow/decorators/base.py||airflow/decorators/base.py",
          "airflow/executors/debug_executor.py||airflow/executors/debug_executor.py",
          "airflow/plugins_manager.py||airflow/plugins_manager.py",
          "airflow/providers_manager.py||airflow/providers_manager.py",
          "airflow/serialization/serialized_objects.py||airflow/serialization/serialized_objects.py",
          "airflow/template/templater.py||airflow/template/templater.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "airflow/providers_manager.py||airflow/providers_manager.py"
          ],
          "candidate": [
            "airflow/providers_manager.py||airflow/providers_manager.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/decorators/base.py||airflow/decorators/base.py": [
          "File: airflow/decorators/base.py -> airflow/decorators/base.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:         kwargs_left = kwargs.copy()",
          "103:         for arg_name in self._mappable_function_argument_names:",
          "104:             value = kwargs_left.pop(arg_name, NOTSET)",
          "109:         if len(kwargs_left) == 1:",
          "110:             raise TypeError(f\"{func}() got an unexpected keyword argument {next(iter(kwargs_left))!r}\")",
          "111:         elif kwargs_left:",
          "",
          "[Removed Lines]",
          "105:             if func != \"expand\" or value is NOTSET or is_mappable(value):",
          "106:                 continue",
          "107:             tname = type(value).__name__",
          "108:             raise ValueError(f\"expand() got an unexpected type {tname!r} for keyword argument {arg_name!r}\")",
          "",
          "[Added Lines]",
          "105:             if func == \"expand\" and value is not NOTSET and not is_mappable(value):",
          "106:                 tname = type(value).__name__",
          "107:                 raise ValueError(",
          "108:                     f\"expand() got an unexpected type {tname!r} for keyword argument {arg_name!r}\"",
          "109:                 )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:         prefix = re2.split(r\"__\\d+$\", tg_task_id)[0]",
          "148:         for task_id in dag.task_ids:",
          "149:             match = re2.match(rf\"^{prefix}__(\\d+)$\", task_id)",
          "153:         yield 0  # Default if there's no matching task ID.",
          "155:     core = re2.split(r\"__\\d+$\", task_id)[0]",
          "",
          "[Removed Lines]",
          "150:             if match is None:",
          "151:                 continue",
          "152:             yield int(match.group(1))",
          "",
          "[Added Lines]",
          "151:             if match:",
          "152:                 yield int(match.group(1))",
          "",
          "---------------"
        ],
        "airflow/executors/debug_executor.py||airflow/executors/debug_executor.py": [
          "File: airflow/executors/debug_executor.py -> airflow/executors/debug_executor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:                 self.log.info(\"Setting %s to %s\", ti.key, TaskInstanceState.UPSTREAM_FAILED)",
          "72:                 ti.set_state(TaskInstanceState.UPSTREAM_FAILED)",
          "73:                 self.change_state(ti.key, TaskInstanceState.UPSTREAM_FAILED)",
          "77:                 self.log.info(\"Executor is terminated! Stopping %s to %s\", ti.key, TaskInstanceState.FAILED)",
          "78:                 ti.set_state(TaskInstanceState.FAILED)",
          "79:                 self.change_state(ti.key, TaskInstanceState.FAILED)",
          "84:     def _run_task(self, ti: TaskInstance) -> bool:",
          "85:         self.log.debug(\"Executing task: %s\", ti)",
          "",
          "[Removed Lines]",
          "74:                 continue",
          "76:             if self._terminated.is_set():",
          "80:                 continue",
          "82:             task_succeeded = self._run_task(ti)",
          "",
          "[Added Lines]",
          "74:             elif self._terminated.is_set():",
          "78:             else:",
          "79:                 task_succeeded = self._run_task(ti)",
          "",
          "---------------"
        ],
        "airflow/plugins_manager.py||airflow/plugins_manager.py": [
          "File: airflow/plugins_manager.py -> airflow/plugins_manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import os",
          "27: import sys",
          "28: import types",
          "29: from typing import TYPE_CHECKING, Any, Iterable",
          "31: try:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: from pathlib import Path",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "252:     log.debug(\"Loading plugins from directory: %s\", settings.PLUGINS_FOLDER)",
          "254:     for file_path in find_path_from_directory(settings.PLUGINS_FOLDER, \".airflowignore\"):",
          "259:             continue",
          "261:         try:",
          "262:             loader = importlib.machinery.SourceFileLoader(mod_name, file_path)",
          "",
          "[Removed Lines]",
          "255:         if not os.path.isfile(file_path):",
          "256:             continue",
          "257:         mod_name, file_ext = os.path.splitext(os.path.split(file_path)[-1])",
          "258:         if file_ext != \".py\":",
          "",
          "[Added Lines]",
          "256:         path = Path(file_path)",
          "257:         if not path.is_file() or path.suffix != \".py\":",
          "259:         mod_name = path.stem",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "287:         try:",
          "288:             plugin_instance = import_string(plugin.plugin_class)",
          "290:                 log.warning(\"Plugin %s is not a valid plugin\", plugin.name)",
          "293:         except ImportError:",
          "294:             log.exception(\"Failed to load plugin %s from class name %s\", plugin.name, plugin.plugin_class)",
          "298: def make_module(name: str, objects: list[Any]):",
          "",
          "[Removed Lines]",
          "289:             if not is_valid_plugin(plugin_instance):",
          "291:                 continue",
          "292:             register_plugin(plugin_instance)",
          "295:             continue",
          "",
          "[Added Lines]",
          "289:             if is_valid_plugin(plugin_instance):",
          "290:                 register_plugin(plugin_instance)",
          "291:             else:",
          "",
          "---------------"
        ],
        "airflow/providers_manager.py||airflow/providers_manager.py": [
          "File: airflow/providers_manager.py -> airflow/providers_manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "587:                 # The same path can appear in the __path__ twice, under non-normalized paths (ie.",
          "588:                 # /path/to/repo/airflow/providers and /path/to/repo/./airflow/providers)",
          "589:                 path = os.path.realpath(path)",
          "594:             except Exception as e:",
          "595:                 log.warning(f\"Error when loading 'provider.yaml' files from {path} airflow sources: {e}\")",
          "",
          "[Removed Lines]",
          "590:                 if path in seen:",
          "591:                     continue",
          "592:                 seen.add(path)",
          "593:                 self._add_provider_info_from_local_source_files_on_path(path)",
          "",
          "[Added Lines]",
          "590:                 if path not in seen:",
          "591:                     seen.add(path)",
          "592:                     self._add_provider_info_from_local_source_files_on_path(path)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "957:                     hook_class.__name__,",
          "958:                 )",
          "959:                 # In case of inherited hooks this might be happening several times",
          "970:     def _add_customized_fields(self, package_name: str, hook_class: type, customized_fields: dict):",
          "971:         try:",
          "",
          "[Removed Lines]",
          "960:                 continue",
          "961:             self._connection_form_widgets[prefixed_field_name] = ConnectionFormWidgetInfo(",
          "962:                 hook_class.__name__,",
          "963:                 package_name,",
          "964:                 field,",
          "965:                 field_identifier,",
          "966:                 hasattr(field.field_class.widget, \"input_type\")",
          "967:                 and field.field_class.widget.input_type == \"password\",",
          "968:             )",
          "",
          "[Added Lines]",
          "959:             else:",
          "960:                 self._connection_form_widgets[prefixed_field_name] = ConnectionFormWidgetInfo(",
          "961:                     hook_class.__name__,",
          "962:                     package_name,",
          "963:                     field,",
          "964:                     field_identifier,",
          "965:                     hasattr(field.field_class.widget, \"input_type\")",
          "966:                     and field.field_class.widget.input_type == \"password\",",
          "967:                 )",
          "",
          "---------------"
        ],
        "airflow/serialization/serialized_objects.py||airflow/serialization/serialized_objects.py": [
          "File: airflow/serialization/serialized_objects.py -> airflow/serialization/serialized_objects.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "645:             return False",
          "647:         for attr in attrs:",
          "655:                 kwargs[attr] = val",
          "656:         return class_(**kwargs)",
          "",
          "[Removed Lines]",
          "648:             if attr not in param_dict:",
          "649:                 continue",
          "650:             val = param_dict[attr]",
          "651:             if is_serialized(val):",
          "652:                 deserialized_val = cls.deserialize(param_dict[attr])",
          "653:                 kwargs[attr] = deserialized_val",
          "654:             else:",
          "",
          "[Added Lines]",
          "648:             if attr in param_dict:",
          "649:                 val = param_dict[attr]",
          "650:                 if is_serialized(val):",
          "651:                     val = cls.deserialize(val)",
          "",
          "---------------"
        ],
        "airflow/template/templater.py||airflow/template/templater.py": [
          "File: airflow/template/templater.py -> airflow/template/templater.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:         if self.template_ext:",
          "69:             for field in self.template_fields:",
          "70:                 content = getattr(self, field, None)",
          "74:                     env = self.get_template_env()",
          "75:                     try:",
          "76:                         setattr(self, field, env.loader.get_source(env, content)[0])  # type: ignore",
          "",
          "[Removed Lines]",
          "71:                 if content is None:",
          "72:                     continue",
          "73:                 elif isinstance(content, str) and content.endswith(tuple(self.template_ext)):",
          "",
          "[Added Lines]",
          "71:                 if isinstance(content, str) and content.endswith(tuple(self.template_ext)):",
          "",
          "---------------"
        ]
      }
    }
  ]
}