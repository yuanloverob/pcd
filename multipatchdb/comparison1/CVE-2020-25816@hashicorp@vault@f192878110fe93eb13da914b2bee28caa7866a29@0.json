{
  "cve_id": "CVE-2020-25816",
  "cve_desc": "HashiCorp Vault and Vault Enterprise versions 1.0 and newer allowed leases created with a batch token to outlive their TTL because expiration time was not scheduled correctly. Fixed in 1.4.7 and 1.5.4.",
  "repo": "hashicorp/vault",
  "patch_hash": "f192878110fe93eb13da914b2bee28caa7866a29",
  "patch_info": {
    "commit_hash": "f192878110fe93eb13da914b2bee28caa7866a29",
    "repo": "hashicorp/vault",
    "commit_url": "https://github.com/hashicorp/vault/pull/10020/commits/f192878110fe93eb13da914b2bee28caa7866a29",
    "files": [
      "helper/forwarding/types.pb.go",
      "helper/identity/mfa/types.pb.go",
      "helper/identity/types.pb.go",
      "helper/storagepacker/types.pb.go",
      "physical/raft/chunking_test.go",
      "physical/raft/fsm.go",
      "physical/raft/raft.go",
      "physical/raft/raft_test.go",
      "physical/raft/snapshot_test.go",
      "physical/raft/types.pb.go",
      "sdk/database/dbplugin/database.pb.go",
      "sdk/logical/identity.pb.go",
      "sdk/logical/plugin.pb.go",
      "sdk/plugin/pb/backend.pb.go",
      "vault/activity/activity_log.pb.go",
      "vault/cluster/inmem_layer.go",
      "vault/cluster/simulations.go",
      "vault/expiration.go",
      "vault/external_tests/raft/raft_test.go",
      "vault/request_forwarding_service.pb.go",
      "vault/request_handling.go",
      "vault/testing.go",
      "vault/testing_util.go"
    ],
    "message": "Port changes from enterprise lease fix",
    "before_after_code_files": [
      "helper/forwarding/types.pb.go||helper/forwarding/types.pb.go",
      "helper/identity/mfa/types.pb.go||helper/identity/mfa/types.pb.go",
      "helper/identity/types.pb.go||helper/identity/types.pb.go",
      "helper/storagepacker/types.pb.go||helper/storagepacker/types.pb.go",
      "physical/raft/chunking_test.go||physical/raft/chunking_test.go",
      "physical/raft/fsm.go||physical/raft/fsm.go",
      "physical/raft/raft.go||physical/raft/raft.go",
      "physical/raft/raft_test.go||physical/raft/raft_test.go",
      "physical/raft/snapshot_test.go||physical/raft/snapshot_test.go",
      "physical/raft/types.pb.go||physical/raft/types.pb.go",
      "sdk/database/dbplugin/database.pb.go||sdk/database/dbplugin/database.pb.go",
      "sdk/logical/identity.pb.go||sdk/logical/identity.pb.go",
      "sdk/logical/plugin.pb.go||sdk/logical/plugin.pb.go",
      "sdk/plugin/pb/backend.pb.go||sdk/plugin/pb/backend.pb.go",
      "vault/activity/activity_log.pb.go||vault/activity/activity_log.pb.go",
      "vault/cluster/inmem_layer.go||vault/cluster/inmem_layer.go",
      "vault/cluster/simulations.go||vault/cluster/simulations.go",
      "vault/expiration.go||vault/expiration.go",
      "vault/external_tests/raft/raft_test.go||vault/external_tests/raft/raft_test.go",
      "vault/request_forwarding_service.pb.go||vault/request_forwarding_service.pb.go",
      "vault/request_handling.go||vault/request_handling.go",
      "vault/testing.go||vault/testing.go",
      "vault/testing_util.go||vault/testing_util.go"
    ]
  },
  "patch_diff": {
    "helper/forwarding/types.pb.go||helper/forwarding/types.pb.go": [
      "File: helper/forwarding/types.pb.go -> helper/forwarding/types.pb.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: package forwarding",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "helper/identity/mfa/types.pb.go||helper/identity/mfa/types.pb.go": [
      "File: helper/identity/mfa/types.pb.go -> helper/identity/mfa/types.pb.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: package mfa",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "helper/identity/types.pb.go||helper/identity/types.pb.go": [
      "File: helper/identity/types.pb.go -> helper/identity/types.pb.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: package identity",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "helper/storagepacker/types.pb.go||helper/storagepacker/types.pb.go": [
      "File: helper/storagepacker/types.pb.go -> helper/storagepacker/types.pb.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: package storagepacker",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "physical/raft/chunking_test.go||physical/raft/chunking_test.go": [
      "File: physical/raft/chunking_test.go -> physical/raft/chunking_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "82:  t.Log(\"tearing down cluster\")",
      "83:  require.NoError(b.TeardownCluster(nil))",
      "85:  require.NoError(b.stableStore.(*raftboltdb.BoltStore).Close())",
      "87:  t.Log(\"starting new backend\")",
      "",
      "[Removed Lines]",
      "84:  require.NoError(b.fsm.db.Close())",
      "",
      "[Added Lines]",
      "84:  require.NoError(b.fsm.getDB().Close())",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "195:   t.Fatal(err)",
      "196:  }",
      "198:  currentIndex := raft.AppliedIndex()",
      "200:  for i := 0; i < 10; i++ {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "199:  err = raft.Put(context.Background(), &physical.Entry{",
      "200:   Key:   \"key\",",
      "201:   Value: []byte(\"test\"),",
      "202:  })",
      "203:  if err != nil {",
      "204:   t.Fatal(err)",
      "205:  }",
      "",
      "---------------"
    ],
    "physical/raft/fsm.go||physical/raft/fsm.go": [
      "File: physical/raft/fsm.go -> physical/raft/fsm.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "77:  logger      log.Logger",
      "78:  noopRestore bool",
      "80:  db *bolt.DB",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "81:  applyDelay time.Duration",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "118:  return f, nil",
      "119: }",
      "121: func (f *FSM) openDBFile(dbPath string) error {",
      "122:  if len(dbPath) == 0 {",
      "123:   return errors.New(\"can not open empty filename\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "124: func (f *FSM) getDB() *bolt.DB {",
      "125:  f.l.RLock()",
      "126:  defer f.l.RUnlock()",
      "128:  return f.db",
      "129: }",
      "133: func (r *RaftBackend) SetFSMDelay(delay time.Duration) {",
      "134:  r.fsm.l.Lock()",
      "135:  r.fsm.applyDelay = delay",
      "136:  r.fsm.l.Unlock()",
      "137: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "222: }",
      "224: func (f *FSM) witnessSnapshot(metadata *raft.SnapshotMeta) error {",
      "225:  err := writeSnapshotMetaToDB(metadata, f.db)",
      "226:  if err != nil {",
      "227:   return err",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "243:  f.l.RLock()",
      "244:  defer f.l.RUnlock()",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "448:  f.l.RLock()",
      "449:  defer f.l.RUnlock()",
      "451:  err = f.db.Update(func(tx *bolt.Tx) error {",
      "452:   b := tx.Bucket(dataBucketName)",
      "453:   for _, commandRaw := range commands {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "472:  if f.applyDelay > 0 {",
      "473:   time.Sleep(f.applyDelay)",
      "474:  }",
      "",
      "---------------"
    ],
    "physical/raft/raft.go||physical/raft/raft.go": [
      "File: physical/raft/raft.go -> physical/raft/raft.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "768:  b.l.RLock()",
      "769:  defer b.l.RUnlock()",
      "772:   return 0",
      "773:  }",
      "776: }",
      "",
      "[Removed Lines]",
      "771:  if b.raft == nil {",
      "775:  return b.raft.AppliedIndex()",
      "",
      "[Added Lines]",
      "771:  if b.fsm == nil {",
      "777:  indexState, _ := b.fsm.LatestState()",
      "778:  return indexState.Index",
      "",
      "---------------"
    ],
    "physical/raft/raft_test.go||physical/raft/raft_test.go": [
      "File: physical/raft/raft_test.go -> physical/raft/raft_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "80:   }",
      "82:   for {",
      "84:     break",
      "85:    }",
      "86:   }",
      "",
      "[Removed Lines]",
      "83:    if backend.AppliedIndex() >= 2 {",
      "",
      "[Added Lines]",
      "83:    if backend.raft.AppliedIndex() >= 2 {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "156:   return fmt.Errorf(\"configs did not match: %+v != %+v\", config1, config2)",
      "157:  }",
      "160: }",
      "162: func compareDBs(t *testing.T, boltDB1, boltDB2 *bolt.DB, dataOnly bool) error {",
      "",
      "[Removed Lines]",
      "159:  return compareDBs(t, fsm1.db, fsm2.db, false)",
      "",
      "[Added Lines]",
      "159:  return compareDBs(t, fsm1.getDB(), fsm2.getDB(), false)",
      "",
      "---------------"
    ],
    "physical/raft/snapshot_test.go||physical/raft/snapshot_test.go": [
      "File: physical/raft/snapshot_test.go -> physical/raft/snapshot_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "259:  ensureCommitApplied(t, commitIdx, raft2)",
      "263:   t.Fatal(err)",
      "264:  }",
      "",
      "[Removed Lines]",
      "262:  if err := compareDBs(t, raft1.fsm.db, raft2.fsm.db, false); err != nil {",
      "",
      "[Added Lines]",
      "262:  if err := compareDBs(t, raft1.fsm.getDB(), raft2.fsm.getDB(), false); err != nil {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "758:   t.Fatal(err)",
      "759:  }",
      "762:  if err != nil {",
      "763:   t.Fatal(err)",
      "764:  }",
      "768:  if err == nil {",
      "769:   t.Fatal(\"expected error\")",
      "770:  }",
      "",
      "[Removed Lines]",
      "761:  err = compareDBs(t, fsm.db, newFSM.db, true)",
      "767:  err = compareDBs(t, fsm.db, newFSM.db, false)",
      "",
      "[Added Lines]",
      "761:  err = compareDBs(t, fsm.getDB(), newFSM.getDB(), true)",
      "767:  err = compareDBs(t, fsm.getDB(), newFSM.getDB(), false)",
      "",
      "---------------"
    ],
    "physical/raft/types.pb.go||physical/raft/types.pb.go": [
      "File: physical/raft/types.pb.go -> physical/raft/types.pb.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: package raft",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "sdk/database/dbplugin/database.pb.go||sdk/database/dbplugin/database.pb.go": [
      "File: sdk/database/dbplugin/database.pb.go -> sdk/database/dbplugin/database.pb.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: package dbplugin",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "sdk/logical/identity.pb.go||sdk/logical/identity.pb.go": [
      "File: sdk/logical/identity.pb.go -> sdk/logical/identity.pb.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: package logical",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "sdk/logical/plugin.pb.go||sdk/logical/plugin.pb.go": [
      "File: sdk/logical/plugin.pb.go -> sdk/logical/plugin.pb.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: package logical",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "sdk/plugin/pb/backend.pb.go||sdk/plugin/pb/backend.pb.go": [
      "File: sdk/plugin/pb/backend.pb.go -> sdk/plugin/pb/backend.pb.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: package pb",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "vault/activity/activity_log.pb.go||vault/activity/activity_log.pb.go": [
      "File: vault/activity/activity_log.pb.go -> vault/activity/activity_log.pb.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: package activity",
      "9: import (",
      "10:  proto \"github.com/golang/protobuf/proto\"",
      "12:  protoreflect \"google.golang.org/protobuf/reflect/protoreflect\"",
      "13:  protoimpl \"google.golang.org/protobuf/runtime/protoimpl\"",
      "14:  reflect \"reflect\"",
      "",
      "[Removed Lines]",
      "11:  _ \"github.com/golang/protobuf/ptypes/timestamp\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "166: var file_vault_activity_activity_log_proto_rawDesc = []byte{",
      "167:  0x0a, 0x21, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,",
      "168:  0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72,",
      "199: }",
      "201: var (",
      "",
      "[Removed Lines]",
      "169:  0x6f, 0x74, 0x6f, 0x12, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a, 0x1f, 0x67,",
      "170:  0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,",
      "171:  0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6c,",
      "172:  0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b,",
      "173:  0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,",
      "174:  0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e,",
      "175:  0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,",
      "176:  0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c,",
      "177:  0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,",
      "178:  0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x88, 0x02, 0x0a,",
      "179:  0x0b, 0x4c, 0x6f, 0x67, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10,",
      "180:  0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65,",
      "181:  0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74,",
      "182:  0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,",
      "183:  0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x74, 0x69,",
      "184:  0x76, 0x69, 0x74, 0x79, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72,",
      "185:  0x64, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x11, 0x6e,",
      "186:  0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,",
      "187:  0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,",
      "188:  0x79, 0x2e, 0x4c, 0x6f, 0x67, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f,",
      "189:  0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x45, 0x6e, 0x74,",
      "190:  0x72, 0x79, 0x52, 0x0f, 0x6e, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b,",
      "191:  0x65, 0x6e, 0x73, 0x1a, 0x42, 0x0a, 0x14, 0x4e, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,",
      "192:  0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,",
      "193:  0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,",
      "194:  0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61,",
      "195:  0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75,",
      "196:  0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2f,",
      "197:  0x76, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69,",
      "198:  0x76, 0x69, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,",
      "",
      "[Added Lines]",
      "168:  0x6f, 0x74, 0x6f, 0x12, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x6c, 0x0a,",
      "169:  0x0c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a,",
      "170:  0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,",
      "171:  0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61,",
      "172:  0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,",
      "173:  0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a,",
      "174:  0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,",
      "175:  0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x88, 0x02, 0x0a, 0x0b,",
      "176:  0x4c, 0x6f, 0x67, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6f,",
      "177:  0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,",
      "178:  0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,",
      "179:  0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,",
      "180:  0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,",
      "181:  0x69, 0x74, 0x79, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,",
      "182:  0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x11, 0x6e, 0x6f,",
      "183:  0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18,",
      "184:  0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,",
      "185:  0x2e, 0x4c, 0x6f, 0x67, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x6e,",
      "186:  0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,",
      "187:  0x79, 0x52, 0x0f, 0x6e, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65,",
      "188:  0x6e, 0x73, 0x1a, 0x42, 0x0a, 0x14, 0x4e, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,",
      "189:  0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,",
      "190:  0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,",
      "191:  0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,",
      "192:  0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,",
      "193:  0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x76,",
      "194:  0x61, 0x75, 0x6c, 0x74, 0x2f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76,",
      "195:  0x69, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,",
      "",
      "---------------"
    ],
    "vault/cluster/inmem_layer.go||vault/cluster/inmem_layer.go": [
      "File: vault/cluster/inmem_layer.go -> vault/cluster/inmem_layer.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "30:  stopCh  chan struct{}",
      "32:  connectionCh chan *ConnectionInfo",
      "33: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33:  readerDelay  time.Duration",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "52:  l.l.Unlock()",
      "53: }",
      "56: func (l *InmemLayer) Addrs() []net.Addr {",
      "57:  l.l.Lock()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56: func (l *InmemLayer) SetReaderDelay(delay time.Duration) {",
      "57:  l.l.Lock()",
      "58:  defer l.l.Unlock()",
      "60:  l.readerDelay = delay",
      "63:  for _, servConns := range l.servConns {",
      "64:   for _, c := range servConns {",
      "65:    c.(*delayedConn).SetDelay(delay)",
      "66:   }",
      "67:  }",
      "69:  for _, clientConns := range l.clientConns {",
      "70:   for _, c := range clientConns {",
      "71:    c.(*delayedConn).SetDelay(delay)",
      "72:   }",
      "73:  }",
      "74: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "128:  tlsConn := tls.Client(conn, tlsConfig)",
      "132:  return tlsConn, nil",
      "133: }",
      "",
      "[Removed Lines]",
      "130:  l.clientConns[addr] = append(l.clientConns[addr], tlsConn)",
      "",
      "[Added Lines]",
      "151:  l.clientConns[addr] = append(l.clientConns[addr], conn)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "150:  retConn, servConn := net.Pipe()",
      "152:  l.servConns[addr] = append(l.servConns[addr], servConn)",
      "154:  if l.logger.IsDebug() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "173:  retConn = newDelayedConn(retConn, l.readerDelay)",
      "174:  servConn = newDelayedConn(servConn, l.readerDelay)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "372:  }",
      "373: }",
      "375: type ConnectionInfo struct {",
      "376:  Node     string",
      "377:  Remote   string",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "399: func (ic *InmemLayerCluster) SetReaderDelay(delay time.Duration) {",
      "400:  for _, node := range ic.layers {",
      "401:   node.SetReaderDelay(delay)",
      "402:  }",
      "403: }",
      "",
      "---------------"
    ],
    "vault/cluster/simulations.go||vault/cluster/simulations.go": [
      "File: vault/cluster/simulations.go -> vault/cluster/simulations.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package cluster",
      "3: import (",
      "4:  \"io\"",
      "5:  \"net\"",
      "6:  \"time\"",
      "7: )",
      "9: type delayedConn struct {",
      "10:  net.Conn",
      "11:  dr *delayedReader",
      "12: }",
      "14: func newDelayedConn(conn net.Conn, delay time.Duration) net.Conn {",
      "15:  return &delayedConn{",
      "16:   Conn: conn,",
      "17:   dr: &delayedReader{",
      "18:    r:     conn,",
      "19:    delay: delay,",
      "20:   },",
      "21:  }",
      "22: }",
      "24: func (conn *delayedConn) Read(data []byte) (int, error) {",
      "25:  return conn.dr.Read(data)",
      "26: }",
      "28: func (conn *delayedConn) SetDelay(delay time.Duration) {",
      "29:  conn.dr.delay = delay",
      "30: }",
      "32: type delayedReader struct {",
      "33:  r     io.Reader",
      "34:  delay time.Duration",
      "35: }",
      "37: func (dr *delayedReader) Read(data []byte) (int, error) {",
      "39:  if dr.delay > 0 {",
      "40:   time.Sleep(dr.delay)",
      "41:  }",
      "43:  return dr.r.Read(data)",
      "44: }",
      "",
      "---------------"
    ],
    "vault/expiration.go||vault/expiration.go": [
      "File: vault/expiration.go -> vault/expiration.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "981:   if err != nil {",
      "982:    return nil, err",
      "983:   }",
      "984:   if le.ExpireTime.After(tokenLeaseTimes.ExpireTime) {",
      "985:    resp.Secret.TTL = tokenLeaseTimes.ExpireTime.Sub(le.LastRenewalTime)",
      "986:    le.ExpireTime = tokenLeaseTimes.ExpireTime",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "985:   if tokenLeaseTimes == nil {",
      "986:    return nil, errors.New(\"failed to load batch token expiration time\")",
      "987:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1200:   if err != nil {",
      "1201:    return \"\", err",
      "1202:   }",
      "1203:   if le.ExpireTime.After(tokenLeaseTimes.ExpireTime) {",
      "1204:    le.ExpireTime = tokenLeaseTimes.ExpireTime",
      "1205:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1208:   if tokenLeaseTimes == nil {",
      "1209:    return \"\", errors.New(\"failed to load batch token expiration time\")",
      "1210:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1225:  }",
      "1231:  return le.LeaseID, nil",
      "",
      "[Removed Lines]",
      "1228:  m.updatePending(le, resp.Secret.LeaseTotal())",
      "",
      "[Added Lines]",
      "1236:  m.updatePending(le, le.ExpireTime.Sub(time.Now()))",
      "1242:  resp.Secret.TTL = le.ExpireTime.Sub(time.Now()).Round(time.Second)",
      "",
      "---------------"
    ],
    "vault/external_tests/raft/raft_test.go||vault/external_tests/raft/raft_test.go": [
      "File: vault/external_tests/raft/raft_test.go -> vault/external_tests/raft/raft_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "15:  \"github.com/hashicorp/go-cleanhttp\"",
      "16:  uuid \"github.com/hashicorp/go-uuid\"",
      "17:  \"github.com/hashicorp/vault/api\"",
      "18:  \"github.com/hashicorp/vault/helper/namespace\"",
      "19:  \"github.com/hashicorp/vault/helper/testhelpers\"",
      "20:  \"github.com/hashicorp/vault/helper/testhelpers/teststorage\"",
      "21:  vaulthttp \"github.com/hashicorp/vault/http\"",
      "22:  \"github.com/hashicorp/vault/physical/raft\"",
      "23:  \"github.com/hashicorp/vault/vault\"",
      "24:  \"golang.org/x/net/http2\"",
      "25: )",
      "27: func raftCluster(t testing.TB) *vault.TestCluster {",
      "29:  var opts = vault.TestClusterOptions{HandlerFunc: vaulthttp.Handler}",
      "32:  cluster.Start()",
      "33:  vault.TestWaitActive(t, cluster.Cores[0].Core)",
      "34:  return cluster",
      "",
      "[Removed Lines]",
      "28:  var conf vault.CoreConfig",
      "30:  teststorage.RaftBackendSetup(&conf, &opts)",
      "31:  cluster := vault.NewTestCluster(t, &conf, &opts)",
      "",
      "[Added Lines]",
      "18:  credUserpass \"github.com/hashicorp/vault/builtin/credential/userpass\"",
      "24:  \"github.com/hashicorp/vault/sdk/logical\"",
      "30:  conf := &vault.CoreConfig{",
      "31:   CredentialBackends: map[string]logical.Factory{",
      "32:    \"userpass\": credUserpass.Factory,",
      "33:   },",
      "34:  }",
      "36:  teststorage.RaftBackendSetup(conf, &opts)",
      "37:  cluster := vault.NewTestCluster(t, conf, &opts)",
      "",
      "---------------"
    ],
    "vault/request_forwarding_service.pb.go||vault/request_forwarding_service.pb.go": [
      "File: vault/request_forwarding_service.pb.go -> vault/request_forwarding_service.pb.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: package vault",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "vault/request_handling.go||vault/request_handling.go": [
      "File: vault/request_handling.go -> vault/request_handling.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: )",
      "31: const (",
      "33: )",
      "35: var (",
      "",
      "[Removed Lines]",
      "32:  replTimeout = 10 * time.Second",
      "",
      "[Added Lines]",
      "32:  replTimeout = 1 * time.Second",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "862:    leaseGenerated = true",
      "863:    resp.Secret.LeaseID = leaseID",
      "879:    ttl_label := metricsutil.TTLBucket(resp.Secret.TTL)",
      "880:    mountPointWithoutNs := ns.TrimmedPath(req.MountPoint)",
      "",
      "[Removed Lines]",
      "866:    le, err := c.expiration.FetchLeaseTimes(ctx, leaseID)",
      "867:    if err != nil {",
      "868:     c.logger.Error(\"failed to fetch updated lease time\", \"request_path\", req.Path, \"error\", err)",
      "869:     retErr = multierror.Append(retErr, ErrInternalError)",
      "870:     return nil, auth, retErr",
      "871:    }",
      "876:    resp.Secret.TTL = le.ExpireTime.Sub(time.Now()).Round(time.Second)",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "vault/testing.go||vault/testing.go": [
      "File: vault/testing.go -> vault/testing.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "1459:   coreConfig.DevToken = base.DevToken",
      "1460:   coreConfig.CounterSyncInterval = base.CounterSyncInterval",
      "1461:   coreConfig.RecoveryMode = base.RecoveryMode",
      "1462:  }",
      "1464:  if coreConfig.ClusterHeartbeatInterval == 0 {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1463:   testApplyEntBaseConfig(coreConfig, base)",
      "",
      "---------------"
    ],
    "vault/testing_util.go||vault/testing_util.go": [
      "File: vault/testing_util.go -> vault/testing_util.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "12: func testAdjustUnderlyingStorage(tcc *TestClusterCore) {",
      "13:  tcc.UnderlyingStorage = tcc.physical",
      "14: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: func testApplyEntBaseConfig(coreConfig, base *CoreConfig) {}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2b0d837d7082479d530e961e35e4fa74d9caad5c",
      "candidate_info": {
        "commit_hash": "2b0d837d7082479d530e961e35e4fa74d9caad5c",
        "repo": "hashicorp/vault",
        "commit_url": "https://github.com/hashicorp/vault/commit/2b0d837d7082479d530e961e35e4fa74d9caad5c",
        "files": [
          "helper/forwarding/types.pb.go",
          "helper/identity/mfa/types.pb.go",
          "helper/identity/types.pb.go",
          "helper/storagepacker/types.pb.go",
          "physical/raft/chunking_test.go",
          "physical/raft/fsm.go",
          "physical/raft/raft.go",
          "physical/raft/raft_test.go",
          "physical/raft/snapshot_test.go",
          "physical/raft/types.pb.go",
          "sdk/database/dbplugin/database.pb.go",
          "sdk/logical/identity.pb.go",
          "sdk/logical/plugin.pb.go",
          "sdk/plugin/pb/backend.pb.go",
          "vault/activity/activity_log.pb.go",
          "vault/cluster/inmem_layer.go",
          "vault/cluster/simulations.go",
          "vault/expiration.go",
          "vault/external_tests/raft/raft_test.go",
          "vault/request_forwarding_service.pb.go",
          "vault/request_handling.go",
          "vault/testing.go",
          "vault/testing_util.go"
        ],
        "message": "Port changes from enterprise lease fix (#10020)",
        "before_after_code_files": [
          "helper/forwarding/types.pb.go||helper/forwarding/types.pb.go",
          "helper/identity/mfa/types.pb.go||helper/identity/mfa/types.pb.go",
          "helper/identity/types.pb.go||helper/identity/types.pb.go",
          "helper/storagepacker/types.pb.go||helper/storagepacker/types.pb.go",
          "physical/raft/chunking_test.go||physical/raft/chunking_test.go",
          "physical/raft/fsm.go||physical/raft/fsm.go",
          "physical/raft/raft.go||physical/raft/raft.go",
          "physical/raft/raft_test.go||physical/raft/raft_test.go",
          "physical/raft/snapshot_test.go||physical/raft/snapshot_test.go",
          "physical/raft/types.pb.go||physical/raft/types.pb.go",
          "sdk/database/dbplugin/database.pb.go||sdk/database/dbplugin/database.pb.go",
          "sdk/logical/identity.pb.go||sdk/logical/identity.pb.go",
          "sdk/logical/plugin.pb.go||sdk/logical/plugin.pb.go",
          "sdk/plugin/pb/backend.pb.go||sdk/plugin/pb/backend.pb.go",
          "vault/activity/activity_log.pb.go||vault/activity/activity_log.pb.go",
          "vault/cluster/inmem_layer.go||vault/cluster/inmem_layer.go",
          "vault/cluster/simulations.go||vault/cluster/simulations.go",
          "vault/expiration.go||vault/expiration.go",
          "vault/external_tests/raft/raft_test.go||vault/external_tests/raft/raft_test.go",
          "vault/request_forwarding_service.pb.go||vault/request_forwarding_service.pb.go",
          "vault/request_handling.go||vault/request_handling.go",
          "vault/testing.go||vault/testing.go",
          "vault/testing_util.go||vault/testing_util.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/vault/pull/10020"
        ],
        "olp_code_files": {
          "patch": [
            "helper/forwarding/types.pb.go||helper/forwarding/types.pb.go",
            "helper/identity/mfa/types.pb.go||helper/identity/mfa/types.pb.go",
            "helper/identity/types.pb.go||helper/identity/types.pb.go",
            "helper/storagepacker/types.pb.go||helper/storagepacker/types.pb.go",
            "physical/raft/chunking_test.go||physical/raft/chunking_test.go",
            "physical/raft/fsm.go||physical/raft/fsm.go",
            "physical/raft/raft.go||physical/raft/raft.go",
            "physical/raft/raft_test.go||physical/raft/raft_test.go",
            "physical/raft/snapshot_test.go||physical/raft/snapshot_test.go",
            "physical/raft/types.pb.go||physical/raft/types.pb.go",
            "sdk/database/dbplugin/database.pb.go||sdk/database/dbplugin/database.pb.go",
            "sdk/logical/identity.pb.go||sdk/logical/identity.pb.go",
            "sdk/logical/plugin.pb.go||sdk/logical/plugin.pb.go",
            "sdk/plugin/pb/backend.pb.go||sdk/plugin/pb/backend.pb.go",
            "vault/activity/activity_log.pb.go||vault/activity/activity_log.pb.go",
            "vault/cluster/inmem_layer.go||vault/cluster/inmem_layer.go",
            "vault/cluster/simulations.go||vault/cluster/simulations.go",
            "vault/expiration.go||vault/expiration.go",
            "vault/external_tests/raft/raft_test.go||vault/external_tests/raft/raft_test.go",
            "vault/request_forwarding_service.pb.go||vault/request_forwarding_service.pb.go",
            "vault/request_handling.go||vault/request_handling.go",
            "vault/testing.go||vault/testing.go",
            "vault/testing_util.go||vault/testing_util.go"
          ],
          "candidate": [
            "helper/forwarding/types.pb.go||helper/forwarding/types.pb.go",
            "helper/identity/mfa/types.pb.go||helper/identity/mfa/types.pb.go",
            "helper/identity/types.pb.go||helper/identity/types.pb.go",
            "helper/storagepacker/types.pb.go||helper/storagepacker/types.pb.go",
            "physical/raft/chunking_test.go||physical/raft/chunking_test.go",
            "physical/raft/fsm.go||physical/raft/fsm.go",
            "physical/raft/raft.go||physical/raft/raft.go",
            "physical/raft/raft_test.go||physical/raft/raft_test.go",
            "physical/raft/snapshot_test.go||physical/raft/snapshot_test.go",
            "physical/raft/types.pb.go||physical/raft/types.pb.go",
            "sdk/database/dbplugin/database.pb.go||sdk/database/dbplugin/database.pb.go",
            "sdk/logical/identity.pb.go||sdk/logical/identity.pb.go",
            "sdk/logical/plugin.pb.go||sdk/logical/plugin.pb.go",
            "sdk/plugin/pb/backend.pb.go||sdk/plugin/pb/backend.pb.go",
            "vault/activity/activity_log.pb.go||vault/activity/activity_log.pb.go",
            "vault/cluster/inmem_layer.go||vault/cluster/inmem_layer.go",
            "vault/cluster/simulations.go||vault/cluster/simulations.go",
            "vault/expiration.go||vault/expiration.go",
            "vault/external_tests/raft/raft_test.go||vault/external_tests/raft/raft_test.go",
            "vault/request_forwarding_service.pb.go||vault/request_forwarding_service.pb.go",
            "vault/request_handling.go||vault/request_handling.go",
            "vault/testing.go||vault/testing.go",
            "vault/testing_util.go||vault/testing_util.go"
          ]
        }
      },
      "candidate_diff": {
        "helper/forwarding/types.pb.go||helper/forwarding/types.pb.go": [
          "File: helper/forwarding/types.pb.go -> helper/forwarding/types.pb.go"
        ],
        "helper/identity/mfa/types.pb.go||helper/identity/mfa/types.pb.go": [
          "File: helper/identity/mfa/types.pb.go -> helper/identity/mfa/types.pb.go"
        ],
        "helper/identity/types.pb.go||helper/identity/types.pb.go": [
          "File: helper/identity/types.pb.go -> helper/identity/types.pb.go"
        ],
        "helper/storagepacker/types.pb.go||helper/storagepacker/types.pb.go": [
          "File: helper/storagepacker/types.pb.go -> helper/storagepacker/types.pb.go"
        ],
        "physical/raft/chunking_test.go||physical/raft/chunking_test.go": [
          "File: physical/raft/chunking_test.go -> physical/raft/chunking_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:  t.Log(\"tearing down cluster\")",
          "83:  require.NoError(b.TeardownCluster(nil))",
          "85:  require.NoError(b.stableStore.(*raftboltdb.BoltStore).Close())",
          "87:  t.Log(\"starting new backend\")",
          "",
          "[Removed Lines]",
          "84:  require.NoError(b.fsm.db.Close())",
          "",
          "[Added Lines]",
          "84:  require.NoError(b.fsm.getDB().Close())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:   t.Fatal(err)",
          "196:  }",
          "198:  currentIndex := raft.AppliedIndex()",
          "200:  for i := 0; i < 10; i++ {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199:  err = raft.Put(context.Background(), &physical.Entry{",
          "200:   Key:   \"key\",",
          "201:   Value: []byte(\"test\"),",
          "202:  })",
          "203:  if err != nil {",
          "204:   t.Fatal(err)",
          "205:  }",
          "",
          "---------------"
        ],
        "physical/raft/fsm.go||physical/raft/fsm.go": [
          "File: physical/raft/fsm.go -> physical/raft/fsm.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:  logger      log.Logger",
          "78:  noopRestore bool",
          "80:  db *bolt.DB",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:  applyDelay time.Duration",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:  return f, nil",
          "119: }",
          "121: func (f *FSM) openDBFile(dbPath string) error {",
          "122:  if len(dbPath) == 0 {",
          "123:   return errors.New(\"can not open empty filename\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124: func (f *FSM) getDB() *bolt.DB {",
          "125:  f.l.RLock()",
          "126:  defer f.l.RUnlock()",
          "128:  return f.db",
          "129: }",
          "133: func (r *RaftBackend) SetFSMDelay(delay time.Duration) {",
          "134:  r.fsm.l.Lock()",
          "135:  r.fsm.applyDelay = delay",
          "136:  r.fsm.l.Unlock()",
          "137: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "222: }",
          "224: func (f *FSM) witnessSnapshot(metadata *raft.SnapshotMeta) error {",
          "225:  err := writeSnapshotMetaToDB(metadata, f.db)",
          "226:  if err != nil {",
          "227:   return err",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243:  f.l.RLock()",
          "244:  defer f.l.RUnlock()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "448:  f.l.RLock()",
          "449:  defer f.l.RUnlock()",
          "451:  err = f.db.Update(func(tx *bolt.Tx) error {",
          "452:   b := tx.Bucket(dataBucketName)",
          "453:   for _, commandRaw := range commands {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "472:  if f.applyDelay > 0 {",
          "473:   time.Sleep(f.applyDelay)",
          "474:  }",
          "",
          "---------------"
        ],
        "physical/raft/raft.go||physical/raft/raft.go": [
          "File: physical/raft/raft.go -> physical/raft/raft.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "768:  b.l.RLock()",
          "769:  defer b.l.RUnlock()",
          "772:   return 0",
          "773:  }",
          "776: }",
          "",
          "[Removed Lines]",
          "771:  if b.raft == nil {",
          "775:  return b.raft.AppliedIndex()",
          "",
          "[Added Lines]",
          "771:  if b.fsm == nil {",
          "777:  indexState, _ := b.fsm.LatestState()",
          "778:  return indexState.Index",
          "",
          "---------------"
        ],
        "physical/raft/raft_test.go||physical/raft/raft_test.go": [
          "File: physical/raft/raft_test.go -> physical/raft/raft_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:   }",
          "82:   for {",
          "84:     break",
          "85:    }",
          "86:   }",
          "",
          "[Removed Lines]",
          "83:    if backend.AppliedIndex() >= 2 {",
          "",
          "[Added Lines]",
          "83:    if backend.raft.AppliedIndex() >= 2 {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:   return fmt.Errorf(\"configs did not match: %+v != %+v\", config1, config2)",
          "157:  }",
          "160: }",
          "162: func compareDBs(t *testing.T, boltDB1, boltDB2 *bolt.DB, dataOnly bool) error {",
          "",
          "[Removed Lines]",
          "159:  return compareDBs(t, fsm1.db, fsm2.db, false)",
          "",
          "[Added Lines]",
          "159:  return compareDBs(t, fsm1.getDB(), fsm2.getDB(), false)",
          "",
          "---------------"
        ],
        "physical/raft/snapshot_test.go||physical/raft/snapshot_test.go": [
          "File: physical/raft/snapshot_test.go -> physical/raft/snapshot_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:  ensureCommitApplied(t, commitIdx, raft2)",
          "263:   t.Fatal(err)",
          "264:  }",
          "",
          "[Removed Lines]",
          "262:  if err := compareDBs(t, raft1.fsm.db, raft2.fsm.db, false); err != nil {",
          "",
          "[Added Lines]",
          "262:  if err := compareDBs(t, raft1.fsm.getDB(), raft2.fsm.getDB(), false); err != nil {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "758:   t.Fatal(err)",
          "759:  }",
          "762:  if err != nil {",
          "763:   t.Fatal(err)",
          "764:  }",
          "768:  if err == nil {",
          "769:   t.Fatal(\"expected error\")",
          "770:  }",
          "",
          "[Removed Lines]",
          "761:  err = compareDBs(t, fsm.db, newFSM.db, true)",
          "767:  err = compareDBs(t, fsm.db, newFSM.db, false)",
          "",
          "[Added Lines]",
          "761:  err = compareDBs(t, fsm.getDB(), newFSM.getDB(), true)",
          "767:  err = compareDBs(t, fsm.getDB(), newFSM.getDB(), false)",
          "",
          "---------------"
        ],
        "physical/raft/types.pb.go||physical/raft/types.pb.go": [
          "File: physical/raft/types.pb.go -> physical/raft/types.pb.go"
        ],
        "sdk/database/dbplugin/database.pb.go||sdk/database/dbplugin/database.pb.go": [
          "File: sdk/database/dbplugin/database.pb.go -> sdk/database/dbplugin/database.pb.go"
        ],
        "sdk/logical/identity.pb.go||sdk/logical/identity.pb.go": [
          "File: sdk/logical/identity.pb.go -> sdk/logical/identity.pb.go"
        ],
        "sdk/logical/plugin.pb.go||sdk/logical/plugin.pb.go": [
          "File: sdk/logical/plugin.pb.go -> sdk/logical/plugin.pb.go"
        ],
        "sdk/plugin/pb/backend.pb.go||sdk/plugin/pb/backend.pb.go": [
          "File: sdk/plugin/pb/backend.pb.go -> sdk/plugin/pb/backend.pb.go"
        ],
        "vault/activity/activity_log.pb.go||vault/activity/activity_log.pb.go": [
          "File: vault/activity/activity_log.pb.go -> vault/activity/activity_log.pb.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: package activity",
          "9: import (",
          "10:  proto \"github.com/golang/protobuf/proto\"",
          "12:  protoreflect \"google.golang.org/protobuf/reflect/protoreflect\"",
          "13:  protoimpl \"google.golang.org/protobuf/runtime/protoimpl\"",
          "14:  reflect \"reflect\"",
          "",
          "[Removed Lines]",
          "11:  _ \"github.com/golang/protobuf/ptypes/timestamp\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166: var file_vault_activity_activity_log_proto_rawDesc = []byte{",
          "167:  0x0a, 0x21, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,",
          "168:  0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72,",
          "199: }",
          "201: var (",
          "",
          "[Removed Lines]",
          "169:  0x6f, 0x74, 0x6f, 0x12, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a, 0x1f, 0x67,",
          "170:  0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,",
          "171:  0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6c,",
          "172:  0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b,",
          "173:  0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,",
          "174:  0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e,",
          "175:  0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,",
          "176:  0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c,",
          "177:  0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,",
          "178:  0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x88, 0x02, 0x0a,",
          "179:  0x0b, 0x4c, 0x6f, 0x67, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10,",
          "180:  0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65,",
          "181:  0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74,",
          "182:  0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,",
          "183:  0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x74, 0x69,",
          "184:  0x76, 0x69, 0x74, 0x79, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72,",
          "185:  0x64, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x11, 0x6e,",
          "186:  0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,",
          "187:  0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,",
          "188:  0x79, 0x2e, 0x4c, 0x6f, 0x67, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f,",
          "189:  0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x45, 0x6e, 0x74,",
          "190:  0x72, 0x79, 0x52, 0x0f, 0x6e, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b,",
          "191:  0x65, 0x6e, 0x73, 0x1a, 0x42, 0x0a, 0x14, 0x4e, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,",
          "192:  0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,",
          "193:  0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,",
          "194:  0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61,",
          "195:  0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75,",
          "196:  0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2f,",
          "197:  0x76, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69,",
          "198:  0x76, 0x69, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,",
          "",
          "[Added Lines]",
          "168:  0x6f, 0x74, 0x6f, 0x12, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x6c, 0x0a,",
          "169:  0x0c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a,",
          "170:  0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,",
          "171:  0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61,",
          "172:  0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,",
          "173:  0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a,",
          "174:  0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,",
          "175:  0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x88, 0x02, 0x0a, 0x0b,",
          "176:  0x4c, 0x6f, 0x67, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6f,",
          "177:  0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,",
          "178:  0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,",
          "179:  0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,",
          "180:  0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,",
          "181:  0x69, 0x74, 0x79, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,",
          "182:  0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x11, 0x6e, 0x6f,",
          "183:  0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18,",
          "184:  0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,",
          "185:  0x2e, 0x4c, 0x6f, 0x67, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x6e,",
          "186:  0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,",
          "187:  0x79, 0x52, 0x0f, 0x6e, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65,",
          "188:  0x6e, 0x73, 0x1a, 0x42, 0x0a, 0x14, 0x4e, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,",
          "189:  0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,",
          "190:  0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,",
          "191:  0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,",
          "192:  0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,",
          "193:  0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x76,",
          "194:  0x61, 0x75, 0x6c, 0x74, 0x2f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76,",
          "195:  0x69, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,",
          "",
          "---------------"
        ],
        "vault/cluster/inmem_layer.go||vault/cluster/inmem_layer.go": [
          "File: vault/cluster/inmem_layer.go -> vault/cluster/inmem_layer.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:  stopCh  chan struct{}",
          "32:  connectionCh chan *ConnectionInfo",
          "33: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:  readerDelay  time.Duration",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:  l.l.Unlock()",
          "53: }",
          "56: func (l *InmemLayer) Addrs() []net.Addr {",
          "57:  l.l.Lock()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: func (l *InmemLayer) SetReaderDelay(delay time.Duration) {",
          "57:  l.l.Lock()",
          "58:  defer l.l.Unlock()",
          "60:  l.readerDelay = delay",
          "63:  for _, servConns := range l.servConns {",
          "64:   for _, c := range servConns {",
          "65:    c.(*delayedConn).SetDelay(delay)",
          "66:   }",
          "67:  }",
          "69:  for _, clientConns := range l.clientConns {",
          "70:   for _, c := range clientConns {",
          "71:    c.(*delayedConn).SetDelay(delay)",
          "72:   }",
          "73:  }",
          "74: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:  tlsConn := tls.Client(conn, tlsConfig)",
          "132:  return tlsConn, nil",
          "133: }",
          "",
          "[Removed Lines]",
          "130:  l.clientConns[addr] = append(l.clientConns[addr], tlsConn)",
          "",
          "[Added Lines]",
          "151:  l.clientConns[addr] = append(l.clientConns[addr], conn)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150:  retConn, servConn := net.Pipe()",
          "152:  l.servConns[addr] = append(l.servConns[addr], servConn)",
          "154:  if l.logger.IsDebug() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:  retConn = newDelayedConn(retConn, l.readerDelay)",
          "174:  servConn = newDelayedConn(servConn, l.readerDelay)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "372:  }",
          "373: }",
          "375: type ConnectionInfo struct {",
          "376:  Node     string",
          "377:  Remote   string",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "399: func (ic *InmemLayerCluster) SetReaderDelay(delay time.Duration) {",
          "400:  for _, node := range ic.layers {",
          "401:   node.SetReaderDelay(delay)",
          "402:  }",
          "403: }",
          "",
          "---------------"
        ],
        "vault/cluster/simulations.go||vault/cluster/simulations.go": [
          "File: vault/cluster/simulations.go -> vault/cluster/simulations.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package cluster",
          "3: import (",
          "4:  \"io\"",
          "5:  \"net\"",
          "6:  \"time\"",
          "7: )",
          "9: type delayedConn struct {",
          "10:  net.Conn",
          "11:  dr *delayedReader",
          "12: }",
          "14: func newDelayedConn(conn net.Conn, delay time.Duration) net.Conn {",
          "15:  return &delayedConn{",
          "16:   Conn: conn,",
          "17:   dr: &delayedReader{",
          "18:    r:     conn,",
          "19:    delay: delay,",
          "20:   },",
          "21:  }",
          "22: }",
          "24: func (conn *delayedConn) Read(data []byte) (int, error) {",
          "25:  return conn.dr.Read(data)",
          "26: }",
          "28: func (conn *delayedConn) SetDelay(delay time.Duration) {",
          "29:  conn.dr.delay = delay",
          "30: }",
          "32: type delayedReader struct {",
          "33:  r     io.Reader",
          "34:  delay time.Duration",
          "35: }",
          "37: func (dr *delayedReader) Read(data []byte) (int, error) {",
          "39:  if dr.delay > 0 {",
          "40:   time.Sleep(dr.delay)",
          "41:  }",
          "43:  return dr.r.Read(data)",
          "44: }",
          "",
          "---------------"
        ],
        "vault/expiration.go||vault/expiration.go": [
          "File: vault/expiration.go -> vault/expiration.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "981:   if err != nil {",
          "982:    return nil, err",
          "983:   }",
          "984:   if le.ExpireTime.After(tokenLeaseTimes.ExpireTime) {",
          "985:    resp.Secret.TTL = tokenLeaseTimes.ExpireTime.Sub(le.LastRenewalTime)",
          "986:    le.ExpireTime = tokenLeaseTimes.ExpireTime",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "985:   if tokenLeaseTimes == nil {",
          "986:    return nil, errors.New(\"failed to load batch token expiration time\")",
          "987:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1200:   if err != nil {",
          "1201:    return \"\", err",
          "1202:   }",
          "1203:   if le.ExpireTime.After(tokenLeaseTimes.ExpireTime) {",
          "1204:    le.ExpireTime = tokenLeaseTimes.ExpireTime",
          "1205:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1208:   if tokenLeaseTimes == nil {",
          "1209:    return \"\", errors.New(\"failed to load batch token expiration time\")",
          "1210:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1225:  }",
          "1231:  return le.LeaseID, nil",
          "",
          "[Removed Lines]",
          "1228:  m.updatePending(le, resp.Secret.LeaseTotal())",
          "",
          "[Added Lines]",
          "1236:  m.updatePending(le, le.ExpireTime.Sub(time.Now()))",
          "1242:  resp.Secret.TTL = le.ExpireTime.Sub(time.Now()).Round(time.Second)",
          "",
          "---------------"
        ],
        "vault/external_tests/raft/raft_test.go||vault/external_tests/raft/raft_test.go": [
          "File: vault/external_tests/raft/raft_test.go -> vault/external_tests/raft/raft_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:  \"github.com/hashicorp/go-cleanhttp\"",
          "16:  uuid \"github.com/hashicorp/go-uuid\"",
          "17:  \"github.com/hashicorp/vault/api\"",
          "18:  \"github.com/hashicorp/vault/helper/namespace\"",
          "19:  \"github.com/hashicorp/vault/helper/testhelpers\"",
          "20:  \"github.com/hashicorp/vault/helper/testhelpers/teststorage\"",
          "21:  vaulthttp \"github.com/hashicorp/vault/http\"",
          "22:  \"github.com/hashicorp/vault/physical/raft\"",
          "23:  \"github.com/hashicorp/vault/vault\"",
          "24:  \"golang.org/x/net/http2\"",
          "25: )",
          "27: func raftCluster(t testing.TB) *vault.TestCluster {",
          "29:  var opts = vault.TestClusterOptions{HandlerFunc: vaulthttp.Handler}",
          "32:  cluster.Start()",
          "33:  vault.TestWaitActive(t, cluster.Cores[0].Core)",
          "34:  return cluster",
          "",
          "[Removed Lines]",
          "28:  var conf vault.CoreConfig",
          "30:  teststorage.RaftBackendSetup(&conf, &opts)",
          "31:  cluster := vault.NewTestCluster(t, &conf, &opts)",
          "",
          "[Added Lines]",
          "18:  credUserpass \"github.com/hashicorp/vault/builtin/credential/userpass\"",
          "24:  \"github.com/hashicorp/vault/sdk/logical\"",
          "30:  conf := &vault.CoreConfig{",
          "31:   CredentialBackends: map[string]logical.Factory{",
          "32:    \"userpass\": credUserpass.Factory,",
          "33:   },",
          "34:  }",
          "36:  teststorage.RaftBackendSetup(conf, &opts)",
          "37:  cluster := vault.NewTestCluster(t, conf, &opts)",
          "",
          "---------------"
        ],
        "vault/request_forwarding_service.pb.go||vault/request_forwarding_service.pb.go": [
          "File: vault/request_forwarding_service.pb.go -> vault/request_forwarding_service.pb.go"
        ],
        "vault/request_handling.go||vault/request_handling.go": [
          "File: vault/request_handling.go -> vault/request_handling.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: )",
          "31: const (",
          "33: )",
          "35: var (",
          "",
          "[Removed Lines]",
          "32:  replTimeout = 10 * time.Second",
          "",
          "[Added Lines]",
          "32:  replTimeout = 1 * time.Second",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "862:    leaseGenerated = true",
          "863:    resp.Secret.LeaseID = leaseID",
          "879:    ttl_label := metricsutil.TTLBucket(resp.Secret.TTL)",
          "880:    mountPointWithoutNs := ns.TrimmedPath(req.MountPoint)",
          "",
          "[Removed Lines]",
          "866:    le, err := c.expiration.FetchLeaseTimes(ctx, leaseID)",
          "867:    if err != nil {",
          "868:     c.logger.Error(\"failed to fetch updated lease time\", \"request_path\", req.Path, \"error\", err)",
          "869:     retErr = multierror.Append(retErr, ErrInternalError)",
          "870:     return nil, auth, retErr",
          "871:    }",
          "876:    resp.Secret.TTL = le.ExpireTime.Sub(time.Now()).Round(time.Second)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "vault/testing.go||vault/testing.go": [
          "File: vault/testing.go -> vault/testing.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1459:   coreConfig.DevToken = base.DevToken",
          "1460:   coreConfig.CounterSyncInterval = base.CounterSyncInterval",
          "1461:   coreConfig.RecoveryMode = base.RecoveryMode",
          "1462:  }",
          "1464:  if coreConfig.ClusterHeartbeatInterval == 0 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1463:   testApplyEntBaseConfig(coreConfig, base)",
          "",
          "---------------"
        ],
        "vault/testing_util.go||vault/testing_util.go": [
          "File: vault/testing_util.go -> vault/testing_util.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: func testAdjustUnderlyingStorage(tcc *TestClusterCore) {",
          "13:  tcc.UnderlyingStorage = tcc.physical",
          "14: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: func testApplyEntBaseConfig(coreConfig, base *CoreConfig) {}",
          "",
          "---------------"
        ]
      }
    }
  ]
}