{
  "cve_id": "CVE-2023-1001",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in xuliangzhan vxe-table up to 3.7.9. This issue affects the function export of the file packages/textarea/src/textarea.js of the component vxe-textarea. The manipulation of the argument inputValue leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 3.7.10 is able to address this issue. The patch is named d70b0e089740b65a22c89c106ebc4627ac48a22d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-266123.",
  "repo": "x-extends/vxe-table",
  "patch_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
  "patch_info": {
    "commit_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "repo": "x-extends/vxe-table",
    "commit_url": "https://github.com/x-extends/vxe-table/commit/d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "files": [
      "packages/table/src/body.js",
      "packages/textarea/src/textarea.js"
    ],
    "message": "textarea \u4fee\u590d\u6ce8\u5165xss\u95ee\u9898 #I8O21R",
    "before_after_code_files": [
      "packages/table/src/body.js||packages/table/src/body.js",
      "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js"
    ]
  },
  "patch_diff": {
    "packages/table/src/body.js||packages/table/src/body.js": [
      "File: packages/table/src/body.js -> packages/table/src/body.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "499:     elemStore[`${prefix}xSpace`] = $refs.xSpace",
      "500:     elemStore[`${prefix}ySpace`] = $refs.ySpace",
      "501:     elemStore[`${prefix}emptyBlock`] = $refs.emptyBlock",
      "504:   },",
      "505:   beforeDestroy () {",
      "506:     clearTimeout(this.wheelTime)",
      "",
      "[Removed Lines]",
      "502:     this.$el.onscroll = this.scrollEvent",
      "503:     this.$el._onscroll = this.scrollEvent",
      "",
      "[Added Lines]",
      "502:     if (this.$el) {",
      "503:       this.$el.onscroll = this.scrollEvent",
      "504:       this.$el._onscroll = this.scrollEvent",
      "505:     }",
      "",
      "---------------"
    ],
    "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js": [
      "File: packages/textarea/src/textarea.js -> packages/textarea/src/textarea.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:         autoTxtElem.className = ['vxe-textarea--autosize', size ? `size--${size}` : ''].join(' ')",
      "189:         autoTxtElem.style.width = `${textElem.clientWidth}px`",
      "190:         autoTxtElem.style.padding = textStyle.padding",
      "192:       }",
      "193:     },",
      "194:     handleResize () {",
      "",
      "[Removed Lines]",
      "191:         autoTxtElem.innerHTML = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "[Added Lines]",
      "191:         autoTxtElem.innerText = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "380d8545b444d463ba9fcf68b7e283aaba6e0920",
      "candidate_info": {
        "commit_hash": "380d8545b444d463ba9fcf68b7e283aaba6e0920",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/380d8545b444d463ba9fcf68b7e283aaba6e0920",
        "files": [
          "package.json",
          "packages/table/src/methods.ts"
        ],
        "message": "releases 3.11.7",
        "before_after_code_files": [
          "packages/table/src/methods.ts||packages/table/src/methods.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2508:   recalculate (reFull?: boolean) {",
          "2519:       internalData.rceTimeout = setTimeout(() => {",
          "2520:         internalData.rceTimeout = undefined",
          "2521:         resolve(handleRecalculateLayout($xeTable, !!reFull))",
          "",
          "[Removed Lines]",
          "2509:     const $xeTable = this",
          "2510:     const internalData = $xeTable",
          "2512:     const { rceTimeout } = internalData",
          "2513:     if (rceTimeout) {",
          "2514:       clearTimeout(rceTimeout)",
          "2515:     } else {",
          "2516:       handleRecalculateLayout($xeTable, !!reFull)",
          "2517:     }",
          "2518:     return new Promise(resolve => {",
          "",
          "[Added Lines]",
          "2509:     return new Promise<void>(resolve => {",
          "2510:       const $xeTable = this",
          "2511:       const internalData = $xeTable",
          "2513:       const { rceTimeout } = internalData",
          "2514:       if (rceTimeout) {",
          "2515:         clearTimeout(rceTimeout)",
          "2516:         $xeTable.$nextTick(() => {",
          "2517:           resolve()",
          "2518:         })",
          "2519:       } else {",
          "2520:         resolve(",
          "2521:           handleRecalculateLayout($xeTable, !!reFull)",
          "2522:         )",
          "2523:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9fd039753d374c5f2e48f9d5d4aa70535bc724b",
      "candidate_info": {
        "commit_hash": "e9fd039753d374c5f2e48f9d5d4aa70535bc724b",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/e9fd039753d374c5f2e48f9d5d4aa70535bc724b",
        "files": [
          "examples/views/icon/Icon.vue",
          "package.json",
          "packages/export/src/mixin.js",
          "packages/grid/src/grid.js",
          "packages/input/src/input.js",
          "packages/table/src/methods.js",
          "packages/v-x-e-table/src/renderer.js",
          "styles/icon.scss",
          "styles/icon/iconfont.ttf",
          "styles/icon/iconfont.woff",
          "styles/icon/iconfont.woff2",
          "styles/old-icon.scss"
        ],
        "message": "releases 3.8.17",
        "before_after_code_files": [
          "examples/views/icon/Icon.vue||examples/views/icon/Icon.vue",
          "packages/export/src/mixin.js||packages/export/src/mixin.js",
          "packages/grid/src/grid.js||packages/grid/src/grid.js",
          "packages/input/src/input.js||packages/input/src/input.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/v-x-e-table/src/renderer.js||packages/v-x-e-table/src/renderer.js",
          "styles/icon.scss||styles/icon.scss",
          "styles/old-icon.scss||styles/old-icon.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/views/icon/Icon.vue||examples/views/icon/Icon.vue": [
          "File: examples/views/icon/Icon.vue -> examples/views/icon/Icon.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   data () {",
          "26:     return {",
          "27:       prefixClass: 'vxe-icon-',",
          "29:       demoCodes: [",
          "30:         `",
          "31:         <i class=\"vxe-icon-delete\"></i>",
          "",
          "[Removed Lines]",
          "28:       iconList: ['end-page', 'home-page', 'time', 'feedback', 'lightning', 'cloudy', 'heavy-rain', 'moon', 'sunny', 'location', 'location-fill', 'microphone-fill', 'microphone', 'share', 'share-fill', 'flag', 'flag-fill', 'platform', 'goods-fill', 'goods', 'funnel-clear', 'envelope', 'envelope-open-fill', 'envelope-open', 'envelope-fill', 'message-fill', 'chat', 'chat-fill', 'send', 'send-fill', 'user', 'user-fill', 'wechat', 'alipay', 'indicator', 'file-excel', 'file-pdf', 'file-image', 'file-markdown', 'file-ppt', 'file-word', 'file-zip', 'file-txt', 'refresh', 'checkbox-unchecked', 'information', 'info-circle-fill', 'info-circle', 'chart-radar', 'chart-bar-x', 'repeat', 'voice-fill', 'voice', 'flow-branch', 'comment', 'folder', 'folder-open', 'picture', 'picture-fill', 'bell', 'bell-fill', 'undo', 'home', 'home-fill', 'checkbox-checked', 'checkbox-indeterminate', 'fullscreen', 'minimize', 'print', 'upload', 'download', 'cloud-upload', 'cloud-download', 'spinner', 'close', 'custom-column', 'edit', 'zoom-in', 'caret-down', 'caret-up', 'caret-right', 'caret-left', 'square-checked-fill', 'square-close', 'square-down', 'square-left', 'square-caret-right', 'square-minus', 'square-plus', 'square-right', 'square-up', 'square-checked', 'square-down-fill', 'square-minus-fill', 'square-close-fill', 'square-left-fill', 'square-caret-right-fill', 'square-up-fill', 'square-right-fill', 'square-plus-fill', 'square-plus-square', 'square-fill', 'square-square', 'sort-alpha-desc', 'sort-alpha-asc', 'sort-numeric-asc', 'sort-numeric-desc', 'star-fill', 'star', 'star-half', 'lock-fill', 'unlock-fill', 'question', 'exclamation', 'ellipsis-h', 'ellipsis-v', 'save', 'setting', 'setting-fill', 'link', 'sort', 'chart-pie', 'chart-line', 'swap', 'num-list', 'copy', 'company', 'swap-right', 'swap-left', 'table', 'merge-cells', 'paste', 'cut', 'lock', 'unlock', 'chart-bar-y', 'fixed-left-fill', 'fixed-left', 'fixed-right-fill', 'fixed-right', 'swap-down', 'swap-up', 'square', 'check', 'question-circle-fill', 'error-circle-fill', 'delete', 'dot', 'success-circle', 'delete-fill', 'minus', 'maximize', 'question-circle', 'warning-circle', 'warnion-circle-fill', 'eye-fill', 'search', 'funnel', 'eye-fill-close', 'search-zoom-in', 'arrow-right', 'arrow-left', 'arrow-up', 'calendar', 'arrow-down', 'warning-triangle', 'add', 'arrow-double-left', 'arrow-double-right', 'menu', 'warning-triangle-fill', 'error-circle', 'zoom-out', 'success-circle-fill', 'radio-checked', 'radio-unchecked'],",
          "",
          "[Added Lines]",
          "28:       iconList: [",
          "29:         'add', 'add-sub', 'add-user', 'add-users', 'align-center', 'align-left', 'align-right', 'alipay', 'arrow-double-left', 'arrow-double-right', 'arrow-down', 'arrow-left', 'arrow-right', 'arrow-up', 'arrows-down', 'arrows-left', 'arrows-right', 'arrows-up', 'association-form', 'bell', 'bell-fill', 'calendar', 'caret-down', 'caret-left', 'caret-right', 'caret-up', 'chart-bar-x', 'chart-bar-y', 'chart-line', 'chart-pie', 'chart-radar', 'chat', 'chat-fill', 'check', 'checkbox-checked', 'checkbox-checked-fill', 'checkbox-indeterminate-fill', 'checkbox-unchecked', 'click-button', 'close', 'cloud-download', 'cloud-upload', 'cloudy', 'comment', 'company', 'copy', 'custom-column', 'cut', 'delete', 'delete-fill', 'dot', 'download', 'drag-handle', 'edit', 'ellipsis-h', 'ellipsis-v', 'end-page', 'envelope', 'envelope-fill', 'envelope-open', 'envelope-open-fill', 'error-circle', 'error-circle-fill', 'exclamation', 'eye-fill', 'eye-fill-close', 'feedback', 'file', 'file-excel', 'file-image', 'file-markdown', 'file-pdf', 'file-ppt', 'file-txt', 'file-word', 'file-zip', 'fixed-left', 'fixed-left-fill', 'fixed-right', 'fixed-right-fill', 'flag', 'flag-fill', 'flow-branch', 'folder', 'folder-open', 'fullscreen', 'funnel', 'funnel-clear', 'goods', 'goods-fill', 'heavy-rain', 'home', 'home-fill', 'home-page', 'indicator', 'info-circle', 'info-circle-fill', 'information', 'input', 'layout', 'lightning', 'link', 'location', 'location-fill', 'lock', 'lock-fill', 'maximize', 'menu', 'menu-fold', 'menu-unfold', 'merge-cells', 'message-fill', 'microphone', 'microphone-fill', 'minimize', 'minus', 'mobile', 'moon', 'num-list', 'number', 'paste', 'pc', 'pct-1-1', 'pct-full', 'picture', 'picture-fill', 'platform', 'print', 'print-batch', 'question', 'question-circle', 'question-circle-fill', 'radio-checked', 'radio-checked-fill', 'radio-unchecked', 'recover', 'refresh', 'repeat', 'rmb', 'rotate-left', 'rotate-right', 'row-col', 'save', 'search', 'search-zoom-in', 'search-zoom-out', 'select', 'send', 'send-fill', 'setting', 'setting-fill', 'share', 'share-fill', 'signature', 'sort', 'sort-alpha-asc', 'sort-alpha-desc', 'sort-asc', 'sort-desc', 'sort-numeric-asc', 'sort-numeric-desc', 'spinner', 'square', 'square-caret-right', 'square-caret-right-fill', 'square-checked', 'square-checked-fill', 'square-close', 'square-close-fill', 'square-down', 'square-down-fill', 'square-fill', 'square-left', 'square-left-fill', 'square-minus', 'square-minus-fill', 'square-plus', 'square-plus-fill', 'square-plus-square', 'square-right', 'square-right-fill', 'square-square', 'square-up', 'square-up-fill', 'star', 'star-fill', 'star-half', 'subtable', 'success-circle', 'success-circle-fill', 'sunny', 'swap', 'swap-down', 'swap-left', 'swap-right', 'swap-up', 'switch', 'table', 'tabs', 'text', 'textarea', 'time', 'tree-select', 'undo', 'unlock', 'unlock-fill', 'upload', 'usd', 'user', 'user-fill', 'voice', 'voice-fill', 'warning-circle', 'warning-circle-fill', 'warning-triangle', 'warning-triangle-fill', 'wechat', 'zoom-in', 'zoom-out'",
          "30:       ],",
          "",
          "---------------"
        ],
        "packages/export/src/mixin.js||packages/export/src/mixin.js": [
          "File: packages/export/src/mixin.js -> packages/export/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1330:           if ($xegrid && !opts.remote) {",
          "1331:             const { beforeQueryAll, afterQueryAll, ajax = {}, props = {} } = $xegrid.proxyOpts",
          "1332:             const ajaxMethods = ajax.queryAll",
          "1334:             if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "1335:               if (!ajaxMethods) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1333:             const queryAllSuccessMethods = ajax.queryAllSuccess",
          "1334:             const queryAllErrorMethods = ajax.queryAllError",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1348:                 options: opts",
          "1349:               }",
          "1350:               return Promise.resolve((beforeQueryAll || ajaxMethods)(params))",
          "1352:                 .then(rest => {",
          "1353:                   opts.data = (props.list ? XEUtils.get(rest, props.list) : rest) || []",
          "1354:                   if (afterQueryAll) {",
          "1355:                     afterQueryAll(params)",
          "1356:                   }",
          "1357:                   return handleExport(this, opts)",
          "1358:                 })",
          "1359:             }",
          "1360:           }",
          "1361:         } else if (mode === 'current') {",
          "",
          "[Removed Lines]",
          "1351:                 .catch(e => e)",
          "",
          "[Added Lines]",
          "1358:                   if (queryAllSuccessMethods) {",
          "1359:                     queryAllSuccessMethods({ ...params, response: rest })",
          "1360:                   }",
          "1363:                 .catch((rest) => {",
          "1364:                   if (queryAllErrorMethods) {",
          "1365:                     queryAllErrorMethods({ ...params, response: rest })",
          "1366:                   }",
          "1367:                 })",
          "",
          "---------------"
        ],
        "packages/grid/src/grid.js||packages/grid/src/grid.js": [
          "File: packages/grid/src/grid.js -> packages/grid/src/grid.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "376:       return this.proxyOpts.showActiveMsg",
          "377:     },",
          "378:     proxyOpts () {",
          "380:     },",
          "381:     pagerOpts () {",
          "382:       return Object.assign({}, GlobalConfig.grid.pagerConfig, this.pagerConfig)",
          "",
          "[Removed Lines]",
          "379:       return Object.assign({}, GlobalConfig.grid.proxyConfig, this.proxyConfig)",
          "",
          "[Added Lines]",
          "379:       return XEUtils.merge({}, GlobalConfig.grid.proxyConfig, this.proxyConfig)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "625:         case 'reload':",
          "626:         case 'query': {",
          "627:           const ajaxMethods = ajax.query",
          "628:           if (ajaxMethods) {",
          "629:             const isInited = code === '_init'",
          "630:             const isReload = code === 'reload'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "628:           const querySuccessMethods = ajax.querySuccess",
          "629:           const queryErrorMethods = ajax.queryError",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "664:                 filterList = $xetable.getCheckedFilters()",
          "665:               }",
          "666:             }",
          "668:               code,",
          "669:               button,",
          "670:               isInited,",
          "",
          "[Removed Lines]",
          "667:             const params = {",
          "",
          "[Added Lines]",
          "669:             const commitParams = {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "680:             this.sortData = sortList",
          "681:             this.filterData = filterList",
          "682:             this.tableLoading = true",
          "684:             return Promise.resolve((beforeQuery || ajaxMethods)(...applyArgs))",
          "685:               .then(rest => {",
          "686:                 this.tableLoading = false",
          "",
          "[Removed Lines]",
          "683:             const applyArgs = [params].concat(args)",
          "",
          "[Added Lines]",
          "685:             const applyArgs = [commitParams].concat(args)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "706:                 if (afterQuery) {",
          "707:                   afterQuery(...applyArgs)",
          "708:                 }",
          "709:                 return { status: true }",
          "711:                 this.tableLoading = false",
          "712:                 return { status: false }",
          "713:               })",
          "714:           } else {",
          "",
          "[Removed Lines]",
          "710:               }).catch(() => {",
          "",
          "[Added Lines]",
          "711:                 if (querySuccessMethods) {",
          "712:                   querySuccessMethods({ ...commitParams, response: rest })",
          "713:                 }",
          "715:               }).catch((rest) => {",
          "717:                 if (queryErrorMethods) {",
          "718:                   queryErrorMethods({ ...commitParams, response: rest })",
          "719:                 }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "720:         }",
          "721:         case 'delete': {",
          "722:           const ajaxMethods = ajax.delete",
          "723:           if (ajaxMethods) {",
          "724:             const selectRecords = $xetable.getCheckboxRecords()",
          "725:             const removeRecords = selectRecords.filter(row => !$xetable.isInsertByRow(row))",
          "726:             const body = { removeRecords }",
          "728:             if (selectRecords.length) {",
          "729:               return this.handleDeleteRow(code, 'vxe.grid.deleteSelectRecord', () => {",
          "730:                 if (!removeRecords.length) {",
          "",
          "[Removed Lines]",
          "727:             const applyArgs = [{ $grid: this, code, button, body, form: formData, options: ajaxMethods }].concat(args)",
          "",
          "[Added Lines]",
          "731:           const deleteSuccessMethods = ajax.deleteSuccess",
          "732:           const deleteErrorMethods = ajax.deleteError",
          "737:             const commitParams = { $grid: this, code, button, body, form: formData, options: ajaxMethods }",
          "738:             const applyArgs = [commitParams].concat(args)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "749:                     } else {",
          "750:                       this.commitProxy('query')",
          "751:                     }",
          "752:                     return { status: true }",
          "753:                   })",
          "754:                   .catch(rest => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "763:                     if (deleteSuccessMethods) {",
          "764:                       deleteSuccessMethods({ ...commitParams, response: rest })",
          "765:                     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "762:                       }",
          "763:                       VXETable.modal.message({ id: code, content: this.getRespMsg(rest, 'vxe.grid.operError'), status: 'error' })",
          "764:                     }",
          "765:                     return { status: false }",
          "766:                   })",
          "767:               })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "779:                     if (deleteErrorMethods) {",
          "780:                       deleteErrorMethods({ ...commitParams, response: rest })",
          "781:                     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "785:         }",
          "786:         case 'save': {",
          "787:           const ajaxMethods = ajax.save",
          "788:           if (ajaxMethods) {",
          "789:             const body = this.getRecordset()",
          "790:             const { insertRecords, removeRecords, updateRecords, pendingRecords } = body",
          "793:             if (insertRecords.length) {",
          "794:               body.pendingRecords = pendingRecords.filter(row => insertRecords.indexOf(row) === -1)",
          "",
          "[Removed Lines]",
          "791:             const applyArgs = [{ $grid: this, code, button, body, form: formData, options: ajaxMethods }].concat(args)",
          "",
          "[Added Lines]",
          "805:           const saveSuccessMethods = ajax.saveSuccess",
          "806:           const saveErrorMethods = ajax.saveError",
          "810:             const commitParams = { $grid: this, code, button, body, form: formData, options: ajaxMethods }",
          "811:             const applyArgs = [commitParams].concat(args)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "827:                     } else {",
          "828:                       this.commitProxy('query')",
          "829:                     }",
          "830:                     return { status: true }",
          "831:                   })",
          "832:                   .catch(rest => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "850:                     if (saveSuccessMethods) {",
          "851:                       saveSuccessMethods({ ...commitParams, response: rest })",
          "852:                     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "840:                       }",
          "841:                       VXETable.modal.message({ id: code, content: this.getRespMsg(rest, 'vxe.grid.operError'), status: 'error' })",
          "842:                     }",
          "843:                     return { status: false }",
          "844:                   })",
          "845:               } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "866:                     if (saveErrorMethods) {",
          "867:                       saveErrorMethods({ ...commitParams, response: rest })",
          "868:                     }",
          "",
          "---------------"
        ],
        "packages/input/src/input.js||packages/input/src/input.js": [
          "File: packages/input/src/input.js -> packages/input/src/input.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "628:       type: String,",
          "629:       default: () => XEUtils.eqNull(GlobalConfig.input.placeholder) ? GlobalConfig.i18n('vxe.base.pleaseInput') : GlobalConfig.input.placeholder",
          "630:     },",
          "633:     align: String,",
          "634:     form: String,",
          "635:     className: String,",
          "",
          "[Removed Lines]",
          "631:     maxlength: [String, Number],",
          "632:     autocomplete: { type: String, default: 'off' },",
          "",
          "[Added Lines]",
          "631:     maxLength: [String, Number],",
          "632:     autoComplete: { type: String, default: 'off' },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "673:     prefixIcon: String,",
          "674:     suffixIcon: String,",
          "675:     placement: String,",
          "677:   },",
          "678:   inject: {",
          "679:     $xeform: {",
          "",
          "[Removed Lines]",
          "676:     transfer: { type: Boolean, default: () => GlobalConfig.input.transfer }",
          "",
          "[Added Lines]",
          "676:     transfer: { type: Boolean, default: () => GlobalConfig.input.transfer },",
          "679:     maxlength: [String, Number],",
          "681:     autocomplete: String",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "722:       return XEUtils.getSize(this.inputValue)",
          "723:     },",
          "724:     isCountError () {",
          "726:     },",
          "727:     stepValue () {",
          "728:       const { type, step } = this",
          "",
          "[Removed Lines]",
          "725:       return this.maxlength && this.inputCount > XEUtils.toNumber(this.maxlength)",
          "",
          "[Added Lines]",
          "730:       const { maxLength, maxlength } = this",
          "731:       return (maxLength || maxlength) && this.inputCount > XEUtils.toNumber(maxLength || maxlength)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1047:       return type",
          "1048:     },",
          "1049:     inpMaxlength () {",
          "1053:     },",
          "1054:     inpReadonly () {",
          "1055:       const { type, readonly, editable, multiple } = this",
          "",
          "[Removed Lines]",
          "1050:       const { isNumType, maxlength } = this",
          "1052:       return isNumType && !XEUtils.toNumber(maxlength) ? 16 : maxlength",
          "",
          "[Added Lines]",
          "1056:       const { isNumType, maxLength, maxlength } = this",
          "1058:       return isNumType && !XEUtils.toNumber(maxLength || maxlength) ? 16 : (maxLength || maxlength)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1135:     GlobalEvent.off(this, 'blur')",
          "1136:   },",
          "1137:   render (h) {",
          "1139:     const childs = []",
          "1140:     const prefix = rendePrefixIcon(h, this)",
          "1141:     const suffix = renderSuffixIcon(h, this)",
          "",
          "[Removed Lines]",
          "1138:     const { name, form, inputType, inpPlaceholder, inpMaxlength, inpReadonly, className, controls, showWordCount, countMethod, inputValue, isDatePickerType, visiblePanel, isActivated, vSize, type, align, readonly, disabled, autocomplete } = this",
          "",
          "[Added Lines]",
          "1144:     const { name, form, inputType, inpPlaceholder, inpMaxlength, inpReadonly, className, controls, showWordCount, countMethod, inputValue, isDatePickerType, visiblePanel, isActivated, vSize, type, align, readonly, disabled, autoComplete, autocomplete } = this",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1159:           maxlength: inpMaxlength,",
          "1160:           readonly: inpReadonly,",
          "1161:           disabled,",
          "1163:         },",
          "1164:         on: {",
          "1165:           keydown: this.keydownEvent,",
          "",
          "[Removed Lines]",
          "1162:           autocomplete",
          "",
          "[Added Lines]",
          "1168:           autocomplete: autoComplete || autocomplete",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2655:           this.clearSelected()",
          "2656:         }",
          "2657:         if (areaOpts.autoClear) {",
          "2665:           }",
          "2666:         }",
          "2667:       }",
          "",
          "[Removed Lines]",
          "2658:           const cellAreas = this.getCellAreas()",
          "2659:           if (cellAreas.length && !getEventTargetNode(evnt, document.body, 'vxe-table--ignore-areas-clear').flag) {",
          "2660:             this.preventEvent(evnt, 'event.clearAreas', {}, () => {",
          "2661:               this.clearCellAreas()",
          "2662:               this.clearCopyCellArea()",
          "2663:               this.emitEvent('clear-cell-area-selection', { cellAreas }, evnt)",
          "2664:             })",
          "",
          "[Added Lines]",
          "2658:           if (this.getCellAreas) {",
          "2659:             const cellAreas = this.getCellAreas()",
          "2660:             if (cellAreas && cellAreas.length && !getEventTargetNode(evnt, document.body, 'vxe-table--ignore-areas-clear').flag) {",
          "2661:               this.preventEvent(evnt, 'event.clearAreas', {}, () => {",
          "2662:                 this.clearCellAreas()",
          "2663:                 this.clearCopyCellArea()",
          "2664:                 this.emitEvent('clear-cell-area-selection', { cellAreas }, evnt)",
          "2665:               })",
          "2666:             }",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/src/renderer.js||packages/v-x-e-table/src/renderer.js": [
          "File: packages/v-x-e-table/src/renderer.js -> packages/v-x-e-table/src/renderer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "470:   let selectItem",
          "471:   const labelProp = optionProps.label || 'label'",
          "472:   const valueProp = optionProps.value || 'value'",
          "474:     return XEUtils.map(props.multiple ? cellValue : [cellValue], optionGroups ? (value) => {",
          "475:       const groupOptions = optionGroupProps.options || 'options'",
          "476:       for (let index = 0; index < optionGroups.length; index++) {",
          "",
          "[Removed Lines]",
          "473:   if (!isEmptyValue(cellValue)) {",
          "",
          "[Added Lines]",
          "473:   if (!(cellValue === null || cellValue === undefined)) {",
          "",
          "---------------"
        ],
        "styles/icon.scss||styles/icon.scss": [
          "File: styles/icon.scss -> styles/icon.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: @import './old-icon.scss';",
          "3: @font-face {",
          "4:   font-family: \"vxeiconfont\";",
          "5:   src:",
          "7: }",
          "9: @keyframes rollCircle {",
          "",
          "[Removed Lines]",
          "6:        url('data:application/x-font-woff2;charset=utf-8;base64,') format('woff2');",
          "",
          "[Added Lines]",
          "7:        url('data:application/x-font-woff2;charset=utf-8;base64,') format('woff2');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   ),",
          "31:   (",
          "32:     name: \"warning\",",
          "34:   ),",
          "35:   (",
          "36:     name: \"danger\",",
          "",
          "[Removed Lines]",
          "33:     textColor:  $vxe-warning-color,",
          "",
          "[Added Lines]",
          "34:     textColor: $vxe-warning-color,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:   }",
          "78: }",
          "80: .vxe-icon-align-left:before {",
          "81:   content: \"\\e6bb\";",
          "82: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: .vxe-icon {",
          "82:   user-select: none;",
          "83: }",
          "85: .vxe-icon {",
          "86:   &.size--medium {",
          "87:     font-size: $vxe-font-size-medium;",
          "88:   }",
          "89:   &.size--small {",
          "90:     font-size: $vxe-font-size-small;",
          "91:   }",
          "92:   &.size--mini {",
          "93:     font-size: $vxe-font-size-mini;",
          "94:   }",
          "95: }",
          "97: .vxe-icon-menu-unfold:before {",
          "98:   content: \"\\e686\";",
          "99: }",
          "101: .vxe-icon-menu-fold:before {",
          "102:   content: \"\\f299\";",
          "103: }",
          "105: .vxe-icon-arrows-right:before {",
          "106:   content: \"\\e60f\";",
          "107: }",
          "109: .vxe-icon-arrows-left:before {",
          "110:   content: \"\\f296\";",
          "111: }",
          "113: .vxe-icon-arrows-up:before {",
          "114:   content: \"\\f297\";",
          "115: }",
          "117: .vxe-icon-arrows-down:before {",
          "118:   content: \"\\f298\";",
          "119: }",
          "121: .vxe-icon-add-sub:before {",
          "122:   content: \"\\e6bc\";",
          "123: }",
          "125: .vxe-icon-tree-select:before {",
          "126:   content: \"\\e6b2\";",
          "127: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "173:   content: \"\\e62a\";",
          "174: }",
          "177:   content: \"\\e659\";",
          "178: }",
          "",
          "[Removed Lines]",
          "176: .vxe-icon-title:before {",
          "",
          "[Added Lines]",
          "225: .vxe-icon-text:before {",
          "",
          "---------------"
        ],
        "styles/old-icon.scss||styles/old-icon.scss": [
          "File: styles/old-icon.scss -> styles/old-icon.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "716: .vxe-icon-warnion-circle-fill:before {",
          "717:   content: \"\\e848\";",
          "718: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "720: .vxe-icon-title:before {",
          "721:   content: \"\\e6e7\";",
          "722: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f27a1d4331f758bae041663747802a3e39e34a7e",
      "candidate_info": {
        "commit_hash": "f27a1d4331f758bae041663747802a3e39e34a7e",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/f27a1d4331f758bae041663747802a3e39e34a7e",
        "files": [
          "packages/table/src/methods.js"
        ],
        "message": "\u4fee\u590d sort-change \u4e8b\u4ef6\u7279\u5b9a\u573a\u666f\u65e0\u6cd5\u89e6\u53d1\u95ee\u9898",
        "before_after_code_files": [
          "packages/table/src/methods.js||packages/table/src/methods.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3939:       }",
          "3940:       const params = { $table: this, $event: evnt, column, field, property: field, order: column.order, sortList: this.getSortColumns(), sortTime: column.sortTime }",
          "3941:       if (this.mouseConfig && this.mouseOpts.area && this.handleSortEvent) {",
          "3943:       }",
          "3944:       this.emitEvent('sort-change', params, evnt)",
          "3945:     }",
          "",
          "[Removed Lines]",
          "3942:         return this.handleSortEvent(evnt, params)",
          "",
          "[Added Lines]",
          "3942:         this.handleSortEvent(evnt, params)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bbf557f2731ea94ffe61e6f80053b9d776cb74fe",
      "candidate_info": {
        "commit_hash": "bbf557f2731ea94ffe61e6f80053b9d776cb74fe",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/bbf557f2731ea94ffe61e6f80053b9d776cb74fe",
        "files": [
          "helper/vetur/attributes.json",
          "helper/vetur/tags.json",
          "package.json",
          "packages/button/src/button.js",
          "packages/pulldown/src/pulldown.js",
          "packages/select/src/select.js",
          "packages/tooltip/src/tooltip.js"
        ],
        "message": "fix",
        "before_after_code_files": [
          "packages/button/src/button.js||packages/button/src/button.js",
          "packages/pulldown/src/pulldown.js||packages/pulldown/src/pulldown.js",
          "packages/select/src/select.js||packages/select/src/select.js",
          "packages/tooltip/src/tooltip.js||packages/tooltip/src/tooltip.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/button/src/button.js||packages/button/src/button.js": [
          "File: packages/button/src/button.js -> packages/button/src/button.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     disabled: Boolean,",
          "22:     loading: Boolean,",
          "23:     destroyOnClose: Boolean,",
          "25:     transfer: { type: Boolean, default: () => GlobalConfig.button.transfer }",
          "26:   },",
          "27:   data () {",
          "",
          "[Removed Lines]",
          "24:     className: String,",
          "",
          "[Added Lines]",
          "24:     className: [String, Function],",
          "25:     popupClassName: [String, Function],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     GlobalEvent.off(this, 'mousewheel')",
          "59:   },",
          "60:   render (h) {",
          "62:     const downsSlot = $scopedSlots.dropdowns",
          "63:     return downsSlot ? h('div', {",
          "65:         [`size--${vSize}`]: vSize,",
          "66:         'is--active': showPanel",
          "67:       }]",
          "",
          "[Removed Lines]",
          "61:     const { $scopedSlots, $listeners, className, inited, type, destroyOnClose, isFormBtn, status, btnType, vSize, name, disabled, loading, showPanel, animatVisible, panelPlacement } = this",
          "64:       class: ['vxe-button--dropdown', className, {",
          "",
          "[Added Lines]",
          "62:     const { $scopedSlots, $listeners, className, popupClassName, inited, type, destroyOnClose, isFormBtn, status, btnType, vSize, name, disabled, loading, showPanel, animatVisible, panelPlacement } = this",
          "65:       class: ['vxe-button--dropdown', className ? (XEUtils.isFunction(className) ? className({ $button: this }) : className) : '', {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:       ])),",
          "93:       h('div', {",
          "94:         ref: 'panel',",
          "96:           [`size--${vSize}`]: vSize,",
          "97:           'animat--leave': animatVisible,",
          "98:           'animat--enter': showPanel",
          "",
          "[Removed Lines]",
          "95:         class: ['vxe-button--dropdown-panel', {",
          "",
          "[Added Lines]",
          "96:         class: ['vxe-button--dropdown-panel', popupClassName ? (XEUtils.isFunction(popupClassName) ? popupClassName({ $button: this }) : popupClassName) : '', {",
          "",
          "---------------"
        ],
        "packages/pulldown/src/pulldown.js||packages/pulldown/src/pulldown.js": [
          "File: packages/pulldown/src/pulldown.js -> packages/pulldown/src/pulldown.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import UtilTools from '../../tools/utils'",
          "4: import DomTools from '../../tools/dom'",
          "5: import { GlobalEvent } from '../../tools/event'",
          "7: export default {",
          "8:   name: 'VxePulldown',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import XEUtils from 'xe-utils'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12:     disabled: Boolean,",
          "13:     placement: String,",
          "14:     size: { type: String, default: () => GlobalConfig.size },",
          "15:     destroyOnClose: Boolean,",
          "16:     transfer: Boolean",
          "17:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:     className: [String, Function],",
          "17:     popupClassName: [String, Function],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:     GlobalEvent.off(this, 'blur')",
          "54:   },",
          "55:   render (h) {",
          "57:     const defaultSlot = $scopedSlots.default",
          "58:     const downSlot = $scopedSlots.dropdown",
          "59:     return h('div', {",
          "61:         [`size--${vSize}`]: vSize,",
          "62:         'is--visivle': visiblePanel,",
          "63:         'is--disabled': disabled,",
          "",
          "[Removed Lines]",
          "56:     const { $scopedSlots, inited, vSize, destroyOnClose, transfer, isActivated, disabled, animatVisible, visiblePanel, panelStyle, panelPlacement } = this",
          "60:       class: ['vxe-pulldown', {",
          "",
          "[Added Lines]",
          "59:     const { $scopedSlots, inited, className, popupClassName, vSize, destroyOnClose, transfer, isActivated, disabled, animatVisible, visiblePanel, panelStyle, panelPlacement } = this",
          "63:       class: ['vxe-pulldown', className ? (XEUtils.isFunction(className) ? className({ $pulldown: this }) : className) : '', {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:       }, defaultSlot ? defaultSlot.call(this, { $pulldown: this }, h) : []),",
          "71:       h('div', {",
          "72:         ref: 'panel',",
          "74:           [`size--${vSize}`]: vSize,",
          "75:           'is--transfer': transfer,",
          "76:           'animat--leave': animatVisible,",
          "",
          "[Removed Lines]",
          "73:         class: ['vxe-table--ignore-clear vxe-pulldown--panel', {",
          "",
          "[Added Lines]",
          "76:         class: ['vxe-table--ignore-clear vxe-pulldown--panel', popupClassName ? (XEUtils.isFunction(popupClassName) ? popupClassName({ $pulldown: this }) : popupClassName) : '', {",
          "",
          "---------------"
        ],
        "packages/select/src/select.js||packages/select/src/select.js": [
          "File: packages/select/src/select.js -> packages/select/src/select.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "254:     optionGroupProps: Object,",
          "255:     optionConfig: Object,",
          "256:     className: [String, Function],",
          "257:     max: [String, Number],",
          "258:     size: { type: String, default: () => GlobalConfig.select.size || GlobalConfig.size },",
          "259:     filterable: Boolean,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "257:     popupClassName: [String, Function],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "408:     GlobalEvent.off(this, 'blur')",
          "409:   },",
          "410:   render (h) {",
          "412:     const prefixSlot = $scopedSlots.prefix",
          "413:     return h('div', {",
          "414:       class: ['vxe-select', className ? (XEUtils.isFunction(className) ? className({ $select: this }) : className) : '', {",
          "",
          "[Removed Lines]",
          "411:     const { _e, $scopedSlots, vSize, className, inited, isActivated, loading, disabled, visiblePanel, filterable } = this",
          "",
          "[Added Lines]",
          "412:     const { _e, $scopedSlots, vSize, className, popupClassName, inited, isActivated, loading, disabled, visiblePanel, filterable } = this",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "449:       }),",
          "450:       h('div', {",
          "451:         ref: 'panel',",
          "453:           [`size--${vSize}`]: vSize,",
          "454:           'is--transfer': this.transfer,",
          "455:           'animat--leave': !loading && this.animatVisible,",
          "",
          "[Removed Lines]",
          "452:         class: ['vxe-table--ignore-clear vxe-select--panel', {",
          "",
          "[Added Lines]",
          "453:         class: ['vxe-table--ignore-clear vxe-select--panel', popupClassName ? (XEUtils.isFunction(popupClassName) ? popupClassName({ $select: this }) : popupClassName) : '', {",
          "",
          "---------------"
        ],
        "packages/tooltip/src/tooltip.js||packages/tooltip/src/tooltip.js": [
          "File: packages/tooltip/src/tooltip.js -> packages/tooltip/src/tooltip.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:     content: { type: [String, Number], default: null },",
          "76:     useHTML: Boolean,",
          "77:     zIndex: [String, Number],",
          "78:     isArrow: { type: Boolean, default: true },",
          "79:     enterable: Boolean,",
          "80:     enterDelay: { type: Number, default: () => GlobalConfig.tooltip.enterDelay },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:     popupClassName: [String, Function],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:     }",
          "160:   },",
          "161:   render (h) {",
          "163:     let on",
          "164:     if (enterable) {",
          "165:       on = {",
          "",
          "[Removed Lines]",
          "162:     const { $scopedSlots, vSize, theme, tipActive, isArrow, visible, tipStore, enterable } = this",
          "",
          "[Added Lines]",
          "163:     const { $scopedSlots, vSize, popupClassName, theme, tipActive, isArrow, visible, tipStore, enterable } = this",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168:       }",
          "169:     }",
          "170:     return h('div', {",
          "172:         [`size--${vSize}`]: vSize,",
          "173:         [`placement--${tipStore.placement}`]: tipStore.placement,",
          "174:         'is--enterable': enterable,",
          "",
          "[Removed Lines]",
          "171:       class: ['vxe-table--tooltip-wrapper', `theme--${theme}`, {",
          "",
          "[Added Lines]",
          "172:       class: ['vxe-table--tooltip-wrapper', `theme--${theme}`, popupClassName ? (XEUtils.isFunction(popupClassName) ? popupClassName({ $tooltip: this }) : popupClassName) : '', {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e329bc376e3a4e058e4ae7a33dc83d9b9af1f3a",
      "candidate_info": {
        "commit_hash": "3e329bc376e3a4e058e4ae7a33dc83d9b9af1f3a",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/3e329bc376e3a4e058e4ae7a33dc83d9b9af1f3a",
        "files": [
          "package.json",
          "packages/grid/src/grid.ts",
          "packages/table/module/export/export-panel.ts",
          "packages/table/module/export/import-panel.ts",
          "packages/table/src/methods.ts",
          "packages/table/src/table.ts",
          "packages/table/src/util.ts"
        ],
        "message": "\u91cd\u6784\u7ec4\u4ef6",
        "before_after_code_files": [
          "packages/grid/src/grid.ts||packages/grid/src/grid.ts",
          "packages/table/module/export/export-panel.ts||packages/table/module/export/export-panel.ts",
          "packages/table/module/export/import-panel.ts||packages/table/module/export/import-panel.ts",
          "packages/table/src/methods.ts||packages/table/src/methods.ts",
          "packages/table/src/table.ts||packages/table/src/table.ts",
          "packages/table/src/util.ts||packages/table/src/util.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/grid/src/grid.ts||packages/grid/src/grid.ts": [
          "File: packages/grid/src/grid.ts -> packages/grid/src/grid.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "484:     globalEvents.off(this, 'keydown')",
          "485:   },",
          "486:   render (this: any, h: CreateElement) {",
          "488:     return h('div', {",
          "489:       class: ['vxe-grid', {",
          "490:         [`size--${vSize}`]: vSize,",
          "",
          "[Removed Lines]",
          "487:     const { vSize, isZMax } = this",
          "",
          "[Added Lines]",
          "487:     const { computeSize, isZMax } = this",
          "488:     const vSize = computeSize",
          "",
          "---------------"
        ],
        "packages/table/module/export/export-panel.ts||packages/table/module/export/export-panel.ts": [
          "File: packages/table/module/export/export-panel.ts -> packages/table/module/export/export-panel.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import XEUtils from 'xe-utils'",
          "4: import { formatText } from '../../../ui/src/utils'",
          "8: export default {",
          "9:   name: 'VxeTableExportPanel',",
          "10:   props: {",
          "11:     defaultOptions: Object,",
          "12:     storeData: Object",
          "",
          "[Removed Lines]",
          "6: const { getI18n, getIcon } = VxeUI",
          "",
          "[Added Lines]",
          "6: const { getI18n, getIcon, globalMixins } = VxeUI",
          "10:   mixins: [",
          "11:     globalMixins.sizeMixin",
          "12:   ],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:     }",
          "27:   },",
          "28:   computed: {",
          "32:     checkedAll () {",
          "33:       return this.storeData.columns.every((column: any) => column.checked)",
          "34:     },",
          "",
          "[Removed Lines]",
          "29:     vSize () {",
          "30:       return this.size || this.$parent.size || this.$parent.vSize",
          "31:     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/table/module/export/import-panel.ts||packages/table/module/export/import-panel.ts": [
          "File: packages/table/module/export/import-panel.ts -> packages/table/module/export/import-panel.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import { parseFile } from '../../../ui/src/utils'",
          "9: export default {",
          "10:   name: 'VxeTableImportPanel',",
          "11:   props: {",
          "12:     defaultOptions: Object,",
          "13:     storeData: Object",
          "",
          "[Removed Lines]",
          "7: const { getI18n, getIcon } = VxeUI",
          "",
          "[Added Lines]",
          "7: const { getI18n, getIcon, globalMixins } = VxeUI",
          "11:   mixins: [",
          "12:     globalMixins.sizeMixin",
          "13:   ],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     }",
          "23:   },",
          "24:   computed: {",
          "28:     selectName () {",
          "29:       return `${this.storeData.filename}.${this.storeData.type}`",
          "30:     },",
          "",
          "[Removed Lines]",
          "25:     vSize () {",
          "26:       return this.size || this.$parent.size || this.$parent.vSize",
          "27:     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: }",
          "109: function computeVirtualY (_vm: any) {",
          "111:   const { tableHeader, tableBody } = $refs",
          "112:   const tableBodyElem = tableBody ? tableBody.$el : null",
          "113:   if (tableBodyElem) {",
          "114:     const tableHeaderElem = tableHeader ? tableHeader.$el : null",
          "115:     let rowHeight = 0",
          "",
          "[Removed Lines]",
          "110:   const { $refs, vSize, rowHeightMaps } = _vm",
          "",
          "[Added Lines]",
          "110:   const { $refs, computeSize, rowHeightMaps } = _vm",
          "113:   const vSize = computeSize",
          "",
          "---------------"
        ],
        "packages/table/src/table.ts||packages/table/src/table.ts": [
          "File: packages/table/src/table.ts -> packages/table/src/table.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1001:       treeConfig,",
          "1002:       mouseConfig,",
          "1003:       mouseOpts,",
          "1005:       validOpts,",
          "1006:       showFooter,",
          "1007:       overflowX,",
          "",
          "[Removed Lines]",
          "1004:       vSize,",
          "",
          "[Added Lines]",
          "1004:       computeSize,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1030:     } = this",
          "1031:     const { leftList, rightList } = columnStore",
          "1032:     const currLoading = this._isLoading || loading",
          "1033:     return h('div', {",
          "1034:       class: ['vxe-table', 'vxe-table--render-default', `tid_${tId}`, vSize ? `size--${vSize}` : '', `border--${tableBorder}`, {",
          "1035:         [`valid-msg--${validOpts.msgMode}`]: !!editRules,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1033:     const vSize = computeSize",
          "",
          "---------------"
        ],
        "packages/table/src/util.ts||packages/table/src/util.ts": [
          "File: packages/table/src/util.ts -> packages/table/src/util.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "271: }",
          "273: export function getOffsetSize ($xetable: any) {",
          "275: }",
          "277: export function calcTreeLine (params: any, items: any, rIndex: any) {",
          "",
          "[Removed Lines]",
          "274:   return lineOffsetSizes[$xetable.vSize] || 0",
          "",
          "[Added Lines]",
          "274:   const vSize = $xetable.computeSize",
          "275:   return lineOffsetSizes[vSize] || 0",
          "",
          "---------------"
        ]
      }
    }
  ]
}