{
  "cve_id": "CVE-2023-30943",
  "cve_desc": "The vulnerability was found Moodle which exists because the application allows a user to control path of the older to create in TinyMCE loaders. A remote user can send a specially crafted HTTP request and create arbitrary folders on the system.",
  "repo": "moodle/moodle",
  "patch_hash": "59d42e1ed23f916dcb47d53c745bef18a116d800",
  "patch_info": {
    "commit_hash": "59d42e1ed23f916dcb47d53c745bef18a116d800",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/59d42e1ed23f916dcb47d53c745bef18a116d800",
    "files": [
      "lib/editor/tiny/lang.php",
      "lib/editor/tiny/loader.php"
    ],
    "message": "MDL-77718 editor_tiny: Restrict the revision to int for loaders\n\nThe revision should always be an int. I suspect this was missed during\ndebugging and not corrected.",
    "before_after_code_files": [
      "lib/editor/tiny/lang.php||lib/editor/tiny/lang.php",
      "lib/editor/tiny/loader.php||lib/editor/tiny/loader.php"
    ]
  },
  "patch_diff": {
    "lib/editor/tiny/lang.php||lib/editor/tiny/lang.php": [
      "File: lib/editor/tiny/lang.php -> lib/editor/tiny/lang.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "74:             }",
      "76:             [$rev, $lang] = explode('/', $slashargument, 2);",
      "78:             $lang = min_clean_param($lang, 'SAFEDIR');",
      "79:         } else {",
      "81:             $lang = min_optional_param('lang', 'standard', 'SAFEDIR');",
      "82:         }",
      "",
      "[Removed Lines]",
      "77:             $rev  = min_clean_param($rev, 'RAW');",
      "80:             $rev  = min_optional_param('rev', 0, 'RAW');",
      "",
      "[Added Lines]",
      "77:             $rev  = min_clean_param($rev, 'INT');",
      "80:             $rev  = min_optional_param('rev', 0, 'INT');",
      "",
      "---------------"
    ],
    "lib/editor/tiny/loader.php||lib/editor/tiny/loader.php": [
      "File: lib/editor/tiny/loader.php -> lib/editor/tiny/loader.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "74:             }",
      "76:             [$rev, $filepath] = explode('/', $slashargument, 2);",
      "78:             $this->filepath = min_clean_param($filepath, 'SAFEPATH');",
      "79:         } else {",
      "81:             $this->filepath = min_optional_param('filepath', 'standard', 'SAFEPATH');",
      "82:         }",
      "",
      "[Removed Lines]",
      "77:             $this->rev  = min_clean_param($rev, 'RAW');",
      "80:             $this->rev  = min_optional_param('rev', 0, 'RAW');",
      "",
      "[Added Lines]",
      "77:             $this->rev  = min_clean_param($rev, 'INT');",
      "80:             $this->rev  = min_optional_param('rev', 0, 'INT');",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d8cf77a127b364f7707e62d41c658fffc4623090",
      "candidate_info": {
        "commit_hash": "d8cf77a127b364f7707e62d41c658fffc4623090",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/d8cf77a127b364f7707e62d41c658fffc4623090",
        "files": [
          "lib/editor/tiny/amd/build/editor.min.js",
          "lib/editor/tiny/amd/build/editor.min.js.map",
          "lib/editor/tiny/amd/src/editor.js",
          "lib/editor/tiny/lang.php",
          "lib/editor/tiny/lang/en/editor_tiny.php",
          "lib/editor/tiny/readme_moodle.md",
          "lib/editor/tiny/tinystrings.json",
          "lib/editor/tiny/tools/getOriginals.mjs"
        ],
        "message": "MDL-75246 editor_tiny: Add initial translation support\n\nPart of MDL-75966\n\nAdd support for translation of the TinyMCE interface.\n\nTinyMCE translates English language strings rather than keys, and a tool\nto perform this translation is included.",
        "before_after_code_files": [
          "lib/editor/tiny/amd/src/editor.js||lib/editor/tiny/amd/src/editor.js",
          "lib/editor/tiny/lang.php||lib/editor/tiny/lang.php",
          "lib/editor/tiny/lang/en/editor_tiny.php||lib/editor/tiny/lang/en/editor_tiny.php",
          "lib/editor/tiny/tools/getOriginals.mjs||lib/editor/tiny/tools/getOriginals.mjs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/editor/tiny/lang.php||lib/editor/tiny/lang.php"
          ],
          "candidate": [
            "lib/editor/tiny/lang.php||lib/editor/tiny/lang.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/editor/tiny/amd/src/editor.js||lib/editor/tiny/amd/src/editor.js": [
          "File: lib/editor/tiny/amd/src/editor.js -> lib/editor/tiny/amd/src/editor.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     };",
          "77: };",
          "79: export const getAllInstances = () => new Map(instanceMap.entries());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79: const fetchLanguage = (language) => fetch(",
          "80:     `${M.cfg.wwwroot}/lib/editor/tiny/lang.php/${M.cfg.langrev}/${language}`",
          "81: ).then(response => response.json());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:     return setupForTarget(target, options);",
          "115: };",
          "117: const getPlugins = (options) => {",
          "118:     if (options.plugins) {",
          "119:         return options.plugins;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121: const initialisePage = async() => {",
          "122:     const lang = document.querySelector('html').lang;",
          "124:     const [tinyMCE, langData] = await Promise.all([getTinyMCE(), fetchLanguage(lang)]);",
          "125:     tinyMCE.addI18n(lang, langData);",
          "126: };",
          "127: initialisePage();",
          "",
          "---------------"
        ],
        "lib/editor/tiny/lang.php||lib/editor/tiny/lang.php": [
          "File: lib/editor/tiny/lang.php -> lib/editor/tiny/lang.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace editor_tiny;",
          "29: define('NO_DEBUG_DISPLAY', true);",
          "32: define('ABORT_AFTER_CONFIG', true);",
          "35: require('../../../config.php');",
          "43: class lang {",
          "45:     protected $lang;",
          "48:     protected $rev;",
          "51:     protected $fullyloaded = false;",
          "56:     public function __construct() {",
          "57:         $this->parse_file_information_from_url();",
          "58:         $this->serve_file();",
          "59:     }",
          "64:     protected function parse_file_information_from_url(): void {",
          "65:         global $CFG;",
          "70:         if ($slashargument = min_get_slash_argument()) {",
          "71:             $slashargument = ltrim($slashargument, '/');",
          "72:             if (substr_count($slashargument, '/') < 1) {",
          "73:                 css_send_css_not_found();",
          "74:             }",
          "76:             [$rev, $lang] = explode('/', $slashargument, 2);",
          "77:             $rev  = min_clean_param($rev, 'RAW');",
          "78:             $lang = min_clean_param($lang, 'SAFEDIR');",
          "79:         } else {",
          "80:             $rev  = min_optional_param('rev', 0, 'RAW');",
          "81:             $lang = min_optional_param('lang', 'standard', 'SAFEDIR');",
          "82:         }",
          "84:         $this->lang = $lang;",
          "85:         $this->rev = $rev;",
          "86:         $this->candidatefile = \"{$CFG->localcachedir}/editor_tiny/{$this->rev}/lang/{$this->lang}/lang.json\";",
          "87:     }",
          "92:     protected function serve_file(): void {",
          "94:         if ($this->rev > 0) {",
          "95:             if ($this->is_candidate_file_available()) {",
          "99:                 $this->send_cached_pack();",
          "100:             }",
          "104:             $strings = $this->load_language_pack();",
          "105:             $this->store_lang_file($strings);",
          "106:             $this->send_cached();",
          "107:         } else {",
          "109:             $strings = $this->load_language_pack();",
          "110:             $this->send_uncached($strings);",
          "111:         }",
          "112:     }",
          "117:     protected function load_full_moodle(): void {",
          "118:         global $CFG, $DB, $SESSION, $OUTPUT, $PAGE;",
          "120:         if ($this->is_full_moodle_loaded()) {",
          "121:             return;",
          "122:         }",
          "125:         define('ABORT_AFTER_CONFIG_CANCEL', true);",
          "128:         define('NO_MOODLE_COOKIES', true);",
          "131:         define('NO_UPGRADE_CHECK', true);",
          "133:         require(\"{$CFG->dirroot}/lib/setup.php\");",
          "134:         $this->fullyloaded = true;",
          "135:     }",
          "142:     public function is_full_moodle_loaded(): bool {",
          "143:         return $this->fullyloaded;",
          "144:     }",
          "151:     protected function load_language_pack(): array {",
          "153:         $this->load_full_moodle();",
          "157:         $stringlist = file_get_contents(__DIR__ . \"/tinystrings.json\");",
          "158:         if (empty($stringlist)) {",
          "159:             $this->send_not_found(\"Failed to load strings from tinystrings.json\");",
          "160:         }",
          "162:         $stringlist = json_decode($stringlist, true);",
          "163:         if (empty($stringlist)) {",
          "164:             $this->send_not_found(\"Failed to load strings from tinystrings.json\");",
          "165:         }",
          "168:         $stringmanager = get_string_manager();",
          "169:         $translatedvalues = array_filter(",
          "170:             $stringmanager->load_component_strings('editor_tiny', $this->lang),",
          "171:             function(string $value, string $key): bool {",
          "172:                 return strpos($key, 'tiny:') === 0;",
          "173:             },",
          "174:             ARRAY_FILTER_USE_BOTH",
          "175:         );",
          "179:         $strings = [];",
          "180:         foreach ($stringlist as $key => $value) {",
          "181:             if (array_key_exists($key, $translatedvalues)) {",
          "182:                 if ($translatedvalues[$key] !== $value) {",
          "183:                     $strings[$value] = $translatedvalues[$key];",
          "184:                 }",
          "185:             }",
          "186:         }",
          "188:         return $strings;",
          "189:     }",
          "194:     protected function send_cached_pack(): void {",
          "195:         global $CFG;",
          "197:         if (file_exists($this->candidatefile)) {",
          "198:             if (!empty($_SERVER['HTTP_IF_NONE_MATCH']) || !empty($_SERVER['HTTP_IF_MODIFIED_SINCE'])) {",
          "201:                 $this->send_unmodified_headers(filemtime($this->candidatefile));",
          "202:             }",
          "203:             $this->send_cached($this->candidatefile);",
          "204:         }",
          "205:     }",
          "212:     protected function store_lang_file(array $strings): void {",
          "213:         global $CFG;",
          "215:         clearstatcache();",
          "216:         if (!file_exists(dirname($this->candidatefile))) {",
          "217:             @mkdir(dirname($this->candidatefile), $CFG->directorypermissions, true);",
          "218:         }",
          "222:         ignore_user_abort(true);",
          "225:         $content = json_encode($strings, JSON_PRETTY_PRINT, JSON_UNESCAPED_SLASHES);",
          "227:         $filename = $this->candidatefile;",
          "228:         if ($fp = fopen($filename . '.tmp', 'xb')) {",
          "229:             fwrite($fp, $content);",
          "230:             fclose($fp);",
          "231:             rename($filename . '.tmp', $filename);",
          "232:             @chmod($filename, $CFG->filepermissions);",
          "233:             @unlink($filename . '.tmp'); // Just in case anything fails.",
          "234:         }",
          "236:         ignore_user_abort(false);",
          "237:         if (connection_aborted()) {",
          "238:             die;",
          "239:         }",
          "240:     }",
          "247:     protected function is_candidate_file_available(): bool {",
          "248:         return file_exists($this->candidatefile);",
          "249:     }",
          "259:     protected function get_etag(): string {",
          "260:         $etag = [",
          "261:             $this->lang,",
          "262:             $this->rev,",
          "263:         ];",
          "265:         return sha1(implode('/', $etag));",
          "266:     }",
          "273:     protected function send_cached(): void {",
          "274:         $path = $this->candidatefile;",
          "277:         $lifetime = 60 * 60 * 24 * 90;",
          "279:         header('Etag: \"' . $this->get_etag() . '\"');",
          "280:         header('Content-Disposition: inline; filename=\"lang.php\"');",
          "281:         header('Last-Modified: ' . gmdate('D, d M Y H:i:s', filemtime($path)) . ' GMT');",
          "282:         header('Expires: ' . gmdate('D, d M Y H:i:s', time() + $lifetime) . ' GMT');",
          "283:         header('Pragma: ');",
          "284:         header('Cache-Control: public, max-age=' . $lifetime . ', immutable');",
          "285:         header('Accept-Ranges: none');",
          "286:         header('Content-Type: application/json; charset=utf-8');",
          "287:         if (!min_enable_zlib_compression()) {",
          "288:             header('Content-Length: ' . filesize($path));",
          "289:         }",
          "291:         readfile($path);",
          "292:         die;",
          "293:     }",
          "300:     protected function send_uncached(array $strings): void {",
          "301:         header('Content-Disposition: inline; filename=\"styles_debug.php\"');",
          "302:         header('Last-Modified: ' . gmdate('D, d M Y H:i:s', time()) . ' GMT');",
          "303:         header('Expires: ' . gmdate('D, d M Y H:i:s', time()) . ' GMT');",
          "304:         header('Pragma: ');",
          "305:         header('Accept-Ranges: none');",
          "306:         header('Content-Type: application/json; charset=utf-8');",
          "308:         echo json_encode($strings, JSON_PRETTY_PRINT, JSON_UNESCAPED_SLASHES);",
          "309:         die;",
          "310:     }",
          "317:     protected function send_unmodified_headers($lastmodified): void {",
          "319:         $lifetime = 60 * 60 * 24 * 90;",
          "320:         header('HTTP/1.1 304 Not Modified');",
          "321:         header('Expires: ' . gmdate('D, d M Y H:i:s', time() + $lifetime) . ' GMT');",
          "322:         header('Cache-Control: public, max-age=' . $lifetime);",
          "323:         header('Content-Type: application/json; charset=utf-8');",
          "324:         header('Etag: \"' . $this->get_etag() . '\"');",
          "325:         if ($lastmodified) {",
          "326:             header('Last-Modified: ' . gmdate('D, d M Y H:i:s', $lastmodified) . ' GMT');",
          "327:         }",
          "328:         die;",
          "329:     }",
          "336:     protected function send_not_found(?string $message = null): void {",
          "337:         header('HTTP/1.0 404 not found');",
          "339:         if ($message) {",
          "340:             die($message);",
          "341:         } else {",
          "342:             die('Language data was not found, sorry.');",
          "343:         }",
          "344:     }",
          "345: };",
          "347: $loader = new lang();",
          "",
          "---------------"
        ],
        "lib/editor/tiny/lang/en/editor_tiny.php||lib/editor/tiny/lang/en/editor_tiny.php": [
          "File: lib/editor/tiny/lang/en/editor_tiny.php -> lib/editor/tiny/lang/en/editor_tiny.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: $string['pluginname'] = 'TinyMCE editor';",
          "26: $string['privacy:reason'] = 'The TinyMCE Editor does not store any preferences or user data.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: $string['tiny:hash'] = '#';",
          "28: $string['tiny:accessibility'] = 'Accessibility';",
          "29: $string['tiny:action'] = 'Action';",
          "30: $string['tiny:activity'] = 'Activity';",
          "31: $string['tiny:address'] = 'Address';",
          "32: $string['tiny:advanced'] = 'Advanced';",
          "33: $string['tiny:align'] = 'Align';",
          "34: $string['tiny:align_center'] = 'Align center';",
          "35: $string['tiny:align_left'] = 'Align left';",
          "36: $string['tiny:align_right'] = 'Align right';",
          "37: $string['tiny:alignment'] = 'Alignment';",
          "38: $string['tiny:all'] = 'All';",
          "39: $string['tiny:alternative_description'] = 'Alternative description';",
          "40: $string['tiny:alternative_source'] = 'Alternative source';",
          "41: $string['tiny:alternative_source_url'] = 'Alternative source URL';",
          "42: $string['tiny:anchor'] = 'Anchor';",
          "43: $string['tiny:anchor...'] = 'Anchor...';",
          "44: $string['tiny:anchors'] = 'Anchors';",
          "45: $string['tiny:animals_and_nature'] = 'Animals and Nature';",
          "46: $string['tiny:arrows'] = 'Arrows';",
          "47: $string['tiny:b'] = 'B';",
          "48: $string['tiny:background_color'] = 'Background color';",
          "49: $string['tiny:black'] = 'Black';",
          "50: $string['tiny:block'] = 'Block';",
          "51: $string['tiny:blockquote'] = 'Blockquote';",
          "52: $string['tiny:blocks'] = 'Blocks';",
          "53: $string['tiny:blue'] = 'Blue';",
          "54: $string['tiny:blue_component'] = 'Blue component';",
          "55: $string['tiny:body'] = 'Body';",
          "56: $string['tiny:bold'] = 'Bold';",
          "57: $string['tiny:border'] = 'Border';",
          "58: $string['tiny:border_color'] = 'Border color';",
          "59: $string['tiny:border_style'] = 'Border style';",
          "60: $string['tiny:border_width'] = 'Border width';",
          "61: $string['tiny:bottom'] = 'Bottom';",
          "62: $string['tiny:browse_for_an_image'] = 'Browse for an image';",
          "63: $string['tiny:bullet_list'] = 'Bullet list';",
          "64: $string['tiny:cancel'] = 'Cancel';",
          "65: $string['tiny:caption'] = 'Caption';",
          "66: $string['tiny:cell'] = 'Cell';",
          "67: $string['tiny:cell_padding'] = 'Cell padding';",
          "68: $string['tiny:cell_properties'] = 'Cell properties';",
          "69: $string['tiny:cell_spacing'] = 'Cell spacing';",
          "70: $string['tiny:cell_styles'] = 'Cell styles';",
          "71: $string['tiny:cell_type'] = 'Cell type';",
          "72: $string['tiny:center'] = 'Center';",
          "73: $string['tiny:characters'] = 'Characters';",
          "74: $string['tiny:characters_no_spaces'] = 'Characters (no spaces)';",
          "75: $string['tiny:circle'] = 'Circle';",
          "76: $string['tiny:class'] = 'Class';",
          "77: $string['tiny:clear_formatting'] = 'Clear formatting';",
          "78: $string['tiny:close'] = 'Close';",
          "79: $string['tiny:code'] = 'Code';",
          "80: $string['tiny:code_sample...'] = 'Code sample...';",
          "81: $string['tiny:code_view'] = 'Code view';",
          "82: $string['tiny:color_picker'] = 'Color Picker';",
          "83: $string['tiny:color_swatch'] = 'Color swatch';",
          "84: $string['tiny:cols'] = 'Cols';",
          "85: $string['tiny:column'] = 'Column';",
          "86: $string['tiny:column_clipboard_actions'] = 'Column clipboard actions';",
          "87: $string['tiny:column_group'] = 'Column group';",
          "88: $string['tiny:column_header'] = 'Column header';",
          "89: $string['tiny:constrain_proportions'] = 'Constrain proportions';",
          "90: $string['tiny:copy'] = 'Copy';",
          "91: $string['tiny:copy_column'] = 'Copy column';",
          "92: $string['tiny:copy_row'] = 'Copy row';",
          "93: $string['tiny:could_not_find_the_specified_string.'] = 'Could not find the specified string.';",
          "94: $string['tiny:could_not_load_emojis'] = 'Could not load emojis';",
          "95: $string['tiny:count'] = 'Count';",
          "96: $string['tiny:currency'] = 'Currency';",
          "97: $string['tiny:current_window'] = 'Current window';",
          "98: $string['tiny:custom_color'] = 'Custom color';",
          "99: $string['tiny:custom...'] = 'Custom...';",
          "100: $string['tiny:cut'] = 'Cut';",
          "101: $string['tiny:cut_column'] = 'Cut column';",
          "102: $string['tiny:cut_row'] = 'Cut row';",
          "103: $string['tiny:dark_blue'] = 'Dark Blue';",
          "104: $string['tiny:dark_gray'] = 'Dark Gray';",
          "105: $string['tiny:dark_green'] = 'Dark Green';",
          "106: $string['tiny:dark_orange'] = 'Dark Orange';",
          "107: $string['tiny:dark_purple'] = 'Dark Purple';",
          "108: $string['tiny:dark_red'] = 'Dark Red';",
          "109: $string['tiny:dark_turquoise'] = 'Dark Turquoise';",
          "110: $string['tiny:dark_yellow'] = 'Dark Yellow';",
          "111: $string['tiny:dashed'] = 'Dashed';",
          "112: $string['tiny:datetime'] = 'Date/time';",
          "113: $string['tiny:decrease_indent'] = 'Decrease indent';",
          "114: $string['tiny:default'] = 'Default';",
          "115: $string['tiny:delete_column'] = 'Delete column';",
          "116: $string['tiny:delete_row'] = 'Delete row';",
          "117: $string['tiny:delete_table'] = 'Delete table';",
          "118: $string['tiny:dimensions'] = 'Dimensions';",
          "119: $string['tiny:disc'] = 'Disc';",
          "120: $string['tiny:div'] = 'Div';",
          "121: $string['tiny:document'] = 'Document';",
          "122: $string['tiny:dotted'] = 'Dotted';",
          "123: $string['tiny:double'] = 'Double';",
          "124: $string['tiny:drop_an_image_here'] = 'Drop an image here';",
          "125: $string['tiny:dropped_file_type_is_not_supported'] = 'Dropped file type is not supported';",
          "126: $string['tiny:edit'] = 'Edit';",
          "127: $string['tiny:embed'] = 'Embed';",
          "128: $string['tiny:emojis'] = 'Emojis';",
          "129: $string['tiny:emojis...'] = 'Emojis...';",
          "130: $string['tiny:error'] = 'Error';",
          "131: $string['tiny:error_form_submit_field_collision.'] = 'Error: Form submit field collision.';",
          "132: $string['tiny:error_no_form_element_found.'] = 'Error: No form element found.';",
          "133: $string['tiny:extended_latin'] = 'Extended Latin';",
          "134: $string['tiny:failed_to_initialize_plugin_0'] = 'Failed to initialize plugin: {0}';",
          "135: $string['tiny:failed_to_load_plugin_url_0'] = 'Failed to load plugin url: {0}';",
          "136: $string['tiny:failed_to_load_plugin_0_from_url_1'] = 'Failed to load plugin: {0} from url {1}';",
          "137: $string['tiny:failed_to_upload_image_0'] = 'Failed to upload image: {0}';",
          "138: $string['tiny:file'] = 'File';",
          "139: $string['tiny:find'] = 'Find';",
          "140: $string['tiny:find_if_searchreplace_plugin_activated'] = 'Find (if searchreplace plugin activated)';",
          "141: $string['tiny:find_and_replace'] = 'Find and Replace';",
          "142: $string['tiny:find_and_replace...'] = 'Find and replace...';",
          "143: $string['tiny:find_in_selection'] = 'Find in selection';",
          "144: $string['tiny:find_whole_words_only'] = 'Find whole words only';",
          "145: $string['tiny:flags'] = 'Flags';",
          "146: $string['tiny:focus_to_contextual_toolbar'] = 'Focus to contextual toolbar';",
          "147: $string['tiny:focus_to_element_path'] = 'Focus to element path';",
          "148: $string['tiny:focus_to_menubar'] = 'Focus to menubar';",
          "149: $string['tiny:focus_to_toolbar'] = 'Focus to toolbar';",
          "150: $string['tiny:font'] = 'Font';",
          "151: $string['tiny:font_sizes'] = 'Font sizes';",
          "152: $string['tiny:fonts'] = 'Fonts';",
          "153: $string['tiny:food_and_drink'] = 'Food and Drink';",
          "154: $string['tiny:footer'] = 'Footer';",
          "155: $string['tiny:format'] = 'Format';",
          "156: $string['tiny:formats'] = 'Formats';",
          "157: $string['tiny:fullscreen'] = 'Fullscreen';",
          "158: $string['tiny:g'] = 'G';",
          "159: $string['tiny:general'] = 'General';",
          "160: $string['tiny:gray'] = 'Gray';",
          "161: $string['tiny:green'] = 'Green';",
          "162: $string['tiny:green_component'] = 'Green component';",
          "163: $string['tiny:groove'] = 'Groove';",
          "164: $string['tiny:handy_shortcuts'] = 'Handy Shortcuts';",
          "165: $string['tiny:header'] = 'Header';",
          "166: $string['tiny:header_cell'] = 'Header cell';",
          "167: $string['tiny:heading_1'] = 'Heading 1';",
          "168: $string['tiny:heading_2'] = 'Heading 2';",
          "169: $string['tiny:heading_3'] = 'Heading 3';",
          "170: $string['tiny:heading_4'] = 'Heading 4';",
          "171: $string['tiny:heading_5'] = 'Heading 5';",
          "172: $string['tiny:heading_6'] = 'Heading 6';",
          "173: $string['tiny:headings'] = 'Headings';",
          "174: $string['tiny:height'] = 'Height';",
          "175: $string['tiny:help'] = 'Help';",
          "176: $string['tiny:hex_color_code'] = 'Hex color code';",
          "177: $string['tiny:hidden'] = 'Hidden';",
          "178: $string['tiny:horizontal_align'] = 'Horizontal align';",
          "179: $string['tiny:horizontal_line'] = 'Horizontal line';",
          "180: $string['tiny:horizontal_space'] = 'Horizontal space';",
          "181: $string['tiny:id'] = 'ID';",
          "182: $string['tiny:id_should_start_with_a_letter_followed_only_by_letters_numbers_dashes_dots_colons_or_underscores.'] = 'ID should start with a letter, followed only by letters, numbers, dashes, dots, colons or underscores.';",
          "183: $string['tiny:image_is_decorative'] = 'Image is decorative';",
          "184: $string['tiny:image_list'] = 'Image list';",
          "185: $string['tiny:image_title'] = 'Image title';",
          "186: $string['tiny:image...'] = 'Image...';",
          "187: $string['tiny:imageproxy_http_error_could_not_find_image_proxy'] = 'ImageProxy HTTP error: Could not find Image Proxy';",
          "188: $string['tiny:imageproxy_http_error_incorrect_image_proxy_url'] = 'ImageProxy HTTP error: Incorrect Image Proxy URL';",
          "189: $string['tiny:imageproxy_http_error_rejected_request'] = 'ImageProxy HTTP error: Rejected request';",
          "190: $string['tiny:imageproxy_http_error_unknown_imageproxy_error'] = 'ImageProxy HTTP error: Unknown ImageProxy error';",
          "191: $string['tiny:increase_indent'] = 'Increase indent';",
          "192: $string['tiny:inline'] = 'Inline';",
          "193: $string['tiny:insert'] = 'Insert';",
          "194: $string['tiny:insert_template'] = 'Insert Template';",
          "195: $string['tiny:insert_column_after'] = 'Insert column after';",
          "196: $string['tiny:insert_column_before'] = 'Insert column before';",
          "197: $string['tiny:insert_datetime'] = 'Insert date/time';",
          "198: $string['tiny:insert_image'] = 'Insert image';",
          "199: $string['tiny:insert_link_if_link_plugin_activated'] = 'Insert link (if link plugin activated)';",
          "200: $string['tiny:insert_row_after'] = 'Insert row after';",
          "201: $string['tiny:insert_row_before'] = 'Insert row before';",
          "202: $string['tiny:insert_table'] = 'Insert table';",
          "203: $string['tiny:insert_template...'] = 'Insert template...';",
          "204: $string['tiny:insert_video'] = 'Insert video';",
          "205: $string['tiny:insertedit_code_sample'] = 'Insert/Edit code sample';",
          "206: $string['tiny:insertedit_image'] = 'Insert/edit image';",
          "207: $string['tiny:insertedit_link'] = 'Insert/edit link';",
          "208: $string['tiny:insertedit_media'] = 'Insert/edit media';",
          "209: $string['tiny:insertedit_video'] = 'Insert/edit video';",
          "210: $string['tiny:inset'] = 'Inset';",
          "211: $string['tiny:invalid_hex_color_code_0'] = 'Invalid hex color code: {0}';",
          "212: $string['tiny:invalid_input'] = 'Invalid input';",
          "213: $string['tiny:italic'] = 'Italic';",
          "214: $string['tiny:justify'] = 'Justify';",
          "215: $string['tiny:keyboard_navigation'] = 'Keyboard Navigation';",
          "216: $string['tiny:language'] = 'Language';",
          "217: $string['tiny:learn_more...'] = 'Learn more...';",
          "218: $string['tiny:left'] = 'Left';",
          "219: $string['tiny:left_to_right'] = 'Left to right';",
          "220: $string['tiny:light_blue'] = 'Light Blue';",
          "221: $string['tiny:light_gray'] = 'Light Gray';",
          "222: $string['tiny:light_green'] = 'Light Green';",
          "223: $string['tiny:light_purple'] = 'Light Purple';",
          "224: $string['tiny:light_red'] = 'Light Red';",
          "225: $string['tiny:light_yellow'] = 'Light Yellow';",
          "226: $string['tiny:line_height'] = 'Line height';",
          "227: $string['tiny:link_list'] = 'Link list';",
          "228: $string['tiny:link...'] = 'Link...';",
          "229: $string['tiny:list_properties'] = 'List Properties';",
          "230: $string['tiny:list_properties...'] = 'List properties...';",
          "231: $string['tiny:loading_emojis...'] = 'Loading emojis...';",
          "232: $string['tiny:loading...'] = 'Loading...';",
          "233: $string['tiny:lower_alpha'] = 'Lower Alpha';",
          "234: $string['tiny:lower_greek'] = 'Lower Greek';",
          "235: $string['tiny:lower_roman'] = 'Lower Roman';",
          "236: $string['tiny:match_case'] = 'Match case';",
          "237: $string['tiny:mathematical'] = 'Mathematical';",
          "238: $string['tiny:media_poster_image_url'] = 'Media poster (Image URL)';",
          "239: $string['tiny:media...'] = 'Media...';",
          "240: $string['tiny:medium_blue'] = 'Medium Blue';",
          "241: $string['tiny:medium_gray'] = 'Medium Gray';",
          "242: $string['tiny:medium_purple'] = 'Medium Purple';",
          "243: $string['tiny:merge_cells'] = 'Merge cells';",
          "244: $string['tiny:middle'] = 'Middle';",
          "245: $string['tiny:midnight_blue'] = 'Midnight Blue';",
          "246: $string['tiny:more...'] = 'More...';",
          "247: $string['tiny:name'] = 'Name';",
          "248: $string['tiny:navy_blue'] = 'Navy Blue';",
          "249: $string['tiny:new_document'] = 'New document';",
          "250: $string['tiny:new_window'] = 'New window';",
          "251: $string['tiny:next'] = 'Next';",
          "252: $string['tiny:no'] = 'No';",
          "253: $string['tiny:no_alignment'] = 'No alignment';",
          "254: $string['tiny:no_color'] = 'No color';",
          "255: $string['tiny:nonbreaking_space'] = 'Nonbreaking space';",
          "256: $string['tiny:none'] = 'None';",
          "257: $string['tiny:numbered_list'] = 'Numbered list';",
          "258: $string['tiny:or'] = 'OR';",
          "259: $string['tiny:objects'] = 'Objects';",
          "260: $string['tiny:ok'] = 'Ok';",
          "261: $string['tiny:open_help_dialog'] = 'Open help dialog';",
          "262: $string['tiny:open_link'] = 'Open link';",
          "263: $string['tiny:open_link_in...'] = 'Open link in...';",
          "264: $string['tiny:open_popup_menu_for_split_buttons'] = 'Open popup menu for split buttons';",
          "265: $string['tiny:orange'] = 'Orange';",
          "266: $string['tiny:outset'] = 'Outset';",
          "267: $string['tiny:page_break'] = 'Page break';",
          "268: $string['tiny:paragraph'] = 'Paragraph';",
          "269: $string['tiny:paste'] = 'Paste';",
          "270: $string['tiny:paste_as_text'] = 'Paste as text';",
          "271: $string['tiny:paste_column_after'] = 'Paste column after';",
          "272: $string['tiny:paste_column_before'] = 'Paste column before';",
          "273: $string['tiny:paste_is_now_in_plain_text_mode._contents_will_now_be_pasted_as_plain_text_until_you_toggle_this_option_off.'] = 'Paste is now in plain text mode. Contents will now be pasted as plain text until you toggle this option off.';",
          "274: $string['tiny:paste_or_type_a_link'] = 'Paste or type a link';",
          "275: $string['tiny:paste_row_after'] = 'Paste row after';",
          "276: $string['tiny:paste_row_before'] = 'Paste row before';",
          "277: $string['tiny:paste_your_embed_code_below'] = 'Paste your embed code below:';",
          "278: $string['tiny:people'] = 'People';",
          "279: $string['tiny:plugins'] = 'Plugins';",
          "280: $string['tiny:plugins_installed_0'] = 'Plugins installed ({0}):';",
          "281: $string['tiny:powered_by_0'] = 'Powered by {0}';",
          "282: $string['tiny:pre'] = 'Pre';",
          "283: $string['tiny:preferences'] = 'Preferences';",
          "284: $string['tiny:preformatted'] = 'Preformatted';",
          "285: $string['tiny:premium_plugins'] = 'Premium plugins:';",
          "286: $string['tiny:preview'] = 'Preview';",
          "287: $string['tiny:previous'] = 'Previous';",
          "288: $string['tiny:print'] = 'Print';",
          "289: $string['tiny:print...'] = 'Print...';",
          "290: $string['tiny:purple'] = 'Purple';",
          "291: $string['tiny:quotations'] = 'Quotations';",
          "292: $string['tiny:r'] = 'R';",
          "293: $string['tiny:range_0_to_255'] = 'Range 0 to 255';",
          "294: $string['tiny:red'] = 'Red';",
          "295: $string['tiny:red_component'] = 'Red component';",
          "296: $string['tiny:redo'] = 'Redo';",
          "297: $string['tiny:remove'] = 'Remove';",
          "298: $string['tiny:remove_color'] = 'Remove color';",
          "299: $string['tiny:remove_link'] = 'Remove link';",
          "300: $string['tiny:replace'] = 'Replace';",
          "301: $string['tiny:replace_all'] = 'Replace all';",
          "302: $string['tiny:replace_with'] = 'Replace with';",
          "303: $string['tiny:resize'] = 'Resize';",
          "304: $string['tiny:restore_last_draft'] = 'Restore last draft';",
          "305: $string['tiny:rich_text_area'] = 'Rich Text Area';",
          "306: $string['tiny:rich_text_area._press_alt-0_for_help.'] = 'Rich Text Area. Press ALT-0 for help.';",
          "307: $string['tiny:rich_text_area._press_alt-f9_for_menu._press_alt-f10_for_toolbar._press_alt-0_for_help'] = 'Rich Text Area. Press ALT-F9 for menu. Press ALT-F10 for toolbar. Press ALT-0 for help';",
          "308: $string['tiny:ridge'] = 'Ridge';",
          "309: $string['tiny:right'] = 'Right';",
          "310: $string['tiny:right_to_left'] = 'Right to left';",
          "311: $string['tiny:row'] = 'Row';",
          "312: $string['tiny:row_clipboard_actions'] = 'Row clipboard actions';",
          "313: $string['tiny:row_group'] = 'Row group';",
          "314: $string['tiny:row_header'] = 'Row header';",
          "315: $string['tiny:row_properties'] = 'Row properties';",
          "316: $string['tiny:row_type'] = 'Row type';",
          "317: $string['tiny:rows'] = 'Rows';",
          "318: $string['tiny:save'] = 'Save';",
          "319: $string['tiny:save_if_save_plugin_activated'] = 'Save (if save plugin activated)';",
          "320: $string['tiny:scope'] = 'Scope';",
          "321: $string['tiny:search'] = 'Search';",
          "322: $string['tiny:select_all'] = 'Select all';",
          "323: $string['tiny:select...'] = 'Select...';",
          "324: $string['tiny:selection'] = 'Selection';",
          "325: $string['tiny:shortcut'] = 'Shortcut';",
          "326: $string['tiny:show_blocks'] = 'Show blocks';",
          "327: $string['tiny:show_caption'] = 'Show caption';",
          "328: $string['tiny:show_invisible_characters'] = 'Show invisible characters';",
          "329: $string['tiny:size'] = 'Size';",
          "330: $string['tiny:solid'] = 'Solid';",
          "331: $string['tiny:source'] = 'Source';",
          "332: $string['tiny:source_code'] = 'Source code';",
          "333: $string['tiny:special_character'] = 'Special Character';",
          "334: $string['tiny:special_character...'] = 'Special character...';",
          "335: $string['tiny:split_cell'] = 'Split cell';",
          "336: $string['tiny:square'] = 'Square';",
          "337: $string['tiny:start_list_at_number'] = 'Start list at number';",
          "338: $string['tiny:strikethrough'] = 'Strikethrough';",
          "339: $string['tiny:style'] = 'Style';",
          "340: $string['tiny:subscript'] = 'Subscript';",
          "341: $string['tiny:superscript'] = 'Superscript';",
          "342: $string['tiny:switch_to_or_from_fullscreen_mode'] = 'Switch to or from fullscreen mode';",
          "343: $string['tiny:symbols'] = 'Symbols';",
          "344: $string['tiny:system_font'] = 'System Font';",
          "345: $string['tiny:table'] = 'Table';",
          "346: $string['tiny:table_caption'] = 'Table caption';",
          "347: $string['tiny:table_properties'] = 'Table properties';",
          "348: $string['tiny:table_styles'] = 'Table styles';",
          "349: $string['tiny:template'] = 'Template';",
          "350: $string['tiny:templates'] = 'Templates';",
          "351: $string['tiny:text'] = 'Text';",
          "352: $string['tiny:text_color'] = 'Text color';",
          "353: $string['tiny:text_to_display'] = 'Text to display';",
          "354: $string['tiny:the_url_you_entered_seems_to_be_an_email_address._do_you_want_to_add_the_required_mailto_prefix'] = 'The URL you entered seems to be an email address. Do you want to add the required mailto: prefix?';",
          "355: $string['tiny:the_url_you_entered_seems_to_be_an_external_link._do_you_want_to_add_the_required_http_prefix'] = 'The URL you entered seems to be an external link. Do you want to add the required http:// prefix?';",
          "356: $string['tiny:the_url_you_entered_seems_to_be_an_external_link._do_you_want_to_add_the_required_https_prefix'] = 'The URL you entered seems to be an external link. Do you want to add the required https:// prefix?';",
          "357: $string['tiny:title'] = 'Title';",
          "358: $string['tiny:to_open_the_popup_press_shiftenter'] = 'To open the popup, press Shift+Enter';",
          "359: $string['tiny:tools'] = 'Tools';",
          "360: $string['tiny:top'] = 'Top';",
          "361: $string['tiny:travel_and_places'] = 'Travel and Places';",
          "362: $string['tiny:turquoise'] = 'Turquoise';",
          "363: $string['tiny:underline'] = 'Underline';",
          "364: $string['tiny:undo'] = 'Undo';",
          "365: $string['tiny:upload'] = 'Upload';",
          "366: $string['tiny:uploading_image'] = 'Uploading image';",
          "367: $string['tiny:upper_alpha'] = 'Upper Alpha';",
          "368: $string['tiny:upper_roman'] = 'Upper Roman';",
          "369: $string['tiny:url'] = 'Url';",
          "370: $string['tiny:user_defined'] = 'User Defined';",
          "371: $string['tiny:valid'] = 'Valid';",
          "372: $string['tiny:version'] = 'Version';",
          "373: $string['tiny:vertical_align'] = 'Vertical align';",
          "374: $string['tiny:vertical_space'] = 'Vertical space';",
          "375: $string['tiny:view'] = 'View';",
          "376: $string['tiny:visual_aids'] = 'Visual aids';",
          "377: $string['tiny:warn'] = 'Warn';",
          "378: $string['tiny:white'] = 'White';",
          "379: $string['tiny:width'] = 'Width';",
          "380: $string['tiny:word_count'] = 'Word count';",
          "381: $string['tiny:words'] = 'Words';",
          "382: $string['tiny:words_0'] = 'Words: {0}';",
          "383: $string['tiny:yellow'] = 'Yellow';",
          "384: $string['tiny:yes'] = 'Yes';",
          "385: $string['tiny:you_are_using_0'] = 'You are using {0}';",
          "386: $string['tiny:you_have_unsaved_changes_are_you_sure_you_want_to_navigate_away'] = 'You have unsaved changes are you sure you want to navigate away?';",
          "387: $string['tiny:your_browser_doesnt_support_direct_access_to_the_clipboard._please_use_the_ctrlxcv_keyboard_shortcuts_instead.'] = 'Your browser doesn\\'t support direct access to the clipboard. Please use the Ctrl+X/C/V keyboard shortcuts instead.';",
          "388: $string['tiny:alignment1'] = 'alignment';",
          "389: $string['tiny:austral_sign'] = 'austral sign';",
          "390: $string['tiny:cedi_sign'] = 'cedi sign';",
          "391: $string['tiny:colon_sign'] = 'colon sign';",
          "392: $string['tiny:cruzeiro_sign'] = 'cruzeiro sign';",
          "393: $string['tiny:currency_sign'] = 'currency sign';",
          "394: $string['tiny:dollar_sign'] = 'dollar sign';",
          "395: $string['tiny:dong_sign'] = 'dong sign';",
          "396: $string['tiny:drachma_sign'] = 'drachma sign';",
          "397: $string['tiny:euro-currency_sign'] = 'euro-currency sign';",
          "398: $string['tiny:example'] = 'example';",
          "399: $string['tiny:formatting'] = 'formatting';",
          "400: $string['tiny:french_franc_sign'] = 'french franc sign';",
          "401: $string['tiny:german_penny_symbol'] = 'german penny symbol';",
          "402: $string['tiny:guarani_sign'] = 'guarani sign';",
          "403: $string['tiny:history'] = 'history';",
          "404: $string['tiny:hryvnia_sign'] = 'hryvnia sign';",
          "405: $string['tiny:indentation'] = 'indentation';",
          "406: $string['tiny:indian_rupee_sign'] = 'indian rupee sign';",
          "407: $string['tiny:kip_sign'] = 'kip sign';",
          "408: $string['tiny:lira_sign'] = 'lira sign';",
          "409: $string['tiny:livre_tournois_sign'] = 'livre tournois sign';",
          "410: $string['tiny:manat_sign'] = 'manat sign';",
          "411: $string['tiny:mill_sign'] = 'mill sign';",
          "412: $string['tiny:naira_sign'] = 'naira sign';",
          "413: $string['tiny:new_sheqel_sign'] = 'new sheqel sign';",
          "414: $string['tiny:nordic_mark_sign'] = 'nordic mark sign';",
          "415: $string['tiny:peseta_sign'] = 'peseta sign';",
          "416: $string['tiny:peso_sign'] = 'peso sign';",
          "417: $string['tiny:ruble_sign'] = 'ruble sign';",
          "418: $string['tiny:rupee_sign'] = 'rupee sign';",
          "419: $string['tiny:spesmilo_sign'] = 'spesmilo sign';",
          "420: $string['tiny:styles'] = 'styles';",
          "421: $string['tiny:tenge_sign'] = 'tenge sign';",
          "422: $string['tiny:tugrik_sign'] = 'tugrik sign';",
          "423: $string['tiny:turkish_lira_sign'] = 'turkish lira sign';",
          "424: $string['tiny:won_sign'] = 'won sign';",
          "425: $string['tiny:yen_character'] = 'yen character';",
          "426: $string['tiny:yenyuan_character_variant_one'] = 'yen/yuan character variant one';",
          "427: $string['tiny:yuan_character'] = 'yuan character';",
          "428: $string['tiny:yuan_character_in_hong_kong_and_taiwan'] = 'yuan character, in hong kong and taiwan';",
          "429: $string['tiny:0_characters'] = '{0} characters';",
          "430: $string['tiny:0_words'] = '{0} words';",
          "",
          "---------------"
        ],
        "lib/editor/tiny/tools/getOriginals.mjs||lib/editor/tiny/tools/getOriginals.mjs": [
          "File: lib/editor/tiny/tools/getOriginals.mjs -> lib/editor/tiny/tools/getOriginals.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: import {readFile, writeFile} from 'fs/promises';",
          "18: const readStringsFromLanguages = async (language) => {",
          "19:     const fileContent = await readFile(`./langs/${language}.js`, 'utf-8');",
          "21:     const translations = [];",
          "22:     const tinymce = {",
          "23:         addI18n: (language, strings) => {",
          "24:             translations.push(...(Object.keys(strings)));",
          "25:         },",
          "26:     };",
          "28:     eval(fileContent);",
          "30:     return translations.sort();",
          "31: };",
          "33: const getStringMap = (strings) => {",
          "34:     const stringMap = {};",
          "36:     const getUniqueKeyForString = (string, modifier = 0) => {",
          "37:         let stringKey = string.toLowerCase()",
          "38:             .replaceAll(' ', '_')",
          "39:             .replaceAll(/\\{(\\d)\\}/g, '$1')",
          "40:             .replaceAll('#', 'hash')",
          "41:             .replaceAll(/[^a-z0-9_\\-\\.]/g, '')",
          "42:         ;",
          "44:         if (stringKey === '') {",
          "45:             throw new Error(`The calculated key for '${string}' was empty`);",
          "46:         }",
          "48:         stringKey = `tiny:${stringKey}`;",
          "50:         if (modifier > 0) {",
          "51:             stringKey = `${stringKey}${modifier}`;",
          "52:         }",
          "54:         if (typeof stringMap[stringKey] !== 'undefined') {",
          "55:             return getUniqueKeyForString(string, ++modifier);",
          "56:         }",
          "58:         return stringKey;",
          "59:     };",
          "61:     strings.forEach((string) => {",
          "62:         const stringKey = getUniqueKeyForString(string);",
          "63:         if (typeof stringMap[stringKey] !== 'undefined') {",
          "64:             throw new Error(`Found existing key ${stringKey}`);",
          "65:         }",
          "67:         stringMap[stringKey] = string;",
          "68:     });",
          "70:     return stringMap;",
          "71: };",
          "73: const getPhpStrings = (stringMap) => Object.entries(stringMap).map(([stringKey, stringValue]) => {",
          "74:     return `$string['${stringKey}'] = '${stringValue.replace(\"'\", \"\\\\\\'\")}';`",
          "75: }).join(\"\\n\");",
          "78: const constructTranslationFile = async(language) => {",
          "79:     const strings = await readStringsFromLanguages(language);",
          "80:     const stringMap = getStringMap(strings);",
          "82:     await writeFile('./strings.php', getPhpStrings(stringMap) + \"\\n\");",
          "83:     await writeFile('./tinystrings.json', JSON.stringify(stringMap, null, '  '));",
          "84: };",
          "86: constructTranslationFile('de');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90c40fba5d8df7f325d03c1404a50381dd2a4f0e",
      "candidate_info": {
        "commit_hash": "90c40fba5d8df7f325d03c1404a50381dd2a4f0e",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/90c40fba5d8df7f325d03c1404a50381dd2a4f0e",
        "files": [
          "lib/editor/tiny/amd/build/editor.min.js",
          "lib/editor/tiny/amd/build/editor.min.js.map",
          "lib/editor/tiny/amd/build/loader.min.js",
          "lib/editor/tiny/amd/build/loader.min.js.map",
          "lib/editor/tiny/amd/src/editor.js",
          "lib/editor/tiny/amd/src/loader.js",
          "lib/editor/tiny/loader.php"
        ],
        "message": "MDL-75271 editor_tiny: Add a cache-busting loader for TinyMCE\n\nPart of MDL-75966\n\nThis commit adds a cache-busting loader API for use in the TinyMCE\nplugin.\n\nThis is not for use in any TinyMCE subplugins at this time as we have no\nuse-case outside of AMD modules.\n\nThis loader ensures that only files within the js/tiny directory are\nloaded, and it only supports either .js or .css files at this time.\n\nThe client-side of the loader makes use of the jsrevision as a\ncache-buster, including for CSS files included with TinyMCE.\n\nIf the revision is negative, then files are not cached.\nIf the revision is positive, then the requested file is cached in a\ncandidate file and served using aggressive cache headers.",
        "before_after_code_files": [
          "lib/editor/tiny/amd/src/editor.js||lib/editor/tiny/amd/src/editor.js",
          "lib/editor/tiny/amd/src/loader.js||lib/editor/tiny/amd/src/loader.js",
          "lib/editor/tiny/loader.php||lib/editor/tiny/loader.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/editor/tiny/loader.php||lib/editor/tiny/loader.php"
          ],
          "candidate": [
            "lib/editor/tiny/loader.php||lib/editor/tiny/loader.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/editor/tiny/amd/src/editor.js||lib/editor/tiny/amd/src/editor.js": [
          "File: lib/editor/tiny/amd/src/editor.js -> lib/editor/tiny/amd/src/editor.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import {",
          "24:     getTinyMCE,",
          "25: } from './loader';",
          "26: import Pending from 'core/pending';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:     baseUrl,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141: const getStandardConfig = (target, tinyMCE, options, plugins) => {",
          "142:     const lang = document.querySelector('html').lang;",
          "143:     return {",
          "146:         target,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:         base_url: baseUrl,",
          "",
          "---------------"
        ],
        "lib/editor/tiny/amd/src/loader.js||lib/editor/tiny/amd/src/loader.js": [
          "File: lib/editor/tiny/amd/src/loader.js -> lib/editor/tiny/amd/src/loader.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: let tinyMCEPromise;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import * as Config from 'core/config';",
          "28: export const baseUrl = `${Config.wwwroot}/lib/editor/tiny/loader.php/${M.cfg.jsrev}`;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:         script = document.createElement('script');",
          "44:         script.dataset.tinymce = 'tinymce';",
          "46:         script.async = true;",
          "48:         script.addEventListener('load', () => {",
          "",
          "[Removed Lines]",
          "45:         script.src = `${M.cfg.wwwroot}/lib/editor/tiny/js/tinymce/tinymce.js`;",
          "",
          "[Added Lines]",
          "49:         script.src = `${baseUrl}/tinymce.js`;",
          "",
          "---------------"
        ],
        "lib/editor/tiny/loader.php||lib/editor/tiny/loader.php": [
          "File: lib/editor/tiny/loader.php -> lib/editor/tiny/loader.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace editor_tiny;",
          "28: define('NO_DEBUG_DISPLAY', true);",
          "31: define('ABORT_AFTER_CONFIG', true);",
          "34: require('../../../config.php');",
          "42: class loader {",
          "44:     protected $filepath;",
          "47:     protected $rev;",
          "50:     protected $mimetype = null;",
          "55:     public function __construct() {",
          "56:         $this->parse_file_information_from_url();",
          "57:         $this->serve_file();",
          "58:     }",
          "63:     protected function parse_file_information_from_url(): void {",
          "64:         global $CFG;",
          "70:         if ($slashargument = min_get_slash_argument()) {",
          "71:             $slashargument = ltrim($slashargument, '/');",
          "72:             if (substr_count($slashargument, '/') < 1) {",
          "73:                 $this->send_not_found();",
          "74:             }",
          "76:             [$rev, $filepath] = explode('/', $slashargument, 2);",
          "77:             $this->rev  = min_clean_param($rev, 'RAW');",
          "78:             $this->filepath = min_clean_param($filepath, 'SAFEPATH');",
          "79:         } else {",
          "80:             $this->rev  = min_optional_param('rev', 0, 'RAW');",
          "81:             $this->filepath = min_optional_param('filepath', 'standard', 'SAFEPATH');",
          "82:         }",
          "84:         $extension = pathinfo($this->filepath, PATHINFO_EXTENSION);",
          "85:         if ($extension === 'css') {",
          "86:             $this->mimetype = 'text/css';",
          "87:         } else if ($extension === 'js') {",
          "88:             $this->mimetype = 'application/javascript';",
          "89:         } else if ($extension === 'map') {",
          "90:             $this->mimetype = 'application/json';",
          "91:         } else {",
          "92:             $this->send_not_found();",
          "93:         }",
          "95:         $filepathhash = sha1(\"{$this->filepath}\");",
          "96:         if (preg_match('/^plugins\\/tiny_/', $this->filepath)) {",
          "97:             $parts = explode('/', $this->filepath);",
          "98:             array_shift($parts);",
          "99:             $component = array_shift($parts);",
          "100:             $this->component = preg_replace('/^tiny_/', '', $component);",
          "101:             $this->filepath = implode('/', $parts);",
          "102:         }",
          "103:         $this->candidatefile = \"{$CFG->localcachedir}/editor_tiny/{$this->rev}/{$filepathhash}\";",
          "104:     }",
          "109:     public function serve_file(): void {",
          "111:         if ($this->rev > 0) {",
          "112:             if ($this->is_candidate_file_available()) {",
          "116:                 $this->send_cached_file_if_available();",
          "117:             }",
          "121:             $this->store_filepath_file();",
          "122:             $this->send_cached();",
          "123:         } else {",
          "126:             $this->send_uncached_from_dirroot();",
          "127:         }",
          "128:     }",
          "135:     protected function get_filepath_from_dirroot(): ?string {",
          "136:         global $CFG;",
          "138:         $rootdir = \"{$CFG->dirroot}/lib/editor/tiny\";",
          "139:         if ($this->component) {",
          "140:             $rootdir .= \"/plugins/{$this->component}/js\";",
          "141:         } else {",
          "142:             $rootdir .= \"/js/tinymce\";",
          "143:         }",
          "145:         $filepath = \"{$rootdir}/{$this->filepath}\";",
          "146:         if (file_exists($filepath)) {",
          "147:             return $filepath;",
          "148:         }",
          "150:         return null;",
          "151:     }",
          "158:     protected function load_content_from_dirroot(): ?string {",
          "159:         if ($filepath = $this->get_filepath_from_dirroot()) {",
          "160:             return file_get_contents($filepath);",
          "161:         }",
          "163:         return null;",
          "164:     }",
          "171:     protected function send_uncached_from_dirroot(): void {",
          "172:         if ($filepath = $this->get_filepath_from_dirroot()) {",
          "173:             $this->send_uncached_file($filepath);",
          "174:         }",
          "176:         $this->send_not_found();",
          "177:     }",
          "184:     protected function is_candidate_file_available(): bool {",
          "185:         return file_exists($this->candidatefile);",
          "186:     }",
          "191:     protected function send_cached_file_if_available(): void {",
          "192:         global $_SERVER;",
          "194:         if (file_exists($this->candidatefile)) {",
          "197:             if (!empty($_SERVER['HTTP_IF_NONE_MATCH']) || !empty($_SERVER['HTTP_IF_MODIFIED_SINCE'])) {",
          "201:                 $this->send_unmodified_headers(filemtime($this->candidatefile));",
          "202:             }",
          "205:             $this->send_cached($this->candidatefile);",
          "206:         }",
          "207:     }",
          "212:     protected function store_filepath_file(): void {",
          "213:         global $CFG;",
          "215:         clearstatcache();",
          "216:         if (!file_exists(dirname($this->candidatefile))) {",
          "217:             @mkdir(dirname($this->candidatefile), $CFG->directorypermissions, true);",
          "218:         }",
          "222:         ignore_user_abort(true);",
          "224:         $filename = $this->candidatefile;",
          "225:         if ($fp = fopen($filename . '.tmp', 'xb')) {",
          "226:             $content = $this->load_content_from_dirroot();",
          "227:             fwrite($fp, $content);",
          "228:             fclose($fp);",
          "229:             rename($filename . '.tmp', $filename);",
          "230:             @chmod($filename, $CFG->filepermissions);",
          "231:             @unlink($filename . '.tmp'); // Just in case anything fails.",
          "232:         }",
          "234:         ignore_user_abort(false);",
          "235:         if (connection_aborted()) {",
          "236:             die;",
          "237:         }",
          "238:     }",
          "248:     protected function get_etag(): string {",
          "249:         $etag = [",
          "250:             $this->filepath,",
          "251:             $this->rev,",
          "252:         ];",
          "254:         return sha1(implode('/', $etag));",
          "255:     }",
          "262:     protected function send_cached(): void {",
          "263:         $path = $this->candidatefile;",
          "266:         $lifetime = 60 * 60 * 24 * 90;",
          "268:         header('Etag: \"' . $this->get_etag() . '\"');",
          "269:         header('Content-Disposition: inline; filename=\"filepath.php\"');",
          "270:         header('Last-Modified: ' . gmdate('D, d M Y H:i:s', filemtime($path)) . ' GMT');",
          "271:         header('Expires: ' . gmdate('D, d M Y H:i:s', time() + $lifetime) . ' GMT');",
          "272:         header('Pragma: ');",
          "273:         header('Cache-Control: public, max-age=' . $lifetime . ', immutable');",
          "274:         header('Accept-Ranges: none');",
          "275:         header(\"Content-Type: {$this->mimetype}; charset=utf-8\");",
          "276:         if (!min_enable_zlib_compression()) {",
          "277:             header('Content-Length: ' . filesize($path));",
          "278:         }",
          "280:         readfile($path);",
          "281:         die;",
          "282:     }",
          "291:     protected function send_uncached_file(string $filepath): void {",
          "292:         header('Content-Disposition: inline; filename=\"styles_debug.php\"');",
          "293:         header('Last-Modified: ' . gmdate('D, d M Y H:i:s', time()) . ' GMT');",
          "294:         header('Expires: ' . gmdate('D, d M Y H:i:s', time()) . ' GMT');",
          "295:         header('Pragma: ');",
          "296:         header('Accept-Ranges: none');",
          "297:         header(\"Content-Type: {$this->mimetype}; charset=utf-8\");",
          "299:         readfile($filepath);",
          "300:         die;",
          "301:     }",
          "308:     protected function send_unmodified_headers(int $lastmodified): void {",
          "310:         $lifetime = 60 * 60 * 24 * 90;",
          "311:         header('HTTP/1.1 304 Not Modified');",
          "312:         header('Expires: ' . gmdate('D, d M Y H:i:s', time() + $lifetime) . ' GMT');",
          "313:         header('Cache-Control: public, max-age=' . $lifetime);",
          "314:         header(\"Content-Type: {$this->mimetype}; charset=utf-8\");",
          "315:         header('Etag: \"' . $this->get_etag() . '\"');",
          "316:         if ($lastmodified) {",
          "317:             header('Last-Modified: ' . gmdate('D, d M Y H:i:s', $lastmodified) . ' GMT');",
          "318:         }",
          "319:         die;",
          "320:     }",
          "325:     protected function send_not_found(): void {",
          "326:         header('HTTP/1.0 404 not found');",
          "327:         die('TinyMCE file was not found, sorry.');",
          "328:     }",
          "329: }",
          "331: new loader();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d16c049f3704781385d76f7cea783716a3f9e85",
      "candidate_info": {
        "commit_hash": "1d16c049f3704781385d76f7cea783716a3f9e85",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/1d16c049f3704781385d76f7cea783716a3f9e85",
        "files": [
          "lib/editor/tiny/lang.php",
          "lib/editor/tiny/loader.php"
        ],
        "message": "MDL-77718 editor_tiny: Restrict the revision to int for loaders\n\nThe revision should always be an int. I suspect this was missed during\ndebugging and not corrected.",
        "before_after_code_files": [
          "lib/editor/tiny/lang.php||lib/editor/tiny/lang.php",
          "lib/editor/tiny/loader.php||lib/editor/tiny/loader.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/editor/tiny/lang.php||lib/editor/tiny/lang.php",
            "lib/editor/tiny/loader.php||lib/editor/tiny/loader.php"
          ],
          "candidate": [
            "lib/editor/tiny/lang.php||lib/editor/tiny/lang.php",
            "lib/editor/tiny/loader.php||lib/editor/tiny/loader.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/editor/tiny/lang.php||lib/editor/tiny/lang.php": [
          "File: lib/editor/tiny/lang.php -> lib/editor/tiny/lang.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:             }",
          "76:             [$rev, $lang] = explode('/', $slashargument, 2);",
          "78:             $lang = min_clean_param($lang, 'SAFEDIR');",
          "79:         } else {",
          "81:             $lang = min_optional_param('lang', 'standard', 'SAFEDIR');",
          "82:         }",
          "",
          "[Removed Lines]",
          "77:             $rev  = min_clean_param($rev, 'RAW');",
          "80:             $rev  = min_optional_param('rev', 0, 'RAW');",
          "",
          "[Added Lines]",
          "77:             $rev  = min_clean_param($rev, 'INT');",
          "80:             $rev  = min_optional_param('rev', 0, 'INT');",
          "",
          "---------------"
        ],
        "lib/editor/tiny/loader.php||lib/editor/tiny/loader.php": [
          "File: lib/editor/tiny/loader.php -> lib/editor/tiny/loader.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:             }",
          "76:             [$rev, $filepath] = explode('/', $slashargument, 2);",
          "78:             $this->filepath = min_clean_param($filepath, 'SAFEPATH');",
          "79:         } else {",
          "81:             $this->filepath = min_optional_param('filepath', 'standard', 'SAFEPATH');",
          "82:         }",
          "",
          "[Removed Lines]",
          "77:             $this->rev  = min_clean_param($rev, 'RAW');",
          "80:             $this->rev  = min_optional_param('rev', 0, 'RAW');",
          "",
          "[Added Lines]",
          "77:             $this->rev  = min_clean_param($rev, 'INT');",
          "80:             $this->rev  = min_optional_param('rev', 0, 'INT');",
          "",
          "---------------"
        ]
      }
    }
  ]
}