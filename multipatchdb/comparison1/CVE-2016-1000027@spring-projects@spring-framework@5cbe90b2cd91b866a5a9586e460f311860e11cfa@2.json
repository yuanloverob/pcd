{
  "cve_id": "CVE-2016-1000027",
  "cve_desc": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.",
  "repo": "spring-projects/spring-framework",
  "patch_hash": "5cbe90b2cd91b866a5a9586e460f311860e11cfa",
  "patch_info": {
    "commit_hash": "5cbe90b2cd91b866a5a9586e460f311860e11cfa",
    "repo": "spring-projects/spring-framework",
    "commit_url": "https://github.com/spring-projects/spring-framework/commit/5cbe90b2cd91b866a5a9586e460f311860e11cfa",
    "files": [
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java",
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ],
    "message": "Explicit note on Java deserialization",
    "before_after_code_files": [
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java",
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ]
  },
  "patch_diff": {
    "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java": [
      "File: spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java -> spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java"
    ],
    "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java": [
      "File: spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java -> spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "70f2736c6c2762cccdb14597efcf1f44ab93e827",
      "candidate_info": {
        "commit_hash": "70f2736c6c2762cccdb14597efcf1f44ab93e827",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/70f2736c6c2762cccdb14597efcf1f44ab93e827",
        "files": [
          "spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java",
          "spring-context/src/main/java/org/springframework/format/datetime/DateFormatter.java",
          "spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java",
          "spring-tx/src/main/java/org/springframework/dao/support/DataAccessUtils.java"
        ],
        "message": "Polishing (cherry picked from commit b344c92)",
        "before_after_code_files": [
          "spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java||spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java",
          "spring-context/src/main/java/org/springframework/format/datetime/DateFormatter.java||spring-context/src/main/java/org/springframework/format/datetime/DateFormatter.java",
          "spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java||spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java",
          "spring-tx/src/main/java/org/springframework/dao/support/DataAccessUtils.java||spring-tx/src/main/java/org/springframework/dao/support/DataAccessUtils.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java||spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java": [
          "File: spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java -> spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java"
        ],
        "spring-context/src/main/java/org/springframework/format/datetime/DateFormatter.java||spring-context/src/main/java/org/springframework/format/datetime/DateFormatter.java": [
          "File: spring-context/src/main/java/org/springframework/format/datetime/DateFormatter.java -> spring-context/src/main/java/org/springframework/format/datetime/DateFormatter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:    if (timeStyle != -1) {",
          "190:     return DateFormat.getTimeInstance(timeStyle, locale);",
          "191:    }",
          "194:   }",
          "195:   return DateFormat.getDateInstance(this.style, locale);",
          "",
          "[Removed Lines]",
          "192:    throw new IllegalStateException(\"Unsupported style pattern '\"+ this.stylePattern+ \"'\");",
          "",
          "[Added Lines]",
          "192:    throw new IllegalStateException(\"Unsupported style pattern '\" + this.stylePattern + \"'\");",
          "",
          "---------------"
        ],
        "spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java||spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java": [
          "File: spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java -> spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java"
        ],
        "spring-tx/src/main/java/org/springframework/dao/support/DataAccessUtils.java||spring-tx/src/main/java/org/springframework/dao/support/DataAccessUtils.java": [
          "File: spring-tx/src/main/java/org/springframework/dao/support/DataAccessUtils.java -> spring-tx/src/main/java/org/springframework/dao/support/DataAccessUtils.java"
        ]
      }
    },
    {
      "candidate_hash": "cfd16f9c943ed978d44409383b330c58e8f89a10",
      "candidate_info": {
        "commit_hash": "cfd16f9c943ed978d44409383b330c58e8f89a10",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/cfd16f9c943ed978d44409383b330c58e8f89a10",
        "files": [
          "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ModelAndViewResolver.java"
        ],
        "message": "ModelAndViewResolver declares handlerType as Class<?>\n\nIssue: SPR-7860",
        "before_after_code_files": [
          "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ModelAndViewResolver.java||spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ModelAndViewResolver.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ModelAndViewResolver.java||spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ModelAndViewResolver.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ModelAndViewResolver.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ModelAndViewResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import org.springframework.web.servlet.ModelAndView;",
          "51: public interface ModelAndViewResolver {",
          "54:  ModelAndView UNRESOLVED = new ModelAndView();",
          "61: }",
          "",
          "[Removed Lines]",
          "56:  ModelAndView resolveModelAndView(Method handlerMethod,",
          "57:    Class handlerType,",
          "58:    Object returnValue,",
          "59:    ExtendedModelMap implicitModel,",
          "60:    NativeWebRequest webRequest);",
          "",
          "[Added Lines]",
          "55:  ModelAndView resolveModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue,",
          "56:    ExtendedModelMap implicitModel, NativeWebRequest webRequest);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fc37824bc08a8fcaaad41f09986e99e34a709172",
      "candidate_info": {
        "commit_hash": "fc37824bc08a8fcaaad41f09986e99e34a709172",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/fc37824bc08a8fcaaad41f09986e99e34a709172",
        "files": [
          "spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java"
        ],
        "message": "Improve static resource path check (cherry picked from commit 2697425)",
        "before_after_code_files": [
          "spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java||spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java||spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:     return true;",
          "282:    }",
          "283:   }",
          "285:    path = StringUtils.cleanPath(path);",
          "286:    if (path.contains(\"../\")) {",
          "287:     if (logger.isTraceEnabled()) {",
          "",
          "[Removed Lines]",
          "284:   if (path.contains(\"../\")) {",
          "",
          "[Added Lines]",
          "284:   if (path.contains(\"..\")) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "74b4dd0a40d897b751ea0b8ed61b0e8940d83197",
      "candidate_info": {
        "commit_hash": "74b4dd0a40d897b751ea0b8ed61b0e8940d83197",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/74b4dd0a40d897b751ea0b8ed61b0e8940d83197",
        "files": [
          "spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java",
          "spring-context/src/main/java/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssembler.java",
          "spring-context/src/test/java/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssemblerMappedTests.java",
          "spring-context/src/test/java/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssemblerTests.java",
          "spring-core/src/main/java/org/springframework/core/ConfigurableObjectInputStream.java",
          "spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java",
          "spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java",
          "spring-core/src/main/java/org/springframework/core/io/Resource.java",
          "spring-core/src/main/java/org/springframework/core/io/UrlResource.java",
          "spring-core/src/main/java/org/springframework/util/ClassUtils.java",
          "spring-core/src/main/java/org/springframework/util/ResourceUtils.java",
          "spring-core/src/test/java/org/springframework/core/convert/support/CollectionToCollectionConverterTests.java",
          "spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java",
          "spring-web/src/main/java/org/springframework/http/HttpStatus.java",
          "spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java",
          "spring-web/src/test/resources/org/springframework/web/util/HtmlCharacterEntityReferences.dtd",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/ServletWrappingController.java"
        ],
        "message": "Polishing (cherry picked from commit b5127dc)",
        "before_after_code_files": [
          "spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java||spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java",
          "spring-context/src/main/java/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssembler.java||spring-context/src/main/java/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssembler.java",
          "spring-context/src/test/java/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssemblerMappedTests.java||spring-context/src/test/java/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssemblerMappedTests.java",
          "spring-context/src/test/java/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssemblerTests.java||spring-context/src/test/java/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssemblerTests.java",
          "spring-core/src/main/java/org/springframework/core/ConfigurableObjectInputStream.java||spring-core/src/main/java/org/springframework/core/ConfigurableObjectInputStream.java",
          "spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java||spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java",
          "spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java||spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java",
          "spring-core/src/main/java/org/springframework/core/io/Resource.java||spring-core/src/main/java/org/springframework/core/io/Resource.java",
          "spring-core/src/main/java/org/springframework/core/io/UrlResource.java||spring-core/src/main/java/org/springframework/core/io/UrlResource.java",
          "spring-core/src/main/java/org/springframework/util/ClassUtils.java||spring-core/src/main/java/org/springframework/util/ClassUtils.java",
          "spring-core/src/main/java/org/springframework/util/ResourceUtils.java||spring-core/src/main/java/org/springframework/util/ResourceUtils.java",
          "spring-core/src/test/java/org/springframework/core/convert/support/CollectionToCollectionConverterTests.java||spring-core/src/test/java/org/springframework/core/convert/support/CollectionToCollectionConverterTests.java",
          "spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java||spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java",
          "spring-web/src/main/java/org/springframework/http/HttpStatus.java||spring-web/src/main/java/org/springframework/http/HttpStatus.java",
          "spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java||spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java",
          "spring-web/src/test/resources/org/springframework/web/util/HtmlCharacterEntityReferences.dtd||spring-web/src/test/resources/org/springframework/web/util/HtmlCharacterEntityReferences.dtd",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/ServletWrappingController.java||spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/ServletWrappingController.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java||spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java": [
          "File: spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java -> spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:     catch (Throwable ex) {",
          "157:      throw new BeanCreationException(mbd.getResourceDescription(), beanName,",
          "158:        \"Resolution of declared constructors on bean Class [\" + beanClass.getName() +",
          "160:     }",
          "161:    }",
          "162:    AutowireUtils.sortConstructors(candidates);",
          "",
          "[Removed Lines]",
          "159:          \"] from ClassLoader [\" + beanClass.getClassLoader() + \"] failed\", ex);",
          "",
          "[Added Lines]",
          "159:        \"] from ClassLoader [\" + beanClass.getClassLoader() + \"] failed\", ex);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "613:    String beanName, RootBeanDefinition mbd, BeanWrapper bw,",
          "614:    ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {",
          "618:   BeanDefinitionValueResolver valueResolver =",
          "619:     new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter);",
          "",
          "[Removed Lines]",
          "616:   TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?",
          "617:     this.beanFactory.getCustomTypeConverter() : bw);",
          "",
          "[Added Lines]",
          "616:   TypeConverter customConverter = this.beanFactory.getCustomTypeConverter();",
          "617:   TypeConverter converter = (customConverter != null ? customConverter : bw);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "670:    boolean autowiring) throws UnsatisfiedDependencyException {",
          "672:   String methodType = (methodOrCtor instanceof Constructor ? \"constructor\" : \"factory method\");",
          "676:   ArgumentsHolder args = new ArgumentsHolder(paramTypes.length);",
          "677:   Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =",
          "",
          "[Removed Lines]",
          "673:   TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?",
          "674:     this.beanFactory.getCustomTypeConverter() : bw);",
          "",
          "[Added Lines]",
          "673:   TypeConverter customConverter = this.beanFactory.getCustomTypeConverter();",
          "674:   TypeConverter converter = (customConverter != null ? customConverter : bw);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "772:  private Object[] resolvePreparedArguments(",
          "773:    String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {",
          "779:   BeanDefinitionValueResolver valueResolver =",
          "780:     new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter);",
          "781:   Object[] resolvedArgs = new Object[argsToResolve.length];",
          "782:   for (int argIndex = 0; argIndex < argsToResolve.length; argIndex++) {",
          "783:    Object argValue = argsToResolve[argIndex];",
          "",
          "[Removed Lines]",
          "775:   Class<?>[] paramTypes = (methodOrCtor instanceof Method ?",
          "776:     ((Method) methodOrCtor).getParameterTypes() : ((Constructor<?>) methodOrCtor).getParameterTypes());",
          "777:   TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?",
          "778:     this.beanFactory.getCustomTypeConverter() : bw);",
          "",
          "[Added Lines]",
          "775:   TypeConverter customConverter = this.beanFactory.getCustomTypeConverter();",
          "776:   TypeConverter converter = (customConverter != null ? customConverter : bw);",
          "779:   Class<?>[] paramTypes = (methodOrCtor instanceof Method ?",
          "780:     ((Method) methodOrCtor).getParameterTypes() : ((Constructor<?>) methodOrCtor).getParameterTypes());",
          "",
          "---------------"
        ],
        "spring-context/src/main/java/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssembler.java||spring-context/src/main/java/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssembler.java": [
          "File: spring-context/src/main/java/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssembler.java -> spring-context/src/main/java/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssembler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:   this.managedMethods = new HashSet<String>(Arrays.asList(methodNames));",
          "77:  }",
          "",
          "[Removed Lines]",
          "75:  public void setManagedMethods(String[] methodNames) {",
          "",
          "[Added Lines]",
          "75:  public void setManagedMethods(String... methodNames) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:  public void setMethodMappings(Properties mappings) {",
          "87:   this.methodMappings = new HashMap<String, Set<String>>();",
          "89:    String beanKey = (String) en.nextElement();",
          "90:    String[] methodNames = StringUtils.commaDelimitedListToStringArray(mappings.getProperty(beanKey));",
          "91:    this.methodMappings.put(beanKey, new HashSet<String>(Arrays.asList(methodNames)));",
          "",
          "[Removed Lines]",
          "88:   for (Enumeration en = mappings.keys(); en.hasMoreElements();) {",
          "",
          "[Added Lines]",
          "88:   for (Enumeration<?> en = mappings.keys(); en.hasMoreElements();) {",
          "",
          "---------------"
        ],
        "spring-context/src/test/java/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssemblerMappedTests.java||spring-context/src/test/java/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssemblerMappedTests.java": [
          "File: spring-context/src/test/java/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssemblerMappedTests.java -> spring-context/src/test/java/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssemblerMappedTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:  public void testWithFallThrough() throws Exception {",
          "48:   MethodNameBasedMBeanInfoAssembler assembler =",
          "49:     getWithMapping(\"foobar\", \"add,myOperation,getName,setName,getAge\");",
          "52:   ModelMBeanInfo inf = assembler.getMBeanInfo(getBean(), getObjectName());",
          "53:   MBeanAttributeInfo attr = inf.getAttribute(\"NickName\");",
          "",
          "[Removed Lines]",
          "50:   assembler.setManagedMethods(new String[]{\"getNickName\", \"setNickName\"});",
          "",
          "[Added Lines]",
          "50:   assembler.setManagedMethods(\"getNickName\", \"setNickName\");",
          "",
          "---------------"
        ],
        "spring-context/src/test/java/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssemblerTests.java||spring-context/src/test/java/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssemblerTests.java": [
          "File: spring-context/src/test/java/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssemblerTests.java -> spring-context/src/test/java/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssemblerTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:  @Override",
          "52:  protected MBeanInfoAssembler getAssembler() {",
          "53:   MethodNameBasedMBeanInfoAssembler assembler = new MethodNameBasedMBeanInfoAssembler();",
          "55:   return assembler;",
          "56:  }",
          "",
          "[Removed Lines]",
          "54:   assembler.setManagedMethods(new String[] {\"add\", \"myOperation\", \"getName\", \"setName\", \"getAge\"});",
          "",
          "[Added Lines]",
          "55:   assembler.setManagedMethods(\"add\", \"myOperation\", \"getName\", \"setName\", \"getAge\");",
          "",
          "---------------"
        ],
        "spring-core/src/main/java/org/springframework/core/ConfigurableObjectInputStream.java||spring-core/src/main/java/org/springframework/core/ConfigurableObjectInputStream.java": [
          "File: spring-core/src/main/java/org/springframework/core/ConfigurableObjectInputStream.java -> spring-core/src/main/java/org/springframework/core/ConfigurableObjectInputStream.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.io.NotSerializableException;",
          "22: import java.io.ObjectInputStream;",
          "23: import java.io.ObjectStreamClass;",
          "26: import org.springframework.util.ClassUtils;",
          "",
          "[Removed Lines]",
          "24: import java.lang.reflect.Proxy;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:  @Override",
          "72:   try {",
          "73:    if (this.classLoader != null) {",
          "",
          "[Removed Lines]",
          "71:  protected Class resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {",
          "",
          "[Added Lines]",
          "70:  protected Class<?> resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:  }",
          "87:  @Override",
          "89:   if (!this.acceptProxyClasses) {",
          "90:    throw new NotSerializableException(\"Not allowed to accept serialized proxy classes\");",
          "91:   }",
          "92:   if (this.classLoader != null) {",
          "95:    for (int i = 0; i < interfaces.length; i++) {",
          "96:     try {",
          "97:      resolvedInterfaces[i] = ClassUtils.forName(interfaces[i], this.classLoader);",
          "",
          "[Removed Lines]",
          "88:  protected Class resolveProxyClass(String[] interfaces) throws IOException, ClassNotFoundException {",
          "94:    Class[] resolvedInterfaces = new Class[interfaces.length];",
          "",
          "[Added Lines]",
          "87:  protected Class<?> resolveProxyClass(String[] interfaces) throws IOException, ClassNotFoundException {",
          "93:    Class<?>[] resolvedInterfaces = new Class<?>[interfaces.length];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "101:     }",
          "102:    }",
          "103:    try {",
          "105:    }",
          "106:    catch (IllegalArgumentException ex) {",
          "107:     throw new ClassNotFoundException(null, ex);",
          "",
          "[Removed Lines]",
          "104:     return Proxy.getProxyClass(this.classLoader, resolvedInterfaces);",
          "",
          "[Added Lines]",
          "103:     return ClassUtils.createCompositeInterface(resolvedInterfaces, this.classLoader);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "113:     return super.resolveProxyClass(interfaces);",
          "114:    }",
          "115:    catch (ClassNotFoundException ex) {",
          "117:     for (int i = 0; i < interfaces.length; i++) {",
          "118:      resolvedInterfaces[i] = resolveFallbackIfPossible(interfaces[i], ex);",
          "119:     }",
          "121:    }",
          "122:   }",
          "123:  }",
          "",
          "[Removed Lines]",
          "116:     Class[] resolvedInterfaces = new Class[interfaces.length];",
          "120:     return Proxy.getProxyClass(getFallbackClassLoader(), resolvedInterfaces);",
          "",
          "[Added Lines]",
          "115:     Class<?>[] resolvedInterfaces = new Class<?>[interfaces.length];",
          "119:     return ClassUtils.createCompositeInterface(resolvedInterfaces, getFallbackClassLoader());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "135:    throws IOException, ClassNotFoundException{",
          "137:   throw ex;",
          "",
          "[Removed Lines]",
          "134:  protected Class resolveFallbackIfPossible(String className, ClassNotFoundException ex)",
          "",
          "[Added Lines]",
          "133:  protected Class<?> resolveFallbackIfPossible(String className, ClassNotFoundException ex)",
          "",
          "---------------"
        ],
        "spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java||spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java": [
          "File: spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java -> spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java"
        ],
        "spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java||spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java": [
          "File: spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java -> spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java"
        ],
        "spring-core/src/main/java/org/springframework/core/io/Resource.java||spring-core/src/main/java/org/springframework/core/io/Resource.java": [
          "File: spring-core/src/main/java/org/springframework/core/io/Resource.java -> spring-core/src/main/java/org/springframework/core/io/Resource.java"
        ],
        "spring-core/src/main/java/org/springframework/core/io/UrlResource.java||spring-core/src/main/java/org/springframework/core/io/UrlResource.java": [
          "File: spring-core/src/main/java/org/springframework/core/io/UrlResource.java -> spring-core/src/main/java/org/springframework/core/io/UrlResource.java"
        ],
        "spring-core/src/main/java/org/springframework/util/ClassUtils.java||spring-core/src/main/java/org/springframework/util/ClassUtils.java": [
          "File: spring-core/src/main/java/org/springframework/util/ClassUtils.java -> spring-core/src/main/java/org/springframework/util/ClassUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:  private static final String NON_PRIMITIVE_ARRAY_PREFIX = \"[L\";",
          "59:  private static final char PACKAGE_SEPARATOR = '.';",
          "62:  private static final char INNER_CLASS_SEPARATOR = '$';",
          "65:  public static final String CGLIB_CLASS_SEPARATOR = \"$$\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:  private static final char PATH_SEPARATOR = '/';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "265:    return (clToUse != null ? clToUse.loadClass(name) : Class.forName(name));",
          "266:   }",
          "267:   catch (ClassNotFoundException ex) {",
          "269:    if (lastDotIndex != -1) {",
          "271:     try {",
          "272:      return (clToUse != null ? clToUse.loadClass(innerClassName) : Class.forName(innerClassName));",
          "273:     }",
          "",
          "[Removed Lines]",
          "268:    int lastDotIndex = name.lastIndexOf('.');",
          "270:     String innerClassName = name.substring(0, lastDotIndex) + '$' + name.substring(lastDotIndex + 1);",
          "",
          "[Added Lines]",
          "271:    int lastDotIndex = name.lastIndexOf(PACKAGE_SEPARATOR);",
          "273:     String innerClassName =",
          "274:       name.substring(0, lastDotIndex) + INNER_CLASS_SEPARATOR + name.substring(lastDotIndex + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "457:  public static String getShortNameAsProperty(Class<?> clazz) {",
          "460:   shortName = (dotIndex != -1 ? shortName.substring(dotIndex + 1) : shortName);",
          "461:   return Introspector.decapitalize(shortName);",
          "462:  }",
          "",
          "[Removed Lines]",
          "458:   String shortName = ClassUtils.getShortName(clazz);",
          "459:   int dotIndex = shortName.lastIndexOf('.');",
          "",
          "[Added Lines]",
          "462:   String shortName = getShortName(clazz);",
          "463:   int dotIndex = shortName.lastIndexOf(PACKAGE_SEPARATOR);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "525:   StringBuilder result = new StringBuilder();",
          "526:   while (clazz.isArray()) {",
          "527:    clazz = clazz.getComponentType();",
          "529:   }",
          "530:   result.insert(0, clazz.getName());",
          "531:   return result.toString();",
          "",
          "[Removed Lines]",
          "528:    result.append(ClassUtils.ARRAY_SUFFIX);",
          "",
          "[Added Lines]",
          "532:    result.append(ARRAY_SUFFIX);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "956:  public static String convertResourcePathToClassName(String resourcePath) {",
          "957:   Assert.notNull(resourcePath, \"Resource path must not be null\");",
          "959:  }",
          "",
          "[Removed Lines]",
          "958:   return resourcePath.replace('/', '.');",
          "",
          "[Added Lines]",
          "962:   return resourcePath.replace(PATH_SEPARATOR, PACKAGE_SEPARATOR);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "966:  public static String convertClassNameToResourcePath(String className) {",
          "967:   Assert.notNull(className, \"Class name must not be null\");",
          "969:  }",
          "",
          "[Removed Lines]",
          "968:   return className.replace('.', '/');",
          "",
          "[Added Lines]",
          "972:   return className.replace(PACKAGE_SEPARATOR, PATH_SEPARATOR);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1011:    return \"\";",
          "1012:   }",
          "1013:   String className = clazz.getName();",
          "1015:   if (packageEndIndex == -1) {",
          "1016:    return \"\";",
          "1017:   }",
          "1018:   String packageName = className.substring(0, packageEndIndex);",
          "1020:  }",
          "",
          "[Removed Lines]",
          "1014:   int packageEndIndex = className.lastIndexOf('.');",
          "1019:   return packageName.replace('.', '/');",
          "",
          "[Added Lines]",
          "1018:   int packageEndIndex = className.lastIndexOf(PACKAGE_SEPARATOR);",
          "1023:   return packageName.replace(PACKAGE_SEPARATOR, PATH_SEPARATOR);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1166:  public static Class<?> createCompositeInterface(Class<?>[] interfaces, ClassLoader classLoader) {",
          "1167:   Assert.notEmpty(interfaces, \"Interfaces must not be empty\");",
          "1169:   return Proxy.getProxyClass(classLoader, interfaces);",
          "1170:  }",
          "",
          "[Removed Lines]",
          "1168:   Assert.notNull(classLoader, \"ClassLoader must not be null\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1231:  public static boolean isCglibProxy(Object object) {",
          "1233:  }",
          "",
          "[Removed Lines]",
          "1232:   return ClassUtils.isCglibProxyClass(object.getClass());",
          "",
          "[Added Lines]",
          "1235:   return isCglibProxyClass(object.getClass());",
          "",
          "---------------"
        ],
        "spring-core/src/main/java/org/springframework/util/ResourceUtils.java||spring-core/src/main/java/org/springframework/util/ResourceUtils.java": [
          "File: spring-core/src/main/java/org/springframework/util/ResourceUtils.java -> spring-core/src/main/java/org/springframework/util/ResourceUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:    URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path));",
          "127:    if (url == null) {",
          "128:     String description = \"class path resource [\" + path + \"]\";",
          "131:    }",
          "132:    return url;",
          "133:   }",
          "",
          "[Removed Lines]",
          "129:     throw new FileNotFoundException(",
          "130:       description + \" cannot be resolved to URL because it does not exist\");",
          "",
          "[Added Lines]",
          "129:     throw new FileNotFoundException(description +",
          "130:       \" cannot be resolved to URL because it does not exist\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:    ClassLoader cl = ClassUtils.getDefaultClassLoader();",
          "167:    URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path));",
          "168:    if (url == null) {",
          "172:    }",
          "173:    return getFile(url, description);",
          "174:   }",
          "",
          "[Removed Lines]",
          "169:     throw new FileNotFoundException(",
          "170:       description + \" cannot be resolved to absolute file path \" +",
          "171:       \"because it does not reside in the file system\");",
          "",
          "[Added Lines]",
          "169:     throw new FileNotFoundException(description +",
          "170:       \" cannot be resolved to absolute file path because it does not exist\");",
          "",
          "---------------"
        ],
        "spring-core/src/test/java/org/springframework/core/convert/support/CollectionToCollectionConverterTests.java||spring-core/src/test/java/org/springframework/core/convert/support/CollectionToCollectionConverterTests.java": [
          "File: spring-core/src/test/java/org/springframework/core/convert/support/CollectionToCollectionConverterTests.java -> spring-core/src/test/java/org/springframework/core/convert/support/CollectionToCollectionConverterTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:   conversionService.addConverterFactory(new StringToNumberConverterFactory());",
          "75:   assertTrue(conversionService.canConvert(sourceType, targetType));",
          "76:   @SuppressWarnings(\"unchecked\")",
          "78:   assertFalse(list.equals(result));",
          "81:  }",
          "83:  @Test",
          "",
          "[Removed Lines]",
          "77:   List<String> result = (List<String>) conversionService.convert(list, sourceType, targetType);",
          "79:   assertEquals(9, result.get(0));",
          "80:   assertEquals(37, result.get(1));",
          "",
          "[Added Lines]",
          "77:   List<Integer> result = (List<Integer>) conversionService.convert(list, sourceType, targetType);",
          "79:   assertEquals(9, result.get(0).intValue());",
          "80:   assertEquals(37, result.get(1).intValue());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "199:  public void listToCollectionNoCopyRequired() throws NoSuchFieldException {",
          "200:   List<?> input = new ArrayList<String>(Arrays.asList(\"foo\", \"bar\"));",
          "201:   assertSame(input, conversionService.convert(input, TypeDescriptor.forObject(input),",
          "203:  }",
          "205:  @Test",
          "",
          "[Removed Lines]",
          "202:     new TypeDescriptor(getClass().getField(\"wildCardCollection\"))));",
          "",
          "[Added Lines]",
          "202:     new TypeDescriptor(getClass().getField(\"wildcardCollection\"))));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:   assertSame(resources, conversionService.convert(resources, sourceType, new TypeDescriptor(getClass().getField(\"resources\"))));",
          "233:  }",
          "236:  public void elementTypesNotConvertible() throws Exception {",
          "237:   List<String> resources = new ArrayList<String>();",
          "238:   resources.add(null);",
          "",
          "[Removed Lines]",
          "235:  @Test(expected=ConverterNotFoundException.class)",
          "",
          "[Added Lines]",
          "235:  @Test(expected = ConverterNotFoundException.class)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "241:   assertEquals(resources, conversionService.convert(resources, sourceType, new TypeDescriptor(getClass().getField(\"resources\"))));",
          "242:  }",
          "245:  public void nothingInCommon() throws Exception {",
          "246:   List<Object> resources = new ArrayList<Object>();",
          "247:   resources.add(new ClassPathResource(\"test\"));",
          "",
          "[Removed Lines]",
          "244:  @Test(expected=ConversionFailedException.class)",
          "",
          "[Added Lines]",
          "244:  @Test(expected = ConversionFailedException.class)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "262:  public List<String> strings;",
          "268:  public List<Resource> resources;",
          "",
          "[Removed Lines]",
          "264:  public List list = Collections.emptyList();",
          "266:  public Collection<?> wildCardCollection = Collections.emptyList();",
          "",
          "[Added Lines]",
          "264:  public List<?> list = Collections.emptyList();",
          "266:  public Collection<?> wildcardCollection = Collections.emptyList();",
          "",
          "---------------"
        ],
        "spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java||spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java": [
          "File: spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java -> spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: import org.springframework.dao.InvalidDataAccessApiUsageException;",
          "38: import org.springframework.jdbc.support.JdbcUtils;",
          "39: import org.springframework.util.Assert;",
          "40: import org.springframework.util.StringUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: import org.springframework.util.ClassUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:   }",
          "137:  }",
          "143:  protected void initialize(Class<T> mappedClass) {",
          "144:   this.mappedClass = mappedClass;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143:  public final Class<T> getMappedClass() {",
          "144:   return this.mappedClass;",
          "145:  }",
          "152:  public void setCheckFullyPopulated(boolean checkFullyPopulated) {",
          "153:   this.checkFullyPopulated = checkFullyPopulated;",
          "154:  }",
          "160:  public boolean isCheckFullyPopulated() {",
          "161:   return this.checkFullyPopulated;",
          "162:  }",
          "169:  public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {",
          "170:   this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue;",
          "171:  }",
          "177:  public boolean isPrimitivesDefaultedForNullValue() {",
          "178:   return this.primitivesDefaultedForNullValue;",
          "179:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "182:   return result.toString();",
          "183:  }",
          "",
          "[Removed Lines]",
          "188:  public final Class<T> getMappedClass() {",
          "189:   return this.mappedClass;",
          "190:  }",
          "198:  public void setCheckFullyPopulated(boolean checkFullyPopulated) {",
          "199:   this.checkFullyPopulated = checkFullyPopulated;",
          "200:  }",
          "206:  public boolean isCheckFullyPopulated() {",
          "207:   return this.checkFullyPopulated;",
          "208:  }",
          "215:  public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {",
          "216:   this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue;",
          "217:  }",
          "223:  public boolean isPrimitivesDefaultedForNullValue() {",
          "224:   return primitivesDefaultedForNullValue;",
          "225:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "243:   for (int index = 1; index <= columnCount; index++) {",
          "244:    String column = JdbcUtils.lookupColumnName(rsmd, index);",
          "246:    if (pd != null) {",
          "247:     try {",
          "248:      Object value = getColumnValue(rs, index, pd);",
          "252:      }",
          "253:      try {",
          "254:       bw.setPropertyValue(pd.getName(), value);",
          "255:      }",
          "262:       }",
          "263:       else {",
          "265:       }",
          "266:      }",
          "267:      if (populatedProperties != null) {",
          "",
          "[Removed Lines]",
          "245:    PropertyDescriptor pd = this.mappedFields.get(column.replaceAll(\" \", \"\").toLowerCase());",
          "249:      if (logger.isDebugEnabled() && rowNumber == 0) {",
          "250:       logger.debug(\"Mapping column '\" + column + \"' to property '\" +",
          "251:         pd.getName() + \"' of type \" + pd.getPropertyType());",
          "256:      catch (TypeMismatchException e) {",
          "257:       if (value == null && primitivesDefaultedForNullValue) {",
          "258:        logger.debug(\"Intercepted TypeMismatchException for row \" + rowNumber +",
          "259:          \" and column '\" + column + \"' with value \" + value +",
          "260:          \" when setting property '\" + pd.getName() + \"' of type \" + pd.getPropertyType() +",
          "261:          \" on object: \" + mappedObject);",
          "264:        throw e;",
          "",
          "[Added Lines]",
          "246:    String field = column.replaceAll(\" \", \"\").toLowerCase();",
          "247:    PropertyDescriptor pd = this.mappedFields.get(field);",
          "251:      if (rowNumber == 0 && logger.isDebugEnabled()) {",
          "252:       logger.debug(\"Mapping column '\" + column + \"' to property '\" + pd.getName() +",
          "253:         \"' of type [\" + ClassUtils.getQualifiedName(pd.getPropertyType()) + \"]\");",
          "258:      catch (TypeMismatchException ex) {",
          "259:       if (value == null && this.primitivesDefaultedForNullValue) {",
          "260:        if (logger.isDebugEnabled()) {",
          "261:         logger.debug(\"Intercepted TypeMismatchException for row \" + rowNumber +",
          "262:           \" and column '\" + column + \"' with null value when setting property '\" +",
          "263:           pd.getName() + \"' of type [\" +",
          "264:           ClassUtils.getQualifiedName(pd.getPropertyType()) +",
          "265:           \"] on object: \" + mappedObject, ex);",
          "266:        }",
          "269:        throw ex;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "270:     }",
          "271:     catch (NotWritablePropertyException ex) {",
          "272:      throw new DataRetrievalFailureException(",
          "274:     }",
          "275:    }",
          "276:   }",
          "278:   if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {",
          "279:    throw new InvalidDataAccessApiUsageException(\"Given ResultSet does not contain all fields \" +",
          "281:   }",
          "283:   return mappedObject;",
          "",
          "[Removed Lines]",
          "273:        \"Unable to map column \" + column + \" to property \" + pd.getName(), ex);",
          "280:      \"necessary to populate object of class [\" + this.mappedClass + \"]: \" + this.mappedProperties);",
          "",
          "[Added Lines]",
          "278:        \"Unable to map column '\" + column + \"' to property '\" + pd.getName() + \"'\", ex);",
          "279:     }",
          "280:    }",
          "281:    else {",
          "283:     if (rowNumber == 0 && logger.isDebugEnabled()) {",
          "284:      logger.debug(\"No property found for column '\" + column + \"' mapped to field '\" + field + \"'\");",
          "291:      \"necessary to populate object of class [\" + this.mappedClass.getName() + \"]: \" +",
          "292:      this.mappedProperties);",
          "",
          "---------------"
        ],
        "spring-web/src/main/java/org/springframework/http/HttpStatus.java||spring-web/src/main/java/org/springframework/http/HttpStatus.java": [
          "File: spring-web/src/main/java/org/springframework/http/HttpStatus.java -> spring-web/src/main/java/org/springframework/http/HttpStatus.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "364:  NETWORK_AUTHENTICATION_REQUIRED(511, \"Network Authentication Required\");",
          "368:  private final int value;",
          "370:  private final String reasonPhrase;",
          "374:   this.value = value;",
          "375:   this.reasonPhrase = reasonPhrase;",
          "376:  }",
          "",
          "[Removed Lines]",
          "373:  private HttpStatus(int value, String reasonPhrase) {",
          "",
          "[Added Lines]",
          "373:  HttpStatus(int value, String reasonPhrase) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "388:  public String getReasonPhrase() {",
          "390:  }",
          "",
          "[Removed Lines]",
          "389:   return reasonPhrase;",
          "",
          "[Added Lines]",
          "390:   return this.reasonPhrase;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "403:  @Override",
          "404:  public String toString() {",
          "406:  }",
          "",
          "[Removed Lines]",
          "405:   return Integer.toString(value);",
          "",
          "[Added Lines]",
          "406:   return Integer.toString(this.value);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "431:   INFORMATIONAL(1),",
          "432:   SUCCESSFUL(2),",
          "",
          "[Removed Lines]",
          "429:  public static enum Series {",
          "",
          "[Added Lines]",
          "430:  public enum Series {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "437:   private final int value;",
          "440:    this.value = value;",
          "441:   }",
          "",
          "[Removed Lines]",
          "439:   private Series(int value) {",
          "",
          "[Added Lines]",
          "440:   Series(int value) {",
          "",
          "---------------"
        ],
        "spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java||spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java": [
          "File: spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java -> spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:    if (c1 == c2) {",
          "244:     continue;",
          "245:    }",
          "247:     continue;",
          "248:    }",
          "249:    return null;",
          "",
          "[Removed Lines]",
          "246:    if (ignoreCase && (Character.toLowerCase(c1) == Character.toLowerCase(c2))) {",
          "",
          "[Added Lines]",
          "246:    else if (ignoreCase && (Character.toLowerCase(c1) == Character.toLowerCase(c2))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:   if (index2 != mapping.length()) {",
          "252:    return null;",
          "253:   }",
          "255:    return \"\";",
          "256:   }",
          "257:   else if (requestUri.charAt(index1) == ';') {",
          "",
          "[Removed Lines]",
          "254:   if (index1 == requestUri.length()) {",
          "",
          "[Added Lines]",
          "254:   else if (index1 == requestUri.length()) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "454:  public String removeSemicolonContent(String requestUri) {",
          "457:  }",
          "459:  private String removeSemicolonContentInternal(String requestUri) {",
          "",
          "[Removed Lines]",
          "455:   return this.removeSemicolonContent ?",
          "456:     removeSemicolonContentInternal(requestUri) : removeJsessionid(requestUri);",
          "",
          "[Added Lines]",
          "455:   return (this.removeSemicolonContent ?",
          "456:     removeSemicolonContentInternal(requestUri) : removeJsessionid(requestUri));",
          "",
          "---------------"
        ],
        "spring-web/src/test/resources/org/springframework/web/util/HtmlCharacterEntityReferences.dtd||spring-web/src/test/resources/org/springframework/web/util/HtmlCharacterEntityReferences.dtd": [
          "File: spring-web/src/test/resources/org/springframework/web/util/HtmlCharacterEntityReferences.dtd -> spring-web/src/test/resources/org/springframework/web/util/HtmlCharacterEntityReferences.dtd",
          "--- Hunk 1 ---",
          "[Context before]",
          "2:      by the HTML 4.0 standard. -->",
          "4:      HTML 4.0 character set can be found at",
          "9: <!-- Portions \u00a9 International Organization for Standardization 1986",
          "10:      Permission to copy in any form is granted for use with",
          "11:      conforming SGML systems and applications as defined in",
          "",
          "[Removed Lines]",
          "1: <!-- File containing all charcter entity references definied",
          "3: <!-- Valuable informations and a complete description of the",
          "5:      http://www.w3.org/TR/html4/charset.html.",
          "6:      -->",
          "",
          "[Added Lines]",
          "1: <!-- File containing all character entity references defined",
          "3: <!-- Valuable information and a complete description of the",
          "5:      http://www.w3.org/TR/html4/charset.html. -->",
          "",
          "---------------"
        ],
        "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/ServletWrappingController.java||spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/ServletWrappingController.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/ServletWrappingController.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/ServletWrappingController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: public class ServletWrappingController extends AbstractController",
          "85:   implements BeanNameAware, InitializingBean, DisposableBean {",
          "89:  private String servletName;",
          "",
          "[Removed Lines]",
          "87:  private Class<?> servletClass;",
          "",
          "[Added Lines]",
          "85:  private Class<? extends Servlet> servletClass;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:   this.servletClass = servletClass;",
          "105:  }",
          "",
          "[Removed Lines]",
          "103:  public void setServletClass(Class<?> servletClass) {",
          "",
          "[Added Lines]",
          "101:  public void setServletClass(Class<? extends Servlet> servletClass) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:  public void afterPropertiesSet() throws Exception {",
          "133:   if (this.servletClass == null) {",
          "139:   }",
          "140:   if (this.servletName == null) {",
          "141:    this.servletName = this.beanName;",
          "142:   }",
          "144:   this.servletInstance.init(new DelegatingServletConfig());",
          "145:  }",
          "152:  @Override",
          "153:  protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response)",
          "156:   this.servletInstance.service(request, response);",
          "157:   return null;",
          "",
          "[Removed Lines]",
          "134:    throw new IllegalArgumentException(\"servletClass is required\");",
          "135:   }",
          "136:   if (!Servlet.class.isAssignableFrom(this.servletClass)) {",
          "137:    throw new IllegalArgumentException(\"servletClass [\" + this.servletClass.getName() +",
          "138:     \"] needs to implement interface [javax.servlet.Servlet]\");",
          "143:   this.servletInstance = (Servlet) this.servletClass.newInstance();",
          "154:   throws Exception {",
          "",
          "[Added Lines]",
          "132:    throw new IllegalArgumentException(\"'servletClass' is required\");",
          "137:   this.servletInstance = this.servletClass.newInstance();",
          "148:    throws Exception {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6024c23ca858ba7f48de4d9cbdb3f3e73ad99e0",
      "candidate_info": {
        "commit_hash": "f6024c23ca858ba7f48de4d9cbdb3f3e73ad99e0",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/f6024c23ca858ba7f48de4d9cbdb3f3e73ad99e0",
        "files": [
          "spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java",
          "spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/LazySingletonAspectInstanceFactoryDecorator.java",
          "spring-aop/src/main/java/org/springframework/aop/support/AbstractBeanFactoryPointcutAdvisor.java"
        ],
        "message": "No external locking for singleton advice/aspect beans\n\nIssue: SPR-14324\n(cherry picked from commit 6b7f3fd)",
        "before_after_code_files": [
          "spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java||spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java",
          "spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/LazySingletonAspectInstanceFactoryDecorator.java||spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/LazySingletonAspectInstanceFactoryDecorator.java",
          "spring-aop/src/main/java/org/springframework/aop/support/AbstractBeanFactoryPointcutAdvisor.java||spring-aop/src/main/java/org/springframework/aop/support/AbstractBeanFactoryPointcutAdvisor.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java||spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java": [
          "File: spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java -> spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:  }",
          "94:  public Object getAspectCreationMutex() {",
          "97:  }",
          "",
          "[Removed Lines]",
          "95:   return (this.beanFactory instanceof AbstractBeanFactory ?",
          "96:     ((AbstractBeanFactory) this.beanFactory).getSingletonMutex() : this);",
          "",
          "[Added Lines]",
          "95:   if (this.beanFactory != null) {",
          "96:    if (this.beanFactory.isSingleton(this.name)) {",
          "98:     return null;",
          "99:    }",
          "100:    else if (this.beanFactory instanceof AbstractBeanFactory) {",
          "104:     return ((AbstractBeanFactory) this.beanFactory).getSingletonMutex();",
          "105:    }",
          "106:   }",
          "107:   return this;",
          "",
          "---------------"
        ],
        "spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/LazySingletonAspectInstanceFactoryDecorator.java||spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/LazySingletonAspectInstanceFactoryDecorator.java": [
          "File: spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/LazySingletonAspectInstanceFactoryDecorator.java -> spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/LazySingletonAspectInstanceFactoryDecorator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:    if (this.maaif instanceof BeanFactoryAspectInstanceFactory) {",
          "49:     mutex = ((BeanFactoryAspectInstanceFactory) this.maaif).getAspectCreationMutex();",
          "50:    }",
          "54:     }",
          "55:    }",
          "56:   }",
          "",
          "[Removed Lines]",
          "51:    synchronized (mutex) {",
          "52:     if (this.materialized == null) {",
          "53:      this.materialized = this.maaif.getAspectInstance();",
          "",
          "[Added Lines]",
          "51:    if (mutex == null) {",
          "52:     this.materialized = this.maaif.getAspectInstance();",
          "53:    }",
          "54:    else {",
          "55:     synchronized (mutex) {",
          "56:      if (this.materialized == null) {",
          "57:       this.materialized = this.maaif.getAspectInstance();",
          "58:      }",
          "",
          "---------------"
        ],
        "spring-aop/src/main/java/org/springframework/aop/support/AbstractBeanFactoryPointcutAdvisor.java||spring-aop/src/main/java/org/springframework/aop/support/AbstractBeanFactoryPointcutAdvisor.java": [
          "File: spring-aop/src/main/java/org/springframework/aop/support/AbstractBeanFactoryPointcutAdvisor.java -> spring-aop/src/main/java/org/springframework/aop/support/AbstractBeanFactoryPointcutAdvisor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:  private BeanFactory beanFactory;",
          "51:  private transient volatile Object adviceMonitor = new Object();",
          "",
          "[Removed Lines]",
          "49:  private transient Advice advice;",
          "",
          "[Added Lines]",
          "49:  private transient volatile Advice advice;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:  }",
          "98:  public Advice getAdvice() {",
          "103:    }",
          "105:   }",
          "106:  }",
          "",
          "[Removed Lines]",
          "99:   synchronized (this.adviceMonitor) {",
          "100:    if (this.advice == null && this.adviceBeanName != null) {",
          "101:     Assert.state(this.beanFactory != null, \"BeanFactory must be set to resolve 'adviceBeanName'\");",
          "102:     this.advice = this.beanFactory.getBean(this.adviceBeanName, Advice.class);",
          "104:    return this.advice;",
          "",
          "[Added Lines]",
          "99:   Advice advice = this.advice;",
          "100:   if (advice != null || this.adviceBeanName == null) {",
          "101:    return advice;",
          "102:   }",
          "104:   Assert.state(this.beanFactory != null, \"BeanFactory must be set to resolve 'adviceBeanName'\");",
          "105:   if (this.beanFactory.isSingleton(this.adviceBeanName)) {",
          "107:    advice = this.beanFactory.getBean(this.adviceBeanName, Advice.class);",
          "108:    this.advice = advice;",
          "109:    return advice;",
          "110:   }",
          "111:   else {",
          "115:    synchronized (this.adviceMonitor) {",
          "116:     if (this.advice == null) {",
          "117:      this.advice = this.beanFactory.getBean(this.adviceBeanName, Advice.class);",
          "118:     }",
          "119:     return this.advice;",
          "",
          "---------------"
        ]
      }
    }
  ]
}