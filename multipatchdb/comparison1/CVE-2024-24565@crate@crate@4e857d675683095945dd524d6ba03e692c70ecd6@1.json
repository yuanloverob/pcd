{
  "cve_id": "CVE-2024-24565",
  "cve_desc": "CrateDB is a distributed SQL database that makes it simple to store and analyze massive amounts of data in real-time. There is a COPY FROM function in the CrateDB database that is used to import file data into database tables. This function has a flaw, and authenticated attackers can use the COPY FROM function to import arbitrary file content into database tables, resulting in information leakage. This vulnerability is patched in 5.3.9, 5.4.8, 5.5.4, and 5.6.1.",
  "repo": "crate/crate",
  "patch_hash": "4e857d675683095945dd524d6ba03e692c70ecd6",
  "patch_info": {
    "commit_hash": "4e857d675683095945dd524d6ba03e692c70ecd6",
    "repo": "crate/crate",
    "commit_url": "https://github.com/crate/crate/commit/4e857d675683095945dd524d6ba03e692c70ecd6",
    "files": [
      "docs/appendices/release-notes/5.5.4.rst",
      "docs/appendices/release-notes/5.6.1.rst",
      "docs/sql/statements/copy-from.rst",
      "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
      "server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
      "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
      "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
      "server/src/main/java/org/elasticsearch/ElasticsearchException.java",
      "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
      "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
    ],
    "message": "Restrict `COPY FROM` using local files to superuser\n\nFixing a security issue where any user could read/import content\nof any file on the host system, the CrateDB process user has read\naccess to.",
    "before_after_code_files": [
      "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
      "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
      "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
      "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
      "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java",
      "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java||server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
      "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
    ]
  },
  "patch_diff": {
    "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java": [
      "File: plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java -> plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "106:     private FileReadingIterator createBatchIterator(S3ObjectInputStream inputStream, String ... fileUris) {",
      "107:         String compression = null;",
      "108:         return new FileReadingIterator(",
      "110:             compression,",
      "111:             Map.of(",
      "112:                 S3FileInputFactory.NAME,",
      "",
      "[Removed Lines]",
      "109:             Arrays.asList(fileUris),",
      "",
      "[Added Lines]",
      "109:             Arrays.stream(fileUris).map(FileReadingIterator::toURI).toList(),",
      "",
      "---------------"
    ],
    "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java": [
      "File: server/src/main/java/io/crate/exceptions/UnauthorizedException.java -> server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: package io.crate.exceptions;",
      "26:     public UnauthorizedException(String message) {",
      "27:         super(message);",
      "28:     }",
      "30: }",
      "",
      "[Removed Lines]",
      "24: public class UnauthorizedException extends RuntimeException implements UnscopedException {",
      "",
      "[Added Lines]",
      "24: import java.io.IOException;",
      "26: import org.elasticsearch.ElasticsearchException;",
      "27: import org.elasticsearch.common.io.stream.StreamInput;",
      "29: public class UnauthorizedException extends ElasticsearchException implements UnscopedException {",
      "35:     public UnauthorizedException(StreamInput in) throws IOException {",
      "36:         super(in);",
      "37:     }",
      "",
      "---------------"
    ],
    "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java": [
      "File: server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java -> server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "175:         }",
      "176:     }",
      "179:                                String compression,",
      "180:                                Map<String, FileInputFactory> fileInputFactories,",
      "181:                                Boolean shared,",
      "",
      "[Removed Lines]",
      "178:     public FileReadingIterator(Collection<String> fileUris,",
      "",
      "[Added Lines]",
      "178:     public FileReadingIterator(Collection<URI> fileUris,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "398:     }",
      "400:     @Nullable",
      "403:         FileInputFactory fileInputFactory = fileInputFactories.get(uri.getScheme());",
      "404:         if (fileInputFactory != null) {",
      "405:             try {",
      "",
      "[Removed Lines]",
      "401:     private FileInput toFileInput(String fileUri, Settings withClauseOptions) {",
      "402:         URI uri = toURI(fileUri);",
      "",
      "[Added Lines]",
      "401:     private FileInput toFileInput(URI uri, Settings withClauseOptions) {",
      "",
      "---------------"
    ],
    "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java": [
      "File: server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java -> server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: package io.crate.execution.engine.collect.sources;",
      "24: import java.util.Arrays;",
      "25: import java.util.Collection;",
      "26: import java.util.Collections;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: import static java.util.Objects.requireNonNull;",
      "26: import java.net.URI;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40: import io.crate.data.BatchIterator;",
      "41: import io.crate.data.Row;",
      "42: import io.crate.data.SkippingBatchIterator;",
      "43: import io.crate.execution.dsl.phases.CollectPhase;",
      "44: import io.crate.execution.dsl.phases.FileUriCollectPhase;",
      "45: import io.crate.execution.engine.collect.CollectTask;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46: import io.crate.exceptions.UnauthorizedException;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "53: import io.crate.metadata.NodeContext;",
      "54: import io.crate.metadata.TransactionContext;",
      "55: import io.crate.planner.operators.SubQueryResults;",
      "56: import io.crate.types.DataTypes;",
      "58: @Singleton",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "60: import io.crate.role.Role;",
      "61: import io.crate.role.Roles;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "63:     private final InputFactory inputFactory;",
      "64:     private final NodeContext nodeCtx;",
      "65:     private final ThreadPool threadPool;",
      "67:     @Inject",
      "68:     public FileCollectSource(NodeContext nodeCtx,",
      "69:                              ClusterService clusterService,",
      "70:                              Map<String, FileInputFactory> fileInputFactoryMap,",
      "72:         this.fileInputFactoryMap = fileInputFactoryMap;",
      "73:         this.nodeCtx = nodeCtx;",
      "74:         this.inputFactory = new InputFactory(nodeCtx);",
      "75:         this.clusterService = clusterService;",
      "76:         this.threadPool = threadPool;",
      "77:     }",
      "79:     @Override",
      "",
      "[Removed Lines]",
      "71:                              ThreadPool threadPool) {",
      "",
      "[Added Lines]",
      "72:     private final Roles roles;",
      "78:                              ThreadPool threadPool,",
      "79:                              Roles roles) {",
      "85:         this.roles = roles;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "86:             inputFactory.ctxForRefs(txnCtx, FileLineReferenceResolver::getImplementation);",
      "87:         ctx.add(collectPhase.toCollect());",
      "90:         FileReadingIterator fileReadingIterator = new FileReadingIterator(",
      "91:             fileUris,",
      "92:             fileUriCollectPhase.compression(),",
      "",
      "[Removed Lines]",
      "89:         List<String> fileUris = targetUriToStringList(txnCtx, nodeCtx, fileUriCollectPhase.targetUri());",
      "",
      "[Added Lines]",
      "98:         Role user = requireNonNull(roles.findUser(txnCtx.sessionSettings().userName()), \"User who invoked a statement must exist\");",
      "99:         List<URI> fileUris = targetUriToStringList(txnCtx, nodeCtx, fileUriCollectPhase.targetUri()).stream()",
      "100:             .map(s -> {",
      "101:                 var uri = FileReadingIterator.toURI(s);",
      "102:                 if (uri.getScheme().equals(\"file\") && user.isSuperUser() == false) {",
      "103:                     throw new UnauthorizedException(\"Only a superuser can read from the local file system\");",
      "104:                 }",
      "105:                 return uri;",
      "106:             })",
      "107:             .toList();",
      "",
      "---------------"
    ],
    "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java": [
      "File: server/src/main/java/org/elasticsearch/ElasticsearchException.java -> server/src/main/java/org/elasticsearch/ElasticsearchException.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "973:             io.crate.exceptions.OperationOnInaccessibleRelationException.class,",
      "974:             io.crate.exceptions.OperationOnInaccessibleRelationException::new,",
      "975:             176,",
      "978:         final Class<? extends ElasticsearchException> exceptionClass;",
      "979:         final CheckedFunction<StreamInput, ? extends ElasticsearchException, IOException> constructor;",
      "",
      "[Removed Lines]",
      "976:             Version.V_5_6_0);",
      "",
      "[Added Lines]",
      "976:             Version.V_5_6_0),",
      "977:         UNAUTHORIZED_EXCEPTION(",
      "978:             io.crate.exceptions.UnauthorizedException.class,",
      "979:             io.crate.exceptions.UnauthorizedException::new,",
      "980:             177,",
      "981:             Version.V_5_7_0);",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java": [
      "File: server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java -> server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "54: import io.crate.expression.symbol.Literal;",
      "55: import io.crate.metadata.ColumnIdent;",
      "56: import io.crate.metadata.CoordinatorTxnCtx;",
      "57: import io.crate.test.integration.CrateDummyClusterServiceUnitTest;",
      "58: import io.crate.types.DataTypes;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57: import io.crate.role.Role;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "69:             createNodeContext(),",
      "70:             clusterService,",
      "71:             Collections.emptyMap(),",
      "73:             );",
      "75:         File tmpFile = temporaryFolder.newFile(\"fileUriCollectOperation.json\");",
      "",
      "[Removed Lines]",
      "72:             THREAD_POOL",
      "",
      "[Added Lines]",
      "73:             THREAD_POOL,",
      "74:             () -> List.of(Role.CRATE_USER)",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java": [
      "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "201:     private static FileReadingIterator it(Collection<String> fileUris, String compression) {",
      "202:         return new FileReadingIterator(",
      "204:             compression,",
      "205:             Map.of(LocalFsFileInputFactory.NAME, new LocalFsFileInputFactory()),",
      "206:             false,",
      "",
      "[Removed Lines]",
      "203:             fileUris,",
      "",
      "[Added Lines]",
      "203:             fileUris.stream().map(FileReadingIterator::toURI).toList(),",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java": [
      "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: import java.io.InputStream;",
      "35: import java.io.InputStreamReader;",
      "36: import java.net.SocketTimeoutException;",
      "37: import java.nio.charset.StandardCharsets;",
      "38: import java.nio.file.Files;",
      "39: import java.nio.file.Path;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37: import java.net.URI;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "43: import java.util.concurrent.ScheduledExecutorService;",
      "44: import java.util.concurrent.TimeUnit;",
      "45: import java.util.function.Supplier;",
      "47: import org.elasticsearch.common.settings.Settings;",
      "48: import org.elasticsearch.test.ESTestCase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: import java.util.stream.Stream;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "87:         Path tempFile2 = createTempFile(\"tempfile2\", \".csv\");",
      "88:         List<String> lines2 = List.of(\"name,id,age\", \"Trillian,5,33\");",
      "89:         Files.write(tempFile2, lines2);",
      "92:         Supplier<BatchIterator<LineCursor>> batchIteratorSupplier =",
      "93:             () -> new FileReadingIterator(",
      "",
      "[Removed Lines]",
      "90:         List<String> fileUris = List.of(tempFile1.toUri().toString(), tempFile2.toUri().toString());",
      "",
      "[Added Lines]",
      "92:         List<URI> fileUris = Stream.of(tempFile1.toUri().toString(), tempFile2.toUri().toString())",
      "93:             .map(FileReadingIterator::toURI)",
      "94:             .toList();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "139:         Path tempFile = createTempFile(\"tempfile1\", \".csv\");",
      "140:         List<String> lines = List.of(\"id\", \"1\", \"2\", \"3\", \"4\", \"5\");",
      "141:         Files.write(tempFile, lines);",
      "144:         Supplier<BatchIterator<LineCursor>> batchIteratorSupplier =",
      "145:             () -> new FileReadingIterator(",
      "",
      "[Removed Lines]",
      "142:         List<String> fileUris = List.of(tempFile.toUri().toString());",
      "",
      "[Added Lines]",
      "146:         List<URI> fileUris = Stream.of(tempFile.toUri().toString())",
      "147:             .map(FileReadingIterator::toURI).toList();",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "213:         Files.write(tempFile, List.of(\"1\", \"2\", \"3\"));",
      "214:         Path tempFile2 = createTempFile(\"tempfile2\", \".csv\");",
      "215:         Files.write(tempFile2, List.of(\"4\", \"5\", \"6\"));",
      "218:         var fi = new FileReadingIterator(",
      "219:             fileUris,",
      "",
      "[Removed Lines]",
      "216:         List<String> fileUris = List.of(tempFile.toUri().toString(), tempFile2.toUri().toString());",
      "",
      "[Added Lines]",
      "221:         List<URI> fileUris = Stream.of(tempFile.toUri().toString(), tempFile2.toUri().toString())",
      "222:             .map(FileReadingIterator::toURI).toList();",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java||server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java": [
      "File: server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java -> server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "92:             new NodeContext(new Functions(Map.of()), roles),",
      "93:             clusterService,",
      "94:             Map.of(),",
      "96:         );",
      "98:         CompletableFuture<BatchIterator<Row>> iterator = fileCollectSource.getIterator(",
      "",
      "[Removed Lines]",
      "95:             THREAD_POOL",
      "",
      "[Added Lines]",
      "95:             THREAD_POOL,",
      "96:             () -> List.of(Role.CRATE_USER)",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java": [
      "File: server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java -> server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: import static io.crate.testing.Asserts.assertThat;",
      "27: import static io.crate.testing.TestingHelpers.printedTable;",
      "28: import static io.netty.handler.codec.http.HttpResponseStatus.BAD_REQUEST;",
      "30: import java.io.File;",
      "31: import java.io.FileOutputStream;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: import static org.assertj.core.api.Assertions.assertThatThrownBy;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "54: import com.carrotsearch.randomizedtesting.LifecycleScope;",
      "56: import io.crate.testing.Asserts;",
      "57: import io.crate.testing.SQLResponse;",
      "58: import io.crate.testing.UseJdbc;",
      "59: import io.crate.testing.UseNewCluster;",
      "61: @IntegTestCase.ClusterScope(numDataNodes = 2)",
      "62: public class CopyIntegrationTest extends SQLHttpIntegrationTest {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57: import io.crate.action.sql.Sessions;",
      "58: import io.crate.exceptions.UnauthorizedException;",
      "59: import io.crate.role.Role;",
      "60: import io.crate.role.Roles;",
      "65: import io.crate.testing.UseRandomizedSchema;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1196:             \"2| 31123| apple safari| 23073\"",
      "1197:         );",
      "1198:     }",
      "1199: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1206:     @UseRandomizedSchema(random = false)",
      "1207:     @Test",
      "1208:     public void test_copy_from_local_file_is_only_allowed_for_superusers() {",
      "1209:         execute(\"CREATE TABLE quotes (id INT PRIMARY KEY, \" +",
      "1210:             \"quote STRING INDEX USING FULLTEXT) WITH (number_of_replicas = 0)\");",
      "1211:         execute(\"CREATE USER test_user\");",
      "1212:         execute(\"GRANT ALL TO test_user\");",
      "1214:         var roles = cluster().getInstance(Roles.class);",
      "1215:         Role user = roles.findUser(\"test_user\");",
      "1216:         Sessions sqlOperations = cluster().getInstance(Sessions.class);",
      "1217:         try (var session = sqlOperations.newSession(null, user)) {",
      "1218:             assertThatThrownBy(() -> execute(\"COPY quotes FROM ?\", new Object[]{copyFilePath + \"test_copy_from.json\"}, session))",
      "1219:                 .isExactlyInstanceOf(UnauthorizedException.class)",
      "1220:                 .hasMessage(\"Only a superuser can read from the local file system\");",
      "1221:         }",
      "1222:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f88cb6d52b9e9e08d22ce01b73922851437467cc",
      "candidate_info": {
        "commit_hash": "f88cb6d52b9e9e08d22ce01b73922851437467cc",
        "repo": "crate/crate",
        "commit_url": "https://github.com/crate/crate/commit/f88cb6d52b9e9e08d22ce01b73922851437467cc",
        "files": [
          "server/src/main/java/io/crate/analyze/Analyzer.java",
          "server/src/main/java/io/crate/exceptions/RoleUnknownException.java",
          "server/src/main/java/io/crate/expression/scalar/HasPrivilegeFunction.java",
          "server/src/main/java/io/crate/planner/statement/SetSessionAuthorizationPlan.java",
          "server/src/main/java/io/crate/role/RoleManagerService.java",
          "server/src/main/java/io/crate/role/Roles.java",
          "server/src/test/java/io/crate/analyze/CreateUserMappingAnalyzerTest.java",
          "server/src/test/java/io/crate/expression/scalar/HasDatabasePrivilegeFunctionTest.java",
          "server/src/test/java/io/crate/expression/scalar/HasSchemaPrivilegeFunctionTest.java",
          "server/src/test/java/io/crate/integrationtests/BaseRolesIntegrationTest.java",
          "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java",
          "server/src/test/java/io/crate/integrationtests/ForeignDataWrapperITest.java",
          "server/src/test/java/io/crate/integrationtests/LogicalReplicationITest.java",
          "server/src/test/java/io/crate/integrationtests/PgCatalogITest.java",
          "server/src/test/java/io/crate/planner/statement/SetSessionAuthorizationPlanTest.java",
          "server/src/test/java/io/crate/replication/logical/action/TransportCreateSubscriptionActionTest.java",
          "server/src/testFixtures/java/org/elasticsearch/test/IntegTestCase.java"
        ],
        "message": "Make role not found errors more consistent\n\nThere were a couple of places that raised `IllegalArgumentException`\ninstead of `RoleUnknownException`.",
        "before_after_code_files": [
          "server/src/main/java/io/crate/analyze/Analyzer.java||server/src/main/java/io/crate/analyze/Analyzer.java",
          "server/src/main/java/io/crate/exceptions/RoleUnknownException.java||server/src/main/java/io/crate/exceptions/RoleUnknownException.java",
          "server/src/main/java/io/crate/expression/scalar/HasPrivilegeFunction.java||server/src/main/java/io/crate/expression/scalar/HasPrivilegeFunction.java",
          "server/src/main/java/io/crate/planner/statement/SetSessionAuthorizationPlan.java||server/src/main/java/io/crate/planner/statement/SetSessionAuthorizationPlan.java",
          "server/src/main/java/io/crate/role/RoleManagerService.java||server/src/main/java/io/crate/role/RoleManagerService.java",
          "server/src/main/java/io/crate/role/Roles.java||server/src/main/java/io/crate/role/Roles.java",
          "server/src/test/java/io/crate/analyze/CreateUserMappingAnalyzerTest.java||server/src/test/java/io/crate/analyze/CreateUserMappingAnalyzerTest.java",
          "server/src/test/java/io/crate/expression/scalar/HasDatabasePrivilegeFunctionTest.java||server/src/test/java/io/crate/expression/scalar/HasDatabasePrivilegeFunctionTest.java",
          "server/src/test/java/io/crate/expression/scalar/HasSchemaPrivilegeFunctionTest.java||server/src/test/java/io/crate/expression/scalar/HasSchemaPrivilegeFunctionTest.java",
          "server/src/test/java/io/crate/integrationtests/BaseRolesIntegrationTest.java||server/src/test/java/io/crate/integrationtests/BaseRolesIntegrationTest.java",
          "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java",
          "server/src/test/java/io/crate/integrationtests/ForeignDataWrapperITest.java||server/src/test/java/io/crate/integrationtests/ForeignDataWrapperITest.java",
          "server/src/test/java/io/crate/integrationtests/LogicalReplicationITest.java||server/src/test/java/io/crate/integrationtests/LogicalReplicationITest.java",
          "server/src/test/java/io/crate/integrationtests/PgCatalogITest.java||server/src/test/java/io/crate/integrationtests/PgCatalogITest.java",
          "server/src/test/java/io/crate/planner/statement/SetSessionAuthorizationPlanTest.java||server/src/test/java/io/crate/planner/statement/SetSessionAuthorizationPlanTest.java",
          "server/src/test/java/io/crate/replication/logical/action/TransportCreateSubscriptionActionTest.java||server/src/test/java/io/crate/replication/logical/action/TransportCreateSubscriptionActionTest.java",
          "server/src/testFixtures/java/org/elasticsearch/test/IntegTestCase.java||server/src/testFixtures/java/org/elasticsearch/test/IntegTestCase.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
          ],
          "candidate": [
            "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
          ]
        }
      },
      "candidate_diff": {
        "server/src/main/java/io/crate/analyze/Analyzer.java||server/src/main/java/io/crate/analyze/Analyzer.java": [
          "File: server/src/main/java/io/crate/analyze/Analyzer.java -> server/src/main/java/io/crate/analyze/Analyzer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "788:                 ? context.sessionSettings().userName()",
          "789:                 : createUserMapping.userName();",
          "796:             ExpressionAnalyzer expressionAnalyzer = new ExpressionAnalyzer(",
          "797:                 context.transactionContext(),",
          "798:                 nodeCtx,",
          "",
          "[Removed Lines]",
          "791:             Role user = roleManager.findUser(userName);",
          "792:             if (user == null) {",
          "793:                 throw new IllegalArgumentException(\"Cannot create a user mapping for an unknown user: '\" + userName + \"'\");",
          "794:             }",
          "",
          "[Added Lines]",
          "791:             Role user = roleManager.getUser(userName);",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/exceptions/RoleUnknownException.java||server/src/main/java/io/crate/exceptions/RoleUnknownException.java": [
          "File: server/src/main/java/io/crate/exceptions/RoleUnknownException.java -> server/src/main/java/io/crate/exceptions/RoleUnknownException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:         super(getMessage(Collections.singletonList(roleName)));",
          "32:     }",
          "34:     public RoleUnknownException(List<String> roleNames) {",
          "35:         super(getMessage(roleNames));",
          "36:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:     public RoleUnknownException(int oid) {",
          "35:         super(String.format(Locale.ENGLISH, \"Role with OID %d does not exist\", oid));",
          "36:     }",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/expression/scalar/HasPrivilegeFunction.java||server/src/main/java/io/crate/expression/scalar/HasPrivilegeFunction.java": [
          "File: server/src/main/java/io/crate/expression/scalar/HasPrivilegeFunction.java -> server/src/main/java/io/crate/expression/scalar/HasPrivilegeFunction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import java.util.Collection;",
          "25: import java.util.List;",
          "27: import java.util.function.BiFunction;",
          "28: import java.util.function.Function;",
          "",
          "[Removed Lines]",
          "26: import java.util.Locale;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: import io.crate.common.FourFunction;",
          "33: import io.crate.data.Input;",
          "34: import io.crate.exceptions.MissingPrivilegeException;",
          "35: import io.crate.expression.symbol.Symbol;",
          "36: import io.crate.metadata.NodeContext;",
          "37: import io.crate.metadata.Scalar;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import io.crate.exceptions.RoleUnknownException;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:     private final FourFunction<Roles, Role, Object, Collection<Permission>, Boolean> checkPrivilege;",
          "60:     protected static final BiFunction<Roles, Object, Role> USER_BY_OID = (roles, userOid) -> {",
          "62:         if (user == null) {",
          "64:         }",
          "65:         return user;",
          "66:     };",
          "",
          "[Removed Lines]",
          "52:     protected static final BiFunction<Roles, Object, Role> USER_BY_NAME = (roles, userName) -> {",
          "53:         var user = roles.findUser((String) userName);",
          "54:         if (user == null) {",
          "55:             throw new IllegalArgumentException(String.format(Locale.ENGLISH, \"User %s does not exist\", userName));",
          "56:         }",
          "57:         return user;",
          "58:     };",
          "61:         var user = roles.findUser((Integer) userOid);",
          "63:             throw new IllegalArgumentException(String.format(Locale.ENGLISH, \"User with OID %d does not exist\", userOid));",
          "",
          "[Added Lines]",
          "52:     protected static final BiFunction<Roles, Object, Role> USER_BY_NAME = (roles, userName) -> roles.getUser((String) userName);",
          "55:         int oid = (int) userOid;",
          "56:         var user = roles.findUser(oid);",
          "58:             throw new RoleUnknownException(oid);",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/planner/statement/SetSessionAuthorizationPlan.java||server/src/main/java/io/crate/planner/statement/SetSessionAuthorizationPlan.java": [
          "File: server/src/main/java/io/crate/planner/statement/SetSessionAuthorizationPlan.java -> server/src/main/java/io/crate/planner/statement/SetSessionAuthorizationPlan.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:         String userName = setSessionAuthorization.user();",
          "61:         Role user;",
          "62:         if (userName != null) {",
          "67:         } else {",
          "68:             user = sessionSettings.authenticatedUser();",
          "69:         }",
          "",
          "[Removed Lines]",
          "63:             user = roles.findUser(userName);",
          "64:             if (user == null) {",
          "65:                 throw new IllegalArgumentException(\"User '\" + userName + \"' does not exist.\");",
          "66:             }",
          "",
          "[Added Lines]",
          "63:             user = roles.getUser(userName);",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/role/RoleManagerService.java||server/src/main/java/io/crate/role/RoleManagerService.java": [
          "File: server/src/main/java/io/crate/role/RoleManagerService.java -> server/src/main/java/io/crate/role/RoleManagerService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import java.util.Collection;",
          "25: import java.util.Locale;",
          "26: import java.util.concurrent.CompletableFuture;",
          "29: import org.elasticsearch.cluster.service.ClusterService;",
          "30: import org.elasticsearch.common.inject.Inject;",
          "",
          "[Removed Lines]",
          "27: import java.util.function.Consumer;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: @Singleton",
          "46: public class RoleManagerService implements RoleManager {",
          "49:         if (user != null && user.isSuperUser()) {",
          "50:             throw new UnsupportedOperationException(String.format(",
          "51:                 Locale.ENGLISH, \"Cannot drop a superuser '%s'\", user.name()));",
          "52:         }",
          "56:         if (user != null && user.isSuperUser()) {",
          "57:             throw new UnsupportedOperationException(String.format(",
          "58:                 Locale.ENGLISH, \"Cannot alter privileges for superuser '%s'\", user.name()));",
          "59:         }",
          "62:     private static final RoleManagerDDLModifier DDL_MODIFIER = new RoleManagerDDLModifier();",
          "",
          "[Removed Lines]",
          "48:     private static final Consumer<Role> ENSURE_DROP_ROLE_NOT_SUPERUSER = user -> {",
          "53:     };",
          "55:     private static final Consumer<Role> ENSURE_PRIVILEGE_USER_NOT_SUPERUSER = user -> {",
          "60:     };",
          "",
          "[Added Lines]",
          "47:     private static final void ensureDropRoleTargetIsNotSuperUser(Role user) {",
          "52:     }",
          "54:     private static final void ensureAlterPrivilegeTargetIsNotSuperuser(Role user) {",
          "59:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:     @Override",
          "128:     public CompletableFuture<Long> dropRole(String roleName, boolean suppressNotFoundError) {",
          "130:         return transportDropRoleAction.execute(new DropRoleRequest(roleName, suppressNotFoundError), r -> {",
          "131:             if (r.doesUserExist() == false) {",
          "132:                 if (suppressNotFoundError) {",
          "",
          "[Removed Lines]",
          "129:         ENSURE_DROP_ROLE_NOT_SUPERUSER.accept(roles.findUser(roleName));",
          "",
          "[Added Lines]",
          "129:         ensureDropRoleTargetIsNotSuperUser(roles.findUser(roleName));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "158:     public CompletableFuture<Long> applyPrivileges(Collection<String> roleNames,",
          "159:                                                    Collection<Privilege> privileges,",
          "160:                                                    GrantedRolesChange grantedRolesChange) {",
          "162:         return transportPrivilegesAction.execute(new PrivilegesRequest(roleNames, privileges, grantedRolesChange), r -> {",
          "163:             if (!r.unknownUserNames().isEmpty()) {",
          "164:                 throw new RoleUnknownException(r.unknownUserNames());",
          "",
          "[Removed Lines]",
          "161:         roleNames.forEach(s -> ENSURE_PRIVILEGE_USER_NOT_SUPERUSER.accept(roles.findUser(s)));",
          "",
          "[Added Lines]",
          "161:         roleNames.forEach(s -> ensureAlterPrivilegeTargetIsNotSuperuser(roles.findUser(s)));",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/role/Roles.java||server/src/main/java/io/crate/role/Roles.java": [
          "File: server/src/main/java/io/crate/role/Roles.java -> server/src/main/java/io/crate/role/Roles.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: import org.jetbrains.annotations.Nullable;",
          "35: import io.crate.common.FourFunction;",
          "36: import io.crate.metadata.pgcatalog.OidHash;",
          "38: public interface Roles {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: import io.crate.exceptions.RoleUnknownException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:         return null;",
          "63:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:     default Role getUser(String userName) {",
          "70:         Role user = findUser(userName);",
          "71:         if (user == null) {",
          "72:             throw new RoleUnknownException(userName);",
          "73:         }",
          "74:         return user;",
          "75:     }",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/analyze/CreateUserMappingAnalyzerTest.java||server/src/test/java/io/crate/analyze/CreateUserMappingAnalyzerTest.java": [
          "File: server/src/test/java/io/crate/analyze/CreateUserMappingAnalyzerTest.java -> server/src/test/java/io/crate/analyze/CreateUserMappingAnalyzerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.junit.Test;",
          "28: import io.crate.test.integration.CrateDummyClusterServiceUnitTest;",
          "29: import io.crate.testing.SQLExecutor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import io.crate.exceptions.RoleUnknownException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:             .builder(clusterService)",
          "37:             .build();",
          "38:         assertThatThrownBy(() -> e.analyze(\"CREATE USER MAPPING FOR user1 SERVER pg\"))",
          "41:     }",
          "42: }",
          "",
          "[Removed Lines]",
          "39:             .isExactlyInstanceOf(IllegalArgumentException.class)",
          "40:             .hasMessage(\"Cannot create a user mapping for an unknown user: 'user1'\");",
          "",
          "[Added Lines]",
          "40:             .isExactlyInstanceOf(RoleUnknownException.class)",
          "41:             .hasMessage(\"Role 'user1' does not exist\");",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/expression/scalar/HasDatabasePrivilegeFunctionTest.java||server/src/test/java/io/crate/expression/scalar/HasDatabasePrivilegeFunctionTest.java": [
          "File: server/src/test/java/io/crate/expression/scalar/HasDatabasePrivilegeFunctionTest.java -> server/src/test/java/io/crate/expression/scalar/HasDatabasePrivilegeFunctionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: import io.crate.Constants;",
          "34: import io.crate.exceptions.MissingPrivilegeException;",
          "35: import io.crate.metadata.pgcatalog.OidHash;",
          "36: import io.crate.role.Permission;",
          "37: import io.crate.role.Policy;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import io.crate.exceptions.RoleUnknownException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     public void test_throws_error_when_user_is_not_found() {",
          "94:         assertThatThrownBy(",
          "95:             () -> assertEvaluate(\"has_database_privilege('not_existing_user', 'crate', ' CONNECT')\", null))",
          "98:     }",
          "100:     @Test",
          "",
          "[Removed Lines]",
          "96:             .isExactlyInstanceOf(IllegalArgumentException.class)",
          "97:             .hasMessage(\"User not_existing_user does not exist\");",
          "",
          "[Added Lines]",
          "97:             .isExactlyInstanceOf(RoleUnknownException.class)",
          "98:             .hasMessage(\"Role 'not_existing_user' does not exist\");",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/expression/scalar/HasSchemaPrivilegeFunctionTest.java||server/src/test/java/io/crate/expression/scalar/HasSchemaPrivilegeFunctionTest.java": [
          "File: server/src/test/java/io/crate/expression/scalar/HasSchemaPrivilegeFunctionTest.java -> server/src/test/java/io/crate/expression/scalar/HasSchemaPrivilegeFunctionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import org.junit.Test;",
          "33: import io.crate.exceptions.MissingPrivilegeException;",
          "34: import io.crate.metadata.information.InformationSchemaInfo;",
          "35: import io.crate.metadata.pgcatalog.OidHash;",
          "36: import io.crate.metadata.pgcatalog.PgCatalogSchemaInfo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import io.crate.exceptions.RoleUnknownException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:     public void test_throws_error_when_user_is_not_found() {",
          "90:         assertThatThrownBy(",
          "91:             () -> assertEvaluate(\"has_schema_privilege('not_existing_user', 'pg_catalog', ' USAGE')\", null))",
          "94:     }",
          "96:     @Test",
          "",
          "[Removed Lines]",
          "92:             .isExactlyInstanceOf(IllegalArgumentException.class)",
          "93:             .hasMessage(\"User not_existing_user does not exist\");",
          "",
          "[Added Lines]",
          "93:             .isExactlyInstanceOf(RoleUnknownException.class)",
          "94:             .hasMessage(\"Role 'not_existing_user' does not exist\");",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/BaseRolesIntegrationTest.java||server/src/test/java/io/crate/integrationtests/BaseRolesIntegrationTest.java": [
          "File: server/src/test/java/io/crate/integrationtests/BaseRolesIntegrationTest.java -> server/src/test/java/io/crate/integrationtests/BaseRolesIntegrationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import static io.crate.testing.Asserts.assertThat;",
          "28: import org.elasticsearch.test.IntegTestCase;",
          "29: import org.junit.After;",
          "30: import org.junit.Before;",
          "",
          "[Removed Lines]",
          "26: import java.util.Objects;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:     public SQLResponse executeAs(String stmt, String userName) {",
          "95:         Sessions sqlOperations = cluster().getInstance(Sessions.class);",
          "96:         Roles roles = cluster().getInstance(Roles.class);",
          "98:         try (Session session = sqlOperations.newSession(null, user)) {",
          "99:             return execute(stmt, null, session);",
          "100:         }",
          "",
          "[Removed Lines]",
          "97:         Role user = Objects.requireNonNull(roles.findUser(userName), \"User \" + userName + \" must exist\");",
          "",
          "[Added Lines]",
          "95:         Role user = roles.getUser(userName);",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java": [
          "File: server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java -> server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import static io.crate.testing.Asserts.assertThat;",
          "27: import static io.crate.testing.TestingHelpers.printedTable;",
          "28: import static io.netty.handler.codec.http.HttpResponseStatus.BAD_REQUEST;",
          "29: import static org.assertj.core.api.Assertions.assertThatThrownBy;",
          "31: import java.io.File;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import static org.assertj.core.api.Assertions.assertThat;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1213:         execute(\"GRANT ALL TO test_user\");",
          "1215:         var roles = cluster().getInstance(Roles.class);",
          "1217:         Sessions sqlOperations = cluster().getInstance(Sessions.class);",
          "1218:         try (var session = sqlOperations.newSession(null, user)) {",
          "1219:             assertThatThrownBy(() -> execute(\"COPY quotes FROM ?\", new Object[]{copyFilePath + \"test_copy_from.json\"}, session))",
          "",
          "[Removed Lines]",
          "1216:         Role user = roles.findUser(\"test_user\");",
          "",
          "[Added Lines]",
          "1217:         Role user = roles.getUser(\"test_user\");",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/ForeignDataWrapperITest.java||server/src/test/java/io/crate/integrationtests/ForeignDataWrapperITest.java": [
          "File: server/src/test/java/io/crate/integrationtests/ForeignDataWrapperITest.java -> server/src/test/java/io/crate/integrationtests/ForeignDataWrapperITest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:         );",
          "156:         var roles = cluster().getInstance(Roles.class);",
          "158:         response = sqlExecutor.executeAs(\"select * from doc.dummy order by x asc\", trillian);",
          "159:         assertThat(response).hasRows(",
          "160:             \"1| 1\",",
          "",
          "[Removed Lines]",
          "157:         Role trillian = roles.findUser(\"trillian\");",
          "",
          "[Added Lines]",
          "157:         Role trillian = roles.getUser(\"trillian\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "343:         execute(\"grant al to arthur\");",
          "345:         var roles = cluster().getInstance(Roles.class);",
          "347:         sqlExecutor.executeAs(\"\"\"",
          "348:             CREATE SERVER pg",
          "349:             FOREIGN DATA WRAPPER jdbc",
          "",
          "[Removed Lines]",
          "346:         Role trillian = roles.findUser(\"trillian\");",
          "",
          "[Added Lines]",
          "346:         Role trillian = roles.getUser(\"trillian\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "368:         response = sqlExecutor.executeAs(\"select * from information_schema.user_mapping_options where option_name = 'password'\",",
          "370:         assertThat(response).hasRows(\"trillian| crate| pg| password| NULL\");",
          "",
          "[Removed Lines]",
          "369:             roles.findUser(\"arthur\"));",
          "",
          "[Added Lines]",
          "369:             roles.getUser(\"arthur\"));",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/LogicalReplicationITest.java||server/src/test/java/io/crate/integrationtests/LogicalReplicationITest.java": [
          "File: server/src/test/java/io/crate/integrationtests/LogicalReplicationITest.java -> server/src/test/java/io/crate/integrationtests/LogicalReplicationITest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.integrationtests;",
          "24: import static io.crate.testing.Asserts.assertThat;",
          "25: import static org.assertj.core.api.Assertions.assertThatThrownBy;",
          "26: import static org.junit.Assert.assertFalse;",
          "27: import static org.junit.Assert.assertThrows;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import static org.assertj.core.api.Assertions.assertThat;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: import java.util.ArrayList;",
          "31: import java.util.List;",
          "32: import java.util.Locale;",
          "34: import java.util.concurrent.TimeUnit;",
          "35: import java.util.concurrent.atomic.AtomicBoolean;",
          "36: import java.util.concurrent.atomic.AtomicLong;",
          "",
          "[Removed Lines]",
          "33: import java.util.Objects;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47: import io.crate.replication.logical.exceptions.PublicationUnknownException;",
          "48: import io.crate.replication.logical.metadata.Subscription;",
          "49: import io.crate.replication.logical.metadata.SubscriptionsMetadata;",
          "51: import io.crate.role.Role;",
          "52: import io.crate.role.Roles;",
          "55: @UseRandomizedSchema(random = false)",
          "",
          "[Removed Lines]",
          "50: import io.crate.testing.UseRandomizedSchema;",
          "",
          "[Added Lines]",
          "52: import io.crate.testing.UseRandomizedSchema;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "64:         executeOnPublisher(\"GRANT AL TO \" + publicationOwner);",
          "65:         executeOnPublisher(\"GRANT DQL, DML, DDL ON TABLE doc.t1 TO \" + publicationOwner);",
          "66:         Roles roles = publisherCluster.getInstance(Roles.class);",
          "69:         executeOnPublisher(\"DROP USER \" + publicationOwner);",
          "70:         assertThatThrownBy(() -> executeOnPublisherAsUser(\"CREATE PUBLICATION pub1 FOR TABLE doc.t1\", user))",
          "",
          "[Removed Lines]",
          "67:         Role user = Objects.requireNonNull(roles.findUser(publicationOwner), \"User \" + publicationOwner + \" must exist\");",
          "",
          "[Added Lines]",
          "67:         Role user = roles.getUser(publicationOwner);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "84:         executeOnSubscriber(\"GRANT AL TO \" + subscriptionOwner);",
          "86:         Roles roles = subscriberCluster.getInstance(Roles.class);",
          "89:         executeOnSubscriber(\"DROP USER \" + subscriptionOwner);",
          "90:         assertThatThrownBy(() -> createSubscriptionAsUser(\"sub1\", \"pub1\", user))",
          "",
          "[Removed Lines]",
          "87:         Role user = Objects.requireNonNull(roles.findUser(subscriptionOwner), \"User \" + subscriptionOwner + \" must exist\");",
          "",
          "[Added Lines]",
          "87:         Role user = roles.getUser(subscriptionOwner);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "103:         executeOnPublisher(\"GRANT DQL, DML, DDL ON TABLE doc.t1 TO \" + publicationOwner);",
          "105:         Roles roles = publisherCluster.getInstance(Roles.class);",
          "107:         executeOnPublisherAsUser(\"CREATE PUBLICATION pub1 FOR TABLE doc.t1\", user);",
          "109:         assertThatThrownBy(() -> executeOnPublisher(\"DROP USER \" + publicationOwner))",
          "",
          "[Removed Lines]",
          "106:         Role user = Objects.requireNonNull(roles.findUser(publicationOwner), \"User \" + publicationOwner + \" must exist\");",
          "",
          "[Added Lines]",
          "106:         Role user = roles.getUser(publicationOwner);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "122:         executeOnSubscriber(\"GRANT AL TO \" + subscriptionOwner);",
          "124:         Roles roles = subscriberCluster.getInstance(Roles.class);",
          "126:         createSubscriptionAsUser(\"sub1\", \"pub1\", user);",
          "128:         assertThatThrownBy(() -> executeOnSubscriber(\"DROP USER \" + subscriptionOwner))",
          "",
          "[Removed Lines]",
          "125:         Role user = Objects.requireNonNull(roles.findUser(subscriptionOwner), \"User \" + subscriptionOwner + \" must exist\");",
          "",
          "[Added Lines]",
          "125:         Role user = roles.getUser(subscriptionOwner);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "141:         executeOnSubscriber(\"GRANT AL TO \" + subscriptionOwner);",
          "143:         Roles roles = subscriberCluster.getInstance(Roles.class);",
          "145:         var stmt = String.format(Locale.ENGLISH, \"CREATE SUBSCRIPTION sub1 CONNECTION 'crate://localhost:12345/mydb?user=%s&mode=pg_tunnel'\" +",
          "146:                                                  \" publication pub1\", user.name());",
          "147:         assertThatThrownBy(() -> subscriberSqlExecutor.executeAs(stmt, user))",
          "",
          "[Removed Lines]",
          "144:         Role user = Objects.requireNonNull(roles.findUser(subscriptionOwner), \"User \" + subscriptionOwner + \" must exist\");",
          "",
          "[Added Lines]",
          "144:         Role user = roles.getUser(subscriptionOwner);",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/PgCatalogITest.java||server/src/test/java/io/crate/integrationtests/PgCatalogITest.java": [
          "File: server/src/test/java/io/crate/integrationtests/PgCatalogITest.java -> server/src/test/java/io/crate/integrationtests/PgCatalogITest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.integrationtests;",
          "24: import static io.crate.testing.Asserts.assertThat;",
          "26: import java.util.ArrayList;",
          "27: import java.util.Arrays;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import static org.assertj.core.api.Assertions.assertThat;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:         Roles roles = cluster().getInstance(Roles.class);",
          "123:         Sessions sessions = cluster().getInstance(Sessions.class);",
          "125:             execute(\"select nspname from pg_catalog.pg_namespace order by nspname\", session);",
          "127:             assertThat(response).hasRows(",
          "",
          "[Removed Lines]",
          "124:         try (var session = sessions.newSession(\"doc\", roles.findUser(\"hoschi\"))) {",
          "",
          "[Added Lines]",
          "125:         try (var session = sessions.newSession(\"doc\", roles.getUser(\"hoschi\"))) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "134:         execute(\"create view vip.v1 as select 1\");",
          "135:         execute(\"grant dql on view vip.v1 to hoschi\");",
          "137:             execute(\"select nspname from pg_catalog.pg_namespace order by nspname\", session);",
          "138:             assertThat(response).hasRows(",
          "139:                 \"doc\",",
          "",
          "[Removed Lines]",
          "136:         try (var session = sessions.newSession(\"doc\", roles.findUser(\"hoschi\"))) {",
          "",
          "[Added Lines]",
          "137:         try (var session = sessions.newSession(\"doc\", roles.getUser(\"hoschi\"))) {",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/planner/statement/SetSessionAuthorizationPlanTest.java||server/src/test/java/io/crate/planner/statement/SetSessionAuthorizationPlanTest.java": [
          "File: server/src/test/java/io/crate/planner/statement/SetSessionAuthorizationPlanTest.java -> server/src/test/java/io/crate/planner/statement/SetSessionAuthorizationPlanTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import org.junit.Test;",
          "31: import io.crate.planner.NoopPlan;",
          "32: import io.crate.planner.Plan;",
          "33: import io.crate.role.Role;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import io.crate.exceptions.RoleUnknownException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:         var e = SQLExecutor.builder(clusterService).build();",
          "78:         Plan plan = e.plan(\"SET SESSION AUTHORIZATION 'unknown_user'\");",
          "79:         assertThatThrownBy(() -> e.execute(plan).getResult())",
          "82:     }",
          "83: }",
          "",
          "[Removed Lines]",
          "80:             .isExactlyInstanceOf(IllegalArgumentException.class)",
          "81:             .hasMessage(\"User 'unknown_user' does not exist.\");",
          "",
          "[Added Lines]",
          "81:             .isExactlyInstanceOf(RoleUnknownException.class)",
          "82:             .hasMessage(\"Role 'unknown_user' does not exist\");",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/replication/logical/action/TransportCreateSubscriptionActionTest.java||server/src/test/java/io/crate/replication/logical/action/TransportCreateSubscriptionActionTest.java": [
          "File: server/src/test/java/io/crate/replication/logical/action/TransportCreateSubscriptionActionTest.java -> server/src/test/java/io/crate/replication/logical/action/TransportCreateSubscriptionActionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: import io.crate.replication.logical.LogicalReplicationService;",
          "55: import io.crate.replication.logical.metadata.ConnectionInfo;",
          "56: import io.crate.replication.logical.metadata.RelationMetadata;",
          "59: import io.crate.role.Roles;",
          "61: public class TransportCreateSubscriptionActionTest {",
          "63:     private final LogicalReplicationService logicalReplicationService = mock(LogicalReplicationService.class);",
          "65:     private final ClusterService clusterService = mock(ClusterService.class);",
          "66:     private TransportCreateSubscriptionAction transportCreateSubscriptionAction;",
          "",
          "[Removed Lines]",
          "57: import io.crate.sql.tree.QualifiedName;",
          "58: import io.crate.role.Role;",
          "64:     private final Roles roles = mock(Roles.class);",
          "",
          "[Added Lines]",
          "58: import io.crate.role.StubRoleManager;",
          "59: import io.crate.sql.tree.QualifiedName;",
          "64:     private final Roles roles = new StubRoleManager();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:             roles",
          "96:         );",
          "100:         final DiscoveryNode dataNode = new DiscoveryNode(",
          "101:             \"node\",",
          "102:             buildNewFakeTransportAddress(),",
          "",
          "[Removed Lines]",
          "98:         when(roles.findUser(anyString())).thenReturn(Role.CRATE_USER);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140:         transportCreateSubscriptionAction.masterOperation(",
          "141:             new CreateSubscriptionRequest(",
          "143:                 \"dummy\",",
          "144:                 new ConnectionInfo(List.of(), Settings.EMPTY),",
          "145:                 List.of(),",
          "",
          "[Removed Lines]",
          "142:                 \"dummy\",",
          "",
          "[Added Lines]",
          "140:                 \"crate\",",
          "",
          "---------------"
        ],
        "server/src/testFixtures/java/org/elasticsearch/test/IntegTestCase.java||server/src/testFixtures/java/org/elasticsearch/test/IntegTestCase.java": [
          "File: server/src/testFixtures/java/org/elasticsearch/test/IntegTestCase.java -> server/src/testFixtures/java/org/elasticsearch/test/IntegTestCase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1682:     public SQLResponse systemExecute(String stmt, @Nullable String schema, String node) {",
          "1683:         Sessions sqlOperations = cluster().getInstance(Sessions.class, node);",
          "1684:         Roles roles = cluster().getInstance(Roles.class, node);",
          "1686:             response = sqlExecutor.exec(stmt, session);",
          "1687:         }",
          "1688:         return response;",
          "",
          "[Removed Lines]",
          "1685:         try (Session session = sqlOperations.newSession(schema, roles.findUser(\"crate\"))) {",
          "",
          "[Added Lines]",
          "1685:         try (Session session = sqlOperations.newSession(schema, roles.getUser(\"crate\"))) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee4adb63eecd9b4395591500ee49f5982912f9bf",
      "candidate_info": {
        "commit_hash": "ee4adb63eecd9b4395591500ee49f5982912f9bf",
        "repo": "crate/crate",
        "commit_url": "https://github.com/crate/crate/commit/ee4adb63eecd9b4395591500ee49f5982912f9bf",
        "files": [
          "benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java",
          "benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java",
          "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
          "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
          "server/src/main/java/io/crate/execution/engine/collect/files/LineParser.java",
          "server/src/main/java/io/crate/execution/engine/collect/files/LineProcessor.java",
          "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
          "server/src/main/java/io/crate/expression/reference/file/LineContext.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/LineParserTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/LineProcessorTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
          "server/src/test/java/io/crate/expression/reference/file/LineContextTest.java",
          "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
        ],
        "message": "Move line parsing out of FileReadingIterator\n\nThe `FileReadingIterator` was not only reading lines from URIs, but also\nparsing the contents via `InputRow` and a list of `LineCollectorExpression`\n\nBecause of the `LineCollectorExpression` it had very tight coupling with:\n\n- LineProcessor\n- LineParser\n- LineContext\n\nThis moves the parsing functionality out of the `FileReadingIterator`\ninto the `LineProcessor` for more loose coupling.\n\nThe `LineProcessor` is now itself a `BatchIterator<Row>`, using a\n`BatchIterator<LineCursor>` as source and merging parts of `LineParser`\ninto it. Neither of these components could be used meaningful in a\nstandalone way.\n\nNote that this is just an intermediate step. The `LineProcessor` as it\nis in this PR probably won't survive. To get rid of the `_raw` import\nmechanism I plan to merge it somewhat with the `IndexWriterProjector`.\n\nThis also deletes some benchmarks. I plan to re-add new one's once the\nfull picture is in place",
        "before_after_code_files": [
          "benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java||benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java",
          "benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java||benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java",
          "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
          "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
          "server/src/main/java/io/crate/execution/engine/collect/files/LineParser.java||server/src/main/java/io/crate/execution/engine/collect/files/LineParser.java",
          "server/src/main/java/io/crate/execution/engine/collect/files/LineProcessor.java||server/src/main/java/io/crate/execution/engine/collect/files/LineProcessor.java",
          "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
          "server/src/main/java/io/crate/expression/reference/file/LineContext.java||server/src/main/java/io/crate/expression/reference/file/LineContext.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/LineParserTest.java||server/src/test/java/io/crate/execution/engine/collect/files/LineParserTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/files/LineProcessorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/LineProcessorTest.java",
          "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java||server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
          "server/src/test/java/io/crate/expression/reference/file/LineContextTest.java||server/src/test/java/io/crate/expression/reference/file/LineContextTest.java",
          "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
            "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
            "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java||server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
            "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
          ],
          "candidate": [
            "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
            "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
            "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
            "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java||server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
            "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
          ]
        }
      },
      "candidate_diff": {
        "benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java||benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java": [
          "File: benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java -> benchmarks/src/main/java/io/crate/execution/engine/reader/CsvReaderBenchmark.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java||benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java": [
          "File: benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java -> benchmarks/src/main/java/io/crate/execution/engine/reader/JsonReaderBenchmark.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java": [
          "File: plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java -> plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.copy.s3;",
          "25: import static org.assertj.core.api.Assertions.assertThat;",
          "26: import static org.mockito.ArgumentMatchers.any;",
          "28: import static org.mockito.ArgumentMatchers.anyString;",
          "29: import static org.mockito.Mockito.mock;",
          "30: import static org.mockito.Mockito.when;",
          "32: import java.net.SocketTimeoutException;",
          "34: import java.util.Arrays;",
          "35: import java.util.Collections;",
          "36: import java.util.List;",
          "",
          "[Removed Lines]",
          "24: import static io.crate.testing.TestingHelpers.createReference;",
          "27: import static org.mockito.ArgumentMatchers.anyInt;",
          "33: import java.util.ArrayList;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: import org.elasticsearch.threadpool.TestThreadPool;",
          "43: import org.elasticsearch.threadpool.ThreadPool;",
          "44: import org.junit.AfterClass;",
          "46: import org.junit.BeforeClass;",
          "47: import org.junit.Test;",
          "48: import org.mockito.invocation.InvocationOnMock;",
          "49: import org.mockito.stubbing.Answer;",
          "",
          "[Removed Lines]",
          "45: import org.junit.Before;",
          "",
          "[Added Lines]",
          "44: import org.mockito.Mockito;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55: import com.amazonaws.services.s3.model.S3ObjectInputStream;",
          "56: import com.amazonaws.services.s3.model.S3ObjectSummary;",
          "59: import io.crate.copy.s3.common.S3ClientHelper;",
          "60: import io.crate.data.BatchIterator;",
          "66: import io.crate.execution.engine.collect.files.FileReadingIterator;",
          "79: public class S3FileReadingCollectorTest extends ESTestCase {",
          "80:     private static ThreadPool THREAD_POOL;",
          "84:     @BeforeClass",
          "85:     public static void setUpClass() throws Exception {",
          "86:         THREAD_POOL = new TestThreadPool(Thread.currentThread().getName());",
          "87:     }",
          "95:     @AfterClass",
          "96:     public static void tearDownClass() {",
          "",
          "[Removed Lines]",
          "58: import io.crate.analyze.CopyFromParserProperties;",
          "61: import io.crate.data.Bucket;",
          "62: import io.crate.data.Input;",
          "63: import io.crate.data.Row;",
          "64: import io.crate.data.testing.TestingRowConsumer;",
          "65: import io.crate.execution.dsl.phases.FileUriCollectPhase;",
          "67: import io.crate.execution.engine.collect.files.LineCollectorExpression;",
          "68: import io.crate.expression.InputFactory;",
          "69: import io.crate.expression.reference.file.FileLineReferenceResolver;",
          "70: import io.crate.expression.reference.file.SourceLineExpression;",
          "71: import io.crate.metadata.CoordinatorTxnCtx;",
          "72: import io.crate.metadata.Functions;",
          "73: import io.crate.metadata.NodeContext;",
          "74: import io.crate.metadata.Reference;",
          "75: import io.crate.metadata.TransactionContext;",
          "76: import io.crate.testing.TestingHelpers;",
          "77: import io.crate.types.DataTypes;",
          "81:     private InputFactory inputFactory;",
          "82:     private final TransactionContext TXN_CTX = CoordinatorTxnCtx.systemTransactionContext();",
          "89:     @Before",
          "90:     public void prepare() {",
          "91:         NodeContext nodeCtx = new NodeContext(new Functions(Map.of()), null);",
          "92:         inputFactory = new InputFactory(nodeCtx);",
          "93:     }",
          "",
          "[Added Lines]",
          "58: import io.crate.execution.engine.collect.files.FileReadingIterator.LineCursor;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "101:     public void testCollectFromS3Uri() throws Throwable {",
          "105:         S3ObjectInputStream inputStream = mock(S3ObjectInputStream.class);",
          "109:     }",
          "111:     @Test",
          "112:     public void testCollectWithOneSocketTimeout() throws Throwable {",
          "113:         S3ObjectInputStream inputStream = mock(S3ObjectInputStream.class);",
          "116:             .thenAnswer(new WriteBufferAnswer(new byte[]{102, 111, 111, 10}))  // first line: foo",
          "117:             .thenThrow(new SocketTimeoutException())  // exception causes retry",
          "118:             .thenAnswer(new WriteBufferAnswer(new byte[]{102, 111, 111, 10}))  // first line again, because of retry",
          "119:             .thenAnswer(new WriteBufferAnswer(new byte[]{98, 97, 114, 10}))  // second line: bar",
          "120:             .thenReturn(-1);",
          "126:     }",
          "141:         String compression = null;",
          "142:         return new FileReadingIterator(",
          "143:             Arrays.asList(fileUris),",
          "146:             compression,",
          "147:             Map.of(",
          "148:                 S3FileInputFactory.NAME,",
          "",
          "[Removed Lines]",
          "106:         when(inputStream.read(any(byte[].class), anyInt(), anyInt())).thenReturn(-1);",
          "107:         TestingRowConsumer projector = getObjects(inputStream, \"s3://fakebucket/foo\");",
          "108:         projector.getResult();",
          "115:         when(inputStream.read(any(byte[].class), anyInt(), anyInt()))",
          "122:         TestingRowConsumer consumer = getObjects(inputStream, \"s3://fakebucket/foo\");",
          "123:         Bucket rows = consumer.getBucket();",
          "124:         assertThat(rows).hasSize(2);",
          "125:         assertThat(TestingHelpers.printedTable(rows)).isEqualTo(\"foo\\nbar\\n\");",
          "128:     private TestingRowConsumer getObjects(S3ObjectInputStream inputStream, String ... fileUris) {",
          "129:         TestingRowConsumer consumer = new TestingRowConsumer();",
          "130:         BatchIterator<Row> iterator = createBatchIterator(inputStream, fileUris);",
          "131:         consumer.accept(iterator, null);",
          "132:         return consumer;",
          "133:     }",
          "135:     private BatchIterator<Row> createBatchIterator(S3ObjectInputStream inputStream, String ... fileUris) {",
          "136:         InputFactory.Context<LineCollectorExpression<?>> ctx =",
          "137:             inputFactory.ctxForRefs(TXN_CTX, FileLineReferenceResolver::getImplementation);",
          "138:         List<Input<?>> inputs = new ArrayList<>(2);",
          "139:         Reference raw = createReference(SourceLineExpression.COLUMN_NAME, DataTypes.STRING);",
          "140:         inputs.add(ctx.add(raw));",
          "144:             inputs,",
          "145:             ctx.expressions(),",
          "",
          "[Added Lines]",
          "79:         when(inputStream.read(any(byte[].class), Mockito.anyInt(), Mockito.anyInt())).thenReturn(-1);",
          "81:         FileReadingIterator it = createBatchIterator(inputStream, \"s3://fakebucket/foo\");",
          "82:         assertThat(it.moveNext()).isFalse();",
          "89:         when(inputStream.read(any(byte[].class), Mockito.anyInt(), Mockito.anyInt()))",
          "96:         FileReadingIterator it = createBatchIterator(inputStream, \"s3://fakebucket/foo\");",
          "97:         BatchIterator<LineCursor> immutableLines = it.map(LineCursor::copy);",
          "98:         List<LineCursor> lines = immutableLines.toList().get(5, TimeUnit.SECONDS);",
          "99:         assertThat(lines).satisfiesExactly(",
          "100:             line1 -> assertThat(line1.line()).isEqualTo(\"foo\"),",
          "101:             line1 -> assertThat(line1.line()).isEqualTo(\"bar\")",
          "102:         );",
          "106:     private FileReadingIterator createBatchIterator(S3ObjectInputStream inputStream, String ... fileUris) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "166:             false,",
          "167:             1,",
          "168:             0,",
          "172:             Settings.EMPTY,",
          "173:             THREAD_POOL.scheduler());",
          "174:     }",
          "",
          "[Removed Lines]",
          "169:             List.of(\"id\", \"name\", \"details\"),",
          "170:             CopyFromParserProperties.DEFAULT,",
          "171:             FileUriCollectPhase.InputFormat.JSON,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java": [
          "File: server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java -> server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: import org.jetbrains.annotations.NotNull;",
          "51: import org.jetbrains.annotations.Nullable;",
          "54: import io.crate.common.annotations.VisibleForTesting;",
          "55: import io.crate.common.exceptions.Exceptions;",
          "56: import io.crate.common.unit.TimeValue;",
          "57: import io.crate.data.BatchIterator;",
          "65:     private static final Logger LOGGER = LogManager.getLogger(FileReadingIterator.class);",
          "66:     @VisibleForTesting",
          "67:     static final int MAX_SOCKET_TIMEOUT_RETRIES = 5;",
          "69:     private final Map<String, FileInputFactory> fileInputFactories;",
          "70:     private final Boolean shared;",
          "71:     private final int numReaders;",
          "72:     private final int readerNumber;",
          "73:     private final boolean compressed;",
          "75:     private final List<FileInput> fileInputs;",
          "79:     private volatile Throwable killed;",
          "83:     private Iterator<FileInput> fileInputsIterator = null;",
          "84:     private FileInput currentInput = null;",
          "85:     private Iterator<URI> currentInputUriIterator = null;",
          "87:     private BufferedReader currentReader = null;",
          "89:     @VisibleForTesting",
          "90:     long watermark;",
          "93:     private final ScheduledExecutorService scheduler;",
          "94:     private final Iterator<TimeValue> backOffPolicy;",
          "96:     public FileReadingIterator(Collection<String> fileUris,",
          "99:                                String compression,",
          "100:                                Map<String, FileInputFactory> fileInputFactories,",
          "101:                                Boolean shared,",
          "102:                                int numReaders,",
          "103:                                int readerNumber,",
          "107:                                Settings withClauseOptions,",
          "108:                                ScheduledExecutorService scheduler) {",
          "109:         this.compressed = compression != null && compression.equalsIgnoreCase(\"gzip\");",
          "111:         this.fileInputFactories = fileInputFactories;",
          "112:         this.shared = shared;",
          "113:         this.numReaders = numReaders;",
          "114:         this.readerNumber = readerNumber;",
          "121:         this.scheduler = scheduler;",
          "122:         this.backOffPolicy = BackoffPolicy.exponentialBackoff(TimeValue.ZERO, MAX_SOCKET_TIMEOUT_RETRIES).iterator();",
          "123:     }",
          "125:     @Override",
          "128:     }",
          "130:     @Override",
          "",
          "[Removed Lines]",
          "53: import io.crate.analyze.CopyFromParserProperties;",
          "58: import io.crate.data.Input;",
          "59: import io.crate.data.Row;",
          "60: import io.crate.execution.dsl.phases.FileUriCollectPhase;",
          "61: import io.crate.expression.InputRow;",
          "63: public class FileReadingIterator implements BatchIterator<Row> {",
          "74:     private static final Predicate<URI> MATCH_ALL_PREDICATE = (URI input) -> true;",
          "77:     private final Iterable<LineCollectorExpression<?>> collectorExpressions;",
          "80:     private final List<String> targetColumns;",
          "81:     private final CopyFromParserProperties parserProperties;",
          "82:     private final FileUriCollectPhase.InputFormat inputFormat;",
          "86:     private URI currentUri;",
          "88:     private long currentLineNumber;",
          "91:     private final Row row;",
          "92:     private LineProcessor lineProcessor;",
          "97:                                List<? extends Input<?>> inputs,",
          "98:                                Iterable<LineCollectorExpression<?>> collectorExpressions,",
          "104:                                List<String> targetColumns,",
          "105:                                CopyFromParserProperties parserProperties,",
          "106:                                FileUriCollectPhase.InputFormat inputFormat,",
          "110:         this.row = new InputRow(inputs);",
          "115:         this.fileInputs = fileUris.stream().map(uri -> toFileInput(uri, withClauseOptions)).filter(Objects::nonNull).toList();",
          "116:         this.collectorExpressions = collectorExpressions;",
          "117:         this.targetColumns = targetColumns;",
          "118:         this.parserProperties = parserProperties;",
          "119:         this.inputFormat = inputFormat;",
          "120:         initCollectorState();",
          "126:     public Row currentElement() {",
          "127:         return row;",
          "",
          "[Added Lines]",
          "81: public class FileReadingIterator implements BatchIterator<FileReadingIterator.LineCursor> {",
          "87:     private static final Predicate<URI> MATCH_ALL_PREDICATE = (URI input) -> true;",
          "106:     private final LineCursor cursor;",
          "110:     public static class LineCursor {",
          "111:         private URI uri;",
          "112:         private long lineNumber;",
          "113:         private String line;",
          "114:         private IOException failure;",
          "116:         public LineCursor() {",
          "117:         }",
          "119:         public LineCursor(URI uri, long lineNumber, @Nullable String line, @Nullable IOException failure) {",
          "120:             this.uri = uri;",
          "121:             this.lineNumber = lineNumber;",
          "122:             this.line = line;",
          "123:             this.failure = failure;",
          "124:         }",
          "126:         public URI uri() {",
          "127:             return uri;",
          "128:         }",
          "130:         public long lineNumber() {",
          "131:             return lineNumber;",
          "132:         }",
          "134:         @Nullable",
          "135:         public String line() {",
          "136:             return line;",
          "137:         }",
          "139:         @Nullable",
          "140:         public IOException failure() {",
          "141:             return failure;",
          "142:         }",
          "144:         @VisibleForTesting",
          "145:         public LineCursor copy() {",
          "146:             return new LineCursor(uri, lineNumber, line, failure);",
          "147:         }",
          "149:         @Override",
          "150:         public String toString() {",
          "151:             return \"LineCursor{\" + uri + \":\" + lineNumber + \":line=\" + line + \", failure=\" + failure + \"}\";",
          "152:         }",
          "154:         @Override",
          "155:         public int hashCode() {",
          "156:             return Objects.hash(uri, lineNumber, line, failure);",
          "157:         }",
          "159:         @Override",
          "160:         public boolean equals(Object obj) {",
          "161:             if (this == obj) {",
          "162:                 return true;",
          "163:             }",
          "164:             if (obj == null) {",
          "165:                 return false;",
          "166:             }",
          "167:             if (getClass() != obj.getClass()) {",
          "168:                 return false;",
          "169:             }",
          "170:             LineCursor other = (LineCursor) obj;",
          "171:             return Objects.equals(uri, other.uri)",
          "172:                 && lineNumber == other.lineNumber",
          "173:                 && Objects.equals(line, other.line)",
          "174:                 && Objects.equals(failure, other.failure);",
          "175:         }",
          "176:     }",
          "188:         this.cursor = new LineCursor();",
          "195:         this.fileInputs = fileUris.stream()",
          "196:             .map(uri -> toFileInput(uri, withClauseOptions))",
          "197:             .filter(Objects::nonNull)",
          "198:             .toList();",
          "199:         fileInputsIterator = fileInputs.iterator();",
          "203:     public LineCursor currentElement() {",
          "204:         return cursor;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:         killed = throwable;",
          "133:     }",
          "141:     @Override",
          "142:     public void moveToStart() {",
          "143:         raiseIfKilled();",
          "145:     }",
          "147:     @Override",
          "",
          "[Removed Lines]",
          "135:     private void initCollectorState() {",
          "136:         lineProcessor = new LineProcessor(parserProperties, targetColumns);",
          "137:         lineProcessor.startCollect(collectorExpressions);",
          "138:         fileInputsIterator = fileInputs.iterator();",
          "139:     }",
          "144:         initCollectorState();",
          "",
          "[Added Lines]",
          "215:         reset();",
          "216:         watermark = 0;",
          "217:         fileInputsIterator = fileInputs.iterator();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "159:                     throw e;",
          "160:                 }",
          "161:                 if (line == null) {",
          "163:                     return moveNext();",
          "164:                 }",
          "166:                 return true;",
          "167:             } else if (currentInputUriIterator != null && currentInputUriIterator.hasNext()) {",
          "168:                 advanceToNextUri(currentInput);",
          "",
          "[Removed Lines]",
          "162:                     closeCurrentReader();",
          "165:                 lineProcessor.process(line);",
          "",
          "[Added Lines]",
          "235:                     closeReader();",
          "238:                 cursor.line = line;",
          "239:                 cursor.failure = null;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "171:                 advanceToNextFileInput();",
          "172:                 return moveNext();",
          "173:             } else {",
          "175:                 return false;",
          "176:             }",
          "177:         } catch (IOException e) {",
          "182:                 return true;",
          "183:             }",
          "184:             return moveNext();",
          "188:         }",
          "189:     }",
          "191:     private void advanceToNextUri(FileInput fileInput) throws IOException {",
          "192:         watermark = 0;",
          "195:     }",
          "197:     private void advanceToNextFileInput() throws IOException {",
          "",
          "[Removed Lines]",
          "174:                 releaseBatchIteratorState();",
          "178:             lineProcessor.setUriFailure(e.getMessage());",
          "179:             closeCurrentReader();",
          "181:             if (currentLineNumber == 0) {",
          "185:         } catch (Exception e) {",
          "186:             lineProcessor.setParsingFailure(e.getMessage());",
          "187:             return true;",
          "193:         currentUri = currentInputUriIterator.next();",
          "194:         initCurrentReader(fileInput, currentUri);",
          "",
          "[Added Lines]",
          "248:                 reset();",
          "252:             cursor.failure = e;",
          "253:             closeReader();",
          "256:             if (cursor.lineNumber == 0) {",
          "265:         createReader(fileInput, currentInputUriIterator.next());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "201:             currentInputUriIterator = uris.iterator();",
          "202:             advanceToNextUri(currentInput);",
          "203:         } else if (currentInput.isGlobbed()) {",
          "206:         }",
          "207:     }",
          "",
          "[Removed Lines]",
          "204:             lineProcessor.startWithUri(currentInput.uri());",
          "205:             throw new IOException(\"Cannot find any URI matching: \" + currentInput.uri().toString());",
          "",
          "[Added Lines]",
          "275:             URI uri = currentInput.uri();",
          "276:             cursor.uri = uri;",
          "277:             throw new IOException(\"Cannot find any URI matching: \" + uri.toString());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "215:         }",
          "216:     }",
          "220:         InputStream stream = fileInput.getStream(uri);",
          "221:         currentReader = createBufferedReader(stream);",
          "224:     }",
          "227:         if (currentReader != null) {",
          "228:             try {",
          "229:                 currentReader.close();",
          "230:             } catch (IOException e) {",
          "232:             }",
          "233:             currentReader = null;",
          "234:         }",
          "",
          "[Removed Lines]",
          "218:     private void initCurrentReader(FileInput fileInput, URI uri) throws IOException {",
          "219:         lineProcessor.startWithUri(uri);",
          "222:         currentLineNumber = 0;",
          "223:         lineProcessor.readFirstLine(currentUri, inputFormat, currentReader);",
          "226:     private void closeCurrentReader() {",
          "231:                 LOGGER.error(\"Unable to close reader for \" + currentUri, e);",
          "",
          "[Added Lines]",
          "290:     private void createReader(FileInput fileInput, URI uri) throws IOException {",
          "291:         cursor.uri = uri;",
          "292:         cursor.lineNumber = 0;",
          "297:     private void closeReader() {",
          "302:                 LOGGER.error(\"Unable to close reader for \" + cursor.uri, e);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "238:         String line = null;",
          "239:         try {",
          "240:             while ((line = reader.readLine()) != null) {",
          "243:                     continue;",
          "244:                 } else {",
          "245:                     watermark = 0;",
          "",
          "[Removed Lines]",
          "241:                 currentLineNumber++;",
          "242:                 if (currentLineNumber < watermark) {",
          "",
          "[Added Lines]",
          "312:                 cursor.lineNumber++;",
          "313:                 if (cursor.lineNumber < watermark) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "251:             }",
          "252:         } catch (SocketException | SocketTimeoutException e) {",
          "253:             if (backOffPolicy.hasNext()) {",
          "257:             } else {",
          "258:                 URI uri = currentInput.uri();",
          "259:                 LOGGER.error(\"Timeout during COPY FROM '\" + uri.toString() +",
          "",
          "[Removed Lines]",
          "254:                 watermark = watermark == 0 ? currentLineNumber + 1 : watermark;",
          "255:                 closeCurrentReader();",
          "256:                 initCurrentReader(currentInput, currentUri);",
          "",
          "[Added Lines]",
          "325:                 watermark = watermark == 0 ? cursor.lineNumber + 1 : watermark;",
          "326:                 closeReader();",
          "327:                 createReader(currentInput, cursor.uri);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "274:     @Override",
          "275:     public void close() {",
          "278:         killed = BatchIterator.CLOSED;",
          "279:         backOffPolicy.forEachRemaining((delay) -> {});",
          "280:     }",
          "283:         fileInputsIterator = null;",
          "284:         currentInputUriIterator = null;",
          "285:         currentInput = null;",
          "287:     }",
          "289:     @Override",
          "",
          "[Removed Lines]",
          "276:         closeCurrentReader();",
          "277:         releaseBatchIteratorState();",
          "282:     private void releaseBatchIteratorState() {",
          "286:         currentUri = null;",
          "",
          "[Added Lines]",
          "347:         closeReader();",
          "348:         reset();",
          "353:     private void reset() {",
          "357:         cursor.failure = null;",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/execution/engine/collect/files/LineParser.java||server/src/main/java/io/crate/execution/engine/collect/files/LineParser.java": [
          "File: server/src/main/java/io/crate/execution/engine/collect/files/LineParser.java -> server/src/main/java/io/crate/execution/engine/collect/files/LineParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/execution/engine/collect/files/LineProcessor.java||server/src/main/java/io/crate/execution/engine/collect/files/LineProcessor.java": [
          "File: server/src/main/java/io/crate/execution/engine/collect/files/LineProcessor.java -> server/src/main/java/io/crate/execution/engine/collect/files/LineProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.execution.engine.collect.files;",
          "24: import io.crate.analyze.CopyFromParserProperties;",
          "25: import io.crate.execution.dsl.phases.FileUriCollectPhase.InputFormat;",
          "26: import io.crate.expression.reference.file.LineContext;",
          "40:     }",
          "45:         }",
          "46:     }",
          "51:     }",
          "55:     }",
          "62:     }",
          "70:     }",
          "79:     }",
          "80: }",
          "",
          "[Removed Lines]",
          "28: import java.io.BufferedReader;",
          "29: import java.io.IOException;",
          "30: import java.net.URI;",
          "31: import java.util.List;",
          "33: public final class LineProcessor {",
          "35:     private final LineContext lineContext = new LineContext();",
          "36:     private final LineParser lineParser;",
          "38:     public LineProcessor(CopyFromParserProperties parserProperties, List<String> targetColumns) {",
          "39:         lineParser = new LineParser(parserProperties, targetColumns);",
          "42:     public void startCollect(Iterable<LineCollectorExpression<?>> collectorExpressions) {",
          "43:         for (LineCollectorExpression<?> collectorExpression : collectorExpressions) {",
          "44:             collectorExpression.startCollect(lineContext);",
          "48:     void startWithUri(URI currentUri) {",
          "49:         lineContext.resetCurrentLineNumber();",
          "50:         lineContext.currentUri(currentUri);",
          "53:     void readFirstLine(URI currentUri, InputFormat inputFormat, BufferedReader currentReader) throws IOException {",
          "54:         lineParser.readFirstLine(currentUri, inputFormat, currentReader);",
          "57:     public void process(String line) throws IOException {",
          "58:         lineContext.incrementCurrentLineNumber();",
          "59:         lineContext.resetCurrentParsingFailure(); // Reset prev failure if there is any.",
          "60:         byte[] jsonByteArray = lineParser.getByteArray(line, lineContext.getCurrentLineNumber());",
          "61:         lineContext.rawSource(jsonByteArray);",
          "68:     public void setUriFailure(String failure) {",
          "69:         lineContext.setCurrentUriFailure(failure);",
          "77:     public void setParsingFailure(String failure) {",
          "78:         lineContext.setCurrentParsingFailure(failure);",
          "",
          "[Added Lines]",
          "24: import java.io.IOException;",
          "25: import java.io.UncheckedIOException;",
          "26: import java.net.URI;",
          "27: import java.nio.charset.StandardCharsets;",
          "28: import java.util.List;",
          "31: import io.crate.data.BatchIterator;",
          "32: import io.crate.data.Input;",
          "33: import io.crate.data.MappedForwardingBatchIterator;",
          "34: import io.crate.data.Row;",
          "35: import io.crate.execution.dsl.phases.FileUriCollectPhase;",
          "37: import io.crate.execution.engine.collect.files.FileReadingIterator.LineCursor;",
          "38: import io.crate.expression.InputRow;",
          "40: import io.crate.operation.collect.files.CSVLineParser;",
          "42: public final class LineProcessor extends MappedForwardingBatchIterator<LineCursor, Row> {",
          "44:     private final BatchIterator<LineCursor> source;",
          "45:     private final LineContext lineContext;",
          "46:     private final CopyFromParserProperties parserProperties;",
          "47:     private final List<String> targetColumns;",
          "48:     private final InputRow row;",
          "50:     private InputFormat inputFormat;",
          "51:     private CSVLineParser csvLineParser;",
          "52:     private boolean firstLine = true;",
          "54:     public LineProcessor(BatchIterator<LineCursor> source,",
          "55:                          List<Input<?>> inputs,",
          "56:                          List<LineCollectorExpression<?>> expressions,",
          "57:                          FileUriCollectPhase.InputFormat inputFormat,",
          "58:                          CopyFromParserProperties parserProperties,",
          "59:                          List<String> targetColumns) {",
          "60:         this.source = source;",
          "61:         this.inputFormat = inputFormat;",
          "62:         this.row = new InputRow(inputs);",
          "63:         this.parserProperties = parserProperties;",
          "64:         this.targetColumns = targetColumns;",
          "65:         this.lineContext = new LineContext(source.currentElement());",
          "66:         for (LineCollectorExpression<?> collectorExpression : expressions) {",
          "67:             collectorExpression.startCollect(lineContext);",
          "68:         }",
          "71:     @Override",
          "72:     public void moveToStart() {",
          "73:         source.moveToStart();",
          "74:         firstLine = true;",
          "75:     }",
          "77:     private boolean readFirstLine(URI currentUri, String line) throws IOException {",
          "78:         if (isCSV(inputFormat, currentUri)) {",
          "79:             csvLineParser = new CSVLineParser(parserProperties, targetColumns);",
          "80:             inputFormat = InputFormat.CSV;",
          "81:             if (parserProperties.fileHeader()) {",
          "82:                 csvLineParser.parseHeader(line);",
          "83:                 return true;",
          "84:             }",
          "85:         } else {",
          "86:             inputFormat = InputFormat.JSON;",
          "88:         return false;",
          "91:     private byte[] getByteArray(String line, long rowNumber) throws IOException {",
          "92:         if (inputFormat == InputFormat.CSV) {",
          "93:             return parserProperties.fileHeader() ?",
          "94:                 csvLineParser.parse(line, rowNumber) : csvLineParser.parseWithoutHeader(line, rowNumber);",
          "95:         } else {",
          "96:             return line.getBytes(StandardCharsets.UTF_8);",
          "97:         }",
          "100:     private static boolean isCSV(FileUriCollectPhase.InputFormat inputFormat, URI currentUri) {",
          "101:         return (inputFormat == FileUriCollectPhase.InputFormat.CSV) || currentUri.toString().endsWith(\".csv\");",
          "104:     @Override",
          "105:     public boolean moveNext() {",
          "106:         try {",
          "107:             while (source.moveNext()) {",
          "108:                 LineCursor cursor = source.currentElement();",
          "109:                 String line = cursor.line();",
          "110:                 if (line == null) {",
          "111:                     assert cursor.failure() != null : \"If the line is null, there must be a failure\";",
          "112:                     return true;",
          "113:                 }",
          "114:                 if (firstLine) {",
          "115:                     firstLine = false;",
          "116:                     if (readFirstLine(cursor.uri(), line)) {",
          "117:                         continue;",
          "118:                     }",
          "119:                 }",
          "120:                 try {",
          "121:                     byte[] json = getByteArray(line, cursor.lineNumber());",
          "122:                     lineContext.resetCurrentParsingFailure();",
          "123:                     lineContext.rawSource(json);",
          "124:                 } catch (Throwable parseError) {",
          "125:                     lineContext.setCurrentParsingFailure(parseError.getMessage());",
          "126:                 }",
          "127:                 return true;",
          "128:             }",
          "129:             return false;",
          "130:         } catch (IOException e) {",
          "131:             throw new UncheckedIOException(e);",
          "132:         }",
          "135:     @Override",
          "136:     public Row currentElement() {",
          "137:         return row;",
          "140:     @Override",
          "141:     protected BatchIterator<LineCursor> delegate() {",
          "142:         return source;",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java": [
          "File: server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java -> server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import org.elasticsearch.threadpool.ThreadPool;",
          "36: import io.crate.analyze.AnalyzedCopyFrom;",
          "37: import io.crate.analyze.SymbolEvaluator;",
          "38: import io.crate.common.annotations.VisibleForTesting;",
          "39: import io.crate.data.BatchIterator;",
          "40: import io.crate.data.Row;",
          "41: import io.crate.execution.dsl.phases.CollectPhase;",
          "42: import io.crate.execution.dsl.phases.FileUriCollectPhase;",
          "43: import io.crate.execution.engine.collect.CollectTask;",
          "44: import io.crate.execution.engine.collect.files.FileInputFactory;",
          "45: import io.crate.execution.engine.collect.files.FileReadingIterator;",
          "46: import io.crate.execution.engine.collect.files.LineCollectorExpression;",
          "47: import io.crate.expression.InputFactory;",
          "48: import io.crate.expression.reference.file.FileLineReferenceResolver;",
          "49: import io.crate.expression.symbol.Symbol;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import io.crate.analyze.CopyFromParserProperties;",
          "42: import io.crate.data.SkippingBatchIterator;",
          "49: import io.crate.execution.engine.collect.files.LineProcessor;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:         ctx.add(collectPhase.toCollect());",
          "87:         List<String> fileUris = targetUriToStringList(txnCtx, nodeCtx, fileUriCollectPhase.targetUri());",
          "104:     }",
          "106:     @VisibleForTesting",
          "",
          "[Removed Lines]",
          "88:         return CompletableFuture.completedFuture(",
          "89:             new FileReadingIterator(",
          "90:                 fileUris,",
          "91:                 ctx.topLevelInputs(),",
          "92:                 ctx.expressions(),",
          "93:                 fileUriCollectPhase.compression(),",
          "94:                 fileInputFactoryMap,",
          "95:                 fileUriCollectPhase.sharedStorage(),",
          "96:                 fileUriCollectPhase.nodeIds().size(),",
          "97:                 getReaderNumber(fileUriCollectPhase.nodeIds(), clusterService.state().nodes().getLocalNodeId()),",
          "98:                 fileUriCollectPhase.targetColumns(),",
          "99:                 fileUriCollectPhase.parserProperties(),",
          "100:                 fileUriCollectPhase.inputFormat(),",
          "101:                 fileUriCollectPhase.withClauseOptions(),",
          "102:                 threadPool.scheduler()",
          "103:             ));",
          "",
          "[Added Lines]",
          "91:         FileReadingIterator fileReadingIterator = new FileReadingIterator(",
          "92:             fileUris,",
          "93:             fileUriCollectPhase.compression(),",
          "94:             fileInputFactoryMap,",
          "95:             fileUriCollectPhase.sharedStorage(),",
          "96:             fileUriCollectPhase.nodeIds().size(),",
          "97:             getReaderNumber(fileUriCollectPhase.nodeIds(), clusterService.state().nodes().getLocalNodeId()),",
          "98:             fileUriCollectPhase.withClauseOptions(),",
          "99:             threadPool.scheduler()",
          "100:         );",
          "101:         CopyFromParserProperties parserProperties = fileUriCollectPhase.parserProperties();",
          "102:         LineProcessor lineProcessor = new LineProcessor(",
          "103:             parserProperties.skipNumLines() > 0",
          "104:                 ? new SkippingBatchIterator<>(fileReadingIterator, (int) parserProperties.skipNumLines())",
          "105:                 : fileReadingIterator,",
          "106:             ctx.topLevelInputs(),",
          "107:             ctx.expressions(),",
          "108:             fileUriCollectPhase.inputFormat(),",
          "109:             parserProperties,",
          "110:             fileUriCollectPhase.targetColumns()",
          "111:         );",
          "112:         return CompletableFuture.completedFuture(lineProcessor);",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/expression/reference/file/LineContext.java||server/src/main/java/io/crate/expression/reference/file/LineContext.java": [
          "File: server/src/main/java/io/crate/expression/reference/file/LineContext.java -> server/src/main/java/io/crate/expression/reference/file/LineContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.expression.reference.file;",
          "28: import org.apache.lucene.util.UnicodeUtil;",
          "29: import org.elasticsearch.ElasticsearchParseException;",
          "30: import org.elasticsearch.common.bytes.BytesArray;",
          "31: import org.elasticsearch.common.compress.NotXContentException;",
          "32: import org.elasticsearch.common.xcontent.XContentType;",
          "34: import org.jetbrains.annotations.Nullable;",
          "39: public class LineContext {",
          "41:     private byte[] rawSource;",
          "42:     private LinkedHashMap<String, Object> parsedSource;",
          "45:     private String currentParsingFailure;",
          "48:     @Nullable",
          "49:     String sourceAsString() {",
          "",
          "[Removed Lines]",
          "24: import io.crate.metadata.ColumnIdent;",
          "25: import io.crate.server.xcontent.ParsedXContent;",
          "26: import io.crate.server.xcontent.XContentHelper;",
          "35: import java.net.URI;",
          "36: import java.util.LinkedHashMap;",
          "37: import java.util.Map;",
          "43:     private String currentUri;",
          "44:     private String currentUriFailure;",
          "46:     private long currentLineNumber = 0;",
          "",
          "[Added Lines]",
          "24: import java.io.IOException;",
          "25: import java.util.LinkedHashMap;",
          "26: import java.util.Map;",
          "35: import io.crate.execution.engine.collect.files.FileReadingIterator.LineCursor;",
          "36: import io.crate.metadata.ColumnIdent;",
          "37: import io.crate.server.xcontent.ParsedXContent;",
          "38: import io.crate.server.xcontent.XContentHelper;",
          "42:     private final LineCursor cursor;",
          "48:     public LineContext(LineCursor cursor) {",
          "49:         this.cursor = cursor;",
          "50:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:         this.parsedSource = null;",
          "85:     }",
          "97:     String currentUri() {",
          "99:     }",
          "",
          "[Removed Lines]",
          "91:     public void currentUri(URI currentUri) {",
          "92:         this.currentUri = currentUri.toString();",
          "93:         currentUriFailure = null;",
          "94:         currentParsingFailure = null;",
          "95:     }",
          "98:         return currentUri;",
          "101:     public void setCurrentUriFailure(String failureMessage) {",
          "102:         currentUriFailure = failureMessage;",
          "103:     }",
          "",
          "[Added Lines]",
          "92:         return cursor.uri().toString();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115:     @Nullable",
          "116:     String getCurrentUriFailure() {",
          "118:     }",
          "",
          "[Removed Lines]",
          "117:         return currentUriFailure;",
          "",
          "[Added Lines]",
          "108:         IOException failure = cursor.failure();",
          "109:         return failure == null ? null : failure.getMessage();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:         return currentParsingFailure;",
          "126:     }",
          "136:     public long getCurrentLineNumber() {",
          "138:     }",
          "140:     public void resetCurrentParsingFailure() {",
          "",
          "[Removed Lines]",
          "128:     public void resetCurrentLineNumber() {",
          "129:         currentLineNumber = 0;",
          "130:     }",
          "132:     public void incrementCurrentLineNumber() {",
          "133:         currentLineNumber++;",
          "134:     }",
          "137:         return currentLineNumber;",
          "",
          "[Added Lines]",
          "121:         return cursor.lineNumber();",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.execution.engine.collect.files;",
          "25: import static org.assertj.core.api.Assertions.assertThat;",
          "26: import static org.assertj.core.api.Assertions.assertThatThrownBy;",
          "",
          "[Removed Lines]",
          "24: import static io.crate.testing.TestingHelpers.createReference;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: import java.nio.file.Path;",
          "35: import java.nio.file.Paths;",
          "36: import java.util.ArrayList;",
          "37: import java.util.Collection;",
          "38: import java.util.Collections;",
          "40: import java.util.List;",
          "41: import java.util.Map;",
          "42: import java.util.concurrent.TimeUnit;",
          "",
          "[Removed Lines]",
          "39: import java.util.Iterator;",
          "",
          "[Added Lines]",
          "37: import java.util.Arrays;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47: import org.elasticsearch.threadpool.TestThreadPool;",
          "48: import org.elasticsearch.threadpool.ThreadPool;",
          "49: import org.junit.AfterClass;",
          "51: import org.junit.BeforeClass;",
          "52: import org.junit.Test;",
          "57: import io.crate.data.Input;",
          "73: public class FileReadingCollectorTest extends ESTestCase {",
          "74:     private static ThreadPool THREAD_POOL;",
          "75:     private static File tmpFile;",
          "76:     private static File tmpFileGz;",
          "77:     private static File tmpFileEmptyLine;",
          "79:     private Input<String> sourceUriFailureInput;",
          "82:     @BeforeClass",
          "83:     public static void setUpClass() throws Exception {",
          "",
          "[Removed Lines]",
          "50: import org.junit.Before;",
          "54: import io.crate.analyze.CopyFromParserProperties;",
          "55: import io.crate.data.BatchIterator;",
          "56: import io.crate.data.Bucket;",
          "58: import io.crate.data.Row;",
          "59: import io.crate.data.RowConsumer;",
          "60: import io.crate.data.testing.TestingRowConsumer;",
          "61: import io.crate.execution.dsl.phases.FileUriCollectPhase;",
          "62: import io.crate.expression.InputFactory;",
          "63: import io.crate.expression.reference.file.FileLineReferenceResolver;",
          "64: import io.crate.expression.reference.file.SourceLineExpression;",
          "65: import io.crate.expression.reference.file.SourceUriFailureExpression;",
          "66: import io.crate.metadata.CoordinatorTxnCtx;",
          "67: import io.crate.metadata.Functions;",
          "68: import io.crate.metadata.NodeContext;",
          "69: import io.crate.metadata.Reference;",
          "70: import io.crate.metadata.TransactionContext;",
          "71: import io.crate.types.DataTypes;",
          "78:     private InputFactory inputFactory;",
          "80:     private TransactionContext txnCtx = CoordinatorTxnCtx.systemTransactionContext();",
          "",
          "[Added Lines]",
          "54: import io.crate.execution.engine.collect.files.FileReadingIterator.LineCursor;",
          "63:     private static String line1 = \"{\\\"name\\\": \\\"Arthur\\\", \\\"id\\\": 4, \\\"details\\\": {\\\"age\\\": 38}}\";",
          "64:     private static String line2 = \"{\\\"id\\\": 5, \\\"name\\\": \\\"Trillian\\\", \\\"details\\\": {\\\"age\\\": 33}}\";",
          "66:     private static LineCursor[] expectedResult(File file) {",
          "67:         return new LineCursor[] {",
          "68:             new LineCursor(file.toURI(), 1, line1, null),",
          "69:             new LineCursor(file.toURI(), 2, line2, null)",
          "70:         };",
          "71:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:         try (BufferedWriter writer =",
          "91:                  new BufferedWriter(new OutputStreamWriter(new GZIPOutputStream(new FileOutputStream(tmpFileGz)),",
          "92:                      StandardCharsets.UTF_8))) {",
          "95:         }",
          "96:         try (OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(tmpFile), StandardCharsets.UTF_8)) {",
          "99:         }",
          "100:         try (OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(tmpFileEmptyLine), StandardCharsets.UTF_8)) {",
          "102:             writer.write(\"\\n\");",
          "104:         }",
          "105:         THREAD_POOL = new TestThreadPool(Thread.currentThread().getName());",
          "106:     }",
          "114:     @AfterClass",
          "115:     public static void tearDownClass() throws Exception {",
          "",
          "[Removed Lines]",
          "93:             writer.write(\"{\\\"name\\\": \\\"Arthur\\\", \\\"id\\\": 4, \\\"details\\\": {\\\"age\\\": 38}}\\n\");",
          "94:             writer.write(\"{\\\"id\\\": 5, \\\"name\\\": \\\"Trillian\\\", \\\"details\\\": {\\\"age\\\": 33}}\\n\");",
          "97:             writer.write(\"{\\\"name\\\": \\\"Arthur\\\", \\\"id\\\": 4, \\\"details\\\": {\\\"age\\\": 38}}\\n\");",
          "98:             writer.write(\"{\\\"id\\\": 5, \\\"name\\\": \\\"Trillian\\\", \\\"details\\\": {\\\"age\\\": 33}}\\n\");",
          "101:             writer.write(\"{\\\"name\\\": \\\"Arthur\\\", \\\"id\\\": 4, \\\"details\\\": {\\\"age\\\": 38}}\\n\");",
          "103:             writer.write(\"{\\\"id\\\": 5, \\\"name\\\": \\\"Trillian\\\", \\\"details\\\": {\\\"age\\\": 33}}\\n\");",
          "108:     @Before",
          "109:     public void prepare() throws Exception {",
          "110:         NodeContext nodeCtx = new NodeContext(new Functions(Map.of()), null);",
          "111:         inputFactory = new InputFactory(nodeCtx);",
          "112:     }",
          "",
          "[Added Lines]",
          "84:             writer.write(line1);",
          "85:             writer.write(\"\\n\");",
          "86:             writer.write(line2);",
          "87:             writer.write(\"\\n\");",
          "90:             writer.write(line1);",
          "91:             writer.write(\"\\n\");",
          "92:             writer.write(line2);",
          "93:             writer.write(\"\\n\");",
          "96:             writer.write(line1);",
          "97:             writer.write(\"\\n\");",
          "98:             writer.write(\"\\n\");",
          "99:             writer.write(line2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "122:     @Test",
          "123:     public void testUmlautsAndWhitespacesWithExplicitURIThrowsAre() throws Throwable {",
          "125:             .isExactlyInstanceOf(IllegalArgumentException.class)",
          "126:             .hasMessage(\"Illegal character in path at index 12: file:///this will f\u00e4il.json\");",
          "127:     }",
          "129:     @Test",
          "130:     public void testNoErrorIfNoSuchFile() throws Throwable {",
          "136:     }",
          "138:     @Test",
          "139:     public void testRelativeImport() throws Throwable {",
          "141:             .isExactlyInstanceOf(IllegalArgumentException.class)",
          "142:             .hasMessage(\"relative fileURIs are not allowed\");",
          "143:     }",
          "145:     @Test",
          "146:     public void testCollectFromUriWithGlob() throws Throwable {",
          "150:     }",
          "152:     @Test",
          "153:     public void testCollectFromDirectory() throws Throwable {",
          "157:     }",
          "159:     @Test",
          "163:     }",
          "165:     @Test",
          "166:     public void testDoCollectRawFromCompressed() throws Throwable {",
          "169:     }",
          "171:     @Test",
          "172:     public void testCollectWithEmptyLine() throws Throwable {",
          "175:     }",
          "177:     @Test",
          "178:     public void unsupportedURITest() throws Throwable {",
          "181:     }",
          "183:     @Test",
          "",
          "[Removed Lines]",
          "124:         assertThatThrownBy(() -> getObjects(\"file:///this will f\u00e4il.json\"))",
          "132:         assertThat(getObjects(\"file:///some/path/that/shouldnt/exist/foo.json\").getBucket())",
          "133:             .as(\"Contains one row even if file doesn't exist to propagate failure for return summary\")",
          "134:             .satisfiesExactly(row1 -> assertThat(row1.get(0)).isNull());",
          "135:         assertThat(getObjects(\"file:///some/path/that/shouldnt/exist/*\").getBucket()).isEmpty();",
          "140:         assertThatThrownBy(() -> getObjects(\"xy\"))",
          "147:         TestingRowConsumer projector = getObjects(",
          "148:             Paths.get(tmpFile.getParentFile().toURI()).toUri().toString() + \"file*.json\");",
          "149:         assertCorrectResult(projector.getBucket());",
          "154:         TestingRowConsumer projector = getObjects(",
          "155:             Paths.get(tmpFile.getParentFile().toURI()).toUri().toString() + \"*\");",
          "156:         assertCorrectResult(projector.getBucket());",
          "160:     public void testDoCollectRaw() throws Throwable {",
          "161:         TestingRowConsumer consumer = getObjects(Paths.get(tmpFile.toURI()).toUri().toString());",
          "162:         assertCorrectResult(consumer.getBucket());",
          "167:         TestingRowConsumer consumer = getObjects(Collections.singletonList(Paths.get(tmpFileGz.toURI()).toUri().toString()), \"gzip\");",
          "168:         assertCorrectResult(consumer.getBucket());",
          "173:         TestingRowConsumer consumer = getObjects(Paths.get(tmpFileEmptyLine.toURI()).toUri().toString());",
          "174:         assertCorrectResult(consumer.getBucket());",
          "179:         getObjects(\"invalid://crate.io/docs/en/latest/sql/reference/copy_from.html\", true).getBucket();",
          "180:         assertThat(sourceUriFailureInput.value()).isEqualTo(\"unknown protocol: invalid\");",
          "",
          "[Added Lines]",
          "116:         assertThatThrownBy(() -> collect(\"file:///this will f\u00e4il.json\"))",
          "123:         assertThat(collect(\"file:///some/path/that/shouldnt/exist/foo.json\")).satisfiesExactly(",
          "124:             line1 -> assertThat(line1.failure()).hasMessageContaining(\"No such file or directory\")",
          "125:         );",
          "126:         assertThat(collect(\"file:///some/path/that/shouldnt/exist/*\")).isEmpty();",
          "131:         assertThatThrownBy(() -> collect(\"xy\"))",
          "138:         List<LineCursor> result = collect(Paths.get(tmpFile.getParentFile().toURI()).toUri().toString() + \"file*.json\");",
          "139:         assertThat(result).containsExactly(expectedResult(tmpFile));",
          "144:         List<LineCursor> result = collect(Paths.get(tmpFile.getParentFile().toURI()).toUri().toString() + \"*\");",
          "145:         assertThat(result).containsExactly(expectedResult(tmpFile));",
          "149:     public void test_collect_exact_uri() throws Throwable {",
          "150:         List<LineCursor> result = collect(Paths.get(tmpFile.toURI()).toUri().toString());",
          "151:         assertThat(result).containsExactly(expectedResult(tmpFile));",
          "156:         List<LineCursor> result = collect(Collections.singletonList(Paths.get(tmpFileGz.toURI()).toUri().toString()), \"gzip\");",
          "157:         assertThat(result).containsExactly(expectedResult(tmpFileGz));",
          "162:         List<LineCursor> result = collect(Paths.get(tmpFileEmptyLine.toURI()).toUri().toString());",
          "163:         assertThat(result).containsExactly(",
          "164:             new LineCursor(tmpFileEmptyLine.toURI(), 1, \"{\\\"name\\\": \\\"Arthur\\\", \\\"id\\\": 4, \\\"details\\\": {\\\"age\\\": 38}}\", null),",
          "165:             new LineCursor(tmpFileEmptyLine.toURI(), 3, \"{\\\"id\\\": 5, \\\"name\\\": \\\"Trillian\\\", \\\"details\\\": {\\\"age\\\": 33}}\", null)",
          "166:         );",
          "171:         FileReadingIterator it = it(\"invalid://crate.io/docs/en/latest/sql/reference/copy_from.html\");",
          "172:         LineCursor currentElement = it.currentElement();",
          "173:         assertThat(it.moveNext()).isTrue();",
          "174:         assertThat(currentElement.lineNumber()).isEqualTo(0);",
          "175:         assertThat(currentElement.line()).isNull();",
          "176:         assertThat(currentElement.failure()).hasMessage(\"unknown protocol: invalid\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "185:         List<String> fileUris = new ArrayList<>();",
          "186:         fileUris.add(Paths.get(tmpFile.toURI()).toUri().toString());",
          "187:         fileUris.add(Paths.get(tmpFileEmptyLine.toURI()).toUri().toString());",
          "194:     }",
          "200:     }",
          "204:     }",
          "246:             fileUris,",
          "249:             compression,",
          "250:             Map.of(LocalFsFileInputFactory.NAME, new LocalFsFileInputFactory()),",
          "251:             false,",
          "252:             1,",
          "253:             0,",
          "257:             Settings.EMPTY,",
          "258:             THREAD_POOL.scheduler());",
          "259:     }",
          "260: }",
          "",
          "[Removed Lines]",
          "188:         TestingRowConsumer consumer = getObjects(fileUris, null);",
          "189:         Iterator<Row> it = consumer.getBucket().iterator();",
          "190:         assertThat(it.next().materialize()).containsExactly(\"{\\\"name\\\": \\\"Arthur\\\", \\\"id\\\": 4, \\\"details\\\": {\\\"age\\\": 38}}\");",
          "191:         assertThat(it.next().materialize()).containsExactly(\"{\\\"id\\\": 5, \\\"name\\\": \\\"Trillian\\\", \\\"details\\\": {\\\"age\\\": 33}}\");",
          "192:         assertThat(it.next().materialize()).containsExactly(\"{\\\"name\\\": \\\"Arthur\\\", \\\"id\\\": 4, \\\"details\\\": {\\\"age\\\": 38}}\");",
          "193:         assertThat(it.next().materialize()).containsExactly(\"{\\\"id\\\": 5, \\\"name\\\": \\\"Trillian\\\", \\\"details\\\": {\\\"age\\\": 33}}\");",
          "196:     private void assertCorrectResult(Bucket rows) throws Throwable {",
          "197:         Iterator<Row> it = rows.iterator();",
          "198:         assertThat(it.next().materialize()).containsExactly(\"{\\\"name\\\": \\\"Arthur\\\", \\\"id\\\": 4, \\\"details\\\": {\\\"age\\\": 38}}\");",
          "199:         assertThat(it.next().materialize()).containsExactly(\"{\\\"id\\\": 5, \\\"name\\\": \\\"Trillian\\\", \\\"details\\\": {\\\"age\\\": 33}}\");",
          "202:     private TestingRowConsumer getObjects(String fileUri) throws Throwable {",
          "203:         return getObjects(fileUri, false);",
          "206:     private TestingRowConsumer getObjects(String fileUri, boolean collectSourceUriFailure) throws Throwable {",
          "207:         return getObjects(Collections.singletonList(fileUri), null, collectSourceUriFailure);",
          "208:     }",
          "210:     private TestingRowConsumer getObjects(Collection<String> fileUris,",
          "211:                                           String compression) throws Throwable {",
          "212:         return getObjects(fileUris, compression, false);",
          "213:     }",
          "215:     private TestingRowConsumer getObjects(Collection<String> fileUris,",
          "216:                                           String compression,",
          "217:                                           boolean collectSourceUriFailure) throws Throwable {",
          "218:         TestingRowConsumer consumer = new TestingRowConsumer();",
          "219:         getObjects(fileUris, compression, consumer, collectSourceUriFailure);",
          "220:         return consumer;",
          "221:     }",
          "223:     private void getObjects(Collection<String> fileUris,",
          "224:                             String compression,",
          "225:                             RowConsumer consumer,",
          "226:                             boolean collectSourceUriFailure) throws Throwable {",
          "227:         BatchIterator<Row> iterator = createBatchIterator(fileUris, compression, collectSourceUriFailure);",
          "228:         consumer.accept(iterator, null);",
          "229:     }",
          "231:     @SuppressWarnings(\"unchecked\")",
          "232:     private BatchIterator<Row> createBatchIterator(Collection<String> fileUris,",
          "233:                                                    String compression,",
          "234:                                                    boolean collectSourceUriFailure) {",
          "235:         InputFactory.Context<LineCollectorExpression<?>> ctx =",
          "236:             inputFactory.ctxForRefs(txnCtx, FileLineReferenceResolver::getImplementation);",
          "237:         List<Input<?>> inputs = new ArrayList<>(2);",
          "238:         Reference raw = createReference(SourceLineExpression.COLUMN_NAME, DataTypes.STRING);",
          "239:         inputs.add(ctx.add(raw));",
          "240:         if (collectSourceUriFailure) {",
          "241:             Reference sourceUriFailure = createReference(SourceUriFailureExpression.COLUMN_NAME, DataTypes.STRING);",
          "242:             sourceUriFailureInput = (Input<String>) ctx.add(sourceUriFailure);",
          "243:             inputs.add(sourceUriFailureInput);",
          "244:         }",
          "245:         return new FileReadingIterator(",
          "247:             inputs,",
          "248:             ctx.expressions(),",
          "254:             List.of(\"a\", \"b\"),",
          "255:             CopyFromParserProperties.DEFAULT,",
          "256:             FileUriCollectPhase.InputFormat.JSON,",
          "",
          "[Added Lines]",
          "184:         List<LineCursor> results = collect(fileUris, null);",
          "185:         assertThat(results).containsExactly(",
          "186:             new LineCursor(tmpFile.toURI(), 1, \"{\\\"name\\\": \\\"Arthur\\\", \\\"id\\\": 4, \\\"details\\\": {\\\"age\\\": 38}}\", null),",
          "187:             new LineCursor(tmpFile.toURI(), 2, \"{\\\"id\\\": 5, \\\"name\\\": \\\"Trillian\\\", \\\"details\\\": {\\\"age\\\": 33}}\", null),",
          "188:             new LineCursor(tmpFileEmptyLine.toURI(), 1, \"{\\\"name\\\": \\\"Arthur\\\", \\\"id\\\": 4, \\\"details\\\": {\\\"age\\\": 38}}\", null),",
          "189:             new LineCursor(tmpFileEmptyLine.toURI(), 3, \"{\\\"id\\\": 5, \\\"name\\\": \\\"Trillian\\\", \\\"details\\\": {\\\"age\\\": 33}}\", null)",
          "190:         );",
          "193:     private static List<LineCursor> collect(String ... fileUris) throws Exception {",
          "194:         return collect(Arrays.asList(fileUris), null);",
          "197:     private static FileReadingIterator it(String ... fileUris) {",
          "198:         return it(Arrays.asList(fileUris), null);",
          "201:     private static FileReadingIterator it(Collection<String> fileUris, String compression) {",
          "202:         FileReadingIterator fileReadingIterator = new FileReadingIterator(",
          "211:         return fileReadingIterator;",
          "212:     }",
          "214:     private static List<LineCursor> collect(Collection<String> fileUris, String compression) throws Exception {",
          "215:         return it(fileUris, compression)",
          "216:             .map(LineCursor::copy)",
          "217:             .toList()",
          "218:             .get(5, TimeUnit.SECONDS);",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.execution.engine.collect.files;",
          "28: import static org.assertj.core.api.Assertions.assertThat;",
          "29: import static org.assertj.core.api.Assertions.assertThatThrownBy;",
          "30: import static org.mockito.ArgumentMatchers.any;",
          "",
          "[Removed Lines]",
          "24: import static io.crate.execution.dsl.phases.FileUriCollectPhase.InputFormat.CSV;",
          "25: import static io.crate.execution.dsl.phases.FileUriCollectPhase.InputFormat.JSON;",
          "26: import static io.crate.execution.engine.collect.files.FileReadingIterator.MAX_SOCKET_TIMEOUT_RETRIES;",
          "27: import static io.crate.testing.TestingHelpers.createReference;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: import java.nio.file.Files;",
          "43: import java.nio.file.Path;",
          "44: import java.util.Arrays;",
          "47: import java.util.List;",
          "48: import java.util.Map;",
          "49: import java.util.concurrent.ScheduledExecutorService;",
          "",
          "[Removed Lines]",
          "45: import java.util.Collection;",
          "46: import java.util.Collections;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55: import org.elasticsearch.threadpool.TestThreadPool;",
          "56: import org.elasticsearch.threadpool.ThreadPool;",
          "57: import org.junit.AfterClass;",
          "59: import org.junit.BeforeClass;",
          "60: import org.junit.Test;",
          "61: import org.mockito.ArgumentCaptor;",
          "64: import io.crate.data.BatchIterator;",
          "67: import io.crate.data.testing.BatchIteratorTester;",
          "78: public class FileReadingIteratorTest extends ESTestCase {",
          "85:     private static ThreadPool THREAD_POOL;",
          "89:     @BeforeClass",
          "90:     public static void setupThreadPool() {",
          "",
          "[Removed Lines]",
          "58: import org.junit.Before;",
          "63: import io.crate.analyze.CopyFromParserProperties;",
          "65: import io.crate.data.Input;",
          "66: import io.crate.data.Row;",
          "68: import io.crate.execution.dsl.phases.FileUriCollectPhase;",
          "69: import io.crate.expression.InputFactory;",
          "70: import io.crate.expression.reference.file.FileLineReferenceResolver;",
          "71: import io.crate.metadata.CoordinatorTxnCtx;",
          "72: import io.crate.metadata.Functions;",
          "73: import io.crate.metadata.NodeContext;",
          "74: import io.crate.metadata.Reference;",
          "75: import io.crate.metadata.TransactionContext;",
          "76: import io.crate.types.DataTypes;",
          "80:     private static final String JSON_AS_MAP_FIRST_LINE = \"{\\\"name\\\": \\\"Arthur\\\", \\\"id\\\": 4, \\\"details\\\": {\\\"age\\\": 38}}\";",
          "81:     private static final String JSON_AS_MAP_SECOND_LINE = \"{\\\"id\\\": 5, \\\"name\\\": \\\"Trillian\\\", \\\"details\\\": {\\\"age\\\": 33}}\";",
          "82:     private static final String CSV_AS_MAP_FIRST_LINE = \"{\\\"name\\\":\\\"Arthur\\\",\\\"id\\\":\\\"4\\\",\\\"age\\\":\\\"38\\\"}\";",
          "83:     private static final String CSV_AS_MAP_SECOND_LINE = \"{\\\"name\\\":\\\"Trillian\\\",\\\"id\\\":\\\"5\\\",\\\"age\\\":\\\"33\\\"}\";",
          "84:     private static final TransactionContext TXN_CTX = CoordinatorTxnCtx.systemTransactionContext();",
          "87:     private InputFactory inputFactory;",
          "",
          "[Added Lines]",
          "58: import io.crate.execution.engine.collect.files.FileReadingIterator.LineCursor;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "96:         ThreadPool.terminate(THREAD_POOL, 30, TimeUnit.SECONDS);",
          "97:     }",
          "180:     @Test",
          "181:     public void test_iterator_closes_current_reader_on_io_error() throws Exception {",
          "182:         Path tempFile1 = createTempFile(\"tempfile1\", \".csv\");",
          "187:         Path tempFile2 = createTempFile(\"tempfile2\", \".csv\");",
          "189:         List<String> fileUris = List.of(tempFile1.toUri().toString(), tempFile2.toUri().toString());",
          "198:             () -> new FileReadingIterator(",
          "199:                 fileUris,",
          "202:                 null,",
          "203:                 Map.of(LocalFsFileInputFactory.NAME, new LocalFsFileInputFactory()),",
          "204:                 false,",
          "205:                 1,",
          "206:                 0,",
          "210:                 Settings.EMPTY,",
          "211:                 THREAD_POOL.scheduler()",
          "212:             ) {",
          "",
          "[Removed Lines]",
          "99:     @Before",
          "100:     public void prepare() {",
          "101:         NodeContext nodeCtx = new NodeContext(new Functions(Map.of()), null);",
          "102:         inputFactory = new InputFactory(nodeCtx);",
          "103:     }",
          "105:     @Test",
          "106:     public void testIteratorContract_givenJSONInputFormat_AndNoRelevantFileExtension_thenWritesAsMap() throws Exception {",
          "107:         Path tempFile = createTempFile(\"tempfile\", \".any-suffix\");",
          "108:         Files.write(tempFile, List.of(",
          "109:             \"{\\\"name\\\": \\\"Arthur\\\", \\\"id\\\": 4, \\\"details\\\": {\\\"age\\\": 38}}\",",
          "110:             \"{\\\"id\\\": 5, \\\"name\\\": \\\"Trillian\\\", \\\"details\\\": {\\\"age\\\": 33}}\"));",
          "111:         var fileUri = tempFile.toUri().toString();",
          "113:         Supplier<BatchIterator<Row>> batchIteratorSupplier = () -> createBatchIterator(",
          "114:             Collections.singletonList(fileUri), JSON",
          "115:         );",
          "117:         List<Object[]> expectedResult = Arrays.asList(",
          "118:             new Object[]{JSON_AS_MAP_FIRST_LINE},",
          "119:             new Object[]{JSON_AS_MAP_SECOND_LINE});",
          "120:         var tester = BatchIteratorTester.forRows(batchIteratorSupplier);",
          "121:         tester.verifyResultAndEdgeCaseBehaviour(expectedResult);",
          "122:     }",
          "124:     @Test",
          "125:     public void testIteratorContract_givenCSVInputFormat__AndNoRelevantFileExtension_thenWritesAsMap() throws Exception {",
          "126:         Path tempFile = createTempFile(\"tempfile\", \".any-suffix\");",
          "127:         Files.write(tempFile, List.of(\"name,id,age\", \"Arthur,4,38\", \"Trillian,5,33\"));",
          "128:         var fileUri = tempFile.toUri().toString();",
          "130:         Supplier<BatchIterator<Row>> batchIteratorSupplier = () -> createBatchIterator(",
          "131:             Collections.singletonList(fileUri), CSV",
          "132:         );",
          "134:         List<Object[]> expectedResult = Arrays.asList(",
          "135:             new Object[]{CSV_AS_MAP_FIRST_LINE},",
          "136:             new Object[]{CSV_AS_MAP_SECOND_LINE});",
          "137:         var tester = BatchIteratorTester.forRows(batchIteratorSupplier);",
          "138:         tester.verifyResultAndEdgeCaseBehaviour(expectedResult);",
          "139:     }",
          "141:     @Test",
          "142:     public void testIteratorContract_givenDefaultJsonInputFormat_AndJSONExtension_thenWritesAsMap() throws Exception {",
          "143:         Path tempFile = createTempFile(\"tempfile\", \".json\");",
          "144:         Files.write(tempFile, List.of(",
          "145:             \"{\\\"name\\\": \\\"Arthur\\\", \\\"id\\\": 4, \\\"details\\\": {\\\"age\\\": 38}}\",",
          "146:             \"{\\\"id\\\": 5, \\\"name\\\": \\\"Trillian\\\", \\\"details\\\": {\\\"age\\\": 33}}\"));",
          "147:         var fileUri = tempFile.toUri().toString();",
          "149:         Supplier<BatchIterator<Row>> batchIteratorSupplier = () -> createBatchIterator(",
          "150:             Collections.singletonList(fileUri), JSON",
          "151:         );",
          "153:         List<Object[]> expectedResult = Arrays.asList(",
          "154:             new Object[]{JSON_AS_MAP_FIRST_LINE},",
          "155:             new Object[]{JSON_AS_MAP_SECOND_LINE});",
          "156:         var tester = BatchIteratorTester.forRows(batchIteratorSupplier);",
          "157:         tester.verifyResultAndEdgeCaseBehaviour(expectedResult);",
          "158:     }",
          "160:     @Test",
          "161:     public void testIteratorContract_givenDefaultJsonInputFormat_AndCSVExtension_thenWritesAsMap() throws Exception {",
          "162:         Path tempFile = createTempFile(\"tempfile\", \".csv\");",
          "163:         Files.write(tempFile, List.of(\"name,id,age\", \"Arthur,4,38\", \"Trillian,5,33\"));",
          "164:         var fileUri = tempFile.toUri().toString();",
          "166:         Supplier<BatchIterator<Row>> batchIteratorSupplier = () -> createBatchIterator(",
          "167:             Collections.singletonList(fileUri), JSON",
          "168:         );",
          "170:         List<Object[]> expectedResult = Arrays.asList(",
          "171:             new Object[]{CSV_AS_MAP_FIRST_LINE},",
          "172:             new Object[]{CSV_AS_MAP_SECOND_LINE});",
          "173:         var tester = BatchIteratorTester.forRows(batchIteratorSupplier);",
          "174:         tester.verifyResultAndEdgeCaseBehaviour(expectedResult);",
          "175:     }",
          "183:         Files.write(tempFile1, List.of(\"name,id,age\",",
          "184:                                        \"Arthur,4,38\",",
          "185:                                        \"Douglas,6,42\"  // <--- reader will fail on this line, so it is not part of the expected results",
          "186:         ));",
          "188:         Files.write(tempFile2, List.of(\"name,id,age\", \"Trillian,5,33\"));",
          "191:         Reference raw = createReference(\"_raw\", DataTypes.STRING);",
          "192:         InputFactory.Context<LineCollectorExpression<?>> ctx =",
          "193:             inputFactory.ctxForRefs(TXN_CTX, FileLineReferenceResolver::getImplementation);",
          "194:         List<Input<?>> inputs = Collections.singletonList(ctx.add(raw));",
          "197:         Supplier<BatchIterator<Row>> batchIteratorSupplier =",
          "200:                 inputs,",
          "201:                 ctx.expressions(),",
          "207:                 List.of(\"name\", \"id\", \"age\"),",
          "208:                 CopyFromParserProperties.DEFAULT,",
          "209:                 JSON,",
          "",
          "[Added Lines]",
          "81:         List<String> lines1 = List.of(",
          "82:             \"name,id,age\",",
          "83:             \"Arthur,4,38\",",
          "84:             \"Douglas,6,42\"  // <--- reader will fail on this line, so it is not part of the expected results",
          "85:         );",
          "86:         Files.write(tempFile1, lines1);",
          "88:         List<String> lines2 = List.of(\"name,id,age\", \"Trillian,5,33\");",
          "89:         Files.write(tempFile2, lines2);",
          "92:         Supplier<BatchIterator<LineCursor>> batchIteratorSupplier =",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "230:                 }",
          "231:             };",
          "237:         tester.verifyResultAndEdgeCaseBehaviour(expectedResult);",
          "238:     }",
          "",
          "[Removed Lines]",
          "233:         List<Object[]> expectedResult = Arrays.asList(",
          "234:             new Object[]{CSV_AS_MAP_FIRST_LINE},",
          "235:             new Object[]{CSV_AS_MAP_SECOND_LINE});",
          "236:         var tester = BatchIteratorTester.forRows(batchIteratorSupplier);",
          "",
          "[Added Lines]",
          "123:         List<String> expectedResult = Arrays.asList(",
          "124:             \"name,id,age\",",
          "125:             \"Arthur,4,38\",",
          "126:             \"name,id,age\",",
          "127:             \"Trillian,5,33\"",
          "128:         );",
          "129:         var tester = new BatchIteratorTester<>(() -> batchIteratorSupplier.get().map(LineCursor::line));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "244:     @Test",
          "245:     public void test_consecutive_retries_will_not_result_in_duplicate_reads() throws Exception {",
          "246:         Path tempFile = createTempFile(\"tempfile1\", \".csv\");",
          "248:         List<String> fileUris = List.of(tempFile.toUri().toString());",
          "257:             () -> new FileReadingIterator(",
          "258:                 fileUris,",
          "261:                 null,",
          "262:                 Map.of(LocalFsFileInputFactory.NAME, new LocalFsFileInputFactory()),",
          "263:                 false,",
          "264:                 1,",
          "265:                 0,",
          "269:                 Settings.EMPTY,",
          "270:                 THREAD_POOL.scheduler()",
          "271:             ) {",
          "",
          "[Removed Lines]",
          "247:         Files.write(tempFile, List.of(\"id\", \"1\", \"2\", \"3\", \"4\", \"5\"));",
          "250:         Reference raw = createReference(\"_raw\", DataTypes.STRING);",
          "251:         InputFactory.Context<LineCollectorExpression<?>> ctx =",
          "252:             inputFactory.ctxForRefs(TXN_CTX, FileLineReferenceResolver::getImplementation);",
          "253:         List<Input<?>> inputs = Collections.singletonList(ctx.add(raw));",
          "256:         Supplier<BatchIterator<Row>> batchIteratorSupplier =",
          "259:                 inputs,",
          "260:                 ctx.expressions(),",
          "266:                 List.of(\"id\"),",
          "267:                 new CopyFromParserProperties(true, true, ',', 0),",
          "268:                 CSV,",
          "",
          "[Added Lines]",
          "140:         List<String> lines = List.of(\"id\", \"1\", \"2\", \"3\", \"4\", \"5\");",
          "141:         Files.write(tempFile, lines);",
          "144:         Supplier<BatchIterator<LineCursor>> batchIteratorSupplier =",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "290:                 }",
          "291:             };",
          "363:     }",
          "365:     @Test",
          "366:     public void test_loadNextBatch_implements_retry_with_backoff() throws IOException {",
          "367:         ScheduledExecutorService scheduler = mock(ScheduledExecutorService.class);",
          "368:         var fi = new FileReadingIterator(",
          "371:             List.of(),",
          "372:             null,",
          "373:             Map.of(),",
          "374:             false,",
          "375:             1,",
          "376:             0,",
          "380:             Settings.EMPTY,",
          "381:             scheduler",
          "382:         );",
          "383:         ArgumentCaptor<Long> delays = ArgumentCaptor.forClass(Long.class);",
          "386:             fi.loadNextBatch().complete(null);",
          "387:         }",
          "390:             .schedule(any(Runnable.class), delays.capture(), eq(TimeUnit.MILLISECONDS));",
          "391:         final List<Long> actualDelays = delays.getAllValues();",
          "392:         assertThat(actualDelays).isEqualTo(Arrays.asList(0L, 10L, 30L, 100L, 230L));",
          "",
          "[Removed Lines]",
          "293:         List<Object[]> expectedResult = Arrays.asList(",
          "294:             new Object[]{\"{\\\"id\\\":\\\"1\\\"}\"},",
          "295:             new Object[]{\"{\\\"id\\\":\\\"2\\\"}\"},",
          "296:             new Object[]{\"{\\\"id\\\":\\\"3\\\"}\"},",
          "297:             new Object[]{\"{\\\"id\\\":\\\"4\\\"}\"},",
          "298:             new Object[]{\"{\\\"id\\\":\\\"5\\\"}\"}",
          "299:         );",
          "300:         var tester = BatchIteratorTester.forRows(batchIteratorSupplier);",
          "301:         tester.verifyResultAndEdgeCaseBehaviour(expectedResult);",
          "302:     }",
          "304:     @Test",
          "305:     public void test_skipping_csv_headers_and_rows_combined_with_retry_logic() throws Exception {",
          "306:         final int skipNumLines = 2;",
          "307:         Path tempFile = createTempFile(\"tempfile1\", \".csv\");",
          "308:         Files.write(tempFile, List.of(\"id\", \"1\", \"2\", \"3\", \"4\", \"5\"));",
          "309:         List<String> fileUris = List.of(tempFile.toUri().toString());",
          "312:         Reference raw = createReference(\"_raw\", DataTypes.STRING);",
          "313:         InputFactory.Context<LineCollectorExpression<?>> ctx =",
          "314:             inputFactory.ctxForRefs(TXN_CTX, FileLineReferenceResolver::getImplementation);",
          "315:         List<Input<?>> inputs = Collections.singletonList(ctx.add(raw));",
          "318:         Supplier<BatchIterator<Row>> batchIteratorSupplier =",
          "319:             () -> new FileReadingIterator(",
          "320:                 fileUris,",
          "321:                 inputs,",
          "322:                 ctx.expressions(),",
          "323:                 null,",
          "324:                 Map.of(LocalFsFileInputFactory.NAME, new LocalFsFileInputFactory()),",
          "325:                 false,",
          "326:                 1,",
          "327:                 0,",
          "328:                 List.of(\"id\"),",
          "329:                 new CopyFromParserProperties(true, false, ',', skipNumLines),",
          "330:                 CSV,",
          "331:                 Settings.EMPTY,",
          "332:                 THREAD_POOL.scheduler()",
          "333:             ) {",
          "334:                 int retry = 0;",
          "335:                 final List<String> linesToThrow = List.of(\"3\", \"2\", \"3\", \"5\", \"2\");",
          "336:                 int linesToThrowIndex = 0;",
          "338:                 @Override",
          "339:                 BufferedReader createBufferedReader(InputStream inputStream) throws IOException {",
          "340:                     return new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8)) {",
          "342:                         @Override",
          "343:                         public String readLine() throws IOException {",
          "344:                             var line = super.readLine();",
          "345:                             if (linesToThrow.get(linesToThrowIndex).equals(line) && retry++ < MAX_SOCKET_TIMEOUT_RETRIES) {",
          "346:                                 linesToThrowIndex = (linesToThrowIndex + 1) % linesToThrow.size();",
          "347:                                 throw new SocketTimeoutException(\"dummy\");",
          "348:                             }",
          "349:                             return line;",
          "350:                         }",
          "351:                     };",
          "352:                 }",
          "353:             };",
          "355:         List<Object[]> expectedResult = Arrays.asList(",
          "356:             new Object[]{\"{\\\"id\\\":\\\"2\\\"}\"},",
          "357:             new Object[]{\"{\\\"id\\\":\\\"3\\\"}\"},",
          "358:             new Object[]{\"{\\\"id\\\":\\\"4\\\"}\"},",
          "359:             new Object[]{\"{\\\"id\\\":\\\"5\\\"}\"}",
          "360:         );",
          "361:         var tester = BatchIteratorTester.forRows(batchIteratorSupplier);",
          "362:         tester.verifyResultAndEdgeCaseBehaviour(expectedResult);",
          "369:             List.of(),",
          "370:             List.of(),",
          "377:             List.of(),",
          "378:             null,",
          "379:             CSV,",
          "385:         for (int i = 0; i < MAX_SOCKET_TIMEOUT_RETRIES; i++) {",
          "389:         verify(scheduler, times(MAX_SOCKET_TIMEOUT_RETRIES))",
          "",
          "[Added Lines]",
          "176:         var tester = new BatchIteratorTester<>(() -> batchIteratorSupplier.get().map(LineCursor::line));",
          "177:         tester.verifyResultAndEdgeCaseBehaviour(lines);",
          "195:         for (int i = 0; i < FileReadingIterator.MAX_SOCKET_TIMEOUT_RETRIES; i++) {",
          "199:         verify(scheduler, times(FileReadingIterator.MAX_SOCKET_TIMEOUT_RETRIES))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "405:         Files.write(tempFile2, List.of(\"4\", \"5\", \"6\"));",
          "406:         List<String> fileUris = List.of(tempFile.toUri().toString(), tempFile2.toUri().toString());",
          "413:         var fi = new FileReadingIterator(",
          "414:             fileUris,",
          "417:             null,",
          "418:             Map.of(LocalFsFileInputFactory.NAME, new LocalFsFileInputFactory()),",
          "419:             false,",
          "420:             1,",
          "421:             0,",
          "425:             Settings.EMPTY,",
          "426:             THREAD_POOL.scheduler()",
          "427:         ) {",
          "",
          "[Removed Lines]",
          "408:         Reference raw = createReference(\"_raw\", DataTypes.STRING);",
          "409:         InputFactory.Context<LineCollectorExpression<?>> ctx =",
          "410:             inputFactory.ctxForRefs(TXN_CTX, FileLineReferenceResolver::getImplementation);",
          "411:         List<Input<?>> inputs = Collections.singletonList(ctx.add(raw));",
          "415:             inputs,",
          "416:             ctx.expressions(),",
          "422:             List.of(\"id\"),",
          "423:             new CopyFromParserProperties(true, false, ',', 0),",
          "424:             CSV,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "447:         };",
          "449:         assertThat(fi.moveNext()).isEqualTo(true);",
          "451:         assertThat(fi.moveNext()).isEqualTo(true);",
          "453:         assertThat(fi.moveNext()).isEqualTo(false);",
          "454:         assertThat(fi.allLoaded()).isEqualTo(false);",
          "459:                 assertThat(fi.watermark).isEqualTo(3);",
          "460:                 assertThat(fi.moveNext()).isEqualTo(true);",
          "462:                 assertThat(fi.watermark).isEqualTo(0);",
          "466:                 assertThat(fi.moveNext()).isEqualTo(true);",
          "493:     }",
          "494: }",
          "",
          "[Removed Lines]",
          "450:         assertThat(fi.currentElement().get(0)).isEqualTo(\"{\\\"id\\\":\\\"1\\\"}\");",
          "452:         assertThat(fi.currentElement().get(0)).isEqualTo(\"{\\\"id\\\":\\\"2\\\"}\");",
          "455:         var backoff = fi.loadNextBatch();",
          "456:         backoff.thenRun(",
          "457:             () -> {",
          "458:                 assertThat(fi.currentElement().get(0)).isEqualTo(\"{\\\"id\\\":\\\"2\\\"}\");",
          "463:                 assertThat(fi.currentElement().get(0)).isEqualTo(\"{\\\"id\\\":\\\"3\\\"}\");",
          "467:                 assertThat(fi.currentElement().get(0)).isEqualTo(\"{\\\"id\\\":\\\"4\\\"}\");",
          "468:             }",
          "469:         ).join();",
          "470:     }",
          "472:     private BatchIterator<Row> createBatchIterator(Collection<String> fileUris,",
          "473:                                                    FileUriCollectPhase.InputFormat format) {",
          "474:         Reference raw = createReference(\"_raw\", DataTypes.STRING);",
          "475:         InputFactory.Context<LineCollectorExpression<?>> ctx =",
          "476:             inputFactory.ctxForRefs(TXN_CTX, FileLineReferenceResolver::getImplementation);",
          "478:         List<Input<?>> inputs = Collections.singletonList(ctx.add(raw));",
          "479:         return new FileReadingIterator(",
          "480:             fileUris,",
          "481:             inputs,",
          "482:             ctx.expressions(),",
          "483:             null,",
          "484:             Map.of(LocalFsFileInputFactory.NAME, new LocalFsFileInputFactory()),",
          "485:             false,",
          "486:             1,",
          "487:             0,",
          "488:             List.of(\"name\", \"id\", \"age\"),",
          "489:             CopyFromParserProperties.DEFAULT,",
          "490:             format,",
          "491:             Settings.EMPTY,",
          "492:             THREAD_POOL.scheduler());",
          "",
          "[Added Lines]",
          "250:         assertThat(fi.currentElement().line()).isEqualTo(\"1\");",
          "252:         assertThat(fi.currentElement().line()).isEqualTo(\"2\");",
          "255:         assertThat(fi.loadNextBatch()).succeedsWithin(5, TimeUnit.SECONDS)",
          "256:             .satisfies(x -> {",
          "257:                 assertThat(fi.currentElement().line()).isEqualTo(\"2\");",
          "262:                 assertThat(fi.currentElement().line()).isEqualTo(\"3\");",
          "266:                 assertThat(fi.currentElement().line()).isEqualTo(\"4\");",
          "267:             });",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/files/LineParserTest.java||server/src/test/java/io/crate/execution/engine/collect/files/LineParserTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/files/LineParserTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/LineParserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/files/LineProcessorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/LineProcessorTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/files/LineProcessorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/LineProcessorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.execution.engine.collect.files;",
          "34: import java.net.URI;",
          "36: import java.util.List;",
          "39: import org.junit.Test;",
          "41: import io.crate.analyze.CopyFromParserProperties;",
          "43: public class LineProcessorTest {",
          "54:     @Test",
          "63:     }",
          "65:     @Test",
          "74:     }",
          "76:     @Test",
          "85:     }",
          "87:     @Test",
          "96:     }",
          "97: }",
          "",
          "[Removed Lines]",
          "24: import static io.crate.execution.dsl.phases.FileUriCollectPhase.InputFormat.CSV;",
          "25: import static io.crate.execution.dsl.phases.FileUriCollectPhase.InputFormat.JSON;",
          "26: import static org.hamcrest.MatcherAssert.assertThat;",
          "27: import static org.hamcrest.Matchers.is;",
          "28: import static org.hamcrest.Matchers.nullValue;",
          "30: import java.io.BufferedReader;",
          "31: import java.io.IOException;",
          "32: import java.io.Reader;",
          "33: import java.io.StringReader;",
          "35: import java.net.URISyntaxException;",
          "38: import org.junit.Before;",
          "45:     private LineProcessor subjectUnderTest;",
          "46:     private URI uri;",
          "47:     private BufferedReader bufferedReader;",
          "49:     @Before",
          "50:     public void setup() {",
          "51:         subjectUnderTest = new LineProcessor(CopyFromParserProperties.DEFAULT, List.of(\"a\", \"b\"));",
          "52:     }",
          "55:     public void readFirstLine_givenFileExtensionIsCsv_AndDefaultJSONFileFormat_thenReadsLine() throws URISyntaxException, IOException {",
          "56:         uri = new URI(\"file.csv\");",
          "57:         Reader reader = new StringReader(\"some/string\");",
          "58:         bufferedReader = new BufferedReader(reader);",
          "60:         subjectUnderTest.readFirstLine(uri, JSON, bufferedReader);",
          "62:         assertThat(bufferedReader.readLine(), is(nullValue()));",
          "66:     public void readFirstLine_givenFileFormatIsCsv_thenReadsLine() throws URISyntaxException, IOException {",
          "67:         uri = new URI(\"file.any\");",
          "68:         Reader reader = new StringReader(\"some/string\");",
          "69:         bufferedReader = new BufferedReader(reader);",
          "71:         subjectUnderTest.readFirstLine(uri, CSV, bufferedReader);",
          "73:         assertThat(bufferedReader.readLine(), is(nullValue()));",
          "77:     public void readFirstLine_givenFileExtensionIsJson__AndDefaultJSONFileFormat_thenDoesNotReadLine() throws URISyntaxException, IOException {",
          "78:         uri = new URI(\"file.json\");",
          "79:         Reader reader = new StringReader(\"some/string\");",
          "80:         bufferedReader = new BufferedReader(reader);",
          "82:         subjectUnderTest.readFirstLine(uri, JSON, bufferedReader);",
          "84:         assertThat(bufferedReader.readLine(), is(\"some/string\"));",
          "88:     public void readFirstLine_givenFileFormatIsJson_thenDoesNotReadLine() throws URISyntaxException, IOException {",
          "89:         uri = new URI(\"file.any\");",
          "90:         Reader reader = new StringReader(\"some/string\");",
          "91:         bufferedReader = new BufferedReader(reader);",
          "93:         subjectUnderTest.readFirstLine(uri, JSON, bufferedReader);",
          "95:         assertThat(bufferedReader.readLine(), is(\"some/string\"));",
          "",
          "[Added Lines]",
          "24: import static org.assertj.core.api.Assertions.assertThat;",
          "28: import java.util.Map;",
          "33: import io.crate.data.BatchIterator;",
          "34: import io.crate.data.InMemoryBatchIterator;",
          "35: import io.crate.execution.dsl.phases.FileUriCollectPhase.InputFormat;",
          "36: import io.crate.execution.engine.collect.files.FileReadingIterator.LineCursor;",
          "37: import io.crate.expression.InputFactory;",
          "38: import io.crate.expression.InputFactory.Context;",
          "39: import io.crate.expression.reference.file.FileLineReferenceResolver;",
          "40: import io.crate.expression.reference.file.SourceParsingFailureExpression;",
          "41: import io.crate.metadata.CoordinatorTxnCtx;",
          "42: import io.crate.metadata.Functions;",
          "43: import io.crate.metadata.NodeContext;",
          "44: import io.crate.metadata.doc.DocSysColumns;",
          "45: import io.crate.testing.TestingHelpers;",
          "46: import io.crate.types.DataTypes;",
          "47: import io.crate.user.User;",
          "48: import io.crate.user.UserLookup;",
          "52:     UserLookup userLookup = () -> List.of(User.CRATE_USER);",
          "53:     NodeContext nodeCtx = new NodeContext(new Functions(Map.of()), userLookup);",
          "54:     InputFactory inputFactory = new InputFactory(nodeCtx);",
          "57:     public void test_line_processor_parses_json_input() throws Exception {",
          "58:         URI uri = new URI(\"file:///dummy.txt\");",
          "59:         BatchIterator<LineCursor> source = InMemoryBatchIterator.of(",
          "60:             List.of(",
          "61:                 new LineCursor(uri, 1, \"{\\\"x\\\": 10}\", null),",
          "62:                 new LineCursor(uri, 2, \"{\\\"x\\\": 20}\", null)",
          "63:             ),",
          "64:             null,",
          "65:             false",
          "66:         );",
          "67:         Context<LineCollectorExpression<?>> ctxForRefs = inputFactory.ctxForRefs(",
          "68:             CoordinatorTxnCtx.systemTransactionContext(),",
          "69:             FileLineReferenceResolver::getImplementation",
          "70:         );",
          "71:         ctxForRefs.add(List.of(",
          "72:             TestingHelpers.createReference(DocSysColumns.RAW, DataTypes.STRING),",
          "73:             TestingHelpers.createReference(\"x\", DataTypes.INTEGER)",
          "74:         ));",
          "76:         LineProcessor lineProcessor = new LineProcessor(",
          "77:             source,",
          "78:             ctxForRefs.topLevelInputs(),",
          "79:             ctxForRefs.expressions(),",
          "80:             InputFormat.JSON,",
          "81:             new CopyFromParserProperties(true, false, ',', 0),",
          "82:             List.of()",
          "83:         );",
          "85:         assertThat(lineProcessor.moveNext()).isTrue();",
          "86:         assertThat(lineProcessor.currentElement().get(0)).isEqualTo(\"{\\\"x\\\": 10}\");",
          "87:         assertThat(lineProcessor.currentElement().get(1)).isEqualTo(10);",
          "91:     public void test_line_processor_parses_csv_input_with_header() throws Exception {",
          "92:         URI uri = new URI(\"file:///dummy.txt\");",
          "93:         BatchIterator<LineCursor> source = InMemoryBatchIterator.of(",
          "94:             List.of(",
          "95:                 new LineCursor(uri, 1, \"x,y\", null),",
          "96:                 new LineCursor(uri, 2, \"10,20\", null)",
          "97:             ),",
          "98:             null,",
          "99:             false",
          "100:         );",
          "101:         Context<LineCollectorExpression<?>> ctxForRefs = inputFactory.ctxForRefs(",
          "102:             CoordinatorTxnCtx.systemTransactionContext(),",
          "103:             FileLineReferenceResolver::getImplementation",
          "104:         );",
          "105:         ctxForRefs.add(List.of(",
          "106:             TestingHelpers.createReference(DocSysColumns.RAW, DataTypes.STRING),",
          "107:             TestingHelpers.createReference(\"x\", DataTypes.INTEGER),",
          "108:             TestingHelpers.createReference(\"y\", DataTypes.INTEGER)",
          "109:         ));",
          "111:         LineProcessor lineProcessor = new LineProcessor(",
          "112:             source,",
          "113:             ctxForRefs.topLevelInputs(),",
          "114:             ctxForRefs.expressions(),",
          "115:             InputFormat.CSV,",
          "116:             new CopyFromParserProperties(true, true, ',', 0),",
          "117:             List.of()",
          "118:         );",
          "120:         assertThat(lineProcessor.moveNext()).isTrue();",
          "121:         assertThat(lineProcessor.currentElement().get(0)).isEqualTo(\"{\\\"x\\\":\\\"10\\\",\\\"y\\\":\\\"20\\\"}\");",
          "122:         assertThat(lineProcessor.currentElement().get(1)).isEqualTo(10);",
          "123:         assertThat(lineProcessor.currentElement().get(2)).isEqualTo(20);",
          "127:     public void test_line_processor_parses_csv_input_without_header() throws Exception {",
          "128:         URI uri = new URI(\"file:///dummy.txt\");",
          "129:         BatchIterator<LineCursor> source = InMemoryBatchIterator.of(",
          "130:             List.of(",
          "131:                 new LineCursor(uri, 1, \"1,2\", null),",
          "132:                 new LineCursor(uri, 2, \"10,20\", null)",
          "133:             ),",
          "134:             null,",
          "135:             false",
          "136:         );",
          "137:         Context<LineCollectorExpression<?>> ctxForRefs = inputFactory.ctxForRefs(",
          "138:             CoordinatorTxnCtx.systemTransactionContext(),",
          "139:             FileLineReferenceResolver::getImplementation",
          "140:         );",
          "141:         ctxForRefs.add(List.of(",
          "142:             TestingHelpers.createReference(DocSysColumns.RAW, DataTypes.STRING),",
          "143:             TestingHelpers.createReference(\"x\", DataTypes.INTEGER),",
          "144:             TestingHelpers.createReference(\"y\", DataTypes.INTEGER)",
          "145:         ));",
          "147:         LineProcessor lineProcessor = new LineProcessor(",
          "148:             source,",
          "149:             ctxForRefs.topLevelInputs(),",
          "150:             ctxForRefs.expressions(),",
          "151:             InputFormat.CSV,",
          "152:             new CopyFromParserProperties(true, false, ',', 0),",
          "153:             List.of(\"x\", \"y\")",
          "154:         );",
          "155:         assertThat(lineProcessor.moveNext()).isTrue();",
          "156:         assertThat(lineProcessor.currentElement().get(0)).isEqualTo(\"{\\\"x\\\":\\\"1\\\",\\\"y\\\":\\\"2\\\"}\");",
          "157:         assertThat(lineProcessor.currentElement().get(1)).isEqualTo(1);",
          "158:         assertThat(lineProcessor.currentElement().get(2)).isEqualTo(2);",
          "162:     public void test_line_processor_sets_parse_failure_on_invalid_inputs() throws Exception {",
          "163:         URI uri = new URI(\"file:///dummy.txt\");",
          "164:         BatchIterator<LineCursor> source = InMemoryBatchIterator.of(",
          "165:             List.of(",
          "166:                 new LineCursor(uri, 1, \"x,y\", null),",
          "167:                 new LineCursor(uri, 2, \"1,2,3,4\", null)",
          "168:             ),",
          "169:             null,",
          "170:             false",
          "171:         );",
          "172:         Context<LineCollectorExpression<?>> ctxForRefs = inputFactory.ctxForRefs(",
          "173:             CoordinatorTxnCtx.systemTransactionContext(),",
          "174:             FileLineReferenceResolver::getImplementation",
          "175:         );",
          "176:         ctxForRefs.add(List.of(",
          "177:             TestingHelpers.createReference(DocSysColumns.RAW, DataTypes.STRING),",
          "178:             TestingHelpers.createReference(SourceParsingFailureExpression.COLUMN_NAME, DataTypes.STRING),",
          "179:             TestingHelpers.createReference(\"x\", DataTypes.INTEGER)",
          "180:         ));",
          "182:         LineProcessor lineProcessor = new LineProcessor(",
          "183:             source,",
          "184:             ctxForRefs.topLevelInputs(),",
          "185:             ctxForRefs.expressions(),",
          "186:             InputFormat.CSV,",
          "187:             new CopyFromParserProperties(true, true, ',', 0),",
          "188:             List.of()",
          "189:         );",
          "191:         assertThat(lineProcessor.moveNext()).isTrue();",
          "192:         assertThat(lineProcessor.currentElement().get(0)).isNull();",
          "193:         assertThat(lineProcessor.currentElement().get(1)).isEqualTo(\"Number of values exceeds number of keys in csv file at line 2\");",
          "194:         assertThat(lineProcessor.currentElement().get(2)).isNull();",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java||server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java": [
          "File: server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java -> server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: package io.crate.execution.engine.collect.sources;",
          "24: import static org.assertj.core.api.Assertions.assertThat;",
          "25: import static org.mockito.Mockito.mock;",
          "27: import java.nio.file.Files;",
          "28: import java.nio.file.Path;",
          "29: import java.util.List;",
          "30: import java.util.Map;",
          "31: import java.util.UUID;",
          "32: import java.util.concurrent.CompletableFuture;",
          "33: import java.util.concurrent.TimeUnit;",
          "35: import org.elasticsearch.common.settings.Settings;",
          "36: import org.junit.Test;",
          "38: import io.crate.analyze.CopyFromParserProperties;",
          "39: import io.crate.data.BatchIterator;",
          "40: import io.crate.data.Row;",
          "41: import io.crate.execution.dsl.phases.FileUriCollectPhase;",
          "42: import io.crate.execution.dsl.phases.FileUriCollectPhase.InputFormat;",
          "43: import io.crate.execution.dsl.projection.Projection;",
          "44: import io.crate.execution.engine.collect.CollectTask;",
          "45: import io.crate.expression.symbol.Literal;",
          "46: import io.crate.expression.symbol.Symbol;",
          "47: import io.crate.metadata.CoordinatorTxnCtx;",
          "48: import io.crate.metadata.Functions;",
          "49: import io.crate.metadata.NodeContext;",
          "50: import io.crate.test.integration.CrateDummyClusterServiceUnitTest;",
          "51: import io.crate.testing.TestingHelpers;",
          "52: import io.crate.types.DataTypes;",
          "53: import io.crate.user.User;",
          "54: import io.crate.user.UserLookup;",
          "56: public class FileCollectSourceTest extends CrateDummyClusterServiceUnitTest {",
          "59:     @Test",
          "60:     public void test_file_collect_source_returns_iterator_that_can_skip_lines() throws Exception {",
          "61:         List<String> targetColumns = List.of();",
          "62:         List<Projection> projections = List.of();",
          "63:         List<Symbol> toCollect = List.of(",
          "64:             TestingHelpers.createReference(\"_raw\", DataTypes.STRING)",
          "65:         );",
          "66:         Path tmpFile = createTempFile(\"tempfile1\", \".csv\");",
          "67:         Files.write(tmpFile, List.of(",
          "68:             \"garbage1\",",
          "69:             \"garbage2\",",
          "70:             \"x,y\",",
          "71:             \"1,2\",",
          "72:             \"10,20\"",
          "73:         ));",
          "74:         FileUriCollectPhase fileUriCollectPhase = new FileUriCollectPhase(",
          "75:             UUID.randomUUID(),",
          "76:             1,",
          "77:             \"copy from\",",
          "78:             List.of(),",
          "79:             Literal.of(tmpFile.toUri().toString()),",
          "80:             targetColumns,",
          "81:             toCollect,",
          "82:             projections,",
          "83:             null,",
          "84:             false,",
          "85:             new CopyFromParserProperties(true, true, ',', 2),",
          "86:             InputFormat.CSV,",
          "87:             Settings.EMPTY",
          "88:         );",
          "90:         UserLookup userLookup = () -> List.of(User.CRATE_USER);",
          "91:         FileCollectSource fileCollectSource = new FileCollectSource(",
          "92:             new NodeContext(new Functions(Map.of()), userLookup),",
          "93:             clusterService,",
          "94:             Map.of(),",
          "95:             THREAD_POOL",
          "96:         );",
          "98:         CompletableFuture<BatchIterator<Row>> iterator = fileCollectSource.getIterator(",
          "99:             CoordinatorTxnCtx.systemTransactionContext(),",
          "100:             fileUriCollectPhase,",
          "101:             mock(CollectTask.class),",
          "102:             false",
          "103:         );",
          "104:         assertThat(iterator).succeedsWithin(5, TimeUnit.SECONDS);",
          "105:         CompletableFuture<List<Object>> resultFuture = iterator.join()",
          "106:             .map(row -> row.get(0))",
          "107:             .toList();",
          "109:         assertThat(resultFuture).succeedsWithin(5, TimeUnit.SECONDS);",
          "110:         assertThat(resultFuture.join()).containsExactly(",
          "111:             \"{\\\"x\\\":\\\"1\\\",\\\"y\\\":\\\"2\\\"}\",",
          "112:             \"{\\\"x\\\":\\\"10\\\",\\\"y\\\":\\\"20\\\"}\"",
          "113:         );",
          "114:     }",
          "115: }",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/expression/reference/file/LineContextTest.java||server/src/test/java/io/crate/expression/reference/file/LineContextTest.java": [
          "File: server/src/test/java/io/crate/expression/reference/file/LineContextTest.java -> server/src/test/java/io/crate/expression/reference/file/LineContextTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import org.elasticsearch.test.ESTestCase;",
          "30: import org.junit.Test;",
          "32: import io.crate.metadata.ColumnIdent;",
          "34: public class LineContextTest extends ESTestCase {",
          "35:     @Test",
          "36:     public void testGet() {",
          "39:         String source = \"{\\\"name\\\": \\\"foo\\\", \\\"details\\\": {\\\"age\\\": 43}}\";",
          "40:         context.rawSource(source.getBytes(StandardCharsets.UTF_8));",
          "",
          "[Removed Lines]",
          "37:         LineContext context = new LineContext();",
          "",
          "[Added Lines]",
          "32: import io.crate.execution.engine.collect.files.FileReadingIterator.LineCursor;",
          "38:         LineContext context = new LineContext(new LineCursor());",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java": [
          "File: server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java -> server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
        ]
      }
    },
    {
      "candidate_hash": "267e58a838d461e66281944355917e132407e368",
      "candidate_info": {
        "commit_hash": "267e58a838d461e66281944355917e132407e368",
        "repo": "crate/crate",
        "commit_url": "https://github.com/crate/crate/commit/267e58a838d461e66281944355917e132407e368",
        "files": [
          "server/src/main/java/io/crate/exceptions/RoleUnknownException.java",
          "server/src/main/java/io/crate/role/DropRoleTask.java",
          "server/src/main/java/io/crate/role/RoleManagerService.java",
          "server/src/main/java/io/crate/role/TransportDropRoleAction.java",
          "server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "server/src/test/java/io/crate/role/TransportRoleActionTest.java"
        ],
        "message": "Refactor DropRoleTask\n\n - Do not expose methods(`dropRole`) for testing\n - Re-word `alreadyExists` field to better fit in drop role context\n   which lead to the following changes:\n     - Replace WriteRoleResponse to AcknowledgedResponse\n     - Allow RoleUnknownException to be streamed\n - Return the same ClusterState instance if not dropped",
        "before_after_code_files": [
          "server/src/main/java/io/crate/exceptions/RoleUnknownException.java||server/src/main/java/io/crate/exceptions/RoleUnknownException.java",
          "server/src/main/java/io/crate/role/DropRoleTask.java||server/src/main/java/io/crate/role/DropRoleTask.java",
          "server/src/main/java/io/crate/role/RoleManagerService.java||server/src/main/java/io/crate/role/RoleManagerService.java",
          "server/src/main/java/io/crate/role/TransportDropRoleAction.java||server/src/main/java/io/crate/role/TransportDropRoleAction.java",
          "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "server/src/test/java/io/crate/role/TransportRoleActionTest.java||server/src/test/java/io/crate/role/TransportRoleActionTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java"
          ],
          "candidate": [
            "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java"
          ]
        }
      },
      "candidate_diff": {
        "server/src/main/java/io/crate/exceptions/RoleUnknownException.java||server/src/main/java/io/crate/exceptions/RoleUnknownException.java": [
          "File: server/src/main/java/io/crate/exceptions/RoleUnknownException.java -> server/src/main/java/io/crate/exceptions/RoleUnknownException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.exceptions;",
          "24: import java.util.Collections;",
          "25: import java.util.List;",
          "26: import java.util.Locale;",
          "30:     public RoleUnknownException(String roleName) {",
          "31:         super(getMessage(Collections.singletonList(roleName)));",
          "",
          "[Removed Lines]",
          "28: public class RoleUnknownException extends RuntimeException implements ResourceUnknownException, UnscopedException {",
          "",
          "[Added Lines]",
          "24: import java.io.IOException;",
          "29: import org.elasticsearch.ElasticsearchException;",
          "30: import org.elasticsearch.common.io.stream.StreamInput;",
          "32: public class RoleUnknownException extends ElasticsearchException implements ResourceUnknownException, UnscopedException {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:         super(getMessage(roleNames));",
          "36:     }",
          "38:     private static String getMessage(List<String> roleNames) {",
          "40:         assert roleNames.isEmpty() == false : \"At least one username must be provided\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:     public RoleUnknownException(StreamInput streamInput) throws IOException {",
          "43:         super(streamInput);",
          "44:     }",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/role/DropRoleTask.java||server/src/main/java/io/crate/role/DropRoleTask.java": [
          "File: server/src/main/java/io/crate/role/DropRoleTask.java -> server/src/main/java/io/crate/role/DropRoleTask.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import java.util.List;",
          "27: import java.util.Locale;",
          "29: import org.elasticsearch.cluster.AckedClusterStateUpdateTask;",
          "30: import org.elasticsearch.cluster.ClusterState;",
          "31: import org.elasticsearch.cluster.metadata.Metadata;",
          "32: import org.elasticsearch.common.Priority;",
          "35: import io.crate.fdw.ServersMetadata;",
          "36: import io.crate.role.metadata.RolesMetadata;",
          "37: import io.crate.role.metadata.UsersMetadata;",
          "38: import io.crate.role.metadata.UsersPrivilegesMetadata;",
          "42:     private final DropRoleRequest request;",
          "45:     DropRoleTask(DropRoleRequest request) {",
          "46:         super(Priority.URGENT, request);",
          "",
          "[Removed Lines]",
          "34: import org.jetbrains.annotations.VisibleForTesting;",
          "40: public class DropRoleTask extends AckedClusterStateUpdateTask<WriteRoleResponse> {",
          "43:     private boolean alreadyExists = true;",
          "",
          "[Added Lines]",
          "29: import org.elasticsearch.action.support.master.AcknowledgedResponse;",
          "35: import io.crate.exceptions.RoleUnknownException;",
          "41: public class DropRoleTask extends AckedClusterStateUpdateTask<AcknowledgedResponse> {",
          "44:     private boolean isDropped;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:         Metadata currentMetadata = currentState.metadata();",
          "53:         ensureUserDoesNotOwnForeignServers(currentMetadata, request.roleName());",
          "54:         Metadata.Builder mdBuilder = Metadata.builder(currentMetadata);",
          "59:         return ClusterState.builder(currentState).metadata(mdBuilder).build();",
          "60:     }",
          "62:     @Override",
          "65:     }",
          "69:         RolesMetadata oldRolesMetadata = (RolesMetadata) mdBuilder.getCustom(RolesMetadata.TYPE);",
          "70:         UsersMetadata oldUsersMetadata = (UsersMetadata) mdBuilder.getCustom(UsersMetadata.TYPE);",
          "71:         if (oldUsersMetadata == null && oldRolesMetadata == null) {",
          "",
          "[Removed Lines]",
          "55:         alreadyExists = dropRole(",
          "56:             mdBuilder,",
          "57:             request.roleName()",
          "58:         );",
          "63:     protected WriteRoleResponse newResponse(boolean acknowledged) {",
          "64:         return new WriteRoleResponse(acknowledged, alreadyExists);",
          "67:     @VisibleForTesting",
          "68:     static boolean dropRole(Metadata.Builder mdBuilder, String roleNameToDrop) {",
          "",
          "[Added Lines]",
          "56:         isDropped = dropRole(mdBuilder, request);",
          "57:         if (!isDropped) {",
          "58:             if (request.ifExists()) {",
          "59:                 return currentState;",
          "60:             }",
          "61:             throw new RoleUnknownException(request.roleName());",
          "62:         }",
          "67:     protected AcknowledgedResponse newResponse(boolean acknowledged) {",
          "68:         return new AcknowledgedResponse(acknowledged && isDropped);",
          "71:     private static boolean dropRole(Metadata.Builder mdBuilder, DropRoleRequest request) {",
          "72:         String roleNameToDrop = request.roleName();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:         assert !newMetadata.equals(oldRolesMetadata) : \"must not be equal to guarantee the cluster change action\";",
          "84:         mdBuilder.putCustom(RolesMetadata.TYPE, newMetadata);",
          "87:     }",
          "89:     private static void ensureHasNoDependencies(Collection<Role> roles, String roleNameToDrop) {",
          "",
          "[Removed Lines]",
          "86:         return role != null;",
          "",
          "[Added Lines]",
          "90:         return true;",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/role/RoleManagerService.java||server/src/main/java/io/crate/role/RoleManagerService.java": [
          "File: server/src/main/java/io/crate/role/RoleManagerService.java -> server/src/main/java/io/crate/role/RoleManagerService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:     @Override",
          "128:     public CompletableFuture<Long> dropRole(String roleName, boolean suppressNotFoundError) {",
          "129:         ENSURE_DROP_ROLE_NOT_SUPERUSER.accept(roles.findUser(roleName));",
          "139:     }",
          "141:     @Override",
          "",
          "[Removed Lines]",
          "130:         return transportDropRoleAction.execute(new DropRoleRequest(roleName, suppressNotFoundError), r -> {",
          "131:             if (r.doesUserExist() == false) {",
          "132:                 if (suppressNotFoundError) {",
          "133:                     return 0L;",
          "134:                 }",
          "135:                 throw new RoleUnknownException(roleName);",
          "136:             }",
          "137:             return 1L;",
          "138:         });",
          "",
          "[Added Lines]",
          "130:         return transportDropRoleAction.execute(",
          "131:             new DropRoleRequest(roleName, suppressNotFoundError), r -> r.isAcknowledged() ? 1L : 0L);",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/role/TransportDropRoleAction.java||server/src/main/java/io/crate/role/TransportDropRoleAction.java": [
          "File: server/src/main/java/io/crate/role/TransportDropRoleAction.java -> server/src/main/java/io/crate/role/TransportDropRoleAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import org.elasticsearch.Version;",
          "28: import org.elasticsearch.action.ActionListener;",
          "29: import org.elasticsearch.action.support.master.TransportMasterNodeAction;",
          "30: import org.elasticsearch.cluster.ClusterState;",
          "31: import org.elasticsearch.cluster.block.ClusterBlockException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import org.elasticsearch.action.support.master.AcknowledgedResponse;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: import io.crate.replication.logical.LogicalReplicationService;",
          "43:     private final LogicalReplicationService logicalReplicationService;",
          "",
          "[Removed Lines]",
          "41: public class TransportDropRoleAction extends TransportMasterNodeAction<DropRoleRequest, WriteRoleResponse> {",
          "",
          "[Added Lines]",
          "42: public class TransportDropRoleAction extends TransportMasterNodeAction<DropRoleRequest, AcknowledgedResponse> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:     }",
          "65:     @Override",
          "68:     }",
          "70:     @Override",
          "71:     protected void masterOperation(DropRoleRequest request,",
          "72:                                    ClusterState state,",
          "75:         if (state.nodes().getMinNodeVersion().onOrAfter(Version.V_5_6_0) == false) {",
          "76:             throw new IllegalStateException(\"Cannot drop users/roles until all nodes are upgraded to 5.6\");",
          "",
          "[Removed Lines]",
          "66:     protected WriteRoleResponse read(StreamInput in) throws IOException {",
          "67:         return new WriteRoleResponse(in);",
          "73:                                    ActionListener<WriteRoleResponse> listener) throws Exception {",
          "",
          "[Added Lines]",
          "67:     protected AcknowledgedResponse read(StreamInput in) throws IOException {",
          "68:         return new AcknowledgedResponse(in);",
          "74:                                    ActionListener<AcknowledgedResponse> listener) throws Exception {",
          "",
          "---------------"
        ],
        "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java": [
          "File: server/src/main/java/org/elasticsearch/ElasticsearchException.java -> server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: import io.crate.common.CheckedFunction;",
          "54: import io.crate.common.exceptions.Exceptions;",
          "55: import io.crate.exceptions.ArrayViaDocValuesUnsupportedException;",
          "56: import io.crate.exceptions.SQLExceptions;",
          "57: import io.crate.fdw.ServerAlreadyExistsException;",
          "58: import io.crate.fdw.UserMappingAlreadyExists;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: import io.crate.exceptions.RoleUnknownException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1005:             io.crate.exceptions.RoleAlreadyExistsException.class,",
          "1006:             io.crate.exceptions.RoleAlreadyExistsException::new,",
          "1007:             180,",
          "1010:         final Class<? extends ElasticsearchException> exceptionClass;",
          "1011:         final CheckedFunction<StreamInput, ? extends ElasticsearchException, IOException> constructor;",
          "",
          "[Removed Lines]",
          "1008:             Version.V_5_7_0);",
          "",
          "[Added Lines]",
          "1009:             Version.V_5_7_0),",
          "1010:         ROLE_UNKNOWN(",
          "1011:             RoleUnknownException.class,",
          "1012:             RoleUnknownException::new,",
          "1013:             181,",
          "1014:             Version.V_5_7_0",
          "1015:         );",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/role/TransportRoleActionTest.java||server/src/test/java/io/crate/role/TransportRoleActionTest.java": [
          "File: server/src/test/java/io/crate/role/TransportRoleActionTest.java -> server/src/test/java/io/crate/role/TransportRoleActionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import static io.crate.role.metadata.RolesHelper.getSecureHash;",
          "31: import static io.crate.role.metadata.RolesHelper.userOf;",
          "32: import static io.crate.role.metadata.RolesHelper.usersMetadataOf;",
          "34: import static org.assertj.core.api.Assertions.assertThatThrownBy;",
          "36: import java.util.HashMap;",
          "",
          "[Removed Lines]",
          "33: import static io.crate.testing.Asserts.assertThat;",
          "",
          "[Added Lines]",
          "33: import static org.assertj.core.api.Assertions.assertThat;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: import org.junit.Test;",
          "48: import io.crate.exceptions.RoleAlreadyExistsException;",
          "49: import io.crate.exceptions.UnsupportedFeatureException;",
          "50: import io.crate.fdw.AddServerTask;",
          "51: import io.crate.fdw.CreateServerRequest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: import io.crate.exceptions.RoleUnknownException;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174:     @Test",
          "175:     public void testDropUserNoUsersAtAll() throws Exception {",
          "177:     }",
          "179:     @Test",
          "180:     public void testDropNonExistingUser() throws Exception {",
          "186:     }",
          "188:     @Test",
          "189:     public void testDropUser() throws Exception {",
          "195:     }",
          "197:     @Test",
          "",
          "[Removed Lines]",
          "176:         assertThat(DropRoleTask.dropRole(Metadata.builder(), \"root\")).isFalse();",
          "181:         boolean res = DropRoleTask.dropRole(",
          "182:                 Metadata.builder().putCustom(RolesMetadata.TYPE, new RolesMetadata(SINGLE_USER_ONLY)),",
          "183:                 \"trillian\"",
          "184:         );",
          "185:         assertThat(res).isFalse();",
          "190:         RolesMetadata metadata = new RolesMetadata(DUMMY_USERS);",
          "191:         Metadata.Builder mdBuilder = Metadata.builder().putCustom(RolesMetadata.TYPE, metadata);",
          "192:         boolean res = DropRoleTask.dropRole(mdBuilder, \"Arthur\");",
          "193:         assertThat(roles(mdBuilder)).containsExactlyEntriesOf(Map.of(\"Ford\", DUMMY_USERS.get(\"Ford\")));",
          "194:         assertThat(res).isTrue();",
          "",
          "[Added Lines]",
          "177:         var currentState = clusterService.state();",
          "178:         DropRoleTask dropRoleTask = new DropRoleTask(new DropRoleRequest(\"root\", true));",
          "179:         var updatedMetadata = dropRoleTask.execute(currentState).metadata();",
          "181:         assertThat(updatedMetadata).isSameAs(currentState.metadata());",
          "186:         Metadata metadata = Metadata.builder().putCustom(RolesMetadata.TYPE, new RolesMetadata(SINGLE_USER_ONLY)).build();",
          "187:         ClusterState clusterState = ClusterState.builder(clusterService.state()).metadata(metadata).build();",
          "189:         DropRoleTask dropRoleTask = new DropRoleTask(new DropRoleRequest(\"trillian\", false));",
          "190:         assertThatThrownBy(() -> dropRoleTask.execute(clusterState))",
          "191:             .isExactlyInstanceOf(RoleUnknownException.class)",
          "192:             .hasMessage(\"Role 'trillian' does not exist\");",
          "197:         Metadata metadata = Metadata.builder().putCustom(RolesMetadata.TYPE, new RolesMetadata(DUMMY_USERS)).build();",
          "198:         ClusterState clusterState = ClusterState.builder(clusterService.state()).metadata(metadata).build();",
          "200:         DropRoleTask dropRoleTask = new DropRoleTask(new DropRoleRequest(\"Arthur\", false));",
          "201:         var updatedMetadata = Metadata.builder(dropRoleTask.execute(clusterState).metadata());",
          "202:         assertThat(roles(updatedMetadata)).containsExactlyEntriesOf(Map.of(\"Ford\", DUMMY_USERS.get(\"Ford\")));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "206:         );",
          "207:         RolesMetadata metadata = new RolesMetadata(roles);",
          "208:         Metadata.Builder mdBuilder = Metadata.builder().putCustom(RolesMetadata.TYPE, metadata);",
          "210:             .isExactlyInstanceOf(IllegalArgumentException.class)",
          "211:             .hasMessage(\"Cannot drop ROLE: role2 as it is granted on role: role3\");",
          "212:     }",
          "",
          "[Removed Lines]",
          "209:         assertThatThrownBy(() -> DropRoleTask.dropRole(mdBuilder, \"role2\"))",
          "",
          "[Added Lines]",
          "217:         ClusterState clusterState = ClusterState.builder(clusterService.state()).metadata(mdBuilder.build()).build();",
          "219:         DropRoleTask dropRoleTask = new DropRoleTask(new DropRoleRequest(\"role2\", false));",
          "220:         assertThatThrownBy(() -> dropRoleTask.execute(clusterState))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "218:         Metadata.Builder mdBuilder = Metadata.builder()",
          "219:             .putCustom(UsersMetadata.TYPE, oldUsersMetadata)",
          "220:             .putCustom(RolesMetadata.TYPE, oldRolesMetadata);",
          "224:     }",
          "226:     @Test",
          "",
          "[Removed Lines]",
          "221:         boolean res = DropRoleTask.dropRole(mdBuilder, \"Arthur\");",
          "222:         assertThat(roles(mdBuilder)).containsExactlyEntriesOf(Map.of(\"Ford\", DUMMY_USERS.get(\"Ford\")));",
          "223:         assertThat(res).isTrue();",
          "",
          "[Added Lines]",
          "232:         ClusterState clusterState = ClusterState.builder(clusterService.state()).metadata(mdBuilder.build()).build();",
          "234:         DropRoleTask dropRoleTask = new DropRoleTask(new DropRoleRequest(\"Arthur\", false));",
          "235:         var updatedMetadata = Metadata.builder(dropRoleTask.execute(clusterState).metadata());",
          "236:         assertThat(roles(updatedMetadata)).containsExactlyEntriesOf(Map.of(\"Ford\", DUMMY_USERS.get(\"Ford\")));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1214b5a004cb27a086fe33db6335eff669b8450b",
      "candidate_info": {
        "commit_hash": "1214b5a004cb27a086fe33db6335eff669b8450b",
        "repo": "crate/crate",
        "commit_url": "https://github.com/crate/crate/commit/1214b5a004cb27a086fe33db6335eff669b8450b",
        "files": [
          "server/src/main/java/io/crate/exceptions/RoleUnknownException.java",
          "server/src/main/java/io/crate/role/DropRoleTask.java",
          "server/src/main/java/io/crate/role/RoleManagerService.java",
          "server/src/main/java/io/crate/role/TransportDropRoleAction.java",
          "server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "server/src/test/java/io/crate/role/TransportRoleActionTest.java"
        ],
        "message": "Revert \"Refactor DropRoleTask\"\n\nThis reverts commit 267e58a838d461e66281944355917e132407e368.",
        "before_after_code_files": [
          "server/src/main/java/io/crate/exceptions/RoleUnknownException.java||server/src/main/java/io/crate/exceptions/RoleUnknownException.java",
          "server/src/main/java/io/crate/role/DropRoleTask.java||server/src/main/java/io/crate/role/DropRoleTask.java",
          "server/src/main/java/io/crate/role/RoleManagerService.java||server/src/main/java/io/crate/role/RoleManagerService.java",
          "server/src/main/java/io/crate/role/TransportDropRoleAction.java||server/src/main/java/io/crate/role/TransportDropRoleAction.java",
          "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "server/src/test/java/io/crate/role/TransportRoleActionTest.java||server/src/test/java/io/crate/role/TransportRoleActionTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java"
          ],
          "candidate": [
            "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java"
          ]
        }
      },
      "candidate_diff": {
        "server/src/main/java/io/crate/exceptions/RoleUnknownException.java||server/src/main/java/io/crate/exceptions/RoleUnknownException.java": [
          "File: server/src/main/java/io/crate/exceptions/RoleUnknownException.java -> server/src/main/java/io/crate/exceptions/RoleUnknownException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.exceptions;",
          "25: import java.util.Collections;",
          "26: import java.util.List;",
          "27: import java.util.Locale;",
          "34:     public RoleUnknownException(String roleName) {",
          "35:         super(getMessage(Collections.singletonList(roleName)));",
          "",
          "[Removed Lines]",
          "24: import java.io.IOException;",
          "29: import org.elasticsearch.ElasticsearchException;",
          "30: import org.elasticsearch.common.io.stream.StreamInput;",
          "32: public class RoleUnknownException extends ElasticsearchException implements ResourceUnknownException, UnscopedException {",
          "",
          "[Added Lines]",
          "28: public class RoleUnknownException extends RuntimeException implements ResourceUnknownException, UnscopedException {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:         super(getMessage(roleNames));",
          "40:     }",
          "46:     private static String getMessage(List<String> roleNames) {",
          "48:         assert roleNames.isEmpty() == false : \"At least one username must be provided\";",
          "",
          "[Removed Lines]",
          "42:     public RoleUnknownException(StreamInput streamInput) throws IOException {",
          "43:         super(streamInput);",
          "44:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/role/DropRoleTask.java||server/src/main/java/io/crate/role/DropRoleTask.java": [
          "File: server/src/main/java/io/crate/role/DropRoleTask.java -> server/src/main/java/io/crate/role/DropRoleTask.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import java.util.List;",
          "27: import java.util.Locale;",
          "30: import org.elasticsearch.cluster.AckedClusterStateUpdateTask;",
          "31: import org.elasticsearch.cluster.ClusterState;",
          "32: import org.elasticsearch.cluster.metadata.Metadata;",
          "33: import org.elasticsearch.common.Priority;",
          "36: import io.crate.fdw.ServersMetadata;",
          "37: import io.crate.role.metadata.RolesMetadata;",
          "38: import io.crate.role.metadata.UsersMetadata;",
          "39: import io.crate.role.metadata.UsersPrivilegesMetadata;",
          "43:     private final DropRoleRequest request;",
          "46:     DropRoleTask(DropRoleRequest request) {",
          "47:         super(Priority.URGENT, request);",
          "",
          "[Removed Lines]",
          "29: import org.elasticsearch.action.support.master.AcknowledgedResponse;",
          "35: import io.crate.exceptions.RoleUnknownException;",
          "41: public class DropRoleTask extends AckedClusterStateUpdateTask<AcknowledgedResponse> {",
          "44:     private boolean isDropped;",
          "",
          "[Added Lines]",
          "34: import org.jetbrains.annotations.VisibleForTesting;",
          "40: public class DropRoleTask extends AckedClusterStateUpdateTask<WriteRoleResponse> {",
          "43:     private boolean alreadyExists = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:         Metadata currentMetadata = currentState.metadata();",
          "54:         ensureUserDoesNotOwnForeignServers(currentMetadata, request.roleName());",
          "55:         Metadata.Builder mdBuilder = Metadata.builder(currentMetadata);",
          "63:         return ClusterState.builder(currentState).metadata(mdBuilder).build();",
          "64:     }",
          "66:     @Override",
          "69:     }",
          "74:         RolesMetadata oldRolesMetadata = (RolesMetadata) mdBuilder.getCustom(RolesMetadata.TYPE);",
          "75:         UsersMetadata oldUsersMetadata = (UsersMetadata) mdBuilder.getCustom(UsersMetadata.TYPE);",
          "76:         if (oldUsersMetadata == null && oldRolesMetadata == null) {",
          "",
          "[Removed Lines]",
          "56:         isDropped = dropRole(mdBuilder, request);",
          "57:         if (!isDropped) {",
          "58:             if (request.ifExists()) {",
          "59:                 return currentState;",
          "60:             }",
          "61:             throw new RoleUnknownException(request.roleName());",
          "62:         }",
          "67:     protected AcknowledgedResponse newResponse(boolean acknowledged) {",
          "68:         return new AcknowledgedResponse(acknowledged && isDropped);",
          "71:     private static boolean dropRole(Metadata.Builder mdBuilder, DropRoleRequest request) {",
          "72:         String roleNameToDrop = request.roleName();",
          "",
          "[Added Lines]",
          "55:         alreadyExists = dropRole(",
          "56:             mdBuilder,",
          "57:             request.roleName()",
          "58:         );",
          "63:     protected WriteRoleResponse newResponse(boolean acknowledged) {",
          "64:         return new WriteRoleResponse(acknowledged, alreadyExists);",
          "67:     @VisibleForTesting",
          "68:     static boolean dropRole(Metadata.Builder mdBuilder, String roleNameToDrop) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:         assert !newMetadata.equals(oldRolesMetadata) : \"must not be equal to guarantee the cluster change action\";",
          "89:         mdBuilder.putCustom(RolesMetadata.TYPE, newMetadata);",
          "91:     }",
          "93:     private static void ensureHasNoDependencies(Collection<Role> roles, String roleNameToDrop) {",
          "",
          "[Removed Lines]",
          "90:         return true;",
          "",
          "[Added Lines]",
          "86:         return role != null;",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/role/RoleManagerService.java||server/src/main/java/io/crate/role/RoleManagerService.java": [
          "File: server/src/main/java/io/crate/role/RoleManagerService.java -> server/src/main/java/io/crate/role/RoleManagerService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:     @Override",
          "128:     public CompletableFuture<Long> dropRole(String roleName, boolean suppressNotFoundError) {",
          "129:         ENSURE_DROP_ROLE_NOT_SUPERUSER.accept(roles.findUser(roleName));",
          "132:     }",
          "134:     @Override",
          "",
          "[Removed Lines]",
          "130:         return transportDropRoleAction.execute(",
          "131:             new DropRoleRequest(roleName, suppressNotFoundError), r -> r.isAcknowledged() ? 1L : 0L);",
          "",
          "[Added Lines]",
          "130:         return transportDropRoleAction.execute(new DropRoleRequest(roleName, suppressNotFoundError), r -> {",
          "131:             if (r.doesUserExist() == false) {",
          "132:                 if (suppressNotFoundError) {",
          "133:                     return 0L;",
          "134:                 }",
          "135:                 throw new RoleUnknownException(roleName);",
          "136:             }",
          "137:             return 1L;",
          "138:         });",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/role/TransportDropRoleAction.java||server/src/main/java/io/crate/role/TransportDropRoleAction.java": [
          "File: server/src/main/java/io/crate/role/TransportDropRoleAction.java -> server/src/main/java/io/crate/role/TransportDropRoleAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import org.elasticsearch.Version;",
          "28: import org.elasticsearch.action.ActionListener;",
          "30: import org.elasticsearch.action.support.master.TransportMasterNodeAction;",
          "31: import org.elasticsearch.cluster.ClusterState;",
          "32: import org.elasticsearch.cluster.block.ClusterBlockException;",
          "",
          "[Removed Lines]",
          "29: import org.elasticsearch.action.support.master.AcknowledgedResponse;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: import io.crate.replication.logical.LogicalReplicationService;",
          "44:     private final LogicalReplicationService logicalReplicationService;",
          "",
          "[Removed Lines]",
          "42: public class TransportDropRoleAction extends TransportMasterNodeAction<DropRoleRequest, AcknowledgedResponse> {",
          "",
          "[Added Lines]",
          "41: public class TransportDropRoleAction extends TransportMasterNodeAction<DropRoleRequest, WriteRoleResponse> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:     }",
          "66:     @Override",
          "69:     }",
          "71:     @Override",
          "72:     protected void masterOperation(DropRoleRequest request,",
          "73:                                    ClusterState state,",
          "76:         if (state.nodes().getMinNodeVersion().onOrAfter(Version.V_5_6_0) == false) {",
          "77:             throw new IllegalStateException(\"Cannot drop users/roles until all nodes are upgraded to 5.6\");",
          "",
          "[Removed Lines]",
          "67:     protected AcknowledgedResponse read(StreamInput in) throws IOException {",
          "68:         return new AcknowledgedResponse(in);",
          "74:                                    ActionListener<AcknowledgedResponse> listener) throws Exception {",
          "",
          "[Added Lines]",
          "66:     protected WriteRoleResponse read(StreamInput in) throws IOException {",
          "67:         return new WriteRoleResponse(in);",
          "73:                                    ActionListener<WriteRoleResponse> listener) throws Exception {",
          "",
          "---------------"
        ],
        "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java": [
          "File: server/src/main/java/org/elasticsearch/ElasticsearchException.java -> server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: import io.crate.common.CheckedFunction;",
          "54: import io.crate.common.exceptions.Exceptions;",
          "55: import io.crate.exceptions.ArrayViaDocValuesUnsupportedException;",
          "57: import io.crate.exceptions.SQLExceptions;",
          "58: import io.crate.fdw.ServerAlreadyExistsException;",
          "59: import io.crate.fdw.UserMappingAlreadyExists;",
          "",
          "[Removed Lines]",
          "56: import io.crate.exceptions.RoleUnknownException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1006:             io.crate.exceptions.RoleAlreadyExistsException.class,",
          "1007:             io.crate.exceptions.RoleAlreadyExistsException::new,",
          "1008:             180,",
          "1017:         final Class<? extends ElasticsearchException> exceptionClass;",
          "1018:         final CheckedFunction<StreamInput, ? extends ElasticsearchException, IOException> constructor;",
          "",
          "[Removed Lines]",
          "1009:             Version.V_5_7_0),",
          "1010:         ROLE_UNKNOWN(",
          "1011:             RoleUnknownException.class,",
          "1012:             RoleUnknownException::new,",
          "1013:             181,",
          "1014:             Version.V_5_7_0",
          "1015:         );",
          "",
          "[Added Lines]",
          "1008:             Version.V_5_7_0);",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/role/TransportRoleActionTest.java||server/src/test/java/io/crate/role/TransportRoleActionTest.java": [
          "File: server/src/test/java/io/crate/role/TransportRoleActionTest.java -> server/src/test/java/io/crate/role/TransportRoleActionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import static io.crate.role.metadata.RolesHelper.getSecureHash;",
          "31: import static io.crate.role.metadata.RolesHelper.userOf;",
          "32: import static io.crate.role.metadata.RolesHelper.usersMetadataOf;",
          "34: import static org.assertj.core.api.Assertions.assertThatThrownBy;",
          "36: import java.util.HashMap;",
          "",
          "[Removed Lines]",
          "33: import static org.assertj.core.api.Assertions.assertThat;",
          "",
          "[Added Lines]",
          "33: import static io.crate.testing.Asserts.assertThat;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: import org.junit.Test;",
          "48: import io.crate.exceptions.RoleAlreadyExistsException;",
          "50: import io.crate.exceptions.UnsupportedFeatureException;",
          "51: import io.crate.fdw.AddServerTask;",
          "52: import io.crate.fdw.CreateServerRequest;",
          "",
          "[Removed Lines]",
          "49: import io.crate.exceptions.RoleUnknownException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "175:     @Test",
          "176:     public void testDropUserNoUsersAtAll() throws Exception {",
          "182:     }",
          "184:     @Test",
          "185:     public void testDropNonExistingUser() throws Exception {",
          "193:     }",
          "195:     @Test",
          "196:     public void testDropUser() throws Exception {",
          "203:     }",
          "205:     @Test",
          "",
          "[Removed Lines]",
          "177:         var currentState = clusterService.state();",
          "178:         DropRoleTask dropRoleTask = new DropRoleTask(new DropRoleRequest(\"root\", true));",
          "179:         var updatedMetadata = dropRoleTask.execute(currentState).metadata();",
          "181:         assertThat(updatedMetadata).isSameAs(currentState.metadata());",
          "186:         Metadata metadata = Metadata.builder().putCustom(RolesMetadata.TYPE, new RolesMetadata(SINGLE_USER_ONLY)).build();",
          "187:         ClusterState clusterState = ClusterState.builder(clusterService.state()).metadata(metadata).build();",
          "189:         DropRoleTask dropRoleTask = new DropRoleTask(new DropRoleRequest(\"trillian\", false));",
          "190:         assertThatThrownBy(() -> dropRoleTask.execute(clusterState))",
          "191:             .isExactlyInstanceOf(RoleUnknownException.class)",
          "192:             .hasMessage(\"Role 'trillian' does not exist\");",
          "197:         Metadata metadata = Metadata.builder().putCustom(RolesMetadata.TYPE, new RolesMetadata(DUMMY_USERS)).build();",
          "198:         ClusterState clusterState = ClusterState.builder(clusterService.state()).metadata(metadata).build();",
          "200:         DropRoleTask dropRoleTask = new DropRoleTask(new DropRoleRequest(\"Arthur\", false));",
          "201:         var updatedMetadata = Metadata.builder(dropRoleTask.execute(clusterState).metadata());",
          "202:         assertThat(roles(updatedMetadata)).containsExactlyEntriesOf(Map.of(\"Ford\", DUMMY_USERS.get(\"Ford\")));",
          "",
          "[Added Lines]",
          "176:         assertThat(DropRoleTask.dropRole(Metadata.builder(), \"root\")).isFalse();",
          "181:         boolean res = DropRoleTask.dropRole(",
          "182:                 Metadata.builder().putCustom(RolesMetadata.TYPE, new RolesMetadata(SINGLE_USER_ONLY)),",
          "183:                 \"trillian\"",
          "184:         );",
          "185:         assertThat(res).isFalse();",
          "190:         RolesMetadata metadata = new RolesMetadata(DUMMY_USERS);",
          "191:         Metadata.Builder mdBuilder = Metadata.builder().putCustom(RolesMetadata.TYPE, metadata);",
          "192:         boolean res = DropRoleTask.dropRole(mdBuilder, \"Arthur\");",
          "193:         assertThat(roles(mdBuilder)).containsExactlyEntriesOf(Map.of(\"Ford\", DUMMY_USERS.get(\"Ford\")));",
          "194:         assertThat(res).isTrue();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "214:         );",
          "215:         RolesMetadata metadata = new RolesMetadata(roles);",
          "216:         Metadata.Builder mdBuilder = Metadata.builder().putCustom(RolesMetadata.TYPE, metadata);",
          "221:             .isExactlyInstanceOf(IllegalArgumentException.class)",
          "222:             .hasMessage(\"Cannot drop ROLE: role2 as it is granted on role: role3\");",
          "223:     }",
          "",
          "[Removed Lines]",
          "217:         ClusterState clusterState = ClusterState.builder(clusterService.state()).metadata(mdBuilder.build()).build();",
          "219:         DropRoleTask dropRoleTask = new DropRoleTask(new DropRoleRequest(\"role2\", false));",
          "220:         assertThatThrownBy(() -> dropRoleTask.execute(clusterState))",
          "",
          "[Added Lines]",
          "209:         assertThatThrownBy(() -> DropRoleTask.dropRole(mdBuilder, \"role2\"))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "229:         Metadata.Builder mdBuilder = Metadata.builder()",
          "230:             .putCustom(UsersMetadata.TYPE, oldUsersMetadata)",
          "231:             .putCustom(RolesMetadata.TYPE, oldRolesMetadata);",
          "237:     }",
          "239:     @Test",
          "",
          "[Removed Lines]",
          "232:         ClusterState clusterState = ClusterState.builder(clusterService.state()).metadata(mdBuilder.build()).build();",
          "234:         DropRoleTask dropRoleTask = new DropRoleTask(new DropRoleRequest(\"Arthur\", false));",
          "235:         var updatedMetadata = Metadata.builder(dropRoleTask.execute(clusterState).metadata());",
          "236:         assertThat(roles(updatedMetadata)).containsExactlyEntriesOf(Map.of(\"Ford\", DUMMY_USERS.get(\"Ford\")));",
          "",
          "[Added Lines]",
          "221:         boolean res = DropRoleTask.dropRole(mdBuilder, \"Arthur\");",
          "222:         assertThat(roles(mdBuilder)).containsExactlyEntriesOf(Map.of(\"Ford\", DUMMY_USERS.get(\"Ford\")));",
          "223:         assertThat(res).isTrue();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "23c610017e13e13065cd94cbc00064f514f60949",
      "candidate_info": {
        "commit_hash": "23c610017e13e13065cd94cbc00064f514f60949",
        "repo": "crate/crate",
        "commit_url": "https://github.com/crate/crate/commit/23c610017e13e13065cd94cbc00064f514f60949",
        "files": [
          "docs/interfaces/http.rst",
          "server/src/main/java/io/crate/fdw/ServerAlreadyExistsException.java",
          "server/src/main/java/io/crate/fdw/UserMappingAlreadyExists.java",
          "server/src/main/java/io/crate/protocols/postgres/PGError.java",
          "server/src/main/java/io/crate/rest/action/HttpError.java",
          "server/src/main/java/io/crate/rest/action/HttpErrorStatus.java",
          "server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "server/src/test/java/io/crate/integrationtests/ForeignDataWrapperITest.java"
        ],
        "message": "Make Server/UserMapping already exists errors streamable",
        "before_after_code_files": [
          "server/src/main/java/io/crate/fdw/ServerAlreadyExistsException.java||server/src/main/java/io/crate/fdw/ServerAlreadyExistsException.java",
          "server/src/main/java/io/crate/fdw/UserMappingAlreadyExists.java||server/src/main/java/io/crate/fdw/UserMappingAlreadyExists.java",
          "server/src/main/java/io/crate/protocols/postgres/PGError.java||server/src/main/java/io/crate/protocols/postgres/PGError.java",
          "server/src/main/java/io/crate/rest/action/HttpError.java||server/src/main/java/io/crate/rest/action/HttpError.java",
          "server/src/main/java/io/crate/rest/action/HttpErrorStatus.java||server/src/main/java/io/crate/rest/action/HttpErrorStatus.java",
          "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "server/src/test/java/io/crate/integrationtests/ForeignDataWrapperITest.java||server/src/test/java/io/crate/integrationtests/ForeignDataWrapperITest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java"
          ],
          "candidate": [
            "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java"
          ]
        }
      },
      "candidate_diff": {
        "server/src/main/java/io/crate/fdw/ServerAlreadyExistsException.java||server/src/main/java/io/crate/fdw/ServerAlreadyExistsException.java": [
          "File: server/src/main/java/io/crate/fdw/ServerAlreadyExistsException.java -> server/src/main/java/io/crate/fdw/ServerAlreadyExistsException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.fdw;",
          "24: import java.util.Locale;",
          "26: import io.crate.exceptions.ClusterScopeException;",
          "27: import io.crate.exceptions.ConflictException;",
          "29: public class ServerAlreadyExistsException",
          "31:     implements ConflictException, ClusterScopeException {",
          "33:     public ServerAlreadyExistsException(String name) {",
          "34:         super(String.format(Locale.ENGLISH, \"Server '%s' already exists\", name));",
          "35:     }",
          "36: }",
          "",
          "[Removed Lines]",
          "30:     extends RuntimeException",
          "",
          "[Added Lines]",
          "24: import java.io.IOException;",
          "27: import org.elasticsearch.ElasticsearchException;",
          "28: import org.elasticsearch.common.io.stream.StreamInput;",
          "32: import io.crate.protocols.postgres.PGErrorStatus;",
          "33: import io.crate.rest.action.HttpErrorStatus;",
          "36:     extends ElasticsearchException",
          "43:     public ServerAlreadyExistsException(StreamInput in) throws IOException {",
          "44:         super(in);",
          "45:     }",
          "47:     @Override",
          "48:     public PGErrorStatus pgErrorStatus() {",
          "49:         return PGErrorStatus.DUPLICATE_OBJECT;",
          "50:     }",
          "52:     @Override",
          "53:     public HttpErrorStatus httpErrorStatus() {",
          "54:         return HttpErrorStatus.DUPLICATE_OBJECT;",
          "55:     }",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/fdw/UserMappingAlreadyExists.java||server/src/main/java/io/crate/fdw/UserMappingAlreadyExists.java": [
          "File: server/src/main/java/io/crate/fdw/UserMappingAlreadyExists.java -> server/src/main/java/io/crate/fdw/UserMappingAlreadyExists.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.fdw;",
          "24: import java.util.Locale;",
          "26: import io.crate.exceptions.ClusterScopeException;",
          "27: import io.crate.exceptions.ConflictException;",
          "30:     implements ConflictException, ClusterScopeException {",
          "32:     public UserMappingAlreadyExists(String userName, String serverName) {",
          "33:         super(String.format(",
          "34:             Locale.ENGLISH,",
          "36:             userName,",
          "37:             serverName",
          "38:         ));",
          "39:     }",
          "40: }",
          "",
          "[Removed Lines]",
          "29: public class UserMappingAlreadyExists extends RuntimeException",
          "35:             \"CREATE USER MAPPING for '%s' and server '%s' already exists\",",
          "",
          "[Added Lines]",
          "24: import java.io.IOException;",
          "27: import org.elasticsearch.ElasticsearchException;",
          "28: import org.elasticsearch.common.io.stream.StreamInput;",
          "32: import io.crate.protocols.postgres.PGErrorStatus;",
          "33: import io.crate.rest.action.HttpErrorStatus;",
          "35: public class UserMappingAlreadyExists extends ElasticsearchException",
          "41:             \"USER MAPPING for '%s' and server '%s' already exists\",",
          "47:     public UserMappingAlreadyExists(StreamInput in) throws IOException {",
          "48:         super(in);",
          "49:     }",
          "51:     @Override",
          "52:     public PGErrorStatus pgErrorStatus() {",
          "53:         return PGErrorStatus.DUPLICATE_OBJECT;",
          "54:     }",
          "56:     @Override",
          "57:     public HttpErrorStatus httpErrorStatus() {",
          "58:         return HttpErrorStatus.DUPLICATE_OBJECT;",
          "59:     }",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/protocols/postgres/PGError.java||server/src/main/java/io/crate/protocols/postgres/PGError.java": [
          "File: server/src/main/java/io/crate/protocols/postgres/PGError.java -> server/src/main/java/io/crate/protocols/postgres/PGError.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.protocols.postgres;",
          "24: import io.crate.exceptions.AmbiguousColumnAliasException;",
          "25: import io.crate.exceptions.AmbiguousColumnException;",
          "26: import io.crate.exceptions.ColumnUnknownException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.nio.charset.StandardCharsets;",
          "26: import org.elasticsearch.ElasticsearchException;",
          "27: import org.jetbrains.annotations.Nullable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: import io.crate.exceptions.UnsupportedFunctionException;",
          "33: import io.crate.exceptions.UserDefinedFunctionUnknownException;",
          "39: public class PGError {",
          "",
          "[Removed Lines]",
          "35: import org.jetbrains.annotations.Nullable;",
          "36: import java.nio.charset.StandardCharsets;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:             status = PGErrorStatus.AMBIGUOUS_ALIAS;",
          "99:         } else if (throwable instanceof UserDefinedFunctionUnknownException) {",
          "100:             status = PGErrorStatus.UNDEFINED_FUNCTION;",
          "101:         }",
          "102:         return new PGError(status, SQLExceptions.messageOf(throwable), throwable);",
          "103:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:         } else if (throwable instanceof ElasticsearchException ex) {",
          "104:             status = ex.pgErrorStatus();",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/rest/action/HttpError.java||server/src/main/java/io/crate/rest/action/HttpError.java": [
          "File: server/src/main/java/io/crate/rest/action/HttpError.java -> server/src/main/java/io/crate/rest/action/HttpError.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import java.io.IOException;",
          "28: import org.elasticsearch.common.xcontent.XContentBuilder;",
          "29: import org.elasticsearch.common.xcontent.json.JsonXContent;",
          "30: import org.elasticsearch.index.mapper.MapperParsingException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.elasticsearch.ElasticsearchException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203:             httpErrorStatus = HttpErrorStatus.QUERY_KILLED_BY_STATEMENT;",
          "204:         } else if (throwable instanceof UnavailableShardsException) {",
          "205:             httpErrorStatus = HttpErrorStatus.ONE_OR_MORE_SHARDS_NOT_AVAILABLE;",
          "206:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:         } else if (throwable instanceof ElasticsearchException ex) {",
          "208:             httpErrorStatus = ex.httpErrorStatus();",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/rest/action/HttpErrorStatus.java||server/src/main/java/io/crate/rest/action/HttpErrorStatus.java": [
          "File: server/src/main/java/io/crate/rest/action/HttpErrorStatus.java -> server/src/main/java/io/crate/rest/action/HttpErrorStatus.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     PARTITION_FOR_THE_SAME_VALUE_EXISTS_ALREADY(HttpResponseStatus.CONFLICT,4097),",
          "57:     USER_DEFINED_FUNCTION_WITH_SAME_SIGNATURE_EXISTS_ALREADY(HttpResponseStatus.CONFLICT,4098),",
          "58:     USER_WITH_SAME_NAME_EXISTS_ALREADY(HttpResponseStatus.CONFLICT,4099),",
          "59:     UNHANDLED_SERVER_ERROR(HttpResponseStatus.INTERNAL_SERVER_ERROR, 5000),",
          "60:     EXECUTION_OF_TASK_FAILED(HttpResponseStatus.INTERNAL_SERVER_ERROR,5001),",
          "61:     ONE_OR_MORE_SHARDS_NOT_AVAILABLE(HttpResponseStatus.INTERNAL_SERVER_ERROR,5002),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:     DUPLICATE_OBJECT(HttpResponseStatus.CONFLICT, 4100),",
          "",
          "---------------"
        ],
        "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java": [
          "File: server/src/main/java/org/elasticsearch/ElasticsearchException.java -> server/src/main/java/org/elasticsearch/ElasticsearchException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: import io.crate.common.exceptions.Exceptions;",
          "55: import io.crate.exceptions.ArrayViaDocValuesUnsupportedException;",
          "56: import io.crate.exceptions.SQLExceptions;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: import io.crate.fdw.ServerAlreadyExistsException;",
          "58: import io.crate.fdw.UserMappingAlreadyExists;",
          "59: import io.crate.protocols.postgres.PGErrorStatus;",
          "60: import io.crate.rest.action.HttpErrorStatus;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:         this.metadata.put(key, values);",
          "158:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:     public PGErrorStatus pgErrorStatus() {",
          "165:         return PGErrorStatus.INTERNAL_ERROR;",
          "166:     }",
          "168:     public HttpErrorStatus httpErrorStatus() {",
          "169:         return HttpErrorStatus.UNHANDLED_SERVER_ERROR;",
          "170:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "978:             io.crate.exceptions.UnauthorizedException.class,",
          "979:             io.crate.exceptions.UnauthorizedException::new,",
          "980:             177,",
          "983:         final Class<? extends ElasticsearchException> exceptionClass;",
          "984:         final CheckedFunction<StreamInput, ? extends ElasticsearchException, IOException> constructor;",
          "",
          "[Removed Lines]",
          "981:             Version.V_5_7_0);",
          "",
          "[Added Lines]",
          "993:             Version.V_5_7_0),",
          "994:         SERVER_ALREADY_EXISTS(",
          "995:             ServerAlreadyExistsException.class,",
          "996:             ServerAlreadyExistsException::new,",
          "997:             178,",
          "998:             Version.V_5_7_0),",
          "999:         USER_MAPPING_ALREADY_EXISTS(",
          "1000:             UserMappingAlreadyExists.class,",
          "1001:             UserMappingAlreadyExists::new,",
          "1002:             179,",
          "1003:             Version.V_5_7_0) ;",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/ForeignDataWrapperITest.java||server/src/test/java/io/crate/integrationtests/ForeignDataWrapperITest.java": [
          "File: server/src/test/java/io/crate/integrationtests/ForeignDataWrapperITest.java -> server/src/test/java/io/crate/integrationtests/ForeignDataWrapperITest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.integrationtests;",
          "24: import static io.crate.testing.Asserts.assertThat;",
          "25: import static org.assertj.core.api.Assertions.assertThatThrownBy;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import static io.crate.testing.Asserts.assertSQLError;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: import org.junit.After;",
          "30: import org.junit.Test;",
          "32: import io.crate.protocols.postgres.PostgresNetty;",
          "33: import io.crate.role.Role;",
          "34: import io.crate.role.Roles;",
          "36: public class ForeignDataWrapperITest extends IntegTestCase {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import io.crate.protocols.postgres.PGErrorStatus;",
          "37: import io.netty.handler.codec.http.HttpResponseStatus;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:         PostgresNetty postgresNetty = cluster().getInstance(PostgresNetty.class);",
          "70:         int port = postgresNetty.boundAddress().publishAddress().getPort();",
          "71:         String url = \"jdbc:postgresql://127.0.0.1:\" + port + '/';",
          "77:         execute(\"select foreign_server_name, foreign_data_wrapper_name from information_schema.foreign_servers\");",
          "78:         assertThat(response).hasRows(",
          "",
          "[Removed Lines]",
          "72:         execute(",
          "73:             \"create server pg foreign data wrapper jdbc options (url ?)\",",
          "74:             new Object[] { url }",
          "75:         );",
          "",
          "[Added Lines]",
          "75:         String createServerStmt = \"create server pg foreign data wrapper jdbc options (url ?)\";",
          "76:         execute(createServerStmt, new Object[] { url });",
          "77:         assertSQLError(() -> execute(createServerStmt, new Object[] { url }))",
          "78:             .hasPGError(PGErrorStatus.DUPLICATE_OBJECT)",
          "79:             .hasHTTPError(HttpResponseStatus.CONFLICT, 4100);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "107:             .hasMessageContaining(\"already exists.\");",
          "111:         execute(\"explain select * from doc.dummy order by x\");",
          "112:         assertThat(response).hasLines(",
          "113:             \"OrderBy[x ASC] (rows=unknown)\",",
          "",
          "[Removed Lines]",
          "110:         execute(\"create user mapping for trillian server pg options (\\\"user\\\" 'arthur', password 'not-so-secret')\");",
          "",
          "[Added Lines]",
          "114:         String createUserMappingStmt =",
          "115:             \"create user mapping for trillian server pg options (\\\"user\\\" 'arthur', password 'not-so-secret')\";",
          "116:         execute(createUserMappingStmt);",
          "117:         assertSQLError(() -> execute(createUserMappingStmt))",
          "118:             .hasPGError(PGErrorStatus.DUPLICATE_OBJECT)",
          "119:             .hasHTTPError(HttpResponseStatus.CONFLICT, 4100)",
          "120:             .hasMessageContaining(\"USER MAPPING for 'trillian' and server 'pg' already exists\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}