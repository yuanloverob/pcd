{
  "cve_id": "CVE-2017-15703",
  "cve_desc": "Any authenticated user (valid client certificate but without ACL permissions) could upload a template which contained malicious code and caused a denial of service via Java deserialization attack. The fix to properly handle Java deserialization was applied on the Apache NiFi 1.4.0 release. Users running a prior 1.x release should upgrade to the appropriate release.",
  "repo": "apache/nifi",
  "patch_hash": "9e2c7be7d3c6a380c5f61074d9a5a690b617c3dc",
  "patch_info": {
    "commit_hash": "9e2c7be7d3c6a380c5f61074d9a5a690b617c3dc",
    "repo": "apache/nifi",
    "commit_url": "https://github.com/apache/nifi/commit/9e2c7be7d3c6a380c5f61074d9a5a690b617c3dc",
    "files": [
      "nifi-commons/nifi-security-utils/pom.xml",
      "nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/xml/XmlUtils.java",
      "nifi-commons/nifi-security-utils/src/test/groovy/org/apache/nifi/security/xml/XmlUtilsTest.groovy",
      "nifi-commons/nifi-security-utils/src/test/resources/xxe_template.xml",
      "nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/cluster/ClusterNodeInformation.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/pom.xml",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileAccessPolicyProvider.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileUserGroupProvider.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/HeartbeatPayload.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/JaxbProtocolContext.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/cluster/BulletinsPayload.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/TemplateUtils.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/StandardSnippetDeserializer.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/persistence/TemplateSerializerTest.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/pom.xml",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/spring/LoginIdentityProviderFactoryBean.java",
      "nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/pom.xml",
      "nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java"
    ],
    "message": "NIFI-4353 - Added XmlUtils class. - Added unit test. - Added XXE test resource. - Refactored JAXB unmarshalling globally to prevent XXE attacks. - Refactored duplicated/legacy code. - Cleaned up commented code. - Switched from FileInputStream back to StreamSource in AuthorizerFactoryBean. - This closes #2134",
    "before_after_code_files": [
      "nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/xml/XmlUtils.java||nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/xml/XmlUtils.java",
      "nifi-commons/nifi-security-utils/src/test/groovy/org/apache/nifi/security/xml/XmlUtilsTest.groovy||nifi-commons/nifi-security-utils/src/test/groovy/org/apache/nifi/security/xml/XmlUtilsTest.groovy",
      "nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/cluster/ClusterNodeInformation.java||nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/cluster/ClusterNodeInformation.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileAccessPolicyProvider.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileAccessPolicyProvider.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileUserGroupProvider.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileUserGroupProvider.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/HeartbeatPayload.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/HeartbeatPayload.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/JaxbProtocolContext.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/JaxbProtocolContext.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/cluster/BulletinsPayload.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/cluster/BulletinsPayload.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/TemplateUtils.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/TemplateUtils.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/StandardSnippetDeserializer.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/StandardSnippetDeserializer.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/persistence/TemplateSerializerTest.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/persistence/TemplateSerializerTest.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/spring/LoginIdentityProviderFactoryBean.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/spring/LoginIdentityProviderFactoryBean.java",
      "nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java||nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java"
    ]
  },
  "patch_diff": {
    "nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/xml/XmlUtils.java||nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/xml/XmlUtils.java": [
      "File: nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/xml/XmlUtils.java -> nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/xml/XmlUtils.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: package org.apache.nifi.security.xml;",
      "19: import javax.xml.stream.XMLInputFactory;",
      "20: import javax.xml.stream.XMLStreamException;",
      "21: import javax.xml.stream.XMLStreamReader;",
      "22: import javax.xml.transform.stream.StreamSource;",
      "23: import java.io.InputStream;",
      "25: public class XmlUtils {",
      "27:     public static XMLStreamReader createSafeReader(InputStream inputStream) throws XMLStreamException {",
      "28:         if (inputStream == null) {",
      "29:             throw new IllegalArgumentException(\"The provided input stream cannot be null\");",
      "30:         }",
      "31:         return createSafeReader(new StreamSource(inputStream));",
      "32:     }",
      "34:     public static XMLStreamReader createSafeReader(StreamSource source) throws XMLStreamException {",
      "35:         if (source == null) {",
      "36:             throw new IllegalArgumentException(\"The provided source cannot be null\");",
      "37:         }",
      "39:         XMLInputFactory xif = XMLInputFactory.newFactory();",
      "40:         xif.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);",
      "41:         xif.setProperty(XMLInputFactory.SUPPORT_DTD, false);",
      "42:         return xif.createXMLStreamReader(source);",
      "43:     }",
      "44: }",
      "",
      "---------------"
    ],
    "nifi-commons/nifi-security-utils/src/test/groovy/org/apache/nifi/security/xml/XmlUtilsTest.groovy||nifi-commons/nifi-security-utils/src/test/groovy/org/apache/nifi/security/xml/XmlUtilsTest.groovy": [
      "File: nifi-commons/nifi-security-utils/src/test/groovy/org/apache/nifi/security/xml/XmlUtilsTest.groovy -> nifi-commons/nifi-security-utils/src/test/groovy/org/apache/nifi/security/xml/XmlUtilsTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: package org.apache.nifi.security.xml",
      "19: import org.junit.After",
      "20: import org.junit.Before",
      "21: import org.junit.BeforeClass",
      "22: import org.junit.Test",
      "23: import org.junit.runner.RunWith",
      "24: import org.junit.runners.JUnit4",
      "25: import org.slf4j.Logger",
      "26: import org.slf4j.LoggerFactory",
      "28: import javax.xml.bind.JAXBContext",
      "29: import javax.xml.bind.UnmarshalException",
      "30: import javax.xml.bind.Unmarshaller",
      "31: import javax.xml.bind.annotation.XmlAccessType",
      "32: import javax.xml.bind.annotation.XmlAccessorType",
      "33: import javax.xml.bind.annotation.XmlAttribute",
      "34: import javax.xml.bind.annotation.XmlRootElement",
      "35: import javax.xml.stream.XMLStreamReader",
      "37: import static groovy.test.GroovyAssert.shouldFail",
      "39: @RunWith(JUnit4.class)",
      "40: class XmlUtilsTest {",
      "41:     private static final Logger logger = LoggerFactory.getLogger(XmlUtilsTest.class)",
      "43:     @BeforeClass",
      "44:     static void setUpOnce() throws Exception {",
      "45:         logger.metaClass.methodMissing = { String name, args ->",
      "46:             logger.info(\"[${name?.toUpperCase()}] ${(args as List).join(\" \")}\")",
      "47:         }",
      "48:     }",
      "50:     @Before",
      "51:     void setUp() throws Exception {",
      "53:     }",
      "55:     @After",
      "56:     void tearDown() throws Exception {",
      "58:     }",
      "60:     @Test",
      "61:     void testShouldHandleXXEInUnmarshal() {",
      "63:         final String XXE_TEMPLATE_FILEPATH = \"src/test/resources/xxe_template.xml\"",
      "64:         InputStream templateStream = new File(XXE_TEMPLATE_FILEPATH).newInputStream()",
      "66:         JAXBContext context = JAXBContext.newInstance(XmlObject.class)",
      "69:         def msg = shouldFail(UnmarshalException) {",
      "70:             Unmarshaller unmarshaller = context.createUnmarshaller()",
      "71:             XMLStreamReader xsr = XmlUtils.createSafeReader(templateStream)",
      "72:             def parsed = unmarshaller.unmarshal(xsr, XmlObject.class)",
      "73:             logger.info(\"Unmarshalled ${parsed.toString()}\")",
      "74:         }",
      "77:         logger.expected(msg)",
      "78:         assert msg =~ \"XMLStreamException: ParseError \"",
      "79:     }",
      "80: }",
      "82: @XmlAccessorType( XmlAccessType.NONE )",
      "83: @XmlRootElement(name = \"object\")",
      "84: class XmlObject {",
      "85:     @XmlAttribute",
      "86:     String name",
      "88:     @XmlAttribute",
      "89:     String description",
      "91:     @XmlAttribute",
      "92:     String groupId",
      "94:     @XmlAttribute",
      "95:     String timestamp",
      "96: }",
      "",
      "---------------"
    ],
    "nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/cluster/ClusterNodeInformation.java||nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/cluster/ClusterNodeInformation.java": [
      "File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/cluster/ClusterNodeInformation.java -> nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/cluster/ClusterNodeInformation.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.InputStream;",
      "20: import java.io.OutputStream;",
      "21: import java.util.Collection;",
      "23: import javax.xml.bind.JAXBContext;",
      "24: import javax.xml.bind.JAXBException;",
      "25: import javax.xml.bind.Marshaller;",
      "26: import javax.xml.bind.Unmarshaller;",
      "27: import javax.xml.bind.annotation.XmlRootElement;",
      "28: import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;",
      "30: @XmlRootElement",
      "31: public class ClusterNodeInformation {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import javax.xml.stream.XMLStreamException;",
      "29: import javax.xml.stream.XMLStreamReader;",
      "30: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "61:     }",
      "63:     public static ClusterNodeInformation unmarshal(final InputStream is) throws JAXBException {",
      "66:     }",
      "67: }",
      "",
      "[Removed Lines]",
      "64:         final Unmarshaller unmarshaller = JAXB_CONTEXT.createUnmarshaller();",
      "65:         return (ClusterNodeInformation) unmarshaller.unmarshal(is);",
      "",
      "[Added Lines]",
      "66:         try {",
      "67:             final Unmarshaller unmarshaller = JAXB_CONTEXT.createUnmarshaller();",
      "68:             final XMLStreamReader xsr = XmlUtils.createSafeReader(is);",
      "69:             return (ClusterNodeInformation) unmarshaller.unmarshal(xsr);",
      "70:         } catch (XMLStreamException e) {",
      "71:             throw new JAXBException(\"Error unmarshalling the cluster node information\", e);",
      "72:         }",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.apache.nifi.authorization;",
      "19: import org.apache.commons.lang3.StringUtils;",
      "20: import org.apache.nifi.authorization.annotation.AuthorizerContext;",
      "21: import org.apache.nifi.authorization.exception.AuthorizationAccessException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: import java.io.File;",
      "20: import java.lang.reflect.Constructor;",
      "21: import java.lang.reflect.Field;",
      "22: import java.lang.reflect.InvocationTargetException;",
      "23: import java.lang.reflect.Method;",
      "24: import java.net.URL;",
      "25: import java.net.URLClassLoader;",
      "26: import java.util.HashMap;",
      "27: import java.util.List;",
      "28: import java.util.Map;",
      "29: import javax.xml.XMLConstants;",
      "30: import javax.xml.bind.JAXBContext;",
      "31: import javax.xml.bind.JAXBElement;",
      "32: import javax.xml.bind.JAXBException;",
      "33: import javax.xml.bind.Unmarshaller;",
      "34: import javax.xml.stream.XMLStreamReader;",
      "35: import javax.xml.transform.stream.StreamSource;",
      "36: import javax.xml.validation.Schema;",
      "37: import javax.xml.validation.SchemaFactory;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "25: import org.apache.nifi.authorization.generated.Property;",
      "26: import org.apache.nifi.bundle.Bundle;",
      "27: import org.apache.nifi.nar.ExtensionManager;",
      "28: import org.apache.nifi.util.NiFiProperties;",
      "29: import org.apache.nifi.util.file.classloader.ClassLoaderUtils;",
      "30: import org.slf4j.Logger;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "33: import org.springframework.beans.factory.FactoryBean;",
      "34: import org.xml.sax.SAXException;",
      "",
      "[Removed Lines]",
      "36: import javax.xml.XMLConstants;",
      "37: import javax.xml.bind.JAXBContext;",
      "38: import javax.xml.bind.JAXBElement;",
      "39: import javax.xml.bind.JAXBException;",
      "40: import javax.xml.bind.Unmarshaller;",
      "41: import javax.xml.transform.stream.StreamSource;",
      "42: import javax.xml.validation.Schema;",
      "43: import javax.xml.validation.SchemaFactory;",
      "44: import java.io.File;",
      "45: import java.lang.reflect.Constructor;",
      "46: import java.lang.reflect.Field;",
      "47: import java.lang.reflect.InvocationTargetException;",
      "48: import java.lang.reflect.Method;",
      "49: import java.net.URL;",
      "50: import java.net.URLClassLoader;",
      "51: import java.util.HashMap;",
      "52: import java.util.List;",
      "53: import java.util.Map;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "168:                 final Schema schema = schemaFactory.newSchema(Authorizers.class.getResource(AUTHORIZERS_XSD));",
      "171:                 final Unmarshaller unmarshaller = JAXB_CONTEXT.createUnmarshaller();",
      "172:                 unmarshaller.setSchema(schema);",
      "174:                 return element.getValue();",
      "175:             } catch (SAXException | JAXBException e) {",
      "176:                 throw new Exception(\"Unable to load the authorizer configuration file at: \" + authorizersConfigurationFile.getAbsolutePath(), e);",
      "",
      "[Removed Lines]",
      "173:                 final JAXBElement<Authorizers> element = unmarshaller.unmarshal(new StreamSource(authorizersConfigurationFile), Authorizers.class);",
      "",
      "[Added Lines]",
      "172:                 final XMLStreamReader xsr = XmlUtils.createSafeReader(new StreamSource(authorizersConfigurationFile));",
      "175:                 final JAXBElement<Authorizers> element = unmarshaller.unmarshal(xsr, Authorizers.class);",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileAccessPolicyProvider.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileAccessPolicyProvider.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileAccessPolicyProvider.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileAccessPolicyProvider.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.apache.nifi.authorization;",
      "19: import org.apache.commons.lang3.StringUtils;",
      "20: import org.apache.nifi.authorization.annotation.AuthorizerContext;",
      "21: import org.apache.nifi.authorization.exception.AuthorizationAccessException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: import java.io.ByteArrayInputStream;",
      "20: import java.io.File;",
      "21: import java.io.IOException;",
      "22: import java.io.StringWriter;",
      "23: import java.nio.charset.StandardCharsets;",
      "24: import java.util.ArrayList;",
      "25: import java.util.Collections;",
      "26: import java.util.Comparator;",
      "27: import java.util.Date;",
      "28: import java.util.HashSet;",
      "29: import java.util.Iterator;",
      "30: import java.util.List;",
      "31: import java.util.Map;",
      "32: import java.util.Set;",
      "33: import java.util.concurrent.atomic.AtomicReference;",
      "34: import java.util.regex.Matcher;",
      "35: import java.util.regex.Pattern;",
      "36: import javax.xml.XMLConstants;",
      "37: import javax.xml.bind.JAXBContext;",
      "38: import javax.xml.bind.JAXBElement;",
      "39: import javax.xml.bind.JAXBException;",
      "40: import javax.xml.bind.Marshaller;",
      "41: import javax.xml.bind.Unmarshaller;",
      "42: import javax.xml.parsers.DocumentBuilder;",
      "43: import javax.xml.parsers.DocumentBuilderFactory;",
      "44: import javax.xml.parsers.ParserConfigurationException;",
      "45: import javax.xml.stream.XMLOutputFactory;",
      "46: import javax.xml.stream.XMLStreamException;",
      "47: import javax.xml.stream.XMLStreamReader;",
      "48: import javax.xml.stream.XMLStreamWriter;",
      "49: import javax.xml.transform.stream.StreamSource;",
      "50: import javax.xml.validation.Schema;",
      "51: import javax.xml.validation.SchemaFactory;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30: import org.apache.nifi.authorization.util.IdentityMapping;",
      "31: import org.apache.nifi.authorization.util.IdentityMappingUtil;",
      "32: import org.apache.nifi.components.PropertyValue;",
      "33: import org.apache.nifi.user.generated.Users;",
      "34: import org.apache.nifi.util.NiFiProperties;",
      "35: import org.apache.nifi.util.file.FileUtils;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "66: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "42: import org.w3c.dom.NodeList;",
      "43: import org.xml.sax.SAXException;",
      "78: public class FileAccessPolicyProvider implements ConfigurableAccessPolicyProvider {",
      "80:     private static final Logger logger = LoggerFactory.getLogger(FileAccessPolicyProvider.class);",
      "",
      "[Removed Lines]",
      "45: import javax.xml.XMLConstants;",
      "46: import javax.xml.bind.JAXBContext;",
      "47: import javax.xml.bind.JAXBElement;",
      "48: import javax.xml.bind.JAXBException;",
      "49: import javax.xml.bind.Marshaller;",
      "50: import javax.xml.bind.Unmarshaller;",
      "51: import javax.xml.parsers.DocumentBuilder;",
      "52: import javax.xml.parsers.DocumentBuilderFactory;",
      "53: import javax.xml.parsers.ParserConfigurationException;",
      "54: import javax.xml.stream.XMLOutputFactory;",
      "55: import javax.xml.stream.XMLStreamException;",
      "56: import javax.xml.stream.XMLStreamWriter;",
      "57: import javax.xml.transform.stream.StreamSource;",
      "58: import javax.xml.validation.Schema;",
      "59: import javax.xml.validation.SchemaFactory;",
      "60: import java.io.ByteArrayInputStream;",
      "61: import java.io.File;",
      "62: import java.io.IOException;",
      "63: import java.io.StringWriter;",
      "64: import java.nio.charset.StandardCharsets;",
      "65: import java.util.ArrayList;",
      "66: import java.util.Collections;",
      "67: import java.util.Comparator;",
      "68: import java.util.Date;",
      "69: import java.util.HashSet;",
      "70: import java.util.Iterator;",
      "71: import java.util.List;",
      "72: import java.util.Map;",
      "73: import java.util.Set;",
      "74: import java.util.concurrent.atomic.AtomicReference;",
      "75: import java.util.regex.Matcher;",
      "76: import java.util.regex.Pattern;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "528:     }",
      "530:     private Authorizations unmarshallAuthorizations() throws JAXBException {",
      "536:     }",
      "",
      "[Removed Lines]",
      "531:         final Unmarshaller unmarshaller = JAXB_AUTHORIZATIONS_CONTEXT.createUnmarshaller();",
      "532:         unmarshaller.setSchema(authorizationsSchema);",
      "534:         final JAXBElement<Authorizations> element = unmarshaller.unmarshal(new StreamSource(authorizationsFile), Authorizations.class);",
      "535:         return element.getValue();",
      "",
      "[Added Lines]",
      "532:         try {",
      "533:             final XMLStreamReader xsr = XmlUtils.createSafeReader(new StreamSource(authorizationsFile));",
      "534:             final Unmarshaller unmarshaller = JAXB_AUTHORIZATIONS_CONTEXT.createUnmarshaller();",
      "535:             unmarshaller.setSchema(authorizationsSchema);",
      "537:             final JAXBElement<Authorizations> element = unmarshaller.unmarshal(xsr, Authorizations.class);",
      "538:             return element.getValue();",
      "539:         } catch (XMLStreamException e) {",
      "540:             logger.error(\"Encountered an error reading authorizations file: \", e);",
      "541:             throw new JAXBException(\"Error reading authorizations file\", e);",
      "542:         }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "626:         final Unmarshaller unmarshaller = JAXB_USERS_CONTEXT.createUnmarshaller();",
      "627:         unmarshaller.setSchema(usersSchema);",
      "629:         final JAXBElement<Users> element = unmarshaller.unmarshal(",
      "632:         final org.apache.nifi.user.generated.Users users = element.getValue();",
      "633:         if (users.getUser().isEmpty()) {",
      "",
      "[Removed Lines]",
      "630:                 new StreamSource(authorizedUsersFile), org.apache.nifi.user.generated.Users.class);",
      "",
      "[Added Lines]",
      "636:         final XMLStreamReader xsr;",
      "637:         try {",
      "638:             xsr = XmlUtils.createSafeReader(new StreamSource(authorizedUsersFile));",
      "639:         } catch (XMLStreamException e) {",
      "640:             logger.error(\"Encountered an error reading authorized users file: \", e);",
      "641:             throw new JAXBException(\"Error reading authorized users file\", e);",
      "642:         }",
      "644:                 xsr, org.apache.nifi.user.generated.Users.class);",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileUserGroupProvider.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileUserGroupProvider.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileUserGroupProvider.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileUserGroupProvider.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.apache.nifi.authorization;",
      "19: import org.apache.commons.lang3.StringUtils;",
      "20: import org.apache.nifi.authorization.annotation.AuthorizerContext;",
      "21: import org.apache.nifi.authorization.exception.AuthorizationAccessException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: import java.io.ByteArrayInputStream;",
      "20: import java.io.File;",
      "21: import java.io.IOException;",
      "22: import java.io.StringWriter;",
      "23: import java.nio.charset.StandardCharsets;",
      "24: import java.util.ArrayList;",
      "25: import java.util.Collections;",
      "26: import java.util.Comparator;",
      "27: import java.util.Date;",
      "28: import java.util.HashSet;",
      "29: import java.util.Iterator;",
      "30: import java.util.List;",
      "31: import java.util.Map;",
      "32: import java.util.Set;",
      "33: import java.util.concurrent.atomic.AtomicReference;",
      "34: import java.util.regex.Matcher;",
      "35: import java.util.regex.Pattern;",
      "36: import javax.xml.XMLConstants;",
      "37: import javax.xml.bind.JAXBContext;",
      "38: import javax.xml.bind.JAXBElement;",
      "39: import javax.xml.bind.JAXBException;",
      "40: import javax.xml.bind.Marshaller;",
      "41: import javax.xml.bind.Unmarshaller;",
      "42: import javax.xml.parsers.DocumentBuilder;",
      "43: import javax.xml.parsers.DocumentBuilderFactory;",
      "44: import javax.xml.parsers.ParserConfigurationException;",
      "45: import javax.xml.stream.XMLOutputFactory;",
      "46: import javax.xml.stream.XMLStreamException;",
      "47: import javax.xml.stream.XMLStreamReader;",
      "48: import javax.xml.stream.XMLStreamWriter;",
      "49: import javax.xml.transform.stream.StreamSource;",
      "50: import javax.xml.validation.Schema;",
      "51: import javax.xml.validation.SchemaFactory;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "28: import org.apache.nifi.authorization.util.IdentityMapping;",
      "29: import org.apache.nifi.authorization.util.IdentityMappingUtil;",
      "30: import org.apache.nifi.components.PropertyValue;",
      "31: import org.apache.nifi.util.NiFiProperties;",
      "32: import org.apache.nifi.util.file.FileUtils;",
      "33: import org.slf4j.Logger;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "64: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "38: import org.w3c.dom.NodeList;",
      "39: import org.xml.sax.SAXException;",
      "74: public class FileUserGroupProvider implements ConfigurableUserGroupProvider {",
      "76:     private static final Logger logger = LoggerFactory.getLogger(FileUserGroupProvider.class);",
      "",
      "[Removed Lines]",
      "41: import javax.xml.XMLConstants;",
      "42: import javax.xml.bind.JAXBContext;",
      "43: import javax.xml.bind.JAXBElement;",
      "44: import javax.xml.bind.JAXBException;",
      "45: import javax.xml.bind.Marshaller;",
      "46: import javax.xml.bind.Unmarshaller;",
      "47: import javax.xml.parsers.DocumentBuilder;",
      "48: import javax.xml.parsers.DocumentBuilderFactory;",
      "49: import javax.xml.parsers.ParserConfigurationException;",
      "50: import javax.xml.stream.XMLOutputFactory;",
      "51: import javax.xml.stream.XMLStreamException;",
      "52: import javax.xml.stream.XMLStreamWriter;",
      "53: import javax.xml.transform.stream.StreamSource;",
      "54: import javax.xml.validation.Schema;",
      "55: import javax.xml.validation.SchemaFactory;",
      "56: import java.io.ByteArrayInputStream;",
      "57: import java.io.File;",
      "58: import java.io.IOException;",
      "59: import java.io.StringWriter;",
      "60: import java.nio.charset.StandardCharsets;",
      "61: import java.util.ArrayList;",
      "62: import java.util.Collections;",
      "63: import java.util.Comparator;",
      "64: import java.util.Date;",
      "65: import java.util.HashSet;",
      "66: import java.util.Iterator;",
      "67: import java.util.List;",
      "68: import java.util.Map;",
      "69: import java.util.Set;",
      "70: import java.util.concurrent.atomic.AtomicReference;",
      "71: import java.util.regex.Matcher;",
      "72: import java.util.regex.Pattern;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "665:         final Unmarshaller unmarshaller = JAXB_TENANTS_CONTEXT.createUnmarshaller();",
      "666:         unmarshaller.setSchema(tenantsSchema);",
      "670:     }",
      "672:     private void populateInitialUsers(final Tenants tenants) {",
      "",
      "[Removed Lines]",
      "668:         final JAXBElement<Tenants> element = unmarshaller.unmarshal(new StreamSource(tenantsFile), Tenants.class);",
      "669:         return element.getValue();",
      "",
      "[Added Lines]",
      "669:         try {",
      "670:             final XMLStreamReader xsr = XmlUtils.createSafeReader(new StreamSource(tenantsFile));",
      "671:             final JAXBElement<Tenants> element = unmarshaller.unmarshal(xsr, Tenants.class);",
      "672:             return element.getValue();",
      "673:         } catch (XMLStreamException e) {",
      "674:             throw new JAXBException(\"Error unmarshalling tenants\", e);",
      "675:         }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "688:             throw new AuthorizerCreationException(\"Legacy Authorized Users File '\" + legacyAuthorizedUsersFile + \"' does not exists\");",
      "689:         }",
      "691:         final Unmarshaller unmarshaller = JAXB_USERS_CONTEXT.createUnmarshaller();",
      "692:         unmarshaller.setSchema(usersSchema);",
      "694:         final JAXBElement<org.apache.nifi.user.generated.Users> element = unmarshaller.unmarshal(",
      "697:         final org.apache.nifi.user.generated.Users users = element.getValue();",
      "698:         if (users.getUser().isEmpty()) {",
      "",
      "[Removed Lines]",
      "695:                 new StreamSource(authorizedUsersFile), org.apache.nifi.user.generated.Users.class);",
      "",
      "[Added Lines]",
      "697:         XMLStreamReader xsr;",
      "698:         try {",
      "699:             xsr = XmlUtils.createSafeReader(new StreamSource(authorizedUsersFile));",
      "700:         } catch (XMLStreamException e) {",
      "701:             throw new AuthorizerCreationException(\"Error converting the legacy authorizers file\", e);",
      "702:         }",
      "708:                 xsr, org.apache.nifi.user.generated.Users.class);",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/HeartbeatPayload.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/HeartbeatPayload.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/HeartbeatPayload.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/HeartbeatPayload.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: import java.io.InputStream;",
      "22: import java.io.OutputStream;",
      "23: import java.util.List;",
      "25: import javax.xml.bind.JAXBContext;",
      "26: import javax.xml.bind.JAXBException;",
      "27: import javax.xml.bind.Marshaller;",
      "28: import javax.xml.bind.Unmarshaller;",
      "29: import javax.xml.bind.annotation.XmlRootElement;",
      "31: import org.apache.nifi.cluster.coordination.node.NodeConnectionStatus;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: import javax.xml.stream.XMLStreamException;",
      "30: import javax.xml.stream.XMLStreamReader;",
      "32: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "111:     public static HeartbeatPayload unmarshal(final InputStream is) throws ProtocolException {",
      "112:         try {",
      "113:             final Unmarshaller unmarshaller = JAXB_CONTEXT.createUnmarshaller();",
      "117:         }",
      "118:     }",
      "120:     public static HeartbeatPayload unmarshal(final byte[] bytes) throws ProtocolException {",
      "127:     }",
      "128: }",
      "",
      "[Removed Lines]",
      "114:             return (HeartbeatPayload) unmarshaller.unmarshal(is);",
      "115:         } catch (final JAXBException je) {",
      "116:             throw new ProtocolException(je);",
      "121:         try {",
      "122:             final Unmarshaller unmarshaller = JAXB_CONTEXT.createUnmarshaller();",
      "123:             return (HeartbeatPayload) unmarshaller.unmarshal(new ByteArrayInputStream(bytes));",
      "124:         } catch (final JAXBException je) {",
      "125:             throw new ProtocolException(je);",
      "126:         }",
      "",
      "[Added Lines]",
      "115:             final XMLStreamReader xsr = XmlUtils.createSafeReader(is);",
      "116:             return (HeartbeatPayload) unmarshaller.unmarshal(xsr);",
      "117:         } catch (final JAXBException | XMLStreamException e) {",
      "118:             throw new ProtocolException(e);",
      "123:         return unmarshal(new ByteArrayInputStream(bytes));",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/JaxbProtocolContext.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/JaxbProtocolContext.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/JaxbProtocolContext.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/JaxbProtocolContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import java.io.InputStream;",
      "26: import java.io.OutputStream;",
      "27: import java.nio.ByteBuffer;",
      "29: import javax.xml.bind.JAXBContext;",
      "30: import javax.xml.bind.JAXBException;",
      "31: import javax.xml.bind.Marshaller;",
      "32: import javax.xml.bind.Unmarshaller;",
      "34: import org.apache.nifi.cluster.protocol.ProtocolContext;",
      "35: import org.apache.nifi.cluster.protocol.ProtocolMessageMarshaller;",
      "36: import org.apache.nifi.cluster.protocol.ProtocolMessageUnmarshaller;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32: import javax.xml.stream.XMLStreamException;",
      "33: import javax.xml.stream.XMLStreamReader;",
      "37: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "135:                     final Unmarshaller unmarshaller = jaxbCtx.createUnmarshaller();",
      "136:                     final byte[] msg = new byte[totalBytesRead];",
      "137:                     buffer.get(msg);",
      "142:                 }",
      "144:             }",
      "",
      "[Removed Lines]",
      "138:                     return (T) unmarshaller.unmarshal(new ByteArrayInputStream(msg));",
      "140:                 } catch (final JAXBException je) {",
      "141:                     throw new IOException(\"Failed unmarshalling protocol message due to: \" + je, je);",
      "",
      "[Added Lines]",
      "139:                     final XMLStreamReader xsr = XmlUtils.createSafeReader(new ByteArrayInputStream(msg));",
      "140:                     return (T) unmarshaller.unmarshal(xsr);",
      "142:                 } catch (final JAXBException | XMLStreamException e) {",
      "143:                     throw new IOException(\"Failed unmarshalling protocol message due to: \" + e, e);",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.apache.nifi.cluster.coordination.heartbeat;",
      "19: import org.apache.nifi.cluster.coordination.ClusterCoordinator;",
      "20: import org.apache.nifi.cluster.coordination.node.NodeConnectionState;",
      "21: import org.apache.nifi.cluster.coordination.node.NodeConnectionStatus;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: import java.util.ArrayList;",
      "20: import java.util.Collections;",
      "21: import java.util.HashMap;",
      "22: import java.util.List;",
      "23: import java.util.Map;",
      "24: import java.util.Set;",
      "25: import java.util.concurrent.ConcurrentHashMap;",
      "26: import java.util.concurrent.ConcurrentMap;",
      "27: import java.util.function.Function;",
      "28: import java.util.stream.Collectors;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: import org.slf4j.Logger;",
      "37: import org.slf4j.LoggerFactory;",
      "",
      "[Removed Lines]",
      "39: import javax.xml.bind.JAXBContext;",
      "40: import javax.xml.bind.Unmarshaller;",
      "41: import java.util.ArrayList;",
      "42: import java.util.Collections;",
      "43: import java.util.HashMap;",
      "44: import java.util.List;",
      "45: import java.util.Map;",
      "46: import java.util.Set;",
      "47: import java.util.concurrent.ConcurrentHashMap;",
      "48: import java.util.concurrent.ConcurrentMap;",
      "49: import java.util.function.Function;",
      "50: import java.util.stream.Collectors;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "64:     private volatile long purgeTimestamp = System.currentTimeMillis();",
      "77:     public ClusterProtocolHeartbeatMonitor(final ClusterCoordinator clusterCoordinator, final ProtocolListener protocolListener, final NiFiProperties nifiProperties) {",
      "78:         super(clusterCoordinator, nifiProperties);",
      "",
      "[Removed Lines]",
      "66:     protected static final Unmarshaller nodeIdentifierUnmarshaller;",
      "68:     static {",
      "69:         try {",
      "70:             final JAXBContext jaxbContext = JAXBContext.newInstance(NodeIdentifier.class);",
      "71:             nodeIdentifierUnmarshaller = jaxbContext.createUnmarshaller();",
      "72:         } catch (final Exception e) {",
      "73:             throw new RuntimeException(\"Failed to create an Unmarshaller for unmarshalling Node Identifier\", e);",
      "74:         }",
      "75:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/cluster/BulletinsPayload.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/cluster/BulletinsPayload.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/cluster/BulletinsPayload.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/cluster/BulletinsPayload.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import javax.xml.bind.Unmarshaller;",
      "28: import javax.xml.bind.annotation.XmlRootElement;",
      "29: import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;",
      "30: import org.apache.nifi.cluster.protocol.ProtocolException;",
      "31: import org.apache.nifi.jaxb.BulletinAdapter;",
      "32: import org.apache.nifi.reporting.Bulletin;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: import javax.xml.stream.XMLStreamException;",
      "31: import javax.xml.stream.XMLStreamReader;",
      "35: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77:     public static BulletinsPayload unmarshal(final InputStream is) throws ProtocolException {",
      "78:         try {",
      "79:             final Unmarshaller unmarshaller = JAXB_CONTEXT.createUnmarshaller();",
      "83:         }",
      "84:     }",
      "86:     public static BulletinsPayload unmarshal(final byte[] bytes) throws ProtocolException {",
      "93:     }",
      "94: }",
      "",
      "[Removed Lines]",
      "80:             return (BulletinsPayload) unmarshaller.unmarshal(is);",
      "81:         } catch (final JAXBException je) {",
      "82:             throw new ProtocolException(je);",
      "87:         try {",
      "88:             final Unmarshaller unmarshaller = JAXB_CONTEXT.createUnmarshaller();",
      "89:             return (BulletinsPayload) unmarshaller.unmarshal(new ByteArrayInputStream(bytes));",
      "90:         } catch (final JAXBException je) {",
      "91:             throw new ProtocolException(je);",
      "92:         }",
      "",
      "[Added Lines]",
      "83:             final XMLStreamReader xsr = XmlUtils.createSafeReader(is);",
      "84:             return (BulletinsPayload) unmarshaller.unmarshal(xsr);",
      "85:         } catch (final JAXBException | XMLStreamException e) {",
      "86:             throw new ProtocolException(e);",
      "91:         return unmarshal(new ByteArrayInputStream(bytes));",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/TemplateUtils.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/TemplateUtils.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/TemplateUtils.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/TemplateUtils.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: package org.apache.nifi.controller;",
      "20: import org.apache.nifi.persistence.TemplateDeserializer;",
      "22: import org.apache.nifi.web.api.dto.ConnectableDTO;",
      "23: import org.apache.nifi.web.api.dto.ConnectionDTO;",
      "24: import org.apache.nifi.web.api.dto.ControllerServiceDTO;",
      "",
      "[Removed Lines]",
      "21: import org.apache.nifi.stream.io.StreamUtils;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "32: import org.apache.nifi.web.api.dto.TemplateDTO;",
      "33: import org.w3c.dom.Element;",
      "37: import javax.xml.transform.dom.DOMSource;",
      "38: import java.io.ByteArrayInputStream;",
      "40: import java.io.IOException;",
      "41: import java.io.InputStream;",
      "43: import java.util.Collection;",
      "45: import java.util.Map;",
      "46: import java.util.Set;",
      "",
      "[Removed Lines]",
      "35: import javax.xml.bind.JAXBContext;",
      "36: import javax.xml.bind.Unmarshaller;",
      "39: import java.io.DataInputStream;",
      "42: import java.util.ArrayList;",
      "44: import java.util.List;",
      "",
      "[Added Lines]",
      "34: import javax.xml.transform.Transformer;",
      "35: import javax.xml.transform.TransformerFactory;",
      "37: import javax.xml.transform.stream.StreamResult;",
      "39: import java.io.ByteArrayOutputStream;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "50:     public static TemplateDTO parseDto(final Element templateElement) {",
      "51:         try {",
      "55:         } catch (final Exception e) {",
      "56:             throw new RuntimeException(\"Could not parse XML as a valid template\", e);",
      "57:         }",
      "",
      "[Removed Lines]",
      "52:             JAXBContext context = JAXBContext.newInstance(TemplateDTO.class);",
      "53:             Unmarshaller unmarshaller = context.createUnmarshaller();",
      "54:             return unmarshaller.unmarshal(new DOMSource(templateElement), TemplateDTO.class).getValue();",
      "",
      "[Added Lines]",
      "50:             final DOMSource domSource = new DOMSource(templateElement);",
      "52:             final ByteArrayOutputStream baos = new ByteArrayOutputStream();",
      "53:             final StreamResult streamResult = new StreamResult(baos);",
      "57:             final TransformerFactory transformerFactory = TransformerFactory.newInstance();",
      "58:             final Transformer transformer = transformerFactory.newTransformer();",
      "59:             transformer.transform(domSource, streamResult);",
      "61:             return parseDto(baos.toByteArray());",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "61:         try (final InputStream in = new ByteArrayInputStream(bytes)) {",
      "62:             return TemplateDeserializer.deserialize(in);",
      "63:         } catch (final IOException ioe) {",
      "65:         }",
      "66:     }",
      "",
      "[Removed Lines]",
      "64:             throw new RuntimeException(\"Could not parse bytes as template\", ioe); // won't happen because of the types of streams being used",
      "68:     public static List<Template> parseTemplateStream(final byte[] bytes) {",
      "69:         final List<Template> templates = new ArrayList<>();",
      "71:         try (final InputStream rawIn = new ByteArrayInputStream(bytes);",
      "72:             final DataInputStream in = new DataInputStream(rawIn)) {",
      "74:             while (isMoreData(in)) {",
      "75:                 final int length = in.readInt();",
      "76:                 final byte[] buffer = new byte[length];",
      "77:                 StreamUtils.fillBuffer(in, buffer, true);",
      "78:                 final TemplateDTO dto = TemplateDeserializer.deserialize(new ByteArrayInputStream(buffer));",
      "79:                 templates.add(new Template(dto));",
      "80:             }",
      "81:         } catch (final IOException e) {",
      "82:             throw new RuntimeException(\"Could not parse bytes\", e);  // won't happen because of the types of streams being used",
      "83:         }",
      "85:         return templates;",
      "86:     }",
      "89:     private static boolean isMoreData(final InputStream in) throws IOException {",
      "90:         in.mark(1);",
      "91:         final int nextByte = in.read();",
      "92:         if (nextByte == -1) {",
      "93:             return false;",
      "94:         }",
      "96:         in.reset();",
      "97:         return true;",
      "98:     }",
      "",
      "[Added Lines]",
      "71:             throw new RuntimeException(\"Could not parse bytes as template\", ioe);",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/StandardSnippetDeserializer.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/StandardSnippetDeserializer.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/StandardSnippetDeserializer.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/StandardSnippetDeserializer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.apache.nifi.persistence;",
      "19: import java.io.InputStream;",
      "21: import javax.xml.bind.JAXBContext;",
      "22: import javax.xml.bind.JAXBElement;",
      "23: import javax.xml.bind.JAXBException;",
      "24: import javax.xml.bind.Unmarshaller;",
      "27: import org.apache.nifi.controller.StandardSnippet;",
      "28: import org.apache.nifi.controller.serialization.FlowSerializationException;",
      "30: public class StandardSnippetDeserializer {",
      "",
      "[Removed Lines]",
      "25: import javax.xml.transform.stream.StreamSource;",
      "",
      "[Added Lines]",
      "24: import javax.xml.stream.XMLStreamException;",
      "25: import javax.xml.stream.XMLStreamReader;",
      "28: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "33:         try {",
      "34:             JAXBContext context = JAXBContext.newInstance(StandardSnippet.class);",
      "35:             Unmarshaller unmarshaller = context.createUnmarshaller();",
      "37:             return snippetElement.getValue();",
      "39:             throw new FlowSerializationException(e);",
      "40:         }",
      "41:     }",
      "",
      "[Removed Lines]",
      "36:             JAXBElement<StandardSnippet> snippetElement = unmarshaller.unmarshal(new StreamSource(inStream), StandardSnippet.class);",
      "38:         } catch (final JAXBException e) {",
      "",
      "[Added Lines]",
      "36:             XMLStreamReader xsr = XmlUtils.createSafeReader(inStream);",
      "37:             JAXBElement<StandardSnippet> snippetElement = unmarshaller.unmarshal(xsr, StandardSnippet.class);",
      "39:         } catch (final JAXBException | XMLStreamException e) {",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.apache.nifi.persistence;",
      "20: import javax.xml.bind.JAXBContext;",
      "21: import javax.xml.bind.JAXBElement;",
      "22: import javax.xml.bind.JAXBException;",
      "23: import javax.xml.bind.Unmarshaller;",
      "25: import javax.xml.stream.XMLStreamException;",
      "26: import javax.xml.stream.XMLStreamReader;",
      "27: import javax.xml.transform.stream.StreamSource;",
      "31: public class TemplateDeserializer {",
      "33:     public static TemplateDTO deserialize(final InputStream inStream) {",
      "34:         try {",
      "35:             JAXBContext context = JAXBContext.newInstance(TemplateDTO.class);",
      "43:             Unmarshaller unmarshaller = context.createUnmarshaller();",
      "44:             JAXBElement<TemplateDTO> templateElement = unmarshaller.unmarshal(xsr, TemplateDTO.class);",
      "45:             return templateElement.getValue();",
      "",
      "[Removed Lines]",
      "19: import java.io.InputStream;",
      "24: import javax.xml.stream.XMLInputFactory;",
      "28: import org.apache.nifi.controller.serialization.FlowSerializationException;",
      "29: import org.apache.nifi.web.api.dto.TemplateDTO;",
      "38:             XMLInputFactory xif = XMLInputFactory.newFactory();",
      "39:             xif.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);",
      "40:             xif.setProperty(XMLInputFactory.SUPPORT_DTD, false);",
      "41:             XMLStreamReader xsr = xif.createXMLStreamReader(new StreamSource(inStream));",
      "",
      "[Added Lines]",
      "19: import org.apache.nifi.controller.serialization.FlowSerializationException;",
      "20: import org.apache.nifi.security.xml.XmlUtils;",
      "21: import org.apache.nifi.web.api.dto.TemplateDTO;",
      "30: import java.io.InputStream;",
      "35:        return deserialize(new StreamSource(inStream));",
      "36:     }",
      "38:     public static TemplateDTO deserialize(final StreamSource source) {",
      "41:             XMLStreamReader xsr = XmlUtils.createSafeReader(source);",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/persistence/TemplateSerializerTest.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/persistence/TemplateSerializerTest.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/persistence/TemplateSerializerTest.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/persistence/TemplateSerializerTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import java.util.List;",
      "28: import java.util.Set;",
      "29: import java.util.stream.Collectors;",
      "31: import javax.xml.bind.JAXBContext;",
      "32: import javax.xml.bind.JAXBElement;",
      "33: import javax.xml.bind.Unmarshaller;",
      "36: import org.apache.nifi.util.ComponentIdGenerator;",
      "37: import org.apache.nifi.web.api.dto.FlowSnippetDTO;",
      "38: import org.apache.nifi.web.api.dto.ProcessorDTO;",
      "",
      "[Removed Lines]",
      "34: import javax.xml.transform.stream.StreamSource;",
      "",
      "[Added Lines]",
      "33: import javax.xml.stream.XMLStreamReader;",
      "34: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65:         origTemplate.setSnippet(snippet);",
      "66:         byte[] serTemplate = TemplateSerializer.serialize(origTemplate);",
      "69:         ByteArrayInputStream in = new ByteArrayInputStream(serTemplate);",
      "70:         JAXBContext context = JAXBContext.newInstance(TemplateDTO.class);",
      "71:         Unmarshaller unmarshaller = context.createUnmarshaller();",
      "73:         TemplateDTO deserTemplate = templateElement.getValue();",
      "",
      "[Removed Lines]",
      "72:         JAXBElement<TemplateDTO> templateElement = unmarshaller.unmarshal(new StreamSource(in), TemplateDTO.class);",
      "",
      "[Added Lines]",
      "71:         XMLStreamReader xsr = XmlUtils.createSafeReader(in);",
      "72:         JAXBElement<TemplateDTO> templateElement = unmarshaller.unmarshal(xsr, TemplateDTO.class);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "98:         diffList.addAll(new HistogramDiff().diff(RawTextComparator.DEFAULT, rt1, rt2));",
      "100:         ByteArrayOutputStream out = new ByteArrayOutputStream();",
      "102:             diff.format(diffList, rt1, rt2);",
      "104:             BufferedReader reader = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(out.toByteArray()), StandardCharsets.UTF_8));",
      "",
      "[Removed Lines]",
      "101:         try (DiffFormatter diff = new DiffFormatter(out);) {",
      "",
      "[Added Lines]",
      "101:         try (DiffFormatter diff = new DiffFormatter(out)) {",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "48: import org.apache.nifi.registry.variable.VariableRegistryUpdateRequest;",
      "49: import org.apache.nifi.registry.variable.VariableRegistryUpdateStep;",
      "50: import org.apache.nifi.remote.util.SiteToSiteRestApiClient;",
      "51: import org.apache.nifi.util.BundleUtils;",
      "52: import org.apache.nifi.web.NiFiServiceFacade;",
      "53: import org.apache.nifi.web.ResourceNotFoundException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "51: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "127: import javax.xml.bind.JAXBElement;",
      "128: import javax.xml.bind.JAXBException;",
      "129: import javax.xml.bind.Unmarshaller;",
      "131: import java.io.IOException;",
      "132: import java.io.InputStream;",
      "133: import java.net.URI;",
      "",
      "[Removed Lines]",
      "130: import javax.xml.transform.stream.StreamSource;",
      "",
      "[Added Lines]",
      "131: import javax.xml.stream.XMLStreamReader;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3238:         try {",
      "3239:             JAXBContext context = JAXBContext.newInstance(TemplateDTO.class);",
      "3240:             Unmarshaller unmarshaller = context.createUnmarshaller();",
      "3242:             template = templateElement.getValue();",
      "3243:         } catch (JAXBException jaxbe) {",
      "3244:             logger.warn(\"An error occurred while parsing a template.\", jaxbe);",
      "",
      "[Removed Lines]",
      "3241:             JAXBElement<TemplateDTO> templateElement = unmarshaller.unmarshal(new StreamSource(in), TemplateDTO.class);",
      "",
      "[Added Lines]",
      "3242:             XMLStreamReader xsr = XmlUtils.createSafeReader(in);",
      "3243:             JAXBElement<TemplateDTO> templateElement = unmarshaller.unmarshal(xsr, TemplateDTO.class);",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/spring/LoginIdentityProviderFactoryBean.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/spring/LoginIdentityProviderFactoryBean.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/spring/LoginIdentityProviderFactoryBean.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/spring/LoginIdentityProviderFactoryBean.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: import javax.xml.bind.JAXBElement;",
      "31: import javax.xml.bind.JAXBException;",
      "32: import javax.xml.bind.Unmarshaller;",
      "33: import javax.xml.transform.stream.StreamSource;",
      "34: import javax.xml.validation.Schema;",
      "35: import javax.xml.validation.SchemaFactory;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: import javax.xml.stream.XMLStreamReader;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "54: import org.apache.nifi.properties.SensitivePropertyProtectionException;",
      "55: import org.apache.nifi.properties.SensitivePropertyProvider;",
      "56: import org.apache.nifi.properties.SensitivePropertyProviderFactory;",
      "57: import org.apache.nifi.util.NiFiProperties;",
      "58: import org.slf4j.Logger;",
      "59: import org.slf4j.LoggerFactory;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "58: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "139:                 final Schema schema = schemaFactory.newSchema(LoginIdentityProviders.class.getResource(LOGIN_IDENTITY_PROVIDERS_XSD));",
      "142:                 final Unmarshaller unmarshaller = JAXB_CONTEXT.createUnmarshaller();",
      "143:                 unmarshaller.setSchema(schema);",
      "145:                 return element.getValue();",
      "146:             } catch (SAXException | JAXBException e) {",
      "147:                 throw new Exception(\"Unable to load the login identity provider configuration file at: \" + loginIdentityProvidersConfigurationFile.getAbsolutePath());",
      "",
      "[Removed Lines]",
      "144:                 final JAXBElement<LoginIdentityProviders> element = unmarshaller.unmarshal(new StreamSource(loginIdentityProvidersConfigurationFile), LoginIdentityProviders.class);",
      "",
      "[Added Lines]",
      "144:                 XMLStreamReader xsr = XmlUtils.createSafeReader(new StreamSource(loginIdentityProvidersConfigurationFile));",
      "147:                 final JAXBElement<LoginIdentityProviders> element = unmarshaller.unmarshal(xsr, LoginIdentityProviders.class);",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java||nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java": [
      "File: nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java -> nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.apache.nifi.update.attributes.serde;",
      "20: import java.io.StringWriter;",
      "21: import java.util.List;",
      "22: import javax.xml.bind.JAXBContext;",
      "23: import javax.xml.bind.JAXBElement;",
      "",
      "[Removed Lines]",
      "19: import java.io.StringReader;",
      "",
      "[Added Lines]",
      "19: import java.io.ByteArrayInputStream;",
      "21: import java.nio.charset.StandardCharsets;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "25: import javax.xml.bind.Marshaller;",
      "26: import javax.xml.bind.Unmarshaller;",
      "27: import javax.xml.bind.annotation.XmlRootElement;",
      "30: import org.apache.nifi.update.attributes.Criteria;",
      "31: import org.apache.nifi.update.attributes.FlowFilePolicy;",
      "32: import org.apache.nifi.update.attributes.Rule;",
      "",
      "[Removed Lines]",
      "28: import javax.xml.transform.Source;",
      "29: import javax.xml.transform.stream.StreamSource;",
      "",
      "[Added Lines]",
      "29: import javax.xml.stream.XMLStreamException;",
      "30: import javax.xml.stream.XMLStreamReader;",
      "31: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "119:             try {",
      "121:                 final Unmarshaller unmarshaller = JAXB_CONTEXT.createUnmarshaller();",
      "126:                 final CriteriaBinding binding = element.getValue();",
      "127:                 criteria = new Criteria(binding.getFlowFilePolicy(), binding.getRules());",
      "130:             }",
      "131:         }",
      "",
      "[Removed Lines]",
      "122:                 final Source source = new StreamSource(new StringReader(string));",
      "123:                 final JAXBElement<CriteriaBinding> element = unmarshaller.unmarshal(source, CriteriaBinding.class);",
      "128:             } catch (final JAXBException jaxbe) {",
      "129:                 throw new IllegalArgumentException(jaxbe);",
      "",
      "[Added Lines]",
      "124:                 XMLStreamReader xsr = XmlUtils.createSafeReader(new ByteArrayInputStream(string.getBytes(StandardCharsets.UTF_8)));",
      "125:                 final JAXBElement<CriteriaBinding> element = unmarshaller.unmarshal(xsr, CriteriaBinding.class);",
      "130:             } catch (final JAXBException | XMLStreamException e) {",
      "131:                 throw new IllegalArgumentException(e);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e65aad8fe61a806540d13a91e06bfdf22c51bf2f",
      "candidate_info": {
        "commit_hash": "e65aad8fe61a806540d13a91e06bfdf22c51bf2f",
        "repo": "apache/nifi",
        "commit_url": "https://github.com/apache/nifi/commit/e65aad8fe61a806540d13a91e06bfdf22c51bf2f",
        "files": [
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/remote/StandardRemoteProcessGroup.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ConnectionResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FunnelResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/InputPortResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/LabelResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/OutputPortResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessorResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/RemoteProcessGroupResource.java"
        ],
        "message": "NIFI-2994: - Setting the default position for remote process groups.\n\nSigned-off-by: Yolanda M. Davis <ymdavis@apache.org>\n\nThis closes #1303",
        "before_after_code_files": [
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/remote/StandardRemoteProcessGroup.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/remote/StandardRemoteProcessGroup.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ConnectionResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ConnectionResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FunnelResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FunnelResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/InputPortResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/InputPortResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/LabelResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/LabelResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/OutputPortResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/OutputPortResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessorResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessorResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/RemoteProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/RemoteProcessGroupResource.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java"
          ],
          "candidate": [
            "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java"
          ]
        }
      },
      "candidate_diff": {
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/remote/StandardRemoteProcessGroup.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/remote/StandardRemoteProcessGroup.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/remote/StandardRemoteProcessGroup.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/remote/StandardRemoteProcessGroup.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:     private final NiFiProperties nifiProperties;",
          "97:     private final AtomicReference<String> name = new AtomicReference<>();",
          "99:     private final AtomicReference<String> comments = new AtomicReference<>();",
          "100:     private final AtomicReference<ProcessGroup> processGroup;",
          "101:     private final AtomicBoolean transmitting = new AtomicBoolean(false);",
          "",
          "[Removed Lines]",
          "98:     private final AtomicReference<Position> position = new AtomicReference<>();",
          "",
          "[Added Lines]",
          "98:     private final AtomicReference<Position> position = new AtomicReference<>(new Position(0D, 0D));",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ConnectionResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ConnectionResource.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ConnectionResource.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ConnectionResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: import org.apache.nifi.web.NiFiServiceFacade;",
          "34: import org.apache.nifi.web.Revision;",
          "35: import org.apache.nifi.web.api.dto.ConnectionDTO;",
          "36: import org.apache.nifi.web.api.entity.ConnectionEntity;",
          "37: import org.apache.nifi.web.api.request.ClientIdParameter;",
          "38: import org.apache.nifi.web.api.request.LongParameter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: import org.apache.nifi.web.api.dto.PositionDTO;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: import javax.ws.rs.core.Context;",
          "52: import javax.ws.rs.core.MediaType;",
          "53: import javax.ws.rs.core.Response;",
          "54: import java.util.Set;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "214:             }",
          "215:         }",
          "217:         if (isReplicateRequest()) {",
          "218:             return replicate(HttpMethod.PUT, requestConnectionEntity);",
          "219:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219:         final List<PositionDTO> proposedBends = requestConnection.getBends();",
          "220:         if (proposedBends != null) {",
          "221:             for (final PositionDTO proposedBend : proposedBends) {",
          "222:                 if (proposedBend.getX() == null || proposedBend.getY() == null) {",
          "223:                     throw new IllegalArgumentException(\"The x and y coordinate of the each bend must be specified.\");",
          "224:                 }",
          "225:             }",
          "226:         }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FunnelResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FunnelResource.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FunnelResource.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/FunnelResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import org.apache.nifi.web.NiFiServiceFacade;",
          "31: import org.apache.nifi.web.Revision;",
          "32: import org.apache.nifi.web.api.dto.FunnelDTO;",
          "33: import org.apache.nifi.web.api.entity.FunnelEntity;",
          "34: import org.apache.nifi.web.api.request.ClientIdParameter;",
          "35: import org.apache.nifi.web.api.request.LongParameter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import org.apache.nifi.web.api.dto.PositionDTO;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:                     + \"funnel id of the requested resource (%s).\", requestFunnelDTO.getId(), id));",
          "193:         }",
          "195:         if (isReplicateRequest()) {",
          "196:             return replicate(HttpMethod.PUT, requestFunnelEntity);",
          "197:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:         final PositionDTO proposedPosition = requestFunnelDTO.getPosition();",
          "197:         if (proposedPosition != null) {",
          "198:             if (proposedPosition.getX() == null || proposedPosition.getY() == null) {",
          "199:                 throw new IllegalArgumentException(\"The x and y coordinate of the proposed position must be specified.\");",
          "200:             }",
          "201:         }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/InputPortResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/InputPortResource.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/InputPortResource.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/InputPortResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import org.apache.nifi.web.NiFiServiceFacade;",
          "31: import org.apache.nifi.web.Revision;",
          "32: import org.apache.nifi.web.api.dto.PortDTO;",
          "33: import org.apache.nifi.web.api.entity.PortEntity;",
          "34: import org.apache.nifi.web.api.request.ClientIdParameter;",
          "35: import org.apache.nifi.web.api.request.LongParameter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import org.apache.nifi.web.api.dto.PositionDTO;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:                     + \"input port id of the requested resource (%s).\", requestPortDTO.getId(), id));",
          "193:         }",
          "195:         if (isReplicateRequest()) {",
          "196:             return replicate(HttpMethod.PUT, requestPortEntity);",
          "197:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:         final PositionDTO proposedPosition = requestPortDTO.getPosition();",
          "197:         if (proposedPosition != null) {",
          "198:             if (proposedPosition.getX() == null || proposedPosition.getY() == null) {",
          "199:                 throw new IllegalArgumentException(\"The x and y coordinate of the proposed position must be specified.\");",
          "200:             }",
          "201:         }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/LabelResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/LabelResource.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/LabelResource.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/LabelResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import org.apache.nifi.web.NiFiServiceFacade;",
          "31: import org.apache.nifi.web.Revision;",
          "32: import org.apache.nifi.web.api.dto.LabelDTO;",
          "33: import org.apache.nifi.web.api.entity.LabelEntity;",
          "34: import org.apache.nifi.web.api.request.ClientIdParameter;",
          "35: import org.apache.nifi.web.api.request.LongParameter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import org.apache.nifi.web.api.dto.PositionDTO;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:                     + \"label id of the requested resource (%s).\", requestLabelDTO.getId(), id));",
          "193:         }",
          "195:         if (isReplicateRequest()) {",
          "196:             return replicate(HttpMethod.PUT, requestLabelEntity);",
          "197:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:         final PositionDTO proposedPosition = requestLabelDTO.getPosition();",
          "197:         if (proposedPosition != null) {",
          "198:             if (proposedPosition.getX() == null || proposedPosition.getY() == null) {",
          "199:                 throw new IllegalArgumentException(\"The x and y coordinate of the proposed position must be specified.\");",
          "200:             }",
          "201:         }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/OutputPortResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/OutputPortResource.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/OutputPortResource.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/OutputPortResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import org.apache.nifi.web.NiFiServiceFacade;",
          "31: import org.apache.nifi.web.Revision;",
          "32: import org.apache.nifi.web.api.dto.PortDTO;",
          "33: import org.apache.nifi.web.api.entity.PortEntity;",
          "34: import org.apache.nifi.web.api.request.ClientIdParameter;",
          "35: import org.apache.nifi.web.api.request.LongParameter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import org.apache.nifi.web.api.dto.PositionDTO;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:                     + \"output port id of the requested resource (%s).\", requestPortDTO.getId(), id));",
          "193:         }",
          "195:         if (isReplicateRequest()) {",
          "196:             return replicate(HttpMethod.PUT, requestPortEntity);",
          "197:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:         final PositionDTO proposedPosition = requestPortDTO.getPosition();",
          "197:         if (proposedPosition != null) {",
          "198:             if (proposedPosition.getX() == null || proposedPosition.getY() == null) {",
          "199:                 throw new IllegalArgumentException(\"The x and y coordinate of the proposed position must be specified.\");",
          "200:             }",
          "201:         }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: import org.apache.nifi.web.Revision;",
          "44: import org.apache.nifi.web.api.dto.ConnectionDTO;",
          "45: import org.apache.nifi.web.api.dto.ControllerServiceDTO;",
          "46: import org.apache.nifi.web.api.dto.ProcessGroupDTO;",
          "47: import org.apache.nifi.web.api.dto.ProcessorConfigDTO;",
          "48: import org.apache.nifi.web.api.dto.ProcessorDTO;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: import org.apache.nifi.web.api.dto.PositionDTO;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101: import java.net.URI;",
          "102: import java.net.URISyntaxException;",
          "103: import java.util.HashMap;",
          "104: import java.util.Map;",
          "105: import java.util.Set;",
          "106: import java.util.concurrent.atomic.AtomicBoolean;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "287:                     + \"not equal the process group id of the requested resource (%s).\", requestProcessGroupDTO.getId(), id));",
          "288:         }",
          "290:         if (isReplicateRequest()) {",
          "291:             return replicate(HttpMethod.PUT, requestProcessGroupEntity);",
          "292:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "292:         final PositionDTO proposedPosition = requestProcessGroupDTO.getPosition();",
          "293:         if (proposedPosition != null) {",
          "294:             if (proposedPosition.getX() == null || proposedPosition.getY() == null) {",
          "295:                 throw new IllegalArgumentException(\"The x and y coordinate of the proposed position must be specified.\");",
          "296:             }",
          "297:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "445:             throw new IllegalArgumentException(\"Process group ID cannot be specified.\");",
          "446:         }",
          "448:         if (requestProcessGroupEntity.getComponent().getParentGroupId() != null && !groupId.equals(requestProcessGroupEntity.getComponent().getParentGroupId())) {",
          "449:             throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",",
          "450:                     requestProcessGroupEntity.getComponent().getParentGroupId(), groupId));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457:         final PositionDTO proposedPosition = requestProcessGroupEntity.getComponent().getPosition();",
          "458:         if (proposedPosition != null) {",
          "459:             if (proposedPosition.getX() == null || proposedPosition.getY() == null) {",
          "460:                 throw new IllegalArgumentException(\"The x and y coordinate of the proposed position must be specified.\");",
          "461:             }",
          "462:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "602:             throw new IllegalArgumentException(\"The type of processor to create must be specified.\");",
          "603:         }",
          "605:         if (requestProcessor.getParentGroupId() != null && !groupId.equals(requestProcessor.getParentGroupId())) {",
          "606:             throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",",
          "607:                     requestProcessor.getParentGroupId(), groupId));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "621:         final PositionDTO proposedPosition = requestProcessor.getPosition();",
          "622:         if (proposedPosition != null) {",
          "623:             if (proposedPosition.getX() == null || proposedPosition.getY() == null) {",
          "624:                 throw new IllegalArgumentException(\"The x and y coordinate of the proposed position must be specified.\");",
          "625:             }",
          "626:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "760:             throw new IllegalArgumentException(\"Input port ID cannot be specified.\");",
          "761:         }",
          "763:         if (requestPortEntity.getComponent().getParentGroupId() != null && !groupId.equals(requestPortEntity.getComponent().getParentGroupId())) {",
          "764:             throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",",
          "765:                     requestPortEntity.getComponent().getParentGroupId(), groupId));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "786:         final PositionDTO proposedPosition = requestPortEntity.getComponent().getPosition();",
          "787:         if (proposedPosition != null) {",
          "788:             if (proposedPosition.getX() == null || proposedPosition.getY() == null) {",
          "789:                 throw new IllegalArgumentException(\"The x and y coordinate of the proposed position must be specified.\");",
          "790:             }",
          "791:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "901:             throw new IllegalArgumentException(\"Output port ID cannot be specified.\");",
          "902:         }",
          "904:         if (requestPortEntity.getComponent().getParentGroupId() != null && !groupId.equals(requestPortEntity.getComponent().getParentGroupId())) {",
          "905:             throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",",
          "906:                     requestPortEntity.getComponent().getParentGroupId(), groupId));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "934:         final PositionDTO proposedPosition = requestPortEntity.getComponent().getPosition();",
          "935:         if (proposedPosition != null) {",
          "936:             if (proposedPosition.getX() == null || proposedPosition.getY() == null) {",
          "937:                 throw new IllegalArgumentException(\"The x and y coordinate of the proposed position must be specified.\");",
          "938:             }",
          "939:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1043:             throw new IllegalArgumentException(\"Funnel ID cannot be specified.\");",
          "1044:         }",
          "1046:         if (requestFunnelEntity.getComponent().getParentGroupId() != null && !groupId.equals(requestFunnelEntity.getComponent().getParentGroupId())) {",
          "1047:             throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",",
          "1048:                     requestFunnelEntity.getComponent().getParentGroupId(), groupId));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1083:         final PositionDTO proposedPosition = requestFunnelEntity.getComponent().getPosition();",
          "1084:         if (proposedPosition != null) {",
          "1085:             if (proposedPosition.getX() == null || proposedPosition.getY() == null) {",
          "1086:                 throw new IllegalArgumentException(\"The x and y coordinate of the proposed position must be specified.\");",
          "1087:             }",
          "1088:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1185:             throw new IllegalArgumentException(\"Label ID cannot be specified.\");",
          "1186:         }",
          "1188:         if (requestLabelEntity.getComponent().getParentGroupId() != null && !groupId.equals(requestLabelEntity.getComponent().getParentGroupId())) {",
          "1189:             throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",",
          "1190:                     requestLabelEntity.getComponent().getParentGroupId(), groupId));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1232:         final PositionDTO proposedPosition = requestLabelEntity.getComponent().getPosition();",
          "1233:         if (proposedPosition != null) {",
          "1234:             if (proposedPosition.getX() == null || proposedPosition.getY() == null) {",
          "1235:                 throw new IllegalArgumentException(\"The x and y coordinate of the proposed position must be specified.\");",
          "1236:             }",
          "1237:         }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1334:             throw new IllegalArgumentException(\"The URI of the process group must be specified.\");",
          "1335:         }",
          "1337:         if (requestRemoteProcessGroupDTO.getParentGroupId() != null && !groupId.equals(requestRemoteProcessGroupDTO.getParentGroupId())) {",
          "1338:             throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",",
          "1339:                     requestRemoteProcessGroupDTO.getParentGroupId(), groupId));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1388:         final PositionDTO proposedPosition = requestRemoteProcessGroupDTO.getPosition();",
          "1389:         if (proposedPosition != null) {",
          "1390:             if (proposedPosition.getX() == null || proposedPosition.getY() == null) {",
          "1391:                 throw new IllegalArgumentException(\"The x and y coordinate of the proposed position must be specified.\");",
          "1392:             }",
          "1393:         }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1493:             throw new IllegalArgumentException(\"Connection ID cannot be specified.\");",
          "1494:         }",
          "1496:         if (requestConnectionEntity.getComponent().getParentGroupId() != null && !groupId.equals(requestConnectionEntity.getComponent().getParentGroupId())) {",
          "1497:             throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",",
          "1498:                     requestConnectionEntity.getComponent().getParentGroupId(), groupId));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1554:         final List<PositionDTO> proposedBends = requestConnectionEntity.getComponent().getBends();",
          "1555:         if (proposedBends != null) {",
          "1556:             for (final PositionDTO proposedBend : proposedBends) {",
          "1557:                 if (proposedBend.getX() == null || proposedBend.getY() == null) {",
          "1558:                     throw new IllegalArgumentException(\"The x and y coordinate of the each bend must be specified.\");",
          "1559:                 }",
          "1560:             }",
          "1561:         }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessorResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessorResource.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessorResource.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessorResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: import org.apache.nifi.web.Revision;",
          "37: import org.apache.nifi.web.UiExtensionType;",
          "38: import org.apache.nifi.web.api.dto.ComponentStateDTO;",
          "39: import org.apache.nifi.web.api.dto.ProcessorConfigDTO;",
          "40: import org.apache.nifi.web.api.dto.ProcessorDTO;",
          "41: import org.apache.nifi.web.api.dto.PropertyDescriptorDTO;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import org.apache.nifi.web.api.dto.PositionDTO;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "435:                     + \"not equal the processor id of the requested resource (%s).\", requestProcessorDTO.getId(), id));",
          "436:         }",
          "438:         if (isReplicateRequest()) {",
          "439:             return replicate(HttpMethod.PUT, requestProcessorEntity);",
          "440:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439:         final PositionDTO proposedPosition = requestProcessorDTO.getPosition();",
          "440:         if (proposedPosition != null) {",
          "441:             if (proposedPosition.getX() == null || proposedPosition.getY() == null) {",
          "442:                 throw new IllegalArgumentException(\"The x and y coordinate of the proposed position must be specified.\");",
          "443:             }",
          "444:         }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/RemoteProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/RemoteProcessGroupResource.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/RemoteProcessGroupResource.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/RemoteProcessGroupResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import org.apache.nifi.authorization.user.NiFiUserUtils;",
          "30: import org.apache.nifi.web.NiFiServiceFacade;",
          "31: import org.apache.nifi.web.Revision;",
          "32: import org.apache.nifi.web.api.dto.RemoteProcessGroupDTO;",
          "33: import org.apache.nifi.web.api.dto.RemoteProcessGroupPortDTO;",
          "34: import org.apache.nifi.web.api.dto.RevisionDTO;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import org.apache.nifi.web.api.dto.PositionDTO;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "471:                     + \"remote process group id of the requested resource (%s).\", requestRemoteProcessGroup.getId(), id));",
          "472:         }",
          "474:         if (isReplicateRequest()) {",
          "475:             return replicate(HttpMethod.PUT, requestRemoteProcessGroupEntity);",
          "476:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "475:         final PositionDTO proposedPosition = requestRemoteProcessGroup.getPosition();",
          "476:         if (proposedPosition != null) {",
          "477:             if (proposedPosition.getX() == null || proposedPosition.getY() == null) {",
          "478:                 throw new IllegalArgumentException(\"The x and y coordinate of the proposed position must be specified.\");",
          "479:             }",
          "480:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6aa8b5c61c734ce56aad7816b40df88d8316feeb",
      "candidate_info": {
        "commit_hash": "6aa8b5c61c734ce56aad7816b40df88d8316feeb",
        "repo": "apache/nifi",
        "commit_url": "https://github.com/apache/nifi/commit/6aa8b5c61c734ce56aad7816b40df88d8316feeb",
        "files": [
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ProcessGroupEntity.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/groups/ProcessGroup.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistry.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistryClient.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowSynchronizer.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/StandardFlowSerializer.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/fingerprint/FingerprintFactory.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/FileBasedFlowRegistry.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/StandardFlowRegistryClient.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/mapping/NiFiRegistryFlowMapper.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/util/BundleUtils.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/resources/FlowConfiguration.xsd",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/resources/nifi-context.xml",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/mock/MockProcessGroup.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/fingerprint/FingerprintFactoryTest.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistryUtils.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiServiceFacade.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/VersionsResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/controller/ControllerFacade.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/ProcessGroupDAO.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/RegistryDAO.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/FlowRegistryDAO.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/resources/nifi-web-api-context.xml"
        ],
        "message": "NIFI-4436: Added additional endpoints; bug fixes\n\nSigned-off-by: Matt Gilman <matt.c.gilman@gmail.com>",
        "before_after_code_files": [
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ProcessGroupEntity.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ProcessGroupEntity.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/groups/ProcessGroup.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/groups/ProcessGroup.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistry.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistry.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistryClient.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistryClient.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowSynchronizer.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowSynchronizer.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/StandardFlowSerializer.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/StandardFlowSerializer.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/fingerprint/FingerprintFactory.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/fingerprint/FingerprintFactory.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/FileBasedFlowRegistryClient.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/FileBasedFlowRegistry.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/StandardFlowRegistryClient.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/StandardFlowRegistryClient.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/mapping/NiFiRegistryFlowMapper.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/mapping/NiFiRegistryFlowMapper.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/util/BundleUtils.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/util/BundleUtils.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/resources/FlowConfiguration.xsd||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/resources/FlowConfiguration.xsd",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/mock/MockProcessGroup.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/mock/MockProcessGroup.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/fingerprint/FingerprintFactoryTest.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/fingerprint/FingerprintFactoryTest.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistryUtils.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistryUtils.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiServiceFacade.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiServiceFacade.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/VersionsResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/VersionsResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/controller/ControllerFacade.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/controller/ControllerFacade.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/ProcessGroupDAO.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/ProcessGroupDAO.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/RegistryDAO.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/RegistryDAO.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/FlowRegistryDAO.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/FlowRegistryDAO.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java"
          ],
          "candidate": [
            "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java"
          ]
        }
      },
      "candidate_diff": {
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ProcessGroupEntity.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ProcessGroupEntity.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ProcessGroupEntity.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ProcessGroupEntity.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.nifi.web.api.entity;",
          "20: import org.apache.nifi.web.api.dto.ProcessGroupDTO;",
          "21: import org.apache.nifi.web.api.dto.status.ProcessGroupStatusDTO;",
          "",
          "[Removed Lines]",
          "19: import io.swagger.annotations.ApiModelProperty;",
          "23: import javax.xml.bind.annotation.XmlRootElement;",
          "",
          "[Added Lines]",
          "19: import javax.xml.bind.annotation.XmlRootElement;",
          "21: import org.apache.nifi.registry.flow.VersionedFlowSnapshot;",
          "25: import io.swagger.annotations.ApiModelProperty;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     private ProcessGroupDTO component;",
          "32:     private ProcessGroupStatusDTO status;",
          "34:     private Integer runningCount;",
          "35:     private Integer stoppedCount;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:     private VersionedFlowSnapshot versionedFlowSnapshot;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:     public ProcessGroupDTO getComponent() {",
          "50:         return component;",
          "51:     }",
          "53:     public void setComponent(ProcessGroupDTO component) {",
          "54:         this.component = component;",
          "55:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:     @Override",
          "57:     @Override",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "180:         this.inactiveRemotePortCount = inactiveRemotePortCount;",
          "181:     }",
          "183: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188:     @ApiModelProperty(value = \"Returns the Versioned Flow that describes the contents of the Versioned Flow to be imported\", readOnly = true)",
          "189:     public VersionedFlowSnapshot getVersionedFlowSnapshot() {",
          "190:         return versionedFlowSnapshot;",
          "191:     }",
          "193:     public void setVersionedFlowSnapshot(VersionedFlowSnapshot versionedFlowSnapshot) {",
          "194:         this.versionedFlowSnapshot = versionedFlowSnapshot;",
          "195:     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/groups/ProcessGroup.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/groups/ProcessGroup.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/groups/ProcessGroup.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/groups/ProcessGroup.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "787:     void updateFlow(VersionedFlowSnapshot proposedSnapshot, String componentIdSeed, boolean verifyNotDirty);",
          "",
          "[Added Lines]",
          "788:     void updateFlow(VersionedFlowSnapshot proposedSnapshot, String componentIdSeed, boolean verifyNotDirty, boolean updateSettings);",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistry.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistry.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistry.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistry.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import java.util.Set;",
          "26: public interface FlowRegistry {",
          "31:     String getURL();",
          "36:     String getName();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:     String getIdentifier();",
          "35:     String getDescription();",
          "42:     void setDescription(String description);",
          "54:     void setURL(String url);",
          "66:     void setName(String name);",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistryClient.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistryClient.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistryClient.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistryClient.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:     }",
          "36:     Set<String> getRegistryIdentifiers();",
          "37: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:     void addFlowRegistry(FlowRegistry registry);",
          "40:     FlowRegistry addFlowRegistry(String registryId, String registryName, String registryUrl, String description);",
          "42:     FlowRegistry removeFlowRegistry(String registryId);",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "165: import org.apache.nifi.registry.ComponentVariableRegistry;",
          "166: import org.apache.nifi.registry.VariableRegistry;",
          "167: import org.apache.nifi.registry.flow.FlowRegistryClient;",
          "168: import org.apache.nifi.registry.variable.MutableVariableRegistry;",
          "169: import org.apache.nifi.registry.variable.StandardComponentVariableRegistry;",
          "170: import org.apache.nifi.remote.HttpRemoteSiteListener;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168: import org.apache.nifi.registry.flow.VersionedConnection;",
          "169: import org.apache.nifi.registry.flow.VersionedProcessGroup;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2128:         }",
          "2129:     }",
          "2131:     private void verifyProcessorsInSnippet(final FlowSnippetDTO templateContents, final Map<String, Set<BundleCoordinate>> supportedTypes) {",
          "2132:         if (templateContents.getProcessors() != null) {",
          "2133:             templateContents.getProcessors().forEach(processor -> {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2133:     private void verifyBundleInVersionedFlow(final org.apache.nifi.registry.flow.Bundle requiredBundle, final Set<BundleCoordinate> supportedBundles) {",
          "2134:         final BundleCoordinate requiredCoordinate = new BundleCoordinate(requiredBundle.getGroup(), requiredBundle.getArtifact(), requiredBundle.getVersion());",
          "2135:         if (!supportedBundles.contains(requiredCoordinate)) {",
          "2136:             throw new IllegalStateException(\"Unsupported bundle: \" + requiredCoordinate);",
          "2137:         }",
          "2138:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2150:         }",
          "2151:     }",
          "2153:     private void verifyControllerServicesInSnippet(final FlowSnippetDTO templateContents, final Map<String, Set<BundleCoordinate>> supportedTypes) {",
          "2154:         if (templateContents.getControllerServices() != null) {",
          "2155:             templateContents.getControllerServices().forEach(controllerService -> {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2162:     private void verifyProcessorsInVersionedFlow(final VersionedProcessGroup versionedFlow, final Map<String, Set<BundleCoordinate>> supportedTypes) {",
          "2163:         if (versionedFlow.getProcessors() != null) {",
          "2164:             versionedFlow.getProcessors().forEach(processor -> {",
          "2165:                 if (processor.getBundle() == null) {",
          "2166:                     throw new IllegalArgumentException(\"Processor bundle must be specified.\");",
          "2167:                 }",
          "2169:                 if (supportedTypes.containsKey(processor.getType())) {",
          "2170:                     verifyBundleInVersionedFlow(processor.getBundle(), supportedTypes.get(processor.getType()));",
          "2171:                 } else {",
          "2172:                     throw new IllegalStateException(\"Invalid Processor Type: \" + processor.getType());",
          "2173:                 }",
          "2174:             });",
          "2175:         }",
          "2177:         if (versionedFlow.getProcessGroups() != null) {",
          "2178:             versionedFlow.getProcessGroups().forEach(processGroup -> {",
          "2179:                 verifyProcessorsInVersionedFlow(processGroup, supportedTypes);",
          "2180:             });",
          "2181:         }",
          "2182:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2172:         }",
          "2173:     }",
          "2175:     public void verifyComponentTypesInSnippet(final FlowSnippetDTO templateContents) {",
          "2176:         final Map<String, Set<BundleCoordinate>> processorClasses = new HashMap<>();",
          "2177:         for (final Class<?> c : ExtensionManager.getExtensions(Processor.class)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2206:     private void verifyControllerServicesInVersionedFlow(final VersionedProcessGroup versionedFlow, final Map<String, Set<BundleCoordinate>> supportedTypes) {",
          "2207:         if (versionedFlow.getControllerServices() != null) {",
          "2208:             versionedFlow.getControllerServices().forEach(controllerService -> {",
          "2209:                 if (supportedTypes.containsKey(controllerService.getType())) {",
          "2210:                     if (controllerService.getBundle() == null) {",
          "2211:                         throw new IllegalArgumentException(\"Controller Service bundle must be specified.\");",
          "2212:                     }",
          "2214:                     verifyBundleInVersionedFlow(controllerService.getBundle(), supportedTypes.get(controllerService.getType()));",
          "2215:                 } else {",
          "2216:                     throw new IllegalStateException(\"Invalid Controller Service Type: \" + controllerService.getType());",
          "2217:                 }",
          "2218:             });",
          "2219:         }",
          "2221:         if (versionedFlow.getProcessGroups() != null) {",
          "2222:             versionedFlow.getProcessGroups().forEach(processGroup -> {",
          "2223:                 verifyControllerServicesInVersionedFlow(processGroup, supportedTypes);",
          "2224:             });",
          "2225:         }",
          "2226:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2210:         }",
          "2211:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2266:     public void verifyComponentTypesInSnippet(final VersionedProcessGroup versionedFlow) {",
          "2267:         final Map<String, Set<BundleCoordinate>> processorClasses = new HashMap<>();",
          "2268:         for (final Class<?> c : ExtensionManager.getExtensions(Processor.class)) {",
          "2269:             final String name = c.getName();",
          "2270:             processorClasses.put(name, ExtensionManager.getBundles(name).stream().map(bundle -> bundle.getBundleDetails().getCoordinate()).collect(Collectors.toSet()));",
          "2271:         }",
          "2272:         verifyProcessorsInVersionedFlow(versionedFlow, processorClasses);",
          "2274:         final Map<String, Set<BundleCoordinate>> controllerServiceClasses = new HashMap<>();",
          "2275:         for (final Class<?> c : ExtensionManager.getExtensions(ControllerService.class)) {",
          "2276:             final String name = c.getName();",
          "2277:             controllerServiceClasses.put(name, ExtensionManager.getBundles(name).stream().map(bundle -> bundle.getBundleDetails().getCoordinate()).collect(Collectors.toSet()));",
          "2278:         }",
          "2279:         verifyControllerServicesInVersionedFlow(versionedFlow, controllerServiceClasses);",
          "2281:         final Set<String> prioritizerClasses = new HashSet<>();",
          "2282:         for (final Class<?> c : ExtensionManager.getExtensions(FlowFilePrioritizer.class)) {",
          "2283:             prioritizerClasses.add(c.getName());",
          "2284:         }",
          "2286:         final Set<VersionedConnection> allConns = new HashSet<>();",
          "2287:         allConns.addAll(versionedFlow.getConnections());",
          "2288:         for (final VersionedProcessGroup childGroup : versionedFlow.getProcessGroups()) {",
          "2289:             allConns.addAll(findAllConnections(childGroup));",
          "2290:         }",
          "2292:         for (final VersionedConnection conn : allConns) {",
          "2293:             final List<String> prioritizers = conn.getPrioritizers();",
          "2294:             if (prioritizers != null) {",
          "2295:                 for (final String prioritizer : prioritizers) {",
          "2296:                     if (!prioritizerClasses.contains(prioritizer)) {",
          "2297:                         throw new IllegalStateException(\"Invalid FlowFile Prioritizer Type: \" + prioritizer);",
          "2298:                     }",
          "2299:                 }",
          "2300:             }",
          "2301:         }",
          "2302:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2270:         return conns;",
          "2271:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2364:     private Set<VersionedConnection> findAllConnections(final VersionedProcessGroup group) {",
          "2365:         final Set<VersionedConnection> conns = new HashSet<>();",
          "2366:         for (final VersionedConnection connection : group.getConnections()) {",
          "2367:             conns.add(connection);",
          "2368:         }",
          "2370:         for (final VersionedProcessGroup childGroup : group.getProcessGroups()) {",
          "2371:             conns.addAll(findAllConnections(childGroup));",
          "2372:         }",
          "2373:         return conns;",
          "2374:     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowSynchronizer.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowSynchronizer.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowSynchronizer.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowSynchronizer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: import org.apache.nifi.logging.LogLevel;",
          "86: import org.apache.nifi.processor.Relationship;",
          "87: import org.apache.nifi.processor.SimpleProcessLogger;",
          "88: import org.apache.nifi.registry.flow.StandardVersionControlInformation;",
          "89: import org.apache.nifi.registry.flow.VersionControlInformation;",
          "90: import org.apache.nifi.remote.RemoteGroupPort;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: import org.apache.nifi.registry.flow.FlowRegistryClient;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:         try {",
          "185:             if (flowAlreadySynchronized) {",
          "186:                 existingFlow = toBytes(controller);",
          "188:             } else {",
          "189:                 existingFlow = readFlowFromDisk();",
          "190:                 if (existingFlow == null || existingFlow.length == 0) {",
          "",
          "[Removed Lines]",
          "187:                 existingFlowEmpty = controller.getGroup(controller.getRootGroupId()).isEmpty() && controller.getAllReportingTasks().isEmpty() && controller.getAllControllerServices().isEmpty();",
          "",
          "[Added Lines]",
          "188:                 existingFlowEmpty = controller.getGroup(controller.getRootGroupId()).isEmpty()",
          "189:                     && controller.getAllReportingTasks().isEmpty()",
          "190:                     && controller.getAllControllerServices().isEmpty()",
          "191:                     && controller.getFlowRegistryClient().getRegistryIdentifiers().isEmpty();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:                         unrootedControllerServiceElements = DomUtils.getChildElementsByTagName(controllerServicesElement, \"controllerService\");",
          "221:                     }",
          "223:                     logger.trace(\"Parsing process group from DOM\");",
          "224:                     final Element rootGroupElement = (Element) rootElement.getElementsByTagName(\"rootGroup\").item(0);",
          "225:                     final ProcessGroupDTO rootGroupDto = FlowFromDOMFactory.getProcessGroup(null, rootGroupElement, encryptor, encodingVersion);",
          "227:                     logger.debug(\"Existing Flow Empty = {}\", existingFlowEmpty);",
          "228:                 }",
          "229:             }",
          "",
          "[Removed Lines]",
          "226:                     existingFlowEmpty = taskElements.isEmpty() && unrootedControllerServiceElements.isEmpty() && isEmpty(rootGroupDto);",
          "",
          "[Added Lines]",
          "227:                     final boolean registriesPresent;",
          "228:                     final Element registriesElement = DomUtils.getChild(rootElement, \"registries\");",
          "229:                     if (registriesElement == null) {",
          "230:                         registriesPresent = false;",
          "231:                     } else {",
          "232:                         final List<Element> flowRegistryElems = DomUtils.getChildElementsByTagName(registriesElement, \"flowRegistry\");",
          "233:                         registriesPresent = !flowRegistryElems.isEmpty();",
          "234:                     }",
          "239:                     existingFlowEmpty = taskElements.isEmpty()",
          "240:                         && unrootedControllerServiceElements.isEmpty()",
          "241:                         && isEmpty(rootGroupDto)",
          "242:                         && registriesPresent;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "319:                     final Element rootGroupElement = (Element) rootElement.getElementsByTagName(\"rootGroup\").item(0);",
          "322:                     final ProcessGroup rootGroup;",
          "323:                     if (!flowAlreadySynchronized || existingFlowEmpty) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "337:                     if (!flowAlreadySynchronized || existingFlowEmpty) {",
          "338:                         final Element registriesElement = DomUtils.getChild(rootElement, \"registries\");",
          "339:                         if (registriesElement != null) {",
          "340:                             final List<Element> flowRegistryElems = DomUtils.getChildElementsByTagName(registriesElement, \"flowRegistry\");",
          "341:                             for (final Element flowRegistryElement : flowRegistryElems) {",
          "342:                                 final String registryId = getString(flowRegistryElement, \"id\");",
          "343:                                 final String registryName = getString(flowRegistryElement, \"name\");",
          "344:                                 final String registryUrl = getString(flowRegistryElement, \"url\");",
          "345:                                 final String description = getString(flowRegistryElement, \"description\");",
          "347:                                 final FlowRegistryClient client = controller.getFlowRegistryClient();",
          "348:                                 client.addFlowRegistry(registryId, registryName, registryUrl, description);",
          "349:                             }",
          "350:                         }",
          "351:                     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/StandardFlowSerializer.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/StandardFlowSerializer.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/StandardFlowSerializer.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/StandardFlowSerializer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: import org.apache.nifi.processor.Relationship;",
          "40: import org.apache.nifi.registry.VariableDescriptor;",
          "41: import org.apache.nifi.registry.VariableRegistry;",
          "42: import org.apache.nifi.registry.flow.VersionControlInformation;",
          "43: import org.apache.nifi.remote.RemoteGroupPort;",
          "44: import org.apache.nifi.remote.RootGroupPort;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: import org.apache.nifi.registry.flow.FlowRegistry;",
          "43: import org.apache.nifi.registry.flow.FlowRegistryClient;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: public class StandardFlowSerializer implements FlowSerializer {",
          "79:     private final StringEncryptor encryptor;",
          "",
          "[Removed Lines]",
          "77:     private static final String MAX_ENCODING_VERSION = \"1.2\";",
          "",
          "[Added Lines]",
          "79:     private static final String MAX_ENCODING_VERSION = \"1.3\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:             doc.appendChild(rootNode);",
          "99:             addTextElement(rootNode, \"maxTimerDrivenThreadCount\", controller.getMaxTimerDrivenThreadCount());",
          "100:             addTextElement(rootNode, \"maxEventDrivenThreadCount\", controller.getMaxEventDrivenThreadCount());",
          "101:             addProcessGroup(rootNode, controller.getGroup(controller.getRootGroupId()), \"rootGroup\", scheduledStateLookup);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:             final Element registriesElement = doc.createElement(\"registries\");",
          "105:             rootNode.appendChild(registriesElement);",
          "107:             addFlowRegistries(registriesElement, controller.getFlowRegistryClient());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "130:         }",
          "131:     }",
          "133:     private void addSize(final Element parentElement, final Size size) {",
          "134:         final Element element = parentElement.getOwnerDocument().createElement(\"size\");",
          "135:         element.setAttribute(\"width\", String.valueOf(size.getWidth()));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:     private void addFlowRegistries(final Element parentElement, final FlowRegistryClient registryClient) {",
          "141:         for (final String registryId : registryClient.getRegistryIdentifiers()) {",
          "142:             final FlowRegistry flowRegistry = registryClient.getFlowRegistry(registryId);",
          "144:             final Element registryElement = parentElement.getOwnerDocument().createElement(\"flowRegistry\");",
          "145:             parentElement.appendChild(registryElement);",
          "147:             addStringElement(registryElement, \"id\", flowRegistry.getIdentifier());",
          "148:             addStringElement(registryElement, \"name\", flowRegistry.getName());",
          "149:             addStringElement(registryElement, \"url\", flowRegistry.getURL());",
          "150:             addStringElement(registryElement, \"description\", flowRegistry.getDescription());",
          "151:         }",
          "152:     }",
          "154:     private void addStringElement(final Element parentElement, final String elementName, final String value) {",
          "155:         final Element childElement = parentElement.getOwnerDocument().createElement(elementName);",
          "156:         childElement.setTextContent(value);",
          "157:         parentElement.appendChild(childElement);",
          "158:     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/fingerprint/FingerprintFactory.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/fingerprint/FingerprintFactory.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/fingerprint/FingerprintFactory.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/fingerprint/FingerprintFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import java.util.Map;",
          "28: import java.util.SortedMap;",
          "29: import java.util.TreeMap;",
          "31: import javax.xml.XMLConstants;",
          "32: import javax.xml.parsers.DocumentBuilder;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import java.util.stream.Stream;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "198:     }",
          "200:     private StringBuilder addFlowControllerFingerprint(final StringBuilder builder, final Element flowControllerElem, final FlowController controller) {",
          "202:         final Element rootGroupElem = (Element) DomUtils.getChildNodesByTagName(flowControllerElem, \"rootGroup\").item(0);",
          "203:         addProcessGroupFingerprint(builder, rootGroupElem, controller);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:         final Element registriesElement = DomUtils.getChild(flowControllerElem, \"registries\");",
          "204:         if (registriesElement == null) {",
          "205:             builder.append(\"NO_VALUE\");",
          "206:         } else {",
          "207:             final List<Element> flowRegistryElems = DomUtils.getChildElementsByTagName(registriesElement, \"flowRegistry\");",
          "208:             if (flowRegistryElems.isEmpty()) {",
          "209:                 builder.append(\"NO_VALUE\");",
          "210:             } else {",
          "211:                 for (final Element flowRegistryElement : flowRegistryElems) {",
          "212:                     addFlowRegistryFingerprint(builder, flowRegistryElement);",
          "213:                 }",
          "214:             }",
          "215:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "265:         return builder;",
          "266:     }",
          "268:     private StringBuilder addProcessGroupFingerprint(final StringBuilder builder, final Element processGroupElem, final FlowController controller) throws FingerprintException {",
          "270:         appendFirstValue(builder, DomUtils.getChildNodesByTagName(processGroupElem, \"id\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284:     private StringBuilder addFlowRegistryFingerprint(final StringBuilder builder, final Element flowRegistryElement) {",
          "285:         Stream.of(\"id\", \"name\", \"url\", \"description\").forEach(elementName -> appendFirstValue(builder, DomUtils.getChildNodesByTagName(flowRegistryElement, elementName)));",
          "286:         return builder;",
          "287:     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: import org.apache.nifi.registry.flow.ConnectableComponent;",
          "73: import org.apache.nifi.registry.flow.FlowRegistry;",
          "74: import org.apache.nifi.registry.flow.FlowRegistryClient;",
          "76: import org.apache.nifi.registry.flow.StandardVersionControlInformation;",
          "77: import org.apache.nifi.registry.flow.UnknownResourceException;",
          "78: import org.apache.nifi.registry.flow.VersionControlInformation;",
          "",
          "[Removed Lines]",
          "75: import org.apache.nifi.registry.flow.RemoteFlowCoordinates;",
          "",
          "[Added Lines]",
          "75: import org.apache.nifi.registry.flow.VersionedFlowCoordinates;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2835:         }",
          "2836:     }",
          "2838:     public void disconnectVersionControl() {",
          "2839:         writeLock.lock();",
          "2840:         try {",
          "2842:             this.versionControlInfo.set(null);",
          "2843:         } finally {",
          "2844:             writeLock.unlock();",
          "2845:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2838:     @Override",
          "2845:             applyVersionedComponentIds(this, id -> null);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2850:             return;",
          "2851:         }",
          "2855:         processGroup.getConnections().stream()",
          "2857:         processGroup.getProcessors().stream()",
          "2859:         processGroup.getInputPorts().stream()",
          "2861:         processGroup.getOutputPorts().stream()",
          "2863:         processGroup.getLabels().stream()",
          "2865:         processGroup.getFunnels().stream()",
          "2867:         processGroup.getControllerServices(false).stream()",
          "2870:         processGroup.getRemoteProcessGroups().stream()",
          "2871:             .forEach(rpg -> {",
          "2874:                 rpg.getInputPorts().stream()",
          "2877:                 rpg.getOutputPorts().stream()",
          "2879:             });",
          "2881:         processGroup.getProcessGroups().stream()",
          "2883:     }",
          "",
          "[Removed Lines]",
          "2853:         processGroup.setVersionedComponentId(versionedComponentIds.get(processGroup.getIdentifier()));",
          "2856:             .forEach(component -> component.setVersionedComponentId(versionedComponentIds.get(component.getIdentifier())));",
          "2858:             .forEach(component -> component.setVersionedComponentId(versionedComponentIds.get(component.getIdentifier())));",
          "2860:             .forEach(component -> component.setVersionedComponentId(versionedComponentIds.get(component.getIdentifier())));",
          "2862:             .forEach(component -> component.setVersionedComponentId(versionedComponentIds.get(component.getIdentifier())));",
          "2864:             .forEach(component -> component.setVersionedComponentId(versionedComponentIds.get(component.getIdentifier())));",
          "2866:             .forEach(component -> component.setVersionedComponentId(versionedComponentIds.get(component.getIdentifier())));",
          "2868:             .forEach(component -> component.setVersionedComponentId(versionedComponentIds.get(component.getIdentifier())));",
          "2872:                 rpg.setVersionedComponentId(versionedComponentIds.get(rpg.getIdentifier()));",
          "2875:                     .forEach(port -> port.setVersionedComponentId(versionedComponentIds.get(port.getIdentifier())));",
          "2878:                     .forEach(port -> port.setVersionedComponentId(versionedComponentIds.get(port.getIdentifier())));",
          "2882:             .forEach(childGroup -> updateVersionedComponentIds(childGroup, versionedComponentIds));",
          "",
          "[Added Lines]",
          "2856:         applyVersionedComponentIds(processGroup, versionedComponentIds::get);",
          "2857:     }",
          "2859:     private void applyVersionedComponentIds(final ProcessGroup processGroup, final Function<String, String> lookup) {",
          "2860:         processGroup.setVersionedComponentId(lookup.apply(processGroup.getIdentifier()));",
          "2863:             .forEach(component -> component.setVersionedComponentId(lookup.apply(component.getIdentifier())));",
          "2865:             .forEach(component -> component.setVersionedComponentId(lookup.apply(component.getIdentifier())));",
          "2867:             .forEach(component -> component.setVersionedComponentId(lookup.apply(component.getIdentifier())));",
          "2869:             .forEach(component -> component.setVersionedComponentId(lookup.apply(component.getIdentifier())));",
          "2871:             .forEach(component -> component.setVersionedComponentId(lookup.apply(component.getIdentifier())));",
          "2873:             .forEach(component -> component.setVersionedComponentId(lookup.apply(component.getIdentifier())));",
          "2875:             .forEach(component -> component.setVersionedComponentId(lookup.apply(component.getIdentifier())));",
          "2879:                 rpg.setVersionedComponentId(lookup.apply(rpg.getIdentifier()));",
          "2882:                     .forEach(port -> port.setVersionedComponentId(lookup.apply(port.getIdentifier())));",
          "2885:                     .forEach(port -> port.setVersionedComponentId(lookup.apply(port.getIdentifier())));",
          "2889:             .filter(childGroup -> childGroup.getVersionControlInformation() != null)",
          "2890:             .forEach(childGroup -> applyVersionedComponentIds(childGroup, lookup));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2933:     @Override",
          "2935:         writeLock.lock();",
          "2936:         try {",
          "2939:             final NiFiRegistryFlowMapper mapper = new NiFiRegistryFlowMapper();",
          "2940:             final VersionedProcessGroup versionedGroup = mapper.mapProcessGroup(this, flowController.getFlowRegistryClient());",
          "",
          "[Removed Lines]",
          "2934:     public void updateFlow(final VersionedFlowSnapshot proposedSnapshot, final String componentIdSeed, final boolean verifyNotDirty) {",
          "2937:             verifyCanUpdate(proposedSnapshot, true, verifyNotDirty); // TODO: Should perform more verification... verifyCanDelete, verifyCanUpdate, etc. Recursively if child is under VC also",
          "",
          "[Added Lines]",
          "2942:     public void updateFlow(final VersionedFlowSnapshot proposedSnapshot, final String componentIdSeed, final boolean verifyNotDirty, final boolean updateSettings) {",
          "2945:             verifyCanUpdate(proposedSnapshot, true, verifyNotDirty);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2950:                 .map(diff -> diff.getComponentA() == null ? diff.getComponentB().getIdentifier() : diff.getComponentA().getIdentifier())",
          "2951:                 .collect(Collectors.toSet());",
          "2959:             }",
          "2962:         } catch (final ProcessorInstantiationException pie) {",
          "2963:             throw new RuntimeException(pie);",
          "2964:         } finally {",
          "",
          "[Removed Lines]",
          "2953:             if (LOG.isDebugEnabled()) {",
          "2954:                 LOG.debug(\"Updating {} to {}; there are {} differences to take into account: {}\", this, proposedSnapshot, flowComparison.getDifferences().size(), flowComparison.getDifferences());",
          "2955:             } else {",
          "2958:                 LOG.info(\"Updating {} to {}; there are {} differences to take into account: {}\", this, proposedSnapshot, flowComparison.getDifferences().size(), flowComparison.getDifferences());",
          "2961:             updateProcessGroup(this, proposedSnapshot.getFlowContents(), componentIdSeed, updatedVersionedComponentIds, false);",
          "",
          "[Added Lines]",
          "2961:             if (LOG.isInfoEnabled()) {",
          "2962:                 final String differencesByLine = flowComparison.getDifferences().stream()",
          "2963:                     .map(FlowDifference::toString)",
          "2964:                     .collect(Collectors.joining(\"\\n\"));",
          "2966:                 LOG.info(\"Updating {} to {}; there are {} differences to take into account:\\n{}\", this, proposedSnapshot, flowComparison.getDifferences().size(), differencesByLine);",
          "2969:             updateProcessGroup(this, proposedSnapshot.getFlowContents(), componentIdSeed, updatedVersionedComponentIds, false, updateSettings);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2970:     private void updateProcessGroup(final ProcessGroup group, final VersionedProcessGroup proposed, final String componentIdSeed,",
          "2973:         group.setComments(proposed.getComments());",
          "2975:         if (updatePosition && proposed.getPosition() != null) {",
          "2976:             group.setPosition(new Position(proposed.getPosition().getX(), proposed.getPosition().getY()));",
          "2977:         }",
          "",
          "[Removed Lines]",
          "2971:         final Set<String> updatedVersionedComponentIds, final boolean updatePosition) throws ProcessorInstantiationException {",
          "2974:         group.setName(proposed.getName());",
          "",
          "[Added Lines]",
          "2979:         final Set<String> updatedVersionedComponentIds, final boolean updatePosition, final boolean updateName) throws ProcessorInstantiationException {",
          "2983:         if (updateName) {",
          "2984:             group.setName(proposed.getName());",
          "2985:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2999:         group.setVariables(updatedVariableMap);",
          "3002:         if (remoteCoordinates != null) {",
          "3003:             final String registryId = flowController.getFlowRegistryClient().getFlowRegistryId(remoteCoordinates.getRegistryUrl());",
          "3004:             final String bucketId = remoteCoordinates.getBucketId();",
          "",
          "[Removed Lines]",
          "3001:         final RemoteFlowCoordinates remoteCoordinates = proposed.getRemoteFlowCoordinates();",
          "",
          "[Added Lines]",
          "3013:         final VersionedFlowCoordinates remoteCoordinates = proposed.getVersionedFlowCoordinates();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3022:                 final ProcessGroup added = addProcessGroup(proposedChildGroup, componentIdSeed);",
          "3023:                 LOG.info(\"Added {} to {}\", added, this);",
          "3024:             } else {",
          "3026:                 LOG.info(\"Updated {}\", childGroup);",
          "3027:             }",
          "",
          "[Removed Lines]",
          "3025:                 updateProcessGroup(childGroup, proposedChildGroup, componentIdSeed, updatedVersionedComponentIds, true);",
          "",
          "[Added Lines]",
          "3037:                 updateProcessGroup(childGroup, proposedChildGroup, componentIdSeed, updatedVersionedComponentIds, true, updateName);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3136:         final Map<String, ProcessorNode> processorsByVersionedId = group.getProcessors().stream()",
          "3137:             .collect(Collectors.toMap(component -> component.getVersionedComponentId().orElse(component.getIdentifier()), Function.identity()));",
          "3138:         final Set<String> processorsRemoved = new HashSet<>(processorsByVersionedId.keySet());",
          "3140:         for (final VersionedProcessor proposedProcessor : proposed.getProcessors()) {",
          "3141:             final ProcessorNode processor = processorsByVersionedId.get(proposedProcessor.getIdentifier());",
          "3142:             if (processor == null) {",
          "3143:                 final ProcessorNode added = addProcessor(proposedProcessor, componentIdSeed);",
          "3144:                 LOG.info(\"Added {} to {}\", added, this);",
          "3145:             } else if (updatedVersionedComponentIds.contains(proposedProcessor.getIdentifier())) {",
          "3146:                 updateProcessor(processor, proposedProcessor);",
          "3147:                 LOG.info(\"Updated {}\", processor);",
          "3148:             } else {",
          "3149:                 processor.setPosition(new Position(proposedProcessor.getPosition().getX(), proposedProcessor.getPosition().getY()));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3151:         final Map<ProcessorNode, Set<Relationship>> autoTerminatedRelationships = new HashMap<>();",
          "3158:                 final Set<Relationship> proposedAutoTerminated = proposedProcessor.getAutoTerminatedRelationships().stream()",
          "3159:                     .map(relName -> added.getRelationship(relName))",
          "3160:                     .collect(Collectors.toSet());",
          "3161:                 autoTerminatedRelationships.put(added, proposedAutoTerminated);",
          "3166:                 final Set<Relationship> proposedAutoTerminated = proposedProcessor.getAutoTerminatedRelationships().stream()",
          "3167:                     .map(relName -> processor.getRelationship(relName))",
          "3168:                     .collect(Collectors.toSet());",
          "3170:                 if (!processor.getAutoTerminatedRelationships().equals(proposedAutoTerminated)) {",
          "3171:                     autoTerminatedRelationships.put(processor, proposedAutoTerminated);",
          "3172:                 }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3205:             group.removeConnection(connection);",
          "3206:         }",
          "3208:         for (final String removedVersionedId : controllerServicesRemoved) {",
          "3209:             final ControllerServiceNode service = servicesByVersionedId.get(removedVersionedId);",
          "3210:             LOG.info(\"Removing {} from {}\", service, group);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3239:         autoTerminatedRelationships.forEach((proc, rels) -> proc.setAutoTerminatedRelationships(rels));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3276:         final ProcessGroup group = flowController.createProcessGroup(generateUuid(componentIdSeed));",
          "3277:         group.setVersionedComponentId(proposed.getIdentifier());",
          "3278:         addProcessGroup(group);",
          "3280:         return group;",
          "3281:     }",
          "",
          "[Removed Lines]",
          "3279:         updateProcessGroup(group, proposed, componentIdSeed, Collections.emptySet(), true);",
          "",
          "[Added Lines]",
          "3313:         updateProcessGroup(group, proposed, componentIdSeed, Collections.emptySet(), true, true);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3535:         processor.setYieldPeriod(proposed.getYieldDuration());",
          "3536:         processor.setPosition(new Position(proposed.getPosition().getX(), proposed.getPosition().getY()));",
          "3542:         if (!isEqual(processor.getBundleCoordinate(), proposed.getBundle())) {",
          "3543:             final BundleCoordinate newBundleCoordinate = toCoordinate(proposed.getBundle());",
          "3544:             final List<PropertyDescriptor> descriptors = new ArrayList<>(processor.getProperties().keySet());",
          "",
          "[Removed Lines]",
          "3538:         processor.setAutoTerminatedRelationships(proposed.getAutoTerminatedRelationships().stream()",
          "3539:             .map(relName -> processor.getRelationship(relName))",
          "3540:             .collect(Collectors.toSet()));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3647:             @Override",
          "3648:             public String getName() {",
          "3650:             }",
          "3651:         };",
          "",
          "[Removed Lines]",
          "3649:                 return \"Flow Under Version Control\";",
          "",
          "[Added Lines]",
          "3680:                 return \"Versioned Flow\";",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3659:             .findAny()",
          "3660:             .isPresent();",
          "3663:         return Optional.of(modified);",
          "3664:     }",
          "",
          "[Removed Lines]",
          "3662:         LOG.debug(\"There are {} differences between this flow and the versioned snapshot of this flow: {}\", differences.size(), differences);",
          "",
          "[Added Lines]",
          "3693:         LOG.debug(\"There are {} differences between this Local FLow and the Versioned Flow: {}\", differences.size(), differences);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3669:         readLock.lock();",
          "3670:         try {",
          "3671:             final VersionControlInformation versionControlInfo = getVersionControlInformation();",
          "3687:                 }",
          "3693:                 }",
          "3694:             }",
          "",
          "[Removed Lines]",
          "3672:             if (versionControlInfo == null) {",
          "3673:                 throw new IllegalStateException(\"Cannot update the Version of the flow for \" + this",
          "3674:                     + \" because the Process Group is not currently under Version Control\");",
          "3675:             }",
          "3677:             if (!versionControlInfo.getFlowIdentifier().equals(updatedFlow.getSnapshotMetadata().getFlowIdentifier())) {",
          "3678:                 throw new IllegalStateException(this + \" is under version control but the given flow does not match the flow that this Process Group is synchronized with\");",
          "3679:             }",
          "3681:             if (verifyNotDirty) {",
          "3682:                 final Optional<Boolean> modifiedOption = versionControlInfo.getModified();",
          "3683:                 if (!modifiedOption.isPresent()) {",
          "3684:                     throw new IllegalStateException(this + \" cannot be updated to a different version of the flow because the local flow \"",
          "3685:                         + \"has not yet been synchronized with the Flow Registry. The Process Group must be\"",
          "3686:                         + \" synched with the Flow Registry before continuing. This will happen periodically in the background, so please try the request again later\");",
          "3689:                 if (Boolean.TRUE.equals(modifiedOption.get())) {",
          "3690:                     throw new IllegalStateException(\"Cannot change the Version of the flow for \" + this",
          "3691:                         + \" because the Process Group has been modified since it was last synchronized with the Flow Registry. The Process Group must be\"",
          "3692:                         + \" restored to its original form before changing the version\");",
          "",
          "[Added Lines]",
          "3703:             if (versionControlInfo != null) {",
          "3704:                 if (!versionControlInfo.getFlowIdentifier().equals(updatedFlow.getSnapshotMetadata().getFlowIdentifier())) {",
          "3705:                     throw new IllegalStateException(this + \" is under version control but the given flow does not match the flow that this Process Group is synchronized with\");",
          "3708:                 if (verifyNotDirty) {",
          "3709:                     final Optional<Boolean> modifiedOption = versionControlInfo.getModified();",
          "3710:                     if (!modifiedOption.isPresent()) {",
          "3711:                         throw new IllegalStateException(this + \" cannot be updated to a different version of the flow because the local flow \"",
          "3712:                             + \"has not yet been synchronized with the Flow Registry. The Process Group must be\"",
          "3713:                             + \" synched with the Flow Registry before continuing. This will happen periodically in the background, so please try the request again later\");",
          "3714:                     }",
          "3716:                     if (Boolean.TRUE.equals(modifiedOption.get())) {",
          "3717:                         throw new IllegalStateException(\"Cannot change the Version of the flow for \" + this",
          "3718:                             + \" because the Process Group has been modified since it was last synchronized with the Flow Registry. The Process Group must be\"",
          "3719:                             + \" restored to its original form before changing the version\");",
          "3720:                     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/FileBasedFlowRegistryClient.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/FileBasedFlowRegistry.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/FileBasedFlowRegistryClient.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/FileBasedFlowRegistry.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.nifi.registry.flow;",
          "29: import java.io.File;",
          "30: import java.io.FileInputStream;",
          "31: import java.io.FileOutputStream;",
          "32: import java.io.IOException;",
          "33: import java.io.InputStream;",
          "34: import java.io.OutputStream;",
          "36: import java.util.Comparator;",
          "37: import java.util.HashMap;",
          "38: import java.util.HashSet;",
          "",
          "[Removed Lines]",
          "20: import com.fasterxml.jackson.core.JsonFactory;",
          "21: import com.fasterxml.jackson.core.JsonGenerator;",
          "22: import com.fasterxml.jackson.core.JsonParser;",
          "23: import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;",
          "24: import com.fasterxml.jackson.databind.DeserializationFeature;",
          "25: import com.fasterxml.jackson.databind.ObjectMapper;",
          "26: import org.apache.nifi.authorization.user.NiFiUser;",
          "27: import org.apache.nifi.registry.bucket.Bucket;",
          "35: import java.util.Collections;",
          "",
          "[Added Lines]",
          "26: import java.net.URI;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: import java.util.TreeSet;",
          "45: import java.util.UUID;",
          "53:     private final File directory;",
          "54:     private final Map<String, Set<String>> flowNamesByBucket = new HashMap<>();",
          "55:     private final JsonFactory jsonFactory = new JsonFactory();",
          "58:         if (!directory.exists() && !directory.mkdirs()) {",
          "59:             throw new IOException(\"Could not access or create directory \" + directory.getAbsolutePath() + \" for Flow Registry\");",
          "60:         }",
          "63:         recoverBuckets();",
          "64:     }",
          "",
          "[Removed Lines]",
          "52: public class FileBasedFlowRegistryClient implements FlowRegistryClient, FlowRegistry {",
          "57:     public FileBasedFlowRegistryClient(final File directory) throws IOException {",
          "62:         this.directory = directory;",
          "",
          "[Added Lines]",
          "38: import org.apache.nifi.authorization.user.NiFiUser;",
          "39: import org.apache.nifi.registry.bucket.Bucket;",
          "41: import com.fasterxml.jackson.core.JsonFactory;",
          "42: import com.fasterxml.jackson.core.JsonGenerator;",
          "43: import com.fasterxml.jackson.core.JsonParser;",
          "44: import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;",
          "45: import com.fasterxml.jackson.databind.DeserializationFeature;",
          "46: import com.fasterxml.jackson.databind.ObjectMapper;",
          "53: public class FileBasedFlowRegistry implements FlowRegistry {",
          "57:     private final String id;",
          "58:     private volatile String name = \"Local Registry\";",
          "59:     private volatile String url = \"file:\" + (new File(\"..\").getAbsolutePath());",
          "60:     private volatile String description = \"Default file-based Flow Registry\";",
          "62:     public FileBasedFlowRegistry(final String id, final String url) throws IOException {",
          "63:         final URI uri = URI.create(url);",
          "64:         if (!uri.getScheme().equalsIgnoreCase(\"file\")) {",
          "65:             throw new IllegalArgumentException(\"Cannot create a File Based Flow Registry with a URL of \" + url + \"; URL scheme must be 'file'\");",
          "66:         }",
          "68:         this.directory = new File(URI.create(url).getPath());",
          "74:         this.id = id;",
          "75:         this.url = url;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:         }",
          "102:     }",
          "113:     @Override",
          "114:     public String getURL() {",
          "116:     }",
          "118:     @Override",
          "119:     public String getName() {",
          "121:     }",
          "123:     @Override",
          "",
          "[Removed Lines]",
          "104:     @Override",
          "105:     public FlowRegistry getFlowRegistry(final String registryId) {",
          "106:         if (!\"default\".equals(registryId)) {",
          "107:             return null;",
          "108:         }",
          "110:         return this;",
          "111:     }",
          "115:         return directory.toURI().toString();",
          "120:         return \"Local Registry\";",
          "",
          "[Added Lines]",
          "119:         return url;",
          "124:         return name;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "138:             bucket.setName(\"Bucket '\" + bucketIdentifier + \"'\");",
          "139:             bucket.setCreatedTimestamp(creation);",
          "141:             buckets.add(bucket);",
          "142:         }",
          "144:         return buckets;",
          "145:     }",
          "147:     @Override",
          "148:     public synchronized VersionedFlow registerVersionedFlow(final VersionedFlow flow) throws IOException, UnknownResourceException {",
          "149:         Objects.requireNonNull(flow);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:             final Set<VersionedFlow> versionedFlows = new HashSet<>();",
          "146:             final File[] flowDirs = bucketDirectory.listFiles();",
          "147:             if (flowDirs != null) {",
          "148:                 for (final File flowDir : flowDirs) {",
          "149:                     final String flowIdentifier = flowDir.getName();",
          "150:                     try {",
          "151:                         final VersionedFlow versionedFlow = getVersionedFlow(bucketIdentifier, flowIdentifier);",
          "152:                         versionedFlows.add(versionedFlow);",
          "153:                     } catch (UnknownResourceException e) {",
          "154:                         continue;",
          "155:                     }",
          "156:                 }",
          "157:             }",
          "159:             bucket.setVersionedFlows(versionedFlows);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "241:         final File contentsFile = new File(snapshotDir, \"flow.xml\");",
          "243:         try (final OutputStream out = new FileOutputStream(contentsFile);",
          "245:             generator.setCodec(new ObjectMapper());",
          "246:             generator.setPrettyPrinter(new DefaultPrettyPrinter());",
          "247:             generator.writeObject(snapshot);",
          "",
          "[Removed Lines]",
          "244:             final JsonGenerator generator = jsonFactory.createJsonGenerator(out)) {",
          "",
          "[Added Lines]",
          "265:             final JsonGenerator generator = jsonFactory.createGenerator(out)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "269:         return response;",
          "270:     }",
          "277:     @Override",
          "278:     public int getLatestVersion(final String bucketId, final String flowId) throws IOException, UnknownResourceException {",
          "",
          "[Removed Lines]",
          "272:     @Override",
          "273:     public Set<String> getRegistryIdentifiers() {",
          "274:         return Collections.singleton(\"default\");",
          "275:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "400:         flow.setSnapshotMetadata(snapshotMetadataSet);",
          "402:         final File[] versionDirs = flowDir.listFiles();",
          "403:         for (final File file : versionDirs) {",
          "404:             if (!file.isDirectory()) {",
          "405:                 continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "419:         flow.setVersionCount(versionDirs.length);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "433:         return flow;",
          "434:     }",
          "435: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "454:     @Override",
          "455:     public String getIdentifier() {",
          "456:         return id;",
          "457:     }",
          "459:     @Override",
          "460:     public String getDescription() {",
          "461:         return description;",
          "462:     }",
          "464:     @Override",
          "465:     public void setDescription(String description) {",
          "466:         this.description = description;",
          "467:     }",
          "469:     @Override",
          "470:     public void setURL(String url) {",
          "471:         this.url = url;",
          "472:     }",
          "474:     @Override",
          "475:     public void setName(String name) {",
          "476:         this.name = name;",
          "477:     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/StandardFlowRegistryClient.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/StandardFlowRegistryClient.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/StandardFlowRegistryClient.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/StandardFlowRegistryClient.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.nifi.registry.flow;",
          "20: import java.io.IOException;",
          "21: import java.net.URI;",
          "22: import java.util.Set;",
          "23: import java.util.concurrent.ConcurrentHashMap;",
          "24: import java.util.concurrent.ConcurrentMap;",
          "26: public class StandardFlowRegistryClient implements FlowRegistryClient {",
          "27:     private ConcurrentMap<String, FlowRegistry> registryById = new ConcurrentHashMap<>();",
          "29:     @Override",
          "30:     public FlowRegistry getFlowRegistry(String registryId) {",
          "31:         return registryById.get(registryId);",
          "32:     }",
          "34:     @Override",
          "35:     public Set<String> getRegistryIdentifiers() {",
          "36:         return registryById.keySet();",
          "37:     }",
          "39:     @Override",
          "40:     public void addFlowRegistry(final FlowRegistry registry) {",
          "41:         final FlowRegistry existing = registryById.putIfAbsent(registry.getIdentifier(), registry);",
          "42:         if (existing != null) {",
          "43:             throw new IllegalStateException(\"Cannot add Flow Registry \" + registry + \" because a Flow Registry already exists with the ID \" + registry.getIdentifier());",
          "44:         }",
          "45:     }",
          "47:     @Override",
          "48:     public FlowRegistry addFlowRegistry(final String registryId, final String registryName, final String registryUrl, final String description) {",
          "49:         final URI uri = URI.create(registryUrl);",
          "50:         final String uriScheme = uri.getScheme();",
          "52:         final FlowRegistry registry;",
          "53:         if (uriScheme.equalsIgnoreCase(\"file\")) {",
          "54:             try {",
          "55:                 registry = new FileBasedFlowRegistry(registryId, registryUrl);",
          "56:             } catch (IOException e) {",
          "57:                 throw new RuntimeException(\"Failed to create Flow Registry for URI \" + registryUrl, e);",
          "58:             }",
          "60:             registry.setName(registryName);",
          "61:             registry.setDescription(description);",
          "62:         } else {",
          "63:             throw new IllegalArgumentException(\"Cannot create Flow Registry with URI of \" + registryUrl",
          "64:                 + \" because there are no known implementations of Flow Registries that can handle URIs of scheme \" + uriScheme);",
          "65:         }",
          "67:         addFlowRegistry(registry);",
          "68:         return registry;",
          "69:     }",
          "71:     @Override",
          "72:     public FlowRegistry removeFlowRegistry(final String registryId) {",
          "73:         return registryById.remove(registryId);",
          "74:     }",
          "75: }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/mapping/NiFiRegistryFlowMapper.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/mapping/NiFiRegistryFlowMapper.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/mapping/NiFiRegistryFlowMapper.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/registry/flow/mapping/NiFiRegistryFlowMapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import java.util.Set;",
          "29: import java.util.UUID;",
          "30: import java.util.concurrent.TimeUnit;",
          "31: import java.util.stream.Collectors;",
          "33: import org.apache.commons.lang3.ClassUtils;",
          "34: import org.apache.nifi.bundle.BundleCoordinate;",
          "35: import org.apache.nifi.connectable.Connectable;",
          "36: import org.apache.nifi.connectable.Connection;",
          "37: import org.apache.nifi.connectable.Funnel;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import java.util.function.Function;",
          "36: import org.apache.nifi.components.PropertyDescriptor;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: import org.apache.nifi.groups.RemoteProcessGroup;",
          "47: import org.apache.nifi.nar.ExtensionManager;",
          "48: import org.apache.nifi.processor.Relationship;",
          "49: import org.apache.nifi.registry.flow.BatchSize;",
          "50: import org.apache.nifi.registry.flow.Bundle;",
          "51: import org.apache.nifi.registry.flow.ComponentType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: import org.apache.nifi.registry.VariableDescriptor;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56: import org.apache.nifi.registry.flow.FlowRegistryClient;",
          "57: import org.apache.nifi.registry.flow.PortType;",
          "58: import org.apache.nifi.registry.flow.Position;",
          "60: import org.apache.nifi.registry.flow.VersionControlInformation;",
          "61: import org.apache.nifi.registry.flow.VersionedConnection;",
          "62: import org.apache.nifi.registry.flow.VersionedControllerService;",
          "63: import org.apache.nifi.registry.flow.VersionedFunnel;",
          "64: import org.apache.nifi.registry.flow.VersionedLabel;",
          "65: import org.apache.nifi.registry.flow.VersionedPort;",
          "66: import org.apache.nifi.registry.flow.VersionedProcessor;",
          "67: import org.apache.nifi.registry.flow.VersionedRemoteGroupPort;",
          "68: import org.apache.nifi.registry.flow.VersionedRemoteProcessGroup;",
          "",
          "[Removed Lines]",
          "59: import org.apache.nifi.registry.flow.RemoteFlowCoordinates;",
          "",
          "[Added Lines]",
          "62: import org.apache.nifi.registry.flow.VersionedFlowCoordinates;",
          "69: import org.apache.nifi.registry.flow.VersionedProcessGroup;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "79:     public InstantiatedVersionedProcessGroup mapProcessGroup(final ProcessGroup group, final FlowRegistryClient registryClient) {",
          "80:         versionedComponentIds.clear();",
          "82:     }",
          "84:     private InstantiatedVersionedProcessGroup mapGroup(final ProcessGroup group, final FlowRegistryClient registryClient, final boolean topLevel) {",
          "85:         final InstantiatedVersionedProcessGroup versionedGroup = new InstantiatedVersionedProcessGroup(group.getIdentifier(), group.getProcessGroupIdentifier());",
          "86:         versionedGroup.setIdentifier(getId(group.getVersionedComponentId(), group.getIdentifier()));",
          "",
          "[Removed Lines]",
          "81:         return mapGroup(group, registryClient, true);",
          "",
          "[Added Lines]",
          "85:         final InstantiatedVersionedProcessGroup mapped = mapGroup(group, registryClient, true);",
          "88:         populateReferencedAncestorServices(group, mapped);",
          "91:         populateReferencedAncestorVariables(group, mapped);",
          "93:         return mapped;",
          "94:     }",
          "96:     private void populateReferencedAncestorServices(final ProcessGroup group, final VersionedProcessGroup versionedGroup) {",
          "97:         final Set<ControllerServiceNode> ancestorControllerServices = group.getControllerServices(true);",
          "98:         ancestorControllerServices.remove(group.getControllerServices(false));",
          "99:         final Map<String, ControllerServiceNode> ancestorServicesById = ancestorControllerServices.stream()",
          "100:             .collect(Collectors.toMap(ControllerServiceNode::getIdentifier, Function.identity()));",
          "102:         final Set<ControllerServiceNode> referenced = new HashSet<>();",
          "104:         for (final ProcessorNode processor : group.findAllProcessors()) {",
          "105:             findReferencedServices(processor, ancestorServicesById, referenced);",
          "106:         }",
          "108:         for (final ControllerServiceNode service : group.findAllControllerServices()) {",
          "109:             findReferencedServices(service, ancestorServicesById, referenced);",
          "110:         }",
          "112:         final Set<VersionedControllerService> versionedServices = referenced.stream().map(this::mapControllerService)",
          "113:             .collect(Collectors.toCollection(LinkedHashSet::new));",
          "115:         versionedGroup.getControllerServices().addAll(versionedServices);",
          "116:     }",
          "118:     private Set<ControllerServiceNode> findReferencedServices(final ConfiguredComponent component, final Map<String, ControllerServiceNode> ancestorServicesById,",
          "119:         final Set<ControllerServiceNode> referenced) {",
          "121:         for (final Map.Entry<PropertyDescriptor, String> entry : component.getProperties().entrySet()) {",
          "122:             final PropertyDescriptor descriptor = entry.getKey();",
          "123:             if (descriptor.getControllerServiceDefinition() != null) {",
          "124:                 final String serviceId = entry.getValue();",
          "125:                 final ControllerServiceNode serviceNode = ancestorServicesById.get(serviceId);",
          "126:                 if (serviceNode != null) {",
          "127:                     referenced.add(serviceNode);",
          "128:                     referenced.addAll(findReferencedServices(serviceNode, ancestorServicesById, referenced));",
          "129:                 }",
          "130:             }",
          "131:         }",
          "133:         return referenced;",
          "134:     }",
          "136:     private void populateReferencedAncestorVariables(final ProcessGroup group, final VersionedProcessGroup versionedGroup) {",
          "137:         final Set<String> ancestorVariableNames = new HashSet<>();",
          "138:         populateVariableNames(group.getParent(), ancestorVariableNames);",
          "140:         final Map<String, String> implicitlyDefinedVariables = new HashMap<>();",
          "141:         for (final String variableName : ancestorVariableNames) {",
          "142:             final boolean isReferenced = !group.getComponentsAffectedByVariable(variableName).isEmpty();",
          "143:             if (isReferenced) {",
          "144:                 final String value = group.getVariableRegistry().getVariableValue(variableName);",
          "145:                 implicitlyDefinedVariables.put(variableName, value);",
          "146:             }",
          "147:         }",
          "149:         if (!implicitlyDefinedVariables.isEmpty()) {",
          "152:             implicitlyDefinedVariables.putAll(versionedGroup.getVariables());",
          "153:             versionedGroup.setVariables(implicitlyDefinedVariables);",
          "154:         }",
          "155:     }",
          "157:     private void populateVariableNames(final ProcessGroup group, final Set<String> variableNames) {",
          "158:         if (group == null) {",
          "159:             return;",
          "160:         }",
          "162:         group.getVariableRegistry().getVariableMap().keySet().stream()",
          "163:             .map(VariableDescriptor::getName)",
          "164:             .forEach(variableNames::add);",
          "166:         populateVariableNames(group.getParent(), variableNames);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "95:         if (!topLevel) {",
          "96:             final VersionControlInformation versionControlInfo = group.getVersionControlInformation();",
          "97:             if (versionControlInfo != null) {",
          "99:                 final String registryId = versionControlInfo.getRegistryIdentifier();",
          "100:                 final FlowRegistry registry = registryClient.getFlowRegistry(registryId);",
          "101:                 if (registry == null) {",
          "",
          "[Removed Lines]",
          "98:                 final RemoteFlowCoordinates coordinates = new RemoteFlowCoordinates();",
          "",
          "[Added Lines]",
          "184:                 final VersionedFlowCoordinates coordinates = new VersionedFlowCoordinates();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "237:     private Map<String, String> mapProperties(final ConfiguredComponent component) {",
          "238:         final Map<String, String> mapped = new HashMap<>();",
          "239:         component.getProperties().keySet().stream()",
          "240:             .forEach(property -> {",
          "241:                 String value = component.getProperty(property);",
          "242:                 if (value == null) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "326:             .filter(property -> !property.isSensitive())",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "312:         versionedPort.setConcurrentlySchedulableTaskCount(port.getMaxConcurrentTasks());",
          "313:         versionedPort.setName(port.getName());",
          "314:         versionedPort.setPosition(mapPosition(port.getPosition()));",
          "316:         return versionedPort;",
          "317:     }",
          "",
          "[Removed Lines]",
          "315:         versionedPort.setType(PortType.valueOf(port.getComponentType()));",
          "",
          "[Added Lines]",
          "402:         versionedPort.setType(PortType.valueOf(port.getConnectableType().name()));",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/util/BundleUtils.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/util/BundleUtils.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/util/BundleUtils.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/util/BundleUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import org.apache.nifi.bundle.Bundle;",
          "20: import org.apache.nifi.bundle.BundleCoordinate;",
          "21: import org.apache.nifi.nar.ExtensionManager;",
          "22: import org.apache.nifi.web.api.dto.BundleDTO;",
          "24: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import org.apache.nifi.registry.flow.VersionedProcessGroup;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:         }",
          "141:     }",
          "143: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:     public static void discoverCompatibleBundles(final VersionedProcessGroup versionedGroup) {",
          "151:         if (versionedGroup.getProcessors() != null) {",
          "152:             versionedGroup.getProcessors().forEach(processor -> {",
          "153:                 final BundleCoordinate coordinate = BundleUtils.getCompatibleBundle(processor.getType(), createBundleDto(processor.getBundle()));",
          "155:                 final org.apache.nifi.registry.flow.Bundle bundle = new org.apache.nifi.registry.flow.Bundle();",
          "156:                 bundle.setArtifact(coordinate.getId());",
          "157:                 bundle.setGroup(coordinate.getGroup());",
          "158:                 bundle.setVersion(coordinate.getVersion());",
          "159:                 processor.setBundle(bundle);",
          "160:             });",
          "161:         }",
          "163:         if (versionedGroup.getControllerServices() != null) {",
          "164:             versionedGroup.getControllerServices().forEach(controllerService -> {",
          "165:                 final BundleCoordinate coordinate = BundleUtils.getCompatibleBundle(controllerService.getType(), createBundleDto(controllerService.getBundle()));",
          "167:                 final org.apache.nifi.registry.flow.Bundle bundle = new org.apache.nifi.registry.flow.Bundle();",
          "168:                 bundle.setArtifact(coordinate.getId());",
          "169:                 bundle.setGroup(coordinate.getGroup());",
          "170:                 bundle.setVersion(coordinate.getVersion());",
          "171:                 controllerService.setBundle(bundle);",
          "172:             });",
          "173:         }",
          "175:         if (versionedGroup.getProcessGroups() != null) {",
          "176:             versionedGroup.getProcessGroups().forEach(processGroup -> {",
          "177:                 discoverCompatibleBundles(processGroup);",
          "178:             });",
          "179:         }",
          "180:     }",
          "182:     public static BundleDTO createBundleDto(final org.apache.nifi.registry.flow.Bundle bundle) {",
          "183:         final BundleDTO dto = new BundleDTO();",
          "184:         dto.setArtifact(bundle.getArtifact());",
          "185:         dto.setGroup(dto.getGroup());",
          "186:         dto.setVersion(dto.getVersion());",
          "187:         return dto;",
          "188:     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/resources/FlowConfiguration.xsd||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/resources/FlowConfiguration.xsd": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/resources/FlowConfiguration.xsd -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/resources/FlowConfiguration.xsd",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:                 </xs:sequence>",
          "27:             </xs:choice>",
          "29:             <!-- Groupings of Processors/Ports -->",
          "30:             <xs:element name=\"rootGroup\" type=\"RootProcessGroupType\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:             <xs:element name=\"registries\" type=\"RegistriesType\" minOccurs=\"0\" maxOccurs=\"1\" />",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:         <xs:attribute name=\"encoding-version\" type=\"xs:string\"/>",
          "39:     </xs:complexType>",
          "41:     <!-- the processor \"id\" is a key that should be valid within each flowController-->",
          "42:     <xs:complexType name=\"ProcessorType\">",
          "43:         <xs:sequence>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:     <xs:complexType name=\"RegistriesType\">",
          "44:         <xs:sequence>",
          "45:             <xs:element name=\"flowRegistry\" type=\"FlowRegistryType\" minOccurs=\"0\" maxOccurs=\"unbounded\" />",
          "46:         </xs:sequence>",
          "47:     </xs:complexType>",
          "49:     <xs:complexType name=\"FlowRegistryType\">",
          "50:         <xs:sequence>",
          "51:             <xs:element name=\"id\" type=\"NonEmptyStringType\" />",
          "52:             <xs:element name=\"name\" type=\"NonEmptyStringType\" />",
          "53:             <xs:element name=\"url\" type=\"NonEmptyStringType\" />",
          "54:             <xs:element name=\"description\" type=\"NonEmptyStringType\" />",
          "55:         </xs:sequence>",
          "56:     </xs:complexType>",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/mock/MockProcessGroup.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/mock/MockProcessGroup.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/mock/MockProcessGroup.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/mock/MockProcessGroup.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "654:     }",
          "656:     @Override",
          "658:     }",
          "660:     @Override",
          "",
          "[Removed Lines]",
          "657:     public void updateFlow(VersionedFlowSnapshot proposedFlow, String componentIdSeed, boolean verifyNotDirty) {",
          "",
          "[Added Lines]",
          "657:     public void updateFlow(VersionedFlowSnapshot proposedFlow, String componentIdSeed, boolean verifyNotDirty, boolean updateSettings) {",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/fingerprint/FingerprintFactoryTest.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/fingerprint/FingerprintFactoryTest.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/fingerprint/FingerprintFactoryTest.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/fingerprint/FingerprintFactoryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import javax.xml.parsers.DocumentBuilderFactory;",
          "33: import javax.xml.validation.Schema;",
          "34: import javax.xml.validation.SchemaFactory;",
          "35: import org.apache.commons.io.IOUtils;",
          "36: import org.apache.commons.lang3.StringUtils;",
          "37: import org.apache.nifi.connectable.Position;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import java.util.Optional;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "208:         when(component.getProxyPort()).thenReturn(null);",
          "209:         when(component.getProxyUser()).thenReturn(null);",
          "210:         when(component.getProxyPassword()).thenReturn(null);",
          "213:         final String expected = \"id\" +",
          "214:                 \"http://node1:8080/nifi, http://node2:8080/nifi\" +",
          "215:                 \"eth0\" +",
          "216:                 \"10 sec\" +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:         when(component.getVersionedComponentId()).thenReturn(Optional.empty());",
          "217:                 \"NO_VALUE\" +",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "245:         when(component.getProxyPort()).thenReturn(3128);",
          "246:         when(component.getProxyUser()).thenReturn(\"proxy-user\");",
          "247:         when(component.getProxyPassword()).thenReturn(\"proxy-pass\");",
          "250:         final String expected = \"id\" +",
          "251:                 \"http://node1:8080/nifi, http://node2:8080/nifi\" +",
          "252:                 \"NO_VALUE\" +",
          "253:                 \"10 sec\" +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:         when(component.getVersionedComponentId()).thenReturn(Optional.empty());",
          "256:                 \"NO_VALUE\" +",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "273:         when(groupComponent.getPosition()).thenReturn(new Position(10.5, 20.3));",
          "274:         when(groupComponent.getTargetUri()).thenReturn(\"http://node1:8080/nifi\");",
          "275:         when(groupComponent.getTransportProtocol()).thenReturn(SiteToSiteTransportProtocol.RAW);",
          "277:         final RemoteGroupPort portComponent = mock(RemoteGroupPort.class);",
          "278:         when(groupComponent.getInputPorts()).thenReturn(Collections.singleton(portComponent));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:         when(groupComponent.getVersionedComponentId()).thenReturn(Optional.empty());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "288:         when(portComponent.getBatchDuration()).thenReturn(\"10sec\");",
          "290:         when(portComponent.hasIncomingConnection()).thenReturn(true);",
          "293:         final String expected = \"portId\" +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "298:         when(portComponent.getVersionedComponentId()).thenReturn(Optional.empty());",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistryUtils.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistryUtils.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistryUtils.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/registry/flow/FlowRegistryUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.nifi.registry.flow;",
          "20: import java.util.HashSet;",
          "21: import java.util.Set;",
          "23: import org.apache.nifi.annotation.behavior.Restricted;",
          "24: import org.apache.nifi.bundle.BundleCoordinate;",
          "25: import org.apache.nifi.components.ConfigurableComponent;",
          "26: import org.apache.nifi.nar.ExtensionManager;",
          "27: import org.apache.nifi.util.Tuple;",
          "28: import org.apache.nifi.web.NiFiCoreException;",
          "29: import org.apache.nifi.web.api.dto.BundleDTO;",
          "31: public class FlowRegistryUtils {",
          "33:     public static boolean containsRestrictedComponent(final VersionedProcessGroup group) {",
          "34:         final Set<Tuple<String, BundleCoordinate>> componentTypes = new HashSet<>();",
          "35:         populateComponentTypes(group, componentTypes);",
          "37:         for (final Tuple<String, BundleCoordinate> tuple : componentTypes) {",
          "38:             final ConfigurableComponent component = ExtensionManager.getTempComponent(tuple.getKey(), tuple.getValue());",
          "39:             if (component == null) {",
          "40:                 throw new NiFiCoreException(\"Could not create an instance of component \" + tuple.getKey() + \" using bundle coordinates \" + tuple.getValue());",
          "41:             }",
          "43:             final boolean isRestricted = component.getClass().isAnnotationPresent(Restricted.class);",
          "44:             if (isRestricted) {",
          "45:                 return true;",
          "46:             }",
          "47:         }",
          "49:         return false;",
          "50:     }",
          "52:     private static void populateComponentTypes(final VersionedProcessGroup group, final Set<Tuple<String, BundleCoordinate>> componentTypes) {",
          "53:         group.getProcessors().stream()",
          "54:             .map(versionedProc -> new Tuple<>(versionedProc.getType(), createBundleCoordinate(versionedProc.getBundle())))",
          "55:             .forEach(componentTypes::add);",
          "57:         group.getControllerServices().stream()",
          "58:             .map(versionedSvc -> new Tuple<>(versionedSvc.getType(), createBundleCoordinate(versionedSvc.getBundle())))",
          "59:             .forEach(componentTypes::add);",
          "61:         for (final VersionedProcessGroup childGroup : group.getProcessGroups()) {",
          "62:             populateComponentTypes(childGroup, componentTypes);",
          "63:         }",
          "64:     }",
          "67:     public static BundleCoordinate createBundleCoordinate(final Bundle bundle) {",
          "68:         return new BundleCoordinate(bundle.getGroup(), bundle.getArtifact(), bundle.getVersion());",
          "69:     }",
          "71:     public static BundleDTO createBundleDto(final Bundle bundle) {",
          "72:         return new BundleDTO(bundle.getGroup(), bundle.getArtifact(), bundle.getVersion());",
          "73:     }",
          "74: }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiServiceFacade.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiServiceFacade.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiServiceFacade.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiServiceFacade.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "407:     void verifyComponentTypes(FlowSnippetDTO snippet);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "414:     void verifyComponentTypes(VersionedProcessGroup versionedGroup);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1390:     ProcessGroupEntity updateProcessGroup(NiFiUser user, Revision revision, String groupId, VersionControlInformationDTO versionControlInfo, VersionedFlowSnapshot snapshot, String componentIdSeed,",
          "1391:         boolean verifyNotModified);",
          "",
          "[Added Lines]",
          "1398:     ProcessGroupEntity updateProcessGroupContents(NiFiUser user, Revision revision, String groupId, VersionControlInformationDTO versionControlInfo, VersionedFlowSnapshot snapshot, String componentIdSeed,",
          "1399:         boolean verifyNotModified, boolean updateSettings);",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.nifi.web;",
          "20: import org.apache.nifi.action.Action;",
          "21: import org.apache.nifi.action.Component;",
          "22: import org.apache.nifi.action.FlowChangeAction;",
          "",
          "[Removed Lines]",
          "19: import com.google.common.collect.Sets;",
          "",
          "[Added Lines]",
          "19: import java.io.IOException;",
          "20: import java.nio.charset.StandardCharsets;",
          "21: import java.util.ArrayList;",
          "22: import java.util.Arrays;",
          "23: import java.util.Collection;",
          "24: import java.util.Collections;",
          "25: import java.util.Comparator;",
          "26: import java.util.Date;",
          "27: import java.util.HashMap;",
          "28: import java.util.HashSet;",
          "29: import java.util.LinkedHashMap;",
          "30: import java.util.LinkedHashSet;",
          "31: import java.util.List;",
          "32: import java.util.ListIterator;",
          "33: import java.util.Map;",
          "34: import java.util.Objects;",
          "35: import java.util.Optional;",
          "36: import java.util.Set;",
          "37: import java.util.UUID;",
          "38: import java.util.function.Function;",
          "39: import java.util.function.Supplier;",
          "40: import java.util.stream.Collectors;",
          "42: import javax.ws.rs.WebApplicationException;",
          "43: import javax.ws.rs.core.Response;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: import org.apache.nifi.components.Validator;",
          "59: import org.apache.nifi.components.state.Scope;",
          "60: import org.apache.nifi.components.state.StateMap;",
          "61: import org.apache.nifi.connectable.Connection;",
          "62: import org.apache.nifi.connectable.Funnel;",
          "63: import org.apache.nifi.connectable.Port;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: import org.apache.nifi.connectable.Connectable;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85: import org.apache.nifi.history.HistoryQuery;",
          "86: import org.apache.nifi.history.PreviousValue;",
          "87: import org.apache.nifi.registry.ComponentVariableRegistry;",
          "89: import org.apache.nifi.registry.flow.FlowRegistry;",
          "90: import org.apache.nifi.registry.flow.FlowRegistryClient;",
          "92: import org.apache.nifi.registry.flow.UnknownResourceException;",
          "93: import org.apache.nifi.registry.flow.VersionControlInformation;",
          "94: import org.apache.nifi.registry.flow.VersionedComponent;",
          "",
          "[Removed Lines]",
          "88: import org.apache.nifi.registry.flow.ConnectableComponent;",
          "91: import org.apache.nifi.registry.flow.RemoteFlowCoordinates;",
          "",
          "[Added Lines]",
          "116: import org.apache.nifi.registry.flow.VersionedFlowCoordinates;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103: import org.apache.nifi.registry.flow.diff.FlowDifference;",
          "104: import org.apache.nifi.registry.flow.diff.StandardComparableDataFlow;",
          "105: import org.apache.nifi.registry.flow.diff.StandardFlowComparator;",
          "107: import org.apache.nifi.registry.flow.mapping.InstantiatedVersionedComponent;",
          "108: import org.apache.nifi.registry.flow.mapping.InstantiatedVersionedControllerService;",
          "109: import org.apache.nifi.registry.flow.mapping.InstantiatedVersionedProcessGroup;",
          "110: import org.apache.nifi.registry.flow.mapping.InstantiatedVersionedProcessor;",
          "111: import org.apache.nifi.registry.flow.mapping.InstantiatedVersionedRemoteGroupPort;",
          "112: import org.apache.nifi.registry.flow.mapping.NiFiRegistryFlowMapper;",
          "113: import org.apache.nifi.remote.RootGroupPort;",
          "114: import org.apache.nifi.reporting.Bulletin;",
          "115: import org.apache.nifi.reporting.BulletinQuery;",
          "116: import org.apache.nifi.reporting.BulletinRepository;",
          "117: import org.apache.nifi.reporting.ComponentType;",
          "118: import org.apache.nifi.util.NiFiProperties;",
          "120: import org.apache.nifi.web.api.dto.AccessPolicyDTO;",
          "121: import org.apache.nifi.web.api.dto.AccessPolicySummaryDTO;",
          "122: import org.apache.nifi.web.api.dto.AffectedComponentDTO;",
          "",
          "[Removed Lines]",
          "106: import org.apache.nifi.registry.flow.mapping.InstantiatedConnectableComponent;",
          "119: import org.apache.nifi.util.Tuple;",
          "",
          "[Added Lines]",
          "137: import org.apache.nifi.remote.RemoteGroupPort;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "239: import org.apache.nifi.web.dao.PortDAO;",
          "240: import org.apache.nifi.web.dao.ProcessGroupDAO;",
          "241: import org.apache.nifi.web.dao.ProcessorDAO;",
          "242: import org.apache.nifi.web.dao.RemoteProcessGroupDAO;",
          "243: import org.apache.nifi.web.dao.ReportingTaskDAO;",
          "244: import org.apache.nifi.web.dao.SnippetDAO;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266: import org.apache.nifi.web.dao.RegistryDAO;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "257: import org.slf4j.Logger;",
          "258: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "260: import javax.ws.rs.WebApplicationException;",
          "261: import javax.ws.rs.core.Response;",
          "262: import java.io.IOException;",
          "263: import java.nio.charset.StandardCharsets;",
          "264: import java.util.ArrayList;",
          "265: import java.util.Arrays;",
          "266: import java.util.Collection;",
          "267: import java.util.Collections;",
          "268: import java.util.Comparator;",
          "269: import java.util.Date;",
          "270: import java.util.HashMap;",
          "271: import java.util.HashSet;",
          "272: import java.util.LinkedHashMap;",
          "273: import java.util.LinkedHashSet;",
          "274: import java.util.List;",
          "275: import java.util.ListIterator;",
          "276: import java.util.Map;",
          "277: import java.util.Objects;",
          "278: import java.util.Optional;",
          "279: import java.util.Set;",
          "280: import java.util.UUID;",
          "281: import java.util.function.Function;",
          "282: import java.util.function.Supplier;",
          "283: import java.util.stream.Collectors;",
          "",
          "[Added Lines]",
          "285: import com.google.common.collect.Sets;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "312:     private UserDAO userDAO;",
          "313:     private UserGroupDAO userGroupDAO;",
          "314:     private AccessPolicyDAO accessPolicyDAO;",
          "315:     private ClusterCoordinator clusterCoordinator;",
          "316:     private HeartbeatMonitor heartbeatMonitor;",
          "317:     private LeaderElectionManager leaderElectionManager;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317:     private RegistryDAO registryDAO;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "332:     private AuthorizableLookup authorizableLookup;",
          "",
          "[Removed Lines]",
          "334:     private Map<String, Tuple<Revision, RegistryDTO>> registryCache = new HashMap<>();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1848:         templateDAO.verifyComponentTypes(snippet);",
          "1849:     }",
          "1851:     @Override",
          "1852:     public TemplateDTO createTemplate(final String name, final String description, final String snippetId, final String groupId, final Optional<String> idGenerationSeed) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1852:     @Override",
          "1853:     public void verifyComponentTypes(final VersionedProcessGroup versionedGroup) {",
          "1854:         controllerFacade.verifyComponentTypes(versionedGroup);",
          "1855:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2260:         return entityFactory.createControllerServiceEntity(snapshot, null, permissions, null);",
          "2261:     }",
          "2272:     @Override",
          "2273:     public RegistryEntity createRegistry(Revision revision, RegistryDTO registryDTO) {",
          "2276:     }",
          "2278:     @Override",
          "2282:     }",
          "2284:     @Override",
          "2285:     public Set<RegistryEntity> getRegistries() {",
          "2289:     }",
          "2291:     @Override",
          "2292:     public RegistryEntity updateRegistry(Revision revision, RegistryDTO registryDTO) {",
          "2295:     }",
          "2297:     @Override",
          "2301:     }",
          "2303:     @Override",
          "",
          "[Removed Lines]",
          "2263:     private RegistryEntity createRegistryEntity(final Revision updatedRevision, final RegistryDTO registryDTO) {",
          "2264:         final RegistryEntity entity = new RegistryEntity();",
          "2265:         entity.setId(registryDTO.getId());",
          "2266:         entity.setPermissions(dtoFactory.createPermissionsDto(authorizableLookup.getController()));",
          "2267:         entity.setRevision(dtoFactory.createRevisionDTO(updatedRevision));",
          "2268:         entity.setComponent(registryDTO);",
          "2269:         return entity;",
          "2270:     }",
          "2274:         registryCache.put(registryDTO.getId(), new Tuple(revision, registryDTO));",
          "2275:         return createRegistryEntity(revision, registryDTO);",
          "2279:     public RegistryEntity getRegistry(String registryId) {",
          "2280:         final Tuple<Revision, RegistryDTO> registry = registryCache.get(registryId);",
          "2281:         return createRegistry(registry.getKey(), registry.getValue());",
          "2286:         return registryCache.values().stream()",
          "2287:                 .map(registry -> createRegistry(registry.getKey(), registry.getValue()))",
          "2288:                 .collect(Collectors.toSet());",
          "2293:         registryCache.put(registryDTO.getId(), new Tuple(revision, registryDTO));",
          "2294:         return createRegistryEntity(revision, registryDTO);",
          "2298:     public RegistryEntity deleteRegistry(Revision revision, String registryId) {",
          "2299:         final Tuple<Revision, RegistryDTO> registry = registryCache.remove(registryId);",
          "2300:         return createRegistryEntity(registry.getKey(), registry.getValue());",
          "",
          "[Added Lines]",
          "2272:         final NiFiUser user = NiFiUserUtils.getNiFiUser();",
          "2276:         final RevisionClaim claim = new StandardRevisionClaim(revision);",
          "2279:         final RevisionUpdate<FlowRegistry> revisionUpdate = revisionManager.updateRevision(claim, user, () -> {",
          "2281:             final FlowRegistry registry = registryDAO.createFlowRegistry(registryDTO);",
          "2284:             controllerFacade.save();",
          "2286:             final FlowModification lastMod = new FlowModification(revision.incrementRevision(revision.getClientId()), user.getIdentity());",
          "2287:             return new StandardRevisionUpdate<>(registry, lastMod);",
          "2288:         });",
          "2290:         final FlowRegistry registry = revisionUpdate.getComponent();",
          "2291:         return createRegistryEntity(registry);",
          "2295:     public RegistryEntity getRegistry(final String registryId) {",
          "2296:         final FlowRegistry registry = registryDAO.getFlowRegistry(registryId);",
          "2297:         return createRegistryEntity(registry);",
          "2298:     }",
          "2300:     private RegistryEntity createRegistryEntity(final FlowRegistry flowRegistry) {",
          "2301:         if (flowRegistry == null) {",
          "2302:             return null;",
          "2303:         }",
          "2305:         final RegistryDTO dto = dtoFactory.createRegistryDto(flowRegistry);",
          "2306:         final Revision revision = revisionManager.getRevision(dto.getId());",
          "2308:         final RegistryEntity entity = new RegistryEntity();",
          "2309:         entity.setComponent(dto);",
          "2310:         entity.setRevision(dtoFactory.createRevisionDTO(revision));",
          "2311:         entity.setId(dto.getId());",
          "2314:         final PermissionsDTO permissions = new PermissionsDTO();",
          "2315:         permissions.setCanRead(true);",
          "2316:         permissions.setCanWrite(true);",
          "2317:         entity.setPermissions(permissions);",
          "2319:         return entity;",
          "2324:         return registryDAO.getFlowRegistries().stream()",
          "2325:             .map(this::createRegistryEntity)",
          "2326:             .collect(Collectors.toSet());",
          "2331:         final RevisionClaim revisionClaim = new StandardRevisionClaim(revision);",
          "2332:         final NiFiUser user = NiFiUserUtils.getNiFiUser();",
          "2334:         final FlowRegistry registry = registryDAO.getFlowRegistry(registryDTO.getId());",
          "2335:         final RevisionUpdate<FlowRegistry> revisionUpdate = revisionManager.updateRevision(revisionClaim, user, () -> {",
          "2336:             registry.setDescription(registryDTO.getDescription());",
          "2337:             registry.setName(registryDTO.getName());",
          "2338:             registry.setURL(registryDTO.getUri());",
          "2340:             controllerFacade.save();",
          "2342:             final Revision updatedRevision = revisionManager.getRevision(revision.getComponentId()).incrementRevision(revision.getClientId());",
          "2343:             final FlowModification lastModification = new FlowModification(updatedRevision, user.getIdentity());",
          "2345:             return new StandardRevisionUpdate<FlowRegistry>(registry, lastModification);",
          "2346:         });",
          "2348:         final FlowRegistry updatedReg = revisionUpdate.getComponent();",
          "2349:         return createRegistryEntity(updatedReg);",
          "2353:     public RegistryEntity deleteRegistry(final Revision revision, final String registryId) {",
          "2354:         final RevisionClaim claim = new StandardRevisionClaim(revision);",
          "2355:         final NiFiUser user = NiFiUserUtils.getNiFiUser();",
          "2357:         final FlowRegistry registry = revisionManager.deleteRevision(claim, user, () -> {",
          "2358:             final FlowRegistry reg = registryDAO.removeFlowRegistry(registryId);",
          "2359:             controllerFacade.save();",
          "2360:             return reg;",
          "2361:         });",
          "2363:         return createRegistryEntity(registry);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3665:             })",
          "3666:             .collect(Collectors.toCollection(HashSet::new));",
          "3668:         for (final FlowDifference difference : comparison.getDifferences()) {",
          "3669:             VersionedComponent component = difference.getComponentA();",
          "3670:             if (component == null) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3731:         final Map<String, List<Connection>> connectionsByVersionedId = group.findAllConnections().stream()",
          "3732:             .filter(conn -> conn.getVersionedComponentId().isPresent())",
          "3733:             .collect(Collectors.groupingBy(conn -> conn.getVersionedComponentId().get()));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3674:             if (component.getComponentType() == org.apache.nifi.registry.flow.ComponentType.CONNECTION) {",
          "3675:                 final VersionedConnection connection = (VersionedConnection) component;",
          "3682:             }",
          "3683:         }",
          "3685:         return affectedComponents;",
          "3686:     }",
          "3705:         final AffectedComponentEntity entity = new AffectedComponentEntity();",
          "3710:         final PermissionsDTO permissionsDto = dtoFactory.createPermissionsDto(authorizable, user);",
          "3711:         entity.setPermissions(permissionsDto);",
          "3713:         final AffectedComponentDTO dto = new AffectedComponentDTO();",
          "3719:         entity.setComponent(dto);",
          "3720:         return entity;",
          "3721:     }",
          "3724:         final AffectedComponentEntity entity = new AffectedComponentEntity();",
          "3725:         entity.setRevision(dtoFactory.createRevisionDTO(revisionManager.getRevision(instance.getInstanceId())));",
          "3726:         entity.setId(instance.getInstanceId());",
          "3729:         final Authorizable authorizable = getAuthorizable(componentTypeName, instance);",
          "3730:         final PermissionsDTO permissionsDto = dtoFactory.createPermissionsDto(authorizable, user);",
          "3731:         entity.setPermissions(permissionsDto);",
          "",
          "[Removed Lines]",
          "3677:                 final ConnectableComponent source = connection.getSource();",
          "3678:                 final ConnectableComponent destination = connection.getDestination();",
          "3680:                 affectedComponents.add(createAffectedComponentEntity((InstantiatedConnectableComponent) source, user));",
          "3681:                 affectedComponents.add(createAffectedComponentEntity((InstantiatedConnectableComponent) destination, user));",
          "3688:     private String getComponentState(final InstantiatedConnectableComponent localComponent) {",
          "3689:         final String componentId = localComponent.getInstanceId();",
          "3690:         final String groupId = localComponent.getInstanceGroupId();",
          "3692:         switch (localComponent.getType()) {",
          "3693:             case PROCESSOR:",
          "3694:                 return processorDAO.getProcessor(componentId).getPhysicalScheduledState().name();",
          "3695:             case REMOTE_INPUT_PORT:",
          "3696:                 return remoteProcessGroupDAO.getRemoteProcessGroup(groupId).getInputPort(componentId).getScheduledState().name();",
          "3697:             case REMOTE_OUTPUT_PORT:",
          "3698:                 return remoteProcessGroupDAO.getRemoteProcessGroup(groupId).getOutputPort(componentId).getScheduledState().name();",
          "3699:             default:",
          "3700:                 return null;",
          "3701:         }",
          "3702:     }",
          "3704:     private AffectedComponentEntity createAffectedComponentEntity(final InstantiatedVersionedComponent instance, final String componentTypeName, final String componentState, final NiFiUser user) {",
          "3706:         entity.setRevision(dtoFactory.createRevisionDTO(revisionManager.getRevision(instance.getInstanceId())));",
          "3707:         entity.setId(instance.getInstanceId());",
          "3709:         final Authorizable authorizable = getAuthorizable(componentTypeName, instance);",
          "3714:         dto.setId(instance.getInstanceId());",
          "3715:         dto.setReferenceType(componentTypeName);",
          "3716:         dto.setProcessGroupId(instance.getInstanceGroupId());",
          "3717:         dto.setState(componentState);",
          "3723:     private AffectedComponentEntity createAffectedComponentEntity(final InstantiatedConnectableComponent instance, final NiFiUser user) {",
          "3728:         final String componentTypeName = instance.getType().name();",
          "",
          "[Added Lines]",
          "3744:                 final String versionedConnectionId = connection.getIdentifier();",
          "3745:                 final List<Connection> instances = connectionsByVersionedId.get(versionedConnectionId);",
          "3746:                 if (instances == null) {",
          "3747:                     continue;",
          "3748:                 }",
          "3750:                 for (final Connection instance : instances) {",
          "3751:                     affectedComponents.add(createAffectedComponentEntity(instance.getSource(), user));",
          "3752:                     affectedComponents.add(createAffectedComponentEntity(instance.getDestination(), user));",
          "3753:                 }",
          "3761:     private AffectedComponentEntity createAffectedComponentEntity(final Connectable connectable, final NiFiUser user) {",
          "3763:         entity.setRevision(dtoFactory.createRevisionDTO(revisionManager.getRevision(connectable.getIdentifier())));",
          "3764:         entity.setId(connectable.getIdentifier());",
          "3766:         final Authorizable authorizable = getAuthorizable(connectable);",
          "3771:         dto.setId(connectable.getIdentifier());",
          "3772:         dto.setReferenceType(connectable.getConnectableType().name());",
          "3773:         dto.setProcessGroupId(connectable.getProcessGroupIdentifier());",
          "3774:         dto.setState(connectable.getScheduledState().name());",
          "3780:     private AffectedComponentEntity createAffectedComponentEntity(final InstantiatedVersionedComponent instance, final String componentTypeName, final String componentState, final NiFiUser user) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3734:         dto.setId(instance.getInstanceId());",
          "3735:         dto.setReferenceType(componentTypeName);",
          "3736:         dto.setProcessGroupId(instance.getInstanceGroupId());",
          "3739:         entity.setComponent(dto);",
          "3740:         return entity;",
          "3741:     }",
          "3743:     private Authorizable getAuthorizable(final String componentTypeName, final InstantiatedVersionedComponent versionedComponent) {",
          "3744:         final String componentId = versionedComponent.getInstanceId();",
          "",
          "[Removed Lines]",
          "3737:         dto.setState(getComponentState(instance));",
          "",
          "[Added Lines]",
          "3793:         dto.setState(componentState);",
          "3800:     private Authorizable getAuthorizable(final Connectable connectable) {",
          "3801:         switch (connectable.getConnectableType()) {",
          "3802:             case REMOTE_INPUT_PORT:",
          "3803:             case REMOTE_OUTPUT_PORT:",
          "3804:                 final String rpgId = ((RemoteGroupPort) connectable).getRemoteProcessGroup().getIdentifier();",
          "3805:                 return authorizableLookup.getRemoteProcessGroup(rpgId);",
          "3806:             default:",
          "3807:                 return authorizableLookup.getLocalConnectable(connectable.getIdentifier());",
          "3808:         }",
          "3809:     }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3820:     }",
          "3822:     private void populateVersionedFlows(final VersionedProcessGroup group) throws IOException {",
          "3825:         if (remoteCoordinates != null) {",
          "3826:             final String registryUrl = remoteCoordinates.getRegistryUrl();",
          "",
          "[Removed Lines]",
          "3823:         final RemoteFlowCoordinates remoteCoordinates = group.getRemoteFlowCoordinates();",
          "",
          "[Added Lines]",
          "3891:         final VersionedFlowCoordinates remoteCoordinates = group.getVersionedFlowCoordinates();",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3868:         final VersionedFlowSnapshot proposedFlowSnapshot, final String componentIdSeed, final boolean verifyNotModified) {",
          "3870:         final NiFiUser user = NiFiUserUtils.getNiFiUser();",
          "3872:     }",
          "3874:     @Override",
          "3878:         final ProcessGroup processGroupNode = processGroupDAO.getProcessGroup(groupId);",
          "3879:         final RevisionUpdate<ProcessGroupDTO> snapshot = updateComponent(user, revision,",
          "3880:             processGroupNode,",
          "3882:             processGroup -> dtoFactory.createProcessGroupDto(processGroup));",
          "3884:         final PermissionsDTO permissions = dtoFactory.createPermissionsDto(processGroupNode);",
          "",
          "[Removed Lines]",
          "3871:         return updateProcessGroup(user, revision, groupId, versionControlInfo, proposedFlowSnapshot, componentIdSeed, verifyNotModified);",
          "3875:     public ProcessGroupEntity updateProcessGroup(final NiFiUser user, final Revision revision, final String groupId, final VersionControlInformationDTO versionControlInfo,",
          "3876:         final VersionedFlowSnapshot proposedFlowSnapshot, final String componentIdSeed, final boolean verifyNotModified) {",
          "3881:             () -> processGroupDAO.updateProcessGroupFlow(groupId, proposedFlowSnapshot, versionControlInfo, componentIdSeed, verifyNotModified),",
          "",
          "[Added Lines]",
          "3939:         return updateProcessGroupContents(user, revision, groupId, versionControlInfo, proposedFlowSnapshot, componentIdSeed, verifyNotModified, true);",
          "3943:     public ProcessGroupEntity updateProcessGroupContents(final NiFiUser user, final Revision revision, final String groupId, final VersionControlInformationDTO versionControlInfo,",
          "3944:         final VersionedFlowSnapshot proposedFlowSnapshot, final String componentIdSeed, final boolean verifyNotModified, final boolean updateSettings) {",
          "3949:             () -> processGroupDAO.updateProcessGroupFlow(groupId, proposedFlowSnapshot, versionControlInfo, componentIdSeed, verifyNotModified, updateSettings),",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4243:         this.leaderElectionManager = leaderElectionManager;",
          "4244:     }",
          "4246:     public void setFlowRegistryClient(FlowRegistryClient flowRegistryClient) {",
          "4247:         this.flowRegistryClient = flowRegistryClient;",
          "4268:     }",
          "4269: }",
          "",
          "[Removed Lines]",
          "4250:         final Set<String> registryIdentifiers = flowRegistryClient.getRegistryIdentifiers();",
          "4251:         if (registryIdentifiers != null) {",
          "4253:             for (final String registryIdentifier : registryIdentifiers) {",
          "4254:                 final FlowRegistry flowRegistry = flowRegistryClient.getFlowRegistry(registryIdentifier);",
          "4256:                 final RegistryDTO registry = new RegistryDTO();",
          "4257:                 registry.setId(registryIdentifier);",
          "4258:                 registry.setName(flowRegistry.getName());",
          "4259:                 registry.setUri(flowRegistry.getURL());",
          "4260:                 registry.setDescription(\"Default client for storing Flow Revisions to the local disk.\");",
          "4262:                 final RegistryEntity registryEntity = new RegistryEntity();",
          "4263:                 registryEntity.setComponent(registry);",
          "4265:                 registryCache.put(registryIdentifier, new Tuple(new Revision(0L, null, registryIdentifier), registry));",
          "4266:             }",
          "4267:         }",
          "",
          "[Added Lines]",
          "4314:     public void setRegistryDAO(RegistryDAO registryDao) {",
          "4315:         this.registryDAO = registryDao;",
          "4316:     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.nifi.web.api;",
          "25: import org.apache.commons.lang3.StringUtils;",
          "26: import org.apache.nifi.authorization.AuthorizableLookup;",
          "27: import org.apache.nifi.authorization.AuthorizeAccess;",
          "",
          "[Removed Lines]",
          "19: import io.swagger.annotations.Api;",
          "20: import io.swagger.annotations.ApiOperation;",
          "21: import io.swagger.annotations.ApiParam;",
          "22: import io.swagger.annotations.ApiResponse;",
          "23: import io.swagger.annotations.ApiResponses;",
          "24: import io.swagger.annotations.Authorization;",
          "",
          "[Added Lines]",
          "19: import java.io.IOException;",
          "20: import java.io.InputStream;",
          "21: import java.net.URI;",
          "22: import java.net.URISyntaxException;",
          "23: import java.util.Collection;",
          "24: import java.util.Collections;",
          "25: import java.util.Date;",
          "26: import java.util.HashMap;",
          "27: import java.util.List;",
          "28: import java.util.Map;",
          "29: import java.util.Set;",
          "30: import java.util.UUID;",
          "31: import java.util.concurrent.ArrayBlockingQueue;",
          "32: import java.util.concurrent.ConcurrentHashMap;",
          "33: import java.util.concurrent.ConcurrentMap;",
          "34: import java.util.concurrent.ExecutorService;",
          "35: import java.util.concurrent.Executors;",
          "36: import java.util.concurrent.ThreadFactory;",
          "37: import java.util.concurrent.ThreadPoolExecutor;",
          "38: import java.util.concurrent.TimeUnit;",
          "39: import java.util.concurrent.atomic.AtomicBoolean;",
          "40: import java.util.function.Consumer;",
          "41: import java.util.function.Function;",
          "42: import java.util.stream.Collectors;",
          "44: import javax.servlet.http.HttpServletRequest;",
          "45: import javax.ws.rs.Consumes;",
          "46: import javax.ws.rs.DELETE;",
          "47: import javax.ws.rs.DefaultValue;",
          "48: import javax.ws.rs.GET;",
          "49: import javax.ws.rs.HttpMethod;",
          "50: import javax.ws.rs.POST;",
          "51: import javax.ws.rs.PUT;",
          "52: import javax.ws.rs.Path;",
          "53: import javax.ws.rs.PathParam;",
          "54: import javax.ws.rs.Produces;",
          "55: import javax.ws.rs.QueryParam;",
          "56: import javax.ws.rs.core.Context;",
          "57: import javax.ws.rs.core.MediaType;",
          "58: import javax.ws.rs.core.MultivaluedHashMap;",
          "59: import javax.ws.rs.core.MultivaluedMap;",
          "60: import javax.ws.rs.core.Response;",
          "61: import javax.ws.rs.core.Response.Status;",
          "62: import javax.ws.rs.core.UriBuilder;",
          "63: import javax.ws.rs.core.UriInfo;",
          "64: import javax.xml.bind.JAXBContext;",
          "65: import javax.xml.bind.JAXBElement;",
          "66: import javax.xml.bind.JAXBException;",
          "67: import javax.xml.bind.Unmarshaller;",
          "68: import javax.xml.stream.XMLStreamReader;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: import org.apache.nifi.controller.ScheduledState;",
          "43: import org.apache.nifi.controller.serialization.FlowEncodingVersion;",
          "44: import org.apache.nifi.controller.service.ControllerServiceState;",
          "45: import org.apache.nifi.registry.variable.VariableRegistryUpdateRequest;",
          "46: import org.apache.nifi.registry.variable.VariableRegistryUpdateStep;",
          "47: import org.apache.nifi.remote.util.SiteToSiteRestApiClient;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90: import org.apache.nifi.registry.flow.FlowRegistryUtils;",
          "91: import org.apache.nifi.registry.flow.VersionedFlowSnapshot;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64: import org.apache.nifi.web.api.dto.RevisionDTO;",
          "65: import org.apache.nifi.web.api.dto.TemplateDTO;",
          "66: import org.apache.nifi.web.api.dto.VariableRegistryDTO;",
          "67: import org.apache.nifi.web.api.dto.flow.FlowDTO;",
          "68: import org.apache.nifi.web.api.dto.status.ProcessorStatusDTO;",
          "69: import org.apache.nifi.web.api.entity.ActivateControllerServicesEntity;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114: import org.apache.nifi.web.api.dto.VersionControlInformationDTO;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104: import org.springframework.security.core.Authentication;",
          "105: import org.springframework.security.core.context.SecurityContextHolder;",
          "",
          "[Removed Lines]",
          "107: import javax.servlet.http.HttpServletRequest;",
          "108: import javax.ws.rs.Consumes;",
          "109: import javax.ws.rs.DELETE;",
          "110: import javax.ws.rs.DefaultValue;",
          "111: import javax.ws.rs.GET;",
          "112: import javax.ws.rs.HttpMethod;",
          "113: import javax.ws.rs.POST;",
          "114: import javax.ws.rs.PUT;",
          "115: import javax.ws.rs.Path;",
          "116: import javax.ws.rs.PathParam;",
          "117: import javax.ws.rs.Produces;",
          "118: import javax.ws.rs.QueryParam;",
          "119: import javax.ws.rs.core.Context;",
          "120: import javax.ws.rs.core.MediaType;",
          "121: import javax.ws.rs.core.MultivaluedHashMap;",
          "122: import javax.ws.rs.core.MultivaluedMap;",
          "123: import javax.ws.rs.core.Response;",
          "124: import javax.ws.rs.core.Response.Status;",
          "125: import javax.ws.rs.core.UriBuilder;",
          "126: import javax.ws.rs.core.UriInfo;",
          "127: import javax.xml.bind.JAXBContext;",
          "128: import javax.xml.bind.JAXBElement;",
          "129: import javax.xml.bind.JAXBException;",
          "130: import javax.xml.bind.Unmarshaller;",
          "131: import javax.xml.stream.XMLStreamReader;",
          "132: import java.io.IOException;",
          "133: import java.io.InputStream;",
          "134: import java.net.URI;",
          "135: import java.net.URISyntaxException;",
          "136: import java.util.Collection;",
          "137: import java.util.Collections;",
          "138: import java.util.Date;",
          "139: import java.util.HashMap;",
          "140: import java.util.List;",
          "141: import java.util.Map;",
          "142: import java.util.Set;",
          "143: import java.util.UUID;",
          "144: import java.util.concurrent.ArrayBlockingQueue;",
          "145: import java.util.concurrent.ConcurrentHashMap;",
          "146: import java.util.concurrent.ConcurrentMap;",
          "147: import java.util.concurrent.ExecutorService;",
          "148: import java.util.concurrent.Executors;",
          "149: import java.util.concurrent.ThreadFactory;",
          "150: import java.util.concurrent.ThreadPoolExecutor;",
          "151: import java.util.concurrent.TimeUnit;",
          "152: import java.util.concurrent.atomic.AtomicBoolean;",
          "153: import java.util.function.Consumer;",
          "154: import java.util.function.Function;",
          "155: import java.util.stream.Collectors;",
          "",
          "[Added Lines]",
          "155: import io.swagger.annotations.Api;",
          "156: import io.swagger.annotations.ApiOperation;",
          "157: import io.swagger.annotations.ApiParam;",
          "158: import io.swagger.annotations.ApiResponse;",
          "159: import io.swagger.annotations.ApiResponses;",
          "160: import io.swagger.annotations.Authorization;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "826:         }",
          "828:         final Map<String, String> headers = new HashMap<>();",
          "831:         boolean continuePolling = true;",
          "832:         while (continuePolling) {",
          "",
          "[Removed Lines]",
          "829:         final MultivaluedMap<String, String> requestEntity = new MultivaluedHashMap();",
          "",
          "[Added Lines]",
          "834:         final MultivaluedMap<String, String> requestEntity = new MultivaluedHashMap<>();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "983:         }",
          "985:         final Map<String, String> headers = new HashMap<>();",
          "988:         boolean continuePolling = true;",
          "989:         while (continuePolling) {",
          "",
          "[Removed Lines]",
          "986:         final MultivaluedMap<String, String> requestEntity = new MultivaluedHashMap();",
          "",
          "[Added Lines]",
          "991:         final MultivaluedMap<String, String> requestEntity = new MultivaluedHashMap<>();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1547:             @ApiParam(",
          "1548:                     value = \"The process group configuration details.\",",
          "1549:                     required = true",
          "1552:         if (requestProcessGroupEntity == null || requestProcessGroupEntity.getComponent() == null) {",
          "1553:             throw new IllegalArgumentException(\"Process group details must be specified.\");",
          "",
          "[Removed Lines]",
          "1550:             ) final ProcessGroupEntity requestProcessGroupEntity) {",
          "",
          "[Added Lines]",
          "1556:         ) final ProcessGroupEntity requestProcessGroupEntity) throws IOException {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1574:         }",
          "1575:         requestProcessGroupEntity.getComponent().setParentGroupId(groupId);",
          "1577:         if (isReplicateRequest()) {",
          "1578:             return replicate(HttpMethod.POST, requestProcessGroupEntity);",
          "1579:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1591:         final VersionControlInformationDTO versionControlInfo = requestProcessGroupEntity.getComponent().getVersionControlInformation();",
          "1592:         if (versionControlInfo != null) {",
          "1595:             final VersionedFlowSnapshot flowSnapshot = serviceFacade.getVersionedFlowSnapshot(versionControlInfo);",
          "1598:             BundleUtils.discoverCompatibleBundles(flowSnapshot.getFlowContents());",
          "1601:             requestProcessGroupEntity.setVersionedFlowSnapshot(flowSnapshot);",
          "1602:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1584:                 lookup -> {",
          "1585:                     final Authorizable processGroup = lookup.getProcessGroup(groupId).getAuthorizable();",
          "1586:                     processGroup.authorize(authorizer, RequestAction.WRITE, NiFiUserUtils.getNiFiUser());",
          "1587:                 },",
          "1589:                 processGroupGroupEntity -> {",
          "1591:                     processGroupGroupEntity.getComponent().setId(generateUuid());",
          "",
          "[Removed Lines]",
          "1588:                 null,",
          "",
          "[Added Lines]",
          "1618:                     final VersionedFlowSnapshot versionedFlowSnapshot = requestProcessGroupEntity.getVersionedFlowSnapshot();",
          "1619:                     if (versionedFlowSnapshot != null) {",
          "1620:                         final boolean containsRestrictedComponent = FlowRegistryUtils.containsRestrictedComponent(versionedFlowSnapshot.getFlowContents());",
          "1621:                         if (containsRestrictedComponent) {",
          "1622:                             lookup.getRestrictedComponents().authorize(authorizer, RequestAction.WRITE, NiFiUserUtils.getNiFiUser());",
          "1623:                         }",
          "1624:                     }",
          "1625:                 },",
          "1626:                 () -> {",
          "1627:                     final VersionedFlowSnapshot versionedFlowSnapshot = requestProcessGroupEntity.getVersionedFlowSnapshot();",
          "1628:                     if (versionedFlowSnapshot != null) {",
          "1629:                         serviceFacade.verifyComponentTypes(versionedFlowSnapshot.getFlowContents());",
          "1630:                     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1594:                     final Revision revision = getRevision(processGroupGroupEntity, processGroupGroupEntity.getComponent().getId());",
          "1595:                     final ProcessGroupEntity entity = serviceFacade.createProcessGroup(revision, groupId, processGroupGroupEntity.getComponent());",
          "1596:                     populateRemainingProcessGroupEntityContent(entity);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1640:                     final VersionedFlowSnapshot flowSnapshot = requestProcessGroupEntity.getVersionedFlowSnapshot();",
          "1641:                     if (flowSnapshot != null) {",
          "1642:                         final RevisionDTO revisionDto = entity.getRevision();",
          "1643:                         final String newGroupId = entity.getComponent().getId();",
          "1644:                         final Revision newGroupRevision = new Revision(revisionDto.getVersion(), revisionDto.getClientId(), newGroupId);",
          "1645:                         serviceFacade.updateProcessGroupContents(NiFiUserUtils.getNiFiUser(), newGroupRevision, newGroupId,",
          "1646:                             versionControlInfo, flowSnapshot, getIdGenerationSeed().orElse(null), false, false);",
          "1647:                     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/VersionsResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/VersionsResource.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/VersionsResource.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/VersionsResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.nifi.web.api;",
          "26: import org.apache.commons.lang3.StringUtils;",
          "27: import org.apache.nifi.authorization.AuthorizableLookup;",
          "28: import org.apache.nifi.authorization.Authorizer;",
          "",
          "[Removed Lines]",
          "20: import io.swagger.annotations.Api;",
          "21: import io.swagger.annotations.ApiOperation;",
          "22: import io.swagger.annotations.ApiParam;",
          "23: import io.swagger.annotations.ApiResponse;",
          "24: import io.swagger.annotations.ApiResponses;",
          "25: import io.swagger.annotations.Authorization;",
          "",
          "[Added Lines]",
          "20: import java.io.IOException;",
          "21: import java.net.URI;",
          "22: import java.net.URISyntaxException;",
          "23: import java.util.Collections;",
          "24: import java.util.Date;",
          "25: import java.util.HashMap;",
          "26: import java.util.HashSet;",
          "27: import java.util.LinkedHashSet;",
          "28: import java.util.List;",
          "29: import java.util.Map;",
          "30: import java.util.Set;",
          "31: import java.util.UUID;",
          "32: import java.util.concurrent.TimeUnit;",
          "33: import java.util.function.Consumer;",
          "34: import java.util.function.Function;",
          "35: import java.util.stream.Collectors;",
          "37: import javax.ws.rs.Consumes;",
          "38: import javax.ws.rs.DELETE;",
          "39: import javax.ws.rs.DefaultValue;",
          "40: import javax.ws.rs.GET;",
          "41: import javax.ws.rs.HttpMethod;",
          "42: import javax.ws.rs.POST;",
          "43: import javax.ws.rs.PUT;",
          "44: import javax.ws.rs.Path;",
          "45: import javax.ws.rs.PathParam;",
          "46: import javax.ws.rs.Produces;",
          "47: import javax.ws.rs.QueryParam;",
          "48: import javax.ws.rs.core.MediaType;",
          "49: import javax.ws.rs.core.MultivaluedHashMap;",
          "50: import javax.ws.rs.core.Response;",
          "51: import javax.ws.rs.core.Response.Status;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: import org.apache.nifi.authorization.resource.Authorizable;",
          "31: import org.apache.nifi.authorization.user.NiFiUser;",
          "32: import org.apache.nifi.authorization.user.NiFiUserUtils;",
          "34: import org.apache.nifi.cluster.manager.NodeResponse;",
          "35: import org.apache.nifi.controller.ScheduledState;",
          "36: import org.apache.nifi.controller.service.ControllerServiceState;",
          "38: import org.apache.nifi.registry.flow.ComponentType;",
          "39: import org.apache.nifi.registry.flow.VersionedFlowSnapshot;",
          "40: import org.apache.nifi.registry.flow.VersionedFlowSnapshotMetadata;",
          "41: import org.apache.nifi.registry.flow.VersionedProcessGroup;",
          "",
          "[Removed Lines]",
          "33: import org.apache.nifi.bundle.BundleCoordinate;",
          "37: import org.apache.nifi.registry.flow.Bundle;",
          "",
          "[Added Lines]",
          "64: import org.apache.nifi.registry.flow.FlowRegistryUtils;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48: import org.apache.nifi.web.api.concurrent.RequestManager;",
          "49: import org.apache.nifi.web.api.concurrent.StandardAsynchronousWebRequest;",
          "50: import org.apache.nifi.web.api.dto.AffectedComponentDTO;",
          "52: import org.apache.nifi.web.api.dto.DtoFactory;",
          "53: import org.apache.nifi.web.api.dto.RevisionDTO;",
          "54: import org.apache.nifi.web.api.dto.VersionControlInformationDTO;",
          "",
          "[Removed Lines]",
          "51: import org.apache.nifi.web.api.dto.BundleDTO;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71: import org.slf4j.Logger;",
          "72: import org.slf4j.LoggerFactory;",
          "105: @Path(\"/versions\")",
          "106: @Api(value = \"/versions\", description = \"Endpoint for managing version control for a flow\")",
          "",
          "[Removed Lines]",
          "74: import javax.ws.rs.Consumes;",
          "75: import javax.ws.rs.DELETE;",
          "76: import javax.ws.rs.DefaultValue;",
          "77: import javax.ws.rs.GET;",
          "78: import javax.ws.rs.HttpMethod;",
          "79: import javax.ws.rs.POST;",
          "80: import javax.ws.rs.PUT;",
          "81: import javax.ws.rs.Path;",
          "82: import javax.ws.rs.PathParam;",
          "83: import javax.ws.rs.Produces;",
          "84: import javax.ws.rs.QueryParam;",
          "85: import javax.ws.rs.core.MediaType;",
          "86: import javax.ws.rs.core.Response;",
          "87: import javax.ws.rs.core.Response.Status;",
          "88: import java.io.IOException;",
          "89: import java.net.URI;",
          "90: import java.net.URISyntaxException;",
          "91: import java.util.Collections;",
          "92: import java.util.Date;",
          "93: import java.util.HashMap;",
          "94: import java.util.HashSet;",
          "95: import java.util.LinkedHashSet;",
          "96: import java.util.List;",
          "97: import java.util.Map;",
          "98: import java.util.Set;",
          "99: import java.util.UUID;",
          "100: import java.util.concurrent.TimeUnit;",
          "101: import java.util.function.Consumer;",
          "102: import java.util.function.Function;",
          "103: import java.util.stream.Collectors;",
          "",
          "[Added Lines]",
          "99: import io.swagger.annotations.Api;",
          "100: import io.swagger.annotations.ApiOperation;",
          "101: import io.swagger.annotations.ApiParam;",
          "102: import io.swagger.annotations.ApiResponse;",
          "103: import io.swagger.annotations.ApiResponses;",
          "104: import io.swagger.annotations.Authorization;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "165:     @POST",
          "167:     @Produces(MediaType.APPLICATION_JSON)",
          "168:     @Path(\"start-requests\")",
          "169:     @ApiOperation(",
          "",
          "[Removed Lines]",
          "166:     @Consumes(MediaType.APPLICATION_JSON)",
          "",
          "[Added Lines]",
          "167:     @Consumes(MediaType.WILDCARD)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "402:                 final NodeResponse clusterResponse;",
          "403:                 try {",
          "404:                     if (getReplicationTarget() == ReplicationTarget.CLUSTER_NODES) {",
          "406:                     } else {",
          "407:                         clusterResponse = getRequestReplicator().forwardToCoordinator(",
          "409:                     }",
          "410:                 } catch (final InterruptedException ie) {",
          "411:                     Thread.currentThread().interrupt();",
          "",
          "[Removed Lines]",
          "405:                         clusterResponse = getRequestReplicator().replicate(HttpMethod.POST, createRequestUri, null, Collections.emptyMap()).awaitMergedResponse();",
          "408:                             getClusterCoordinatorNode(), HttpMethod.POST, createRequestUri, null, Collections.emptyMap()).awaitMergedResponse();",
          "",
          "[Added Lines]",
          "406:                         clusterResponse = getRequestReplicator().replicate(HttpMethod.POST, createRequestUri, new MultivaluedHashMap<>(), Collections.emptyMap()).awaitMergedResponse();",
          "409:                             getClusterCoordinatorNode(), HttpMethod.POST, createRequestUri, new MultivaluedHashMap<>(), Collections.emptyMap()).awaitMergedResponse();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "466:                 final NodeResponse clusterResponse;",
          "467:                 try {",
          "468:                     if (getReplicationTarget() == ReplicationTarget.CLUSTER_NODES) {",
          "470:                     } else {",
          "471:                         clusterResponse = getRequestReplicator().forwardToCoordinator(",
          "473:                     }",
          "474:                 } catch (final InterruptedException ie) {",
          "475:                     Thread.currentThread().interrupt();",
          "",
          "[Removed Lines]",
          "469:                         clusterResponse = getRequestReplicator().replicate(HttpMethod.DELETE, requestUri, null, Collections.emptyMap()).awaitMergedResponse();",
          "472:                             getClusterCoordinatorNode(), HttpMethod.DELETE, requestUri, null, Collections.emptyMap()).awaitMergedResponse();",
          "",
          "[Added Lines]",
          "470:                         clusterResponse = getRequestReplicator().replicate(HttpMethod.DELETE, requestUri, new MultivaluedHashMap<>(), Collections.emptyMap()).awaitMergedResponse();",
          "473:                             getClusterCoordinatorNode(), HttpMethod.DELETE, requestUri, new MultivaluedHashMap<>(), Collections.emptyMap()).awaitMergedResponse();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "948:         final Set<AffectedComponentEntity> affectedComponents = serviceFacade.getComponentsAffectedByVersionChange(groupId, flowSnapshot, user);",
          "",
          "[Removed Lines]",
          "945:         discoverCompatibleBundles(flowSnapshot.getFlowContents());",
          "",
          "[Added Lines]",
          "946:         BundleUtils.discoverCompatibleBundles(flowSnapshot.getFlowContents());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "956:             lookup -> {",
          "958:                 authorizeAffectedComponents(lookup, affectedComponents);",
          "959:             },",
          "960:             () -> {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "961:                 final VersionedProcessGroup groupContents = flowSnapshot.getFlowContents();",
          "962:                 final boolean containsRestrictedComponents = FlowRegistryUtils.containsRestrictedComponent(groupContents);",
          "963:                 if (containsRestrictedComponents) {",
          "964:                     lookup.getRestrictedComponents().authorize(authorizer, RequestAction.WRITE, NiFiUserUtils.getNiFiUser());",
          "965:                 }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1076:         final Set<AffectedComponentEntity> affectedComponents = serviceFacade.getComponentsAffectedByVersionChange(groupId, flowSnapshot, user);",
          "",
          "[Removed Lines]",
          "1073:         discoverCompatibleBundles(flowSnapshot.getFlowContents());",
          "",
          "[Added Lines]",
          "1080:         BundleUtils.discoverCompatibleBundles(flowSnapshot.getFlowContents());",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1084:             lookup -> {",
          "1086:                 authorizeAffectedComponents(lookup, affectedComponents);",
          "1087:             },",
          "1088:             () -> {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1095:                 final VersionedProcessGroup groupContents = flowSnapshot.getFlowContents();",
          "1096:                 final boolean containsRestrictedComponents = FlowRegistryUtils.containsRestrictedComponent(groupContents);",
          "1097:                 if (containsRestrictedComponents) {",
          "1098:                     lookup.getRestrictedComponents().authorize(authorizer, RequestAction.WRITE, NiFiUserUtils.getNiFiUser());",
          "1099:                 }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1258:             final RevisionDTO revisionDto = requestEntity.getProcessGroupRevision();",
          "1259:             final Revision revision = new Revision(revisionDto.getVersion(), revisionDto.getClientId(), groupId);",
          "1260:             final VersionControlInformationDTO vci = requestEntity.getVersionControlInformation();",
          "1262:         }",
          "1264:         asyncRequest.setLastUpdated(new Date());",
          "",
          "[Removed Lines]",
          "1261:             serviceFacade.updateProcessGroup(user, revision, groupId, vci, flowSnapshot, idGenerationSeed, verifyNotModified);",
          "",
          "[Added Lines]",
          "1274:             serviceFacade.updateProcessGroupContents(user, revision, groupId, vci, flowSnapshot, idGenerationSeed, verifyNotModified, false);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1384:         this.dtoFactory = dtoFactory;",
          "1385:     }",
          "1432:     private static class ActiveRequest {",
          "1433:         private static final long MAX_REQUEST_LOCK_NANOS = TimeUnit.MINUTES.toNanos(1L);",
          "",
          "[Removed Lines]",
          "1387:     private BundleDTO createBundleDto(final Bundle bundle) {",
          "1388:         final BundleDTO dto = new BundleDTO();",
          "1389:         dto.setArtifact(bundle.getArtifact());",
          "1390:         dto.setGroup(dto.getGroup());",
          "1391:         dto.setVersion(dto.getVersion());",
          "1392:         return dto;",
          "1393:     }",
          "1400:     private void discoverCompatibleBundles(final VersionedProcessGroup versionedGroup) {",
          "1401:         if (versionedGroup.getProcessors() != null) {",
          "1402:             versionedGroup.getProcessors().forEach(processor -> {",
          "1403:                 final BundleCoordinate coordinate = BundleUtils.getCompatibleBundle(processor.getType(), createBundleDto(processor.getBundle()));",
          "1405:                 final Bundle bundle = new Bundle();",
          "1406:                 bundle.setArtifact(coordinate.getId());",
          "1407:                 bundle.setGroup(coordinate.getGroup());",
          "1408:                 bundle.setVersion(coordinate.getVersion());",
          "1409:                 processor.setBundle(bundle);",
          "1410:             });",
          "1411:         }",
          "1413:         if (versionedGroup.getControllerServices() != null) {",
          "1414:             versionedGroup.getControllerServices().forEach(controllerService -> {",
          "1415:                 final BundleCoordinate coordinate = BundleUtils.getCompatibleBundle(controllerService.getType(), createBundleDto(controllerService.getBundle()));",
          "1417:                 final Bundle bundle = new Bundle();",
          "1418:                 bundle.setArtifact(coordinate.getId());",
          "1419:                 bundle.setGroup(coordinate.getGroup());",
          "1420:                 bundle.setVersion(coordinate.getVersion());",
          "1421:                 controllerService.setBundle(bundle);",
          "1422:             });",
          "1423:         }",
          "1425:         if (versionedGroup.getProcessGroups() != null) {",
          "1426:             versionedGroup.getProcessGroups().forEach(processGroup -> {",
          "1427:                 discoverCompatibleBundles(processGroup);",
          "1428:             });",
          "1429:         }",
          "1430:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "113: import org.apache.nifi.provenance.lineage.LineageNode;",
          "114: import org.apache.nifi.provenance.lineage.ProvenanceEventLineageNode;",
          "115: import org.apache.nifi.registry.ComponentVariableRegistry;",
          "116: import org.apache.nifi.registry.flow.FlowRegistryClient;",
          "117: import org.apache.nifi.registry.flow.VersionControlInformation;",
          "118: import org.apache.nifi.registry.flow.mapping.InstantiatedVersionedConnection;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116: import org.apache.nifi.registry.flow.FlowRegistry;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3713:         return nodeDto;",
          "3714:     }",
          "3718:     public void setControllerServiceProvider(final ControllerServiceProvider controllerServiceProvider) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3717:     public RegistryDTO createRegistryDto(FlowRegistry registry) {",
          "3718:         final RegistryDTO dto = new RegistryDTO();",
          "3719:         dto.setDescription(registry.getDescription());",
          "3720:         dto.setId(registry.getIdentifier());",
          "3721:         dto.setName(registry.getName());",
          "3722:         dto.setUri(registry.getURL());",
          "3723:         return dto;",
          "3724:     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/controller/ControllerFacade.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/controller/ControllerFacade.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/controller/ControllerFacade.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/controller/ControllerFacade.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: import org.apache.nifi.registry.ComponentVariableRegistry;",
          "83: import org.apache.nifi.registry.VariableDescriptor;",
          "84: import org.apache.nifi.registry.VariableRegistry;",
          "85: import org.apache.nifi.remote.RemoteGroupPort;",
          "86: import org.apache.nifi.remote.RootGroupPort;",
          "87: import org.apache.nifi.reporting.ReportingTask;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: import org.apache.nifi.registry.flow.VersionedProcessGroup;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1643:         return dto;",
          "1644:     }",
          "1648:     private ComponentSearchResultDTO search(final String searchStr, final ProcessorNode procNode) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1647:     public void verifyComponentTypes(VersionedProcessGroup versionedFlow) {",
          "1648:         flowController.verifyComponentTypesInSnippet(versionedFlow);",
          "1649:     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/ProcessGroupDAO.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/ProcessGroupDAO.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/ProcessGroupDAO.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/ProcessGroupDAO.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:     ProcessGroup updateProcessGroupFlow(String groupId, VersionedFlowSnapshot proposedSnapshot, VersionControlInformationDTO versionControlInformation, String componentIdSeed,",
          "",
          "[Removed Lines]",
          "119:         boolean verifyNotModified);",
          "",
          "[Added Lines]",
          "120:         boolean verifyNotModified, boolean updateSettings);",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/RegistryDAO.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/RegistryDAO.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/RegistryDAO.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/RegistryDAO.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.nifi.web.dao;",
          "20: import java.util.Set;",
          "22: import org.apache.nifi.registry.flow.FlowRegistry;",
          "23: import org.apache.nifi.web.api.dto.RegistryDTO;",
          "25: public interface RegistryDAO {",
          "27:     FlowRegistry createFlowRegistry(RegistryDTO registryDto);",
          "29:     FlowRegistry getFlowRegistry(String registryId);",
          "31:     Set<FlowRegistry> getFlowRegistries();",
          "33:     FlowRegistry removeFlowRegistry(String registryId);",
          "35: }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/FlowRegistryDAO.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/FlowRegistryDAO.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/FlowRegistryDAO.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/FlowRegistryDAO.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.nifi.web.dao.impl;",
          "20: import java.util.Set;",
          "21: import java.util.stream.Collectors;",
          "23: import org.apache.nifi.registry.flow.FlowRegistry;",
          "24: import org.apache.nifi.registry.flow.FlowRegistryClient;",
          "25: import org.apache.nifi.web.ResourceNotFoundException;",
          "26: import org.apache.nifi.web.api.dto.RegistryDTO;",
          "27: import org.apache.nifi.web.dao.RegistryDAO;",
          "29: public class FlowRegistryDAO implements RegistryDAO {",
          "30:     private FlowRegistryClient flowRegistryClient;",
          "32:     @Override",
          "33:     public FlowRegistry createFlowRegistry(final RegistryDTO registryDto) {",
          "34:         return flowRegistryClient.addFlowRegistry(registryDto.getId(), registryDto.getName(), registryDto.getUri(), registryDto.getDescription());",
          "35:     }",
          "37:     @Override",
          "38:     public FlowRegistry getFlowRegistry(final String registryId) {",
          "39:         final FlowRegistry registry = flowRegistryClient.getFlowRegistry(registryId);",
          "40:         if (registry == null) {",
          "41:             throw new ResourceNotFoundException(\"Unable to find Flow Registry with id '\" + registryId + \"'\");",
          "42:         }",
          "44:         return registry;",
          "45:     }",
          "47:     @Override",
          "48:     public Set<FlowRegistry> getFlowRegistries() {",
          "49:         return flowRegistryClient.getRegistryIdentifiers().stream()",
          "50:             .map(flowRegistryClient::getFlowRegistry)",
          "51:             .collect(Collectors.toSet());",
          "52:     }",
          "54:     @Override",
          "55:     public FlowRegistry removeFlowRegistry(final String registryId) {",
          "56:         final FlowRegistry registry = flowRegistryClient.removeFlowRegistry(registryId);",
          "57:         if (registry == null) {",
          "58:             throw new ResourceNotFoundException(\"Unable to find Flow Registry with id '\" + registryId + \"'\");",
          "59:         }",
          "60:         return registry;",
          "61:     }",
          "63:     public void setFlowRegistryClient(FlowRegistryClient client) {",
          "64:         this.flowRegistryClient = client;",
          "65:     }",
          "66: }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:         return group;",
          "247:     }",
          "249:     public ProcessGroup disconnectVersionControl(final String groupId) {",
          "250:         final ProcessGroup group = locateProcessGroup(flowController, groupId);",
          "251:         group.disconnectVersionControl();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249:     @Override",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "255:     @Override",
          "256:     public ProcessGroup updateProcessGroupFlow(final String groupId, final VersionedFlowSnapshot proposedSnapshot, final VersionControlInformationDTO versionControlInformation,",
          "258:         final ProcessGroup group = locateProcessGroup(flowController, groupId);",
          "261:         final StandardVersionControlInformation svci = new StandardVersionControlInformation(",
          "262:             versionControlInformation.getRegistryId(),",
          "",
          "[Removed Lines]",
          "257:         final String componentIdSeed, final boolean verifyNotModified) {",
          "259:         group.updateFlow(proposedSnapshot, componentIdSeed, verifyNotModified);",
          "",
          "[Added Lines]",
          "258:         final String componentIdSeed, final boolean verifyNotModified, final boolean updateSettings) {",
          "260:         group.updateFlow(proposedSnapshot, componentIdSeed, verifyNotModified, updateSettings);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6df97bbc88beedff8bed516ffef6e083d3172ad8",
      "candidate_info": {
        "commit_hash": "6df97bbc88beedff8bed516ffef6e083d3172ad8",
        "repo": "apache/nifi",
        "commit_url": "https://github.com/apache/nifi/commit/6df97bbc88beedff8bed516ffef6e083d3172ad8",
        "files": [
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactory.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/xsd/authorizers.xsd",
          "nifi-nar-bundles/nifi-ranger-bundle/nifi-ranger-plugin/pom.xml"
        ],
        "message": "NIFI-4135 - added hadoop-client and enhanced Authorizers entity to support classpath for resources entry NIFI-4135 - classpath under class\n\nThis closes #1956.\n\nSigned-off-by: Bryan Bende <bbende@apache.org>",
        "before_after_code_files": [
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactory.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactory.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/xsd/authorizers.xsd||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/xsd/authorizers.xsd"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java"
          ],
          "candidate": [
            "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java"
          ]
        }
      },
      "candidate_diff": {
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactory.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactory.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactory.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "333:         if (baseAuthorizer instanceof ManagedAuthorizer) {",
          "334:             final ManagedAuthorizer baseManagedAuthorizer = (ManagedAuthorizer) baseAuthorizer;",
          "335:             return new ManagedAuthorizer() {",
          "336:                 @Override",
          "337:                 public String getFingerprint() throws AuthorizationAccessException {",
          "339:                         return baseManagedAuthorizer.getFingerprint();",
          "340:                     }",
          "341:                 }",
          "343:                 @Override",
          "344:                 public void inheritFingerprint(String fingerprint) throws AuthorizationAccessException {",
          "346:                         baseManagedAuthorizer.inheritFingerprint(fingerprint);",
          "347:                     }",
          "348:                 }",
          "350:                 @Override",
          "351:                 public void checkInheritability(String proposedFingerprint) throws AuthorizationAccessException, UninheritableAuthorizationsException {",
          "353:                         baseManagedAuthorizer.checkInheritability(proposedFingerprint);",
          "354:                     }",
          "355:                 }",
          "357:                 @Override",
          "358:                 public AccessPolicyProvider getAccessPolicyProvider() {",
          "360:                         return baseManagedAuthorizer.getAccessPolicyProvider();",
          "361:                     }",
          "362:                 }",
          "364:                 @Override",
          "365:                 public AuthorizationResult authorize(AuthorizationRequest request) throws AuthorizationAccessException {",
          "367:                         return baseManagedAuthorizer.authorize(request);",
          "368:                     }",
          "369:                 }",
          "371:                 @Override",
          "372:                 public void initialize(AuthorizerInitializationContext initializationContext) throws AuthorizerCreationException {",
          "374:                         baseManagedAuthorizer.initialize(initializationContext);",
          "375:                     }",
          "376:                 }",
          "378:                 @Override",
          "379:                 public void onConfigured(AuthorizerConfigurationContext configurationContext) throws AuthorizerCreationException {",
          "381:                         baseManagedAuthorizer.onConfigured(configurationContext);",
          "382:                     }",
          "383:                 }",
          "385:                 @Override",
          "386:                 public void preDestruction() throws AuthorizerDestructionException {",
          "388:                         baseManagedAuthorizer.preDestruction();",
          "389:                     }",
          "390:                 }",
          "",
          "[Removed Lines]",
          "332:     public static Authorizer withNarLoader(final Authorizer baseAuthorizer) {",
          "338:                     try (final NarCloseable narCloseable = NarCloseable.withNarLoader()) {",
          "345:                     try (final NarCloseable narCloseable = NarCloseable.withNarLoader()) {",
          "352:                     try (final NarCloseable narCloseable = NarCloseable.withNarLoader()) {",
          "359:                     try (final NarCloseable narCloseable = NarCloseable.withNarLoader()) {",
          "366:                     try (final NarCloseable narCloseable = NarCloseable.withNarLoader()) {",
          "373:                     try (final NarCloseable narCloseable = NarCloseable.withNarLoader()) {",
          "380:                     try (final NarCloseable narCloseable = NarCloseable.withNarLoader()) {",
          "387:                     try (final NarCloseable narCloseable = NarCloseable.withNarLoader()) {",
          "",
          "[Added Lines]",
          "332:     public static Authorizer withNarLoader(final Authorizer baseAuthorizer, final ClassLoader classLoader) {",
          "338:                     try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(classLoader)) {",
          "345:                     try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(classLoader)) {",
          "352:                     try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(classLoader)) {",
          "359:                     try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(classLoader)) {",
          "366:                     try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(classLoader)) {",
          "373:                     try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(classLoader)) {",
          "380:                     try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(classLoader)) {",
          "387:                     try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(classLoader)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "393:             return new Authorizer() {",
          "394:                 @Override",
          "395:                 public AuthorizationResult authorize(final AuthorizationRequest request) throws AuthorizationAccessException {",
          "397:                         return baseAuthorizer.authorize(request);",
          "398:                     }",
          "399:                 }",
          "401:                 @Override",
          "402:                 public void initialize(AuthorizerInitializationContext initializationContext) throws AuthorizerCreationException {",
          "404:                         baseAuthorizer.initialize(initializationContext);",
          "405:                     }",
          "406:                 }",
          "408:                 @Override",
          "409:                 public void onConfigured(AuthorizerConfigurationContext configurationContext) throws AuthorizerCreationException {",
          "411:                         baseAuthorizer.onConfigured(configurationContext);",
          "412:                     }",
          "413:                 }",
          "415:                 @Override",
          "416:                 public void preDestruction() throws AuthorizerDestructionException {",
          "418:                         baseAuthorizer.preDestruction();",
          "419:                     }",
          "420:                 }",
          "",
          "[Removed Lines]",
          "396:                     try (final NarCloseable narCloseable = NarCloseable.withNarLoader()) {",
          "403:                     try (final NarCloseable narCloseable = NarCloseable.withNarLoader()) {",
          "410:                     try (final NarCloseable narCloseable = NarCloseable.withNarLoader()) {",
          "417:                     try (final NarCloseable narCloseable = NarCloseable.withNarLoader()) {",
          "",
          "[Added Lines]",
          "396:                     try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(classLoader)) {",
          "403:                     try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(classLoader)) {",
          "410:                     try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(classLoader)) {",
          "417:                     try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(classLoader)) {",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.apache.nifi.bundle.Bundle;",
          "27: import org.apache.nifi.nar.ExtensionManager;",
          "28: import org.apache.nifi.util.NiFiProperties;",
          "29: import org.slf4j.Logger;",
          "30: import org.slf4j.LoggerFactory;",
          "31: import org.springframework.beans.factory.DisposableBean;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import org.apache.nifi.util.file.classloader.ClassLoaderUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: import java.lang.reflect.Field;",
          "46: import java.lang.reflect.InvocationTargetException;",
          "47: import java.lang.reflect.Method;",
          "48: import java.util.HashMap;",
          "49: import java.util.List;",
          "50: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: import java.net.URL;",
          "50: import java.net.URLClassLoader;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:                     for (final org.apache.nifi.authorization.generated.Authorizer authorizer : authorizerConfiguration.getAuthorizer()) {",
          "135:                     }",
          "",
          "[Removed Lines]",
          "134:                         authorizers.put(authorizer.getIdentifier(), createAuthorizer(authorizer.getIdentifier(), authorizer.getClazz()));",
          "",
          "[Added Lines]",
          "137:                         authorizers.put(authorizer.getIdentifier(), createAuthorizer(authorizer.getIdentifier(), authorizer.getClazz(),authorizer.getClasspath()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "273:         return AccessPolicyProviderFactory.withNarLoader(instance);",
          "274:     }",
          "278:         final List<Bundle> authorizerBundles = ExtensionManager.getBundles(authorizerClassName);",
          "",
          "[Removed Lines]",
          "276:     private Authorizer createAuthorizer(final String identifier, final String authorizerClassName) throws Exception {",
          "",
          "[Added Lines]",
          "279:     private Authorizer createAuthorizer(final String identifier, final String authorizerClassName, final String classpathResources) throws Exception {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "286:         }",
          "288:         final Bundle authorizerBundle = authorizerBundles.get(0);",
          "292:         final ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();",
          "",
          "[Removed Lines]",
          "289:         final ClassLoader authorizerClassLoader = authorizerBundle.getClassLoader();",
          "",
          "[Added Lines]",
          "292:         ClassLoader authorizerClassLoader = authorizerBundle.getClassLoader();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "318:             }",
          "319:         }",
          "322:     }",
          "324:     private AuthorizerConfigurationContext loadAuthorizerConfiguration(final String identifier, final List<Property> properties) {",
          "",
          "[Removed Lines]",
          "321:         return AuthorizerFactory.installIntegrityChecks(AuthorizerFactory.withNarLoader(instance));",
          "",
          "[Added Lines]",
          "324:         if(StringUtils.isNotEmpty(classpathResources)) {",
          "325:             URL[] urls = ClassLoaderUtils.getURLsForClasspath(classpathResources, null, true);",
          "326:             authorizerClassLoader = new URLClassLoader(urls, authorizerClassLoader);",
          "327:         }",
          "329:         return AuthorizerFactory.installIntegrityChecks(AuthorizerFactory.withNarLoader(instance,authorizerClassLoader));",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/xsd/authorizers.xsd||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/xsd/authorizers.xsd": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/xsd/authorizers.xsd -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/xsd/authorizers.xsd",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:         <xs:sequence>",
          "38:             <xs:element name=\"identifier\" type=\"NonEmptyStringType\"/>",
          "39:             <xs:element name=\"class\" type=\"NonEmptyStringType\"/>",
          "41:         </xs:sequence>",
          "42:     </xs:complexType>",
          "",
          "[Removed Lines]",
          "40:             <xs:element name=\"property\" type=\"Property\" minOccurs=\"0\" maxOccurs=\"unbounded\" />",
          "",
          "[Added Lines]",
          "40:             <xs:element name=\"classpath\" type=\"NonEmptyStringType\" minOccurs=\"0\"/>",
          "41:             <xs:element name=\"property\" type=\"Property\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba56774fa1c16d935f592df482e74bfa1564b5a3",
      "candidate_info": {
        "commit_hash": "ba56774fa1c16d935f592df482e74bfa1564b5a3",
        "repo": "apache/nifi",
        "commit_url": "https://github.com/apache/nifi/commit/ba56774fa1c16d935f592df482e74bfa1564b5a3",
        "files": [
          "nifi-commons/nifi-utils/src/main/java/org/apache/nifi/processor/util/StandardValidators.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/StatusMerger.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/AbstractConfiguredComponent.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardProcessorNode.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceNode.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceProvider.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/scheduling/TestStandardProcessScheduler.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/TestStandardControllerServiceProvider.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/mock/MockProcessGroup.java",
          "nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java"
        ],
        "message": "NIFI-4151: Updated UpdateAttribute to only create JAXB Context once; Minor performance tweaks to standard validators and StatusMerge.prettyPrint; updated AbstractConfiguredComponent to not create a new ValidationContext each time that validate is called but only when needed; updated FlowController, StandardControllerServiceProvider, and StandardProcessGroup so that component lookups can be performed using a ConcurrentMap at FlowController level instead of having to perform a depth-first search through all ProcessGroups when calling findProcessor(), findProcessGroup(), findXYZ() This closes #1979",
        "before_after_code_files": [
          "nifi-commons/nifi-utils/src/main/java/org/apache/nifi/processor/util/StandardValidators.java||nifi-commons/nifi-utils/src/main/java/org/apache/nifi/processor/util/StandardValidators.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/StatusMerger.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/StatusMerger.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/AbstractConfiguredComponent.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/AbstractConfiguredComponent.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardProcessorNode.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardProcessorNode.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceNode.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceNode.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceProvider.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceProvider.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/scheduling/TestStandardProcessScheduler.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/scheduling/TestStandardProcessScheduler.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/TestStandardControllerServiceProvider.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/TestStandardControllerServiceProvider.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/mock/MockProcessGroup.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/mock/MockProcessGroup.java",
          "nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java||nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java||nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java"
          ],
          "candidate": [
            "nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java||nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java"
          ]
        }
      },
      "candidate_diff": {
        "nifi-commons/nifi-utils/src/main/java/org/apache/nifi/processor/util/StandardValidators.java||nifi-commons/nifi-utils/src/main/java/org/apache/nifi/processor/util/StandardValidators.java": [
          "File: nifi-commons/nifi-utils/src/main/java/org/apache/nifi/processor/util/StandardValidators.java -> nifi-commons/nifi-utils/src/main/java/org/apache/nifi/processor/util/StandardValidators.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "391:     }",
          "393:     public static final Validator TIME_PERIOD_VALIDATOR = new Validator() {",
          "394:         @Override",
          "395:         public ValidationResult validate(final String subject, final String input, final ValidationContext context) {",
          "396:             if (context.isExpressionLanguageSupported(subject) && context.isExpressionLanguagePresent(input)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "394:         private final Pattern TIME_DURATION_PATTERN = Pattern.compile(FormatUtils.TIME_DURATION_REGEX);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "400:             if (input == null) {",
          "401:                 return new ValidationResult.Builder().subject(subject).input(input).valid(false).explanation(\"Time Period cannot be null\").build();",
          "402:             }",
          "404:                 return new ValidationResult.Builder().subject(subject).input(input).valid(true).build();",
          "405:             } else {",
          "406:                 return new ValidationResult.Builder()",
          "",
          "[Removed Lines]",
          "403:             if (Pattern.compile(FormatUtils.TIME_DURATION_REGEX).matcher(input.toLowerCase()).matches()) {",
          "",
          "[Added Lines]",
          "405:             if (TIME_DURATION_PATTERN.matcher(input.toLowerCase()).matches()) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "416:     };",
          "418:     public static final Validator DATA_SIZE_VALIDATOR = new Validator() {",
          "419:         @Override",
          "420:         public ValidationResult validate(final String subject, final String input, final ValidationContext context) {",
          "421:             if (context.isExpressionLanguageSupported(subject) && context.isExpressionLanguagePresent(input)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "421:         private final Pattern DATA_SIZE_PATTERN = Pattern.compile(DataUnit.DATA_SIZE_REGEX);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "430:                         .explanation(\"Data Size cannot be null\")",
          "431:                         .build();",
          "432:             }",
          "434:                 return new ValidationResult.Builder().subject(subject).input(input).valid(true).build();",
          "435:             } else {",
          "436:                 return new ValidationResult.Builder()",
          "",
          "[Removed Lines]",
          "433:             if (Pattern.compile(DataUnit.DATA_SIZE_REGEX).matcher(input.toUpperCase()).matches()) {",
          "",
          "[Added Lines]",
          "437:             if (DATA_SIZE_PATTERN.matcher(input.toUpperCase()).matches()) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "708:     static class TimePeriodValidator implements Validator {",
          "712:         private final long minNanos;",
          "713:         private final long maxNanos;",
          "",
          "[Removed Lines]",
          "710:         private final Pattern pattern;",
          "",
          "[Added Lines]",
          "713:         private static final Pattern pattern = Pattern.compile(FormatUtils.TIME_DURATION_REGEX);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "716:         private final String maxValueEnglish;",
          "718:         public TimePeriodValidator(final long minValue, final TimeUnit minTimeUnit, final long maxValue, final TimeUnit maxTimeUnit) {",
          "721:             this.minNanos = TimeUnit.NANOSECONDS.convert(minValue, minTimeUnit);",
          "722:             this.maxNanos = TimeUnit.NANOSECONDS.convert(maxValue, maxTimeUnit);",
          "723:             this.minValueEnglish = minValue + \" \" + minTimeUnit.toString();",
          "",
          "[Removed Lines]",
          "719:             pattern = Pattern.compile(FormatUtils.TIME_DURATION_REGEX);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/StatusMerger.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/StatusMerger.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/StatusMerger.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/manager/StatusMerger.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: import java.util.concurrent.TimeUnit;",
          "63: public class StatusMerger {",
          "64:     public static void merge(final ControllerStatusDTO target, final ControllerStatusDTO toMerge) {",
          "65:         if (target == null || toMerge == null) {",
          "66:             return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     private static final String ZERO_COUNT = \"0\";",
          "65:     private static final String ZERO_BYTES = \"0 bytes\";",
          "66:     private static final String ZERO_COUNT_AND_BYTES = \"0 (0 bytes)\";",
          "67:     private static final String EMPTY_COUNT = \"-\";",
          "68:     private static final String EMPTY_BYTES = \"-\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "743:     }",
          "745:     public static String formatCount(final Integer intStatus) {",
          "747:     }",
          "749:     public static String formatDataSize(final Long longStatus) {",
          "751:     }",
          "753:     public static String prettyPrint(final Integer count, final Long bytes) {",
          "754:         return formatCount(count) + \" (\" + formatDataSize(bytes) + \")\";",
          "755:     }",
          "",
          "[Removed Lines]",
          "746:         return intStatus == null ? \"-\" : FormatUtils.formatCount(intStatus);",
          "750:         return longStatus == null ? \"-\" : FormatUtils.formatDataSize(longStatus);",
          "",
          "[Added Lines]",
          "752:         if (intStatus == null) {",
          "753:             return EMPTY_COUNT;",
          "754:         }",
          "755:         if (intStatus == 0) {",
          "756:             return ZERO_COUNT;",
          "757:         }",
          "759:         return FormatUtils.formatCount(intStatus);",
          "763:         if (longStatus == null) {",
          "764:             return EMPTY_BYTES;",
          "765:         }",
          "766:         if (longStatus == 0L) {",
          "767:             return ZERO_BYTES;",
          "768:         }",
          "770:         return FormatUtils.formatDataSize(longStatus);",
          "774:         if (count != null && bytes != null && count == 0 && bytes == 0L) {",
          "775:             return ZERO_COUNT_AND_BYTES;",
          "776:         }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/AbstractConfiguredComponent.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/AbstractConfiguredComponent.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/AbstractConfiguredComponent.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/AbstractConfiguredComponent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     private final ControllerServiceProvider serviceProvider;",
          "62:     private final AtomicReference<String> name;",
          "63:     private final AtomicReference<String> annotationData = new AtomicReference<>();",
          "64:     private final String componentType;",
          "65:     private final String componentCanonicalClass;",
          "66:     private final VariableRegistry variableRegistry;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     private final AtomicReference<ValidationContext> validationContext = new AtomicReference<>();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:     @Override",
          "120:     public void setAnnotationData(final String data) {",
          "121:         annotationData.set(CharacterFilterUtils.filterInvalidXmlCharacters(data));",
          "122:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:         invalidateValidationContext();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "436:     @Override",
          "437:     public void onPropertyModified(final PropertyDescriptor descriptor, final String oldValue, final String newValue) {",
          "438:         try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(getComponent().getClass(), getComponent().getIdentifier())) {",
          "439:             getComponent().onPropertyModified(descriptor, oldValue, newValue);",
          "440:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "440:         invalidateValidationContext();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "450:     @Override",
          "451:     public boolean isValid() {",
          "455:         for (final ValidationResult result : validationResults) {",
          "456:             if (!result.isValid()) {",
          "",
          "[Removed Lines]",
          "452:         final Collection<ValidationResult> validationResults = validate(validationContextFactory.newValidationContext(",
          "453:             getProperties(), getAnnotationData(), getProcessGroupIdentifier(), getIdentifier()));",
          "",
          "[Added Lines]",
          "455:         final Collection<ValidationResult> validationResults = validate(getValidationContext());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "470:         final List<ValidationResult> results = new ArrayList<>();",
          "471:         lock.lock();",
          "472:         try {",
          "476:             final Collection<ValidationResult> validationResults;",
          "477:             try (final NarCloseable narCloseable = NarCloseable.withComponentNarLoader(getComponent().getClass(), getComponent().getIdentifier())) {",
          "",
          "[Removed Lines]",
          "473:             final ValidationContext validationContext = validationContextFactory.newValidationContext(",
          "474:                 serviceIdentifiersNotToValidate, getProperties(), getAnnotationData(), getProcessGroupIdentifier(), getIdentifier());",
          "",
          "[Added Lines]",
          "475:             final ValidationContext validationContext;",
          "476:             if (serviceIdentifiersNotToValidate == null || serviceIdentifiersNotToValidate.isEmpty()) {",
          "477:                 validationContext = getValidationContext();",
          "478:             } else {",
          "479:                 validationContext = getValidationContextFactory().newValidationContext(serviceIdentifiersNotToValidate,",
          "480:                     getProperties(), getAnnotationData(), getProcessGroupIdentifier(), getIdentifier());",
          "481:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "515:         return this.validationContextFactory;",
          "516:     }",
          "518:     protected VariableRegistry getVariableRegistry() {",
          "519:         return this.variableRegistry;",
          "520:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "525:     protected void invalidateValidationContext() {",
          "526:         this.validationContext.set(null);",
          "527:     }",
          "529:     protected ValidationContext getValidationContext() {",
          "530:         while (true) {",
          "531:             ValidationContext context = this.validationContext.get();",
          "532:             if (context != null) {",
          "533:                 return context;",
          "534:             }",
          "536:             context = getValidationContextFactory().newValidationContext(getProperties(), getAnnotationData(), getProcessGroupIdentifier(), getIdentifier());",
          "537:             final boolean updated = validationContext.compareAndSet(null, context);",
          "538:             if (updated) {",
          "539:                 return context;",
          "540:             }",
          "541:         }",
          "542:     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/FlowController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import static java.util.Objects.requireNonNull;",
          "22: import java.io.ByteArrayInputStream;",
          "23: import java.io.IOException;",
          "24: import java.io.InputStream;",
          "",
          "[Removed Lines]",
          "21: import com.sun.jersey.api.client.ClientHandlerException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248: import org.slf4j.Logger;",
          "249: import org.slf4j.LoggerFactory;",
          "251: public class FlowController implements EventAccess, ControllerServiceProvider, ReportingTaskProvider,",
          "252:     QueueProvider, Authorizable, ProvenanceAuthorizableFactory, NodeTypeProvider, IdentifierLookup, ReloadComponent {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252: import com.sun.jersey.api.client.ClientHandlerException;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "301:     private final VariableRegistry variableRegistry;",
          "302:     private final ConcurrentMap<String, ControllerServiceNode> rootControllerServices = new ConcurrentHashMap<>();",
          "304:     private volatile ZooKeeperStateServer zooKeeperStateServer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307:     private final ConcurrentMap<String, ProcessorNode> allProcessors = new ConcurrentHashMap<>();",
          "308:     private final ConcurrentMap<String, ProcessGroup> allProcessGroups = new ConcurrentHashMap<>();",
          "309:     private final ConcurrentMap<String, Connection> allConnections = new ConcurrentHashMap<>();",
          "310:     private final ConcurrentMap<String, Port> allInputPorts = new ConcurrentHashMap<>();",
          "311:     private final ConcurrentMap<String, Port> allOutputPorts = new ConcurrentHashMap<>();",
          "312:     private final ConcurrentMap<String, Funnel> allFunnels = new ConcurrentHashMap<>();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "532:         final ProcessGroup rootGroup = new StandardProcessGroup(ComponentIdGenerator.generateId().toString(), this, processScheduler,",
          "533:                 nifiProperties, encryptor, this, this.variableRegistry);",
          "534:         rootGroup.setName(DEFAULT_ROOT_GROUP_NAME);",
          "536:         instanceId = ComponentIdGenerator.generateId().toString();",
          "538:         controllerServiceProvider = new StandardControllerServiceProvider(this, processScheduler, bulletinRepository, stateManagerProvider, this.variableRegistry, this.nifiProperties);",
          "",
          "[Removed Lines]",
          "535:         rootGroupRef.set(rootGroup);",
          "",
          "[Added Lines]",
          "545:         setRootGroup(rootGroup);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1662:             this.heartbeatBeanRef.set(new HeartbeatBean(group, isPrimary()));",
          "1663:         } finally {",
          "1664:             writeLock.unlock();",
          "1665:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1673:             allProcessGroups.put(group.getIdentifier(), group);",
          "1674:             allProcessGroups.put(ROOT_GROUP_ID_ALIAS, group);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2366:     public ProcessGroup getGroup(final String id) {",
          "2371:     }",
          "",
          "[Removed Lines]",
          "2367:         requireNonNull(id);",
          "2368:         final ProcessGroup root = getRootGroup();",
          "2369:         final String searchId = id.equals(ROOT_GROUP_ID_ALIAS) ? getRootGroupId() : id;",
          "2370:         return root == null ? null : root.findProcessGroup(searchId);",
          "",
          "[Added Lines]",
          "2379:         return allProcessGroups.get(requireNonNull(id));",
          "2380:     }",
          "2382:     public void onProcessGroupAdded(final ProcessGroup group) {",
          "2383:         allProcessGroups.put(group.getIdentifier(), group);",
          "2384:     }",
          "2386:     public void onProcessGroupRemoved(final ProcessGroup group) {",
          "2387:         allProcessGroups.remove(group.getIdentifier());",
          "2388:     }",
          "2390:     public void onProcessorAdded(final ProcessorNode procNode) {",
          "2391:         allProcessors.put(procNode.getIdentifier(), procNode);",
          "2392:     }",
          "2394:     public void onProcessorRemoved(final ProcessorNode procNode) {",
          "2395:         allProcessors.remove(procNode.getIdentifier());",
          "2396:     }",
          "2398:     public ProcessorNode getProcessorNode(final String id) {",
          "2399:         return allProcessors.get(id);",
          "2400:     }",
          "2402:     public void onConnectionAdded(final Connection connection) {",
          "2403:         allConnections.put(connection.getIdentifier(), connection);",
          "2404:     }",
          "2406:     public void onConnectionRemoved(final Connection connection) {",
          "2407:         allConnections.remove(connection.getIdentifier());",
          "2410:     public Connection getConnection(final String id) {",
          "2411:         return allConnections.get(id);",
          "2412:     }",
          "2414:     public void onInputPortAdded(final Port inputPort) {",
          "2415:         allInputPorts.put(inputPort.getIdentifier(), inputPort);",
          "2416:     }",
          "2418:     public void onInputPortRemoved(final Port inputPort) {",
          "2419:         allInputPorts.remove(inputPort.getIdentifier());",
          "2420:     }",
          "2422:     public Port getInputPort(final String id) {",
          "2423:         return allInputPorts.get(id);",
          "2424:     }",
          "2426:     public void onOutputPortAdded(final Port outputPort) {",
          "2427:         allOutputPorts.put(outputPort.getIdentifier(), outputPort);",
          "2428:     }",
          "2430:     public void onOutputPortRemoved(final Port outputPort) {",
          "2431:         allOutputPorts.remove(outputPort.getIdentifier());",
          "2432:     }",
          "2434:     public Port getOutputPort(final String id) {",
          "2435:         return allOutputPorts.get(id);",
          "2436:     }",
          "2438:     public void onFunnelAdded(final Funnel funnel) {",
          "2439:         allFunnels.put(funnel.getIdentifier(), funnel);",
          "2440:     }",
          "2442:     public void onFunnelRemoved(final Funnel funnel) {",
          "2443:         allFunnels.remove(funnel.getIdentifier());",
          "2444:     }",
          "2446:     public Funnel getFunnel(final String id) {",
          "2447:         return allFunnels.get(id);",
          "2448:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3487:     }",
          "3489:     public int getActiveThreadCount() {",
          "3491:     }",
          "3493:     private RepositoryStatusReport getProcessorStats() {",
          "",
          "[Removed Lines]",
          "3490:         return getGroupStatus(getRootGroupId()).getActiveThreadCount();",
          "",
          "[Added Lines]",
          "3566:         final int timerDrivenCount = timerDrivenEngineRef.get().getActiveCount();",
          "3567:         final int eventDrivenCount = eventDrivenEngineRef.get().getActiveCount();",
          "3568:         return timerDrivenCount + eventDrivenCount;",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardProcessorNode.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardProcessorNode.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardProcessorNode.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardProcessorNode.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "964:     @Override",
          "965:     public boolean isValid() {",
          "966:         try {",
          "970:             final Collection<ValidationResult> validationResults = super.validate(validationContext);",
          "972:             for (final ValidationResult result : validationResults) {",
          "",
          "[Removed Lines]",
          "967:             final ValidationContext validationContext = this.getValidationContextFactory()",
          "968:                 .newValidationContext(getProperties(), getAnnotationData(), getProcessGroupIdentifier(), getIdentifier());",
          "",
          "[Added Lines]",
          "967:             final ValidationContext validationContext = getValidationContext();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1013:             if (getScheduledState() == ScheduledState.STOPPED) {",
          "1017:                 final Collection<ValidationResult> validationResults = super.validate(validationContext);",
          "",
          "[Removed Lines]",
          "1014:                 final ValidationContext validationContext = this.getValidationContextFactory()",
          "1015:                         .newValidationContext(getProperties(), getAnnotationData(), getProcessGroup().getIdentifier(), getIdentifier());",
          "",
          "[Added Lines]",
          "1012:                 final ValidationContext validationContext = getValidationContext();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1111:     @Override",
          "1112:     public synchronized void setProcessGroup(final ProcessGroup group) {",
          "1113:         this.processGroup.set(group);",
          "1114:     }",
          "1116:     @Override",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1111:         invalidateValidationContext();",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceNode.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceNode.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceNode.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceNode.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:         writeLock.lock();",
          "209:         try {",
          "210:             this.processGroup = group;",
          "211:         } finally {",
          "212:             writeLock.unlock();",
          "213:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:             invalidateValidationContext();",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceProvider.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceProvider.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceProvider.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardControllerServiceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import java.util.List;",
          "31: import java.util.Map;",
          "32: import java.util.Set;",
          "33: import java.util.concurrent.Future;",
          "34: import java.util.concurrent.TimeUnit;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import java.util.concurrent.ConcurrentHashMap;",
          "34: import java.util.concurrent.ConcurrentMap;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:     private final FlowController flowController;",
          "80:     private final NiFiProperties nifiProperties;",
          "82:     public StandardControllerServiceProvider(final FlowController flowController, final ProcessScheduler scheduler, final BulletinRepository bulletinRepo,",
          "83:             final StateManagerProvider stateManagerProvider, final VariableRegistry variableRegistry, final NiFiProperties nifiProperties) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:     private final ConcurrentMap<String, ControllerServiceNode> serviceCache = new ConcurrentHashMap<>();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "158:                 }",
          "159:             }",
          "161:             return serviceNode;",
          "162:         } catch (final Throwable t) {",
          "163:             throw new ControllerServiceInstantiationException(t);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:             serviceCache.put(id, serviceNode);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "223:         final ControllerServiceNode serviceNode = new StandardControllerServiceNode(proxiedLoggableComponent, proxiedLoggableComponent, invocationHandler, id,",
          "224:                 new StandardValidationContextFactory(this, variableRegistry), this, componentType, type, variableRegistry, flowController, true);",
          "225:         return serviceNode;",
          "226:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:         serviceCache.putIfAbsent(id, serviceNode);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "460:     @Override",
          "461:     public ControllerService getControllerServiceForComponent(final String serviceIdentifier, final String componentId) {",
          "465:         ProcessGroup groupOfInterest = null;",
          "468:         if (procNode == null) {",
          "469:             final ControllerServiceNode serviceNode = getControllerServiceNode(componentId);",
          "470:             if (serviceNode == null) {",
          "",
          "[Removed Lines]",
          "462:         final ProcessGroup rootGroup = getRootGroup();",
          "467:         final ProcessorNode procNode = rootGroup.findProcessor(componentId);",
          "",
          "[Added Lines]",
          "473:         final ProcessorNode procNode = flowController.getProcessorNode(componentId);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "523:             return rootServiceNode;",
          "524:         }",
          "527:     }",
          "529:     @Override",
          "",
          "[Removed Lines]",
          "526:         return getRootGroup().findControllerService(serviceIdentifier);",
          "",
          "[Added Lines]",
          "532:         return serviceCache.get(serviceIdentifier);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "533:             serviceNodes = flowController.getRootControllerServices();",
          "534:         } else {",
          "535:             ProcessGroup group = getRootGroup();",
          "537:                 group = group.findProcessGroup(groupId);",
          "542:             }",
          "545:         }",
          "547:         final Set<String> identifiers = new HashSet<>();",
          "",
          "[Removed Lines]",
          "536:             if (!FlowController.ROOT_GROUP_ID_ALIAS.equals(groupId) && !group.getIdentifier().equals(groupId)) {",
          "538:             }",
          "540:             if (group == null) {",
          "541:                 return Collections.emptySet();",
          "544:             serviceNodes = group.getControllerServices(true);",
          "",
          "[Added Lines]",
          "542:             if (FlowController.ROOT_GROUP_ID_ALIAS.equals(groupId) || group.getIdentifier().equals(groupId)) {",
          "543:                 serviceNodes = new HashSet<>(serviceCache.values());",
          "544:             } else {",
          "546:                 if (group == null) {",
          "547:                     return Collections.emptySet();",
          "548:                 }",
          "550:                 serviceNodes = group.getControllerServices(true);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "571:         group.removeControllerService(serviceNode);",
          "572:         ExtensionManager.removeInstanceClassLoader(serviceNode.getIdentifier());",
          "573:     }",
          "575:     @Override",
          "576:     public Set<ControllerServiceNode> getAllControllerServices() {",
          "577:         final Set<ControllerServiceNode> allServices = new HashSet<>();",
          "578:         allServices.addAll(flowController.getRootControllerServices());",
          "581:         return allServices;",
          "582:     }",
          "",
          "[Removed Lines]",
          "579:         allServices.addAll(getRootGroup().findAllControllerServices());",
          "",
          "[Added Lines]",
          "580:         serviceCache.remove(serviceNode.getIdentifier());",
          "587:         allServices.addAll(serviceCache.values());",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/groups/StandardProcessGroup.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "406:             port.setProcessGroup(this);",
          "407:             inputPorts.put(requireNonNull(port).getIdentifier(), port);",
          "408:         } finally {",
          "409:             writeLock.unlock();",
          "410:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "408:             flowController.onInputPortAdded(port);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "439:                 throw new IllegalStateException(port.getIdentifier() + \" is not an Input Port of this Process Group\");",
          "440:             }",
          "442:             LOG.info(\"Input Port {} removed from flow\", port);",
          "443:         } finally {",
          "444:             writeLock.unlock();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "443:             flowController.onInputPortRemoved(port);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "485:             port.setProcessGroup(this);",
          "486:             outputPorts.put(port.getIdentifier(), port);",
          "487:         } finally {",
          "488:             writeLock.unlock();",
          "489:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489:             flowController.onOutputPortAdded(port);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "509:                 throw new IllegalStateException(port.getIdentifier() + \" is not an Output Port of this Process Group\");",
          "510:             }",
          "512:             LOG.info(\"Output Port {} removed from flow\", port);",
          "513:         } finally {",
          "514:             writeLock.unlock();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "515:             flowController.onOutputPortRemoved(port);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "545:         try {",
          "546:             group.setParent(this);",
          "547:             processGroups.put(Objects.requireNonNull(group).getIdentifier(), group);",
          "548:         } finally {",
          "549:             writeLock.unlock();",
          "550:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "552:             flowController.onProcessGroupAdded(group);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "585:             removeComponents(group);",
          "586:             processGroups.remove(group.getIdentifier());",
          "587:             LOG.info(\"{} removed from flow\", group);",
          "588:         } finally {",
          "589:             writeLock.unlock();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "592:             flowController.onProcessGroupRemoved(group);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "705:             processor.setProcessGroup(this);",
          "706:             processors.put(processorId, processor);",
          "707:         } finally {",
          "708:             writeLock.unlock();",
          "709:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "713:             flowController.onProcessorAdded(processor);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "745:             }",
          "747:             processors.remove(id);",
          "748:             LogRepositoryFactory.getRepository(processor.getIdentifier()).removeAllObservers();",
          "750:             final StateManagerProvider stateManagerProvider = flowController.getStateManagerProvider();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "755:             flowController.onProcessorRemoved(processor);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "884:                 destination.addConnection(connection);",
          "885:             }",
          "886:             connections.put(connection.getIdentifier(), connection);",
          "887:         } finally {",
          "888:             writeLock.unlock();",
          "889:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "895:             flowController.onConnectionAdded(connection);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "944:             connections.remove(connection.getIdentifier());",
          "945:             LOG.info(\"{} removed from flow\", connection);",
          "946:         } finally {",
          "947:             writeLock.unlock();",
          "948:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "955:             flowController.onConnectionRemoved(connection);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "971:     @Override",
          "972:     public Connection findConnection(final String id) {",
          "980:         }",
          "987:         }",
          "989:         return null;",
          "990:     }",
          "992:     @Override",
          "993:     public List<Connection> findAllConnections() {",
          "994:         return findAllConnections(this);",
          "",
          "[Removed Lines]",
          "973:         return findConnection(id, this);",
          "974:     }",
          "976:     private Connection findConnection(final String id, final ProcessGroup start) {",
          "977:         Connection connection = start.getConnection(id);",
          "978:         if (connection != null) {",
          "979:             return connection;",
          "982:         for (final ProcessGroup group : start.getProcessGroups()) {",
          "983:             connection = findConnection(id, group);",
          "984:             if (connection != null) {",
          "985:                 return connection;",
          "986:             }",
          "",
          "[Added Lines]",
          "983:         final Connection connection = flowController.getConnection(id);",
          "984:         if (connection == null) {",
          "985:             return null;",
          "990:         if (isOwner(connection.getProcessGroup())) {",
          "991:             return connection;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1387:     @Override",
          "1388:     public ProcessGroup findProcessGroup(final String id) {",
          "1395:         }",
          "1402:         }",
          "1404:         return null;",
          "",
          "[Removed Lines]",
          "1389:         return findProcessGroup(requireNonNull(id), this);",
          "1390:     }",
          "1392:     private ProcessGroup findProcessGroup(final String id, final ProcessGroup start) {",
          "1393:         if (id.equals(start.getIdentifier())) {",
          "1394:             return start;",
          "1397:         for (final ProcessGroup group : start.getProcessGroups()) {",
          "1398:             final ProcessGroup matching = findProcessGroup(id, group);",
          "1399:             if (matching != null) {",
          "1400:                 return matching;",
          "1401:             }",
          "",
          "[Added Lines]",
          "1395:         if (requireNonNull(id).equals(getIdentifier())) {",
          "1396:             return this;",
          "1397:         }",
          "1399:         final ProcessGroup group = flowController.getGroup(id);",
          "1400:         if (group == null) {",
          "1401:             return null;",
          "1406:         if (isOwner(group.getParent())) {",
          "1407:             return group;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1454:     @Override",
          "1455:     public ProcessorNode findProcessor(final String id) {",
          "1462:             return node;",
          "1463:         }",
          "1470:         }",
          "1473:     }",
          "1475:     @Override",
          "",
          "[Removed Lines]",
          "1456:         return findProcessor(id, this);",
          "1457:     }",
          "1459:     private ProcessorNode findProcessor(final String id, final ProcessGroup start) {",
          "1460:         ProcessorNode node = start.getProcessor(id);",
          "1461:         if (node != null) {",
          "1465:         for (final ProcessGroup group : start.getProcessGroups()) {",
          "1466:             node = findProcessor(id, group);",
          "1467:             if (node != null) {",
          "1468:                 return node;",
          "1469:             }",
          "1472:         return null;",
          "",
          "[Added Lines]",
          "1462:         final ProcessorNode node = flowController.getProcessorNode(id);",
          "1463:         if (node == null) {",
          "1464:             return null;",
          "1465:         }",
          "1469:         if (isOwner(node.getProcessGroup())) {",
          "1473:         return null;",
          "1474:     }",
          "1476:     private boolean isOwner(ProcessGroup owner) {",
          "1477:         while (owner != this && owner != null) {",
          "1478:             owner = owner.getParent();",
          "1481:         if (owner == this) {",
          "1482:             return true;",
          "1483:         }",
          "1485:         return false;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1521:         return null;",
          "1522:     }",
          "1524:     public RemoteGroupPort findRemoteGroupPort(final String identifier) {",
          "1525:         return findRemoteGroupPort(identifier, this);",
          "1526:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1537:     @Override",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1585:     @Override",
          "1586:     public Port findInputPort(final String id) {",
          "1588:     }",
          "1590:     @Override",
          "",
          "[Removed Lines]",
          "1587:         return findPort(id, this, new InputPortRetriever());",
          "",
          "[Added Lines]",
          "1601:         final Port port = flowController.getInputPort(id);",
          "1602:         if (port == null) {",
          "1603:             return null;",
          "1604:         }",
          "1606:         if (isOwner(port.getProcessGroup())) {",
          "1607:             return port;",
          "1608:         }",
          "1610:         return null;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1603:     @Override",
          "1604:     public Port findOutputPort(final String id) {",
          "1606:     }",
          "1608:     @Override",
          "",
          "[Removed Lines]",
          "1605:         return findPort(id, this, new OutputPortRetriever());",
          "",
          "[Added Lines]",
          "1628:         final Port port = flowController.getOutputPort(id);",
          "1629:         if (port == null) {",
          "1630:             return null;",
          "1631:         }",
          "1633:         if (isOwner(port.getProcessGroup())) {",
          "1634:             return port;",
          "1635:         }",
          "1637:         return null;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1674:         }",
          "1675:     }",
          "1693:     private Port getPortByName(final String name, final ProcessGroup group, final PortRetriever retriever) {",
          "1694:         for (final Port port : retriever.getPorts(group)) {",
          "",
          "[Removed Lines]",
          "1677:     private Port findPort(final String id, final ProcessGroup group, final PortRetriever retriever) {",
          "1678:         Port port = retriever.getPort(group, id);",
          "1679:         if (port != null) {",
          "1680:             return port;",
          "1681:         }",
          "1683:         for (final ProcessGroup childGroup : group.getProcessGroups()) {",
          "1684:             port = findPort(id, childGroup, retriever);",
          "1685:             if (port != null) {",
          "1686:                 return port;",
          "1687:             }",
          "1688:         }",
          "1690:         return null;",
          "1691:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1717:             funnel.setProcessGroup(this);",
          "1718:             funnels.put(funnel.getIdentifier(), funnel);",
          "1720:             if (autoStart) {",
          "1721:                 startFunnel(funnel);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1736:             flowController.onFunnelAdded(funnel);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1738:     @Override",
          "1739:     public Funnel findFunnel(final String id) {",
          "1746:             return funnel;",
          "1747:         }",
          "1754:         }",
          "1756:         return null;",
          "1757:     }",
          "1759:     @Override",
          "1760:     public ControllerServiceNode findControllerService(final String id) {",
          "1761:         return findControllerService(id, this);",
          "",
          "[Removed Lines]",
          "1740:         return findFunnel(id, this);",
          "1741:     }",
          "1743:     private Funnel findFunnel(final String id, final ProcessGroup start) {",
          "1744:         Funnel funnel = start.getFunnel(id);",
          "1745:         if (funnel != null) {",
          "1749:         for (final ProcessGroup group : start.getProcessGroups()) {",
          "1750:             funnel = findFunnel(id, group);",
          "1751:             if (funnel != null) {",
          "1752:                 return funnel;",
          "1753:             }",
          "",
          "[Added Lines]",
          "1758:         final Funnel funnel = flowController.getFunnel(id);",
          "1759:         if (funnel == null) {",
          "1763:         if (isOwner(funnel.getProcessGroup())) {",
          "1764:             return funnel;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1814:             }",
          "1816:             funnels.remove(funnel.getIdentifier());",
          "1817:             LOG.info(\"{} removed from flow\", funnel);",
          "1818:         } finally {",
          "1819:             writeLock.unlock();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1829:             flowController.onFunnelRemoved(funnel);",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/scheduling/TestStandardProcessScheduler.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/scheduling/TestStandardProcessScheduler.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/scheduling/TestStandardProcessScheduler.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/scheduling/TestStandardProcessScheduler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.nifi.controller.scheduling;",
          "19: import java.io.File;",
          "20: import org.apache.nifi.annotation.lifecycle.OnDisabled;",
          "21: import org.apache.nifi.annotation.lifecycle.OnEnabled;",
          "22: import org.apache.nifi.annotation.lifecycle.OnScheduled;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import static org.junit.Assert.assertEquals;",
          "20: import static org.junit.Assert.assertFalse;",
          "21: import static org.junit.Assert.assertTrue;",
          "24: import java.util.ArrayList;",
          "25: import java.util.Collections;",
          "26: import java.util.HashMap;",
          "27: import java.util.List;",
          "28: import java.util.Map;",
          "29: import java.util.Random;",
          "30: import java.util.UUID;",
          "31: import java.util.concurrent.ConcurrentHashMap;",
          "32: import java.util.concurrent.ConcurrentMap;",
          "33: import java.util.concurrent.ExecutorService;",
          "34: import java.util.concurrent.Executors;",
          "35: import java.util.concurrent.TimeUnit;",
          "36: import java.util.concurrent.atomic.AtomicBoolean;",
          "37: import java.util.concurrent.atomic.AtomicInteger;",
          "39: import org.apache.commons.io.FileUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61: import org.apache.nifi.reporting.ReportingTask;",
          "62: import org.apache.nifi.scheduling.SchedulingStrategy;",
          "63: import org.apache.nifi.util.NiFiProperties;",
          "64: import org.junit.Before;",
          "65: import org.junit.Ignore;",
          "66: import org.junit.Test;",
          "67: import org.mockito.Mockito;",
          "88: public class TestStandardProcessScheduler {",
          "",
          "[Removed Lines]",
          "69: import java.util.ArrayList;",
          "70: import java.util.Collections;",
          "71: import java.util.HashMap;",
          "72: import java.util.List;",
          "73: import java.util.Map;",
          "74: import java.util.Random;",
          "75: import java.util.UUID;",
          "76: import java.util.concurrent.ExecutorService;",
          "77: import java.util.concurrent.Executors;",
          "78: import java.util.concurrent.TimeUnit;",
          "79: import java.util.concurrent.atomic.AtomicBoolean;",
          "80: import java.util.concurrent.atomic.AtomicInteger;",
          "81: import org.apache.commons.io.FileUtils;",
          "82: import org.junit.After;",
          "84: import static org.junit.Assert.assertEquals;",
          "85: import static org.junit.Assert.assertFalse;",
          "86: import static org.junit.Assert.assertTrue;",
          "",
          "[Added Lines]",
          "84: import org.junit.After;",
          "89: import org.mockito.invocation.InvocationOnMock;",
          "90: import org.mockito.stubbing.Answer;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121:         taskNode = new StandardReportingTaskNode(loggableComponent, UUID.randomUUID().toString(), null, scheduler, validationContextFactory, variableRegistry, reloadComponent);",
          "123:         controller = Mockito.mock(FlowController.class);",
          "125:         Mockito.when(controller.getGroup(Mockito.anyString())).thenReturn(rootGroup);",
          "126:     }",
          "",
          "[Removed Lines]",
          "124:         rootGroup = new MockProcessGroup();",
          "",
          "[Added Lines]",
          "129:         final ConcurrentMap<String, ProcessorNode> processorMap = new ConcurrentHashMap<>();",
          "130:         Mockito.doAnswer(new Answer<ProcessorNode>() {",
          "131:             @Override",
          "132:             public ProcessorNode answer(InvocationOnMock invocation) throws Throwable {",
          "133:                 final String id = invocation.getArgumentAt(0, String.class);",
          "134:                 return processorMap.get(id);",
          "135:             }",
          "136:         }).when(controller).getProcessorNode(Mockito.anyString());",
          "138:         Mockito.doAnswer(new Answer<Object>() {",
          "139:             @Override",
          "140:             public Object answer(InvocationOnMock invocation) throws Throwable {",
          "141:                 final ProcessorNode procNode = invocation.getArgumentAt(0, ProcessorNode.class);",
          "142:                 processorMap.putIfAbsent(procNode.getIdentifier(), procNode);",
          "143:                 return null;",
          "144:             }",
          "145:         }).when(controller).onProcessorAdded(Mockito.any(ProcessorNode.class));",
          "147:         rootGroup = new MockProcessGroup(controller);",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/TestStandardControllerServiceProvider.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/TestStandardControllerServiceProvider.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/TestStandardControllerServiceProvider.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/TestStandardControllerServiceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: import org.apache.nifi.registry.VariableRegistry;",
          "43: import org.apache.nifi.util.NiFiProperties;",
          "44: import org.junit.Assert;",
          "45: import org.junit.BeforeClass;",
          "46: import org.junit.Test;",
          "47: import org.mockito.Mockito;",
          "49: import java.beans.PropertyDescriptor;",
          "50: import java.util.Arrays;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import org.junit.Before;",
          "49: import org.mockito.invocation.InvocationOnMock;",
          "50: import org.mockito.stubbing.Answer;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: import java.util.Map;",
          "56: import java.util.Set;",
          "57: import java.util.UUID;",
          "59: import static org.junit.Assert.assertEquals;",
          "60: import static org.junit.Assert.assertFalse;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: import java.util.concurrent.ConcurrentHashMap;",
          "62: import java.util.concurrent.ConcurrentMap;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:     private static VariableRegistry variableRegistry = VariableRegistry.ENVIRONMENT_SYSTEM_REGISTRY;",
          "89:     private static NiFiProperties niFiProperties;",
          "90:     private static Bundle systemBundle;",
          "92:     @BeforeClass",
          "93:     public static void setNiFiProps() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     private FlowController controller;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "99:         ExtensionManager.discoverExtensions(systemBundle, Collections.emptySet());",
          "100:     }",
          "102:     private StandardProcessScheduler createScheduler() {",
          "103:         return new StandardProcessScheduler(null, null, stateManagerProvider, variableRegistry, niFiProperties);",
          "104:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:     @Before",
          "109:     public void setup() {",
          "110:         controller = Mockito.mock(FlowController.class);",
          "112:         final ConcurrentMap<String, ProcessorNode> processorMap = new ConcurrentHashMap<>();",
          "113:         Mockito.doAnswer(new Answer<ProcessorNode>() {",
          "114:             @Override",
          "115:             public ProcessorNode answer(InvocationOnMock invocation) throws Throwable {",
          "116:                 final String id = invocation.getArgumentAt(0, String.class);",
          "117:                 return processorMap.get(id);",
          "118:             }",
          "119:         }).when(controller).getProcessorNode(Mockito.anyString());",
          "121:         Mockito.doAnswer(new Answer<Object>() {",
          "122:             @Override",
          "123:             public Object answer(InvocationOnMock invocation) throws Throwable {",
          "124:                 final ProcessorNode procNode = invocation.getArgumentAt(0, ProcessorNode.class);",
          "125:                 processorMap.putIfAbsent(procNode.getIdentifier(), procNode);",
          "126:                 return null;",
          "127:             }",
          "128:         }).when(controller).onProcessorAdded(Mockito.any(ProcessorNode.class));",
          "129:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "112:     @Test",
          "113:     public void testDisableControllerService() {",
          "115:         final FlowController controller = Mockito.mock(FlowController.class);",
          "116:         Mockito.when(controller.getGroup(Mockito.anyString())).thenReturn(procGroup);",
          "",
          "[Removed Lines]",
          "114:         final ProcessGroup procGroup = new MockProcessGroup();",
          "",
          "[Added Lines]",
          "143:         final ProcessGroup procGroup = new MockProcessGroup(controller);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "128:     @Test(timeout = 10000)",
          "129:     public void testEnableDisableWithReference() {",
          "131:         final FlowController controller = Mockito.mock(FlowController.class);",
          "132:         Mockito.when(controller.getGroup(Mockito.anyString())).thenReturn(group);",
          "",
          "[Removed Lines]",
          "130:         final ProcessGroup group = new MockProcessGroup();",
          "",
          "[Added Lines]",
          "159:         final ProcessGroup group = new MockProcessGroup(controller);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "190:     }",
          "192:     public void testEnableReferencingServicesGraph(final ProcessScheduler scheduler) {",
          "194:         final FlowController controller = Mockito.mock(FlowController.class);",
          "195:         Mockito.when(controller.getGroup(Mockito.anyString())).thenReturn(procGroup);",
          "",
          "[Removed Lines]",
          "193:         final ProcessGroup procGroup = new MockProcessGroup();",
          "",
          "[Added Lines]",
          "222:         final ProcessGroup procGroup = new MockProcessGroup(controller);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "247:     @Test",
          "248:     public void testOrderingOfServices() {",
          "250:         final FlowController controller = Mockito.mock(FlowController.class);",
          "251:         Mockito.when(controller.getGroup(Mockito.anyString())).thenReturn(procGroup);",
          "",
          "[Removed Lines]",
          "249:         final ProcessGroup procGroup = new MockProcessGroup();",
          "",
          "[Added Lines]",
          "278:         final ProcessGroup procGroup = new MockProcessGroup(controller);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "405:                 new StandardValidationContextFactory(serviceProvider, null), scheduler, serviceProvider, niFiProperties,",
          "406:                 VariableRegistry.EMPTY_REGISTRY, reloadComponent);",
          "409:         group.addProcessor(procNode);",
          "410:         procNode.setProcessGroup(group);",
          "",
          "[Removed Lines]",
          "408:         final ProcessGroup group = new StandardProcessGroup(UUID.randomUUID().toString(), serviceProvider, scheduler, null, null, null, variableRegistry);",
          "",
          "[Added Lines]",
          "437:         final ProcessGroup group = new StandardProcessGroup(UUID.randomUUID().toString(), serviceProvider, scheduler, null, null, Mockito.mock(FlowController.class), variableRegistry);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "415:     @Test",
          "416:     public void testEnableReferencingComponents() {",
          "418:         final FlowController controller = Mockito.mock(FlowController.class);",
          "419:         Mockito.when(controller.getGroup(Mockito.anyString())).thenReturn(procGroup);",
          "",
          "[Removed Lines]",
          "417:         final ProcessGroup procGroup = new MockProcessGroup();",
          "",
          "[Added Lines]",
          "446:         final ProcessGroup procGroup = new MockProcessGroup(controller);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "442:         FlowController controller = Mockito.mock(FlowController.class);",
          "443:         StandardControllerServiceProvider provider =",
          "444:                 new StandardControllerServiceProvider(controller, scheduler, null, stateManagerProvider, variableRegistry, niFiProperties);",
          "446:         Mockito.when(controller.getGroup(Mockito.anyString())).thenReturn(procGroup);",
          "448:         ControllerServiceNode A = provider.createControllerService(ServiceA.class.getName(), \"A\",",
          "",
          "[Removed Lines]",
          "445:         ProcessGroup procGroup = new MockProcessGroup();",
          "",
          "[Added Lines]",
          "474:         ProcessGroup procGroup = new MockProcessGroup(controller);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "493:         FlowController controller = Mockito.mock(FlowController.class);",
          "494:         StandardControllerServiceProvider provider = new StandardControllerServiceProvider(controller, scheduler, null,",
          "495:                 stateManagerProvider, variableRegistry, niFiProperties);",
          "497:         Mockito.when(controller.getGroup(Mockito.anyString())).thenReturn(procGroup);",
          "499:         ControllerServiceNode A = provider.createControllerService(ServiceC.class.getName(), \"A\",",
          "",
          "[Removed Lines]",
          "496:         ProcessGroup procGroup = new MockProcessGroup();",
          "",
          "[Added Lines]",
          "525:         ProcessGroup procGroup = new MockProcessGroup(controller);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "535:         FlowController controller = Mockito.mock(FlowController.class);",
          "536:         StandardControllerServiceProvider provider =",
          "537:                 new StandardControllerServiceProvider(controller, scheduler, null, stateManagerProvider, variableRegistry, niFiProperties);",
          "539:         Mockito.when(controller.getGroup(Mockito.anyString())).thenReturn(procGroup);",
          "541:         ControllerServiceNode serviceNode1 = provider.createControllerService(ServiceA.class.getName(), \"1\",",
          "",
          "[Removed Lines]",
          "538:         ProcessGroup procGroup = new MockProcessGroup();",
          "",
          "[Added Lines]",
          "567:         ProcessGroup procGroup = new MockProcessGroup(controller);",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/mock/MockProcessGroup.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/mock/MockProcessGroup.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/mock/MockProcessGroup.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/service/mock/MockProcessGroup.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.nifi.controller.service.mock;",
          "20: import org.apache.nifi.authorization.Resource;",
          "21: import org.apache.nifi.authorization.resource.Authorizable;",
          "22: import org.apache.nifi.connectable.Connectable;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.util.ArrayList;",
          "21: import java.util.HashMap;",
          "22: import java.util.HashSet;",
          "23: import java.util.List;",
          "24: import java.util.Map;",
          "25: import java.util.Set;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.apache.nifi.connectable.Port;",
          "26: import org.apache.nifi.connectable.Position;",
          "27: import org.apache.nifi.connectable.Positionable;",
          "28: import org.apache.nifi.controller.ProcessorNode;",
          "29: import org.apache.nifi.controller.Snippet;",
          "30: import org.apache.nifi.controller.Template;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import org.apache.nifi.controller.FlowController;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35: import org.apache.nifi.groups.RemoteProcessGroup;",
          "36: import org.apache.nifi.remote.RemoteGroupPort;",
          "45: public class MockProcessGroup implements ProcessGroup {",
          "46:     private final Map<String, ControllerServiceNode> serviceMap = new HashMap<>();",
          "47:     private final Map<String, ProcessorNode> processorMap = new HashMap<>();",
          "49:     @Override",
          "50:     public Authorizable getParentAuthorizable() {",
          "",
          "[Removed Lines]",
          "38: import java.util.ArrayList;",
          "39: import java.util.HashMap;",
          "40: import java.util.HashSet;",
          "41: import java.util.List;",
          "42: import java.util.Map;",
          "43: import java.util.Set;",
          "",
          "[Added Lines]",
          "49:     private final FlowController flowController;",
          "51:     public MockProcessGroup(final FlowController flowController) {",
          "52:         this.flowController = flowController;",
          "53:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "260:     public void addProcessor(final ProcessorNode processor) {",
          "261:         processor.setProcessGroup(this);",
          "262:         processorMap.put(processor.getIdentifier(), processor);",
          "263:     }",
          "265:     @Override",
          "266:     public void removeProcessor(final ProcessorNode processor) {",
          "267:         processorMap.remove(processor.getIdentifier());",
          "268:     }",
          "270:     @Override",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269:         flowController.onProcessorAdded(processor);",
          "275:         flowController.onProcessorRemoved(processor);",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java||nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java": [
          "File: nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java -> nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: public class CriteriaSerDe {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:     private static final JAXBContext JAXB_CONTEXT;",
          "40:     static {",
          "41:         try {",
          "42:             JAXB_CONTEXT = JAXBContext.newInstance(CriteriaBinding.class);",
          "43:         } catch (JAXBException e) {",
          "44:             throw new RuntimeException(\"Could not create JAXB Context for UpdateAttribute\", e);",
          "45:         }",
          "46:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:             binding.setRules(criteria.getRules());",
          "91:             marshaller.setProperty(Marshaller.JAXB_FRAGMENT, true);",
          "92:             marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);",
          "93:             marshaller.marshal(binding, writer);",
          "",
          "[Removed Lines]",
          "89:             final JAXBContext context = JAXBContext.newInstance(CriteriaBinding.class);",
          "90:             final Marshaller marshaller = context.createMarshaller();",
          "",
          "[Added Lines]",
          "98:             final Marshaller marshaller = JAXB_CONTEXT.createMarshaller();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110:         if (string != null && !string.trim().equals(\"\")) {",
          "111:             try {",
          "115:                 final Source source = new StreamSource(new StringReader(string));",
          "116:                 final JAXBElement<CriteriaBinding> element = unmarshaller.unmarshal(source, CriteriaBinding.class);",
          "",
          "[Removed Lines]",
          "113:                 final JAXBContext context = JAXBContext.newInstance(CriteriaBinding.class);",
          "114:                 final Unmarshaller unmarshaller = context.createUnmarshaller();",
          "",
          "[Added Lines]",
          "121:                 final Unmarshaller unmarshaller = JAXB_CONTEXT.createUnmarshaller();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d8b1e4890d5802677e978a6a7588a97bf4177f2",
      "candidate_info": {
        "commit_hash": "3d8b1e4890d5802677e978a6a7588a97bf4177f2",
        "repo": "apache/nifi",
        "commit_url": "https://github.com/apache/nifi/commit/3d8b1e4890d5802677e978a6a7588a97bf4177f2",
        "files": [
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ComponentDifferenceDTO.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/DifferenceDTO.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/pages/canvas.jsp",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/partials/canvas/revert-local-changes-dialog.jsp",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/partials/canvas/show-local-changes-dialog.jsp",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/css/dialog.css",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/header/components/nf-ng-group-component.js",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-actions.js",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-context-menu.js",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-flow-version.js"
        ],
        "message": "NIFI-4436: - Clearing bucket/flow/versions when changing the selected registry/bucket. - Using the versioned flow to get the group name when importing. - Adding menu items for viewing local changes. - Showing local changes during revert request.",
        "before_after_code_files": [
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ComponentDifferenceDTO.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ComponentDifferenceDTO.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/DifferenceDTO.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/DifferenceDTO.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/pages/canvas.jsp||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/pages/canvas.jsp",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/partials/canvas/revert-local-changes-dialog.jsp||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/partials/canvas/revert-local-changes-dialog.jsp",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/partials/canvas/show-local-changes-dialog.jsp||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/partials/canvas/show-local-changes-dialog.jsp",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/css/dialog.css||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/css/dialog.css",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/header/components/nf-ng-group-component.js||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/header/components/nf-ng-group-component.js",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-actions.js||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-actions.js",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-context-menu.js||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-context-menu.js",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-flow-version.js||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-flow-version.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java"
          ],
          "candidate": [
            "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java"
          ]
        }
      },
      "candidate_diff": {
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ComponentDifferenceDTO.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ComponentDifferenceDTO.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ComponentDifferenceDTO.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ComponentDifferenceDTO.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.nifi.web.api.dto;",
          "23: import javax.xml.bind.annotation.XmlType;",
          "27: @XmlType(name = \"componentDifference\")",
          "28: public class ComponentDifferenceDTO {",
          "",
          "[Removed Lines]",
          "20: import java.util.List;",
          "21: import java.util.Objects;",
          "25: import io.swagger.annotations.ApiModelProperty;",
          "",
          "[Added Lines]",
          "20: import io.swagger.annotations.ApiModelProperty;",
          "23: import java.util.List;",
          "24: import java.util.Objects;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:     private String componentId;",
          "31:     private String componentName;",
          "32:     private String processGroupId;",
          "35:     @ApiModelProperty(\"The type of component\")",
          "36:     public String getComponentType() {",
          "",
          "[Removed Lines]",
          "33:     private List<String> differences;",
          "",
          "[Added Lines]",
          "32:     private List<DifferenceDTO> differences;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:     }",
          "71:     @ApiModelProperty(\"The differences in the component between the two flows\")",
          "73:         return differences;",
          "74:     }",
          "77:         this.differences = differences;",
          "78:     }",
          "",
          "[Removed Lines]",
          "72:     public List<String> getDifferences() {",
          "76:     public void setDifferences(List<String> differences) {",
          "",
          "[Added Lines]",
          "71:     public List<DifferenceDTO> getDifferences() {",
          "75:     public void setDifferences(List<DifferenceDTO> differences) {",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/DifferenceDTO.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/DifferenceDTO.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/DifferenceDTO.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/DifferenceDTO.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.nifi.web.api.dto;",
          "20: import io.swagger.annotations.ApiModelProperty;",
          "22: import javax.xml.bind.annotation.XmlType;",
          "24: @XmlType(name = \"difference\")",
          "25: public class DifferenceDTO {",
          "26:     private String differenceType;",
          "27:     private String difference;",
          "29:     @ApiModelProperty(\"The type of difference\")",
          "30:     public String getDifferenceType() {",
          "31:         return differenceType;",
          "32:     }",
          "34:     public void setDifferenceType(String differenceType) {",
          "35:         this.differenceType = differenceType;",
          "36:     }",
          "38:     @ApiModelProperty(\"Description of the difference\")",
          "39:     public String getDifference() {",
          "40:         return difference;",
          "41:     }",
          "43:     public void setDifference(String difference) {",
          "44:         this.difference = difference;",
          "45:     }",
          "47: }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.nifi.web.api;",
          "70: import org.apache.commons.lang3.StringUtils;",
          "71: import org.apache.nifi.authorization.AuthorizableLookup;",
          "72: import org.apache.nifi.authorization.AuthorizeAccess;",
          "",
          "[Removed Lines]",
          "19: import java.io.IOException;",
          "20: import java.io.InputStream;",
          "21: import java.net.URI;",
          "22: import java.net.URISyntaxException;",
          "23: import java.util.Collection;",
          "24: import java.util.Collections;",
          "25: import java.util.Date;",
          "26: import java.util.HashMap;",
          "27: import java.util.List;",
          "28: import java.util.Map;",
          "29: import java.util.Set;",
          "30: import java.util.UUID;",
          "31: import java.util.concurrent.ArrayBlockingQueue;",
          "32: import java.util.concurrent.ConcurrentHashMap;",
          "33: import java.util.concurrent.ConcurrentMap;",
          "34: import java.util.concurrent.ExecutorService;",
          "35: import java.util.concurrent.Executors;",
          "36: import java.util.concurrent.ThreadFactory;",
          "37: import java.util.concurrent.ThreadPoolExecutor;",
          "38: import java.util.concurrent.TimeUnit;",
          "39: import java.util.concurrent.atomic.AtomicBoolean;",
          "40: import java.util.function.Consumer;",
          "41: import java.util.function.Function;",
          "42: import java.util.stream.Collectors;",
          "44: import javax.servlet.http.HttpServletRequest;",
          "45: import javax.ws.rs.Consumes;",
          "46: import javax.ws.rs.DELETE;",
          "47: import javax.ws.rs.DefaultValue;",
          "48: import javax.ws.rs.GET;",
          "49: import javax.ws.rs.HttpMethod;",
          "50: import javax.ws.rs.POST;",
          "51: import javax.ws.rs.PUT;",
          "52: import javax.ws.rs.Path;",
          "53: import javax.ws.rs.PathParam;",
          "54: import javax.ws.rs.Produces;",
          "55: import javax.ws.rs.QueryParam;",
          "56: import javax.ws.rs.core.Context;",
          "57: import javax.ws.rs.core.MediaType;",
          "58: import javax.ws.rs.core.MultivaluedHashMap;",
          "59: import javax.ws.rs.core.MultivaluedMap;",
          "60: import javax.ws.rs.core.Response;",
          "61: import javax.ws.rs.core.Response.Status;",
          "62: import javax.ws.rs.core.UriBuilder;",
          "63: import javax.ws.rs.core.UriInfo;",
          "64: import javax.xml.bind.JAXBContext;",
          "65: import javax.xml.bind.JAXBElement;",
          "66: import javax.xml.bind.JAXBException;",
          "67: import javax.xml.bind.Unmarshaller;",
          "68: import javax.xml.stream.XMLStreamReader;",
          "",
          "[Added Lines]",
          "19: import io.swagger.annotations.Api;",
          "20: import io.swagger.annotations.ApiOperation;",
          "21: import io.swagger.annotations.ApiParam;",
          "22: import io.swagger.annotations.ApiResponse;",
          "23: import io.swagger.annotations.ApiResponses;",
          "24: import io.swagger.annotations.Authorization;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156: import org.springframework.security.core.Authentication;",
          "157: import org.springframework.security.core.context.SecurityContextHolder;",
          "",
          "[Removed Lines]",
          "159: import io.swagger.annotations.Api;",
          "160: import io.swagger.annotations.ApiOperation;",
          "161: import io.swagger.annotations.ApiParam;",
          "162: import io.swagger.annotations.ApiResponse;",
          "163: import io.swagger.annotations.ApiResponses;",
          "164: import io.swagger.annotations.Authorization;",
          "",
          "[Added Lines]",
          "114: import javax.servlet.http.HttpServletRequest;",
          "115: import javax.ws.rs.Consumes;",
          "116: import javax.ws.rs.DELETE;",
          "117: import javax.ws.rs.DefaultValue;",
          "118: import javax.ws.rs.GET;",
          "119: import javax.ws.rs.HttpMethod;",
          "120: import javax.ws.rs.POST;",
          "121: import javax.ws.rs.PUT;",
          "122: import javax.ws.rs.Path;",
          "123: import javax.ws.rs.PathParam;",
          "124: import javax.ws.rs.Produces;",
          "125: import javax.ws.rs.QueryParam;",
          "126: import javax.ws.rs.core.Context;",
          "127: import javax.ws.rs.core.MediaType;",
          "128: import javax.ws.rs.core.MultivaluedHashMap;",
          "129: import javax.ws.rs.core.MultivaluedMap;",
          "130: import javax.ws.rs.core.Response;",
          "131: import javax.ws.rs.core.Response.Status;",
          "132: import javax.ws.rs.core.UriBuilder;",
          "133: import javax.ws.rs.core.UriInfo;",
          "134: import javax.xml.bind.JAXBContext;",
          "135: import javax.xml.bind.JAXBElement;",
          "136: import javax.xml.bind.JAXBException;",
          "137: import javax.xml.bind.Unmarshaller;",
          "138: import javax.xml.stream.XMLStreamReader;",
          "139: import java.io.IOException;",
          "140: import java.io.InputStream;",
          "141: import java.net.URI;",
          "142: import java.net.URISyntaxException;",
          "143: import java.util.Collection;",
          "144: import java.util.Collections;",
          "145: import java.util.Date;",
          "146: import java.util.HashMap;",
          "147: import java.util.List;",
          "148: import java.util.Map;",
          "149: import java.util.Set;",
          "150: import java.util.UUID;",
          "151: import java.util.concurrent.ArrayBlockingQueue;",
          "152: import java.util.concurrent.ConcurrentHashMap;",
          "153: import java.util.concurrent.ConcurrentMap;",
          "154: import java.util.concurrent.ExecutorService;",
          "155: import java.util.concurrent.Executors;",
          "156: import java.util.concurrent.ThreadFactory;",
          "157: import java.util.concurrent.ThreadPoolExecutor;",
          "158: import java.util.concurrent.TimeUnit;",
          "159: import java.util.concurrent.atomic.AtomicBoolean;",
          "160: import java.util.function.Consumer;",
          "161: import java.util.function.Function;",
          "162: import java.util.stream.Collectors;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "342:         serviceFacade.authorizeAccess(lookup -> {",
          "343:             final ProcessGroupAuthorizable groupAuthorizable = lookup.getProcessGroup(groupId);",
          "347:         });",
          "349:         final FlowComparisonEntity entity = serviceFacade.getLocalModifications(groupId);",
          "",
          "[Removed Lines]",
          "344:             final Authorizable processGroup = groupAuthorizable.getAuthorizable();",
          "345:             processGroup.authorize(authorizer, RequestAction.READ, NiFiUserUtils.getNiFiUser());",
          "346:             super.authorizeProcessGroup(groupAuthorizable, authorizer, lookup, RequestAction.READ, false, false, true, false);",
          "",
          "[Added Lines]",
          "342:             authorizeProcessGroup(groupAuthorizable, authorizer, lookup, RequestAction.READ, false, false, true, false);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1625:             }",
          "1626:         }",
          "1628:         if (requestProcessGroupEntity.getComponent().getParentGroupId() != null && !groupId.equals(requestProcessGroupEntity.getComponent().getParentGroupId())) {",
          "1629:             throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",",
          "1630:                     requestProcessGroupEntity.getComponent().getParentGroupId(), groupId));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1625:         if (StringUtils.isBlank(requestProcessGroupEntity.getComponent().getName()) && requestProcessGroupEntity.getComponent().getVersionControlInformation() == null) {",
          "1626:             throw new IllegalArgumentException(\"The group name is required when the group is not imported from version control.\");",
          "1627:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1688:                         serviceFacade.verifyComponentTypes(versionedFlowSnapshot.getFlowContents());",
          "1689:                     }",
          "1690:                 },",
          "1700:                     if (flowSnapshot != null) {",
          "1701:                         final RevisionDTO revisionDto = entity.getRevision();",
          "1702:                         final String newGroupId = entity.getComponent().getId();",
          "",
          "[Removed Lines]",
          "1691:                 processGroupGroupEntity -> {",
          "1693:                     processGroupGroupEntity.getComponent().setId(generateUuid());",
          "1696:                     final Revision revision = getRevision(processGroupGroupEntity, processGroupGroupEntity.getComponent().getId());",
          "1697:                     ProcessGroupEntity entity = serviceFacade.createProcessGroup(revision, groupId, processGroupGroupEntity.getComponent());",
          "1699:                     final VersionedFlowSnapshot flowSnapshot = requestProcessGroupEntity.getVersionedFlowSnapshot();",
          "",
          "[Added Lines]",
          "1692:                 processGroupEntity -> {",
          "1693:                     final ProcessGroupDTO processGroup = processGroupEntity.getComponent();",
          "1696:                     processGroup.setId(generateUuid());",
          "1699:                     final VersionedFlowSnapshot flowSnapshot = processGroupEntity.getVersionedFlowSnapshot();",
          "1700:                     if (flowSnapshot != null && StringUtils.isNotBlank(flowSnapshot.getFlowContents().getName()) && StringUtils.isBlank(processGroup.getName())) {",
          "1701:                         processGroup.setName(flowSnapshot.getFlowContents().getName());",
          "1702:                     }",
          "1705:                     final Revision revision = getRevision(processGroupEntity, processGroup.getId());",
          "1706:                     ProcessGroupEntity entity = serviceFacade.createProcessGroup(revision, groupId, processGroup);",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.nifi.web.api.dto;",
          "46: import org.apache.commons.lang3.ClassUtils;",
          "47: import org.apache.commons.lang3.StringUtils;",
          "48: import org.apache.nifi.action.Action;",
          "",
          "[Removed Lines]",
          "19: import java.text.Collator;",
          "20: import java.util.ArrayList;",
          "21: import java.util.Arrays;",
          "22: import java.util.Collection;",
          "23: import java.util.Collections;",
          "24: import java.util.Comparator;",
          "25: import java.util.Date;",
          "26: import java.util.HashMap;",
          "27: import java.util.HashSet;",
          "28: import java.util.Iterator;",
          "29: import java.util.LinkedHashMap;",
          "30: import java.util.LinkedHashSet;",
          "31: import java.util.List;",
          "32: import java.util.Locale;",
          "33: import java.util.Map;",
          "34: import java.util.Map.Entry;",
          "35: import java.util.Set;",
          "36: import java.util.TimeZone;",
          "37: import java.util.TreeMap;",
          "38: import java.util.TreeSet;",
          "39: import java.util.concurrent.TimeUnit;",
          "40: import java.util.function.Function;",
          "41: import java.util.function.Supplier;",
          "42: import java.util.stream.Collectors;",
          "44: import javax.ws.rs.WebApplicationException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215: import org.apache.nifi.web.controller.ControllerFacade;",
          "216: import org.apache.nifi.web.revision.RevisionManager;",
          "218: public final class DtoFactory {",
          "220:     @SuppressWarnings(\"rawtypes\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191: import javax.ws.rs.WebApplicationException;",
          "192: import java.text.Collator;",
          "193: import java.util.ArrayList;",
          "194: import java.util.Arrays;",
          "195: import java.util.Collection;",
          "196: import java.util.Collections;",
          "197: import java.util.Comparator;",
          "198: import java.util.Date;",
          "199: import java.util.HashMap;",
          "200: import java.util.HashSet;",
          "201: import java.util.Iterator;",
          "202: import java.util.LinkedHashMap;",
          "203: import java.util.LinkedHashSet;",
          "204: import java.util.List;",
          "205: import java.util.Locale;",
          "206: import java.util.Map;",
          "207: import java.util.Map.Entry;",
          "208: import java.util.Set;",
          "209: import java.util.TimeZone;",
          "210: import java.util.TreeMap;",
          "211: import java.util.TreeSet;",
          "212: import java.util.concurrent.TimeUnit;",
          "213: import java.util.function.Function;",
          "214: import java.util.function.Supplier;",
          "215: import java.util.stream.Collectors;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2183:     public Set<ComponentDifferenceDTO> createComponentDifferenceDtos(final FlowComparison comparison) {",
          "2186:         for (final FlowDifference difference : comparison.getDifferences()) {",
          "2187:             final ComponentDifferenceDTO componentDiff = createComponentDifference(difference);",
          "2190:         }",
          "2193:             entry.getKey().setDifferences(entry.getValue());",
          "2194:         }",
          "",
          "[Removed Lines]",
          "2184:         final Map<ComponentDifferenceDTO, List<String>> differencesByComponent = new HashMap<>();",
          "2188:             final List<String> differences = differencesByComponent.computeIfAbsent(componentDiff, key -> new ArrayList<>());",
          "2189:             differences.add(difference.getDescription());",
          "2192:         for (final Map.Entry<ComponentDifferenceDTO, List<String>> entry : differencesByComponent.entrySet()) {",
          "",
          "[Added Lines]",
          "2183:         final Map<ComponentDifferenceDTO, List<DifferenceDTO>> differencesByComponent = new HashMap<>();",
          "2187:             final List<DifferenceDTO> differences = differencesByComponent.computeIfAbsent(componentDiff, key -> new ArrayList<>());",
          "2189:             final DifferenceDTO dto = new DifferenceDTO();",
          "2190:             dto.setDifferenceType(difference.getDifferenceType().getDescription());",
          "2191:             dto.setDifference(difference.getDescription());",
          "2193:             differences.add(dto);",
          "2196:         for (final Map.Entry<ComponentDifferenceDTO, List<DifferenceDTO>> entry : differencesByComponent.entrySet()) {",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:         ProcessGroup group = flowController.createProcessGroup(processGroup.getId());",
          "65:         if (processGroup.getPosition() != null) {",
          "66:             group.setPosition(new Position(processGroup.getPosition().getX(), processGroup.getPosition().getY()));",
          "67:         }",
          "",
          "[Removed Lines]",
          "64:         group.setName(processGroup.getName());",
          "",
          "[Added Lines]",
          "64:         if (processGroup.getName() != null) {",
          "65:             group.setName(processGroup.getName());",
          "66:         }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/pages/canvas.jsp||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/pages/canvas.jsp": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/pages/canvas.jsp -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/pages/canvas.jsp",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:         <jsp:include page=\"/WEB-INF/partials/canvas/connections-dialog.jsp\"/>",
          "118:         <jsp:include page=\"/WEB-INF/partials/canvas/save-flow-version-dialog.jsp\"/>",
          "119:         <jsp:include page=\"/WEB-INF/partials/canvas/import-flow-version-dialog.jsp\"/>",
          "120:         <jsp:include page=\"/WEB-INF/partials/canvas/registry-configuration-dialog.jsp\"/>",
          "121:         <div id=\"canvas-container\" class=\"unselectable\"></div>",
          "122:         <div id=\"canvas-tooltips\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:         <jsp:include page=\"/WEB-INF/partials/canvas/revert-local-changes-dialog.jsp\"/>",
          "121:         <jsp:include page=\"/WEB-INF/partials/canvas/show-local-changes-dialog.jsp\"/>",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/partials/canvas/revert-local-changes-dialog.jsp||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/partials/canvas/revert-local-changes-dialog.jsp": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/partials/canvas/revert-local-changes-dialog.jsp -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/partials/canvas/revert-local-changes-dialog.jsp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <%--",
          "2:  Licensed to the Apache Software Foundation (ASF) under one or more",
          "3:   contributor license agreements.  See the NOTICE file distributed with",
          "4:   this work for additional information regarding copyright ownership.",
          "5:   The ASF licenses this file to You under the Apache License, Version 2.0",
          "6:   (the \"License\"); you may not use this file except in compliance with",
          "7:   the License.  You may obtain a copy of the License at",
          "9:       http://www.apache.org/licenses/LICENSE-2.0",
          "11:   Unless required by applicable law or agreed to in writing, software",
          "12:   distributed under the License is distributed on an \"AS IS\" BASIS,",
          "13:   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "14:   See the License for the specific language governing permissions and",
          "15:   limitations under the License.",
          "16: --%>",
          "17: <%@ page contentType=\"text/html\" pageEncoding=\"UTF-8\" session=\"false\" %>",
          "18: <div id=\"revert-local-changes-dialog\" layout=\"column\" class=\"hidden large-dialog\">",
          "19:     <div class=\"dialog-content\">",
          "20:         <div class=\"setting\">",
          "21:             <div class=\"setting-field\">",
          "22:                 Are you sure you want to revert changes? All flow configuration changes detailed below will be reverted to the last version.",
          "23:             </div>",
          "24:         </div>",
          "25:         <span id=\"revert-local-changes-process-group-id\" class=\"hidden\"></span>",
          "26:         <div id=\"revert-local-changes-filter-controls\">",
          "27:             <div id=\"revert-local-changes-filter-status\" class=\"filter-status\">",
          "28:                 Displaying&nbsp;<span id=\"displayed-revert-local-changes-entries\"></span>&nbsp;of&nbsp;<span id=\"total-revert-local-changes-entries\"></span>",
          "29:             </div>",
          "30:             <div id=\"revert-local-changes-filter-container\">",
          "31:                 <input type=\"text\" id=\"revert-local-changes-filter\" placeholder=\"Filter\"/>",
          "32:             </div>",
          "33:         </div>",
          "34:         <div id=\"revert-local-changes-table\"></div>",
          "35:     </div>",
          "36: </div>",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/partials/canvas/show-local-changes-dialog.jsp||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/partials/canvas/show-local-changes-dialog.jsp": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/partials/canvas/show-local-changes-dialog.jsp -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/partials/canvas/show-local-changes-dialog.jsp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <%--",
          "2:  Licensed to the Apache Software Foundation (ASF) under one or more",
          "3:   contributor license agreements.  See the NOTICE file distributed with",
          "4:   this work for additional information regarding copyright ownership.",
          "5:   The ASF licenses this file to You under the Apache License, Version 2.0",
          "6:   (the \"License\"); you may not use this file except in compliance with",
          "7:   the License.  You may obtain a copy of the License at",
          "9:       http://www.apache.org/licenses/LICENSE-2.0",
          "11:   Unless required by applicable law or agreed to in writing, software",
          "12:   distributed under the License is distributed on an \"AS IS\" BASIS,",
          "13:   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "14:   See the License for the specific language governing permissions and",
          "15:   limitations under the License.",
          "16: --%>",
          "17: <%@ page contentType=\"text/html\" pageEncoding=\"UTF-8\" session=\"false\" %>",
          "18: <div id=\"show-local-changes-dialog\" layout=\"column\" class=\"hidden large-dialog\">",
          "19:     <div class=\"dialog-content\">",
          "20:         <div class=\"setting\">",
          "21:             <div class=\"setting-field\">",
          "22:                 The following changes have been made to the flow since the last version.",
          "23:             </div>",
          "24:         </div>",
          "25:         <div id=\"show-local-changes-filter-controls\">",
          "26:             <div id=\"show-local-changes-filter-status\" class=\"filter-status\">",
          "27:                 Displaying&nbsp;<span id=\"displayed-show-local-changes-entries\"></span>&nbsp;of&nbsp;<span id=\"total-show-local-changes-entries\"></span>",
          "28:             </div>",
          "29:             <div id=\"show-local-changes-filter-container\">",
          "30:                 <input type=\"text\" id=\"show-local-changes-filter\" placeholder=\"Filter\"/>",
          "31:             </div>",
          "32:         </div>",
          "33:         <div id=\"show-local-changes-table\"></div>",
          "34:     </div>",
          "35: </div>",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/css/dialog.css||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/css/dialog.css": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/css/dialog.css -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/css/dialog.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:     border-radius: 0;",
          "264: }",
          "267:     Variable Registry",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "267:     Local changes",
          "270: #revert-local-changes-table, #show-local-changes-table {",
          "271:     position: absolute;",
          "272:     top: 80px;",
          "273:     left: 0px;",
          "274:     right: 0px;",
          "275:     bottom: 0px;",
          "276:     height: 225px;",
          "277: }",
          "279: #revert-local-changes-filter, #show-local-changes-filter {",
          "280:     width: 173px;",
          "281: }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/header/components/nf-ng-group-component.js||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/header/components/nf-ng-group-component.js": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/header/components/nf-ng-group-component.js -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/header/components/nf-ng-group-component.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:                 'nf.Graph',",
          "26:                 'nf.CanvasUtils',",
          "27:                 'nf.ErrorHandler',",
          "31:             });",
          "32:     } else if (typeof exports === 'object' && typeof module === 'object') {",
          "33:         module.exports = (nf.ng.GroupComponent =",
          "",
          "[Removed Lines]",
          "28:                 'nf.Common'],",
          "29:             function ($, nfClient, nfBirdseye, nfGraph, nfCanvasUtils, nfErrorHandler, nfCommon) {",
          "30:                 return (nf.ng.GroupComponent = factory($, nfClient, nfBirdseye, nfGraph, nfCanvasUtils, nfErrorHandler, nfCommon));",
          "",
          "[Added Lines]",
          "28:                 'nf.Common',",
          "29:                 'nf.Dialog'],",
          "30:             function ($, nfClient, nfBirdseye, nfGraph, nfCanvasUtils, nfErrorHandler, nfCommon, nfDialog) {",
          "31:                 return (nf.ng.GroupComponent = factory($, nfClient, nfBirdseye, nfGraph, nfCanvasUtils, nfErrorHandler, nfCommon, nfDialog));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:                 require('nf.Graph'),",
          "38:                 require('nf.CanvasUtils'),",
          "39:                 require('nf.ErrorHandler'),",
          "41:     } else {",
          "42:         nf.ng.GroupComponent = factory(root.$,",
          "43:             root.nf.Client,",
          "",
          "[Removed Lines]",
          "40:                 require('nf.Common')));",
          "",
          "[Added Lines]",
          "41:                 require('nf.Common'),",
          "42:                 require('nf.Dialog')));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:             root.nf.Graph,",
          "46:             root.nf.CanvasUtils,",
          "47:             root.nf.ErrorHandler,",
          "49:     }",
          "51:     'use strict';",
          "53:     return function (serviceProvider) {",
          "",
          "[Removed Lines]",
          "48:             root.nf.Common);",
          "50: }(this, function ($, nfClient, nfBirdseye, nfGraph, nfCanvasUtils, nfErrorHandler, nfCommon) {",
          "",
          "[Added Lines]",
          "50:             root.nf.Common,",
          "51:             root.nf.Dialog);",
          "53: }(this, function ($, nfClient, nfBirdseye, nfGraph, nfCanvasUtils, nfErrorHandler, nfCommon, nfDialog) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "237:                         groupComponent.modal.hide();",
          "243:                             deferred.reject();",
          "245:                     };",
          "247:                     groupComponent.modal.update('setButtonModel', [{",
          "",
          "[Removed Lines]",
          "240:                         createGroup(groupName, pt).done(function (response) {",
          "241:                             deferred.resolve(response.component);",
          "242:                         }).fail(function () {",
          "244:                         });",
          "",
          "[Added Lines]",
          "243:                         if (nfCommon.isBlank(groupName)) {",
          "244:                             nfDialog.showOkDialog({",
          "245:                                 headerText: 'Create Process Group',",
          "246:                                 dialogContent: 'The group name is required.'",
          "247:                             });",
          "250:                         } else {",
          "252:                             createGroup(groupName, pt).done(function (response) {",
          "253:                                 deferred.resolve(response.component);",
          "254:                             }).fail(function () {",
          "255:                                 deferred.reject();",
          "256:                             });",
          "257:                         }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-actions.js||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-actions.js": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-actions.js -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-actions.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1265:             }",
          "1266:         },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1271:         showLocalChanges: function (selection) {",
          "1272:             if (selection.empty()) {",
          "1273:                 nfFlowVersion.showLocalChanges(nfCanvasUtils.getGroupId());",
          "1274:             } else if (selection.size() === 1) {",
          "1275:                 var selectionData = selection.datum();",
          "1276:                 nfFlowVersion.showLocalChanges(selectionData.id)",
          "1277:             }",
          "1278:         },",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-context-menu.js||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-context-menu.js": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-context-menu.js -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-context-menu.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "427:         return nfCommon.isUndefinedOrNull(processGroupData.component.versionControlInformation);",
          "428:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436:     var supportsCommitFlowVersion = function (selection) {",
          "438:         if (supportsFlowVersioning(selection) === false) {",
          "439:             return false;",
          "440:         }",
          "442:         var versionControlInformation;",
          "443:         if (selection.empty()) {",
          "445:             var breadcrumbEntities = nfNgBridge.injector.get('breadcrumbsCtrl').getBreadcrumbs();",
          "446:             if (breadcrumbEntities.length > 0) {",
          "447:                 var breadcrumbEntity = breadcrumbEntities[breadcrumbEntities.length - 1];",
          "448:                 if (breadcrumbEntity.permissions.canRead) {",
          "449:                     versionControlInformation = breadcrumbEntity.breadcrumb.versionControlInformation;",
          "450:                 } else {",
          "451:                     return false;",
          "452:                 }",
          "453:             } else {",
          "454:                 return false;",
          "455:             }",
          "456:         } else {",
          "457:             var processGroupData = selection.datum();",
          "458:             versionControlInformation = processGroupData.component.versionControlInformation;",
          "459:         }",
          "461:         if (nfCommon.isUndefinedOrNull(versionControlInformation)) {",
          "462:             return false;",
          "463:         }",
          "466:         return versionControlInformation.current === true && versionControlInformation.modified === true;",
          "467:     };",
          "475:     var hasLocalChanges = function (selection) {",
          "477:         if (supportsFlowVersioning(selection) === false) {",
          "478:             return false;",
          "479:         }",
          "481:         var versionControlInformation;",
          "482:         if (selection.empty()) {",
          "484:             var breadcrumbEntities = nfNgBridge.injector.get('breadcrumbsCtrl').getBreadcrumbs();",
          "485:             if (breadcrumbEntities.length > 0) {",
          "486:                 var breadcrumbEntity = breadcrumbEntities[breadcrumbEntities.length - 1];",
          "487:                 if (breadcrumbEntity.permissions.canRead) {",
          "488:                     versionControlInformation = breadcrumbEntity.breadcrumb.versionControlInformation;",
          "489:                 } else {",
          "490:                     return false;",
          "491:                 }",
          "492:             } else {",
          "493:                 return false;",
          "494:             }",
          "495:         } else {",
          "496:             var processGroupData = selection.datum();",
          "497:             versionControlInformation = processGroupData.component.versionControlInformation;",
          "498:         }",
          "500:         if (nfCommon.isUndefinedOrNull(versionControlInformation)) {",
          "501:             return false;",
          "502:         }",
          "505:         return versionControlInformation.modified === true;",
          "506:     };",
          "514:     var supportsChangeFlowVersion = function (selection) {",
          "516:         if (supportsFlowVersioning(selection) === false) {",
          "517:             return false;",
          "518:         }",
          "520:         var versionControlInformation;",
          "521:         if (selection.empty()) {",
          "523:             var breadcrumbEntities = nfNgBridge.injector.get('breadcrumbsCtrl').getBreadcrumbs();",
          "524:             if (breadcrumbEntities.length > 0) {",
          "525:                 var breadcrumbEntity = breadcrumbEntities[breadcrumbEntities.length - 1];",
          "526:                 if (breadcrumbEntity.permissions.canRead) {",
          "527:                     versionControlInformation = breadcrumbEntity.breadcrumb.versionControlInformation;",
          "528:                 } else {",
          "529:                     return false;",
          "530:                 }",
          "531:             } else {",
          "532:                 return false;",
          "533:             }",
          "534:         } else {",
          "535:             var processGroupData = selection.datum();",
          "536:             versionControlInformation = processGroupData.component.versionControlInformation;",
          "537:         }",
          "539:         if (nfCommon.isUndefinedOrNull(versionControlInformation)) {",
          "540:             return false;",
          "541:         }",
          "544:         return versionControlInformation.modified === false;",
          "545:     };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "640:         {id: 'version-menu-item', groupMenuItem: {clazz: 'fa', text: 'Version'}, menuItems: [",
          "641:             {id: 'start-version-control-menu-item', condition: supportsStartFlowVersioning, menuItem: {clazz: 'fa fa-upload', text: 'Start version control', action: 'saveFlowVersion'}},",
          "642:             {separator: true},",
          "646:             {separator: true},",
          "647:             {id: 'stop-version-control-menu-item', condition: supportsStopFlowVersioning, menuItem: {clazz: 'fa', text: 'Stop version control', action: 'stopVersionControl'}}",
          "648:         ]},",
          "",
          "[Removed Lines]",
          "643:             {id: 'commit-menu-item', condition: supportsStopFlowVersioning, menuItem: {clazz: 'fa fa-upload', text: 'Commit local changes', action: 'saveFlowVersion'}},",
          "644:             {id: 'revert-menu-item', condition: supportsStopFlowVersioning, menuItem: {clazz: 'fa fa-undo', text: 'Revert local changes', action: 'revertLocalChanges'}},",
          "645:             {id: 'change-version-menu-item', condition: supportsStopFlowVersioning, menuItem: {clazz: 'fa', text: 'Change version', action: 'changeFlowVersion'}},",
          "",
          "[Added Lines]",
          "760:             {id: 'commit-menu-item', condition: supportsCommitFlowVersion, menuItem: {clazz: 'fa fa-upload', text: 'Commit local changes', action: 'saveFlowVersion'}},",
          "761:             {id: 'local-changes-menu-item', condition: hasLocalChanges, menuItem: {clazz: 'fa', text: 'Show local changes', action: 'showLocalChanges'}},",
          "762:             {id: 'revert-menu-item', condition: hasLocalChanges, menuItem: {clazz: 'fa fa-undo', text: 'Revert local changes', action: 'revertLocalChanges'}},",
          "763:             {id: 'change-version-menu-item', condition: supportsChangeFlowVersion, menuItem: {clazz: 'fa', text: 'Change version', action: 'changeFlowVersion'}},",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-flow-version.js||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-flow-version.js": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-flow-version.js -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-flow-version.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:                 'nf.Client',",
          "31:                 'nf.CanvasUtils',",
          "32:                 'nf.ProcessGroup',",
          "33:                 'nf.Graph',",
          "34:                 'nf.Birdseye'],",
          "37:             });",
          "38:     } else if (typeof exports === 'object' && typeof module === 'object') {",
          "39:         module.exports = (nf.FlowVerison =",
          "",
          "[Removed Lines]",
          "35:             function ($, nfNgBridge, nfErrorHandler, nfDialog, nfCommon, nfClient, nfCanvasUtils, nfProcessGroup, nfGraph, nfBirdseye) {",
          "36:                 return (nf.FlowVersion = factory($, nfNgBridge, nfErrorHandler, nfDialog, nfCommon, nfClient, nfCanvasUtils, nfProcessGroup, nfGraph, nfBirdseye));",
          "",
          "[Added Lines]",
          "33:                 'nf.ProcessGroupConfiguration',",
          "36:             function ($, nfNgBridge, nfErrorHandler, nfDialog, nfCommon, nfClient, nfCanvasUtils, nfProcessGroup, nfProcessGroupConfiguration, nfGraph, nfBirdseye) {",
          "37:                 return (nf.FlowVersion = factory($, nfNgBridge, nfErrorHandler, nfDialog, nfCommon, nfClient, nfCanvasUtils, nfProcessGroup, nfProcessGroupConfiguration, nfGraph, nfBirdseye));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:                 require('nf.Client'),",
          "46:                 require('nf.CanvasUtils'),",
          "47:                 require('nf.ProcessGroup'),",
          "48:                 require('nf.Graph'),",
          "49:                 require('nf.Birdseye')));",
          "50:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:                 require('nf.ProcessGroupConfiguration'),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:             root.nf.Client,",
          "57:             root.nf.CanvasUtils,",
          "58:             root.nf.ProcessGroup,",
          "59:             root.nf.Graph,",
          "60:             root.nf.Birdseye);",
          "61:     }",
          "63:     'use strict';",
          "65:     var serverTimeOffset = null;",
          "",
          "[Removed Lines]",
          "62: }(this, function ($, nfNgBridge, nfErrorHandler, nfDialog, nfCommon, nfClient, nfCanvasUtils, nfProcessGroup, nfGraph, nfBirdseye) {",
          "",
          "[Added Lines]",
          "61:             root.nf.ProcessGroupConfiguration,",
          "65: }(this, function ($, nfNgBridge, nfErrorHandler, nfDialog, nfCommon, nfClient, nfCanvasUtils, nfProcessGroup, nfProcessGroupConfiguration, nfGraph, nfBirdseye) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "96:         $('#save-flow-version-process-group-id').removeData('versionControlInformation').removeData('revision').text('');",
          "97:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     var resetRevertLocalChangesDialog = function () {",
          "106:         $('#revert-local-changes-process-group-id').text('');",
          "108:         clearLocalChangesGrid($('#revert-local-changes-table'), $('#revert-local-changes-filter'), $('#displayed-revert-local-changes-entries'), $('#total-revert-local-changes-entries'));",
          "109:     };",
          "114:     var resetShowLocalChangesDialog = function () {",
          "115:         clearLocalChangesGrid($('#show-local-changes-table'), $('#show-local-changes-filter'), $('#displayed-show-local-changes-entries'), $('#total-show-local-changes-entries'));",
          "116:     };",
          "121:     var clearLocalChangesGrid = function (localChangesTable, filterInput, displayedLabel, totalLabel) {",
          "122:         var localChangesGrid = localChangesTable.data('gridInstance');",
          "123:         if (nfCommon.isDefinedAndNotNull(localChangesGrid)) {",
          "124:             localChangesGrid.setSelectedRows([]);",
          "125:             localChangesGrid.resetActiveCell();",
          "127:             var localChangesData = localChangesGrid.getData();",
          "128:             localChangesData.setItems([]);",
          "129:         }",
          "131:         filterInput.val('');",
          "133:         displayedLabel.text('0');",
          "134:         totalLabel.text('0');",
          "135:     }",
          "140:     var clearFlowVersionsGrid = function () {",
          "141:         var importFlowVersionGrid = $('#import-flow-version-table').data('gridInstance');",
          "142:         if (nfCommon.isDefinedAndNotNull(importFlowVersionGrid)) {",
          "143:             importFlowVersionGrid.setSelectedRows([]);",
          "144:             importFlowVersionGrid.resetActiveCell();",
          "146:             var importFlowVersionData = importFlowVersionGrid.getData();",
          "147:             importFlowVersionData.setItems([]);",
          "148:         }",
          "149:     };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "110:         $('#import-flow-version-bucket').text('').hide();",
          "111:         $('#import-flow-version-name').text('').hide();",
          "122:         $('#import-flow-version-process-group-id').removeData('versionControlInformation').removeData('revision').text('');",
          "",
          "[Removed Lines]",
          "113:         var importFlowVersionGrid = $('#import-flow-version-table').data('gridInstance');",
          "114:         if (nfCommon.isDefinedAndNotNull(importFlowVersionGrid)) {",
          "115:             importFlowVersionGrid.setSelectedRows([]);",
          "116:             importFlowVersionGrid.resetActiveCell();",
          "118:             var importFlowVersionData = importFlowVersionGrid.getData();",
          "119:             importFlowVersionData.setItems([]);",
          "120:         }",
          "",
          "[Added Lines]",
          "165:         clearFlowVersionsGrid();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "137:         return $.ajax({",
          "138:             type: 'GET',",
          "139:             url: '../nifi-api/flow/registries',",
          "",
          "[Removed Lines]",
          "136:     var loadRegistries = function (dialog, registryCombo, bucketCombo, selectBucket) {",
          "",
          "[Added Lines]",
          "182:     var loadRegistries = function (dialog, registryCombo, bucketCombo, flowCombo, selectBucket) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "167:             registryCombo.combo({",
          "168:                 options: registries,",
          "169:                 select: function (selectedOption) {",
          "171:                 }",
          "172:             });",
          "173:         }).fail(nfErrorHandler.handleAjaxError);",
          "",
          "[Removed Lines]",
          "170:                     selectRegistry(dialog, selectedOption, bucketCombo, selectBucket)",
          "",
          "[Added Lines]",
          "216:                     selectRegistry(dialog, selectedOption, bucketCombo, flowCombo, selectBucket)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "230:         var showNoBucketsAvailable = function () {",
          "231:             bucketCombo.combo('destroy').combo({",
          "232:                 options: [{",
          "",
          "[Removed Lines]",
          "229:     var selectRegistry = function (dialog, selectedOption, bucketCombo, selectBucket) {",
          "",
          "[Added Lines]",
          "277:     var selectRegistry = function (dialog, selectedOption, bucketCombo, flowCombo, selectBucket) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "243:         if (selectedOption.disabled === true) {",
          "244:             showNoBucketsAvailable();",
          "245:         } else {",
          "246:             loadBuckets(selectedOption.value, bucketCombo, selectBucket).fail(function () {",
          "247:                 showNoBucketsAvailable();",
          "248:             });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294:             bucketCombo.combo('destroy').combo({",
          "295:                 options: [{",
          "296:                     text: 'Loading buckets...',",
          "297:                     value: null,",
          "298:                     optionClass: 'unset',",
          "299:                     disabled: true",
          "300:                 }]",
          "301:             });",
          "303:             if (nfCommon.isDefinedAndNotNull(flowCombo)) {",
          "304:                 flowCombo.combo('destroy').combo({",
          "305:                     options: [{",
          "306:                         text: 'Loading flows...',",
          "307:                         value: null,",
          "308:                         optionClass: 'unset',",
          "309:                         disabled: true",
          "310:                     }]",
          "311:                 });",
          "313:                 clearFlowVersionsGrid();",
          "314:             }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "426:         importFlowVersionTable.data('gridInstance', importFlowVersionGrid);",
          "427:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "507:     var initLocalChangesTable = function (localChangesTable, filterInput, displayedLabel, totalLabel) {",
          "509:         var getFilterText = function () {",
          "510:             return filterInput.val();",
          "511:         };",
          "513:         var applyFilter = function () {",
          "515:             var localChangesGrid = localChangesTable.data('gridInstance');",
          "518:             if (nfCommon.isDefinedAndNotNull(localChangesGrid)) {",
          "519:                 var localChangesData = localChangesGrid.getData();",
          "522:                 localChangesData.setFilterArgs({",
          "523:                     searchString: getFilterText()",
          "524:                 });",
          "525:                 localChangesData.refresh();",
          "526:             }",
          "527:         };",
          "529:         var filter = function (item, args) {",
          "530:             if (args.searchString === '') {",
          "531:                 return true;",
          "532:             }",
          "534:             try {",
          "536:                 var filterExp = new RegExp(args.searchString, 'i');",
          "537:             } catch (e) {",
          "539:                 return false;",
          "540:             }",
          "543:             var matchesId = item['componentId'].search(filterExp) >= 0;",
          "544:             var matchesComponent = item['componentName'].search(filterExp) >= 0;",
          "545:             var matchesDifferenceType = item['differenceType'].search(filterExp) >= 0;",
          "546:             var matchesDifference = item['difference'].search(filterExp) >= 0;",
          "548:             return matchesId || matchesComponent || matchesDifferenceType || matchesDifference;",
          "549:         };",
          "552:         filterInput.on('keyup', function () {",
          "553:             applyFilter();",
          "554:         });",
          "556:         var valueFormatter = function (row, cell, value, columnDef, dataContext) {",
          "557:             return nfCommon.escapeHtml(value);",
          "558:         };",
          "560:         var actionsFormatter = function (row, cell, value, columnDef, dataContext) {",
          "561:             var markup = '';",
          "563:             if (dataContext.differenceType !== 'Component Removed' && nfCommon.isDefinedAndNotNull(dataContext.processGroupId)) {",
          "564:                 markup += '<div class=\"pointer go-to-component fa fa-long-arrow-right\" title=\"Go To\" style=\"margin-top: 2px\" ></div>';",
          "565:             }",
          "567:             return markup;",
          "568:         };",
          "571:         var localChangesColumns = [",
          "572:             {",
          "573:                 id: 'component',",
          "574:                 name: 'Component Name',",
          "575:                 field: 'componentName',",
          "576:                 formatter: valueFormatter,",
          "577:                 sortable: true,",
          "578:                 resizable: true",
          "579:             },",
          "580:             {",
          "581:                 id: 'differenceType',",
          "582:                 name: 'Type',",
          "583:                 field: 'differenceType',",
          "584:                 formatter: valueFormatter,",
          "585:                 sortable: true,",
          "586:                 resizable: true",
          "587:             },",
          "588:             {",
          "589:                 id: 'difference',",
          "590:                 name: 'Difference',",
          "591:                 field: 'difference',",
          "592:                 formatter: valueFormatter,",
          "593:                 sortable: true,",
          "594:                 resizable: true,",
          "595:                 minWidth: 300",
          "596:             },",
          "597:             {",
          "598:                 id: 'actions',",
          "599:                 name: '&nbsp;',",
          "600:                 formatter: actionsFormatter,",
          "601:                 sortable: false,",
          "602:                 resizable: false,",
          "603:                 width: 25",
          "604:             }",
          "605:         ];",
          "608:         var localChangesData = new Slick.Data.DataView({",
          "609:             inlineFilters: false",
          "610:         });",
          "611:         localChangesData.setFilterArgs({",
          "612:             searchString: '',",
          "613:             property: 'component'",
          "614:         });",
          "615:         localChangesData.setFilter(filter);",
          "618:         sort({",
          "619:             columnId: 'version',",
          "620:             sortAsc: false",
          "621:         }, localChangesData);",
          "624:         var localChangesGrid = new Slick.Grid(localChangesTable, localChangesData, localChangesColumns, gridOptions);",
          "625:         localChangesGrid.setSelectionModel(new Slick.RowSelectionModel());",
          "626:         localChangesGrid.registerPlugin(new Slick.AutoTooltips());",
          "627:         localChangesGrid.setSortColumn('version', false);",
          "628:         localChangesGrid.onSort.subscribe(function (e, args) {",
          "629:             sort({",
          "630:                 columnId: args.sortCol.id,",
          "631:                 sortAsc: args.sortAsc",
          "632:             }, localChangesData);",
          "633:         });",
          "636:         localChangesGrid.onClick.subscribe(function (e, args) {",
          "637:             var target = $(e.target);",
          "640:             var componentDifference = localChangesData.getItem(args.row);",
          "643:             if (localChangesGrid.getColumns()[args.cell].id === 'actions') {",
          "644:                 if (target.hasClass('go-to-component')) {",
          "645:                     if (componentDifference.componentType === 'Controller Service') {",
          "646:                         nfProcessGroupConfiguration.showConfiguration(componentDifference.processGroupId).done(function () {",
          "647:                             nfProcessGroupConfiguration.selectControllerService(componentDifference.componentId);",
          "648:                         });",
          "649:                     } else {",
          "650:                         nfCanvasUtils.showComponent(componentDifference.processGroupId, componentDifference.componentId);",
          "651:                     }",
          "652:                 }",
          "653:             }",
          "654:         });",
          "657:         localChangesData.onRowCountChanged.subscribe(function (e, args) {",
          "658:             localChangesGrid.updateRowCount();",
          "659:             localChangesGrid.render();",
          "662:             displayedLabel.text(nfCommon.formatInteger(args.current));",
          "663:         });",
          "664:         localChangesData.onRowsChanged.subscribe(function (e, args) {",
          "665:             localChangesGrid.invalidateRows(args.rows);",
          "666:             localChangesGrid.render();",
          "667:         });",
          "668:         localChangesData.syncGridSelection(localChangesGrid, true);",
          "671:         localChangesTable.data('gridInstance', localChangesGrid);",
          "674:         displayedLabel.text('0');",
          "675:         totalLabel.text('0');",
          "676:     };",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "450:                 disabled: true",
          "451:             }]",
          "452:         }).show();",
          "454:             options: [{",
          "455:                 text: 'Loading flows...',",
          "456:                 value: null,",
          "",
          "[Removed Lines]",
          "453:         $('#import-flow-version-name-combo').combo('destroy').combo({",
          "",
          "[Added Lines]",
          "702:         var flowCombo = $('#import-flow-version-name-combo').combo('destroy').combo({",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "459:             }]",
          "460:         }).show();",
          "464:             $('#import-flow-version-dialog').modal('setHeaderText', 'Import Version').modal('setButtonModel', [{",
          "465:                 buttonText: 'Import',",
          "",
          "[Removed Lines]",
          "462:         loadRegistries($('#import-flow-version-dialog'), registryCombo, bucketCombo, selectBucketImportVersion).done(function () {",
          "",
          "[Added Lines]",
          "711:         loadRegistries($('#import-flow-version-dialog'), registryCombo, bucketCombo, flowCombo, selectBucketImportVersion).done(function () {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "621:     var selectBucketImportVersion = function (selectedBucket) {",
          "622:         var selectedRegistry = $('#import-flow-version-registry-combo').combo('getSelectedOption');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "872:         $('#import-flow-version-name-combo').combo('destroy').combo({",
          "873:             options: [{",
          "874:                 text: 'Loading flows...',",
          "875:                 value: null,",
          "876:                 optionClass: 'unset',",
          "877:                 disabled: true",
          "878:             }]",
          "879:         });",
          "882:         clearFlowVersionsGrid();",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "646:                 }",
          "647:             }),",
          "648:             'component': {",
          "650:                 'position': {",
          "651:                     'x': pt.x,",
          "652:                     'y': pt.y",
          "",
          "[Removed Lines]",
          "649:                 'name': selectedFlow.text, // TODO - name from versioned PG?",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "966:         progressBar.append(label);",
          "967:     };",
          "969:     return {",
          "970:         init: function (timeOffset) {",
          "971:             serverTimeOffset = timeOffset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1237:     var loadLocalChanges = function (processGroupId, localChangesTable, totalLabel) {",
          "1238:         var localChangesGrid = localChangesTable.data('gridInstance');",
          "1239:         var localChangesData = localChangesGrid.getData();",
          "1242:         localChangesData.beginUpdate();",
          "1245:         localChangesGrid.setSelectedRows([]);",
          "1246:         localChangesGrid.resetActiveCell();",
          "1247:         localChangesData.setItems([]);",
          "1249:         return $.ajax({",
          "1250:             type: 'GET',",
          "1251:             url: '../nifi-api/process-groups/' + encodeURIComponent(processGroupId) + '/local-modifications',",
          "1252:             dataType: 'json'",
          "1253:         }).done(function (response) {",
          "1254:             if (nfCommon.isDefinedAndNotNull(response.componentDifferences) && response.componentDifferences.length > 0) {",
          "1255:                 var totalDifferences = 0;",
          "1256:                 $.each(response.componentDifferences, function (_, componentDifference) {",
          "1257:                     $.each(componentDifference.differences, function (_, difference) {",
          "1258:                         localChangesData.addItem({",
          "1259:                             id: totalDifferences++,",
          "1260:                             componentId: componentDifference.componentId,",
          "1261:                             componentName: componentDifference.componentName,",
          "1262:                             componentType: componentDifference.componentType,",
          "1263:                             processGroupId: componentDifference.processGroupId,",
          "1264:                             differenceType: difference.differenceType,",
          "1265:                             difference: difference.difference",
          "1266:                         });",
          "1267:                     });",
          "1268:                 });",
          "1271:                 localChangesData.endUpdate();",
          "1274:                 localChangesData.reSort();",
          "1275:                 localChangesGrid.invalidate();",
          "1278:                 totalLabel.text(nfCommon.formatInteger(totalDifferences));",
          "1279:             } else {",
          "1280:                 nfDialog.showOkDialog({",
          "1281:                     headerText: 'Local Changes',",
          "1282:                     dialogContent: 'This Process Group does not have any local changes.'",
          "1283:                 });",
          "1284:             }",
          "1285:         }).fail(nfErrorHandler.handleAjaxError);",
          "1286:     };",
          "1293:     var revertLocalChanges = function (processGroupId) {",
          "1294:         getVersionControlInformation(processGroupId).done(function (response) {",
          "1295:             if (nfCommon.isDefinedAndNotNull(response.versionControlInformation)) {",
          "1296:                 var revertTimer = null;",
          "1297:                 var revertRequest = null;",
          "1298:                 var cancelled = false;",
          "1301:                 $('#change-version-status-dialog').modal('setButtonModel', [{",
          "1302:                     buttonText: 'Stop',",
          "1303:                     color: {",
          "1304:                         base: '#728E9B',",
          "1305:                         hover: '#004849',",
          "1306:                         text: '#ffffff'",
          "1307:                     },",
          "1308:                     handler: {",
          "1309:                         click: function () {",
          "1310:                             cancelled = true;",
          "1312:                             $('#change-version-status-dialog').modal('setButtonModel', []);",
          "1315:                             if (revertTimer !== null) {",
          "1317:                                 clearTimeout(revertTimer);",
          "1320:                                 completeRevertRequest();",
          "1321:                             }",
          "1322:                         }",
          "1323:                     }",
          "1324:                 }]);",
          "1327:                 $('#import-flow-version-dialog').modal('hide');",
          "1329:                 var submitRevertRequest = function () {",
          "1330:                     var revertFlowVersionRequest = {",
          "1331:                         'processGroupRevision': nfClient.getRevision({",
          "1332:                             'revision': {",
          "1333:                                 'version': response.processGroupRevision.version",
          "1334:                             }",
          "1335:                         }),",
          "1336:                         'versionControlInformation': response.versionControlInformation",
          "1337:                     };",
          "1339:                     return $.ajax({",
          "1340:                         type: 'POST',",
          "1341:                         data: JSON.stringify(revertFlowVersionRequest),",
          "1342:                         url: '../nifi-api/versions/revert-requests/process-groups/' + encodeURIComponent(processGroupId),",
          "1343:                         dataType: 'json',",
          "1344:                         contentType: 'application/json'",
          "1345:                     }).done(function () {",
          "1347:                         updateProgress(0);",
          "1350:                         $('#change-version-status-dialog').modal('show');",
          "1351:                     }).fail(nfErrorHandler.handleAjaxError);",
          "1352:                 };",
          "1354:                 var pollRevertRequest = function () {",
          "1355:                     getRevertRequest().done(processRevertResponse);",
          "1356:                 };",
          "1358:                 var getRevertRequest = function () {",
          "1359:                     return $.ajax({",
          "1360:                         type: 'GET',",
          "1361:                         url: revertRequest.uri,",
          "1362:                         dataType: 'json'",
          "1363:                     }).fail(completeRevertRequest).fail(nfErrorHandler.handleAjaxError);",
          "1364:                 };",
          "1366:                 var completeRevertRequest = function () {",
          "1367:                     if (cancelled === true) {",
          "1369:                         $('#change-version-status-message').text('The revert request has been cancelled.');",
          "1372:                         $('#change-version-status-dialog').modal('setButtonModel', [{",
          "1373:                             buttonText: 'Close',",
          "1374:                             color: {",
          "1375:                                 base: '#728E9B',",
          "1376:                                 hover: '#004849',",
          "1377:                                 text: '#ffffff'",
          "1378:                             },",
          "1379:                             handler: {",
          "1380:                                 click: function () {",
          "1381:                                     $(this).modal('hide');",
          "1382:                                 }",
          "1383:                             }",
          "1384:                         }]);",
          "1385:                     }",
          "1387:                     if (nfCommon.isDefinedAndNotNull(revertRequest)) {",
          "1388:                         $.ajax({",
          "1389:                             type: 'DELETE',",
          "1390:                             url: revertRequest.uri,",
          "1391:                             dataType: 'json'",
          "1392:                         }).done(function (response) {",
          "1393:                             revertRequest = response.request;",
          "1396:                             updateProcessGroup(processGroupId);",
          "1398:                             if (nfCommon.isDefinedAndNotNull(revertRequest.failureReason)) {",
          "1400:                                 $('#change-version-status-dialog').modal('hide');",
          "1402:                                 nfDialog.showOkDialog({",
          "1403:                                     headerText: 'Revert Local Changes',",
          "1404:                                     dialogContent: nfCommon.escapeHtml(changeRequest.failureReason)",
          "1405:                                 });",
          "1406:                             } else {",
          "1408:                                 updateProgress(revertRequest.percentCompleted);",
          "1411:                                 $('#change-version-status-message').text('This Process Group version has changed.');",
          "1414:                                 $('#change-version-status-dialog').modal('setButtonModel', [{",
          "1415:                                     buttonText: 'Close',",
          "1416:                                     color: {",
          "1417:                                         base: '#728E9B',",
          "1418:                                         hover: '#004849',",
          "1419:                                         text: '#ffffff'",
          "1420:                                     },",
          "1421:                                     handler: {",
          "1422:                                         click: function () {",
          "1423:                                             $(this).modal('hide');",
          "1424:                                         }",
          "1425:                                     }",
          "1426:                                 }]);",
          "1427:                             }",
          "1428:                         });",
          "1429:                     }",
          "1430:                 };",
          "1432:                 var processRevertResponse = function (response) {",
          "1433:                     revertRequest = response.request;",
          "1435:                     if (revertRequest.complete === true || cancelled === true) {",
          "1436:                         completeRevertRequest();",
          "1437:                     } else {",
          "1439:                         updateProgress(revertRequest.percentCompleted);",
          "1442:                         $('#change-version-status-message').text(revertRequest.state);",
          "1444:                         revertTimer = setTimeout(function () {",
          "1446:                             revertTimer = null;",
          "1449:                             pollRevertRequest();",
          "1450:                         }, 2000);",
          "1451:                     }",
          "1452:                 };",
          "1454:                 submitRevertRequest().done(processRevertResponse);",
          "1455:             } else {",
          "1456:                 nfDialog.showOkDialog({",
          "1457:                     headerText: 'Revert Changes',",
          "1458:                     dialogContent: 'This Process Group is not currently under version control.'",
          "1459:                 });",
          "1460:             }",
          "1461:         }).fail(nfErrorHandler.handleAjaxError);",
          "1462:     };",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "998:                     handler: {",
          "999:                         click: function () {",
          "1000:                             var processGroupId = $('#save-flow-version-process-group-id').text();",
          "1002:                             saveFlowVersion().done(function (response) {",
          "1003:                                 updateVersionControlInformation(processGroupId, response.versionControlInformation);",
          "1007:                             });",
          "1008:                         }",
          "1009:                     }",
          "1010:                 }, {",
          "",
          "[Removed Lines]",
          "1006:                                 $('#save-flow-version-dialog').modal('hide');",
          "",
          "[Added Lines]",
          "1500:                             $(this).modal('hide');",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1049:                 }",
          "1050:             });",
          "1053:             $('#import-process-group-link').on('click', function() {",
          "1054:                 showImportFlowVersionDialog();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1546:             $('#revert-local-changes-dialog').modal({",
          "1547:                 scrollableContentStyle: 'scrollable',",
          "1548:                 headerText: 'Revert Local Changes',",
          "1549:                 buttons: [{",
          "1550:                     buttonText: 'Revert',",
          "1551:                     color: {",
          "1552:                         base: '#728E9B',",
          "1553:                         hover: '#004849',",
          "1554:                         text: '#ffffff'",
          "1555:                     },",
          "1556:                     handler: {",
          "1557:                         click: function () {",
          "1558:                             var processGroupId = $('#revert-local-changes-process-group-id').text();",
          "1559:                             revertLocalChanges(processGroupId);",
          "1561:                             $(this).modal('hide');",
          "1562:                         }",
          "1563:                     }",
          "1564:                 }, {",
          "1565:                     buttonText: 'Cancel',",
          "1566:                     color: {",
          "1567:                         base: '#E3E8EB',",
          "1568:                         hover: '#C7D2D7',",
          "1569:                         text: '#004849'",
          "1570:                     },",
          "1571:                     handler: {",
          "1572:                         click: function () {",
          "1573:                             $(this).modal('hide');",
          "1574:                         }",
          "1575:                     }",
          "1576:                 }],",
          "1577:                 handler: {",
          "1578:                     close: function () {",
          "1579:                         resetRevertLocalChangesDialog();",
          "1580:                     }",
          "1581:                 }",
          "1582:             });",
          "1585:             $('#show-local-changes-dialog').modal({",
          "1586:                 scrollableContentStyle: 'scrollable',",
          "1587:                 headerText: 'Local Changes',",
          "1588:                 buttons: [{",
          "1589:                     buttonText: 'Close',",
          "1590:                     color: {",
          "1591:                         base: '#728E9B',",
          "1592:                         hover: '#004849',",
          "1593:                         text: '#ffffff'",
          "1594:                     },",
          "1595:                     handler: {",
          "1596:                         click: function () {",
          "1597:                             $(this).modal('hide');",
          "1598:                         }",
          "1599:                     }",
          "1600:                 }],",
          "1601:                 handler: {",
          "1602:                     close: function () {",
          "1603:                         resetShowLocalChangesDialog();",
          "1604:                     }",
          "1605:                 }",
          "1606:             });",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1058:             initImportFlowVersionTable();",
          "1059:         },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1615:             initLocalChangesTable($('#revert-local-changes-table'), $('#revert-local-changes-filter'), $('#displayed-revert-local-changes-entries'), $('#total-revert-local-changes-entries'));",
          "1616:             initLocalChangesTable($('#show-local-changes-table'), $('#show-local-changes-filter'), $('#displayed-show-local-changes-entries'), $('#total-show-local-changes-entries'));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1119:                         $('#save-flow-version-label').css('margin-top', '0');",
          "1122:                             deferred.resolve();",
          "1123:                         }).fail(function () {",
          "1124:                             deferred.reject();",
          "",
          "[Removed Lines]",
          "1121:                         loadRegistries($('#save-flow-version-dialog'), registryCombo, bucketCombo, selectBucketSaveFlowVersion).done(function () {",
          "",
          "[Added Lines]",
          "1679:                         loadRegistries($('#save-flow-version-dialog'), registryCombo, bucketCombo, null, selectBucketSaveFlowVersion).done(function () {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1146:         revertLocalChanges: function (processGroupId) {",
          "1325:             });",
          "1326:         },",
          "",
          "[Removed Lines]",
          "1150:             nfDialog.showYesNoDialog({",
          "1151:                 headerText: 'Revert Changes',",
          "1152:                 dialogContent: 'Are you sure you want to revert changes? All flow configuration changes will be reverted to the last version.',",
          "1153:                 noText: 'Cancel',",
          "1154:                 yesText: 'Revert',",
          "1155:                 yesHandler: function () {",
          "1156:                     getVersionControlInformation(processGroupId).done(function (response) {",
          "1157:                         if (nfCommon.isDefinedAndNotNull(response.versionControlInformation)) {",
          "1158:                             var revertTimer = null;",
          "1159:                             var revertRequest = null;",
          "1160:                             var cancelled = false;",
          "1163:                             $('#change-version-status-dialog').modal('setButtonModel', [{",
          "1164:                                 buttonText: 'Stop',",
          "1165:                                 color: {",
          "1166:                                     base: '#728E9B',",
          "1167:                                     hover: '#004849',",
          "1168:                                     text: '#ffffff'",
          "1169:                                 },",
          "1170:                                 handler: {",
          "1171:                                     click: function () {",
          "1172:                                         cancelled = true;",
          "1174:                                         $('#change-version-status-dialog').modal('setButtonModel', []);",
          "1177:                                         if (revertTimer !== null) {",
          "1179:                                             clearTimeout(revertTimer);",
          "1182:                                             completeRevertRequest();",
          "1183:                                         }",
          "1184:                                     }",
          "1185:                                 }",
          "1186:                             }]);",
          "1189:                             $('#import-flow-version-dialog').modal('hide');",
          "1191:                             var submitRevertRequest = function () {",
          "1192:                                 var revertFlowVersionRequest = {",
          "1193:                                     'processGroupRevision': nfClient.getRevision({",
          "1194:                                         'revision': {",
          "1195:                                             'version': response.processGroupRevision.version",
          "1196:                                         }",
          "1197:                                     }),",
          "1198:                                     'versionControlInformation': response.versionControlInformation",
          "1199:                                 };",
          "1201:                                 return $.ajax({",
          "1202:                                     type: 'POST',",
          "1203:                                     data: JSON.stringify(revertFlowVersionRequest),",
          "1204:                                     url: '../nifi-api/versions/revert-requests/process-groups/' + encodeURIComponent(processGroupId),",
          "1205:                                     dataType: 'json',",
          "1206:                                     contentType: 'application/json'",
          "1207:                                 }).done(function () {",
          "1209:                                     updateProgress(0);",
          "1212:                                     $('#change-version-status-dialog').modal('show');",
          "1213:                                 }).fail(nfErrorHandler.handleAjaxError);",
          "1214:                             };",
          "1216:                             var pollRevertRequest = function () {",
          "1217:                                 getRevertRequest().done(processRevertResponse);",
          "1218:                             };",
          "1220:                             var getRevertRequest = function () {",
          "1221:                                 return $.ajax({",
          "1222:                                     type: 'GET',",
          "1223:                                     url: revertRequest.uri,",
          "1224:                                     dataType: 'json'",
          "1225:                                 }).fail(completeRevertRequest).fail(nfErrorHandler.handleAjaxError);",
          "1226:                             };",
          "1228:                             var completeRevertRequest = function () {",
          "1229:                                 if (cancelled === true) {",
          "1231:                                     $('#change-version-status-message').text('The revert request has been cancelled.');",
          "1234:                                     $('#change-version-status-dialog').modal('setButtonModel', [{",
          "1235:                                         buttonText: 'Close',",
          "1236:                                         color: {",
          "1237:                                             base: '#728E9B',",
          "1238:                                             hover: '#004849',",
          "1239:                                             text: '#ffffff'",
          "1240:                                         },",
          "1241:                                         handler: {",
          "1242:                                             click: function () {",
          "1243:                                                 $(this).modal('hide');",
          "1244:                                             }",
          "1245:                                         }",
          "1246:                                     }]);",
          "1247:                                 }",
          "1249:                                 if (nfCommon.isDefinedAndNotNull(revertRequest)) {",
          "1250:                                     $.ajax({",
          "1251:                                         type: 'DELETE',",
          "1252:                                         url: revertRequest.uri,",
          "1253:                                         dataType: 'json'",
          "1254:                                     }).done(function (response) {",
          "1255:                                         revertRequest = response.request;",
          "1258:                                         updateProcessGroup(processGroupId);",
          "1260:                                         if (nfCommon.isDefinedAndNotNull(revertRequest.failureReason)) {",
          "1262:                                             $('#change-version-status-dialog').modal('hide');",
          "1264:                                             nfDialog.showOkDialog({",
          "1265:                                                 headerText: 'Revert Local Changes',",
          "1266:                                                 dialogContent: nfCommon.escapeHtml(changeRequest.failureReason)",
          "1267:                                             });",
          "1268:                                         } else {",
          "1270:                                             updateProgress(revertRequest.percentCompleted);",
          "1273:                                             $('#change-version-status-message').text('This Process Group version has changed.');",
          "1276:                                             $('#change-version-status-dialog').modal('setButtonModel', [{",
          "1277:                                                 buttonText: 'Close',",
          "1278:                                                 color: {",
          "1279:                                                     base: '#728E9B',",
          "1280:                                                     hover: '#004849',",
          "1281:                                                     text: '#ffffff'",
          "1282:                                                 },",
          "1283:                                                 handler: {",
          "1284:                                                     click: function () {",
          "1285:                                                         $(this).modal('hide');",
          "1286:                                                     }",
          "1287:                                                 }",
          "1288:                                             }]);",
          "1289:                                         }",
          "1290:                                     });",
          "1291:                                 }",
          "1292:                             };",
          "1294:                             var processRevertResponse = function (response) {",
          "1295:                                 revertRequest = response.request;",
          "1297:                                 if (revertRequest.complete === true || cancelled === true) {",
          "1298:                                     completeRevertRequest();",
          "1299:                                 } else {",
          "1301:                                     updateProgress(revertRequest.percentCompleted);",
          "1304:                                     $('#change-version-status-message').text(revertRequest.state);",
          "1306:                                     revertTimer = setTimeout(function () {",
          "1308:                                         revertTimer = null;",
          "1311:                                         pollRevertRequest();",
          "1312:                                     }, 2000);",
          "1313:                                 }",
          "1314:                             };",
          "1316:                             submitRevertRequest().done(processRevertResponse);",
          "1317:                         } else {",
          "1318:                             nfDialog.showOkDialog({",
          "1319:                                 headerText: 'Revert Changes',",
          "1320:                                 dialogContent: 'This Process Group is not currently under version control.'",
          "1321:                             });",
          "1322:                         }",
          "1323:                     }).fail(nfErrorHandler.handleAjaxError);",
          "1324:                 }",
          "",
          "[Added Lines]",
          "1705:             loadLocalChanges(processGroupId, $('#revert-local-changes-table'), $('#total-revert-local-changes-entries')).done(function () {",
          "1706:                 $('#revert-local-changes-process-group-id').text(processGroupId);",
          "1707:                 $('#revert-local-changes-dialog').modal('show');",
          "1708:             });",
          "1709:         },",
          "1716:         showLocalChanges: function (processGroupId) {",
          "1717:             loadLocalChanges(processGroupId, $('#show-local-changes-table'), $('#total-show-local-changes-entries')).done(function () {",
          "1718:                 $('#show-local-changes-dialog').modal('show');",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1407:         stopVersionControl: function (processGroupId) {",
          "1409:             nfDialog.showYesNoDialog({",
          "1412:                 noText: 'Cancel',",
          "1413:                 yesText: 'Disconnect',",
          "1414:                 yesHandler: function () {",
          "",
          "[Removed Lines]",
          "1410:                 headerText: 'Disconnect',",
          "1411:                 dialogContent: 'Are you sure you want to disconnect?',",
          "",
          "[Added Lines]",
          "1804:                 headerText: 'Stop Version Control',",
          "1805:                 dialogContent: 'Are you sure you want to stop version control?',",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1435:                                 nfDialog.showOkDialog({",
          "1436:                                     headerText: 'Disconnect',",
          "1438:                                 });",
          "1439:                             }).fail(nfErrorHandler.handleAjaxError);",
          "1440:                         } else {",
          "",
          "[Removed Lines]",
          "1437:                                     dialogContent: 'This Process Group has been disconnected.'",
          "",
          "[Added Lines]",
          "1831:                                     dialogContent: 'This Process Group is no longer under version control.'",
          "",
          "---------------"
        ]
      }
    }
  ]
}