{
  "cve_id": "CVE-2023-46733",
  "cve_desc": "Symfony is a PHP framework for web and console applications and a set of reusable PHP components. Starting in versions 5.4.21 and 6.2.7 and prior to versions 5.4.31 and 6.3.8, `SessionStrategyListener` does not migrate the session after every successful login. It does so only in case the logged in user changes by means of checking the user identifier. In some use cases, the user identifier doesn't change between the verification phase and the successful login, while the token itself changes from one type (partially-authenticated) to another (fully-authenticated). When this happens, the session id should be regenerated to prevent possible session fixations, which is not the case at the moment. As of versions 5.4.31 and 6.3.8, Symfony now checks the type of the token in addition to the user identifier before deciding whether the session id should be regenerated.",
  "repo": "symfony/symfony",
  "patch_hash": "dc356499d5ceb86f7cf2b4c7f032eca97061ed74",
  "patch_info": {
    "commit_hash": "dc356499d5ceb86f7cf2b4c7f032eca97061ed74",
    "repo": "symfony/symfony",
    "commit_url": "https://github.com/symfony/symfony/commit/dc356499d5ceb86f7cf2b4c7f032eca97061ed74",
    "files": [
      "src/Symfony/Component/Security/Http/EventListener/SessionStrategyListener.php",
      "src/Symfony/Component/Security/Http/Tests/EventListener/SessionStrategyListenerTest.php"
    ],
    "message": "[Security] Fix possible session fixation when only the *token* changes",
    "before_after_code_files": [
      "src/Symfony/Component/Security/Http/EventListener/SessionStrategyListener.php||src/Symfony/Component/Security/Http/EventListener/SessionStrategyListener.php",
      "src/Symfony/Component/Security/Http/Tests/EventListener/SessionStrategyListenerTest.php||src/Symfony/Component/Security/Http/Tests/EventListener/SessionStrategyListenerTest.php"
    ]
  },
  "patch_diff": {
    "src/Symfony/Component/Security/Http/EventListener/SessionStrategyListener.php||src/Symfony/Component/Security/Http/EventListener/SessionStrategyListener.php": [
      "File: src/Symfony/Component/Security/Http/EventListener/SessionStrategyListener.php -> src/Symfony/Component/Security/Http/EventListener/SessionStrategyListener.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "48:             $user = method_exists($token, 'getUserIdentifier') ? $token->getUserIdentifier() : $token->getUsername();",
      "49:             $previousUser = method_exists($previousToken, 'getUserIdentifier') ? $previousToken->getUserIdentifier() : $previousToken->getUsername();",
      "52:                 return;",
      "53:             }",
      "54:         }",
      "",
      "[Removed Lines]",
      "51:             if ('' !== ($user ?? '') && $user === $previousUser) {",
      "",
      "[Added Lines]",
      "51:             if ('' !== ($user ?? '') && $user === $previousUser && \\get_class($token) === \\get_class($previousToken)) {",
      "",
      "---------------"
    ],
    "src/Symfony/Component/Security/Http/Tests/EventListener/SessionStrategyListenerTest.php||src/Symfony/Component/Security/Http/Tests/EventListener/SessionStrategyListenerTest.php": [
      "File: src/Symfony/Component/Security/Http/Tests/EventListener/SessionStrategyListenerTest.php -> src/Symfony/Component/Security/Http/Tests/EventListener/SessionStrategyListenerTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: use Symfony\\Component\\HttpFoundation\\Request;",
      "16: use Symfony\\Component\\HttpFoundation\\Session\\SessionInterface;",
      "17: use Symfony\\Component\\Security\\Core\\Authentication\\Token\\NullToken;",
      "18: use Symfony\\Component\\Security\\Core\\User\\InMemoryUser;",
      "19: use Symfony\\Component\\Security\\Http\\Authenticator\\AuthenticatorInterface;",
      "20: use Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Badge\\UserBadge;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: use Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "81:         $this->listener->onSuccessfulLogin($event);",
      "82:     }",
      "84:     private function createEvent($firewallName)",
      "85:     {",
      "86:         return new LoginSuccessEvent($this->createMock(AuthenticatorInterface::class), new SelfValidatingPassport(new UserBadge('test', function ($username) { return new InMemoryUser($username, null); })), $this->token, $this->request, null, $firewallName);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "85:     public function testRequestWithSamePreviousUserButDifferentTokenType()",
      "86:     {",
      "87:         $this->configurePreviousSession();",
      "89:         $token = $this->createMock(NullToken::class);",
      "90:         $token->expects($this->once())",
      "91:             ->method('getUserIdentifier')",
      "92:             ->willReturn('test');",
      "93:         $previousToken = $this->createMock(UsernamePasswordToken::class);",
      "94:         $previousToken->expects($this->once())",
      "95:             ->method('getUserIdentifier')",
      "96:             ->willReturn('test');",
      "98:         $this->sessionAuthenticationStrategy->expects($this->once())->method('onAuthentication')->with($this->request, $token);",
      "100:         $event = new LoginSuccessEvent($this->createMock(AuthenticatorInterface::class), new SelfValidatingPassport(new UserBadge('test', function () {})), $token, $this->request, null, 'main_firewall', $previousToken);",
      "102:         $this->listener->onSuccessfulLogin($event);",
      "103:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "238f25c9376fa862fb4a4798f3837a145e44f81d",
      "candidate_info": {
        "commit_hash": "238f25c9376fa862fb4a4798f3837a145e44f81d",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/238f25c9376fa862fb4a4798f3837a145e44f81d",
        "files": [
          "src/Symfony/Bundle/SecurityBundle/Resources/config/guard.php",
          "src/Symfony/Component/Security/Guard/Firewall/GuardAuthenticationListener.php",
          "src/Symfony/Component/Security/Guard/GuardAuthenticatorHandler.php",
          "src/Symfony/Component/Security/Http/Authentication/AuthenticatorManager.php",
          "src/Symfony/Component/Security/Http/Event/LoginSuccessEvent.php",
          "src/Symfony/Component/Security/Http/EventListener/SessionStrategyListener.php",
          "src/Symfony/Component/Security/Http/Firewall/AbstractAuthenticationListener.php",
          "src/Symfony/Component/Security/Http/Firewall/AbstractPreAuthenticatedListener.php",
          "src/Symfony/Component/Security/Http/Firewall/BasicAuthenticationListener.php",
          "src/Symfony/Component/Security/Http/Firewall/UsernamePasswordJsonAuthenticationListener.php",
          "src/Symfony/Component/Security/Http/Tests/EventListener/PasswordMigratingListenerTest.php",
          "src/Symfony/Component/Security/Http/Tests/EventListener/SessionStrategyListenerTest.php",
          "src/Symfony/Component/Security/Http/Tests/Fixtures/DummySupportsAuthenticator.php",
          "src/Symfony/Component/Security/Http/Tests/Fixtures/DummyToken.php"
        ],
        "message": "[Security] Migrate the session on login only when the user changes",
        "before_after_code_files": [
          "src/Symfony/Bundle/SecurityBundle/Resources/config/guard.php||src/Symfony/Bundle/SecurityBundle/Resources/config/guard.php",
          "src/Symfony/Component/Security/Guard/Firewall/GuardAuthenticationListener.php||src/Symfony/Component/Security/Guard/Firewall/GuardAuthenticationListener.php",
          "src/Symfony/Component/Security/Guard/GuardAuthenticatorHandler.php||src/Symfony/Component/Security/Guard/GuardAuthenticatorHandler.php",
          "src/Symfony/Component/Security/Http/Authentication/AuthenticatorManager.php||src/Symfony/Component/Security/Http/Authentication/AuthenticatorManager.php",
          "src/Symfony/Component/Security/Http/Event/LoginSuccessEvent.php||src/Symfony/Component/Security/Http/Event/LoginSuccessEvent.php",
          "src/Symfony/Component/Security/Http/EventListener/SessionStrategyListener.php||src/Symfony/Component/Security/Http/EventListener/SessionStrategyListener.php",
          "src/Symfony/Component/Security/Http/Firewall/AbstractAuthenticationListener.php||src/Symfony/Component/Security/Http/Firewall/AbstractAuthenticationListener.php",
          "src/Symfony/Component/Security/Http/Firewall/AbstractPreAuthenticatedListener.php||src/Symfony/Component/Security/Http/Firewall/AbstractPreAuthenticatedListener.php",
          "src/Symfony/Component/Security/Http/Firewall/BasicAuthenticationListener.php||src/Symfony/Component/Security/Http/Firewall/BasicAuthenticationListener.php",
          "src/Symfony/Component/Security/Http/Firewall/UsernamePasswordJsonAuthenticationListener.php||src/Symfony/Component/Security/Http/Firewall/UsernamePasswordJsonAuthenticationListener.php",
          "src/Symfony/Component/Security/Http/Tests/EventListener/PasswordMigratingListenerTest.php||src/Symfony/Component/Security/Http/Tests/EventListener/PasswordMigratingListenerTest.php",
          "src/Symfony/Component/Security/Http/Tests/EventListener/SessionStrategyListenerTest.php||src/Symfony/Component/Security/Http/Tests/EventListener/SessionStrategyListenerTest.php",
          "src/Symfony/Component/Security/Http/Tests/Fixtures/DummySupportsAuthenticator.php||src/Symfony/Component/Security/Http/Tests/Fixtures/DummySupportsAuthenticator.php",
          "src/Symfony/Component/Security/Http/Tests/Fixtures/DummyToken.php||src/Symfony/Component/Security/Http/Tests/Fixtures/DummyToken.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/Security/Http/EventListener/SessionStrategyListener.php||src/Symfony/Component/Security/Http/EventListener/SessionStrategyListener.php",
            "src/Symfony/Component/Security/Http/Tests/EventListener/SessionStrategyListenerTest.php||src/Symfony/Component/Security/Http/Tests/EventListener/SessionStrategyListenerTest.php"
          ],
          "candidate": [
            "src/Symfony/Component/Security/Http/EventListener/SessionStrategyListener.php||src/Symfony/Component/Security/Http/EventListener/SessionStrategyListener.php",
            "src/Symfony/Component/Security/Http/Tests/EventListener/SessionStrategyListenerTest.php||src/Symfony/Component/Security/Http/Tests/EventListener/SessionStrategyListenerTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Bundle/SecurityBundle/Resources/config/guard.php||src/Symfony/Bundle/SecurityBundle/Resources/config/guard.php": [
          "File: src/Symfony/Bundle/SecurityBundle/Resources/config/guard.php -> src/Symfony/Bundle/SecurityBundle/Resources/config/guard.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:                 abstract_arg('Authenticators'),",
          "50:                 service('logger')->nullOnInvalid(),",
          "51:                 param('security.authentication.hide_user_not_found'),",
          "52:             ])",
          "53:             ->tag('monolog.logger', ['channel' => 'security'])",
          "54:             ->deprecate('symfony/security-bundle', '5.3', 'The \"%service_id%\" service is deprecated, use the new authenticator system instead.')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:                 service('security.token_storage'),",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Security/Guard/Firewall/GuardAuthenticationListener.php||src/Symfony/Component/Security/Guard/Firewall/GuardAuthenticationListener.php": [
          "File: src/Symfony/Component/Security/Guard/Firewall/GuardAuthenticationListener.php -> src/Symfony/Component/Security/Guard/Firewall/GuardAuthenticationListener.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: use Symfony\\Component\\HttpFoundation\\Response;",
          "17: use Symfony\\Component\\HttpKernel\\Event\\RequestEvent;",
          "18: use Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationManagerInterface;",
          "19: use Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface;",
          "20: use Symfony\\Component\\Security\\Core\\Exception\\AccountStatusException;",
          "21: use Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: use Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorageInterface;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     private $logger;",
          "50:     private $rememberMeServices;",
          "51:     private $hideUserNotFoundExceptions;",
          "58:     {",
          "59:         if (empty($providerKey)) {",
          "60:             throw new \\InvalidArgumentException('$providerKey must not be empty.');",
          "",
          "[Removed Lines]",
          "57:     public function __construct(GuardAuthenticatorHandler $guardHandler, AuthenticationManagerInterface $authenticationManager, string $providerKey, iterable $guardAuthenticators, LoggerInterface $logger = null, bool $hideUserNotFoundExceptions = true)",
          "",
          "[Added Lines]",
          "53:     private $tokenStorage;",
          "59:     public function __construct(GuardAuthenticatorHandler $guardHandler, AuthenticationManagerInterface $authenticationManager, string $providerKey, iterable $guardAuthenticators, LoggerInterface $logger = null, bool $hideUserNotFoundExceptions = true, TokenStorageInterface $tokenStorage = null)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:         $this->guardAuthenticators = $guardAuthenticators;",
          "67:         $this->logger = $logger;",
          "68:         $this->hideUserNotFoundExceptions = $hideUserNotFoundExceptions;",
          "69:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:         $this->tokenStorage = $tokenStorage;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:     private function executeGuardAuthenticator(string $uniqueGuardKey, AuthenticatorInterface $guardAuthenticator, RequestEvent $event)",
          "136:     {",
          "137:         $request = $event->getRequest();",
          "138:         try {",
          "139:             if (null !== $this->logger) {",
          "140:                 $this->logger->debug('Calling getCredentials() on guard authenticator.', ['firewall_key' => $this->providerKey, 'authenticator' => \\get_class($guardAuthenticator)]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:         $previousToken = $this->tokenStorage ? $this->tokenStorage->getToken() : null;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "162:             }",
          "166:         } catch (AuthenticationException $e) {",
          "",
          "[Removed Lines]",
          "165:             $this->guardHandler->authenticateWithToken($token, $request, $this->providerKey);",
          "",
          "[Added Lines]",
          "169:             if ($this->tokenStorage) {",
          "170:                 $this->guardHandler->authenticateWithToken($token, $request, $this->providerKey, $previousToken);",
          "171:             } else {",
          "172:                 $this->guardHandler->authenticateWithToken($token, $request, $this->providerKey);",
          "173:             }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Security/Guard/GuardAuthenticatorHandler.php||src/Symfony/Component/Security/Guard/GuardAuthenticatorHandler.php": [
          "File: src/Symfony/Component/Security/Guard/GuardAuthenticatorHandler.php -> src/Symfony/Component/Security/Guard/GuardAuthenticatorHandler.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     {",
          "62:         $this->tokenStorage->setToken($token);",
          "64:         if (null !== $this->dispatcher) {",
          "",
          "[Removed Lines]",
          "59:     public function authenticateWithToken(TokenInterface $token, Request $request, string $providerKey = null)",
          "61:         $this->migrateSession($request, $token, $providerKey);",
          "",
          "[Added Lines]",
          "59:     public function authenticateWithToken(TokenInterface $token, Request $request, string $providerKey = null, TokenInterface $previousToken = null)",
          "61:         $this->migrateSession($request, $token, $providerKey, 3 < \\func_num_args() ? $previousToken : $this->tokenStorage->getToken());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:         $token = $authenticator->createAuthenticatedToken($user, $providerKey);",
          "97:         return $this->handleAuthenticationSuccess($token, $request, $authenticator, $providerKey);",
          "",
          "[Removed Lines]",
          "94:         $this->authenticateWithToken($token, $request, $providerKey);",
          "",
          "[Added Lines]",
          "94:         $this->authenticateWithToken($token, $request, $providerKey, $this->tokenStorage->getToken());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:         $this->sessionStrategy = $sessionStrategy;",
          "123:     }",
          "126:     {",
          "127:         if (\\in_array($providerKey, $this->statelessProviderKeys, true) || !$this->sessionStrategy || !$request->hasSession() || !$request->hasPreviousSession()) {",
          "128:             return;",
          "129:         }",
          "131:         $this->sessionStrategy->onAuthentication($request, $token);",
          "132:     }",
          "133: }",
          "",
          "[Removed Lines]",
          "125:     private function migrateSession(Request $request, TokenInterface $token, ?string $providerKey)",
          "",
          "[Added Lines]",
          "125:     private function migrateSession(Request $request, TokenInterface $token, ?string $providerKey, ?TokenInterface $previousToken)",
          "131:         if ($previousToken) {",
          "132:             $user = method_exists($token, 'getUserIdentifier') ? $token->getUserIdentifier() : $token->getUsername();",
          "133:             $previousUser = method_exists($previousToken, 'getUserIdentifier') ? $previousToken->getUserIdentifier() : $previousToken->getUsername();",
          "135:             if ('' !== ($user ?? '') && $user === $previousUser) {",
          "136:                 return;",
          "137:             }",
          "138:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Security/Http/Authentication/AuthenticatorManager.php||src/Symfony/Component/Security/Http/Authentication/AuthenticatorManager.php": [
          "File: src/Symfony/Component/Security/Http/Authentication/AuthenticatorManager.php -> src/Symfony/Component/Security/Http/Authentication/AuthenticatorManager.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:         $token = $this->eventDispatcher->dispatch(new AuthenticationTokenCreatedEvent($token, $passport))->getAuthenticatedToken();",
          "88:     }",
          "90:     public function supports(Request $request): ?bool",
          "",
          "[Removed Lines]",
          "87:         return $this->handleAuthenticationSuccess($token, $passport, $request, $authenticator);",
          "",
          "[Added Lines]",
          "87:         return $this->handleAuthenticationSuccess($token, $passport, $request, $authenticator, $this->tokenStorage->getToken());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "174:     private function executeAuthenticator(AuthenticatorInterface $authenticator, Request $request): ?Response",
          "175:     {",
          "176:         $passport = null;",
          "178:         try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:         $previousToken = $this->tokenStorage->getToken();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "224:         }",
          "228:         if ($response instanceof Response) {",
          "229:             return $response;",
          "230:         }",
          "",
          "[Removed Lines]",
          "227:         $response = $this->handleAuthenticationSuccess($authenticatedToken, $passport, $request, $authenticator);",
          "",
          "[Added Lines]",
          "228:         $response = $this->handleAuthenticationSuccess($authenticatedToken, $passport, $request, $authenticator, $previousToken);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "236:         return null;",
          "237:     }",
          "240:     {",
          "242:         $user = $authenticatedToken->getUser();",
          "",
          "[Removed Lines]",
          "239:     private function handleAuthenticationSuccess(TokenInterface $authenticatedToken, PassportInterface $passport, Request $request, AuthenticatorInterface $authenticator): ?Response",
          "",
          "[Added Lines]",
          "240:     private function handleAuthenticationSuccess(TokenInterface $authenticatedToken, PassportInterface $passport, Request $request, AuthenticatorInterface $authenticator, ?TokenInterface $previousToken): ?Response",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "252:             $this->eventDispatcher->dispatch($loginEvent, SecurityEvents::INTERACTIVE_LOGIN);",
          "253:         }",
          "257:         return $loginSuccessEvent->getResponse();",
          "258:     }",
          "",
          "[Removed Lines]",
          "255:         $this->eventDispatcher->dispatch($loginSuccessEvent = new LoginSuccessEvent($authenticator, $passport, $authenticatedToken, $request, $response, $this->firewallName));",
          "",
          "[Added Lines]",
          "256:         $this->eventDispatcher->dispatch($loginSuccessEvent = new LoginSuccessEvent($authenticator, $passport, $authenticatedToken, $request, $response, $this->firewallName, $previousToken));",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Security/Http/Event/LoginSuccessEvent.php||src/Symfony/Component/Security/Http/Event/LoginSuccessEvent.php": [
          "File: src/Symfony/Component/Security/Http/Event/LoginSuccessEvent.php -> src/Symfony/Component/Security/Http/Event/LoginSuccessEvent.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     private $authenticator;",
          "38:     private $passport;",
          "39:     private $authenticatedToken;",
          "40:     private $request;",
          "41:     private $response;",
          "42:     private $firewallName;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:     private $previousToken;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     {",
          "49:         if (!$passport instanceof Passport) {",
          "50:             trigger_deprecation('symfony/security-http', '5.4', 'Not passing an instance of \"%s\" as \"$passport\" argument of \"%s()\" is deprecated, \"%s\" given.', Passport::class, __METHOD__, get_debug_type($passport));",
          "",
          "[Removed Lines]",
          "47:     public function __construct(AuthenticatorInterface $authenticator, PassportInterface $passport, TokenInterface $authenticatedToken, Request $request, ?Response $response, string $firewallName)",
          "",
          "[Added Lines]",
          "48:     public function __construct(AuthenticatorInterface $authenticator, PassportInterface $passport, TokenInterface $authenticatedToken, Request $request, ?Response $response, string $firewallName, TokenInterface $previousToken = null)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:         $this->authenticator = $authenticator;",
          "54:         $this->passport = $passport;",
          "55:         $this->authenticatedToken = $authenticatedToken;",
          "56:         $this->request = $request;",
          "57:         $this->response = $response;",
          "58:         $this->firewallName = $firewallName;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:         $this->previousToken = $previousToken;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "83:         return $this->authenticatedToken;",
          "84:     }",
          "86:     public function getRequest(): Request",
          "87:     {",
          "88:         return $this->request;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     public function getPreviousToken(): ?TokenInterface",
          "89:     {",
          "90:         return $this->previousToken;",
          "91:     }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Security/Http/EventListener/SessionStrategyListener.php||src/Symfony/Component/Security/Http/EventListener/SessionStrategyListener.php": [
          "File: src/Symfony/Component/Security/Http/EventListener/SessionStrategyListener.php -> src/Symfony/Component/Security/Http/EventListener/SessionStrategyListener.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:             return;",
          "44:         }",
          "46:         $this->sessionAuthenticationStrategy->onAuthentication($request, $token);",
          "47:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:         if ($previousToken = $event->getPreviousToken()) {",
          "48:             $user = method_exists($token, 'getUserIdentifier') ? $token->getUserIdentifier() : $token->getUsername();",
          "49:             $previousUser = method_exists($previousToken, 'getUserIdentifier') ? $previousToken->getUserIdentifier() : $previousToken->getUsername();",
          "51:             if ('' !== ($user ?? '') && $user === $previousUser) {",
          "52:                 return;",
          "53:             }",
          "54:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Security/Http/Firewall/AbstractAuthenticationListener.php||src/Symfony/Component/Security/Http/Firewall/AbstractAuthenticationListener.php": [
          "File: src/Symfony/Component/Security/Http/Firewall/AbstractAuthenticationListener.php -> src/Symfony/Component/Security/Http/Firewall/AbstractAuthenticationListener.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:                 throw new SessionUnavailableException('Your session has timed out, or you have disabled cookies.');",
          "134:             }",
          "136:             if (null === $returnValue = $this->attemptAuthentication($request)) {",
          "137:                 return;",
          "138:             }",
          "140:             if ($returnValue instanceof TokenInterface) {",
          "143:                 $response = $this->onSuccess($request, $returnValue);",
          "144:             } elseif ($returnValue instanceof Response) {",
          "",
          "[Removed Lines]",
          "141:                 $this->sessionStrategy->onAuthentication($request, $returnValue);",
          "",
          "[Added Lines]",
          "136:             $previousToken = $this->tokenStorage->getToken();",
          "143:                 $this->migrateSession($request, $returnValue, $previousToken);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:         return $response;",
          "228:     }",
          "229: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:     private function migrateSession(Request $request, TokenInterface $token, ?TokenInterface $previousToken)",
          "233:     {",
          "234:         if ($previousToken) {",
          "235:             $user = method_exists($token, 'getUserIdentifier') ? $token->getUserIdentifier() : $token->getUsername();",
          "236:             $previousUser = method_exists($previousToken, 'getUserIdentifier') ? $previousToken->getUserIdentifier() : $previousToken->getUsername();",
          "238:             if ('' !== ($user ?? '') && $user === $previousUser) {",
          "239:                 return;",
          "240:             }",
          "241:         }",
          "243:         $this->sessionStrategy->onAuthentication($request, $token);",
          "244:     }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Security/Http/Firewall/AbstractPreAuthenticatedListener.php||src/Symfony/Component/Security/Http/Firewall/AbstractPreAuthenticatedListener.php": [
          "File: src/Symfony/Component/Security/Http/Firewall/AbstractPreAuthenticatedListener.php -> src/Symfony/Component/Security/Http/Firewall/AbstractPreAuthenticatedListener.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:         }",
          "100:         try {",
          "101:             $token = $this->authenticationManager->authenticate(new PreAuthenticatedToken($user, $credentials, $this->providerKey));",
          "103:             if (null !== $this->logger) {",
          "104:                 $this->logger->info('Pre-authentication successful.', ['token' => (string) $token]);",
          "105:             }",
          "109:             $this->tokenStorage->setToken($token);",
          "",
          "[Removed Lines]",
          "107:             $this->migrateSession($request, $token);",
          "",
          "[Added Lines]",
          "101:             $previousToken = $token;",
          "108:             $this->migrateSession($request, $token, $previousToken);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:     abstract protected function getPreAuthenticatedData(Request $request);",
          "153:     {",
          "154:         if (!$this->sessionStrategy || !$request->hasSession() || !$request->hasPreviousSession()) {",
          "155:             return;",
          "156:         }",
          "158:         $this->sessionStrategy->onAuthentication($request, $token);",
          "159:     }",
          "160: }",
          "",
          "[Removed Lines]",
          "152:     private function migrateSession(Request $request, TokenInterface $token)",
          "",
          "[Added Lines]",
          "153:     private function migrateSession(Request $request, TokenInterface $token, ?TokenInterface $previousToken)",
          "159:         if ($previousToken) {",
          "160:             $user = method_exists($token, 'getUserIdentifier') ? $token->getUserIdentifier() : $token->getUsername();",
          "161:             $previousUser = method_exists($previousToken, 'getUserIdentifier') ? $previousToken->getUserIdentifier() : $previousToken->getUsername();",
          "163:             if ('' !== ($user ?? '') && $user === $previousUser) {",
          "164:                 return;",
          "165:             }",
          "166:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Security/Http/Firewall/BasicAuthenticationListener.php||src/Symfony/Component/Security/Http/Firewall/BasicAuthenticationListener.php": [
          "File: src/Symfony/Component/Security/Http/Firewall/BasicAuthenticationListener.php -> src/Symfony/Component/Security/Http/Firewall/BasicAuthenticationListener.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:         }",
          "90:         try {",
          "91:             $token = $this->authenticationManager->authenticate(new UsernamePasswordToken($username, $request->headers->get('PHP_AUTH_PW'), $this->providerKey));",
          "95:             $this->tokenStorage->setToken($token);",
          "96:         } catch (AuthenticationException $e) {",
          "",
          "[Removed Lines]",
          "93:             $this->migrateSession($request, $token);",
          "",
          "[Added Lines]",
          "91:             $previousToken = $token;",
          "94:             $this->migrateSession($request, $token, $previousToken);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:         $this->sessionStrategy = $sessionStrategy;",
          "122:     }",
          "125:     {",
          "126:         if (!$this->sessionStrategy || !$request->hasSession() || !$request->hasPreviousSession()) {",
          "127:             return;",
          "128:         }",
          "130:         $this->sessionStrategy->onAuthentication($request, $token);",
          "131:     }",
          "132: }",
          "",
          "[Removed Lines]",
          "124:     private function migrateSession(Request $request, TokenInterface $token)",
          "",
          "[Added Lines]",
          "125:     private function migrateSession(Request $request, TokenInterface $token, ?TokenInterface $previousToken)",
          "131:         if ($previousToken) {",
          "132:             $user = method_exists($token, 'getUserIdentifier') ? $token->getUserIdentifier() : $token->getUsername();",
          "133:             $previousUser = method_exists($previousToken, 'getUserIdentifier') ? $previousToken->getUserIdentifier() : $previousToken->getUsername();",
          "135:             if ('' !== ($user ?? '') && $user === $previousUser) {",
          "136:                 return;",
          "137:             }",
          "138:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Security/Http/Firewall/UsernamePasswordJsonAuthenticationListener.php||src/Symfony/Component/Security/Http/Firewall/UsernamePasswordJsonAuthenticationListener.php": [
          "File: src/Symfony/Component/Security/Http/Firewall/UsernamePasswordJsonAuthenticationListener.php -> src/Symfony/Component/Security/Http/Firewall/UsernamePasswordJsonAuthenticationListener.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     {",
          "102:         $request = $event->getRequest();",
          "103:         $data = json_decode($request->getContent());",
          "105:         try {",
          "106:             if (!$data instanceof \\stdClass) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:         $previousToken = $this->tokenStorage->getToken();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:             $token = new UsernamePasswordToken($username, $password, $this->providerKey);",
          "136:             $authenticatedToken = $this->authenticationManager->authenticate($token);",
          "138:         } catch (AuthenticationException $e) {",
          "139:             $response = $this->onFailure($request, $e);",
          "140:         } catch (BadRequestHttpException $e) {",
          "",
          "[Removed Lines]",
          "137:             $response = $this->onSuccess($request, $authenticatedToken);",
          "",
          "[Added Lines]",
          "138:             $response = $this->onSuccess($request, $authenticatedToken, $previousToken);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:         $event->setResponse($response);",
          "151:     }",
          "154:     {",
          "155:         if (null !== $this->logger) {",
          "157:             $this->logger->info('User has been authenticated successfully.', ['username' => method_exists($token, 'getUserIdentifier') ? $token->getUserIdentifier() : $token->getUsername()]);",
          "158:         }",
          "162:         $this->tokenStorage->setToken($token);",
          "",
          "[Removed Lines]",
          "153:     private function onSuccess(Request $request, TokenInterface $token): ?Response",
          "160:         $this->migrateSession($request, $token);",
          "",
          "[Added Lines]",
          "154:     private function onSuccess(Request $request, TokenInterface $token, ?TokenInterface $previousToken): ?Response",
          "161:         $this->migrateSession($request, $token, $previousToken);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "224:         $this->translator = $translator;",
          "225:     }",
          "228:     {",
          "229:         if (!$this->sessionStrategy || !$request->hasSession() || !$request->hasPreviousSession()) {",
          "230:             return;",
          "231:         }",
          "233:         $this->sessionStrategy->onAuthentication($request, $token);",
          "234:     }",
          "235: }",
          "",
          "[Removed Lines]",
          "227:     private function migrateSession(Request $request, TokenInterface $token)",
          "",
          "[Added Lines]",
          "228:     private function migrateSession(Request $request, TokenInterface $token, ?TokenInterface $previousToken)",
          "234:         if ($previousToken) {",
          "235:             $user = method_exists($token, 'getUserIdentifier') ? $token->getUserIdentifier() : $token->getUsername();",
          "236:             $previousUser = method_exists($previousToken, 'getUserIdentifier') ? $previousToken->getUserIdentifier() : $previousToken->getUsername();",
          "238:             if ('' !== ($user ?? '') && $user === $previousUser) {",
          "239:                 return;",
          "240:             }",
          "241:         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Security/Http/Tests/EventListener/PasswordMigratingListenerTest.php||src/Symfony/Component/Security/Http/Tests/EventListener/PasswordMigratingListenerTest.php": [
          "File: src/Symfony/Component/Security/Http/Tests/EventListener/PasswordMigratingListenerTest.php -> src/Symfony/Component/Security/Http/Tests/EventListener/PasswordMigratingListenerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: use Symfony\\Component\\HttpFoundation\\Request;",
          "16: use Symfony\\Component\\PasswordHasher\\Hasher\\PasswordHasherFactoryInterface;",
          "17: use Symfony\\Component\\PasswordHasher\\PasswordHasherInterface;",
          "18: use Symfony\\Component\\Security\\Core\\User\\InMemoryUser;",
          "19: use Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;",
          "20: use Symfony\\Component\\Security\\Core\\User\\PasswordUpgraderInterface;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: use Symfony\\Component\\Security\\Core\\Authentication\\Token\\NullToken;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: use Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent;",
          "29: use Symfony\\Component\\Security\\Http\\EventListener\\PasswordMigratingListener;",
          "30: use Symfony\\Component\\Security\\Http\\Tests\\Fixtures\\DummyAuthenticator;",
          "33: class PasswordMigratingListenerTest extends TestCase",
          "34: {",
          "",
          "[Removed Lines]",
          "31: use Symfony\\Component\\Security\\Http\\Tests\\Fixtures\\DummyToken;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141:     private static function createEvent(PassportInterface $passport)",
          "142:     {",
          "144:     }",
          "145: }",
          "",
          "[Removed Lines]",
          "143:         return new LoginSuccessEvent(new DummyAuthenticator(), $passport, new DummyToken(), new Request(), null, 'main');",
          "",
          "[Added Lines]",
          "143:         return new LoginSuccessEvent(new DummyAuthenticator(), $passport, new NullToken(), new Request(), null, 'main');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Security/Http/Tests/EventListener/SessionStrategyListenerTest.php||src/Symfony/Component/Security/Http/Tests/EventListener/SessionStrategyListenerTest.php": [
          "File: src/Symfony/Component/Security/Http/Tests/EventListener/SessionStrategyListenerTest.php -> src/Symfony/Component/Security/Http/Tests/EventListener/SessionStrategyListenerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: use PHPUnit\\Framework\\TestCase;",
          "15: use Symfony\\Component\\HttpFoundation\\Request;",
          "16: use Symfony\\Component\\HttpFoundation\\Session\\SessionInterface;",
          "18: use Symfony\\Component\\Security\\Core\\User\\InMemoryUser;",
          "19: use Symfony\\Component\\Security\\Http\\Authenticator\\AuthenticatorInterface;",
          "20: use Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Badge\\UserBadge;",
          "",
          "[Removed Lines]",
          "17: use Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface;",
          "",
          "[Added Lines]",
          "17: use Symfony\\Component\\Security\\Core\\Authentication\\Token\\NullToken;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:         $this->sessionAuthenticationStrategy = $this->createMock(SessionAuthenticationStrategyInterface::class);",
          "36:         $this->listener = new SessionStrategyListener($this->sessionAuthenticationStrategy);",
          "37:         $this->request = new Request();",
          "39:     }",
          "41:     public function testRequestWithSession()",
          "",
          "[Removed Lines]",
          "38:         $this->token = $this->createMock(TokenInterface::class);",
          "",
          "[Added Lines]",
          "38:         $this->token = $this->createMock(NullToken::class);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:         $listener->onSuccessfulLogin($this->createEvent('api_firewall'));",
          "63:     }",
          "65:     private function createEvent($firewallName)",
          "66:     {",
          "67:         return new LoginSuccessEvent($this->createMock(AuthenticatorInterface::class), new SelfValidatingPassport(new UserBadge('test', function ($username) { return new InMemoryUser($username, null); })), $this->token, $this->request, null, $firewallName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:     public function testRequestWithSamePreviousUser()",
          "66:     {",
          "67:         $this->configurePreviousSession();",
          "68:         $this->sessionAuthenticationStrategy->expects($this->never())->method('onAuthentication');",
          "70:         $token = $this->createMock(NullToken::class);",
          "71:         $token->expects($this->once())",
          "72:             ->method('getUserIdentifier')",
          "73:             ->willReturn('test');",
          "74:         $previousToken = $this->createMock(NullToken::class);",
          "75:         $previousToken->expects($this->once())",
          "76:             ->method('getUserIdentifier')",
          "77:             ->willReturn('test');",
          "79:         $event = new LoginSuccessEvent($this->createMock(AuthenticatorInterface::class), new SelfValidatingPassport(new UserBadge('test', function () {})), $token, $this->request, null, 'main_firewall', $previousToken);",
          "81:         $this->listener->onSuccessfulLogin($event);",
          "82:     }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Security/Http/Tests/Fixtures/DummySupportsAuthenticator.php||src/Symfony/Component/Security/Http/Tests/Fixtures/DummySupportsAuthenticator.php": [
          "File: src/Symfony/Component/Security/Http/Tests/Fixtures/DummySupportsAuthenticator.php -> src/Symfony/Component/Security/Http/Tests/Fixtures/DummySupportsAuthenticator.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\Security\\Http\\Tests\\Fixtures;",
          "14: use Symfony\\Component\\HttpFoundation\\Request;",
          "22: class DummySupportsAuthenticator extends DummyAuthenticator",
          "23: {",
          "",
          "[Removed Lines]",
          "15: use Symfony\\Component\\HttpFoundation\\Response;",
          "16: use Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface;",
          "17: use Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;",
          "18: use Symfony\\Component\\Security\\Http\\Authenticator\\AuthenticatorInterface;",
          "19: use Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Passport;",
          "20: use Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\PassportInterface;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Security/Http/Tests/Fixtures/DummyToken.php||src/Symfony/Component/Security/Http/Tests/Fixtures/DummyToken.php": [
          "File: src/Symfony/Component/Security/Http/Tests/Fixtures/DummyToken.php -> src/Symfony/Component/Security/Http/Tests/Fixtures/DummyToken.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}