{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "28836ac86204be6694200f12a3a050eab1c17598",
      "candidate_info": {
        "commit_hash": "28836ac86204be6694200f12a3a050eab1c17598",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/28836ac86204be6694200f12a3a050eab1c17598",
        "files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.less"
        ],
        "message": "[AMBARI-24325] [Log Search UI] Unaccessible query filter type ahead element in small window (#1827)\n\n(cherry picked from commit 7e320c0247d203b6861efa1bf1f662a97e492290)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.less||ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.less"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.less||ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.less": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.less -> ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:     /deep/ typeahead-container .dropdown-menu {",
          "103:       .dropdown-list-default;",
          "105:       > li {",
          "106:         .dropdown-item-default;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:       max-height: 80vh;",
          "105:       overflow-y: auto;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d02e74ebcd04856a096fccf21acb1b72bd4c713",
      "candidate_info": {
        "commit_hash": "9d02e74ebcd04856a096fccf21acb1b72bd4c713",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/9d02e74ebcd04856a096fccf21acb1b72bd4c713",
        "files": [
          "ambari-server/src/main/resources/common-services/OOZIE/4.0.0.2.0/package/scripts/oozie_service.py",
          "ambari-server/src/main/resources/common-services/OOZIE/4.0.0.2.0/package/scripts/params.py",
          "ambari-server/src/main/resources/stacks/HDP/2.0.6/configuration/cluster-env.xml"
        ],
        "message": "AMBARI-24540. Allow skipping Oozie DB schema creation for sysprepped cluster (#2180)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/OOZIE/4.0.0.2.0/package/scripts/oozie_service.py||ambari-server/src/main/resources/common-services/OOZIE/4.0.0.2.0/package/scripts/oozie_service.py",
          "ambari-server/src/main/resources/common-services/OOZIE/4.0.0.2.0/package/scripts/params.py||ambari-server/src/main/resources/common-services/OOZIE/4.0.0.2.0/package/scripts/params.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/OOZIE/4.0.0.2.0/package/scripts/oozie_service.py||ambari-server/src/main/resources/common-services/OOZIE/4.0.0.2.0/package/scripts/oozie_service.py": [
          "File: ambari-server/src/main/resources/common-services/OOZIE/4.0.0.2.0/package/scripts/oozie_service.py -> ambari-server/src/main/resources/common-services/OOZIE/4.0.0.2.0/package/scripts/oozie_service.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:                  user=params.oozie_user,",
          "113:         )",
          "120:       if params.security_enabled:",
          "121:         Execute(kinit_if_needed,",
          "",
          "[Removed Lines]",
          "115:       Execute( format(\"cd {oozie_tmp_dir} && {oozie_home}/bin/ooziedb.sh create -sqlfile oozie.sql -run\"),",
          "116:                user = params.oozie_user, not_if = no_op_test,",
          "117:                ignore_failures = True",
          "118:       )",
          "",
          "[Added Lines]",
          "115:       if params.sysprep_skip_oozie_schema_create:",
          "116:         Logger.info(\"Skipping creation of oozie schema as host is sys prepped\")",
          "117:       else:",
          "118:         Execute( format(\"cd {oozie_tmp_dir} && {oozie_home}/bin/ooziedb.sh create -sqlfile oozie.sql -run\"),",
          "119:                  user = params.oozie_user, not_if = no_op_test,",
          "120:                  ignore_failures = True",
          "121:         )",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/common-services/OOZIE/4.0.0.2.0/package/scripts/params.py||ambari-server/src/main/resources/common-services/OOZIE/4.0.0.2.0/package/scripts/params.py": [
          "File: ambari-server/src/main/resources/common-services/OOZIE/4.0.0.2.0/package/scripts/params.py -> ambari-server/src/main/resources/common-services/OOZIE/4.0.0.2.0/package/scripts/params.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: sysprep_skip_copy_oozie_share_lib_to_hdfs = False",
          "38: if host_sys_prepped:",
          "39:   sysprep_skip_copy_oozie_share_lib_to_hdfs = default(\"/configurations/cluster-env/sysprep_skip_copy_oozie_share_lib_to_hdfs\", False)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: sysprep_skip_oozie_schema_create = host_sys_prepped and default(\"/configurations/cluster-env/sysprep_skip_oozie_schema_create\", False)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "adc9d02ebef3ecf48618b8bf3e1d9a39d9c7c3ab",
      "candidate_info": {
        "commit_hash": "adc9d02ebef3ecf48618b8bf3e1d9a39d9c7c3ab",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/adc9d02ebef3ecf48618b8bf3e1d9a39d9c7c3ab",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/security/authentication/AmbariAuthenticationEventHandlerImpl.java"
        ],
        "message": "AMBARI-25234 - Ambari audit log shows \"null\" user when executing an API call as admin (#2925)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/security/authentication/AmbariAuthenticationEventHandlerImpl.java||ambari-server/src/main/java/org/apache/ambari/server/security/authentication/AmbariAuthenticationEventHandlerImpl.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/security/authentication/AmbariAuthenticationEventHandlerImpl.java||ambari-server/src/main/java/org/apache/ambari/server/security/authentication/AmbariAuthenticationEventHandlerImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/security/authentication/AmbariAuthenticationEventHandlerImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/security/authentication/AmbariAuthenticationEventHandlerImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:   @Override",
          "155:   public void beforeAttemptAuthentication(AmbariAuthenticationFilter filter, ServletRequest servletRequest, ServletResponse servletResponse) {",
          "170:   }",
          "171: }",
          "",
          "[Removed Lines]",
          "156:     HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;",
          "159:     if (auditLogger.isEnabled() && filter.shouldApply(httpServletRequest) && (AuthorizationHelper.getAuthenticatedName() == null)) {",
          "160:       AuditEvent loginFailedAuditEvent = LoginAuditEvent.builder()",
          "161:           .withRemoteIp(RequestUtils.getRemoteAddress(httpServletRequest))",
          "162:           .withTimestamp(System.currentTimeMillis())",
          "163:           .withReasonOfFailure(\"Authentication required\")",
          "164:           .withUserName(null)",
          "165:           .withProxyUserName(null)",
          "166:           .build();",
          "167:       auditLogger.log(loginFailedAuditEvent);",
          "168:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4c46c3f145eedcf1e9beaf945b61d7db72ef096",
      "candidate_info": {
        "commit_hash": "d4c46c3f145eedcf1e9beaf945b61d7db72ef096",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/d4c46c3f145eedcf1e9beaf945b61d7db72ef096",
        "files": [
          "ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/params.py",
          "ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/shared_initialization.py",
          "ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/hook.py",
          "ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/params.py",
          "ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/shared_initialization.py",
          "ambari-server/src/main/resources/stack-hooks/before-INSTALL/scripts/params.py",
          "ambari-server/src/main/resources/stack-hooks/before-START/scripts/params.py",
          "ambari-server/src/main/resources/stack-hooks/before-START/scripts/shared_initialization.py"
        ],
        "message": "AMBARI-24681. Cannot deploy cluster without HDFS_CLIENT (#2370)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/params.py||ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/params.py",
          "ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/shared_initialization.py||ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/shared_initialization.py",
          "ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/hook.py||ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/hook.py",
          "ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/params.py||ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/params.py",
          "ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/shared_initialization.py||ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/shared_initialization.py",
          "ambari-server/src/main/resources/stack-hooks/before-INSTALL/scripts/params.py||ambari-server/src/main/resources/stack-hooks/before-INSTALL/scripts/params.py",
          "ambari-server/src/main/resources/stack-hooks/before-START/scripts/params.py||ambari-server/src/main/resources/stack-hooks/before-START/scripts/params.py",
          "ambari-server/src/main/resources/stack-hooks/before-START/scripts/shared_initialization.py||ambari-server/src/main/resources/stack-hooks/before-START/scripts/shared_initialization.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/params.py||ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/params.py": [
          "File: ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/params.py -> ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/params.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "97: hdfs_user = config['configurations']['hadoop-env']['hdfs_user']",
          "98: user_group = config['configurations']['cluster-env']['user_group']",
          "100: hdfs_client_hosts = default(\"/clusterHostInfo/hdfs_client_hosts\", [])",
          "104:   hadoop_conf_dir = conf_select.get_hadoop_conf_dir()",
          "106:   mount_table_xml_inclusion_file_full_path = None",
          "",
          "[Removed Lines]",
          "101: has_hdfs_clients = not len(hdfs_client_hosts) == 0",
          "103: if has_hdfs_clients or dfs_type == 'HCFS':",
          "",
          "[Added Lines]",
          "100: namenode_hosts = default(\"/clusterHostInfo/namenode_hosts\", [])",
          "102: has_hdfs_clients = len(hdfs_client_hosts) > 0",
          "103: has_namenode = len(namenode_hosts) > 0",
          "104: has_hdfs = has_hdfs_clients or has_namenode",
          "106: if has_hdfs or dfs_type == 'HCFS':",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/shared_initialization.py||ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/shared_initialization.py": [
          "File: ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/shared_initialization.py -> ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/shared_initialization.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:   else:",
          "78:     Logger.warning(\"Parameter hadoop_conf_dir is missing or directory does not exist. This is expected if this host does not have any Hadoop components.\")",
          "82:     XmlConfig(\"core-site.xml\",",
          "83:               conf_dir=params.hadoop_conf_dir,",
          "84:               configurations=params.config['configurations']['core-site'],",
          "",
          "[Removed Lines]",
          "80:   if is_hadoop_conf_dir_present and (params.has_hdfs_clients or stackversion.find('Gluster') >= 0 or params.dfs_type == 'HCFS'):",
          "81:     # create core-site only if the hadoop config diretory exists",
          "",
          "[Added Lines]",
          "80:   if is_hadoop_conf_dir_present and (params.has_hdfs or stackversion.find('Gluster') >= 0 or params.dfs_type == 'HCFS'):",
          "81:     # create core-site only if the hadoop config directory exists",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/hook.py||ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/hook.py": [
          "File: ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/hook.py -> ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/hook.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     env.set_params(params)",
          "31:     setup_users()",
          "33:       setup_hadoop_env()",
          "34:     setup_java()",
          "",
          "[Removed Lines]",
          "32:     if params.has_hdfs_clients or params.dfs_type == 'HCFS':",
          "",
          "[Added Lines]",
          "32:     if params.has_hdfs or params.dfs_type == 'HCFS':",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/params.py||ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/params.py": [
          "File: ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/params.py -> ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/params.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "177: user_group = config['configurations']['cluster-env']['user_group']",
          "179: ganglia_server_hosts = default(\"/clusterHostInfo/ganglia_server_hosts\", [])",
          "180: hdfs_client_hosts = default(\"/clusterHostInfo/hdfs_client_hosts\", [])",
          "181: hbase_master_hosts = default(\"/clusterHostInfo/hbase_master_hosts\", [])",
          "182: oozie_servers = default(\"/clusterHostInfo/oozie_server\", [])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180: namenode_hosts = default(\"/clusterHostInfo/namenode_hosts\", [])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188: version_for_stack_feature_checks = get_stack_feature_version(config)",
          "192: has_ganglia_server = not len(ganglia_server_hosts) == 0",
          "193: has_tez = 'tez-site' in config['configurations']",
          "194: has_hbase_masters = not len(hbase_master_hosts) == 0",
          "",
          "[Removed Lines]",
          "191: has_hdfs_clients = not len(hdfs_client_hosts) == 0",
          "",
          "[Added Lines]",
          "192: has_namenode = len(namenode_hosts) > 0",
          "193: has_hdfs_clients = len(hdfs_client_hosts) > 0",
          "194: has_hdfs = has_hdfs_clients or has_namenode",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "242:   if found:",
          "243:     break",
          "246:     hadoop_conf_dir = conf_select.get_hadoop_conf_dir()",
          "247:     hadoop_conf_secure_dir = os.path.join(hadoop_conf_dir, \"secure\")",
          "",
          "[Removed Lines]",
          "245: if has_hdfs_clients or dfs_type == 'HCFS':",
          "",
          "[Added Lines]",
          "248: if has_hdfs or dfs_type == 'HCFS':",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/shared_initialization.py||ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/shared_initialization.py": [
          "File: ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/shared_initialization.py -> ambari-server/src/main/resources/stack-hooks/before-ANY/scripts/shared_initialization.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:       Logger.info('Skipping setting uid for hbase user as host is sys prepped')",
          "76:   if should_create_users_and_groups:",
          "78:       create_dfs_cluster_admins()",
          "79:     if params.has_tez and params.stack_version_formatted != \"\" and compare_versions(params.stack_version_formatted, '2.3') >= 0:",
          "80:       create_tez_am_view_acls()",
          "",
          "[Removed Lines]",
          "77:     if params.has_hdfs_clients:",
          "",
          "[Added Lines]",
          "77:     if params.has_hdfs:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:   import params",
          "181:   stackversion = params.stack_version_unformatted",
          "182:   Logger.info(\"FS Type: {0}\".format(params.dfs_type))",
          "184:     if params.security_enabled:",
          "185:       tc_owner = \"root\"",
          "186:     else:",
          "",
          "[Removed Lines]",
          "183:   if params.has_hdfs_clients or stackversion.find('Gluster') >= 0 or params.dfs_type == 'HCFS':",
          "",
          "[Added Lines]",
          "183:   if params.has_hdfs or stackversion.find('Gluster') >= 0 or params.dfs_type == 'HCFS':",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/stack-hooks/before-INSTALL/scripts/params.py||ambari-server/src/main/resources/stack-hooks/before-INSTALL/scripts/params.py": [
          "File: ambari-server/src/main/resources/stack-hooks/before-INSTALL/scripts/params.py -> ambari-server/src/main/resources/stack-hooks/before-INSTALL/scripts/params.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: hbase_master_hosts = default(\"/clusterHostInfo/hbase_master_hosts\", [])",
          "61: hs_host = default(\"/clusterHostInfo/historyserver_hosts\", [])",
          "62: jtnode_host = default(\"/clusterHostInfo/jtnode_hosts\", [])",
          "64: zk_hosts = default(\"/clusterHostInfo/zookeeper_server_hosts\", [])",
          "65: ganglia_server_hosts = default(\"/clusterHostInfo/ganglia_server_hosts\", [])",
          "66: storm_server_hosts = default(\"/clusterHostInfo/nimbus_hosts\", [])",
          "67: falcon_host =  default('/clusterHostInfo/falcon_server_hosts', [])",
          "69: has_sqoop_client = 'sqoop-env' in config['configurations']",
          "71: has_hs = not len(hs_host) == 0",
          "72: has_resourcemanager = not len(rm_host) == 0",
          "73: has_slaves = not len(slave_hosts) == 0",
          "",
          "[Removed Lines]",
          "63: namenode_host = default(\"/clusterHostInfo/namenode_hosts\", [])",
          "70: has_namenode = not len(namenode_host) == 0",
          "",
          "[Added Lines]",
          "63: namenode_hosts = default(\"/clusterHostInfo/namenode_hosts\", [])",
          "70: has_namenode = len(namenode_hosts) > 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81: has_falcon_server = not len(falcon_host) == 0",
          "82: has_tez = 'tez-site' in config['configurations']",
          "85: is_jtnode_master = hostname in jtnode_host",
          "86: is_rmnode_master = hostname in rm_host",
          "87: is_hsnode_master = hostname in hs_host",
          "",
          "[Removed Lines]",
          "84: is_namenode_master = hostname in namenode_host",
          "",
          "[Added Lines]",
          "84: is_namenode_master = hostname in namenode_hosts",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/stack-hooks/before-START/scripts/params.py||ambari-server/src/main/resources/stack-hooks/before-START/scripts/params.py": [
          "File: ambari-server/src/main/resources/stack-hooks/before-START/scripts/params.py -> ambari-server/src/main/resources/stack-hooks/before-START/scripts/params.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "111: hbase_master_hosts = default(\"/clusterHostInfo/hbase_master_hosts\", [])",
          "112: hs_host = default(\"/clusterHostInfo/historyserver_hosts\", [])",
          "113: jtnode_host = default(\"/clusterHostInfo/jtnode_hosts\", [])",
          "115: hdfs_client_hosts = default(\"/clusterHostInfo/hdfs_client_hosts\", [])",
          "116: zk_hosts = default(\"/clusterHostInfo/zookeeper_server_hosts\", [])",
          "117: ganglia_server_hosts = default(\"/clusterHostInfo/ganglia_server_hosts\", [])",
          "",
          "[Removed Lines]",
          "114: namenode_host = default(\"/clusterHostInfo/namenode_hosts\", [])",
          "",
          "[Added Lines]",
          "114: namenode_hosts = default(\"/clusterHostInfo/namenode_hosts\", [])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124: else:",
          "125:   ams_collector_hosts = \",\".join(default(\"/clusterHostInfo/metrics_collector_hosts\", []))",
          "129: has_resourcemanager = not len(rm_host) == 0",
          "130: has_slaves = not len(slave_hosts) == 0",
          "131: has_oozie_server = not len(oozie_servers) == 0",
          "",
          "[Removed Lines]",
          "127: has_namenode = not len(namenode_host) == 0",
          "128: has_hdfs_clients = not len(hdfs_client_hosts) == 0",
          "",
          "[Added Lines]",
          "127: has_namenode = len(namenode_hosts) > 0",
          "128: has_hdfs_clients = len(hdfs_client_hosts) > 0",
          "129: has_hdfs = has_hdfs_clients or has_namenode",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136: has_ganglia_server = not len(ganglia_server_hosts) == 0",
          "137: has_metric_collector = not len(ams_collector_hosts) == 0",
          "140: is_jtnode_master = hostname in jtnode_host",
          "141: is_rmnode_master = hostname in rm_host",
          "142: is_hsnode_master = hostname in hs_host",
          "",
          "[Removed Lines]",
          "139: is_namenode_master = hostname in namenode_host",
          "",
          "[Added Lines]",
          "140: is_namenode_master = hostname in namenode_hosts",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/stack-hooks/before-START/scripts/shared_initialization.py||ambari-server/src/main/resources/stack-hooks/before-START/scripts/shared_initialization.py": [
          "File: ambari-server/src/main/resources/stack-hooks/before-START/scripts/shared_initialization.py -> ambari-server/src/main/resources/stack-hooks/before-START/scripts/shared_initialization.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:     create_microsoft_r_dir()",
          "100:     # if WebHDFS is not enabled we need this jar to create hadoop folders and copy tarballs to HDFS.",
          "101:     if params.sysprep_skip_copy_fast_jar_hdfs:",
          "102:       print \"Skipping copying of fast-hdfs-resource.jar as host is sys prepped\"",
          "",
          "[Removed Lines]",
          "99:   if params.has_hdfs_clients or params.dfs_type == 'HCFS':",
          "",
          "[Added Lines]",
          "99:   if params.has_hdfs or params.dfs_type == 'HCFS':",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb97376408ecefb19d13ddc505934e33cc03184d",
      "candidate_info": {
        "commit_hash": "fb97376408ecefb19d13ddc505934e33cc03184d",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/fb97376408ecefb19d13ddc505934e33cc03184d",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java"
        ],
        "message": "AMBARI-24550. Yarn Timeline Service V2 Reader goes down after Ambari Upgrade from 2.7.0.0 to 2.7.1.0 (amagyar) (#2182) (#2503)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.AMBARI_INFRA_NEW_NAME;",
          "21: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.AMBARI_INFRA_OLD_NAME;",
          "23: import java.sql.SQLException;",
          "24: import java.util.Collections;",
          "25: import java.util.HashMap;",
          "26: import java.util.Map;",
          "27: import java.util.Set;",
          "28: import java.util.function.Function;",
          "29: import java.util.regex.Matcher;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.YARN_SERVICE;",
          "28: import java.util.Optional;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: import javax.persistence.TypedQuery;",
          "35: import org.apache.ambari.server.AmbariException;",
          "36: import org.apache.ambari.server.controller.AmbariManagementController;",
          "37: import org.apache.ambari.server.orm.DBAccessor;",
          "38: import org.apache.ambari.server.orm.dao.DaoUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import org.apache.ambari.server.ServiceComponentNotFoundException;",
          "39: import org.apache.ambari.server.ServiceNotFoundException;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42: import org.apache.ambari.server.state.Cluster;",
          "43: import org.apache.ambari.server.state.Clusters;",
          "44: import org.apache.ambari.server.state.Config;",
          "45: import org.apache.commons.collections.MapUtils;",
          "46: import org.slf4j.Logger;",
          "47: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: import org.apache.ambari.server.state.ServiceComponent;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "176:     renameAmbariInfraService();",
          "177:     removeLogSearchPatternConfigs();",
          "178:     updateSolrConfigurations();",
          "179:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184:     updateTimelineReaderAddress();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "274:     }",
          "275:   }",
          "277:   protected void renameAmbariInfraService() {",
          "278:     LOG.info(\"Renaming service AMBARI_INFRA to AMBARI_INFRA_SOLR in config group records\");",
          "279:     AmbariManagementController ambariManagementController = injector.getInstance(AmbariManagementController.class);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "288:   protected void updateTimelineReaderAddress() throws AmbariException {",
          "289:     Clusters clusters = injector.getInstance(AmbariManagementController.class).getClusters();",
          "290:     if (clusters == null || clusters.getClusters() == null) {",
          "291:       return;",
          "292:     }",
          "293:     for (Cluster cluster : clusters.getClusters().values()) {",
          "294:       Set<String> installedServices = cluster.getServices().keySet();",
          "295:       if (installedServices.contains(YARN_SERVICE) && cluster.getService(YARN_SERVICE).getServiceComponents().keySet().contains(\"TIMELINE_READER\")) {",
          "296:         String timelineReaderHost = hostNameOf(cluster, YARN_SERVICE, \"TIMELINE_READER\").orElse(\"localhost\");",
          "297:         updateProperty(cluster, \"yarn-site\", \"yarn.timeline-service.reader.webapp.address\", timelineReaderHost + \":8198\");",
          "298:         updateProperty(cluster, \"yarn-site\", \"yarn.timeline-service.reader.webapp.https.address\", timelineReaderHost + \":8199\");",
          "299:       }",
          "300:     }",
          "301:   }",
          "303:   private void updateProperty(Cluster cluster, String configType, String propertyName, String newValue) throws AmbariException {",
          "304:     Config config = cluster.getDesiredConfigByType(configType);",
          "305:     if (config == null) {",
          "306:       return;",
          "307:     }",
          "308:     String oldValue = config.getProperties().get(propertyName);",
          "309:     if (oldValue != null) {",
          "310:       Map<String, String> newProperty = new HashMap<>();",
          "311:       newProperty.put(propertyName, newValue);",
          "312:       updateConfigurationPropertiesForCluster(cluster, configType, newProperty, true, false);",
          "313:     }",
          "314:   }",
          "316:   private Optional<String> hostNameOf(Cluster cluster, String serviceName, String componentName) throws AmbariException {",
          "317:     try {",
          "318:       ServiceComponent component = cluster.getService(serviceName).getServiceComponent(componentName);",
          "319:       Set<String> hosts = component.getServiceComponentHosts().keySet();",
          "320:       return hosts.isEmpty() ? Optional.empty() : Optional.of(hosts.iterator().next());",
          "321:     } catch (ServiceComponentNotFoundException | ServiceNotFoundException e) {",
          "322:       return Optional.empty();",
          "323:     }",
          "324:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java -> ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:     Method renameAmbariInfraInConfigGroups = UpgradeCatalog271.class.getDeclaredMethod(\"renameAmbariInfraService\");",
          "96:     Method removeLogSearchPatternConfigs = UpgradeCatalog271.class.getDeclaredMethod(\"removeLogSearchPatternConfigs\");",
          "97:     Method updateSolrConfigurations = UpgradeCatalog271.class.getDeclaredMethod(\"updateSolrConfigurations\");",
          "99:     UpgradeCatalog271 upgradeCatalog271 = createMockBuilder(UpgradeCatalog271.class)",
          "100:       .addMockedMethod(updateRangerKmsDbUrl)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:     Method updateTimelineReaderAddress = UpgradeCatalog271.class.getDeclaredMethod(\"updateTimelineReaderAddress\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:       .addMockedMethod(renameAmbariInfraInConfigGroups)",
          "104:       .addMockedMethod(removeLogSearchPatternConfigs)",
          "105:       .addMockedMethod(updateSolrConfigurations)",
          "106:       .createMock();",
          "108:     upgradeCatalog271.addNewConfigurationsFromXml();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:       .addMockedMethod(updateTimelineReaderAddress)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:     upgradeCatalog271.updateSolrConfigurations();",
          "124:     expectLastCall().once();",
          "126:     replay(upgradeCatalog271);",
          "127:     upgradeCatalog271.executeDMLUpdates();",
          "128:     verify(upgradeCatalog271);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:     upgradeCatalog271.updateTimelineReaderAddress();",
          "129:     expectLastCall().once();",
          "",
          "---------------"
        ]
      }
    }
  ]
}