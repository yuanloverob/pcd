{
  "cve_id": "CVE-2024-41888",
  "cve_desc": "Missing Release of Resource after Effective Lifetime vulnerability in Apache Answer.\n\nThis issue affects Apache Answer: through 1.3.5.\n\nThe password reset link remains valid within its expiration period even after it has been used. This could potentially lead to the link being misused or hijacked.\nUsers are recommended to upgrade to version 1.3.6, which fixes the issue.",
  "repo": "apache/incubator-answer",
  "patch_hash": "2820efc454f5808974dce0aa99aac106be3f727b",
  "patch_info": {
    "commit_hash": "2820efc454f5808974dce0aa99aac106be3f727b",
    "repo": "apache/incubator-answer",
    "commit_url": "https://github.com/apache/incubator-answer/commit/2820efc454f5808974dce0aa99aac106be3f727b",
    "files": [
      "internal/base/constant/cache_key.go",
      "internal/repo/export/email_repo.go",
      "internal/schema/email_template.go",
      "internal/service/content/user_service.go",
      "internal/service/export/email_service.go",
      "internal/service/notification/invite_answer_notification.go",
      "internal/service/notification/new_answer_notification.go",
      "internal/service/notification/new_comment_notification.go",
      "internal/service/notification/new_question_notification.go",
      "internal/service/siteinfo/siteinfo_service.go",
      "internal/service/user_admin/user_backyard.go",
      "internal/service/user_external_login/user_external_login_service.go"
    ],
    "message": "feat(user): ensure that only one link is active at a time",
    "before_after_code_files": [
      "internal/base/constant/cache_key.go||internal/base/constant/cache_key.go",
      "internal/repo/export/email_repo.go||internal/repo/export/email_repo.go",
      "internal/schema/email_template.go||internal/schema/email_template.go",
      "internal/service/content/user_service.go||internal/service/content/user_service.go",
      "internal/service/export/email_service.go||internal/service/export/email_service.go",
      "internal/service/notification/invite_answer_notification.go||internal/service/notification/invite_answer_notification.go",
      "internal/service/notification/new_answer_notification.go||internal/service/notification/new_answer_notification.go",
      "internal/service/notification/new_comment_notification.go||internal/service/notification/new_comment_notification.go",
      "internal/service/notification/new_question_notification.go||internal/service/notification/new_question_notification.go",
      "internal/service/siteinfo/siteinfo_service.go||internal/service/siteinfo/siteinfo_service.go",
      "internal/service/user_admin/user_backyard.go||internal/service/user_admin/user_backyard.go",
      "internal/service/user_external_login/user_external_login_service.go||internal/service/user_external_login/user_external_login_service.go"
    ]
  },
  "patch_diff": {
    "internal/base/constant/cache_key.go||internal/base/constant/cache_key.go": [
      "File: internal/base/constant/cache_key.go -> internal/base/constant/cache_key.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "32:  AdminTokenCacheKey                         = \"answer:admin:token:\"",
      "33:  AdminTokenCacheTime                        = 7 * 24 * time.Hour",
      "34:  UserTokenMappingCacheKey                   = \"answer:user-token:mapping:\"",
      "35:  SiteInfoCacheKey                           = \"answer:site-info:\"",
      "36:  SiteInfoCacheTime                          = 1 * time.Hour",
      "37:  ConfigID2KEYCacheKeyPrefix                 = \"answer:config:id:\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35:  UserEmailCodeCacheKey                      = \"answer:user:email-code:\"",
      "36:  UserEmailCodeCacheTime                     = 10 * time.Minute",
      "37:  UserLatestEmailCodeCacheKey                = \"answer:user-id:email-code:\"",
      "",
      "---------------"
    ],
    "internal/repo/export/email_repo.go||internal/repo/export/email_repo.go": [
      "File: internal/repo/export/email_repo.go -> internal/repo/export/email_repo.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: import (",
      "23:  \"context\"",
      "24:  \"time\"",
      "26:  \"github.com/apache/incubator-answer/internal/base/data\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24:  \"github.com/apache/incubator-answer/internal/base/constant\"",
      "25:  \"github.com/tidwall/gjson\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42: }",
      "48:   return errors.InternalServer(reason.DatabaseError).WithError(err).WithStack()",
      "49:  }",
      "50:  return nil",
      "",
      "[Removed Lines]",
      "45: func (e *emailRepo) SetCode(ctx context.Context, code, content string, duration time.Duration) error {",
      "46:  err := e.data.Cache.SetString(ctx, code, content, duration)",
      "47:  if err != nil {",
      "",
      "[Added Lines]",
      "47: func (e *emailRepo) SetCode(ctx context.Context, userID, code, content string, duration time.Duration) error {",
      "50:  if err := e.data.Cache.SetString(ctx, constant.UserLatestEmailCodeCacheKey+userID, code, duration); err != nil {",
      "51:   return errors.InternalServer(reason.DatabaseError).WithError(err).WithStack()",
      "52:  }",
      "55:  if err := e.data.Cache.SetString(ctx, constant.UserEmailCodeCacheKey+code, content, duration); err != nil {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "54: func (e *emailRepo) VerifyCode(ctx context.Context, code string) (content string, err error) {",
      "56:  if err != nil {",
      "57:   return \"\", err",
      "58:  }",
      "59:  if !exist {",
      "60:   return \"\", nil",
      "61:  }",
      "62:  return content, nil",
      "63: }",
      "",
      "[Removed Lines]",
      "55:  content, exist, err := e.data.Cache.GetString(ctx, code)",
      "",
      "[Added Lines]",
      "64:  codeCacheKey := constant.UserEmailCodeCacheKey + code",
      "65:  content, exist, err := e.data.Cache.GetString(ctx, codeCacheKey)",
      "74:  _ = e.data.Cache.Del(ctx, codeCacheKey)",
      "79:  if skipValidationLatestCode := gjson.Get(content, \"skip_validation_latest_code\").Bool(); skipValidationLatestCode {",
      "80:   return content, nil",
      "81:  }",
      "82:  userID := gjson.Get(content, \"user_id\").String()",
      "85:  latestCode, exist, err := e.data.Cache.GetString(ctx, constant.UserLatestEmailCodeCacheKey+userID)",
      "86:  if err != nil {",
      "87:   return \"\", err",
      "88:  }",
      "89:  if !exist {",
      "90:   return \"\", nil",
      "91:  }",
      "94:  if latestCode != code {",
      "95:   return \"\", nil",
      "96:  }",
      "",
      "---------------"
    ],
    "internal/schema/email_template.go||internal/schema/email_template.go": [
      "File: internal/schema/email_template.go -> internal/schema/email_template.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:  NotificationSources []constant.NotificationSource `json:\"notification_source,omitempty\"`",
      "44:  BindingKey string `json:\"binding_key,omitempty\"`",
      "45: }",
      "47: func (r *EmailCodeContent) ToJSONString() string {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46:  SkipValidationLatestCode bool `json:\"skip_validation_latest_code\"`",
      "",
      "---------------"
    ],
    "internal/service/content/user_service.go||internal/service/content/user_service.go": [
      "File: internal/service/content/user_service.go -> internal/service/content/user_service.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "227:  if err != nil {",
      "228:   return err",
      "229:  }",
      "231:  return nil",
      "232: }",
      "",
      "[Removed Lines]",
      "230:  go us.emailService.SendAndSaveCode(ctx, req.Email, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "230:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, req.Email, title, body, code, data.ToJSONString())",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "450:  if err != nil {",
      "451:   return nil, nil, err",
      "452:  }",
      "455:  roleID, err := us.userRoleService.GetUserRole(ctx, userInfo.ID)",
      "456:  if err != nil {",
      "",
      "[Removed Lines]",
      "453:  go us.emailService.SendAndSaveCode(ctx, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "453:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "500:  if err != nil {",
      "501:   return err",
      "502:  }",
      "504:  return nil",
      "505: }",
      "",
      "[Removed Lines]",
      "503:  go us.emailService.SendAndSaveCode(ctx, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "503:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "621:  }",
      "622:  log.Infof(\"send email confirmation %s\", verifyEmailURL)",
      "625:  return nil, nil",
      "626: }",
      "",
      "[Removed Lines]",
      "624:  go us.emailService.SendAndSaveCode(ctx, req.Email, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "624:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, req.Email, title, body, code, data.ToJSONString())",
      "",
      "---------------"
    ],
    "internal/service/export/email_service.go||internal/service/export/email_service.go": [
      "File: internal/service/export/email_service.go -> internal/service/export/email_service.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "53: type EmailRepo interface {",
      "55:  VerifyCode(ctx context.Context, code string) (content string, err error)",
      "56: }",
      "",
      "[Removed Lines]",
      "54:  SetCode(ctx context.Context, code, content string, duration time.Duration) error",
      "",
      "[Added Lines]",
      "54:  SetCode(ctx context.Context, userID, code, content string, duration time.Duration) error",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "89: }",
      "94:  if err != nil {",
      "95:   log.Error(err)",
      "96:  }",
      "97: }",
      "103:  if err != nil {",
      "104:   log.Error(err)",
      "105:  }",
      "106: }",
      "109: func (es *EmailService) SendAndSaveCodeWithTime(",
      "113:  if err != nil {",
      "114:   log.Error(err)",
      "115:  }",
      "116: }",
      "",
      "[Removed Lines]",
      "92: func (es *EmailService) SaveCode(ctx context.Context, code, codeContent string) {",
      "93:  err := es.emailRepo.SetCode(ctx, code, codeContent, 10*time.Minute)",
      "100: func (es *EmailService) SendAndSaveCode(ctx context.Context, toEmailAddr, subject, body, code, codeContent string) {",
      "101:  es.Send(ctx, toEmailAddr, subject, body)",
      "102:  err := es.emailRepo.SetCode(ctx, code, codeContent, 10*time.Minute)",
      "110:  ctx context.Context, toEmailAddr, subject, body, code, codeContent string, duration time.Duration) {",
      "111:  es.Send(ctx, toEmailAddr, subject, body)",
      "112:  err := es.emailRepo.SetCode(ctx, code, codeContent, duration)",
      "",
      "[Added Lines]",
      "92: func (es *EmailService) SaveCode(ctx context.Context, userID, code, codeContent string) {",
      "93:  err := es.emailRepo.SetCode(ctx, userID, code, codeContent, constant.UserEmailCodeCacheTime)",
      "100: func (es *EmailService) SendAndSaveCode(ctx context.Context, userID, toEmailAddr, subject, body, code, codeContent string) {",
      "101:  err := es.emailRepo.SetCode(ctx, userID, code, codeContent, constant.UserEmailCodeCacheTime)",
      "104:   return",
      "106:  es.Send(ctx, toEmailAddr, subject, body)",
      "111:  ctx context.Context, userID, toEmailAddr, subject, body, code, codeContent string, duration time.Duration) {",
      "112:  err := es.emailRepo.SetCode(ctx, userID, code, codeContent, duration)",
      "115:   return",
      "117:  es.Send(ctx, toEmailAddr, subject, body)",
      "",
      "---------------"
    ],
    "internal/service/notification/invite_answer_notification.go||internal/service/notification/invite_answer_notification.go": [
      "File: internal/service/notification/invite_answer_notification.go -> internal/service/notification/invite_answer_notification.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "59:   NotificationSources: []constant.NotificationSource{",
      "60:    constant.InboxSource,",
      "61:   },",
      "64:  }",
      "",
      "[Removed Lines]",
      "62:   Email:  email,",
      "63:   UserID: userID,",
      "",
      "[Added Lines]",
      "62:   Email:                    email,",
      "63:   UserID:                   userID,",
      "64:   SkipValidationLatestCode: true,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:  }",
      "76:  ns.emailService.SendAndSaveCodeWithTime(",
      "78: }",
      "",
      "[Removed Lines]",
      "77:   ctx, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "[Added Lines]",
      "78:   ctx, userID, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "---------------"
    ],
    "internal/service/notification/new_answer_notification.go||internal/service/notification/new_answer_notification.go": [
      "File: internal/service/notification/new_answer_notification.go -> internal/service/notification/new_answer_notification.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "59:   NotificationSources: []constant.NotificationSource{",
      "60:    constant.InboxSource,",
      "61:   },",
      "64:  }",
      "",
      "[Removed Lines]",
      "62:   Email:  email,",
      "63:   UserID: userID,",
      "",
      "[Added Lines]",
      "62:   Email:                    email,",
      "63:   UserID:                   userID,",
      "64:   SkipValidationLatestCode: true,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:  }",
      "76:  ns.emailService.SendAndSaveCodeWithTime(",
      "78: }",
      "",
      "[Removed Lines]",
      "77:   ctx, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "[Added Lines]",
      "78:   ctx, userID, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "---------------"
    ],
    "internal/service/notification/new_comment_notification.go||internal/service/notification/new_comment_notification.go": [
      "File: internal/service/notification/new_comment_notification.go -> internal/service/notification/new_comment_notification.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "59:   NotificationSources: []constant.NotificationSource{",
      "60:    constant.InboxSource,",
      "61:   },",
      "64:  }",
      "66:  if len(lang) > 0 {",
      "",
      "[Removed Lines]",
      "62:   Email:  email,",
      "63:   UserID: userID,",
      "",
      "[Added Lines]",
      "62:   Email:                    email,",
      "63:   UserID:                   userID,",
      "64:   SkipValidationLatestCode: true,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "73:  }",
      "75:  ns.emailService.SendAndSaveCodeWithTime(",
      "77: }",
      "",
      "[Removed Lines]",
      "76:   ctx, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "[Added Lines]",
      "77:   ctx, userID, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "---------------"
    ],
    "internal/service/notification/new_question_notification.go||internal/service/notification/new_question_notification.go": [
      "File: internal/service/notification/new_question_notification.go -> internal/service/notification/new_question_notification.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "189:    constant.AllNewQuestionSource,",
      "190:    constant.AllNewQuestionForFollowingTagsSource,",
      "191:   },",
      "192:  }",
      "193:  ns.emailService.SendAndSaveCodeWithTime(",
      "195: }",
      "197: func (ns *ExternalNotificationService) syncNewQuestionNotificationToPlugin(ctx context.Context,",
      "",
      "[Removed Lines]",
      "194:   ctx, userInfo.EMail, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "[Added Lines]",
      "192:   SkipValidationLatestCode: true,",
      "195:   ctx, userInfo.ID, userInfo.EMail, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "---------------"
    ],
    "internal/service/siteinfo/siteinfo_service.go||internal/service/siteinfo/siteinfo_service.go": [
      "File: internal/service/siteinfo/siteinfo_service.go -> internal/service/siteinfo/siteinfo_service.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "274:   if err != nil {",
      "275:    return err",
      "276:   }",
      "278:  }",
      "279:  return nil",
      "280: }",
      "",
      "[Removed Lines]",
      "277:   go s.emailService.SendAndSaveCode(ctx, req.TestEmailRecipient, title, body, \"\", \"\")",
      "",
      "[Added Lines]",
      "277:   go s.emailService.Send(ctx, req.TestEmailRecipient, title, body)",
      "",
      "---------------"
    ],
    "internal/service/user_admin/user_backyard.go||internal/service/user_admin/user_backyard.go": [
      "File: internal/service/user_admin/user_backyard.go -> internal/service/user_admin/user_backyard.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "514: func (us *UserAdminService) GetUserActivation(ctx context.Context, req *schema.GetUserActivationReq) (",
      "515:  resp *schema.GetUserActivationResp, err error) {",
      "517:  if err != nil {",
      "518:   return nil, err",
      "519:  }",
      "",
      "[Removed Lines]",
      "516:  user, exist, err := us.userRepo.GetUserInfo(ctx, req.UserID)",
      "",
      "[Added Lines]",
      "516:  userInfo, exist, err := us.userRepo.GetUserInfo(ctx, req.UserID)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "527:  }",
      "529:  data := &schema.EmailCodeContent{",
      "532:  }",
      "533:  code := uuid.NewString()",
      "535:  resp = &schema.GetUserActivationResp{",
      "536:   ActivationURL: fmt.Sprintf(\"%s/users/account-activation?code=%s\", general.SiteUrl, code),",
      "537:  }",
      "",
      "[Removed Lines]",
      "530:   Email:  user.EMail,",
      "531:   UserID: user.ID,",
      "534:  us.emailService.SaveCode(ctx, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "530:   Email:  userInfo.EMail,",
      "531:   UserID: userInfo.ID,",
      "534:  us.emailService.SaveCode(ctx, userInfo.ID, code, data.ToJSONString())",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "542: func (us *UserAdminService) SendUserActivation(ctx context.Context, req *schema.SendUserActivationReq) (err error) {",
      "544:  if err != nil {",
      "545:   return err",
      "546:  }",
      "",
      "[Removed Lines]",
      "543:  user, exist, err := us.userRepo.GetUserInfo(ctx, req.UserID)",
      "",
      "[Added Lines]",
      "543:  userInfo, exist, err := us.userRepo.GetUserInfo(ctx, req.UserID)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "554:  }",
      "556:  data := &schema.EmailCodeContent{",
      "559:  }",
      "560:  code := uuid.NewString()",
      "563:  verifyEmailURL := fmt.Sprintf(\"%s/users/account-activation?code=%s\", general.SiteUrl, code)",
      "564:  title, body, err := us.emailService.RegisterTemplate(ctx, verifyEmailURL)",
      "565:  if err != nil {",
      "566:   return err",
      "567:  }",
      "569:  return nil",
      "570: }",
      "",
      "[Removed Lines]",
      "557:   Email:  user.EMail,",
      "558:   UserID: user.ID,",
      "561:  us.emailService.SaveCode(ctx, code, data.ToJSONString())",
      "568:  go us.emailService.SendAndSaveCode(ctx, user.EMail, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "557:   Email:  userInfo.EMail,",
      "558:   UserID: userInfo.ID,",
      "567:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "---------------"
    ],
    "internal/service/user_external_login/user_external_login_service.go||internal/service/user_external_login/user_external_login_service.go": [
      "File: internal/service/user_external_login/user_external_login_service.go -> internal/service/user_external_login/user_external_login_service.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:  if err != nil {",
      "329:   return nil, err",
      "330:  }",
      "332:  return resp, nil",
      "333: }",
      "",
      "[Removed Lines]",
      "331:  go us.emailService.SendAndSaveCode(ctx, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "331:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "82e656821dcce1c2ae58c681065db17c169aa4dc",
      "candidate_info": {
        "commit_hash": "82e656821dcce1c2ae58c681065db17c169aa4dc",
        "repo": "apache/incubator-answer",
        "commit_url": "https://github.com/apache/incubator-answer/commit/82e656821dcce1c2ae58c681065db17c169aa4dc",
        "files": [
          "cmd/command.go",
          "internal/cli/i18n.go",
          "internal/cli/install.go"
        ],
        "message": "feat(cmd): add i18n command",
        "before_after_code_files": [
          "cmd/command.go||cmd/command.go",
          "internal/cli/i18n.go||internal/cli/i18n.go",
          "internal/cli/install.go||internal/cli/install.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/answer/pull/1050"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cmd/command.go||cmd/command.go": [
          "File: cmd/command.go -> cmd/command.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  upgradeVersion string",
          "51:  configFields []string",
          "52: )",
          "54: func init() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:  i18nSourcePath string",
          "55:  i18nTargetPath string",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:  configCmd.Flags().StringSliceVarP(&configFields, \"with\", \"w\", []string{}, \"the fields that need to be set to the default value, eg: -w allow_password_login\")",
          "72:   rootCmd.AddCommand(cmd)",
          "73:  }",
          "74: }",
          "",
          "[Removed Lines]",
          "71:  for _, cmd := range []*cobra.Command{initCmd, checkCmd, runCmd, dumpCmd, upgradeCmd, buildCmd, pluginCmd, configCmd} {",
          "",
          "[Added Lines]",
          "75:  i18nCmd.Flags().StringVarP(&i18nSourcePath, \"source\", \"s\", \"\", \"i18n source path, eg: -f ./i18n/source\")",
          "77:  i18nCmd.Flags().StringVarP(&i18nTargetPath, \"target\", \"t\", \"\", \"i18n target path, eg: -t ./i18n/target\")",
          "79:  for _, cmd := range []*cobra.Command{initCmd, checkCmd, runCmd, dumpCmd, upgradeCmd, buildCmd, pluginCmd, configCmd, i18nCmd} {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "271:    }",
          "272:   },",
          "273:  }",
          "274: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284:  i18nCmd = &cobra.Command{",
          "285:   Use:   \"i18n\",",
          "286:   Short: \"overwrite i18n files\",",
          "287:   Long:  `Merge i18n files from plugins to original i18n files. It will overwrite the original i18n files`,",
          "288:   Run: func(_ *cobra.Command, _ []string) {",
          "289:    if err := cli.ReplaceI18nFilesLocal(i18nTargetPath); err != nil {",
          "290:     fmt.Printf(\"replace i18n files failed %v\", err)",
          "291:    } else {",
          "292:     fmt.Printf(\"replace i18n files successfully\\n\")",
          "293:    }",
          "295:    fmt.Printf(\"try to merge i18n files from %q to %q\\n\", i18nSourcePath, i18nTargetPath)",
          "297:    if err := cli.MergeI18nFilesLocal(i18nTargetPath, i18nSourcePath); err != nil {",
          "298:     fmt.Printf(\"merge i18n files failed %v\", err)",
          "299:    } else {",
          "300:     fmt.Printf(\"merge i18n files successfully\\n\")",
          "301:    }",
          "302:   },",
          "303:  }",
          "",
          "---------------"
        ],
        "internal/cli/i18n.go||internal/cli/i18n.go": [
          "File: internal/cli/i18n.go -> internal/cli/i18n.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package cli",
          "3: import (",
          "4:  \"fmt\"",
          "5:  \"github.com/apache/incubator-answer/i18n\"",
          "6:  \"github.com/apache/incubator-answer/pkg/dir\"",
          "7:  \"github.com/apache/incubator-answer/pkg/writer\"",
          "8:  \"gopkg.in/yaml.v3\"",
          "9:  \"os\"",
          "10:  \"path/filepath\"",
          "11:  \"strings\"",
          "12: )",
          "14: type YamlPluginContent struct {",
          "15:  Plugin map[string]any `yaml:\"plugin\"`",
          "16: }",
          "19: func ReplaceI18nFilesLocal(i18nDir string) error {",
          "20:  i18nList, err := i18n.I18n.ReadDir(\".\")",
          "21:  if err != nil {",
          "22:   fmt.Println(err.Error())",
          "23:   return err",
          "24:  }",
          "25:  fmt.Printf(\"[i18n] find i18n bundle %d\\n\", len(i18nList))",
          "26:  for _, item := range i18nList {",
          "27:   path := filepath.Join(i18nDir, item.Name())",
          "28:   content, err := i18n.I18n.ReadFile(item.Name())",
          "29:   if err != nil {",
          "30:    continue",
          "31:   }",
          "32:   exist := dir.CheckFileExist(path)",
          "33:   if exist {",
          "34:    fmt.Printf(\"[i18n] install %s file exist, try to replace it\\n\", item.Name())",
          "35:    if err = os.Remove(path); err != nil {",
          "36:     fmt.Println(err)",
          "37:    }",
          "38:   }",
          "39:   fmt.Printf(\"[i18n] install %s bundle...\\n\", item.Name())",
          "40:   err = writer.WriteFile(path, string(content))",
          "41:   if err != nil {",
          "42:    fmt.Printf(\"[i18n] install %s bundle fail: %s\\n\", item.Name(), err.Error())",
          "43:   } else {",
          "44:    fmt.Printf(\"[i18n] install %s bundle success\\n\", item.Name())",
          "45:   }",
          "46:  }",
          "47:  return nil",
          "48: }",
          "51: func MergeI18nFilesLocal(originalI18nDir, targetI18nDir string) (err error) {",
          "52:  pluginAllTranslations := make(map[string]*YamlPluginContent)",
          "54:  err = findI18nFileInDir(pluginAllTranslations, targetI18nDir)",
          "55:  if err != nil {",
          "56:   return err",
          "57:  }",
          "59:  entries, err := os.ReadDir(originalI18nDir)",
          "60:  if err != nil {",
          "61:   return err",
          "62:  }",
          "64:  for _, file := range entries {",
          "66:   if file.IsDir() {",
          "67:    continue",
          "68:   }",
          "70:   filename := file.Name()",
          "71:   if filepath.Ext(filename) != \".yaml\" && filename != \"i18n.yaml\" {",
          "72:    continue",
          "73:   }",
          "76:   if pluginAllTranslations[filename] == nil {",
          "77:    continue",
          "78:   }",
          "80:   out, _ := yaml.Marshal(pluginAllTranslations[filename])",
          "82:   buf, err := os.OpenFile(filepath.Join(originalI18nDir, filename), os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)",
          "83:   if err != nil {",
          "84:    fmt.Printf(\"[i18n] read translation file failed: %s %s\\n\", filename, err)",
          "85:    continue",
          "86:   }",
          "88:   _, _ = buf.WriteString(\"\\n\")",
          "89:   _, _ = buf.Write(out)",
          "90:   _ = buf.Close()",
          "91:   fmt.Printf(\"[i18n] merge i18n file: %s success\\n\", filename)",
          "92:  }",
          "94:  return nil",
          "95: }",
          "98: func findI18nFileInDir(pluginAllTranslations map[string]*YamlPluginContent, i18nDir string) error {",
          "100:  dirBase := filepath.Base(i18nDir)",
          "101:  if dirBase != \"i18n\" {",
          "102:   if strings.HasPrefix(dirBase, \".\") {",
          "103:    return nil",
          "104:   }",
          "106:   targetDirs, err := os.ReadDir(i18nDir)",
          "107:   if err != nil {",
          "108:    return err",
          "109:   }",
          "111:   for _, targetDir := range targetDirs {",
          "112:    if targetDir.IsDir() {",
          "113:     if err := findI18nFileInDir(pluginAllTranslations, filepath.Join(i18nDir, targetDir.Name())); err != nil {",
          "114:      fmt.Printf(\"[i18n] find i18n file in dir failed: %s %s\\n\", targetDir.Name(), err)",
          "115:     }",
          "116:    }",
          "117:   }",
          "118:   return nil",
          "119:  }",
          "121:  fmt.Printf(\"[i18n] find i18n file in dir: %s\\n\", i18nDir)",
          "124:  entries, err := os.ReadDir(i18nDir)",
          "125:  if err != nil {",
          "126:   return err",
          "127:  }",
          "129:  for _, file := range entries {",
          "131:   if file.IsDir() {",
          "132:    continue",
          "133:   }",
          "135:   if filepath.Ext(file.Name()) != \".yaml\" {",
          "136:    continue",
          "137:   }",
          "138:   buf, err := os.ReadFile(filepath.Join(i18nDir, file.Name()))",
          "139:   if err != nil {",
          "140:    fmt.Printf(\"[i18n] read translation file failed: %s %s\\n\", file.Name(), err)",
          "141:    continue",
          "142:   }",
          "144:   translation := &YamlPluginContent{}",
          "145:   if err = yaml.Unmarshal(buf, translation); err != nil {",
          "146:    fmt.Printf(\"[i18n] unmarshal translation file failed: %s %s\\n\", file.Name(), err)",
          "147:    continue",
          "148:   }",
          "150:   if pluginAllTranslations[file.Name()] == nil {",
          "151:    pluginAllTranslations[file.Name()] = &YamlPluginContent{Plugin: make(map[string]any)}",
          "152:   }",
          "153:   for k, v := range translation.Plugin {",
          "154:    pluginAllTranslations[file.Name()].Plugin[k] = v",
          "155:   }",
          "156:  }",
          "157:  return nil",
          "158: }",
          "",
          "---------------"
        ],
        "internal/cli/install.go||internal/cli/install.go": [
          "File: internal/cli/install.go -> internal/cli/install.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  \"fmt\"",
          "24:  \"os\"",
          "25:  \"path/filepath\"",
          "27:  \"github.com/apache/incubator-answer/configs\"",
          "28:  \"github.com/apache/incubator-answer/i18n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:  \"sync\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: )",
          "39: var (",
          "44: )",
          "",
          "[Removed Lines]",
          "40:  ConfigFileDir  = \"/conf/\"",
          "41:  UploadFilePath = \"/uploads/\"",
          "42:  I18nPath       = \"/i18n/\"",
          "43:  CacheDir       = \"/cache/\"",
          "",
          "[Added Lines]",
          "41:  ConfigFileDir     = \"/conf/\"",
          "42:  UploadFilePath    = \"/uploads/\"",
          "43:  I18nPath          = \"/i18n/\"",
          "44:  CacheDir          = \"/cache/\"",
          "45:  formatAllPathONCE sync.Once",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49: }",
          "51: func FormatAllPath(dataDirPath string) {",
          "56: }",
          "",
          "[Removed Lines]",
          "52:  ConfigFileDir = filepath.Join(dataDirPath, ConfigFileDir)",
          "53:  UploadFilePath = filepath.Join(dataDirPath, UploadFilePath)",
          "54:  I18nPath = filepath.Join(dataDirPath, I18nPath)",
          "55:  CacheDir = filepath.Join(dataDirPath, CacheDir)",
          "",
          "[Added Lines]",
          "54:  formatAllPathONCE.Do(func() {",
          "55:   ConfigFileDir = filepath.Join(dataDirPath, ConfigFileDir)",
          "56:   UploadFilePath = filepath.Join(dataDirPath, UploadFilePath)",
          "57:   I18nPath = filepath.Join(dataDirPath, I18nPath)",
          "58:   CacheDir = filepath.Join(dataDirPath, CacheDir)",
          "59:  })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83a8e9eb0926de1e345661c72dc0a629c431d735",
      "candidate_info": {
        "commit_hash": "83a8e9eb0926de1e345661c72dc0a629c431d735",
        "repo": "apache/incubator-answer",
        "commit_url": "https://github.com/apache/incubator-answer/commit/83a8e9eb0926de1e345661c72dc0a629c431d735",
        "files": [
          "ui/src/components/TagSelector/index.scss",
          "ui/src/components/TagSelector/index.tsx"
        ],
        "message": "fix: tagSelector show all recommended tags",
        "before_after_code_files": [
          "ui/src/components/TagSelector/index.scss||ui/src/components/TagSelector/index.scss",
          "ui/src/components/TagSelector/index.tsx||ui/src/components/TagSelector/index.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/answer/pull/1050"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ui/src/components/TagSelector/index.scss||ui/src/components/TagSelector/index.scss": [
          "File: ui/src/components/TagSelector/index.scss -> ui/src/components/TagSelector/index.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: .tag-selector-wrap {",
          "21:   .dropdown-menu {",
          "22:     min-width: 15rem;",
          "23:   }",
          "24:   .dropdown-toggle {",
          "25:     &::after {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:     max-height: 178px;",
          "24:     overflow-y: auto;",
          "",
          "---------------"
        ],
        "ui/src/components/TagSelector/index.tsx||ui/src/components/TagSelector/index.tsx": [
          "File: ui/src/components/TagSelector/index.tsx -> ui/src/components/TagSelector/index.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:     queryTags(str).then((res) => {",
          "155:       const tagArray: Type.Tag[] = filterTags(res || []);",
          "156:       if (str === '') {",
          "158:       }",
          "159:       handleMenuShow(tagArray.length > 0);",
          "161:     });",
          "162:   };",
          "",
          "[Removed Lines]",
          "157:         setRequiredTags(res?.length > 5 ? res.slice(0, 5) : res);",
          "160:       setTags(tagArray?.length > 5 ? tagArray.slice(0, 5) : tagArray);",
          "",
          "[Added Lines]",
          "157:         setRequiredTags(res);",
          "160:       setTags(tagArray);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ed0ab480ff3df549ca556ec35cca4b7a31101cf",
      "candidate_info": {
        "commit_hash": "9ed0ab480ff3df549ca556ec35cca4b7a31101cf",
        "repo": "apache/incubator-answer",
        "commit_url": "https://github.com/apache/incubator-answer/commit/9ed0ab480ff3df549ca556ec35cca4b7a31101cf",
        "files": [
          "ui/src/utils/common.ts"
        ],
        "message": "fix: delete log",
        "before_after_code_files": [
          "ui/src/utils/common.ts||ui/src/utils/common.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/answer/pull/1050"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ui/src/utils/common.ts||ui/src/utils/common.ts": [
          "File: ui/src/utils/common.ts -> ui/src/utils/common.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "189: }",
          "191: function formatDiffPart(part: any, className: string): string {",
          "193:   if (part.value.replace(/\\n/g, '').length <= 0) {",
          "194:     if (part.value.match(/\\n/g)?.length > 1) {",
          "195:       const value = part.value.replace(/\\n/, '');",
          "",
          "[Removed Lines]",
          "192:   console.log('333333', part);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec16ac9ad2e1eeaf9f39db29589f69edebce5e47",
      "candidate_info": {
        "commit_hash": "ec16ac9ad2e1eeaf9f39db29589f69edebce5e47",
        "repo": "apache/incubator-answer",
        "commit_url": "https://github.com/apache/incubator-answer/commit/ec16ac9ad2e1eeaf9f39db29589f69edebce5e47",
        "files": [
          "ui/package.json",
          "ui/pnpm-lock.yaml",
          "ui/scripts/plugin.js"
        ],
        "message": "chore(scripts): Remove humps dependency",
        "before_after_code_files": [
          "ui/scripts/plugin.js||ui/scripts/plugin.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/answer/pull/1050"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ui/scripts/plugin.js||ui/scripts/plugin.js": [
          "File: ui/scripts/plugin.js -> ui/scripts/plugin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: const path = require('path');",
          "21: const fs = require('fs');",
          "24: const pluginPath = path.join(__dirname, '../src/plugins');",
          "25: const pluginFolders = fs.readdirSync(pluginPath);",
          "27: function resetPackageJson() {",
          "28:   const packageJsonPath = path.join(__dirname, '..', 'package.json');",
          "29:   const packageJsonContent = require(packageJsonPath);",
          "",
          "[Removed Lines]",
          "22: const humps = require('humps');",
          "",
          "[Added Lines]",
          "26: function pascalize(str) {",
          "27:   return str.split(/[_-]/).map((part) => part.charAt(0).toUpperCase() + part.slice(1)).join('');",
          "28: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:   const indexTsPath = path.join(pluginPath, 'index.ts');",
          "60:   const indexTsContent = fs.readFileSync(indexTsPath, 'utf-8');",
          "61:   const lines = indexTsContent.split('\\n');",
          "63:   const importLine = `export { default as ${ComponentName} } from '${packageName}';`;",
          "64:   if (!lines.includes(importLine)) {",
          "65:     lines.push(importLine);",
          "",
          "[Removed Lines]",
          "62:   const ComponentName = humps.pascalize(packageName);",
          "",
          "[Added Lines]",
          "65:   const ComponentName = pascalize(packageName);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d580cab48c775800a016f9f58ec7281d2c88c52e",
      "candidate_info": {
        "commit_hash": "d580cab48c775800a016f9f58ec7281d2c88c52e",
        "repo": "apache/incubator-answer",
        "commit_url": "https://github.com/apache/incubator-answer/commit/d580cab48c775800a016f9f58ec7281d2c88c52e",
        "files": [
          "ui/public/index.html"
        ],
        "message": "fix: test add",
        "before_after_code_files": [
          "ui/public/index.html||ui/public/index.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/answer/pull/1050"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ui/public/index.html||ui/public/index.html": [
          "File: ui/public/index.html -> ui/public/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   <body>",
          "31:     <noscript>You need to enable JavaScript to run this app.</noscript>",
          "32:     <div id=\"root\">",
          "37:       <div id=\"spin-mask\">",
          "38:         <noscript>",
          "39:           <style>",
          "",
          "[Removed Lines]",
          "33:       <!--customize_header-->",
          "34:       \u8fd9\u90e8\u5206\u662fheader233",
          "35:       <h1>123</h1>",
          "36:       <!--customize_header-->",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}