{
  "cve_id": "CVE-2022-41711",
  "cve_desc": "Badaso version 2.6.0 allows an unauthenticated remote attacker to execute arbitrary code remotely on the server. This is possible because the application does not properly validate the data uploaded by users.",
  "repo": "uasoft-indonesia/badaso",
  "patch_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
  "patch_info": {
    "commit_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
    "repo": "uasoft-indonesia/badaso",
    "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/22250eca7c364d991ce9e0a723941eae4889d6f9",
    "files": [
      "src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue"
    ],
    "message": "Merge pull request #807 from uasoft-indonesia/bugfix/v2/filter-mimeType\n\nBugfix[v2] add filter mimeType",
    "before_after_code_files": [
      "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue"
    ]
  },
  "patch_diff": {
    "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue": [
      "File: src/resources/js/components/BadasoUploadFile.vue -> src/resources/js/components/BadasoUploadFile.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "336:           });",
      "337:           return;",
      "338:         }",
      "340:         this.uploadFile(files[0]);",
      "341:       }",
      "342:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "339:         if (!this.availableMimetypes.file.validMime.includes(files[0].type)) {",
      "340:           this.$vs.notify({",
      "341:             title: this.$t(\"alert.danger\"),",
      "342:             text: \"File type not allowed\",",
      "343:             color: \"danger\",",
      "344:           });",
      "345:           return;",
      "346:         }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadFileMultiple.vue -> src/resources/js/components/BadasoUploadFileMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "367:             });",
      "368:             return;",
      "369:           }",
      "371:           this.uploadFile(file);",
      "372:         }",
      "373:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "370:           if (!this.availableMimetypes.file.validMime.includes(file.type)) {",
      "371:             this.$vs.notify({",
      "372:               title: this.$t(\"alert.danger\"),",
      "373:               text: \"File type not allowed\",",
      "374:               color: \"danger\",",
      "375:             });",
      "376:             return;",
      "377:           }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue": [
      "File: src/resources/js/components/BadasoUploadImage.vue -> src/resources/js/components/BadasoUploadImage.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "380:           });",
      "381:           return;",
      "382:         }",
      "384:         this.uploadImage(files[0]);",
      "385:       }",
      "386:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "383:         if (!this.availableMimetypes.image.validMime.includes(files[0].type)){",
      "384:           this.$vs.notify({",
      "385:             title: this.$t(\"alert.danger\"),",
      "386:             text: \"File type not allowed\",",
      "387:             color: \"danger\",",
      "388:           });",
      "389:           return;",
      "390:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "421:     uploadImage(file) {",
      "422:       const files = new FormData();",
      "423:       files.append(\"upload\", file);",
      "425:       files.append(\"working_dir\", this.getActiveFolder);",
      "426:       this.$api.badasoFile",
      "427:         .uploadUsingLfm(files)",
      "",
      "[Removed Lines]",
      "424:       files.append(\"type\", \"image\");",
      "",
      "[Added Lines]",
      "431:       files.append(\"type\", file.type);",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadImageMultiple.vue -> src/resources/js/components/BadasoUploadImageMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:             });",
      "396:             return;",
      "397:           }",
      "399:           this.uploadImage(file);",
      "400:         }",
      "401:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398:           if (!this.availableMimetypes.image.validMime.includes(file.type)) {",
      "399:             this.$vs.notify({",
      "400:               title: this.$t(\"alert.danger\"),",
      "401:               text: \"File type not allowed\",",
      "402:               color: \"danger\",",
      "403:             });",
      "404:             return;",
      "405:           }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8ea2dff4d24a0ec692509b4d8014b126b9e6df7f",
      "candidate_info": {
        "commit_hash": "8ea2dff4d24a0ec692509b4d8014b126b9e6df7f",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/8ea2dff4d24a0ec692509b4d8014b126b9e6df7f",
        "files": [
          "src/ContentManager/ContentGenerator.php",
          "src/Models/MenuItem.php"
        ],
        "message": "fix oreder seeder menu item",
        "before_after_code_files": [
          "src/ContentManager/ContentGenerator.php||src/ContentManager/ContentGenerator.php",
          "src/Models/MenuItem.php||src/Models/MenuItem.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/ContentManager/ContentGenerator.php||src/ContentManager/ContentGenerator.php": [
          "File: src/ContentManager/ContentGenerator.php -> src/ContentManager/ContentGenerator.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:                     ->where('url', '%s')",
          "29:                     ->first();",
          "33:                 if (!is_null($menu_item)) {",
          "34:                     $menu_item->fill([",
          "",
          "[Removed Lines]",
          "31:                 $order = $menu_item->highestOrderMenuItem();",
          "",
          "[Added Lines]",
          "31:                 $order = Badaso::model('MenuItem')->highestOrderMenuItem($menu->id);",
          "",
          "---------------"
        ],
        "src/Models/MenuItem.php||src/Models/MenuItem.php": [
          "File: src/Models/MenuItem.php -> src/Models/MenuItem.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:     public function __construct(array $attributes = [])",
          "18:     {",
          "19:         $prefix = config('badaso.database.prefix');",
          "21:         parent::__construct($attributes);",
          "22:     }",
          "",
          "[Removed Lines]",
          "20:         $this->table = $prefix.'menu_items';",
          "",
          "[Added Lines]",
          "20:         $this->table = $prefix . 'menu_items';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:         'order',",
          "34:     ];",
          "37:     {",
          "38:         $order = 1;",
          "42:         if ($parent != null) {",
          "43:             $item = $item->where('parent_id', $parent);",
          "44:         }",
          "46:         $item = $item->orderBy('order', 'DESC')",
          "49:         if (!is_null($item)) {",
          "50:             $order = intval($item->order) + 1;",
          "",
          "[Removed Lines]",
          "36:     public function highestOrderMenuItem($parent = null)",
          "40:         $item = self::where('menu_id', $this->menu_id);",
          "47:         ->first();",
          "",
          "[Added Lines]",
          "36:     public function highestOrderMenuItem($menu_id = null, $parent = null)",
          "40:         $menu_id = $menu_id != null ? $menu_id : $this->menu_id;",
          "41:         $item = self::where('menu_id', $menu_id);",
          "48:             ->first();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0efa0f05bbc524b9d41060ad820844487ad67460",
      "candidate_info": {
        "commit_hash": "0efa0f05bbc524b9d41060ad820844487ad67460",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/0efa0f05bbc524b9d41060ad820844487ad67460",
        "files": [
          "src/Controllers/Controller.php",
          "src/Helpers/GetData.php",
          "src/resources/js/pages/crud-generated/add.vue",
          "src/resources/js/pages/crud-generated/browse.vue",
          "src/resources/js/pages/crud-generated/read.vue",
          "tests/Feature/BadasoApiCrudManagementTest.php"
        ],
        "message": "fix bug upload multiple file",
        "before_after_code_files": [
          "src/Controllers/Controller.php||src/Controllers/Controller.php",
          "src/Helpers/GetData.php||src/Helpers/GetData.php",
          "src/resources/js/pages/crud-generated/add.vue||src/resources/js/pages/crud-generated/add.vue",
          "src/resources/js/pages/crud-generated/browse.vue||src/resources/js/pages/crud-generated/browse.vue",
          "src/resources/js/pages/crud-generated/read.vue||src/resources/js/pages/crud-generated/read.vue",
          "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Controllers/Controller.php||src/Controllers/Controller.php": [
          "File: src/Controllers/Controller.php -> src/Controllers/Controller.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         if ($user = auth()->user()) {",
          "41:             $permissions = DB::SELECT('",
          "42:                 SELECT *",
          "48:                 WHERE u.id = :user_id",
          "49:                 AND p.key = :permission",
          "50:             ', [",
          "51:                 'user_id'    => $user->id,",
          "53:             ]);",
          "55:             if (count($permissions) > 0) {",
          "",
          "[Removed Lines]",
          "43:                 FROM '.$prefix.'permissions p",
          "44:                 JOIN '.$prefix.'role_permissions rp ON p.id = rp.permission_id",
          "45:                 JOIN '.$prefix.'roles r ON rp.role_id  = r.id",
          "46:                 JOIN '.$prefix.'user_roles ur ON r.id = ur.role_id",
          "47:                 JOIN '.$prefix.'users u ON ur.user_id = u.id",
          "52:                 'permission' => $method.'_'.$data_type->name,",
          "",
          "[Added Lines]",
          "43:                 FROM ' . $prefix . 'permissions p",
          "44:                 JOIN ' . $prefix . 'role_permissions rp ON p.id = rp.permission_id",
          "45:                 JOIN ' . $prefix . 'roles r ON rp.role_id  = r.id",
          "46:                 JOIN ' . $prefix . 'user_roles ur ON r.id = ur.role_id",
          "47:                 JOIN ' . $prefix . 'users u ON ur.user_id = u.id",
          "52:                 'permission' => $method . '_' . $data_type->name,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:                     $destination_table_column = array_key_exists('destination_table_column', $relation_detail) ? $relation_detail['destination_table_column'] : null;",
          "96:                     if ($relation_type == 'belongs_to') {",
          "98:                     }",
          "99:                 }",
          "100:             }",
          "",
          "[Removed Lines]",
          "97:                         $rules[$row->field][] = 'exists:'.$destination_table.','.$destination_table_column;",
          "",
          "[Added Lines]",
          "97:                         $rules[$row->field][] = 'exists:' . $destination_table . ',' . $destination_table_column;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "274:                     $table_destination = $data_row->relation['destination_table'];",
          "275:                     $table_manytomany = $data_row['field'];",
          "276:                     $data_relation = DB::table($table_manytomany)",
          "279:                         ->get();",
          "280:                     $record->$table_manytomany = $data_relation;",
          "281:                 }",
          "",
          "[Removed Lines]",
          "277:                         ->leftjoin($table_name, $table_manytomany.'.id', '=', $table_name.'_id')",
          "278:                         ->select($table_name.'_id', $table_destination.'_id')",
          "",
          "[Added Lines]",
          "280:                         ->leftjoin($table_name, $table_manytomany . '.id', '=', $table_name . '_id')",
          "281:                         ->select($table_name . '_id', $table_destination . '_id')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "296:             $model = app($data_type->model_name);",
          "297:             foreach ($data as $key => $value) {",
          "298:                 $data_row = collect($data_rows)->where('field', $key)->first();",
          "300:                     $model->{$key} = $this->getContentByType($data_type, $data_row, $value);",
          "301:                 }",
          "302:             }",
          "",
          "[Removed Lines]",
          "299:                 if (! is_null($data_row)) {",
          "",
          "[Added Lines]",
          "302:                 if (!is_null($data_row)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "320:                         'model'           => $model_manytomany['model_name'],",
          "321:                         'content'         => $data_manytomany,",
          "322:                         'table'           => $table_manytomany,",
          "325:                         'parentKey'       => null,",
          "326:                         'relatedKey'      => 'id',",
          "327:                     ];",
          "",
          "[Removed Lines]",
          "323:                         'foreignPivotKey' => $table_primary.'_id' ? $table_primary.'_id' : null,",
          "324:                         'relatedPivotKey' => $table_relation.'_id' ? $table_relation.'_id' : null,",
          "",
          "[Added Lines]",
          "326:                         'foreignPivotKey' => $table_primary . '_id' ? $table_primary . '_id' : null,",
          "327:                         'relatedPivotKey' => $table_relation . '_id' ? $table_relation . '_id' : null,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "348:             $data['updated_at'] = $timestamp;",
          "349:             foreach ($data as $key => $value) {",
          "350:                 $data_row = collect($data_rows)->where('field', $key)->first();",
          "352:                     if ($data_row['type'] == 'upload_image_multiple') {",
          "353:                         $new_data[$key] = $this->getContentByType($data_type, $data_row, $value);",
          "354:                     }",
          "",
          "[Removed Lines]",
          "351:                 if (! is_null($data_row)) {",
          "",
          "[Added Lines]",
          "354:                 if (!is_null($data_row)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "384:                     foreach ($data_manytomany as $key => $value) {",
          "385:                         try {",
          "386:                             DB::table($field_manytomany)->insert([",
          "389:                             ]);",
          "390:                         } catch (Exception $e) {",
          "391:                         }",
          "",
          "[Removed Lines]",
          "387:                                 $table_relation.'_id' => $value,",
          "388:                                 $table_primary.'_id' => $id,",
          "",
          "[Added Lines]",
          "390:                                 $table_relation . '_id' => $value,",
          "391:                                 $table_primary . '_id' => $id,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "422:                         $files = explode(',', $model->{$data_row->field});",
          "423:                         foreach ($files as $file) {",
          "424:                             if (is_array($value)) {",
          "426:                                     $this->handleDeleteFile($file);",
          "427:                                 }",
          "428:                             } else {",
          "",
          "[Removed Lines]",
          "425:                                 if (! in_array($file, $value)) {",
          "",
          "[Added Lines]",
          "428:                                 if (!in_array($file, $value)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "453:                             'model'           => $model_manytomany['model_name'],",
          "454:                             'content'         => $data_manytomany,",
          "455:                             'table'           => $table_manytomany,",
          "458:                             'parentKey'       => null,",
          "459:                             'relatedKey'      => 'id',",
          "460:                         ];",
          "",
          "[Removed Lines]",
          "456:                             'foreignPivotKey' => $table_primary.'_id' ? $table_primary.'_id' : null,",
          "457:                             'relatedPivotKey' => $table_relation.'_id' ? $table_relation.'_id' : null,",
          "",
          "[Added Lines]",
          "459:                             'foreignPivotKey' => $table_primary . '_id' ? $table_primary . '_id' : null,",
          "460:                             'relatedPivotKey' => $table_relation . '_id' ? $table_relation . '_id' : null,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "490:                     $table_manytomany = $data_row->field;",
          "491:                     $table_relation = $data_row->relation['destination_table'];",
          "492:                     $table_primary = $data_type['name'];",
          "495:                     $data_manytomany = $data[$table_manytomany];",
          "497:                     $data_table_manytomany = DB::table($table_manytomany)->where($table_primary_id, $id)->get();",
          "498:                     foreach ($data_table_manytomany as $key => $value_table_manytomany) {",
          "500:                             DB::table($table_manytomany)",
          "504:                         }",
          "505:                     }",
          "506:                     foreach ($data_manytomany as $key => $id_destination_table) {",
          "507:                         $data_table_manytomany = DB::table($table_manytomany)",
          "511:                         if ($data_table_manytomany) {",
          "512:                             try {",
          "513:                                 DB::table($table_manytomany)",
          "",
          "[Removed Lines]",
          "493:                     $table_primary_id = $table_primary.'_id';",
          "494:                     $table_relation_id = $table_relation.'_id';",
          "499:                         if (! in_array($value_table_manytomany->{$table_relation_id}, $data_manytomany)) {",
          "501:                             ->where($table_primary_id, $id)",
          "502:                             ->where($table_relation_id, $value_table_manytomany->{$table_relation_id})",
          "503:                             ->delete();",
          "508:                                                 ->where($table_relation_id, $id_destination_table)",
          "509:                                                 ->where($table_primary_id, $id)",
          "510:                                                 ->first();",
          "",
          "[Added Lines]",
          "496:                     $table_primary_id = $table_primary . '_id';",
          "497:                     $table_relation_id = $table_relation . '_id';",
          "502:                         if (!in_array($value_table_manytomany->{$table_relation_id}, $data_manytomany)) {",
          "504:                                 ->where($table_primary_id, $id)",
          "505:                                 ->where($table_relation_id, $value_table_manytomany->{$table_relation_id})",
          "506:                                 ->delete();",
          "511:                             ->where($table_relation_id, $id_destination_table)",
          "512:                             ->where($table_primary_id, $id)",
          "513:                             ->first();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "539:                         $files = explode(',', $model->{$data_row->field});",
          "540:                         foreach ($files as $file) {",
          "541:                             if (is_array($value)) {",
          "543:                                     $this->handleDeleteFile($file);",
          "544:                                 }",
          "545:                             } else {",
          "",
          "[Removed Lines]",
          "542:                                 if (! in_array($file, $value)) {",
          "",
          "[Added Lines]",
          "545:                                 if (!in_array($file, $value)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "570:         if ($data_type->model_name) {",
          "571:             $model = app($data_type->model_name);",
          "572:             $model = $model::find($id);",
          "574:                 foreach ($data_rows as $data_row) {",
          "575:                     if (in_array($data_row->type, [",
          "576:                         'upload_image',",
          "",
          "[Removed Lines]",
          "573:             if (! is_null($model)) {",
          "",
          "[Added Lines]",
          "576:             if (!is_null($model)) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "598:             }",
          "599:         } else {",
          "600:             $model = DB::table($data_type->name)->where('id', $id)->first();",
          "602:                 foreach ($data_rows as $data_row) {",
          "603:                     if (in_array($data_row->type, [",
          "604:                         'upload_image',",
          "",
          "[Removed Lines]",
          "601:             if (! is_null($model)) {",
          "",
          "[Added Lines]",
          "604:             if (!is_null($model)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "637:         if ($data_type->model_name) {",
          "638:             $model = app($data_type->model_name);",
          "639:             $model = $model::find($id);",
          "641:                 foreach ($data_rows as $data_row) {",
          "642:                     if (in_array($data_row->type, [",
          "643:                         'upload_image',",
          "",
          "[Removed Lines]",
          "640:             if (! is_null($model)) {",
          "",
          "[Added Lines]",
          "643:             if (!is_null($model)) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "657:             }",
          "658:         } else {",
          "659:             $model = DB::table($data_type->name)->where('id', $id)->first();",
          "661:                 foreach ($data_rows as $data_row) {",
          "662:                     if (in_array($data_row->type, [",
          "663:                         'upload_image',",
          "",
          "[Removed Lines]",
          "660:             if (! is_null($model)) {",
          "",
          "[Added Lines]",
          "663:             if (!is_null($model)) {",
          "",
          "---------------"
        ],
        "src/Helpers/GetData.php||src/Helpers/GetData.php": [
          "File: src/Helpers/GetData.php -> src/Helpers/GetData.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     public static function serverSideWithModel($data_type, $builder_params, $only_data_soft_delete = false)",
          "13:     {",
          "14:         $fields_data_identifier = collect($data_type->dataRows)->where('type', 'data_identifier')->pluck('field')->all();",
          "15:         $fields = collect($data_type->dataRows)->where('browse', 1)->pluck('field')->all();",
          "16:         $ids = collect($data_type->dataRows)->where('field', 'id')->pluck('field')->all();",
          "17:         $fields = array_merge($fields, $ids, $fields_data_identifier);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:         $data_rows = collect($data_type->dataRows);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:     public static function serverSideWithQueryBuilder($data_type, $builder_params, $only_data_soft_delete = false)",
          "207:     {",
          "208:         $fields_data_identifier = collect($data_type->dataRows)->where('type', 'data_identifier')->pluck('field')->all();",
          "209:         $fields = collect($data_type->dataRows)->where('browse', 1)->pluck('field')->all();",
          "210:         $ids = collect($data_type->dataRows)->where('field', 'id')->pluck('field')->all();",
          "211:         $fields = array_merge($fields, $ids, $fields_data_identifier);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:         $data_rows = collect($data_type->dataRows);",
          "",
          "---------------"
        ],
        "src/resources/js/pages/crud-generated/add.vue||src/resources/js/pages/crud-generated/add.vue": [
          "File: src/resources/js/pages/crud-generated/add.vue -> src/resources/js/pages/crud-generated/add.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:                 <!-- <input type=\"text\" v-model=\"dataRow.value\"> -->",
          "27:                 <!-- <vs-input type=\"text\" v-model=\"dataRow.value\"></vs-input> -->",
          "28:                 <template v-if=\"dataRow.add == 1\">",
          "30:                   <badaso-text",
          "31:                     v-if=\"dataRow.type == 'text'\"",
          "32:                     :label=\"dataRow.displayName\"",
          "",
          "[Removed Lines]",
          "29:                   {{ dataRow.value }}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resources/js/pages/crud-generated/browse.vue||src/resources/js/pages/crud-generated/browse.vue": [
          "File: src/resources/js/pages/crud-generated/browse.vue -> src/resources/js/pages/crud-generated/browse.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:                             class=\"crud-generated__item--upload-file-multiple\"",
          "232:                           >",
          "233:                             <p",
          "235:                                 record[",
          "236:                                   $caseConvert.stringSnakeToCamel(dataRow.field)",
          "237:                                 ]",
          "",
          "[Removed Lines]",
          "234:                               v-for=\"(file, indexFile) in stringToArray(",
          "",
          "[Added Lines]",
          "234:                               v-for=\"(file, indexFile) in arrayToString(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "524:                               class=\"crud-generated__item--upload-file-multiple\"",
          "525:                             >",
          "526:                               <p",
          "528:                                   record[",
          "529:                                     $caseConvert.stringSnakeToCamel(",
          "530:                                       dataRow.field",
          "",
          "[Removed Lines]",
          "527:                                 v-for=\"(file, indexFile) in stringToArray(",
          "",
          "[Added Lines]",
          "527:                                 v-for=\"(file, indexFile) in arrayToString(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "869:         this.data = response.data;",
          "870:         this.records = response.data.data;",
          "871:         this.records.map((record) => {",
          "875:           }",
          "876:           return record;",
          "878:         this.totalItem =",
          "879:           response.data.total > 0",
          "880:             ? Math.ceil(response.data.total / this.limit)",
          "",
          "[Removed Lines]",
          "872:           if (record.createdAt || record.updatedAt){",
          "873:             record.createdAt = moment(record.createdAt).format('YYYY-MM-DD hh:mm:ss');",
          "874:             record.updatedAt = moment(record.updatedAt).format('YYYY-MM-DD hh:mm:ss');",
          "877:         })",
          "",
          "[Added Lines]",
          "872:           if (record.createdAt || record.updatedAt) {",
          "873:             record.createdAt = moment(record.createdAt).format(",
          "874:               \"YYYY-MM-DD hh:mm:ss\"",
          "875:             );",
          "876:             record.updatedAt = moment(record.updatedAt).format(",
          "877:               \"YYYY-MM-DD hh:mm:ss\"",
          "878:             );",
          "881:         });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1023:         return [];",
          "1024:       }",
          "1025:     },",
          "1026:     handleSearch(e) {",
          "1027:       this.filter = e.target.value;",
          "1028:       this.page = 1;",
          "1039:       this.getEntity();",
          "1040:     },",
          "1041:     handleChangePage(page) {",
          "1042:       this.page = page;",
          "1053:       this.getEntity();",
          "1054:     },",
          "1055:     handleChangeLimit(limit) {",
          "1056:       this.page = 1;",
          "1057:       this.limit = limit;",
          "1068:       this.getEntity();",
          "1069:     },",
          "1070:     handleSort(field, direction) {",
          "",
          "[Removed Lines]",
          "1029:       this.$router.replace({",
          "1030:         query: {",
          "1031:           search: this.filter,",
          "1032:           page: this.page,",
          "1033:           show: this.limit",
          "1034:         }",
          "1035:       })",
          "1036:       .catch(err=>{",
          "1037:         console.log(err);",
          "1038:       });",
          "1043:       this.$router.replace({",
          "1044:         query: {",
          "1045:           search: this.filter,",
          "1046:           page: this.page,",
          "1047:           show: this.limit",
          "1048:         }",
          "1049:       })",
          "1050:       .catch(err => {",
          "1051:         console.log(err);",
          "1052:       });;",
          "1058:       this.$router.replace({",
          "1059:         query: {",
          "1060:           search: this.filter,",
          "1061:           page: this.page,",
          "1062:           show: this.limit",
          "1063:         }",
          "1064:       })",
          "1065:       .catch(err => {",
          "1066:         console.log(err);",
          "1067:       });",
          "",
          "[Added Lines]",
          "1030:     arrayToString(files) {",
          "1031:       if (files) {",
          "1032:         const mixArray = files;",
          "1033:         const str = mixArray.replace(/\\[|\\]|\"/g, \"\").split(\",\");",
          "1034:         return str;",
          "1035:       } else {",
          "1036:         return [];",
          "1037:       }",
          "1038:     },",
          "1042:       this.$router",
          "1043:         .replace({",
          "1044:           query: {",
          "1045:             search: this.filter,",
          "1046:             page: this.page,",
          "1047:             show: this.limit,",
          "1048:           },",
          "1049:         })",
          "1050:         .catch((err) => {",
          "1051:           console.log(err);",
          "1052:         });",
          "1057:       this.$router",
          "1058:         .replace({",
          "1059:           query: {",
          "1060:             search: this.filter,",
          "1061:             page: this.page,",
          "1062:             show: this.limit,",
          "1063:           },",
          "1064:         })",
          "1065:         .catch((err) => {",
          "1066:           console.log(err);",
          "1067:         });",
          "1073:       this.$router",
          "1074:         .replace({",
          "1075:           query: {",
          "1076:             search: this.filter,",
          "1077:             page: this.page,",
          "1078:             show: this.limit,",
          "1079:           },",
          "1080:         })",
          "1081:         .catch((err) => {",
          "1082:           console.log(err);",
          "1083:         });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1080:         const relationType = dataRow.relation.relationType;",
          "1081:         const table = this.$caseConvert.stringSnakeToCamel(",
          "1082:           dataRow.relation.destinationTable",
          "1084:         this.$caseConvert.stringSnakeToCamel(",
          "1085:           dataRow.relation.destinationTableColumn",
          "1086:         );",
          "",
          "[Removed Lines]",
          "1083:             );",
          "",
          "[Added Lines]",
          "1099:         );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1091:         if (relationType == \"has_many\") {",
          "1092:           const list = record[table];",
          "1093:           const flatList = list.map((ls) => {",
          "1095:           });",
          "1096:           return flatList.join(\", \");",
          "1098:           const list = record[table];",
          "1100:           const flatList = list.map((ls) => {",
          "1102:               return ls[displayColumn];",
          "1103:             }",
          "1105:           });",
          "1106:           return flatList.join(\",\").replace(\",\", \"\");",
          "1111:           Object.keys(lists).forEach(function (ls, key) {",
          "1112:             flatList.push(lists[ls][displayColumn]);",
          "1113:           });",
          "",
          "[Removed Lines]",
          "1094:                 return ls[displayColumn];",
          "1097:         } else if(relationType == \"belongs_to\"){",
          "1099:           let field = this.$caseConvert.stringSnakeToCamel(dataRow.field)",
          "1101:             if(ls.id == record[field]){",
          "1104:             return null",
          "1107:         }  else if (relationType == \"belongs_to_many\") {",
          "1108:           let field = this.$caseConvert.stringSnakeToCamel(dataRow.field)",
          "1109:           const lists = record[field]",
          "1110:           let flatList = []",
          "",
          "[Added Lines]",
          "1110:             return ls[displayColumn];",
          "1113:         } else if (relationType == \"belongs_to\") {",
          "1115:           let field = this.$caseConvert.stringSnakeToCamel(dataRow.field);",
          "1117:             if (ls.id == record[field]) {",
          "1120:             return null;",
          "1123:         } else if (relationType == \"belongs_to_many\") {",
          "1124:           let field = this.$caseConvert.stringSnakeToCamel(dataRow.field);",
          "1125:           const lists = record[field];",
          "1126:           let flatList = [];",
          "",
          "---------------"
        ],
        "src/resources/js/pages/crud-generated/read.vue||src/resources/js/pages/crud-generated/read.vue": [
          "File: src/resources/js/pages/crud-generated/read.vue -> src/resources/js/pages/crud-generated/read.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:                           class=\"crud-generated__item--upload-file-multiple\"",
          "112:                         >",
          "113:                           <p",
          "118:                             )\"",
          "119:                             :key=\"indexFile\"",
          "120:                           >",
          "",
          "[Removed Lines]",
          "114:                             v-for=\"(file, indexFile) in stringToArray(",
          "115:                               record[",
          "116:                                 $caseConvert.stringSnakeToCamel(dataRow.field)",
          "117:                               ]",
          "",
          "[Added Lines]",
          "114:                             v-for=\"(file, indexFile) in arrayToString(",
          "115:                               dataRow.value",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "272:             data.edit = data.edit == 1;",
          "273:             data.read = data.read == 1;",
          "274:             data.details = JSON.parse(data.details);",
          "275:           } catch (error) {}",
          "276:           return data;",
          "277:         });",
          "278:         this.dataType.dataRows = JSON.parse(JSON.stringify(dataRows));",
          "279:       } catch (error) {",
          "280:         if (error.status == 503) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "272:             if (data.type == \"upload_file_multiple\") {",
          "273:               const val =",
          "274:                 this.record[this.$caseConvert.stringSnakeToCamel(data.field)];",
          "276:               if (val) {",
          "277:                 data.value = val.toString();",
          "278:               }",
          "279:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "303:         return [];",
          "304:       }",
          "305:     },",
          "306:     displayRelationData(record, dataRow) {",
          "307:       const table = this.$caseConvert.stringSnakeToCamel(",
          "308:         dataRow.relation.destinationTable",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:    arrayToString(files) {",
          "313:       if (files) {",
          "314:         const mixArray = files;",
          "315:         const str = mixArray.replace(/\\[|\\]|\"/g, \"\").split(\",\");",
          "316:         return str;",
          "317:       } else {",
          "318:         return [];",
          "319:       }",
          "320:     },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "320:           return ls[displayColumn];",
          "321:         });",
          "322:         return flatList.join(\", \");",
          "324:       } else if (dataRow.relation.relationType == \"belongs_to\") {",
          "325:         const list = record[table];",
          "327:         const flatList = list.map((ls) => {",
          "328:           if (ls.id == record[field]) {",
          "329:             return ls[displayColumn];",
          "330:           }",
          "332:         });",
          "333:         return flatList.join(\",\").replace(\",\", \"\");",
          "334:       } else if (dataRow.relation.relationType == \"belongs_to_many\") {",
          "338:         Object.keys(lists).forEach(function (ls, key) {",
          "339:           flatList.push(lists[ls][displayColumn]);",
          "340:         });",
          "342:         return flatList.join(\",\").replace(\",\", \", \");",
          "343:       } else {",
          "344:         return record[table] ? record[table][displayColumn] : null;",
          "",
          "[Removed Lines]",
          "326:         let field = this.$caseConvert.stringSnakeToCamel(dataRow.field)",
          "331:           return null",
          "335:         let field = this.$caseConvert.stringSnakeToCamel(dataRow.field)",
          "336:         const lists = record[field]",
          "337:         let flatList = []",
          "341:         console.log(record);",
          "",
          "[Added Lines]",
          "340:         let field = this.$caseConvert.stringSnakeToCamel(dataRow.field);",
          "345:           return null;",
          "349:         let field = this.$caseConvert.stringSnakeToCamel(dataRow.field);",
          "350:         const lists = record[field];",
          "351:         let flatList = [];",
          "",
          "---------------"
        ],
        "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php": [
          "File: tests/Feature/BadasoApiCrudManagementTest.php -> tests/Feature/BadasoApiCrudManagementTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1233:     public function testAddEditEntityCrudManagement()",
          "1234:     {",
          "1235:         $tables = CallHelperTest::getCache($this->KEY_LIST_CREATE_TABLES);",
          "1236:         $first_table = $tables[0];",
          "1238:         $response_read_table_entities = CallHelperTest::getCache($this->KEY_DATA_RESPONSE_READ_TABLE_ENTITY);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1236:         dd($tables);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "905faee7c837a8b59cace0809d807a909195ba66",
      "candidate_info": {
        "commit_hash": "905faee7c837a8b59cace0809d807a909195ba66",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/905faee7c837a8b59cace0809d807a909195ba66",
        "files": [
          ".github/workflows/phpstan.yml",
          "phpstan.neon.dist"
        ],
        "message": "test1",
        "before_after_code_files": [
          "phpstan.neon.dist||phpstan.neon.dist"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "phpstan.neon.dist||phpstan.neon.dist": [
          "File: phpstan.neon.dist -> phpstan.neon.dist",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: parameters:",
          "5:     paths:",
          "6:         - src",
          "8:     level: 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:         - tests",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "de5c07672e9db0e91a70c599eedb796fd6ca69f3",
      "candidate_info": {
        "commit_hash": "de5c07672e9db0e91a70c599eedb796fd6ca69f3",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/de5c07672e9db0e91a70c599eedb796fd6ca69f3",
        "files": [
          "tests/Feature/BadasoApiConfigurationTest.php"
        ],
        "message": "add integration testing",
        "before_after_code_files": [
          "tests/Feature/BadasoApiConfigurationTest.php||tests/Feature/BadasoApiConfigurationTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/Feature/BadasoApiConfigurationTest.php||tests/Feature/BadasoApiConfigurationTest.php": [
          "File: tests/Feature/BadasoApiConfigurationTest.php -> tests/Feature/BadasoApiConfigurationTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace Uasoft\\Badaso\\Tests\\Feature;",
          "5: use Tests\\TestCase;",
          "6: use Uasoft\\Badaso\\Helpers\\CallHelperTest;",
          "8: class BadasoApiConfigurationTest extends TestCase",
          "9: {",
          "15:     public function testMaintenanceWithoutKey()",
          "16:     {",
          "17:         $set_key_maintenance = config(['badaso.badaso_maintenance' => null]);",
          "18:         $request_data = [",
          "19:             \"path\" => \"/badaso-dashboard/login\"",
          "20:         ];",
          "22:         $path_secret_login = config('badaso.secret_login_prefix');",
          "23:         $request_data_secret_login = [",
          "24:             \"path\" => \"/badaso-dashboard/\" . $path_secret_login",
          "25:         ];",
          "27:         $response = $this->json(\"POST\", CallHelperTest::getUrlApiV1Prefix('/maintenance'), $request_data);",
          "28:         $data = $response['data'];",
          "29:         $this->assertFalse($data['maintenance']);",
          "31:         $response_secret_login = $this->json(\"POST\", CallHelperTest::getUrlApiV1Prefix('/maintenance'), $request_data_secret_login);",
          "32:         $data_secret_login = $response_secret_login['data'];",
          "33:         $this->assertFalse($data_secret_login['maintenance']);",
          "34:     }",
          "36:     public function testMaintenanceWithKeyTrue()",
          "37:     {",
          "38:         $set_key_maintenance = config(['badaso.badaso_maintenance' => true]);",
          "39:         $request_data = [",
          "40:             \"path\" => \"/badaso-dashboard/login\"",
          "41:         ];",
          "43:         $path_secret_login = config('badaso.secret_login_prefix');",
          "44:         $request_data_secret_login = [",
          "45:             \"path\" => \"/badaso-dashboard/\" . $path_secret_login",
          "46:         ];",
          "48:         $response = $this->json(\"POST\", CallHelperTest::getUrlApiV1Prefix('/maintenance'), $request_data);",
          "49:         $data = $response['data'];",
          "50:         $this->assertTrue($data['maintenance']);",
          "52:         $response_secret_login = $this->json(\"POST\", CallHelperTest::getUrlApiV1Prefix('/maintenance'), $request_data_secret_login);",
          "53:         $data_secret_login = $response_secret_login['data'];",
          "54:         $this->assertFalse($data_secret_login['maintenance']);",
          "55:     }",
          "57:     public function testMaintenanceWithKeyFalse()",
          "58:     {",
          "59:         $set_key_maintenance = config(['badaso.badaso_maintenance' => false]);",
          "60:         $request_data_login = [",
          "61:             \"path\" => \"/badaso-dashboard/login\"",
          "62:         ];",
          "64:         $path_secret_login = config('badaso.secret_login_prefix');",
          "65:         $request_data_secret_login = [",
          "66:             \"path\" => \"/badaso-dashboard/\" . $path_secret_login",
          "67:         ];",
          "69:         $response_login = $this->json(\"POST\", CallHelperTest::getUrlApiV1Prefix('/maintenance'), $request_data_login);",
          "70:         $data_login = $response_login['data'];",
          "71:         $this->assertFalse($data_login['maintenance']);",
          "73:         $response_secret_login = $this->json(\"POST\", CallHelperTest::getUrlApiV1Prefix('/maintenance'), $request_data_secret_login);",
          "74:         $data_secret_login = $response_secret_login['data'];",
          "75:         $this->assertFalse($data_secret_login['maintenance']);",
          "76:     }",
          "77: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2427cd203263667bd4f84340fde1ea92f168b2c2",
      "candidate_info": {
        "commit_hash": "2427cd203263667bd4f84340fde1ea92f168b2c2",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/2427cd203263667bd4f84340fde1ea92f168b2c2",
        "files": [
          "tests/Feature/BadasoApiCrudManagementTest.php"
        ],
        "message": "unit test delete entity",
        "before_after_code_files": [
          "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php": [
          "File: tests/Feature/BadasoApiCrudManagementTest.php -> tests/Feature/BadasoApiCrudManagementTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "701:             $table_row = DB::table($table)->where('id', $id)->first();",
          "702:             if (isset($table_row)) {",
          "704:             } else {",
          "705:                 $this->assertEmpty($table_row);",
          "706:             }",
          "",
          "[Removed Lines]",
          "703:                 $this->assertNotEmpty($table_row->created_at);",
          "",
          "[Added Lines]",
          "703:                 $this->assertNotEmpty($table_row->deleted_at);",
          "",
          "---------------"
        ]
      }
    }
  ]
}