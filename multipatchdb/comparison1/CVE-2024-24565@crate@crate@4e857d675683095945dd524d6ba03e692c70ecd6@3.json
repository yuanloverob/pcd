{
  "cve_id": "CVE-2024-24565",
  "cve_desc": "CrateDB is a distributed SQL database that makes it simple to store and analyze massive amounts of data in real-time. There is a COPY FROM function in the CrateDB database that is used to import file data into database tables. This function has a flaw, and authenticated attackers can use the COPY FROM function to import arbitrary file content into database tables, resulting in information leakage. This vulnerability is patched in 5.3.9, 5.4.8, 5.5.4, and 5.6.1.",
  "repo": "crate/crate",
  "patch_hash": "4e857d675683095945dd524d6ba03e692c70ecd6",
  "patch_info": {
    "commit_hash": "4e857d675683095945dd524d6ba03e692c70ecd6",
    "repo": "crate/crate",
    "commit_url": "https://github.com/crate/crate/commit/4e857d675683095945dd524d6ba03e692c70ecd6",
    "files": [
      "docs/appendices/release-notes/5.5.4.rst",
      "docs/appendices/release-notes/5.6.1.rst",
      "docs/sql/statements/copy-from.rst",
      "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
      "server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
      "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
      "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
      "server/src/main/java/org/elasticsearch/ElasticsearchException.java",
      "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
      "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
    ],
    "message": "Restrict `COPY FROM` using local files to superuser\n\nFixing a security issue where any user could read/import content\nof any file on the host system, the CrateDB process user has read\naccess to.",
    "before_after_code_files": [
      "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
      "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
      "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
      "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
      "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java",
      "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java||server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
      "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
    ]
  },
  "patch_diff": {
    "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java": [
      "File: plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java -> plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "106:     private FileReadingIterator createBatchIterator(S3ObjectInputStream inputStream, String ... fileUris) {",
      "107:         String compression = null;",
      "108:         return new FileReadingIterator(",
      "110:             compression,",
      "111:             Map.of(",
      "112:                 S3FileInputFactory.NAME,",
      "",
      "[Removed Lines]",
      "109:             Arrays.asList(fileUris),",
      "",
      "[Added Lines]",
      "109:             Arrays.stream(fileUris).map(FileReadingIterator::toURI).toList(),",
      "",
      "---------------"
    ],
    "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java": [
      "File: server/src/main/java/io/crate/exceptions/UnauthorizedException.java -> server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: package io.crate.exceptions;",
      "26:     public UnauthorizedException(String message) {",
      "27:         super(message);",
      "28:     }",
      "30: }",
      "",
      "[Removed Lines]",
      "24: public class UnauthorizedException extends RuntimeException implements UnscopedException {",
      "",
      "[Added Lines]",
      "24: import java.io.IOException;",
      "26: import org.elasticsearch.ElasticsearchException;",
      "27: import org.elasticsearch.common.io.stream.StreamInput;",
      "29: public class UnauthorizedException extends ElasticsearchException implements UnscopedException {",
      "35:     public UnauthorizedException(StreamInput in) throws IOException {",
      "36:         super(in);",
      "37:     }",
      "",
      "---------------"
    ],
    "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java": [
      "File: server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java -> server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "175:         }",
      "176:     }",
      "179:                                String compression,",
      "180:                                Map<String, FileInputFactory> fileInputFactories,",
      "181:                                Boolean shared,",
      "",
      "[Removed Lines]",
      "178:     public FileReadingIterator(Collection<String> fileUris,",
      "",
      "[Added Lines]",
      "178:     public FileReadingIterator(Collection<URI> fileUris,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "398:     }",
      "400:     @Nullable",
      "403:         FileInputFactory fileInputFactory = fileInputFactories.get(uri.getScheme());",
      "404:         if (fileInputFactory != null) {",
      "405:             try {",
      "",
      "[Removed Lines]",
      "401:     private FileInput toFileInput(String fileUri, Settings withClauseOptions) {",
      "402:         URI uri = toURI(fileUri);",
      "",
      "[Added Lines]",
      "401:     private FileInput toFileInput(URI uri, Settings withClauseOptions) {",
      "",
      "---------------"
    ],
    "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java": [
      "File: server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java -> server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: package io.crate.execution.engine.collect.sources;",
      "24: import java.util.Arrays;",
      "25: import java.util.Collection;",
      "26: import java.util.Collections;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: import static java.util.Objects.requireNonNull;",
      "26: import java.net.URI;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40: import io.crate.data.BatchIterator;",
      "41: import io.crate.data.Row;",
      "42: import io.crate.data.SkippingBatchIterator;",
      "43: import io.crate.execution.dsl.phases.CollectPhase;",
      "44: import io.crate.execution.dsl.phases.FileUriCollectPhase;",
      "45: import io.crate.execution.engine.collect.CollectTask;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46: import io.crate.exceptions.UnauthorizedException;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "53: import io.crate.metadata.NodeContext;",
      "54: import io.crate.metadata.TransactionContext;",
      "55: import io.crate.planner.operators.SubQueryResults;",
      "56: import io.crate.types.DataTypes;",
      "58: @Singleton",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "60: import io.crate.role.Role;",
      "61: import io.crate.role.Roles;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "63:     private final InputFactory inputFactory;",
      "64:     private final NodeContext nodeCtx;",
      "65:     private final ThreadPool threadPool;",
      "67:     @Inject",
      "68:     public FileCollectSource(NodeContext nodeCtx,",
      "69:                              ClusterService clusterService,",
      "70:                              Map<String, FileInputFactory> fileInputFactoryMap,",
      "72:         this.fileInputFactoryMap = fileInputFactoryMap;",
      "73:         this.nodeCtx = nodeCtx;",
      "74:         this.inputFactory = new InputFactory(nodeCtx);",
      "75:         this.clusterService = clusterService;",
      "76:         this.threadPool = threadPool;",
      "77:     }",
      "79:     @Override",
      "",
      "[Removed Lines]",
      "71:                              ThreadPool threadPool) {",
      "",
      "[Added Lines]",
      "72:     private final Roles roles;",
      "78:                              ThreadPool threadPool,",
      "79:                              Roles roles) {",
      "85:         this.roles = roles;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "86:             inputFactory.ctxForRefs(txnCtx, FileLineReferenceResolver::getImplementation);",
      "87:         ctx.add(collectPhase.toCollect());",
      "90:         FileReadingIterator fileReadingIterator = new FileReadingIterator(",
      "91:             fileUris,",
      "92:             fileUriCollectPhase.compression(),",
      "",
      "[Removed Lines]",
      "89:         List<String> fileUris = targetUriToStringList(txnCtx, nodeCtx, fileUriCollectPhase.targetUri());",
      "",
      "[Added Lines]",
      "98:         Role user = requireNonNull(roles.findUser(txnCtx.sessionSettings().userName()), \"User who invoked a statement must exist\");",
      "99:         List<URI> fileUris = targetUriToStringList(txnCtx, nodeCtx, fileUriCollectPhase.targetUri()).stream()",
      "100:             .map(s -> {",
      "101:                 var uri = FileReadingIterator.toURI(s);",
      "102:                 if (uri.getScheme().equals(\"file\") && user.isSuperUser() == false) {",
      "103:                     throw new UnauthorizedException(\"Only a superuser can read from the local file system\");",
      "104:                 }",
      "105:                 return uri;",
      "106:             })",
      "107:             .toList();",
      "",
      "---------------"
    ],
    "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java": [
      "File: server/src/main/java/org/elasticsearch/ElasticsearchException.java -> server/src/main/java/org/elasticsearch/ElasticsearchException.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "973:             io.crate.exceptions.OperationOnInaccessibleRelationException.class,",
      "974:             io.crate.exceptions.OperationOnInaccessibleRelationException::new,",
      "975:             176,",
      "978:         final Class<? extends ElasticsearchException> exceptionClass;",
      "979:         final CheckedFunction<StreamInput, ? extends ElasticsearchException, IOException> constructor;",
      "",
      "[Removed Lines]",
      "976:             Version.V_5_6_0);",
      "",
      "[Added Lines]",
      "976:             Version.V_5_6_0),",
      "977:         UNAUTHORIZED_EXCEPTION(",
      "978:             io.crate.exceptions.UnauthorizedException.class,",
      "979:             io.crate.exceptions.UnauthorizedException::new,",
      "980:             177,",
      "981:             Version.V_5_7_0);",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java": [
      "File: server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java -> server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "54: import io.crate.expression.symbol.Literal;",
      "55: import io.crate.metadata.ColumnIdent;",
      "56: import io.crate.metadata.CoordinatorTxnCtx;",
      "57: import io.crate.test.integration.CrateDummyClusterServiceUnitTest;",
      "58: import io.crate.types.DataTypes;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57: import io.crate.role.Role;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "69:             createNodeContext(),",
      "70:             clusterService,",
      "71:             Collections.emptyMap(),",
      "73:             );",
      "75:         File tmpFile = temporaryFolder.newFile(\"fileUriCollectOperation.json\");",
      "",
      "[Removed Lines]",
      "72:             THREAD_POOL",
      "",
      "[Added Lines]",
      "73:             THREAD_POOL,",
      "74:             () -> List.of(Role.CRATE_USER)",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java": [
      "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "201:     private static FileReadingIterator it(Collection<String> fileUris, String compression) {",
      "202:         return new FileReadingIterator(",
      "204:             compression,",
      "205:             Map.of(LocalFsFileInputFactory.NAME, new LocalFsFileInputFactory()),",
      "206:             false,",
      "",
      "[Removed Lines]",
      "203:             fileUris,",
      "",
      "[Added Lines]",
      "203:             fileUris.stream().map(FileReadingIterator::toURI).toList(),",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java": [
      "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: import java.io.InputStream;",
      "35: import java.io.InputStreamReader;",
      "36: import java.net.SocketTimeoutException;",
      "37: import java.nio.charset.StandardCharsets;",
      "38: import java.nio.file.Files;",
      "39: import java.nio.file.Path;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37: import java.net.URI;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "43: import java.util.concurrent.ScheduledExecutorService;",
      "44: import java.util.concurrent.TimeUnit;",
      "45: import java.util.function.Supplier;",
      "47: import org.elasticsearch.common.settings.Settings;",
      "48: import org.elasticsearch.test.ESTestCase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: import java.util.stream.Stream;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "87:         Path tempFile2 = createTempFile(\"tempfile2\", \".csv\");",
      "88:         List<String> lines2 = List.of(\"name,id,age\", \"Trillian,5,33\");",
      "89:         Files.write(tempFile2, lines2);",
      "92:         Supplier<BatchIterator<LineCursor>> batchIteratorSupplier =",
      "93:             () -> new FileReadingIterator(",
      "",
      "[Removed Lines]",
      "90:         List<String> fileUris = List.of(tempFile1.toUri().toString(), tempFile2.toUri().toString());",
      "",
      "[Added Lines]",
      "92:         List<URI> fileUris = Stream.of(tempFile1.toUri().toString(), tempFile2.toUri().toString())",
      "93:             .map(FileReadingIterator::toURI)",
      "94:             .toList();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "139:         Path tempFile = createTempFile(\"tempfile1\", \".csv\");",
      "140:         List<String> lines = List.of(\"id\", \"1\", \"2\", \"3\", \"4\", \"5\");",
      "141:         Files.write(tempFile, lines);",
      "144:         Supplier<BatchIterator<LineCursor>> batchIteratorSupplier =",
      "145:             () -> new FileReadingIterator(",
      "",
      "[Removed Lines]",
      "142:         List<String> fileUris = List.of(tempFile.toUri().toString());",
      "",
      "[Added Lines]",
      "146:         List<URI> fileUris = Stream.of(tempFile.toUri().toString())",
      "147:             .map(FileReadingIterator::toURI).toList();",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "213:         Files.write(tempFile, List.of(\"1\", \"2\", \"3\"));",
      "214:         Path tempFile2 = createTempFile(\"tempfile2\", \".csv\");",
      "215:         Files.write(tempFile2, List.of(\"4\", \"5\", \"6\"));",
      "218:         var fi = new FileReadingIterator(",
      "219:             fileUris,",
      "",
      "[Removed Lines]",
      "216:         List<String> fileUris = List.of(tempFile.toUri().toString(), tempFile2.toUri().toString());",
      "",
      "[Added Lines]",
      "221:         List<URI> fileUris = Stream.of(tempFile.toUri().toString(), tempFile2.toUri().toString())",
      "222:             .map(FileReadingIterator::toURI).toList();",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java||server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java": [
      "File: server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java -> server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "92:             new NodeContext(new Functions(Map.of()), roles),",
      "93:             clusterService,",
      "94:             Map.of(),",
      "96:         );",
      "98:         CompletableFuture<BatchIterator<Row>> iterator = fileCollectSource.getIterator(",
      "",
      "[Removed Lines]",
      "95:             THREAD_POOL",
      "",
      "[Added Lines]",
      "95:             THREAD_POOL,",
      "96:             () -> List.of(Role.CRATE_USER)",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java": [
      "File: server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java -> server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: import static io.crate.testing.Asserts.assertThat;",
      "27: import static io.crate.testing.TestingHelpers.printedTable;",
      "28: import static io.netty.handler.codec.http.HttpResponseStatus.BAD_REQUEST;",
      "30: import java.io.File;",
      "31: import java.io.FileOutputStream;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: import static org.assertj.core.api.Assertions.assertThatThrownBy;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "54: import com.carrotsearch.randomizedtesting.LifecycleScope;",
      "56: import io.crate.testing.Asserts;",
      "57: import io.crate.testing.SQLResponse;",
      "58: import io.crate.testing.UseJdbc;",
      "59: import io.crate.testing.UseNewCluster;",
      "61: @IntegTestCase.ClusterScope(numDataNodes = 2)",
      "62: public class CopyIntegrationTest extends SQLHttpIntegrationTest {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57: import io.crate.action.sql.Sessions;",
      "58: import io.crate.exceptions.UnauthorizedException;",
      "59: import io.crate.role.Role;",
      "60: import io.crate.role.Roles;",
      "65: import io.crate.testing.UseRandomizedSchema;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1196:             \"2| 31123| apple safari| 23073\"",
      "1197:         );",
      "1198:     }",
      "1199: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1206:     @UseRandomizedSchema(random = false)",
      "1207:     @Test",
      "1208:     public void test_copy_from_local_file_is_only_allowed_for_superusers() {",
      "1209:         execute(\"CREATE TABLE quotes (id INT PRIMARY KEY, \" +",
      "1210:             \"quote STRING INDEX USING FULLTEXT) WITH (number_of_replicas = 0)\");",
      "1211:         execute(\"CREATE USER test_user\");",
      "1212:         execute(\"GRANT ALL TO test_user\");",
      "1214:         var roles = cluster().getInstance(Roles.class);",
      "1215:         Role user = roles.findUser(\"test_user\");",
      "1216:         Sessions sqlOperations = cluster().getInstance(Sessions.class);",
      "1217:         try (var session = sqlOperations.newSession(null, user)) {",
      "1218:             assertThatThrownBy(() -> execute(\"COPY quotes FROM ?\", new Object[]{copyFilePath + \"test_copy_from.json\"}, session))",
      "1219:                 .isExactlyInstanceOf(UnauthorizedException.class)",
      "1220:                 .hasMessage(\"Only a superuser can read from the local file system\");",
      "1221:         }",
      "1222:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c5d9b3c2c3f1e9906a94a9cd7563914e1b6fb78b",
      "candidate_info": {
        "commit_hash": "c5d9b3c2c3f1e9906a94a9cd7563914e1b6fb78b",
        "repo": "crate/crate",
        "commit_url": "https://github.com/crate/crate/commit/c5d9b3c2c3f1e9906a94a9cd7563914e1b6fb78b",
        "files": [
          "docs/admin/system-information.rst",
          "docs/appendices/release-notes/5.9.0.rst",
          "docs/config/session.rst",
          "docs/general/information-schema.rst",
          "server/src/main/java/io/crate/action/sql/Session.java",
          "server/src/main/java/io/crate/action/sql/Sessions.java",
          "server/src/main/java/io/crate/metadata/settings/CoordinatorSessionSettings.java",
          "server/src/main/java/io/crate/metadata/settings/session/SessionSettingRegistry.java",
          "server/src/main/java/io/crate/metadata/sys/SysSchemaInfo.java",
          "server/src/main/java/io/crate/metadata/sys/SysSessionsTableInfo.java",
          "server/src/main/java/io/crate/metadata/sys/SysTableDefinitions.java",
          "server/src/main/java/io/crate/protocols/postgres/AuthenticationContext.java",
          "server/src/main/java/io/crate/protocols/postgres/ConnectionProperties.java",
          "server/src/main/java/io/crate/protocols/postgres/PostgresWireProtocol.java",
          "server/src/main/java/io/crate/rest/action/SqlHttpHandler.java",
          "server/src/test/java/io/crate/action/sql/SessionsTest.java",
          "server/src/test/java/io/crate/integrationtests/BaseRolesIntegrationTest.java",
          "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java",
          "server/src/test/java/io/crate/integrationtests/InformationSchemaTest.java",
          "server/src/test/java/io/crate/integrationtests/PgCatalogITest.java",
          "server/src/test/java/io/crate/integrationtests/PrivilegesIntegrationTest.java",
          "server/src/test/java/io/crate/integrationtests/TableSettingsTest.java",
          "server/src/test/java/io/crate/integrationtests/UserSessionIntegrationTest.java",
          "server/src/test/java/io/crate/protocols/postgres/PgClientTest.java",
          "server/src/test/java/io/crate/protocols/postgres/PostgresWireProtocolTest.java",
          "server/src/test/java/io/crate/rest/action/SqlHttpHandlerTest.java",
          "server/src/test/java/io/crate/statistics/TableStatsServiceTest.java",
          "server/src/test/java/org/elasticsearch/indices/IndicesServiceCloseTests.java",
          "server/src/testFixtures/java/io/crate/testing/SQLExecutor.java",
          "server/src/testFixtures/java/io/crate/testing/SQLTransportExecutor.java",
          "server/src/testFixtures/java/org/elasticsearch/test/IntegTestCase.java"
        ],
        "message": "Implement `sys.sessions` table\n\nCloses: #14937",
        "before_after_code_files": [
          "server/src/main/java/io/crate/action/sql/Session.java||server/src/main/java/io/crate/action/sql/Session.java",
          "server/src/main/java/io/crate/action/sql/Sessions.java||server/src/main/java/io/crate/action/sql/Sessions.java",
          "server/src/main/java/io/crate/metadata/settings/CoordinatorSessionSettings.java||server/src/main/java/io/crate/metadata/settings/CoordinatorSessionSettings.java",
          "server/src/main/java/io/crate/metadata/settings/session/SessionSettingRegistry.java||server/src/main/java/io/crate/metadata/settings/session/SessionSettingRegistry.java",
          "server/src/main/java/io/crate/metadata/sys/SysSchemaInfo.java||server/src/main/java/io/crate/metadata/sys/SysSchemaInfo.java",
          "server/src/main/java/io/crate/metadata/sys/SysSessionsTableInfo.java||server/src/main/java/io/crate/metadata/sys/SysSessionsTableInfo.java",
          "server/src/main/java/io/crate/metadata/sys/SysTableDefinitions.java||server/src/main/java/io/crate/metadata/sys/SysTableDefinitions.java",
          "server/src/main/java/io/crate/protocols/postgres/AuthenticationContext.java||server/src/main/java/io/crate/protocols/postgres/AuthenticationContext.java",
          "server/src/main/java/io/crate/protocols/postgres/ConnectionProperties.java||server/src/main/java/io/crate/protocols/postgres/ConnectionProperties.java",
          "server/src/main/java/io/crate/protocols/postgres/PostgresWireProtocol.java||server/src/main/java/io/crate/protocols/postgres/PostgresWireProtocol.java",
          "server/src/main/java/io/crate/rest/action/SqlHttpHandler.java||server/src/main/java/io/crate/rest/action/SqlHttpHandler.java",
          "server/src/test/java/io/crate/action/sql/SessionsTest.java||server/src/test/java/io/crate/action/sql/SessionsTest.java",
          "server/src/test/java/io/crate/integrationtests/BaseRolesIntegrationTest.java||server/src/test/java/io/crate/integrationtests/BaseRolesIntegrationTest.java",
          "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java",
          "server/src/test/java/io/crate/integrationtests/InformationSchemaTest.java||server/src/test/java/io/crate/integrationtests/InformationSchemaTest.java",
          "server/src/test/java/io/crate/integrationtests/PgCatalogITest.java||server/src/test/java/io/crate/integrationtests/PgCatalogITest.java",
          "server/src/test/java/io/crate/integrationtests/PrivilegesIntegrationTest.java||server/src/test/java/io/crate/integrationtests/PrivilegesIntegrationTest.java",
          "server/src/test/java/io/crate/integrationtests/TableSettingsTest.java||server/src/test/java/io/crate/integrationtests/TableSettingsTest.java",
          "server/src/test/java/io/crate/integrationtests/UserSessionIntegrationTest.java||server/src/test/java/io/crate/integrationtests/UserSessionIntegrationTest.java",
          "server/src/test/java/io/crate/protocols/postgres/PgClientTest.java||server/src/test/java/io/crate/protocols/postgres/PgClientTest.java",
          "server/src/test/java/io/crate/protocols/postgres/PostgresWireProtocolTest.java||server/src/test/java/io/crate/protocols/postgres/PostgresWireProtocolTest.java",
          "server/src/test/java/io/crate/rest/action/SqlHttpHandlerTest.java||server/src/test/java/io/crate/rest/action/SqlHttpHandlerTest.java",
          "server/src/test/java/io/crate/statistics/TableStatsServiceTest.java||server/src/test/java/io/crate/statistics/TableStatsServiceTest.java",
          "server/src/test/java/org/elasticsearch/indices/IndicesServiceCloseTests.java||server/src/test/java/org/elasticsearch/indices/IndicesServiceCloseTests.java",
          "server/src/testFixtures/java/io/crate/testing/SQLExecutor.java||server/src/testFixtures/java/io/crate/testing/SQLExecutor.java",
          "server/src/testFixtures/java/io/crate/testing/SQLTransportExecutor.java||server/src/testFixtures/java/io/crate/testing/SQLTransportExecutor.java",
          "server/src/testFixtures/java/org/elasticsearch/test/IntegTestCase.java||server/src/testFixtures/java/org/elasticsearch/test/IntegTestCase.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
          ],
          "candidate": [
            "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
          ]
        }
      },
      "candidate_diff": {
        "server/src/main/java/io/crate/action/sql/Session.java||server/src/main/java/io/crate/action/sql/Session.java": [
          "File: server/src/main/java/io/crate/action/sql/Session.java -> server/src/main/java/io/crate/action/sql/Session.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.action.sql;",
          "24: import java.util.ArrayList;",
          "25: import java.util.HashMap;",
          "26: import java.util.Iterator;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.net.InetAddress;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: import io.crate.analyze.QueriedSelectRelation;",
          "55: import io.crate.analyze.relations.AbstractTableRelation;",
          "56: import io.crate.analyze.relations.AnalyzedRelation;",
          "57: import io.crate.common.collections.Lists;",
          "58: import io.crate.common.unit.TimeValue;",
          "59: import io.crate.data.Row;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: import io.crate.auth.Protocol;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78: import io.crate.planner.PlannerContext;",
          "79: import io.crate.planner.operators.StatementClassifier;",
          "80: import io.crate.planner.operators.SubQueryResults;",
          "81: import io.crate.protocols.postgres.FormatCodes;",
          "82: import io.crate.protocols.postgres.JobsLogsUpdateListener;",
          "83: import io.crate.protocols.postgres.Portal;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83: import io.crate.protocols.postgres.ConnectionProperties;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "148:     private UUID mostRecentJobID;",
          "150:     private final int id;",
          "151:     private final int secret;",
          "152:     private final Analyzer analyzer;",
          "153:     private final Planner planner;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154:     private final ConnectionProperties connectionProperties;",
          "155:     private final long timeCreated;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "156:     private final Runnable onClose;",
          "158:     private TransactionState currentTransactionState = TransactionState.IDLE;",
          "161:     public Session(int sessionId,",
          "162:                    Analyzer analyzer,",
          "163:                    Planner planner,",
          "164:                    JobsLogs jobsLogs,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:     private volatile String lastStmt;",
          "170:                    @Nullable ConnectionProperties connectionProperties,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "167:                    CoordinatorSessionSettings sessionSettings,",
          "168:                    Runnable onClose) {",
          "169:         this.id = sessionId;",
          "170:         this.secret = ThreadLocalRandom.current().nextInt();",
          "171:         this.analyzer = analyzer;",
          "172:         this.planner = planner;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179:         this.connectionProperties = connectionProperties;",
          "180:         this.timeCreated = System.currentTimeMillis();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "181:         return id;",
          "182:     }",
          "184:     public int secret() {",
          "185:         return secret;",
          "186:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:     public long timeCreated() {",
          "196:         return timeCreated;",
          "197:     }",
          "199:     public boolean isSystemSession() {",
          "200:         return connectionProperties == null;",
          "201:     }",
          "203:     public InetAddress clientAddress() {",
          "204:         return connectionProperties == null ? null : connectionProperties.address();",
          "205:     }",
          "207:     public Protocol protocol() {",
          "208:         return connectionProperties == null ? null : connectionProperties.protocol();",
          "209:     }",
          "211:     public boolean hasSSL() {",
          "212:         return connectionProperties != null && connectionProperties.hasSSL();",
          "213:     }",
          "215:     public String lastStmt() {",
          "216:         return lastStmt;",
          "217:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "192:     public void quickExec(String statement, ResultReceiver<?> resultReceiver, Row params) {",
          "193:         CoordinatorTxnCtx txnCtx = new CoordinatorTxnCtx(sessionSettings);",
          "194:         Statement parsedStmt = SqlParser.createStatement(statement);",
          "195:         AnalyzedStatement analyzedStatement = analyzer.analyze(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:         lastStmt = statement;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "634:         PreparedStmt firstPreparedStatement = toExec.get(0).portal().preparedStmt();",
          "635:         AnalyzedStatement analyzedStatement = firstPreparedStatement.analyzedStatement();",
          "637:         Plan plan;",
          "638:         try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "672:         lastStmt = firstPreparedStatement.rawStatement();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "716:         );",
          "717:         var analyzedStmt = portal.analyzedStatement();",
          "718:         String rawStatement = portal.preparedStmt().rawStatement();",
          "719:         if (analyzedStmt == null) {",
          "720:             String errorMsg = \"Statement must have been analyzed: \" + rawStatement;",
          "721:             jobsLogs.logPreExecutionFailure(jobId, rawStatement, errorMsg, sessionSettings.sessionUser());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "756:         lastStmt = rawStatement;",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/action/sql/Sessions.java||server/src/main/java/io/crate/action/sql/Sessions.java": [
          "File: server/src/main/java/io/crate/action/sql/Sessions.java -> server/src/main/java/io/crate/action/sql/Sessions.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: import io.crate.planner.DependencyCarrier;",
          "52: import io.crate.planner.Planner;",
          "53: import io.crate.planner.optimizer.LoadedRules;",
          "54: import io.crate.protocols.postgres.KeyData;",
          "55: import io.crate.role.Permission;",
          "56: import io.crate.role.Role;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: import io.crate.protocols.postgres.ConnectionProperties;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:         this.sessionSettingRegistry = sessionSettingRegistry;",
          "127:     }",
          "130:         if (disabled) {",
          "131:             throw new NodeDisconnectedException(clusterService.localNode(), \"sql\");",
          "132:         }",
          "133:         int sessionId = nextSessionId.incrementAndGet();",
          "134:         Session session = new Session(",
          "135:             sessionId,",
          "136:             analyzer,",
          "137:             planner,",
          "138:             jobsLogs,",
          "",
          "[Removed Lines]",
          "129:     private Session newSession(CoordinatorSessionSettings sessionSettings) {",
          "",
          "[Added Lines]",
          "130:     private Session newSession(@Nullable ConnectionProperties connectionProperties,",
          "131:                                CoordinatorSessionSettings sessionSettings) {",
          "138:             connectionProperties,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145:         return session;",
          "146:     }",
          "149:         CoordinatorSessionSettings sessionSettings;",
          "150:         if (defaultSchema == null) {",
          "151:             sessionSettings = new CoordinatorSessionSettings(",
          "",
          "[Removed Lines]",
          "148:     public Session newSession(@Nullable String defaultSchema, Role authenticatedUser) {",
          "",
          "[Added Lines]",
          "151:     public Session newSession(ConnectionProperties connectionProperties,",
          "152:                               @Nullable String defaultSchema,",
          "153:                               Role authenticatedUser) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170:             setting.apply(sessionSettings, entry.getValue());",
          "171:         }",
          "174:     }",
          "176:     public Session newSystemSession() {",
          "178:     }",
          "",
          "[Removed Lines]",
          "173:         return newSession(sessionSettings);",
          "177:         return newSession(CoordinatorSessionSettings.systemDefaults());",
          "",
          "[Added Lines]",
          "178:         return newSession(connectionProperties, sessionSettings);",
          "182:         return newSession(null, CoordinatorSessionSettings.systemDefaults());",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/metadata/settings/CoordinatorSessionSettings.java||server/src/main/java/io/crate/metadata/settings/CoordinatorSessionSettings.java": [
          "File: server/src/main/java/io/crate/metadata/settings/CoordinatorSessionSettings.java -> server/src/main/java/io/crate/metadata/settings/CoordinatorSessionSettings.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import static io.crate.Constants.DEFAULT_DATE_STYLE;",
          "26: import java.util.HashSet;",
          "27: import java.util.Set;",
          "29: import io.crate.common.unit.TimeValue;",
          "30: import io.crate.metadata.SearchPath;",
          "31: import io.crate.planner.optimizer.LoadedRules;",
          "32: import io.crate.planner.optimizer.Rule;",
          "33: import io.crate.role.Role;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import java.util.Comparator;",
          "28: import java.util.Map;",
          "30: import java.util.TreeMap;",
          "31: import java.util.stream.Collectors;",
          "32: import java.util.stream.StreamSupport;",
          "34: import io.crate.action.sql.Sessions;",
          "37: import io.crate.metadata.settings.session.SessionSettingRegistry;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:     public void memoryLimit(int memoryLimit) {",
          "171:         this.memoryLimit = memoryLimit;",
          "172:     }",
          "173: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181:     public Map<String, Object> toMap() {",
          "182:         Map<String, Object> map = new TreeMap<>();",
          "183:         map.put(SessionSettingRegistry.HASH_JOIN_KEY, hashJoinsEnabled);",
          "184:         map.put(SessionSettingRegistry.SEARCH_PATH_KEY,",
          "185:             StreamSupport.stream(searchPath.spliterator(), false).collect(Collectors.joining(\",\")));",
          "186:         map.put(SessionSettingRegistry.ERROR_ON_UNKNOWN_OBJECT_KEY, errorOnUnknownObjectKey);",
          "187:         map.put(SessionSettingRegistry.DATE_STYLE_KEY, dateStyle);",
          "188:         map.put(SessionSettingRegistry.APPLICATION_NAME_KEY, applicationName);",
          "189:         map.put(Sessions.MEMORY_LIMIT_KEY, memoryLimit);",
          "190:         map.put(Sessions.STATEMENT_TIMEOUT_KEY, statementTimeout.toString());",
          "191:         map.put(\"disabled_optimizer_rules\",",
          "192:             excludedOptimizerRules",
          "193:                 .stream()",
          "194:                 .sorted(Comparator.comparing(Class::getSimpleName))",
          "195:                 .map(Rule::sessionSettingName)",
          "196:                 .collect(Collectors.joining(\",\")));",
          "197:         return map;",
          "198:     }",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/metadata/settings/session/SessionSettingRegistry.java||server/src/main/java/io/crate/metadata/settings/session/SessionSettingRegistry.java": [
          "File: server/src/main/java/io/crate/metadata/settings/session/SessionSettingRegistry.java -> server/src/main/java/io/crate/metadata/settings/session/SessionSettingRegistry.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: @Singleton",
          "50: public class SessionSettingRegistry {",
          "53:     public static final String HASH_JOIN_KEY = \"enable_hashjoin\";",
          "54:     static final String MAX_INDEX_KEYS = \"max_index_keys\";",
          "55:     static final String MAX_IDENTIFIER_LENGTH = \"max_identifier_length\";",
          "56:     static final String SERVER_VERSION_NUM = \"server_version_num\";",
          "57:     static final String SERVER_VERSION = \"server_version\";",
          "58:     static final String STANDARD_CONFORMING_STRINGS = \"standard_conforming_strings\";",
          "63:     static final SessionSetting<String> APPLICATION_NAME = new SessionSetting<>(",
          "64:         APPLICATION_NAME_KEY,",
          "65:         inputs -> DataTypes.STRING.implicitCast(inputs[0]),",
          "",
          "[Removed Lines]",
          "52:     private static final String SEARCH_PATH_KEY = \"search_path\";",
          "59:     static final String ERROR_ON_UNKNOWN_OBJECT_KEY = \"error_on_unknown_object_key\";",
          "60:     static final String DATE_STYLE_KEY = \"datestyle\";",
          "61:     static final String APPLICATION_NAME_KEY = \"application_name\";",
          "",
          "[Added Lines]",
          "52:     public static final String SEARCH_PATH_KEY = \"search_path\";",
          "54:     public static final String ERROR_ON_UNKNOWN_OBJECT_KEY = \"error_on_unknown_object_key\";",
          "55:     public static final String APPLICATION_NAME_KEY = \"application_name\";",
          "56:     public static final String DATE_STYLE_KEY = \"datestyle\";",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/metadata/sys/SysSchemaInfo.java||server/src/main/java/io/crate/metadata/sys/SysSchemaInfo.java": [
          "File: server/src/main/java/io/crate/metadata/sys/SysSchemaInfo.java -> server/src/main/java/io/crate/metadata/sys/SysSchemaInfo.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:                 SysUsersTableInfo.IDENT.name(),",
          "71:                 SysUsersTableInfo.create(() -> clusterService.state().metadata().clusterUUID())),",
          "72:             Map.entry(SysRolesTableInfo.IDENT.name(), SysRolesTableInfo.INSTANCE),",
          "74:         );",
          "75:     }",
          "",
          "[Removed Lines]",
          "73:             Map.entry(SysPrivilegesTableInfo.IDENT.name(), SysPrivilegesTableInfo.INSTANCE)",
          "",
          "[Added Lines]",
          "73:             Map.entry(SysPrivilegesTableInfo.IDENT.name(), SysPrivilegesTableInfo.INSTANCE),",
          "74:             Map.entry(SysSessionsTableInfo.IDENT.name(), SysSessionsTableInfo.create(localNode))",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/metadata/sys/SysSessionsTableInfo.java||server/src/main/java/io/crate/metadata/sys/SysSessionsTableInfo.java": [
          "File: server/src/main/java/io/crate/metadata/sys/SysSessionsTableInfo.java -> server/src/main/java/io/crate/metadata/sys/SysSessionsTableInfo.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: package io.crate.metadata.sys;",
          "24: import static io.crate.types.DataTypes.BOOLEAN;",
          "25: import static io.crate.types.DataTypes.INTEGER;",
          "26: import static io.crate.types.DataTypes.STRING;",
          "27: import static io.crate.types.DataTypes.TIMESTAMPZ;",
          "29: import java.net.InetAddress;",
          "30: import java.util.function.Supplier;",
          "32: import org.elasticsearch.cluster.node.DiscoveryNode;",
          "33: import org.jetbrains.annotations.Nullable;",
          "35: import io.crate.action.sql.Session;",
          "36: import io.crate.metadata.ColumnIdent;",
          "37: import io.crate.metadata.RelationName;",
          "38: import io.crate.metadata.Routing;",
          "39: import io.crate.metadata.SystemTable;",
          "41: public final class SysSessionsTableInfo {",
          "43:     public static final RelationName IDENT = new RelationName(SysSchemaInfo.NAME, \"sessions\");",
          "45:     private static final String ID = \"id\";",
          "47:     private static final String AUTHENTICATED_USER = \"auth_user\";",
          "48:     private static final String SESSION_USER = \"session_user\";",
          "49:     private static final String HANDLER_NODE = \"handler_node\";",
          "50:     private static final String CLIENT_ADDRESS = \"client_address\";",
          "51:     private static final String TIME_CREATED = \"time_created\";",
          "52:     private static final String PROTOCOL = \"protocol\";",
          "53:     private static final String SSL = \"ssl\";",
          "54:     private static final String SETTINGS = \"settings\";",
          "55:     private static final String LAST_STMT = \"last_statement\";",
          "57:     private SysSessionsTableInfo() {}",
          "59:     public static SystemTable<Session> create(Supplier<DiscoveryNode> localNode) {",
          "60:         return SystemTable.<Session>builder(IDENT)",
          "61:             .add(ID, INTEGER, Session::id)",
          "62:             .add(SESSION_USER, STRING, s -> s.sessionSettings().sessionUser().name())",
          "63:             .add(AUTHENTICATED_USER, STRING, s -> s.sessionSettings().authenticatedUser().name())",
          "64:             .add(HANDLER_NODE, STRING, ignored -> localNode.get().getName())",
          "65:             .add(CLIENT_ADDRESS, STRING, s -> resolveClientNetAddress(s.clientAddress()))",
          "66:             .add(PROTOCOL, STRING, s -> s.protocol().toString())",
          "67:             .add(SSL, BOOLEAN, Session::hasSSL)",
          "68:             .add(TIME_CREATED, TIMESTAMPZ, Session::timeCreated)",
          "69:             .addDynamicObject(SETTINGS, STRING, s -> s == null ? null : s.sessionSettings().toMap())",
          "70:             .add(LAST_STMT, STRING, Session::lastStmt)",
          "71:             .setPrimaryKeys(ColumnIdent.of(HANDLER_NODE), ColumnIdent.of(ID))",
          "72:             .withRouting((state, routingProvider, sessionSettings) -> Routing.forTableOnAllNodes(IDENT, state.nodes()))",
          "73:             .build();",
          "74:     }",
          "76:     private static String resolveClientNetAddress(@Nullable InetAddress clientAddress) {",
          "77:         if (clientAddress == null) {",
          "78:             return \"localhost\";",
          "79:         }",
          "80:         return clientAddress.getHostAddress();",
          "81:     }",
          "82: }",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/metadata/sys/SysTableDefinitions.java||server/src/main/java/io/crate/metadata/sys/SysTableDefinitions.java": [
          "File: server/src/main/java/io/crate/metadata/sys/SysTableDefinitions.java -> server/src/main/java/io/crate/metadata/sys/SysTableDefinitions.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import java.util.Collections;",
          "27: import java.util.Map;",
          "28: import java.util.Set;",
          "30: import java.util.function.Supplier;",
          "31: import java.util.stream.StreamSupport;",
          "",
          "[Removed Lines]",
          "29: import java.util.concurrent.CompletableFuture;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: import org.elasticsearch.common.inject.Inject;",
          "37: import org.elasticsearch.repositories.RepositoriesService;",
          "39: import io.crate.execution.engine.collect.files.SummitsIterable;",
          "40: import io.crate.execution.engine.collect.stats.JobsLogs;",
          "41: import io.crate.expression.reference.StaticTableDefinition;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import io.crate.action.sql.Sessions;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:                                RepositoriesService repositoriesService,",
          "70:                                SysSnapshots sysSnapshots,",
          "71:                                SysAllocations sysAllocations,",
          "73:         Supplier<DiscoveryNode> localNode = clusterService::localNode;",
          "74:         var sysClusterTableInfo = (SystemTable<Void>) sysSchemaInfo.getTableInfo(SysClusterTableInfo.IDENT.name());",
          "75:         assert sysClusterTableInfo != null : \"sys.cluster table must exist in sys schema\";",
          "",
          "[Removed Lines]",
          "72:                                ShardSegments shardSegmentInfos) {",
          "",
          "[Added Lines]",
          "72:                                ShardSegments shardSegmentInfos,",
          "73:                                Sessions sessions) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "82:             Map.entry(",
          "83:                 SysUsersTableInfo.IDENT,",
          "84:                 new StaticTableDefinition<>(",
          "86:                     userTable.expressions(),",
          "87:                     false",
          "88:                 )",
          "",
          "[Removed Lines]",
          "85:                     () -> CompletableFuture.completedFuture(roles.roles().stream().filter(Role::isUser).toList()),",
          "",
          "[Added Lines]",
          "86:                     () -> completedFuture(roles.roles().stream().filter(Role::isUser).toList()),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "90:             Map.entry(",
          "91:                 SysRolesTableInfo.IDENT,",
          "92:                 new StaticTableDefinition<>(",
          "94:                     SysRolesTableInfo.INSTANCE.expressions(),",
          "95:                     false",
          "96:                 )",
          "",
          "[Removed Lines]",
          "93:                     () -> CompletableFuture.completedFuture(roles.roles().stream().filter(r -> r.isUser() == false).toList()),",
          "",
          "[Added Lines]",
          "94:                     () -> completedFuture(roles.roles().stream().filter(r -> r.isUser() == false).toList()),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "98:             Map.entry(",
          "99:                 SysPrivilegesTableInfo.IDENT,",
          "100:                 new StaticTableDefinition<>(",
          "102:                     SysPrivilegesTableInfo.INSTANCE.expressions(),",
          "103:                     false",
          "104:                 )",
          "",
          "[Removed Lines]",
          "101:                     () -> CompletableFuture.completedFuture(SysPrivilegesTableInfo.buildPrivilegesRows(roles.roles())),",
          "",
          "[Added Lines]",
          "102:                     () -> completedFuture(SysPrivilegesTableInfo.buildPrivilegesRows(roles.roles())),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "221:                     SysSegmentsTableInfo.create(clusterService::localNode).expressions(),",
          "222:                     true",
          "223:                 )",
          "224:             )",
          "225:         );",
          "226:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:             ),",
          "226:             Map.entry(",
          "227:                 SysSessionsTableInfo.IDENT,",
          "228:                 new StaticTableDefinition<>(",
          "229:                     (txnCtx, user) -> completedFuture(",
          "230:                         StreamSupport.stream(sessions.getActive().spliterator(), false)",
          "231:                             .filter(session -> session.isSystemSession() == false",
          "232:                                 && (roles.hasPrivilege(user, Permission.AL, Securable.CLUSTER, null)",
          "233:                                     || session.sessionSettings().sessionUser().equals(user)))",
          "234:                         .toList()),",
          "235:                     SysSessionsTableInfo.create(clusterService::localNode).expressions(),",
          "236:                     false)",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/protocols/postgres/AuthenticationContext.java||server/src/main/java/io/crate/protocols/postgres/AuthenticationContext.java": [
          "File: server/src/main/java/io/crate/protocols/postgres/AuthenticationContext.java -> server/src/main/java/io/crate/protocols/postgres/AuthenticationContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:         return credentials.password();",
          "81:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:     ConnectionProperties connectionProperties() {",
          "84:         return connProperties;",
          "85:     }",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/protocols/postgres/ConnectionProperties.java||server/src/main/java/io/crate/protocols/postgres/ConnectionProperties.java": [
          "File: server/src/main/java/io/crate/protocols/postgres/ConnectionProperties.java -> server/src/main/java/io/crate/protocols/postgres/ConnectionProperties.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.protocols.postgres;",
          "30: import java.net.InetAddress;",
          "31: import java.security.cert.Certificate;",
          "32: import java.util.ArrayList;",
          "33: import java.util.List;",
          "35: public class ConnectionProperties {",
          "37:     private final InetAddress address;",
          "",
          "[Removed Lines]",
          "24: import io.crate.auth.Credentials;",
          "25: import io.crate.auth.Protocol;",
          "27: import org.jetbrains.annotations.Nullable;",
          "28: import javax.net.ssl.SSLPeerUnverifiedException;",
          "29: import javax.net.ssl.SSLSession;",
          "",
          "[Added Lines]",
          "29: import javax.net.ssl.SSLPeerUnverifiedException;",
          "30: import javax.net.ssl.SSLSession;",
          "32: import org.jetbrains.annotations.Nullable;",
          "34: import io.crate.auth.Credentials;",
          "35: import io.crate.auth.Protocol;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:         TRUST",
          "48:     }",
          "51:                                 InetAddress address,",
          "52:                                 Protocol protocol,",
          "53:                                 @Nullable SSLSession sslSession) {",
          "",
          "[Removed Lines]",
          "50:     public ConnectionProperties(Credentials credentials,",
          "",
          "[Added Lines]",
          "52:     public ConnectionProperties(@Nullable Credentials credentials,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:         if (certificate != null) {",
          "73:             clientMethods.add(ClientMethod.CERT);",
          "74:         }",
          "81:         }",
          "82:     }",
          "",
          "[Removed Lines]",
          "75:         if (credentials.password() != null || Protocol.POSTGRES.equals(protocol)) {",
          "77:             clientMethods.add(ConnectionProperties.ClientMethod.PASSWORD);",
          "78:         }",
          "79:         if (credentials.decodedToken() != null) {",
          "80:             clientMethods.add(ConnectionProperties.ClientMethod.JWT);",
          "",
          "[Added Lines]",
          "77:         if (credentials != null) {",
          "78:             if (credentials.password() != null || Protocol.POSTGRES.equals(protocol)) {",
          "80:                 clientMethods.add(ConnectionProperties.ClientMethod.PASSWORD);",
          "81:             }",
          "82:             if (credentials.decodedToken() != null) {",
          "83:                 clientMethods.add(ConnectionProperties.ClientMethod.JWT);",
          "84:             }",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/protocols/postgres/PostgresWireProtocol.java||server/src/main/java/io/crate/protocols/postgres/PostgresWireProtocol.java": [
          "File: server/src/main/java/io/crate/protocols/postgres/PostgresWireProtocol.java -> server/src/main/java/io/crate/protocols/postgres/PostgresWireProtocol.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: import org.elasticsearch.Version;",
          "49: import org.elasticsearch.http.netty4.Netty4HttpServerTransport;",
          "50: import org.jetbrains.annotations.Nullable;",
          "52: import io.crate.action.sql.DescribeResult;",
          "53: import io.crate.action.sql.ResultReceiver;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: import org.jetbrains.annotations.VisibleForTesting;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: import io.crate.auth.AuthenticationMethod;",
          "59: import io.crate.auth.Credentials;",
          "60: import io.crate.auth.Protocol;",
          "62: import io.crate.common.collections.Lists;",
          "63: import io.crate.expression.symbol.Literal;",
          "64: import io.crate.expression.symbol.Symbol;",
          "",
          "[Removed Lines]",
          "61: import org.jetbrains.annotations.VisibleForTesting;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:     private static final Logger LOGGER = LogManager.getLogger(PostgresWireProtocol.class);",
          "197:     private static final String PASSWORD_AUTH_NAME = \"password\";",
          "202:     final PgDecoder decoder;",
          "203:     final MessageHandler handler;",
          "",
          "[Removed Lines]",
          "199:     public static int SERVER_VERSION_NUM = 140000;",
          "200:     public static String PG_SERVER_VERSION = \"14.0\";",
          "",
          "[Added Lines]",
          "199:     public static final int SERVER_VERSION_NUM = 140000;",
          "200:     public static final String PG_SERVER_VERSION = \"14.0\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "257:             }",
          "258:             String value = readCString(buffer);",
          "259:             LOGGER.trace(\"payload: key={} value={}\", key, value);",
          "261:                 properties.setProperty(key, value);",
          "262:             }",
          "263:         }",
          "",
          "[Removed Lines]",
          "260:             if (!\"\".equals(key) && !\"\".equals(value)) {",
          "",
          "[Added Lines]",
          "260:             if (!key.isEmpty() && !\"\".equals(value)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "444:         try {",
          "445:             Role authenticatedUser = authContext.authenticate();",
          "446:             String database = properties.getProperty(\"database\");",
          "448:             String options = properties.getProperty(\"options\");",
          "449:             if (options != null) {",
          "450:                 applyOptions(options);",
          "",
          "[Removed Lines]",
          "447:             session = sessions.newSession(database, authenticatedUser);",
          "",
          "[Added Lines]",
          "447:             session = sessions.newSession(authContext.connectionProperties(), database, authenticatedUser);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "683:             Messages.sendEmptyQueryResponse(channel);",
          "684:             return;",
          "685:         }",
          "",
          "[Removed Lines]",
          "686:         List<? extends DataType> outputTypes = session.getOutputTypes(portalName);",
          "",
          "[Added Lines]",
          "686:         List<? extends DataType<?>> outputTypes = session.getOutputTypes(portalName);",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/rest/action/SqlHttpHandler.java||server/src/main/java/io/crate/rest/action/SqlHttpHandler.java": [
          "File: server/src/main/java/io/crate/rest/action/SqlHttpHandler.java -> server/src/main/java/io/crate/rest/action/SqlHttpHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import static io.crate.action.sql.Session.UNNAMED;",
          "25: import static io.crate.data.breaker.BlockBasedRamAccounting.MAX_BLOCK_SIZE_IN_BYTES;",
          "26: import static io.crate.protocols.http.Headers.isCloseConnection;",
          "27: import static java.util.Collections.emptyList;",
          "28: import static java.util.Collections.singletonList;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import static io.crate.protocols.SSL.getSession;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: import org.elasticsearch.common.settings.Settings;",
          "42: import org.elasticsearch.common.xcontent.XContentBuilder;",
          "43: import org.elasticsearch.common.xcontent.json.JsonXContent;",
          "44: import org.elasticsearch.http.netty4.cors.Netty4CorsConfig;",
          "45: import org.elasticsearch.http.netty4.cors.Netty4CorsHandler;",
          "46: import org.elasticsearch.indices.breaker.HierarchyCircuitBreakerService;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import org.elasticsearch.http.netty4.Netty4HttpServerTransport;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58: import io.crate.auth.AuthSettings;",
          "59: import io.crate.auth.Credentials;",
          "60: import io.crate.auth.HttpAuthUpstreamHandler;",
          "61: import io.crate.breaker.TypedRowAccounting;",
          "62: import io.crate.common.collections.Lists;",
          "63: import io.crate.data.breaker.BlockBasedRamAccounting;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: import io.crate.auth.Protocol;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "65: import io.crate.exceptions.SQLExceptions;",
          "66: import io.crate.expression.symbol.Symbol;",
          "67: import io.crate.protocols.http.Headers;",
          "68: import io.crate.role.Role;",
          "69: import io.crate.role.Roles;",
          "70: import io.netty.buffer.ByteBuf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: import io.crate.protocols.postgres.ConnectionProperties;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "108:     @Override",
          "109:     protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest request) {",
          "110:         if (request.uri().startsWith(\"/_sql\")) {",
          "112:             Map<String, List<String>> parameters = new QueryStringDecoder(request.uri()).parameters();",
          "113:             ByteBuf content = request.content();",
          "114:             handleSQLRequest(session, content, paramContainFlag(parameters, \"types\"))",
          "",
          "[Removed Lines]",
          "111:             Session session = ensureSession(request);",
          "",
          "[Added Lines]",
          "115:             Session session = ensureSession(",
          "116:                 new ConnectionProperties(",
          "117:                     null, // not used",
          "118:                     Netty4HttpServerTransport.getRemoteAddress(ctx.channel()),",
          "119:                     Protocol.HTTP,",
          "120:                     getSession(ctx.channel())),",
          "121:                 request);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "213:     }",
          "215:     @VisibleForTesting",
          "217:         String defaultSchema = request.headers().get(REQUEST_HEADER_SCHEMA);",
          "218:         Role authenticatedUser = userFromAuthHeader(request.headers().get(HttpHeaderNames.AUTHORIZATION));",
          "219:         Session session = this.session;",
          "220:         if (session == null) {",
          "222:         } else if (session.sessionSettings().authenticatedUser().equals(authenticatedUser) == false) {",
          "223:             session.close();",
          "225:         }",
          "226:         this.session = session;",
          "227:         return session;",
          "",
          "[Removed Lines]",
          "216:     Session ensureSession(FullHttpRequest request) {",
          "221:             session = sessions.newSession(defaultSchema, authenticatedUser);",
          "224:             session = sessions.newSession(defaultSchema, authenticatedUser);",
          "",
          "[Added Lines]",
          "226:     Session ensureSession(ConnectionProperties connectionProperties, FullHttpRequest request) {",
          "231:             session = sessions.newSession(connectionProperties, defaultSchema, authenticatedUser);",
          "234:             session = sessions.newSession(connectionProperties, defaultSchema, authenticatedUser);",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/action/sql/SessionsTest.java||server/src/test/java/io/crate/action/sql/SessionsTest.java": [
          "File: server/src/test/java/io/crate/action/sql/SessionsTest.java -> server/src/test/java/io/crate/action/sql/SessionsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: import org.mockito.Mockito;",
          "42: import io.crate.analyze.Analyzer;",
          "43: import io.crate.common.unit.TimeValue;",
          "44: import io.crate.data.InMemoryBatchIterator;",
          "45: import io.crate.execution.engine.collect.stats.JobsLogs;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import io.crate.auth.Protocol;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: import io.crate.metadata.settings.session.SessionSettingRegistry;",
          "50: import io.crate.planner.DependencyCarrier;",
          "51: import io.crate.planner.Planner;",
          "52: import io.crate.protocols.postgres.KeyData;",
          "53: import io.crate.role.Permission;",
          "54: import io.crate.role.Policy;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: import io.crate.protocols.postgres.ConnectionProperties;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:     public void test_super_user_and_al_privileges_can_view_all_cursors() throws Exception {",
          "93:         NodeContext nodeCtx = createNodeContext();",
          "94:         Sessions sessions = newSessions(nodeCtx);",
          "96:         session1.cursors.add(\"c1\", newCursor());",
          "99:         session2.cursors.add(\"c2\", newCursor());",
          "101:         assertThat(sessions.getCursors(Role.CRATE_USER)).hasSize(2);",
          "",
          "[Removed Lines]",
          "95:         Session session1 = sessions.newSession(\"doc\", RolesHelper.userOf(\"Arthur\"));",
          "98:         Session session2 = sessions.newSession(\"doc\", RolesHelper.userOf(\"Trillian\"));",
          "",
          "[Added Lines]",
          "97:         Session session1 = sessions.newSession(connectionProperties(), \"doc\", RolesHelper.userOf(\"Arthur\"));",
          "100:         Session session2 = sessions.newSession(connectionProperties(), \"doc\", RolesHelper.userOf(\"Trillian\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117:         Sessions sessions = newSessions(nodeCtx);",
          "119:         Role arthur = RolesHelper.userOf(\"Arthur\");",
          "121:         session1.cursors.add(\"c1\", newCursor());",
          "123:         Role trillian = RolesHelper.userOf(\"Trillian\");",
          "125:         session2.cursors.add(\"c2\", newCursor());",
          "127:         assertThat(sessions.getCursors(arthur)).hasSize(1);",
          "",
          "[Removed Lines]",
          "120:         Session session1 = sessions.newSession(\"doc\", arthur);",
          "124:         Session session2 = sessions.newSession(\"doc\", trillian);",
          "",
          "[Added Lines]",
          "122:         Session session1 = sessions.newSession(connectionProperties(), \"doc\", arthur);",
          "126:         Session session2 = sessions.newSession(connectionProperties(), \"doc\", trillian);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "143:             clusterService,",
          "144:             sessionSettingRegistry",
          "145:         );",
          "147:         assertThat(session.sessionSettings().statementTimeout())",
          "148:             .isEqualTo(TimeValue.timeValueSeconds(30));",
          "149:     }",
          "",
          "[Removed Lines]",
          "146:         Session session = sessions.newSession(\"doc\", Role.CRATE_USER);",
          "",
          "[Added Lines]",
          "148:         Session session = sessions.newSession(connectionProperties(), \"doc\", Role.CRATE_USER);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "153:         Sessions sessions = newSessions(createNodeContext());",
          "155:         Role john = RolesHelper.userOf(\"john\");",
          "157:         john = RolesHelper.userOf(\"john\", null).with(null, null, Map.of(\"enable_hashjoin\", false));",
          "159:     }",
          "161:     private Sessions newSessions(NodeContext nodeCtx) {",
          "",
          "[Removed Lines]",
          "156:         assertThat(sessions.newSession(\"\", john).sessionSettings().hashJoinsEnabled()).isTrue();",
          "158:         assertThat(sessions.newSession(\"\", john).sessionSettings().hashJoinsEnabled()).isFalse();",
          "",
          "[Added Lines]",
          "158:         assertThat(sessions.newSession(connectionProperties(), \"\", john)",
          "159:             .sessionSettings().hashJoinsEnabled()).isTrue();",
          "161:         assertThat(sessions.newSession(connectionProperties(), \"\", john)",
          "162:             .sessionSettings().hashJoinsEnabled()).isFalse();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "184:             List.of()",
          "185:         );",
          "186:     }",
          "187: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:     private static ConnectionProperties connectionProperties() {",
          "193:         return new ConnectionProperties(null, null, Protocol.HTTP, null);",
          "194:     }",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/BaseRolesIntegrationTest.java||server/src/test/java/io/crate/integrationtests/BaseRolesIntegrationTest.java": [
          "File: server/src/test/java/io/crate/integrationtests/BaseRolesIntegrationTest.java -> server/src/test/java/io/crate/integrationtests/BaseRolesIntegrationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import io.crate.action.sql.Session;",
          "31: import io.crate.action.sql.Sessions;",
          "32: import io.crate.role.Role;",
          "33: import io.crate.role.Roles;",
          "34: import io.crate.testing.SQLResponse;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import io.crate.auth.Protocol;",
          "33: import io.crate.protocols.postgres.ConnectionProperties;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:         Sessions sqlOperations = cluster().getInstance(Sessions.class);",
          "71:         Roles roles = cluster().getInstance(Roles.class);",
          "72:         Role user = roles.getUser(userName);",
          "74:             return execute(stmt, null, session);",
          "75:         }",
          "76:     }",
          "",
          "[Removed Lines]",
          "73:         try (Session session = sqlOperations.newSession(null, user)) {",
          "",
          "[Added Lines]",
          "75:         try (Session session = sqlOperations.newSession(",
          "76:             new ConnectionProperties(null, null, Protocol.HTTP, null), null, user)) {",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java": [
          "File: server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java -> server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: import com.carrotsearch.randomizedtesting.LifecycleScope;",
          "57: import io.crate.action.sql.Sessions;",
          "58: import io.crate.exceptions.UnauthorizedException;",
          "59: import io.crate.role.Role;",
          "60: import io.crate.role.Roles;",
          "61: import io.crate.testing.Asserts;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: import io.crate.auth.Protocol;",
          "60: import io.crate.protocols.postgres.ConnectionProperties;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1199:         var roles = cluster().getInstance(Roles.class);",
          "1200:         Role user = roles.getUser(\"test_user\");",
          "1201:         Sessions sqlOperations = cluster().getInstance(Sessions.class);",
          "1203:             assertThatThrownBy(() -> execute(\"COPY quotes FROM ?\", new Object[]{copyFilePath + \"test_copy_from.json\"}, session))",
          "1204:                 .isExactlyInstanceOf(UnauthorizedException.class)",
          "1205:                 .hasMessage(\"Only a superuser can read from the local file system\");",
          "",
          "[Removed Lines]",
          "1202:         try (var session = sqlOperations.newSession(null, user)) {",
          "",
          "[Added Lines]",
          "1204:         try (var session = sqlOperations.newSession(",
          "1205:             new ConnectionProperties(null, null, Protocol.HTTP, null), null, user)) {",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/InformationSchemaTest.java||server/src/test/java/io/crate/integrationtests/InformationSchemaTest.java": [
          "File: server/src/test/java/io/crate/integrationtests/InformationSchemaTest.java -> server/src/test/java/io/crate/integrationtests/InformationSchemaTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:             \"NULL| NULL| NULL| strict| NULL| NULL| NULL| SYSTEM GENERATED| NULL| NULL| NULL| crate| repositories| sys| BASE TABLE| NULL\",",
          "122:             \"NULL| NULL| NULL| strict| NULL| NULL| NULL| SYSTEM GENERATED| NULL| NULL| NULL| crate| roles| sys| BASE TABLE| NULL\",",
          "123:             \"NULL| NULL| NULL| strict| NULL| NULL| NULL| SYSTEM GENERATED| NULL| NULL| NULL| crate| segments| sys| BASE TABLE| NULL\",",
          "124:             \"NULL| NULL| NULL| strict| NULL| NULL| NULL| SYSTEM GENERATED| NULL| NULL| NULL| crate| shards| sys| BASE TABLE| NULL\",",
          "125:             \"NULL| NULL| NULL| strict| NULL| NULL| NULL| SYSTEM GENERATED| NULL| NULL| NULL| crate| snapshot_restore| sys| BASE TABLE| NULL\",",
          "126:             \"NULL| NULL| NULL| strict| NULL| NULL| NULL| SYSTEM GENERATED| NULL| NULL| NULL| crate| snapshots| sys| BASE TABLE| NULL\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:             \"NULL| NULL| NULL| strict| NULL| NULL| NULL| SYSTEM GENERATED| NULL| NULL| NULL| crate| sessions| sys| BASE TABLE| NULL\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "207:     @Test",
          "208:     public void testSearchInformationSchemaTablesRefresh() {",
          "209:         execute(\"select * from information_schema.tables\");",
          "212:         execute(\"create table t4 (col1 integer, col2 string) with(number_of_replicas=0)\");",
          "213:         ensureYellow(getFqn(\"t4\"));",
          "215:         execute(\"select * from information_schema.tables\");",
          "217:     }",
          "219:     @Test",
          "",
          "[Removed Lines]",
          "210:         assertThat(response.rowCount()).isEqualTo(67L);",
          "216:         assertThat(response.rowCount()).isEqualTo(68L);",
          "",
          "[Added Lines]",
          "211:         assertThat(response.rowCount()).isEqualTo(68L);",
          "217:         assertThat(response.rowCount()).isEqualTo(69L);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "426:             \"privileges_pk| PRIMARY KEY| privileges| sys\",",
          "427:             \"repositories_pk| PRIMARY KEY| repositories| sys\",",
          "428:             \"roles_pk| PRIMARY KEY| roles| sys\",",
          "429:             \"shards_pk| PRIMARY KEY| shards| sys\",",
          "430:             \"snapshot_restore_pk| PRIMARY KEY| snapshot_restore| sys\",",
          "431:             \"snapshots_pk| PRIMARY KEY| snapshots| sys\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430:             \"sessions_pk| PRIMARY KEY| sessions| sys\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "569:     @Test",
          "570:     public void testDefaultColumns() {",
          "571:         execute(\"select * from information_schema.columns order by table_schema, table_name\");",
          "573:     }",
          "575:     @Test",
          "",
          "[Removed Lines]",
          "572:         assertThat(response.rowCount()).isEqualTo(1013);",
          "",
          "[Added Lines]",
          "574:         assertThat(response.rowCount()).isEqualTo(1023);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "890:         execute(\"create table t3 (id integer, col1 string) clustered into 3 shards with(number_of_replicas=0)\");",
          "891:         execute(\"select count(*) from information_schema.tables\");",
          "892:         assertThat(response.rowCount()).isEqualTo(1);",
          "894:     }",
          "896:     @Test",
          "",
          "[Removed Lines]",
          "893:         assertThat(response.rows()[0][0]).isEqualTo(70L);",
          "",
          "[Added Lines]",
          "895:         assertThat(response.rows()[0][0]).isEqualTo(71L);",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/PgCatalogITest.java||server/src/test/java/io/crate/integrationtests/PgCatalogITest.java": [
          "File: server/src/test/java/io/crate/integrationtests/PgCatalogITest.java -> server/src/test/java/io/crate/integrationtests/PgCatalogITest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.integrationtests;",
          "24: import static io.crate.testing.Asserts.assertThat;",
          "27: import java.util.ArrayList;",
          "28: import java.util.Arrays;",
          "",
          "[Removed Lines]",
          "25: import static org.assertj.core.api.Assertions.assertThat;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: import org.junit.Test;",
          "36: import io.crate.action.sql.Sessions;",
          "37: import io.crate.metadata.NodeContext;",
          "38: import io.crate.metadata.RelationName;",
          "39: import io.crate.metadata.Schemas;",
          "40: import io.crate.metadata.pgcatalog.OidHash;",
          "41: import io.crate.metadata.table.SchemaInfo;",
          "42: import io.crate.metadata.view.ViewInfo;",
          "43: import io.crate.role.Roles;",
          "44: import io.crate.testing.TestingHelpers;",
          "45: import io.crate.testing.UseHashJoins;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: import io.crate.auth.Protocol;",
          "43: import io.crate.protocols.postgres.ConnectionProperties;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:         Roles roles = cluster().getInstance(Roles.class);",
          "125:         Sessions sessions = cluster().getInstance(Sessions.class);",
          "127:             execute(\"select nspname from pg_catalog.pg_namespace order by nspname\", session);",
          "129:             assertThat(response).hasRows(",
          "",
          "[Removed Lines]",
          "126:         try (var session = sessions.newSession(\"doc\", roles.getUser(\"hoschi\"))) {",
          "",
          "[Added Lines]",
          "127:         try (var session = sessions.newSession(",
          "128:             new ConnectionProperties(null, null, Protocol.POSTGRES, null), \"doc\", roles.getUser(\"hoschi\"))) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136:         execute(\"create view vip.v1 as select 1\");",
          "137:         execute(\"grant dql on view vip.v1 to hoschi\");",
          "139:             execute(\"select nspname from pg_catalog.pg_namespace order by nspname\", session);",
          "140:             assertThat(response).hasRows(",
          "141:                 \"doc\",",
          "",
          "[Removed Lines]",
          "138:         try (var session = sessions.newSession(\"doc\", roles.getUser(\"hoschi\"))) {",
          "",
          "[Added Lines]",
          "140:         try (var session = sessions.newSession(",
          "141:             new ConnectionProperties(null, null, Protocol.POSTGRES, null), \"doc\", roles.getUser(\"hoschi\"))) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "162:     @Test",
          "163:     public void testPgIndexTable() {",
          "164:         execute(\"select count(*) from pg_catalog.pg_index\");",
          "166:     }",
          "168:     @Test",
          "",
          "[Removed Lines]",
          "165:         assertThat(response).hasRows(\"24\");",
          "",
          "[Added Lines]",
          "168:         assertThat(response).hasRows(\"25\");",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/PrivilegesIntegrationTest.java||server/src/test/java/io/crate/integrationtests/PrivilegesIntegrationTest.java": [
          "File: server/src/test/java/io/crate/integrationtests/PrivilegesIntegrationTest.java -> server/src/test/java/io/crate/integrationtests/PrivilegesIntegrationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: import io.crate.action.sql.Session;",
          "38: import io.crate.action.sql.Sessions;",
          "39: import io.crate.expression.udf.UserDefinedFunctionService;",
          "40: import io.crate.role.Role;",
          "41: import io.crate.role.Roles;",
          "42: import io.crate.testing.Asserts;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import io.crate.auth.Protocol;",
          "41: import io.crate.protocols.postgres.ConnectionProperties;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:     private Session testUserSession(String defaultSchema) {",
          "71:         Role user = roles.findUser(TEST_USERNAME);",
          "72:         assertThat(user).isNotNull();",
          "74:     }",
          "76:     @Override",
          "",
          "[Removed Lines]",
          "73:         return sqlOperations.newSession(defaultSchema, user);",
          "",
          "[Added Lines]",
          "75:         return sqlOperations.newSession(",
          "76:             new ConnectionProperties(null, null, Protocol.HTTP, null), defaultSchema, user);",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/TableSettingsTest.java||server/src/test/java/io/crate/integrationtests/TableSettingsTest.java": [
          "File: server/src/test/java/io/crate/integrationtests/TableSettingsTest.java -> server/src/test/java/io/crate/integrationtests/TableSettingsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     public void testFilterOnNull() throws Exception {",
          "97:         execute(\"select * from information_schema.tables \" +",
          "98:                 \"where settings IS NULL\");",
          "100:         execute(\"select * from information_schema.tables \" +",
          "101:                 \"where table_name = 'settings_table' and settings['blocks']['read'] IS NULL\");",
          "102:         assertThat(response.rowCount()).isEqualTo(0);",
          "",
          "[Removed Lines]",
          "99:         assertThat(response.rowCount()).isEqualTo(67L);",
          "",
          "[Added Lines]",
          "99:         assertThat(response.rowCount()).isEqualTo(68L);",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/UserSessionIntegrationTest.java||server/src/test/java/io/crate/integrationtests/UserSessionIntegrationTest.java": [
          "File: server/src/test/java/io/crate/integrationtests/UserSessionIntegrationTest.java -> server/src/test/java/io/crate/integrationtests/UserSessionIntegrationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.elasticsearch.test.IntegTestCase;",
          "27: import org.junit.Test;",
          "29: @IntegTestCase.ClusterScope(numDataNodes = 2, numClientNodes = 0, supportsDedicatedMasters = false)",
          "30: public class UserSessionIntegrationTest extends BaseRolesIntegrationTest {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import io.crate.testing.UseRandomizedSchema;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:             assertThat(response).hasRows(\"crate\");",
          "46:         }",
          "47:     }",
          "48: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:     @Test",
          "52:     @UseRandomizedSchema(random = false)",
          "53:     public void test_sys_sessions() {",
          "54:         long timeCreated = System.currentTimeMillis();",
          "55:         try (var session = sqlExecutor.newSession()) {",
          "56:             execute(\"CREATE USER test\", session);",
          "57:             execute(\"GRANT AL, DQL TO test\", session);",
          "58:             execute(\"SET SESSION AUTHORIZATION test\", session);",
          "59:             execute(\"SET enable_hashjoin=false\", session);",
          "61:             execute(\"select auth_user, session_user, client_address, \" +",
          "62:                     \"protocol, ssl, settings, last_statement from sys.sessions\", session);",
          "63:             assertThat(response).hasRows(",
          "64:                 \"crate| test| localhost| http| false| {application_name=NULL, datestyle=ISO, \" +",
          "65:                     \"disabled_optimizer_rules=optimizer_equi_join_to_lookup_join, enable_hashjoin=false, \" +",
          "66:                     \"error_on_unknown_object_key=true, memory.operation_limit=0, search_path=pg_catalog,doc, \" +",
          "67:                     \"statement_timeout=0s}| select auth_user, session_user, client_address, \" +",
          "68:                     \"protocol, ssl, settings, last_statement from sys.sessions\");",
          "69:             execute(\"select handler_node, time_created from sys.sessions\", session);",
          "70:             assertThat(response).hasRowCount(1);",
          "71:             assertThat((String) response.rows()[0][0]).startsWith(\"node_s\");",
          "72:             assertThat((Long) response.rows()[0][1]).isGreaterThanOrEqualTo(timeCreated);",
          "73:         }",
          "74:     }",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/protocols/postgres/PgClientTest.java||server/src/test/java/io/crate/protocols/postgres/PgClientTest.java": [
          "File: server/src/test/java/io/crate/protocols/postgres/PgClientTest.java -> server/src/test/java/io/crate/protocols/postgres/PgClientTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:             sslContextProvider",
          "123:         ); // clientTransport is closed via clientTransportService",
          "124:         var sqlOperations = mock(Sessions.class);",
          "126:         PostgresNetty postgresNetty = new PostgresNetty(",
          "127:             serverNodeSettings,",
          "128:             new SessionSettingRegistry(Set.of()),",
          "",
          "[Removed Lines]",
          "125:         when(sqlOperations.newSession(any(String.class), any(Role.class))).thenReturn(mock(Session.class));",
          "",
          "[Added Lines]",
          "125:         when(sqlOperations.newSession(",
          "126:             any(ConnectionProperties.class),",
          "127:             any(String.class),",
          "128:             any(Role.class))",
          "129:         ).thenReturn(mock(Session.class));",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/protocols/postgres/PostgresWireProtocolTest.java||server/src/test/java/io/crate/protocols/postgres/PostgresWireProtocolTest.java": [
          "File: server/src/test/java/io/crate/protocols/postgres/PostgresWireProtocolTest.java -> server/src/test/java/io/crate/protocols/postgres/PostgresWireProtocolTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: import org.junit.Test;",
          "53: import org.mockito.ArgumentCaptor;",
          "54: import org.mockito.Mockito;",
          "56: import org.mockito.stubbing.Answer;",
          "58: import io.crate.action.sql.DescribeResult;",
          "",
          "[Removed Lines]",
          "55: import org.mockito.invocation.InvocationOnMock;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:                 sessionSettings -> AccessControl.DISABLED,",
          "123:                 chPipeline -> {},",
          "124:                 new AlwaysOKAuthentication(() -> List.of()),",
          "126:             );",
          "127:         channel = new EmbeddedChannel(ctx.decoder, ctx.handler);",
          "",
          "[Removed Lines]",
          "125:                 null",
          "",
          "[Added Lines]",
          "124:                 () -> null",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "159:     public void test_channel_is_flushed_after_receiving_flush_request() throws Exception {",
          "160:         Sessions sqlOperations = mock(Sessions.class);",
          "161:         Session session = mock(Session.class);",
          "163:         PostgresWireProtocol ctx =",
          "164:             new PostgresWireProtocol(",
          "165:                 sqlOperations,",
          "",
          "[Removed Lines]",
          "162:         when(sqlOperations.newSession(any(String.class), any(Role.class))).thenReturn(session);",
          "",
          "[Added Lines]",
          "161:         when(sqlOperations.newSession(",
          "162:             any(ConnectionProperties.class),",
          "163:             any(String.class),",
          "164:             any(Role.class))",
          "165:         ).thenReturn(session);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "167:                 sessionSettings -> AccessControl.DISABLED,",
          "168:                 chPipeline -> {},",
          "169:                 new AlwaysOKAuthentication(() -> List.of(Role.CRATE_USER)),",
          "171:         AtomicBoolean flushed = new AtomicBoolean(false);",
          "172:         channel = new EmbeddedChannel(ctx.decoder, ctx.handler) {",
          "173:             @Override",
          "",
          "[Removed Lines]",
          "170:                 null);",
          "",
          "[Added Lines]",
          "173:                 () -> null);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "192:     public void testBindMessageCanBeReadIfTypeForParamsIsUnknown() throws Exception {",
          "193:         var mockedSqlOperations = mock(Sessions.class);",
          "194:         AtomicReference<Session> sessionRef = new AtomicReference<>();",
          "199:                 var session = sqlOperations.newSession(",
          "202:                 );",
          "203:                 sessionRef.set(session);",
          "204:                 return session;",
          "207:         PostgresWireProtocol ctx =",
          "208:             new PostgresWireProtocol(",
          "209:                 mockedSqlOperations,",
          "",
          "[Removed Lines]",
          "195:         when(mockedSqlOperations.newSession(Mockito.anyString(), Mockito.any())).thenAnswer(new Answer<Session>() {",
          "197:             @Override",
          "198:             public Session answer(InvocationOnMock invocation) throws Throwable {",
          "200:                     invocation.getArgument(0, String.class),",
          "201:                     invocation.getArgument(1, Role.class)",
          "205:             }",
          "206:         });",
          "",
          "[Added Lines]",
          "198:         when(mockedSqlOperations.newSession(",
          "199:             any(ConnectionProperties.class),",
          "200:             Mockito.anyString(),",
          "201:             Mockito.any())).thenAnswer((Answer<Session>) invocation -> {",
          "203:                     invocation.getArgument(0, ConnectionProperties.class),",
          "204:                     invocation.getArgument(1, String.class),",
          "205:                     invocation.getArgument(2, Role.class)",
          "209:             });",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "211:                 sessionSettings -> AccessControl.DISABLED,",
          "212:                 chPipeline -> {},",
          "213:                 new AlwaysOKAuthentication(() -> List.of(Role.CRATE_USER)),",
          "215:         channel = new EmbeddedChannel(ctx.decoder, ctx.handler);",
          "217:         ByteBuf buffer = Unpooled.buffer();",
          "",
          "[Removed Lines]",
          "214:                 null);",
          "",
          "[Added Lines]",
          "217:                 () -> null);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "238:                 sessionSettings -> AccessControl.DISABLED,",
          "239:                 chPipeline -> {},",
          "240:                 new AlwaysOKAuthentication(() -> List.of(Role.CRATE_USER)),",
          "243:         channel = new EmbeddedChannel(ctx.decoder, ctx.handler);",
          "244:         {",
          "",
          "[Removed Lines]",
          "241:                 null);",
          "",
          "[Added Lines]",
          "244:                 () -> null);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "298:                 sessionSettings -> AccessControl.DISABLED,",
          "299:                 chPipeline -> {},",
          "300:                 new AlwaysOKAuthentication(() -> List.of(Role.CRATE_USER)),",
          "303:         channel = new EmbeddedChannel(ctx.decoder, ctx.handler);",
          "304:         {",
          "",
          "[Removed Lines]",
          "301:                 null);",
          "",
          "[Added Lines]",
          "304:                 () -> null);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "362:                 sessionSettings -> AccessControl.DISABLED,",
          "363:                 chPipeline -> {},",
          "364:                 new AlwaysOKAuthentication(() -> List.of(Role.CRATE_USER)),",
          "367:         channel = new EmbeddedChannel(ctx.decoder, ctx.handler);",
          "368:         {",
          "",
          "[Removed Lines]",
          "365:                 null);",
          "",
          "[Added Lines]",
          "368:                 () -> null);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "490:             sessionSettings -> AccessControl.DISABLED,",
          "491:             chPipeline -> {},",
          "492:             new AlwaysOKAuthentication(() -> List.of(Role.CRATE_USER)),",
          "494:         );",
          "495:         channel = new EmbeddedChannel(ctx.decoder, ctx.handler);",
          "",
          "[Removed Lines]",
          "493:             null",
          "",
          "[Added Lines]",
          "496:             () -> null",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "537:     @Test",
          "538:     public void testPasswordMessageAuthenticationProcess() throws Exception {",
          "539:         var sqlOperations = mock(Sessions.class);",
          "541:         PostgresWireProtocol ctx =",
          "542:             new PostgresWireProtocol(",
          "543:                 sqlOperations,",
          "",
          "[Removed Lines]",
          "540:         when(sqlOperations.newSession(any(String.class), any(Role.class))).thenReturn(mock(Session.class));",
          "",
          "[Added Lines]",
          "543:         when(sqlOperations.newSession(",
          "544:             any(ConnectionProperties.class),",
          "545:             any(String.class),",
          "546:             any(Role.class))).thenReturn(mock(Session.class));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "555:                         return \"password\";",
          "556:                     }",
          "557:                 },",
          "559:             );",
          "560:         channel = new EmbeddedChannel(ctx.decoder, ctx.handler);",
          "",
          "[Removed Lines]",
          "558:                 null",
          "",
          "[Added Lines]",
          "564:                 () -> null",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "587:     public void testSessionCloseOnTerminationMessage() throws Exception {",
          "588:         Sessions sqlOperations = mock(Sessions.class);",
          "589:         Session session = mock(Session.class);",
          "591:         PostgresWireProtocol ctx =",
          "592:             new PostgresWireProtocol(",
          "593:                 sqlOperations,",
          "",
          "[Removed Lines]",
          "590:         when(sqlOperations.newSession(any(String.class), any(Role.class))).thenReturn(session);",
          "",
          "[Added Lines]",
          "596:         when(sqlOperations.newSession(",
          "597:             any(ConnectionProperties.class),",
          "598:             any(String.class),",
          "599:             any(Role.class))",
          "600:         ).thenReturn(session);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "595:                 sessionSettings -> AccessControl.DISABLED,",
          "596:                 chPipeline -> {},",
          "597:                 new AlwaysOKAuthentication(() -> List.of(Role.CRATE_USER)),",
          "599:             );",
          "600:         channel = new EmbeddedChannel(ctx.decoder, ctx.handler);",
          "",
          "[Removed Lines]",
          "598:                 null",
          "",
          "[Added Lines]",
          "608:                 () -> null",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "651:                 sessionSettings -> AccessControl.DISABLED,",
          "652:                 chPipeline -> {},",
          "653:                 new AlwaysOKAuthentication(() -> List.of(Role.CRATE_USER)),",
          "655:             );",
          "656:         channel = new EmbeddedChannel(ctx.decoder, ctx.handler);",
          "657:         sendStartupMessage(channel);",
          "",
          "[Removed Lines]",
          "654:                 null",
          "",
          "[Added Lines]",
          "664:                 () -> null",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "672:                 context -> AccessControl.DISABLED,",
          "673:                 chPipeline -> {},",
          "674:                 new AlwaysOKAuthentication(() -> List.of(Role.CRATE_USER)),",
          "676:             );",
          "677:         PostgresWireProtocol pg2 =",
          "678:             new PostgresWireProtocol(",
          "",
          "[Removed Lines]",
          "675:                 null",
          "",
          "[Added Lines]",
          "685:                 () -> null",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "681:                 context -> AccessControl.DISABLED,",
          "682:                 chPipeline -> {},",
          "683:                 new AlwaysOKAuthentication(() -> List.of(Role.CRATE_USER)),",
          "685:             );",
          "687:         channel = new EmbeddedChannel(pg1.decoder, pg1.handler);",
          "",
          "[Removed Lines]",
          "684:                 null",
          "",
          "[Added Lines]",
          "694:                 () -> null",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "732:         when(session.execute(any(String.class), any(int.class), any(RowCountReceiver.class))).thenReturn(future);",
          "733:         var sessionSettings = new CoordinatorSessionSettings(Role.CRATE_USER);",
          "734:         when(session.sessionSettings()).thenReturn(sessionSettings);",
          "736:         DescribeResult describeResult = mock(DescribeResult.class);",
          "737:         when(describeResult.getFields()).thenReturn(null);",
          "738:         when(session.describe(Mockito.anyChar(), Mockito.anyString())).thenReturn(describeResult);",
          "",
          "[Removed Lines]",
          "735:         when(sqlOperations.newSession(any(String.class), any(Role.class))).thenReturn(session);",
          "",
          "[Added Lines]",
          "745:         when(sqlOperations.newSession(",
          "746:             any(ConnectionProperties.class),",
          "747:             any(String.class),",
          "748:             any(Role.class))",
          "749:         ).thenReturn(session);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "745:                 sessionCtx -> AccessControl.DISABLED,",
          "746:                 chPipeline -> {},",
          "747:                 new AlwaysOKAuthentication(() -> List.of(Role.CRATE_USER)),",
          "749:             );",
          "750:         channel = new EmbeddedChannel(ctx.decoder, ctx.handler);",
          "",
          "[Removed Lines]",
          "748:                 null",
          "",
          "[Added Lines]",
          "762:                 () -> null",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/rest/action/SqlHttpHandlerTest.java||server/src/test/java/io/crate/rest/action/SqlHttpHandlerTest.java": [
          "File: server/src/test/java/io/crate/rest/action/SqlHttpHandlerTest.java -> server/src/test/java/io/crate/rest/action/SqlHttpHandlerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import static org.mockito.Mockito.verify;",
          "30: import static org.mockito.Mockito.when;",
          "32: import java.util.List;",
          "34: import org.elasticsearch.common.breaker.NoopCircuitBreaker;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import java.net.InetAddress;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: import io.crate.action.sql.Session;",
          "40: import io.crate.action.sql.Sessions;",
          "41: import io.crate.auth.AuthSettings;",
          "42: import io.crate.metadata.settings.CoordinatorSessionSettings;",
          "43: import io.crate.role.Role;",
          "44: import io.crate.role.metadata.RolesHelper;",
          "45: import io.netty.handler.codec.http.DefaultHttpHeaders;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import io.crate.auth.Protocol;",
          "45: import io.crate.protocols.postgres.ConnectionProperties;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:         SqlHttpHandler handler = new SqlHttpHandler(",
          "53:             Settings.EMPTY,",
          "54:             mock(Sessions.class),",
          "56:             () -> List.of(Role.CRATE_USER),",
          "57:             Netty4CorsConfigBuilder.forAnyOrigin().build()",
          "58:         );",
          "",
          "[Removed Lines]",
          "55:             (s) -> new NoopCircuitBreaker(\"dummy\"),",
          "",
          "[Added Lines]",
          "58:             _ -> new NoopCircuitBreaker(\"dummy\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "69:         SqlHttpHandler handler = new SqlHttpHandler(",
          "70:             settings,",
          "71:             mock(Sessions.class),",
          "73:             () -> List.of(RolesHelper.userOf(\"trillian\")),",
          "74:             Netty4CorsConfigBuilder.forAnyOrigin().build()",
          "75:         );",
          "",
          "[Removed Lines]",
          "72:             (s) -> new NoopCircuitBreaker(\"dummy\"),",
          "",
          "[Added Lines]",
          "75:             _ -> new NoopCircuitBreaker(\"dummy\"),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "83:         SqlHttpHandler handler = new SqlHttpHandler(",
          "84:             Settings.EMPTY,",
          "85:             mock(Sessions.class),",
          "87:             () -> List.of(RolesHelper.userOf(\"Aladdin\")),",
          "88:             Netty4CorsConfigBuilder.forAnyOrigin().build()",
          "89:         );",
          "",
          "[Removed Lines]",
          "86:             (s) -> new NoopCircuitBreaker(\"dummy\"),",
          "",
          "[Added Lines]",
          "89:             _ -> new NoopCircuitBreaker(\"dummy\"),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "100:         var mockedSession = mock(Session.class);",
          "101:         when(mockedSession.sessionSettings()).thenReturn(sessionSettings);",
          "103:         var mockedSqlOperations = mock(Sessions.class);",
          "106:         var mockedRequest = mock(FullHttpRequest.class);",
          "107:         when(mockedRequest.headers()).thenReturn(new DefaultHttpHeaders());",
          "",
          "[Removed Lines]",
          "104:         when(mockedSqlOperations.newSession(null, dummyUser)).thenReturn(mockedSession);",
          "",
          "[Added Lines]",
          "106:         var mockedClientAddress = mock(InetAddress.class);",
          "108:         var connectionProperties = new ConnectionProperties(null, mockedClientAddress, Protocol.HTTP, null);",
          "109:         when(mockedSqlOperations.newSession(connectionProperties, null, dummyUser)).thenReturn(mockedSession);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "109:         SqlHttpHandler handler = new SqlHttpHandler(",
          "110:             Settings.EMPTY,",
          "111:             mockedSqlOperations,",
          "113:             () -> List.of(dummyUser),",
          "114:             Netty4CorsConfigBuilder.forAnyOrigin().build()",
          "115:         );",
          "119:         verify(mockedRequest, atLeast(1)).headers();",
          "120:         assertThat(session.sessionSettings().authenticatedUser()).isEqualTo(dummyUser);",
          "121:         assertThat(session.sessionSettings().searchPath().currentSchema()).contains(\"doc\");",
          "",
          "[Removed Lines]",
          "112:             (s) -> new NoopCircuitBreaker(\"dummy\"),",
          "118:         var session = handler.ensureSession(mockedRequest);",
          "",
          "[Added Lines]",
          "117:             _ -> new NoopCircuitBreaker(\"dummy\"),",
          "123:         var session = handler.ensureSession(connectionProperties, mockedRequest);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "126:         session.sessionSettings().setHashJoinEnabled(false);",
          "130:         assertThat(session.sessionSettings().hashJoinsEnabled()).isFalse();",
          "131:         assertThat(session.sessionSettings().searchPath().currentSchema()).contains(\"dummy_path\");",
          "132:     }",
          "",
          "[Removed Lines]",
          "129:         session = handler.ensureSession(mockedRequest);",
          "",
          "[Added Lines]",
          "134:         session = handler.ensureSession(connectionProperties, mockedRequest);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "136:         SqlHttpHandler handler = new SqlHttpHandler(",
          "137:             Settings.EMPTY,",
          "138:             mock(Sessions.class),",
          "140:             () -> List.of(JWT_USER),",
          "141:             Netty4CorsConfigBuilder.forAnyOrigin().build()",
          "142:         );",
          "",
          "[Removed Lines]",
          "139:             (s) -> new NoopCircuitBreaker(\"dummy\"),",
          "",
          "[Added Lines]",
          "144:             _ -> new NoopCircuitBreaker(\"dummy\"),",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/statistics/TableStatsServiceTest.java||server/src/test/java/io/crate/statistics/TableStatsServiceTest.java": [
          "File: server/src/test/java/io/crate/statistics/TableStatsServiceTest.java -> server/src/test/java/io/crate/statistics/TableStatsServiceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.statistics;",
          "24: import static org.assertj.core.api.Assertions.assertThat;",
          "26: import org.elasticsearch.cluster.service.ClusterService;",
          "27: import org.elasticsearch.common.settings.ClusterSettings;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import static org.mockito.ArgumentMatchers.any;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: import io.crate.action.sql.Session;",
          "35: import io.crate.action.sql.Sessions;",
          "36: import io.crate.common.unit.TimeValue;",
          "37: import io.crate.test.integration.CrateDummyClusterServiceUnitTest;",
          "39: public class TableStatsServiceTest extends CrateDummyClusterServiceUnitTest {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import io.crate.protocols.postgres.ConnectionProperties;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:         Mockito.when(clusterService.getClusterSettings()).thenReturn(this.clusterService.getClusterSettings());",
          "110:         Sessions sqlOperations = Mockito.mock(Sessions.class);",
          "111:         Session session = Mockito.mock(Session.class);",
          "114:         TableStatsService statsService = new TableStatsService(",
          "115:             Settings.EMPTY,",
          "",
          "[Removed Lines]",
          "112:         Mockito.when(sqlOperations.newSession(ArgumentMatchers.anyString(), ArgumentMatchers.any())).thenReturn(session);",
          "",
          "[Added Lines]",
          "114:         Mockito.when(sqlOperations.newSession(",
          "115:             any(ConnectionProperties.class),",
          "116:             ArgumentMatchers.anyString(), any())",
          "117:         ).thenReturn(session);",
          "",
          "---------------"
        ],
        "server/src/test/java/org/elasticsearch/indices/IndicesServiceCloseTests.java||server/src/test/java/org/elasticsearch/indices/IndicesServiceCloseTests.java": [
          "File: server/src/test/java/org/elasticsearch/indices/IndicesServiceCloseTests.java -> server/src/test/java/org/elasticsearch/indices/IndicesServiceCloseTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: import io.crate.action.sql.CollectingResultReceiver;",
          "50: import io.crate.action.sql.Session;",
          "51: import io.crate.action.sql.Sessions;",
          "52: import io.crate.data.Row;",
          "53: import io.crate.role.Role;",
          "55: public class IndicesServiceCloseTests extends ESTestCase {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: import io.crate.auth.Protocol;",
          "54: import io.crate.protocols.postgres.ConnectionProperties;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:         assertThat(indicesService.indicesRefCount.refCount()).isEqualTo(1);",
          "100:         Sessions sessions = node.injector().getInstance(Sessions.class);",
          "102:             String stmt = \"create table test (x int) clustered into 1 shards with (number_of_replicas = 0)\";",
          "103:             var resultReceiver = new CollectingResultReceiver<>(Collectors.toList());",
          "104:             session.quickExec(stmt, resultReceiver, Row.EMPTY);",
          "",
          "[Removed Lines]",
          "101:         try (Session session = sessions.newSession(\"doc\", Role.CRATE_USER)) {",
          "",
          "[Added Lines]",
          "103:         try (Session session = sessions.newSession(",
          "104:                 new ConnectionProperties(null, null, Protocol.HTTP, null), \"doc\", Role.CRATE_USER)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:         assertThat(indicesService.indicesRefCount.refCount()).isEqualTo(1);",
          "122:         Sessions sessions = node.injector().getInstance(Sessions.class);",
          "124:             String stmt = \"create table test (x int) clustered into 1 shards with (number_of_replicas = 0)\";",
          "125:             var resultReceiver = new CollectingResultReceiver<>(Collectors.toList());",
          "126:             session.quickExec(stmt, resultReceiver, Row.EMPTY);",
          "",
          "[Removed Lines]",
          "123:         try (Session session = sessions.newSession(\"doc\", Role.CRATE_USER)) {",
          "",
          "[Added Lines]",
          "126:         try (Session session = sessions.newSession(",
          "127:                 new ConnectionProperties(null, null, Protocol.HTTP, null), \"doc\", Role.CRATE_USER)) {",
          "",
          "---------------"
        ],
        "server/src/testFixtures/java/io/crate/testing/SQLExecutor.java||server/src/testFixtures/java/io/crate/testing/SQLExecutor.java": [
          "File: server/src/testFixtures/java/io/crate/testing/SQLExecutor.java -> server/src/testFixtures/java/io/crate/testing/SQLExecutor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: import org.elasticsearch.common.UUIDs;",
          "78: import org.elasticsearch.common.bytes.BytesReference;",
          "79: import org.elasticsearch.common.compress.CompressedXContent;",
          "81: import org.elasticsearch.common.settings.IndexScopedSettings;",
          "82: import org.elasticsearch.common.settings.Settings;",
          "83: import org.elasticsearch.common.xcontent.XContentBuilder;",
          "",
          "[Removed Lines]",
          "80: import org.elasticsearch.common.inject.AbstractModule;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118: import io.crate.analyze.relations.ParentRelations;",
          "119: import io.crate.analyze.relations.RelationAnalyzer;",
          "120: import io.crate.analyze.relations.StatementAnalysisContext;",
          "121: import io.crate.common.collections.Lists;",
          "122: import io.crate.common.collections.MapBuilder;",
          "123: import io.crate.data.Row;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120: import io.crate.auth.Protocol;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168: import io.crate.planner.optimizer.LoadedRules;",
          "169: import io.crate.planner.optimizer.Rule;",
          "170: import io.crate.planner.optimizer.costs.PlanStats;",
          "171: import io.crate.protocols.postgres.TransactionState;",
          "172: import io.crate.replication.logical.LogicalReplicationService;",
          "173: import io.crate.replication.logical.LogicalReplicationSettings;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171: import io.crate.protocols.postgres.ConnectionProperties;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "663:     public Session createSession() {",
          "664:         return sqlOperations.newSession(",
          "665:             sessionSettings.currentSchema(),",
          "666:             sessionSettings.authenticatedUser()",
          "667:         );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "666:             new ConnectionProperties(null, null, Protocol.HTTP, null),",
          "",
          "---------------"
        ],
        "server/src/testFixtures/java/io/crate/testing/SQLTransportExecutor.java||server/src/testFixtures/java/io/crate/testing/SQLTransportExecutor.java": [
          "File: server/src/testFixtures/java/io/crate/testing/SQLTransportExecutor.java -> server/src/testFixtures/java/io/crate/testing/SQLTransportExecutor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: import io.crate.action.sql.Session;",
          "73: import io.crate.action.sql.Sessions;",
          "74: import io.crate.auth.AccessControl;",
          "75: import io.crate.common.exceptions.Exceptions;",
          "76: import io.crate.common.unit.TimeValue;",
          "77: import io.crate.data.Row;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: import io.crate.auth.Protocol;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82: import io.crate.metadata.pgcatalog.PgCatalogSchemaInfo;",
          "83: import io.crate.planner.optimizer.LoadedRules;",
          "84: import io.crate.planner.optimizer.Rule;",
          "85: import io.crate.protocols.postgres.types.PGType;",
          "86: import io.crate.protocols.postgres.types.PGTypes;",
          "87: import io.crate.role.Role;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: import io.crate.protocols.postgres.ConnectionProperties;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "248:     public Session newSession() {",
          "249:         return clientProvider.sqlOperations().newSession(",
          "250:             searchPath.currentSchema(),",
          "251:             Role.CRATE_USER",
          "252:         );",
          "253:     }",
          "255:     public SQLResponse executeAs(String stmt, Role user) {",
          "257:             return FutureUtils.get(execute(stmt, null, session), SQLTransportExecutor.REQUEST_TIMEOUT.millis(), TimeUnit.MILLISECONDS);",
          "258:         }",
          "259:     }",
          "",
          "[Removed Lines]",
          "256:         try (Session session = clientProvider.sqlOperations().newSession(null, user)) {",
          "",
          "[Added Lines]",
          "252:             new ConnectionProperties(null, null, Protocol.HTTP, null),",
          "259:         try (Session session = clientProvider.sqlOperations()",
          "260:             .newSession(new ConnectionProperties(null, null, Protocol.HTTP, null), null, user)) {",
          "",
          "---------------"
        ],
        "server/src/testFixtures/java/org/elasticsearch/test/IntegTestCase.java||server/src/testFixtures/java/org/elasticsearch/test/IntegTestCase.java": [
          "File: server/src/testFixtures/java/org/elasticsearch/test/IntegTestCase.java -> server/src/testFixtures/java/org/elasticsearch/test/IntegTestCase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "152: import io.crate.action.sql.Sessions;",
          "153: import io.crate.analyze.Analyzer;",
          "154: import io.crate.analyze.ParamTypeHints;",
          "155: import io.crate.common.collections.Lists;",
          "156: import io.crate.common.exceptions.Exceptions;",
          "157: import io.crate.common.io.IOUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155: import io.crate.auth.Protocol;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191: import io.crate.planner.operators.SubQueryResults;",
          "192: import io.crate.planner.optimizer.LoadedRules;",
          "193: import io.crate.planner.optimizer.rule.MergeFilterAndCollect;",
          "194: import io.crate.protocols.postgres.PostgresNetty;",
          "195: import io.crate.protocols.postgres.TransactionState;",
          "196: import io.crate.role.Role;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195: import io.crate.protocols.postgres.ConnectionProperties;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1653:     public SQLResponse systemExecute(String stmt, @Nullable String schema, String node) {",
          "1654:         Sessions sqlOperations = cluster().getInstance(Sessions.class, node);",
          "1655:         Roles roles = cluster().getInstance(Roles.class, node);",
          "1657:             response = sqlExecutor.exec(stmt, session);",
          "1658:         }",
          "1659:         return response;",
          "",
          "[Removed Lines]",
          "1656:         try (Session session = sqlOperations.newSession(schema, roles.getUser(\"crate\"))) {",
          "",
          "[Added Lines]",
          "1658:         try (Session session = sqlOperations.newSession(",
          "1659:             new ConnectionProperties(null, null, Protocol.HTTP, null), schema, roles.getUser(\"crate\"))) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1843:     public SQLResponse execute(String stmt, Object[] args, String node, TimeValue timeout) {",
          "1844:         Sessions sqlOperations = cluster().getInstance(Sessions.class, node);",
          "1846:             SQLResponse response = sqlExecutor.exec(stmt, args, session, timeout);",
          "1847:             this.response = response;",
          "1848:             return response;",
          "",
          "[Removed Lines]",
          "1845:         try (Session session = sqlOperations.newSession(sqlExecutor.getCurrentSchema(), Role.CRATE_USER)) {",
          "",
          "[Added Lines]",
          "1848:         try (Session session = sqlOperations.newSession(",
          "1849:             new ConnectionProperties(null, null, Protocol.HTTP, null), sqlExecutor.getCurrentSchema(), Role.CRATE_USER)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1911:     protected Session createSessionOnNode(String nodeName) {",
          "1912:         Sessions sqlOperations = cluster().getInstance(Sessions.class, nodeName);",
          "1914:             sqlExecutor.getCurrentSchema(), Role.CRATE_USER);",
          "1915:     }",
          "",
          "[Removed Lines]",
          "1913:         return sqlOperations.newSession(",
          "",
          "[Added Lines]",
          "1917:         return sqlOperations.newSession(new ConnectionProperties(null, null, Protocol.HTTP, null),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1925:     protected Session createSession(@Nullable String defaultSchema) {",
          "1926:         Sessions sqlOperations = cluster().getInstance(Sessions.class);",
          "1928:     }",
          "1930:     private TestExecutionConfig testExecutionConfig() {",
          "",
          "[Removed Lines]",
          "1927:         return sqlOperations.newSession(defaultSchema, Role.CRATE_USER);",
          "",
          "[Added Lines]",
          "1931:         return sqlOperations.newSession(",
          "1932:             new ConnectionProperties(null, null, Protocol.HTTP, null), defaultSchema, Role.CRATE_USER);",
          "",
          "---------------"
        ]
      }
    }
  ]
}