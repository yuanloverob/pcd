{
  "cve_id": "CVE-2023-35005",
  "cve_desc": "In Apache Airflow, some potentially sensitive values were being shown to the user in certain situations.\n\nThis vulnerability is mitigated by the fact configuration is not shown in the UI by default (only if `[webserver] expose_config` is set to `non-sensitive-only`), and not all uncensored values are actually sentitive.\n\n\nThis issue affects Apache Airflow: from 2.5.0 before 2.6.2. Users are recommended to update to version 2.6.2 or later.\n\n\n",
  "repo": "apache/airflow",
  "patch_hash": "5679a01919ac9d5153e858f8b1390cbc7915f148",
  "patch_info": {
    "commit_hash": "5679a01919ac9d5153e858f8b1390cbc7915f148",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/5679a01919ac9d5153e858f8b1390cbc7915f148",
    "files": [
      "airflow/config_templates/config.yml",
      "airflow/config_templates/default_airflow.cfg",
      "airflow/configuration.py",
      "airflow/www/views.py",
      "tests/core/test_configuration.py",
      "tests/www/views/test_views_configuration.py"
    ],
    "message": "Use single source of truth for sensitive config items (#31820)\n\nPreviously we had them defined both in constant and in config.yml.\n\nNow just config.yml\n\n(cherry picked from commit cab342ee010bfd048006ca458c760b37470b6ea5)",
    "before_after_code_files": [
      "airflow/config_templates/default_airflow.cfg||airflow/config_templates/default_airflow.cfg",
      "airflow/configuration.py||airflow/configuration.py",
      "airflow/www/views.py||airflow/www/views.py",
      "tests/core/test_configuration.py||tests/core/test_configuration.py",
      "tests/www/views/test_views_configuration.py||tests/www/views/test_views_configuration.py"
    ]
  },
  "patch_diff": {
    "airflow/config_templates/default_airflow.cfg||airflow/config_templates/default_airflow.cfg": [
      "File: airflow/config_templates/default_airflow.cfg -> airflow/config_templates/default_airflow.cfg",
      "--- Hunk 1 ---",
      "[Context before]",
      "995: # Example: result_backend = db+postgresql://postgres:airflow@postgres/airflow",
      "996: # result_backend =",
      "998: # Celery Flower is a sweet UI for Celery. Airflow has a shortcut to start",
      "999: # it ``airflow celery flower``. This defines the IP that Celery Flower runs on",
      "1000: flower_host = 0.0.0.0",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "998: # Optional configuration dictionary to pass to the Celery result backend SQLAlchemy engine.",
      "999: # Example: result_backend_sqlalchemy_engine_options = {{\"pool_recycle\": 1800}}",
      "1000: result_backend_sqlalchemy_engine_options =",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1018: # Import path for celery configuration options",
      "1019: celery_config_options = airflow.config_templates.default_celery.DEFAULT_CELERY_CONFIG",
      "1020: ssl_active = False",
      "1021: ssl_key =",
      "1022: ssl_cert =",
      "1023: ssl_cacert =",
      "1025: # Celery Pool implementation.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1026: # Path to the client key.",
      "1029: # Path to the client certificate.",
      "1032: # Path to the CA certificate.",
      "",
      "---------------"
    ],
    "airflow/configuration.py||airflow/configuration.py": [
      "File: airflow/configuration.py -> airflow/configuration.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: from contextlib import contextmanager, suppress",
      "38: from json.decoder import JSONDecodeError",
      "39: from re import Pattern",
      "41: from urllib.parse import urlsplit",
      "43: from typing_extensions import overload",
      "",
      "[Removed Lines]",
      "40: from typing import IO, Any, Dict, Iterable, Tuple, Union",
      "",
      "[Added Lines]",
      "40: from typing import IO, Any, Dict, Iterable, Set, Tuple, Union",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "147:         return yaml.safe_load(config_file)",
      "165: class AirflowConfigParser(ConfigParser):",
      "166:     \"\"\"Custom Airflow Configparser supporting defaults and deprecated options.\"\"\"",
      "",
      "[Removed Lines]",
      "150: SENSITIVE_CONFIG_VALUES = {",
      "151:     (\"database\", \"sql_alchemy_conn\"),",
      "152:     (\"core\", \"fernet_key\"),",
      "153:     (\"celery\", \"broker_url\"),",
      "154:     (\"celery\", \"flower_basic_auth\"),",
      "155:     (\"celery\", \"result_backend\"),",
      "156:     (\"atlas\", \"password\"),",
      "157:     (\"smtp\", \"smtp_password\"),",
      "158:     (\"webserver\", \"secret_key\"),",
      "159:     (\"secrets\", \"backend_kwargs\"),",
      "160:     # The following options are deprecated",
      "161:     (\"core\", \"sql_alchemy_conn\"),",
      "162: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "171:     # These configs can also be fetched from Secrets backend",
      "172:     # following the \"{section}__{name}__secret\" pattern",
      "176:     # A mapping of (new section, new option) -> (old section, old option, since_version).",
      "177:     # When reading new option, the old option will be checked to see if it exists. If it does a",
      "",
      "[Removed Lines]",
      "174:     sensitive_config_values: set[tuple[str, str]] = SENSITIVE_CONFIG_VALUES",
      "",
      "[Added Lines]",
      "159:     @cached_property",
      "160:     def sensitive_config_values(self) -> Set[tuple[str, str]]:  # noqa: UP006",
      "161:         default_config = default_config_yaml()",
      "162:         flattened = {",
      "163:             (s, k): item for s, s_c in default_config.items() for k, item in s_c.get(\"options\").items()",
      "164:         }",
      "165:         sensitive = {(section, key) for (section, key), v in flattened.items() if v.get(\"sensitive\") is True}",
      "166:         depr_option = {self.deprecated_options[x][:-1] for x in sensitive if x in self.deprecated_options}",
      "167:         depr_section = {",
      "168:             (self.deprecated_sections[s][0], k) for s, k in sensitive if s in self.deprecated_sections",
      "169:         }",
      "170:         sensitive.update(depr_section, depr_option)",
      "171:         return sensitive",
      "",
      "---------------"
    ],
    "airflow/www/views.py||airflow/www/views.py": [
      "File: airflow/www/views.py -> airflow/www/views.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "3951:         # TODO remove \"if raw\" usage in Airflow 3.0. Configuration can be fetched via the REST API.",
      "3952:         if raw:",
      "3953:             if expose_config == \"non-sensitive-only\":",
      "3956:                 updater = configupdater.ConfigUpdater()",
      "3957:                 updater.read(AIRFLOW_CONFIG)",
      "3959:                     if updater.has_option(sect, key):",
      "3960:                         updater[sect][key].value = \"< hidden >\"",
      "3961:                 config = str(updater)",
      "",
      "[Removed Lines]",
      "3954:                 from airflow.configuration import SENSITIVE_CONFIG_VALUES",
      "3958:                 for sect, key in SENSITIVE_CONFIG_VALUES:",
      "",
      "[Added Lines]",
      "3956:                 for sect, key in conf.sensitive_config_values:",
      "",
      "---------------"
    ],
    "tests/core/test_configuration.py||tests/core/test_configuration.py": [
      "File: tests/core/test_configuration.py -> tests/core/test_configuration.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:     AirflowConfigException,",
      "37:     AirflowConfigParser,",
      "38:     conf,",
      "39:     expand_env_var,",
      "40:     get_airflow_config,",
      "41:     get_airflow_home,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39:     default_config_yaml,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1447:             w = captured.pop()",
      "1448:             assert \"your `conf.get*` call to use the new name\" in str(w.message)",
      "1449:             assert w.category == FutureWarning",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1453: def test_sensitive_values():",
      "1454:     from airflow.settings import conf",
      "1456:     # this list was hardcoded prior to 2.6.2",
      "1457:     # included here to avoid regression in refactor",
      "1458:     # inclusion of keys ending in \"password\" or \"kwargs\" is automated from 2.6.2",
      "1459:     # items not matching this pattern must be added here manually",
      "1460:     sensitive_values = {",
      "1461:         (\"database\", \"sql_alchemy_conn\"),",
      "1462:         (\"core\", \"fernet_key\"),",
      "1463:         (\"celery\", \"broker_url\"),",
      "1464:         (\"celery\", \"flower_basic_auth\"),",
      "1465:         (\"celery\", \"result_backend\"),",
      "1466:         (\"atlas\", \"password\"),",
      "1467:         (\"smtp\", \"smtp_password\"),",
      "1468:         (\"webserver\", \"secret_key\"),",
      "1469:         (\"secrets\", \"backend_kwargs\"),",
      "1470:         (\"sentry\", \"sentry_dsn\"),",
      "1471:         (\"database\", \"sql_alchemy_engine_args\"),",
      "1472:         (\"core\", \"sql_alchemy_conn\"),",
      "1473:     }",
      "1474:     default_config = default_config_yaml()",
      "1475:     all_keys = {(s, k) for s, v in default_config.items() for k in v.get(\"options\")}",
      "1476:     suspected_sensitive = {(s, k) for (s, k) in all_keys if k.endswith((\"password\", \"kwargs\"))}",
      "1477:     exclude_list = {",
      "1478:         (\"kubernetes_executor\", \"delete_option_kwargs\"),",
      "1479:     }",
      "1480:     suspected_sensitive -= exclude_list",
      "1481:     sensitive_values.update(suspected_sensitive)",
      "1482:     assert sensitive_values == conf.sensitive_config_values",
      "",
      "---------------"
    ],
    "tests/www/views/test_views_configuration.py||tests/www/views/test_views_configuration.py": [
      "File: tests/www/views/test_views_configuration.py -> tests/www/views/test_views_configuration.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import html",
      "22: from tests.test_utils.config import conf_vars",
      "23: from tests.test_utils.www import check_content_in_response, check_content_not_in_response",
      "",
      "[Removed Lines]",
      "21: from airflow.configuration import SENSITIVE_CONFIG_VALUES, conf",
      "",
      "[Added Lines]",
      "21: from airflow.configuration import conf",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: @conf_vars({(\"webserver\", \"expose_config\"): \"True\"})",
      "37: def test_user_can_view_configuration(admin_client):",
      "38:     resp = admin_client.get(\"configuration\", follow_redirects=True)",
      "40:         value = conf.get(section, key, fallback=\"\")",
      "41:         if not value:",
      "42:             continue",
      "",
      "[Removed Lines]",
      "39:     for section, key in SENSITIVE_CONFIG_VALUES:",
      "",
      "[Added Lines]",
      "39:     for section, key in conf.sensitive_config_values:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "46: @conf_vars({(\"webserver\", \"expose_config\"): \"non-sensitive-only\"})",
      "47: def test_configuration_redacted(admin_client):",
      "48:     resp = admin_client.get(\"configuration\", follow_redirects=True)",
      "50:         value = conf.get(section, key, fallback=\"\")",
      "51:         if not value or value == \"airflow\":",
      "52:             continue",
      "",
      "[Removed Lines]",
      "49:     for section, key in SENSITIVE_CONFIG_VALUES:",
      "",
      "[Added Lines]",
      "49:     for section, key in conf.sensitive_config_values:",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "58: @conf_vars({(\"webserver\", \"expose_config\"): \"non-sensitive-only\"})",
      "59: def test_configuration_redacted_in_running_configuration(admin_client):",
      "60:     resp = admin_client.get(\"configuration\", follow_redirects=True)",
      "62:         value = conf.get(section, key, fallback=\"\")",
      "63:         if not value or value == \"airflow\":",
      "64:             continue",
      "",
      "[Removed Lines]",
      "61:     for section, key in SENSITIVE_CONFIG_VALUES:",
      "",
      "[Added Lines]",
      "61:     for section, key in conf.sensitive_config_values:",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2ed643e59cd5e41028c3ed8719ebcd74903a81a1",
      "candidate_info": {
        "commit_hash": "2ed643e59cd5e41028c3ed8719ebcd74903a81a1",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/2ed643e59cd5e41028c3ed8719ebcd74903a81a1",
        "files": [
          ".github/workflows/ci.yml",
          "dev/breeze/SELECTIVE_CHECKS.md",
          "dev/breeze/src/airflow_breeze/utils/selective_checks.py",
          "dev/breeze/tests/test_selective_checks.py"
        ],
        "message": "Speed up verification and instalation of providers in CI (#30839)\n\nFor PRs that are just changing selected providers, there is no\nneed to install and verify all providers, just those affected\nshould be installed (and full verification should only be done\nwhen all providers are being built - so generally speaking, when\nCore PRs are run or when canary builds are run.\n\nThis PR distinguishes those two cases:\n\n* installing and verification when all providers are selected\n* installing only affected providers when only subset of them are\n  affected\n\nAlso a bug was found where core file changes did not trigger provider\ndocs build during implementation. This has been fixed\n\n(cherry picked from commit 3af22f5bedad370ccb35ae887dff6daf995fd90c)",
        "before_after_code_files": [
          "dev/breeze/src/airflow_breeze/utils/selective_checks.py||dev/breeze/src/airflow_breeze/utils/selective_checks.py",
          "dev/breeze/tests/test_selective_checks.py||dev/breeze/tests/test_selective_checks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/31796"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "dev/breeze/src/airflow_breeze/utils/selective_checks.py||dev/breeze/src/airflow_breeze/utils/selective_checks.py": [
          "File: dev/breeze/src/airflow_breeze/utils/selective_checks.py -> dev/breeze/src/airflow_breeze/utils/selective_checks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: from airflow_breeze.utils.path_utils import (",
          "28:     AIRFLOW_PROVIDERS_ROOT,",
          "29:     AIRFLOW_SOURCES_ROOT,",
          "30:     SYSTEM_TESTS_PROVIDERS_ROOT,",
          "31:     TESTS_PROVIDERS_ROOT,",
          "32: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:     DOCS_DIR,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: from re import match",
          "42: from typing import Any, Dict, List, TypeVar",
          "44: from airflow_breeze.global_constants import (",
          "45:     ALL_PYTHON_MAJOR_MINOR_VERSIONS,",
          "46:     CURRENT_KUBERNETES_VERSIONS,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: from typing_extensions import Literal",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195: )",
          "199:     file_path = AIRFLOW_SOURCES_ROOT / changed_file",
          "200:     # is_relative_to is only available in Python 3.9 - we should simplify this check when we are Python 3.9+",
          "201:     for provider_root in (TESTS_PROVIDERS_ROOT, SYSTEM_TESTS_PROVIDERS_ROOT, AIRFLOW_PROVIDERS_ROOT):",
          "",
          "[Removed Lines]",
          "198: def find_provider_affected(changed_file: str) -> str | None:",
          "",
          "[Added Lines]",
          "201: def find_provider_affected(changed_file: str, include_docs: bool) -> str | None:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "206:         except ValueError:",
          "207:             pass",
          "208:     else:",
          "209:         return None",
          "211:     for parent_dir_path in file_path.parents:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:         if include_docs:",
          "213:             try:",
          "214:                 relative_path = file_path.relative_to(DOCS_DIR)",
          "215:                 if relative_path.parts[0].startswith(\"apache-airflow-providers-\"):",
          "216:                     return relative_path.parts[0].replace(\"apache-airflow-providers-\", \"\").replace(\"-\", \".\")",
          "217:             except ValueError:",
          "218:                 pass",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "230:             providers.add(dep_name)",
          "234:     all_providers: set[str] = set()",
          "235:     dependencies = json.loads((AIRFLOW_SOURCES_ROOT / \"generated\" / \"provider_dependencies.json\").read_text())",
          "236:     all_providers_affected = False",
          "237:     suspended_providers: set[str] = set()",
          "238:     for changed_file in changed_files:",
          "240:         if provider == \"Providers\":",
          "241:             all_providers_affected = True",
          "242:         elif provider is not None:",
          "",
          "[Removed Lines]",
          "233: def find_all_providers_affected(changed_files: tuple[str, ...]) -> set[str]:",
          "239:         provider = find_provider_affected(changed_file)",
          "",
          "[Added Lines]",
          "243: def find_all_providers_affected(",
          "244:     changed_files: tuple[str, ...], include_docs: bool",
          "245: ) -> list[str] | Literal[\"ALL_PROVIDERS\"] | None:",
          "251:         provider = find_provider_affected(changed_file, include_docs=include_docs)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "245:             else:",
          "246:                 all_providers.add(provider)",
          "247:     if all_providers_affected:",
          "249:     if suspended_providers:",
          "250:         # We check for suspended providers only after we have checked if all providers are affected.",
          "251:         # No matter if we found that we are modifying a suspended provider individually, if all providers are",
          "",
          "[Removed Lines]",
          "248:         return set()",
          "",
          "[Added Lines]",
          "260:         return \"ALL_PROVIDERS\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "265:         )",
          "266:         get_console().print(f\"Suspended providers: {suspended_providers}\")",
          "267:         sys.exit(1)",
          "268:     for provider in list(all_providers):",
          "269:         add_dependent_providers(all_providers, provider, dependencies)",
          "273: class SelectiveChecks:",
          "",
          "[Removed Lines]",
          "270:     return all_providers",
          "",
          "[Added Lines]",
          "280:     if len(all_providers) == 0:",
          "281:         return None",
          "284:     return sorted(all_providers)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "304:         output = []",
          "305:         for field_name in dir(self):",
          "306:             if not field_name.startswith(\"_\"):",
          "308:         return \"\\n\".join(output)",
          "310:     default_python_version = DEFAULT_PYTHON_MAJOR_MINOR_VERSION",
          "",
          "[Removed Lines]",
          "307:                 output.append(get_ga_output(field_name, getattr(self, field_name)))",
          "",
          "[Added Lines]",
          "321:                 value = getattr(self, field_name)",
          "322:                 if value is not None:",
          "323:                     output.append(get_ga_output(field_name, value))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "387:     def helm_version(self) -> str:",
          "388:         return HELM_VERSION",
          "395:     @cached_property",
          "396:     def postgres_exclude(self) -> list[dict[str, str]]:",
          "397:         if not self.full_tests_needed:",
          "",
          "[Removed Lines]",
          "390:     @cached_property",
          "391:     def providers_package_format_exclude(self) -> list[dict[str, str]]:",
          "392:         # Exclude sdist format unless full tests are run",
          "393:         return [{\"package-format\": \"sdist\"}] if not self.full_tests_needed else []",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "444:         return \" \".join(self.kubernetes_versions)",
          "446:     @cached_property",
          "448:         python_version_array: list[str] = self.python_versions_list_as_string.split(\" \")",
          "449:         kubernetes_version_array: list[str] = self.kubernetes_versions_list_as_string.split(\" \")",
          "450:         combo_titles, short_combo_titles, combos = get_kubernetes_python_combos(",
          "",
          "[Removed Lines]",
          "447:     def kubernetes_combos(self) -> str:",
          "",
          "[Added Lines]",
          "458:     def kubernetes_combos_list_as_string(self) -> str:",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "511:     @cached_property",
          "512:     def run_amazon_tests(self) -> bool:",
          "515:     @cached_property",
          "516:     def run_kubernetes_tests(self) -> bool:",
          "",
          "[Removed Lines]",
          "513:         return \"amazon\" in self.parallel_test_types or \"Providers\" in self.parallel_test_types.split(\" \")",
          "",
          "[Added Lines]",
          "524:         if self.parallel_test_types_list_as_string is None:",
          "525:             return False",
          "526:         return (",
          "527:             \"amazon\" in self.parallel_test_types_list_as_string",
          "528:             or \"Providers\" in self.parallel_test_types_list_as_string.split(\" \")",
          "529:         )",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "542:             get_console().print(f\"[warning]{test_type} added because it matched {count} files[/]\")",
          "543:         return matched_files",
          "545:     def _get_test_types_to_run(self) -> list[str]:",
          "546:         candidate_test_types: set[str] = {\"Always\"}",
          "547:         matched_files: set[str] = set()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "561:     def _are_all_providers_affected(self) -> bool:",
          "562:         # if \"Providers\" test is present in the list of tests, it means that we should run all providers tests",
          "563:         # prepare all providers packages and build all providers documentation",
          "564:         return \"Providers\" in self._get_test_types_to_run()",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "575:             candidate_test_types.update(all_selective_test_types())",
          "576:         else:",
          "577:             if \"Providers\" in candidate_test_types:",
          "580:                     candidate_test_types.remove(\"Providers\")",
          "581:                     candidate_test_types.add(f\"Providers[{','.join(sorted(affected_providers))}]\")",
          "582:             get_console().print(",
          "",
          "[Removed Lines]",
          "578:                 affected_providers = find_all_providers_affected(changed_files=self._files)",
          "579:                 if len(affected_providers) != 0:",
          "",
          "[Added Lines]",
          "599:                 affected_providers = find_all_providers_affected(",
          "600:                     changed_files=self._files, include_docs=False",
          "601:                 )",
          "602:                 if affected_providers != \"ALL_PROVIDERS\" and affected_providers is not None:",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "618:                     current_test_types.add(f\"Providers[{','.join(provider_tests_to_run)}]\")",
          "620:     @cached_property",
          "622:         if not self.run_tests:",
          "624:         if self.full_tests_needed:",
          "625:             current_test_types = set(all_selective_test_types())",
          "626:         else:",
          "",
          "[Removed Lines]",
          "621:     def parallel_test_types(self) -> str:",
          "623:             return \"\"",
          "",
          "[Added Lines]",
          "644:     def parallel_test_types_list_as_string(self) -> str | None:",
          "646:             return None",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "666:         ) > 0 or self._github_event in [GithubEvents.PUSH, GithubEvents.SCHEDULE]",
          "668:     @cached_property",
          "676:     @cached_property",
          "677:     def skip_pre_commits(self) -> str:",
          "",
          "[Removed Lines]",
          "669:     def docs_filter(self) -> str:",
          "670:         return (",
          "671:             \"\"",
          "672:             if self._default_branch == \"main\"",
          "673:             else \"--package-filter apache-airflow --package-filter docker-stack\"",
          "674:         )",
          "",
          "[Added Lines]",
          "692:     def docs_filter_list_as_string(self) -> str | None:",
          "693:         _ALL_DOCS_LIST = \"\"",
          "694:         if not self.docs_build:",
          "695:             return None",
          "696:         if self._default_branch != \"main\":",
          "697:             return \"--package-filter apache-airflow --package-filter docker-stack\"",
          "698:         if self.full_tests_needed:",
          "699:             return _ALL_DOCS_LIST",
          "700:         providers_affected = find_all_providers_affected(changed_files=self._files, include_docs=True)",
          "701:         if (",
          "702:             providers_affected == \"ALL_PROVIDERS\"",
          "703:             or \"docs/conf.py\" in self._files",
          "704:             or \"docs/build_docs.py\" in self._files",
          "705:             or self._are_all_providers_affected()",
          "706:         ):",
          "707:             return _ALL_DOCS_LIST",
          "708:         packages = []",
          "709:         if any([file.startswith(\"airflow/\") for file in self._files]):",
          "710:             packages.append(\"apache-airflow\")",
          "711:         if any([file.startswith(\"chart/\") or file.startswith(\"docs/helm-chart\") for file in self._files]):",
          "712:             packages.append(\"helm-chart\")",
          "713:         if any([file.startswith(\"docs/docker-stack/\") for file in self._files]):",
          "714:             packages.append(\"docker-stack\")",
          "715:         if providers_affected:",
          "716:             for provider in providers_affected:",
          "717:                 packages.append(f\"apache-airflow-providers-{provider.replace('.', '-')}\")",
          "718:         return \" \".join([f\"--package-filter {package}\" for package in packages])",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "680:     @cached_property",
          "681:     def skip_provider_tests(self) -> bool:",
          "684:     @cached_property",
          "685:     def cache_directive(self) -> str:",
          "",
          "[Removed Lines]",
          "682:         return self._default_branch != \"main\"",
          "",
          "[Added Lines]",
          "726:         return self._default_branch != \"main\" or not any(",
          "727:             test_type.startswith(\"Providers\") for test_type in self._get_test_types_to_run()",
          "728:         )",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "692:     @cached_property",
          "693:     def helm_test_packages(self) -> str:",
          "694:         return json.dumps(all_helm_test_packages())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742:     @cached_property",
          "743:     def affected_providers_list_as_string(self) -> str | None:",
          "744:         _ALL_PROVIDERS_LIST = \"\"",
          "745:         if self.full_tests_needed:",
          "746:             return _ALL_PROVIDERS_LIST",
          "747:         if self._are_all_providers_affected():",
          "748:             return _ALL_PROVIDERS_LIST",
          "749:         affected_providers = find_all_providers_affected(changed_files=self._files, include_docs=True)",
          "750:         if not affected_providers:",
          "751:             return None",
          "752:         if affected_providers == \"ALL_PROVIDERS\":",
          "753:             return _ALL_PROVIDERS_LIST",
          "754:         return \" \".join(sorted(affected_providers))",
          "",
          "---------------"
        ],
        "dev/breeze/tests/test_selective_checks.py||dev/breeze/tests/test_selective_checks.py": [
          "File: dev/breeze/tests/test_selective_checks.py -> dev/breeze/tests/test_selective_checks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:                 (\"setup.py\",),",
          "267:                 {",
          "268:                     \"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED,",
          "273:                     \"image-build\": \"true\",",
          "274:                     \"needs-helm-tests\": \"true\",",
          "275:                     \"run-tests\": \"true\",",
          "",
          "[Removed Lines]",
          "269:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "270:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "271:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "272:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "",
          "[Added Lines]",
          "269:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "270:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "271:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "272:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "289:                 (\"generated/provider_dependencies.json\",),",
          "290:                 {",
          "291:                     \"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED,",
          "296:                     \"image-build\": \"true\",",
          "297:                     \"needs-helm-tests\": \"true\",",
          "298:                     \"run-tests\": \"true\",",
          "",
          "[Removed Lines]",
          "292:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "293:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "294:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "295:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "",
          "[Added Lines]",
          "292:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "293:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "294:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "295:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "397:                 \"main\",",
          "398:                 {",
          "399:                     \"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED,",
          "404:                     \"image-build\": \"true\",",
          "405:                     \"run-tests\": \"true\",",
          "406:                     \"docs-build\": \"true\",",
          "",
          "[Removed Lines]",
          "400:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "401:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "402:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "403:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "",
          "[Added Lines]",
          "400:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "401:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "402:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "403:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "424:                 \"main\",",
          "425:                 {",
          "426:                     \"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED,",
          "431:                     \"image-build\": \"true\",",
          "432:                     \"run-tests\": \"true\",",
          "433:                     \"docs-build\": \"true\",",
          "",
          "[Removed Lines]",
          "427:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "428:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "429:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "430:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "",
          "[Added Lines]",
          "427:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "428:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "429:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "430:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "449:                 \"main\",",
          "450:                 {",
          "451:                     \"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED,",
          "456:                     \"image-build\": \"true\",",
          "457:                     \"run-tests\": \"true\",",
          "458:                     \"docs-build\": \"true\",",
          "",
          "[Removed Lines]",
          "452:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "453:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "454:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "455:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "",
          "[Added Lines]",
          "452:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "453:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "454:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "455:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "474:                 \"v2-3-stable\",",
          "475:                 {",
          "476:                     \"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED,",
          "481:                     \"image-build\": \"true\",",
          "482:                     \"run-tests\": \"true\",",
          "483:                     \"docs-build\": \"true\",",
          "",
          "[Removed Lines]",
          "477:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "478:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "479:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "480:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "",
          "[Added Lines]",
          "477:                     \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "478:                     \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "479:                     \"python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "480:                     \"python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "787:             \"main\",",
          "788:             {",
          "789:                 \"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED,",
          "792:                 \"image-build\": \"true\",",
          "793:                 \"needs-helm-tests\": \"true\",",
          "794:                 \"run-tests\": \"true\",",
          "",
          "[Removed Lines]",
          "790:                 \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "791:                 \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "",
          "[Added Lines]",
          "790:                 \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "791:                 \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "807:             \"v2-3-stable\",",
          "808:             {",
          "809:                 \"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED,",
          "812:                 \"image-build\": \"true\",",
          "813:                 \"needs-helm-tests\": \"false\",",
          "814:                 \"run-tests\": \"true\",",
          "",
          "[Removed Lines]",
          "810:                 \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "811:                 \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "",
          "[Added Lines]",
          "810:                 \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "811:                 \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "826:             \"main\",",
          "827:             {",
          "828:                 \"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED,",
          "831:                 \"image-build\": \"true\",",
          "832:                 \"needs-helm-tests\": \"true\",",
          "833:                 \"run-tests\": \"true\",",
          "",
          "[Removed Lines]",
          "829:                 \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "830:                 \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "",
          "[Added Lines]",
          "829:                 \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "830:                 \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "878:     )",
          "879:     assert_outputs_are_printed(",
          "880:         {",
          "883:             \"image-build\": \"true\",",
          "884:             \"needs-helm-tests\": \"true\",",
          "885:             \"run-tests\": \"true\",",
          "",
          "[Removed Lines]",
          "881:             \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10', '3.11']\",",
          "882:             \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10 3.11\",",
          "",
          "[Added Lines]",
          "881:             \"all-python-versions\": \"['3.7', '3.8', '3.9', '3.10']\",",
          "882:             \"all-python-versions-list-as-string\": \"3.7 3.8 3.9 3.10\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1071:         default_branch=\"main\",",
          "1072:     )",
          "1073:     assert_outputs_are_printed(expected_outputs, str(stderr))",
          "",
          "[Removed Lines]",
          "1076: @pytest.mark.parametrize(",
          "1077:     \"files, labels, expected_outputs, should_fail\",",
          "1078:     [",
          "1079:         pytest.param(",
          "1080:             (\"airflow/providers/yandex/test.py\",),",
          "1081:             (),",
          "1082:             None,",
          "1083:             True,",
          "1084:             id=\"Suspended provider changes should fail\",",
          "1085:         ),",
          "1086:         pytest.param(",
          "1087:             (\"airflow/providers/yandex/test.py\",),",
          "1088:             (\"allow suspended provider changes\",),",
          "1089:             {\"affected-providers-list-as-string\": ALL_PROVIDERS_AFFECTED},",
          "1090:             False,",
          "1091:             id=\"Suspended provider changes should not fail if appropriate label is set\",",
          "1092:         ),",
          "1093:         pytest.param(",
          "1094:             (\"airflow/providers/yandex/test.py\", \"airflow/providers/airbyte/test.py\"),",
          "1095:             (\"allow suspended provider changes\",),",
          "1096:             {\"affected-providers-list-as-string\": \"airbyte http\"},",
          "1097:             False,",
          "1098:             id=\"Only non-suspended provider changes should be listed\",",
          "1099:         ),",
          "1100:     ],",
          "1101: )",
          "1102: def test_suspended_providers(",
          "1103:     files: tuple[str, ...], labels: tuple[str], expected_outputs: dict[str, str], should_fail: bool",
          "1104: ):",
          "1105:     failed = False",
          "1106:     try:",
          "1107:         stderr = str(",
          "1108:             SelectiveChecks(",
          "1109:                 files=files,",
          "1110:                 commit_ref=\"HEAD\",",
          "1111:                 github_event=GithubEvents.PULL_REQUEST,",
          "1112:                 pr_labels=labels,",
          "1113:                 default_branch=\"main\",",
          "1114:             )",
          "1115:         )",
          "1116:     except SystemExit:",
          "1117:         failed = True",
          "1118:     assert failed == should_fail",
          "1119:     if not failed:",
          "1120:         assert_outputs_are_printed(expected_outputs, str(stderr))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d73cc40435ff3e762a802bd85f8637df88e8f9f0",
      "candidate_info": {
        "commit_hash": "d73cc40435ff3e762a802bd85f8637df88e8f9f0",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/d73cc40435ff3e762a802bd85f8637df88e8f9f0",
        "files": [
          "airflow/www/decorators.py"
        ],
        "message": "Add fullname to owner on logging (#30185)\n\nCo-authored-by: Tzu-ping Chung <uranusjr@gmail.com>\n\n---------\n\nCo-authored-by: Malthe Borch <mborch@gmail.com>\nCo-authored-by: eladkal <45845474+eladkal@users.noreply.github.com>\nCo-authored-by: Tzu-ping Chung <uranusjr@gmail.com>\n(cherry picked from commit a03f6ccb153f9b95f624d5bc3346f315ca3f0211)",
        "before_after_code_files": [
          "airflow/www/decorators.py||airflow/www/decorators.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/31796"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/decorators.py||airflow/www/decorators.py": [
          "File: airflow/www/decorators.py -> airflow/www/decorators.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:                 if g.user.is_anonymous:",
          "88:                     user = \"anonymous\"",
          "89:                 else:",
          "92:                 fields_skip_logging = {\"csrf_token\", \"_csrf_token\"}",
          "93:                 extra_fields = [",
          "",
          "[Removed Lines]",
          "90:                     user = g.user.username",
          "",
          "[Added Lines]",
          "90:                     user = f\"{g.user.username} ({g.user.get_full_name()})\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f2c6e12056d84ab1ed4a04b3cd9a7ba2b0ddd0d",
      "candidate_info": {
        "commit_hash": "8f2c6e12056d84ab1ed4a04b3cd9a7ba2b0ddd0d",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/8f2c6e12056d84ab1ed4a04b3cd9a7ba2b0ddd0d",
        "files": [
          "airflow/config_templates/config.yml",
          "airflow/config_templates/default_airflow.cfg"
        ],
        "message": "Add an example for sql_alchemy_connect_args conf (#31332)\n\n(cherry picked from commit a018f0f5dc9114d06a81efd42ac3f745260507de)",
        "before_after_code_files": [
          "airflow/config_templates/default_airflow.cfg||airflow/config_templates/default_airflow.cfg"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/31796"
        ],
        "olp_code_files": {
          "patch": [
            "airflow/config_templates/default_airflow.cfg||airflow/config_templates/default_airflow.cfg"
          ],
          "candidate": [
            "airflow/config_templates/default_airflow.cfg||airflow/config_templates/default_airflow.cfg"
          ]
        }
      },
      "candidate_diff": {
        "airflow/config_templates/default_airflow.cfg||airflow/config_templates/default_airflow.cfg": [
          "File: airflow/config_templates/default_airflow.cfg -> airflow/config_templates/default_airflow.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "310: # This is useful when you want to configure db engine args that SqlAlchemy won't parse",
          "311: # in connection string.",
          "312: # See https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine.params.connect_args",
          "313: # sql_alchemy_connect_args =",
          "315: # Whether to load the default connections that ship with Airflow. It's good to",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "313: # Example: sql_alchemy_connect_args = {{\"timeout\": 30}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e8fc7197df724e6fc00444b75920afece50507c9",
      "candidate_info": {
        "commit_hash": "e8fc7197df724e6fc00444b75920afece50507c9",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/e8fc7197df724e6fc00444b75920afece50507c9",
        "files": [
          "licenses/LICENSE-unicodecsv.txt",
          "setup.cfg"
        ],
        "message": "Bring back unicodecsv as depenendency of Airflow (#31814)\n\nRemoving unicodescv as dependency invites problems when users will\nuse older hive, google, microsoft providers, because they were\nusing unicodecsv, but they did not declare it as dependency (it\nwas a transitive dependency of the \"apache-airflow\" package).\n\nIt has been removed in #31693\n\nUnicodecsv has very low footprint so this is not a problem to\nkeep it.\n\nThe dependency misses license in it's package, therefore we\nadd the licence in our \"licences\" folder.\n\n(cherry picked from commit a853233ddb838873c7f0958402cccf5e25ea60c8)",
        "before_after_code_files": [
          "setup.cfg||setup.cfg"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/31796"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "setup.cfg||setup.cfg": [
          "File: setup.cfg -> setup.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:     tenacity>=6.2.0,!=8.2.0",
          "146:     termcolor>=1.1.0",
          "147:     typing-extensions>=4.0.0",
          "148:     werkzeug>=2.0",
          "150: [options.packages.find]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:     # We should remove this dependency when Providers are limited to Airflow 2.7+",
          "149:     # as we replaced the usage of unicodecsv with csv in Airflow 2.7",
          "150:     # See https://github.com/apache/airflow/pull/31693",
          "151:     # We should also remove \"licenses/LICENSE-unicodecsv.txt\" file when we remove this dependency",
          "152:     unicodecsv>=0.14.1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27ec3fb4196a935735f3bc05b9f7a7c10229e3c8",
      "candidate_info": {
        "commit_hash": "27ec3fb4196a935735f3bc05b9f7a7c10229e3c8",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/27ec3fb4196a935735f3bc05b9f7a7c10229e3c8",
        "files": [
          "docker_tests/test_examples_of_prod_image_building.py",
          "docs/apache-airflow/howto/docker-compose/index.rst",
          "docs/apache-airflow/installation/installing-from-pypi.rst",
          "docs/docker-stack/docker-examples/extending/add-build-essential-extend/Dockerfile",
          "docs/docker-stack/docker-examples/extending/add-providers/Dockerfile",
          "docs/docker-stack/docker-examples/extending/add-pypi-packages/Dockerfile",
          "docs/docker-stack/docker-examples/extending/add-requirement-packages/Dockerfile",
          "docs/docker-stack/docker-examples/extending/custom-providers/Dockerfile"
        ],
        "message": "Add description in a few more places about adding airflow to pip install (#31448)\n\nIt is important to keep airflow as a dependency with pinned version if\nyou are adding new dependencies. This PR adds it in case of\ndocker-compose documentation and also improves examples in our\nimages, by using AIRFLOW_VERSION variable defined in the images. This\nway users can write future-proof ways of installind dependencies basing\non our examples.\n\nFollow-up after #30813\n\n(cherry picked from commit d722fba54e844b83025a7189b28371fba7e1af88)",
        "before_after_code_files": [
          "docker_tests/test_examples_of_prod_image_building.py||docker_tests/test_examples_of_prod_image_building.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/31796"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "docker_tests/test_examples_of_prod_image_building.py||docker_tests/test_examples_of_prod_image_building.py": [
          "File: docker_tests/test_examples_of_prod_image_building.py -> docker_tests/test_examples_of_prod_image_building.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     new_content = re.sub(",
          "60:         r\"FROM apache/airflow:.*\", rf\"FROM apache/airflow:{latest_released_version}\", content",
          "61:     )",
          "63:     try:",
          "64:         run_command(",
          "65:             [\"docker\", \"build\", \".\", \"--tag\", image_name, \"-f\", \"-\"],",
          "",
          "[Removed Lines]",
          "62:     new_content = re.sub(r\"apache-airflow==\\S*\", rf\"apache-airflow=={latest_released_version}\", new_content)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}