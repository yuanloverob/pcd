{
  "cve_id": "CVE-2018-1002205",
  "cve_desc": "DotNetZip.Semvered before 1.11.0 is vulnerable to directory traversal, allowing attackers to write to arbitrary files via a ../ (dot dot slash) in a Zip archive entry that is mishandled during extraction. This vulnerability is also known as 'Zip-Slip'.",
  "repo": "haf/DotNetZip.Semverd",
  "patch_hash": "55d2c13c0cc64654e18fcdd0038fdb3d7458e366",
  "patch_info": {
    "commit_hash": "55d2c13c0cc64654e18fcdd0038fdb3d7458e366",
    "repo": "haf/DotNetZip.Semverd",
    "commit_url": "https://github.com/haf/DotNetZip.Semverd/commit/55d2c13c0cc64654e18fcdd0038fdb3d7458e366",
    "files": [
      "src/Zip Tests/Compatibility.cs",
      "src/Zip Tests/Zip Tests.csproj",
      "src/Zip Tests/zips/relative-paths-in-subdir-outside.zip",
      "src/Zip Tests/zips/relative-paths-in-subdir.zip",
      "src/Zip Tests/zips/relative-paths-outside.zip",
      "src/Zip.Shared/Shared.cs",
      "src/Zip.Shared/ZipEntry.Extract.cs"
    ],
    "message": "Merge pull request #121 from shana/bugs/relative-paths\n\nSanitize zip entry paths before extracting",
    "before_after_code_files": [
      "src/Zip.Shared/Shared.cs||src/Zip.Shared/Shared.cs",
      "src/Zip.Shared/ZipEntry.Extract.cs||src/Zip.Shared/ZipEntry.Extract.cs"
    ]
  },
  "patch_diff": {
    "src/Zip.Shared/Shared.cs||src/Zip.Shared/Shared.cs": [
      "File: src/Zip.Shared/Shared.cs -> src/Zip.Shared/Shared.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "157:             return SimplifyFwdSlashPath(pathName);",
      "158:         }",
      "162:         static System.Text.Encoding utf8 = System.Text.Encoding.GetEncoding(\"UTF-8\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "167:         public static string SanitizePath(string path)",
      "168:         {",
      "169:             System.Collections.Generic.List<string> dirs = new System.Collections.Generic.List<string>();",
      "170:             int level = 0;",
      "171:             foreach (string dir in path.Split('/'))",
      "172:             {",
      "173:                 if (dir == \"..\")",
      "174:                 {",
      "175:                     if (level == 0)",
      "176:                         continue;",
      "177:                     level--;",
      "178:                 }",
      "179:                 else",
      "180:                 {",
      "181:                     if (dirs.Count - 1 < level)",
      "182:                         dirs.Add(dir);",
      "183:                     else",
      "184:                         dirs[level] = dir;",
      "185:                     level++;",
      "186:                 }",
      "187:             }",
      "189:             path = \"\";",
      "190:             for (int i = 0; i < level; i++)",
      "191:             {",
      "192:                 if (i > 0)",
      "193:                     path += \"/\";",
      "194:                 path += dirs[i];",
      "195:             }",
      "197:             return path;",
      "198:         }",
      "",
      "---------------"
    ],
    "src/Zip.Shared/ZipEntry.Extract.cs||src/Zip.Shared/ZipEntry.Extract.cs": [
      "File: src/Zip.Shared/ZipEntry.Extract.cs -> src/Zip.Shared/ZipEntry.Extract.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "1422:             if (f.StartsWith(\"/\"))",
      "1423:                 f = f.Substring(1);",
      "1426:             outFileName = _container.ZipFile.FlattenFoldersOnExtract",
      "1427:                 ? Path.Combine(baseDir, f.IndexOf('/') != -1 ? Path.GetFileName(f) : f)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1425:             f = SharedUtilities.SanitizePath(f);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8e79ed7dc17fe6d3c74c7ac1344b2aa60eb30039",
      "candidate_info": {
        "commit_hash": "8e79ed7dc17fe6d3c74c7ac1344b2aa60eb30039",
        "repo": "haf/DotNetZip.Semverd",
        "commit_url": "https://github.com/haf/DotNetZip.Semverd/commit/8e79ed7dc17fe6d3c74c7ac1344b2aa60eb30039",
        "files": [
          "src/Zip Tests/Compatibility.cs",
          "src/Zip Tests/Zip Tests.csproj",
          "src/Zip Tests/zips/relative-paths-in-subdir-outside.zip",
          "src/Zip Tests/zips/relative-paths-in-subdir.zip",
          "src/Zip Tests/zips/relative-paths-outside.zip",
          "src/Zip.Shared/Shared.cs",
          "src/Zip.Shared/ZipEntry.Extract.cs"
        ],
        "message": "Sanitize zip entry paths before extracting\n\nZip entries can contain relative paths that end up outside the extraction\ndirectory if used as-is, for instance \"..\\..\\..\\..\\file.txt\", which can be\na potential security risk. This sanitizes all paths before extraction while\nensuring that valid relative paths are not lost.\n\n- \"a\\..\\c\\file.txt\" -> \"c\\file.txt\"\n- \"a\\..\\..\\c\\file.txt\" -> \"c\\file.txt\"\n- \"..\\..\\..\\..\\c\\file.txt\" -> \"c\\file.txt\"\n- \"a\\b\\..\\c\\file.txt\" -> \"a\\c\\file.txt\"\n- \"a\\b\\c\\..\\e\\..\\..\\f\\file.txt\" -> \"a\\f\\file.txt\"",
        "before_after_code_files": [
          "src/Zip.Shared/Shared.cs||src/Zip.Shared/Shared.cs",
          "src/Zip.Shared/ZipEntry.Extract.cs||src/Zip.Shared/ZipEntry.Extract.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/haf/DotNetZip.Semverd/pull/121"
        ],
        "olp_code_files": {
          "patch": [
            "src/Zip.Shared/Shared.cs||src/Zip.Shared/Shared.cs",
            "src/Zip.Shared/ZipEntry.Extract.cs||src/Zip.Shared/ZipEntry.Extract.cs"
          ],
          "candidate": [
            "src/Zip.Shared/Shared.cs||src/Zip.Shared/Shared.cs",
            "src/Zip.Shared/ZipEntry.Extract.cs||src/Zip.Shared/ZipEntry.Extract.cs"
          ]
        }
      },
      "candidate_diff": {
        "src/Zip.Shared/Shared.cs||src/Zip.Shared/Shared.cs": [
          "File: src/Zip.Shared/Shared.cs -> src/Zip.Shared/Shared.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:             return SimplifyFwdSlashPath(pathName);",
          "158:         }",
          "162:         static System.Text.Encoding utf8 = System.Text.Encoding.GetEncoding(\"UTF-8\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:         public static string SanitizePath(string path)",
          "168:         {",
          "169:             System.Collections.Generic.List<string> dirs = new System.Collections.Generic.List<string>();",
          "170:             int level = 0;",
          "171:             foreach (string dir in path.Split('/'))",
          "172:             {",
          "173:                 if (dir == \"..\")",
          "174:                 {",
          "175:                     if (level == 0)",
          "176:                         continue;",
          "177:                     level--;",
          "178:                 }",
          "179:                 else",
          "180:                 {",
          "181:                     if (dirs.Count - 1 < level)",
          "182:                         dirs.Add(dir);",
          "183:                     else",
          "184:                         dirs[level] = dir;",
          "185:                     level++;",
          "186:                 }",
          "187:             }",
          "189:             path = \"\";",
          "190:             for (int i = 0; i < level; i++)",
          "191:             {",
          "192:                 if (i > 0)",
          "193:                     path += \"/\";",
          "194:                 path += dirs[i];",
          "195:             }",
          "197:             return path;",
          "198:         }",
          "",
          "---------------"
        ],
        "src/Zip.Shared/ZipEntry.Extract.cs||src/Zip.Shared/ZipEntry.Extract.cs": [
          "File: src/Zip.Shared/ZipEntry.Extract.cs -> src/Zip.Shared/ZipEntry.Extract.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1422:             if (f.StartsWith(\"/\"))",
          "1423:                 f = f.Substring(1);",
          "1426:             outFileName = _container.ZipFile.FlattenFoldersOnExtract",
          "1427:                 ? Path.Combine(baseDir, f.IndexOf('/') != -1 ? Path.GetFileName(f) : f)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1425:             f = SharedUtilities.SanitizePath(f);",
          "",
          "---------------"
        ]
      }
    }
  ]
}