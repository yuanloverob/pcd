{
  "cve_id": "CVE-2022-45299",
  "cve_desc": "An issue in the IpFile argument of rust-lang webbrowser-rs v0.8.2 allows attackers to access arbitrary files via supplying a crafted URL.",
  "repo": "amodm/webbrowser-rs",
  "patch_hash": "431b5139e274b7e456bea27e768aaa121b97be4c",
  "patch_info": {
    "commit_hash": "431b5139e274b7e456bea27e768aaa121b97be4c",
    "repo": "amodm/webbrowser-rs",
    "commit_url": "https://github.com/amodm/webbrowser-rs/commit/431b5139e274b7e456bea27e768aaa121b97be4c",
    "files": [
      "README.md",
      "src/lib.rs",
      "src/macos.rs",
      "src/unix.rs",
      "src/windows.rs"
    ],
    "message": "define consistent behaviour to include opening web browser even for local files",
    "before_after_code_files": [
      "src/lib.rs||src/lib.rs",
      "src/macos.rs||src/macos.rs",
      "src/unix.rs||src/unix.rs",
      "src/windows.rs||src/windows.rs"
    ]
  },
  "patch_diff": {
    "src/lib.rs||src/lib.rs": [
      "File: src/lib.rs -> src/lib.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "62:     \"Only Windows, Mac OS, iOS, Linux, *BSD and Haiku and Wasm32 are currently supported\"",
      "63: );",
      "65: use std::default::Default;",
      "66: use std::io::{Error, ErrorKind, Result};",
      "67: use std::str::FromStr;",
      "68: use std::{error, fmt};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "69: use std::convert::TryFrom;",
      "71: use std::fmt::Display;",
      "73: use std::ops::Deref;",
      "74: use std::path::PathBuf;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "280:     url: &str,",
      "281:     options: &BrowserOptions,",
      "282: ) -> Result<()> {",
      "284:     os::open_browser_internal(browser, &target, options)",
      "285: }",
      "294: impl TargetType {",
      "296:     #[cfg(any(target_os = \"android\", target_os = \"ios\", target_family = \"wasm\"))]",
      "297:     fn is_http(&self) -> bool {",
      "303:             _ => false,",
      "304:         }",
      "305:     }",
      "",
      "[Removed Lines]",
      "283:     let target = TargetType::from(url);",
      "289: enum TargetType {",
      "290:     Url(url::Url),",
      "291:     Path(String),",
      "292: }",
      "298:         match self {",
      "299:             Self::Url(u) => match u.scheme() {",
      "300:                 \"http\" | \"https\" => true,",
      "301:                 _ => false,",
      "302:             },",
      "",
      "[Added Lines]",
      "291:     let target = TargetType::try_from(url)?;",
      "297: struct TargetType(url::Url);",
      "303:         match self.0.scheme() {",
      "304:             \"http\" | \"https\" => true,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "309:     #[cfg(any(target_os = \"android\", target_os = \"ios\", target_family = \"wasm\"))]",
      "310:     fn get_http_url(&self) -> Result<&str> {",
      "311:         if self.is_http() {",
      "313:         } else {",
      "315:         }",
      "316:     }",
      "317: }",
      "325:     }",
      "326: }",
      "333:         }",
      "334:     }",
      "335: }",
      "",
      "[Removed Lines]",
      "312:             Ok(self.as_ref())",
      "314:             Err(Error::new(ErrorKind::InvalidInput, \"not a valid url\"))",
      "319: impl AsRef<str> for TargetType {",
      "320:     fn as_ref(&self) -> &str {",
      "321:         match self {",
      "322:             TargetType::Url(u) => u.as_str(),",
      "323:             TargetType::Path(p) => p,",
      "324:         }",
      "328: impl From<&str> for TargetType {",
      "329:     fn from(target: &str) -> Self {",
      "330:         match url::Url::parse(target) {",
      "331:             Ok(u) => TargetType::Url(u),",
      "332:             Err(_) => TargetType::Path(target.into()),",
      "",
      "[Added Lines]",
      "314:             Ok(self.0.as_str())",
      "316:             Err(Error::new(ErrorKind::InvalidInput, \"not an http url\"))",
      "321: impl Deref for TargetType {",
      "322:     type Target = str;",
      "324:     fn deref(&self) -> &Self::Target {",
      "325:         self.0.as_str()",
      "326:     }",
      "327: }",
      "329: impl Display for TargetType {",
      "330:     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
      "331:         (self as &str).fmt(f)",
      "335: impl TryFrom<&str> for TargetType {",
      "336:     type Error = Error;",
      "338:     fn try_from(value: &str) -> Result<Self> {",
      "339:         match url::Url::parse(value) {",
      "340:             Ok(u) => Ok(Self(u)),",
      "341:             Err(_) => {",
      "343:                 let pb = PathBuf::from(value);",
      "344:                 let url = url::Url::from_file_path(if pb.is_relative() {",
      "345:                     std::env::current_dir()?.join(pb)",
      "346:                 } else {",
      "347:                     pb",
      "348:                 })",
      "349:                 .map_err(|_| {",
      "350:                     Error::new(ErrorKind::InvalidInput, \"failed to convert path to url\")",
      "351:                 })?;",
      "353:                 Ok(Self(url))",
      "354:             }",
      "",
      "---------------"
    ],
    "src/macos.rs||src/macos.rs": [
      "File: src/macos.rs -> src/macos.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "82:     }",
      "90:     let mut launched_app: CFURLRef = std::ptr::null_mut();",
      "91:     let status = unsafe { LSOpenFromURLSpec(&spec, &mut launched_app) };",
      "92:     log::trace!(\"received status: {}\", status);",
      "",
      "[Removed Lines]",
      "85:     log::trace!(",
      "86:         \"about to start browser: {} for {}\",",
      "87:         &browser,",
      "88:         target.as_ref()",
      "89:     );",
      "",
      "[Added Lines]",
      "85:     log::trace!(\"about to start browser: {} for {}\", &browser, &target);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "208: #[cfg(test)]",
      "209: mod tests {",
      "210:     use super::*;",
      "212:     #[test]",
      "213:     fn open_non_existing_browser() {",
      "214:         let _ = env_logger::try_init();",
      "215:         if let Err(err) = open_browser_internal(",
      "216:             Browser::Opera,",
      "218:             &BrowserOptions::default(),",
      "219:         ) {",
      "220:             assert_eq!(err.kind(), ErrorKind::NotFound);",
      "",
      "[Removed Lines]",
      "217:             &TargetType::from(\"https://github.com\"),",
      "",
      "[Added Lines]",
      "207:     use std::convert::TryFrom;",
      "214:             &TargetType::try_from(\"https://github.com\").expect(\"failed to parse url\"),",
      "",
      "---------------"
    ],
    "src/unix.rs||src/unix.rs": [
      "File: src/unix.rs -> src/unix.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "30:     options: &BrowserOptions,",
      "31: ) -> Result<()> {",
      "32:     match browser {",
      "34:         _ => Err(Error::new(",
      "35:             ErrorKind::NotFound,",
      "36:             \"only default browser supported\",",
      "",
      "[Removed Lines]",
      "33:         Browser::Default => open_browser_default(target.as_ref(), options),",
      "",
      "[Added Lines]",
      "33:         Browser::Default => open_browser_default(&target, options),",
      "",
      "---------------"
    ],
    "src/windows.rs||src/windows.rs": [
      "File: src/windows.rs -> src/windows.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "33:             static OPEN: &[u16] = &['o' as u16, 'p' as u16, 'e' as u16, 'n' as u16, 0x0000];",
      "34:             static HTTP: &[u16] = &['h' as u16, 't' as u16, 't' as u16, 'p' as u16, 0x0000];",
      "36:                 .map_err(|e| Error::new(ErrorKind::InvalidInput, e))?;",
      "37:             let code = unsafe {",
      "38:                 let coinitializeex_result = CoInitializeEx(",
      "",
      "[Removed Lines]",
      "35:             let url = U16CString::from_str(target.as_ref())",
      "",
      "[Added Lines]",
      "35:             let url = U16CString::from_str(&target)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ecfbf66daa0cc139bd557bd7899a183bd6575990",
      "candidate_info": {
        "commit_hash": "ecfbf66daa0cc139bd557bd7899a183bd6575990",
        "repo": "amodm/webbrowser-rs",
        "commit_url": "https://github.com/amodm/webbrowser-rs/commit/ecfbf66daa0cc139bd557bd7899a183bd6575990",
        "files": [
          "README.md",
          "src/android.rs",
          "src/lib.rs",
          "src/macos.rs",
          "src/unix.rs",
          "src/wasm.rs",
          "src/windows.rs"
        ],
        "message": "Document consistent behaviour, and provide way of overriding suppression of output",
        "before_after_code_files": [
          "src/android.rs||src/android.rs",
          "src/lib.rs||src/lib.rs",
          "src/macos.rs||src/macos.rs",
          "src/unix.rs||src/unix.rs",
          "src/wasm.rs||src/wasm.rs",
          "src/windows.rs||src/windows.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib.rs||src/lib.rs",
            "src/macos.rs||src/macos.rs",
            "src/unix.rs||src/unix.rs",
            "src/windows.rs||src/windows.rs"
          ],
          "candidate": [
            "src/lib.rs||src/lib.rs",
            "src/macos.rs||src/macos.rs",
            "src/unix.rs||src/unix.rs",
            "src/windows.rs||src/windows.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/android.rs||src/android.rs": [
          "File: src/android.rs -> src/android.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: use jni::objects::JValue;",
          "3: pub use std::os::unix::process::ExitStatusExt;",
          "4: use std::process::ExitStatus;",
          "7: #[inline]",
          "10:     let native_activity = ndk_glue::native_activity();",
          "11:     let vm_ptr = native_activity.vm();",
          "",
          "[Removed Lines]",
          "1: use crate::{Browser, Error, ErrorKind, Result};",
          "8: pub fn open_browser_internal(_: Browser, url: &str) -> Result<()> {",
          "",
          "[Added Lines]",
          "1: use crate::{Browser, BrowserOptions, Error, ErrorKind, Result};",
          "8: pub fn open_browser_internal(_: Browser, url: &str, _: &BrowserOptions) -> Result<()> {",
          "",
          "---------------"
        ],
        "src/lib.rs||src/lib.rs": [
          "File: src/lib.rs -> src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:     }",
          "142: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144: #[derive(Debug, Eq, PartialEq, Copy, Clone, Hash)]",
          "148: pub struct BrowserOptions {",
          "149:     pub suppress_output: bool,",
          "150: }",
          "152: impl fmt::Display for BrowserOptions {",
          "153:     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "154:         f.write_fmt(format_args!(",
          "155:             \"BrowserOptions(supress_output={})\",",
          "156:             self.suppress_output",
          "157:         ))",
          "158:     }",
          "159: }",
          "161: impl std::default::Default for BrowserOptions {",
          "162:     fn default() -> Self {",
          "163:         BrowserOptions {",
          "164:             suppress_output: true,",
          "165:         }",
          "166:     }",
          "167: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179: pub fn open_browser(browser: Browser, url: &str) -> Result<()> {",
          "180:     let url_s: String = match url::Url::parse(url) {",
          "181:         Ok(u) => u.as_str().into(),",
          "182:         Err(_) => url.into(),",
          "183:     };",
          "185: }",
          "187: #[test]",
          "",
          "[Removed Lines]",
          "184:     os::open_browser_internal(browser, &url_s)",
          "",
          "[Added Lines]",
          "205:     open_browser_with_options(browser, url, &BrowserOptions::default())",
          "206: }",
          "222: pub fn open_browser_with_options(",
          "223:     browser: Browser,",
          "224:     url: &str,",
          "225:     options: &BrowserOptions,",
          "226: ) -> Result<()> {",
          "231:     os::open_browser_internal(browser, &url_s, options)",
          "",
          "---------------"
        ],
        "src/macos.rs||src/macos.rs": [
          "File: src/macos.rs -> src/macos.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: mod common;",
          "5: use common::from_status;",
          "8: #[inline]",
          "10:     let url_s: String = match url::Url::parse(url_raw) {",
          "11:         Ok(u) => u.as_str().into(),",
          "12:         Err(_) => url_raw.into(),",
          "",
          "[Removed Lines]",
          "1: use crate::{Browser, Error, ErrorKind, Result};",
          "2: use std::process::Command;",
          "9: pub fn open_browser_internal(browser: Browser, url_raw: &str) -> Result<()> {",
          "",
          "[Added Lines]",
          "1: use crate::{Browser, BrowserOptions, Error, ErrorKind, Result};",
          "2: use std::process::{Command, Stdio};",
          "9: pub fn open_browser_internal(",
          "10:     browser: Browser,",
          "11:     url_raw: &str,",
          "12:     options: &BrowserOptions,",
          "13: ) -> Result<()> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:     let url = &url_s;",
          "15:     let mut cmd = Command::new(\"open\");",
          "16:     match browser {",
          "18:         _ => {",
          "19:             let app: Option<&str> = match browser {",
          "20:                 Browser::Firefox => Some(\"Firefox\"),",
          "",
          "[Removed Lines]",
          "17:         Browser::Default => from_status(cmd.arg(url).status()),",
          "",
          "[Added Lines]",
          "21:         Browser::Default => run_command(cmd.arg(url), options),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "25:                 _ => None,",
          "26:             };",
          "27:             match app {",
          "29:                 None => Err(Error::new(",
          "30:                     ErrorKind::NotFound,",
          "31:                     format!(\"Unsupported browser {:?}\", browser),",
          "",
          "[Removed Lines]",
          "28:                 Some(name) => from_status(cmd.arg(\"-a\").arg(name).arg(url).status()),",
          "",
          "[Added Lines]",
          "32:                 Some(name) => run_command(cmd.arg(\"-a\").arg(name).arg(url), options),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "34:         }",
          "35:     }",
          "36: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: fn run_command(cmd: &mut Command, options: &BrowserOptions) -> Result<()> {",
          "43:     if options.suppress_output {",
          "44:         cmd.stdout(Stdio::null())",
          "45:             .stdin(Stdio::null())",
          "46:             .stderr(Stdio::null());",
          "47:     }",
          "48:     from_status(cmd.status())",
          "49: }",
          "",
          "---------------"
        ],
        "src/unix.rs||src/unix.rs": [
          "File: src/unix.rs -> src/unix.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: use std::os::unix::fs::PermissionsExt;",
          "3: use std::path::{Path, PathBuf};",
          "4: use std::process::{Command, Stdio};",
          "6: macro_rules! try_browser {",
          "8:         for_matching_path($name, |pb| {",
          "9:             let mut cmd = Command::new(pb);",
          "10:             $(",
          "11:                 cmd.arg($arg);",
          "12:             )+",
          "14:         })",
          "15:     }",
          "16: }",
          "",
          "[Removed Lines]",
          "1: use crate::{Browser, Error, ErrorKind, Result};",
          "7:     ( $name:expr, $( $arg:expr ),+ ) => {",
          "13:             run_command(&mut cmd, !is_text_browser(&pb))",
          "",
          "[Added Lines]",
          "1: use crate::{Browser, BrowserOptions, Error, ErrorKind, Result};",
          "7:     ( $options: expr, $name:expr, $( $arg:expr ),+ ) => {",
          "13:             run_command(&mut cmd, !is_text_browser(&pb), $options)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: #[inline]",
          "34:         .or_else(|r| match guess_desktop_env() {",
          "51:             _ => Err(r),",
          "52:         })",
          "56:         .map_err(|_| {",
          "57:             Error::new(",
          "",
          "[Removed Lines]",
          "26: pub fn open_browser_internal(_: Browser, url: &str) -> Result<()> {",
          "28:     try_with_browser_env(url)",
          "30:         .or_else(|_| try_haiku(url))",
          "32:         .or_else(|_| try_browser!(\"xdg-open\", url))",
          "35:             \"kde\" => try_browser!(\"kde-open\", url)",
          "36:                 .or_else(|_| try_browser!(\"kde-open5\", url))",
          "37:                 .or_else(|_| try_browser!(\"kfmclient\", \"newTab\", url)),",
          "39:             \"gnome\" => try_browser!(\"gio\", \"open\", url)",
          "40:                 .or_else(|_| try_browser!(\"gvfs-open\", url))",
          "41:                 .or_else(|_| try_browser!(\"gnome-open\", url)),",
          "43:             \"mate\" => try_browser!(\"gio\", \"open\", url)",
          "44:                 .or_else(|_| try_browser!(\"gvfs-open\", url))",
          "45:                 .or_else(|_| try_browser!(\"mate-open\", url)),",
          "47:             \"xfce\" => try_browser!(\"exo-open\", url)",
          "48:                 .or_else(|_| try_browser!(\"gio\", \"open\", url))",
          "49:                 .or_else(|_| try_browser!(\"gvfs-open\", url)),",
          "54:         .or_else(|_| try_browser!(\"x-www-browser\", url))",
          "",
          "[Added Lines]",
          "26: pub fn open_browser_internal(_: Browser, url: &str, options: &BrowserOptions) -> Result<()> {",
          "28:     try_with_browser_env(url, options)",
          "30:         .or_else(|_| try_haiku(options, url))",
          "32:         .or_else(|_| try_browser!(options, \"xdg-open\", url))",
          "35:             \"kde\" => try_browser!(options, \"kde-open\", url)",
          "36:                 .or_else(|_| try_browser!(options, \"kde-open5\", url))",
          "37:                 .or_else(|_| try_browser!(options, \"kfmclient\", \"newTab\", url)),",
          "39:             \"gnome\" => try_browser!(options, \"gio\", \"open\", url)",
          "40:                 .or_else(|_| try_browser!(options, \"gvfs-open\", url))",
          "41:                 .or_else(|_| try_browser!(options, \"gnome-open\", url)),",
          "43:             \"mate\" => try_browser!(options, \"gio\", \"open\", url)",
          "44:                 .or_else(|_| try_browser!(options, \"gvfs-open\", url))",
          "45:                 .or_else(|_| try_browser!(options, \"mate-open\", url)),",
          "47:             \"xfce\" => try_browser!(options, \"exo-open\", url)",
          "48:                 .or_else(|_| try_browser!(options, \"gio\", \"open\", url))",
          "49:                 .or_else(|_| try_browser!(options, \"gvfs-open\", url)),",
          "54:         .or_else(|_| try_browser!(options, \"x-www-browser\", url))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64: }",
          "66: #[inline]",
          "69:     for browser in std::env::var(\"BROWSER\")",
          "70:         .unwrap_or_else(|_| String::from(\"\"))",
          "",
          "[Removed Lines]",
          "67: fn try_with_browser_env(url: &str) -> Result<()> {",
          "",
          "[Added Lines]",
          "67: fn try_with_browser_env(url: &str, options: &BrowserOptions) -> Result<()> {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "89:                     cmd.arg(url);",
          "90:                 }",
          "92:             });",
          "93:             if env_exit.is_ok() {",
          "94:                 return Ok(());",
          "",
          "[Removed Lines]",
          "91:                 run_command(&mut cmd, !is_text_browser(pb))",
          "",
          "[Added Lines]",
          "91:                 run_command(&mut cmd, !is_text_browser(pb), options)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "138: #[inline]",
          "140:     if cfg!(target_os = \"haiku\") {",
          "142:     } else {",
          "143:         Err(Error::new(ErrorKind::NotFound, \"Not on haiku\"))",
          "144:     }",
          "",
          "[Removed Lines]",
          "139: fn try_haiku(url: &str) -> Result<()> {",
          "141:         try_browser!(\"open\", url).map(|_| ())",
          "",
          "[Added Lines]",
          "139: fn try_haiku(options: &BrowserOptions, url: &str) -> Result<()> {",
          "141:         try_browser!(options, \"open\", url).map(|_| ())",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "195: #[inline]",
          "197:     if background {",
          "205:     } else {",
          "208:         cmd.status().and_then(|status| {",
          "209:             if status.success() {",
          "210:                 Ok(())",
          "",
          "[Removed Lines]",
          "196: fn run_command(cmd: &mut Command, background: bool) -> Result<()> {",
          "200:         cmd.stdin(Stdio::null())",
          "201:             .stdout(Stdio::null())",
          "202:             .stderr(Stdio::null())",
          "203:             .spawn()",
          "204:             .map(|_| ())",
          "",
          "[Added Lines]",
          "196: fn run_command(cmd: &mut Command, background: bool, options: &BrowserOptions) -> Result<()> {",
          "200:         if options.suppress_output {",
          "201:             cmd.stdin(Stdio::null())",
          "202:                 .stdout(Stdio::null())",
          "203:                 .stderr(Stdio::null())",
          "204:         } else {",
          "205:             cmd",
          "206:         }",
          "207:         .spawn()",
          "208:         .map(|_| ())",
          "",
          "---------------"
        ],
        "src/wasm.rs||src/wasm.rs": [
          "File: src/wasm.rs -> src/wasm.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #[inline]",
          "8:     let configured_target = option_env!(\"WEBBROWSER_WASM_TARGET\");",
          "9:     let window = web_sys::window();",
          "10:     match window {",
          "11:         Some(w) => {",
          "12:             let target = configured_target.unwrap_or_else(|| \"_blank\");",
          "15:             match w.open_with_url_and_target(url, target) {",
          "16:                 Ok(x) => match x {",
          "17:                     Some(_) => Ok(()),",
          "18:                     None => {",
          "20:                         Err(Error::new(ErrorKind::Other, POPUP_ERR_MSG))",
          "21:                     }",
          "22:                 },",
          "23:                 Err(_) => {",
          "25:                     Err(Error::new(ErrorKind::Other, \"error opening url\"))",
          "26:                 }",
          "27:             }",
          "",
          "[Removed Lines]",
          "1: use crate::{Browser, Error, ErrorKind, Result};",
          "6: pub fn open_browser_internal(_: Browser, url: &str) -> Result<()> {",
          "13:             wasm_console_log(&format!(\"target for url {} detected as {}\", url, target));",
          "19:                         wasm_console_log(POPUP_ERR_MSG);",
          "24:                     wasm_console_log(\"window error while opening url\");",
          "",
          "[Added Lines]",
          "1: use crate::{Browser, BrowserOptions, Error, ErrorKind, Result};",
          "6: pub fn open_browser_internal(_: Browser, url: &str, options: &BrowserOptions) -> Result<()> {",
          "13:             wasm_console_log(",
          "14:                 &format!(\"target for url {} detected as {}\", url, target),",
          "15:                 options,",
          "16:             );",
          "22:                         wasm_console_log(POPUP_ERR_MSG, options);",
          "27:                     wasm_console_log(\"window error while opening url\", options);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: }",
          "38:     #[cfg(all(debug_assertions, feature = \"wasm-console\"))]",
          "40: }",
          "42: const POPUP_ERR_MSG: &'static str = \"popup blocked? window detected, but open_url failed\";",
          "",
          "[Removed Lines]",
          "37: fn wasm_console_log(_msg: &str) {",
          "39:     web_sys::console::log_1(&format!(\"[webbrowser] {}\", &_msg).into());",
          "",
          "[Added Lines]",
          "40: fn wasm_console_log(_msg: &str, options: &BrowserOptions) {",
          "42:     if !options.suppress_output {",
          "43:         web_sys::console::log_1(&format!(\"[webbrowser] {}\", &_msg).into());",
          "44:     }",
          "",
          "---------------"
        ],
        "src/windows.rs||src/windows.rs": [
          "File: src/windows.rs -> src/windows.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: extern crate widestring;",
          "2: extern crate winapi;",
          "5: pub use std::os::windows::process::ExitStatusExt;",
          "6: use std::ptr;",
          "7: use widestring::U16CString;",
          "12: #[inline]",
          "14:     use winapi::shared::winerror::SUCCEEDED;",
          "15:     use winapi::um::combaseapi::{CoInitializeEx, CoUninitialize};",
          "16:     use winapi::um::objbase::{COINIT_APARTMENTTHREADED, COINIT_DISABLE_OLE1DDE};",
          "",
          "[Removed Lines]",
          "4: use crate::{Browser, Error, ErrorKind, Result};",
          "13: pub fn open_browser_internal(browser: Browser, url: &str) -> Result<()> {",
          "",
          "[Added Lines]",
          "4: use crate::{Browser, BrowserOptions, Error, ErrorKind, Result};",
          "15: pub fn open_browser_internal(browser: Browser, url: &str, _: &BrowserOptions) -> Result<()> {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d426c3652410099f93aee6bdf863bd920829161",
      "candidate_info": {
        "commit_hash": "0d426c3652410099f93aee6bdf863bd920829161",
        "repo": "amodm/webbrowser-rs",
        "commit_url": "https://github.com/amodm/webbrowser-rs/commit/0d426c3652410099f93aee6bdf863bd920829161",
        "files": [
          "src/lib.rs"
        ],
        "message": "fix wasm build (again) #build-wasm",
        "before_after_code_files": [
          "src/lib.rs||src/lib.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib.rs||src/lib.rs"
          ],
          "candidate": [
            "src/lib.rs||src/lib.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/lib.rs||src/lib.rs": [
          "File: src/lib.rs -> src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: use std::fmt::Display;",
          "72: use std::io::{Error, ErrorKind, Result};",
          "73: use std::ops::Deref;",
          "75: use std::str::FromStr;",
          "76: use std::{error, fmt};",
          "",
          "[Removed Lines]",
          "74: use std::path::PathBuf;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "335: impl TryFrom<&str> for TargetType {",
          "336:     type Error = Error;",
          "338:     fn try_from(value: &str) -> Result<Self> {",
          "339:         match url::Url::parse(value) {",
          "340:             Ok(u) => Ok(Self(u)),",
          "341:             Err(_) => {",
          "344:                 } else {",
          "358:             }",
          "359:         }",
          "360:     }",
          "",
          "[Removed Lines]",
          "342:                 if cfg!(target_family = \"wasm\") {",
          "343:                     Err(Error::new(ErrorKind::InvalidInput, \"invalid url for wasm\"))",
          "346:                     let pb = PathBuf::from(value);",
          "347:                     let url = url::Url::from_file_path(if pb.is_relative() {",
          "348:                         std::env::current_dir()?.join(pb)",
          "349:                     } else {",
          "350:                         pb",
          "351:                     })",
          "352:                     .map_err(|_| {",
          "353:                         Error::new(ErrorKind::InvalidInput, \"failed to convert path to url\")",
          "354:                     })?;",
          "356:                     Ok(Self(url))",
          "357:                 }",
          "",
          "[Added Lines]",
          "337:     #[cfg(target_family = \"wasm\")]",
          "338:     fn try_from(_: &str) -> Result<Self> {",
          "339:         Err(Error::new(ErrorKind::InvalidInput, \"invalid url for wasm\"))",
          "340:     }",
          "342:     #[cfg(not(target_family = \"wasm\"))]",
          "348:                 let pb = std::path::PathBuf::from(value);",
          "349:                 let url = url::Url::from_file_path(if pb.is_relative() {",
          "350:                     std::env::current_dir()?.join(pb)",
          "352:                     pb",
          "353:                 })",
          "354:                 .map_err(|_| {",
          "355:                     Error::new(ErrorKind::InvalidInput, \"failed to convert path to url\")",
          "356:                 })?;",
          "358:                 Ok(Self(url))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31203d25780935d2a49eae31ca70af444deb2e25",
      "candidate_info": {
        "commit_hash": "31203d25780935d2a49eae31ca70af444deb2e25",
        "repo": "amodm/webbrowser-rs",
        "commit_url": "https://github.com/amodm/webbrowser-rs/commit/31203d25780935d2a49eae31ca70af444deb2e25",
        "files": [
          "src/android.rs",
          "src/ios.rs",
          "src/lib.rs",
          "src/macos.rs",
          "src/unix.rs",
          "src/wasm.rs",
          "src/windows.rs",
          "tests/test-ios-app/testglue/src/lib.rs"
        ],
        "message": "change internal signature to better handle url and local paths separately",
        "before_after_code_files": [
          "src/android.rs||src/android.rs",
          "src/ios.rs||src/ios.rs",
          "src/lib.rs||src/lib.rs",
          "src/macos.rs||src/macos.rs",
          "src/unix.rs||src/unix.rs",
          "src/wasm.rs||src/wasm.rs",
          "src/windows.rs||src/windows.rs",
          "tests/test-ios-app/testglue/src/lib.rs||tests/test-ios-app/testglue/src/lib.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib.rs||src/lib.rs",
            "src/macos.rs||src/macos.rs",
            "src/unix.rs||src/unix.rs",
            "src/windows.rs||src/windows.rs"
          ],
          "candidate": [
            "src/lib.rs||src/lib.rs",
            "src/macos.rs||src/macos.rs",
            "src/unix.rs||src/unix.rs",
            "src/windows.rs||src/windows.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/android.rs||src/android.rs": [
          "File: src/android.rs -> src/android.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: use jni::objects::JValue;",
          "3: use std::process::{Command, Stdio};",
          "9:     match browser {",
          "10:         Browser::Default => open_browser_default(url, options),",
          "11:         _ => Err(Error::new(",
          "",
          "[Removed Lines]",
          "1: use crate::{Browser, BrowserOptions, Error, ErrorKind, Result};",
          "7: #[inline]",
          "8: pub fn open_browser_internal(browser: Browser, url: &str, options: &BrowserOptions) -> Result<()> {",
          "",
          "[Added Lines]",
          "1: use crate::{Browser, BrowserOptions, Error, ErrorKind, Result, TargetType};",
          "7: pub(super) fn open_browser_internal(",
          "8:     browser: Browser,",
          "9:     target: &TargetType,",
          "10:     options: &BrowserOptions,",
          "11: ) -> Result<()> {",
          "13:     let url = crate::get_http_url(target)?;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: }",
          "20: fn open_browser_default(url: &str, options: &BrowserOptions) -> Result<()> {",
          "22:     if options.dry_run {",
          "",
          "[Removed Lines]",
          "19: #[inline]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100: fn try_for_termux(url: &str, options: &BrowserOptions) -> Result<()> {",
          "101:     use std::env;",
          "102:     if env::var(\"TERMUX_VERSION\").is_ok() {",
          "",
          "[Removed Lines]",
          "99: #[inline]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/ios.rs||src/ios.rs": [
          "File: src/ios.rs -> src/ios.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: use objc::{class, msg_send, runtime::Object, sel, sel_impl};",
          "7:     _browser: Browser,",
          "10: ) -> Result<()> {",
          "13:         return Ok(());",
          "14:     }",
          "19:     unsafe {",
          "20:         let app: *mut Object = msg_send![class!(UIApplication), sharedApplication];",
          "21:         if app.is_null() {",
          "",
          "[Removed Lines]",
          "1: use crate::{Browser, BrowserOptions, Error, ErrorKind, Result};",
          "5: #[inline]",
          "6: pub fn open_browser_internal(",
          "8:     url: &str,",
          "9:     _options: &BrowserOptions,",
          "12:     if _options.dry_run {",
          "15:     let url_s: String = match url::Url::parse(url) {",
          "16:         Ok(u) => u.as_str().into(),",
          "17:         Err(_) => url.into(),",
          "18:     };",
          "",
          "[Added Lines]",
          "1: use crate::{Browser, BrowserOptions, Error, ErrorKind, Result, TargetType};",
          "5: pub(super) fn open_browser_internal(",
          "7:     target: &TargetType,",
          "8:     options: &BrowserOptions,",
          "11:     let url = crate::get_http_url(target)?;",
          "14:     if options.dry_run {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:                 \"UIApplication is null, can't open url\",",
          "25:             ));",
          "26:         }",
          "29:         let url_string: *mut Object = msg_send![class!(NSString), stringWithUTF8String: url_cstr];",
          "",
          "[Removed Lines]",
          "27:         let url_cstr = std::ffi::CString::new(url_s).unwrap();",
          "",
          "[Added Lines]",
          "26:         let url_cstr = std::ffi::CString::new(url).unwrap();",
          "",
          "---------------"
        ],
        "src/lib.rs||src/lib.rs": [
          "File: src/lib.rs -> src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "280:     url: &str,",
          "281:     options: &BrowserOptions,",
          "282: ) -> Result<()> {",
          "286:     };",
          "288: }",
          "290: #[test]",
          "",
          "[Removed Lines]",
          "283:     let url_s: String = match url::Url::parse(url) {",
          "284:         Ok(u) => u.as_str().into(),",
          "285:         Err(_) => url.into(),",
          "287:     os::open_browser_internal(browser, &url_s, options)",
          "",
          "[Added Lines]",
          "283:     let target = match url::Url::parse(url) {",
          "284:         Ok(u) => TargetType::Url(u),",
          "285:         Err(_) => TargetType::Path(url.into()),",
          "287:     os::open_browser_internal(browser, &target, options)",
          "288: }",
          "292: enum TargetType {",
          "293:     Url(url::Url),",
          "294:     Path(String),",
          "295: }",
          "299: #[cfg(any(target_os = \"android\", target_os = \"ios\", target_family = \"wasm\"))]",
          "300: #[inline]",
          "301: pub(crate) fn get_http_url(target: &TargetType) -> Result<&str> {",
          "302:     match target {",
          "303:         TargetType::Url(u) => match u.scheme() {",
          "304:             \"http\" | \"https\" => Ok(u.as_str()),",
          "305:             _ => Err(Error::new(ErrorKind::InvalidInput, \"not a valid url\")),",
          "306:         },",
          "307:         _ => Err(Error::new(ErrorKind::InvalidInput, \"not a valid url\")),",
          "308:     }",
          "",
          "---------------"
        ],
        "src/macos.rs||src/macos.rs": [
          "File: src/macos.rs -> src/macos.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: use std::process::{Command, Stdio};",
          "4: mod common;",
          "5: use common::from_status;",
          "10:     browser: Browser,",
          "12:     options: &BrowserOptions,",
          "13: ) -> Result<()> {",
          "17:     };",
          "19:     let mut cmd = Command::new(\"open\");",
          "20:     match browser {",
          "21:         Browser::Default => {",
          "",
          "[Removed Lines]",
          "1: use crate::{Browser, BrowserOptions, Error, ErrorKind, Result};",
          "8: #[inline]",
          "9: pub fn open_browser_internal(",
          "11:     url_raw: &str,",
          "14:     let url_s: String = match url::Url::parse(url_raw) {",
          "15:         Ok(u) => u.as_str().into(),",
          "16:         Err(_) => url_raw.into(),",
          "18:     let url = &url_s;",
          "",
          "[Added Lines]",
          "1: use crate::{Browser, BrowserOptions, Error, ErrorKind, Result, TargetType};",
          "8: pub(super) fn open_browser_internal(",
          "10:     target: &TargetType,",
          "13:     let url = match target {",
          "14:         TargetType::Url(u) => u.as_str(),",
          "15:         TargetType::Path(s) => s.as_str(),",
          "",
          "---------------"
        ],
        "src/unix.rs||src/unix.rs": [
          "File: src/unix.rs -> src/unix.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: use log::{debug, trace};",
          "3: use std::io::{BufRead, BufReader};",
          "4: use std::os::unix::fs::PermissionsExt;",
          "",
          "[Removed Lines]",
          "1: use crate::{Browser, BrowserOptions, Error, ErrorKind, Result};",
          "",
          "[Added Lines]",
          "1: use crate::{Browser, BrowserOptions, Error, ErrorKind, Result, TargetType};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:     match browser {",
          "29:         Browser::Default => open_browser_default(url, options),",
          "30:         _ => Err(Error::new(",
          "",
          "[Removed Lines]",
          "27: pub fn open_browser_internal(browser: Browser, url: &str, options: &BrowserOptions) -> Result<()> {",
          "",
          "[Added Lines]",
          "27: pub(super) fn open_browser_internal(",
          "28:     browser: Browser,",
          "29:     target: &TargetType,",
          "30:     options: &BrowserOptions,",
          "31: ) -> Result<()> {",
          "32:     let url = match target {",
          "33:         TargetType::Url(u) => u.as_str(),",
          "34:         TargetType::Path(s) => s.as_str(),",
          "35:     };",
          "",
          "---------------"
        ],
        "src/wasm.rs||src/wasm.rs": [
          "File: src/wasm.rs -> src/wasm.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:     if options.dry_run {",
          "9:         return Ok(());",
          "",
          "[Removed Lines]",
          "1: use crate::{Browser, BrowserOptions, Error, ErrorKind, Result};",
          "5: #[inline]",
          "6: pub fn open_browser_internal(_: Browser, url: &str, options: &BrowserOptions) -> Result<()> {",
          "",
          "[Added Lines]",
          "1: use crate::{Browser, BrowserOptions, Error, ErrorKind, Result, TargetType};",
          "5: pub(super) fn open_browser_internal(",
          "6:     _: Browser,",
          "7:     target: &TargetType,",
          "8:     options: &BrowserOptions,",
          "9: ) -> Result<()> {",
          "11:     let url = crate::get_http_url(target)?;",
          "",
          "---------------"
        ],
        "src/windows.rs||src/windows.rs": [
          "File: src/windows.rs -> src/windows.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: extern crate widestring;",
          "2: extern crate winapi;",
          "5: pub use std::os::windows::process::ExitStatusExt;",
          "6: use std::{mem, ptr};",
          "7: use widestring::U16CString;",
          "21:     };",
          "23:     match browser {",
          "24:         Browser::Default => {",
          "",
          "[Removed Lines]",
          "4: use crate::{Browser, BrowserOptions, Error, ErrorKind, Result};",
          "14: #[inline]",
          "15: pub fn open_browser_internal(browser: Browser, url: &str, options: &BrowserOptions) -> Result<()> {",
          "16:     use winapi::shared::winerror::SUCCEEDED;",
          "17:     use winapi::um::combaseapi::{CoInitializeEx, CoUninitialize};",
          "18:     use winapi::um::objbase::{COINIT_APARTMENTTHREADED, COINIT_DISABLE_OLE1DDE};",
          "19:     use winapi::um::shellapi::{",
          "20:         ShellExecuteExW, SEE_MASK_CLASSNAME, SEE_MASK_NOCLOSEPROCESS, SHELLEXECUTEINFOW,",
          "22:     use winapi::um::winuser::SW_SHOWNORMAL;",
          "",
          "[Added Lines]",
          "4: use crate::{Browser, BrowserOptions, Error, ErrorKind, Result, TargetType};",
          "8: use winapi::shared::winerror::SUCCEEDED;",
          "9: use winapi::um::combaseapi::{CoInitializeEx, CoUninitialize};",
          "10: use winapi::um::objbase::{COINIT_APARTMENTTHREADED, COINIT_DISABLE_OLE1DDE};",
          "11: use winapi::um::shellapi::{",
          "12:     ShellExecuteExW, SEE_MASK_CLASSNAME, SEE_MASK_NOCLOSEPROCESS, SHELLEXECUTEINFOW,",
          "13: };",
          "14: use winapi::um::winuser::SW_SHOWNORMAL;",
          "21: pub(super) fn open_browser_internal(",
          "22:     browser: Browser,",
          "23:     target: &TargetType,",
          "24:     options: &BrowserOptions,",
          "25: ) -> Result<()> {",
          "26:     let url = match target {",
          "27:         TargetType::Url(u) => u.as_str(),",
          "28:         TargetType::Path(s) => s.as_str(),",
          "",
          "---------------"
        ],
        "tests/test-ios-app/testglue/src/lib.rs||tests/test-ios-app/testglue/src/lib.rs": [
          "File: tests/test-ios-app/testglue/src/lib.rs -> tests/test-ios-app/testglue/src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: use std::ffi::CStr;",
          "5: #[no_mangle]",
          "6: pub extern fn test_open_webbrowser(url_c_chars: *const c_char) {",
          "",
          "[Removed Lines]",
          "1: use std::os::raw::{c_char};",
          "3: use webbrowser;",
          "",
          "[Added Lines]",
          "2: use std::os::raw::c_char;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a3afcbbac1eaa86dd2976853444ec5ad44b04cb8",
      "candidate_info": {
        "commit_hash": "a3afcbbac1eaa86dd2976853444ec5ad44b04cb8",
        "repo": "amodm/webbrowser-rs",
        "commit_url": "https://github.com/amodm/webbrowser-rs/commit/a3afcbbac1eaa86dd2976853444ec5ad44b04cb8",
        "files": [
          "Cargo.toml",
          "src/unix.rs",
          "tests/common.rs",
          "tests/test_macos.rs",
          "tests/test_unix.rs",
          "tests/test_windows.rs"
        ],
        "message": "tests for local html file opening in browser",
        "before_after_code_files": [
          "src/unix.rs||src/unix.rs",
          "tests/common.rs||tests/common.rs",
          "tests/test_macos.rs||tests/test_macos.rs",
          "tests/test_unix.rs||tests/test_unix.rs",
          "tests/test_windows.rs||tests/test_windows.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.rs||src/unix.rs"
          ],
          "candidate": [
            "src/unix.rs||src/unix.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/unix.rs||src/unix.rs": [
          "File: src/unix.rs -> src/unix.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     options: &BrowserOptions,",
          "31: ) -> Result<()> {",
          "32:     match browser {",
          "34:         _ => Err(Error::new(",
          "35:             ErrorKind::NotFound,",
          "36:             \"only default browser supported\",",
          "",
          "[Removed Lines]",
          "33:         Browser::Default => open_browser_default(&target, options),",
          "",
          "[Added Lines]",
          "33:         Browser::Default => open_browser_default(target, options),",
          "",
          "---------------"
        ],
        "tests/common.rs||tests/common.rs": [
          "File: tests/common.rs -> tests/common.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: use actix_files as fs;",
          "2: use actix_web::{web, App, HttpRequest, HttpResponse, HttpServer, Responder};",
          "3: use crossbeam_channel as cbc;",
          "5: use urlencoding::decode;",
          "6: use webbrowser::{open_browser, Browser};",
          "",
          "[Removed Lines]",
          "4: use std::sync::Arc;",
          "",
          "[Added Lines]",
          "4: use rand::RngCore;",
          "5: use std::{io::Write, path::PathBuf, sync::Arc};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:     if data.tx.send(req.uri().to_string()).is_err() {",
          "15:         panic!(\"channel send failed\");",
          "16:     }",
          "20: }",
          "22: pub async fn check_request_received_using<F>(uri: String, host: &str, op: F)",
          "",
          "[Removed Lines]",
          "17:     HttpResponse::Ok()",
          "18:         .content_type(\"text/html; charset=utf-8\")",
          "19:         .body(format!(\"<html><body><p>URI: {}</p><script type=\\\"text/javascript>window.close();</script></body></html>\", req.uri()))",
          "",
          "[Added Lines]",
          "18:     let uri = req.uri();",
          "19:     if uri.path() == URI_PNG_1PX {",
          "20:         HttpResponse::Ok()",
          "21:             .content_type(\"image/png\")",
          "22:             .body(PNG_1PX.to_vec())",
          "23:     } else {",
          "24:         HttpResponse::Ok()",
          "25:             .content_type(\"text/html; charset=utf-8\")",
          "26:             .body(format!(\"<html><body><p>URI: {}</p><script type=\\\"text/javascript>window.close();</script></body></html>\", req.uri()))",
          "27:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:     .await;",
          "79: }",
          "81: #[allow(dead_code)]",
          "82: pub async fn check_browser(browser: Browser, platform: &str) {",
          "83:     check_request_received(browser, format!(\"/{}\", platform)).await;",
          "84:     check_request_received(browser, format!(\"/{}/\ud83d\ude00\ud83d\ude00\ud83d\ude00\", platform)).await;",
          "85: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: #[allow(dead_code)]",
          "90: pub async fn check_local_file<F>(browser: Browser, html_dir: Option<PathBuf>, url_op: F)",
          "91: where",
          "92:     F: FnOnce(&PathBuf) -> String,",
          "93: {",
          "94:     let cwd = std::env::current_dir().expect(\"unable to determine current dir\");",
          "95:     let tmpdir = cwd.join(\"target\").join(\"tmp\");",
          "96:     let html_dir = html_dir.unwrap_or(tmpdir);",
          "97:     let id = rand::thread_rng().next_u32();",
          "98:     let pb = html_dir.join(format!(\"test.{}.html\", id));",
          "99:     let img_uri = format!(\"{}?r={}\", URI_PNG_1PX, id);",
          "100:     check_request_received_using(img_uri, \"127.0.0.1\", |uri| {",
          "101:         let url = url_op(&pb);",
          "102:         let mut html_file = std::fs::File::create(&pb).expect(\"failed to create html file\");",
          "103:         html_file",
          "104:             .write_fmt(format_args!(",
          "105:                 \"<p>html file: {}</p><p>url: {}</p>img: <img src=\\\"{}\\\"/>\",",
          "106:                 &pb.as_os_str().to_string_lossy(),",
          "107:                 url,",
          "108:                 uri",
          "109:             ))",
          "110:             .expect(\"failed to write html file\");",
          "111:         drop(html_file);",
          "112:         open_browser(browser, &url).expect(\"failed to open browser\");",
          "113:     })",
          "114:     .await;",
          "115:     let _ = std::fs::remove_file(&pb);",
          "116: }",
          "124: const URI_PNG_1PX: &str = \"/img/1px.png\";",
          "127: const PNG_1PX: [u8; 82] = [",
          "128:     137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 1, 0, 0, 0, 1, 8, 2, 0,",
          "129:     0, 0, 144, 119, 83, 222, 0, 0, 0, 1, 115, 82, 71, 66, 0, 174, 206, 28, 233, 0, 0, 0, 12, 73,",
          "130:     68, 65, 84, 24, 87, 99, 248, 239, 154, 12, 0, 3, 238, 1, 168, 16, 134, 253, 64, 0, 0, 0, 0, 73,",
          "131:     69, 78, 68, 174, 66, 96, 130,",
          "132: ];",
          "",
          "---------------"
        ],
        "tests/test_macos.rs||tests/test_macos.rs": [
          "File: tests/test_macos.rs -> tests/test_macos.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: mod tests {",
          "6:     const TEST_PLATFORM: &str = \"macos\";",
          "9:     use webbrowser::Browser;",
          "11:     #[tokio::test(flavor = \"multi_thread\", worker_threads = 2)]",
          "",
          "[Removed Lines]",
          "8:     use super::common::check_browser;",
          "",
          "[Added Lines]",
          "8:     use super::common::{check_browser, check_local_file};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:             \"should not have found WebPositive\",",
          "48:         );",
          "49:     }",
          "50: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:     #[tokio::test(flavor = \"multi_thread\", worker_threads = 2)]",
          "52:     async fn test_local_file_abs_path() {",
          "53:         check_local_file(Browser::Default, None, |pb| {",
          "54:             pb.as_os_str().to_string_lossy().into()",
          "55:         })",
          "56:         .await;",
          "57:     }",
          "59:     #[tokio::test(flavor = \"multi_thread\", worker_threads = 2)]",
          "60:     async fn test_local_file_rel_path() {",
          "61:         let cwd = std::env::current_dir().expect(\"unable to get current dir\");",
          "62:         check_local_file(Browser::Default, None, |pb| {",
          "63:             pb.strip_prefix(cwd)",
          "64:                 .expect(\"strip prefix failed\")",
          "65:                 .as_os_str()",
          "66:                 .to_string_lossy()",
          "67:                 .into()",
          "68:         })",
          "69:         .await;",
          "70:     }",
          "72:     #[tokio::test(flavor = \"multi_thread\", worker_threads = 2)]",
          "73:     async fn test_local_file_uri() {",
          "74:         check_local_file(Browser::Default, None, |pb| {",
          "75:             url::Url::from_file_path(pb)",
          "76:                 .expect(\"failed to convert path to url\")",
          "77:                 .to_string()",
          "78:         })",
          "79:         .await;",
          "80:     }",
          "",
          "---------------"
        ],
        "tests/test_unix.rs||tests/test_unix.rs": [
          "File: tests/test_unix.rs -> tests/test_unix.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: mod tests {",
          "6:     const TEST_PLATFORM: &str = \"unix\";",
          "9:     use webbrowser::Browser;",
          "11:     #[tokio::test(flavor = \"multi_thread\", worker_threads = 2)]",
          "",
          "[Removed Lines]",
          "8:     use super::common::check_browser;",
          "",
          "[Added Lines]",
          "8:     use super::common::{check_browser, check_local_file};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     fn test_non_existence_safari() {",
          "23:         assert!(!Browser::Safari.exists(), \"should not have found Safari\");",
          "24:     }",
          "25: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:     #[tokio::test(flavor = \"multi_thread\", worker_threads = 2)]",
          "27:     async fn test_local_file_abs_path() {",
          "28:         check_local_file(Browser::Default, None, |pb| {",
          "29:             pb.as_os_str().to_string_lossy().into()",
          "30:         })",
          "31:         .await;",
          "32:     }",
          "34:     #[tokio::test(flavor = \"multi_thread\", worker_threads = 2)]",
          "35:     async fn test_local_file_rel_path() {",
          "36:         let cwd = std::env::current_dir().expect(\"unable to get current dir\");",
          "37:         check_local_file(Browser::Default, None, |pb| {",
          "38:             pb.strip_prefix(cwd)",
          "39:                 .expect(\"strip prefix failed\")",
          "40:                 .as_os_str()",
          "41:                 .to_string_lossy()",
          "42:                 .into()",
          "43:         })",
          "44:         .await;",
          "45:     }",
          "47:     #[tokio::test(flavor = \"multi_thread\", worker_threads = 2)]",
          "48:     async fn test_local_file_uri() {",
          "49:         check_local_file(Browser::Default, None, |pb| {",
          "50:             url::Url::from_file_path(pb)",
          "51:                 .expect(\"failed to convert path to url\")",
          "52:                 .to_string()",
          "53:         })",
          "54:         .await;",
          "55:     }",
          "",
          "---------------"
        ],
        "tests/test_windows.rs||tests/test_windows.rs": [
          "File: tests/test_windows.rs -> tests/test_windows.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: mod tests {",
          "6:     const TEST_PLATFORM: &str = \"windows\";",
          "9:     use webbrowser::Browser;",
          "11:     #[tokio::test(flavor = \"multi_thread\", worker_threads = 2)]",
          "",
          "[Removed Lines]",
          "8:     use super::common::check_browser;",
          "",
          "[Added Lines]",
          "8:     use super::common::{check_browser, check_local_file};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:     fn test_non_existence_safari() {",
          "29:         assert!(!Browser::Safari.exists(), \"should not have found Safari\");",
          "30:     }",
          "31: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     #[tokio::test(flavor = \"multi_thread\", worker_threads = 2)]",
          "33:     async fn test_local_file_abs_path() {",
          "34:         check_local_file(Browser::Default, None, |pb| {",
          "35:             pb.as_os_str().to_string_lossy().into()",
          "36:         })",
          "37:         .await;",
          "38:     }",
          "40:     #[tokio::test(flavor = \"multi_thread\", worker_threads = 2)]",
          "41:     async fn test_local_file_rel_path() {",
          "42:         let cwd = std::env::current_dir().expect(\"unable to get current dir\");",
          "43:         check_local_file(Browser::Default, None, |pb| {",
          "44:             pb.strip_prefix(cwd)",
          "45:                 .expect(\"strip prefix failed\")",
          "46:                 .as_os_str()",
          "47:                 .to_string_lossy()",
          "48:                 .into()",
          "49:         })",
          "50:         .await;",
          "51:     }",
          "53:     #[tokio::test(flavor = \"multi_thread\", worker_threads = 2)]",
          "54:     async fn test_local_file_uri() {",
          "55:         check_local_file(Browser::Default, None, |pb| {",
          "56:             url::Url::from_file_path(pb)",
          "57:                 .expect(\"failed to convert path to url\")",
          "58:                 .to_string()",
          "59:         })",
          "60:         .await;",
          "61:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a487a1c448f347afd3df3eea7d3e560334928315",
      "candidate_info": {
        "commit_hash": "a487a1c448f347afd3df3eea7d3e560334928315",
        "repo": "amodm/webbrowser-rs",
        "commit_url": "https://github.com/amodm/webbrowser-rs/commit/a487a1c448f347afd3df3eea7d3e560334928315",
        "files": [
          "src/android.rs",
          "src/lib.rs",
          "src/macos.rs",
          "src/unix.rs",
          "src/wasm.rs",
          "src/windows.rs",
          "tests/test_android.rs",
          "tests/test_macos.rs",
          "tests/test_unix.rs",
          "tests/test_wasm.rs",
          "tests/test_windows.rs"
        ],
        "message": "Introduce BrowserOptions::is_available() to fix #46",
        "before_after_code_files": [
          "src/android.rs||src/android.rs",
          "src/lib.rs||src/lib.rs",
          "src/macos.rs||src/macos.rs",
          "src/unix.rs||src/unix.rs",
          "src/wasm.rs||src/wasm.rs",
          "src/windows.rs||src/windows.rs",
          "tests/test_android.rs||tests/test_android.rs",
          "tests/test_macos.rs||tests/test_macos.rs",
          "tests/test_unix.rs||tests/test_unix.rs",
          "tests/test_wasm.rs||tests/test_wasm.rs",
          "tests/test_windows.rs||tests/test_windows.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib.rs||src/lib.rs",
            "src/macos.rs||src/macos.rs",
            "src/unix.rs||src/unix.rs",
            "src/windows.rs||src/windows.rs"
          ],
          "candidate": [
            "src/lib.rs||src/lib.rs",
            "src/macos.rs||src/macos.rs",
            "src/unix.rs||src/unix.rs",
            "src/windows.rs||src/windows.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/android.rs||src/android.rs": [
          "File: src/android.rs -> src/android.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: pub use std::os::unix::process::ExitStatusExt;",
          "4: use std::process::ExitStatus;",
          "7: #[inline]",
          "10:     let native_activity = ndk_glue::native_activity();",
          "11:     let vm_ptr = native_activity.vm();",
          "",
          "[Removed Lines]",
          "8: pub fn open_browser_internal(_: Browser, url: &str, _: &BrowserOptions) -> Result<()> {",
          "",
          "[Added Lines]",
          "9: pub fn open_browser_internal(browser: Browser, url: &str, options: &BrowserOptions) -> Result<()> {",
          "10:     match browser {",
          "11:         Browser::Default => open_browser_default(url, options),",
          "12:         _ => Err(Error::new(",
          "13:             ErrorKind::NotFound,",
          "14:             \"only default browser supported\",",
          "15:         )),",
          "16:     }",
          "17: }",
          "20: #[inline]",
          "21: pub fn open_browser_default(url: &str, options: &BrowserOptions) -> Result<()> {",
          "23:     if options.dry_run {",
          "24:         return Ok(());",
          "25:     }",
          "",
          "---------------"
        ],
        "src/lib.rs||src/lib.rs": [
          "File: src/lib.rs -> src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     WebPositive,",
          "89: }",
          "92: #[derive(Debug, Eq, PartialEq, Copy, Clone, Hash)]",
          "93: pub struct ParseBrowserError;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91: impl Browser {",
          "93:     pub fn is_available() -> bool {",
          "94:         Browser::Default.exists()",
          "95:     }",
          "98:     pub fn exists(&self) -> bool {",
          "99:         open_browser_with_options(",
          "101:             \"https://rootnet.in\",",
          "102:             BrowserOptions::new().with_dry_run(true),",
          "103:         )",
          "104:         .is_ok()",
          "105:     }",
          "106: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149: pub struct BrowserOptions {",
          "158: }",
          "160: impl fmt::Display for BrowserOptions {",
          "161:     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "162:         f.write_fmt(format_args!(",
          "165:         ))",
          "166:     }",
          "167: }",
          "",
          "[Removed Lines]",
          "152:     pub suppress_output: bool,",
          "157:     pub target_hint: String,",
          "163:             \"BrowserOptions(supress_output={}, target_hint={})\",",
          "164:             self.suppress_output, self.target_hint,",
          "",
          "[Added Lines]",
          "167:     suppress_output: bool,",
          "168:     target_hint: String,",
          "169:     dry_run: bool,",
          "175:             \"BrowserOptions(supress_output={}, target_hint={}, dry_run={})\",",
          "176:             self.suppress_output, self.target_hint, self.dry_run",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:         BrowserOptions {",
          "173:             suppress_output: true,",
          "174:             target_hint,",
          "175:         }",
          "176:     }",
          "177: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:             dry_run: false,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "181:         Self::default()",
          "182:     }",
          "184:     pub fn with_suppress_output(&mut self, suppress_output: bool) -> &mut Self {",
          "185:         self.suppress_output = suppress_output;",
          "186:         self",
          "187:     }",
          "189:     pub fn with_target_hint(&mut self, target_hint: &str) -> &mut Self {",
          "190:         self.target_hint = target_hint.to_owned();",
          "191:         self",
          "192:     }",
          "193: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:     pub fn with_dry_run(&mut self, dry_run: bool) -> &mut Self {",
          "215:         self.dry_run = dry_run;",
          "216:         self",
          "217:     }",
          "",
          "---------------"
        ],
        "src/macos.rs||src/macos.rs": [
          "File: src/macos.rs -> src/macos.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:     let url = &url_s;",
          "19:     let mut cmd = Command::new(\"open\");",
          "20:     match browser {",
          "22:         _ => {",
          "23:             let app: Option<&str> = match browser {",
          "24:                 Browser::Firefox => Some(\"Firefox\"),",
          "",
          "[Removed Lines]",
          "21:         Browser::Default => run_command(cmd.arg(url), options),",
          "",
          "[Added Lines]",
          "21:         Browser::Default => {",
          "23:             if options.dry_run {",
          "24:                 return Ok(());",
          "25:             }",
          "27:             run_command(cmd.arg(url), options)",
          "28:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:                 _ => None,",
          "30:             };",
          "31:             match app {",
          "33:                 None => Err(Error::new(",
          "34:                     ErrorKind::NotFound,",
          "35:                     format!(\"Unsupported browser {:?}\", browser),",
          "",
          "[Removed Lines]",
          "32:                 Some(name) => run_command(cmd.arg(\"-a\").arg(name).arg(url), options),",
          "",
          "[Added Lines]",
          "39:                 Some(name) => {",
          "40:                     if options.dry_run {",
          "42:                         let md = std::fs::metadata(format!(\"/Applications/{}.app\", name));",
          "43:                         if md.map(|x| x.is_dir()).unwrap_or(false) {",
          "44:                             Ok(())",
          "45:                         } else {",
          "46:                             Err(Error::new(",
          "47:                                 ErrorKind::NotFound,",
          "48:                                 format!(\"Browser {} not available\", name),",
          "49:                             ))",
          "50:                         }",
          "51:                     } else {",
          "53:                         run_command(cmd.arg(\"-a\").arg(name).arg(url), options)",
          "54:                     }",
          "55:                 }",
          "",
          "---------------"
        ],
        "src/unix.rs||src/unix.rs": [
          "File: src/unix.rs -> src/unix.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #[inline]",
          "28:     try_with_browser_env(url, options)",
          "",
          "[Removed Lines]",
          "26: pub fn open_browser_internal(_: Browser, url: &str, options: &BrowserOptions) -> Result<()> {",
          "",
          "[Added Lines]",
          "26: pub fn open_browser_internal(browser: Browser, url: &str, options: &BrowserOptions) -> Result<()> {",
          "27:     match browser {",
          "28:         Browser::Default => open_browser_default(url, options),",
          "29:         _ => Err(Error::new(",
          "30:             ErrorKind::NotFound,",
          "31:             \"only default browser supported\",",
          "32:         )),",
          "33:     }",
          "34: }",
          "40: #[inline]",
          "41: fn open_browser_default(url: &str, options: &BrowserOptions) -> Result<()> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195: #[inline]",
          "196: fn run_command(cmd: &mut Command, background: bool, options: &BrowserOptions) -> Result<()> {",
          "197:     if background {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:     if options.dry_run {",
          "215:         return Ok(());",
          "216:     }",
          "",
          "---------------"
        ],
        "src/wasm.rs||src/wasm.rs": [
          "File: src/wasm.rs -> src/wasm.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #[inline]",
          "6: pub fn open_browser_internal(_: Browser, url: &str, options: &BrowserOptions) -> Result<()> {",
          "7:     let window = web_sys::window();",
          "8:     match window {",
          "9:         Some(w) => match w.open_with_url_and_target(url, &options.target_hint) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:     if options.dry_run {",
          "9:         return Ok(());",
          "10:     }",
          "",
          "---------------"
        ],
        "src/windows.rs||src/windows.rs": [
          "File: src/windows.rs -> src/windows.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #[inline]",
          "16:     use winapi::shared::winerror::SUCCEEDED;",
          "17:     use winapi::um::combaseapi::{CoInitializeEx, CoUninitialize};",
          "18:     use winapi::um::objbase::{COINIT_APARTMENTTHREADED, COINIT_DISABLE_OLE1DDE};",
          "",
          "[Removed Lines]",
          "15: pub fn open_browser_internal(browser: Browser, url: &str, _: &BrowserOptions) -> Result<()> {",
          "",
          "[Added Lines]",
          "15: pub fn open_browser_internal(browser: Browser, url: &str, options: &BrowserOptions) -> Result<()> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:     use winapi::um::winuser::SW_SHOWNORMAL;",
          "21:     match browser {",
          "22:         Browser::Default => {",
          "23:             static OPEN: &[u16] = &['o' as u16, 'p' as u16, 'e' as u16, 'n' as u16, 0x0000];",
          "24:             let url =",
          "25:                 U16CString::from_str(url).map_err(|e| Error::new(ErrorKind::InvalidInput, e))?;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:             if options.dry_run {",
          "25:                 return Ok(());",
          "26:             }",
          "",
          "---------------"
        ],
        "tests/test_android.rs||tests/test_android.rs": [
          "File: tests/test_android.rs -> tests/test_android.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:     use std::fs;",
          "10:     use std::path::PathBuf;",
          "11:     use std::process::Command;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:     use webbrowser::Browser;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:             .expect(\"no ip address found\")",
          "75:             .into()",
          "76:     }",
          "77: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:     #[test]",
          "80:     fn test_existence_default() {",
          "81:         assert!(Browser::is_available(), \"should have found a browser\");",
          "82:     }",
          "84:     #[test]",
          "85:     fn test_non_existence_safari() {",
          "86:         assert!(!Browser::Safari.exists(), \"should not have found Safari\");",
          "87:     }",
          "",
          "---------------"
        ],
        "tests/test_macos.rs||tests/test_macos.rs": [
          "File: tests/test_macos.rs -> tests/test_macos.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     async fn test_open_chrome() {",
          "30:         check_browser(Browser::Chrome, TEST_PLATFORM).await;",
          "31:     }",
          "32: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:     #[test]",
          "34:     fn test_existence_default() {",
          "35:         assert!(Browser::is_available(), \"should have found a browser\");",
          "36:     }",
          "38:     #[test]",
          "39:     fn test_existence_safari() {",
          "40:         assert!(Browser::Safari.exists(), \"should have found Safari\");",
          "41:     }",
          "43:     #[test]",
          "44:     fn test_non_existence_webpositive() {",
          "45:         assert!(",
          "46:             !Browser::WebPositive.exists(),",
          "47:             \"should not have found WebPositive\",",
          "48:         );",
          "49:     }",
          "",
          "---------------"
        ],
        "tests/test_unix.rs||tests/test_unix.rs": [
          "File: tests/test_unix.rs -> tests/test_unix.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     async fn test_open_default() {",
          "13:         check_browser(Browser::Default, TEST_PLATFORM).await;",
          "14:     }",
          "15: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:     #[test]",
          "17:     fn test_existence_default() {",
          "18:         assert!(Browser::is_available(), \"should have found a browser\");",
          "19:     }",
          "21:     #[test]",
          "22:     fn test_non_existence_safari() {",
          "23:         assert!(!Browser::Safari.exists(), \"should not have found Safari\");",
          "24:     }",
          "",
          "---------------"
        ],
        "tests/test_wasm.rs||tests/test_wasm.rs": [
          "File: tests/test_wasm.rs -> tests/test_wasm.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:     use super::common::check_request_received_using;",
          "9:     use std::fs;",
          "10:     use std::path::PathBuf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:     use webbrowser::Browser;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:         })",
          "45:         .await;",
          "46:     }",
          "47: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     #[test]",
          "50:     fn test_existence_default() {",
          "51:         assert!(Browser::is_available(), \"should've found a browser\");",
          "52:     }",
          "54:     #[test]",
          "55:     fn test_non_existence_safari() {",
          "56:         assert!(!Browser::Safari.exists(), \"should've not found Safari\");",
          "57:     }",
          "",
          "---------------"
        ],
        "tests/test_windows.rs||tests/test_windows.rs": [
          "File: tests/test_windows.rs -> tests/test_windows.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:     async fn test_open_internet_explorer() {",
          "19:         check_browser(Browser::InternetExplorer, TEST_PLATFORM).await;",
          "20:     }",
          "21: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:     #[test]",
          "23:     fn test_existence_default() {",
          "24:         assert!(Browser::is_available(), \"should have found a browser\");",
          "25:     }",
          "27:     #[test]",
          "28:     fn test_non_existence_safari() {",
          "29:         assert!(!Browser::Safari.exists(), \"should not have found Safari\");",
          "30:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}