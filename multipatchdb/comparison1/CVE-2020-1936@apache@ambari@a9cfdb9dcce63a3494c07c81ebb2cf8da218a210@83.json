{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ea448a3685bdbe13f99378732ab49339aa2a6eff",
      "candidate_info": {
        "commit_hash": "ea448a3685bdbe13f99378732ab49339aa2a6eff",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/ea448a3685bdbe13f99378732ab49339aa2a6eff",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/YarnNodeManagerCapacityCalculation.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/YarnNodeManagerCapacityCalculationTest.java"
        ],
        "message": "[AMBARI-24483] - Timeline v2 HBase Does Start After Upgrade Due to Missing System Queue (#2079)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/YarnNodeManagerCapacityCalculation.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/YarnNodeManagerCapacityCalculation.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/YarnNodeManagerCapacityCalculationTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/YarnNodeManagerCapacityCalculationTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/YarnNodeManagerCapacityCalculation.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/YarnNodeManagerCapacityCalculation.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/YarnNodeManagerCapacityCalculation.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/YarnNodeManagerCapacityCalculation.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.server.serveraction.upgrades;",
          "21: import java.util.Map;",
          "22: import java.util.Set;",
          "23: import java.util.concurrent.ConcurrentMap;",
          "24: import java.util.stream.Collectors;",
          "26: import org.apache.ambari.server.AmbariException;",
          "27: import org.apache.ambari.server.actionmanager.HostRoleStatus;",
          "28: import org.apache.ambari.server.agent.CommandReport;",
          "29: import org.apache.ambari.server.state.Cluster;",
          "30: import org.apache.ambari.server.state.Config;",
          "31: import org.apache.ambari.server.state.Host;",
          "33: import com.google.common.collect.Sets;",
          "40: public class YarnNodeManagerCapacityCalculation extends AbstractUpgradeServerAction {",
          "41:   private static final String YARN_SITE_CONFIG_TYPE = \"yarn-site\";",
          "43:   private static final String YARN_ENV_CONFIG_TYPE = \"yarn-env\";",
          "44:   private static final String YARN_HBASE_ENV_CONFIG_TYPE = \"yarn-hbase-env\";",
          "45:   private static final String CAPACITY_SCHEDULER_CONFIG_TYPE = \"capacity-scheduler\";",
          "47:   private static final String YARN_SYSTEM_SERVICE_USER_NAME = \"yarn_ats_user\";",
          "48:   private static final String YARN_SYSTEM_SERVICE_QUEUE_NAME = \"yarn-system\";",
          "49:   private static final String CAPACITY_SCHEDULER_ROOT_QUEUES = \"yarn.scheduler.capacity.root.queues\";",
          "50:   private static final String YARN_SYSTEM_SERVICE_QUEUE_PREFIX = \"yarn.scheduler.capacity.root.\" + YARN_SYSTEM_SERVICE_QUEUE_NAME;",
          "53:   private static final float CLUSTER_CAPACITY_LIMIT_FOR_HBASE_SYSTEM_SERVICE = 51200;",
          "54:   private static final float NODE_CAPACITY_LIMIT_FOR_HBASE_SYSTEM_SERVICE = 10240;",
          "55:   private static final String YARN_NM_PMEM_MB_PROPERTY_NAME = \"yarn.nodemanager.resource.memory-mb\";",
          "56:   private static final String YARN_HBASE_SYSTEM_SERVICE_QUEUE_PROPERTY_NAME = \"yarn_hbase_system_service_queue_name\";",
          "58:   @Override",
          "59:   public CommandReport execute(ConcurrentMap<String, Object> requestSharedDataContext)",
          "60:       throws AmbariException, InterruptedException {",
          "62:     String clusterName = getExecutionCommand().getClusterName();",
          "63:     Cluster cluster = getClusters().getCluster(clusterName);",
          "65:     Config yarnSiteConfig = cluster.getDesiredConfigByType(YARN_SITE_CONFIG_TYPE);",
          "67:     if (yarnSiteConfig == null) {",
          "68:       return  createCommandReport(0, HostRoleStatus.FAILED,\"{}\",",
          "69:           String.format(\"Source type %s not found\", YARN_SITE_CONFIG_TYPE), \"\");",
          "70:     }",
          "72:     int noOfNMHosts = cluster.getService(\"YARN\").getServiceComponent(\"NODEMANAGER\").getServiceComponentsHosts().size();",
          "73:     String nmMemoryInString = yarnSiteConfig.getProperties().get(YARN_NM_PMEM_MB_PROPERTY_NAME);",
          "74:     int nmMemory = Integer.parseInt(nmMemoryInString);",
          "75:     int clusterCapacity = noOfNMHosts * nmMemory;",
          "77:     String message = \"\";",
          "81:     if (nmMemory > NODE_CAPACITY_LIMIT_FOR_HBASE_SYSTEM_SERVICE",
          "82:         && clusterCapacity > CLUSTER_CAPACITY_LIMIT_FOR_HBASE_SYSTEM_SERVICE) {",
          "84:       Config yarnEnvConfig = cluster.getDesiredConfigByType(YARN_ENV_CONFIG_TYPE);",
          "85:       if (yarnEnvConfig == null) {",
          "86:         return createCommandReport(0, HostRoleStatus.FAILED, \"{}\",",
          "87:             String.format(\"Source type %s not found\", YARN_ENV_CONFIG_TYPE), \"\");",
          "88:       }",
          "90:       String yarnAtsUser = yarnEnvConfig.getProperties().get(YARN_SYSTEM_SERVICE_USER_NAME);",
          "92:       Config hbaseEnvConfig = cluster.getDesiredConfigByType(YARN_HBASE_ENV_CONFIG_TYPE);",
          "93:       if (hbaseEnvConfig == null) {",
          "94:         return createCommandReport(0, HostRoleStatus.FAILED, \"{}\",",
          "95:             String.format(\"Source type %s not found\", YARN_HBASE_ENV_CONFIG_TYPE), \"\");",
          "96:       }",
          "98:       Map<String, String> hbaseEnvConfigProperties = hbaseEnvConfig.getProperties();",
          "99:       String oldSystemServiceQueue = hbaseEnvConfigProperties.get(",
          "100:           YARN_HBASE_SYSTEM_SERVICE_QUEUE_PROPERTY_NAME);",
          "102:       Config csConfig = cluster.getDesiredConfigByType(CAPACITY_SCHEDULER_CONFIG_TYPE);",
          "103:       if (csConfig == null) {",
          "104:         return createCommandReport(0, HostRoleStatus.FAILED, \"{}\",",
          "105:             String.format(\"Source type %s not found\", CAPACITY_SCHEDULER_CONFIG_TYPE), \"\");",
          "106:       }",
          "108:       Map<String, String> csProperties = csConfig.getProperties();",
          "109:       String old_root_queues = csProperties.get(CAPACITY_SCHEDULER_ROOT_QUEUES);",
          "110:       Set<String> queues = Sets.newHashSet(old_root_queues.split(\",\"));",
          "111:       boolean isYarnSystemQueueExist = false;",
          "113:       isYarnSystemQueueExist = queues.stream()",
          "114:           .map(queue -> queue.trim())",
          "115:           .filter(queueName -> YARN_SYSTEM_SERVICE_QUEUE_NAME.equals(queueName))",
          "116:           .findFirst()",
          "117:           .isPresent();",
          "119:       String new_root_queues = old_root_queues + \",\" + YARN_SYSTEM_SERVICE_QUEUE_NAME;",
          "121:       if (!isYarnSystemQueueExist) {",
          "122:         csProperties.put(CAPACITY_SCHEDULER_ROOT_QUEUES, new_root_queues);",
          "123:         csProperties.put(YARN_SYSTEM_SERVICE_QUEUE_PREFIX + \".capacity\", \"0\");",
          "124:         csProperties.put(YARN_SYSTEM_SERVICE_QUEUE_PREFIX + \".maximum-capacity\", \"100\");",
          "125:         csProperties.put(YARN_SYSTEM_SERVICE_QUEUE_PREFIX + \".user-limit-factor\", \"1\");",
          "126:         csProperties.put(YARN_SYSTEM_SERVICE_QUEUE_PREFIX + \".minimum-user-limit-percent\", \"100\");",
          "127:         csProperties.put(YARN_SYSTEM_SERVICE_QUEUE_PREFIX + \".state\", \"RUNNING\");",
          "128:         csProperties.put(YARN_SYSTEM_SERVICE_QUEUE_PREFIX + \".ordering-policy\", \"fifo\");",
          "129:         csProperties.put(YARN_SYSTEM_SERVICE_QUEUE_PREFIX + \".acl_submit_applications\",yarnAtsUser);",
          "130:         csProperties.put(YARN_SYSTEM_SERVICE_QUEUE_PREFIX + \".acl_administer_queue\", yarnAtsUser);",
          "131:         csProperties.put(YARN_SYSTEM_SERVICE_QUEUE_PREFIX + \".maximum-am-resource-percent\", \"0.5\");",
          "132:         csProperties.put(YARN_SYSTEM_SERVICE_QUEUE_PREFIX + \".disable_preemption\", \"true\");",
          "133:         csProperties.put(YARN_SYSTEM_SERVICE_QUEUE_PREFIX + \".intra-queue-preemption.disable_preemption\",\"true\");",
          "134:         csProperties.put(YARN_SYSTEM_SERVICE_QUEUE_PREFIX + \".priority\", \"32768\");",
          "135:         csProperties.put(YARN_SYSTEM_SERVICE_QUEUE_PREFIX + \".maximum-application-lifetime\", \"-1\");",
          "136:         csProperties.put(YARN_SYSTEM_SERVICE_QUEUE_PREFIX + \".default-application-lifetime\", \"-1\");",
          "138:         csConfig.setProperties(csProperties);",
          "139:         csConfig.save();",
          "141:         hbaseEnvConfigProperties.put(YARN_HBASE_SYSTEM_SERVICE_QUEUE_PROPERTY_NAME, YARN_SYSTEM_SERVICE_QUEUE_NAME);",
          "142:         hbaseEnvConfig.setProperties(hbaseEnvConfigProperties);",
          "143:         hbaseEnvConfig.save();",
          "145:         message = String.format(\"%s was set from %s to %s. %s was set from %s to %s\",",
          "146:             CAPACITY_SCHEDULER_ROOT_QUEUES, old_root_queues, new_root_queues,",
          "147:             YARN_HBASE_SYSTEM_SERVICE_QUEUE_PROPERTY_NAME, oldSystemServiceQueue,",
          "148:             YARN_SYSTEM_SERVICE_QUEUE_NAME);",
          "149:       }",
          "150:     }",
          "152:     agentConfigsHolder.updateData(cluster.getClusterId(),",
          "153:         cluster.getHosts().stream().map(Host::getHostId).collect(Collectors.toList()));",
          "155:     return createCommandReport(0, HostRoleStatus.COMPLETED, \"{}\", message, \"\");",
          "156:   }",
          "157: }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/YarnNodeManagerCapacityCalculationTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/YarnNodeManagerCapacityCalculationTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/YarnNodeManagerCapacityCalculationTest.java -> ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/YarnNodeManagerCapacityCalculationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.server.serveraction.upgrades;",
          "21: import static org.easymock.EasyMock.anyObject;",
          "22: import static org.easymock.EasyMock.createMock;",
          "23: import static org.easymock.EasyMock.eq;",
          "24: import static org.easymock.EasyMock.expect;",
          "25: import static org.easymock.EasyMock.expectLastCall;",
          "26: import static org.easymock.EasyMock.replay;",
          "27: import static org.junit.Assert.assertEquals;",
          "28: import static org.junit.Assert.assertNotNull;",
          "29: import static org.junit.Assert.assertTrue;",
          "31: import java.lang.reflect.Field;",
          "32: import java.util.Collections;",
          "33: import java.util.HashMap;",
          "34: import java.util.Map;",
          "35: import java.util.Set;",
          "37: import org.apache.ambari.server.actionmanager.ExecutionCommandWrapper;",
          "38: import org.apache.ambari.server.actionmanager.HostRoleCommand;",
          "39: import org.apache.ambari.server.agent.CommandReport;",
          "40: import org.apache.ambari.server.agent.ExecutionCommand;",
          "41: import org.apache.ambari.server.agent.stomp.AgentConfigsHolder;",
          "42: import org.apache.ambari.server.state.Cluster;",
          "43: import org.apache.ambari.server.state.Clusters;",
          "44: import org.apache.ambari.server.state.Config;",
          "45: import org.apache.ambari.server.state.Service;",
          "46: import org.apache.ambari.server.state.ServiceComponent;",
          "47: import org.easymock.EasyMock;",
          "48: import org.junit.Before;",
          "49: import org.junit.Test;",
          "50: import org.junit.runner.RunWith;",
          "51: import org.mockito.Mockito;",
          "52: import org.powermock.modules.junit4.PowerMockRunner;",
          "54: import com.google.inject.Injector;",
          "60: @RunWith(PowerMockRunner.class)",
          "61: public class YarnNodeManagerCapacityCalculationTest {",
          "62:   private static final String YARN_SITE_CONFIG_TYPE = \"yarn-site\";",
          "63:   private static final String YARN_ENV_CONFIG_TYPE = \"yarn-env\";",
          "64:   private static final String YARN_HBASE_ENV_CONFIG_TYPE = \"yarn-hbase-env\";",
          "65:   private static final String CAPACITY_SCHEDULER_CONFIG_TYPE = \"capacity-scheduler\";",
          "67:   private static final String YARN_SYSTEM_SERVICE_USER_NAME = \"yarn_ats_user\";",
          "68:   private static final String YARN_DEFAULT_QUEUE = \"default\";",
          "69:   private static final String YARN_SYSTEM_SERVICE_QUEUE_NAME = \"yarn-system\";",
          "70:   private static final String CAPACITY_SCHEDULER_ROOT_QUEUES = \"yarn.scheduler.capacity.root.queues\";",
          "71:   private static final String YARN_SYSTEM_SERVICE_QUEUE_PREFIX = \"yarn.scheduler.capacity.root.\" + YARN_SYSTEM_SERVICE_QUEUE_NAME;",
          "72:   private static final String YARN_NM_PMEM_MB_PROPERTY_NAME = \"yarn.nodemanager.resource.memory-mb\";",
          "73:   private static final String YARN_HBASE_SYSTEM_SERVICE_QUEUE_PROPERTY_NAME = \"yarn_hbase_system_service_queue_name\";",
          "74:   private static final String YARN_HBASE_SYSTEM_SERVICE_LAUNCH_PROPERTY_NAME = \"is_hbase_system_service_launch\";",
          "76:   private static final String CLUSTER_NAME = \"C1\";",
          "77:   private static final String ats_user = \"test1\";",
          "79:   private Injector m_injector;",
          "80:   private Clusters m_clusters;",
          "81:   private AgentConfigsHolder agentConfigsHolder;",
          "82:   private Cluster cluster;",
          "83:   private Field clusterField;",
          "84:   private Field agentConfigsHolderField;",
          "86:   private ServiceComponent serviceComponent;",
          "87:   private Service service;",
          "88:   private Set<String> hosts;",
          "90:   @Before",
          "91:   public void setup() throws Exception {",
          "92:     m_injector = EasyMock.createMock(Injector.class);",
          "93:     m_clusters = EasyMock.createMock(Clusters.class);",
          "94:     agentConfigsHolder = createMock(AgentConfigsHolder.class);",
          "95:     cluster = EasyMock.createMock(Cluster.class);",
          "97:     Map<String, String> mockYarnProperties = new HashMap<String, String>() {",
          "98:       {",
          "99:         put(YARN_NM_PMEM_MB_PROPERTY_NAME, \"20480\");",
          "100:       }",
          "101:     };",
          "103:     Config yarnConfig = EasyMock.createNiceMock(Config.class);",
          "104:     expect(yarnConfig.getType()).andReturn(YARN_SITE_CONFIG_TYPE).anyTimes();",
          "105:     expect(yarnConfig.getProperties()).andReturn(mockYarnProperties).anyTimes();",
          "106:     expect(cluster.getDesiredConfigByType(YARN_SITE_CONFIG_TYPE)).andReturn(yarnConfig).anyTimes();",
          "108:     Map<String, String> mockHbaseEnvProps =",
          "109:         new HashMap<String, String>() {{",
          "110:           put(YARN_HBASE_SYSTEM_SERVICE_LAUNCH_PROPERTY_NAME, \"false\");",
          "111:           put(YARN_HBASE_SYSTEM_SERVICE_QUEUE_PROPERTY_NAME, YARN_DEFAULT_QUEUE);",
          "112:         }};",
          "113:     Config hbaseEnvConfig = EasyMock.createNiceMock(Config.class);",
          "114:     expect(hbaseEnvConfig.getType()).andReturn(YARN_HBASE_ENV_CONFIG_TYPE).anyTimes();",
          "115:     expect(hbaseEnvConfig.getProperties()).andReturn(mockHbaseEnvProps).anyTimes();",
          "116:     expect(cluster.getDesiredConfigByType(YARN_HBASE_ENV_CONFIG_TYPE)).andReturn(hbaseEnvConfig).anyTimes();",
          "119:     Map<String, String> mockYarnEnvProps =",
          "120:         new HashMap<String, String>() {{",
          "121:           put(YARN_SYSTEM_SERVICE_USER_NAME, ats_user);",
          "122:         }};",
          "123:     Config yarnEnvConfig = EasyMock.createNiceMock(Config.class);",
          "124:     expect(yarnEnvConfig.getType()).andReturn(YARN_ENV_CONFIG_TYPE).anyTimes();",
          "125:     expect(yarnEnvConfig.getProperties()).andReturn(mockYarnEnvProps).anyTimes();",
          "126:     expect(cluster.getDesiredConfigByType(YARN_ENV_CONFIG_TYPE)).andReturn(yarnEnvConfig).anyTimes();",
          "128:     Map<String, String> mockCsProps =",
          "129:         new HashMap<String, String>() {{",
          "130:           put(CAPACITY_SCHEDULER_ROOT_QUEUES, YARN_DEFAULT_QUEUE);",
          "131:         }};",
          "132:     Config yarnCsConfig = EasyMock.createNiceMock(Config.class);",
          "133:     expect(yarnCsConfig.getType()).andReturn(CAPACITY_SCHEDULER_CONFIG_TYPE).anyTimes();",
          "134:     expect(yarnCsConfig.getProperties()).andReturn(mockCsProps).anyTimes();",
          "135:     expect(cluster.getDesiredConfigByType(CAPACITY_SCHEDULER_CONFIG_TYPE)).andReturn(yarnCsConfig).anyTimes();",
          "139:     expect(m_clusters.getCluster((String) anyObject())).andReturn(cluster).anyTimes();",
          "140:     expect(m_injector.getInstance(Clusters.class)).andReturn(m_clusters).atLeastOnce();",
          "141:     expect(cluster.getClusterId()).andReturn(1L).atLeastOnce();",
          "142:     expect(cluster.getHosts()).andReturn(Collections.emptyList()).atLeastOnce();",
          "144:     hosts = Mockito.mock(Set.class);",
          "145:     service = Mockito.mock(Service.class);",
          "146:     serviceComponent = Mockito.mock(ServiceComponent.class);",
          "147:     expect(cluster.getService(\"YARN\")).andReturn(service);",
          "148:     Mockito.when(service.getServiceComponent(\"NODEMANAGER\")).thenReturn(serviceComponent);",
          "151:     agentConfigsHolder.updateData(eq(1L), eq(Collections.emptyList()));",
          "152:     expectLastCall().atLeastOnce();",
          "154:     replay(m_injector, m_clusters, yarnConfig, hbaseEnvConfig, yarnEnvConfig, yarnCsConfig, agentConfigsHolder);",
          "156:     clusterField =",
          "157:         AbstractUpgradeServerAction.class.getDeclaredField(\"m_clusters\");",
          "158:     clusterField.setAccessible(true);",
          "159:     agentConfigsHolderField = AbstractUpgradeServerAction.class.getDeclaredField(\"agentConfigsHolder\");",
          "160:     agentConfigsHolderField.setAccessible(true);",
          "161:   }",
          "163:   @Test",
          "164:   public void testActionForNotCreatingYarnSystemServiceQueueWhenClusterIsSmall()",
          "165:       throws Exception {",
          "166:     Mockito.when(serviceComponent.getServiceComponentsHosts()).thenReturn(hosts);",
          "167:     Mockito.when(hosts.size()).thenReturn(2);",
          "169:     YarnNodeManagerCapacityCalculation action = getYarnNodeManagerCapacityCalculation();",
          "172:     Cluster c = m_clusters.getCluster(CLUSTER_NAME);",
          "174:     Config hbaseEnvConfig =",
          "175:         c.getDesiredConfigByType(YARN_HBASE_ENV_CONFIG_TYPE);",
          "176:     validateYarnHBaseEnvProperties(hbaseEnvConfig, false, YARN_DEFAULT_QUEUE);",
          "178:     CommandReport report = action.execute(null);",
          "179:     assertNotNull(report);",
          "181:     validateYarnHBaseEnvProperties(hbaseEnvConfig, false, YARN_DEFAULT_QUEUE);",
          "182:   }",
          "184:   @Test",
          "185:   public void testActionForCreatingYarnSystemServiceQueue()",
          "186:       throws Exception {",
          "188:     Mockito.when(serviceComponent.getServiceComponentsHosts()).thenReturn(hosts);",
          "189:     Mockito.when(hosts.size()).thenReturn(3);",
          "191:     YarnNodeManagerCapacityCalculation action = getYarnNodeManagerCapacityCalculation();",
          "194:     Cluster c = m_clusters.getCluster(CLUSTER_NAME);",
          "197:     Config hbaseEnvConfig =",
          "198:         c.getDesiredConfigByType(YARN_HBASE_ENV_CONFIG_TYPE);",
          "199:     validateYarnHBaseEnvProperties(hbaseEnvConfig, false, YARN_DEFAULT_QUEUE);",
          "202:     Config csConfig =",
          "203:         c.getDesiredConfigByType(CAPACITY_SCHEDULER_CONFIG_TYPE);",
          "204:     validateYarnCapacitySchedulerProperties(csConfig, true);",
          "206:     CommandReport report = action.execute(null);",
          "207:     assertNotNull(report);",
          "210:     validateYarnHBaseEnvProperties(hbaseEnvConfig, false, YARN_SYSTEM_SERVICE_QUEUE_NAME);",
          "211:     validateYarnCapacitySchedulerProperties(csConfig, false);",
          "212:   }",
          "214:   private void validateYarnCapacitySchedulerProperties(Config csConfig, boolean before) {",
          "215:     Map<String, String> csProps = csConfig.getProperties();",
          "217:     assertTrue(csProps.containsKey(CAPACITY_SCHEDULER_ROOT_QUEUES));",
          "218:     String[] split = csProps.get(CAPACITY_SCHEDULER_ROOT_QUEUES).split(\",\");",
          "219:     if(before){",
          "220:       assertEquals(1, split.length);",
          "221:       assertEquals(YARN_DEFAULT_QUEUE, split[0]);",
          "222:     } else{",
          "223:       assertEquals(2, split.length);",
          "224:       assertEquals(YARN_DEFAULT_QUEUE, split[0]);",
          "225:       assertEquals(YARN_SYSTEM_SERVICE_QUEUE_NAME, split[1]);",
          "227:       assertEquals(\"0\",csProps.get(YARN_SYSTEM_SERVICE_QUEUE_PREFIX+\".capacity\"));",
          "228:       assertEquals(\"100\",csProps.get(YARN_SYSTEM_SERVICE_QUEUE_PREFIX+\".maximum-capacity\"));",
          "229:       assertEquals(\"1\",csProps.get(YARN_SYSTEM_SERVICE_QUEUE_PREFIX+\".user-limit-factor\"));",
          "230:       assertEquals(\"100\",csProps.get(YARN_SYSTEM_SERVICE_QUEUE_PREFIX+\".minimum-user-limit-percent\"));",
          "231:       assertEquals(\"RUNNING\",csProps.get(YARN_SYSTEM_SERVICE_QUEUE_PREFIX+\".state\"));",
          "232:       assertEquals(\"fifo\",csProps.get(YARN_SYSTEM_SERVICE_QUEUE_PREFIX+\".ordering-policy\"));",
          "233:       assertEquals(ats_user,csProps.get(YARN_SYSTEM_SERVICE_QUEUE_PREFIX+\".acl_submit_applications\"));",
          "234:       assertEquals(ats_user,csProps.get(YARN_SYSTEM_SERVICE_QUEUE_PREFIX+\".acl_administer_queue\"));",
          "235:       assertEquals(\"0.5\",csProps.get(YARN_SYSTEM_SERVICE_QUEUE_PREFIX+\".maximum-am-resource-percent\"));",
          "236:       assertEquals(\"true\",csProps.get(YARN_SYSTEM_SERVICE_QUEUE_PREFIX+\".disable_preemption\"));",
          "237:       assertEquals(\"true\",csProps.get(YARN_SYSTEM_SERVICE_QUEUE_PREFIX+\".intra-queue-preemption.disable_preemption\"));",
          "238:       assertEquals(\"32768\",csProps.get(YARN_SYSTEM_SERVICE_QUEUE_PREFIX+\".priority\"));",
          "239:       assertEquals(\"-1\",csProps.get(YARN_SYSTEM_SERVICE_QUEUE_PREFIX+\".maximum-application-lifetime\"));",
          "240:       assertEquals(\"-1\",csProps.get(YARN_SYSTEM_SERVICE_QUEUE_PREFIX+\".default-application-lifetime\"));",
          "241:     }",
          "242:   }",
          "244:   private YarnNodeManagerCapacityCalculation getYarnNodeManagerCapacityCalculation()",
          "245:       throws IllegalAccessException {",
          "246:     ExecutionCommand executionCommand = new ExecutionCommand();",
          "247:     Map<String, String> commandParams = new HashMap<>();",
          "248:     HostRoleCommand hrc = EasyMock.createMock(HostRoleCommand.class);",
          "249:     YarnNodeManagerCapacityCalculation action = new YarnNodeManagerCapacityCalculation();",
          "251:     commandParams.put(\"clusterName\", CLUSTER_NAME);",
          "252:     executionCommand.setCommandParams(commandParams);",
          "253:     executionCommand.setClusterName(CLUSTER_NAME);",
          "255:     expect(hrc.getRequestId()).andReturn(1L).anyTimes();",
          "256:     expect(hrc.getStageId()).andReturn(2L).anyTimes();",
          "257:     expect(hrc.getExecutionCommandWrapper())",
          "258:         .andReturn(new ExecutionCommandWrapper(executionCommand)).anyTimes();",
          "259:     replay(cluster, hrc);",
          "261:     clusterField.set(action, m_clusters);",
          "262:     agentConfigsHolderField.set(action, agentConfigsHolder);",
          "263:     action.setExecutionCommand(executionCommand);",
          "264:     action.setHostRoleCommand(hrc);",
          "265:     return action;",
          "266:   }",
          "268:   private void validateYarnHBaseEnvProperties(Config hbaseEnvConfig,",
          "269:       boolean expected, String queueName) {",
          "270:     Map<String, String> map = hbaseEnvConfig.getProperties();",
          "271:     assertTrue(map.containsKey(YARN_HBASE_SYSTEM_SERVICE_LAUNCH_PROPERTY_NAME));",
          "272:     assertEquals(expected,",
          "273:         Boolean.parseBoolean(map.get(YARN_HBASE_SYSTEM_SERVICE_LAUNCH_PROPERTY_NAME)));",
          "275:     assertTrue(map.containsKey(YARN_HBASE_SYSTEM_SERVICE_QUEUE_PROPERTY_NAME));",
          "276:     assertEquals(queueName, map.get(YARN_HBASE_SYSTEM_SERVICE_QUEUE_PROPERTY_NAME));",
          "277:   }",
          "278: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa726aa7f999d5ed00f46b18da189aa406f95738",
      "candidate_info": {
        "commit_hash": "aa726aa7f999d5ed00f46b18da189aa406f95738",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/aa726aa7f999d5ed00f46b18da189aa406f95738",
        "files": [
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/upgrade/core/MetricsDataMigrationLauncher.java"
        ],
        "message": "AMBARI-24340 : AMS Migration tools should auto-detect whitelist file. (#1852)",
        "before_after_code_files": [
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/upgrade/core/MetricsDataMigrationLauncher.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/upgrade/core/MetricsDataMigrationLauncher.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/upgrade/core/MetricsDataMigrationLauncher.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/upgrade/core/MetricsDataMigrationLauncher.java": [
          "File: ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/upgrade/core/MetricsDataMigrationLauncher.java -> ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/upgrade/core/MetricsDataMigrationLauncher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:     if (whitelistedFilePath != null) {",
          "107:       this.metricNames = readMetricWhitelistFromFile(whitelistedFilePath);",
          "109:       String whitelistFile = timelineMetricConfiguration.getMetricsConf().get(TimelineMetricConfiguration.TIMELINE_METRICS_WHITELIST_FILE, TimelineMetricConfiguration.TIMELINE_METRICS_WHITELIST_FILE_LOCATION_DEFAULT);",
          "110:       metricNames = readMetricWhitelistFromFile(whitelistFile);",
          "114:     }",
          "116:     readProcessedMetricsMap();",
          "",
          "[Removed Lines]",
          "108:     } else if (timelineMetricConfiguration.isWhitelistingEnabled()) {",
          "111:     } else {",
          "112:       LOG.error(\"No whitelisted metrics specified. Exiting...\");",
          "113:       throw new Exception(\"List of whitelisted metrics must be provided\");",
          "",
          "[Added Lines]",
          "108:     } else {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "017a85e2bdd8a148c4daaf25870f0066c052a97d",
      "candidate_info": {
        "commit_hash": "017a85e2bdd8a148c4daaf25870f0066c052a97d",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/017a85e2bdd8a148c4daaf25870f0066c052a97d",
        "files": [
          "ambari-web/app/config.js"
        ],
        "message": "AMBARI-25272 (Ambari UI default Ajax Timeout is 3 minutes but some operations in server can take more than that) (asnaik) (#2966)",
        "before_after_code_files": [
          "ambari-web/app/config.js||ambari-web/app/config.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/config.js||ambari-web/app/config.js": [
          "File: ambari-web/app/config.js -> ambari-web/app/config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: App.defaultWindowsStackVersion = 'HDPWIN-2.1';",
          "34: App.defaultJavaHome = '/usr/jdk/jdk1.6.0_31';",
          "36: App.maxRetries = 3; // max number of retries for certain AJAX calls",
          "37: App.sessionKeepAliveInterval  = 60000;",
          "38: App.bgOperationsUpdateInterval = 6000;",
          "",
          "[Removed Lines]",
          "35: App.timeout = 180000; // default AJAX timeout",
          "",
          "[Added Lines]",
          "35: App.timeout = 300000; // default AJAX timeout",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7186cf4034b4ae87e5301eafd3c31622b35150ab",
      "candidate_info": {
        "commit_hash": "7186cf4034b4ae87e5301eafd3c31622b35150ab",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/7186cf4034b4ae87e5301eafd3c31622b35150ab",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java"
        ],
        "message": "AMBARI-24852. NPE in default host group replacement (#2567)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1737:                                          Map<String, Map<String, String>> properties,",
          "1738:                                          ClusterTopology topology) {",
          "1740:       HostGroups hostGroups = new HostGroups(topology, propertyName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1740:       if (origValue == null) {",
          "1741:         LOG.info(\"Property {} is null, skipping search for host group placeholder\", propertyName);",
          "1742:         return null;",
          "1743:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1777:                                                     String origValue,",
          "1778:                                                     Map<String, Map<String, String>> properties,",
          "1779:                                                     ClusterTopology topology) {",
          "1781:       Matcher m = HostGroup.HOSTGROUP_REGEX.matcher(origValue);",
          "1782:       Set<String> hostGroups = new HashSet<>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1785:       if (origValue == null) {",
          "1786:         LOG.info(\"Property {} is null, skipping search for host group placeholder\", propertyName);",
          "1787:         return Collections.emptyList();",
          "1788:       }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2248:         \"dfs.https.address\", \"testhost3\")),",
          "2249:       \"myservice-site\", new HashMap<>(ImmutableMap.of(",
          "2250:         \"myservice_slave_address\", \"%HOSTGROUP::group1%:8080\"))));",
          "2252:     Configuration clusterConfig = new Configuration(new HashMap<>(), new HashMap<>());",
          "2253:     clusterConfig.setParentConfiguration(new Configuration(stackProperties, emptyMap()));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2251:     hostGroupProperties.get(\"hdfs-site\").put(\"null_property\", null);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2386:           \"%HOSTGROUP::master3%:8080\",",
          "2387:           clusterConfig.getProperties(),",
          "2388:           topology)));",
          "2389:   }",
          "2391:   @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2391:     assertEquals(emptyList(),",
          "2392:       updater.getRequiredHostGroups(\"mycomponent.urls\", null, clusterConfig.getProperties(), topology));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2063984190b932e5a77220c4a80f4665e0617fa",
      "candidate_info": {
        "commit_hash": "f2063984190b932e5a77220c4a80f4665e0617fa",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/f2063984190b932e5a77220c4a80f4665e0617fa",
        "files": [
          "ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js",
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/PhoenixHBaseAccessor.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/MetadataQueryCondition.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/PhoenixTransactSQL.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/TransientMetricCondition.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/discovery/TestMetadataManager.java"
        ],
        "message": "AMBARI-25320 Backport AMBARI-24872 and AMBARI-24723 for ambari 2.7.4 (ihor lukianov)",
        "before_after_code_files": [
          "ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js||ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js",
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/PhoenixHBaseAccessor.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/PhoenixHBaseAccessor.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/MetadataQueryCondition.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/MetadataQueryCondition.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/PhoenixTransactSQL.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/PhoenixTransactSQL.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/TransientMetricCondition.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/TransientMetricCondition.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/discovery/TestMetadataManager.java||ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/discovery/TestMetadataManager.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js||ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js": [
          "File: ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js -> ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "258:           var getAllHostData = function(target) {",
          "259:             var instanceId = typeof target.templatedCluster == 'undefined'  ? '' : '&instanceId=' + target.templatedCluster;",
          "260:             var precision = target.precision === 'default' || typeof target.precision == 'undefined'  ? '' : '&precision='",
          "261:             + target.precision;",
          "262:             var metricAggregator = target.aggregator === \"none\" ? '' : '._' + target.aggregator;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260:             var appId = target.app;",
          "261:             if ((appId === 'nifi' || appId === 'druid') && (!instanceId || instanceId === '&instanceId=')) {",
          "262:                 instanceId = \"%\"",
          "263:             }",
          "",
          "---------------"
        ],
        "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/PhoenixHBaseAccessor.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/PhoenixHBaseAccessor.java": [
          "File: ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/PhoenixHBaseAccessor.java -> ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/PhoenixHBaseAccessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "121: import org.apache.ambari.metrics.core.timeline.discovery.TimelineMetricMetadataManager;",
          "122: import org.apache.ambari.metrics.core.timeline.query.Condition;",
          "123: import org.apache.ambari.metrics.core.timeline.query.DefaultPhoenixDataSource;",
          "124: import org.apache.ambari.metrics.core.timeline.query.PhoenixConnectionProvider;",
          "125: import org.apache.ambari.metrics.core.timeline.query.PhoenixTransactSQL;",
          "126: import org.apache.ambari.metrics.core.timeline.query.SplitByMetricNamesCondition;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124: import org.apache.ambari.metrics.core.timeline.query.MetadataQueryCondition;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1990:     return metadataMap;",
          "1991:   }",
          "1994:   public Map<TimelineMetricMetadataKey, TimelineMetricMetadata> getTimelineMetricMetadataV1() throws SQLException {",
          "1995:     Map<TimelineMetricMetadataKey, TimelineMetricMetadata> metadataMap = new HashMap<>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1994:   public List<TimelineMetricMetadata> scanMetricMetadataForWildCardRequest(Collection<String> metricNames,",
          "1995:                                                                            String appId,",
          "1996:                                                                            String instanceId) throws SQLException {",
          "1997:     List<TimelineMetricMetadata> metadataList = new ArrayList<>();",
          "1998:     Connection conn = getConnection();",
          "1999:     PreparedStatement stmt = null;",
          "2000:     ResultSet rs = null;",
          "2002:     MetadataQueryCondition metadataQueryCondition = new MetadataQueryCondition(new ArrayList<>(metricNames), appId, instanceId);",
          "2003:     stmt = PhoenixTransactSQL.prepareScanMetricMetadataSqlStmt(conn, metadataQueryCondition);",
          "2004:     try {",
          "2005:       if (stmt != null) {",
          "2006:         rs = stmt.executeQuery();",
          "2007:         while (rs.next()) {",
          "2008:           TimelineMetricMetadata metadata = new TimelineMetricMetadata(",
          "2009:             rs.getString(\"METRIC_NAME\"),",
          "2010:             rs.getString(\"APP_ID\"),",
          "2011:             rs.getString(\"INSTANCE_ID\"),",
          "2012:             null,",
          "2013:             null,",
          "2014:             null,",
          "2015:             false,",
          "2016:             true",
          "2017:           );",
          "2019:           metadata.setUuid(rs.getBytes(\"UUID\"));",
          "2020:           metadataList.add(metadata);",
          "2021:         }",
          "2022:       }",
          "2023:     } finally {",
          "2024:       if (rs != null) {",
          "2025:         try {",
          "2026:           rs.close();",
          "2027:         } catch (SQLException e) {",
          "2029:         }",
          "2030:       }",
          "2031:       if (stmt != null) {",
          "2032:         try {",
          "2033:           stmt.close();",
          "2034:         } catch (SQLException e) {",
          "2036:         }",
          "2037:       }",
          "2038:       if (conn != null) {",
          "2039:         try {",
          "2040:           conn.close();",
          "2041:         } catch (SQLException sql) {",
          "2043:         }",
          "2044:       }",
          "2045:     }",
          "2047:     return metadataList;",
          "2048:   }",
          "2050:   public List<byte[]> scanHostMetadataForWildCardRequest(List<String> hostnames) throws SQLException {",
          "2051:     List<byte[]> uuidList = new ArrayList<>();",
          "2052:     Connection conn = getConnection();",
          "2053:     PreparedStatement stmt;",
          "2054:     ResultSet rs = null;",
          "2056:     MetadataQueryCondition metadataQueryCondition = new MetadataQueryCondition(hostnames);",
          "2057:     stmt = PhoenixTransactSQL.prepareScanMetricMetadataSqlStmt(conn, metadataQueryCondition);",
          "2058:     try {",
          "2059:       if (stmt != null) {",
          "2060:         rs = stmt.executeQuery();",
          "2061:         while (rs.next()) {",
          "2062:           byte[] uuid = rs.getBytes(\"UUID\");",
          "2063:           if (uuid != null) {",
          "2064:             uuidList.add(uuid);",
          "2065:           }",
          "2066:         }",
          "2067:       }",
          "2068:     } finally {",
          "2069:       if (rs != null) {",
          "2070:         try {",
          "2071:           rs.close();",
          "2072:         } catch (SQLException e) {",
          "2074:         }",
          "2075:       }",
          "2076:       if (stmt != null) {",
          "2077:         try {",
          "2078:           stmt.close();",
          "2079:         } catch (SQLException e) {",
          "2081:         }",
          "2082:       }",
          "2083:       if (conn != null) {",
          "2084:         try {",
          "2085:           conn.close();",
          "2086:         } catch (SQLException sql) {",
          "2088:         }",
          "2089:       }",
          "2090:     }",
          "2091:     return uuidList;",
          "2092:   }",
          "",
          "---------------"
        ],
        "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java": [
          "File: ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java -> ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "361:   }",
          "363:   boolean isDistributedModeEnabled() {",
          "365:   }",
          "",
          "[Removed Lines]",
          "364:     return metricsConf.get(\"timeline.metrics.service.operation.mode\").equals(\"distributed\");",
          "",
          "[Added Lines]",
          "364:     String mode = metricsConf.get(\"timeline.metrics.service.operation.mode\");",
          "365:     return (mode != null) && mode.equals(\"distributed\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "632:     Collection<String> sanitizedMetricNames = new HashSet<>();",
          "633:     List<byte[]> uuids = new ArrayList<>();",
          "635:     for (String metricName : metricNames) {",
          "646:       }",
          "647:     }",
          "651:     }",
          "664:           }",
          "672:             if (uuid != null) {",
          "673:               uuids.add(uuid);",
          "674:             }",
          "675:           }",
          "676:         }",
          "677:       } else {",
          "680:           if (uuid != null) {",
          "681:             uuids.add(uuid);",
          "682:           }",
          "683:         }",
          "684:       }",
          "698:     }",
          "700:     return uuids;",
          "",
          "[Removed Lines]",
          "636:       if (metricName.contains(\"%\")) {",
          "637:         String metricRegEx = getJavaRegexFromSqlRegex(metricName);",
          "638:         for (TimelineMetricMetadataKey key : METADATA_CACHE.keySet()) {",
          "639:           String metricNameFromMetadata = key.getMetricName();",
          "640:           if (metricNameFromMetadata.matches(metricRegEx)) {",
          "641:             sanitizedMetricNames.add(metricNameFromMetadata);",
          "642:           }",
          "643:         }",
          "644:       } else {",
          "645:         sanitizedMetricNames.add(metricName);",
          "649:     if(sanitizedMetricNames.isEmpty()) {",
          "650:       return uuids;",
          "653:     Set<String> sanitizedHostNames = getSanitizedHostnames(hostnames);",
          "655:     if (CollectionUtils.isNotEmpty(sanitizedHostNames)) {",
          "656:       if (CollectionUtils.isNotEmpty(sanitizedMetricNames)) {",
          "660:         for (String metricName : sanitizedMetricNames) {",
          "661:           if (isTransientMetric(metricName, appId)) {",
          "662:             transientMetricNames.add(metricName);",
          "663:             continue;",
          "665:           TimelineMetric metric = new TimelineMetric();",
          "666:           metric.setMetricName(metricName);",
          "667:           metric.setAppId(appId);",
          "668:           metric.setInstanceId(instanceId);",
          "669:           for (String hostname : sanitizedHostNames) {",
          "670:             metric.setHostName(hostname);",
          "671:             byte[] uuid = getUuid(metric, false);",
          "678:         for (String hostname : sanitizedHostNames) {",
          "679:           byte[] uuid = getUuidForHostname(hostname, false);",
          "685:     } else {",
          "686:       for (String metricName : sanitizedMetricNames) {",
          "688:         if (isTransientMetric(metricName, appId)) {",
          "689:           transientMetricNames.add(metricName);",
          "690:           continue;",
          "691:         }",
          "692:         TimelineClusterMetric metric = new TimelineClusterMetric(metricName, appId, instanceId, -1l);",
          "693:         byte[] uuid = getUuid(metric, false);",
          "694:         if (uuid != null) {",
          "695:           uuids.add(uuid);",
          "696:         }",
          "697:       }",
          "",
          "[Added Lines]",
          "636:     boolean metricNameHasWildcard = false;",
          "639:       if (hasWildCard(metricName)) {",
          "640:         metricNameHasWildcard = true;",
          "641:         break;",
          "645:     boolean hostNameHasWildcard = false;",
          "646:     if (CollectionUtils.isNotEmpty(hostnames)) {",
          "647:       for (String hostname : hostnames) {",
          "648:         if (hasWildCard(hostname)) {",
          "649:           hostNameHasWildcard = true;",
          "650:           break;",
          "651:         }",
          "652:       }",
          "655:     if (hasWildCard(instanceId) || hasWildCard(appId) || hostNameHasWildcard || metricNameHasWildcard) {",
          "656:       try {",
          "657:         List<TimelineMetricMetadata> metricMetadataFromStore = hBaseAccessor.scanMetricMetadataForWildCardRequest(metricNames,",
          "658:           appId, instanceId);",
          "659:         List<byte[]> hostUuidsFromStore = hBaseAccessor.scanHostMetadataForWildCardRequest(hostnames);",
          "661:         for (TimelineMetricMetadata matchedEntry : metricMetadataFromStore) {",
          "662:           if (matchedEntry.getUuid() != null) {",
          "663:             if (CollectionUtils.isNotEmpty(hostnames)) {",
          "664:               for (byte[] hostUuidEntry : hostUuidsFromStore) {",
          "665:                 uuids.add(ArrayUtils.addAll(matchedEntry.getUuid(), hostUuidEntry));",
          "666:               }",
          "667:             } else {",
          "668:               uuids.add(matchedEntry.getUuid());",
          "669:             }",
          "670:           } else if (isTransientMetric(matchedEntry.getMetricName(), matchedEntry.getAppId())) {",
          "671:             transientMetricNames.add(matchedEntry.getMetricName());",
          "672:           }",
          "673:         }",
          "674:         return uuids;",
          "675:       } catch (SQLException e) {",
          "676:         LOG.error(\"Unable to query metadata table to check satisfying metric keys for wildcard request : \" + e);",
          "677:         return uuids;",
          "678:       }",
          "679:     } else {",
          "681:       if (CollectionUtils.isNotEmpty(hostnames)) {",
          "682:         if (CollectionUtils.isNotEmpty(metricNames)) {",
          "685:           for (String metricName : metricNames) {",
          "686:             if (isTransientMetric(metricName, appId)) {",
          "687:               transientMetricNames.add(metricName);",
          "688:               continue;",
          "689:             }",
          "690:             TimelineMetric metric = new TimelineMetric();",
          "691:             metric.setMetricName(metricName);",
          "692:             metric.setAppId(appId);",
          "693:             metric.setInstanceId(instanceId);",
          "694:             for (String hostname : hostnames) {",
          "695:               metric.setHostName(hostname);",
          "696:               byte[] uuid = getUuid(metric, false);",
          "697:               if (uuid != null) {",
          "698:                 uuids.add(uuid);",
          "699:               }",
          "700:             }",
          "702:         } else {",
          "703:           for (String hostname : hostnames) {",
          "704:             byte[] uuid = getUuidForHostname(hostname, false);",
          "711:         for (String metricName : metricNames) {",
          "713:           if (isTransientMetric(metricName, appId)) {",
          "714:             transientMetricNames.add(metricName);",
          "715:             continue;",
          "716:           }",
          "717:           TimelineClusterMetric metric = new TimelineClusterMetric(metricName, appId, instanceId, -1l);",
          "718:           byte[] uuid = getUuid(metric, false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "832:   public void forceMetricsMetadataSync() {",
          "833:     metricMetadataSync.run();",
          "834:   }",
          "836:   public void updateMetadataCacheUsingV1Tables() throws SQLException {",
          "837:     Map<TimelineMetricMetadataKey, TimelineMetricMetadata> metadataV1Map = getMetadataFromStoreV1();",
          "838:     for (TimelineMetricMetadataKey key: METADATA_CACHE.keySet()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "859:     if (metricMetadataSync == null) {",
          "860:       metricMetadataSync = new TimelineMetricMetadataSync(this);",
          "861:     }",
          "865:   private boolean hasWildCard(String key) {",
          "866:     return StringUtils.isNotEmpty(key) && key.contains(\"%\");",
          "867:   }",
          "",
          "---------------"
        ],
        "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/MetadataQueryCondition.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/MetadataQueryCondition.java": [
          "File: ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/MetadataQueryCondition.java -> ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/MetadataQueryCondition.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.metrics.core.timeline.query;",
          "21: import java.util.Collections;",
          "22: import java.util.List;",
          "24: import org.apache.commons.collections.CollectionUtils;",
          "25: import org.apache.commons.lang.StringUtils;",
          "27: public class MetadataQueryCondition extends TransientMetricCondition {",
          "29:   private boolean isMetricMetadataCondition = true;",
          "31:   public MetadataQueryCondition(List<String> metricNames, String appId, String instanceId) {",
          "32:     super(metricNames, Collections.EMPTY_LIST, appId, instanceId, null, null, null , null, true, null);",
          "33:     this.hostnames = Collections.EMPTY_LIST;",
          "34:   }",
          "36:   public MetadataQueryCondition(List<String> hostnames) {",
          "37:     super(Collections.EMPTY_LIST, hostnames, StringUtils.EMPTY, StringUtils.EMPTY, null, null, null , null, true, null);",
          "38:     isMetricMetadataCondition = false;",
          "39:   }",
          "41:   public StringBuilder getConditionClause() {",
          "42:     StringBuilder sb = new StringBuilder();",
          "44:     boolean appendConjunction = false;",
          "45:     if (CollectionUtils.isNotEmpty(metricNames)) {",
          "46:       appendConjunction = appendMetricNameClause(sb);",
          "47:     }",
          "49:     if (CollectionUtils.isNotEmpty(hostnames)) {",
          "50:       appendConjunction = appendHostnameClause(sb, appendConjunction);",
          "51:     }",
          "53:     String appId = getAppId();",
          "54:     if (StringUtils.isNotEmpty(appId)) {",
          "55:       if (appId.contains(\"%\")) {",
          "56:         appendConjunction = append(sb, appendConjunction, appId, \" APP_ID LIKE ?\");",
          "57:       } else {",
          "58:         appendConjunction = append(sb, appendConjunction, appId, \" APP_ID = ?\");",
          "59:       }",
          "60:     }",
          "62:     String instanceId = getInstanceId();",
          "63:     if (StringUtils.isNotEmpty(instanceId) && !\"%\".equals(instanceId)) {",
          "64:       if (instanceId.contains(\"%\")) {",
          "65:         appendConjunction = append(sb, appendConjunction, instanceId, \" INSTANCE_ID LIKE ?\");",
          "66:       } else {",
          "67:         appendConjunction = append(sb, appendConjunction, instanceId, \" INSTANCE_ID = ?\");",
          "68:       }",
          "69:     }",
          "71:     return sb;",
          "72:   }",
          "74:   @Override",
          "75:   public String getInstanceId() {",
          "76:     return instanceId == null || \"%\".equals(instanceId) || instanceId.isEmpty() ? null : instanceId;",
          "77:   }",
          "79:   public boolean isMetricMetadataCondition() {",
          "80:     return isMetricMetadataCondition;",
          "81:   }",
          "82: }",
          "",
          "---------------"
        ],
        "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/PhoenixTransactSQL.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/PhoenixTransactSQL.java": [
          "File: ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/PhoenixTransactSQL.java -> ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/PhoenixTransactSQL.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   public static final String METRICS_RECORD_TABLE_NAME = \"METRIC_RECORD_UUID\";",
          "50:   public static final String CREATE_METRICS_TABLE_SQL = \"CREATE TABLE IF NOT \" +",
          "51:     \"EXISTS \" + METRICS_RECORD_TABLE_NAME + \" (UUID BINARY(20) NOT NULL, \" +",
          "52:     \"SERVER_TIME BIGINT NOT NULL, \" +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:   public static final String SCAN_METRIC_METADATA_SQL = \"SELECT METRIC_NAME, APP_ID, INSTANCE_ID, UUID FROM %s\";",
          "52:   public static final String SCAN_HOST_METADATA_SQL = \"SELECT HOSTNAME, UUID FROM %s\";",
          "54:   public static final String METRICS_METADATA_TABLE_NAME =",
          "55:     \"METRICS_METADATA_UUID\";",
          "57:   public static final String HOST_METADATA_TABLE_NAME =",
          "58:     \"HOSTED_APPS_METADATA_UUID\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "981:   }",
          "983:   public static String getTargetTableUsingPrecision(Precision precision, boolean withHosts) {",
          "985:     String inputTable = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "993:   public static PreparedStatement prepareScanMetricMetadataSqlStmt(Connection connection, MetadataQueryCondition condition)",
          "994:     throws SQLException {",
          "996:     String stmtStr;",
          "997:     if (condition.isMetricMetadataCondition()) {",
          "998:       stmtStr = String.format(SCAN_METRIC_METADATA_SQL, METRICS_METADATA_TABLE_NAME);",
          "999:     } else {",
          "1000:       stmtStr = String.format(SCAN_HOST_METADATA_SQL, HOST_METADATA_TABLE_NAME);",
          "1001:     }",
          "1003:     StringBuilder sb = new StringBuilder(stmtStr);",
          "1005:     sb.append(\" WHERE \");",
          "1006:     sb.append(condition.getConditionClause());",
          "1008:     if (LOG.isDebugEnabled()) {",
          "1009:       LOG.debug(\"SQL: \" + sb.toString() + \", condition: \" + condition);",
          "1010:     }",
          "1012:     PreparedStatement stmt = null;",
          "1013:     try {",
          "1014:       stmt = connection.prepareStatement(sb.toString());",
          "1015:       int pos = 1;",
          "1016:       if (condition.isMetricMetadataCondition()) {",
          "1017:         pos = addMetricNames(condition, pos, stmt);",
          "1018:         pos = addAppId(condition, pos, stmt);",
          "1019:         pos = addInstanceId(condition, pos, stmt);",
          "1020:       } else {",
          "1021:         pos = addHostNames(condition, pos, stmt);",
          "1022:       }",
          "1024:     } catch (SQLException e) {",
          "1025:       if (stmt != null) {",
          "1026:         stmt.close();",
          "1027:       }",
          "1028:       throw e;",
          "1029:     }",
          "1030:     return stmt;",
          "1031:   }",
          "",
          "---------------"
        ],
        "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/TransientMetricCondition.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/TransientMetricCondition.java": [
          "File: ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/TransientMetricCondition.java -> ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/TransientMetricCondition.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     }",
          "43:   }",
          "45:   public StringBuilder getTransientConditionClause() {",
          "46:     StringBuilder sb = new StringBuilder();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:   public TransientMetricCondition(List<String> metricNames, List<String> hostnames, String appId,",
          "46:                                   String instanceId, Long startTime, Long endTime, Precision precision,",
          "47:                                   Integer limit, boolean grouped, List<String> transientMetricNames) {",
          "48:     super(metricNames, hostnames, appId, instanceId, startTime, endTime, precision, limit, grouped);",
          "49:     this.transientMetricNames = transientMetricNames;",
          "50:     if (CollectionUtils.isEmpty(hostnames)) {",
          "51:       this.hostnames = Collections.singletonList(\"%\");",
          "52:     }",
          "53:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:     appendConjunction = appendHostnameClause(sb, appendConjunction);",
          "54:     appendConjunction = append(sb, appendConjunction, getStartTime(), \" SERVER_TIME >= ?\");",
          "55:     append(sb, appendConjunction, getEndTime(), \" SERVER_TIME < ?\");",
          "57:     return sb;",
          "58:   }",
          "61:     boolean appendConjunction = false;",
          "62:     List<String> metricsLike = new ArrayList<>();",
          "63:     List<String> metricsIn = new ArrayList<>();",
          "",
          "[Removed Lines]",
          "52:     appendConjunction = append(sb, appendConjunction, getAppId(), \" APP_ID = ?\");",
          "53:     appendConjunction = append(sb, appendConjunction, getInstanceId(), \" INSTANCE_ID = ?\");",
          "60:   private boolean appendMetricNameClause(StringBuilder sb) {",
          "",
          "[Added Lines]",
          "63:     String appId = getAppId();",
          "64:     if (appId.contains(\"%\")) {",
          "65:       appendConjunction = append(sb, appendConjunction, getAppId(), \" APP_ID LIKE ?\");",
          "66:     } else {",
          "67:       appendConjunction = append(sb, appendConjunction, getAppId(), \" APP_ID = ?\");",
          "68:     }",
          "70:     String instanceId = getInstanceId();",
          "71:     if (instanceId.contains(\"%\")) {",
          "72:       appendConjunction = append(sb, appendConjunction, getInstanceId(), \" INSTANCE_ID LIKE ?\");",
          "73:     } else {",
          "74:       appendConjunction = append(sb, appendConjunction, getInstanceId(), \" INSTANCE_ID = ?\");",
          "75:     }",
          "83:   protected boolean appendMetricNameClause(StringBuilder sb) {",
          "",
          "---------------"
        ],
        "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/discovery/TestMetadataManager.java||ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/discovery/TestMetadataManager.java": [
          "File: ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/discovery/TestMetadataManager.java -> ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/discovery/TestMetadataManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:   }",
          "183:   @Test",
          "186:     metadataManager = new TimelineMetricMetadataManager(new Configuration(), hdb);",
          "187:     hdb.setMetadataInstance(metadataManager);",
          "",
          "[Removed Lines]",
          "184:   public void testWildcardSanitization() throws IOException, SQLException, URISyntaxException {",
          "",
          "[Added Lines]",
          "184:   public void testMetricHostWildcardSanitization() throws IOException, SQLException, URISyntaxException {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234:     replay(configuration);",
          "236:     hdb.insertMetricRecordsWithMetadata(metadataManager, timelineMetrics, true);",
          "238:     List<byte[]> uuids = metadataManager.getUuidsForGetMetricQuery(Collections.singletonList(\"dummy_m%\"),",
          "239:       Collections.singletonList(\"dummy_host2\"), \"dummy_app1\", null);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237:     metadataManager.forceMetricsMetadataSync();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "254:     Assert.assertTrue(uuids.isEmpty());",
          "255:   }",
          "257:   @Test",
          "258:   public void testTransientMetricPatterns() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258:   @Test",
          "259:   public void testAppInstanceWildcardSanitization() throws IOException, SQLException, URISyntaxException {",
          "261:     metadataManager = new TimelineMetricMetadataManager(new Configuration(), hdb);",
          "262:     hdb.setMetadataInstance(metadataManager);",
          "263:     final long now = System.currentTimeMillis();",
          "265:     TimelineMetrics timelineMetrics = new TimelineMetrics();",
          "267:     TimelineMetric metric1 = new TimelineMetric();",
          "268:     metric1.setMetricName(\"dummy_m1\");",
          "269:     metric1.setHostName(\"dummy_host1\");",
          "270:     metric1.setStartTime(now - 1000);",
          "271:     metric1.setAppId(\"dummy_app1\");",
          "272:     metric1.setInstanceId(\"dummy_i1\");",
          "273:     metric1.setType(\"Integer\");",
          "274:     metric1.setMetricValues(new TreeMap<Long, Double>() {{",
          "275:       put(now - 100, 1.0);",
          "276:       put(now - 200, 2.0);",
          "277:       put(now - 300, 3.0);",
          "278:     }});",
          "279:     timelineMetrics.getMetrics().add(metric1);",
          "281:     TimelineMetric metric2 = new TimelineMetric();",
          "282:     metric2.setMetricName(\"dummy_m2\");",
          "283:     metric2.setHostName(\"dummy_host2\");",
          "284:     metric2.setStartTime(now - 1000);",
          "285:     metric2.setAppId(\"dummy_app2\");",
          "286:     metric2.setInstanceId(\"dummy_i2\");",
          "287:     metric2.setType(\"Integer\");",
          "288:     metric2.setMetricValues(new TreeMap<Long, Double>() {{",
          "289:       put(now - 100, 1.0);",
          "290:       put(now - 200, 2.0);",
          "291:       put(now - 300, 3.0);",
          "292:     }});",
          "293:     timelineMetrics.getMetrics().add(metric2);",
          "295:     TimelineMetric metric3 = new TimelineMetric();",
          "296:     metric3.setMetricName(\"dummy_3\");",
          "297:     metric3.setHostName(\"gummy_3h\");",
          "298:     metric3.setStartTime(now - 1000);",
          "299:     metric3.setAppId(\"gummy_app3\");",
          "300:     metric3.setType(\"Integer\");",
          "301:     metric3.setMetricValues(new TreeMap<Long, Double>() {{",
          "302:       put(now - 100, 1.0);",
          "303:       put(now - 200, 2.0);",
          "304:       put(now - 300, 3.0);",
          "305:     }});",
          "306:     timelineMetrics.getMetrics().add(metric3);",
          "308:     Configuration metricsConf = new Configuration();",
          "309:     TimelineMetricConfiguration configuration = EasyMock.createNiceMock(TimelineMetricConfiguration.class);",
          "310:     expect(configuration.getMetricsConf()).andReturn(metricsConf).once();",
          "311:     replay(configuration);",
          "313:     hdb.insertMetricRecordsWithMetadata(metadataManager, timelineMetrics, true);",
          "314:     metadataManager.forceMetricsMetadataSync();",
          "316:     List<byte[]> uuids = metadataManager.getUuidsForGetMetricQuery(Collections.singletonList(\"dummy_m%\"),",
          "317:       Collections.singletonList(\"dummy_host%\"), \"dummy_app%\", \"dummy_i%\");",
          "318:     Assert.assertTrue(uuids.size() == 4);",
          "320:     uuids = metadataManager.getUuidsForGetMetricQuery(Collections.singletonList(\"dummy_m1\"),",
          "321:       Collections.singletonList(\"dummy_host1\"), \"dummy_app1\", \"%\");",
          "322:     Assert.assertTrue(uuids.size() == 1);",
          "324:     uuids = metadataManager.getUuidsForGetMetricQuery(Collections.singletonList(\"dummy_m1\"),",
          "325:       Collections.singletonList(\"dummy_host1\"), \"dummy_app1\", \"dummy_i%\");",
          "326:     Assert.assertTrue(uuids.size() == 1);",
          "328:     uuids = metadataManager.getUuidsForGetMetricQuery(Collections.singletonList(\"dummy_m1\"),",
          "329:       Collections.singletonList(\"dummy_host1\"), \"dummy_app1\", \"dummy_i2\");",
          "330:     Assert.assertTrue(uuids.size() == 0);",
          "332:     uuids = metadataManager.getUuidsForGetMetricQuery(Collections.singletonList(\"%\"),",
          "333:       Collections.singletonList(\"%\"), \"%\", \"%\");",
          "334:     Assert.assertTrue(uuids.size() == 9);",
          "335:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}