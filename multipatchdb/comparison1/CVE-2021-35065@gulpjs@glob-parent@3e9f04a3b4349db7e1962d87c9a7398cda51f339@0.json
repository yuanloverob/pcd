{
  "cve_id": "CVE-2021-35065",
  "cve_desc": "The glob-parent package before 6.0.1 for Node.js allows ReDoS (regular expression denial of service) attacks against the enclosure regular expression.",
  "repo": "gulpjs/glob-parent",
  "patch_hash": "3e9f04a3b4349db7e1962d87c9a7398cda51f339",
  "patch_info": {
    "commit_hash": "3e9f04a3b4349db7e1962d87c9a7398cda51f339",
    "repo": "gulpjs/glob-parent",
    "commit_url": "https://github.com/gulpjs/glob-parent/commit/3e9f04a3b4349db7e1962d87c9a7398cda51f339",
    "files": [
      "index.js",
      "test/index.test.js"
    ],
    "message": "fix: Resolve ReDoS vulnerability from CVE-2021-35065 (#49)",
    "before_after_code_files": [
      "index.js||index.js",
      "test/index.test.js||test/index.test.js"
    ]
  },
  "patch_diff": {
    "index.js||index.js": [
      "File: index.js -> index.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: var slash = '/';",
      "8: var backslash = /\\\\/g;",
      "10: var globby = /(^|[^\\\\])([{[]|\\([^)]+$)/;",
      "11: var escaped = /\\\\([!*?|[\\](){}])/g;",
      "",
      "[Removed Lines]",
      "9: var enclosure = /[{[].*\\/.*[}\\]]$/;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "24:   }",
      "28:     str += slash;",
      "29:   }",
      "",
      "[Removed Lines]",
      "27:   if (enclosure.test(str)) {",
      "",
      "[Added Lines]",
      "26:   if (isEnclosure(str)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "40:   return str.replace(escaped, '$1');",
      "41: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43: function isEnclosure(str) {",
      "44:   var lastChar = str.slice(-1)",
      "46:   var enclosureStart;",
      "47:   switch (lastChar) {",
      "48:     case '}':",
      "49:       enclosureStart = '{';",
      "50:       break;",
      "51:     case ']':",
      "52:       enclosureStart = '[';",
      "53:       break;",
      "54:     default:",
      "55:       return false;",
      "56:   }",
      "58:   var foundIndex = str.indexOf(enclosureStart);",
      "59:   if (foundIndex < 0) {",
      "60:     return false;",
      "61:   }",
      "63:   return str.slice(foundIndex + 1, -1).includes(slash);",
      "64: }",
      "",
      "---------------"
    ],
    "test/index.test.js||test/index.test.js": [
      "File: test/index.test.js -> test/index.test.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "225:     done();",
      "226:   });",
      "227: });",
      "229: if (isWin32) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "228:   it('should finish in reasonable time for \\'{\\' + \\'/\\'.repeat(n) [CVE-2021-35065]', function(done) {",
      "229:     this.timeout(1000);",
      "230:     gp('{' + '/'.repeat(500000));",
      "231:     done();",
      "232:   });",
      "234:   it('should finish in reasonable time for \\'{\\'.repeat(n)', function(done) {",
      "235:     this.timeout(1000);",
      "236:     gp('{'.repeat(500000));",
      "237:     done();",
      "238:   });",
      "240:   it('should finish in reasonable time for \\'(\\'.repeat(n)', function(done) {",
      "241:     this.timeout(1000);",
      "242:     gp('('.repeat(500000));",
      "243:     done();",
      "244:   });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a9947c68c36ac9b76c1423e4bc9a298880aac564",
      "candidate_info": {
        "commit_hash": "a9947c68c36ac9b76c1423e4bc9a298880aac564",
        "repo": "gulpjs/glob-parent",
        "commit_url": "https://github.com/gulpjs/glob-parent/commit/a9947c68c36ac9b76c1423e4bc9a298880aac564",
        "files": [
          ".ci/.azure-pipelines-steps.yml",
          ".ci/.azure-pipelines.yml",
          ".editorconfig",
          ".eslintrc",
          ".gitattributes",
          ".github/support.yml",
          ".gitignore",
          ".travis.yml",
          "LICENSE",
          "README.md",
          "appveyor.yml",
          "index.js",
          "package.json",
          "test/.eslintrc",
          "test/index.test.js"
        ],
        "message": "chore: normalize repository",
        "before_after_code_files": [
          "index.js||index.js",
          "test.js||test/index.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "index.js||index.js"
          ],
          "candidate": [
            "index.js||index.js"
          ]
        }
      },
      "candidate_diff": {
        "index.js||index.js": [
          "File: index.js -> index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict';",
          "4: var isglob = require('is-glob');",
          "5: var pathDirname = require('path-dirname');",
          "6: var isWin32 = require('os').platform() === 'win32';",
          "8: module.exports = function globParent(str) {",
          "24: };",
          "",
          "[Removed Lines]",
          "3: var path = require('path');",
          "10:  if (isWin32 && str.indexOf('/') < 0) str = str.split('\\\\').join('/');",
          "13:  if (/[\\{\\[].*[\\/]*.*[\\}\\]]$/.test(str)) str += '/';",
          "16:  str += 'a';",
          "19:  do {str = pathDirname.posix(str)}",
          "20:  while (isglob(str) || /(^|[^\\\\])([\\{\\[]|\\([^\\)]+$)/.test(str));",
          "23:  return str.replace(/\\\\([\\*\\?\\|\\[\\]\\(\\)\\{\\}])/g, '$1');",
          "",
          "[Added Lines]",
          "9:   if (isWin32 && str.indexOf('/') < 0) {",
          "10:     str = str.split('\\\\').join('/');",
          "11:   }",
          "14:   if (/[\\{\\[].*[\\/]*.*[\\}\\]]$/.test(str)) {",
          "15:     str += '/';",
          "16:   }",
          "19:   str += 'a';",
          "22:   do {",
          "23:     str = pathDirname.posix(str);",
          "24:   } while (isglob(str) || /(^|[^\\\\])([\\{\\[]|\\([^\\)]+$)/.test(str));",
          "27:   return str.replace(/\\\\([\\*\\?\\|\\[\\]\\(\\)\\{\\}])/g, '$1');",
          "",
          "---------------"
        ],
        "test.js||test/index.test.js": [
          "File: test.js -> test/index.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict';",
          "4: var assert = require('assert');",
          "5: var isWin32 = require('os').platform() === 'win32';",
          "7: describe('glob-parent', function() {",
          "9:     assert.equal(gp('.'), '.');",
          "10:     assert.equal(gp('.*'), '.');",
          "11:     assert.equal(gp('/.*'), '/');",
          "",
          "[Removed Lines]",
          "3: var gp = require('./');",
          "8:   it('should strip glob magic to return parent path', function() {",
          "",
          "[Added Lines]",
          "3: var gp = require('../');",
          "8:   it('should strip glob magic to return parent path', function(done) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:     assert.equal(gp('path/subdir/**/foo.js'), 'path/subdir');",
          "62:     assert.equal(gp('path/!subdir/foo.js'), 'path/!subdir');",
          "63:     assert.equal(gp('path/{foo,bar}/'), 'path');",
          "64:   });",
          "67:     assert.equal(gp('path/\\\\*\\\\*/subdir/foo.*'), 'path/**/subdir');",
          "68:     assert.equal(gp('path/\\\\[\\\\*\\\\]/subdir/foo.*'), 'path/[*]/subdir');",
          "69:     assert.equal(gp('path/\\\\*(a|b)/subdir/foo.*'), 'path');",
          "",
          "[Removed Lines]",
          "66:   it('should respect escaped characters', function() {",
          "",
          "[Added Lines]",
          "65:     done();",
          "68:   it('should respect escaped characters', function(done) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:       assert.equal(gp('\\\\{foo,bar\\\\}'), '{foo,bar}');",
          "89:       assert.equal(gp('{foo,bar\\\\}'), '.');",
          "90:     }",
          "91:   });",
          "94:     assert.equal(gp('path/{,/,bar/baz,qux}/'), 'path');",
          "95:     assert.equal(gp('path/\\\\{,/,bar/baz,qux}/'), 'path/{,/,bar/baz,qux}');",
          "96:     assert.equal(gp('path/\\\\{,/,bar/baz,qux\\\\}/'), 'path/{,/,bar/baz,qux}');",
          "",
          "[Removed Lines]",
          "93:   it('should respect glob enclosures with embedded separators', function() {",
          "",
          "[Added Lines]",
          "94:     done();",
          "97:   it('should respect glob enclosures with embedded separators', function(done) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:     assert.equal(gp('path/(foo/bar|baz)'), 'path');",
          "107:     assert.equal(gp('path/(foo/bar|baz)/'), 'path');",
          "108:     assert.equal(gp('path/\\\\(foo/bar|baz)/'), 'path/(foo/bar|baz)');",
          "109:   });",
          "112:     assert.equal(gp('path/{../,./,{bar,/baz\\\\},qux\\\\}/'), 'path');",
          "113:     assert.equal(gp('path/{../,./,\\\\{bar,/baz},qux}/'), 'path');",
          "114:     assert.equal(gp('path/\\\\{../,./,\\\\{bar,/baz\\\\},qux\\\\}/'), 'path/{../,./,{bar,/baz},qux}');",
          "",
          "[Removed Lines]",
          "111:   it('should handle nested braces', function() {",
          "",
          "[Added Lines]",
          "114:     done();",
          "117:   it('should handle nested braces', function(done) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "116:     assert.equal(gp('{../,./,{bar,/baz\\\\},qux\\\\}'), '.');",
          "117:     assert.equal(gp('path/{,/,bar/{baz,qux\\\\}}/'), 'path');",
          "118:     assert.equal(gp('path/{,/,bar/{baz,qux}\\\\}/'), 'path');",
          "120:   });",
          "123:     assert.equal(gp('path'), '.');",
          "124:     assert.equal(gp('path/foo'), 'path');",
          "125:     assert.equal(gp('path/foo/'), 'path/foo');",
          "126:     assert.equal(gp('path/foo/bar.js'), 'path/foo');",
          "127:   });",
          "128: });",
          "130: describe('glob2base test patterns', function() {",
          "132:     assert.equal(gp('js/*.js'), 'js');",
          "133:   });",
          "136:     assert.equal(gp('js/**/test/*.js'), 'js');",
          "137:   });",
          "140:     assert.equal(gp('js/test/wow.js'), 'js/test');",
          "141:     assert.equal(gp('js/test/wow.js'), 'js/test');",
          "142:   });",
          "145:     assert.equal(gp('js/t[a-z]st}/*.js'), 'js');",
          "146:   });",
          "149:     assert.equal(gp('js/{src,test}/*.js'), 'js');",
          "150:   });",
          "153:     assert.equal(gp('js/test{0..9}/*.js'), 'js');",
          "154:   });",
          "157:     assert.equal(gp('js/t+(wo|est)/*.js'), 'js');",
          "158:   });",
          "161:     assert.equal(gp('js/t(wo|est)/*.js'), 'js');",
          "162:     assert.equal(gp('js/t/(wo|est)/*.js'), 'js/t');",
          "163:   });",
          "166:     assert.equal(gp('lib/{components,pages}/**/{test,another}/*.txt'), 'lib');",
          "168:     assert.equal(gp('js/test/**/{images,components}/*.js'), 'js/test');",
          "170:     assert.equal(gp('ooga/{booga,sooga}/**/dooga/{eooga,fooga}'), 'ooga');",
          "171:   });",
          "172: });",
          "174: if (isWin32) {",
          "175:   describe('technically invalid windows globs', function() {",
          "178:     });",
          "179:   });",
          "180: }",
          "",
          "[Removed Lines]",
          "122:   it('should return parent dirname from non-glob paths', function() {",
          "131:   it('should get a base name', function() {",
          "135:   it('should get a base name from a nested glob', function() {",
          "139:   it('should get a base name from a flat file', function() {",
          "144:   it('should get a base name from character class pattern', function() {",
          "148:   it('should get a base name from brace , expansion', function() {",
          "152:   it('should get a base name from brace .. expansion', function() {",
          "156:   it('should get a base name from extglob', function() {",
          "160:   it('should get a base name from a path with non-exglob parens', function() {",
          "165:   it('should get a base name from a complex brace glob', function() {",
          "176:     it('should manage simple globs with backslash path separator', function() {",
          "177:       assert.equal(gp('C:\\\\path\\\\*.js'), 'C:/path')",
          "",
          "[Added Lines]",
          "127:     done();",
          "130:   it('should return parent dirname from non-glob paths', function(done) {",
          "136:     done();",
          "141:   it('should get a base name', function(done) {",
          "144:     done();",
          "147:   it('should get a base name from a nested glob', function(done) {",
          "150:     done();",
          "153:   it('should get a base name from a flat file', function(done) {",
          "157:     done();",
          "160:   it('should get a base name from character class pattern', function(done) {",
          "163:     done();",
          "166:   it('should get a base name from brace , expansion', function(done) {",
          "169:     done();",
          "172:   it('should get a base name from brace .. expansion', function(done) {",
          "175:     done();",
          "178:   it('should get a base name from extglob', function(done) {",
          "181:     done();",
          "184:   it('should get a base name from a path with non-exglob parens', function(done) {",
          "188:     done();",
          "191:   it('should get a base name from a complex brace glob', function(done) {",
          "198:     done();",
          "204:     it('should manage simple globs with backslash path separator', function(done) {",
          "205:       assert.equal(gp('C:\\\\path\\\\*.js'), 'C:/path');",
          "207:       done();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e83d0c5a411947cf69eb58f36349db80439c606f",
      "candidate_info": {
        "commit_hash": "e83d0c5a411947cf69eb58f36349db80439c606f",
        "repo": "gulpjs/glob-parent",
        "commit_url": "https://github.com/gulpjs/glob-parent/commit/e83d0c5a411947cf69eb58f36349db80439c606f",
        "files": [
          ".ci/.azure-pipelines-steps.yml",
          ".ci/.azure-pipelines.yml",
          ".github/workflows/dev.yml",
          ".prettierignore",
          ".travis.yml",
          "LICENSE",
          "README.md",
          "appveyor.yml",
          "index.js",
          "package.json",
          "test/.eslintrc",
          "test/.gitkeep",
          "test/index.test.js"
        ],
        "message": "chore!: upgrade scaffold, dropping node <10 support",
        "before_after_code_files": [
          "index.js||index.js",
          "test/index.test.js||test/index.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "index.js||index.js",
            "test/index.test.js||test/index.test.js"
          ],
          "candidate": [
            "index.js||index.js",
            "test/index.test.js||test/index.test.js"
          ]
        }
      },
      "candidate_diff": {
        "index.js||index.js": [
          "File: index.js -> index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: var slash = '/';",
          "8: var backslash = /\\\\/g;",
          "19: module.exports = function globParent(str, opts) {",
          "20:   var options = Object.assign({ flipBackslashes: true }, opts);",
          "",
          "[Removed Lines]",
          "9: var enclosure = /[\\{\\[].*[\\}\\]]$/;",
          "10: var globby = /(^|[^\\\\])([\\{\\[]|\\([^\\)]+$)/;",
          "11: var escaped = /\\\\([\\!\\*\\?\\|\\[\\]\\(\\)\\{\\}])/g;",
          "",
          "[Added Lines]",
          "9: var enclosure = /[{[].*[}\\]]$/;",
          "10: var globby = /(^|[^\\\\])([{[]|\\([^)]+$)/;",
          "11: var escaped = /\\\\([!*?|[\\](){}])/g;",
          "",
          "---------------"
        ],
        "test/index.test.js||test/index.test.js": [
          "File: test/index.test.js -> test/index.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict';",
          "3: var gp = require('../');",
          "5: var isWin32 = require('os').platform() === 'win32';",
          "89:     if (isWin32) {",
          "92:     } else {",
          "98:     }",
          "100:     done();",
          "101:   });",
          "120:     done();",
          "121:   });",
          "133:     done();",
          "134:   });",
          "142:     done();",
          "143:   });",
          "148:     done();",
          "149:   });",
          "150: });",
          "156:     done();",
          "157:   });",
          "162:     done();",
          "163:   });",
          "169:     done();",
          "170:   });",
          "175:     done();",
          "176:   });",
          "181:     done();",
          "182:   });",
          "187:     done();",
          "188:   });",
          "193:     done();",
          "194:   });",
          "200:     done();",
          "201:   });",
          "210:     done();",
          "211:   });",
          "215:     gp('{' + '/'.repeat(5000));",
          "",
          "[Removed Lines]",
          "4: var assert = require('assert');",
          "7: describe('glob-parent', function() {",
          "8:   it('should strip glob magic to return parent path', function(done) {",
          "9:     assert.equal(gp('.'), '.');",
          "10:     assert.equal(gp('.*'), '.');",
          "11:     assert.equal(gp('/.*'), '/');",
          "12:     assert.equal(gp('/.*/'), '/');",
          "13:     assert.equal(gp('a/.*/b'), 'a');",
          "14:     assert.equal(gp('a*/.*/b'), '.');",
          "15:     assert.equal(gp('*/a/b/c'), '.');",
          "16:     assert.equal(gp('*'), '.');",
          "17:     assert.equal(gp('*/'), '.');",
          "18:     assert.equal(gp('*/*'), '.');",
          "19:     assert.equal(gp('*/*/'), '.');",
          "20:     assert.equal(gp('**'), '.');",
          "21:     assert.equal(gp('**/'), '.');",
          "22:     assert.equal(gp('**/*'), '.');",
          "23:     assert.equal(gp('**/*/'), '.');",
          "24:     assert.equal(gp('/*.js'), '/');",
          "25:     assert.equal(gp('*.js'), '.');",
          "26:     assert.equal(gp('**/*.js'), '.');",
          "27:     assert.equal(gp('{a,b}'), '.');",
          "28:     assert.equal(gp('/{a,b}'), '/');",
          "29:     assert.equal(gp('/{a,b}/'), '/');",
          "30:     assert.equal(gp('(a|b)'), '.');",
          "31:     assert.equal(gp('/(a|b)'), '/');",
          "32:     assert.equal(gp('./(a|b)'), '.');",
          "33:     assert.equal(gp('a/(b c)'), 'a', 'not an extglob');",
          "34:     assert.equal(gp('a/(b c)/'), 'a/(b c)', 'not an extglob');",
          "35:     assert.equal(gp('a/(b c)/d'), 'a/(b c)', 'not an extglob');",
          "36:     assert.equal(gp('path/to/*.js'), 'path/to');",
          "37:     assert.equal(gp('/root/path/to/*.js'), '/root/path/to');",
          "38:     assert.equal(gp('chapter/foo [bar]/'), 'chapter');",
          "39:     assert.equal(gp('path/[a-z]'), 'path');",
          "40:     assert.equal(gp('[a-z]'), '.');",
          "41:     assert.equal(gp('path/{to,from}'), 'path');",
          "42:     assert.equal(gp('path/(to|from)'), 'path');",
          "43:     assert.equal(gp('path/(foo bar)/subdir/foo.*'), 'path/(foo bar)/subdir');",
          "44:     assert.equal(gp('path/!(to|from)'), 'path');",
          "45:     assert.equal(gp('path/?(to|from)'), 'path');",
          "46:     assert.equal(gp('path/+(to|from)'), 'path');",
          "47:     assert.equal(gp('path/*(to|from)'), 'path');",
          "48:     assert.equal(gp('path/@(to|from)'), 'path');",
          "49:     assert.equal(gp('path/!/foo'), 'path/!');",
          "50:     assert.equal(gp('path/?/foo'), 'path/?');",
          "51:     assert.equal(gp('path/+/foo'), 'path/+');",
          "52:     assert.equal(gp('path/*/foo'), 'path');",
          "53:     assert.equal(gp('path/@/foo'), 'path/@');",
          "54:     assert.equal(gp('path/!/foo/'), 'path/!/foo');",
          "55:     assert.equal(gp('path/?/foo/'), 'path/?/foo');",
          "56:     assert.equal(gp('path/+/foo/'), 'path/+/foo');",
          "57:     assert.equal(gp('path/*/foo/'), 'path');",
          "58:     assert.equal(gp('path/@/foo/'), 'path/@/foo');",
          "59:     assert.equal(gp('path/**/*'), 'path');",
          "60:     assert.equal(gp('path/**/subdir/foo.*'), 'path');",
          "61:     assert.equal(gp('path/subdir/**/foo.js'), 'path/subdir');",
          "62:     assert.equal(gp('path/!subdir/foo.js'), 'path/!subdir');",
          "63:     assert.equal(gp('path/{foo,bar}/'), 'path');",
          "65:     done();",
          "66:   });",
          "68:   it('should respect escaped characters', function(done) {",
          "69:     assert.equal(gp('path/\\\\*\\\\*/subdir/foo.*'), 'path/**/subdir');",
          "70:     assert.equal(gp('path/\\\\[\\\\*\\\\]/subdir/foo.*'), 'path/[*]/subdir');",
          "71:     assert.equal(gp('path/\\\\*(a|b)/subdir/foo.*'), 'path');",
          "72:     assert.equal(gp('path/\\\\*/(a|b)/subdir/foo.*'), 'path/*');",
          "73:     assert.equal(gp('path/\\\\*\\\\(a\\\\|b\\\\)/subdir/foo.*'), 'path/*(a|b)/subdir');",
          "74:     assert.equal(gp('path/\\\\[foo bar\\\\]/subdir/foo.*'), 'path/[foo bar]/subdir');",
          "75:     assert.equal(gp('path/\\\\[bar]/'), 'path/[bar]');",
          "76:     assert.equal(gp('path/\\\\[bar]'), 'path/[bar]');",
          "77:     assert.equal(gp('[bar]'), '.');",
          "78:     assert.equal(gp('[bar]/'), '.');",
          "79:     assert.equal(gp('./\\\\[bar]'), './[bar]');",
          "80:     assert.equal(gp('\\\\[bar]/'), '[bar]');",
          "81:     assert.equal(gp('\\\\!dir/*'), '!dir');",
          "82:     assert.equal(gp('[bar\\\\]/'), '.');",
          "83:     assert.equal(gp('path/foo \\\\[bar]/'), 'path/foo [bar]');",
          "84:     assert.equal(gp('path/\\\\{foo,bar}/'), 'path/{foo,bar}');",
          "85:     assert.equal(gp('\\\\{foo,bar}/'), '{foo,bar}');",
          "86:     assert.equal(gp('\\\\{foo,bar\\\\}/'), '{foo,bar}');",
          "87:     assert.equal(gp('{foo,bar\\\\}/'), '.');",
          "91:       assert.equal(gp('foo-\\\\(bar\\\\).md'), 'foo-');",
          "93:       assert.equal(gp('foo-\\\\(bar\\\\).md'), '.');",
          "94:       assert.equal(gp('\\\\[bar]'), '[bar]');",
          "95:       assert.equal(gp('[bar\\\\]'), '.');",
          "96:       assert.equal(gp('\\\\{foo,bar\\\\}'), '{foo,bar}');",
          "97:       assert.equal(gp('{foo,bar\\\\}'), '.');",
          "103:   it('should respect glob enclosures with embedded separators', function(done) {",
          "104:     assert.equal(gp('path/{,/,bar/baz,qux}/'), 'path');",
          "105:     assert.equal(gp('path/\\\\{,/,bar/baz,qux}/'), 'path/{,/,bar/baz,qux}');",
          "106:     assert.equal(gp('path/\\\\{,/,bar/baz,qux\\\\}/'), 'path/{,/,bar/baz,qux}');",
          "107:     assert.equal(gp('/{,/,bar/baz,qux}/'), '/');",
          "108:     assert.equal(gp('/\\\\{,/,bar/baz,qux}/'), '/{,/,bar/baz,qux}');",
          "109:     assert.equal(gp('{,/,bar/baz,qux}'), '.');",
          "110:     assert.equal(gp('\\\\{,/,bar/baz,qux\\\\}'), '{,/,bar/baz,qux}');",
          "111:     assert.equal(gp('\\\\{,/,bar/baz,qux}/'), '{,/,bar/baz,qux}');",
          "112:     assert.equal(gp('path/foo[a\\\\\\/]/'), 'path');",
          "113:     assert.equal(gp('path/foo\\\\[a\\\\\\/]/'), 'path/foo[a\\\\\\/]');",
          "114:     assert.equal(gp('foo[a\\\\\\/]'), '.');",
          "115:     assert.equal(gp('foo\\\\[a\\\\\\/]'), 'foo[a\\\\\\/]');",
          "116:     assert.equal(gp('path/(foo/bar|baz)'), 'path');",
          "117:     assert.equal(gp('path/(foo/bar|baz)/'), 'path');",
          "118:     assert.equal(gp('path/\\\\(foo/bar|baz)/'), 'path/(foo/bar|baz)');",
          "123:   it('should handle nested braces', function(done) {",
          "124:     assert.equal(gp('path/{../,./,{bar,/baz\\\\},qux\\\\}/'), 'path');",
          "125:     assert.equal(gp('path/{../,./,\\\\{bar,/baz},qux}/'), 'path');",
          "126:     assert.equal(gp('path/\\\\{../,./,\\\\{bar,/baz\\\\},qux\\\\}/'), 'path/{../,./,{bar,/baz},qux}');",
          "127:     assert.equal(gp('{../,./,{bar,/baz\\\\},qux\\\\}/'), '.');",
          "128:     assert.equal(gp('{../,./,{bar,/baz\\\\},qux\\\\}'), '.');",
          "129:     assert.equal(gp('path/{,/,bar/{baz,qux\\\\}}/'), 'path');",
          "130:     assert.equal(gp('path/{,/,bar/{baz,qux}\\\\}/'), 'path');",
          "136:   it('should return parent dirname from non-glob paths', function(done) {",
          "137:     assert.equal(gp('path'), '.');",
          "138:     assert.equal(gp('path/foo'), 'path');",
          "139:     assert.equal(gp('path/foo/'), 'path/foo');",
          "140:     assert.equal(gp('path/foo/bar.js'), 'path/foo');",
          "145:   it('should respect disabled auto flip backslashes', function(done) {",
          "146:     assert.equal(gp('foo-\\\\(bar\\\\).md', { flipBackslashes: false }), '.');",
          "152: describe('glob2base test patterns', function() {",
          "153:   it('should get a base name', function(done) {",
          "154:     assert.equal(gp('js/*.js'), 'js');",
          "159:   it('should get a base name from a nested glob', function(done) {",
          "160:     assert.equal(gp('js/**/test/*.js'), 'js');",
          "165:   it('should get a base name from a flat file', function(done) {",
          "166:     assert.equal(gp('js/test/wow.js'), 'js/test');",
          "167:     assert.equal(gp('js/test/wow.js'), 'js/test');",
          "172:   it('should get a base name from character class pattern', function(done) {",
          "173:     assert.equal(gp('js/t[a-z]st}/*.js'), 'js');",
          "178:   it('should get a base name from brace , expansion', function(done) {",
          "179:     assert.equal(gp('js/{src,test}/*.js'), 'js');",
          "184:   it('should get a base name from brace .. expansion', function(done) {",
          "185:     assert.equal(gp('js/test{0..9}/*.js'), 'js');",
          "190:   it('should get a base name from extglob', function(done) {",
          "191:     assert.equal(gp('js/t+(wo|est)/*.js'), 'js');",
          "196:   it('should get a base name from a path with non-exglob parens', function(done) {",
          "197:     assert.equal(gp('js/t(wo|est)/*.js'), 'js');",
          "198:     assert.equal(gp('js/t/(wo|est)/*.js'), 'js/t');",
          "203:   it('should get a base name from a complex brace glob', function(done) {",
          "204:     assert.equal(gp('lib/{components,pages}/**/{test,another}/*.txt'), 'lib');",
          "206:     assert.equal(gp('js/test/**/{images,components}/*.js'), 'js/test');",
          "208:     assert.equal(gp('ooga/{booga,sooga}/**/dooga/{eooga,fooga}'), 'ooga');",
          "213:   it('should not be susceptible to SNYK-JS-GLOBPARENT-1016905', function(done) {",
          "",
          "[Added Lines]",
          "4: var expect = require('expect');",
          "7: describe('glob-parent', function () {",
          "8:   it('should strip glob magic to return parent path', function (done) {",
          "9:     expect(gp('.')).toEqual('.');",
          "10:     expect(gp('.*')).toEqual('.');",
          "11:     expect(gp('/.*')).toEqual('/');",
          "12:     expect(gp('/.*/')).toEqual('/');",
          "13:     expect(gp('a/.*/b')).toEqual('a');",
          "14:     expect(gp('a*/.*/b')).toEqual('.');",
          "15:     expect(gp('*/a/b/c')).toEqual('.');",
          "16:     expect(gp('*')).toEqual('.');",
          "17:     expect(gp('*/')).toEqual('.');",
          "18:     expect(gp('*/*')).toEqual('.');",
          "19:     expect(gp('*/*/')).toEqual('.');",
          "20:     expect(gp('**')).toEqual('.');",
          "21:     expect(gp('**/')).toEqual('.');",
          "22:     expect(gp('**/*')).toEqual('.');",
          "23:     expect(gp('**/*/')).toEqual('.');",
          "24:     expect(gp('/*.js')).toEqual('/');",
          "25:     expect(gp('*.js')).toEqual('.');",
          "26:     expect(gp('**/*.js')).toEqual('.');",
          "27:     expect(gp('{a,b}')).toEqual('.');",
          "28:     expect(gp('/{a,b}')).toEqual('/');",
          "29:     expect(gp('/{a,b}/')).toEqual('/');",
          "30:     expect(gp('(a|b)')).toEqual('.');",
          "31:     expect(gp('/(a|b)')).toEqual('/');",
          "32:     expect(gp('./(a|b)')).toEqual('.');",
          "33:     expect(gp('a/(b c)')).toEqual('a'); // not an extglob",
          "34:     expect(gp('a/(b c)/')).toEqual('a/(b c)'); // not an extglob",
          "35:     expect(gp('a/(b c)/d')).toEqual('a/(b c)'); // not an extglob",
          "36:     expect(gp('path/to/*.js')).toEqual('path/to');",
          "37:     expect(gp('/root/path/to/*.js')).toEqual('/root/path/to');",
          "38:     expect(gp('chapter/foo [bar]/')).toEqual('chapter');",
          "39:     expect(gp('path/[a-z]')).toEqual('path');",
          "40:     expect(gp('[a-z]')).toEqual('.');",
          "41:     expect(gp('path/{to,from}')).toEqual('path');",
          "42:     expect(gp('path/(to|from)')).toEqual('path');",
          "43:     expect(gp('path/(foo bar)/subdir/foo.*')).toEqual('path/(foo bar)/subdir');",
          "44:     expect(gp('path/!(to|from)')).toEqual('path');",
          "45:     expect(gp('path/?(to|from)')).toEqual('path');",
          "46:     expect(gp('path/+(to|from)')).toEqual('path');",
          "47:     expect(gp('path/*(to|from)')).toEqual('path');",
          "48:     expect(gp('path/@(to|from)')).toEqual('path');",
          "49:     expect(gp('path/!/foo')).toEqual('path/!');",
          "50:     expect(gp('path/?/foo')).toEqual('path/?');",
          "51:     expect(gp('path/+/foo')).toEqual('path/+');",
          "52:     expect(gp('path/*/foo')).toEqual('path');",
          "53:     expect(gp('path/@/foo')).toEqual('path/@');",
          "54:     expect(gp('path/!/foo/')).toEqual('path/!/foo');",
          "55:     expect(gp('path/?/foo/')).toEqual('path/?/foo');",
          "56:     expect(gp('path/+/foo/')).toEqual('path/+/foo');",
          "57:     expect(gp('path/*/foo/')).toEqual('path');",
          "58:     expect(gp('path/@/foo/')).toEqual('path/@/foo');",
          "59:     expect(gp('path/**/*')).toEqual('path');",
          "60:     expect(gp('path/**/subdir/foo.*')).toEqual('path');",
          "61:     expect(gp('path/subdir/**/foo.js')).toEqual('path/subdir');",
          "62:     expect(gp('path/!subdir/foo.js')).toEqual('path/!subdir');",
          "63:     expect(gp('path/{foo,bar}/')).toEqual('path');",
          "65:     done();",
          "66:   });",
          "68:   it('should respect escaped characters', function (done) {",
          "69:     expect(gp('path/\\\\*\\\\*/subdir/foo.*')).toEqual('path/**/subdir');",
          "70:     expect(gp('path/\\\\[\\\\*\\\\]/subdir/foo.*')).toEqual('path/[*]/subdir');",
          "71:     expect(gp('path/\\\\*(a|b)/subdir/foo.*')).toEqual('path');",
          "72:     expect(gp('path/\\\\*/(a|b)/subdir/foo.*')).toEqual('path/*');",
          "73:     expect(gp('path/\\\\*\\\\(a\\\\|b\\\\)/subdir/foo.*')).toEqual('path/*(a|b)/subdir');",
          "74:     expect(gp('path/\\\\[foo bar\\\\]/subdir/foo.*')).toEqual('path/[foo bar]/subdir');",
          "75:     expect(gp('path/\\\\[bar]/')).toEqual('path/[bar]');",
          "76:     expect(gp('path/\\\\[bar]')).toEqual('path/[bar]');",
          "77:     expect(gp('[bar]')).toEqual('.');",
          "78:     expect(gp('[bar]/')).toEqual('.');",
          "79:     expect(gp('./\\\\[bar]')).toEqual('./[bar]');",
          "80:     expect(gp('\\\\[bar]/')).toEqual('[bar]');",
          "81:     expect(gp('\\\\!dir/*')).toEqual('!dir');",
          "82:     expect(gp('[bar\\\\]/')).toEqual('.');",
          "83:     expect(gp('path/foo \\\\[bar]/')).toEqual('path/foo [bar]');",
          "84:     expect(gp('path/\\\\{foo,bar}/')).toEqual('path/{foo,bar}');",
          "85:     expect(gp('\\\\{foo,bar}/')).toEqual('{foo,bar}');",
          "86:     expect(gp('\\\\{foo,bar\\\\}/')).toEqual('{foo,bar}');",
          "87:     expect(gp('{foo,bar\\\\}/')).toEqual('.');",
          "91:       expect(gp('foo-\\\\(bar\\\\).md')).toEqual('foo-');",
          "93:       expect(gp('foo-\\\\(bar\\\\).md')).toEqual('.');",
          "94:       expect(gp('\\\\[bar]')).toEqual('[bar]');",
          "95:       expect(gp('[bar\\\\]')).toEqual('.');",
          "96:       expect(gp('\\\\{foo,bar\\\\}')).toEqual('{foo,bar}');",
          "97:       expect(gp('{foo,bar\\\\}')).toEqual('.');",
          "103:   it('should respect glob enclosures with embedded separators', function (done) {",
          "105:     expect(gp('path/{,/,bar/baz,qux}/')).toEqual('path');",
          "106:     expect(gp('path/\\\\{,/,bar/baz,qux}/')).toEqual('path/{,/,bar/baz,qux}');",
          "107:     expect(gp('path/\\\\{,/,bar/baz,qux\\\\}/')).toEqual('path/{,/,bar/baz,qux}');",
          "108:     expect(gp('/{,/,bar/baz,qux}/')).toEqual('/');",
          "109:     expect(gp('/\\\\{,/,bar/baz,qux}/')).toEqual('/{,/,bar/baz,qux}');",
          "110:     expect(gp('{,/,bar/baz,qux}')).toEqual('.');",
          "111:     expect(gp('\\\\{,/,bar/baz,qux\\\\}')).toEqual('{,/,bar/baz,qux}');",
          "112:     expect(gp('\\\\{,/,bar/baz,qux}/')).toEqual('{,/,bar/baz,qux}');",
          "113:     expect(gp('path/foo[a\\\\\\/]/')).toEqual('path');",
          "114:     expect(gp('path/foo\\\\[a\\\\\\/]/')).toEqual('path/foo[a\\\\\\/]');",
          "115:     expect(gp('foo[a\\\\\\/]')).toEqual('.');",
          "116:     expect(gp('foo\\\\[a\\\\\\/]')).toEqual('foo[a\\\\\\/]');",
          "117:     expect(gp('path/(foo/bar|baz)')).toEqual('path');",
          "118:     expect(gp('path/(foo/bar|baz)/')).toEqual('path');",
          "119:     expect(gp('path/\\\\(foo/bar|baz)/')).toEqual('path/(foo/bar|baz)');",
          "125:   it('should handle nested braces', function (done) {",
          "126:     expect(gp('path/{../,./,{bar,/baz\\\\},qux\\\\}/')).toEqual('path');",
          "127:     expect(gp('path/{../,./,\\\\{bar,/baz},qux}/')).toEqual('path');",
          "128:     expect(gp('path/\\\\{../,./,\\\\{bar,/baz\\\\},qux\\\\}/')).toEqual('path/{../,./,{bar,/baz},qux}');",
          "129:     expect(gp('{../,./,{bar,/baz\\\\},qux\\\\}/')).toEqual('.');",
          "130:     expect(gp('{../,./,{bar,/baz\\\\},qux\\\\}')).toEqual('.');",
          "131:     expect(gp('path/{,/,bar/{baz,qux\\\\}}/')).toEqual('path');",
          "132:     expect(gp('path/{,/,bar/{baz,qux}\\\\}/')).toEqual('path');",
          "138:   it('should return parent dirname from non-glob paths', function (done) {",
          "139:     expect(gp('path')).toEqual('.');",
          "140:     expect(gp('path/foo')).toEqual('path');",
          "141:     expect(gp('path/foo/')).toEqual('path/foo');",
          "142:     expect(gp('path/foo/bar.js')).toEqual('path/foo');",
          "147:   it('should respect disabled auto flip backslashes', function (done) {",
          "148:     expect(gp('foo-\\\\(bar\\\\).md', { flipBackslashes: false })).toEqual('.');",
          "154: describe('glob2base test patterns', function () {",
          "155:   it('should get a base name', function (done) {",
          "156:     expect(gp('js/*.js')).toEqual('js');",
          "161:   it('should get a base name from a nested glob', function (done) {",
          "162:     expect(gp('js/**/test/*.js')).toEqual('js');",
          "167:   it('should get a base name from a flat file', function (done) {",
          "168:     expect(gp('js/test/wow.js')).toEqual('js/test');",
          "169:     expect(gp('js/test/wow.js')).toEqual('js/test');",
          "174:   it('should get a base name from character class pattern', function (done) {",
          "175:     expect(gp('js/t[a-z]st}/*.js')).toEqual('js');",
          "180:   it('should get a base name from brace , expansion', function (done) {",
          "181:     expect(gp('js/{src,test}/*.js')).toEqual('js');",
          "186:   it('should get a base name from brace .. expansion', function (done) {",
          "187:     expect(gp('js/test{0..9}/*.js')).toEqual('js');",
          "192:   it('should get a base name from extglob', function (done) {",
          "193:     expect(gp('js/t+(wo|est)/*.js')).toEqual('js');",
          "198:   it('should get a base name from a path with non-exglob parens', function (done) {",
          "199:     expect(gp('js/t(wo|est)/*.js')).toEqual('js');",
          "200:     expect(gp('js/t/(wo|est)/*.js')).toEqual('js/t');",
          "205:   it('should get a base name from a complex brace glob', function (done) {",
          "206:     expect(gp('lib/{components,pages}/**/{test,another}/*.txt')).toEqual('lib');",
          "208:     expect(gp('js/test/**/{images,components}/*.js')).toEqual('js/test');",
          "210:     expect(gp('ooga/{booga,sooga}/**/dooga/{eooga,fooga}')).toEqual('ooga');",
          "215:   it('should not be susceptible to SNYK-JS-GLOBPARENT-1016905', function (done) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219: });",
          "221: if (isWin32) {",
          "226:       done();",
          "227:     });",
          "",
          "[Removed Lines]",
          "222:   describe('technically invalid windows globs', function() {",
          "223:     it('should manage simple globs with backslash path separator', function(done) {",
          "224:       assert.equal(gp('C:\\\\path\\\\*.js'), 'C:/path');",
          "",
          "[Added Lines]",
          "224:   describe('technically invalid windows globs', function () {",
          "225:     it('should manage simple globs with backslash path separator', function (done) {",
          "226:       expect(gp('C:\\\\path\\\\*.js')).toEqual('C:/path');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9231168b0041fea3f8f954b3cceb56269fc6366",
      "candidate_info": {
        "commit_hash": "f9231168b0041fea3f8f954b3cceb56269fc6366",
        "repo": "gulpjs/glob-parent",
        "commit_url": "https://github.com/gulpjs/glob-parent/commit/f9231168b0041fea3f8f954b3cceb56269fc6366",
        "files": [
          "index.js",
          "test/index.test.js"
        ],
        "message": "fix: eliminate ReDoS (#36)\n\nThis change fixes a regular expression denial of service\nvulnerability.\n\nRefs: https://github.com/gulpjs/glob-parent/issues/32\nRefs: https://app.snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905",
        "before_after_code_files": [
          "index.js||index.js",
          "test/index.test.js||test/index.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "index.js||index.js",
            "test/index.test.js||test/index.test.js"
          ],
          "candidate": [
            "index.js||index.js",
            "test/index.test.js||test/index.test.js"
          ]
        }
      },
      "candidate_diff": {
        "index.js||index.js": [
          "File: index.js -> index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: var slash = '/';",
          "8: var backslash = /\\\\/g;",
          "10: var globby = /(^|[^\\\\])([\\{\\[]|\\([^\\)]+$)/;",
          "11: var escaped = /\\\\([\\!\\*\\?\\|\\[\\]\\(\\)\\{\\}])/g;",
          "",
          "[Removed Lines]",
          "9: var enclosure = /[\\{\\[].*[\\/]*.*[\\}\\]]$/;",
          "",
          "[Added Lines]",
          "9: var enclosure = /[\\{\\[].*[\\}\\]]$/;",
          "",
          "---------------"
        ],
        "test/index.test.js||test/index.test.js": [
          "File: test/index.test.js -> test/index.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:     done();",
          "211:   });",
          "212: });",
          "214: if (isWin32) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:   it('should not be susceptible to SNYK-JS-GLOBPARENT-1016905', function(done) {",
          "215:     gp('{' + '/'.repeat(5000));",
          "217:     done();",
          "218:   });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ef8a87f66b1a43d0591e7a8e4fc5a18415ee388",
      "candidate_info": {
        "commit_hash": "9ef8a87f66b1a43d0591e7a8e4fc5a18415ee388",
        "repo": "gulpjs/glob-parent",
        "commit_url": "https://github.com/gulpjs/glob-parent/commit/9ef8a87f66b1a43d0591e7a8e4fc5a18415ee388",
        "files": [
          "index.js"
        ],
        "message": "feat: pre-process braces/brackets sections\n\nReplace with simple * so that whatever path part they are in still gets\nrecognized as containing glob magic",
        "before_after_code_files": [
          "index.js||index.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "index.js||index.js"
          ],
          "candidate": [
            "index.js||index.js"
          ]
        }
      },
      "candidate_diff": {
        "index.js||index.js": [
          "File: index.js -> index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: module.exports = function globParent(str) {",
          "8:  str += 'a'; // preserves full path in case of trailing path separator",
          "9:  do {str = pathDirname.posix(str)} while (isglob(str));",
          "10:  return str.replace(/\\\\([\\*\\?\\|\\[\\]\\(\\)\\{\\}])/g, '$1');",
          "11: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:  str = str.replace(/(^|[^\\\\])(\\{([^{}]*?)}|\\[([^\\[\\]]*?)\\])/g, '$1*');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "99ec9fecc60ee488ded20a94dd4f18b4f55c4ccf",
      "candidate_info": {
        "commit_hash": "99ec9fecc60ee488ded20a94dd4f18b4f55c4ccf",
        "repo": "gulpjs/glob-parent",
        "commit_url": "https://github.com/gulpjs/glob-parent/commit/99ec9fecc60ee488ded20a94dd4f18b4f55c4ccf",
        "files": [
          "index.js",
          "test.js"
        ],
        "message": "fix: trailing escaped square brackets",
        "before_after_code_files": [
          "index.js||index.js",
          "test.js||test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "index.js||index.js"
          ],
          "candidate": [
            "index.js||index.js"
          ]
        }
      },
      "candidate_diff": {
        "index.js||index.js": [
          "File: index.js -> index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: module.exports = function globParent(str) {",
          "9:  str = str.replace(/(^|[^\\\\])(\\{([^{}]*?)}|\\[([^\\[\\]]*?)\\])/g, '$1*');",
          "13:  str += 'a';",
          "",
          "[Removed Lines]",
          "10:  if (/[\\}\\}]$/.test(str)) str += '/';",
          "",
          "[Added Lines]",
          "10:  if (/[\\}\\]]$/.test(str)) str += '/';",
          "",
          "---------------"
        ],
        "test.js||test.js": [
          "File: test.js -> test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:     assert.equal(gp('\\\\{,/,bar/baz,qux\\\\}'), '{,/,bar/baz,qux}');",
          "80:     assert.equal(gp('path/foo[a\\\\\\/]/'), 'path');",
          "81:     assert.equal(gp('path/foo\\\\[a\\\\\\/]/'), 'path/foo[a\\\\\\/]');",
          "82:   });",
          "84:   it('should return parent dirname from non-glob paths', function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:     assert.equal(gp('foo[a\\\\\\/]'), '.');",
          "83:     assert.equal(gp('foo\\\\[a\\\\\\/]'), 'foo[a\\\\\\/]');",
          "",
          "---------------"
        ]
      }
    }
  ]
}