{
  "cve_id": "CVE-2020-26149",
  "cve_desc": "NATS nats.js before 2.0.0-209, nats.ws before 1.0.0-111, and nats.deno before 1.0.0-9 allow credential disclosure from a client to a server.",
  "repo": "nats-io/nats.ws",
  "patch_hash": "0a37ac2a411ff63f0707cda69a268c5fc4079eb7",
  "patch_info": {
    "commit_hash": "0a37ac2a411ff63f0707cda69a268c5fc4079eb7",
    "repo": "nats-io/nats.ws",
    "commit_url": "https://github.com/nats-io/nats.ws/commit/0a37ac2a411ff63f0707cda69a268c5fc4079eb7",
    "files": [
      ".github/workflows/natsws.yml",
      "package.json",
      "src/nats-base-client.ts",
      "src/ws_transport.ts"
    ],
    "message": "[update] [security] updated nats-base-client to v1.0.0-9 (#47)\n\n* [update] [security] updated nats-base-client to v1.0.0-9\n\n* bumped package version",
    "before_after_code_files": [
      "src/nats-base-client.ts||src/nats-base-client.ts",
      "src/ws_transport.ts||src/ws_transport.ts"
    ]
  },
  "patch_diff": {
    "src/nats-base-client.ts||src/nats-base-client.ts": [
      "File: src/nats-base-client.ts -> src/nats-base-client.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-8/nats-base-client/internal_mod.ts\";",
      "",
      "[Added Lines]",
      "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-9/nats-base-client/internal_mod.ts\";",
      "",
      "---------------"
    ],
    "src/ws_transport.ts||src/ws_transport.ts": [
      "File: src/ws_transport.ts -> src/ws_transport.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "26:   delay,",
      "27: } from \"./nats-base-client.ts\";",
      "30: const LANG = \"nats.ws\";",
      "32: export class WsTransport implements Transport {",
      "",
      "[Removed Lines]",
      "29: const VERSION = \"1.0.0-110\";",
      "",
      "[Added Lines]",
      "29: const VERSION = \"1.0.0-111\";",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b56ef7e391d00c06016d41a6bcdfab60b5ece0d9",
      "candidate_info": {
        "commit_hash": "b56ef7e391d00c06016d41a6bcdfab60b5ece0d9",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/b56ef7e391d00c06016d41a6bcdfab60b5ece0d9",
        "files": [
          ".gitignore",
          "package.json",
          "src/connect.ts",
          "src/mod.ts",
          "src/nats-base-client.ts",
          "src/ws_transport.ts"
        ],
        "message": "[update] nbc to v1.0.2 (#95)",
        "before_after_code_files": [
          "src/connect.ts||src/connect.ts",
          "src/mod.ts||src/mod.ts",
          "src/nats-base-client.ts||src/nats-base-client.ts",
          "src/ws_transport.ts||src/ws_transport.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/connect.ts||src/connect.ts": [
          "File: src/connect.ts -> src/connect.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   setTransportFactory,",
          "20:   Transport,",
          "21:   TransportFactory,",
          "24: import { WsTransport } from \"./ws_transport.ts\";",
          "",
          "[Removed Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.1/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.2/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/mod.ts||src/mod.ts": [
          "File: src/mod.ts -> src/mod.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: export { connect } from \"./connect.ts\";",
          "",
          "[Removed Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.1/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.2/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/nats-base-client.ts||src/nats-base-client.ts": [
          "File: src/nats-base-client.ts -> src/nats-base-client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "16: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.1/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "16: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.2/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   Server,",
          "20:   ServerInfo,",
          "21:   Transport,",
          "23: import {",
          "24:   checkOptions,",
          "25:   DataBuffer,",
          "",
          "[Removed Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.1/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.2/nats-base-client/internal_mod.ts\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   INFO,",
          "31:   NatsError,",
          "32:   render,",
          "36: const LANG = \"nats.ws\";",
          "38: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.1/nats-base-client/internal_mod.ts\";",
          "35: const VERSION = \"1.1.0-4\";",
          "",
          "[Added Lines]",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.2/nats-base-client/internal_mod.ts\";",
          "35: const VERSION = \"1.1.0\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1563b4f5149c8003366d287f793ea02ec4fafa58",
      "candidate_info": {
        "commit_hash": "1563b4f5149c8003366d287f793ea02ec4fafa58",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/1563b4f5149c8003366d287f793ea02ec4fafa58",
        "files": [
          "nats.d.ts",
          "package-lock.json",
          "package.json",
          "src/connect.ts",
          "src/mod.ts",
          "src/nats-base-client.ts",
          "src/ws_transport.ts"
        ],
        "message": "release 1.2.0 (#105)\n\n* [UPDATE] nbc 1.1.0 - see https://github.com/nats-io/nats.deno/releases/tag/v1.1.0",
        "before_after_code_files": [
          "nats.d.ts||nats.d.ts",
          "src/connect.ts||src/connect.ts",
          "src/mod.ts||src/mod.ts",
          "src/nats-base-client.ts||src/nats-base-client.ts",
          "src/ws_transport.ts||src/ws_transport.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "nats.d.ts||nats.d.ts": [
          "File: nats.d.ts -> nats.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:     readonly deleted: string[];",
          "126: }",
          "127: export interface Sub<T> extends AsyncIterable<T> {",
          "128:     unsubscribe(max?: number): void;",
          "129:     drain(): Promise<void>;",
          "130:     isDraining(): boolean;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:     closed: Promise<void>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "266: export interface JetStreamOptions {",
          "267:     apiPrefix?: string;",
          "268:     timeout?: number;",
          "269: }",
          "270: export interface JetStreamManager {",
          "271:     consumers: ConsumerAPI;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270:     domain?: string;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "293:         lastMsgID: string;",
          "294:         streamName: string;",
          "295:         lastSequence: number;",
          "296:     }>;",
          "297: }",
          "298: export interface ConsumerInfoable {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "298:         lastSubjectSequence: number;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "358:     maxMessages(max: number): void;",
          "359:     queue(n: string): void;",
          "360:     callback(fn: JsMsgCallback): void;",
          "361: }",
          "362: export interface Lister<T> {",
          "363:     next(): Promise<T[]>;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "364:     idleHeartbeat(millis: number): void;",
          "365:     flowControl(): void;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "375:     info(stream: string, opts?: StreamInfoRequestOptions): Promise<StreamInfo>;",
          "376:     add(cfg: Partial<StreamConfig>): Promise<StreamInfo>;",
          "377:     update(cfg: StreamConfig): Promise<StreamInfo>;",
          "379:     delete(stream: string): Promise<boolean>;",
          "380:     list(): Lister<StreamInfo>;",
          "383:     find(subject: string): Promise<string>;",
          "384: }",
          "385: export interface JsMsg {",
          "",
          "[Removed Lines]",
          "378:     purge(stream: string): Promise<PurgeResponse>;",
          "381:     deleteMessage(stream: string, seq: number): Promise<boolean>;",
          "382:     getMessage(stream: string, seq: number): Promise<StoredMsg>;",
          "",
          "[Added Lines]",
          "383:     purge(stream: string, opts?: PurgeOpts): Promise<PurgeResponse>;",
          "386:     deleteMessage(stream: string, seq: number, erase?: boolean): Promise<boolean>;",
          "387:     getMessage(stream: string, query: MsgRequest): Promise<StoredMsg>;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "472:     \"num_replicas\": number;",
          "473:     \"no_ack\"?: boolean;",
          "474:     \"template_owner\"?: string;",
          "476:     placement?: Placement;",
          "477:     mirror?: StreamSource;",
          "478:     sources?: StreamSource[];",
          "479: }",
          "480: export interface StreamSource {",
          "481:     name: string;",
          "485: }",
          "486: export interface Placement {",
          "487:     cluster: string;",
          "",
          "[Removed Lines]",
          "475:     \"duplicate_window\"?: number;",
          "482:     \"opt_start_seq\": number;",
          "483:     \"opt_start_time\": string;",
          "484:     \"filter_subject\": string;",
          "",
          "[Added Lines]",
          "480:     \"duplicate_window\"?: Nanos;",
          "484:     \"max_msgs_per_subject\"?: number;",
          "488:     \"opt_start_seq\"?: number;",
          "489:     \"opt_start_time\"?: string;",
          "490:     \"filter_subject\"?: string;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "551:     active: Nanos;",
          "552:     error?: ApiError;",
          "553: }",
          "554: export interface PurgeResponse extends Success {",
          "555:     purged: number;",
          "556: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "560: export declare type PurgeOpts = PurgeBySeq | PurgeTrimOpts | PurgeBySubject;",
          "561: export declare type PurgeBySeq = {",
          "562:     filter?: string;",
          "563:     seq: number;",
          "564: };",
          "565: export declare type PurgeTrimOpts = {",
          "566:     filter?: string;",
          "567:     keep: number;",
          "568: };",
          "569: export declare type PurgeBySubject = {",
          "570:     filter: string;",
          "571: };",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "594:     success: boolean;",
          "595: }",
          "596: export declare type SuccessResponse = ApiResponse & Success;",
          "598:     seq: number;",
          "599: }",
          "601:     \"no_erase\"?: boolean;",
          "602: }",
          "603: export interface JetStreamAccountStats {",
          "",
          "[Removed Lines]",
          "597: export interface MsgRequest {",
          "600: export interface MsgDeleteRequest extends MsgRequest {",
          "",
          "[Added Lines]",
          "615: export interface LastForMsgRequest {",
          "616:     \"last_by_subj\": string;",
          "617: }",
          "618: export interface SeqMsgRequest {",
          "621: export declare type MsgRequest = SeqMsgRequest | LastForMsgRequest | number;",
          "622: export interface MsgDeleteRequest extends SeqMsgRequest {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "607:     consumers: number;",
          "608:     api: JetStreamApiStats;",
          "609:     limits: AccountLimits;",
          "610: }",
          "611: export interface JetStreamApiStats {",
          "612:     total: number;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "632:     domain?: string;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "628:     \"opt_start_seq\"?: number;",
          "629:     \"opt_start_time\"?: string;",
          "630:     \"ack_policy\": AckPolicy;",
          "632:     \"max_deliver\"?: number;",
          "633:     \"filter_subject\"?: string;",
          "634:     \"replay_policy\": ReplayPolicy;",
          "",
          "[Removed Lines]",
          "631:     \"ack_wait\"?: number;",
          "",
          "[Added Lines]",
          "654:     \"ack_wait\"?: Nanos;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "636:     \"sample_freq\"?: string;",
          "637:     \"max_waiting\"?: number;",
          "638:     \"max_ack_pending\"?: number;",
          "639: }",
          "640: export interface Consumer {",
          "641:     \"stream_name\": string;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662:     \"idle_heartbeat\"?: Nanos;",
          "663:     \"flow_control\"?: boolean;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "653:     \"no_wait\": boolean;",
          "654: }",
          "656: export declare type MsgAdapter<T> = (",
          "657:   err: NatsError | null,",
          "658:   msg: Msg,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "681: export declare enum JsHeaders {",
          "682:     StreamSourceHdr = \"Nats-Stream-Source\",",
          "683:     LastConsumerSeqHdr = \"Nats-Last-Consumer\",",
          "684:     LastStreamSeqHdr = \"Nats-Last-Stream\"",
          "685: }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "672: }",
          "674: export declare type DispatchedFn<T> = (data: T | null) => void;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "707: export declare function defaultConsumer(name: string, opts?: Partial<ConsumerConfig>): ConsumerConfig;",
          "708: export declare function nanos(millis: number): Nanos;",
          "709: export declare function millis(ns: Nanos): number;",
          "710: export declare function isFlowControlMsg(msg: Msg): boolean;",
          "711: export declare function isHeartbeatMsg(msg: Msg): boolean;",
          "",
          "---------------"
        ],
        "src/connect.ts||src/connect.ts": [
          "File: src/connect.ts -> src/connect.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   setTransportFactory,",
          "20:   Transport,",
          "21:   TransportFactory,",
          "24: import { WsTransport } from \"./ws_transport.ts\";",
          "",
          "[Removed Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.8/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.1.0/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/mod.ts||src/mod.ts": [
          "File: src/mod.ts -> src/mod.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: export { connect } from \"./connect.ts\";",
          "",
          "[Removed Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.8/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.1.0/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/nats-base-client.ts||src/nats-base-client.ts": [
          "File: src/nats-base-client.ts -> src/nats-base-client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "16: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.8/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "16: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.1.0/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   Server,",
          "20:   ServerInfo,",
          "21:   Transport,",
          "23: import {",
          "24:   checkOptions,",
          "25:   DataBuffer,",
          "",
          "[Removed Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.8/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.1.0/nats-base-client/internal_mod.ts\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   INFO,",
          "31:   NatsError,",
          "32:   render,",
          "36: const LANG = \"nats.ws\";",
          "38: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.8/nats-base-client/internal_mod.ts\";",
          "35: const VERSION = \"1.1.6\";",
          "",
          "[Added Lines]",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.1.0/nats-base-client/internal_mod.ts\";",
          "35: const VERSION = \"1.2.0\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a0558e4b39341d7c42d9313c0844b62e750e7d56",
      "candidate_info": {
        "commit_hash": "a0558e4b39341d7c42d9313c0844b62e750e7d56",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/a0558e4b39341d7c42d9313c0844b62e750e7d56",
        "files": [
          "README.md",
          "package-lock.json",
          "package.json",
          "src/ws_transport.ts"
        ],
        "message": "preparing for release",
        "before_after_code_files": [
          "src/ws_transport.ts||src/ws_transport.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:   render,",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0/nats-base-client/internal_mod.ts\";",
          "36: const LANG = \"nats.ws\";",
          "38: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "35: const VERSION = \"1.0.0-124\";",
          "",
          "[Added Lines]",
          "35: const VERSION = \"1.0.0\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff4ae94af1ec8a23a69d58bb2609869f579995ca",
      "candidate_info": {
        "commit_hash": "ff4ae94af1ec8a23a69d58bb2609869f579995ca",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/ff4ae94af1ec8a23a69d58bb2609869f579995ca",
        "files": [
          "README.md",
          "examples/bench.js",
          "examples/chat.js",
          "examples/simple.html",
          "nats.d.ts",
          "package-lock.json",
          "package.json",
          "src/connect.ts",
          "src/nats-base-client.ts",
          "src/ws_transport.ts",
          "test/auth.js",
          "test/autounsub.js",
          "test/basics.js",
          "test/queues.js",
          "test/reconnect.js",
          "test/urlparse.js"
        ],
        "message": "support full websocket URLs (#46)\n\n* - [BREAKING] removed `ws` option. If you required `ws`, specify the server as `ws://host/port`.\n- Default host:port is understood as WSS",
        "before_after_code_files": [
          "examples/bench.js||examples/bench.js",
          "examples/chat.js||examples/chat.js",
          "examples/simple.html||examples/simple.html",
          "nats.d.ts||nats.d.ts",
          "src/connect.ts||src/connect.ts",
          "src/nats-base-client.ts||src/nats-base-client.ts",
          "src/ws_transport.ts||src/ws_transport.ts",
          "test/auth.js||test/auth.js",
          "test/autounsub.js||test/autounsub.js",
          "test/basics.js||test/basics.js",
          "test/queues.js||test/queues.js",
          "test/reconnect.js||test/reconnect.js",
          "test/urlparse.js||test/urlparse.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "examples/bench.js||examples/bench.js": [
          "File: examples/bench.js -> examples/bench.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: async function run() {",
          "53:   const server = getString(\"server\");",
          "54:   const ws = isChecked(\"ws\");",
          "56:   nc.closed()",
          "57:     .then((err) => {",
          "58:       if (err) {",
          "",
          "[Removed Lines]",
          "55:   const nc = await connect({ servers: server, ws: ws, pendingLimit: 8192 });",
          "",
          "[Added Lines]",
          "55:   const nc = await connect(",
          "56:     {",
          "57:       servers: `${ws ? \"ws://\" : \"wss://\"}${server}`,",
          "58:       pendingLimit: 8192,",
          "59:     },",
          "60:   );",
          "",
          "---------------"
        ],
        "examples/chat.js||examples/chat.js": [
          "File: examples/chat.js -> examples/chat.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:   const conn = await connect(",
          "34:   );",
          "",
          "[Removed Lines]",
          "33:     { servers: \"localhost:9222\", ws: true },",
          "",
          "[Added Lines]",
          "33:     { servers: \"ws://localhost:9222\" },",
          "",
          "---------------"
        ],
        "examples/simple.html||examples/simple.html": [
          "File: examples/simple.html -> examples/simple.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   const init = async function () {",
          "28:     addEntry('connected to NATS!');",
          "",
          "[Removed Lines]",
          "27:     const nc = await connect({ servers: 'localhost:9222', ws: true })",
          "",
          "[Added Lines]",
          "27:     const nc = await connect({ servers: 'ws://localhost:9222' })",
          "",
          "---------------"
        ],
        "nats.d.ts||nats.d.ts": [
          "File: nats.d.ts -> nats.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:   user?: string;",
          "63:   verbose?: boolean;",
          "64:   waitOnFirstConnect?: boolean;",
          "66: }",
          "68: export interface TlsOptions {",
          "",
          "[Removed Lines]",
          "65:   ws?: boolean;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/connect.ts||src/connect.ts": [
          "File: src/connect.ts -> src/connect.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:   NatsConnection,",
          "18:   ConnectionOptions,",
          "19:   setTransportFactory,",
          "20:   Transport,",
          "21: } from \"./nats-base-client.ts\";",
          "23: import { WsTransport } from \"./ws_transport.ts\";",
          "25: export function connect(opts: ConnectionOptions = {}): Promise<NatsConnection> {",
          "26:   setTransportFactory((): Transport => {",
          "27:     return new WsTransport();",
          "28:   });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:   setUrlParseFn,",
          "26: export function urlParseFn(u: string): string {",
          "27:   const ut = /^(.*:\\/\\/)(.*)/;",
          "28:   if (!ut.test(u)) {",
          "29:     u = `https://${u}`;",
          "30:   }",
          "31:   let url = new URL(u);",
          "32:   const srcProto = url.protocol.toLowerCase();",
          "33:   if (srcProto !== \"https:\" && srcProto !== \"http\") {",
          "34:     u = u.replace(/^(.*:\\/\\/)(.*)/gm, \"$2\");",
          "35:     url = new URL(`http://${u}`);",
          "36:   }",
          "38:   let protocol;",
          "39:   let port;",
          "40:   let host = url.hostname;",
          "41:   let path = url.pathname;",
          "42:   let search = url.search || \"\";",
          "44:   switch (srcProto) {",
          "45:     case \"http:\":",
          "46:     case \"ws:\":",
          "47:     case \"nats:\":",
          "48:       port = url.port || \"80\";",
          "49:       protocol = \"ws:\";",
          "50:       break;",
          "51:     default:",
          "52:       port = url.port || \"443\";",
          "53:       protocol = \"wss:\";",
          "54:       break;",
          "55:   }",
          "56:   return `${protocol}//${host}:${port}${path}${search}`;",
          "57: }",
          "60:   setUrlParseFn(urlParseFn);",
          "",
          "---------------"
        ],
        "src/nats-base-client.ts||src/nats-base-client.ts": [
          "File: src/nats-base-client.ts -> src/nats-base-client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-7/nats-base-client/internal_mod.ts\";",
          "17: import type { ConnectionOptions as CO } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-7/nats-base-client/internal_mod.ts\";",
          "19: export interface ConnectionOptions extends CO {",
          "20:   ws?: boolean;",
          "21: }",
          "",
          "[Added Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/main/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: import type {",
          "16:   Transport,",
          "17:   Deferred,",
          "18: } from \"./nats-base-client.ts\";",
          "19: import {",
          "20:   ErrorCode,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:   ConnectionOptions,",
          "19:   Server,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:   delay,",
          "25: } from \"./nats-base-client.ts\";",
          "30: const LANG = \"nats.ws\";",
          "32: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "27: import type { ConnectionOptions } from \"./nats-base-client.ts\";",
          "29: const VERSION = \"1.0.0-108\";",
          "",
          "[Added Lines]",
          "29: const VERSION = \"1.0.0-110\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "39:   private socket: WebSocket;",
          "40:   private options!: ConnectionOptions;",
          "41:   socketClosed = false;",
          "43:   yields: Uint8Array[] = [];",
          "44:   signal: Deferred<void> = deferred<void>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:   encrypted = false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "48:   }",
          "50:   async connect(",
          "52:     options: ConnectionOptions,",
          "53:   ): Promise<void> {",
          "54:     const connected = false;",
          "55:     const connLock = deferred<void>();",
          "57:     this.options = options;",
          "63:     this.socket.binaryType = \"arraybuffer\";",
          "65:     this.socket.onopen = () => {",
          "",
          "[Removed Lines]",
          "51:     hp: { hostname: string; port: number },",
          "58:     const proto = this.options.ws ? \"ws\" : \"wss\";",
          "60:     this.socket = new WebSocket(",
          "61:       `${proto}://${hp.hostname}:${hp.port}`,",
          "62:     );",
          "",
          "[Added Lines]",
          "52:     server: Server,",
          "59:     const u = server.src;",
          "60:     this.encrypted = u.indexOf(\"wss://\") === 0;",
          "61:     this.socket = new WebSocket(u);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "155:   }",
          "157:   isEncrypted(): boolean {",
          "160:   }",
          "162:   send(frame: Uint8Array): Promise<void> {",
          "",
          "[Removed Lines]",
          "159:     return !this.options.ws;",
          "",
          "[Added Lines]",
          "157:     return this.connected && this.encrypted;",
          "",
          "---------------"
        ],
        "test/auth.js||test/auth.js": [
          "File: test/auth.js -> test/auth.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:   t.plan(1);",
          "46:   const ns = await NatsServer.start(conf);",
          "47:   try {",
          "49:     await nc.close();",
          "50:     t.fail(\"shouldnt have been able to connect\");",
          "51:   } catch (ex) {",
          "",
          "[Removed Lines]",
          "48:     const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "48:     const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:   const ns = await NatsServer.start(conf);",
          "60:   try {",
          "61:     const nc = await connect(",
          "63:     );",
          "64:     await nc.close();",
          "65:     t.fail(\"shouldnt have been able to connect\");",
          "",
          "[Removed Lines]",
          "62:       { port: ns.websocket, user: \"me\", pass: \"hello\", ws: true },",
          "",
          "[Added Lines]",
          "62:       { servers: `ws://127.0.0.1:${ns.websocket}`, user: \"me\", pass: \"hello\" },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:   t.plan(1);",
          "74:   const ns = await NatsServer.start(conf);",
          "75:   const nc = await connect(",
          "77:   );",
          "78:   await nc.flush();",
          "79:   await nc.close();",
          "",
          "[Removed Lines]",
          "76:     { port: ns.websocket, user: \"derek\", pass: \"foobar\", ws: true },",
          "",
          "[Added Lines]",
          "76:     {",
          "77:       servers: `ws://127.0.0.1:${ns.websocket}`,",
          "78:       user: \"derek\",",
          "79:       pass: \"foobar\",",
          "80:     },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86:   const ns = await NatsServer.start(conf);",
          "87:   const lock = Lock(2);",
          "88:   const nc = await connect(",
          "90:   );",
          "91:   nc.closed().then((err) => {",
          "92:     t.is(err.code, ErrorCode.PERMISSIONS_VIOLATION);",
          "",
          "[Removed Lines]",
          "89:     { port: ns.websocket, user: \"derek\", pass: \"foobar\", ws: true },",
          "",
          "[Added Lines]",
          "93:     {",
          "94:       servers: `ws://127.0.0.1:${ns.websocket}`,",
          "95:       user: \"derek\",",
          "96:       pass: \"foobar\",",
          "97:     },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "112:   const ns = await NatsServer.start(conf);",
          "113:   const lock = Lock();",
          "114:   const nc = await connect(",
          "116:   );",
          "117:   nc.closed().then((err) => {",
          "118:     t.is(err.code, ErrorCode.PERMISSIONS_VIOLATION);",
          "",
          "[Removed Lines]",
          "115:     { port: ns.websocket, user: \"derek\", pass: \"foobar\", ws: true },",
          "",
          "[Added Lines]",
          "123:     {",
          "124:       servers: `ws://127.0.0.1:${ns.websocket}`,",
          "125:       user: \"derek\",",
          "126:       pass: \"foobar\",",
          "127:     },",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "136: test(\"auth - user and token is rejected\", async (t) => {",
          "137:   connect(",
          "139:   )",
          "140:     .then(async (nc) => {",
          "141:       await nc.close();",
          "",
          "[Removed Lines]",
          "138:     { servers: \"127.0.0.1:4222\", user: \"derek\", token: \"foobar\", ws: true },",
          "",
          "[Added Lines]",
          "150:     { servers: \"ws://127.0.0.1:4222\", user: \"derek\", token: \"foobar\" },",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "150:   const ns = await NatsServer.start(",
          "151:     Object.assign({ authorization: { token: \"foo\" } }, wsConfig()),",
          "152:   );",
          "154:   await nc.flush();",
          "155:   await nc.close();",
          "156:   await ns.stop();",
          "",
          "[Removed Lines]",
          "153:   const nc = await connect({ port: ns.websocket, token: \"foo\", ws: true });",
          "",
          "[Added Lines]",
          "165:   const nc = await connect(",
          "166:     { servers: `ws://127.0.0.1:${ns.websocket}`, token: \"foo\" },",
          "167:   );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "171:   }, wsConfig());",
          "172:   const ns = await NatsServer.start(conf);",
          "173:   const nc = await connect(",
          "175:   );",
          "176:   await nc.flush();",
          "177:   await nc.close();",
          "",
          "[Removed Lines]",
          "174:     { port: ns.websocket, authenticator: nkeyAuthenticator(seed), ws: true },",
          "",
          "[Added Lines]",
          "188:     {",
          "189:       servers: `ws://127.0.0.1:${ns.websocket}`,",
          "190:       authenticator: nkeyAuthenticator(seed),",
          "191:     },",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "205:   const ns = await NatsServer.start(conf);",
          "206:   const nc = await connect(",
          "207:     {",
          "209:       authenticator: credsAuthenticator(new TextEncoder().encode(creds)),",
          "211:     },",
          "212:   );",
          "213:   await nc.flush();",
          "",
          "[Removed Lines]",
          "208:       port: ns.websocket,",
          "210:       ws: true,",
          "",
          "[Added Lines]",
          "225:       servers: `ws://127.0.0.1:${ns.websocket}`,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "241:   };",
          "242:   const nc = await connect(",
          "243:     {",
          "245:       authenticator: authenticator,",
          "247:     },",
          "248:   );",
          "249:   await nc.flush();",
          "",
          "[Removed Lines]",
          "244:       port: ns.websocket,",
          "246:       ws: true,",
          "",
          "[Added Lines]",
          "260:       servers: `ws://127.0.0.1:${ns.websocket}`,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "269:   const ns = await NatsServer.start(conf);",
          "270:   const nc = await connect(",
          "271:     {",
          "273:       authenticator: jwtAuthenticator(jwt, new TextEncoder().encode(useed)),",
          "275:     },",
          "276:   );",
          "277:   await nc.flush();",
          "",
          "[Removed Lines]",
          "272:       port: ns.websocket,",
          "274:       ws: true,",
          "",
          "[Added Lines]",
          "287:       servers: `ws://127.0.0.1:${ns.websocket}`,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "288:   };",
          "289:   await connect(",
          "290:     {",
          "292:       maxReconnectAttempts: 1,",
          "293:       authenticator: authenticator,",
          "295:     },",
          "296:   ).then(() => {",
          "297:     t.fail(\"shouldn't have connected\");",
          "",
          "[Removed Lines]",
          "291:       port: ns.websocket,",
          "294:       ws: true,",
          "",
          "[Added Lines]",
          "305:       servers: `ws://127.0.0.1:${ns.websocket}`,",
          "",
          "---------------"
        ],
        "test/autounsub.js||test/autounsub.js": [
          "File: test/autounsub.js -> test/autounsub.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: test(\"autounsub - max option\", async (t) => {",
          "23:   const ns = await NatsServer.start(wsConfig());",
          "26:   const subj = createInbox();",
          "27:   const sub = nc.subscribe(subj, { max: 10 });",
          "",
          "[Removed Lines]",
          "24:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "24:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: test(\"autounsub - unsubscribe\", async (t) => {",
          "39:   const ns = await NatsServer.start(wsConfig());",
          "42:   const subj = createInbox();",
          "43:   const sub = nc.subscribe(subj, { max: 10 });",
          "",
          "[Removed Lines]",
          "40:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "40:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55: test(\"autounsub - can unsub from auto-unsubscribed\", async (t) => {",
          "56:   const ns = await NatsServer.start(wsConfig());",
          "59:   const subj = createInbox();",
          "60:   const sub = nc.subscribe(subj, { max: 1 });",
          "",
          "[Removed Lines]",
          "57:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "57:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "72: test(\"autounsub - can break to unsub\", async (t) => {",
          "73:   const ns = await NatsServer.start(wsConfig());",
          "76:   const subj = createInbox();",
          "77:   const sub = nc.subscribe(subj, { max: 20 });",
          "",
          "[Removed Lines]",
          "74:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "74:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "94: test(\"autounsub - can change auto-unsub to a higher value\", async (t) => {",
          "95:   const ns = await NatsServer.start(wsConfig());",
          "98:   const subj = createInbox();",
          "99:   const sub = nc.subscribe(subj, { max: 1 });",
          "",
          "[Removed Lines]",
          "96:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "96:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "112:   t,",
          "113: ) => {",
          "114:   const ns = await NatsServer.start(wsConfig());",
          "117:   const subj = createInbox();",
          "",
          "[Removed Lines]",
          "115:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "115:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "143:   t,",
          "144: ) => {",
          "145:   const ns = await NatsServer.start(wsConfig());",
          "148:   const subj = createInbox();",
          "149:   const lock = Lock(5);",
          "",
          "[Removed Lines]",
          "146:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "146:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "170: test(\"autounsub - check subscription leaks\", async (t) => {",
          "171:   const ns = await NatsServer.start(wsConfig());",
          "174:   let subj = createInbox();",
          "175:   let sub = nc.subscribe(subj);",
          "",
          "[Removed Lines]",
          "172:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "172:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "182: test(\"autounsub - check request leaks\", async (t) => {",
          "183:   const ns = await NatsServer.start(wsConfig());",
          "186:   let subj = createInbox();",
          "",
          "[Removed Lines]",
          "184:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "184:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "220: test(\"autounsub - check cancelled request leaks\", async (t) => {",
          "221:   const ns = await NatsServer.start(wsConfig());",
          "224:   let subj = createInbox();",
          "",
          "[Removed Lines]",
          "222:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "222:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------"
        ],
        "test/basics.js||test/basics.js": [
          "File: test/basics.js -> test/basics.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: test(\"basics - connect\", async (t) => {",
          "27:   const ns = await NatsServer.start(wsConfig());",
          "29:   await nc.flush();",
          "30:   await nc.close();",
          "31:   await ns.stop();",
          "",
          "[Removed Lines]",
          "28:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "28:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: test(\"basics - tls connect\", async (t) => {",
          "36:   const conf = {",
          "37:     websocket: {",
          "39:       port: -1,",
          "40:       tls: tlsConfig(),",
          "41:     },",
          "",
          "[Removed Lines]",
          "38:       no_tls: true,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51: test(\"basics - publish\", async (t) => {",
          "52:   const ns = await NatsServer.start(wsConfig());",
          "54:   nc.publish(createInbox());",
          "55:   await nc.flush();",
          "56:   await nc.close();",
          "",
          "[Removed Lines]",
          "53:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "52:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "61: test(\"basics - no publish without subject\", async (t) => {",
          "62:   t.plan(1);",
          "63:   const ns = await NatsServer.start(wsConfig());",
          "65:   try {",
          "66:     nc.publish(\"\");",
          "67:     fail(\"should not be able to publish without a subject\");",
          "",
          "[Removed Lines]",
          "64:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "63:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "77:   t.plan(1);",
          "78:   const ns = await NatsServer.start(wsConfig());",
          "79:   const subj = createInbox();",
          "81:   const sub = nc.subscribe(subj);",
          "82:   const iter = (async () => {",
          "83:     for await (const m of sub) {",
          "",
          "[Removed Lines]",
          "80:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "79:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "96:   t.plan(12);",
          "97:   const ns = await NatsServer.start(wsConfig());",
          "98:   const subj = createInbox();",
          "100:   const sub = nc.subscribe(subj, { max: 1000, queue: \"aaa\" });",
          "",
          "[Removed Lines]",
          "99:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "98:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "132: test(\"basics - subscriptions iterate\", async (t) => {",
          "133:   const ns = await NatsServer.start(wsConfig());",
          "134:   const lock = Lock();",
          "136:   const subj = createInbox();",
          "137:   const sub = nc.subscribe(subj);",
          "138:   const _ = (async () => {",
          "",
          "[Removed Lines]",
          "135:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "134:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "151: test(\"basics - subscriptions pass exact subject to cb\", async (t) => {",
          "152:   const ns = await NatsServer.start(wsConfig());",
          "155:   const s = createInbox();",
          "156:   const subj = `${s}.foo.bar.baz`;",
          "",
          "[Removed Lines]",
          "153:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "152:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "173: test(\"basics - subscribe returns Subscription\", async (t) => {",
          "174:   const ns = await NatsServer.start(wsConfig());",
          "177:   const subj = createInbox();",
          "178:   const sub = nc.subscribe(subj);",
          "",
          "[Removed Lines]",
          "175:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "174:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "191: test(\"basics - wildcard subscriptions\", async (t) => {",
          "192:   const ns = await NatsServer.start(wsConfig());",
          "195:   const single = 3;",
          "196:   const partial = 2;",
          "",
          "[Removed Lines]",
          "193:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "192:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "221: test(\"basics - correct data in message\", async (t) => {",
          "222:   const ns = await NatsServer.start(wsConfig());",
          "225:   const sc = StringCodec();",
          "226:   const subj = createInbox();",
          "",
          "[Removed Lines]",
          "223:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "222:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "245: test(\"basics - correct reply in message\", async (t) => {",
          "246:   const ns = await NatsServer.start(wsConfig());",
          "249:   const s = createInbox();",
          "250:   const r = createInbox();",
          "",
          "[Removed Lines]",
          "247:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "246:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "266: test(\"basics - respond returns false if no reply subject set\", async (t) => {",
          "267:   const ns = await NatsServer.start(wsConfig());",
          "270:   let s = createInbox();",
          "271:   const dr = deferred();",
          "",
          "[Removed Lines]",
          "268:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "267:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "286: test(\"basics - closed cannot subscribe\", async (t) => {",
          "287:   const ns = await NatsServer.start(wsConfig());",
          "289:   await nc.close();",
          "290:   await ns.stop();",
          "",
          "[Removed Lines]",
          "288:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "287:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "302: test(\"basics - close cannot request\", async (t) => {",
          "303:   const ns = await NatsServer.start(wsConfig());",
          "305:   await nc.close();",
          "306:   await ns.stop();",
          "",
          "[Removed Lines]",
          "304:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "303:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "318: test(\"basics - flush returns promise\", async (t) => {",
          "319:   const ns = await NatsServer.start(wsConfig());",
          "322:   let p = nc.flush();",
          "323:   if (!p) {",
          "",
          "[Removed Lines]",
          "320:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "319:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "332: test(\"basics - unsubscribe after close\", async (t) => {",
          "333:   const ns = await NatsServer.start(wsConfig());",
          "336:   let sub = nc.subscribe(createInbox());",
          "337:   await nc.close();",
          "",
          "[Removed Lines]",
          "334:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "333:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "344: test(\"basics - unsubscribe stops messages\", async (t) => {",
          "345:   const ns = await NatsServer.start(wsConfig());",
          "348:   const subj = createInbox();",
          "",
          "[Removed Lines]",
          "346:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "345:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "366: test(\"basics - request\", async (t) => {",
          "367:   const ns = await NatsServer.start(wsConfig());",
          "370:   const sc = StringCodec();",
          "371:   const s = createInbox();",
          "",
          "[Removed Lines]",
          "368:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "367:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "384: test(\"basics - request timeout\", async (t) => {",
          "385:   const ns = await NatsServer.start(wsConfig());",
          "388:   const s = createInbox();",
          "389:   const lock = Lock();",
          "",
          "[Removed Lines]",
          "386:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "385:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "405: test(\"basics - request cancel rejects\", async (t) => {",
          "406:   const ns = await NatsServer.start(wsConfig());",
          "409:   const s = createInbox();",
          "410:   const lock = Lock();",
          "",
          "[Removed Lines]",
          "407:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "406:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "429: test(\"basics - subscription with timeout\", async (t) => {",
          "430:   const ns = await NatsServer.start(wsConfig());",
          "433:   const lock = Lock(1);",
          "434:   const sub = nc.subscribe(createInbox(), { max: 1, timeout: 250 });",
          "",
          "[Removed Lines]",
          "431:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "430:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "446: test(\"basics - subscription expecting 2 doesn't fire timeout\", async (t) => {",
          "447:   const ns = await NatsServer.start(wsConfig());",
          "450:   const subj = createInbox();",
          "451:   const sub = nc.subscribe(subj, { max: 2, timeout: 500 });",
          "",
          "[Removed Lines]",
          "448:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "447:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "467: test(\"basics - subscription timeout auto cancels\", async (t) => {",
          "468:   const ns = await NatsServer.start(wsConfig());",
          "471:   const subj = createInbox();",
          "472:   let c = 0;",
          "",
          "[Removed Lines]",
          "469:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "468:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "490: test(\"basics - no mux requests create normal subs\", async (t) => {",
          "491:   const ns = await NatsServer.start(wsConfig());",
          "494:   const _ = nc.request(createInbox(), Empty, { timeout: 1000, noMux: true });",
          "495:   t.is(nc.protocol.subscriptions.size(), 1);",
          "",
          "[Removed Lines]",
          "492:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "491:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "506: test(\"basics - no mux requests timeout\", async (t) => {",
          "507:   const ns = await NatsServer.start(wsConfig());",
          "510:   const lock = Lock();",
          "511:   nc.request(createInbox(), Empty, { timeout: 250, noMux: true })",
          "",
          "[Removed Lines]",
          "508:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "507:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "521: test(\"basics - no mux requests\", async (t) => {",
          "522:   const ns = await NatsServer.start(wsConfig());",
          "525:   const subj = createInbox();",
          "526:   const sub = nc.subscribe(subj);",
          "",
          "[Removed Lines]",
          "523:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "522:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "540: test(\"basics - no max_payload messages\", async (t) => {",
          "541:   const ns = await NatsServer.start(wsConfig());",
          "544:   t.truthy(nc.protocol.info.max_payload);",
          "545:   const big = new Uint8Array(nc.protocol.info.max_payload + 1);",
          "",
          "[Removed Lines]",
          "542:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "541:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "582: test(\"basics - empty message\", async (t) => {",
          "583:   const ns = await NatsServer.start(wsConfig());",
          "586:   const subj = createInbox();",
          "587:   const mp = deferred();",
          "",
          "[Removed Lines]",
          "584:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "583:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "604: test(\"basics - subject is required\", async (t) => {",
          "605:   const ns = await NatsServer.start(wsConfig());",
          "608:   t.plan(2);",
          "609:   t.throws(() => {",
          "",
          "[Removed Lines]",
          "606:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "605:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "621: test(\"basics - payload is only Uint8Array\", async (t) => {",
          "622:   const ns = await NatsServer.start(wsConfig());",
          "625:   t.throws(() => {",
          "626:     nc.publish(createInbox(), \"s\");",
          "",
          "[Removed Lines]",
          "623:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "622:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "633: test(\"basics - disconnect reconnects\", async (t) => {",
          "634:   const ns = await NatsServer.start(wsConfig());",
          "637:   const lock = new Lock();",
          "638:   const status = nc.status();",
          "",
          "[Removed Lines]",
          "635:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "634:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "653:   await ns.stop();",
          "654:   t.pass();",
          "655: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "656: test(\"basics - wss connection\", async (t) => {",
          "657:   const conf = {",
          "658:     websocket: {",
          "659:       port: -1,",
          "660:       tls: tlsConfig(),",
          "661:     },",
          "662:   };",
          "664:   const ns = await NatsServer.start(conf);",
          "665:   const nc = await connect({ servers: `wss://127.0.0.1:${ns.websocket}` });",
          "666:   await nc.flush();",
          "667:   await nc.close();",
          "668:   await ns.stop();",
          "669:   t.pass();",
          "670: });",
          "",
          "---------------"
        ],
        "test/queues.js||test/queues.js": [
          "File: test/queues.js -> test/queues.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: test(\"queues - deliver to single queue\", async (t) => {",
          "24:   const ns = await NatsServer.start(wsConfig());",
          "27:   const subj = createInbox();",
          "28:   const subs = [];",
          "",
          "[Removed Lines]",
          "25:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "25:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: test(\"queues - deliver to multiple queues\", async (t) => {",
          "43:   const ns = await NatsServer.start(wsConfig());",
          "46:   const subj = createInbox();",
          "47:   const fn = (queue) => {",
          "",
          "[Removed Lines]",
          "44:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "44:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73: test(\"queues - queues and subs independent\", async (t) => {",
          "74:   const ns = await NatsServer.start(wsConfig());",
          "77:   const subj = createInbox();",
          "78:   const subs = [];",
          "",
          "[Removed Lines]",
          "75:   const nc = await connect({ port: ns.websocket, ws: true });",
          "",
          "[Added Lines]",
          "75:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "---------------"
        ],
        "test/reconnect.js||test/reconnect.js": [
          "File: test/reconnect.js -> test/reconnect.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: test(\"reconnect - should receive when some servers are invalid\", async (t) => {",
          "31:   const ns = await NatsServer.start(wsConfig());",
          "36:   const lock = Lock(1);",
          "37:   const subj = createInbox();",
          "",
          "[Removed Lines]",
          "33:   const servers = [\"127.0.0.1:7\", `127.0.0.1:${ns.websocket}`];",
          "34:   const nc = await connect({ servers: servers, noRandomize: true, ws: true });",
          "",
          "[Added Lines]",
          "33:   const servers = [\"ws://127.0.0.1:7\", `ws://127.0.0.1:${ns.websocket}`];",
          "34:   const nc = await connect({ servers: servers, noRandomize: true });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:   const ns = await NatsServer.start(wsConfig());",
          "57:   let nc = await connect({",
          "59:     waitOnFirstConnect: true,",
          "60:     reconnectTimeWait: 100,",
          "61:     maxReconnectAttempts: 10,",
          "63:   });",
          "65:   let disconnects = 0;",
          "",
          "[Removed Lines]",
          "58:     port: ns.websocket,",
          "62:     ws: true,",
          "",
          "[Added Lines]",
          "58:     servers: `ws://127.0.0.1:${ns.websocket}`,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93: test(\"reconnect - reconnect not emitted if suppressed\", async (t) => {",
          "94:   const ns = await NatsServer.start(wsConfig());",
          "95:   let nc = await connect({",
          "97:     reconnect: false,",
          "99:   });",
          "101:   let disconnects = 0;",
          "",
          "[Removed Lines]",
          "96:     port: ns.websocket,",
          "98:     ws: true,",
          "",
          "[Added Lines]",
          "95:     servers: `ws://127.0.0.1:${ns.websocket}`,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "120: test(\"reconnect - reconnecting after proper delay\", async (t) => {",
          "121:   const ns = await NatsServer.start(wsConfig());",
          "122:   let nc = await connect({",
          "124:     reconnectTimeWait: 500,",
          "125:     maxReconnectAttempts: 1,",
          "127:   });",
          "129:   const serverLastConnect = nc.protocol.servers.getCurrentServer().lastConnect;",
          "",
          "[Removed Lines]",
          "123:     port: ns.websocket,",
          "126:     ws: true,",
          "",
          "[Added Lines]",
          "121:     servers: `ws://127.0.0.1:${ns.websocket}`,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "148: test(\"reconnect - indefinite reconnects\", async (t) => {",
          "149:   let ns = await NatsServer.start(wsConfig());",
          "150:   let nc = await connect({",
          "152:     reconnectTimeWait: 100,",
          "153:     maxReconnectAttempts: -1,",
          "155:   });",
          "157:   let disconnects = 0;",
          "",
          "[Removed Lines]",
          "151:     port: ns.websocket,",
          "154:     ws: true,",
          "",
          "[Added Lines]",
          "148:     servers: `ws://127.0.0.1:${ns.websocket}`,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "203:   let hasDefaultFn;",
          "204:   let dc = await connect({",
          "206:     reconnect: false,",
          "208:   });",
          "209:   hasDefaultFn = typeof dc.options.reconnectDelayHandler === \"function\";",
          "211:   let nc = await connect({",
          "213:     maxReconnectAttempts: 1,",
          "214:     reconnectDelayHandler: h,",
          "216:   });",
          "218:   await ns.stop();",
          "",
          "[Removed Lines]",
          "205:     port: ns.websocket,",
          "207:     ws: true,",
          "212:     port: ns.websocket,",
          "215:     ws: true,",
          "",
          "[Added Lines]",
          "201:     servers: `ws://127.0.0.1:${ns.websocket}`,",
          "207:     servers: `ws://127.0.0.1:${ns.websocket}`,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "225: test(\"reconnect - internal disconnect forces reconnect\", async (t) => {",
          "226:   const ns = await NatsServer.start(wsConfig());",
          "227:   const nc = await connect({",
          "229:     reconnect: true,",
          "230:     reconnectTimeWait: 200,",
          "232:   });",
          "234:   let stale = false;",
          "",
          "[Removed Lines]",
          "228:     port: ns.websocket,",
          "231:     ws: true,",
          "",
          "[Added Lines]",
          "222:     servers: `ws://127.0.0.1:${ns.websocket}`,",
          "",
          "---------------"
        ],
        "test/urlparse.js||test/urlparse.js": [
          "File: test/urlparse.js -> test/urlparse.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: const test = require(\"ava\");",
          "16: const { urlParseFn } = require(\"../build/wst/connect.js\");",
          "18: test(\"url - parse\", (t) => {",
          "19:   const u = [",
          "20:     { in: \"foo\", expect: \"wss://foo:443/\" },",
          "21:     { in: \"foo:100\", expect: \"wss://foo:100/\" },",
          "22:     { in: \"foo/\", expect: \"wss://foo:443/\" },",
          "23:     { in: \"foo/hello\", expect: \"wss://foo:443/hello\" },",
          "24:     { in: \"foo:100/hello\", expect: \"wss://foo:100/hello\" },",
          "25:     { in: \"foo/hello?one=two\", expect: \"wss://foo:443/hello?one=two\" },",
          "26:     { in: \"foo:100/hello?one=two\", expect: \"wss://foo:100/hello?one=two\" },",
          "27:     { in: \"nats://foo\", expect: \"ws://foo:80/\" },",
          "28:     { in: \"tls://foo\", expect: \"wss://foo:443/\" },",
          "29:     { in: \"ws://foo\", expect: \"ws://foo:80/\" },",
          "30:     { in: \"ws://foo:100\", expect: \"ws://foo:100/\" },",
          "31:     {",
          "32:       in: \"[2001:db8:1f70::999:de8:7648:6e8]\",",
          "33:       expect: \"wss://[2001:db8:1f70:0:999:de8:7648:6e8]:443/\",",
          "34:     },",
          "35:     {",
          "36:       in: \"[2001:db8:1f70::999:de8:7648:6e8]:100\",",
          "37:       expect: \"wss://[2001:db8:1f70:0:999:de8:7648:6e8]:100/\",",
          "38:     },",
          "39:   ];",
          "41:   t.plan(u.length);",
          "43:   u.forEach((tc) => {",
          "44:     const out = urlParseFn(tc.in);",
          "45:     t.is(out, tc.expect, `test ${tc.in}`);",
          "46:   });",
          "47: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b435609f6f5933ffee099e45e0d818dd5c2983b0",
      "candidate_info": {
        "commit_hash": "b435609f6f5933ffee099e45e0d818dd5c2983b0",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/b435609f6f5933ffee099e45e0d818dd5c2983b0",
        "files": [
          ".github/workflows/natsws.yml",
          "package.json",
          "src/nats-base-client.ts",
          "src/ws_transport.ts",
          "test/basics.js"
        ],
        "message": "[update] updated nats-base-client (#54)",
        "before_after_code_files": [
          "src/nats-base-client.ts||src/nats-base-client.ts",
          "src/ws_transport.ts||src/ws_transport.ts",
          "test/basics.js||test/basics.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/nats-base-client.ts||src/nats-base-client.ts": [
          "File: src/nats-base-client.ts -> src/nats-base-client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-11/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-12/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:   render,",
          "27: } from \"./nats-base-client.ts\";",
          "30: const LANG = \"nats.ws\";",
          "32: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "29: const VERSION = \"1.0.0-113\";",
          "",
          "[Added Lines]",
          "29: const VERSION = \"1.0.0-114\";",
          "",
          "---------------"
        ],
        "test/basics.js||test/basics.js": [
          "File: test/basics.js -> test/basics.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "668:   await ns.stop();",
          "669:   t.pass();",
          "670: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "672: test(\"basics - drain connection publisher\", async (t) => {",
          "673:   const ns = await NatsServer.start(wsConfig());",
          "675:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "676:   const nc2 = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "678:   const subj = createInbox();",
          "680:   const lock = new Lock(5);",
          "681:   nc2.subscribe(subj, {",
          "682:     callback: (err, m) => {",
          "683:       lock.unlock();",
          "684:     },",
          "685:   });",
          "686:   await nc2.flush();",
          "688:   for (let i = 0; i < 5; i++) {",
          "689:     nc.publish(subj);",
          "690:   }",
          "691:   await nc.drain();",
          "692:   await lock;",
          "693:   await nc.close();",
          "694:   t.pass();",
          "695: });",
          "",
          "---------------"
        ]
      }
    }
  ]
}