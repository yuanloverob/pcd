{
  "cve_id": "CVE-2023-1001",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in xuliangzhan vxe-table up to 3.7.9. This issue affects the function export of the file packages/textarea/src/textarea.js of the component vxe-textarea. The manipulation of the argument inputValue leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 3.7.10 is able to address this issue. The patch is named d70b0e089740b65a22c89c106ebc4627ac48a22d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-266123.",
  "repo": "x-extends/vxe-table",
  "patch_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
  "patch_info": {
    "commit_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "repo": "x-extends/vxe-table",
    "commit_url": "https://github.com/x-extends/vxe-table/commit/d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "files": [
      "packages/table/src/body.js",
      "packages/textarea/src/textarea.js"
    ],
    "message": "textarea \u4fee\u590d\u6ce8\u5165xss\u95ee\u9898 #I8O21R",
    "before_after_code_files": [
      "packages/table/src/body.js||packages/table/src/body.js",
      "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js"
    ]
  },
  "patch_diff": {
    "packages/table/src/body.js||packages/table/src/body.js": [
      "File: packages/table/src/body.js -> packages/table/src/body.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "499:     elemStore[`${prefix}xSpace`] = $refs.xSpace",
      "500:     elemStore[`${prefix}ySpace`] = $refs.ySpace",
      "501:     elemStore[`${prefix}emptyBlock`] = $refs.emptyBlock",
      "504:   },",
      "505:   beforeDestroy () {",
      "506:     clearTimeout(this.wheelTime)",
      "",
      "[Removed Lines]",
      "502:     this.$el.onscroll = this.scrollEvent",
      "503:     this.$el._onscroll = this.scrollEvent",
      "",
      "[Added Lines]",
      "502:     if (this.$el) {",
      "503:       this.$el.onscroll = this.scrollEvent",
      "504:       this.$el._onscroll = this.scrollEvent",
      "505:     }",
      "",
      "---------------"
    ],
    "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js": [
      "File: packages/textarea/src/textarea.js -> packages/textarea/src/textarea.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:         autoTxtElem.className = ['vxe-textarea--autosize', size ? `size--${size}` : ''].join(' ')",
      "189:         autoTxtElem.style.width = `${textElem.clientWidth}px`",
      "190:         autoTxtElem.style.padding = textStyle.padding",
      "192:       }",
      "193:     },",
      "194:     handleResize () {",
      "",
      "[Removed Lines]",
      "191:         autoTxtElem.innerHTML = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "[Added Lines]",
      "191:         autoTxtElem.innerText = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "46aa96a3c2b04529eff487bf42ea0ca62da68f30",
      "candidate_info": {
        "commit_hash": "46aa96a3c2b04529eff487bf42ea0ca62da68f30",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/46aa96a3c2b04529eff487bf42ea0ca62da68f30",
        "files": [
          "package.json",
          "packages/icon/src/icon.js",
          "styles/icon.scss"
        ],
        "message": "fix icon",
        "before_after_code_files": [
          "packages/icon/src/icon.js||packages/icon/src/icon.js",
          "styles/icon.scss||styles/icon.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/icon/src/icon.js||packages/icon/src/icon.js": [
          "File: packages/icon/src/icon.js -> packages/icon/src/icon.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:   render (h) {",
          "9:     const { name, roll, status } = this",
          "10:     return h('i', {",
          "12:       on: {",
          "13:         click: this.clickEvent",
          "14:       }",
          "",
          "[Removed Lines]",
          "11:       class: [`vxe-icon-${name}`, roll || '', status || ''],",
          "",
          "[Added Lines]",
          "11:       class: [`vxe-icon-${name}`, roll || '', status ? [`theme--${status}`] : ''],",
          "",
          "---------------"
        ],
        "styles/icon.scss||styles/icon.scss": [
          "File: styles/icon.scss -> styles/icon.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:   }",
          "16: }",
          "18: [class*=\"vxe-icon-\"] {",
          "19:   font-family: \"vxeiconfont\" !important;",
          "20:   font-style: normal;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: $btnThemeList: (",
          "19:   (",
          "20:     name: \"primary\",",
          "21:     textColor: var(--vxe-primary-color),",
          "22:   ),",
          "23:   (",
          "24:     name: \"success\",",
          "25:     textColor: var(--vxe-success-color),",
          "26:   ),",
          "27:   (",
          "28:     name: \"info\",",
          "29:     textColor: var(--vxe-info-color),",
          "30:   ),",
          "31:   (",
          "32:     name: \"warning\",",
          "33:     textColor: var(--vxe-warning-color),",
          "34:   ),",
          "35:   (",
          "36:     name: \"danger\",",
          "37:     textColor: var(--vxe-danger-color),",
          "38:   )",
          "39: );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:   &.roll {",
          "43:     animation: rollCircle 1s infinite linear;",
          "44:   }",
          "45: }",
          "47: .vxe-icon-time:before {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:   @for $index from 0 to length($btnThemeList) {",
          "69:     $item: nth($btnThemeList, $index + 1);",
          "70:     &.theme--#{map-get($item, name)} {",
          "71:       color: map-get($item, textColor);",
          "72:     }",
          "73:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dab04a086c3f4b1b0aa1017bcddef377e1256037",
      "candidate_info": {
        "commit_hash": "dab04a086c3f4b1b0aa1017bcddef377e1256037",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/dab04a086c3f4b1b0aa1017bcddef377e1256037",
        "files": [
          "package.json",
          "packages/grid/src/grid.js"
        ],
        "message": "releases 3.7.6",
        "before_after_code_files": [
          "packages/grid/src/grid.js||packages/grid/src/grid.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/grid/src/grid.js||packages/grid/src/grid.js": [
          "File: packages/grid/src/grid.js -> packages/grid/src/grid.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "609:             const selectRecords = $xetable.getCheckboxRecords()",
          "610:             const removeRecords = selectRecords.filter(row => !$xetable.isInsertByRow(row))",
          "611:             const body = { removeRecords }",
          "613:             if (selectRecords.length) {",
          "614:               return this.handleDeleteRow(code, 'vxe.grid.deleteSelectRecord', () => {",
          "615:                 if (!removeRecords.length) {",
          "",
          "[Removed Lines]",
          "612:             const applyArgs = [{ $grid: this, code, button, body, options: ajaxMethods }].concat(args)",
          "",
          "[Added Lines]",
          "612:             const applyArgs = [{ $grid: this, code, button, body, form: formData, options: ajaxMethods }].concat(args)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "673:           if (ajaxMethods) {",
          "674:             const body = Object.assign({ pendingRecords: this.pendingRecords }, this.getRecordset())",
          "675:             const { insertRecords, removeRecords, updateRecords, pendingRecords } = body",
          "678:             if (insertRecords.length) {",
          "679:               body.pendingRecords = pendingRecords.filter(row => insertRecords.indexOf(row) === -1)",
          "",
          "[Removed Lines]",
          "676:             const applyArgs = [{ $grid: this, code, button, body, options: ajaxMethods }].concat(args)",
          "",
          "[Added Lines]",
          "676:             const applyArgs = [{ $grid: this, code, button, body, form: formData, options: ajaxMethods }].concat(args)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09d7b3a2683e1b7f71f5d018b29d3292652233e3",
      "candidate_info": {
        "commit_hash": "09d7b3a2683e1b7f71f5d018b29d3292652233e3",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/09d7b3a2683e1b7f71f5d018b29d3292652233e3",
        "files": [
          "packages/toolbar/src/toolbar.js"
        ],
        "message": "\u6e32\u67d3\u5668\u589e\u52a0 toolbarButtonClassName\uff0ctoolbarToolClassName",
        "before_after_code_files": [
          "packages/toolbar/src/toolbar.js||packages/toolbar/src/toolbar.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/toolbar/src/toolbar.js||packages/toolbar/src/toolbar.js": [
          "File: packages/toolbar/src/toolbar.js -> packages/toolbar/src/toolbar.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     }",
          "51:     if (compConf) {",
          "52:       const renderToolbarButton = compConf.renderToolbarButton || compConf.renderButton",
          "53:       if (renderToolbarButton) {",
          "54:         return h('span', {",
          "57:       }",
          "58:     }",
          "59:     return h('vxe-button', {",
          "",
          "[Removed Lines]",
          "55:           class: 'vxe-button--item'",
          "56:         }, getSlotVNs(renderToolbarButton.call(_vm, h, buttonRender, { $grid: $xegrid, $table: $xetable, button: item })))",
          "",
          "[Added Lines]",
          "53:       const toolbarButtonClassName = compConf.toolbarButtonClassName",
          "54:       const params = { $grid: $xegrid, $table: $xetable, button: item }",
          "57:           class: ['vxe-button--item', toolbarButtonClassName ? (XEUtils.isFunction(toolbarButtonClassName) ? toolbarButtonClassName(params) : toolbarButtonClassName) : '']",
          "58:         }, getSlotVNs(renderToolbarButton.call(_vm, h, buttonRender, params)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:     if (compConf) {",
          "99:       const { renderToolbarTool } = compConf",
          "100:       if (renderToolbarTool) {",
          "101:         return h('span', {",
          "104:       }",
          "105:     }",
          "106:     return h('vxe-button', {",
          "",
          "[Removed Lines]",
          "102:           class: 'vxe-tool--item'",
          "103:         }, getSlotVNs(renderToolbarTool.call(_vm, h, toolRender, { $table: $xetable, $grid: $xegrid, tool: item })))",
          "",
          "[Added Lines]",
          "103:         const toolbarToolClassName = compConf.toolbarToolClassName",
          "104:         const params = { $table: $xetable, $grid: $xegrid, tool: item }",
          "106:           class: ['vxe-tool--item', toolbarToolClassName ? (XEUtils.isFunction(toolbarToolClassName) ? toolbarToolClassName(params) : toolbarToolClassName) : '']",
          "107:         }, getSlotVNs(renderToolbarTool.call(_vm, h, toolRender, params)))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "439a036065507a6d59c59d960b16f219798ec47a",
      "candidate_info": {
        "commit_hash": "439a036065507a6d59c59d960b16f219798ec47a",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/439a036065507a6d59c59d960b16f219798ec47a",
        "files": [
          "package.json",
          "packages/export/src/mixin.js",
          "packages/form/src/form.js",
          "packages/table/src/cell.js",
          "packages/table/src/column.js",
          "packages/table/src/columnInfo.js",
          "types/column.d.ts",
          "types/export.d.ts",
          "types/form.d.ts"
        ],
        "message": "\u589e\u52a0\u53c2\u6570 headerExportMethod",
        "before_after_code_files": [
          "packages/export/src/mixin.js||packages/export/src/mixin.js",
          "packages/form/src/form.js||packages/form/src/form.js",
          "packages/table/src/cell.js||packages/table/src/cell.js",
          "packages/table/src/column.js||packages/table/src/column.js",
          "packages/table/src/columnInfo.js||packages/table/src/columnInfo.js",
          "types/column.d.ts||types/column.d.ts",
          "types/export.d.ts||types/export.d.ts",
          "types/form.d.ts||types/form.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/export/src/mixin.js||packages/export/src/mixin.js": [
          "File: packages/export/src/mixin.js -> packages/export/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:   return cellValue === 'TRUE' || cellValue === 'true' || cellValue === true",
          "216: }",
          "220: }",
          "222: function getFooterCellValue ($xetable, opts, items, column) {",
          "",
          "[Removed Lines]",
          "218: function getHeaderTitle (opts, column) {",
          "219:   return (opts.original ? column.property : column.getTitle()) || ''",
          "",
          "[Added Lines]",
          "218: function getHeaderTitle ($xetable, opts, column) {",
          "219:   const { headerExportMethod } = column",
          "220:   return headerExportMethod ? headerExportMethod({ column, $table: $xetable }) : ((opts.original ? column.property : column.getTitle()) || '')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271: function toCsv ($xetable, opts, columns, datas) {",
          "272:   let content = csvBOM",
          "273:   if (opts.isHeader) {",
          "275:   }",
          "276:   datas.forEach(row => {",
          "277:     content += columns.map(column => toTxtCellLabel(getCsvCellTypeLabel(column, row[column.id]))).join(',') + enterSymbol",
          "",
          "[Removed Lines]",
          "274:     content += columns.map(column => toTxtCellLabel(getHeaderTitle(opts, column))).join(',') + enterSymbol",
          "",
          "[Added Lines]",
          "275:     content += columns.map(column => toTxtCellLabel(getHeaderTitle($xetable, opts, column))).join(',') + enterSymbol",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "289: function toTxt ($xetable, opts, columns, datas) {",
          "290:   let content = ''",
          "291:   if (opts.isHeader) {",
          "293:   }",
          "294:   datas.forEach(row => {",
          "295:     content += columns.map(column => toTxtCellLabel(row[column.id])).join('\\t') + enterSymbol",
          "",
          "[Removed Lines]",
          "292:     content += columns.map(column => toTxtCellLabel(getHeaderTitle(opts, column))).join('\\t') + enterSymbol",
          "",
          "[Added Lines]",
          "293:     content += columns.map(column => toTxtCellLabel(getHeaderTitle($xetable, opts, column))).join('\\t') + enterSymbol",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "355:           `<tr>${cols.map(column => {",
          "356:             const headAlign = column.headerAlign || column.align || allHeaderAlign || allAlign",
          "357:             const classNames = hasEllipsis($xetable, column, 'showHeaderOverflow', allColumnHeaderOverflow) ? ['col--ellipsis'] : []",
          "359:             let childWidth = 0",
          "360:             let countChild = 0",
          "361:             XEUtils.eachTree([column], item => {",
          "",
          "[Removed Lines]",
          "358:             const cellTitle = getHeaderTitle(opts, column)",
          "",
          "[Added Lines]",
          "359:             const cellTitle = getHeaderTitle($xetable, opts, column)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "380:         `<tr>${columns.map(column => {",
          "381:           const headAlign = column.headerAlign || column.align || allHeaderAlign || allAlign",
          "382:           const classNames = hasEllipsis($xetable, column, 'showHeaderOverflow', allColumnHeaderOverflow) ? ['col--ellipsis'] : []",
          "384:           if (headAlign) {",
          "385:             classNames.push(`col--${headAlign}`)",
          "386:           }",
          "",
          "[Removed Lines]",
          "383:           const cellTitle = getHeaderTitle(opts, column)",
          "",
          "[Added Lines]",
          "384:           const cellTitle = getHeaderTitle($xetable, opts, column)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "516:     columns.map(column => `<Column ss:Width=\"${column.renderWidth}\"/>`).join('')",
          "517:   ].join('')",
          "518:   if (opts.isHeader) {",
          "520:   }",
          "521:   datas.forEach(row => {",
          "522:     xml += '<Row>' + columns.map(column => `<Cell><Data ss:Type=\"String\">${row[column.id]}</Data></Cell>`).join('') + '</Row>'",
          "",
          "[Removed Lines]",
          "519:     xml += `<Row>${columns.map(column => `<Cell><Data ss:Type=\"String\">${getHeaderTitle(opts, column)}</Data></Cell>`).join('')}</Row>`",
          "",
          "[Added Lines]",
          "520:     xml += `<Row>${columns.map(column => `<Cell><Data ss:Type=\"String\">${getHeaderTitle($xetable, opts, column)}</Data></Cell>`).join('')}</Row>`",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1205:         columnFilterMethod = original ? ({ column }) => column.property : ({ column }) => defaultFilterExportColumn(column)",
          "1206:       }",
          "1207:       if (customCols) {",
          "1208:         groups = XEUtils.searchTree(",
          "1209:           XEUtils.mapTree(customCols, item => {",
          "1210:             let targetColumn",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1209:         opts._isCustomColumn = true",
          "",
          "---------------"
        ],
        "packages/form/src/form.js||packages/form/src/form.js": [
          "File: packages/form/src/form.js -> packages/form/src/form.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "342:     },",
          "343:     clearValidate (fieldOrItem) {",
          "344:       if (fieldOrItem) {",
          "348:         }",
          "349:       } else {",
          "350:         this.getItems().forEach(item => {",
          "351:           item.showError = false",
          "",
          "[Removed Lines]",
          "345:         const item = handleFieldOrItem(this, fieldOrItem)",
          "346:         if (item) {",
          "347:           item.showError = false",
          "",
          "[Added Lines]",
          "345:         let fields = fieldOrItem",
          "346:         if (!XEUtils.isArray(fieldOrItem)) {",
          "347:           fields = [fieldOrItem]",
          "349:         fields.forEach((field) => {",
          "350:           if (field) {",
          "351:             const item = handleFieldOrItem(this, field)",
          "352:             if (item) {",
          "353:               item.showError = false",
          "354:             }",
          "355:           }",
          "356:         })",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "358:       return this.beginValidate(this.getItems(), '', callback)",
          "359:     },",
          "360:     validateField (fieldOrItem, callback) {",
          "363:     },",
          "364:     beginValidate (itemList, type, callback) {",
          "365:       const { data, rules: formRules, validOpts } = this",
          "",
          "[Removed Lines]",
          "361:       const item = handleFieldOrItem(this, fieldOrItem)",
          "362:       return this.beginValidate(item ? [item] : [], '', callback)",
          "",
          "[Added Lines]",
          "369:       let fields = []",
          "370:       if (!XEUtils.isArray(fieldOrItem)) {",
          "371:         fields = [fieldOrItem]",
          "372:       }",
          "373:       return this.beginValidate(fields.map(field => handleFieldOrItem(this, field)), '', callback)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "374:             itemValids.push(",
          "375:               this.validItemRules(type || 'all', field).then(() => {",
          "376:                 item.errRule = null",
          "379:                 if (!validRest[field]) {",
          "380:                   validRest[field] = []",
          "381:                 }",
          "382:                 validRest[field].push(rest)",
          "383:                 validFields.push(field)",
          "385:                 return Promise.reject(rest)",
          "386:               })",
          "387:             )",
          "",
          "[Removed Lines]",
          "377:               }).catch(({ rule, rules }) => {",
          "378:                 const rest = { rule, rules, data, field, property: field, $form: this }",
          "384:                 item.errRule = rule",
          "",
          "[Added Lines]",
          "388:               }).catch((errorMaps) => {",
          "389:                 const rest = errorMaps[field]",
          "395:                 item.errRule = rest[0].rule",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "437:       const { data, rules: formRules } = this",
          "450:                   rule,",
          "452:                   data,",
          "453:                   field: property,",
          "479:                 }",
          "484:             }",
          "485:           })",
          "492:         }",
          "493:       })",
          "494:     },",
          "",
          "[Removed Lines]",
          "436:     validItemRules (validType, property, val) {",
          "438:       const errorRules = []",
          "439:       const syncVailds = []",
          "440:       if (property && formRules) {",
          "441:         const rules = XEUtils.get(formRules, property)",
          "442:         if (rules) {",
          "443:           const itemValue = XEUtils.isUndefined(val) ? XEUtils.get(data, property) : val",
          "444:           rules.forEach(rule => {",
          "445:             const { type, trigger, required } = rule",
          "446:             if (validType === 'all' || !trigger || validType === rule.trigger) {",
          "447:               if (XEUtils.isFunction(rule.validator)) {",
          "448:                 const customValid = rule.validator({",
          "449:                   itemValue,",
          "451:                   rules,",
          "454:                   property,",
          "455:                   $form: this",
          "456:                 })",
          "457:                 if (customValid) {",
          "458:                   if (XEUtils.isError(customValid)) {",
          "459:                     errorRules.push(new Rule({ type: 'custom', trigger, content: customValid.message, rule: new Rule(rule) }))",
          "460:                   } else if (customValid.catch) {",
          "462:                     syncVailds.push(",
          "463:                       customValid.catch(e => {",
          "464:                         errorRules.push(new Rule({ type: 'custom', trigger, content: e ? e.message : (rule.content || rule.message), rule: new Rule(rule) }))",
          "465:                       })",
          "466:                     )",
          "467:                   }",
          "468:                 }",
          "469:               } else {",
          "470:                 const isArrType = type === 'array'",
          "471:                 const isArrVal = XEUtils.isArray(itemValue)",
          "472:                 let hasEmpty = true",
          "473:                 if (isArrType || isArrVal) {",
          "474:                   hasEmpty = !isArrVal || !itemValue.length",
          "475:                 } else if (XEUtils.isString(itemValue)) {",
          "476:                   hasEmpty = eqEmptyValue(itemValue.trim())",
          "477:                 } else {",
          "478:                   hasEmpty = eqEmptyValue(itemValue)",
          "480:                 if (required ? (hasEmpty || validErrorRuleValue(rule, itemValue)) : (!hasEmpty && validErrorRuleValue(rule, itemValue))) {",
          "481:                   errorRules.push(new Rule(rule))",
          "482:                 }",
          "483:               }",
          "486:         }",
          "487:       }",
          "488:       return Promise.all(syncVailds).then(() => {",
          "489:         if (errorRules.length) {",
          "490:           const rest = { rules: errorRules, rule: errorRules[0] }",
          "491:           return Promise.reject(rest)",
          "",
          "[Added Lines]",
          "447:     validItemRules (validType, fields, val) {",
          "449:       const errorMaps = {}",
          "450:       if (!XEUtils.isArray(fields)) {",
          "451:         fields = [fields]",
          "452:       }",
          "453:       return Promise.all(",
          "454:         fields.map((property) => {",
          "455:           const syncVailds = []",
          "456:           const errorRules = []",
          "457:           if (property && formRules) {",
          "458:             const rules = XEUtils.get(formRules, property)",
          "459:             if (rules) {",
          "460:               const itemValue = XEUtils.isUndefined(val) ? XEUtils.get(data, property) : val",
          "461:               rules.forEach(rule => {",
          "462:                 const { type, trigger, required } = rule",
          "463:                 if (validType === 'all' || !trigger || validType === rule.trigger) {",
          "464:                   if (XEUtils.isFunction(rule.validator)) {",
          "465:                     const customValid = rule.validator({",
          "466:                       itemValue,",
          "467:                       rule,",
          "468:                       rules,",
          "469:                       data,",
          "470:                       field: property,",
          "471:                       property,",
          "472:                       $form: this",
          "473:                     })",
          "474:                     if (customValid) {",
          "475:                       if (XEUtils.isError(customValid)) {",
          "476:                         errorRules.push(new Rule({ type: 'custom', trigger, content: customValid.message, rule: new Rule(rule) }))",
          "477:                       } else if (customValid.catch) {",
          "479:                         syncVailds.push(",
          "480:                           customValid.catch(e => {",
          "481:                             errorRules.push(new Rule({ type: 'custom', trigger, content: e ? e.message : (rule.content || rule.message), rule: new Rule(rule) }))",
          "482:                           })",
          "483:                         )",
          "484:                       }",
          "485:                     }",
          "486:                   } else {",
          "487:                     const isArrType = type === 'array'",
          "488:                     const isArrVal = XEUtils.isArray(itemValue)",
          "489:                     let hasEmpty = true",
          "490:                     if (isArrType || isArrVal) {",
          "491:                       hasEmpty = !isArrVal || !itemValue.length",
          "492:                     } else if (XEUtils.isString(itemValue)) {",
          "493:                       hasEmpty = eqEmptyValue(itemValue.trim())",
          "494:                     } else {",
          "495:                       hasEmpty = eqEmptyValue(itemValue)",
          "496:                     }",
          "497:                     if (required ? (hasEmpty || validErrorRuleValue(rule, itemValue)) : (!hasEmpty && validErrorRuleValue(rule, itemValue))) {",
          "498:                       errorRules.push(new Rule(rule))",
          "499:                     }",
          "500:                   }",
          "501:                 }",
          "502:               })",
          "503:             }",
          "504:           }",
          "505:           return Promise.all(syncVailds).then(() => {",
          "506:             if (errorRules.length) {",
          "507:               errorMaps[property] = errorRules.map(rule => {",
          "508:                 return {",
          "509:                   $form: this,",
          "513:                   property",
          "515:               })",
          "518:         })",
          "519:       ).then(() => {",
          "520:         if (!XEUtils.isEmpty(errorMaps)) {",
          "521:           return Promise.reject(errorMaps)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "532:           .then(() => {",
          "533:             this.clearValidate(field)",
          "534:           })",
          "536:             const item = this.getItemByField(field)",
          "538:               item.showError = true",
          "540:             }",
          "541:           })",
          "542:       }",
          "",
          "[Removed Lines]",
          "535:           .catch(({ rule }) => {",
          "537:             if (item) {",
          "539:               item.errRule = rule",
          "",
          "[Added Lines]",
          "565:           .catch((errorMaps) => {",
          "566:             const rest = errorMaps[field]",
          "568:             if (item && rest) {",
          "570:               item.errRule = rest[0].rule",
          "",
          "---------------"
        ],
        "packages/table/src/cell.js||packages/table/src/cell.js": [
          "File: packages/table/src/cell.js -> packages/table/src/cell.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "224:       }",
          "225:     }",
          "226:     if (!trigger || trigger === 'default') {",
          "228:     }",
          "229:     return [",
          "230:       h('div', {",
          "",
          "[Removed Lines]",
          "227:       on.click = evnt => $table.triggerTreeExpandEvent(evnt, params)",
          "",
          "[Added Lines]",
          "227:       on.click = evnt => {",
          "228:         evnt.stopPropagation()",
          "229:         $table.triggerTreeExpandEvent(evnt, params)",
          "230:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "305:       on = {",
          "306:         click (evnt) {",
          "307:           if (!isDisabled && isVisible) {",
          "308:             $table.triggerRadioRowEvent(evnt, params)",
          "309:           }",
          "310:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:             evnt.stopPropagation()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "362:       on = {",
          "363:         click (evnt) {",
          "364:           if (!isAllCheckboxDisabled) {",
          "365:             $table.triggerCheckAllEvent(evnt, !isAllCheckboxSelected)",
          "366:           }",
          "367:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369:             evnt.stopPropagation()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "417:       on = {",
          "418:         click (evnt) {",
          "419:           if (!isDisabled && isVisible) {",
          "420:             $table.triggerCheckRowEvent(evnt, params, !isChecked)",
          "421:           }",
          "422:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "425:             evnt.stopPropagation()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "478:       on = {",
          "479:         click (evnt) {",
          "480:           if (!isDisabled && isVisible) {",
          "481:             $table.triggerCheckRowEvent(evnt, params, !isChecked)",
          "482:           }",
          "483:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "487:             evnt.stopPropagation()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "550:         }],",
          "551:         on: {",
          "552:           click (evnt) {",
          "553:             $table.triggerRowExpandEvent(evnt, params)",
          "554:           }",
          "555:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "560:             evnt.stopPropagation()",
          "",
          "---------------"
        ],
        "packages/table/src/column.js||packages/table/src/column.js": [
          "File: packages/table/src/column.js -> packages/table/src/column.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:   treeNode: Boolean,",
          "68:   visible: { type: Boolean, default: null },",
          "70:   exportMethod: Function,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:   headerExportMethod: Function,",
          "",
          "---------------"
        ],
        "packages/table/src/columnInfo.js||packages/table/src/columnInfo.js": [
          "File: packages/table/src/columnInfo.js -> packages/table/src/columnInfo.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:       cellRender: _vm.cellRender,",
          "91:       editRender: _vm.editRender,",
          "92:       contentRender: _vm.contentRender,",
          "93:       exportMethod: _vm.exportMethod,",
          "94:       footerExportMethod: _vm.footerExportMethod,",
          "95:       titleHelp: _vm.titleHelp,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:       headerExportMethod: _vm.headerExportMethod,",
          "",
          "---------------"
        ],
        "types/column.d.ts||types/column.d.ts": [
          "File: types/column.d.ts -> types/column.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import { ColumnHeaderSlotParams, ColumnHeaderRenderParams } from './header'",
          "6: import { ColumnFooterSlotParams, ColumnFooterRenderParams } from './footer'",
          "7: import { ColumnEditRenderOptions, ColumnEditSlotParams } from './edit'",
          "9: import { TableOverflow } from './table'",
          "",
          "[Removed Lines]",
          "8: import { ColumnExportCellRenderParams, ColumnExportFooterRenderParams } from './export'",
          "",
          "[Added Lines]",
          "8: import { ColumnExportCellRenderParams, ColumnExportFooterRenderParams, ColumnExportHeaderRenderParams } from './export'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:   visible?: boolean;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:   headerExportMethod?(params: ColumnExportHeaderRenderParams): string | number;",
          "",
          "---------------"
        ],
        "types/export.d.ts||types/export.d.ts": [
          "File: types/export.d.ts -> types/export.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:   options: ExportParams;",
          "229: }",
          "231: export interface ColumnExportFooterRenderParams extends GridRenderParams {",
          "232:   items: any[];",
          "233:   _columnIndex: number;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232: export interface ColumnExportHeaderRenderParams extends GridRenderParams {",
          "233:   column: ColumnInfo;",
          "234: }",
          "",
          "---------------"
        ],
        "types/form.d.ts||types/form.d.ts": [
          "File: types/form.d.ts -> types/form.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "36:   validateField(callback?: (errMap?: FormValidErrMapParams) => void): Promise<any>;",
          "41:   clearValidate(field?: string): Promise<any>;",
          "",
          "[Added Lines]",
          "36:   validateField(field?: string | string[], callback?: (errMap?: FormValidErrMapParams) => void): Promise<any>;",
          "41:   clearValidate(field?: string | string[]): Promise<any>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:   [key: string]: any;",
          "57: }",
          "63: export interface FormRule {",
          "",
          "[Removed Lines]",
          "59: export function FormValidatorMethod(params: FormValidErrParams): void;",
          "60: export function FormValidatorMethod(params: FormValidErrParams): Error;",
          "61: export function FormValidatorMethod(params: FormValidErrParams): Promise<any>;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "88:   validator?: typeof FormValidatorMethod;",
          "",
          "[Added Lines]",
          "84:   validator?(params: {",
          "85:     $form: Form,",
          "86:     itemValue: any,",
          "87:     rule: FormRule;",
          "88:     rules: FormRule[];",
          "89:     data: any;",
          "90:     field: string",
          "94:     property: string",
          "95:   }): void | Error | Promise<any>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:   $form: Form,",
          "106:   itemValue: any,",
          "107:   rule: FormRule;",
          "109:   data: any;",
          "110:   field: string",
          "",
          "[Removed Lines]",
          "108:   rules: FormRule[];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1937a2e8fbec4ff04ee9623cb2098e7ae833f222",
      "candidate_info": {
        "commit_hash": "1937a2e8fbec4ff04ee9623cb2098e7ae833f222",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/1937a2e8fbec4ff04ee9623cb2098e7ae833f222",
        "files": [
          "index.ts",
          "package.json",
          "packages/table/src/methods.ts",
          "packages/table/src/table.ts"
        ],
        "message": "fix",
        "before_after_code_files": [
          "index.ts||index.ts",
          "packages/table/src/methods.ts||packages/table/src/methods.ts",
          "packages/table/src/table.ts||packages/table/src/table.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "index.ts||index.ts": [
          "File: index.ts -> index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import './styles/all.scss'",
          "4: if (typeof window !== 'undefined' && window.Vue) {",
          "7:   }",
          "8:   window.Vue.use(VxeTableExport)",
          "9: }",
          "",
          "[Removed Lines]",
          "5:   if (!(window as any).VxeUITable) {",
          "6:     (window as any).VxeUITable = VxeTableExport",
          "",
          "[Added Lines]",
          "5:   if (window.VXETable) {",
          "6:     if (!(window as any).VxeUITable) {",
          "7:       (window as any).VxeUITable = VxeTableExport",
          "8:     }",
          "",
          "---------------"
        ],
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2101:     const bodyElem = tableBody ? tableBody.$el : null",
          "2102:     const headerElem = tableHeader ? tableHeader.$el : null",
          "2103:     const footerElem = tableFooter ? tableFooter.$el : null",
          "2104:     if (bodyElem) {",
          "2105:       this.calcCellWidth()",
          "2106:       this.autoCellWidth(headerElem, bodyElem, footerElem)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2104:     const el = this.$el",
          "2105:     if (!el || !el.clientWidth) {",
          "2106:       return this.$nextTick()",
          "2107:     }",
          "",
          "---------------"
        ],
        "packages/table/src/table.ts||packages/table/src/table.ts": [
          "File: packages/table/src/table.ts -> packages/table/src/table.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "964:       const resizeObserver = globalResize.create(handleWrapperResize",
          "965:         ? () => {",
          "966:             if (this.autoResize) {",
          "968:             }",
          "969:           }",
          "970:         : () => {",
          "",
          "[Removed Lines]",
          "967:               requestAnimationFrame(handleWrapperResize)",
          "",
          "[Added Lines]",
          "967:               handleWrapperResize()",
          "",
          "---------------"
        ]
      }
    }
  ]
}