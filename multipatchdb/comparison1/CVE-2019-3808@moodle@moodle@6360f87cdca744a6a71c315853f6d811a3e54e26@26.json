{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d4fc7d756acf8a409f03b22cd29f83c727e57dad",
      "candidate_info": {
        "commit_hash": "d4fc7d756acf8a409f03b22cd29f83c727e57dad",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/d4fc7d756acf8a409f03b22cd29f83c727e57dad",
        "files": [
          "admin/settings/courses.php",
          "admin/settings/server.php",
          "admin/tool/recyclebin/classes/category_bin.php",
          "admin/tool/recyclebin/classes/course_bin.php",
          "backup/backup.php",
          "backup/controller/backup_controller.class.php",
          "backup/moodle2/backup_root_task.class.php",
          "backup/util/dbops/backup_plan_dbops.class.php",
          "backup/util/dbops/restore_dbops.class.php",
          "backup/util/helper/backup_cron_helper.class.php",
          "backup/util/helper/backup_helper.class.php",
          "backup/util/ui/backup_ui_stage.class.php",
          "backup/util/ui/renderer.php",
          "lang/en/admin.php",
          "lang/en/backup.php",
          "lib/filestorage/file_storage.php",
          "lib/filestorage/file_system.php",
          "lib/filestorage/file_system_filedir.php",
          "lib/filestorage/tests/file_storage_test.php",
          "lib/filestorage/tests/file_system_filedir_test.php",
          "lib/filestorage/tests/file_system_test.php",
          "lib/upgrade.txt",
          "version.php"
        ],
        "message": "Merge branch 'MDL-35773_master' of git://github.com/markn86/moodle",
        "before_after_code_files": [
          "admin/settings/courses.php||admin/settings/courses.php",
          "admin/settings/server.php||admin/settings/server.php",
          "admin/tool/recyclebin/classes/category_bin.php||admin/tool/recyclebin/classes/category_bin.php",
          "admin/tool/recyclebin/classes/course_bin.php||admin/tool/recyclebin/classes/course_bin.php",
          "backup/backup.php||backup/backup.php",
          "backup/controller/backup_controller.class.php||backup/controller/backup_controller.class.php",
          "backup/moodle2/backup_root_task.class.php||backup/moodle2/backup_root_task.class.php",
          "backup/util/dbops/backup_plan_dbops.class.php||backup/util/dbops/backup_plan_dbops.class.php",
          "backup/util/dbops/restore_dbops.class.php||backup/util/dbops/restore_dbops.class.php",
          "backup/util/helper/backup_cron_helper.class.php||backup/util/helper/backup_cron_helper.class.php",
          "backup/util/helper/backup_helper.class.php||backup/util/helper/backup_helper.class.php",
          "backup/util/ui/backup_ui_stage.class.php||backup/util/ui/backup_ui_stage.class.php",
          "backup/util/ui/renderer.php||backup/util/ui/renderer.php",
          "lang/en/admin.php||lang/en/admin.php",
          "lang/en/backup.php||lang/en/backup.php",
          "lib/filestorage/file_storage.php||lib/filestorage/file_storage.php",
          "lib/filestorage/file_system.php||lib/filestorage/file_system.php",
          "lib/filestorage/file_system_filedir.php||lib/filestorage/file_system_filedir.php",
          "lib/filestorage/tests/file_storage_test.php||lib/filestorage/tests/file_storage_test.php",
          "lib/filestorage/tests/file_system_filedir_test.php||lib/filestorage/tests/file_system_filedir_test.php",
          "lib/filestorage/tests/file_system_test.php||lib/filestorage/tests/file_system_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/settings/courses.php||admin/settings/courses.php": [
          "File: admin/settings/courses.php -> admin/settings/courses.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:     $temp->add(new admin_setting_configcheckbox_with_lock('backup/backup_general_role_assignments', new lang_string('generalroleassignments','backup'), new lang_string('configgeneralroleassignments','backup'), array('value'=>1, 'locked'=>0)));",
          "207:     $temp->add(new admin_setting_configcheckbox_with_lock('backup/backup_general_activities', new lang_string('generalactivities','backup'), new lang_string('configgeneralactivities','backup'), array('value'=>1, 'locked'=>0)));",
          "208:     $temp->add(new admin_setting_configcheckbox_with_lock('backup/backup_general_blocks', new lang_string('generalblocks','backup'), new lang_string('configgeneralblocks','backup'), array('value'=>1, 'locked'=>0)));",
          "209:     $temp->add(new admin_setting_configcheckbox_with_lock('backup/backup_general_filters', new lang_string('generalfilters','backup'), new lang_string('configgeneralfilters','backup'), array('value'=>1, 'locked'=>0)));",
          "210:     $temp->add(new admin_setting_configcheckbox_with_lock('backup/backup_general_comments', new lang_string('generalcomments','backup'), new lang_string('configgeneralcomments','backup'), array('value'=>1, 'locked'=>0)));",
          "211:     $temp->add(new admin_setting_configcheckbox_with_lock('backup/backup_general_badges', new lang_string('generalbadges','backup'), new lang_string('configgeneralbadges','backup'), array('value'=>1,'locked'=>0)));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:     $temp->add(new admin_setting_configcheckbox_with_lock(",
          "210:             'backup/backup_general_files',",
          "211:             new lang_string('generalfiles', 'backup'),",
          "212:             new lang_string('configgeneralfiles', 'backup'),",
          "213:             array('value' => '1', 'locked' => 0)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "341:     $temp->add(new admin_setting_configcheckbox('backup/backup_auto_role_assignments', new lang_string('generalroleassignments','backup'), new lang_string('configgeneralroleassignments','backup'), 1));",
          "342:     $temp->add(new admin_setting_configcheckbox('backup/backup_auto_activities', new lang_string('generalactivities','backup'), new lang_string('configgeneralactivities','backup'), 1));",
          "343:     $temp->add(new admin_setting_configcheckbox('backup/backup_auto_blocks', new lang_string('generalblocks','backup'), new lang_string('configgeneralblocks','backup'), 1));",
          "344:     $temp->add(new admin_setting_configcheckbox('backup/backup_auto_filters', new lang_string('generalfilters','backup'), new lang_string('configgeneralfilters','backup'), 1));",
          "345:     $temp->add(new admin_setting_configcheckbox('backup/backup_auto_comments', new lang_string('generalcomments','backup'), new lang_string('configgeneralcomments','backup'), 1));",
          "346:     $temp->add(new admin_setting_configcheckbox('backup/backup_auto_badges', new lang_string('generalbadges','backup'), new lang_string('configgeneralbadges','backup'), 1));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "349:     $temp->add(new admin_setting_configcheckbox(",
          "350:             'backup/backup_auto_files',",
          "351:             new lang_string('generalfiles', 'backup'),",
          "352:             new lang_string('configgeneralfiles', 'backup'), '1'));",
          "",
          "---------------"
        ],
        "admin/settings/server.php||admin/settings/server.php": [
          "File: admin/settings/server.php -> admin/settings/server.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "173: $ADMIN->add('server', $temp);",
          "177: $ADMIN->add('server', new admin_externalpage('environment', new lang_string('environment','admin'), \"$CFG->wwwroot/$CFG->admin/environment.php\"));",
          "178: $ADMIN->add('server', new admin_externalpage('phpinfo', new lang_string('phpinfo'), \"$CFG->wwwroot/$CFG->admin/phpinfo.php\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:     $temp->add(new admin_setting_configduration('filescleanupperiod',",
          "176:         new lang_string('filescleanupperiod', 'admin'),",
          "177:         new lang_string('filescleanupperiod_help', 'admin'),",
          "178:         86400));",
          "",
          "---------------"
        ],
        "admin/tool/recyclebin/classes/category_bin.php||admin/tool/recyclebin/classes/category_bin.php": [
          "File: admin/tool/recyclebin/classes/category_bin.php -> admin/tool/recyclebin/classes/category_bin.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:         require_once($CFG->dirroot . '/backup/util/includes/backup_includes.php');",
          "122:         $user = get_admin();",
          "",
          "[Removed Lines]",
          "119:         $CFG->forced_plugin_settings['backup'] = ['backup_auto_storage' => 0];",
          "",
          "[Added Lines]",
          "120:         $CFG->forced_plugin_settings['backup'] = ['backup_auto_storage' => 0, 'backup_auto_files' => 1];",
          "",
          "---------------"
        ],
        "admin/tool/recyclebin/classes/course_bin.php||admin/tool/recyclebin/classes/course_bin.php": [
          "File: admin/tool/recyclebin/classes/course_bin.php -> admin/tool/recyclebin/classes/course_bin.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:         }",
          "126:         $user = get_admin();",
          "",
          "[Removed Lines]",
          "123:         $CFG->forced_plugin_settings['backup'] = ['backup_auto_storage' => 0];",
          "",
          "[Added Lines]",
          "124:         $CFG->forced_plugin_settings['backup'] = ['backup_auto_storage' => 0, 'backup_auto_files' => 1];",
          "",
          "---------------"
        ],
        "backup/backup.php||backup/backup.php": [
          "File: backup/backup.php -> backup/backup.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:     $loghtml = '';",
          "151:     if ($backup->get_stage() == backup_ui::STAGE_FINAL) {",
          "153:         if ($backupmode != backup::MODE_ASYNC) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:         if ($backup->get_setting_value('files') == 0) {",
          "156:             $renderer->set_samesite_notification();",
          "157:         }",
          "",
          "---------------"
        ],
        "backup/controller/backup_controller.class.php||backup/controller/backup_controller.class.php": [
          "File: backup/controller/backup_controller.class.php -> backup/controller/backup_controller.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:         return $this->includefiles;",
          "272:     }",
          "274:     public function get_operation() {",
          "275:         return $this->operation;",
          "276:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280:     protected function get_include_files_default() : bool {",
          "282:         $includefiles = true;",
          "285:         if ($this->get_mode() === backup::MODE_IMPORT) {",
          "286:             $includefiles = false;",
          "287:         }",
          "291:         if ($this->get_mode() === backup::MODE_SAMESITE) {",
          "292:             $includefiles = false;",
          "293:         }",
          "297:         $backupautofiles = (bool) get_config('backup', 'backup_auto_files');",
          "298:         if ($this->get_mode() === backup::MODE_AUTOMATED && !$backupautofiles) {",
          "299:             $includefiles = false;",
          "300:         }",
          "302:         return $includefiles;",
          "303:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "327:         core_php_time_limit::raise(1 * 60 * 60); // 1 hour for 1 course initially granted",
          "328:         raise_memory_limit(MEMORY_EXTRA);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "362:         if ($this->get_include_files()) {",
          "363:             $this->set_include_files((bool) $this->get_plan()->get_setting('files')->get_value());",
          "364:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "386:         $this->log('applying plan defaults', backup::LOG_DEBUG);",
          "387:         backup_controller_dbops::apply_config_defaults($this);",
          "388:         $this->set_status(backup::STATUS_CONFIGURED);",
          "390:     }",
          "414:         $this->log(\"setting file inclusion to {$this->includefiles}\", backup::LOG_DEBUG);",
          "416:     }",
          "418: }",
          "",
          "[Removed Lines]",
          "389:         $this->set_include_files();",
          "398:     protected function set_include_files() {",
          "400:         $includefiles = true;",
          "403:         if ($this->get_mode() === backup::MODE_IMPORT) {",
          "404:             $includefiles = false;",
          "405:         }",
          "409:         if ($this->get_mode() === backup::MODE_SAMESITE) {",
          "410:             $includefiles = false;",
          "411:         }",
          "413:         $this->includefiles = (int) $includefiles;",
          "415:         return $this->includefiles;",
          "",
          "[Added Lines]",
          "426:         $this->set_include_files($this->get_include_files_default());",
          "435:     protected function set_include_files(bool $includefiles) {",
          "437:         $this->includefiles = (int) $includefiles;",
          "",
          "---------------"
        ],
        "backup/moodle2/backup_root_task.class.php||backup/moodle2/backup_root_task.class.php": [
          "File: backup/moodle2/backup_root_task.class.php -> backup/moodle2/backup_root_task.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:         $this->add_setting($blocks);",
          "111:         $this->converter_deps($blocks, $converters);",
          "114:         $filters = new backup_generic_setting('filters', base_setting::IS_BOOLEAN, true);",
          "115:         $filters->set_ui(new backup_setting_ui_checkbox($filters, get_string('rootsettingfilters', 'backup')));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:         $files = new backup_generic_setting('files', base_setting::IS_BOOLEAN, true);",
          "115:         $files->set_ui(new backup_setting_ui_checkbox($files, get_string('rootsettingfiles', 'backup')));",
          "116:         $this->add_setting($files);",
          "117:         $this->converter_deps($files, $converters);",
          "",
          "---------------"
        ],
        "backup/util/dbops/backup_plan_dbops.class.php||backup/util/dbops/backup_plan_dbops.class.php": [
          "File: backup/util/dbops/backup_plan_dbops.class.php -> backup/util/dbops/backup_plan_dbops.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:         global $DB;",
          "",
          "[Removed Lines]",
          "204:     public static function get_default_backup_filename($format, $type, $id, $users, $anonymised, $useidonly = false) {",
          "",
          "[Added Lines]",
          "204:     public static function get_default_backup_filename($format, $type, $id, $users, $anonymised,",
          "205:             $useidonly = false, $files = true) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:             $info = '-an';",
          "252:         }",
          "254:         return $backupword . '-' . $format . '-' . $type . '-' .",
          "255:                $name . '-' . $date . $info . '.mbz';",
          "256:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "256:         if (!$files) {",
          "257:             $info .= '-nf';",
          "258:         }",
          "",
          "---------------"
        ],
        "backup/util/dbops/restore_dbops.class.php||backup/util/dbops/restore_dbops.class.php": [
          "File: backup/util/dbops/restore_dbops.class.php -> backup/util/dbops/restore_dbops.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1055:                     if (!$fs->file_exists($newcontextid, $component, $filearea, $rec->newitemid, $file->filepath, $file->filename)) {",
          "1060:                         if ($foundfiles = $DB->get_records('files', array('contenthash' => $file->contenthash), '', '*', 0, 1)) {",
          "1062:                             $foundfile = reset($foundfiles);",
          "1063:                             $fs->create_file_from_storedfile($file_record, $foundfile->id);",
          "1064:                         } else {",
          "1068:                         }",
          "1069:                     }",
          "1070:                 }",
          "",
          "[Removed Lines]",
          "1066:                             $results[] = self::get_missing_file_result($file);",
          "1067:                             continue;",
          "",
          "[Added Lines]",
          "1065:                             $filesystem = $fs->get_file_system();",
          "1066:                             $restorefile = $file;",
          "1067:                             $restorefile->contextid = $newcontextid;",
          "1068:                             $restorefile->itemid = $rec->newitemid;",
          "1069:                             $storedfile = new stored_file($fs, $restorefile);",
          "1077:                             if ($filesystem->is_file_readable_locally_by_storedfile($storedfile)) {",
          "1078:                                 $localpath = $filesystem->get_local_path_from_storedfile($storedfile);",
          "1079:                                 $fs->create_file_from_pathname($file, $localpath);",
          "1080:                             } else if ($filesystem->is_file_readable_remotely_by_storedfile($storedfile)) {",
          "1081:                                 $url = $filesystem->get_remote_path_from_storedfile($storedfile);",
          "1082:                                 $fs->create_file_from_url($file, $url);",
          "1083:                             } else if ($filesystem->is_file_readable_locally_by_storedfile($storedfile, true)) {",
          "1084:                                 $localpath = $filesystem->get_local_path_from_storedfile($storedfile, true);",
          "1085:                                 $fs->create_file_from_pathname($file, $localpath);",
          "1086:                             } else {",
          "1088:                                 $results[] = self::get_missing_file_result($file);",
          "1089:                                 continue;",
          "1090:                             }",
          "",
          "---------------"
        ],
        "backup/util/helper/backup_cron_helper.class.php||backup/util/helper/backup_cron_helper.class.php": [
          "File: backup/util/helper/backup_cron_helper.class.php -> backup/util/helper/backup_cron_helper.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "415:             $id = $bc->get_id();",
          "416:             $users = $bc->get_plan()->get_setting('users')->get_value();",
          "417:             $anonymised = $bc->get_plan()->get_setting('anonymize')->get_value();",
          "418:             $bc->get_plan()->get_setting('filename')->set_value(backup_plan_dbops::get_default_backup_filename($format, $type,",
          "421:             $bc->set_status(backup::STATUS_AWAITING);",
          "",
          "[Removed Lines]",
          "419:                     $id, $users, $anonymised));",
          "",
          "[Added Lines]",
          "418:             $incfiles = (bool)$config->backup_auto_files;",
          "420:                     $id, $users, $anonymised, false, $incfiles));",
          "",
          "---------------"
        ],
        "backup/util/helper/backup_helper.class.php||backup/util/helper/backup_helper.class.php": [
          "File: backup/util/helper/backup_helper.class.php -> backup/util/helper/backup_helper.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "287:             $config = get_config('backup');",
          "288:             $dir = $config->backup_auto_destination;",
          "289:             if ($config->backup_auto_storage == 1 and $dir and is_dir($dir) and is_writable($dir)) {",
          "292:                 if (@rename($filepath, $filedest)) {",
          "293:                     return null;",
          "",
          "[Removed Lines]",
          "290:                 $filedest = $dir.'/'.backup_plan_dbops::get_default_backup_filename($format, $backuptype, $courseid, $hasusers, $isannon, !$config->backup_shortname);",
          "",
          "[Added Lines]",
          "290:                 $filedest = $dir.'/'",
          "291:                         .backup_plan_dbops::get_default_backup_filename(",
          "292:                                 $format,",
          "293:                                 $backuptype,",
          "294:                                 $courseid,",
          "295:                                 $hasusers,",
          "296:                                 $isannon,",
          "297:                                 !$config->backup_shortname,",
          "298:                                 (bool)$config->backup_auto_files);",
          "",
          "---------------"
        ],
        "backup/util/ui/backup_ui_stage.class.php||backup/util/ui/backup_ui_stage.class.php": [
          "File: backup/util/ui/backup_ui_stage.class.php -> backup/util/ui/backup_ui_stage.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:                             $this->ui->get_type(),",
          "156:                             $this->ui->get_controller_id(),",
          "157:                             $this->ui->get_setting_value('users'),",
          "159:                         );",
          "160:                         $setting->set_value($filename);",
          "161:                     }",
          "",
          "[Removed Lines]",
          "158:                             $this->ui->get_setting_value('anonymize')",
          "",
          "[Added Lines]",
          "158:                             $this->ui->get_setting_value('anonymize'),",
          "159:                             false,",
          "160:                             (bool)$this->ui->get_setting_value('files')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "457:                         $id = $this->ui->get_controller_id();",
          "458:                         $users = $this->ui->get_setting_value('users');",
          "459:                         $anonymised = $this->ui->get_setting_value('anonymize');",
          "461:                     }",
          "462:                     $form->add_setting($setting, $task);",
          "463:                     break;",
          "",
          "[Removed Lines]",
          "460:                         $setting->set_value(backup_plan_dbops::get_default_backup_filename($format, $type, $id, $users, $anonymised));",
          "",
          "[Added Lines]",
          "462:                         $files = (bool)$this->ui->get_setting_value('files');",
          "463:                         $filename = backup_plan_dbops::get_default_backup_filename(",
          "464:                                 $format,",
          "465:                                 $type,",
          "466:                                 $id,",
          "467:                                 $users,",
          "468:                                 $anonymised,",
          "469:                                 false,",
          "470:                                 $files);",
          "471:                         $setting->set_value($filename);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "628:         if (!empty($this->results['missing_files_in_pool'])) {",
          "629:             $output .= $renderer->notification(get_string('missingfilesinpool', 'backup'), 'notifyproblem');",
          "630:         }",
          "631:         $output .= $renderer->notification(get_string('executionsuccess', 'backup'), 'notifysuccess');",
          "632:         $output .= $renderer->continue_button($restorerul);",
          "633:         $output .= $renderer->box_end();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "642:         $output .= $renderer->get_samesite_notification();",
          "",
          "---------------"
        ],
        "backup/util/ui/renderer.php||backup/util/ui/renderer.php": [
          "File: backup/util/ui/renderer.php -> backup/util/ui/renderer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: class core_backup_renderer extends plugin_renderer_base {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:     private $samesitenotification = '';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:         return $out;",
          "81:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:     public function set_samesite_notification() {",
          "95:         $this->samesitenotification = $this->output->notification(get_string('samesitenotification', 'backup'), 'info');",
          "96:     }",
          "102:     public function get_samesite_notification() {",
          "103:         return $this->samesitenotification;",
          "104:     }",
          "",
          "---------------"
        ],
        "lang/en/admin.php||lang/en/admin.php": [
          "File: lang/en/admin.php -> lang/en/admin.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "564: $string['extendedusernamechars'] = 'Allow extended characters in usernames';",
          "565: $string['extramemorylimit'] = 'Extra PHP memory limit';",
          "566: $string['fatalsessionautostart'] = '<p>Serious configuration error detected, please notify server administrator.</p><p> To operate properly, Moodle requires that administrator changes PHP settings.</p><p><code>session.auto_start</code> must be set to <code>off</code>.</p><p>This setting is controlled by editing <code>php.ini</code>, Apache/IIS <br />configuration or <code>.htaccess</code> file on the server.</p>';",
          "567: $string['fileconversioncleanuptask'] = 'Cleanup of temporary records for file conversions.';",
          "568: $string['filecreated'] = 'New file created';",
          "569: $string['filestoredin'] = 'Save file into folder :';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "567: $string['filescleanupperiod'] = 'Clean trash pool files';",
          "568: $string['filescleanupperiod_help'] = 'How often trash files are removed. These are files that are associated with a context that no longer exists';",
          "",
          "---------------"
        ],
        "lang/en/backup.php||lang/en/backup.php": [
          "File: lang/en/backup.php -> lang/en/backup.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "127: $string['configgeneralcalendarevents'] = 'Sets the default for including calendar events in a backup.';",
          "128: $string['configgeneralcomments'] = 'Sets the default for including comments in a backup.';",
          "129: $string['configgeneralcompetencies'] = 'Sets the default for including competencies in a backup.';",
          "130: $string['configgeneralfilters'] = 'Sets the default for including filters in a backup.';",
          "131: $string['configgeneralhistories'] = 'Sets the default for including user history within a backup.';",
          "132: $string['configgenerallogs'] = 'If enabled logs will be included in backups by default.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130: $string['configgeneralfiles'] = 'Sets the default for including files in a backup.';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202: $string['generalcomments'] = 'Include comments';",
          "203: $string['generalcompetencies'] = 'Include competencies';",
          "204: $string['generalenrolments'] = 'Include enrolment methods';",
          "205: $string['generalfilters'] = 'Include filters';",
          "206: $string['generalhistories'] = 'Include histories';",
          "207: $string['generalgradehistories'] = 'Include histories';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206: $string['generalfiles'] = 'Include files';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "328: $string['rootsettingblocks'] = 'Include blocks';",
          "329: $string['rootsettingcompetencies'] = 'Include competencies';",
          "330: $string['rootsettingfilters'] = 'Include filters';",
          "331: $string['rootsettingcomments'] = 'Include comments';",
          "332: $string['rootsettingcalendarevents'] = 'Include calendar events';",
          "333: $string['rootsettinguserscompletion'] = 'Include user completion details';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "333: $string['rootsettingfiles'] = 'Include files';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "337: $string['rootsettinggroups'] = 'Include groups and groupings';",
          "338: $string['rootsettingimscc1'] = 'Convert to IMS Common Cartridge 1.0';",
          "339: $string['rootsettingimscc11'] = 'Convert to IMS Common Cartridge 1.1';",
          "340: $string['sitecourseformatwarning'] = 'This is a front page backup, note that they can only be restored on the front page';",
          "341: $string['storagecourseonly'] = 'Course backup filearea';",
          "342: $string['storagecourseandexternal'] = 'Course backup filearea and the specified directory';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "343: $string['samesitenotification'] = 'This backup was created with only references to files, not the files themselves. Restoring will only work on this site.';",
          "",
          "---------------"
        ],
        "lib/filestorage/file_storage.php||lib/filestorage/file_storage.php": [
          "File: lib/filestorage/file_storage.php -> lib/filestorage/file_storage.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2245:             require_once($CFG->libdir.'/filelib.php');",
          "2247:             mtrace('Cleaning up files from deleted contexts... ', '');",
          "",
          "[Removed Lines]",
          "2244:         if (empty($CFG->fileslastcleanup) or $CFG->fileslastcleanup < time() - 60*60*24) {",
          "",
          "[Added Lines]",
          "2244:         $filescleanupperiod = empty($CFG->filescleanupperiod) ? 86400 : $CFG->filescleanupperiod;",
          "2245:         if (empty($CFG->fileslastcleanup) || ($CFG->fileslastcleanup < time() - $filescleanupperiod)) {",
          "",
          "---------------"
        ],
        "lib/filestorage/file_system.php||lib/filestorage/file_system.php": [
          "File: lib/filestorage/file_system.php -> lib/filestorage/file_system.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:         return $this->get_local_path_from_hash($file->get_contenthash(), $fetchifnotfound);",
          "85:     }",
          "",
          "[Removed Lines]",
          "83:     protected function get_local_path_from_storedfile(stored_file $file, $fetchifnotfound = false) {",
          "",
          "[Added Lines]",
          "83:     public function get_local_path_from_storedfile(stored_file $file, $fetchifnotfound = false) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:         return $this->get_remote_path_from_hash($file->get_contenthash(), false);",
          "99:     }",
          "",
          "[Removed Lines]",
          "97:     protected function get_remote_path_from_storedfile(stored_file $file) {",
          "",
          "[Added Lines]",
          "97:     public function get_remote_path_from_storedfile(stored_file $file) {",
          "",
          "---------------"
        ],
        "lib/filestorage/file_system_filedir.php||lib/filestorage/file_system_filedir.php": [
          "File: lib/filestorage/file_system_filedir.php -> lib/filestorage/file_system_filedir.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:         $filepath = $this->get_local_path_from_hash($file->get_contenthash(), $fetchifnotfound);",
          "",
          "[Removed Lines]",
          "122:     protected function get_local_path_from_storedfile(stored_file $file, $fetchifnotfound = false) {",
          "",
          "[Added Lines]",
          "122:     public function get_local_path_from_storedfile(stored_file $file, $fetchifnotfound = false) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:         return $this->get_local_path_from_storedfile($file, false);",
          "141:     }",
          "",
          "[Removed Lines]",
          "139:     protected function get_remote_path_from_storedfile(stored_file $file) {",
          "",
          "[Added Lines]",
          "139:     public function get_remote_path_from_storedfile(stored_file $file) {",
          "",
          "---------------"
        ],
        "lib/filestorage/tests/file_storage_test.php||lib/filestorage/tests/file_storage_test.php": [
          "File: lib/filestorage/tests/file_storage_test.php -> lib/filestorage/tests/file_storage_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:         $this->assertTrue($DB->record_exists('files', array('pathnamehash'=>$pathhash)));",
          "79:         $filesystem = $fs->get_file_system();",
          "82:         $this->assertFileExists($location);",
          "",
          "[Removed Lines]",
          "77:         $method = new ReflectionMethod('file_system', 'get_local_path_from_storedfile');",
          "78:         $method->setAccessible(true);",
          "80:         $location = $method->invokeArgs($filesystem, array($file, true));",
          "",
          "[Added Lines]",
          "78:         $location = $filesystem->get_local_path_from_storedfile($file, true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:         $this->assertTrue($DB->record_exists('files', array('pathnamehash'=>$pathhash)));",
          "154:         $filesystem = $fs->get_file_system();",
          "157:         $this->assertFileExists($location);",
          "",
          "[Removed Lines]",
          "152:         $method = new ReflectionMethod('file_system', 'get_local_path_from_storedfile');",
          "153:         $method->setAccessible(true);",
          "155:         $location = $method->invokeArgs($filesystem, array($file, true));",
          "",
          "[Added Lines]",
          "151:         $location = $filesystem->get_local_path_from_storedfile($file, true);",
          "",
          "---------------"
        ],
        "lib/filestorage/tests/file_system_filedir_test.php||lib/filestorage/tests/file_system_filedir_test.php": [
          "File: lib/filestorage/tests/file_system_filedir_test.php -> lib/filestorage/tests/file_system_filedir_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:             ->with($this->equalTo($file));",
          "259:         $file = $this->get_stored_file('example content');",
          "264:         $this->assertEquals($filepath, $result);",
          "265:     }",
          "",
          "[Removed Lines]",
          "260:         $method = new ReflectionMethod(file_system_filedir::class, 'get_local_path_from_storedfile');",
          "261:         $method->setAccessible(true);",
          "262:         $result = $method->invokeArgs($fs, array($file, true));",
          "",
          "[Added Lines]",
          "260:         $result = $fs->get_local_path_from_storedfile($file, true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "287:             ->method('recover_file');",
          "289:         $file = $this->get_stored_file('example content');",
          "294:         $this->assertEquals($filepath, $result);",
          "295:     }",
          "",
          "[Removed Lines]",
          "290:         $method = new ReflectionMethod(file_system_filedir::class, 'get_local_path_from_storedfile');",
          "291:         $method->setAccessible(true);",
          "292:         $result = $method->invokeArgs($fs, array($file, false));",
          "",
          "[Added Lines]",
          "288:         $result = $fs->get_local_path_from_storedfile($file, false);",
          "",
          "---------------"
        ],
        "lib/filestorage/tests/file_system_test.php||lib/filestorage/tests/file_system_test.php": [
          "File: lib/filestorage/tests/file_system_test.php -> lib/filestorage/tests/file_system_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:         $file = $this->get_stored_file($filecontent);",
          "257:         $this->assertEquals($filepath, $result);",
          "258:     }",
          "",
          "[Removed Lines]",
          "253:         $method = new ReflectionMethod(file_system::class, 'get_local_path_from_storedfile');",
          "254:         $method->setAccessible(true);",
          "255:         $result = $method->invokeArgs($fs, array_merge([$file], $args));",
          "",
          "[Added Lines]",
          "253:         $result = $fs->get_local_path_from_storedfile($file, $fetch);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281:         $file = $this->get_stored_file($filecontent);",
          "287:         $this->assertEquals($filepath, $result);",
          "288:     }",
          "",
          "[Removed Lines]",
          "283:         $method = new ReflectionMethod(file_system::class, 'get_remote_path_from_storedfile');",
          "284:         $method->setAccessible(true);",
          "285:         $result = $method->invokeArgs($fs, [$file]);",
          "",
          "[Added Lines]",
          "281:         $result = $fs->get_remote_path_from_storedfile($file);",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019072500.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019072500.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "89d1238962160c15c7e963b84c0f498bd24d86bc",
      "candidate_info": {
        "commit_hash": "89d1238962160c15c7e963b84c0f498bd24d86bc",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/89d1238962160c15c7e963b84c0f498bd24d86bc",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.7dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019022200.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev (Build: 20190222)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019030100.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev (Build: 20190301)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "991a4c0fd1d6d0edea0920fd5c2a412b15fffbc6",
      "candidate_info": {
        "commit_hash": "991a4c0fd1d6d0edea0920fd5c2a412b15fffbc6",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/991a4c0fd1d6d0edea0920fd5c2a412b15fffbc6",
        "files": [
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "MDL-66599 analytics: New index for analytics_used_analysables",
        "before_after_code_files": [
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3413:         upgrade_main_savepoint(true, 2019052001.13);",
          "3414:     }",
          "3416:     return true;",
          "3417: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3416:     if ($oldversion < 2019052002.01) {",
          "3419:         $table = new xmldb_table('analytics_used_analysables');",
          "3420:         $index = new xmldb_index('analysableid', XMLDB_INDEX_NOTUNIQUE, ['analysableid']);",
          "3423:         if (!$dbman->index_exists($table, $index)) {",
          "3424:             $dbman->add_index($table, $index);",
          "3425:         }",
          "3428:         upgrade_main_savepoint(true, 2019052002.01);",
          "3429:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019052002.00;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "",
          "[Added Lines]",
          "32: $version  = 2019052002.01;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c18745424588407c37bc09b140fd993aeeaf3f7",
      "candidate_info": {
        "commit_hash": "0c18745424588407c37bc09b140fd993aeeaf3f7",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/0c18745424588407c37bc09b140fd993aeeaf3f7",
        "files": [
          "lib/adminlib.php",
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "MDL-57342 admin: confightml will check if returned data is empty",
        "before_after_code_files": [
          "lib/adminlib.php||lib/adminlib.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/adminlib.php||lib/adminlib.php": [
          "File: lib/adminlib.php -> lib/adminlib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2583:         $editor->use_editor($this->get_id(), array('noclean'=>true));",
          "2584:         return parent::output_html($data, $query);",
          "2585:     }",
          "2586: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2593:     public function write_setting($data) {",
          "2594:         if (trim(html_to_text($data)) === '') {",
          "2595:             $data = '';",
          "2596:         }",
          "2597:         return parent::write_setting($data);",
          "2598:     }",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3416:         upgrade_main_savepoint(true, 2019070400.01);",
          "3417:     }",
          "3419:     return true;",
          "3420: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3419:     if ($oldversion < 2019071800.01) {",
          "3421:         $instructions = get_config('core', 'auth_instructions');",
          "3423:         if (trim(html_to_text($instructions)) === '') {",
          "3424:             set_config('auth_instructions', '');",
          "3425:         }",
          "3428:         upgrade_main_savepoint(true, 2019071800.01);",
          "3429:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019071800.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019071800.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae89df663a93d9b85a4dd98229413311bc5cf017",
      "candidate_info": {
        "commit_hash": "ae89df663a93d9b85a4dd98229413311bc5cf017",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/ae89df663a93d9b85a4dd98229413311bc5cf017",
        "files": [
          "enrol/externallib.php",
          "enrol/tests/externallib_test.php",
          "lib/db/services.php",
          "user/amd/build/status_field.min.js",
          "user/amd/src/status_field.js",
          "version.php"
        ],
        "message": "Merge branch 'MDL-66489-37' of git://github.com/rezaies/moodle into MOODLE_37_STABLE",
        "before_after_code_files": [
          "enrol/externallib.php||enrol/externallib.php",
          "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php",
          "lib/db/services.php||lib/db/services.php",
          "user/amd/src/status_field.js||user/amd/src/status_field.js",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "enrol/externallib.php||enrol/externallib.php": [
          "File: enrol/externallib.php -> enrol/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1020:         );",
          "1021:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1028:     public static function submit_user_enrolment_form_parameters() {",
          "1029:         return new external_function_parameters([",
          "1030:             'formdata' => new external_value(PARAM_RAW, 'The data from the event form'),",
          "1031:         ]);",
          "1032:     }",
          "1040:     public static function submit_user_enrolment_form($formdata) {",
          "1041:         global $CFG, $DB, $PAGE;",
          "1044:         $params = self::validate_parameters(self::submit_user_enrolment_form_parameters(), ['formdata' => $formdata]);",
          "1046:         $data = [];",
          "1047:         parse_str($params['formdata'], $data);",
          "1049:         $userenrolment = $DB->get_record('user_enrolments', ['id' => $data['ue']], '*', MUST_EXIST);",
          "1050:         $instance = $DB->get_record('enrol', ['id' => $userenrolment->enrolid], '*', MUST_EXIST);",
          "1051:         $plugin = enrol_get_plugin($instance->enrol);",
          "1052:         $course = get_course($instance->courseid);",
          "1053:         $context = context_course::instance($course->id);",
          "1054:         self::validate_context($context);",
          "1056:         require_once(\"$CFG->dirroot/enrol/editenrolment_form.php\");",
          "1057:         $customformdata = [",
          "1058:             'ue' => $userenrolment,",
          "1059:             'modal' => true,",
          "1060:             'enrolinstancename' => $plugin->get_instance_name($instance)",
          "1061:         ];",
          "1062:         $mform = new enrol_user_enrolment_form(null, $customformdata, 'post', '', null, true, $data);",
          "1064:         if ($validateddata = $mform->get_data()) {",
          "1065:             require_once($CFG->dirroot . '/enrol/locallib.php');",
          "1066:             $manager = new course_enrolment_manager($PAGE, $course);",
          "1067:             $result = $manager->edit_enrolment($userenrolment, $validateddata);",
          "1069:             return ['result' => $result];",
          "1070:         } else {",
          "1071:             return ['result' => false, 'validationerror' => true];",
          "1072:         }",
          "1073:     }",
          "1080:     public static function submit_user_enrolment_form_returns() {",
          "1081:         return new external_single_structure([",
          "1082:             'result' => new external_value(PARAM_BOOL, 'True if the user\\'s enrolment was successfully updated'),",
          "1083:             'validationerror' => new external_value(PARAM_BOOL, 'Indicates invalid form data', VALUE_DEFAULT, false),",
          "1084:         ]);",
          "1085:     }",
          "",
          "---------------"
        ],
        "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php": [
          "File: enrol/tests/externallib_test.php -> enrol/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "958:         $this->assertEquals(ENROL_USER_SUSPENDED, $ue->status);",
          "959:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "964:     public function submit_user_enrolment_form_provider() {",
          "965:         $now = new DateTime();",
          "967:         $nextmonth = clone($now);",
          "968:         $nextmonth->add(new DateInterval('P1M'));",
          "970:         return [",
          "971:             'Invalid data' => [",
          "972:                 'customdata' => [",
          "973:                     'status' => ENROL_USER_ACTIVE,",
          "974:                     'timestart' => [",
          "975:                         'day' => $now->format('j'),",
          "976:                         'month' => $now->format('n'),",
          "977:                         'year' => $now->format('Y'),",
          "978:                         'hour' => $now->format('G'),",
          "979:                         'minute' => 0,",
          "980:                         'enabled' => 1,",
          "981:                     ],",
          "982:                     'timeend' => [",
          "983:                         'day' => $now->format('j'),",
          "984:                         'month' => $now->format('n'),",
          "985:                         'year' => $now->format('Y'),",
          "986:                         'hour' => $now->format('G'),",
          "987:                         'minute' => 0,",
          "988:                         'enabled' => 1,",
          "989:                     ],",
          "990:                 ],",
          "991:                 'expectedresult' => false,",
          "992:                 'validationerror' => true",
          "993:             ],",
          "994:             'Valid data' => [",
          "995:                 'customdata' => [",
          "996:                     'status' => ENROL_USER_ACTIVE,",
          "997:                     'timestart' => [",
          "998:                         'day' => $now->format('j'),",
          "999:                         'month' => $now->format('n'),",
          "1000:                         'year' => $now->format('Y'),",
          "1001:                         'hour' => $now->format('G'),",
          "1002:                         'minute' => 0,",
          "1003:                         'enabled' => 1,",
          "1004:                     ],",
          "1005:                     'timeend' => [",
          "1006:                         'day' => $nextmonth->format('j'),",
          "1007:                         'month' => $nextmonth->format('n'),",
          "1008:                         'year' => $nextmonth->format('Y'),",
          "1009:                         'hour' => $nextmonth->format('G'),",
          "1010:                         'minute' => 0,",
          "1011:                         'enabled' => 1,",
          "1012:                     ],",
          "1013:                 ],",
          "1014:                 'expectedresult' => true,",
          "1015:                 'validationerror' => false",
          "1016:             ],",
          "1017:             'Suspend user' => [",
          "1018:                 'customdata' => [",
          "1019:                     'status' => ENROL_USER_SUSPENDED,",
          "1020:                 ],",
          "1021:                 'expectedresult' => true,",
          "1022:                 'validationerror' => false",
          "1023:             ],",
          "1024:         ];",
          "1025:     }",
          "1033:     public function test_submit_user_enrolment_form($customdata, $expectedresult, $validationerror) {",
          "1034:         global $CFG, $DB;",
          "1036:         $this->resetAfterTest(true);",
          "1037:         $datagen = $this->getDataGenerator();",
          "1040:         $manualplugin = enrol_get_plugin('manual');",
          "1042:         $studentroleid = $DB->get_field('role', 'id', ['shortname' => 'student'], MUST_EXIST);",
          "1043:         $teacherroleid = $DB->get_field('role', 'id', ['shortname' => 'editingteacher'], MUST_EXIST);",
          "1044:         $course = $datagen->create_course();",
          "1045:         $user = $datagen->create_user();",
          "1046:         $teacher = $datagen->create_user();",
          "1048:         $instanceid = null;",
          "1049:         $instances = enrol_get_instances($course->id, true);",
          "1050:         foreach ($instances as $inst) {",
          "1051:             if ($inst->enrol == 'manual') {",
          "1052:                 $instanceid = (int)$inst->id;",
          "1053:                 break;",
          "1054:             }",
          "1055:         }",
          "1056:         if (empty($instanceid)) {",
          "1057:             $instanceid = $manualplugin->add_default_instance($course);",
          "1058:             if (empty($instanceid)) {",
          "1059:                 $instanceid = $manualplugin->add_instance($course);",
          "1060:             }",
          "1061:         }",
          "1062:         $this->assertNotNull($instanceid);",
          "1064:         $instance = $DB->get_record('enrol', ['id' => $instanceid], '*', MUST_EXIST);",
          "1065:         $manualplugin->enrol_user($instance, $user->id, $studentroleid, 0, 0, ENROL_USER_ACTIVE);",
          "1066:         $manualplugin->enrol_user($instance, $teacher->id, $teacherroleid, 0, 0, ENROL_USER_ACTIVE);",
          "1067:         $ueid = (int) $DB->get_field(",
          "1068:                 'user_enrolments',",
          "1069:                 'id',",
          "1070:                 ['enrolid' => $instance->id, 'userid' => $user->id],",
          "1071:                 MUST_EXIST",
          "1072:         );",
          "1075:         $teacher->ignoresesskey = true;",
          "1076:         $this->setUser($teacher);",
          "1078:         $formdata = [",
          "1079:             'ue'        => $ueid,",
          "1080:             'ifilter'   => 0,",
          "1081:             'status'    => null,",
          "1082:             'timestart' => null,",
          "1083:             'timeend'   => null,",
          "1084:         ];",
          "1086:         $formdata = array_merge($formdata, $customdata);",
          "1088:         require_once(\"$CFG->dirroot/enrol/editenrolment_form.php\");",
          "1089:         $formdata = enrol_user_enrolment_form::mock_generate_submit_keys($formdata);",
          "1091:         $querystring = http_build_query($formdata, '', '&');",
          "1093:         $result = external_api::clean_returnvalue(",
          "1094:                 core_enrol_external::submit_user_enrolment_form_returns(),",
          "1095:                 core_enrol_external::submit_user_enrolment_form($querystring)",
          "1096:         );",
          "1098:         $this->assertEquals(",
          "1099:                 ['result' => $expectedresult, 'validationerror' => $validationerror],",
          "1100:                 $result,",
          "1101:                 '', 0.0, 10, true);",
          "1103:         if (!empty($result['result'])) {",
          "1104:             $ue = $DB->get_record('user_enrolments', ['id' => $ueid], '*', MUST_EXIST);",
          "1105:             $this->assertEquals($formdata['status'], $ue->status);",
          "1106:         }",
          "1107:     }",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "660:         'type' => 'write',",
          "661:         'ajax' => true,",
          "662:     ),",
          "663:     'core_enrol_unenrol_user_enrolment' => array(",
          "664:         'classname' => 'core_enrol_external',",
          "665:         'methodname' => 'unenrol_user_enrolment',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "663:     'core_enrol_submit_user_enrolment_form' => array(",
          "664:         'classname' => 'core_enrol_external',",
          "665:         'methodname' => 'submit_user_enrolment_form',",
          "666:         'classpath' => 'enrol/externallib.php',",
          "667:         'description' => 'Submit form data for enrolment form',",
          "668:         'type' => 'write',",
          "669:         'ajax' => true,",
          "670:     ),",
          "",
          "---------------"
        ],
        "user/amd/src/status_field.js||user/amd/src/status_field.js": [
          "File: user/amd/src/status_field.js -> user/amd/src/status_field.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:             var ueid = $(form).find('[name=\"ue\"]').val();",
          "297:             var request = {",
          "300:             };",
          "302:             Ajax.call([request])[0].done(function(data) {",
          "",
          "[Removed Lines]",
          "265:             var status = $(form).find('[name=\"status\"]').val();",
          "267:             var params = {",
          "268:                 'courseid': this.courseid,",
          "269:                 'ueid': ueid,",
          "270:                 'status': status",
          "271:             };",
          "274:             var timeStartEnabled = $(form).find('[name=\"timestart[enabled]\"]');",
          "275:             if (timeStartEnabled.is(':checked')) {",
          "276:                 var timeStartYear = $(form).find('[name=\"timestart[year]\"]').val();",
          "277:                 var timeStartMonth = $(form).find('[name=\"timestart[month]\"]').val() - 1;",
          "278:                 var timeStartDay = $(form).find('[name=\"timestart[day]\"]').val();",
          "279:                 var timeStartHour = $(form).find('[name=\"timestart[hour]\"]').val();",
          "280:                 var timeStartMinute = $(form).find('[name=\"timestart[minute]\"]').val();",
          "281:                 var timeStart = new Date(timeStartYear, timeStartMonth, timeStartDay, timeStartHour, timeStartMinute);",
          "282:                 params.timestart = timeStart.getTime() / 1000;",
          "283:             }",
          "286:             var timeEndEnabled = $(form).find('[name=\"timeend[enabled]\"]');",
          "287:             if (timeEndEnabled.is(':checked')) {",
          "288:                 var timeEndYear = $(form).find('[name=\"timeend[year]\"]').val();",
          "289:                 var timeEndMonth = $(form).find('[name=\"timeend[month]\"]').val() - 1;",
          "290:                 var timeEndDay = $(form).find('[name=\"timeend[day]\"]').val();",
          "291:                 var timeEndHour = $(form).find('[name=\"timeend[hour]\"]').val();",
          "292:                 var timeEndMinute = $(form).find('[name=\"timeend[minute]\"]').val();",
          "293:                 var timeEnd = new Date(timeEndYear, timeEndMonth, timeEndDay, timeEndHour, timeEndMinute);",
          "294:                 params.timeend = timeEnd.getTime() / 1000;",
          "295:             }",
          "298:                 methodname: 'core_enrol_edit_user_enrolment',",
          "299:                 args: params",
          "",
          "[Added Lines]",
          "266:                 methodname: 'core_enrol_submit_user_enrolment_form',",
          "267:                 args: {",
          "268:                     formdata: form.serialize()",
          "269:                 }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019052002.01;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "",
          "[Added Lines]",
          "32: $version  = 2019052002.02;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "",
          "---------------"
        ]
      }
    }
  ]
}