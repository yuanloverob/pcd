{
  "cve_id": "CVE-2024-29834",
  "cve_desc": "This vulnerability allows authenticated users with produce or consume permissions to perform unauthorized operations on partitioned topics, such as unloading topics and triggering compaction. These management operations should be restricted to users with the tenant admin role or superuser role. An authenticated user with produce permission can create subscriptions and update subscription properties on partitioned topics, even though this should be limited to users with consume permissions. This impact analysis assumes that Pulsar has been configured with the default authorization provider. For custom authorization providers, the impact could be slightly different. Additionally, the vulnerability allows an authenticated user to read, create, modify, and delete namespace properties in any namespace in any tenant. In Pulsar, namespace properties are reserved for user provided metadata about the namespace.\n\nThis issue affects Apache Pulsar versions from 2.7.1 to 2.10.6, from 2.11.0 to 2.11.4, from 3.0.0 to 3.0.3, from 3.1.0 to 3.1.3, and from 3.2.0 to 3.2.1. \n\n3.0 Apache Pulsar users should upgrade to at least 3.0.4.\n3.1 and 3.2 Apache Pulsar users should upgrade to at least 3.2.2.\n\nUsers operating versions prior to those listed above should upgrade to the aforementioned patched versions or newer versions.",
  "repo": "apache/pulsar",
  "patch_hash": "6ffe667cddad3e959e02ce31fd09b2f9a439d50a",
  "patch_info": {
    "commit_hash": "6ffe667cddad3e959e02ce31fd09b2f9a439d50a",
    "repo": "apache/pulsar",
    "commit_url": "https://github.com/apache/pulsar/commit/6ffe667cddad3e959e02ce31fd09b2f9a439d50a",
    "files": [
      "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java",
      "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
      "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
      "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
      "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
      "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java"
    ],
    "message": "[improve][broker] Add fine-grain authorization to ns/topic management endpoints (#22305)",
    "before_after_code_files": [
      "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java||pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java",
      "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
      "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
      "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
      "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
      "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java"
    ]
  },
  "patch_diff": {
    "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java||pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java": [
      "File: pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java -> pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "597:                             case COMPACT:",
      "598:                             case OFFLOAD:",
      "599:                             case UNLOAD:",
      "600:                             case DELETE_METADATA:",
      "601:                             case UPDATE_METADATA:",
      "602:                             case ADD_BUNDLE_RANGE:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "600:                             case TRIM_TOPIC:",
      "",
      "---------------"
    ],
    "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java": [
      "File: pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java -> pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "62: import org.apache.pulsar.common.policies.data.OffloadPoliciesImpl;",
      "63: import org.apache.pulsar.common.policies.data.PersistencePolicies;",
      "64: import org.apache.pulsar.common.policies.data.Policies;",
      "67: import org.apache.pulsar.common.policies.data.RetentionPolicies;",
      "68: import org.apache.pulsar.common.policies.data.SchemaCompatibilityStrategy;",
      "69: import org.apache.pulsar.common.policies.data.SubscribeRate;",
      "",
      "[Removed Lines]",
      "65: import org.apache.pulsar.common.policies.data.PolicyName;",
      "66: import org.apache.pulsar.common.policies.data.PolicyOperation;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "714:     }",
      "716:     protected CompletableFuture<SchemaCompatibilityStrategy> getSchemaCompatibilityStrategyAsync() {",
      "721:                     if (ex != null) {",
      "722:                         log.error(\"[{}] Failed to get schema compatibility strategy of topic {} {}\",",
      "723:                                 clientAppId(), topicName, ex);",
      "",
      "[Removed Lines]",
      "717:         return validateTopicPolicyOperationAsync(topicName,",
      "718:                 PolicyName.SCHEMA_COMPATIBILITY_STRATEGY,",
      "719:                 PolicyOperation.READ)",
      "720:                 .thenCompose((__) -> getSchemaCompatibilityStrategyAsyncWithoutAuth()).whenComplete((__, ex) -> {",
      "",
      "[Added Lines]",
      "715:         return getSchemaCompatibilityStrategyAsyncWithoutAuth().whenComplete((__, ex) -> {",
      "",
      "---------------"
    ],
    "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java": [
      "File: pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java -> pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "2339:    }",
      "2341:    protected void internalSetProperty(String key, String value, AsyncResponse asyncResponse) {",
      "2357:    }",
      "2359:    protected void internalSetProperties(Map<String, String> properties, AsyncResponse asyncResponse) {",
      "2375:    }",
      "2377:    protected void internalGetProperty(String key, AsyncResponse asyncResponse) {",
      "2387:    }",
      "2389:    protected void internalGetProperties(AsyncResponse asyncResponse) {",
      "2398:    }",
      "2400:    protected void internalRemoveProperty(String key, AsyncResponse asyncResponse) {",
      "2403:        AtomicReference<String> oldVal = new AtomicReference<>(null);",
      "2418:    }",
      "2420:    protected void internalClearProperties(AsyncResponse asyncResponse) {",
      "2422:        AtomicReference<Integer> clearedCount = new AtomicReference<>(0);",
      "2438:    }",
      "2440:    private CompletableFuture<Void> updatePoliciesAsync(NamespaceName ns, Function<Policies, Policies> updateFunction) {",
      "",
      "[Removed Lines]",
      "2342:        validatePoliciesReadOnlyAccess();",
      "2343:        updatePoliciesAsync(namespaceName, policies -> {",
      "2344:            policies.properties.put(key, value);",
      "2345:            return policies;",
      "2346:        }).thenAccept(v -> {",
      "2347:            log.info(\"[{}] Successfully set property for key {} on namespace {}\", clientAppId(), key,",
      "2348:                    namespaceName);",
      "2349:            asyncResponse.resume(Response.noContent().build());",
      "2350:        }).exceptionally(ex -> {",
      "2351:            Throwable cause = ex.getCause();",
      "2352:            log.error(\"[{}] Failed to set property for key {} on namespace {}\", clientAppId(), key,",
      "2353:                    namespaceName, cause);",
      "2354:            asyncResponse.resume(cause);",
      "2355:            return null;",
      "2356:        });",
      "2360:        validatePoliciesReadOnlyAccess();",
      "2361:        updatePoliciesAsync(namespaceName, policies -> {",
      "2362:            policies.properties.putAll(properties);",
      "2363:            return policies;",
      "2364:        }).thenAccept(v -> {",
      "2365:            log.info(\"[{}] Successfully set {} properties on namespace {}\", clientAppId(), properties.size(),",
      "2366:                    namespaceName);",
      "2367:            asyncResponse.resume(Response.noContent().build());",
      "2368:        }).exceptionally(ex -> {",
      "2369:            Throwable cause = ex.getCause();",
      "2370:            log.error(\"[{}] Failed to set {} properties on namespace {}\", clientAppId(), properties.size(),",
      "2371:                    namespaceName, cause);",
      "2372:            asyncResponse.resume(cause);",
      "2373:            return null;",
      "2374:        });",
      "2378:         getNamespacePoliciesAsync(namespaceName).thenAccept(policies -> {",
      "2379:             asyncResponse.resume(policies.properties.get(key));",
      "2380:         }).exceptionally(ex -> {",
      "2381:             Throwable cause = ex.getCause();",
      "2382:             log.error(\"[{}] Failed to get property for key {} of namespace {}\", clientAppId(), key,",
      "2383:                     namespaceName, cause);",
      "2384:             asyncResponse.resume(cause);",
      "2385:             return null;",
      "2386:         });",
      "2390:        getNamespacePoliciesAsync(namespaceName).thenAccept(policies -> {",
      "2391:            asyncResponse.resume(policies.properties);",
      "2392:        }).exceptionally(ex -> {",
      "2393:            Throwable cause = ex.getCause();",
      "2394:            log.error(\"[{}] Failed to get properties of namespace {}\", clientAppId(), namespaceName, cause);",
      "2395:            asyncResponse.resume(cause);",
      "2396:            return null;",
      "2397:        });",
      "2401:        validatePoliciesReadOnlyAccess();",
      "2404:        updatePoliciesAsync(namespaceName, policies -> {",
      "2405:            oldVal.set(policies.properties.remove(key));",
      "2406:            return policies;",
      "2407:        }).thenAccept(v -> {",
      "2408:            asyncResponse.resume(oldVal.get());",
      "2409:            log.info(\"[{}] Successfully remove property for key {} on namespace {}\", clientAppId(), key,",
      "2410:                    namespaceName);",
      "2411:        }).exceptionally(ex -> {",
      "2412:            Throwable cause = ex.getCause();",
      "2413:            log.error(\"[{}] Failed to remove property for key {} on namespace {}\", clientAppId(), key,",
      "2414:                    namespaceName, cause);",
      "2415:            asyncResponse.resume(cause);",
      "2416:           return null;",
      "2417:        });",
      "2421:        validatePoliciesReadOnlyAccess();",
      "2423:        updatePoliciesAsync(namespaceName, policies -> {",
      "2424:            clearedCount.set(policies.properties.size());",
      "2425:            policies.properties.clear();",
      "2426:            return policies;",
      "2427:        }).thenAccept(v -> {",
      "2428:            asyncResponse.resume(Response.noContent().build());",
      "2429:            log.info(\"[{}] Successfully clear {} properties on namespace {}\", clientAppId(), clearedCount.get(),",
      "2430:                    namespaceName);",
      "2431:        }).exceptionally(ex -> {",
      "2432:            Throwable cause = ex.getCause();",
      "2433:            log.error(\"[{}] Failed to clear {} properties on namespace {}\", clientAppId(), clearedCount.get(),",
      "2434:                    namespaceName, cause);",
      "2435:            asyncResponse.resume(cause);",
      "2436:            return null;",
      "2437:        });",
      "",
      "[Added Lines]",
      "2342:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
      "2343:                .thenCompose(__ -> validatePoliciesReadOnlyAccessAsync())",
      "2344:                .thenCompose(__ -> updatePoliciesAsync(namespaceName, policies -> {",
      "2345:                    policies.properties.put(key, value);",
      "2346:                    return policies;",
      "2347:                }))",
      "2348:                .thenAccept(v -> {",
      "2349:                    log.info(\"[{}] Successfully set property for key {} on namespace {}\", clientAppId(), key,",
      "2350:                            namespaceName);",
      "2351:                    asyncResponse.resume(Response.noContent().build());",
      "2352:                }).exceptionally(ex -> {",
      "2353:                    Throwable cause = ex.getCause();",
      "2354:                    log.error(\"[{}] Failed to set property for key {} on namespace {}\", clientAppId(), key,",
      "2355:                            namespaceName, cause);",
      "2356:                    asyncResponse.resume(cause);",
      "2357:                    return null;",
      "2358:                });",
      "2362:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
      "2363:                .thenCompose(__ -> validatePoliciesReadOnlyAccessAsync())",
      "2364:                .thenCompose(__ -> updatePoliciesAsync(namespaceName, policies -> {",
      "2365:                    policies.properties.putAll(properties);",
      "2366:                    return policies;",
      "2367:                }))",
      "2368:                .thenAccept(v -> {",
      "2369:                    log.info(\"[{}] Successfully set {} properties on namespace {}\", clientAppId(), properties.size(),",
      "2370:                            namespaceName);",
      "2371:                    asyncResponse.resume(Response.noContent().build());",
      "2372:                }).exceptionally(ex -> {",
      "2373:                    Throwable cause = ex.getCause();",
      "2374:                    log.error(\"[{}] Failed to set {} properties on namespace {}\", clientAppId(), properties.size(),",
      "2375:                            namespaceName, cause);",
      "2376:                    asyncResponse.resume(cause);",
      "2377:                    return null;",
      "2378:                });",
      "2382:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
      "2383:                .thenCompose(__ -> getNamespacePoliciesAsync(namespaceName))",
      "2384:                .thenAccept(policies -> asyncResponse.resume(policies.properties.get(key)))",
      "2385:                .exceptionally(ex -> {",
      "2386:                    Throwable cause = ex.getCause();",
      "2387:                    log.error(\"[{}] Failed to get property for key {} of namespace {}\", clientAppId(), key,",
      "2388:                            namespaceName, cause);",
      "2389:                    asyncResponse.resume(cause);",
      "2390:                    return null;",
      "2391:                });",
      "2395:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
      "2396:                .thenCompose(__ -> getNamespacePoliciesAsync(namespaceName))",
      "2397:                .thenAccept(policies -> asyncResponse.resume(policies.properties))",
      "2398:                .exceptionally(ex -> {",
      "2399:                    Throwable cause = ex.getCause();",
      "2400:                    log.error(\"[{}] Failed to get properties of namespace {}\", clientAppId(), namespaceName, cause);",
      "2401:                    asyncResponse.resume(cause);",
      "2402:                    return null;",
      "2403:                });",
      "2408:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
      "2409:                .thenCompose(__ -> validatePoliciesReadOnlyAccessAsync())",
      "2410:                .thenCompose(__ -> updatePoliciesAsync(namespaceName, policies -> {",
      "2411:                    oldVal.set(policies.properties.remove(key));",
      "2412:                    return policies;",
      "2413:                })).thenAccept(v -> {",
      "2414:                    asyncResponse.resume(oldVal.get());",
      "2415:                    log.info(\"[{}] Successfully remove property for key {} on namespace {}\", clientAppId(), key,",
      "2416:                            namespaceName);",
      "2417:                }).exceptionally(ex -> {",
      "2418:                    Throwable cause = ex.getCause();",
      "2419:                    log.error(\"[{}] Failed to remove property for key {} on namespace {}\", clientAppId(), key,",
      "2420:                            namespaceName, cause);",
      "2421:                    asyncResponse.resume(cause);",
      "2422:                    return null;",
      "2423:                });",
      "2428:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
      "2429:                .thenCompose(__ -> validatePoliciesReadOnlyAccessAsync())",
      "2430:                .thenCompose(__ -> updatePoliciesAsync(namespaceName, policies -> {",
      "2431:                    clearedCount.set(policies.properties.size());",
      "2432:                    policies.properties.clear();",
      "2433:                    return policies;",
      "2434:                }))",
      "2435:                .thenAccept(v -> {",
      "2436:                    asyncResponse.resume(Response.noContent().build());",
      "2437:                    log.info(\"[{}] Successfully clear {} properties on namespace {}\", clientAppId(), clearedCount.get(),",
      "2438:                            namespaceName);",
      "2439:                }).exceptionally(ex -> {",
      "2440:                    Throwable cause = ex.getCause();",
      "2441:                    log.error(\"[{}] Failed to clear {} properties on namespace {}\", clientAppId(), clearedCount.get(),",
      "2442:                            namespaceName, cause);",
      "2443:                    asyncResponse.resume(cause);",
      "2444:                    return null;",
      "2445:                });",
      "",
      "---------------"
    ],
    "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java": [
      "File: pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java -> pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "488:     protected void internalCreateMissedPartitions(AsyncResponse asyncResponse) {",
      "489:         getPartitionedTopicMetadataAsync(topicName, false, false).thenAccept(metadata -> {",
      "490:             if (metadata != null) {",
      "492:                     asyncResponse.resume(Response.noContent().build());",
      "493:                 }).exceptionally(e -> {",
      "494:                     log.error(\"[{}] Failed to create partitions for topic {}\", clientAppId(), topicName);",
      "",
      "[Removed Lines]",
      "491:                 tryCreatePartitionsAsync(metadata.partitions).thenAccept(v -> {",
      "",
      "[Added Lines]",
      "491:                 CompletableFuture<Void> future = validateNamespaceOperationAsync(topicName.getNamespaceObject(),",
      "492:                         NamespaceOperation.CREATE_TOPIC);",
      "493:                 future.thenCompose(__ -> tryCreatePartitionsAsync(metadata.partitions)).thenAccept(v -> {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "821:     protected void internalUnloadTopic(AsyncResponse asyncResponse, boolean authoritative) {",
      "822:         log.info(\"[{}] Unloading topic {}\", clientAppId(), topicName);",
      "831:            if (topicName.isPartitioned()) {",
      "832:                if (isTransactionCoordinatorAssign(topicName)) {",
      "",
      "[Removed Lines]",
      "823:         CompletableFuture<Void> future;",
      "824:         if (topicName.isGlobal()) {",
      "825:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
      "826:         } else {",
      "827:             future = CompletableFuture.completedFuture(null);",
      "828:         }",
      "829:        future.thenAccept(__ -> {",
      "",
      "[Added Lines]",
      "825:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.UNLOAD);",
      "826:         future.thenCompose(__ -> {",
      "827:             if (topicName.isGlobal()) {",
      "828:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
      "829:             }",
      "830:             return CompletableFuture.completedFuture(null);",
      "831:         }).thenAccept(__ -> {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1044:     private void internalUnloadNonPartitionedTopicAsync(AsyncResponse asyncResponse, boolean authoritative) {",
      "1045:         validateTopicOwnershipAsync(topicName, authoritative)",
      "1047:                         .thenCompose(__ -> getTopicReferenceAsync(topicName))",
      "1048:                         .thenCompose(topic -> topic.close(false))",
      "1049:                         .thenRun(() -> {",
      "1050:                             log.info(\"[{}] Successfully unloaded topic {}\", clientAppId(), topicName);",
      "1051:                             asyncResponse.resume(Response.noContent().build());",
      "1053:                 .exceptionally(ex -> {",
      "1055:                     if (!isNot307And404Exception(ex)) {",
      "",
      "[Removed Lines]",
      "1046:                 .thenCompose(unused -> validateTopicOperationAsync(topicName, TopicOperation.UNLOAD)",
      "1052:                         }))",
      "",
      "[Added Lines]",
      "1053:                         })",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1063:     private void internalUnloadTransactionCoordinatorAsync(AsyncResponse asyncResponse, boolean authoritative) {",
      "1064:         validateTopicOwnershipAsync(topicName, authoritative)",
      "1075:                 .exceptionally(ex -> {",
      "1077:                     if (!isNot307And404Exception(ex)) {",
      "",
      "[Removed Lines]",
      "1065:                 .thenCompose(__ -> validateTopicOperationAsync(topicName, TopicOperation.UNLOAD)",
      "1066:                         .thenCompose(v -> pulsar()",
      "1067:                                 .getTransactionMetadataStoreService()",
      "1068:                                 .removeTransactionMetadataStore(",
      "1069:                                         TransactionCoordinatorID.get(topicName.getPartitionIndex())))",
      "1070:                         .thenRun(() -> {",
      "1071:                             log.info(\"[{}] Successfully unloaded tc {}\", clientAppId(),",
      "1072:                                     topicName.getPartitionIndex());",
      "1073:                             asyncResponse.resume(Response.noContent().build());",
      "1074:                         }))",
      "",
      "[Added Lines]",
      "1066:                 .thenCompose(v -> pulsar()",
      "1067:                         .getTransactionMetadataStoreService()",
      "1068:                         .removeTransactionMetadataStore(",
      "1069:                                 TransactionCoordinatorID.get(topicName.getPartitionIndex())))",
      "1070:                 .thenRun(() -> {",
      "1071:                     log.info(\"[{}] Successfully unloaded tc {}\", clientAppId(), topicName.getPartitionIndex());",
      "1072:                     asyncResponse.resume(Response.noContent().build());",
      "1073:                 })",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1279:     }",
      "1281:     protected void internalGetManagedLedgerInfo(AsyncResponse asyncResponse, boolean authoritative) {",
      "1290:             if (topicName.isPartitioned()) {",
      "1291:                 internalGetManagedLedgerInfoForNonPartitionedTopic(asyncResponse);",
      "",
      "[Removed Lines]",
      "1282:         CompletableFuture<Void> future;",
      "1283:         if (topicName.isGlobal()) {",
      "1284:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
      "1285:         } else {",
      "1286:             future = CompletableFuture.completedFuture(null);",
      "1287:         }",
      "1288:         future.thenAccept(__ -> {",
      "",
      "[Added Lines]",
      "1281:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.GET_STATS);",
      "1282:         future.thenCompose(__ -> {",
      "1283:             if (topicName.isGlobal()) {",
      "1284:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
      "1285:             }",
      "1286:             return CompletableFuture.completedFuture(null);",
      "1287:         }).thenAccept(__ -> {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1390:     protected void internalGetPartitionedStats(AsyncResponse asyncResponse, boolean authoritative, boolean perPartition,",
      "1391:                                                GetStatsOptions getStatsOptions) {",
      "1399:                 authoritative, false)).thenAccept(partitionMetadata -> {",
      "1400:             if (partitionMetadata.partitions == 0) {",
      "1401:                 asyncResponse.resume(new RestException(Status.NOT_FOUND,",
      "",
      "[Removed Lines]",
      "1392:         CompletableFuture<Void> future;",
      "1393:         if (topicName.isGlobal()) {",
      "1394:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
      "1395:         } else {",
      "1396:             future = CompletableFuture.completedFuture(null);",
      "1397:         }",
      "1398:         future.thenCompose(__ -> getPartitionedTopicMetadataAsync(topicName,",
      "",
      "[Added Lines]",
      "1391:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.GET_STATS);",
      "1392:         future.thenCompose(__ -> {",
      "1393:             if (topicName.isGlobal()) {",
      "1394:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
      "1395:             }",
      "1396:             return  CompletableFuture.completedFuture(null);",
      "1397:         }).thenCompose(__ -> getPartitionedTopicMetadataAsync(topicName,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1481:     }",
      "1483:     protected void internalGetPartitionedStatsInternal(AsyncResponse asyncResponse, boolean authoritative) {",
      "1492:             if (partitionMetadata.partitions == 0) {",
      "1493:                 asyncResponse.resume(new RestException(Status.NOT_FOUND,",
      "1494:                         getPartitionedTopicNotFoundErrorMessage(topicName.toString())));",
      "",
      "[Removed Lines]",
      "1484:         CompletableFuture<Void> future;",
      "1485:         if (topicName.isGlobal()) {",
      "1486:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
      "1487:         } else {",
      "1488:             future = CompletableFuture.completedFuture(null);",
      "1489:         }",
      "1490:         future.thenCompose(__ -> getPartitionedTopicMetadataAsync(topicName, authoritative, false))",
      "1491:                 .thenAccept(partitionMetadata -> {",
      "",
      "[Added Lines]",
      "1483:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.GET_STATS);",
      "1484:         future.thenCompose(__ -> {",
      "1485:             if (topicName.isGlobal()) {",
      "1486:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
      "1487:             } else {",
      "1488:                 return CompletableFuture.completedFuture(null);",
      "1489:             }",
      "1490:         }).thenCompose(__ -> getPartitionedTopicMetadataAsync(topicName, authoritative, false))",
      "1491:         .thenAccept(partitionMetadata -> {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2242:     protected void internalCreateSubscription(AsyncResponse asyncResponse, String subscriptionName,",
      "2243:             MessageIdImpl messageId, boolean authoritative, boolean replicated, Map<String, String> properties) {",
      "2251:             final MessageIdImpl targetMessageId = messageId == null ? (MessageIdImpl) MessageId.latest : messageId;",
      "2252:             log.info(\"[{}][{}] Creating subscription {} at message id {} with properties {}\", clientAppId(),",
      "2253:                     topicName, subscriptionName, targetMessageId, properties);",
      "",
      "[Removed Lines]",
      "2244:         CompletableFuture<Void> ret;",
      "2245:         if (topicName.isGlobal()) {",
      "2246:             ret = validateGlobalNamespaceOwnershipAsync(namespaceName);",
      "2247:         } else {",
      "2248:             ret = CompletableFuture.completedFuture(null);",
      "2249:         }",
      "2250:         ret.thenAccept(__ -> {",
      "",
      "[Added Lines]",
      "2244:         CompletableFuture<Void> ret = validateTopicOperationAsync(topicName, TopicOperation.SUBSCRIBE,",
      "2245:                 subscriptionName);",
      "2246:         ret.thenCompose(__ -> {",
      "2247:             if (topicName.isGlobal()) {",
      "2248:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
      "2249:             }",
      "2250:             return CompletableFuture.completedFuture(null);",
      "2251:         }).thenAccept(__ -> {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2406:     protected void internalUpdateSubscriptionProperties(AsyncResponse asyncResponse, String subName,",
      "2407:                                                         Map<String, String> subscriptionProperties,",
      "2408:                                                         boolean authoritative) {",
      "2417:             if (topicName.isPartitioned()) {",
      "2418:                 internalUpdateSubscriptionPropertiesForNonPartitionedTopic(asyncResponse, subName,",
      "2419:                         subscriptionProperties, authoritative);",
      "",
      "[Removed Lines]",
      "2409:         CompletableFuture<Void> future;",
      "2410:         if (topicName.isGlobal()) {",
      "2411:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
      "2412:         } else {",
      "2413:             future = CompletableFuture.completedFuture(null);",
      "2414:         }",
      "2416:         future.thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative)).thenAccept(__ -> {",
      "",
      "[Added Lines]",
      "2410:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.SUBSCRIBE, subName);",
      "2411:         future.thenCompose(__ -> {",
      "2412:             if (topicName.isGlobal()) {",
      "2413:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
      "2414:             }",
      "2415:             return CompletableFuture.completedFuture(null);",
      "2416:         }).thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative)).thenAccept(__ -> {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2485:     protected void internalAnalyzeSubscriptionBacklog(AsyncResponse asyncResponse, String subName,",
      "2486:                                                       Optional<Position> position,",
      "2487:                                                       boolean authoritative) {",
      "2496:                 .thenCompose(__ -> {",
      "2497:                     if (topicName.isPartitioned()) {",
      "2498:                         return CompletableFuture.completedFuture(null);",
      "",
      "[Removed Lines]",
      "2488:         CompletableFuture<Void> future;",
      "2489:         if (topicName.isGlobal()) {",
      "2490:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
      "2491:         } else {",
      "2492:             future = CompletableFuture.completedFuture(null);",
      "2493:         }",
      "2495:         future.thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative))",
      "",
      "[Added Lines]",
      "2488:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.CONSUME, subName);",
      "2489:         future.thenCompose(__ -> {",
      "2490:             if (topicName.isGlobal()) {",
      "2491:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
      "2492:             }",
      "2493:             return CompletableFuture.completedFuture(null);",
      "2494:         }).thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative))",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "2525:     protected void internalGetSubscriptionProperties(AsyncResponse asyncResponse, String subName,",
      "2526:                                                         boolean authoritative) {",
      "2535:             if (topicName.isPartitioned()) {",
      "2536:                 internalGetSubscriptionPropertiesForNonPartitionedTopic(asyncResponse, subName,",
      "2537:                         authoritative);",
      "",
      "[Removed Lines]",
      "2527:         CompletableFuture<Void> future;",
      "2528:         if (topicName.isGlobal()) {",
      "2529:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
      "2530:         } else {",
      "2531:             future = CompletableFuture.completedFuture(null);",
      "2532:         }",
      "2534:         future.thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative)).thenAccept(__ -> {",
      "",
      "[Added Lines]",
      "2526:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.CONSUME, subName);",
      "2527:         future.thenCompose(__ -> {",
      "2528:             if (topicName.isGlobal()) {",
      "2529:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
      "2530:             }",
      "2531:             return CompletableFuture.completedFuture(null);",
      "2532:         }).thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative)).thenAccept(__ -> {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "4183:     protected void internalTriggerCompaction(AsyncResponse asyncResponse, boolean authoritative) {",
      "4184:         log.info(\"[{}] Trigger compaction on topic {}\", clientAppId(), topicName);",
      "4193:             if (topicName.isPartitioned()) {",
      "4194:                 internalTriggerCompactionNonPartitionedTopic(asyncResponse, authoritative);",
      "",
      "[Removed Lines]",
      "4185:         CompletableFuture<Void> future;",
      "4186:         if (topicName.isGlobal()) {",
      "4187:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
      "4188:         } else {",
      "4189:             future = CompletableFuture.completedFuture(null);",
      "4190:         }",
      "4191:         future.thenAccept(__ -> {",
      "",
      "[Added Lines]",
      "4183:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.COMPACT);",
      "4184:         future.thenCompose(__ -> {",
      "4185:             if (topicName.isGlobal()) {",
      "4186:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
      "4187:             } else {",
      "4188:                 return CompletableFuture.completedFuture(null);",
      "4189:             }",
      "4190:         }).thenAccept(__ -> {",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "4620:                     \"Trim on a non-persistent topic is not allowed\"));",
      "4621:             return null;",
      "4622:         }",
      "4623:         if (topicName.isPartitioned()) {",
      "4625:                     -> trimNonPartitionedTopic(asyncResponse, topicName, authoritative));",
      "4626:         }",
      "4628:                 .thenCompose(__ -> pulsar().getBrokerService().fetchPartitionedTopicMetadataAsync(topicName))",
      "4629:                 .thenCompose(metadata -> {",
      "4630:                     if (metadata.partitions > 0) {",
      "",
      "[Removed Lines]",
      "4624:             return validateTopicOperationAsync(topicName, TopicOperation.TRIM_TOPIC).thenCompose((x)",
      "4627:         return validateTopicOperationAsync(topicName, TopicOperation.TRIM_TOPIC)",
      "",
      "[Added Lines]",
      "4622:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.TRIM_TOPIC);",
      "4624:             return future.thenCompose((x)",
      "4627:         return future",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "5306:     }",
      "5308:     protected CompletableFuture<SchemaCompatibilityStrategy> internalGetSchemaCompatibilityStrategy(boolean applied) {",
      "5309:         if (applied) {",
      "5311:         }",
      "5315:                 .thenCompose(n -> getTopicPoliciesAsyncWithRetry(topicName).thenApply(op -> {",
      "5316:                     if (!op.isPresent()) {",
      "5317:                         return null;",
      "",
      "[Removed Lines]",
      "5310:             return getSchemaCompatibilityStrategyAsync();",
      "5312:         return validateTopicPolicyOperationAsync(topicName,",
      "5313:                 PolicyName.SCHEMA_COMPATIBILITY_STRATEGY,",
      "5314:                 PolicyOperation.READ)",
      "",
      "[Added Lines]",
      "5309:         CompletableFuture<Void> future = validateTopicPolicyOperationAsync(topicName,",
      "5310:                 PolicyName.SCHEMA_COMPATIBILITY_STRATEGY, PolicyOperation.READ);",
      "5312:             return future.thenCompose(__ -> getSchemaCompatibilityStrategyAsync());",
      "5314:         return future",
      "",
      "---------------"
    ],
    "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java": [
      "File: pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java -> pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: package org.apache.pulsar.broker.admin;",
      "22: import io.jsonwebtoken.Jwts;",
      "23: import lombok.Cleanup;",
      "24: import lombok.SneakyThrows;",
      "25: import org.apache.pulsar.client.admin.PulsarAdmin;",
      "26: import org.apache.pulsar.client.admin.PulsarAdminException;",
      "27: import org.apache.pulsar.client.impl.auth.AuthenticationToken;",
      "28: import org.apache.pulsar.common.policies.data.AuthAction;",
      "29: import org.apache.pulsar.common.policies.data.TenantInfo;",
      "30: import org.apache.pulsar.security.MockedPulsarStandalone;",
      "31: import org.testng.Assert;",
      "32: import org.testng.annotations.AfterClass;",
      "33: import org.testng.annotations.BeforeClass;",
      "34: import org.testng.annotations.Test;",
      "35: import java.util.HashMap;",
      "36: import java.util.Map;",
      "37: import java.util.Set;",
      "38: import java.util.UUID;",
      "40: @Test(groups = \"broker-admin\")",
      "41: public class NamespaceAuthZTest extends MockedPulsarStandalone {",
      "43:     private PulsarAdmin superUserAdmin;",
      "45:     private PulsarAdmin tenantManagerAdmin;",
      "47:     private static final String TENANT_ADMIN_SUBJECT =  UUID.randomUUID().toString();",
      "48:     private static final String TENANT_ADMIN_TOKEN = Jwts.builder()",
      "49:             .claim(\"sub\", TENANT_ADMIN_SUBJECT).signWith(SECRET_KEY).compact();",
      "51:     @SneakyThrows",
      "52:     @BeforeClass",
      "53:     public void before() {",
      "54:         configureTokenAuthentication();",
      "55:         configureDefaultAuthorization();",
      "56:         start();",
      "57:         this.superUserAdmin =PulsarAdmin.builder()",
      "58:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
      "59:                 .authentication(new AuthenticationToken(SUPER_USER_TOKEN))",
      "60:                 .build();",
      "61:         final TenantInfo tenantInfo = superUserAdmin.tenants().getTenantInfo(\"public\");",
      "62:         tenantInfo.getAdminRoles().add(TENANT_ADMIN_SUBJECT);",
      "63:         superUserAdmin.tenants().updateTenant(\"public\", tenantInfo);",
      "64:         this.tenantManagerAdmin = PulsarAdmin.builder()",
      "65:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
      "66:                 .authentication(new AuthenticationToken(TENANT_ADMIN_TOKEN))",
      "67:                 .build();",
      "68:     }",
      "71:     @SneakyThrows",
      "72:     @AfterClass",
      "73:     public void after() {",
      "74:         if (superUserAdmin != null) {",
      "75:             superUserAdmin.close();",
      "76:         }",
      "77:         if (tenantManagerAdmin != null) {",
      "78:             tenantManagerAdmin.close();",
      "79:         }",
      "80:         close();",
      "81:     }",
      "84:     @SneakyThrows",
      "85:     @Test",
      "86:     public void testProperties() {",
      "87:         final String random = UUID.randomUUID().toString();",
      "88:         final String namespace = \"public/default\";",
      "89:         final String topic = \"persistent://public/default/\" + random;",
      "90:         final String subject =  UUID.randomUUID().toString();",
      "91:         final String token = Jwts.builder()",
      "92:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
      "93:         superUserAdmin.topics().createNonPartitionedTopic(topic);",
      "95:         @Cleanup",
      "96:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
      "97:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
      "98:                 .authentication(new AuthenticationToken(token))",
      "99:                 .build();",
      "101:         Map<String, String> properties = new HashMap<>();",
      "102:         properties.put(\"key1\", \"value1\");",
      "103:         superUserAdmin.namespaces().setProperties(namespace, properties);",
      "104:         superUserAdmin.namespaces().setProperty(namespace, \"key2\", \"value2\");",
      "105:         superUserAdmin.namespaces().getProperties(namespace);",
      "106:         superUserAdmin.namespaces().getProperty(namespace, \"key2\");",
      "107:         superUserAdmin.namespaces().removeProperty(namespace, \"key2\");",
      "108:         superUserAdmin.namespaces().clearProperties(namespace);",
      "111:         tenantManagerAdmin.namespaces().setProperties(namespace, properties);",
      "112:         tenantManagerAdmin.namespaces().setProperty(namespace, \"key2\", \"value2\");",
      "113:         tenantManagerAdmin.namespaces().getProperties(namespace);",
      "114:         tenantManagerAdmin.namespaces().getProperty(namespace, \"key2\");",
      "115:         tenantManagerAdmin.namespaces().removeProperty(namespace, \"key2\");",
      "116:         tenantManagerAdmin.namespaces().clearProperties(namespace);",
      "119:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "120:                 () -> subAdmin.namespaces().setProperties(namespace, properties));",
      "122:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "123:                 () -> subAdmin.namespaces().setProperty(namespace, \"key2\", \"value2\"));",
      "125:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "126:                 () -> subAdmin.namespaces().getProperties(namespace));",
      "128:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "129:                 () -> subAdmin.namespaces().getProperty(namespace, \"key2\"));",
      "132:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "133:                 () -> subAdmin.namespaces().removeProperty(namespace, \"key2\"));",
      "135:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "136:                 () -> subAdmin.namespaces().clearProperties(namespace));",
      "138:         for (AuthAction action : AuthAction.values()) {",
      "139:             superUserAdmin.namespaces().grantPermissionOnNamespace(namespace, subject, Set.of(action));",
      "140:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "141:                     () -> subAdmin.namespaces().setProperties(namespace, properties));",
      "143:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "144:                     () -> subAdmin.namespaces().setProperty(namespace, \"key2\", \"value2\"));",
      "146:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "147:                     () -> subAdmin.namespaces().getProperties(namespace));",
      "149:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "150:                     () -> subAdmin.namespaces().getProperty(namespace, \"key2\"));",
      "153:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "154:                     () -> subAdmin.namespaces().removeProperty(namespace, \"key2\"));",
      "156:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "157:                     () -> subAdmin.namespaces().clearProperties(namespace));",
      "159:             superUserAdmin.namespaces().revokePermissionsOnNamespace(namespace, subject);",
      "160:         }",
      "161:         superUserAdmin.topics().delete(topic, true);",
      "162:     }",
      "163: }",
      "",
      "---------------"
    ],
    "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java": [
      "File: pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java -> pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: package org.apache.pulsar.broker.admin;",
      "22: import io.jsonwebtoken.Jwts;",
      "23: import lombok.Cleanup;",
      "24: import lombok.SneakyThrows;",
      "25: import org.apache.pulsar.client.admin.PulsarAdmin;",
      "26: import org.apache.pulsar.client.admin.PulsarAdminException;",
      "27: import org.apache.pulsar.client.api.MessageId;",
      "28: import org.apache.pulsar.client.impl.auth.AuthenticationToken;",
      "29: import org.apache.pulsar.common.naming.TopicName;",
      "30: import org.apache.pulsar.common.policies.data.AuthAction;",
      "31: import org.apache.pulsar.common.policies.data.TenantInfo;",
      "32: import org.apache.pulsar.security.MockedPulsarStandalone;",
      "33: import org.testng.Assert;",
      "34: import org.testng.annotations.AfterClass;",
      "35: import org.testng.annotations.BeforeClass;",
      "36: import org.testng.annotations.Test;",
      "37: import java.util.HashMap;",
      "38: import java.util.Map;",
      "39: import java.util.Optional;",
      "40: import java.util.Set;",
      "41: import java.util.UUID;",
      "42: import java.util.concurrent.atomic.AtomicInteger;",
      "44: @Test(groups = \"broker-admin\")",
      "45: public class TopicAuthZTest extends MockedPulsarStandalone {",
      "47:     private PulsarAdmin superUserAdmin;",
      "49:     private PulsarAdmin tenantManagerAdmin;",
      "51:     private static final String TENANT_ADMIN_SUBJECT =  UUID.randomUUID().toString();",
      "52:     private static final String TENANT_ADMIN_TOKEN = Jwts.builder()",
      "53:             .claim(\"sub\", TENANT_ADMIN_SUBJECT).signWith(SECRET_KEY).compact();",
      "55:     @SneakyThrows",
      "56:     @BeforeClass",
      "57:     public void before() {",
      "58:         configureTokenAuthentication();",
      "59:         configureDefaultAuthorization();",
      "60:         start();",
      "61:         this.superUserAdmin =PulsarAdmin.builder()",
      "62:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
      "63:                 .authentication(new AuthenticationToken(SUPER_USER_TOKEN))",
      "64:                 .build();",
      "65:         final TenantInfo tenantInfo = superUserAdmin.tenants().getTenantInfo(\"public\");",
      "66:         tenantInfo.getAdminRoles().add(TENANT_ADMIN_SUBJECT);",
      "67:         superUserAdmin.tenants().updateTenant(\"public\", tenantInfo);",
      "68:         this.tenantManagerAdmin = PulsarAdmin.builder()",
      "69:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
      "70:                 .authentication(new AuthenticationToken(TENANT_ADMIN_TOKEN))",
      "71:                 .build();",
      "72:     }",
      "75:     @SneakyThrows",
      "76:     @AfterClass",
      "77:     public void after() {",
      "78:         if (superUserAdmin != null) {",
      "79:             superUserAdmin.close();",
      "80:         }",
      "81:         if (tenantManagerAdmin != null) {",
      "82:             tenantManagerAdmin.close();",
      "83:         }",
      "84:         close();",
      "85:     }",
      "88:     @SneakyThrows",
      "89:     @Test",
      "90:     public void testUnloadAndCompactAndTrim() {",
      "91:         final String random = UUID.randomUUID().toString();",
      "92:         final String topic = \"persistent://public/default/\" + random;",
      "93:         final String subject =  UUID.randomUUID().toString();",
      "94:         final String token = Jwts.builder()",
      "95:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
      "96:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
      "98:         @Cleanup",
      "99:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
      "100:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
      "101:                 .authentication(new AuthenticationToken(token))",
      "102:                 .build();",
      "104:         superUserAdmin.topics().unload(topic);",
      "105:         superUserAdmin.topics().triggerCompaction(topic);",
      "106:         superUserAdmin.topics().trimTopic(TopicName.get(topic).getPartition(0).getLocalName());",
      "107:         superUserAdmin.topicPolicies().getSchemaCompatibilityStrategy(topic, false);",
      "110:         tenantManagerAdmin.topics().unload(topic);",
      "111:         tenantManagerAdmin.topics().triggerCompaction(topic);",
      "112:         tenantManagerAdmin.topics().trimTopic(TopicName.get(topic).getPartition(0).getLocalName());",
      "113:         tenantManagerAdmin.topicPolicies().getSchemaCompatibilityStrategy(topic, false);",
      "116:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "117:                 () -> subAdmin.topics().unload(topic));",
      "119:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "120:                 () -> subAdmin.topics().triggerCompaction(topic));",
      "122:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "123:                 () -> subAdmin.topics().trimTopic(TopicName.get(topic).getPartition(0).getLocalName()));",
      "125:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "126:                 () -> subAdmin.topicPolicies().getSchemaCompatibilityStrategy(topic, false));",
      "129:         for (AuthAction action : AuthAction.values()) {",
      "130:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
      "132:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "133:                     () -> subAdmin.topics().unload(topic));",
      "135:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "136:                     () -> subAdmin.topics().triggerCompaction(topic));",
      "138:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "139:                     () -> subAdmin.topics().trimTopic(topic));",
      "141:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "142:                     () -> subAdmin.topicPolicies().getSchemaCompatibilityStrategy(topic, false));",
      "144:             superUserAdmin.topics().revokePermissions(topic, subject);",
      "145:         }",
      "146:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
      "147:     }",
      "149:     @Test",
      "150:     @SneakyThrows",
      "151:     public void testGetManagedLedgerInfo() {",
      "152:         final String random = UUID.randomUUID().toString();",
      "153:         final String topic = \"persistent://public/default/\" + random;",
      "154:         final String subject =  UUID.randomUUID().toString();",
      "155:         final String token = Jwts.builder()",
      "156:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
      "157:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
      "159:         @Cleanup",
      "160:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
      "161:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
      "162:                 .authentication(new AuthenticationToken(token))",
      "163:                 .build();",
      "165:         superUserAdmin.topics().getInternalInfo(topic);",
      "168:         tenantManagerAdmin.topics().getInternalInfo(topic);",
      "171:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "172:                 () -> subAdmin.topics().getInternalInfo(topic));",
      "174:         for (AuthAction action : AuthAction.values()) {",
      "175:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
      "176:             if (action == AuthAction.produce || action == AuthAction.consume) {",
      "177:                 subAdmin.topics().getInternalInfo(topic);",
      "178:             } else {",
      "179:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "180:                         () -> subAdmin.topics().getInternalInfo(topic));",
      "181:             }",
      "182:             superUserAdmin.topics().revokePermissions(topic, subject);",
      "183:         }",
      "184:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
      "185:     }",
      "187:     @Test",
      "188:     @SneakyThrows",
      "189:     public void testGetPartitionedStatsAndInternalStats() {",
      "190:         final String random = UUID.randomUUID().toString();",
      "191:         final String topic = \"persistent://public/default/\" + random;",
      "192:         final String subject =  UUID.randomUUID().toString();",
      "193:         final String token = Jwts.builder()",
      "194:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
      "195:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
      "197:         @Cleanup",
      "198:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
      "199:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
      "200:                 .authentication(new AuthenticationToken(token))",
      "201:                 .build();",
      "203:         superUserAdmin.topics().getPartitionedStats(topic, false);",
      "204:         superUserAdmin.topics().getPartitionedInternalStats(topic);",
      "207:         tenantManagerAdmin.topics().getPartitionedStats(topic, false);",
      "208:         tenantManagerAdmin.topics().getPartitionedInternalStats(topic);",
      "211:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "212:                 () -> subAdmin.topics().getPartitionedStats(topic, false));",
      "214:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "215:                 () -> subAdmin.topics().getPartitionedInternalStats(topic));",
      "217:         for (AuthAction action : AuthAction.values()) {",
      "218:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
      "219:             if (action == AuthAction.produce || action == AuthAction.consume) {",
      "220:                 subAdmin.topics().getPartitionedStats(topic, false);",
      "221:                 subAdmin.topics().getPartitionedInternalStats(topic);",
      "222:             } else {",
      "223:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "224:                         () -> subAdmin.topics().getPartitionedStats(topic, false));",
      "226:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "227:                         () -> subAdmin.topics().getPartitionedInternalStats(topic));",
      "228:             }",
      "229:             superUserAdmin.topics().revokePermissions(topic, subject);",
      "230:         }",
      "231:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
      "232:     }",
      "234:     @Test",
      "235:     @SneakyThrows",
      "236:     public void testCreateSubscriptionAndUpdateSubscriptionPropertiesAndAnalyzeSubscriptionBacklog() {",
      "237:         final String random = UUID.randomUUID().toString();",
      "238:         final String topic = \"persistent://public/default/\" + random;",
      "239:         final String subject =  UUID.randomUUID().toString();",
      "240:         final String token = Jwts.builder()",
      "241:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
      "242:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
      "243:         AtomicInteger suffix = new AtomicInteger(1);",
      "244:         @Cleanup",
      "245:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
      "246:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
      "247:                 .authentication(new AuthenticationToken(token))",
      "248:                 .build();",
      "250:         superUserAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest);",
      "253:         tenantManagerAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest);",
      "256:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "257:                 () -> subAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest));",
      "259:         for (AuthAction action : AuthAction.values()) {",
      "260:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
      "261:             if (action == AuthAction.consume) {",
      "262:                 subAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest);",
      "263:             } else {",
      "264:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "265:                         () -> subAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest));",
      "266:             }",
      "267:             superUserAdmin.topics().revokePermissions(topic, subject);",
      "268:         }",
      "270:         Map<String, String> properties = new HashMap<>();",
      "271:         superUserAdmin.topics().createSubscription(topic, \"test-sub\", MessageId.earliest);",
      "273:         superUserAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\" , properties);",
      "274:         superUserAdmin.topics().getSubscriptionProperties(topic, \"test-sub\");",
      "275:         superUserAdmin.topics().analyzeSubscriptionBacklog(TopicName.get(topic).getPartition(0).getLocalName(), \"test-sub\", Optional.empty());",
      "278:         tenantManagerAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\" , properties);",
      "279:         tenantManagerAdmin.topics().getSubscriptionProperties(topic, \"test-sub\");",
      "280:         tenantManagerAdmin.topics().analyzeSubscriptionBacklog(TopicName.get(topic).getPartition(0).getLocalName(), \"test-sub\", Optional.empty());",
      "283:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "284:                 () -> subAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\", properties));",
      "286:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "287:                 () -> subAdmin.topics().getSubscriptionProperties(topic, \"test-sub\"));",
      "289:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "290:                 () -> subAdmin.topics().analyzeSubscriptionBacklog(TopicName.get(topic).getPartition(0).getLocalName(), \"test-sub\", Optional.empty()));",
      "292:         for (AuthAction action : AuthAction.values()) {",
      "293:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
      "294:             if (action == AuthAction.consume) {",
      "295:                 subAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\", properties);",
      "296:                 subAdmin.topics().getSubscriptionProperties(topic, \"test-sub\");",
      "297:                 subAdmin.topics().analyzeSubscriptionBacklog(TopicName.get(topic).getPartition(0).getLocalName(), \"test-sub\", Optional.empty());",
      "298:             } else {",
      "299:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "300:                         () -> subAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\", properties));",
      "302:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "303:                         () -> subAdmin.topics().getSubscriptionProperties(topic, \"test-sub\"));",
      "305:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "306:                         () -> subAdmin.topics().analyzeSubscriptionBacklog(TopicName.get(topic).getPartition(0).getLocalName(), \"test-sub\", Optional.empty()));",
      "307:             }",
      "308:             superUserAdmin.topics().revokePermissions(topic, subject);",
      "309:         }",
      "310:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
      "311:     }",
      "313:     @Test",
      "314:     @SneakyThrows",
      "315:     public void testCreateMissingPartition() {",
      "316:         final String random = UUID.randomUUID().toString();",
      "317:         final String topic = \"persistent://public/default/\" + random;",
      "318:         final String subject =  UUID.randomUUID().toString();",
      "319:         final String token = Jwts.builder()",
      "320:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
      "321:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
      "322:         AtomicInteger suffix = new AtomicInteger(1);",
      "323:         @Cleanup",
      "324:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
      "325:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
      "326:                 .authentication(new AuthenticationToken(token))",
      "327:                 .build();",
      "329:         superUserAdmin.topics().createMissedPartitions(topic);",
      "332:         tenantManagerAdmin.topics().createMissedPartitions(topic);",
      "334:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "335:                 () -> subAdmin.topics().createMissedPartitions(topic));",
      "337:         for (AuthAction action : AuthAction.values()) {",
      "338:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
      "339:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
      "340:                     () -> subAdmin.topics().createMissedPartitions(topic));",
      "341:             superUserAdmin.topics().revokePermissions(topic, subject);",
      "342:         }",
      "343:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
      "344:     }",
      "345: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b4d4b3613bfb61b38c640b6684b86c3919285a97",
      "candidate_info": {
        "commit_hash": "b4d4b3613bfb61b38c640b6684b86c3919285a97",
        "repo": "apache/pulsar",
        "commit_url": "https://github.com/apache/pulsar/commit/b4d4b3613bfb61b38c640b6684b86c3919285a97",
        "files": [
          "build/run_unit_group.sh",
          "buildtools/src/main/java/org/apache/pulsar/tests/AnnotationListener.java",
          "managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java",
          "pom.xml",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiMultiBrokersTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/PersistentMessageFinderTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ProducerConsumerInternalTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TransactionEndToEndTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TransactionEndToEndWithoutBatchIndexAckTest.java"
        ],
        "message": "[improve][test] Move most flaky tests to flaky group (#22433)\n\n- also add solution for running test methods added to flaky group since that was missing\n\n(cherry picked from commit 5f31ec383bb7526eca24b95002f6cd498057fee7)\n\n# Conflicts:\n#\tpulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java",
        "before_after_code_files": [
          "build/run_unit_group.sh||build/run_unit_group.sh",
          "buildtools/src/main/java/org/apache/pulsar/tests/AnnotationListener.java||buildtools/src/main/java/org/apache/pulsar/tests/AnnotationListener.java",
          "managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java||managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiMultiBrokersTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiMultiBrokersTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/PersistentMessageFinderTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/service/PersistentMessageFinderTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ProducerConsumerInternalTest.java||pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ProducerConsumerInternalTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TransactionEndToEndTest.java||pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TransactionEndToEndTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TransactionEndToEndWithoutBatchIndexAckTest.java||pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TransactionEndToEndWithoutBatchIndexAckTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java"
          ],
          "candidate": [
            "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java"
          ]
        }
      },
      "candidate_diff": {
        "build/run_unit_group.sh||build/run_unit_group.sh": [
          "File: build/run_unit_group.sh -> build/run_unit_group.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "139: function test_group_broker_flaky() {",
          "140:   echo \"::endgroup::\"",
          "141:   echo \"::group::Running quarantined tests\"",
          "143:     -DtestForkCount=2 ||",
          "144:     print_testng_failures pulsar-broker/target/surefire-reports/testng-failed.xml \"Quarantined test failure in\" \"Quarantined test failures\"",
          "145:   echo \"::endgroup::\"",
          "146:   echo \"::group::Running flaky tests\"",
          "148:   echo \"::endgroup::\"",
          "149: }",
          "151: function test_group_proxy() {",
          "",
          "[Removed Lines]",
          "142:   mvn_test --no-fail-fast -pl pulsar-broker -Dgroups='quarantine' -DexcludedGroups='' -DfailIfNoTests=false \\",
          "147:   mvn_test --no-fail-fast -pl pulsar-broker -Dgroups='flaky' -DtestForkCount=2",
          "",
          "[Added Lines]",
          "142:   mvn_test --no-fail-fast -pl pulsar-broker -Dgroups='quarantine' -DexcludedGroups='flaky' -DfailIfNoTests=false \\",
          "147:   mvn_test --no-fail-fast -pl pulsar-broker -Dgroups='flaky' -DexcludedGroups='quarantine' -DtestForkCount=2",
          "149:   local modules_with_flaky_tests=$(git grep -l '@Test.*\"flaky\"' | grep '/src/test/java/' | \\",
          "150:     awk -F '/src/test/java/' '{ print $1 }' | grep -v -E 'pulsar-broker' | sort | uniq | \\",
          "151:     perl -0777 -p -e 's/\\n(\\S)/,$1/g')",
          "152:   if [ -n \"${modules_with_flaky_tests}\" ]; then",
          "153:     echo \"::group::Running flaky tests in modules '${modules_with_flaky_tests}'\"",
          "154:     mvn_test --no-fail-fast -pl \"${modules_with_flaky_tests}\" -Dgroups='flaky' -DexcludedGroups='quarantine' -DfailIfNoTests=false",
          "155:     echo \"::endgroup::\"",
          "156:   fi",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179:     perl -0777 -p -e 's/\\n(\\S)/,$1/g')",
          "180:   if [ -n \"${modules_with_quarantined_tests}\" ]; then",
          "181:     echo \"::group::Running quarantined tests outside of pulsar-broker & pulsar-proxy (if any)\"",
          "183:       -DfailIfNoTests=false || \\",
          "184:         echo \"::warning::There were test failures in the 'quarantine' test group.\"",
          "185:     echo \"::endgroup::\"",
          "",
          "[Removed Lines]",
          "182:     mvn_test --no-fail-fast -pl \"${modules_with_quarantined_tests}\" test -Dgroups='quarantine' -DexcludedGroups='' \\",
          "",
          "[Added Lines]",
          "190:     mvn_test --no-fail-fast -pl \"${modules_with_quarantined_tests}\" test -Dgroups='quarantine' -DexcludedGroups='flaky' \\",
          "",
          "---------------"
        ],
        "buildtools/src/main/java/org/apache/pulsar/tests/AnnotationListener.java||buildtools/src/main/java/org/apache/pulsar/tests/AnnotationListener.java": [
          "File: buildtools/src/main/java/org/apache/pulsar/tests/AnnotationListener.java -> buildtools/src/main/java/org/apache/pulsar/tests/AnnotationListener.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     private static final long DEFAULT_TEST_TIMEOUT_MILLIS = TimeUnit.MINUTES.toMillis(5);",
          "33:     private static final String OTHER_GROUP = \"other\";",
          "35:     public AnnotationListener() {",
          "36:         System.out.println(\"Created annotation listener\");",
          "37:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:     private static final String FLAKY_GROUP = \"flaky\";",
          "37:     private static final String QUARANTINE_GROUP = \"quarantine\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:             annotation.setTimeOut(DEFAULT_TEST_TIMEOUT_MILLIS);",
          "52:         }",
          "54:         addToOtherGroupIfNoGroupsSpecified(annotation);",
          "55:     }",
          "57:     private void addToOtherGroupIfNoGroupsSpecified(ITestOrConfiguration annotation) {",
          "59:         if (annotation.getGroups() == null || annotation.getGroups().length == 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:         replaceGroupsIfFlakyOrQuarantineGroupIsIncluded(annotation);",
          "64:     private void replaceGroupsIfFlakyOrQuarantineGroupIsIncluded(ITestAnnotation annotation) {",
          "65:         if (annotation.getGroups() != null && annotation.getGroups().length > 1) {",
          "66:             for (String group : annotation.getGroups()) {",
          "67:                 if (group.equals(QUARANTINE_GROUP)) {",
          "68:                     annotation.setGroups(new String[]{QUARANTINE_GROUP});",
          "69:                     return;",
          "70:                 }",
          "71:                 if (group.equals(FLAKY_GROUP)) {",
          "72:                     annotation.setGroups(new String[]{FLAKY_GROUP});",
          "73:                     return;",
          "74:                 }",
          "75:             }",
          "76:         }",
          "77:     }",
          "",
          "---------------"
        ],
        "managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java||managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java": [
          "File: managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java -> managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2441:         });",
          "2442:     }",
          "2445:     public void testTimestampOnWorkingLedger() throws Exception {",
          "2446:         ManagedLedgerConfig conf = new ManagedLedgerConfig();",
          "2447:         conf.setMaxEntriesPerLedger(1);",
          "",
          "[Removed Lines]",
          "2444:     @Test",
          "",
          "[Added Lines]",
          "2444:     @Test(groups = \"flaky\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3505:                 .until(() -> firstLedgerId != ml.addEntry(\"test\".getBytes()).getLedgerId());",
          "3506:     }",
          "3509:     public void testLedgerNotRolloverWithoutOpenState() throws Exception {",
          "3510:         ManagedLedgerConfig config = new ManagedLedgerConfig();",
          "3511:         config.setMaxEntriesPerLedger(2);",
          "",
          "[Removed Lines]",
          "3508:     @Test",
          "",
          "[Added Lines]",
          "3508:     @Test(groups = \"flaky\")",
          "",
          "---------------"
        ],
        "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiMultiBrokersTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiMultiBrokersTest.java": [
          "File: pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiMultiBrokersTest.java -> pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiMultiBrokersTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:         Assert.assertEquals(lookupResultSet.size(), 1);",
          "133:     }",
          "136:     public void testForceDeletePartitionedTopicWithSub() throws Exception {",
          "137:         final int numPartitions = 10;",
          "138:         TenantInfoImpl tenantInfo = new TenantInfoImpl(Set.of(\"role1\", \"role2\"), Set.of(\"test\"));",
          "",
          "[Removed Lines]",
          "135:     @Test",
          "",
          "[Added Lines]",
          "135:     @Test(groups = \"flaky\")",
          "",
          "---------------"
        ],
        "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java": [
          "File: pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java -> pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:             .claim(\"sub\", TENANT_ADMIN_SUBJECT).signWith(SECRET_KEY).compact();",
          "55:     @SneakyThrows",
          "57:     public void before() {",
          "58:         configureTokenAuthentication();",
          "59:         configureDefaultAuthorization();",
          "",
          "[Removed Lines]",
          "56:     @BeforeClass",
          "",
          "[Added Lines]",
          "56:     @BeforeClass(alwaysRun = true)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     @SneakyThrows",
          "77:     public void after() {",
          "78:         if (superUserAdmin != null) {",
          "79:             superUserAdmin.close();",
          "",
          "[Removed Lines]",
          "76:     @AfterClass",
          "",
          "[Added Lines]",
          "76:     @AfterClass(alwaysRun = true)",
          "",
          "---------------"
        ],
        "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/PersistentMessageFinderTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/service/PersistentMessageFinderTest.java": [
          "File: pulsar-broker/src/test/java/org/apache/pulsar/broker/service/PersistentMessageFinderTest.java -> pulsar-broker/src/test/java/org/apache/pulsar/broker/service/PersistentMessageFinderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:     void testMessageExpiryWithTimestampNonRecoverableException() throws Exception {",
          "389:         final String ledgerAndCursorName = \"testPersistentMessageExpiryWithNonRecoverableLedgers\";",
          "",
          "[Removed Lines]",
          "386:     @Test",
          "",
          "[Added Lines]",
          "386:     @Test(groups = \"flaky\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "441:     }",
          "444:     public void testIncorrectClientClock() throws Exception {",
          "445:         final String ledgerAndCursorName = \"testIncorrectClientClock\";",
          "446:         int maxTTLSeconds = 1;",
          "",
          "[Removed Lines]",
          "443:     @Test",
          "",
          "[Added Lines]",
          "443:     @Test(groups = \"flaky\")",
          "",
          "---------------"
        ],
        "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ProducerConsumerInternalTest.java||pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ProducerConsumerInternalTest.java": [
          "File: pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ProducerConsumerInternalTest.java -> pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ProducerConsumerInternalTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:         });",
          "117:     }",
          "120:     public void testExclusiveConsumerWillAlwaysRetryEvenIfReceivedConsumerBusyError() throws Exception {",
          "121:         final String topicName = BrokerTestUtil.newUniqueName(\"persistent://my-property/my-ns/tp_\");",
          "122:         final String subscriptionName = \"subscription1\";",
          "",
          "[Removed Lines]",
          "119:     @Test",
          "",
          "[Added Lines]",
          "119:     @Test(groups = \"flaky\")",
          "",
          "---------------"
        ],
        "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TransactionEndToEndTest.java||pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TransactionEndToEndTest.java": [
          "File: pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TransactionEndToEndTest.java -> pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TransactionEndToEndTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:     protected static final int NUM_PARTITIONS = 16;",
          "99:     private static final int waitTimeForCanReceiveMsgInSec = 5;",
          "100:     private static final int waitTimeForCannotReceiveMsgInSec = 5;",
          "102:     protected void setup() throws Exception {",
          "103:         conf.setAcknowledgmentAtBatchIndexLevelEnabled(true);",
          "104:         setUpBase(1, NUM_PARTITIONS, TOPIC_OUTPUT, TOPIC_PARTITION);",
          "",
          "[Removed Lines]",
          "101:     @BeforeClass",
          "",
          "[Added Lines]",
          "101:     @BeforeClass(alwaysRun = true)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1626:         admin.topics().delete(topic, true);",
          "1627:     }",
          "1630:     public void testDelayedTransactionMessages() throws Exception {",
          "1631:         String topic = NAMESPACE1 + \"/testDelayedTransactionMessages\";",
          "",
          "[Removed Lines]",
          "1629:     @Test",
          "",
          "[Added Lines]",
          "1629:     @Test(groups = \"flaky\")",
          "",
          "---------------"
        ],
        "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TransactionEndToEndWithoutBatchIndexAckTest.java||pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TransactionEndToEndWithoutBatchIndexAckTest.java": [
          "File: pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TransactionEndToEndWithoutBatchIndexAckTest.java -> pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TransactionEndToEndWithoutBatchIndexAckTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: @Test(groups = \"broker-impl\")",
          "31: public class TransactionEndToEndWithoutBatchIndexAckTest extends TransactionEndToEndTest {",
          "34:     protected void setup() throws Exception {",
          "35:         conf.setAcknowledgmentAtBatchIndexLevelEnabled(false);",
          "36:         setUpBase(1, NUM_PARTITIONS, TOPIC_OUTPUT, TOPIC_PARTITION);",
          "",
          "[Removed Lines]",
          "33:     @BeforeClass",
          "",
          "[Added Lines]",
          "33:     @BeforeClass(alwaysRun = true)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c4f4cb64167c0ea1a5775f6d991b386ad95c786",
      "candidate_info": {
        "commit_hash": "5c4f4cb64167c0ea1a5775f6d991b386ad95c786",
        "repo": "apache/pulsar",
        "commit_url": "https://github.com/apache/pulsar/commit/5c4f4cb64167c0ea1a5775f6d991b386ad95c786",
        "files": [
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/BaseAuthZTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicPoliciesAuthZTest.java"
        ],
        "message": "[improve][broker] Add fine-grain authorization to ns/topic management endpoints (#22305)\n\n(cherry picked from commit fd34d4ab9c5aa7e0dca961d5a8badae4613fbe8e)\n\n# Conflicts:\n#\tpulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\n(cherry picked from commit 99eb49a68982271562597d4c4cea127132bc0b35)\n\n# Conflicts:\n#\tpulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n#\tpulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
        "before_after_code_files": [
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/BaseAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/BaseAuthZTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicPoliciesAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicPoliciesAuthZTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
            "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
            "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java"
          ],
          "candidate": [
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
            "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
            "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java"
          ]
        }
      },
      "candidate_diff": {
        "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java": [
          "File: pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java -> pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: import org.apache.pulsar.common.policies.data.NamespaceOperation;",
          "55: import org.apache.pulsar.common.policies.data.PersistencePolicies;",
          "56: import org.apache.pulsar.common.policies.data.Policies;",
          "59: import org.apache.pulsar.common.policies.data.RetentionPolicies;",
          "60: import org.apache.pulsar.common.policies.data.SchemaCompatibilityStrategy;",
          "61: import org.apache.pulsar.common.policies.data.SubscribeRate;",
          "",
          "[Removed Lines]",
          "57: import org.apache.pulsar.common.policies.data.PolicyName;",
          "58: import org.apache.pulsar.common.policies.data.PolicyOperation;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "772:     }",
          "774:     protected CompletableFuture<SchemaCompatibilityStrategy> getSchemaCompatibilityStrategyAsync() {",
          "779:                     if (ex != null) {",
          "780:                         log.error(\"[{}] Failed to get schema compatibility strategy of topic {} {}\",",
          "781:                                 clientAppId(), topicName, ex);",
          "",
          "[Removed Lines]",
          "775:         return validateTopicPolicyOperationAsync(topicName,",
          "776:                 PolicyName.SCHEMA_COMPATIBILITY_STRATEGY,",
          "777:                 PolicyOperation.READ)",
          "778:                 .thenCompose((__) -> getSchemaCompatibilityStrategyAsyncWithoutAuth()).whenComplete((__, ex) -> {",
          "",
          "[Added Lines]",
          "773:         return getSchemaCompatibilityStrategyAsyncWithoutAuth().whenComplete((__, ex) -> {",
          "",
          "---------------"
        ],
        "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java": [
          "File: pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java -> pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2639:    }",
          "2641:    protected void internalSetProperty(String key, String value, AsyncResponse asyncResponse) {",
          "2657:    }",
          "2659:    protected void internalSetProperties(Map<String, String> properties, AsyncResponse asyncResponse) {",
          "2675:    }",
          "2677:    protected void internalGetProperty(String key, AsyncResponse asyncResponse) {",
          "2687:    }",
          "2689:    protected void internalGetProperties(AsyncResponse asyncResponse) {",
          "2698:    }",
          "2700:    protected void internalRemoveProperty(String key, AsyncResponse asyncResponse) {",
          "2703:        AtomicReference<String> oldVal = new AtomicReference<>(null);",
          "2718:    }",
          "2720:    protected void internalClearProperties(AsyncResponse asyncResponse) {",
          "2722:        AtomicReference<Integer> clearedCount = new AtomicReference<>(0);",
          "2738:    }",
          "2740:    private CompletableFuture<Void> updatePoliciesAsync(NamespaceName ns, Function<Policies, Policies> updateFunction) {",
          "",
          "[Removed Lines]",
          "2642:        validatePoliciesReadOnlyAccess();",
          "2643:        updatePoliciesAsync(namespaceName, policies -> {",
          "2644:            policies.properties.put(key, value);",
          "2645:            return policies;",
          "2646:        }).thenAccept(v -> {",
          "2647:            log.info(\"[{}] Successfully set property for key {} on namespace {}\", clientAppId(), key,",
          "2648:                    namespaceName);",
          "2649:            asyncResponse.resume(Response.noContent().build());",
          "2650:        }).exceptionally(ex -> {",
          "2651:            Throwable cause = ex.getCause();",
          "2652:            log.error(\"[{}] Failed to set property for key {} on namespace {}\", clientAppId(), key,",
          "2653:                    namespaceName, cause);",
          "2654:            asyncResponse.resume(cause);",
          "2655:            return null;",
          "2656:        });",
          "2660:        validatePoliciesReadOnlyAccess();",
          "2661:        updatePoliciesAsync(namespaceName, policies -> {",
          "2662:            policies.properties.putAll(properties);",
          "2663:            return policies;",
          "2664:        }).thenAccept(v -> {",
          "2665:            log.info(\"[{}] Successfully set {} properties on namespace {}\", clientAppId(), properties.size(),",
          "2666:                    namespaceName);",
          "2667:            asyncResponse.resume(Response.noContent().build());",
          "2668:        }).exceptionally(ex -> {",
          "2669:            Throwable cause = ex.getCause();",
          "2670:            log.error(\"[{}] Failed to set {} properties on namespace {}\", clientAppId(), properties.size(),",
          "2671:                    namespaceName, cause);",
          "2672:            asyncResponse.resume(cause);",
          "2673:            return null;",
          "2674:        });",
          "2678:         getNamespacePoliciesAsync(namespaceName).thenAccept(policies -> {",
          "2679:             asyncResponse.resume(policies.properties.get(key));",
          "2680:         }).exceptionally(ex -> {",
          "2681:             Throwable cause = ex.getCause();",
          "2682:             log.error(\"[{}] Failed to get property for key {} of namespace {}\", clientAppId(), key,",
          "2683:                     namespaceName, cause);",
          "2684:             asyncResponse.resume(cause);",
          "2685:             return null;",
          "2686:         });",
          "2690:        getNamespacePoliciesAsync(namespaceName).thenAccept(policies -> {",
          "2691:            asyncResponse.resume(policies.properties);",
          "2692:        }).exceptionally(ex -> {",
          "2693:            Throwable cause = ex.getCause();",
          "2694:            log.error(\"[{}] Failed to get properties of namespace {}\", clientAppId(), namespaceName, cause);",
          "2695:            asyncResponse.resume(cause);",
          "2696:            return null;",
          "2697:        });",
          "2701:        validatePoliciesReadOnlyAccess();",
          "2704:        updatePoliciesAsync(namespaceName, policies -> {",
          "2705:            oldVal.set(policies.properties.remove(key));",
          "2706:            return policies;",
          "2707:        }).thenAccept(v -> {",
          "2708:            asyncResponse.resume(oldVal.get());",
          "2709:            log.info(\"[{}] Successfully remove property for key {} on namespace {}\", clientAppId(), key,",
          "2710:                    namespaceName);",
          "2711:        }).exceptionally(ex -> {",
          "2712:            Throwable cause = ex.getCause();",
          "2713:            log.error(\"[{}] Failed to remove property for key {} on namespace {}\", clientAppId(), key,",
          "2714:                    namespaceName, cause);",
          "2715:            asyncResponse.resume(cause);",
          "2716:           return null;",
          "2717:        });",
          "2721:        validatePoliciesReadOnlyAccess();",
          "2723:        updatePoliciesAsync(namespaceName, policies -> {",
          "2724:            clearedCount.set(policies.properties.size());",
          "2725:            policies.properties.clear();",
          "2726:            return policies;",
          "2727:        }).thenAccept(v -> {",
          "2728:            asyncResponse.resume(Response.noContent().build());",
          "2729:            log.info(\"[{}] Successfully clear {} properties on namespace {}\", clientAppId(), clearedCount.get(),",
          "2730:                    namespaceName);",
          "2731:        }).exceptionally(ex -> {",
          "2732:            Throwable cause = ex.getCause();",
          "2733:            log.error(\"[{}] Failed to clear {} properties on namespace {}\", clientAppId(), clearedCount.get(),",
          "2734:                    namespaceName, cause);",
          "2735:            asyncResponse.resume(cause);",
          "2736:            return null;",
          "2737:        });",
          "",
          "[Added Lines]",
          "2642:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2643:                .thenCompose(__ -> validatePoliciesReadOnlyAccessAsync())",
          "2644:                .thenCompose(__ -> updatePoliciesAsync(namespaceName, policies -> {",
          "2645:                    policies.properties.put(key, value);",
          "2646:                    return policies;",
          "2647:                }))",
          "2648:                .thenAccept(v -> {",
          "2649:                    log.info(\"[{}] Successfully set property for key {} on namespace {}\", clientAppId(), key,",
          "2650:                            namespaceName);",
          "2651:                    asyncResponse.resume(Response.noContent().build());",
          "2652:                }).exceptionally(ex -> {",
          "2653:                    Throwable cause = ex.getCause();",
          "2654:                    log.error(\"[{}] Failed to set property for key {} on namespace {}\", clientAppId(), key,",
          "2655:                            namespaceName, cause);",
          "2656:                    asyncResponse.resume(cause);",
          "2657:                    return null;",
          "2658:                });",
          "2662:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2663:                .thenCompose(__ -> validatePoliciesReadOnlyAccessAsync())",
          "2664:                .thenCompose(__ -> updatePoliciesAsync(namespaceName, policies -> {",
          "2665:                    policies.properties.putAll(properties);",
          "2666:                    return policies;",
          "2667:                }))",
          "2668:                .thenAccept(v -> {",
          "2669:                    log.info(\"[{}] Successfully set {} properties on namespace {}\", clientAppId(), properties.size(),",
          "2670:                            namespaceName);",
          "2671:                    asyncResponse.resume(Response.noContent().build());",
          "2672:                }).exceptionally(ex -> {",
          "2673:                    Throwable cause = ex.getCause();",
          "2674:                    log.error(\"[{}] Failed to set {} properties on namespace {}\", clientAppId(), properties.size(),",
          "2675:                            namespaceName, cause);",
          "2676:                    asyncResponse.resume(cause);",
          "2677:                    return null;",
          "2678:                });",
          "2682:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2683:                .thenCompose(__ -> getNamespacePoliciesAsync(namespaceName))",
          "2684:                .thenAccept(policies -> asyncResponse.resume(policies.properties.get(key)))",
          "2685:                .exceptionally(ex -> {",
          "2686:                    Throwable cause = ex.getCause();",
          "2687:                    log.error(\"[{}] Failed to get property for key {} of namespace {}\", clientAppId(), key,",
          "2688:                            namespaceName, cause);",
          "2689:                    asyncResponse.resume(cause);",
          "2690:                    return null;",
          "2691:                });",
          "2695:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2696:                .thenCompose(__ -> getNamespacePoliciesAsync(namespaceName))",
          "2697:                .thenAccept(policies -> asyncResponse.resume(policies.properties))",
          "2698:                .exceptionally(ex -> {",
          "2699:                    Throwable cause = ex.getCause();",
          "2700:                    log.error(\"[{}] Failed to get properties of namespace {}\", clientAppId(), namespaceName, cause);",
          "2701:                    asyncResponse.resume(cause);",
          "2702:                    return null;",
          "2703:                });",
          "2708:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2709:                .thenCompose(__ -> validatePoliciesReadOnlyAccessAsync())",
          "2710:                .thenCompose(__ -> updatePoliciesAsync(namespaceName, policies -> {",
          "2711:                    oldVal.set(policies.properties.remove(key));",
          "2712:                    return policies;",
          "2713:                })).thenAccept(v -> {",
          "2714:                    asyncResponse.resume(oldVal.get());",
          "2715:                    log.info(\"[{}] Successfully remove property for key {} on namespace {}\", clientAppId(), key,",
          "2716:                            namespaceName);",
          "2717:                }).exceptionally(ex -> {",
          "2718:                    Throwable cause = ex.getCause();",
          "2719:                    log.error(\"[{}] Failed to remove property for key {} on namespace {}\", clientAppId(), key,",
          "2720:                            namespaceName, cause);",
          "2721:                    asyncResponse.resume(cause);",
          "2722:                    return null;",
          "2723:                });",
          "2728:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2729:                .thenCompose(__ -> validatePoliciesReadOnlyAccessAsync())",
          "2730:                .thenCompose(__ -> updatePoliciesAsync(namespaceName, policies -> {",
          "2731:                    clearedCount.set(policies.properties.size());",
          "2732:                    policies.properties.clear();",
          "2733:                    return policies;",
          "2734:                }))",
          "2735:                .thenAccept(v -> {",
          "2736:                    asyncResponse.resume(Response.noContent().build());",
          "2737:                    log.info(\"[{}] Successfully clear {} properties on namespace {}\", clientAppId(), clearedCount.get(),",
          "2738:                            namespaceName);",
          "2739:                }).exceptionally(ex -> {",
          "2740:                    Throwable cause = ex.getCause();",
          "2741:                    log.error(\"[{}] Failed to clear {} properties on namespace {}\", clientAppId(), clearedCount.get(),",
          "2742:                            namespaceName, cause);",
          "2743:                    asyncResponse.resume(cause);",
          "2744:                    return null;",
          "2745:                });",
          "",
          "---------------"
        ],
        "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java": [
          "File: pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java -> pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "503:     protected void internalCreateMissedPartitions(AsyncResponse asyncResponse) {",
          "504:         getPartitionedTopicMetadataAsync(topicName, false, false).thenAccept(metadata -> {",
          "505:             if (metadata != null) {",
          "507:                     asyncResponse.resume(Response.noContent().build());",
          "508:                 }).exceptionally(e -> {",
          "509:                     log.error(\"[{}] Failed to create partitions for topic {}\", clientAppId(), topicName);",
          "",
          "[Removed Lines]",
          "506:                 tryCreatePartitionsAsync(metadata.partitions).thenAccept(v -> {",
          "",
          "[Added Lines]",
          "506:                 CompletableFuture<Void> future = validateNamespaceOperationAsync(topicName.getNamespaceObject(),",
          "507:                         NamespaceOperation.CREATE_TOPIC);",
          "508:                 future.thenCompose(__ -> tryCreatePartitionsAsync(metadata.partitions)).thenAccept(v -> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "742:     protected void internalUnloadTopic(AsyncResponse asyncResponse, boolean authoritative) {",
          "743:         log.info(\"[{}] Unloading topic {}\", clientAppId(), topicName);",
          "752:            if (topicName.isPartitioned()) {",
          "753:                if (isTransactionCoordinatorAssign(topicName)) {",
          "",
          "[Removed Lines]",
          "744:         CompletableFuture<Void> future;",
          "745:         if (topicName.isGlobal()) {",
          "746:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "747:         } else {",
          "748:             future = CompletableFuture.completedFuture(null);",
          "749:         }",
          "750:        future.thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "746:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.UNLOAD);",
          "747:         future.thenCompose(__ -> {",
          "748:             if (topicName.isGlobal()) {",
          "749:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "750:             }",
          "751:             return CompletableFuture.completedFuture(null);",
          "752:         }).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "966:     private void internalUnloadNonPartitionedTopicAsync(AsyncResponse asyncResponse, boolean authoritative) {",
          "967:         validateTopicOwnershipAsync(topicName, authoritative)",
          "969:                         .thenCompose(__ -> getTopicReferenceAsync(topicName))",
          "970:                         .thenCompose(topic -> topic.close(false))",
          "971:                         .thenRun(() -> {",
          "972:                             log.info(\"[{}] Successfully unloaded topic {}\", clientAppId(), topicName);",
          "973:                             asyncResponse.resume(Response.noContent().build());",
          "975:                 .exceptionally(ex -> {",
          "977:                     if (!isNot307And404Exception(ex)) {",
          "",
          "[Removed Lines]",
          "968:                 .thenCompose(unused -> validateTopicOperationAsync(topicName, TopicOperation.UNLOAD)",
          "974:                         }))",
          "",
          "[Added Lines]",
          "975:                         })",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "985:     private void internalUnloadTransactionCoordinatorAsync(AsyncResponse asyncResponse, boolean authoritative) {",
          "986:         validateTopicOwnershipAsync(topicName, authoritative)",
          "997:                 .exceptionally(ex -> {",
          "999:                     if (!isNot307And404Exception(ex)) {",
          "",
          "[Removed Lines]",
          "987:                 .thenCompose(__ -> validateTopicOperationAsync(topicName, TopicOperation.UNLOAD)",
          "988:                         .thenCompose(v -> pulsar()",
          "989:                                 .getTransactionMetadataStoreService()",
          "990:                                 .removeTransactionMetadataStore(",
          "991:                                         TransactionCoordinatorID.get(topicName.getPartitionIndex())))",
          "992:                         .thenRun(() -> {",
          "993:                             log.info(\"[{}] Successfully unloaded tc {}\", clientAppId(),",
          "994:                                     topicName.getPartitionIndex());",
          "995:                             asyncResponse.resume(Response.noContent().build());",
          "996:                         }))",
          "",
          "[Added Lines]",
          "988:                 .thenCompose(v -> pulsar()",
          "989:                         .getTransactionMetadataStoreService()",
          "990:                         .removeTransactionMetadataStore(",
          "991:                                 TransactionCoordinatorID.get(topicName.getPartitionIndex())))",
          "992:                 .thenRun(() -> {",
          "993:                     log.info(\"[{}] Successfully unloaded tc {}\", clientAppId(), topicName.getPartitionIndex());",
          "994:                     asyncResponse.resume(Response.noContent().build());",
          "995:                 })",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1204:     }",
          "1206:     protected void internalGetManagedLedgerInfo(AsyncResponse asyncResponse, boolean authoritative) {",
          "1215:             if (topicName.isPartitioned()) {",
          "1216:                 internalGetManagedLedgerInfoForNonPartitionedTopic(asyncResponse);",
          "",
          "[Removed Lines]",
          "1207:         CompletableFuture<Void> future;",
          "1208:         if (topicName.isGlobal()) {",
          "1209:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1210:         } else {",
          "1211:             future = CompletableFuture.completedFuture(null);",
          "1212:         }",
          "1213:         future.thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "1206:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.GET_STATS);",
          "1207:         future.thenCompose(__ -> {",
          "1208:             if (topicName.isGlobal()) {",
          "1209:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1210:             }",
          "1211:             return CompletableFuture.completedFuture(null);",
          "1212:         }).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1317:     protected void internalGetPartitionedStats(AsyncResponse asyncResponse, boolean authoritative, boolean perPartition,",
          "1318:                                                boolean getPreciseBacklog, boolean subscriptionBacklogSize,",
          "1319:                                                boolean getEarliestTimeInBacklog) {",
          "1327:                 authoritative, false)).thenAccept(partitionMetadata -> {",
          "1328:             if (partitionMetadata.partitions == 0) {",
          "1329:                 asyncResponse.resume(new RestException(Status.NOT_FOUND,",
          "",
          "[Removed Lines]",
          "1320:         CompletableFuture<Void> future;",
          "1321:         if (topicName.isGlobal()) {",
          "1322:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1323:         } else {",
          "1324:             future = CompletableFuture.completedFuture(null);",
          "1325:         }",
          "1326:         future.thenCompose(__ -> getPartitionedTopicMetadataAsync(topicName,",
          "",
          "[Added Lines]",
          "1319:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.GET_STATS);",
          "1320:         future.thenCompose(__ -> {",
          "1321:             if (topicName.isGlobal()) {",
          "1322:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1323:             }",
          "1324:             return  CompletableFuture.completedFuture(null);",
          "1325:         }).thenCompose(__ -> getPartitionedTopicMetadataAsync(topicName,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1403:     }",
          "1405:     protected void internalGetPartitionedStatsInternal(AsyncResponse asyncResponse, boolean authoritative) {",
          "1414:             if (partitionMetadata.partitions == 0) {",
          "1415:                 asyncResponse.resume(new RestException(Status.NOT_FOUND,",
          "1416:                         getPartitionedTopicNotFoundErrorMessage(topicName.toString())));",
          "",
          "[Removed Lines]",
          "1406:         CompletableFuture<Void> future;",
          "1407:         if (topicName.isGlobal()) {",
          "1408:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1409:         } else {",
          "1410:             future = CompletableFuture.completedFuture(null);",
          "1411:         }",
          "1412:         future.thenCompose(__ -> getPartitionedTopicMetadataAsync(topicName, authoritative, false))",
          "1413:                 .thenAccept(partitionMetadata -> {",
          "",
          "[Added Lines]",
          "1405:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.GET_STATS);",
          "1406:         future.thenCompose(__ -> {",
          "1407:             if (topicName.isGlobal()) {",
          "1408:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1409:             } else {",
          "1410:                 return CompletableFuture.completedFuture(null);",
          "1411:             }",
          "1412:         }).thenCompose(__ -> getPartitionedTopicMetadataAsync(topicName, authoritative, false))",
          "1413:         .thenAccept(partitionMetadata -> {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2214:     protected void internalCreateSubscription(AsyncResponse asyncResponse, String subscriptionName,",
          "2215:             MessageIdImpl messageId, boolean authoritative, boolean replicated, Map<String, String> properties) {",
          "2223:             final MessageIdImpl targetMessageId = messageId == null ? (MessageIdImpl) MessageId.latest : messageId;",
          "2224:             log.info(\"[{}][{}] Creating subscription {} at message id {} with properties {}\", clientAppId(),",
          "2225:                     topicName, subscriptionName, targetMessageId, properties);",
          "",
          "[Removed Lines]",
          "2216:         CompletableFuture<Void> ret;",
          "2217:         if (topicName.isGlobal()) {",
          "2218:             ret = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2219:         } else {",
          "2220:             ret = CompletableFuture.completedFuture(null);",
          "2221:         }",
          "2222:         ret.thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "2216:         CompletableFuture<Void> ret = validateTopicOperationAsync(topicName, TopicOperation.SUBSCRIBE,",
          "2217:                 subscriptionName);",
          "2218:         ret.thenCompose(__ -> {",
          "2219:             if (topicName.isGlobal()) {",
          "2220:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2221:             }",
          "2222:             return CompletableFuture.completedFuture(null);",
          "2223:         }).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2378:     protected void internalUpdateSubscriptionProperties(AsyncResponse asyncResponse, String subName,",
          "2379:                                                         Map<String, String> subscriptionProperties,",
          "2380:                                                         boolean authoritative) {",
          "2389:             if (topicName.isPartitioned()) {",
          "2390:                 internalUpdateSubscriptionPropertiesForNonPartitionedTopic(asyncResponse, subName,",
          "2391:                         subscriptionProperties, authoritative);",
          "",
          "[Removed Lines]",
          "2381:         CompletableFuture<Void> future;",
          "2382:         if (topicName.isGlobal()) {",
          "2383:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2384:         } else {",
          "2385:             future = CompletableFuture.completedFuture(null);",
          "2386:         }",
          "2388:         future.thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative)).thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "2382:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.SUBSCRIBE, subName);",
          "2383:         future.thenCompose(__ -> {",
          "2384:             if (topicName.isGlobal()) {",
          "2385:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2386:             }",
          "2387:             return CompletableFuture.completedFuture(null);",
          "2388:         }).thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative)).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2457:     protected void internalAnalyzeSubscriptionBacklog(AsyncResponse asyncResponse, String subName,",
          "2458:                                                       Optional<Position> position,",
          "2459:                                                       boolean authoritative) {",
          "2468:                 .thenCompose(__ -> {",
          "2469:                     if (topicName.isPartitioned()) {",
          "2470:                         return CompletableFuture.completedFuture(null);",
          "",
          "[Removed Lines]",
          "2460:         CompletableFuture<Void> future;",
          "2461:         if (topicName.isGlobal()) {",
          "2462:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2463:         } else {",
          "2464:             future = CompletableFuture.completedFuture(null);",
          "2465:         }",
          "2467:         future.thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative))",
          "",
          "[Added Lines]",
          "2460:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.CONSUME, subName);",
          "2461:         future.thenCompose(__ -> {",
          "2462:             if (topicName.isGlobal()) {",
          "2463:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2464:             }",
          "2465:             return CompletableFuture.completedFuture(null);",
          "2466:         }).thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2497:     protected void internalGetSubscriptionProperties(AsyncResponse asyncResponse, String subName,",
          "2498:                                                         boolean authoritative) {",
          "2507:             if (topicName.isPartitioned()) {",
          "2508:                 internalGetSubscriptionPropertiesForNonPartitionedTopic(asyncResponse, subName,",
          "2509:                         authoritative);",
          "",
          "[Removed Lines]",
          "2499:         CompletableFuture<Void> future;",
          "2500:         if (topicName.isGlobal()) {",
          "2501:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2502:         } else {",
          "2503:             future = CompletableFuture.completedFuture(null);",
          "2504:         }",
          "2506:         future.thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative)).thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "2498:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.CONSUME, subName);",
          "2499:         future.thenCompose(__ -> {",
          "2500:             if (topicName.isGlobal()) {",
          "2501:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2502:             }",
          "2503:             return CompletableFuture.completedFuture(null);",
          "2504:         }).thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative)).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4120:     protected void internalTriggerCompaction(AsyncResponse asyncResponse, boolean authoritative) {",
          "4121:         log.info(\"[{}] Trigger compaction on topic {}\", clientAppId(), topicName);",
          "4130:             if (topicName.isPartitioned()) {",
          "4131:                 internalTriggerCompactionNonPartitionedTopic(asyncResponse, authoritative);",
          "",
          "[Removed Lines]",
          "4122:         CompletableFuture<Void> future;",
          "4123:         if (topicName.isGlobal()) {",
          "4124:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "4125:         } else {",
          "4126:             future = CompletableFuture.completedFuture(null);",
          "4127:         }",
          "4128:         future.thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "4120:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.COMPACT);",
          "4121:         future.thenCompose(__ -> {",
          "4122:             if (topicName.isGlobal()) {",
          "4123:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "4124:             } else {",
          "4125:                 return CompletableFuture.completedFuture(null);",
          "4126:             }",
          "4127:         }).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5344:     }",
          "5346:     protected CompletableFuture<SchemaCompatibilityStrategy> internalGetSchemaCompatibilityStrategy(boolean applied) {",
          "5347:         if (applied) {",
          "5349:         }",
          "5353:                 .thenCompose(n -> getTopicPoliciesAsyncWithRetry(topicName).thenApply(op -> {",
          "5354:                     if (!op.isPresent()) {",
          "5355:                         return null;",
          "",
          "[Removed Lines]",
          "5348:             return getSchemaCompatibilityStrategyAsync();",
          "5350:         return validateTopicPolicyOperationAsync(topicName,",
          "5351:                 PolicyName.SCHEMA_COMPATIBILITY_STRATEGY,",
          "5352:                 PolicyOperation.READ)",
          "",
          "[Added Lines]",
          "5346:         CompletableFuture<Void> future = validateTopicPolicyOperationAsync(topicName,",
          "5347:                 PolicyName.SCHEMA_COMPATIBILITY_STRATEGY, PolicyOperation.READ);",
          "5349:             return future.thenCompose(__ -> getSchemaCompatibilityStrategyAsync());",
          "5351:         return future",
          "",
          "---------------"
        ],
        "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/BaseAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/BaseAuthZTest.java": [
          "File: pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/BaseAuthZTest.java -> pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/BaseAuthZTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.pulsar.broker.admin;",
          "21: import io.jsonwebtoken.Jwts;",
          "22: import io.jsonwebtoken.SignatureAlgorithm;",
          "23: import java.util.HashMap;",
          "24: import java.util.Map;",
          "25: import java.util.Properties;",
          "26: import java.util.Set;",
          "27: import java.util.UUID;",
          "28: import javax.crypto.SecretKey;",
          "29: import org.apache.pulsar.broker.auth.MockedPulsarServiceBaseTest;",
          "30: import org.apache.pulsar.broker.authentication.AuthenticationProviderToken;",
          "31: import org.apache.pulsar.broker.authentication.utils.AuthTokenUtils;",
          "32: import org.apache.pulsar.broker.authorization.PulsarAuthorizationProvider;",
          "33: import org.apache.pulsar.client.admin.PulsarAdmin;",
          "34: import org.apache.pulsar.client.admin.PulsarAdminBuilder;",
          "35: import org.apache.pulsar.client.impl.auth.AuthenticationToken;",
          "36: import org.apache.pulsar.common.policies.data.TenantInfo;",
          "37: import org.apache.pulsar.common.util.ObjectMapperFactory;",
          "38: import org.testng.annotations.AfterClass;",
          "39: import org.testng.annotations.BeforeClass;",
          "41: public abstract class BaseAuthZTest extends MockedPulsarServiceBaseTest {",
          "42:     protected static final SecretKey SECRET_KEY = AuthTokenUtils.createSecretKey(SignatureAlgorithm.HS256);",
          "43:     private static final String TENANT_ADMIN_SUBJECT = UUID.randomUUID().toString();",
          "44:     private static final String TENANT_ADMIN_TOKEN = Jwts.builder()",
          "45:             .claim(\"sub\", TENANT_ADMIN_SUBJECT).signWith(SECRET_KEY).compact();",
          "46:     private static final String BROKER_INTERNAL_CLIENT_SUBJECT = \"broker_internal\";",
          "47:     private static final String BROKER_INTERNAL_CLIENT_TOKEN = Jwts.builder()",
          "48:             .claim(\"sub\", BROKER_INTERNAL_CLIENT_SUBJECT).signWith(SECRET_KEY).compact();",
          "49:     private static final String SUPER_USER_SUBJECT = \"super-user\";",
          "50:     private static final String SUPER_USER_TOKEN = Jwts.builder()",
          "51:             .claim(\"sub\", SUPER_USER_SUBJECT).signWith(SECRET_KEY).compact();",
          "52:     private static final String NOBODY_SUBJECT = \"nobody\";",
          "53:     private static final String NOBODY_TOKEN = Jwts.builder()",
          "54:             .claim(\"sub\", NOBODY_SUBJECT).signWith(SECRET_KEY).compact();",
          "55:     protected PulsarAdmin superUserAdmin;",
          "56:     protected PulsarAdmin tenantManagerAdmin;",
          "58:     @BeforeClass",
          "59:     @Override",
          "60:     protected void setup() throws Exception {",
          "61:         conf.setAuthorizationEnabled(true);",
          "62:         conf.setAuthorizationProvider(PulsarAuthorizationProvider.class.getName());",
          "63:         conf.setSuperUserRoles(Set.of(SUPER_USER_SUBJECT, BROKER_INTERNAL_CLIENT_SUBJECT));",
          "64:         conf.setAuthenticationEnabled(true);",
          "65:         conf.setAuthenticationProviders(Set.of(AuthenticationProviderToken.class.getName()));",
          "67:         conf.setBrokerClientAuthenticationPlugin(AuthenticationToken.class.getName());",
          "68:         final Map<String, String> brokerClientAuthParams = new HashMap<>();",
          "69:         brokerClientAuthParams.put(\"token\", BROKER_INTERNAL_CLIENT_TOKEN);",
          "70:         final String brokerClientAuthParamStr = ObjectMapperFactory.getThreadLocal()",
          "71:                 .writeValueAsString(brokerClientAuthParams);",
          "72:         conf.setBrokerClientAuthenticationParameters(brokerClientAuthParamStr);",
          "74:         Properties properties = conf.getProperties();",
          "75:         if (properties == null) {",
          "76:             properties = new Properties();",
          "77:             conf.setProperties(properties);",
          "78:         }",
          "79:         properties.put(\"tokenSecretKey\", AuthTokenUtils.encodeKeyBase64(SECRET_KEY));",
          "81:         internalSetup();",
          "82:         setupDefaultTenantAndNamespace();",
          "84:         this.superUserAdmin = PulsarAdmin.builder()",
          "85:                 .serviceHttpUrl(pulsar.getWebServiceAddress())",
          "86:                 .authentication(new AuthenticationToken(SUPER_USER_TOKEN))",
          "87:                 .build();",
          "88:         final TenantInfo tenantInfo = superUserAdmin.tenants().getTenantInfo(\"public\");",
          "89:         tenantInfo.getAdminRoles().add(TENANT_ADMIN_SUBJECT);",
          "90:         superUserAdmin.tenants().updateTenant(\"public\", tenantInfo);",
          "91:         this.tenantManagerAdmin = PulsarAdmin.builder()",
          "92:                 .serviceHttpUrl(pulsar.getWebServiceAddress())",
          "93:                 .authentication(new AuthenticationToken(TENANT_ADMIN_TOKEN))",
          "94:                 .build();",
          "95:     }",
          "97:     @Override",
          "98:     protected void customizeNewPulsarAdminBuilder(PulsarAdminBuilder pulsarAdminBuilder) {",
          "99:         pulsarAdminBuilder.authentication(new AuthenticationToken(SUPER_USER_TOKEN));",
          "100:     }",
          "102:     @AfterClass",
          "103:     @Override",
          "104:     protected void cleanup() throws Exception {",
          "105:         internalCleanup();",
          "106:     }",
          "107: }",
          "",
          "---------------"
        ],
        "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java": [
          "File: pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java -> pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.pulsar.broker.admin;",
          "22: import io.jsonwebtoken.Jwts;",
          "23: import java.util.HashMap;",
          "24: import java.util.Map;",
          "25: import java.util.Set;",
          "26: import java.util.UUID;",
          "27: import lombok.Cleanup;",
          "28: import lombok.SneakyThrows;",
          "29: import org.apache.pulsar.client.admin.PulsarAdmin;",
          "30: import org.apache.pulsar.client.admin.PulsarAdminException;",
          "31: import org.apache.pulsar.client.impl.auth.AuthenticationToken;",
          "32: import org.apache.pulsar.common.policies.data.AuthAction;",
          "33: import org.testng.Assert;",
          "34: import org.testng.annotations.Test;",
          "36: @Test(groups = \"broker-admin\")",
          "37: public class NamespaceAuthZTest extends BaseAuthZTest {",
          "38:     @SneakyThrows",
          "39:     @Test",
          "40:     public void testProperties() {",
          "41:         final String random = UUID.randomUUID().toString();",
          "42:         final String namespace = \"public/default\";",
          "43:         final String topic = \"persistent://public/default/\" + random;",
          "44:         final String subject =  UUID.randomUUID().toString();",
          "45:         final String token = Jwts.builder()",
          "46:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "47:         superUserAdmin.topics().createNonPartitionedTopic(topic);",
          "49:         @Cleanup",
          "50:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "51:                 .serviceHttpUrl(pulsar.getWebServiceAddress())",
          "52:                 .authentication(new AuthenticationToken(token))",
          "53:                 .build();",
          "55:         Map<String, String> properties = new HashMap<>();",
          "56:         properties.put(\"key1\", \"value1\");",
          "57:         superUserAdmin.namespaces().setProperties(namespace, properties);",
          "58:         superUserAdmin.namespaces().setProperty(namespace, \"key2\", \"value2\");",
          "59:         superUserAdmin.namespaces().getProperties(namespace);",
          "60:         superUserAdmin.namespaces().getProperty(namespace, \"key2\");",
          "61:         superUserAdmin.namespaces().removeProperty(namespace, \"key2\");",
          "62:         superUserAdmin.namespaces().clearProperties(namespace);",
          "65:         tenantManagerAdmin.namespaces().setProperties(namespace, properties);",
          "66:         tenantManagerAdmin.namespaces().setProperty(namespace, \"key2\", \"value2\");",
          "67:         tenantManagerAdmin.namespaces().getProperties(namespace);",
          "68:         tenantManagerAdmin.namespaces().getProperty(namespace, \"key2\");",
          "69:         tenantManagerAdmin.namespaces().removeProperty(namespace, \"key2\");",
          "70:         tenantManagerAdmin.namespaces().clearProperties(namespace);",
          "73:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "74:                 () -> subAdmin.namespaces().setProperties(namespace, properties));",
          "76:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "77:                 () -> subAdmin.namespaces().setProperty(namespace, \"key2\", \"value2\"));",
          "79:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "80:                 () -> subAdmin.namespaces().getProperties(namespace));",
          "82:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "83:                 () -> subAdmin.namespaces().getProperty(namespace, \"key2\"));",
          "86:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "87:                 () -> subAdmin.namespaces().removeProperty(namespace, \"key2\"));",
          "89:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "90:                 () -> subAdmin.namespaces().clearProperties(namespace));",
          "92:         for (AuthAction action : AuthAction.values()) {",
          "93:             superUserAdmin.namespaces().grantPermissionOnNamespace(namespace, subject, Set.of(action));",
          "94:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "95:                     () -> subAdmin.namespaces().setProperties(namespace, properties));",
          "97:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "98:                     () -> subAdmin.namespaces().setProperty(namespace, \"key2\", \"value2\"));",
          "100:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "101:                     () -> subAdmin.namespaces().getProperties(namespace));",
          "103:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "104:                     () -> subAdmin.namespaces().getProperty(namespace, \"key2\"));",
          "107:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "108:                     () -> subAdmin.namespaces().removeProperty(namespace, \"key2\"));",
          "110:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "111:                     () -> subAdmin.namespaces().clearProperties(namespace));",
          "113:             superUserAdmin.namespaces().revokePermissionsOnNamespace(namespace, subject);",
          "114:         }",
          "115:         superUserAdmin.topics().delete(topic, true);",
          "116:     }",
          "117: }",
          "",
          "---------------"
        ],
        "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java": [
          "File: pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java -> pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.pulsar.broker.admin;",
          "22: import io.jsonwebtoken.Jwts;",
          "23: import java.util.HashMap;",
          "24: import java.util.Map;",
          "25: import java.util.Optional;",
          "26: import java.util.Set;",
          "27: import java.util.UUID;",
          "28: import java.util.concurrent.atomic.AtomicInteger;",
          "29: import lombok.Cleanup;",
          "30: import lombok.SneakyThrows;",
          "31: import org.apache.pulsar.client.admin.PulsarAdmin;",
          "32: import org.apache.pulsar.client.admin.PulsarAdminException;",
          "33: import org.apache.pulsar.client.api.MessageId;",
          "34: import org.apache.pulsar.client.impl.auth.AuthenticationToken;",
          "35: import org.apache.pulsar.common.naming.TopicName;",
          "36: import org.apache.pulsar.common.policies.data.AuthAction;",
          "37: import org.testng.Assert;",
          "38: import org.testng.annotations.Test;",
          "40: @Test(groups = \"broker-admin\")",
          "41: public class TopicAuthZTest extends BaseAuthZTest {",
          "43:     @SneakyThrows",
          "44:     @Test",
          "45:     public void testUnloadAndCompactAndTrim() {",
          "46:         final String random = UUID.randomUUID().toString();",
          "47:         final String topic = \"persistent://public/default/\" + random;",
          "48:         final String subject =  UUID.randomUUID().toString();",
          "49:         final String token = Jwts.builder()",
          "50:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "51:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
          "53:         @Cleanup",
          "54:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "55:                 .serviceHttpUrl(pulsar.getWebServiceAddress())",
          "56:                 .authentication(new AuthenticationToken(token))",
          "57:                 .build();",
          "59:         superUserAdmin.topics().unload(topic);",
          "60:         superUserAdmin.topics().triggerCompaction(topic);",
          "61:         superUserAdmin.topicPolicies().getSchemaCompatibilityStrategy(topic, false);",
          "64:         tenantManagerAdmin.topics().unload(topic);",
          "65:         tenantManagerAdmin.topics().triggerCompaction(topic);",
          "66:         tenantManagerAdmin.topicPolicies().getSchemaCompatibilityStrategy(topic, false);",
          "69:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "70:                 () -> subAdmin.topics().unload(topic));",
          "72:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "73:                 () -> subAdmin.topics().triggerCompaction(topic));",
          "75:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "76:                 () -> subAdmin.topicPolicies().getSchemaCompatibilityStrategy(topic, false));",
          "79:         for (AuthAction action : AuthAction.values()) {",
          "80:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
          "82:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "83:                     () -> subAdmin.topics().unload(topic));",
          "85:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "86:                     () -> subAdmin.topics().triggerCompaction(topic));",
          "88:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "89:                     () -> subAdmin.topicPolicies().getSchemaCompatibilityStrategy(topic, false));",
          "91:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "92:         }",
          "93:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
          "94:     }",
          "96:     @Test",
          "97:     @SneakyThrows",
          "98:     public void testGetManagedLedgerInfo() {",
          "99:         final String random = UUID.randomUUID().toString();",
          "100:         final String topic = \"persistent://public/default/\" + random;",
          "101:         final String subject =  UUID.randomUUID().toString();",
          "102:         final String token = Jwts.builder()",
          "103:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "104:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
          "106:         @Cleanup",
          "107:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "108:                 .serviceHttpUrl(pulsar.getWebServiceAddress())",
          "109:                 .authentication(new AuthenticationToken(token))",
          "110:                 .build();",
          "112:         superUserAdmin.topics().getInternalInfo(topic);",
          "115:         tenantManagerAdmin.topics().getInternalInfo(topic);",
          "118:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "119:                 () -> subAdmin.topics().getInternalInfo(topic));",
          "121:         for (AuthAction action : AuthAction.values()) {",
          "122:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
          "123:             if (action == AuthAction.produce || action == AuthAction.consume) {",
          "124:                 subAdmin.topics().getInternalInfo(topic);",
          "125:             } else {",
          "126:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "127:                         () -> subAdmin.topics().getInternalInfo(topic));",
          "128:             }",
          "129:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "130:         }",
          "131:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
          "132:     }",
          "134:     @Test",
          "135:     @SneakyThrows",
          "136:     public void testGetPartitionedStatsAndInternalStats() {",
          "137:         final String random = UUID.randomUUID().toString();",
          "138:         final String topic = \"persistent://public/default/\" + random;",
          "139:         final String subject =  UUID.randomUUID().toString();",
          "140:         final String token = Jwts.builder()",
          "141:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "142:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
          "144:         @Cleanup",
          "145:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "146:                 .serviceHttpUrl(pulsar.getWebServiceAddress())",
          "147:                 .authentication(new AuthenticationToken(token))",
          "148:                 .build();",
          "150:         superUserAdmin.topics().getPartitionedStats(topic, false);",
          "151:         superUserAdmin.topics().getPartitionedInternalStats(topic);",
          "154:         tenantManagerAdmin.topics().getPartitionedStats(topic, false);",
          "155:         tenantManagerAdmin.topics().getPartitionedInternalStats(topic);",
          "158:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "159:                 () -> subAdmin.topics().getPartitionedStats(topic, false));",
          "161:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "162:                 () -> subAdmin.topics().getPartitionedInternalStats(topic));",
          "164:         for (AuthAction action : AuthAction.values()) {",
          "165:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
          "166:             if (action == AuthAction.produce || action == AuthAction.consume) {",
          "167:                 subAdmin.topics().getPartitionedStats(topic, false);",
          "168:                 subAdmin.topics().getPartitionedInternalStats(topic);",
          "169:             } else {",
          "170:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "171:                         () -> subAdmin.topics().getPartitionedStats(topic, false));",
          "173:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "174:                         () -> subAdmin.topics().getPartitionedInternalStats(topic));",
          "175:             }",
          "176:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "177:         }",
          "178:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
          "179:     }",
          "181:     @Test",
          "182:     @SneakyThrows",
          "183:     public void testCreateSubscriptionAndUpdateSubscriptionPropertiesAndAnalyzeSubscriptionBacklog() {",
          "184:         final String random = UUID.randomUUID().toString();",
          "185:         final String topic = \"persistent://public/default/\" + random;",
          "186:         final String subject =  UUID.randomUUID().toString();",
          "187:         final String token = Jwts.builder()",
          "188:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "189:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
          "190:         AtomicInteger suffix = new AtomicInteger(1);",
          "191:         @Cleanup",
          "192:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "193:                 .serviceHttpUrl(pulsar.getWebServiceAddress())",
          "194:                 .authentication(new AuthenticationToken(token))",
          "195:                 .build();",
          "197:         superUserAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest);",
          "200:         tenantManagerAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest);",
          "203:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "204:                 () -> subAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest));",
          "206:         for (AuthAction action : AuthAction.values()) {",
          "207:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
          "208:             if (action == AuthAction.consume) {",
          "209:                 subAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest);",
          "210:             } else {",
          "211:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "212:                         () -> subAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest));",
          "213:             }",
          "214:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "215:         }",
          "217:         Map<String, String> properties = new HashMap<>();",
          "218:         superUserAdmin.topics().createSubscription(topic, \"test-sub\", MessageId.earliest);",
          "220:         superUserAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\" , properties);",
          "221:         superUserAdmin.topics().getSubscriptionProperties(topic, \"test-sub\");",
          "222:         superUserAdmin.topics().analyzeSubscriptionBacklog(TopicName.get(topic).getPartition(0).getLocalName(), \"test-sub\", Optional.empty());",
          "225:         tenantManagerAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\" , properties);",
          "226:         tenantManagerAdmin.topics().getSubscriptionProperties(topic, \"test-sub\");",
          "227:         tenantManagerAdmin.topics().analyzeSubscriptionBacklog(TopicName.get(topic).getPartition(0).getLocalName(), \"test-sub\", Optional.empty());",
          "230:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "231:                 () -> subAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\", properties));",
          "233:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "234:                 () -> subAdmin.topics().getSubscriptionProperties(topic, \"test-sub\"));",
          "236:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "237:                 () -> subAdmin.topics().analyzeSubscriptionBacklog(TopicName.get(topic).getPartition(0).getLocalName(), \"test-sub\", Optional.empty()));",
          "239:         for (AuthAction action : AuthAction.values()) {",
          "240:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
          "241:             if (action == AuthAction.consume) {",
          "242:                 subAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\", properties);",
          "243:                 subAdmin.topics().getSubscriptionProperties(topic, \"test-sub\");",
          "244:                 subAdmin.topics().analyzeSubscriptionBacklog(TopicName.get(topic).getPartition(0).getLocalName(), \"test-sub\", Optional.empty());",
          "245:             } else {",
          "246:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "247:                         () -> subAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\", properties));",
          "249:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "250:                         () -> subAdmin.topics().getSubscriptionProperties(topic, \"test-sub\"));",
          "252:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "253:                         () -> subAdmin.topics().analyzeSubscriptionBacklog(TopicName.get(topic).getPartition(0).getLocalName(), \"test-sub\", Optional.empty()));",
          "254:             }",
          "255:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "256:         }",
          "257:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
          "258:     }",
          "260:     @Test",
          "261:     @SneakyThrows",
          "262:     public void testCreateMissingPartition() {",
          "263:         final String random = UUID.randomUUID().toString();",
          "264:         final String topic = \"persistent://public/default/\" + random;",
          "265:         final String subject =  UUID.randomUUID().toString();",
          "266:         final String token = Jwts.builder()",
          "267:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "268:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
          "269:         AtomicInteger suffix = new AtomicInteger(1);",
          "270:         @Cleanup",
          "271:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "272:                 .serviceHttpUrl(pulsar.getWebServiceAddress())",
          "273:                 .authentication(new AuthenticationToken(token))",
          "274:                 .build();",
          "276:         superUserAdmin.topics().createMissedPartitions(topic);",
          "279:         tenantManagerAdmin.topics().createMissedPartitions(topic);",
          "281:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "282:                 () -> subAdmin.topics().createMissedPartitions(topic));",
          "284:         for (AuthAction action : AuthAction.values()) {",
          "285:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
          "286:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "287:                     () -> subAdmin.topics().createMissedPartitions(topic));",
          "288:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "289:         }",
          "290:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
          "291:     }",
          "292: }",
          "",
          "---------------"
        ],
        "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicPoliciesAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicPoliciesAuthZTest.java": [
          "File: pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicPoliciesAuthZTest.java -> pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicPoliciesAuthZTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import static org.awaitility.Awaitility.await;",
          "22: import io.jsonwebtoken.Jwts;",
          "27: import java.util.Set;",
          "28: import java.util.UUID;",
          "30: import lombok.Cleanup;",
          "31: import lombok.SneakyThrows;",
          "36: import org.apache.pulsar.client.admin.PulsarAdmin;",
          "38: import org.apache.pulsar.client.admin.PulsarAdminException;",
          "39: import org.apache.pulsar.client.impl.auth.AuthenticationToken;",
          "40: import org.apache.pulsar.common.policies.data.AuthAction;",
          "41: import org.apache.pulsar.common.policies.data.OffloadPolicies;",
          "42: import org.apache.pulsar.common.policies.data.OffloadPoliciesImpl;",
          "43: import org.apache.pulsar.common.policies.data.RetentionPolicies;",
          "46: import org.testng.Assert;",
          "49: import org.testng.annotations.Test;",
          "126:     @SneakyThrows",
          "",
          "[Removed Lines]",
          "23: import io.jsonwebtoken.SignatureAlgorithm;",
          "24: import java.util.HashMap;",
          "25: import java.util.Map;",
          "26: import java.util.Properties;",
          "29: import javax.crypto.SecretKey;",
          "32: import org.apache.pulsar.broker.auth.MockedPulsarServiceBaseTest;",
          "33: import org.apache.pulsar.broker.authentication.AuthenticationProviderToken;",
          "34: import org.apache.pulsar.broker.authentication.utils.AuthTokenUtils;",
          "35: import org.apache.pulsar.broker.authorization.PulsarAuthorizationProvider;",
          "37: import org.apache.pulsar.client.admin.PulsarAdminBuilder;",
          "44: import org.apache.pulsar.common.policies.data.TenantInfo;",
          "45: import org.apache.pulsar.common.util.ObjectMapperFactory;",
          "47: import org.testng.annotations.AfterClass;",
          "48: import org.testng.annotations.BeforeClass;",
          "52: public final class TopicPoliciesAuthZTest extends MockedPulsarServiceBaseTest {",
          "54:     private PulsarAdmin superUserAdmin;",
          "56:     private PulsarAdmin tenantManagerAdmin;",
          "58:     private static final SecretKey SECRET_KEY = AuthTokenUtils.createSecretKey(SignatureAlgorithm.HS256);",
          "59:     private static final String TENANT_ADMIN_SUBJECT =  UUID.randomUUID().toString();",
          "60:     private static final String TENANT_ADMIN_TOKEN = Jwts.builder()",
          "61:             .claim(\"sub\", TENANT_ADMIN_SUBJECT).signWith(SECRET_KEY).compact();",
          "64:     private static final String BROKER_INTERNAL_CLIENT_SUBJECT = \"broker_internal\";",
          "65:     private static final String BROKER_INTERNAL_CLIENT_TOKEN = Jwts.builder()",
          "66:             .claim(\"sub\", BROKER_INTERNAL_CLIENT_SUBJECT).signWith(SECRET_KEY).compact();",
          "67:     private static final String SUPER_USER_SUBJECT = \"super-user\";",
          "68:     private static final String SUPER_USER_TOKEN = Jwts.builder()",
          "69:             .claim(\"sub\", SUPER_USER_SUBJECT).signWith(SECRET_KEY).compact();",
          "70:     private static final String NOBODY_SUBJECT =  \"nobody\";",
          "71:     private static final String NOBODY_TOKEN = Jwts.builder()",
          "72:             .claim(\"sub\", NOBODY_SUBJECT).signWith(SECRET_KEY).compact();",
          "75:     @BeforeClass",
          "76:     @Override",
          "77:     protected void setup() throws Exception {",
          "78:         conf.setAuthorizationEnabled(true);",
          "79:         conf.setAuthorizationProvider(PulsarAuthorizationProvider.class.getName());",
          "80:         conf.setSuperUserRoles(Set.of(SUPER_USER_SUBJECT, BROKER_INTERNAL_CLIENT_SUBJECT));",
          "81:         conf.setAuthenticationEnabled(true);",
          "82:         conf.setAuthenticationProviders(Set.of(AuthenticationProviderToken.class.getName()));",
          "84:         conf.setBrokerClientAuthenticationPlugin(AuthenticationToken.class.getName());",
          "85:         final Map<String, String> brokerClientAuthParams = new HashMap<>();",
          "86:         brokerClientAuthParams.put(\"token\", BROKER_INTERNAL_CLIENT_TOKEN);",
          "87:         final String brokerClientAuthParamStr = ObjectMapperFactory.getThreadLocal()",
          "88:                 .writeValueAsString(brokerClientAuthParams);",
          "89:         conf.setBrokerClientAuthenticationParameters(brokerClientAuthParamStr);",
          "91:         Properties properties = conf.getProperties();",
          "92:         if (properties == null) {",
          "93:             properties = new Properties();",
          "94:             conf.setProperties(properties);",
          "95:         }",
          "96:         properties.put(\"tokenSecretKey\", AuthTokenUtils.encodeKeyBase64(SECRET_KEY));",
          "98:         internalSetup();",
          "99:         setupDefaultTenantAndNamespace();",
          "101:         this.superUserAdmin =PulsarAdmin.builder()",
          "102:                 .serviceHttpUrl(pulsar.getWebServiceAddress())",
          "103:                 .authentication(new AuthenticationToken(SUPER_USER_TOKEN))",
          "104:                 .build();",
          "105:         final TenantInfo tenantInfo = superUserAdmin.tenants().getTenantInfo(\"public\");",
          "106:         tenantInfo.getAdminRoles().add(TENANT_ADMIN_SUBJECT);",
          "107:         superUserAdmin.tenants().updateTenant(\"public\", tenantInfo);",
          "108:         this.tenantManagerAdmin = PulsarAdmin.builder()",
          "109:                 .serviceHttpUrl(pulsar.getWebServiceAddress())",
          "110:                 .authentication(new AuthenticationToken(TENANT_ADMIN_TOKEN))",
          "111:                 .build();",
          "112:     }",
          "114:     @Override",
          "115:     protected void customizeNewPulsarAdminBuilder(PulsarAdminBuilder pulsarAdminBuilder) {",
          "116:         pulsarAdminBuilder.authentication(new AuthenticationToken(SUPER_USER_TOKEN));",
          "117:     }",
          "119:     @AfterClass",
          "120:     @Override",
          "121:     protected void cleanup() throws Exception {",
          "122:      internalCleanup();",
          "123:     }",
          "",
          "[Added Lines]",
          "38: public final class TopicPoliciesAuthZTest extends BaseAuthZTest {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1f4d0a8c229d79fbb9a6d30275496608aea9086",
      "candidate_info": {
        "commit_hash": "c1f4d0a8c229d79fbb9a6d30275496608aea9086",
        "repo": "apache/pulsar",
        "commit_url": "https://github.com/apache/pulsar/commit/c1f4d0a8c229d79fbb9a6d30275496608aea9086",
        "files": [
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/BaseAuthZTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicPoliciesAuthZTest.java"
        ],
        "message": "[improve][broker] Add fine-grain authorization to ns/topic management endpoints (#22305)\n\n(cherry picked from commit fd34d4ab9c5aa7e0dca961d5a8badae4613fbe8e)\n\n# Conflicts:\n#\tpulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\n(cherry picked from commit 99eb49a68982271562597d4c4cea127132bc0b35)\n\n# Conflicts:\n#\tpulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n#\tpulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\n(cherry picked from commit 5c4f4cb64167c0ea1a5775f6d991b386ad95c786)\n\n# Conflicts:\n#\tpulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java\n#\tpulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\n#\tpulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicPoliciesAuthZTest.java",
        "before_after_code_files": [
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/BaseAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/BaseAuthZTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicPoliciesAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicPoliciesAuthZTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
            "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
            "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java"
          ],
          "candidate": [
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
            "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
            "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java"
          ]
        }
      },
      "candidate_diff": {
        "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java": [
          "File: pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java -> pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: import org.apache.pulsar.common.policies.data.NamespaceOperation;",
          "55: import org.apache.pulsar.common.policies.data.PersistencePolicies;",
          "56: import org.apache.pulsar.common.policies.data.Policies;",
          "59: import org.apache.pulsar.common.policies.data.RetentionPolicies;",
          "60: import org.apache.pulsar.common.policies.data.SchemaCompatibilityStrategy;",
          "61: import org.apache.pulsar.common.policies.data.SubscribeRate;",
          "",
          "[Removed Lines]",
          "57: import org.apache.pulsar.common.policies.data.PolicyName;",
          "58: import org.apache.pulsar.common.policies.data.PolicyOperation;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "704:     }",
          "706:     protected CompletableFuture<SchemaCompatibilityStrategy> getSchemaCompatibilityStrategyAsync() {",
          "711:                     if (ex != null) {",
          "712:                         log.error(\"[{}] Failed to get schema compatibility strategy of topic {} {}\",",
          "713:                                 clientAppId(), topicName, ex);",
          "",
          "[Removed Lines]",
          "707:         return validateTopicPolicyOperationAsync(topicName,",
          "708:                 PolicyName.SCHEMA_COMPATIBILITY_STRATEGY,",
          "709:                 PolicyOperation.READ)",
          "710:                 .thenCompose((__) -> getSchemaCompatibilityStrategyAsyncWithoutAuth()).whenComplete((__, ex) -> {",
          "",
          "[Added Lines]",
          "705:         return getSchemaCompatibilityStrategyAsyncWithoutAuth().whenComplete((__, ex) -> {",
          "",
          "---------------"
        ],
        "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java": [
          "File: pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java -> pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2758:    }",
          "2760:    protected void internalSetProperty(String key, String value, AsyncResponse asyncResponse) {",
          "2776:    }",
          "2778:    protected void internalSetProperties(Map<String, String> properties, AsyncResponse asyncResponse) {",
          "2794:    }",
          "2796:    protected void internalGetProperty(String key, AsyncResponse asyncResponse) {",
          "2806:    }",
          "2808:    protected void internalGetProperties(AsyncResponse asyncResponse) {",
          "2817:    }",
          "2819:    protected void internalRemoveProperty(String key, AsyncResponse asyncResponse) {",
          "2822:        AtomicReference<String> oldVal = new AtomicReference<>(null);",
          "2837:    }",
          "2839:    protected void internalClearProperties(AsyncResponse asyncResponse) {",
          "2841:        AtomicReference<Integer> clearedCount = new AtomicReference<>(0);",
          "2857:    }",
          "2859:    private CompletableFuture<Void> updatePoliciesAsync(NamespaceName ns, Function<Policies, Policies> updateFunction) {",
          "",
          "[Removed Lines]",
          "2761:        validatePoliciesReadOnlyAccess();",
          "2762:        updatePoliciesAsync(namespaceName, policies -> {",
          "2763:            policies.properties.put(key, value);",
          "2764:            return policies;",
          "2765:        }).thenAccept(v -> {",
          "2766:            log.info(\"[{}] Successfully set property for key {} on namespace {}\", clientAppId(), key,",
          "2767:                    namespaceName);",
          "2768:            asyncResponse.resume(Response.noContent().build());",
          "2769:        }).exceptionally(ex -> {",
          "2770:            Throwable cause = ex.getCause();",
          "2771:            log.error(\"[{}] Failed to set property for key {} on namespace {}\", clientAppId(), key,",
          "2772:                    namespaceName, cause);",
          "2773:            asyncResponse.resume(cause);",
          "2774:            return null;",
          "2775:        });",
          "2779:        validatePoliciesReadOnlyAccess();",
          "2780:        updatePoliciesAsync(namespaceName, policies -> {",
          "2781:            policies.properties.putAll(properties);",
          "2782:            return policies;",
          "2783:        }).thenAccept(v -> {",
          "2784:            log.info(\"[{}] Successfully set {} properties on namespace {}\", clientAppId(), properties.size(),",
          "2785:                    namespaceName);",
          "2786:            asyncResponse.resume(Response.noContent().build());",
          "2787:        }).exceptionally(ex -> {",
          "2788:            Throwable cause = ex.getCause();",
          "2789:            log.error(\"[{}] Failed to set {} properties on namespace {}\", clientAppId(), properties.size(),",
          "2790:                    namespaceName, cause);",
          "2791:            asyncResponse.resume(cause);",
          "2792:            return null;",
          "2793:        });",
          "2797:         getNamespacePoliciesAsync(namespaceName).thenAccept(policies -> {",
          "2798:             asyncResponse.resume(policies.properties.get(key));",
          "2799:         }).exceptionally(ex -> {",
          "2800:             Throwable cause = ex.getCause();",
          "2801:             log.error(\"[{}] Failed to get property for key {} of namespace {}\", clientAppId(), key,",
          "2802:                     namespaceName, cause);",
          "2803:             asyncResponse.resume(cause);",
          "2804:             return null;",
          "2805:         });",
          "2809:        getNamespacePoliciesAsync(namespaceName).thenAccept(policies -> {",
          "2810:            asyncResponse.resume(policies.properties);",
          "2811:        }).exceptionally(ex -> {",
          "2812:            Throwable cause = ex.getCause();",
          "2813:            log.error(\"[{}] Failed to get properties of namespace {}\", clientAppId(), namespaceName, cause);",
          "2814:            asyncResponse.resume(cause);",
          "2815:            return null;",
          "2816:        });",
          "2820:        validatePoliciesReadOnlyAccess();",
          "2823:        updatePoliciesAsync(namespaceName, policies -> {",
          "2824:            oldVal.set(policies.properties.remove(key));",
          "2825:            return policies;",
          "2826:        }).thenAccept(v -> {",
          "2827:            asyncResponse.resume(oldVal.get());",
          "2828:            log.info(\"[{}] Successfully remove property for key {} on namespace {}\", clientAppId(), key,",
          "2829:                    namespaceName);",
          "2830:        }).exceptionally(ex -> {",
          "2831:            Throwable cause = ex.getCause();",
          "2832:            log.error(\"[{}] Failed to remove property for key {} on namespace {}\", clientAppId(), key,",
          "2833:                    namespaceName, cause);",
          "2834:            asyncResponse.resume(cause);",
          "2835:           return null;",
          "2836:        });",
          "2840:        validatePoliciesReadOnlyAccess();",
          "2842:        updatePoliciesAsync(namespaceName, policies -> {",
          "2843:            clearedCount.set(policies.properties.size());",
          "2844:            policies.properties.clear();",
          "2845:            return policies;",
          "2846:        }).thenAccept(v -> {",
          "2847:            asyncResponse.resume(Response.noContent().build());",
          "2848:            log.info(\"[{}] Successfully clear {} properties for on namespace {}\", clientAppId(), clearedCount.get(),",
          "2849:                    namespaceName);",
          "2850:        }).exceptionally(ex -> {",
          "2851:            Throwable cause = ex.getCause();",
          "2852:            log.error(\"[{}] Failed to remove property for key {} on namespace {}\", clientAppId(), clearedCount.get(),",
          "2853:                    namespaceName, cause);",
          "2854:            asyncResponse.resume(cause);",
          "2855:            return null;",
          "2856:        });",
          "",
          "[Added Lines]",
          "2761:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2762:                .thenCompose(__ -> validatePoliciesReadOnlyAccessAsync())",
          "2763:                .thenCompose(__ -> updatePoliciesAsync(namespaceName, policies -> {",
          "2764:                    policies.properties.put(key, value);",
          "2765:                    return policies;",
          "2766:                }))",
          "2767:                .thenAccept(v -> {",
          "2768:                    log.info(\"[{}] Successfully set property for key {} on namespace {}\", clientAppId(), key,",
          "2769:                            namespaceName);",
          "2770:                    asyncResponse.resume(Response.noContent().build());",
          "2771:                }).exceptionally(ex -> {",
          "2772:                    Throwable cause = ex.getCause();",
          "2773:                    log.error(\"[{}] Failed to set property for key {} on namespace {}\", clientAppId(), key,",
          "2774:                            namespaceName, cause);",
          "2775:                    asyncResponse.resume(cause);",
          "2776:                    return null;",
          "2777:                });",
          "2781:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2782:                .thenCompose(__ -> validatePoliciesReadOnlyAccessAsync())",
          "2783:                .thenCompose(__ -> updatePoliciesAsync(namespaceName, policies -> {",
          "2784:                    policies.properties.putAll(properties);",
          "2785:                    return policies;",
          "2786:                }))",
          "2787:                .thenAccept(v -> {",
          "2788:                    log.info(\"[{}] Successfully set {} properties on namespace {}\", clientAppId(), properties.size(),",
          "2789:                            namespaceName);",
          "2790:                    asyncResponse.resume(Response.noContent().build());",
          "2791:                }).exceptionally(ex -> {",
          "2792:                    Throwable cause = ex.getCause();",
          "2793:                    log.error(\"[{}] Failed to set {} properties on namespace {}\", clientAppId(), properties.size(),",
          "2794:                            namespaceName, cause);",
          "2795:                    asyncResponse.resume(cause);",
          "2796:                    return null;",
          "2797:                });",
          "2801:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2802:                .thenCompose(__ -> getNamespacePoliciesAsync(namespaceName))",
          "2803:                .thenAccept(policies -> asyncResponse.resume(policies.properties.get(key)))",
          "2804:                .exceptionally(ex -> {",
          "2805:                    Throwable cause = ex.getCause();",
          "2806:                    log.error(\"[{}] Failed to get property for key {} of namespace {}\", clientAppId(), key,",
          "2807:                            namespaceName, cause);",
          "2808:                    asyncResponse.resume(cause);",
          "2809:                    return null;",
          "2810:                });",
          "2814:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2815:                .thenCompose(__ -> getNamespacePoliciesAsync(namespaceName))",
          "2816:                .thenAccept(policies -> asyncResponse.resume(policies.properties))",
          "2817:                .exceptionally(ex -> {",
          "2818:                    Throwable cause = ex.getCause();",
          "2819:                    log.error(\"[{}] Failed to get properties of namespace {}\", clientAppId(), namespaceName, cause);",
          "2820:                    asyncResponse.resume(cause);",
          "2821:                    return null;",
          "2822:                });",
          "2827:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2828:                .thenCompose(__ -> validatePoliciesReadOnlyAccessAsync())",
          "2829:                .thenCompose(__ -> updatePoliciesAsync(namespaceName, policies -> {",
          "2830:                    oldVal.set(policies.properties.remove(key));",
          "2831:                    return policies;",
          "2832:                })).thenAccept(v -> {",
          "2833:                    asyncResponse.resume(oldVal.get());",
          "2834:                    log.info(\"[{}] Successfully remove property for key {} on namespace {}\", clientAppId(), key,",
          "2835:                            namespaceName);",
          "2836:                }).exceptionally(ex -> {",
          "2837:                    Throwable cause = ex.getCause();",
          "2838:                    log.error(\"[{}] Failed to remove property for key {} on namespace {}\", clientAppId(), key,",
          "2839:                            namespaceName, cause);",
          "2840:                    asyncResponse.resume(cause);",
          "2841:                    return null;",
          "2842:                });",
          "2847:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2848:                .thenCompose(__ -> validatePoliciesReadOnlyAccessAsync())",
          "2849:                .thenCompose(__ -> updatePoliciesAsync(namespaceName, policies -> {",
          "2850:                    clearedCount.set(policies.properties.size());",
          "2851:                    policies.properties.clear();",
          "2852:                    return policies;",
          "2853:                }))",
          "2854:                .thenAccept(v -> {",
          "2855:                    asyncResponse.resume(Response.noContent().build());",
          "2856:                    log.info(\"[{}] Successfully clear {} properties on namespace {}\", clientAppId(), clearedCount.get(),",
          "2857:                            namespaceName);",
          "2858:                }).exceptionally(ex -> {",
          "2859:                    Throwable cause = ex.getCause();",
          "2860:                    log.error(\"[{}] Failed to clear {} properties on namespace {}\", clientAppId(), clearedCount.get(),",
          "2861:                            namespaceName, cause);",
          "2862:                    asyncResponse.resume(cause);",
          "2863:                    return null;",
          "2864:                });",
          "",
          "---------------"
        ],
        "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java": [
          "File: pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java -> pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "541:     protected void internalCreateMissedPartitions(AsyncResponse asyncResponse) {",
          "542:         getPartitionedTopicMetadataAsync(topicName, false, false).thenAccept(metadata -> {",
          "543:             if (metadata != null) {",
          "545:                     asyncResponse.resume(Response.noContent().build());",
          "546:                 }).exceptionally(e -> {",
          "547:                     log.error(\"[{}] Failed to create partitions for topic {}\", clientAppId(), topicName);",
          "",
          "[Removed Lines]",
          "544:                 tryCreatePartitionsAsync(metadata.partitions).thenAccept(v -> {",
          "",
          "[Added Lines]",
          "544:                 CompletableFuture<Void> future = validateNamespaceOperationAsync(topicName.getNamespaceObject(),",
          "545:                         NamespaceOperation.CREATE_TOPIC);",
          "546:                 future.thenCompose(__ -> tryCreatePartitionsAsync(metadata.partitions)).thenAccept(v -> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "784:     protected void internalUnloadTopic(AsyncResponse asyncResponse, boolean authoritative) {",
          "785:         log.info(\"[{}] Unloading topic {}\", clientAppId(), topicName);",
          "794:            if (topicName.isPartitioned()) {",
          "795:                if (checkTopicIsTransactionCoordinatorAssign(topicName)) {",
          "",
          "[Removed Lines]",
          "786:         CompletableFuture<Void> future;",
          "787:         if (topicName.isGlobal()) {",
          "788:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "789:         } else {",
          "790:             future = CompletableFuture.completedFuture(null);",
          "791:         }",
          "792:        future.thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "788:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.UNLOAD);",
          "789:         future.thenCompose(__ -> {",
          "790:             if (topicName.isGlobal()) {",
          "791:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "792:             }",
          "793:             return CompletableFuture.completedFuture(null);",
          "794:         }).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1050:     private void internalUnloadNonPartitionedTopicAsync(AsyncResponse asyncResponse, boolean authoritative) {",
          "1051:         validateTopicOwnershipAsync(topicName, authoritative)",
          "1053:                         .thenCompose(__ -> getTopicReferenceAsync(topicName))",
          "1054:                         .thenCompose(topic -> topic.close(false))",
          "1055:                         .thenRun(() -> {",
          "1056:                             log.info(\"[{}] Successfully unloaded topic {}\", clientAppId(), topicName);",
          "1057:                             asyncResponse.resume(Response.noContent().build());",
          "1059:                 .exceptionally(ex -> {",
          "1061:                     if (!isNot307And404Exception(ex)) {",
          "",
          "[Removed Lines]",
          "1052:                 .thenCompose(unused -> validateTopicOperationAsync(topicName, TopicOperation.UNLOAD)",
          "1058:                         }))",
          "",
          "[Added Lines]",
          "1059:                         })",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1069:     private void internalUnloadTransactionCoordinatorAsync(AsyncResponse asyncResponse, boolean authoritative) {",
          "1070:         validateTopicOwnershipAsync(topicName, authoritative)",
          "1081:                 .exceptionally(ex -> {",
          "1083:                     if (!isNot307And404Exception(ex)) {",
          "",
          "[Removed Lines]",
          "1071:                 .thenCompose(__ -> validateTopicOperationAsync(topicName, TopicOperation.UNLOAD)",
          "1072:                         .thenCompose(v -> pulsar()",
          "1073:                                 .getTransactionMetadataStoreService()",
          "1074:                                 .removeTransactionMetadataStore(",
          "1075:                                         TransactionCoordinatorID.get(topicName.getPartitionIndex())))",
          "1076:                         .thenRun(() -> {",
          "1077:                             log.info(\"[{}] Successfully unloaded tc {}\", clientAppId(),",
          "1078:                                     topicName.getPartitionIndex());",
          "1079:                             asyncResponse.resume(Response.noContent().build());",
          "1080:                         }))",
          "",
          "[Added Lines]",
          "1072:                 .thenCompose(v -> pulsar()",
          "1073:                         .getTransactionMetadataStoreService()",
          "1074:                         .removeTransactionMetadataStore(",
          "1075:                                 TransactionCoordinatorID.get(topicName.getPartitionIndex())))",
          "1076:                 .thenRun(() -> {",
          "1077:                     log.info(\"[{}] Successfully unloaded tc {}\", clientAppId(), topicName.getPartitionIndex());",
          "1078:                     asyncResponse.resume(Response.noContent().build());",
          "1079:                 })",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1311:     }",
          "1313:     protected void internalGetManagedLedgerInfo(AsyncResponse asyncResponse, boolean authoritative) {",
          "1322:             if (topicName.isPartitioned()) {",
          "1323:                 internalGetManagedLedgerInfoForNonPartitionedTopic(asyncResponse);",
          "",
          "[Removed Lines]",
          "1314:         CompletableFuture<Void> future;",
          "1315:         if (topicName.isGlobal()) {",
          "1316:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1317:         } else {",
          "1318:             future = CompletableFuture.completedFuture(null);",
          "1319:         }",
          "1320:         future.thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "1313:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.GET_STATS);",
          "1314:         future.thenCompose(__ -> {",
          "1315:             if (topicName.isGlobal()) {",
          "1316:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1317:             }",
          "1318:             return CompletableFuture.completedFuture(null);",
          "1319:         }).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1423:     protected void internalGetPartitionedStats(AsyncResponse asyncResponse, boolean authoritative, boolean perPartition,",
          "1424:                                                boolean getPreciseBacklog, boolean subscriptionBacklogSize,",
          "1425:                                                boolean getEarliestTimeInBacklog) {",
          "1433:                 authoritative, false)).thenAccept(partitionMetadata -> {",
          "1434:             if (partitionMetadata.partitions == 0) {",
          "1435:                 asyncResponse.resume(new RestException(Status.NOT_FOUND, \"Partitioned Topic not found\"));",
          "",
          "[Removed Lines]",
          "1426:         CompletableFuture<Void> future;",
          "1427:         if (topicName.isGlobal()) {",
          "1428:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1429:         } else {",
          "1430:             future = CompletableFuture.completedFuture(null);",
          "1431:         }",
          "1432:         future.thenCompose(__ -> getPartitionedTopicMetadataAsync(topicName,",
          "",
          "[Added Lines]",
          "1425:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.GET_STATS);",
          "1426:         future.thenCompose(__ -> {",
          "1427:             if (topicName.isGlobal()) {",
          "1428:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1429:             }",
          "1430:             return  CompletableFuture.completedFuture(null);",
          "1431:         }).thenCompose(__ -> getPartitionedTopicMetadataAsync(topicName,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1497:     }",
          "1499:     protected void internalGetPartitionedStatsInternal(AsyncResponse asyncResponse, boolean authoritative) {",
          "1508:             if (partitionMetadata.partitions == 0) {",
          "1509:                 asyncResponse.resume(new RestException(Status.NOT_FOUND, \"Partitioned Topic not found\"));",
          "1510:                 return;",
          "",
          "[Removed Lines]",
          "1500:         CompletableFuture<Void> future;",
          "1501:         if (topicName.isGlobal()) {",
          "1502:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1503:         } else {",
          "1504:             future = CompletableFuture.completedFuture(null);",
          "1505:         }",
          "1506:         future.thenCompose(__ -> getPartitionedTopicMetadataAsync(topicName, authoritative, false))",
          "1507:                 .thenAccept(partitionMetadata -> {",
          "",
          "[Added Lines]",
          "1499:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.GET_STATS);",
          "1500:         future.thenCompose(__ -> {",
          "1501:             if (topicName.isGlobal()) {",
          "1502:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1503:             } else {",
          "1504:                 return CompletableFuture.completedFuture(null);",
          "1505:             }",
          "1506:         }).thenCompose(__ -> getPartitionedTopicMetadataAsync(topicName, authoritative, false))",
          "1507:         .thenAccept(partitionMetadata -> {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2202:     protected void internalCreateSubscription(AsyncResponse asyncResponse, String subscriptionName,",
          "2203:             MessageIdImpl messageId, boolean authoritative, boolean replicated, Map<String, String> properties) {",
          "2211:             final MessageIdImpl targetMessageId = messageId == null ? (MessageIdImpl) MessageId.latest : messageId;",
          "2212:             log.info(\"[{}][{}] Creating subscription {} at message id {} with properties {}\", clientAppId(),",
          "2213:                     topicName, subscriptionName, targetMessageId, properties);",
          "",
          "[Removed Lines]",
          "2204:         CompletableFuture<Void> ret;",
          "2205:         if (topicName.isGlobal()) {",
          "2206:             ret = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2207:         } else {",
          "2208:             ret = CompletableFuture.completedFuture(null);",
          "2209:         }",
          "2210:         ret.thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "2204:         CompletableFuture<Void> ret = validateTopicOperationAsync(topicName, TopicOperation.SUBSCRIBE,",
          "2205:                 subscriptionName);",
          "2206:         ret.thenCompose(__ -> {",
          "2207:             if (topicName.isGlobal()) {",
          "2208:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2209:             }",
          "2210:             return CompletableFuture.completedFuture(null);",
          "2211:         }).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2366:     protected void internalUpdateSubscriptionProperties(AsyncResponse asyncResponse, String subName,",
          "2367:                                                         Map<String, String> subscriptionProperties,",
          "2368:                                                         boolean authoritative) {",
          "2377:             if (topicName.isPartitioned()) {",
          "2378:                 internalUpdateSubscriptionPropertiesForNonPartitionedTopic(asyncResponse, subName,",
          "2379:                         subscriptionProperties, authoritative);",
          "",
          "[Removed Lines]",
          "2369:         CompletableFuture<Void> future;",
          "2370:         if (topicName.isGlobal()) {",
          "2371:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2372:         } else {",
          "2373:             future = CompletableFuture.completedFuture(null);",
          "2374:         }",
          "2376:         future.thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative)).thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "2370:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.SUBSCRIBE, subName);",
          "2371:         future.thenCompose(__ -> {",
          "2372:             if (topicName.isGlobal()) {",
          "2373:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2374:             }",
          "2375:             return CompletableFuture.completedFuture(null);",
          "2376:         }).thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative)).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3899:     protected void internalTriggerCompaction(AsyncResponse asyncResponse, boolean authoritative) {",
          "3900:         log.info(\"[{}] Trigger compaction on topic {}\", clientAppId(), topicName);",
          "3909:             if (topicName.isPartitioned()) {",
          "3910:                 internalTriggerCompactionNonPartitionedTopic(asyncResponse, authoritative);",
          "",
          "[Removed Lines]",
          "3901:         CompletableFuture<Void> future;",
          "3902:         if (topicName.isGlobal()) {",
          "3903:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "3904:         } else {",
          "3905:             future = CompletableFuture.completedFuture(null);",
          "3906:         }",
          "3907:         future.thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "3901:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.COMPACT);",
          "3902:         future.thenCompose(__ -> {",
          "3903:             if (topicName.isGlobal()) {",
          "3904:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "3905:             } else {",
          "3906:                 return CompletableFuture.completedFuture(null);",
          "3907:             }",
          "3908:         }).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "5135:     }",
          "5137:     protected CompletableFuture<SchemaCompatibilityStrategy> internalGetSchemaCompatibilityStrategy(boolean applied) {",
          "5138:         if (applied) {",
          "5140:         }",
          "5144:                 .thenCompose(n -> getTopicPoliciesAsyncWithRetry(topicName).thenApply(op -> {",
          "5145:                     if (!op.isPresent()) {",
          "5146:                         return null;",
          "",
          "[Removed Lines]",
          "5139:             return getSchemaCompatibilityStrategyAsync();",
          "5141:         return validateTopicPolicyOperationAsync(topicName,",
          "5142:                 PolicyName.SCHEMA_COMPATIBILITY_STRATEGY,",
          "5143:                 PolicyOperation.READ)",
          "",
          "[Added Lines]",
          "5139:         CompletableFuture<Void> future = validateTopicPolicyOperationAsync(topicName,",
          "5140:                 PolicyName.SCHEMA_COMPATIBILITY_STRATEGY, PolicyOperation.READ);",
          "5142:             return future.thenCompose(__ -> getSchemaCompatibilityStrategyAsync());",
          "5144:         return future",
          "",
          "---------------"
        ],
        "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java": [
          "File: pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java -> pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "372:             @QueryParam(\"isGlobal\") @DefaultValue(\"false\") boolean isGlobal,",
          "373:             @ApiParam(value = \"Offload policies for the specified topic\") OffloadPoliciesImpl offloadPolicies) {",
          "374:         validateTopicName(tenant, namespace, encodedTopic);",
          "376:         validateTopicPolicyOperationAsync(topicName, PolicyName.OFFLOAD, PolicyOperation.WRITE)",
          "377:             .thenCompose(__ -> preValidation(authoritative))",
          "378:             .thenCompose(__ -> internalSetOffloadPolicies(offloadPolicies, isGlobal))",
          "",
          "[Removed Lines]",
          "375:         validateTopicPolicyOperation(topicName, PolicyName.OFFLOAD, PolicyOperation.WRITE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/BaseAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/BaseAuthZTest.java": [
          "File: pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/BaseAuthZTest.java -> pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/BaseAuthZTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.pulsar.broker.admin;",
          "21: import io.jsonwebtoken.Jwts;",
          "22: import io.jsonwebtoken.SignatureAlgorithm;",
          "23: import java.util.Arrays;",
          "24: import java.util.HashMap;",
          "25: import java.util.HashSet;",
          "26: import java.util.Map;",
          "27: import java.util.Properties;",
          "28: import java.util.UUID;",
          "29: import javax.crypto.SecretKey;",
          "30: import org.apache.pulsar.broker.auth.MockedPulsarServiceBaseTest;",
          "31: import org.apache.pulsar.broker.authentication.AuthenticationProviderToken;",
          "32: import org.apache.pulsar.broker.authentication.utils.AuthTokenUtils;",
          "33: import org.apache.pulsar.broker.authorization.PulsarAuthorizationProvider;",
          "34: import org.apache.pulsar.client.admin.PulsarAdmin;",
          "35: import org.apache.pulsar.client.admin.PulsarAdminBuilder;",
          "36: import org.apache.pulsar.client.impl.auth.AuthenticationToken;",
          "37: import org.apache.pulsar.common.policies.data.TenantInfo;",
          "38: import org.apache.pulsar.common.util.ObjectMapperFactory;",
          "39: import org.testng.annotations.AfterClass;",
          "40: import org.testng.annotations.BeforeClass;",
          "42: public abstract class BaseAuthZTest extends MockedPulsarServiceBaseTest {",
          "43:     protected static final SecretKey SECRET_KEY = AuthTokenUtils.createSecretKey(SignatureAlgorithm.HS256);",
          "44:     private static final String TENANT_ADMIN_SUBJECT = UUID.randomUUID().toString();",
          "45:     private static final String TENANT_ADMIN_TOKEN = Jwts.builder()",
          "46:             .claim(\"sub\", TENANT_ADMIN_SUBJECT).signWith(SECRET_KEY).compact();",
          "47:     private static final String BROKER_INTERNAL_CLIENT_SUBJECT = \"broker_internal\";",
          "48:     private static final String BROKER_INTERNAL_CLIENT_TOKEN = Jwts.builder()",
          "49:             .claim(\"sub\", BROKER_INTERNAL_CLIENT_SUBJECT).signWith(SECRET_KEY).compact();",
          "50:     private static final String SUPER_USER_SUBJECT = \"super-user\";",
          "51:     private static final String SUPER_USER_TOKEN = Jwts.builder()",
          "52:             .claim(\"sub\", SUPER_USER_SUBJECT).signWith(SECRET_KEY).compact();",
          "53:     private static final String NOBODY_SUBJECT = \"nobody\";",
          "54:     private static final String NOBODY_TOKEN = Jwts.builder()",
          "55:             .claim(\"sub\", NOBODY_SUBJECT).signWith(SECRET_KEY).compact();",
          "56:     protected PulsarAdmin superUserAdmin;",
          "57:     protected PulsarAdmin tenantManagerAdmin;",
          "59:     @BeforeClass",
          "60:     @Override",
          "61:     protected void setup() throws Exception {",
          "62:         conf.setSystemTopicEnabled(true);",
          "63:         conf.setTopicLevelPoliciesEnabled(true);",
          "64:         conf.setAuthorizationEnabled(true);",
          "65:         conf.setAuthorizationProvider(PulsarAuthorizationProvider.class.getName());",
          "66:         conf.setSuperUserRoles(new HashSet<>(Arrays.asList(SUPER_USER_SUBJECT, BROKER_INTERNAL_CLIENT_SUBJECT)));",
          "67:         conf.setAuthenticationEnabled(true);",
          "68:         conf.setAuthenticationProviders(new HashSet<>(Arrays.asList(AuthenticationProviderToken.class.getName())));",
          "70:         conf.setBrokerClientAuthenticationPlugin(AuthenticationToken.class.getName());",
          "71:         final Map<String, String> brokerClientAuthParams = new HashMap<>();",
          "72:         brokerClientAuthParams.put(\"token\", BROKER_INTERNAL_CLIENT_TOKEN);",
          "73:         final String brokerClientAuthParamStr = ObjectMapperFactory.getThreadLocal()",
          "74:                 .writeValueAsString(brokerClientAuthParams);",
          "75:         conf.setBrokerClientAuthenticationParameters(brokerClientAuthParamStr);",
          "77:         Properties properties = conf.getProperties();",
          "78:         if (properties == null) {",
          "79:             properties = new Properties();",
          "80:             conf.setProperties(properties);",
          "81:         }",
          "82:         properties.put(\"tokenSecretKey\", AuthTokenUtils.encodeKeyBase64(SECRET_KEY));",
          "84:         internalSetup();",
          "85:         setupDefaultTenantAndNamespace();",
          "87:         this.superUserAdmin = PulsarAdmin.builder()",
          "88:                 .serviceHttpUrl(pulsar.getWebServiceAddress())",
          "89:                 .authentication(new AuthenticationToken(SUPER_USER_TOKEN))",
          "90:                 .build();",
          "91:         final TenantInfo tenantInfo = superUserAdmin.tenants().getTenantInfo(\"public\");",
          "92:         tenantInfo.getAdminRoles().add(TENANT_ADMIN_SUBJECT);",
          "93:         superUserAdmin.tenants().updateTenant(\"public\", tenantInfo);",
          "94:         this.tenantManagerAdmin = PulsarAdmin.builder()",
          "95:                 .serviceHttpUrl(pulsar.getWebServiceAddress())",
          "96:                 .authentication(new AuthenticationToken(TENANT_ADMIN_TOKEN))",
          "97:                 .build();",
          "98:     }",
          "100:     @Override",
          "101:     protected void customizeNewPulsarAdminBuilder(PulsarAdminBuilder pulsarAdminBuilder) {",
          "102:         pulsarAdminBuilder.authentication(new AuthenticationToken(SUPER_USER_TOKEN));",
          "103:     }",
          "105:     @AfterClass",
          "106:     @Override",
          "107:     protected void cleanup() throws Exception {",
          "108:         internalCleanup();",
          "109:     }",
          "110: }",
          "",
          "---------------"
        ],
        "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java": [
          "File: pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java -> pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.pulsar.broker.admin;",
          "22: import io.jsonwebtoken.Jwts;",
          "23: import java.util.Collections;",
          "24: import java.util.HashMap;",
          "25: import java.util.Map;",
          "26: import java.util.UUID;",
          "27: import lombok.Cleanup;",
          "28: import lombok.SneakyThrows;",
          "29: import org.apache.pulsar.client.admin.PulsarAdmin;",
          "30: import org.apache.pulsar.client.admin.PulsarAdminException;",
          "31: import org.apache.pulsar.client.impl.auth.AuthenticationToken;",
          "32: import org.apache.pulsar.common.policies.data.AuthAction;",
          "33: import org.testng.Assert;",
          "34: import org.testng.annotations.Test;",
          "36: @Test(groups = \"broker-admin\")",
          "37: public class NamespaceAuthZTest extends BaseAuthZTest {",
          "38:     @SneakyThrows",
          "39:     @Test",
          "40:     public void testProperties() {",
          "41:         final String random = UUID.randomUUID().toString();",
          "42:         final String namespace = \"public/default\";",
          "43:         final String topic = \"persistent://public/default/\" + random;",
          "44:         final String subject =  UUID.randomUUID().toString();",
          "45:         final String token = Jwts.builder()",
          "46:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "47:         superUserAdmin.topics().createNonPartitionedTopic(topic);",
          "49:         @Cleanup",
          "50:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "51:                 .serviceHttpUrl(pulsar.getWebServiceAddress())",
          "52:                 .authentication(new AuthenticationToken(token))",
          "53:                 .build();",
          "55:         Map<String, String> properties = new HashMap<>();",
          "56:         properties.put(\"key1\", \"value1\");",
          "57:         superUserAdmin.namespaces().setProperties(namespace, properties);",
          "58:         superUserAdmin.namespaces().setProperty(namespace, \"key2\", \"value2\");",
          "59:         superUserAdmin.namespaces().getProperties(namespace);",
          "60:         superUserAdmin.namespaces().getProperty(namespace, \"key2\");",
          "61:         superUserAdmin.namespaces().removeProperty(namespace, \"key2\");",
          "62:         superUserAdmin.namespaces().clearProperties(namespace);",
          "65:         tenantManagerAdmin.namespaces().setProperties(namespace, properties);",
          "66:         tenantManagerAdmin.namespaces().setProperty(namespace, \"key2\", \"value2\");",
          "67:         tenantManagerAdmin.namespaces().getProperties(namespace);",
          "68:         tenantManagerAdmin.namespaces().getProperty(namespace, \"key2\");",
          "69:         tenantManagerAdmin.namespaces().removeProperty(namespace, \"key2\");",
          "70:         tenantManagerAdmin.namespaces().clearProperties(namespace);",
          "73:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "74:                 () -> subAdmin.namespaces().setProperties(namespace, properties));",
          "76:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "77:                 () -> subAdmin.namespaces().setProperty(namespace, \"key2\", \"value2\"));",
          "79:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "80:                 () -> subAdmin.namespaces().getProperties(namespace));",
          "82:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "83:                 () -> subAdmin.namespaces().getProperty(namespace, \"key2\"));",
          "86:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "87:                 () -> subAdmin.namespaces().removeProperty(namespace, \"key2\"));",
          "89:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "90:                 () -> subAdmin.namespaces().clearProperties(namespace));",
          "92:         for (AuthAction action : AuthAction.values()) {",
          "93:             superUserAdmin.namespaces().grantPermissionOnNamespace(namespace, subject, Collections.singleton(action));",
          "94:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "95:                     () -> subAdmin.namespaces().setProperties(namespace, properties));",
          "97:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "98:                     () -> subAdmin.namespaces().setProperty(namespace, \"key2\", \"value2\"));",
          "100:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "101:                     () -> subAdmin.namespaces().getProperties(namespace));",
          "103:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "104:                     () -> subAdmin.namespaces().getProperty(namespace, \"key2\"));",
          "107:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "108:                     () -> subAdmin.namespaces().removeProperty(namespace, \"key2\"));",
          "110:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "111:                     () -> subAdmin.namespaces().clearProperties(namespace));",
          "113:             superUserAdmin.namespaces().revokePermissionsOnNamespace(namespace, subject);",
          "114:         }",
          "115:         superUserAdmin.topics().delete(topic, true);",
          "116:     }",
          "117: }",
          "",
          "---------------"
        ],
        "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java": [
          "File: pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java -> pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.pulsar.broker.admin;",
          "22: import io.jsonwebtoken.Jwts;",
          "23: import java.util.Collections;",
          "24: import java.util.HashMap;",
          "25: import java.util.Map;",
          "26: import java.util.UUID;",
          "27: import java.util.concurrent.atomic.AtomicInteger;",
          "28: import lombok.Cleanup;",
          "29: import lombok.SneakyThrows;",
          "30: import org.apache.pulsar.client.admin.PulsarAdmin;",
          "31: import org.apache.pulsar.client.admin.PulsarAdminException;",
          "32: import org.apache.pulsar.client.api.MessageId;",
          "33: import org.apache.pulsar.client.impl.auth.AuthenticationToken;",
          "34: import org.apache.pulsar.common.policies.data.AuthAction;",
          "35: import org.testng.Assert;",
          "36: import org.testng.annotations.Test;",
          "38: @Test(groups = \"broker-admin\")",
          "39: public class TopicAuthZTest extends BaseAuthZTest {",
          "41:     @SneakyThrows",
          "42:     @Test",
          "43:     public void testUnloadAndCompact() {",
          "44:         final String random = UUID.randomUUID().toString();",
          "45:         final String topic = \"persistent://public/default/\" + random;",
          "46:         final String subject =  UUID.randomUUID().toString();",
          "47:         final String token = Jwts.builder()",
          "48:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "49:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
          "51:         @Cleanup",
          "52:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "53:                 .serviceHttpUrl(pulsar.getWebServiceAddress())",
          "54:                 .authentication(new AuthenticationToken(token))",
          "55:                 .build();",
          "57:         superUserAdmin.topics().unload(topic);",
          "58:         superUserAdmin.topics().triggerCompaction(topic);",
          "59:         superUserAdmin.topicPolicies().getSchemaCompatibilityStrategy(topic, false);",
          "62:         tenantManagerAdmin.topics().unload(topic);",
          "63:         tenantManagerAdmin.topics().triggerCompaction(topic);",
          "64:         tenantManagerAdmin.topicPolicies().getSchemaCompatibilityStrategy(topic, false);",
          "67:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "68:                 () -> subAdmin.topics().unload(topic));",
          "70:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "71:                 () -> subAdmin.topics().triggerCompaction(topic));",
          "73:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "74:                 () -> subAdmin.topicPolicies().getSchemaCompatibilityStrategy(topic, false));",
          "77:         for (AuthAction action : AuthAction.values()) {",
          "78:             superUserAdmin.topics().grantPermission(topic, subject, Collections.singleton(action));",
          "80:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "81:                     () -> subAdmin.topics().unload(topic));",
          "83:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "84:                     () -> subAdmin.topics().triggerCompaction(topic));",
          "86:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "87:                     () -> subAdmin.topicPolicies().getSchemaCompatibilityStrategy(topic, false));",
          "89:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "90:         }",
          "91:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
          "92:     }",
          "94:     @Test",
          "95:     @SneakyThrows",
          "96:     public void testGetManagedLedgerInfo() {",
          "97:         final String random = UUID.randomUUID().toString();",
          "98:         final String topic = \"persistent://public/default/\" + random;",
          "99:         final String subject =  UUID.randomUUID().toString();",
          "100:         final String token = Jwts.builder()",
          "101:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "102:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
          "104:         @Cleanup",
          "105:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "106:                 .serviceHttpUrl(pulsar.getWebServiceAddress())",
          "107:                 .authentication(new AuthenticationToken(token))",
          "108:                 .build();",
          "110:         superUserAdmin.topics().getInternalInfo(topic);",
          "113:         tenantManagerAdmin.topics().getInternalInfo(topic);",
          "116:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "117:                 () -> subAdmin.topics().getInternalInfo(topic));",
          "119:         for (AuthAction action : AuthAction.values()) {",
          "120:             superUserAdmin.topics().grantPermission(topic, subject, Collections.singleton(action));",
          "121:             if (action == AuthAction.produce || action == AuthAction.consume) {",
          "122:                 subAdmin.topics().getInternalInfo(topic);",
          "123:             } else {",
          "124:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "125:                         () -> subAdmin.topics().getInternalInfo(topic));",
          "126:             }",
          "127:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "128:         }",
          "129:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
          "130:     }",
          "132:     @Test",
          "133:     @SneakyThrows",
          "134:     public void testGetPartitionedStatsAndInternalStats() {",
          "135:         final String random = UUID.randomUUID().toString();",
          "136:         final String topic = \"persistent://public/default/\" + random;",
          "137:         final String subject =  UUID.randomUUID().toString();",
          "138:         final String token = Jwts.builder()",
          "139:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "140:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
          "142:         @Cleanup",
          "143:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "144:                 .serviceHttpUrl(pulsar.getWebServiceAddress())",
          "145:                 .authentication(new AuthenticationToken(token))",
          "146:                 .build();",
          "148:         superUserAdmin.topics().getPartitionedStats(topic, false);",
          "149:         superUserAdmin.topics().getPartitionedInternalStats(topic);",
          "152:         tenantManagerAdmin.topics().getPartitionedStats(topic, false);",
          "153:         tenantManagerAdmin.topics().getPartitionedInternalStats(topic);",
          "156:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "157:                 () -> subAdmin.topics().getPartitionedStats(topic, false));",
          "159:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "160:                 () -> subAdmin.topics().getPartitionedInternalStats(topic));",
          "162:         for (AuthAction action : AuthAction.values()) {",
          "163:             superUserAdmin.topics().grantPermission(topic, subject, Collections.singleton(action));",
          "164:             if (action == AuthAction.produce || action == AuthAction.consume) {",
          "165:                 subAdmin.topics().getPartitionedStats(topic, false);",
          "166:                 subAdmin.topics().getPartitionedInternalStats(topic);",
          "167:             } else {",
          "168:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "169:                         () -> subAdmin.topics().getPartitionedStats(topic, false));",
          "171:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "172:                         () -> subAdmin.topics().getPartitionedInternalStats(topic));",
          "173:             }",
          "174:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "175:         }",
          "176:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
          "177:     }",
          "179:     @Test",
          "180:     @SneakyThrows",
          "181:     public void testCreateSubscriptionAndUpdateSubscriptionPropertiesAndAnalyzeSubscriptionBacklog() {",
          "182:         final String random = UUID.randomUUID().toString();",
          "183:         final String topic = \"persistent://public/default/\" + random;",
          "184:         final String subject =  UUID.randomUUID().toString();",
          "185:         final String token = Jwts.builder()",
          "186:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "187:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
          "188:         AtomicInteger suffix = new AtomicInteger(1);",
          "189:         @Cleanup",
          "190:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "191:                 .serviceHttpUrl(pulsar.getWebServiceAddress())",
          "192:                 .authentication(new AuthenticationToken(token))",
          "193:                 .build();",
          "195:         superUserAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest);",
          "198:         tenantManagerAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest);",
          "201:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "202:                 () -> subAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest));",
          "204:         for (AuthAction action : AuthAction.values()) {",
          "205:             superUserAdmin.topics().grantPermission(topic, subject, Collections.singleton(action));",
          "206:             if (action == AuthAction.consume) {",
          "207:                 subAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest);",
          "208:             } else {",
          "209:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "210:                         () -> subAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest));",
          "211:             }",
          "212:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "213:         }",
          "215:         Map<String, String> properties = new HashMap<>();",
          "216:         superUserAdmin.topics().createSubscription(topic, \"test-sub\", MessageId.earliest);",
          "218:         superUserAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\" , properties);",
          "221:         tenantManagerAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\" , properties);",
          "224:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "225:                 () -> subAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\", properties));",
          "227:         for (AuthAction action : AuthAction.values()) {",
          "228:             superUserAdmin.topics().grantPermission(topic, subject, Collections.singleton(action));",
          "229:             if (action == AuthAction.consume) {",
          "230:                 subAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\", properties);",
          "231:             } else {",
          "232:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "233:                         () -> subAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\", properties));",
          "234:             }",
          "235:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "236:         }",
          "237:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
          "238:     }",
          "240:     @Test",
          "241:     @SneakyThrows",
          "242:     public void testCreateMissingPartition() {",
          "243:         final String random = UUID.randomUUID().toString();",
          "244:         final String topic = \"persistent://public/default/\" + random;",
          "245:         final String subject =  UUID.randomUUID().toString();",
          "246:         final String token = Jwts.builder()",
          "247:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "248:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
          "249:         AtomicInteger suffix = new AtomicInteger(1);",
          "250:         @Cleanup",
          "251:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "252:                 .serviceHttpUrl(pulsar.getWebServiceAddress())",
          "253:                 .authentication(new AuthenticationToken(token))",
          "254:                 .build();",
          "256:         superUserAdmin.topics().createMissedPartitions(topic);",
          "259:         tenantManagerAdmin.topics().createMissedPartitions(topic);",
          "261:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "262:                 () -> subAdmin.topics().createMissedPartitions(topic));",
          "264:         for (AuthAction action : AuthAction.values()) {",
          "265:             superUserAdmin.topics().grantPermission(topic, subject, Collections.singleton(action));",
          "266:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "267:                     () -> subAdmin.topics().createMissedPartitions(topic));",
          "268:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "269:         }",
          "270:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
          "271:     }",
          "272: }",
          "",
          "---------------"
        ],
        "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicPoliciesAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicPoliciesAuthZTest.java": [
          "File: pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicPoliciesAuthZTest.java -> pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicPoliciesAuthZTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.pulsar.broker.admin;",
          "21: import static org.awaitility.Awaitility.await;",
          "23: import io.jsonwebtoken.Jwts;",
          "28: import java.util.UUID;",
          "30: import lombok.Cleanup;",
          "31: import lombok.SneakyThrows;",
          "36: import org.apache.pulsar.client.admin.PulsarAdmin;",
          "38: import org.apache.pulsar.client.admin.PulsarAdminException;",
          "39: import org.apache.pulsar.client.impl.auth.AuthenticationToken;",
          "40: import org.apache.pulsar.common.policies.data.AuthAction;",
          "41: import org.apache.pulsar.common.policies.data.RetentionPolicies;",
          "44: import org.testng.Assert;",
          "47: import org.testng.annotations.Test;",
          "125:     @SneakyThrows",
          "",
          "[Removed Lines]",
          "22: import com.google.common.collect.Sets;",
          "24: import io.jsonwebtoken.SignatureAlgorithm;",
          "25: import java.util.HashMap;",
          "26: import java.util.Map;",
          "27: import java.util.Properties;",
          "29: import javax.crypto.SecretKey;",
          "32: import org.apache.pulsar.broker.auth.MockedPulsarServiceBaseTest;",
          "33: import org.apache.pulsar.broker.authentication.AuthenticationProviderToken;",
          "34: import org.apache.pulsar.broker.authentication.utils.AuthTokenUtils;",
          "35: import org.apache.pulsar.broker.authorization.PulsarAuthorizationProvider;",
          "37: import org.apache.pulsar.client.admin.PulsarAdminBuilder;",
          "42: import org.apache.pulsar.common.policies.data.TenantInfo;",
          "43: import org.apache.pulsar.common.util.ObjectMapperFactory;",
          "45: import org.testng.annotations.AfterClass;",
          "46: import org.testng.annotations.BeforeClass;",
          "49: public final class TopicPoliciesAuthZTest extends MockedPulsarServiceBaseTest {",
          "51:     private PulsarAdmin superUserAdmin;",
          "53:     private PulsarAdmin tenantManagerAdmin;",
          "55:     private static final SecretKey SECRET_KEY = AuthTokenUtils.createSecretKey(SignatureAlgorithm.HS256);",
          "56:     private static final String TENANT_ADMIN_SUBJECT =  UUID.randomUUID().toString();",
          "57:     private static final String TENANT_ADMIN_TOKEN = Jwts.builder()",
          "58:             .claim(\"sub\", TENANT_ADMIN_SUBJECT).signWith(SECRET_KEY).compact();",
          "61:     private static final String BROKER_INTERNAL_CLIENT_SUBJECT = \"broker_internal\";",
          "62:     private static final String BROKER_INTERNAL_CLIENT_TOKEN = Jwts.builder()",
          "63:             .claim(\"sub\", BROKER_INTERNAL_CLIENT_SUBJECT).signWith(SECRET_KEY).compact();",
          "64:     private static final String SUPER_USER_SUBJECT = \"super-user\";",
          "65:     private static final String SUPER_USER_TOKEN = Jwts.builder()",
          "66:             .claim(\"sub\", SUPER_USER_SUBJECT).signWith(SECRET_KEY).compact();",
          "67:     private static final String NOBODY_SUBJECT =  \"nobody\";",
          "68:     private static final String NOBODY_TOKEN = Jwts.builder()",
          "69:             .claim(\"sub\", NOBODY_SUBJECT).signWith(SECRET_KEY).compact();",
          "72:     @BeforeClass",
          "73:     @Override",
          "74:     protected void setup() throws Exception {",
          "75:         conf.setAuthorizationEnabled(true);",
          "76:         conf.setAuthorizationProvider(PulsarAuthorizationProvider.class.getName());",
          "77:         conf.setSuperUserRoles(Sets.newHashSet(SUPER_USER_SUBJECT, BROKER_INTERNAL_CLIENT_SUBJECT));",
          "78:         conf.setAuthenticationEnabled(true);",
          "79:         conf.setSystemTopicEnabled(true);",
          "80:         conf.setTopicLevelPoliciesEnabled(true);",
          "81:         conf.setAuthenticationProviders(Sets.newHashSet(AuthenticationProviderToken.class.getName()));",
          "83:         conf.setBrokerClientAuthenticationPlugin(AuthenticationToken.class.getName());",
          "84:         final Map<String, String> brokerClientAuthParams = new HashMap<>();",
          "85:         brokerClientAuthParams.put(\"token\", BROKER_INTERNAL_CLIENT_TOKEN);",
          "86:         final String brokerClientAuthParamStr = ObjectMapperFactory.getThreadLocal()",
          "87:                 .writeValueAsString(brokerClientAuthParams);",
          "88:         conf.setBrokerClientAuthenticationParameters(brokerClientAuthParamStr);",
          "90:         Properties properties = conf.getProperties();",
          "91:         if (properties == null) {",
          "92:             properties = new Properties();",
          "93:             conf.setProperties(properties);",
          "94:         }",
          "95:         properties.put(\"tokenSecretKey\", AuthTokenUtils.encodeKeyBase64(SECRET_KEY));",
          "97:         internalSetup();",
          "98:         setupDefaultTenantAndNamespace();",
          "100:         this.superUserAdmin =PulsarAdmin.builder()",
          "101:                 .serviceHttpUrl(pulsar.getWebServiceAddress())",
          "102:                 .authentication(new AuthenticationToken(SUPER_USER_TOKEN))",
          "103:                 .build();",
          "104:         final TenantInfo tenantInfo = superUserAdmin.tenants().getTenantInfo(\"public\");",
          "105:         tenantInfo.getAdminRoles().add(TENANT_ADMIN_SUBJECT);",
          "106:         superUserAdmin.tenants().updateTenant(\"public\", tenantInfo);",
          "107:         this.tenantManagerAdmin = PulsarAdmin.builder()",
          "108:                 .serviceHttpUrl(pulsar.getWebServiceAddress())",
          "109:                 .authentication(new AuthenticationToken(TENANT_ADMIN_TOKEN))",
          "110:                 .build();",
          "111:     }",
          "113:     @Override",
          "114:     protected void customizeNewPulsarAdminBuilder(PulsarAdminBuilder pulsarAdminBuilder) {",
          "115:         pulsarAdminBuilder.authentication(new AuthenticationToken(SUPER_USER_TOKEN));",
          "116:     }",
          "118:     @AfterClass",
          "119:     @Override",
          "120:     protected void cleanup() throws Exception {",
          "121:      internalCleanup();",
          "122:     }",
          "",
          "[Added Lines]",
          "23: import java.util.Collections;",
          "31: import org.apache.pulsar.common.policies.data.OffloadPolicies;",
          "32: import org.apache.pulsar.common.policies.data.OffloadPoliciesImpl;",
          "38: public final class TopicPoliciesAuthZTest extends BaseAuthZTest {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "194:         for (AuthAction action : AuthAction.values()) {",
          "195:             superUserAdmin.namespaces().grantPermissionOnNamespace(\"public/default\",",
          "197:             try {",
          "198:                 subAdmin.topicPolicies().getRetention(topic);",
          "199:                 Assert.fail(\"unexpected behaviour\");",
          "",
          "[Removed Lines]",
          "196:                     subject, Sets.newHashSet(action));",
          "",
          "[Added Lines]",
          "112:                     subject, Collections.singleton(action));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218:             superUserAdmin.namespaces().revokePermissionsOnNamespace(\"public/default\", subject);",
          "219:         }",
          "220:     }",
          "222:     @SneakyThrows",
          "223:     @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:     @SneakyThrows",
          "138:     @Test",
          "139:     public void testOffloadPolicy() {",
          "140:         final String random = UUID.randomUUID().toString();",
          "141:         final String topic = \"persistent://public/default/\" + random;",
          "142:         final String subject =  UUID.randomUUID().toString();",
          "143:         final String token = Jwts.builder()",
          "144:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "145:         superUserAdmin.topics().createNonPartitionedTopic(topic);",
          "147:         @Cleanup",
          "148:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "149:                 .serviceHttpUrl(getPulsar().getWebServiceAddress())",
          "150:                 .authentication(new AuthenticationToken(token))",
          "151:                 .build();",
          "154:         final OffloadPoliciesImpl definedOffloadPolicies = new OffloadPoliciesImpl();",
          "155:         definedOffloadPolicies.setManagedLedgerOffloadThresholdInBytes(100L);",
          "156:         definedOffloadPolicies.setManagedLedgerOffloadDeletionLagInMillis(200L);",
          "157:         definedOffloadPolicies.setManagedLedgerOffloadDriver(\"\"); // set to blank value to test the behaviour",
          "158:         definedOffloadPolicies.setManagedLedgerOffloadBucket(\"buck\");",
          "161:         superUserAdmin.topicPolicies().setOffloadPolicies(topic, definedOffloadPolicies);",
          "164:         await().untilAsserted(() -> {",
          "165:             final OffloadPolicies offloadPolicy = superUserAdmin.topicPolicies().getOffloadPolicies(topic);",
          "166:             Assert.assertEquals(offloadPolicy, definedOffloadPolicies);",
          "167:         });",
          "168:         superUserAdmin.topicPolicies().removeOffloadPolicies(topic);",
          "170:         await().untilAsserted(() -> {",
          "171:             final OffloadPolicies offloadPolicy = superUserAdmin.topicPolicies().getOffloadPolicies(topic);",
          "172:             Assert.assertNull(offloadPolicy);",
          "173:         });",
          "177:         tenantManagerAdmin.topicPolicies().setOffloadPolicies(topic, definedOffloadPolicies);",
          "178:         await().untilAsserted(() -> {",
          "179:             final OffloadPolicies offloadPolicy = tenantManagerAdmin.topicPolicies().getOffloadPolicies(topic);",
          "180:             Assert.assertEquals(offloadPolicy, definedOffloadPolicies);",
          "181:         });",
          "182:         tenantManagerAdmin.topicPolicies().removeOffloadPolicies(topic);",
          "183:         await().untilAsserted(() -> {",
          "184:             final OffloadPolicies offloadPolicy = tenantManagerAdmin.topicPolicies().getOffloadPolicies(topic);",
          "185:             Assert.assertNull(offloadPolicy);",
          "186:         });",
          "190:         try {",
          "191:             subAdmin.topicPolicies().getOffloadPolicies(topic);",
          "192:             Assert.fail(\"unexpected behaviour\");",
          "193:         } catch (PulsarAdminException ex) {",
          "194:             Assert.assertTrue(ex instanceof PulsarAdminException.NotAuthorizedException);",
          "195:         }",
          "197:         try {",
          "199:             subAdmin.topicPolicies().setOffloadPolicies(topic, definedOffloadPolicies);",
          "200:             Assert.fail(\"unexpected behaviour\");",
          "201:         } catch (PulsarAdminException ex) {",
          "202:             Assert.assertTrue(ex instanceof PulsarAdminException.NotAuthorizedException);",
          "203:         }",
          "205:         try {",
          "206:             subAdmin.topicPolicies().removeOffloadPolicies(topic);",
          "207:             Assert.fail(\"unexpected behaviour\");",
          "208:         } catch (PulsarAdminException ex) {",
          "209:             Assert.assertTrue(ex instanceof PulsarAdminException.NotAuthorizedException);",
          "210:         }",
          "213:         for (AuthAction action : AuthAction.values()) {",
          "214:             superUserAdmin.namespaces().grantPermissionOnNamespace(\"public/default\",",
          "215:                     subject, Collections.singleton(action));",
          "216:             try {",
          "217:                 subAdmin.topicPolicies().getOffloadPolicies(topic);",
          "218:                 Assert.fail(\"unexpected behaviour\");",
          "219:             } catch (PulsarAdminException ex) {",
          "220:                 Assert.assertTrue(ex instanceof PulsarAdminException.NotAuthorizedException);",
          "221:             }",
          "223:             try {",
          "225:                 subAdmin.topicPolicies().setOffloadPolicies(topic, definedOffloadPolicies);",
          "226:                 Assert.fail(\"unexpected behaviour\");",
          "227:             } catch (PulsarAdminException ex) {",
          "228:                 Assert.assertTrue(ex instanceof PulsarAdminException.NotAuthorizedException);",
          "229:             }",
          "231:             try {",
          "232:                 subAdmin.topicPolicies().removeOffloadPolicies(topic);",
          "233:                 Assert.fail(\"unexpected behaviour\");",
          "234:             } catch (PulsarAdminException ex) {",
          "235:                 Assert.assertTrue(ex instanceof PulsarAdminException.NotAuthorizedException);",
          "236:             }",
          "237:             superUserAdmin.namespaces().revokePermissionsOnNamespace(\"public/default\", subject);",
          "238:         }",
          "239:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "230:         superUserAdmin.topics().createNonPartitionedTopic(topic);",
          "232:         @Cleanup final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "234:                 .authentication(new AuthenticationToken(token))",
          "235:                 .build();",
          "",
          "[Removed Lines]",
          "233:                 .serviceHttpUrl(pulsar.getWebServiceAddress())",
          "",
          "[Added Lines]",
          "252:                 .serviceHttpUrl(getPulsar().getWebServiceAddress())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "294:         for (AuthAction action : AuthAction.values()) {",
          "295:             superUserAdmin.namespaces().grantPermissionOnNamespace(\"public/default\",",
          "297:             try {",
          "298:                 subAdmin.topicPolicies().getMaxUnackedMessagesOnConsumer(topic);",
          "299:                 Assert.fail(\"unexpected behaviour\");",
          "",
          "[Removed Lines]",
          "296:                     subject, Sets.newHashSet(action));",
          "",
          "[Added Lines]",
          "315:                     subject, Collections.singleton(action));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "330:         superUserAdmin.topics().createNonPartitionedTopic(topic);",
          "332:         @Cleanup final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "334:                 .authentication(new AuthenticationToken(token))",
          "335:                 .build();",
          "",
          "[Removed Lines]",
          "333:                 .serviceHttpUrl(pulsar.getWebServiceAddress())",
          "",
          "[Added Lines]",
          "352:                 .serviceHttpUrl(getPulsar().getWebServiceAddress())",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "396:         for (AuthAction action : AuthAction.values()) {",
          "397:             superUserAdmin.namespaces().grantPermissionOnNamespace(\"public/default\",",
          "399:             try {",
          "400:                 subAdmin.topicPolicies().getMaxUnackedMessagesOnSubscription(topic);",
          "401:                 Assert.fail(\"unexpected behaviour\");",
          "",
          "[Removed Lines]",
          "398:                     subject, Sets.newHashSet(action));",
          "",
          "[Added Lines]",
          "417:                     subject, Collections.singleton(action));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "99eb49a68982271562597d4c4cea127132bc0b35",
      "candidate_info": {
        "commit_hash": "99eb49a68982271562597d4c4cea127132bc0b35",
        "repo": "apache/pulsar",
        "commit_url": "https://github.com/apache/pulsar/commit/99eb49a68982271562597d4c4cea127132bc0b35",
        "files": [
          "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java",
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java"
        ],
        "message": "[improve][broker] Add fine-grain authorization to ns/topic management endpoints (#22305)\n\n(cherry picked from commit fd34d4ab9c5aa7e0dca961d5a8badae4613fbe8e)\n\n# Conflicts:\n#\tpulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
        "before_after_code_files": [
          "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java||pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java",
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java||pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java",
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
            "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
            "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java"
          ],
          "candidate": [
            "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java||pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java",
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
            "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
            "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java"
          ]
        }
      },
      "candidate_diff": {
        "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java||pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java": [
          "File: pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java -> pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "597:                             case COMPACT:",
          "598:                             case OFFLOAD:",
          "599:                             case UNLOAD:",
          "600:                             case DELETE_METADATA:",
          "601:                             case UPDATE_METADATA:",
          "602:                             case ADD_BUNDLE_RANGE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "600:                             case TRIM_TOPIC:",
          "",
          "---------------"
        ],
        "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java": [
          "File: pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java -> pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: import org.apache.pulsar.common.policies.data.NamespaceOperation;",
          "61: import org.apache.pulsar.common.policies.data.PersistencePolicies;",
          "62: import org.apache.pulsar.common.policies.data.Policies;",
          "65: import org.apache.pulsar.common.policies.data.RetentionPolicies;",
          "66: import org.apache.pulsar.common.policies.data.SchemaCompatibilityStrategy;",
          "67: import org.apache.pulsar.common.policies.data.SubscribeRate;",
          "",
          "[Removed Lines]",
          "63: import org.apache.pulsar.common.policies.data.PolicyName;",
          "64: import org.apache.pulsar.common.policies.data.PolicyOperation;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "711:     }",
          "713:     protected CompletableFuture<SchemaCompatibilityStrategy> getSchemaCompatibilityStrategyAsync() {",
          "718:                     if (ex != null) {",
          "719:                         log.error(\"[{}] Failed to get schema compatibility strategy of topic {} {}\",",
          "720:                                 clientAppId(), topicName, ex);",
          "",
          "[Removed Lines]",
          "714:         return validateTopicPolicyOperationAsync(topicName,",
          "715:                 PolicyName.SCHEMA_COMPATIBILITY_STRATEGY,",
          "716:                 PolicyOperation.READ)",
          "717:                 .thenCompose((__) -> getSchemaCompatibilityStrategyAsyncWithoutAuth()).whenComplete((__, ex) -> {",
          "",
          "[Added Lines]",
          "712:         return getSchemaCompatibilityStrategyAsyncWithoutAuth().whenComplete((__, ex) -> {",
          "",
          "---------------"
        ],
        "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java": [
          "File: pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java -> pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2354:    }",
          "2356:    protected void internalSetProperty(String key, String value, AsyncResponse asyncResponse) {",
          "2372:    }",
          "2374:    protected void internalSetProperties(Map<String, String> properties, AsyncResponse asyncResponse) {",
          "2390:    }",
          "2392:    protected void internalGetProperty(String key, AsyncResponse asyncResponse) {",
          "2402:    }",
          "2404:    protected void internalGetProperties(AsyncResponse asyncResponse) {",
          "2413:    }",
          "2415:    protected void internalRemoveProperty(String key, AsyncResponse asyncResponse) {",
          "2418:        AtomicReference<String> oldVal = new AtomicReference<>(null);",
          "2433:    }",
          "2435:    protected void internalClearProperties(AsyncResponse asyncResponse) {",
          "2437:        AtomicReference<Integer> clearedCount = new AtomicReference<>(0);",
          "2453:    }",
          "2455:    private CompletableFuture<Void> updatePoliciesAsync(NamespaceName ns, Function<Policies, Policies> updateFunction) {",
          "",
          "[Removed Lines]",
          "2357:        validatePoliciesReadOnlyAccess();",
          "2358:        updatePoliciesAsync(namespaceName, policies -> {",
          "2359:            policies.properties.put(key, value);",
          "2360:            return policies;",
          "2361:        }).thenAccept(v -> {",
          "2362:            log.info(\"[{}] Successfully set property for key {} on namespace {}\", clientAppId(), key,",
          "2363:                    namespaceName);",
          "2364:            asyncResponse.resume(Response.noContent().build());",
          "2365:        }).exceptionally(ex -> {",
          "2366:            Throwable cause = ex.getCause();",
          "2367:            log.error(\"[{}] Failed to set property for key {} on namespace {}\", clientAppId(), key,",
          "2368:                    namespaceName, cause);",
          "2369:            asyncResponse.resume(cause);",
          "2370:            return null;",
          "2371:        });",
          "2375:        validatePoliciesReadOnlyAccess();",
          "2376:        updatePoliciesAsync(namespaceName, policies -> {",
          "2377:            policies.properties.putAll(properties);",
          "2378:            return policies;",
          "2379:        }).thenAccept(v -> {",
          "2380:            log.info(\"[{}] Successfully set {} properties on namespace {}\", clientAppId(), properties.size(),",
          "2381:                    namespaceName);",
          "2382:            asyncResponse.resume(Response.noContent().build());",
          "2383:        }).exceptionally(ex -> {",
          "2384:            Throwable cause = ex.getCause();",
          "2385:            log.error(\"[{}] Failed to set {} properties on namespace {}\", clientAppId(), properties.size(),",
          "2386:                    namespaceName, cause);",
          "2387:            asyncResponse.resume(cause);",
          "2388:            return null;",
          "2389:        });",
          "2393:         getNamespacePoliciesAsync(namespaceName).thenAccept(policies -> {",
          "2394:             asyncResponse.resume(policies.properties.get(key));",
          "2395:         }).exceptionally(ex -> {",
          "2396:             Throwable cause = ex.getCause();",
          "2397:             log.error(\"[{}] Failed to get property for key {} of namespace {}\", clientAppId(), key,",
          "2398:                     namespaceName, cause);",
          "2399:             asyncResponse.resume(cause);",
          "2400:             return null;",
          "2401:         });",
          "2405:        getNamespacePoliciesAsync(namespaceName).thenAccept(policies -> {",
          "2406:            asyncResponse.resume(policies.properties);",
          "2407:        }).exceptionally(ex -> {",
          "2408:            Throwable cause = ex.getCause();",
          "2409:            log.error(\"[{}] Failed to get properties of namespace {}\", clientAppId(), namespaceName, cause);",
          "2410:            asyncResponse.resume(cause);",
          "2411:            return null;",
          "2412:        });",
          "2416:        validatePoliciesReadOnlyAccess();",
          "2419:        updatePoliciesAsync(namespaceName, policies -> {",
          "2420:            oldVal.set(policies.properties.remove(key));",
          "2421:            return policies;",
          "2422:        }).thenAccept(v -> {",
          "2423:            asyncResponse.resume(oldVal.get());",
          "2424:            log.info(\"[{}] Successfully remove property for key {} on namespace {}\", clientAppId(), key,",
          "2425:                    namespaceName);",
          "2426:        }).exceptionally(ex -> {",
          "2427:            Throwable cause = ex.getCause();",
          "2428:            log.error(\"[{}] Failed to remove property for key {} on namespace {}\", clientAppId(), key,",
          "2429:                    namespaceName, cause);",
          "2430:            asyncResponse.resume(cause);",
          "2431:           return null;",
          "2432:        });",
          "2436:        validatePoliciesReadOnlyAccess();",
          "2438:        updatePoliciesAsync(namespaceName, policies -> {",
          "2439:            clearedCount.set(policies.properties.size());",
          "2440:            policies.properties.clear();",
          "2441:            return policies;",
          "2442:        }).thenAccept(v -> {",
          "2443:            asyncResponse.resume(Response.noContent().build());",
          "2444:            log.info(\"[{}] Successfully clear {} properties on namespace {}\", clientAppId(), clearedCount.get(),",
          "2445:                    namespaceName);",
          "2446:        }).exceptionally(ex -> {",
          "2447:            Throwable cause = ex.getCause();",
          "2448:            log.error(\"[{}] Failed to clear {} properties on namespace {}\", clientAppId(), clearedCount.get(),",
          "2449:                    namespaceName, cause);",
          "2450:            asyncResponse.resume(cause);",
          "2451:            return null;",
          "2452:        });",
          "",
          "[Added Lines]",
          "2357:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2358:                .thenCompose(__ -> validatePoliciesReadOnlyAccessAsync())",
          "2359:                .thenCompose(__ -> updatePoliciesAsync(namespaceName, policies -> {",
          "2360:                    policies.properties.put(key, value);",
          "2361:                    return policies;",
          "2362:                }))",
          "2363:                .thenAccept(v -> {",
          "2364:                    log.info(\"[{}] Successfully set property for key {} on namespace {}\", clientAppId(), key,",
          "2365:                            namespaceName);",
          "2366:                    asyncResponse.resume(Response.noContent().build());",
          "2367:                }).exceptionally(ex -> {",
          "2368:                    Throwable cause = ex.getCause();",
          "2369:                    log.error(\"[{}] Failed to set property for key {} on namespace {}\", clientAppId(), key,",
          "2370:                            namespaceName, cause);",
          "2371:                    asyncResponse.resume(cause);",
          "2372:                    return null;",
          "2373:                });",
          "2377:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2378:                .thenCompose(__ -> validatePoliciesReadOnlyAccessAsync())",
          "2379:                .thenCompose(__ -> updatePoliciesAsync(namespaceName, policies -> {",
          "2380:                    policies.properties.putAll(properties);",
          "2381:                    return policies;",
          "2382:                }))",
          "2383:                .thenAccept(v -> {",
          "2384:                    log.info(\"[{}] Successfully set {} properties on namespace {}\", clientAppId(), properties.size(),",
          "2385:                            namespaceName);",
          "2386:                    asyncResponse.resume(Response.noContent().build());",
          "2387:                }).exceptionally(ex -> {",
          "2388:                    Throwable cause = ex.getCause();",
          "2389:                    log.error(\"[{}] Failed to set {} properties on namespace {}\", clientAppId(), properties.size(),",
          "2390:                            namespaceName, cause);",
          "2391:                    asyncResponse.resume(cause);",
          "2392:                    return null;",
          "2393:                });",
          "2397:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2398:                .thenCompose(__ -> getNamespacePoliciesAsync(namespaceName))",
          "2399:                .thenAccept(policies -> asyncResponse.resume(policies.properties.get(key)))",
          "2400:                .exceptionally(ex -> {",
          "2401:                    Throwable cause = ex.getCause();",
          "2402:                    log.error(\"[{}] Failed to get property for key {} of namespace {}\", clientAppId(), key,",
          "2403:                            namespaceName, cause);",
          "2404:                    asyncResponse.resume(cause);",
          "2405:                    return null;",
          "2406:                });",
          "2410:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2411:                .thenCompose(__ -> getNamespacePoliciesAsync(namespaceName))",
          "2412:                .thenAccept(policies -> asyncResponse.resume(policies.properties))",
          "2413:                .exceptionally(ex -> {",
          "2414:                    Throwable cause = ex.getCause();",
          "2415:                    log.error(\"[{}] Failed to get properties of namespace {}\", clientAppId(), namespaceName, cause);",
          "2416:                    asyncResponse.resume(cause);",
          "2417:                    return null;",
          "2418:                });",
          "2423:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2424:                .thenCompose(__ -> validatePoliciesReadOnlyAccessAsync())",
          "2425:                .thenCompose(__ -> updatePoliciesAsync(namespaceName, policies -> {",
          "2426:                    oldVal.set(policies.properties.remove(key));",
          "2427:                    return policies;",
          "2428:                })).thenAccept(v -> {",
          "2429:                    asyncResponse.resume(oldVal.get());",
          "2430:                    log.info(\"[{}] Successfully remove property for key {} on namespace {}\", clientAppId(), key,",
          "2431:                            namespaceName);",
          "2432:                }).exceptionally(ex -> {",
          "2433:                    Throwable cause = ex.getCause();",
          "2434:                    log.error(\"[{}] Failed to remove property for key {} on namespace {}\", clientAppId(), key,",
          "2435:                            namespaceName, cause);",
          "2436:                    asyncResponse.resume(cause);",
          "2437:                    return null;",
          "2438:                });",
          "2443:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2444:                .thenCompose(__ -> validatePoliciesReadOnlyAccessAsync())",
          "2445:                .thenCompose(__ -> updatePoliciesAsync(namespaceName, policies -> {",
          "2446:                    clearedCount.set(policies.properties.size());",
          "2447:                    policies.properties.clear();",
          "2448:                    return policies;",
          "2449:                }))",
          "2450:                .thenAccept(v -> {",
          "2451:                    asyncResponse.resume(Response.noContent().build());",
          "2452:                    log.info(\"[{}] Successfully clear {} properties on namespace {}\", clientAppId(), clearedCount.get(),",
          "2453:                            namespaceName);",
          "2454:                }).exceptionally(ex -> {",
          "2455:                    Throwable cause = ex.getCause();",
          "2456:                    log.error(\"[{}] Failed to clear {} properties on namespace {}\", clientAppId(), clearedCount.get(),",
          "2457:                            namespaceName, cause);",
          "2458:                    asyncResponse.resume(cause);",
          "2459:                    return null;",
          "2460:                });",
          "",
          "---------------"
        ],
        "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java": [
          "File: pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java -> pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "501:     protected void internalCreateMissedPartitions(AsyncResponse asyncResponse) {",
          "502:         getPartitionedTopicMetadataAsync(topicName, false, false).thenAccept(metadata -> {",
          "503:             if (metadata != null) {",
          "505:                     asyncResponse.resume(Response.noContent().build());",
          "506:                 }).exceptionally(e -> {",
          "507:                     log.error(\"[{}] Failed to create partitions for topic {}\", clientAppId(), topicName);",
          "",
          "[Removed Lines]",
          "504:                 tryCreatePartitionsAsync(metadata.partitions).thenAccept(v -> {",
          "",
          "[Added Lines]",
          "504:                 CompletableFuture<Void> future = validateNamespaceOperationAsync(topicName.getNamespaceObject(),",
          "505:                         NamespaceOperation.CREATE_TOPIC);",
          "506:                 future.thenCompose(__ -> tryCreatePartitionsAsync(metadata.partitions)).thenAccept(v -> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "834:     protected void internalUnloadTopic(AsyncResponse asyncResponse, boolean authoritative) {",
          "835:         log.info(\"[{}] Unloading topic {}\", clientAppId(), topicName);",
          "844:            if (topicName.isPartitioned()) {",
          "845:                if (isTransactionCoordinatorAssign(topicName)) {",
          "",
          "[Removed Lines]",
          "836:         CompletableFuture<Void> future;",
          "837:         if (topicName.isGlobal()) {",
          "838:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "839:         } else {",
          "840:             future = CompletableFuture.completedFuture(null);",
          "841:         }",
          "842:        future.thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "838:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.UNLOAD);",
          "839:         future.thenCompose(__ -> {",
          "840:             if (topicName.isGlobal()) {",
          "841:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "842:             }",
          "843:             return CompletableFuture.completedFuture(null);",
          "844:         }).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1057:     private void internalUnloadNonPartitionedTopicAsync(AsyncResponse asyncResponse, boolean authoritative) {",
          "1058:         validateTopicOwnershipAsync(topicName, authoritative)",
          "1060:                         .thenCompose(__ -> getTopicReferenceAsync(topicName))",
          "1061:                         .thenCompose(topic -> topic.close(false))",
          "1062:                         .thenRun(() -> {",
          "1063:                             log.info(\"[{}] Successfully unloaded topic {}\", clientAppId(), topicName);",
          "1064:                             asyncResponse.resume(Response.noContent().build());",
          "1066:                 .exceptionally(ex -> {",
          "1068:                     if (!isNot307And404Exception(ex)) {",
          "",
          "[Removed Lines]",
          "1059:                 .thenCompose(unused -> validateTopicOperationAsync(topicName, TopicOperation.UNLOAD)",
          "1065:                         }))",
          "",
          "[Added Lines]",
          "1066:                         })",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1076:     private void internalUnloadTransactionCoordinatorAsync(AsyncResponse asyncResponse, boolean authoritative) {",
          "1077:         validateTopicOwnershipAsync(topicName, authoritative)",
          "1088:                 .exceptionally(ex -> {",
          "1090:                     if (!isNot307And404Exception(ex)) {",
          "",
          "[Removed Lines]",
          "1078:                 .thenCompose(__ -> validateTopicOperationAsync(topicName, TopicOperation.UNLOAD)",
          "1079:                         .thenCompose(v -> pulsar()",
          "1080:                                 .getTransactionMetadataStoreService()",
          "1081:                                 .removeTransactionMetadataStore(",
          "1082:                                         TransactionCoordinatorID.get(topicName.getPartitionIndex())))",
          "1083:                         .thenRun(() -> {",
          "1084:                             log.info(\"[{}] Successfully unloaded tc {}\", clientAppId(),",
          "1085:                                     topicName.getPartitionIndex());",
          "1086:                             asyncResponse.resume(Response.noContent().build());",
          "1087:                         }))",
          "",
          "[Added Lines]",
          "1079:                 .thenCompose(v -> pulsar()",
          "1080:                         .getTransactionMetadataStoreService()",
          "1081:                         .removeTransactionMetadataStore(",
          "1082:                                 TransactionCoordinatorID.get(topicName.getPartitionIndex())))",
          "1083:                 .thenRun(() -> {",
          "1084:                     log.info(\"[{}] Successfully unloaded tc {}\", clientAppId(), topicName.getPartitionIndex());",
          "1085:                     asyncResponse.resume(Response.noContent().build());",
          "1086:                 })",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1295:     }",
          "1297:     protected void internalGetManagedLedgerInfo(AsyncResponse asyncResponse, boolean authoritative) {",
          "1306:             if (topicName.isPartitioned()) {",
          "1307:                 internalGetManagedLedgerInfoForNonPartitionedTopic(asyncResponse);",
          "",
          "[Removed Lines]",
          "1298:         CompletableFuture<Void> future;",
          "1299:         if (topicName.isGlobal()) {",
          "1300:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1301:         } else {",
          "1302:             future = CompletableFuture.completedFuture(null);",
          "1303:         }",
          "1304:         future.thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "1297:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.GET_STATS);",
          "1298:         future.thenCompose(__ -> {",
          "1299:             if (topicName.isGlobal()) {",
          "1300:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1301:             }",
          "1302:             return CompletableFuture.completedFuture(null);",
          "1303:         }).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1406:     protected void internalGetPartitionedStats(AsyncResponse asyncResponse, boolean authoritative, boolean perPartition,",
          "1407:                                                boolean getPreciseBacklog, boolean subscriptionBacklogSize,",
          "1408:                                                boolean getEarliestTimeInBacklog) {",
          "1416:                 authoritative, false)).thenAccept(partitionMetadata -> {",
          "1417:             if (partitionMetadata.partitions == 0) {",
          "1418:                 asyncResponse.resume(new RestException(Status.NOT_FOUND,",
          "",
          "[Removed Lines]",
          "1409:         CompletableFuture<Void> future;",
          "1410:         if (topicName.isGlobal()) {",
          "1411:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1412:         } else {",
          "1413:             future = CompletableFuture.completedFuture(null);",
          "1414:         }",
          "1415:         future.thenCompose(__ -> getPartitionedTopicMetadataAsync(topicName,",
          "",
          "[Added Lines]",
          "1408:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.GET_STATS);",
          "1409:         future.thenCompose(__ -> {",
          "1410:             if (topicName.isGlobal()) {",
          "1411:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1412:             }",
          "1413:             return  CompletableFuture.completedFuture(null);",
          "1414:         }).thenCompose(__ -> getPartitionedTopicMetadataAsync(topicName,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1492:     }",
          "1494:     protected void internalGetPartitionedStatsInternal(AsyncResponse asyncResponse, boolean authoritative) {",
          "1503:             if (partitionMetadata.partitions == 0) {",
          "1504:                 asyncResponse.resume(new RestException(Status.NOT_FOUND,",
          "1505:                         getPartitionedTopicNotFoundErrorMessage(topicName.toString())));",
          "",
          "[Removed Lines]",
          "1495:         CompletableFuture<Void> future;",
          "1496:         if (topicName.isGlobal()) {",
          "1497:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1498:         } else {",
          "1499:             future = CompletableFuture.completedFuture(null);",
          "1500:         }",
          "1501:         future.thenCompose(__ -> getPartitionedTopicMetadataAsync(topicName, authoritative, false))",
          "1502:                 .thenAccept(partitionMetadata -> {",
          "",
          "[Added Lines]",
          "1494:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.GET_STATS);",
          "1495:         future.thenCompose(__ -> {",
          "1496:             if (topicName.isGlobal()) {",
          "1497:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1498:             } else {",
          "1499:                 return CompletableFuture.completedFuture(null);",
          "1500:             }",
          "1501:         }).thenCompose(__ -> getPartitionedTopicMetadataAsync(topicName, authoritative, false))",
          "1502:         .thenAccept(partitionMetadata -> {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2253:     protected void internalCreateSubscription(AsyncResponse asyncResponse, String subscriptionName,",
          "2254:             MessageIdImpl messageId, boolean authoritative, boolean replicated, Map<String, String> properties) {",
          "2262:             final MessageIdImpl targetMessageId = messageId == null ? (MessageIdImpl) MessageId.latest : messageId;",
          "2263:             log.info(\"[{}][{}] Creating subscription {} at message id {} with properties {}\", clientAppId(),",
          "2264:                     topicName, subscriptionName, targetMessageId, properties);",
          "",
          "[Removed Lines]",
          "2255:         CompletableFuture<Void> ret;",
          "2256:         if (topicName.isGlobal()) {",
          "2257:             ret = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2258:         } else {",
          "2259:             ret = CompletableFuture.completedFuture(null);",
          "2260:         }",
          "2261:         ret.thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "2255:         CompletableFuture<Void> ret = validateTopicOperationAsync(topicName, TopicOperation.SUBSCRIBE,",
          "2256:                 subscriptionName);",
          "2257:         ret.thenCompose(__ -> {",
          "2258:             if (topicName.isGlobal()) {",
          "2259:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2260:             }",
          "2261:             return CompletableFuture.completedFuture(null);",
          "2262:         }).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2417:     protected void internalUpdateSubscriptionProperties(AsyncResponse asyncResponse, String subName,",
          "2418:                                                         Map<String, String> subscriptionProperties,",
          "2419:                                                         boolean authoritative) {",
          "2428:             if (topicName.isPartitioned()) {",
          "2429:                 internalUpdateSubscriptionPropertiesForNonPartitionedTopic(asyncResponse, subName,",
          "2430:                         subscriptionProperties, authoritative);",
          "",
          "[Removed Lines]",
          "2420:         CompletableFuture<Void> future;",
          "2421:         if (topicName.isGlobal()) {",
          "2422:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2423:         } else {",
          "2424:             future = CompletableFuture.completedFuture(null);",
          "2425:         }",
          "2427:         future.thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative)).thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "2421:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.SUBSCRIBE, subName);",
          "2422:         future.thenCompose(__ -> {",
          "2423:             if (topicName.isGlobal()) {",
          "2424:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2425:             }",
          "2426:             return CompletableFuture.completedFuture(null);",
          "2427:         }).thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative)).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2496:     protected void internalAnalyzeSubscriptionBacklog(AsyncResponse asyncResponse, String subName,",
          "2497:                                                       Optional<Position> position,",
          "2498:                                                       boolean authoritative) {",
          "2507:                 .thenCompose(__ -> {",
          "2508:                     if (topicName.isPartitioned()) {",
          "2509:                         return CompletableFuture.completedFuture(null);",
          "",
          "[Removed Lines]",
          "2499:         CompletableFuture<Void> future;",
          "2500:         if (topicName.isGlobal()) {",
          "2501:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2502:         } else {",
          "2503:             future = CompletableFuture.completedFuture(null);",
          "2504:         }",
          "2506:         future.thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative))",
          "",
          "[Added Lines]",
          "2499:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.CONSUME, subName);",
          "2500:         future.thenCompose(__ -> {",
          "2501:             if (topicName.isGlobal()) {",
          "2502:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2503:             }",
          "2504:             return CompletableFuture.completedFuture(null);",
          "2505:         }).thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2536:     protected void internalGetSubscriptionProperties(AsyncResponse asyncResponse, String subName,",
          "2537:                                                         boolean authoritative) {",
          "2546:             if (topicName.isPartitioned()) {",
          "2547:                 internalGetSubscriptionPropertiesForNonPartitionedTopic(asyncResponse, subName,",
          "2548:                         authoritative);",
          "",
          "[Removed Lines]",
          "2538:         CompletableFuture<Void> future;",
          "2539:         if (topicName.isGlobal()) {",
          "2540:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2541:         } else {",
          "2542:             future = CompletableFuture.completedFuture(null);",
          "2543:         }",
          "2545:         future.thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative)).thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "2537:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.CONSUME, subName);",
          "2538:         future.thenCompose(__ -> {",
          "2539:             if (topicName.isGlobal()) {",
          "2540:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2541:             }",
          "2542:             return CompletableFuture.completedFuture(null);",
          "2543:         }).thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative)).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4182:     protected void internalTriggerCompaction(AsyncResponse asyncResponse, boolean authoritative) {",
          "4183:         log.info(\"[{}] Trigger compaction on topic {}\", clientAppId(), topicName);",
          "4192:             if (topicName.isPartitioned()) {",
          "4193:                 internalTriggerCompactionNonPartitionedTopic(asyncResponse, authoritative);",
          "",
          "[Removed Lines]",
          "4184:         CompletableFuture<Void> future;",
          "4185:         if (topicName.isGlobal()) {",
          "4186:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "4187:         } else {",
          "4188:             future = CompletableFuture.completedFuture(null);",
          "4189:         }",
          "4190:         future.thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "4182:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.COMPACT);",
          "4183:         future.thenCompose(__ -> {",
          "4184:             if (topicName.isGlobal()) {",
          "4185:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "4186:             } else {",
          "4187:                 return CompletableFuture.completedFuture(null);",
          "4188:             }",
          "4189:         }).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4667:                     \"Trim on a non-persistent topic is not allowed\"));",
          "4668:             return null;",
          "4669:         }",
          "4670:         if (topicName.isPartitioned()) {",
          "4672:                     -> trimNonPartitionedTopic(asyncResponse, topicName, authoritative));",
          "4673:         }",
          "4675:                 .thenCompose(__ -> pulsar().getBrokerService().fetchPartitionedTopicMetadataAsync(topicName))",
          "4676:                 .thenCompose(metadata -> {",
          "4677:                     if (metadata.partitions > 0) {",
          "",
          "[Removed Lines]",
          "4671:             return validateTopicOperationAsync(topicName, TopicOperation.TRIM_TOPIC).thenCompose((x)",
          "4674:         return validateTopicOperationAsync(topicName, TopicOperation.TRIM_TOPIC)",
          "",
          "[Added Lines]",
          "4669:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.TRIM_TOPIC);",
          "4671:             return future.thenCompose((x)",
          "4674:         return future",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5353:     }",
          "5355:     protected CompletableFuture<SchemaCompatibilityStrategy> internalGetSchemaCompatibilityStrategy(boolean applied) {",
          "5356:         if (applied) {",
          "5358:         }",
          "5362:                 .thenCompose(n -> getTopicPoliciesAsyncWithRetry(topicName).thenApply(op -> {",
          "5363:                     if (!op.isPresent()) {",
          "5364:                         return null;",
          "",
          "[Removed Lines]",
          "5357:             return getSchemaCompatibilityStrategyAsync();",
          "5359:         return validateTopicPolicyOperationAsync(topicName,",
          "5360:                 PolicyName.SCHEMA_COMPATIBILITY_STRATEGY,",
          "5361:                 PolicyOperation.READ)",
          "",
          "[Added Lines]",
          "5356:         CompletableFuture<Void> future = validateTopicPolicyOperationAsync(topicName,",
          "5357:                 PolicyName.SCHEMA_COMPATIBILITY_STRATEGY, PolicyOperation.READ);",
          "5359:             return future.thenCompose(__ -> getSchemaCompatibilityStrategyAsync());",
          "5361:         return future",
          "",
          "---------------"
        ],
        "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java": [
          "File: pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java -> pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.pulsar.broker.admin;",
          "22: import io.jsonwebtoken.Jwts;",
          "23: import lombok.Cleanup;",
          "24: import lombok.SneakyThrows;",
          "25: import org.apache.pulsar.client.admin.PulsarAdmin;",
          "26: import org.apache.pulsar.client.admin.PulsarAdminException;",
          "27: import org.apache.pulsar.client.impl.auth.AuthenticationToken;",
          "28: import org.apache.pulsar.common.policies.data.AuthAction;",
          "29: import org.apache.pulsar.common.policies.data.TenantInfo;",
          "30: import org.apache.pulsar.security.MockedPulsarStandalone;",
          "31: import org.testng.Assert;",
          "32: import org.testng.annotations.AfterClass;",
          "33: import org.testng.annotations.BeforeClass;",
          "34: import org.testng.annotations.Test;",
          "35: import java.util.HashMap;",
          "36: import java.util.Map;",
          "37: import java.util.Set;",
          "38: import java.util.UUID;",
          "40: @Test(groups = \"broker-admin\")",
          "41: public class NamespaceAuthZTest extends MockedPulsarStandalone {",
          "43:     private PulsarAdmin superUserAdmin;",
          "45:     private PulsarAdmin tenantManagerAdmin;",
          "47:     private static final String TENANT_ADMIN_SUBJECT =  UUID.randomUUID().toString();",
          "48:     private static final String TENANT_ADMIN_TOKEN = Jwts.builder()",
          "49:             .claim(\"sub\", TENANT_ADMIN_SUBJECT).signWith(SECRET_KEY).compact();",
          "51:     @SneakyThrows",
          "52:     @BeforeClass",
          "53:     public void before() {",
          "54:         configureTokenAuthentication();",
          "55:         configureDefaultAuthorization();",
          "56:         start();",
          "57:         this.superUserAdmin =PulsarAdmin.builder()",
          "58:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
          "59:                 .authentication(new AuthenticationToken(SUPER_USER_TOKEN))",
          "60:                 .build();",
          "61:         final TenantInfo tenantInfo = superUserAdmin.tenants().getTenantInfo(\"public\");",
          "62:         tenantInfo.getAdminRoles().add(TENANT_ADMIN_SUBJECT);",
          "63:         superUserAdmin.tenants().updateTenant(\"public\", tenantInfo);",
          "64:         this.tenantManagerAdmin = PulsarAdmin.builder()",
          "65:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
          "66:                 .authentication(new AuthenticationToken(TENANT_ADMIN_TOKEN))",
          "67:                 .build();",
          "68:     }",
          "71:     @SneakyThrows",
          "72:     @AfterClass",
          "73:     public void after() {",
          "74:         if (superUserAdmin != null) {",
          "75:             superUserAdmin.close();",
          "76:         }",
          "77:         if (tenantManagerAdmin != null) {",
          "78:             tenantManagerAdmin.close();",
          "79:         }",
          "80:         close();",
          "81:     }",
          "84:     @SneakyThrows",
          "85:     @Test",
          "86:     public void testProperties() {",
          "87:         final String random = UUID.randomUUID().toString();",
          "88:         final String namespace = \"public/default\";",
          "89:         final String topic = \"persistent://public/default/\" + random;",
          "90:         final String subject =  UUID.randomUUID().toString();",
          "91:         final String token = Jwts.builder()",
          "92:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "93:         superUserAdmin.topics().createNonPartitionedTopic(topic);",
          "95:         @Cleanup",
          "96:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "97:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
          "98:                 .authentication(new AuthenticationToken(token))",
          "99:                 .build();",
          "101:         Map<String, String> properties = new HashMap<>();",
          "102:         properties.put(\"key1\", \"value1\");",
          "103:         superUserAdmin.namespaces().setProperties(namespace, properties);",
          "104:         superUserAdmin.namespaces().setProperty(namespace, \"key2\", \"value2\");",
          "105:         superUserAdmin.namespaces().getProperties(namespace);",
          "106:         superUserAdmin.namespaces().getProperty(namespace, \"key2\");",
          "107:         superUserAdmin.namespaces().removeProperty(namespace, \"key2\");",
          "108:         superUserAdmin.namespaces().clearProperties(namespace);",
          "111:         tenantManagerAdmin.namespaces().setProperties(namespace, properties);",
          "112:         tenantManagerAdmin.namespaces().setProperty(namespace, \"key2\", \"value2\");",
          "113:         tenantManagerAdmin.namespaces().getProperties(namespace);",
          "114:         tenantManagerAdmin.namespaces().getProperty(namespace, \"key2\");",
          "115:         tenantManagerAdmin.namespaces().removeProperty(namespace, \"key2\");",
          "116:         tenantManagerAdmin.namespaces().clearProperties(namespace);",
          "119:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "120:                 () -> subAdmin.namespaces().setProperties(namespace, properties));",
          "122:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "123:                 () -> subAdmin.namespaces().setProperty(namespace, \"key2\", \"value2\"));",
          "125:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "126:                 () -> subAdmin.namespaces().getProperties(namespace));",
          "128:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "129:                 () -> subAdmin.namespaces().getProperty(namespace, \"key2\"));",
          "132:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "133:                 () -> subAdmin.namespaces().removeProperty(namespace, \"key2\"));",
          "135:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "136:                 () -> subAdmin.namespaces().clearProperties(namespace));",
          "138:         for (AuthAction action : AuthAction.values()) {",
          "139:             superUserAdmin.namespaces().grantPermissionOnNamespace(namespace, subject, Set.of(action));",
          "140:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "141:                     () -> subAdmin.namespaces().setProperties(namespace, properties));",
          "143:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "144:                     () -> subAdmin.namespaces().setProperty(namespace, \"key2\", \"value2\"));",
          "146:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "147:                     () -> subAdmin.namespaces().getProperties(namespace));",
          "149:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "150:                     () -> subAdmin.namespaces().getProperty(namespace, \"key2\"));",
          "153:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "154:                     () -> subAdmin.namespaces().removeProperty(namespace, \"key2\"));",
          "156:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "157:                     () -> subAdmin.namespaces().clearProperties(namespace));",
          "159:             superUserAdmin.namespaces().revokePermissionsOnNamespace(namespace, subject);",
          "160:         }",
          "161:         superUserAdmin.topics().delete(topic, true);",
          "162:     }",
          "163: }",
          "",
          "---------------"
        ],
        "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java": [
          "File: pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java -> pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.pulsar.broker.admin;",
          "22: import io.jsonwebtoken.Jwts;",
          "23: import lombok.Cleanup;",
          "24: import lombok.SneakyThrows;",
          "25: import org.apache.pulsar.client.admin.PulsarAdmin;",
          "26: import org.apache.pulsar.client.admin.PulsarAdminException;",
          "27: import org.apache.pulsar.client.api.MessageId;",
          "28: import org.apache.pulsar.client.impl.auth.AuthenticationToken;",
          "29: import org.apache.pulsar.common.naming.TopicName;",
          "30: import org.apache.pulsar.common.policies.data.AuthAction;",
          "31: import org.apache.pulsar.common.policies.data.TenantInfo;",
          "32: import org.apache.pulsar.security.MockedPulsarStandalone;",
          "33: import org.testng.Assert;",
          "34: import org.testng.annotations.AfterClass;",
          "35: import org.testng.annotations.BeforeClass;",
          "36: import org.testng.annotations.Test;",
          "37: import java.util.HashMap;",
          "38: import java.util.Map;",
          "39: import java.util.Optional;",
          "40: import java.util.Set;",
          "41: import java.util.UUID;",
          "42: import java.util.concurrent.atomic.AtomicInteger;",
          "44: @Test(groups = \"broker-admin\")",
          "45: public class TopicAuthZTest extends MockedPulsarStandalone {",
          "47:     private PulsarAdmin superUserAdmin;",
          "49:     private PulsarAdmin tenantManagerAdmin;",
          "51:     private static final String TENANT_ADMIN_SUBJECT =  UUID.randomUUID().toString();",
          "52:     private static final String TENANT_ADMIN_TOKEN = Jwts.builder()",
          "53:             .claim(\"sub\", TENANT_ADMIN_SUBJECT).signWith(SECRET_KEY).compact();",
          "55:     @SneakyThrows",
          "56:     @BeforeClass",
          "57:     public void before() {",
          "58:         configureTokenAuthentication();",
          "59:         configureDefaultAuthorization();",
          "60:         start();",
          "61:         this.superUserAdmin =PulsarAdmin.builder()",
          "62:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
          "63:                 .authentication(new AuthenticationToken(SUPER_USER_TOKEN))",
          "64:                 .build();",
          "65:         final TenantInfo tenantInfo = superUserAdmin.tenants().getTenantInfo(\"public\");",
          "66:         tenantInfo.getAdminRoles().add(TENANT_ADMIN_SUBJECT);",
          "67:         superUserAdmin.tenants().updateTenant(\"public\", tenantInfo);",
          "68:         this.tenantManagerAdmin = PulsarAdmin.builder()",
          "69:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
          "70:                 .authentication(new AuthenticationToken(TENANT_ADMIN_TOKEN))",
          "71:                 .build();",
          "72:     }",
          "75:     @SneakyThrows",
          "76:     @AfterClass",
          "77:     public void after() {",
          "78:         if (superUserAdmin != null) {",
          "79:             superUserAdmin.close();",
          "80:         }",
          "81:         if (tenantManagerAdmin != null) {",
          "82:             tenantManagerAdmin.close();",
          "83:         }",
          "84:         close();",
          "85:     }",
          "88:     @SneakyThrows",
          "89:     @Test",
          "90:     public void testUnloadAndCompactAndTrim() {",
          "91:         final String random = UUID.randomUUID().toString();",
          "92:         final String topic = \"persistent://public/default/\" + random;",
          "93:         final String subject =  UUID.randomUUID().toString();",
          "94:         final String token = Jwts.builder()",
          "95:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "96:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
          "98:         @Cleanup",
          "99:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "100:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
          "101:                 .authentication(new AuthenticationToken(token))",
          "102:                 .build();",
          "104:         superUserAdmin.topics().unload(topic);",
          "105:         superUserAdmin.topics().triggerCompaction(topic);",
          "106:         superUserAdmin.topics().trimTopic(TopicName.get(topic).getPartition(0).getLocalName());",
          "107:         superUserAdmin.topicPolicies().getSchemaCompatibilityStrategy(topic, false);",
          "110:         tenantManagerAdmin.topics().unload(topic);",
          "111:         tenantManagerAdmin.topics().triggerCompaction(topic);",
          "112:         tenantManagerAdmin.topics().trimTopic(TopicName.get(topic).getPartition(0).getLocalName());",
          "113:         tenantManagerAdmin.topicPolicies().getSchemaCompatibilityStrategy(topic, false);",
          "116:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "117:                 () -> subAdmin.topics().unload(topic));",
          "119:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "120:                 () -> subAdmin.topics().triggerCompaction(topic));",
          "122:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "123:                 () -> subAdmin.topics().trimTopic(TopicName.get(topic).getPartition(0).getLocalName()));",
          "125:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "126:                 () -> subAdmin.topicPolicies().getSchemaCompatibilityStrategy(topic, false));",
          "129:         for (AuthAction action : AuthAction.values()) {",
          "130:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
          "132:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "133:                     () -> subAdmin.topics().unload(topic));",
          "135:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "136:                     () -> subAdmin.topics().triggerCompaction(topic));",
          "138:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "139:                     () -> subAdmin.topics().trimTopic(topic));",
          "141:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "142:                     () -> subAdmin.topicPolicies().getSchemaCompatibilityStrategy(topic, false));",
          "144:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "145:         }",
          "146:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
          "147:     }",
          "149:     @Test",
          "150:     @SneakyThrows",
          "151:     public void testGetManagedLedgerInfo() {",
          "152:         final String random = UUID.randomUUID().toString();",
          "153:         final String topic = \"persistent://public/default/\" + random;",
          "154:         final String subject =  UUID.randomUUID().toString();",
          "155:         final String token = Jwts.builder()",
          "156:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "157:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
          "159:         @Cleanup",
          "160:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "161:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
          "162:                 .authentication(new AuthenticationToken(token))",
          "163:                 .build();",
          "165:         superUserAdmin.topics().getInternalInfo(topic);",
          "168:         tenantManagerAdmin.topics().getInternalInfo(topic);",
          "171:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "172:                 () -> subAdmin.topics().getInternalInfo(topic));",
          "174:         for (AuthAction action : AuthAction.values()) {",
          "175:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
          "176:             if (action == AuthAction.produce || action == AuthAction.consume) {",
          "177:                 subAdmin.topics().getInternalInfo(topic);",
          "178:             } else {",
          "179:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "180:                         () -> subAdmin.topics().getInternalInfo(topic));",
          "181:             }",
          "182:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "183:         }",
          "184:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
          "185:     }",
          "187:     @Test",
          "188:     @SneakyThrows",
          "189:     public void testGetPartitionedStatsAndInternalStats() {",
          "190:         final String random = UUID.randomUUID().toString();",
          "191:         final String topic = \"persistent://public/default/\" + random;",
          "192:         final String subject =  UUID.randomUUID().toString();",
          "193:         final String token = Jwts.builder()",
          "194:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "195:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
          "197:         @Cleanup",
          "198:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "199:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
          "200:                 .authentication(new AuthenticationToken(token))",
          "201:                 .build();",
          "203:         superUserAdmin.topics().getPartitionedStats(topic, false);",
          "204:         superUserAdmin.topics().getPartitionedInternalStats(topic);",
          "207:         tenantManagerAdmin.topics().getPartitionedStats(topic, false);",
          "208:         tenantManagerAdmin.topics().getPartitionedInternalStats(topic);",
          "211:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "212:                 () -> subAdmin.topics().getPartitionedStats(topic, false));",
          "214:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "215:                 () -> subAdmin.topics().getPartitionedInternalStats(topic));",
          "217:         for (AuthAction action : AuthAction.values()) {",
          "218:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
          "219:             if (action == AuthAction.produce || action == AuthAction.consume) {",
          "220:                 subAdmin.topics().getPartitionedStats(topic, false);",
          "221:                 subAdmin.topics().getPartitionedInternalStats(topic);",
          "222:             } else {",
          "223:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "224:                         () -> subAdmin.topics().getPartitionedStats(topic, false));",
          "226:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "227:                         () -> subAdmin.topics().getPartitionedInternalStats(topic));",
          "228:             }",
          "229:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "230:         }",
          "231:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
          "232:     }",
          "234:     @Test",
          "235:     @SneakyThrows",
          "236:     public void testCreateSubscriptionAndUpdateSubscriptionPropertiesAndAnalyzeSubscriptionBacklog() {",
          "237:         final String random = UUID.randomUUID().toString();",
          "238:         final String topic = \"persistent://public/default/\" + random;",
          "239:         final String subject =  UUID.randomUUID().toString();",
          "240:         final String token = Jwts.builder()",
          "241:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "242:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
          "243:         AtomicInteger suffix = new AtomicInteger(1);",
          "244:         @Cleanup",
          "245:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "246:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
          "247:                 .authentication(new AuthenticationToken(token))",
          "248:                 .build();",
          "250:         superUserAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest);",
          "253:         tenantManagerAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest);",
          "256:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "257:                 () -> subAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest));",
          "259:         for (AuthAction action : AuthAction.values()) {",
          "260:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
          "261:             if (action == AuthAction.consume) {",
          "262:                 subAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest);",
          "263:             } else {",
          "264:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "265:                         () -> subAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest));",
          "266:             }",
          "267:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "268:         }",
          "270:         Map<String, String> properties = new HashMap<>();",
          "271:         superUserAdmin.topics().createSubscription(topic, \"test-sub\", MessageId.earliest);",
          "273:         superUserAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\" , properties);",
          "274:         superUserAdmin.topics().getSubscriptionProperties(topic, \"test-sub\");",
          "275:         superUserAdmin.topics().analyzeSubscriptionBacklog(TopicName.get(topic).getPartition(0).getLocalName(), \"test-sub\", Optional.empty());",
          "278:         tenantManagerAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\" , properties);",
          "279:         tenantManagerAdmin.topics().getSubscriptionProperties(topic, \"test-sub\");",
          "280:         tenantManagerAdmin.topics().analyzeSubscriptionBacklog(TopicName.get(topic).getPartition(0).getLocalName(), \"test-sub\", Optional.empty());",
          "283:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "284:                 () -> subAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\", properties));",
          "286:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "287:                 () -> subAdmin.topics().getSubscriptionProperties(topic, \"test-sub\"));",
          "289:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "290:                 () -> subAdmin.topics().analyzeSubscriptionBacklog(TopicName.get(topic).getPartition(0).getLocalName(), \"test-sub\", Optional.empty()));",
          "292:         for (AuthAction action : AuthAction.values()) {",
          "293:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
          "294:             if (action == AuthAction.consume) {",
          "295:                 subAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\", properties);",
          "296:                 subAdmin.topics().getSubscriptionProperties(topic, \"test-sub\");",
          "297:                 subAdmin.topics().analyzeSubscriptionBacklog(TopicName.get(topic).getPartition(0).getLocalName(), \"test-sub\", Optional.empty());",
          "298:             } else {",
          "299:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "300:                         () -> subAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\", properties));",
          "302:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "303:                         () -> subAdmin.topics().getSubscriptionProperties(topic, \"test-sub\"));",
          "305:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "306:                         () -> subAdmin.topics().analyzeSubscriptionBacklog(TopicName.get(topic).getPartition(0).getLocalName(), \"test-sub\", Optional.empty()));",
          "307:             }",
          "308:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "309:         }",
          "310:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
          "311:     }",
          "313:     @Test",
          "314:     @SneakyThrows",
          "315:     public void testCreateMissingPartition() {",
          "316:         final String random = UUID.randomUUID().toString();",
          "317:         final String topic = \"persistent://public/default/\" + random;",
          "318:         final String subject =  UUID.randomUUID().toString();",
          "319:         final String token = Jwts.builder()",
          "320:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "321:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
          "322:         AtomicInteger suffix = new AtomicInteger(1);",
          "323:         @Cleanup",
          "324:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "325:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
          "326:                 .authentication(new AuthenticationToken(token))",
          "327:                 .build();",
          "329:         superUserAdmin.topics().createMissedPartitions(topic);",
          "332:         tenantManagerAdmin.topics().createMissedPartitions(topic);",
          "334:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "335:                 () -> subAdmin.topics().createMissedPartitions(topic));",
          "337:         for (AuthAction action : AuthAction.values()) {",
          "338:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
          "339:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "340:                     () -> subAdmin.topics().createMissedPartitions(topic));",
          "341:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "342:         }",
          "343:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
          "344:     }",
          "345: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd34d4ab9c5aa7e0dca961d5a8badae4613fbe8e",
      "candidate_info": {
        "commit_hash": "fd34d4ab9c5aa7e0dca961d5a8badae4613fbe8e",
        "repo": "apache/pulsar",
        "commit_url": "https://github.com/apache/pulsar/commit/fd34d4ab9c5aa7e0dca961d5a8badae4613fbe8e",
        "files": [
          "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java",
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java"
        ],
        "message": "[improve][broker] Add fine-grain authorization to ns/topic management endpoints (#22305)",
        "before_after_code_files": [
          "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java||pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java",
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
          "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
          "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java||pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java",
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
            "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
            "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java"
          ],
          "candidate": [
            "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java||pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java",
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
            "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
            "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
            "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java"
          ]
        }
      },
      "candidate_diff": {
        "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java||pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java": [
          "File: pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java -> pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "597:                             case COMPACT:",
          "598:                             case OFFLOAD:",
          "599:                             case UNLOAD:",
          "600:                             case DELETE_METADATA:",
          "601:                             case UPDATE_METADATA:",
          "602:                             case ADD_BUNDLE_RANGE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "600:                             case TRIM_TOPIC:",
          "",
          "---------------"
        ],
        "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java": [
          "File: pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java -> pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: import org.apache.pulsar.common.policies.data.OffloadPoliciesImpl;",
          "63: import org.apache.pulsar.common.policies.data.PersistencePolicies;",
          "64: import org.apache.pulsar.common.policies.data.Policies;",
          "67: import org.apache.pulsar.common.policies.data.RetentionPolicies;",
          "68: import org.apache.pulsar.common.policies.data.SchemaCompatibilityStrategy;",
          "69: import org.apache.pulsar.common.policies.data.SubscribeRate;",
          "",
          "[Removed Lines]",
          "65: import org.apache.pulsar.common.policies.data.PolicyName;",
          "66: import org.apache.pulsar.common.policies.data.PolicyOperation;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "714:     }",
          "716:     protected CompletableFuture<SchemaCompatibilityStrategy> getSchemaCompatibilityStrategyAsync() {",
          "721:                     if (ex != null) {",
          "722:                         log.error(\"[{}] Failed to get schema compatibility strategy of topic {} {}\",",
          "723:                                 clientAppId(), topicName, ex);",
          "",
          "[Removed Lines]",
          "717:         return validateTopicPolicyOperationAsync(topicName,",
          "718:                 PolicyName.SCHEMA_COMPATIBILITY_STRATEGY,",
          "719:                 PolicyOperation.READ)",
          "720:                 .thenCompose((__) -> getSchemaCompatibilityStrategyAsyncWithoutAuth()).whenComplete((__, ex) -> {",
          "",
          "[Added Lines]",
          "715:         return getSchemaCompatibilityStrategyAsyncWithoutAuth().whenComplete((__, ex) -> {",
          "",
          "---------------"
        ],
        "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java": [
          "File: pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java -> pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2339:    }",
          "2341:    protected void internalSetProperty(String key, String value, AsyncResponse asyncResponse) {",
          "2357:    }",
          "2359:    protected void internalSetProperties(Map<String, String> properties, AsyncResponse asyncResponse) {",
          "2375:    }",
          "2377:    protected void internalGetProperty(String key, AsyncResponse asyncResponse) {",
          "2387:    }",
          "2389:    protected void internalGetProperties(AsyncResponse asyncResponse) {",
          "2398:    }",
          "2400:    protected void internalRemoveProperty(String key, AsyncResponse asyncResponse) {",
          "2403:        AtomicReference<String> oldVal = new AtomicReference<>(null);",
          "2418:    }",
          "2420:    protected void internalClearProperties(AsyncResponse asyncResponse) {",
          "2422:        AtomicReference<Integer> clearedCount = new AtomicReference<>(0);",
          "2438:    }",
          "2440:    private CompletableFuture<Void> updatePoliciesAsync(NamespaceName ns, Function<Policies, Policies> updateFunction) {",
          "",
          "[Removed Lines]",
          "2342:        validatePoliciesReadOnlyAccess();",
          "2343:        updatePoliciesAsync(namespaceName, policies -> {",
          "2344:            policies.properties.put(key, value);",
          "2345:            return policies;",
          "2346:        }).thenAccept(v -> {",
          "2347:            log.info(\"[{}] Successfully set property for key {} on namespace {}\", clientAppId(), key,",
          "2348:                    namespaceName);",
          "2349:            asyncResponse.resume(Response.noContent().build());",
          "2350:        }).exceptionally(ex -> {",
          "2351:            Throwable cause = ex.getCause();",
          "2352:            log.error(\"[{}] Failed to set property for key {} on namespace {}\", clientAppId(), key,",
          "2353:                    namespaceName, cause);",
          "2354:            asyncResponse.resume(cause);",
          "2355:            return null;",
          "2356:        });",
          "2360:        validatePoliciesReadOnlyAccess();",
          "2361:        updatePoliciesAsync(namespaceName, policies -> {",
          "2362:            policies.properties.putAll(properties);",
          "2363:            return policies;",
          "2364:        }).thenAccept(v -> {",
          "2365:            log.info(\"[{}] Successfully set {} properties on namespace {}\", clientAppId(), properties.size(),",
          "2366:                    namespaceName);",
          "2367:            asyncResponse.resume(Response.noContent().build());",
          "2368:        }).exceptionally(ex -> {",
          "2369:            Throwable cause = ex.getCause();",
          "2370:            log.error(\"[{}] Failed to set {} properties on namespace {}\", clientAppId(), properties.size(),",
          "2371:                    namespaceName, cause);",
          "2372:            asyncResponse.resume(cause);",
          "2373:            return null;",
          "2374:        });",
          "2378:         getNamespacePoliciesAsync(namespaceName).thenAccept(policies -> {",
          "2379:             asyncResponse.resume(policies.properties.get(key));",
          "2380:         }).exceptionally(ex -> {",
          "2381:             Throwable cause = ex.getCause();",
          "2382:             log.error(\"[{}] Failed to get property for key {} of namespace {}\", clientAppId(), key,",
          "2383:                     namespaceName, cause);",
          "2384:             asyncResponse.resume(cause);",
          "2385:             return null;",
          "2386:         });",
          "2390:        getNamespacePoliciesAsync(namespaceName).thenAccept(policies -> {",
          "2391:            asyncResponse.resume(policies.properties);",
          "2392:        }).exceptionally(ex -> {",
          "2393:            Throwable cause = ex.getCause();",
          "2394:            log.error(\"[{}] Failed to get properties of namespace {}\", clientAppId(), namespaceName, cause);",
          "2395:            asyncResponse.resume(cause);",
          "2396:            return null;",
          "2397:        });",
          "2401:        validatePoliciesReadOnlyAccess();",
          "2404:        updatePoliciesAsync(namespaceName, policies -> {",
          "2405:            oldVal.set(policies.properties.remove(key));",
          "2406:            return policies;",
          "2407:        }).thenAccept(v -> {",
          "2408:            asyncResponse.resume(oldVal.get());",
          "2409:            log.info(\"[{}] Successfully remove property for key {} on namespace {}\", clientAppId(), key,",
          "2410:                    namespaceName);",
          "2411:        }).exceptionally(ex -> {",
          "2412:            Throwable cause = ex.getCause();",
          "2413:            log.error(\"[{}] Failed to remove property for key {} on namespace {}\", clientAppId(), key,",
          "2414:                    namespaceName, cause);",
          "2415:            asyncResponse.resume(cause);",
          "2416:           return null;",
          "2417:        });",
          "2421:        validatePoliciesReadOnlyAccess();",
          "2423:        updatePoliciesAsync(namespaceName, policies -> {",
          "2424:            clearedCount.set(policies.properties.size());",
          "2425:            policies.properties.clear();",
          "2426:            return policies;",
          "2427:        }).thenAccept(v -> {",
          "2428:            asyncResponse.resume(Response.noContent().build());",
          "2429:            log.info(\"[{}] Successfully clear {} properties on namespace {}\", clientAppId(), clearedCount.get(),",
          "2430:                    namespaceName);",
          "2431:        }).exceptionally(ex -> {",
          "2432:            Throwable cause = ex.getCause();",
          "2433:            log.error(\"[{}] Failed to clear {} properties on namespace {}\", clientAppId(), clearedCount.get(),",
          "2434:                    namespaceName, cause);",
          "2435:            asyncResponse.resume(cause);",
          "2436:            return null;",
          "2437:        });",
          "",
          "[Added Lines]",
          "2342:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2343:                .thenCompose(__ -> validatePoliciesReadOnlyAccessAsync())",
          "2344:                .thenCompose(__ -> updatePoliciesAsync(namespaceName, policies -> {",
          "2345:                    policies.properties.put(key, value);",
          "2346:                    return policies;",
          "2347:                }))",
          "2348:                .thenAccept(v -> {",
          "2349:                    log.info(\"[{}] Successfully set property for key {} on namespace {}\", clientAppId(), key,",
          "2350:                            namespaceName);",
          "2351:                    asyncResponse.resume(Response.noContent().build());",
          "2352:                }).exceptionally(ex -> {",
          "2353:                    Throwable cause = ex.getCause();",
          "2354:                    log.error(\"[{}] Failed to set property for key {} on namespace {}\", clientAppId(), key,",
          "2355:                            namespaceName, cause);",
          "2356:                    asyncResponse.resume(cause);",
          "2357:                    return null;",
          "2358:                });",
          "2362:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2363:                .thenCompose(__ -> validatePoliciesReadOnlyAccessAsync())",
          "2364:                .thenCompose(__ -> updatePoliciesAsync(namespaceName, policies -> {",
          "2365:                    policies.properties.putAll(properties);",
          "2366:                    return policies;",
          "2367:                }))",
          "2368:                .thenAccept(v -> {",
          "2369:                    log.info(\"[{}] Successfully set {} properties on namespace {}\", clientAppId(), properties.size(),",
          "2370:                            namespaceName);",
          "2371:                    asyncResponse.resume(Response.noContent().build());",
          "2372:                }).exceptionally(ex -> {",
          "2373:                    Throwable cause = ex.getCause();",
          "2374:                    log.error(\"[{}] Failed to set {} properties on namespace {}\", clientAppId(), properties.size(),",
          "2375:                            namespaceName, cause);",
          "2376:                    asyncResponse.resume(cause);",
          "2377:                    return null;",
          "2378:                });",
          "2382:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2383:                .thenCompose(__ -> getNamespacePoliciesAsync(namespaceName))",
          "2384:                .thenAccept(policies -> asyncResponse.resume(policies.properties.get(key)))",
          "2385:                .exceptionally(ex -> {",
          "2386:                    Throwable cause = ex.getCause();",
          "2387:                    log.error(\"[{}] Failed to get property for key {} of namespace {}\", clientAppId(), key,",
          "2388:                            namespaceName, cause);",
          "2389:                    asyncResponse.resume(cause);",
          "2390:                    return null;",
          "2391:                });",
          "2395:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2396:                .thenCompose(__ -> getNamespacePoliciesAsync(namespaceName))",
          "2397:                .thenAccept(policies -> asyncResponse.resume(policies.properties))",
          "2398:                .exceptionally(ex -> {",
          "2399:                    Throwable cause = ex.getCause();",
          "2400:                    log.error(\"[{}] Failed to get properties of namespace {}\", clientAppId(), namespaceName, cause);",
          "2401:                    asyncResponse.resume(cause);",
          "2402:                    return null;",
          "2403:                });",
          "2408:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2409:                .thenCompose(__ -> validatePoliciesReadOnlyAccessAsync())",
          "2410:                .thenCompose(__ -> updatePoliciesAsync(namespaceName, policies -> {",
          "2411:                    oldVal.set(policies.properties.remove(key));",
          "2412:                    return policies;",
          "2413:                })).thenAccept(v -> {",
          "2414:                    asyncResponse.resume(oldVal.get());",
          "2415:                    log.info(\"[{}] Successfully remove property for key {} on namespace {}\", clientAppId(), key,",
          "2416:                            namespaceName);",
          "2417:                }).exceptionally(ex -> {",
          "2418:                    Throwable cause = ex.getCause();",
          "2419:                    log.error(\"[{}] Failed to remove property for key {} on namespace {}\", clientAppId(), key,",
          "2420:                            namespaceName, cause);",
          "2421:                    asyncResponse.resume(cause);",
          "2422:                    return null;",
          "2423:                });",
          "2428:        validateAdminAccessForTenantAsync(namespaceName.getTenant())",
          "2429:                .thenCompose(__ -> validatePoliciesReadOnlyAccessAsync())",
          "2430:                .thenCompose(__ -> updatePoliciesAsync(namespaceName, policies -> {",
          "2431:                    clearedCount.set(policies.properties.size());",
          "2432:                    policies.properties.clear();",
          "2433:                    return policies;",
          "2434:                }))",
          "2435:                .thenAccept(v -> {",
          "2436:                    asyncResponse.resume(Response.noContent().build());",
          "2437:                    log.info(\"[{}] Successfully clear {} properties on namespace {}\", clientAppId(), clearedCount.get(),",
          "2438:                            namespaceName);",
          "2439:                }).exceptionally(ex -> {",
          "2440:                    Throwable cause = ex.getCause();",
          "2441:                    log.error(\"[{}] Failed to clear {} properties on namespace {}\", clientAppId(), clearedCount.get(),",
          "2442:                            namespaceName, cause);",
          "2443:                    asyncResponse.resume(cause);",
          "2444:                    return null;",
          "2445:                });",
          "",
          "---------------"
        ],
        "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java||pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java": [
          "File: pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java -> pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "488:     protected void internalCreateMissedPartitions(AsyncResponse asyncResponse) {",
          "489:         getPartitionedTopicMetadataAsync(topicName, false, false).thenAccept(metadata -> {",
          "490:             if (metadata != null) {",
          "492:                     asyncResponse.resume(Response.noContent().build());",
          "493:                 }).exceptionally(e -> {",
          "494:                     log.error(\"[{}] Failed to create partitions for topic {}\", clientAppId(), topicName);",
          "",
          "[Removed Lines]",
          "491:                 tryCreatePartitionsAsync(metadata.partitions).thenAccept(v -> {",
          "",
          "[Added Lines]",
          "491:                 CompletableFuture<Void> future = validateNamespaceOperationAsync(topicName.getNamespaceObject(),",
          "492:                         NamespaceOperation.CREATE_TOPIC);",
          "493:                 future.thenCompose(__ -> tryCreatePartitionsAsync(metadata.partitions)).thenAccept(v -> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "823:     protected void internalUnloadTopic(AsyncResponse asyncResponse, boolean authoritative) {",
          "824:         log.info(\"[{}] Unloading topic {}\", clientAppId(), topicName);",
          "833:            if (topicName.isPartitioned()) {",
          "834:                if (isTransactionCoordinatorAssign(topicName)) {",
          "",
          "[Removed Lines]",
          "825:         CompletableFuture<Void> future;",
          "826:         if (topicName.isGlobal()) {",
          "827:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "828:         } else {",
          "829:             future = CompletableFuture.completedFuture(null);",
          "830:         }",
          "831:        future.thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "827:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.UNLOAD);",
          "828:         future.thenCompose(__ -> {",
          "829:             if (topicName.isGlobal()) {",
          "830:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "831:             }",
          "832:             return CompletableFuture.completedFuture(null);",
          "833:         }).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1049:     private void internalUnloadNonPartitionedTopicAsync(AsyncResponse asyncResponse, boolean authoritative) {",
          "1050:         validateTopicOwnershipAsync(topicName, authoritative)",
          "1052:                         .thenCompose(__ -> getTopicReferenceAsync(topicName))",
          "1053:                         .thenCompose(topic -> topic.close(false))",
          "1054:                         .thenRun(() -> {",
          "1055:                             log.info(\"[{}] Successfully unloaded topic {}\", clientAppId(), topicName);",
          "1056:                             asyncResponse.resume(Response.noContent().build());",
          "1058:                 .exceptionally(ex -> {",
          "1060:                     if (!isNot307And404Exception(ex)) {",
          "",
          "[Removed Lines]",
          "1051:                 .thenCompose(unused -> validateTopicOperationAsync(topicName, TopicOperation.UNLOAD)",
          "1057:                         }))",
          "",
          "[Added Lines]",
          "1058:                         })",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1068:     private void internalUnloadTransactionCoordinatorAsync(AsyncResponse asyncResponse, boolean authoritative) {",
          "1069:         validateTopicOwnershipAsync(topicName, authoritative)",
          "1080:                 .exceptionally(ex -> {",
          "1082:                     if (!isNot307And404Exception(ex)) {",
          "",
          "[Removed Lines]",
          "1070:                 .thenCompose(__ -> validateTopicOperationAsync(topicName, TopicOperation.UNLOAD)",
          "1071:                         .thenCompose(v -> pulsar()",
          "1072:                                 .getTransactionMetadataStoreService()",
          "1073:                                 .removeTransactionMetadataStore(",
          "1074:                                         TransactionCoordinatorID.get(topicName.getPartitionIndex())))",
          "1075:                         .thenRun(() -> {",
          "1076:                             log.info(\"[{}] Successfully unloaded tc {}\", clientAppId(),",
          "1077:                                     topicName.getPartitionIndex());",
          "1078:                             asyncResponse.resume(Response.noContent().build());",
          "1079:                         }))",
          "",
          "[Added Lines]",
          "1071:                 .thenCompose(v -> pulsar()",
          "1072:                         .getTransactionMetadataStoreService()",
          "1073:                         .removeTransactionMetadataStore(",
          "1074:                                 TransactionCoordinatorID.get(topicName.getPartitionIndex())))",
          "1075:                 .thenRun(() -> {",
          "1076:                     log.info(\"[{}] Successfully unloaded tc {}\", clientAppId(), topicName.getPartitionIndex());",
          "1077:                     asyncResponse.resume(Response.noContent().build());",
          "1078:                 })",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1284:     }",
          "1286:     protected void internalGetManagedLedgerInfo(AsyncResponse asyncResponse, boolean authoritative) {",
          "1295:             if (topicName.isPartitioned()) {",
          "1296:                 internalGetManagedLedgerInfoForNonPartitionedTopic(asyncResponse);",
          "",
          "[Removed Lines]",
          "1287:         CompletableFuture<Void> future;",
          "1288:         if (topicName.isGlobal()) {",
          "1289:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1290:         } else {",
          "1291:             future = CompletableFuture.completedFuture(null);",
          "1292:         }",
          "1293:         future.thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "1286:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.GET_STATS);",
          "1287:         future.thenCompose(__ -> {",
          "1288:             if (topicName.isGlobal()) {",
          "1289:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1290:             }",
          "1291:             return CompletableFuture.completedFuture(null);",
          "1292:         }).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1395:     protected void internalGetPartitionedStats(AsyncResponse asyncResponse, boolean authoritative, boolean perPartition,",
          "1396:                                                GetStatsOptions getStatsOptions) {",
          "1404:                 authoritative, false)).thenAccept(partitionMetadata -> {",
          "1405:             if (partitionMetadata.partitions == 0) {",
          "1406:                 asyncResponse.resume(new RestException(Status.NOT_FOUND,",
          "",
          "[Removed Lines]",
          "1397:         CompletableFuture<Void> future;",
          "1398:         if (topicName.isGlobal()) {",
          "1399:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1400:         } else {",
          "1401:             future = CompletableFuture.completedFuture(null);",
          "1402:         }",
          "1403:         future.thenCompose(__ -> getPartitionedTopicMetadataAsync(topicName,",
          "",
          "[Added Lines]",
          "1396:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.GET_STATS);",
          "1397:         future.thenCompose(__ -> {",
          "1398:             if (topicName.isGlobal()) {",
          "1399:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1400:             }",
          "1401:             return  CompletableFuture.completedFuture(null);",
          "1402:         }).thenCompose(__ -> getPartitionedTopicMetadataAsync(topicName,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1486:     }",
          "1488:     protected void internalGetPartitionedStatsInternal(AsyncResponse asyncResponse, boolean authoritative) {",
          "1497:             if (partitionMetadata.partitions == 0) {",
          "1498:                 asyncResponse.resume(new RestException(Status.NOT_FOUND,",
          "1499:                         getPartitionedTopicNotFoundErrorMessage(topicName.toString())));",
          "",
          "[Removed Lines]",
          "1489:         CompletableFuture<Void> future;",
          "1490:         if (topicName.isGlobal()) {",
          "1491:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1492:         } else {",
          "1493:             future = CompletableFuture.completedFuture(null);",
          "1494:         }",
          "1495:         future.thenCompose(__ -> getPartitionedTopicMetadataAsync(topicName, authoritative, false))",
          "1496:                 .thenAccept(partitionMetadata -> {",
          "",
          "[Added Lines]",
          "1488:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.GET_STATS);",
          "1489:         future.thenCompose(__ -> {",
          "1490:             if (topicName.isGlobal()) {",
          "1491:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "1492:             } else {",
          "1493:                 return CompletableFuture.completedFuture(null);",
          "1494:             }",
          "1495:         }).thenCompose(__ -> getPartitionedTopicMetadataAsync(topicName, authoritative, false))",
          "1496:         .thenAccept(partitionMetadata -> {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2247:     protected void internalCreateSubscription(AsyncResponse asyncResponse, String subscriptionName,",
          "2248:             MessageIdImpl messageId, boolean authoritative, boolean replicated, Map<String, String> properties) {",
          "2256:             final MessageIdImpl targetMessageId = messageId == null ? (MessageIdImpl) MessageId.latest : messageId;",
          "2257:             log.info(\"[{}][{}] Creating subscription {} at message id {} with properties {}\", clientAppId(),",
          "2258:                     topicName, subscriptionName, targetMessageId, properties);",
          "",
          "[Removed Lines]",
          "2249:         CompletableFuture<Void> ret;",
          "2250:         if (topicName.isGlobal()) {",
          "2251:             ret = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2252:         } else {",
          "2253:             ret = CompletableFuture.completedFuture(null);",
          "2254:         }",
          "2255:         ret.thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "2249:         CompletableFuture<Void> ret = validateTopicOperationAsync(topicName, TopicOperation.SUBSCRIBE,",
          "2250:                 subscriptionName);",
          "2251:         ret.thenCompose(__ -> {",
          "2252:             if (topicName.isGlobal()) {",
          "2253:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2254:             }",
          "2255:             return CompletableFuture.completedFuture(null);",
          "2256:         }).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2411:     protected void internalUpdateSubscriptionProperties(AsyncResponse asyncResponse, String subName,",
          "2412:                                                         Map<String, String> subscriptionProperties,",
          "2413:                                                         boolean authoritative) {",
          "2422:             if (topicName.isPartitioned()) {",
          "2423:                 internalUpdateSubscriptionPropertiesForNonPartitionedTopic(asyncResponse, subName,",
          "2424:                         subscriptionProperties, authoritative);",
          "",
          "[Removed Lines]",
          "2414:         CompletableFuture<Void> future;",
          "2415:         if (topicName.isGlobal()) {",
          "2416:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2417:         } else {",
          "2418:             future = CompletableFuture.completedFuture(null);",
          "2419:         }",
          "2421:         future.thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative)).thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "2415:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.SUBSCRIBE, subName);",
          "2416:         future.thenCompose(__ -> {",
          "2417:             if (topicName.isGlobal()) {",
          "2418:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2419:             }",
          "2420:             return CompletableFuture.completedFuture(null);",
          "2421:         }).thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative)).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2490:     protected void internalAnalyzeSubscriptionBacklog(AsyncResponse asyncResponse, String subName,",
          "2491:                                                       Optional<Position> position,",
          "2492:                                                       boolean authoritative) {",
          "2501:                 .thenCompose(__ -> {",
          "2502:                     if (topicName.isPartitioned()) {",
          "2503:                         return CompletableFuture.completedFuture(null);",
          "",
          "[Removed Lines]",
          "2493:         CompletableFuture<Void> future;",
          "2494:         if (topicName.isGlobal()) {",
          "2495:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2496:         } else {",
          "2497:             future = CompletableFuture.completedFuture(null);",
          "2498:         }",
          "2500:         future.thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative))",
          "",
          "[Added Lines]",
          "2493:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.CONSUME, subName);",
          "2494:         future.thenCompose(__ -> {",
          "2495:             if (topicName.isGlobal()) {",
          "2496:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2497:             }",
          "2498:             return CompletableFuture.completedFuture(null);",
          "2499:         }).thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2530:     protected void internalGetSubscriptionProperties(AsyncResponse asyncResponse, String subName,",
          "2531:                                                         boolean authoritative) {",
          "2540:             if (topicName.isPartitioned()) {",
          "2541:                 internalGetSubscriptionPropertiesForNonPartitionedTopic(asyncResponse, subName,",
          "2542:                         authoritative);",
          "",
          "[Removed Lines]",
          "2532:         CompletableFuture<Void> future;",
          "2533:         if (topicName.isGlobal()) {",
          "2534:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2535:         } else {",
          "2536:             future = CompletableFuture.completedFuture(null);",
          "2537:         }",
          "2539:         future.thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative)).thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "2531:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.CONSUME, subName);",
          "2532:         future.thenCompose(__ -> {",
          "2533:             if (topicName.isGlobal()) {",
          "2534:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "2535:             }",
          "2536:             return CompletableFuture.completedFuture(null);",
          "2537:         }).thenCompose(__ -> validateTopicOwnershipAsync(topicName, authoritative)).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4216:     protected void internalTriggerCompaction(AsyncResponse asyncResponse, boolean authoritative) {",
          "4217:         log.info(\"[{}] Trigger compaction on topic {}\", clientAppId(), topicName);",
          "4226:             if (topicName.isPartitioned()) {",
          "4227:                 internalTriggerCompactionNonPartitionedTopic(asyncResponse, authoritative);",
          "",
          "[Removed Lines]",
          "4218:         CompletableFuture<Void> future;",
          "4219:         if (topicName.isGlobal()) {",
          "4220:             future = validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "4221:         } else {",
          "4222:             future = CompletableFuture.completedFuture(null);",
          "4223:         }",
          "4224:         future.thenAccept(__ -> {",
          "",
          "[Added Lines]",
          "4216:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.COMPACT);",
          "4217:         future.thenCompose(__ -> {",
          "4218:             if (topicName.isGlobal()) {",
          "4219:                 return validateGlobalNamespaceOwnershipAsync(namespaceName);",
          "4220:             } else {",
          "4221:                 return CompletableFuture.completedFuture(null);",
          "4222:             }",
          "4223:         }).thenAccept(__ -> {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4653:                     \"Trim on a non-persistent topic is not allowed\"));",
          "4654:             return null;",
          "4655:         }",
          "4656:         if (topicName.isPartitioned()) {",
          "4658:                     -> trimNonPartitionedTopic(asyncResponse, topicName, authoritative));",
          "4659:         }",
          "4661:                 .thenCompose(__ -> pulsar().getBrokerService().fetchPartitionedTopicMetadataAsync(topicName))",
          "4662:                 .thenCompose(metadata -> {",
          "4663:                     if (metadata.partitions > 0) {",
          "",
          "[Removed Lines]",
          "4657:             return validateTopicOperationAsync(topicName, TopicOperation.TRIM_TOPIC).thenCompose((x)",
          "4660:         return validateTopicOperationAsync(topicName, TopicOperation.TRIM_TOPIC)",
          "",
          "[Added Lines]",
          "4655:         CompletableFuture<Void> future = validateTopicOperationAsync(topicName, TopicOperation.TRIM_TOPIC);",
          "4657:             return future.thenCompose((x)",
          "4660:         return future",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5339:     }",
          "5341:     protected CompletableFuture<SchemaCompatibilityStrategy> internalGetSchemaCompatibilityStrategy(boolean applied) {",
          "5342:         if (applied) {",
          "5344:         }",
          "5348:                 .thenCompose(n -> getTopicPoliciesAsyncWithRetry(topicName).thenApply(op -> {",
          "5349:                     if (!op.isPresent()) {",
          "5350:                         return null;",
          "",
          "[Removed Lines]",
          "5343:             return getSchemaCompatibilityStrategyAsync();",
          "5345:         return validateTopicPolicyOperationAsync(topicName,",
          "5346:                 PolicyName.SCHEMA_COMPATIBILITY_STRATEGY,",
          "5347:                 PolicyOperation.READ)",
          "",
          "[Added Lines]",
          "5342:         CompletableFuture<Void> future = validateTopicPolicyOperationAsync(topicName,",
          "5343:                 PolicyName.SCHEMA_COMPATIBILITY_STRATEGY, PolicyOperation.READ);",
          "5345:             return future.thenCompose(__ -> getSchemaCompatibilityStrategyAsync());",
          "5347:         return future",
          "",
          "---------------"
        ],
        "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java": [
          "File: pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java -> pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/NamespaceAuthZTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.pulsar.broker.admin;",
          "22: import io.jsonwebtoken.Jwts;",
          "23: import lombok.Cleanup;",
          "24: import lombok.SneakyThrows;",
          "25: import org.apache.pulsar.client.admin.PulsarAdmin;",
          "26: import org.apache.pulsar.client.admin.PulsarAdminException;",
          "27: import org.apache.pulsar.client.impl.auth.AuthenticationToken;",
          "28: import org.apache.pulsar.common.policies.data.AuthAction;",
          "29: import org.apache.pulsar.common.policies.data.TenantInfo;",
          "30: import org.apache.pulsar.security.MockedPulsarStandalone;",
          "31: import org.testng.Assert;",
          "32: import org.testng.annotations.AfterClass;",
          "33: import org.testng.annotations.BeforeClass;",
          "34: import org.testng.annotations.Test;",
          "35: import java.util.HashMap;",
          "36: import java.util.Map;",
          "37: import java.util.Set;",
          "38: import java.util.UUID;",
          "40: @Test(groups = \"broker-admin\")",
          "41: public class NamespaceAuthZTest extends MockedPulsarStandalone {",
          "43:     private PulsarAdmin superUserAdmin;",
          "45:     private PulsarAdmin tenantManagerAdmin;",
          "47:     private static final String TENANT_ADMIN_SUBJECT =  UUID.randomUUID().toString();",
          "48:     private static final String TENANT_ADMIN_TOKEN = Jwts.builder()",
          "49:             .claim(\"sub\", TENANT_ADMIN_SUBJECT).signWith(SECRET_KEY).compact();",
          "51:     @SneakyThrows",
          "52:     @BeforeClass",
          "53:     public void before() {",
          "54:         configureTokenAuthentication();",
          "55:         configureDefaultAuthorization();",
          "56:         start();",
          "57:         this.superUserAdmin =PulsarAdmin.builder()",
          "58:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
          "59:                 .authentication(new AuthenticationToken(SUPER_USER_TOKEN))",
          "60:                 .build();",
          "61:         final TenantInfo tenantInfo = superUserAdmin.tenants().getTenantInfo(\"public\");",
          "62:         tenantInfo.getAdminRoles().add(TENANT_ADMIN_SUBJECT);",
          "63:         superUserAdmin.tenants().updateTenant(\"public\", tenantInfo);",
          "64:         this.tenantManagerAdmin = PulsarAdmin.builder()",
          "65:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
          "66:                 .authentication(new AuthenticationToken(TENANT_ADMIN_TOKEN))",
          "67:                 .build();",
          "68:     }",
          "71:     @SneakyThrows",
          "72:     @AfterClass",
          "73:     public void after() {",
          "74:         if (superUserAdmin != null) {",
          "75:             superUserAdmin.close();",
          "76:         }",
          "77:         if (tenantManagerAdmin != null) {",
          "78:             tenantManagerAdmin.close();",
          "79:         }",
          "80:         close();",
          "81:     }",
          "84:     @SneakyThrows",
          "85:     @Test",
          "86:     public void testProperties() {",
          "87:         final String random = UUID.randomUUID().toString();",
          "88:         final String namespace = \"public/default\";",
          "89:         final String topic = \"persistent://public/default/\" + random;",
          "90:         final String subject =  UUID.randomUUID().toString();",
          "91:         final String token = Jwts.builder()",
          "92:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "93:         superUserAdmin.topics().createNonPartitionedTopic(topic);",
          "95:         @Cleanup",
          "96:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "97:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
          "98:                 .authentication(new AuthenticationToken(token))",
          "99:                 .build();",
          "101:         Map<String, String> properties = new HashMap<>();",
          "102:         properties.put(\"key1\", \"value1\");",
          "103:         superUserAdmin.namespaces().setProperties(namespace, properties);",
          "104:         superUserAdmin.namespaces().setProperty(namespace, \"key2\", \"value2\");",
          "105:         superUserAdmin.namespaces().getProperties(namespace);",
          "106:         superUserAdmin.namespaces().getProperty(namespace, \"key2\");",
          "107:         superUserAdmin.namespaces().removeProperty(namespace, \"key2\");",
          "108:         superUserAdmin.namespaces().clearProperties(namespace);",
          "111:         tenantManagerAdmin.namespaces().setProperties(namespace, properties);",
          "112:         tenantManagerAdmin.namespaces().setProperty(namespace, \"key2\", \"value2\");",
          "113:         tenantManagerAdmin.namespaces().getProperties(namespace);",
          "114:         tenantManagerAdmin.namespaces().getProperty(namespace, \"key2\");",
          "115:         tenantManagerAdmin.namespaces().removeProperty(namespace, \"key2\");",
          "116:         tenantManagerAdmin.namespaces().clearProperties(namespace);",
          "119:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "120:                 () -> subAdmin.namespaces().setProperties(namespace, properties));",
          "122:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "123:                 () -> subAdmin.namespaces().setProperty(namespace, \"key2\", \"value2\"));",
          "125:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "126:                 () -> subAdmin.namespaces().getProperties(namespace));",
          "128:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "129:                 () -> subAdmin.namespaces().getProperty(namespace, \"key2\"));",
          "132:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "133:                 () -> subAdmin.namespaces().removeProperty(namespace, \"key2\"));",
          "135:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "136:                 () -> subAdmin.namespaces().clearProperties(namespace));",
          "138:         for (AuthAction action : AuthAction.values()) {",
          "139:             superUserAdmin.namespaces().grantPermissionOnNamespace(namespace, subject, Set.of(action));",
          "140:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "141:                     () -> subAdmin.namespaces().setProperties(namespace, properties));",
          "143:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "144:                     () -> subAdmin.namespaces().setProperty(namespace, \"key2\", \"value2\"));",
          "146:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "147:                     () -> subAdmin.namespaces().getProperties(namespace));",
          "149:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "150:                     () -> subAdmin.namespaces().getProperty(namespace, \"key2\"));",
          "153:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "154:                     () -> subAdmin.namespaces().removeProperty(namespace, \"key2\"));",
          "156:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "157:                     () -> subAdmin.namespaces().clearProperties(namespace));",
          "159:             superUserAdmin.namespaces().revokePermissionsOnNamespace(namespace, subject);",
          "160:         }",
          "161:         superUserAdmin.topics().delete(topic, true);",
          "162:     }",
          "163: }",
          "",
          "---------------"
        ],
        "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java||pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java": [
          "File: pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java -> pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicAuthZTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.pulsar.broker.admin;",
          "22: import io.jsonwebtoken.Jwts;",
          "23: import lombok.Cleanup;",
          "24: import lombok.SneakyThrows;",
          "25: import org.apache.pulsar.client.admin.PulsarAdmin;",
          "26: import org.apache.pulsar.client.admin.PulsarAdminException;",
          "27: import org.apache.pulsar.client.api.MessageId;",
          "28: import org.apache.pulsar.client.impl.auth.AuthenticationToken;",
          "29: import org.apache.pulsar.common.naming.TopicName;",
          "30: import org.apache.pulsar.common.policies.data.AuthAction;",
          "31: import org.apache.pulsar.common.policies.data.TenantInfo;",
          "32: import org.apache.pulsar.security.MockedPulsarStandalone;",
          "33: import org.testng.Assert;",
          "34: import org.testng.annotations.AfterClass;",
          "35: import org.testng.annotations.BeforeClass;",
          "36: import org.testng.annotations.Test;",
          "37: import java.util.HashMap;",
          "38: import java.util.Map;",
          "39: import java.util.Optional;",
          "40: import java.util.Set;",
          "41: import java.util.UUID;",
          "42: import java.util.concurrent.atomic.AtomicInteger;",
          "44: @Test(groups = \"broker-admin\")",
          "45: public class TopicAuthZTest extends MockedPulsarStandalone {",
          "47:     private PulsarAdmin superUserAdmin;",
          "49:     private PulsarAdmin tenantManagerAdmin;",
          "51:     private static final String TENANT_ADMIN_SUBJECT =  UUID.randomUUID().toString();",
          "52:     private static final String TENANT_ADMIN_TOKEN = Jwts.builder()",
          "53:             .claim(\"sub\", TENANT_ADMIN_SUBJECT).signWith(SECRET_KEY).compact();",
          "55:     @SneakyThrows",
          "56:     @BeforeClass",
          "57:     public void before() {",
          "58:         configureTokenAuthentication();",
          "59:         configureDefaultAuthorization();",
          "60:         start();",
          "61:         this.superUserAdmin =PulsarAdmin.builder()",
          "62:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
          "63:                 .authentication(new AuthenticationToken(SUPER_USER_TOKEN))",
          "64:                 .build();",
          "65:         final TenantInfo tenantInfo = superUserAdmin.tenants().getTenantInfo(\"public\");",
          "66:         tenantInfo.getAdminRoles().add(TENANT_ADMIN_SUBJECT);",
          "67:         superUserAdmin.tenants().updateTenant(\"public\", tenantInfo);",
          "68:         this.tenantManagerAdmin = PulsarAdmin.builder()",
          "69:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
          "70:                 .authentication(new AuthenticationToken(TENANT_ADMIN_TOKEN))",
          "71:                 .build();",
          "72:     }",
          "75:     @SneakyThrows",
          "76:     @AfterClass",
          "77:     public void after() {",
          "78:         if (superUserAdmin != null) {",
          "79:             superUserAdmin.close();",
          "80:         }",
          "81:         if (tenantManagerAdmin != null) {",
          "82:             tenantManagerAdmin.close();",
          "83:         }",
          "84:         close();",
          "85:     }",
          "88:     @SneakyThrows",
          "89:     @Test",
          "90:     public void testUnloadAndCompactAndTrim() {",
          "91:         final String random = UUID.randomUUID().toString();",
          "92:         final String topic = \"persistent://public/default/\" + random;",
          "93:         final String subject =  UUID.randomUUID().toString();",
          "94:         final String token = Jwts.builder()",
          "95:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "96:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
          "98:         @Cleanup",
          "99:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "100:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
          "101:                 .authentication(new AuthenticationToken(token))",
          "102:                 .build();",
          "104:         superUserAdmin.topics().unload(topic);",
          "105:         superUserAdmin.topics().triggerCompaction(topic);",
          "106:         superUserAdmin.topics().trimTopic(TopicName.get(topic).getPartition(0).getLocalName());",
          "107:         superUserAdmin.topicPolicies().getSchemaCompatibilityStrategy(topic, false);",
          "110:         tenantManagerAdmin.topics().unload(topic);",
          "111:         tenantManagerAdmin.topics().triggerCompaction(topic);",
          "112:         tenantManagerAdmin.topics().trimTopic(TopicName.get(topic).getPartition(0).getLocalName());",
          "113:         tenantManagerAdmin.topicPolicies().getSchemaCompatibilityStrategy(topic, false);",
          "116:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "117:                 () -> subAdmin.topics().unload(topic));",
          "119:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "120:                 () -> subAdmin.topics().triggerCompaction(topic));",
          "122:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "123:                 () -> subAdmin.topics().trimTopic(TopicName.get(topic).getPartition(0).getLocalName()));",
          "125:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "126:                 () -> subAdmin.topicPolicies().getSchemaCompatibilityStrategy(topic, false));",
          "129:         for (AuthAction action : AuthAction.values()) {",
          "130:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
          "132:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "133:                     () -> subAdmin.topics().unload(topic));",
          "135:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "136:                     () -> subAdmin.topics().triggerCompaction(topic));",
          "138:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "139:                     () -> subAdmin.topics().trimTopic(topic));",
          "141:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "142:                     () -> subAdmin.topicPolicies().getSchemaCompatibilityStrategy(topic, false));",
          "144:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "145:         }",
          "146:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
          "147:     }",
          "149:     @Test",
          "150:     @SneakyThrows",
          "151:     public void testGetManagedLedgerInfo() {",
          "152:         final String random = UUID.randomUUID().toString();",
          "153:         final String topic = \"persistent://public/default/\" + random;",
          "154:         final String subject =  UUID.randomUUID().toString();",
          "155:         final String token = Jwts.builder()",
          "156:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "157:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
          "159:         @Cleanup",
          "160:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "161:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
          "162:                 .authentication(new AuthenticationToken(token))",
          "163:                 .build();",
          "165:         superUserAdmin.topics().getInternalInfo(topic);",
          "168:         tenantManagerAdmin.topics().getInternalInfo(topic);",
          "171:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "172:                 () -> subAdmin.topics().getInternalInfo(topic));",
          "174:         for (AuthAction action : AuthAction.values()) {",
          "175:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
          "176:             if (action == AuthAction.produce || action == AuthAction.consume) {",
          "177:                 subAdmin.topics().getInternalInfo(topic);",
          "178:             } else {",
          "179:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "180:                         () -> subAdmin.topics().getInternalInfo(topic));",
          "181:             }",
          "182:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "183:         }",
          "184:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
          "185:     }",
          "187:     @Test",
          "188:     @SneakyThrows",
          "189:     public void testGetPartitionedStatsAndInternalStats() {",
          "190:         final String random = UUID.randomUUID().toString();",
          "191:         final String topic = \"persistent://public/default/\" + random;",
          "192:         final String subject =  UUID.randomUUID().toString();",
          "193:         final String token = Jwts.builder()",
          "194:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "195:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
          "197:         @Cleanup",
          "198:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "199:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
          "200:                 .authentication(new AuthenticationToken(token))",
          "201:                 .build();",
          "203:         superUserAdmin.topics().getPartitionedStats(topic, false);",
          "204:         superUserAdmin.topics().getPartitionedInternalStats(topic);",
          "207:         tenantManagerAdmin.topics().getPartitionedStats(topic, false);",
          "208:         tenantManagerAdmin.topics().getPartitionedInternalStats(topic);",
          "211:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "212:                 () -> subAdmin.topics().getPartitionedStats(topic, false));",
          "214:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "215:                 () -> subAdmin.topics().getPartitionedInternalStats(topic));",
          "217:         for (AuthAction action : AuthAction.values()) {",
          "218:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
          "219:             if (action == AuthAction.produce || action == AuthAction.consume) {",
          "220:                 subAdmin.topics().getPartitionedStats(topic, false);",
          "221:                 subAdmin.topics().getPartitionedInternalStats(topic);",
          "222:             } else {",
          "223:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "224:                         () -> subAdmin.topics().getPartitionedStats(topic, false));",
          "226:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "227:                         () -> subAdmin.topics().getPartitionedInternalStats(topic));",
          "228:             }",
          "229:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "230:         }",
          "231:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
          "232:     }",
          "234:     @Test",
          "235:     @SneakyThrows",
          "236:     public void testCreateSubscriptionAndUpdateSubscriptionPropertiesAndAnalyzeSubscriptionBacklog() {",
          "237:         final String random = UUID.randomUUID().toString();",
          "238:         final String topic = \"persistent://public/default/\" + random;",
          "239:         final String subject =  UUID.randomUUID().toString();",
          "240:         final String token = Jwts.builder()",
          "241:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "242:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
          "243:         AtomicInteger suffix = new AtomicInteger(1);",
          "244:         @Cleanup",
          "245:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "246:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
          "247:                 .authentication(new AuthenticationToken(token))",
          "248:                 .build();",
          "250:         superUserAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest);",
          "253:         tenantManagerAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest);",
          "256:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "257:                 () -> subAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest));",
          "259:         for (AuthAction action : AuthAction.values()) {",
          "260:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
          "261:             if (action == AuthAction.consume) {",
          "262:                 subAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest);",
          "263:             } else {",
          "264:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "265:                         () -> subAdmin.topics().createSubscription(topic, \"test-sub\" + suffix.incrementAndGet(), MessageId.earliest));",
          "266:             }",
          "267:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "268:         }",
          "270:         Map<String, String> properties = new HashMap<>();",
          "271:         superUserAdmin.topics().createSubscription(topic, \"test-sub\", MessageId.earliest);",
          "273:         superUserAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\" , properties);",
          "274:         superUserAdmin.topics().getSubscriptionProperties(topic, \"test-sub\");",
          "275:         superUserAdmin.topics().analyzeSubscriptionBacklog(TopicName.get(topic).getPartition(0).getLocalName(), \"test-sub\", Optional.empty());",
          "278:         tenantManagerAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\" , properties);",
          "279:         tenantManagerAdmin.topics().getSubscriptionProperties(topic, \"test-sub\");",
          "280:         tenantManagerAdmin.topics().analyzeSubscriptionBacklog(TopicName.get(topic).getPartition(0).getLocalName(), \"test-sub\", Optional.empty());",
          "283:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "284:                 () -> subAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\", properties));",
          "286:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "287:                 () -> subAdmin.topics().getSubscriptionProperties(topic, \"test-sub\"));",
          "289:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "290:                 () -> subAdmin.topics().analyzeSubscriptionBacklog(TopicName.get(topic).getPartition(0).getLocalName(), \"test-sub\", Optional.empty()));",
          "292:         for (AuthAction action : AuthAction.values()) {",
          "293:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
          "294:             if (action == AuthAction.consume) {",
          "295:                 subAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\", properties);",
          "296:                 subAdmin.topics().getSubscriptionProperties(topic, \"test-sub\");",
          "297:                 subAdmin.topics().analyzeSubscriptionBacklog(TopicName.get(topic).getPartition(0).getLocalName(), \"test-sub\", Optional.empty());",
          "298:             } else {",
          "299:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "300:                         () -> subAdmin.topics().updateSubscriptionProperties(topic, \"test-sub\", properties));",
          "302:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "303:                         () -> subAdmin.topics().getSubscriptionProperties(topic, \"test-sub\"));",
          "305:                 Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "306:                         () -> subAdmin.topics().analyzeSubscriptionBacklog(TopicName.get(topic).getPartition(0).getLocalName(), \"test-sub\", Optional.empty()));",
          "307:             }",
          "308:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "309:         }",
          "310:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
          "311:     }",
          "313:     @Test",
          "314:     @SneakyThrows",
          "315:     public void testCreateMissingPartition() {",
          "316:         final String random = UUID.randomUUID().toString();",
          "317:         final String topic = \"persistent://public/default/\" + random;",
          "318:         final String subject =  UUID.randomUUID().toString();",
          "319:         final String token = Jwts.builder()",
          "320:                 .claim(\"sub\", subject).signWith(SECRET_KEY).compact();",
          "321:         superUserAdmin.topics().createPartitionedTopic(topic, 2);",
          "322:         AtomicInteger suffix = new AtomicInteger(1);",
          "323:         @Cleanup",
          "324:         final PulsarAdmin subAdmin = PulsarAdmin.builder()",
          "325:                 .serviceHttpUrl(getPulsarService().getWebServiceAddress())",
          "326:                 .authentication(new AuthenticationToken(token))",
          "327:                 .build();",
          "329:         superUserAdmin.topics().createMissedPartitions(topic);",
          "332:         tenantManagerAdmin.topics().createMissedPartitions(topic);",
          "334:         Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "335:                 () -> subAdmin.topics().createMissedPartitions(topic));",
          "337:         for (AuthAction action : AuthAction.values()) {",
          "338:             superUserAdmin.topics().grantPermission(topic, subject, Set.of(action));",
          "339:             Assert.assertThrows(PulsarAdminException.NotAuthorizedException.class,",
          "340:                     () -> subAdmin.topics().createMissedPartitions(topic));",
          "341:             superUserAdmin.topics().revokePermissions(topic, subject);",
          "342:         }",
          "343:         superUserAdmin.topics().deletePartitionedTopic(topic, true);",
          "344:     }",
          "345: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}